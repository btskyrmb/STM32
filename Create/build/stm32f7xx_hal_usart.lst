ARM GAS  /tmp/ccNV7zic.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_usart.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.USART_Transmit_IT,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	USART_Transmit_IT:
  26              	.LFB161:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_usart.c"
   1:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_usart.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @file    stm32f7xx_hal_usart.c
   4:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief   USART HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_usart.c ****   *          This file provides firmware functions to manage the following
   7:HALLIB/Src/stm32f7xx_hal_usart.c ****   *          functionalities of the Universal Synchronous/Asynchronous Receiver Transmitter
   8:HALLIB/Src/stm32f7xx_hal_usart.c ****   *          Peripheral (USART).
   9:HALLIB/Src/stm32f7xx_hal_usart.c ****   *           + Initialization and de-initialization functions
  10:HALLIB/Src/stm32f7xx_hal_usart.c ****   *           + IO operation functions
  11:HALLIB/Src/stm32f7xx_hal_usart.c ****   *           + Peripheral Control functions
  12:HALLIB/Src/stm32f7xx_hal_usart.c ****   *
  13:HALLIB/Src/stm32f7xx_hal_usart.c ****   @verbatim
  14:HALLIB/Src/stm32f7xx_hal_usart.c ****   ===============================================================================
  15:HALLIB/Src/stm32f7xx_hal_usart.c ****                         ##### How to use this driver #####
  16:HALLIB/Src/stm32f7xx_hal_usart.c ****  ===============================================================================
  17:HALLIB/Src/stm32f7xx_hal_usart.c ****     [..]
  18:HALLIB/Src/stm32f7xx_hal_usart.c ****       The USART HAL driver can be used as follows:
  19:HALLIB/Src/stm32f7xx_hal_usart.c **** 
  20:HALLIB/Src/stm32f7xx_hal_usart.c ****       (#) Declare a USART_HandleTypeDef handle structure.
  21:HALLIB/Src/stm32f7xx_hal_usart.c ****       (#) Initialize the USART low level resources by implement the HAL_USART_MspInit ()API:
  22:HALLIB/Src/stm32f7xx_hal_usart.c ****           (##) Enable the USARTx interface clock.
  23:HALLIB/Src/stm32f7xx_hal_usart.c ****           (##) USART pins configuration:
  24:HALLIB/Src/stm32f7xx_hal_usart.c ****             (+++) Enable the clock for the USART GPIOs.
  25:HALLIB/Src/stm32f7xx_hal_usart.c ****             (+++) Configure these USART pins as alternate function pull-up.
  26:HALLIB/Src/stm32f7xx_hal_usart.c ****           (##) NVIC configuration if you need to use interrupt process (HAL_USART_Transmit_IT(),
  27:HALLIB/Src/stm32f7xx_hal_usart.c ****                 HAL_USART_Receive_IT() and HAL_USART_TransmitReceive_IT() APIs):
  28:HALLIB/Src/stm32f7xx_hal_usart.c ****             (+++) Configure the USARTx interrupt priority.
  29:HALLIB/Src/stm32f7xx_hal_usart.c ****             (+++) Enable the NVIC USART IRQ handle.
  30:HALLIB/Src/stm32f7xx_hal_usart.c ****             (+++) The specific USART interrupts (Transmission complete interrupt,
  31:HALLIB/Src/stm32f7xx_hal_usart.c ****                   RXNE interrupt and Error Interrupts) will be managed using the macros
ARM GAS  /tmp/ccNV7zic.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_usart.c ****                   __HAL_USART_ENABLE_IT() and __HAL_USART_DISABLE_IT() inside the transmit and rece
  33:HALLIB/Src/stm32f7xx_hal_usart.c ****           (##) DMA Configuration if you need to use DMA process (HAL_USART_Transmit_DMA()
  34:HALLIB/Src/stm32f7xx_hal_usart.c ****                HAL_USART_Receive_IT() and HAL_USART_TransmitReceive_IT() APIs):
  35:HALLIB/Src/stm32f7xx_hal_usart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx stream.
  36:HALLIB/Src/stm32f7xx_hal_usart.c ****             (+++) Enable the DMAx interface clock.
  37:HALLIB/Src/stm32f7xx_hal_usart.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  38:HALLIB/Src/stm32f7xx_hal_usart.c ****             (+++) Configure the DMA Tx/Rx Stream.
  39:HALLIB/Src/stm32f7xx_hal_usart.c ****             (+++) Associate the initialized DMA handle to the USART DMA Tx/Rx handle.
  40:HALLIB/Src/stm32f7xx_hal_usart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  41:HALLIB/Src/stm32f7xx_hal_usart.c **** 
  42:HALLIB/Src/stm32f7xx_hal_usart.c ****       (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  43:HALLIB/Src/stm32f7xx_hal_usart.c ****           flow control and Mode(Receiver/Transmitter) in the husart Init structure.
  44:HALLIB/Src/stm32f7xx_hal_usart.c **** 
  45:HALLIB/Src/stm32f7xx_hal_usart.c ****       (#) Initialize the USART registers by calling the HAL_USART_Init() API:
  46:HALLIB/Src/stm32f7xx_hal_usart.c ****           (++) These API's configures also the low level Hardware (GPIO, CLOCK, CORTEX...etc)
  47:HALLIB/Src/stm32f7xx_hal_usart.c ****                by calling the customed HAL_USART_MspInit(&husart) API.
  48:HALLIB/Src/stm32f7xx_hal_usart.c **** 
  49:HALLIB/Src/stm32f7xx_hal_usart.c ****   @endverbatim
  50:HALLIB/Src/stm32f7xx_hal_usart.c ****   ******************************************************************************
  51:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @attention
  52:HALLIB/Src/stm32f7xx_hal_usart.c ****   *
  53:HALLIB/Src/stm32f7xx_hal_usart.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  54:HALLIB/Src/stm32f7xx_hal_usart.c ****   *
  55:HALLIB/Src/stm32f7xx_hal_usart.c ****   * Redistribution and use in source and binary forms, with or without modification,
  56:HALLIB/Src/stm32f7xx_hal_usart.c ****   * are permitted provided that the following conditions are met:
  57:HALLIB/Src/stm32f7xx_hal_usart.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  58:HALLIB/Src/stm32f7xx_hal_usart.c ****   *      this list of conditions and the following disclaimer.
  59:HALLIB/Src/stm32f7xx_hal_usart.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  60:HALLIB/Src/stm32f7xx_hal_usart.c ****   *      this list of conditions and the following disclaimer in the documentation
  61:HALLIB/Src/stm32f7xx_hal_usart.c ****   *      and/or other materials provided with the distribution.
  62:HALLIB/Src/stm32f7xx_hal_usart.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  63:HALLIB/Src/stm32f7xx_hal_usart.c ****   *      may be used to endorse or promote products derived from this software
  64:HALLIB/Src/stm32f7xx_hal_usart.c ****   *      without specific prior written permission.
  65:HALLIB/Src/stm32f7xx_hal_usart.c ****   *
  66:HALLIB/Src/stm32f7xx_hal_usart.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  67:HALLIB/Src/stm32f7xx_hal_usart.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  68:HALLIB/Src/stm32f7xx_hal_usart.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  69:HALLIB/Src/stm32f7xx_hal_usart.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  70:HALLIB/Src/stm32f7xx_hal_usart.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  71:HALLIB/Src/stm32f7xx_hal_usart.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  72:HALLIB/Src/stm32f7xx_hal_usart.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  73:HALLIB/Src/stm32f7xx_hal_usart.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  74:HALLIB/Src/stm32f7xx_hal_usart.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  75:HALLIB/Src/stm32f7xx_hal_usart.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  76:HALLIB/Src/stm32f7xx_hal_usart.c ****   *
  77:HALLIB/Src/stm32f7xx_hal_usart.c ****   ******************************************************************************
  78:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
  79:HALLIB/Src/stm32f7xx_hal_usart.c **** 
  80:HALLIB/Src/stm32f7xx_hal_usart.c **** /* Includes ------------------------------------------------------------------*/
  81:HALLIB/Src/stm32f7xx_hal_usart.c **** #include "stm32f7xx_hal.h"
  82:HALLIB/Src/stm32f7xx_hal_usart.c **** 
  83:HALLIB/Src/stm32f7xx_hal_usart.c **** /** @addtogroup STM32F7xx_HAL_Driver
  84:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @{
  85:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
  86:HALLIB/Src/stm32f7xx_hal_usart.c **** 
  87:HALLIB/Src/stm32f7xx_hal_usart.c **** /** @defgroup USART USART
  88:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief HAL USART Synchronous module driver
ARM GAS  /tmp/ccNV7zic.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @{
  90:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
  91:HALLIB/Src/stm32f7xx_hal_usart.c **** 
  92:HALLIB/Src/stm32f7xx_hal_usart.c **** #ifdef HAL_USART_MODULE_ENABLED
  93:HALLIB/Src/stm32f7xx_hal_usart.c **** 
  94:HALLIB/Src/stm32f7xx_hal_usart.c **** /* Private typedef -----------------------------------------------------------*/
  95:HALLIB/Src/stm32f7xx_hal_usart.c **** /* Private define ------------------------------------------------------------*/
  96:HALLIB/Src/stm32f7xx_hal_usart.c **** /** @addtogroup USART_Private_Constants
  97:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @{
  98:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
  99:HALLIB/Src/stm32f7xx_hal_usart.c **** #define DUMMY_DATA                             ((uint16_t) 0xFFFFU)
 100:HALLIB/Src/stm32f7xx_hal_usart.c **** #define TEACK_REACK_TIMEOUT                    ((uint32_t) 1000U)
 101:HALLIB/Src/stm32f7xx_hal_usart.c **** #define USART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 102:HALLIB/Src/stm32f7xx_hal_usart.c ****                                      USART_CR1_TE | USART_CR1_RE  | USART_CR1_OVER8))
 103:HALLIB/Src/stm32f7xx_hal_usart.c **** #define USART_CR2_FIELDS       ((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | \
 104:HALLIB/Src/stm32f7xx_hal_usart.c ****                             USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP))
 105:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 106:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @}
 107:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 108:HALLIB/Src/stm32f7xx_hal_usart.c **** /* Private macro -------------------------------------------------------------*/
 109:HALLIB/Src/stm32f7xx_hal_usart.c **** /* Private variables ---------------------------------------------------------*/
 110:HALLIB/Src/stm32f7xx_hal_usart.c **** /* Private function prototypes -----------------------------------------------*/
 111:HALLIB/Src/stm32f7xx_hal_usart.c **** /* Private functions ---------------------------------------------------------*/
 112:HALLIB/Src/stm32f7xx_hal_usart.c **** /** @addtogroup USART_Private_Functions
 113:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @{
 114:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 115:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 116:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 117:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 118:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 119:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMAError(DMA_HandleTypeDef *hdma);
 120:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 121:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_EndTxTransfer(USART_HandleTypeDef *husart);
 122:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_EndRxTransfer(USART_HandleTypeDef *husart);
 123:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, F
 124:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart);
 125:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart);
 126:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart);
 127:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart);
 128:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart);
 129:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart);
 130:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 131:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 132:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @}
 133:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 134:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 135:HALLIB/Src/stm32f7xx_hal_usart.c **** /* Exported functions --------------------------------------------------------*/
 136:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 137:HALLIB/Src/stm32f7xx_hal_usart.c **** /** @defgroup USART_Exported_Functions USART Exported Functions
 138:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @{
 139:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 140:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 141:HALLIB/Src/stm32f7xx_hal_usart.c **** /** @defgroup USART_Exported_Functions_Group1 USART Initialization and de-initialization functions
 142:HALLIB/Src/stm32f7xx_hal_usart.c ****   *  @brief    Initialization and Configuration functions
 143:HALLIB/Src/stm32f7xx_hal_usart.c ****   *
 144:HALLIB/Src/stm32f7xx_hal_usart.c **** @verbatim
 145:HALLIB/Src/stm32f7xx_hal_usart.c ****  ===============================================================================
ARM GAS  /tmp/ccNV7zic.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_usart.c ****             ##### Initialization and Configuration functions #####
 147:HALLIB/Src/stm32f7xx_hal_usart.c ****  ===============================================================================
 148:HALLIB/Src/stm32f7xx_hal_usart.c ****     [..]
 149:HALLIB/Src/stm32f7xx_hal_usart.c ****     This subsection provides a set of functions allowing to initialize the USART
 150:HALLIB/Src/stm32f7xx_hal_usart.c ****     in asynchronous and in synchronous modes.
 151:HALLIB/Src/stm32f7xx_hal_usart.c ****       (+) For the asynchronous mode only these parameters can be configured:
 152:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) Baud Rate
 153:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) Word Length
 154:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) Stop Bit
 155:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 156:HALLIB/Src/stm32f7xx_hal_usart.c ****              in the data register is transmitted but is changed by the parity bit.
 157:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) USART polarity
 158:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) USART phase
 159:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) USART LastBit
 160:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) Receiver/transmitter modes
 161:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 162:HALLIB/Src/stm32f7xx_hal_usart.c ****     [..]
 163:HALLIB/Src/stm32f7xx_hal_usart.c ****     The HAL_USART_Init() function follows the USART  synchronous configuration
 164:HALLIB/Src/stm32f7xx_hal_usart.c ****     procedure (details for the procedure are available in reference manual).
 165:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 166:HALLIB/Src/stm32f7xx_hal_usart.c **** @endverbatim
 167:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 168:HALLIB/Src/stm32f7xx_hal_usart.c ****    Depending on the frame length defined by the M1 and M0 bits (7-bit,
 169:HALLIB/Src/stm32f7xx_hal_usart.c ****    8-bit or 9-bit), the possible USART frame formats are as listed in the
 170:HALLIB/Src/stm32f7xx_hal_usart.c ****    following table:
 171:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 172:HALLIB/Src/stm32f7xx_hal_usart.c ****      +---------------------------------------------------------------+
 173:HALLIB/Src/stm32f7xx_hal_usart.c ****      | M1M0 bits |  PCE bit  |            USART frame                |
 174:HALLIB/Src/stm32f7xx_hal_usart.c ****      |-----------------------|---------------------------------------|
 175:HALLIB/Src/stm32f7xx_hal_usart.c ****      |     10    |     0     |    | SB | 7-bit data | STB |          |
 176:HALLIB/Src/stm32f7xx_hal_usart.c ****      |-----------|-----------|---------------------------------------|
 177:HALLIB/Src/stm32f7xx_hal_usart.c ****      |     10    |     1     |    | SB | 6-bit data | PB | STB |     |
 178:HALLIB/Src/stm32f7xx_hal_usart.c ****      +---------------------------------------------------------------+
 179:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 180:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @{
 181:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 182:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 183:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 184:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  Initializes the USART mode according to the specified
 185:HALLIB/Src/stm32f7xx_hal_usart.c ****   *         parameters in the USART_InitTypeDef and create the associated handle.
 186:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
 187:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
 188:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 189:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
 190:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 191:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Check the USART handle allocation */
 192:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart == NULL)
 193:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 194:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_ERROR;
 195:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 196:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 197:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Check the parameters */
 198:HALLIB/Src/stm32f7xx_hal_usart.c ****   assert_param(IS_USART_INSTANCE(husart->Instance));
 199:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 200:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_RESET)
 201:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 202:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Allocate lock resource and initialize it */
ARM GAS  /tmp/ccNV7zic.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->Lock = HAL_UNLOCKED;
 204:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 205:HALLIB/Src/stm32f7xx_hal_usart.c ****     HAL_USART_MspInit(husart);
 206:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 207:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 208:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->State = HAL_USART_STATE_BUSY;
 209:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 210:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Disable the Peripheral */
 211:HALLIB/Src/stm32f7xx_hal_usart.c ****   __HAL_USART_DISABLE(husart);
 212:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 213:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Set the Usart Communication parameters */
 214:HALLIB/Src/stm32f7xx_hal_usart.c ****   if (USART_SetConfig(husart) == HAL_ERROR)
 215:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 216:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_ERROR;
 217:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 218:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 219:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* In Synchronous mode, the following bits must be kept cleared:
 220:HALLIB/Src/stm32f7xx_hal_usart.c ****   - LINEN bit in the USART_CR2 register
 221:HALLIB/Src/stm32f7xx_hal_usart.c ****   - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
 222:HALLIB/Src/stm32f7xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 223:HALLIB/Src/stm32f7xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 224:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 225:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Enable the Peripheral */
 226:HALLIB/Src/stm32f7xx_hal_usart.c ****   __HAL_USART_ENABLE(husart);
 227:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 228:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* TEACK and/or REACK to check before moving husart->State to Ready */
 229:HALLIB/Src/stm32f7xx_hal_usart.c ****   return (USART_CheckIdleState(husart));
 230:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 231:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 232:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 233:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief DeInitializes the USART peripheral
 234:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
 235:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
 236:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 237:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_DeInit(USART_HandleTypeDef *husart)
 238:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 239:HALLIB/Src/stm32f7xx_hal_usart.c ****    /* Check the USART handle allocation */
 240:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart == NULL)
 241:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 242:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_ERROR;
 243:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 244:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 245:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Check the parameters */
 246:HALLIB/Src/stm32f7xx_hal_usart.c ****   assert_param(IS_USART_INSTANCE(husart->Instance));
 247:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 248:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->State = HAL_USART_STATE_BUSY;
 249:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 250:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->Instance->CR1 = 0x0U;
 251:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->Instance->CR2 = 0x0U;
 252:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->Instance->CR3 = 0x0U;
 253:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 254:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* DeInit the low level hardware */
 255:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_USART_MspDeInit(husart);
 256:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 257:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->ErrorCode = HAL_USART_ERROR_NONE;
 258:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->State = HAL_USART_STATE_RESET;
 259:HALLIB/Src/stm32f7xx_hal_usart.c **** 
ARM GAS  /tmp/ccNV7zic.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Process Unlock */
 261:HALLIB/Src/stm32f7xx_hal_usart.c ****   __HAL_UNLOCK(husart);
 262:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 263:HALLIB/Src/stm32f7xx_hal_usart.c ****   return HAL_OK;
 264:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 265:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 266:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 267:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief USART MSP Init
 268:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
 269:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
 270:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 271:HALLIB/Src/stm32f7xx_hal_usart.c ****  __weak void HAL_USART_MspInit(USART_HandleTypeDef *husart)
 272:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 273:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 274:HALLIB/Src/stm32f7xx_hal_usart.c ****   UNUSED(husart);
 275:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 276:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 277:HALLIB/Src/stm32f7xx_hal_usart.c ****             the HAL_USART_MspInit can be implemented in the user file
 278:HALLIB/Src/stm32f7xx_hal_usart.c ****    */
 279:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 280:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 281:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 282:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief USART MSP DeInit
 283:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
 284:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
 285:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 286:HALLIB/Src/stm32f7xx_hal_usart.c ****  __weak void HAL_USART_MspDeInit(USART_HandleTypeDef *husart)
 287:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 288:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 289:HALLIB/Src/stm32f7xx_hal_usart.c ****   UNUSED(husart);
 290:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 291:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 292:HALLIB/Src/stm32f7xx_hal_usart.c ****             the HAL_USART_MspDeInit can be implemented in the user file
 293:HALLIB/Src/stm32f7xx_hal_usart.c ****    */
 294:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 295:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 296:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 297:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @}
 298:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 299:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 300:HALLIB/Src/stm32f7xx_hal_usart.c **** /** @defgroup USART_Exported_Functions_Group2 IO operation functions
 301:HALLIB/Src/stm32f7xx_hal_usart.c ****   *  @brief   USART Transmit and Receive functions
 302:HALLIB/Src/stm32f7xx_hal_usart.c ****   *
 303:HALLIB/Src/stm32f7xx_hal_usart.c **** @verbatim
 304:HALLIB/Src/stm32f7xx_hal_usart.c ****  ===============================================================================
 305:HALLIB/Src/stm32f7xx_hal_usart.c ****                       ##### IO operation functions #####
 306:HALLIB/Src/stm32f7xx_hal_usart.c ****  ===============================================================================
 307:HALLIB/Src/stm32f7xx_hal_usart.c ****     This subsection provides a set of functions allowing to manage the USART synchronous
 308:HALLIB/Src/stm32f7xx_hal_usart.c ****     data transfers.
 309:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 310:HALLIB/Src/stm32f7xx_hal_usart.c ****     [..] The USART supports master mode only: it cannot receive or send data related to an input
 311:HALLIB/Src/stm32f7xx_hal_usart.c ****          clock (SCLK is always an output).
 312:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 313:HALLIB/Src/stm32f7xx_hal_usart.c ****     (#) There are two mode of transfer:
 314:HALLIB/Src/stm32f7xx_hal_usart.c ****        (++) Blocking mode: The communication is performed in polling mode.
 315:HALLIB/Src/stm32f7xx_hal_usart.c ****             The HAL status of all data processing is returned by the same function
 316:HALLIB/Src/stm32f7xx_hal_usart.c ****             after finishing transfer.
ARM GAS  /tmp/ccNV7zic.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_usart.c ****        (++) No-Blocking mode: The communication is performed using Interrupts
 318:HALLIB/Src/stm32f7xx_hal_usart.c ****            or DMA, These API's return the HAL status.
 319:HALLIB/Src/stm32f7xx_hal_usart.c ****            The end of the data processing will be indicated through the
 320:HALLIB/Src/stm32f7xx_hal_usart.c ****            dedicated USART IRQ when using Interrupt mode or the DMA IRQ when
 321:HALLIB/Src/stm32f7xx_hal_usart.c ****            using DMA mode.
 322:HALLIB/Src/stm32f7xx_hal_usart.c ****            The HAL_USART_TxCpltCallback(), HAL_USART_RxCpltCallback() and HAL_USART_TxRxCpltCallbac
 323:HALLIB/Src/stm32f7xx_hal_usart.c ****            will be executed respectively at the end of the transmit or Receive process
 324:HALLIB/Src/stm32f7xx_hal_usart.c ****            The HAL_USART_ErrorCallback()user callback will be executed when a communication error i
 325:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 326:HALLIB/Src/stm32f7xx_hal_usart.c ****     (#) Blocking mode API's are :
 327:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_Transmit()in simplex mode
 328:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_Receive() in full duplex receive only
 329:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_TransmitReceive() in full duplex mode
 330:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 331:HALLIB/Src/stm32f7xx_hal_usart.c ****     (#) Non-Blocking mode API's with Interrupt are :
 332:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_Transmit_IT()in simplex mode
 333:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_Receive_IT() in full duplex receive only
 334:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_TransmitReceive_IT()in full duplex mode
 335:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_IRQHandler()
 336:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 337:HALLIB/Src/stm32f7xx_hal_usart.c ****     (#) No-Blocking mode functions with DMA are :
 338:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_Transmit_DMA()in simplex mode
 339:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_Receive_DMA() in full duplex receive only
 340:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_TransmitReceive_DMA() in full duplex mode
 341:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_DMAPause()
 342:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_DMAResume()
 343:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_DMAStop()
 344:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 345:HALLIB/Src/stm32f7xx_hal_usart.c ****     (#) A set of Transfer Complete Callbacks are provided in No_Blocking mode:
 346:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_TxCpltCallback()
 347:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_RxCpltCallback()
 348:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_TxHalfCpltCallback()
 349:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_RxHalfCpltCallback()
 350:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_ErrorCallback()
 351:HALLIB/Src/stm32f7xx_hal_usart.c ****         (++) HAL_USART_TxRxCpltCallback()
 352:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 353:HALLIB/Src/stm32f7xx_hal_usart.c **** @endverbatim
 354:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @{
 355:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 356:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 357:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 358:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  Simplex Send an amount of data in blocking mode
 359:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart USART handle
 360:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pTxData pointer to data buffer
 361:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Size amount of data to be sent
 362:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Timeout  Timeout duration
 363:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
 364:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 365:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, 
 366:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 367:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
 368:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t tickstart = 0U;
 369:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 370:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_READY)
 371:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 372:HALLIB/Src/stm32f7xx_hal_usart.c ****     if((pTxData == NULL) || (Size == 0U))
 373:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
ARM GAS  /tmp/ccNV7zic.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_usart.c ****       return  HAL_ERROR;
 375:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 376:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 377:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Locked */
 378:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_LOCK(husart);
 379:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 380:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 381:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 382:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 383:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Init tickstart for timeout managment*/
 384:HALLIB/Src/stm32f7xx_hal_usart.c ****     tickstart = HAL_GetTick();
 385:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 386:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 387:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferCount = Size;
 388:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 389:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Check the remaining data to be sent */
 390:HALLIB/Src/stm32f7xx_hal_usart.c ****     while(husart->TxXferCount > 0U)
 391:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 392:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->TxXferCount--;
 393:HALLIB/Src/stm32f7xx_hal_usart.c ****       if(USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 394:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
 395:HALLIB/Src/stm32f7xx_hal_usart.c ****           return HAL_TIMEOUT;
 396:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
 397:HALLIB/Src/stm32f7xx_hal_usart.c ****       if((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_N
 398:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 399:HALLIB/Src/stm32f7xx_hal_usart.c ****         tmp = (uint16_t*) pTxData;
 400:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 401:HALLIB/Src/stm32f7xx_hal_usart.c ****         pTxData += 2;
 402:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 403:HALLIB/Src/stm32f7xx_hal_usart.c ****       else
 404:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 405:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->Instance->TDR = (*pTxData++ & (uint8_t)0xFFU);
 406:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 407:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 408:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 409:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 410:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 411:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_TIMEOUT;
 412:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 413:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 414:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_READY;
 415:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 416:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Unlocked */
 417:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_UNLOCK(husart);
 418:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 419:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_OK;
 420:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 421:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
 422:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 423:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
 424:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 425:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 426:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 427:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 428:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Receive an amount of data in blocking mode
 429:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @note To receive synchronous data, dummy data are simultaneously transmitted
 430:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
ARM GAS  /tmp/ccNV7zic.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pRxData pointer to data buffer
 432:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Size amount of data to be received
 433:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Timeout  Timeout duration
 434:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
 435:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 436:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, u
 437:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 438:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
 439:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t uhMask;
 440:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t tickstart = 0U;
 441:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 442:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_READY)
 443:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 444:HALLIB/Src/stm32f7xx_hal_usart.c ****     if((pRxData == NULL) || (Size == 0U))
 445:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 446:HALLIB/Src/stm32f7xx_hal_usart.c ****       return  HAL_ERROR;
 447:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 448:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Locked */
 449:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_LOCK(husart);
 450:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 451:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 452:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 453:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 454:HALLIB/Src/stm32f7xx_hal_usart.c **** 	/* Init tickstart for timeout managment*/
 455:HALLIB/Src/stm32f7xx_hal_usart.c ****     tickstart = HAL_GetTick();
 456:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 457:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferSize = Size;
 458:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferCount = Size;
 459:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 460:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Computation of USART mask to apply to RDR register */
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_USART_MASK_COMPUTATION(husart);
 462:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 463:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 464:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* as long as data have to be received */
 465:HALLIB/Src/stm32f7xx_hal_usart.c ****     while(husart->RxXferCount > 0U)
 466:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 467:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->RxXferCount--;
 468:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 469:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Wait until TC flag is set to send dummy byte in order to generate the
 470:HALLIB/Src/stm32f7xx_hal_usart.c ****       * clock for the slave to send data.
 471:HALLIB/Src/stm32f7xx_hal_usart.c ****        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
 472:HALLIB/Src/stm32f7xx_hal_usart.c ****        * can be written for all the cases. */
 473:HALLIB/Src/stm32f7xx_hal_usart.c ****       if(USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 474:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 475:HALLIB/Src/stm32f7xx_hal_usart.c ****         return HAL_TIMEOUT;
 476:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 477:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->Instance->TDR = (DUMMY_DATA & (uint16_t)0x0FFU);
 478:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 479:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Wait for RXNE Flag */
 480:HALLIB/Src/stm32f7xx_hal_usart.c ****       if(USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
 481:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 482:HALLIB/Src/stm32f7xx_hal_usart.c ****         return HAL_TIMEOUT;
 483:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 484:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 485:HALLIB/Src/stm32f7xx_hal_usart.c ****       if((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_N
 486:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 487:HALLIB/Src/stm32f7xx_hal_usart.c ****         tmp = (uint16_t*) pRxData ;
ARM GAS  /tmp/ccNV7zic.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_usart.c ****         *tmp = (uint16_t)(husart->Instance->RDR & uhMask);
 489:HALLIB/Src/stm32f7xx_hal_usart.c ****         pRxData +=2;
 490:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 491:HALLIB/Src/stm32f7xx_hal_usart.c ****       else
 492:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 493:HALLIB/Src/stm32f7xx_hal_usart.c ****         *pRxData++ = (uint8_t)(husart->Instance->RDR & (uint8_t)uhMask);
 494:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 495:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 496:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 497:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_READY;
 498:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 499:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Unlocked */
 500:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_UNLOCK(husart);
 501:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 502:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_OK;
 503:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 504:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
 505:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 506:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
 507:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 508:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 509:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 510:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 511:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Full-Duplex Send and Receive an amount of data in blocking mode
 512:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
 513:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pTxData pointer to TX data buffer
 514:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pRxData pointer to RX data buffer
 515:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Size amount of data to be sent (same amount to be received)
 516:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Timeout  Timeout duration
 517:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
 518:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 519:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_TransmitReceive(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t 
 520:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 521:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
 522:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t uhMask;
 523:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t tickstart = 0U;
 524:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 525:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_READY)
 526:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 527:HALLIB/Src/stm32f7xx_hal_usart.c ****     if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 528:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 529:HALLIB/Src/stm32f7xx_hal_usart.c ****       return  HAL_ERROR;
 530:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 531:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Locked */
 532:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_LOCK(husart);
 533:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 534:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 535:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 536:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 537:HALLIB/Src/stm32f7xx_hal_usart.c **** 	/* Init tickstart for timeout managment*/
 538:HALLIB/Src/stm32f7xx_hal_usart.c ****     tickstart = HAL_GetTick();
 539:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 540:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferSize = Size;
 541:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 542:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferCount = Size;
 543:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferCount = Size;
 544:HALLIB/Src/stm32f7xx_hal_usart.c **** 
ARM GAS  /tmp/ccNV7zic.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Computation of USART mask to apply to RDR register */
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_USART_MASK_COMPUTATION(husart);
 547:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 548:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 549:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Check the remain data to be sent */
 550:HALLIB/Src/stm32f7xx_hal_usart.c ****     while(husart->TxXferCount > 0)
 551:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 552:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->TxXferCount--;
 553:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->RxXferCount--;
 554:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 555:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Wait until TC flag is set to send data */
 556:HALLIB/Src/stm32f7xx_hal_usart.c ****       if(USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 557:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 558:HALLIB/Src/stm32f7xx_hal_usart.c ****         return HAL_TIMEOUT;
 559:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 560:HALLIB/Src/stm32f7xx_hal_usart.c ****       if((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_N
 561:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 562:HALLIB/Src/stm32f7xx_hal_usart.c ****         tmp = (uint16_t*) pTxData;
 563:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->Instance->TDR = (*tmp & uhMask);
 564:HALLIB/Src/stm32f7xx_hal_usart.c ****         pTxData += 2;
 565:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 566:HALLIB/Src/stm32f7xx_hal_usart.c ****       else
 567:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 568:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->Instance->TDR = (*pTxData++ & (uint8_t)uhMask);
 569:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 570:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 571:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Wait for RXNE Flag */
 572:HALLIB/Src/stm32f7xx_hal_usart.c ****       if(USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
 573:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 574:HALLIB/Src/stm32f7xx_hal_usart.c ****         return HAL_TIMEOUT;
 575:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 576:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 577:HALLIB/Src/stm32f7xx_hal_usart.c ****       if((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_N
 578:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 579:HALLIB/Src/stm32f7xx_hal_usart.c ****         tmp = (uint16_t*) pRxData ;
 580:HALLIB/Src/stm32f7xx_hal_usart.c ****         *tmp = (uint16_t)(husart->Instance->RDR & uhMask);
 581:HALLIB/Src/stm32f7xx_hal_usart.c ****         pRxData +=2U;
 582:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 583:HALLIB/Src/stm32f7xx_hal_usart.c ****       else
 584:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 585:HALLIB/Src/stm32f7xx_hal_usart.c ****         *pRxData++ = (uint8_t)(husart->Instance->RDR & (uint8_t)uhMask);
 586:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 587:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 588:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 589:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_READY;
 590:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 591:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Unlocked */
 592:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_UNLOCK(husart);
 593:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 594:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_OK;
 595:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 596:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
 597:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 598:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
 599:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 600:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 601:HALLIB/Src/stm32f7xx_hal_usart.c **** 
ARM GAS  /tmp/ccNV7zic.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 603:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  Send an amount of data in interrupt mode
 604:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart USART handle
 605:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pTxData pointer to data buffer
 606:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Size amount of data to be sent
 607:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
 608:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 609:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Siz
 610:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 611:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_READY)
 612:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 613:HALLIB/Src/stm32f7xx_hal_usart.c ****     if((pTxData == NULL ) || (Size == 0U))
 614:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 615:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_ERROR;
 616:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 617:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 618:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Locked */
 619:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_LOCK(husart);
 620:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 621:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
 622:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 623:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferCount = Size;
 624:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 625:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 626:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 627:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 628:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* The USART Error Interrupts: (Frame error, noise error, overrun error)
 629:HALLIB/Src/stm32f7xx_hal_usart.c ****     are not managed by the USART Transmit Process to avoid the overrun interrupt
 630:HALLIB/Src/stm32f7xx_hal_usart.c ****     when the usart mode is configured for transmit and receive "USART_MODE_TX_RX"
 631:HALLIB/Src/stm32f7xx_hal_usart.c ****     to benefit for the frame error and noise interrupts the usart mode should be
 632:HALLIB/Src/stm32f7xx_hal_usart.c ****     configured only for transmit "USART_MODE_TX" */
 633:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 634:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Unlocked */
 635:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_UNLOCK(husart);
 636:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 637:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Transmit Data Register Empty Interrupt */
 638:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_USART_ENABLE_IT(husart, USART_IT_TXE);
 639:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 640:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_OK;
 641:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 642:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
 643:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 644:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
 645:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 646:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 647:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 648:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 649:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Receive an amount of data in blocking mode
 650:HALLIB/Src/stm32f7xx_hal_usart.c ****   *        To receive synchronous data, dummy data are simultaneously transmitted
 651:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
 652:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pRxData pointer to data buffer
 653:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Size amount of data to be received
 654:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
 655:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 656:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size
 657:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 658:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_READY)
ARM GAS  /tmp/ccNV7zic.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 660:HALLIB/Src/stm32f7xx_hal_usart.c ****     if((pRxData == NULL ) || (Size == 0U))
 661:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 662:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_ERROR;
 663:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 664:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Locked */
 665:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_LOCK(husart);
 666:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 667:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pRxBuffPtr = pRxData;
 668:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferSize = Size;
 669:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferCount = Size;
 670:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 671:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_USART_MASK_COMPUTATION(husart);
 672:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 673:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 674:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 675:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 676:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Parity Error and Data Register not empty Interrupts */
 677:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 678:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 679:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
 680:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 681:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 682:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Unlocked */
 683:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_UNLOCK(husart);
 684:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 685:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 686:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Send dummy byte in order to generate the clock for the Slave to send the next data */
 687:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 688:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 689:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->Instance->TDR = (DUMMY_DATA & (uint16_t)0x01FFU);
 690:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 691:HALLIB/Src/stm32f7xx_hal_usart.c ****     else
 692:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 693:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->Instance->TDR = (DUMMY_DATA & (uint16_t)0x00FFU);
 694:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 695:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 696:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_OK;
 697:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 698:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
 699:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 700:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
 701:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 702:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 703:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 704:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 705:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Full-Duplex Send and Receive an amount of data in interrupt mode
 706:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
 707:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pTxData pointer to TX data buffer
 708:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pRxData pointer to RX data buffer
 709:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Size amount of data to be sent (same amount to be received)
 710:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
 711:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 712:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_TransmitReceive_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8
 713:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 714:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 715:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_READY)
ARM GAS  /tmp/ccNV7zic.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 717:HALLIB/Src/stm32f7xx_hal_usart.c ****     if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 718:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 719:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_ERROR;
 720:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 721:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Locked */
 722:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_LOCK(husart);
 723:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 724:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pRxBuffPtr = pRxData;
 725:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferSize = Size;
 726:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferCount = Size;
 727:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
 728:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 729:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferCount = Size;
 730:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 731:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Computation of USART mask to apply to RDR register */
 732:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_USART_MASK_COMPUTATION(husart);
 733:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 734:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 735:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX_RX;
 736:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 737:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Data Register not empty Interrupt */
 738:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 739:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 740:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Parity Error Interrupt */
 741:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 742:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 743:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
 744:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 745:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 746:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Unlocked */
 747:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_UNLOCK(husart);
 748:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 749:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Transmit Data Register Empty Interrupt */
 750:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_USART_ENABLE_IT(husart, USART_IT_TXE);
 751:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 752:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_OK;
 753:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 754:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
 755:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 756:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
 757:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 758:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 759:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 760:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 761:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Send an amount of data in DMA mode
 762:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
 763:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pTxData pointer to data buffer
 764:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Size amount of data to be sent
 765:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
 766:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 767:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Si
 768:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 769:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t *tmp;
 770:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 771:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_READY)
 772:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
ARM GAS  /tmp/ccNV7zic.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_usart.c ****     if((pTxData == NULL ) || (Size == 0U))
 774:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 775:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_ERROR;
 776:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 777:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Locked */
 778:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_LOCK(husart);
 779:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 780:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
 781:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 782:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferCount = Size;
 783:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 784:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 785:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 786:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 787:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the USART DMA transfer complete callback */
 788:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 789:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 790:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the USART DMA Half transfer complete callback */
 791:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 792:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 793:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the DMA error callback */
 794:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmatx->XferErrorCallback = USART_DMAError;
 795:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 796:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
 797:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 798:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->ISR, (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE | USART_ISR_ORE));
 799:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 800:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART transmit DMA channel */
 801:HALLIB/Src/stm32f7xx_hal_usart.c ****     tmp = (uint32_t*)&pTxData;
 802:HALLIB/Src/stm32f7xx_hal_usart.c ****     HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t*)tmp, (uint32_t)&husart->Instance->TDR, Size);
 803:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 804:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
 805:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_USART_CLEAR_IT(husart, USART_FLAG_TC);
 806:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 807:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Unlocked */
 808:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_UNLOCK(husart);
 809:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 810:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
 811:HALLIB/Src/stm32f7xx_hal_usart.c ****        in the USART CR3 register */
 812:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 813:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 814:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_OK;
 815:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 816:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
 817:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 818:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
 819:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 820:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 821:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 822:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 823:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Receive an amount of data in DMA mode
 824:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
 825:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pRxData pointer to data buffer
 826:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Size amount of data to be received
 827:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @note   When the USART parity is enabled (PCE = 1), the received data contain
 828:HALLIB/Src/stm32f7xx_hal_usart.c ****   *         the parity bit (MSB position)
 829:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
ARM GAS  /tmp/ccNV7zic.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @note The USART DMA transmit stream must be configured in order to generate the clock for the s
 831:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 832:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_Receive_DMA(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Siz
 833:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 834:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t *tmp;
 835:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 836:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_READY)
 837:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 838:HALLIB/Src/stm32f7xx_hal_usart.c ****     if((pRxData == NULL ) || (Size == 0U))
 839:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 840:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_ERROR;
 841:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 842:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 843:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Locked */
 844:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_LOCK(husart);
 845:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 846:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pRxBuffPtr = pRxData;
 847:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferSize = Size;
 848:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pTxBuffPtr = pRxData;
 849:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 850:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 851:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 852:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 853:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 854:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the USART DMA Rx transfer complete callback */
 855:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmarx->XferCpltCallback = USART_DMAReceiveCplt;
 856:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 857:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the USART DMA Half transfer complete callback */
 858:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmarx->XferHalfCpltCallback = USART_DMARxHalfCplt;
 859:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 860:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the USART DMA Rx transfer error callback */
 861:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmarx->XferErrorCallback = USART_DMAError;
 862:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 863:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the DMA abort callback */
 864:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmatx->XferAbortCallback = NULL;
 865:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 866:HALLIB/Src/stm32f7xx_hal_usart.c **** 	/* Set the USART Tx DMA transfer complete callback as NULL because the communication closing
 867:HALLIB/Src/stm32f7xx_hal_usart.c ****     is performed in DMA reception complete callback  */
 868:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmatx->XferHalfCpltCallback = NULL;
 869:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmatx->XferCpltCallback = NULL;
 870:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 871:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the DMA error callback */
 872:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmatx->XferErrorCallback = USART_DMAError;
 873:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 874:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
 875:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 876:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->ISR, (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE | USART_ISR_ORE));
 877:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 878:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART receive DMA channel */
 879:HALLIB/Src/stm32f7xx_hal_usart.c ****     tmp = (uint32_t*)&pRxData;
 880:HALLIB/Src/stm32f7xx_hal_usart.c ****     HAL_DMA_Start_IT(husart->hdmarx, (uint32_t)&husart->Instance->RDR, *(uint32_t*)tmp, Size);
 881:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 882:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART transmit DMA channel: the transmit stream is used in order
 883:HALLIB/Src/stm32f7xx_hal_usart.c ****        to generate in the non-blocking mode the clock to the slave device,
 884:HALLIB/Src/stm32f7xx_hal_usart.c ****        this mode isn't a simplex receive mode but a full-duplex receive mode */
 885:HALLIB/Src/stm32f7xx_hal_usart.c ****     HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t*)tmp, (uint32_t)&husart->Instance->TDR, Size);
 886:HALLIB/Src/stm32f7xx_hal_usart.c **** 
ARM GAS  /tmp/ccNV7zic.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Unlocked */
 888:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_UNLOCK(husart);
 889:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 890:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Parity Error Interrupt */
 891:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 892:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 893:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
 894:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 895:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 896:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
 897:HALLIB/Src/stm32f7xx_hal_usart.c ****        in the USART CR3 register */
 898:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 899:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 900:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
 901:HALLIB/Src/stm32f7xx_hal_usart.c ****        in the USART CR3 register */
 902:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 903:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 904:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 905:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_OK;
 906:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 907:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
 908:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 909:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
 910:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 911:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 912:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 913:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
 914:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Full-Duplex Transmit Receive an amount of data in non blocking mode
 915:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
 916:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pTxData pointer to TX data buffer
 917:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param pRxData pointer to RX data buffer
 918:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param Size amount of data to be received/sent
 919:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @note   When the USART parity is enabled (PCE = 1) the data received contain the parity bit.
 920:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
 921:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
 922:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_TransmitReceive_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint
 923:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 924:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t *tmp;
 925:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 926:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_READY)
 927:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 928:HALLIB/Src/stm32f7xx_hal_usart.c ****     if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 929:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 930:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_ERROR;
 931:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 932:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Locked */
 933:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_LOCK(husart);
 934:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 935:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pRxBuffPtr = pRxData;
 936:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferSize = Size;
 937:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
 938:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 939:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 940:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->ErrorCode = HAL_USART_ERROR_NONE;
 941:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX_RX;
 942:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 943:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the USART DMA Rx transfer complete callback */
ARM GAS  /tmp/ccNV7zic.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmarx->XferCpltCallback = USART_DMAReceiveCplt;
 945:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 946:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the USART DMA Half transfer complete callback */
 947:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmarx->XferHalfCpltCallback = USART_DMARxHalfCplt;
 948:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 949:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the USART DMA Tx transfer complete callback */
 950:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 951:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 952:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the USART DMA Half transfer complete callback */
 953:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 954:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 955:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the USART DMA Tx transfer error callback */
 956:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmatx->XferErrorCallback = USART_DMAError;
 957:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 958:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Set the USART DMA Rx transfer error callback */
 959:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmarx->XferErrorCallback = USART_DMAError;
 960:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 961:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
 962:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 963:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->ISR, (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE | USART_ISR_ORE));
 964:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 965:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART receive DMA channel */
 966:HALLIB/Src/stm32f7xx_hal_usart.c ****     tmp = (uint32_t*)&pRxData;
 967:HALLIB/Src/stm32f7xx_hal_usart.c ****     HAL_DMA_Start_IT(husart->hdmarx, (uint32_t)&husart->Instance->RDR, *(uint32_t*)tmp, Size);
 968:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 969:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART transmit DMA channel */
 970:HALLIB/Src/stm32f7xx_hal_usart.c ****     tmp = (uint32_t*)&pTxData;
 971:HALLIB/Src/stm32f7xx_hal_usart.c ****     HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t*)tmp, (uint32_t)&husart->Instance->TDR, Size);
 972:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 973:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
 974:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_USART_CLEAR_IT(husart, USART_FLAG_TC);
 975:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 976:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Process Unlocked */
 977:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_UNLOCK(husart);
 978:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 979:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Parity Error Interrupt */
 980:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 981:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 982:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
 983:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 984:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 985:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
 986:HALLIB/Src/stm32f7xx_hal_usart.c ****        in the USART CR3 register */
 987:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 988:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 989:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
 990:HALLIB/Src/stm32f7xx_hal_usart.c ****        in the USART CR3 register */
 991:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 992:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 993:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_OK;
 994:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 995:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
 996:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 997:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
 998:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 999:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1000:HALLIB/Src/stm32f7xx_hal_usart.c **** 
ARM GAS  /tmp/ccNV7zic.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1002:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Pauses the DMA Transfer.
1003:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
1004:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1005:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1006:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_DMAPause(USART_HandleTypeDef *husart)
1007:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1008:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Process Locked */
1009:HALLIB/Src/stm32f7xx_hal_usart.c ****   __HAL_LOCK(husart);
1010:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1011:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_BUSY_TX)
1012:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1013:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Disable the USART DMA Tx request */
1014:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1015:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1016:HALLIB/Src/stm32f7xx_hal_usart.c ****   else if(husart->State == HAL_USART_STATE_BUSY_RX)
1017:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1018:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1019:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1020:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
1021:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Disable the USART DMA Rx request */
1022:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1023:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1024:HALLIB/Src/stm32f7xx_hal_usart.c ****   else if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
1025:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1026:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Disable the USART DMA Tx request */
1027:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1028:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Disable the USART DMA Rx request */
1029:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1030:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1031:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1032:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Process Unlocked */
1033:HALLIB/Src/stm32f7xx_hal_usart.c ****   __HAL_UNLOCK(husart);
1034:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1035:HALLIB/Src/stm32f7xx_hal_usart.c ****   return HAL_OK;
1036:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1037:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1038:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1039:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Resumes the DMA Transfer.
1040:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
1041:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1042:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1043:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_DMAResume(USART_HandleTypeDef *husart)
1044:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1045:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Process Locked */
1046:HALLIB/Src/stm32f7xx_hal_usart.c ****   __HAL_LOCK(husart);
1047:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1048:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_BUSY_TX)
1049:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1050:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART DMA Tx request */
1051:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1052:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1053:HALLIB/Src/stm32f7xx_hal_usart.c ****   else if(husart->State == HAL_USART_STATE_BUSY_RX)
1054:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1055:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1056:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
1057:HALLIB/Src/stm32f7xx_hal_usart.c **** 
ARM GAS  /tmp/ccNV7zic.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Reenable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1059:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1060:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
1061:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1062:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART DMA Rx request */
1063:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1064:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1065:HALLIB/Src/stm32f7xx_hal_usart.c ****   else if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
1066:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1067:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1068:HALLIB/Src/stm32f7xx_hal_usart.c ****     __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
1069:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1070:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART DMA Rx request  before the DMA Tx request */
1071:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1072:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1073:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Enable the USART DMA Tx request */
1074:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1075:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1076:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1077:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Process Unlocked */
1078:HALLIB/Src/stm32f7xx_hal_usart.c ****   __HAL_UNLOCK(husart);
1079:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1080:HALLIB/Src/stm32f7xx_hal_usart.c ****   return HAL_OK;
1081:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1082:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1083:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1084:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Stops the DMA Transfer.
1085:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
1086:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1087:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1088:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_StatusTypeDef HAL_USART_DMAStop(USART_HandleTypeDef *husart)
1089:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1090:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* The Lock is not implemented on this API to allow the user application
1091:HALLIB/Src/stm32f7xx_hal_usart.c ****      to call the HAL USART API under callbacks HAL_USART_TxCpltCallback() / HAL_USART_RxCpltCallbac
1092:HALLIB/Src/stm32f7xx_hal_usart.c ****      HAL_USART_TxHalfCpltCallback / HAL_USART_RxHalfCpltCallback:
1093:HALLIB/Src/stm32f7xx_hal_usart.c ****      indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
1094:HALLIB/Src/stm32f7xx_hal_usart.c ****      interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
1095:HALLIB/Src/stm32f7xx_hal_usart.c ****      the stream and the corresponding call back is executed. */
1096:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1097:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Stop USART DMA Tx request if ongoing */
1098:HALLIB/Src/stm32f7xx_hal_usart.c ****   if ((husart->State == HAL_USART_STATE_BUSY_TX) &&
1099:HALLIB/Src/stm32f7xx_hal_usart.c ****       (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT)))
1100:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1101:HALLIB/Src/stm32f7xx_hal_usart.c ****     USART_EndTxTransfer(husart);
1102:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1103:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Abort the USART DMA Tx channel */
1104:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->hdmatx != NULL)
1105:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1106:HALLIB/Src/stm32f7xx_hal_usart.c ****       HAL_DMA_Abort(husart->hdmatx);
1107:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1108:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1109:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Disable the USART Tx DMA request */
1110:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1111:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1112:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1113:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Stop USART DMA Rx request if ongoing */
1114:HALLIB/Src/stm32f7xx_hal_usart.c ****   if ((husart->State == HAL_USART_STATE_BUSY_RX) &&
ARM GAS  /tmp/ccNV7zic.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_usart.c ****       (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)))
1116:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1117:HALLIB/Src/stm32f7xx_hal_usart.c ****     USART_EndRxTransfer(husart);
1118:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1119:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Abort the USART DMA Rx channel */
1120:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->hdmarx != NULL)
1121:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1122:HALLIB/Src/stm32f7xx_hal_usart.c ****       HAL_DMA_Abort(husart->hdmarx);
1123:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1124:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1125:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Disable the USART Rx DMA request */
1126:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1127:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1128:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1129:HALLIB/Src/stm32f7xx_hal_usart.c ****   return HAL_OK;
1130:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1131:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1132:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1133:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  This function handles USART interrupt request.
1134:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart USART handle
1135:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1136:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1137:HALLIB/Src/stm32f7xx_hal_usart.c **** void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
1138:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1139:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t isrflags = READ_REG(husart->Instance->ISR);
1140:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t cr1its   = READ_REG(husart->Instance->CR1);
1141:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t cr3its   = READ_REG(husart->Instance->CR3);
1142:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t errorflags;
1143:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1144:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* If no error occurs */
1145:HALLIB/Src/stm32f7xx_hal_usart.c ****   errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
1146:HALLIB/Src/stm32f7xx_hal_usart.c ****   if (errorflags == RESET)
1147:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1148:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* USART in mode Receiver --------------------------------------------------*/
1149:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1150:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1151:HALLIB/Src/stm32f7xx_hal_usart.c ****       if(husart->State == HAL_USART_STATE_BUSY_RX)
1152:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1153:HALLIB/Src/stm32f7xx_hal_usart.c ****         USART_Receive_IT(husart);
1154:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1155:HALLIB/Src/stm32f7xx_hal_usart.c ****       else
1156:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1157:HALLIB/Src/stm32f7xx_hal_usart.c ****         USART_TransmitReceive_IT(husart);
1158:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1159:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1160:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1161:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1162:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* If some errors occur */
1163:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(   (errorflags != RESET)
1164:HALLIB/Src/stm32f7xx_hal_usart.c ****      && (   ((cr3its & USART_CR3_EIE) != RESET)
1165:HALLIB/Src/stm32f7xx_hal_usart.c ****          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
1166:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1167:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1168:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* USART parity error interrupt occurred ------------------------------------*/
1169:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
1170:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1171:HALLIB/Src/stm32f7xx_hal_usart.c ****       __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
ARM GAS  /tmp/ccNV7zic.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_PE;
1173:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1174:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1175:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* USART frame error interrupt occurred -------------------------------------*/
1176:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1177:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1178:HALLIB/Src/stm32f7xx_hal_usart.c ****       __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
1179:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_FE;
1180:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1181:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1182:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* USART noise error interrupt occurred -------------------------------------*/
1183:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1184:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1185:HALLIB/Src/stm32f7xx_hal_usart.c ****       __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
1186:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_NE;
1187:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1188:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1189:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* USART Over-Run interrupt occurred ----------------------------------------*/
1190:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(((isrflags & USART_ISR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1191:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1192:HALLIB/Src/stm32f7xx_hal_usart.c ****       __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
1193:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_ORE;
1194:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1195:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1196:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Call USART Error Call back function if need be --------------------------*/
1197:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->ErrorCode != HAL_USART_ERROR_NONE)
1198:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1199:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* USART in mode Receiver ---------------------------------------------------*/
1200:HALLIB/Src/stm32f7xx_hal_usart.c ****       if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1201:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1202:HALLIB/Src/stm32f7xx_hal_usart.c ****         USART_Receive_IT(husart);
1203:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1204:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1205:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1206:HALLIB/Src/stm32f7xx_hal_usart.c ****       consider error as blocking */
1207:HALLIB/Src/stm32f7xx_hal_usart.c ****       if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) ||
1208:HALLIB/Src/stm32f7xx_hal_usart.c ****           (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)))
1209:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1210:HALLIB/Src/stm32f7xx_hal_usart.c ****         /* Blocking error : transfer is aborted
1211:HALLIB/Src/stm32f7xx_hal_usart.c ****         Set the USART state ready to be able to start again the process,
1212:HALLIB/Src/stm32f7xx_hal_usart.c ****         Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1213:HALLIB/Src/stm32f7xx_hal_usart.c ****         USART_EndRxTransfer(husart);
1214:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1215:HALLIB/Src/stm32f7xx_hal_usart.c ****         /* Disable the USART DMA Rx request if enabled */
1216:HALLIB/Src/stm32f7xx_hal_usart.c ****         if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1217:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
1218:HALLIB/Src/stm32f7xx_hal_usart.c ****           CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1219:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1220:HALLIB/Src/stm32f7xx_hal_usart.c ****           /* Abort the USART DMA Rx channel */
1221:HALLIB/Src/stm32f7xx_hal_usart.c ****           if(husart->hdmarx != NULL)
1222:HALLIB/Src/stm32f7xx_hal_usart.c ****           {
1223:HALLIB/Src/stm32f7xx_hal_usart.c ****             /* Set the USART DMA Abort callback :
1224:HALLIB/Src/stm32f7xx_hal_usart.c ****             will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
1225:HALLIB/Src/stm32f7xx_hal_usart.c ****             husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
1226:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1227:HALLIB/Src/stm32f7xx_hal_usart.c ****             /* Abort DMA RX */
1228:HALLIB/Src/stm32f7xx_hal_usart.c ****             if(HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
ARM GAS  /tmp/ccNV7zic.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_usart.c ****             {
1230:HALLIB/Src/stm32f7xx_hal_usart.c ****               /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
1231:HALLIB/Src/stm32f7xx_hal_usart.c ****               husart->hdmarx->XferAbortCallback(husart->hdmarx);
1232:HALLIB/Src/stm32f7xx_hal_usart.c ****             }
1233:HALLIB/Src/stm32f7xx_hal_usart.c ****           }
1234:HALLIB/Src/stm32f7xx_hal_usart.c ****           else
1235:HALLIB/Src/stm32f7xx_hal_usart.c ****           {
1236:HALLIB/Src/stm32f7xx_hal_usart.c ****             /* Call user error callback */
1237:HALLIB/Src/stm32f7xx_hal_usart.c ****             HAL_USART_ErrorCallback(husart);
1238:HALLIB/Src/stm32f7xx_hal_usart.c ****           }
1239:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
1240:HALLIB/Src/stm32f7xx_hal_usart.c ****         else
1241:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
1242:HALLIB/Src/stm32f7xx_hal_usart.c ****           /* Call user error callback */
1243:HALLIB/Src/stm32f7xx_hal_usart.c ****           HAL_USART_ErrorCallback(husart);
1244:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
1245:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1246:HALLIB/Src/stm32f7xx_hal_usart.c ****       else
1247:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1248:HALLIB/Src/stm32f7xx_hal_usart.c ****         /* Non Blocking error : transfer could go on.
1249:HALLIB/Src/stm32f7xx_hal_usart.c ****         Error is notified to user through user error callback */
1250:HALLIB/Src/stm32f7xx_hal_usart.c ****         HAL_USART_ErrorCallback(husart);
1251:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->ErrorCode = HAL_USART_ERROR_NONE;
1252:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1253:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1254:HALLIB/Src/stm32f7xx_hal_usart.c ****     return;
1255:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1256:HALLIB/Src/stm32f7xx_hal_usart.c ****   } /* End if some error occurs */
1257:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1258:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* USART in mode Transmitter -----------------------------------------------*/
1259:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
1260:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1261:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->State == HAL_USART_STATE_BUSY_TX)
1262:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1263:HALLIB/Src/stm32f7xx_hal_usart.c ****       USART_Transmit_IT(husart);
1264:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1265:HALLIB/Src/stm32f7xx_hal_usart.c ****     else
1266:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1267:HALLIB/Src/stm32f7xx_hal_usart.c ****       USART_TransmitReceive_IT(husart);
1268:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1269:HALLIB/Src/stm32f7xx_hal_usart.c ****     return;
1270:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1271:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1272:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* USART in mode Transmitter (transmission end) -----------------------------*/
1273:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
1274:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1275:HALLIB/Src/stm32f7xx_hal_usart.c ****     USART_EndTransmit_IT(husart);
1276:HALLIB/Src/stm32f7xx_hal_usart.c ****     return;
1277:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1278:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1279:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1280:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1281:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Tx Transfer completed callbacks
1282:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
1283:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1284:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1285:HALLIB/Src/stm32f7xx_hal_usart.c **** __weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
ARM GAS  /tmp/ccNV7zic.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1287:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1288:HALLIB/Src/stm32f7xx_hal_usart.c ****   UNUSED(husart);
1289:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1290:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1291:HALLIB/Src/stm32f7xx_hal_usart.c ****             the HAL_USART_TxCpltCallback can be implemented in the user file
1292:HALLIB/Src/stm32f7xx_hal_usart.c ****    */
1293:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1294:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1295:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1296:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  Tx Half Transfer completed callbacks.
1297:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart USART handle
1298:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1299:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1300:HALLIB/Src/stm32f7xx_hal_usart.c ****  __weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
1301:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1302:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1303:HALLIB/Src/stm32f7xx_hal_usart.c ****   UNUSED(husart);
1304:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1305:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1306:HALLIB/Src/stm32f7xx_hal_usart.c ****            the HAL_USART_TxHalfCpltCallback can be implemented in the user file
1307:HALLIB/Src/stm32f7xx_hal_usart.c ****    */
1308:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1309:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1310:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1311:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  Rx Transfer completed callbacks.
1312:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart USART handle
1313:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1314:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1315:HALLIB/Src/stm32f7xx_hal_usart.c **** __weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
1316:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1317:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1318:HALLIB/Src/stm32f7xx_hal_usart.c ****   UNUSED(husart);
1319:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1320:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1321:HALLIB/Src/stm32f7xx_hal_usart.c ****            the HAL_USART_RxCpltCallback can be implemented in the user file
1322:HALLIB/Src/stm32f7xx_hal_usart.c ****    */
1323:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1324:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1325:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1326:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Rx Half Transfer completed callbacks
1327:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart usart handle
1328:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1329:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1330:HALLIB/Src/stm32f7xx_hal_usart.c **** __weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)
1331:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1332:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1333:HALLIB/Src/stm32f7xx_hal_usart.c ****   UNUSED(husart);
1334:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1335:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1336:HALLIB/Src/stm32f7xx_hal_usart.c ****             the HAL_USART_RxHalfCpltCallback can be implemented in the user file
1337:HALLIB/Src/stm32f7xx_hal_usart.c ****    */
1338:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1339:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1340:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1341:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Tx/Rx Transfers completed callback for the non-blocking process
1342:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
ARM GAS  /tmp/ccNV7zic.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1344:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1345:HALLIB/Src/stm32f7xx_hal_usart.c **** __weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
1346:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1347:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1348:HALLIB/Src/stm32f7xx_hal_usart.c ****   UNUSED(husart);
1349:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1350:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1351:HALLIB/Src/stm32f7xx_hal_usart.c ****             the HAL_USART_TxRxCpltCallback can be implemented in the user file
1352:HALLIB/Src/stm32f7xx_hal_usart.c ****    */
1353:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1354:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1355:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1356:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief USART error callbacks
1357:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
1358:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1359:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1360:HALLIB/Src/stm32f7xx_hal_usart.c **** __weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
1361:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1362:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
1363:HALLIB/Src/stm32f7xx_hal_usart.c ****   UNUSED(husart);
1364:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1365:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1366:HALLIB/Src/stm32f7xx_hal_usart.c ****             the HAL_USART_ErrorCallback can be implemented in the user file
1367:HALLIB/Src/stm32f7xx_hal_usart.c ****    */
1368:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1369:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1370:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1371:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @}
1372:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1373:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1374:HALLIB/Src/stm32f7xx_hal_usart.c **** /** @defgroup USART_Exported_Functions_Group3 Peripheral State and Errors functions
1375:HALLIB/Src/stm32f7xx_hal_usart.c ****   *  @brief   USART State and Errors functions
1376:HALLIB/Src/stm32f7xx_hal_usart.c ****   *
1377:HALLIB/Src/stm32f7xx_hal_usart.c **** @verbatim
1378:HALLIB/Src/stm32f7xx_hal_usart.c ****   ==============================================================================
1379:HALLIB/Src/stm32f7xx_hal_usart.c ****                   ##### Peripheral State and Errors functions #####
1380:HALLIB/Src/stm32f7xx_hal_usart.c ****   ==============================================================================
1381:HALLIB/Src/stm32f7xx_hal_usart.c ****   [..]
1382:HALLIB/Src/stm32f7xx_hal_usart.c ****     This subsection provides a set of functions allowing to return the State of
1383:HALLIB/Src/stm32f7xx_hal_usart.c ****     USART communication
1384:HALLIB/Src/stm32f7xx_hal_usart.c ****     process, return Peripheral Errors occurred during communication process
1385:HALLIB/Src/stm32f7xx_hal_usart.c ****      (+) HAL_USART_GetState() API can be helpful to check in run-time the state
1386:HALLIB/Src/stm32f7xx_hal_usart.c ****          of the USART peripheral.
1387:HALLIB/Src/stm32f7xx_hal_usart.c ****      (+) HAL_USART_GetError() check in run-time errors that could be occurred during
1388:HALLIB/Src/stm32f7xx_hal_usart.c ****          communication.
1389:HALLIB/Src/stm32f7xx_hal_usart.c **** @endverbatim
1390:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @{
1391:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1392:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1393:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1394:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief return the USART state
1395:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
1396:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL state
1397:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1398:HALLIB/Src/stm32f7xx_hal_usart.c **** HAL_USART_StateTypeDef HAL_USART_GetState(USART_HandleTypeDef *husart)
1399:HALLIB/Src/stm32f7xx_hal_usart.c **** {
ARM GAS  /tmp/ccNV7zic.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_usart.c ****   return husart->State;
1401:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1402:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1403:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1404:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  Return the USART error code
1405:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart  pointer to a USART_HandleTypeDef structure that contains
1406:HALLIB/Src/stm32f7xx_hal_usart.c ****   *              the configuration information for the specified USART.
1407:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval USART Error Code
1408:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1409:HALLIB/Src/stm32f7xx_hal_usart.c **** uint32_t HAL_USART_GetError(USART_HandleTypeDef *husart)
1410:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1411:HALLIB/Src/stm32f7xx_hal_usart.c ****   return husart->ErrorCode;
1412:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1413:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1414:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1415:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @}
1416:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1417:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1418:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1419:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1420:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  Simplex Send an amount of data in non-blocking mode.
1421:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @note   Function called under interruption only, once
1422:HALLIB/Src/stm32f7xx_hal_usart.c ****   *         interruptions have been enabled by HAL_USART_Transmit_IT().
1423:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart USART handle
1424:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
1425:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @note   The USART errors are not managed to avoid the overrun error.
1426:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1427:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
1428:HALLIB/Src/stm32f7xx_hal_usart.c **** {
  28              		.loc 1 1428 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
1429:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
1430:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1431:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_BUSY_TX)
  34              		.loc 1 1431 0
  35 0000 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
  36 0004 122B     		cmp	r3, #18
  37 0006 2BD1     		bne	.L6
1432:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1433:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1434:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->TxXferCount == 0U)
  38              		.loc 1 1434 0
  39 0008 C38D     		ldrh	r3, [r0, #46]
  40 000a 9BB2     		uxth	r3, r3
  41 000c 5BB9     		cbnz	r3, .L3
1435:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1436:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Disable the USART Transmit data register empty interrupt */
1437:HALLIB/Src/stm32f7xx_hal_usart.c ****       __HAL_USART_DISABLE_IT(husart, USART_IT_TXE);
  42              		.loc 1 1437 0
  43 000e 0268     		ldr	r2, [r0]
  44 0010 1368     		ldr	r3, [r2]
  45 0012 23F08003 		bic	r3, r3, #128
  46 0016 1360     		str	r3, [r2]
ARM GAS  /tmp/ccNV7zic.s 			page 27


1438:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1439:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Enable the USART Transmit Complete Interrupt */
1440:HALLIB/Src/stm32f7xx_hal_usart.c ****       __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
  47              		.loc 1 1440 0
  48 0018 0268     		ldr	r2, [r0]
  49 001a 1368     		ldr	r3, [r2]
  50 001c 43F04003 		orr	r3, r3, #64
  51 0020 1360     		str	r3, [r2]
1441:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1442:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_OK;
  52              		.loc 1 1442 0
  53 0022 0020     		movs	r0, #0
  54              	.LVL1:
  55 0024 7047     		bx	lr
  56              	.LVL2:
  57              	.L3:
1443:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1444:HALLIB/Src/stm32f7xx_hal_usart.c ****     else
1445:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1446:HALLIB/Src/stm32f7xx_hal_usart.c ****       if((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_N
  58              		.loc 1 1446 0
  59 0026 8368     		ldr	r3, [r0, #8]
  60 0028 B3F5805F 		cmp	r3, #4096
  61 002c 0BD1     		bne	.L4
  62              		.loc 1 1446 0 is_stmt 0 discriminator 1
  63 002e 0369     		ldr	r3, [r0, #16]
  64 0030 4BB9     		cbnz	r3, .L4
1447:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1448:HALLIB/Src/stm32f7xx_hal_usart.c ****         tmp = (uint16_t*) husart->pTxBuffPtr;
  65              		.loc 1 1448 0 is_stmt 1
  66 0032 836A     		ldr	r3, [r0, #40]
  67              	.LVL3:
1449:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
  68              		.loc 1 1449 0
  69 0034 0268     		ldr	r2, [r0]
  70 0036 1B88     		ldrh	r3, [r3]
  71              	.LVL4:
  72 0038 C3F30803 		ubfx	r3, r3, #0, #9
  73 003c 9362     		str	r3, [r2, #40]
  74              	.LVL5:
1450:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->pTxBuffPtr += 2U;
  75              		.loc 1 1450 0
  76 003e 836A     		ldr	r3, [r0, #40]
  77 0040 0233     		adds	r3, r3, #2
  78 0042 8362     		str	r3, [r0, #40]
  79 0044 05E0     		b	.L5
  80              	.L4:
1451:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1452:HALLIB/Src/stm32f7xx_hal_usart.c ****       else
1453:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1454:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->Instance->TDR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0xFF);
  81              		.loc 1 1454 0
  82 0046 0268     		ldr	r2, [r0]
  83 0048 836A     		ldr	r3, [r0, #40]
  84 004a 591C     		adds	r1, r3, #1
  85 004c 8162     		str	r1, [r0, #40]
  86 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccNV7zic.s 			page 28


  87 0050 9362     		str	r3, [r2, #40]
  88              	.L5:
1455:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1456:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1457:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->TxXferCount--;
  89              		.loc 1 1457 0
  90 0052 C38D     		ldrh	r3, [r0, #46]
  91 0054 9BB2     		uxth	r3, r3
  92 0056 013B     		subs	r3, r3, #1
  93 0058 9BB2     		uxth	r3, r3
  94 005a C385     		strh	r3, [r0, #46]	@ movhi
1458:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1459:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_OK;
  95              		.loc 1 1459 0
  96 005c 0020     		movs	r0, #0
  97              	.LVL6:
  98 005e 7047     		bx	lr
  99              	.LVL7:
 100              	.L6:
1460:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1461:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1462:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
1463:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1464:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
 101              		.loc 1 1464 0
 102 0060 0220     		movs	r0, #2
 103              	.LVL8:
1465:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1466:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 104              		.loc 1 1466 0
 105 0062 7047     		bx	lr
 106              		.cfi_endproc
 107              	.LFE161:
 109              		.section	.text.USART_EndTxTransfer,"ax",%progbits
 110              		.align	2
 111              		.thumb
 112              		.thumb_func
 114              	USART_EndTxTransfer:
 115              	.LFB172:
1467:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1468:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1469:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  Wraps up transmission in non-blocking mode.
1470:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart pointer to a USART_HandleTypeDef structure that contains
1471:HALLIB/Src/stm32f7xx_hal_usart.c ****   *                the configuration information for the specified USART module.
1472:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
1473:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1474:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
1475:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1476:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Disable the USART Transmit Complete Interrupt */
1477:HALLIB/Src/stm32f7xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
1478:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1479:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
1480:HALLIB/Src/stm32f7xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
1481:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1482:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
1483:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1484:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_USART_TxCpltCallback(husart);
ARM GAS  /tmp/ccNV7zic.s 			page 29


1485:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1486:HALLIB/Src/stm32f7xx_hal_usart.c ****   return HAL_OK;
1487:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1488:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1489:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1490:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  Simplex Receive an amount of data in non-blocking mode.
1491:HALLIB/Src/stm32f7xx_hal_usart.c ****   *         Function called under interruption only, once
1492:HALLIB/Src/stm32f7xx_hal_usart.c ****   *         interruptions have been enabled by HAL_USART_Receive_IT()
1493:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart USART handle
1494:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
1495:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1496:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
1497:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1498:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
1499:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t uhMask = husart->Mask;
1500:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1501:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_BUSY_RX)
1502:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1503:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1504:HALLIB/Src/stm32f7xx_hal_usart.c ****     if((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NON
1505:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1506:HALLIB/Src/stm32f7xx_hal_usart.c ****       tmp = (uint16_t*) husart->pRxBuffPtr;
1507:HALLIB/Src/stm32f7xx_hal_usart.c ****       *tmp = (uint16_t)(husart->Instance->RDR & uhMask);
1508:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->pRxBuffPtr += 2U;
1509:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1510:HALLIB/Src/stm32f7xx_hal_usart.c ****     else
1511:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1512:HALLIB/Src/stm32f7xx_hal_usart.c ****       *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->RDR & (uint8_t)uhMask);
1513:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1514:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Send dummy byte in order to generate the clock for the Slave to Send the next data */
1515:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->Instance->TDR = (DUMMY_DATA & (uint16_t)0x00FFU);
1516:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1517:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(--husart->RxXferCount == 0U)
1518:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1519:HALLIB/Src/stm32f7xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
1520:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1521:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Disable the USART Parity Error Interrupt */
1522:HALLIB/Src/stm32f7xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
1523:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1524:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
1525:HALLIB/Src/stm32f7xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
1526:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1527:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->State = HAL_USART_STATE_READY;
1528:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1529:HALLIB/Src/stm32f7xx_hal_usart.c ****       HAL_USART_RxCpltCallback(husart);
1530:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1531:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_OK;
1532:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1533:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1534:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_OK;
1535:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1536:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
1537:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1538:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
1539:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1540:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1541:HALLIB/Src/stm32f7xx_hal_usart.c **** 
ARM GAS  /tmp/ccNV7zic.s 			page 30


1542:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1543:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  Full-Duplex Send receive an amount of data in full-duplex mode (non-blocking).
1544:HALLIB/Src/stm32f7xx_hal_usart.c ****   *         Function called under interruption only, once
1545:HALLIB/Src/stm32f7xx_hal_usart.c ****   *         interruptions have been enabled by HAL_USART_TransmitReceive_IT()
1546:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart USART handle
1547:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
1548:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1549:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
1550:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1551:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
1552:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t uhMask = husart->Mask;
1553:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1554:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
1555:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1556:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->TxXferCount != 0x00U)
1557:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1558:HALLIB/Src/stm32f7xx_hal_usart.c ****       if(__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
1559:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1560:HALLIB/Src/stm32f7xx_hal_usart.c ****         if((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY
1561:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
1562:HALLIB/Src/stm32f7xx_hal_usart.c ****           tmp = (uint16_t*) husart->pTxBuffPtr;
1563:HALLIB/Src/stm32f7xx_hal_usart.c ****           husart->Instance->TDR = (uint16_t)(*tmp & uhMask);
1564:HALLIB/Src/stm32f7xx_hal_usart.c ****           husart->pTxBuffPtr += 2U;
1565:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
1566:HALLIB/Src/stm32f7xx_hal_usart.c ****         else
1567:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
1568:HALLIB/Src/stm32f7xx_hal_usart.c ****           husart->Instance->TDR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)uhMask);
1569:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
1570:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->TxXferCount--;
1571:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1572:HALLIB/Src/stm32f7xx_hal_usart.c ****         /* Check the latest data transmitted */
1573:HALLIB/Src/stm32f7xx_hal_usart.c ****         if(husart->TxXferCount == 0U)
1574:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
1575:HALLIB/Src/stm32f7xx_hal_usart.c ****            CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
1576:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
1577:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1578:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1579:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1580:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->RxXferCount != 0x00U)
1581:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1582:HALLIB/Src/stm32f7xx_hal_usart.c ****       if(__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
1583:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1584:HALLIB/Src/stm32f7xx_hal_usart.c ****         if((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY
1585:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
1586:HALLIB/Src/stm32f7xx_hal_usart.c ****           tmp = (uint16_t*) husart->pRxBuffPtr;
1587:HALLIB/Src/stm32f7xx_hal_usart.c ****           *tmp = (uint16_t)(husart->Instance->RDR & uhMask);
1588:HALLIB/Src/stm32f7xx_hal_usart.c ****           husart->pRxBuffPtr += 2U;
1589:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
1590:HALLIB/Src/stm32f7xx_hal_usart.c ****         else
1591:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
1592:HALLIB/Src/stm32f7xx_hal_usart.c ****           *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->RDR & (uint8_t)uhMask);
1593:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
1594:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->RxXferCount--;
1595:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1596:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1597:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1598:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Check the latest data received */
ARM GAS  /tmp/ccNV7zic.s 			page 31


1599:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->RxXferCount == 0U)
1600:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1601:HALLIB/Src/stm32f7xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
1602:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1603:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Disable the USART Parity Error Interrupt */
1604:HALLIB/Src/stm32f7xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
1605:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1606:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
1607:HALLIB/Src/stm32f7xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
1608:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1609:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->State = HAL_USART_STATE_READY;
1610:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1611:HALLIB/Src/stm32f7xx_hal_usart.c ****       HAL_USART_TxRxCpltCallback(husart);
1612:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1613:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_OK;
1614:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1615:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1616:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_OK;
1617:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1618:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
1619:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1620:HALLIB/Src/stm32f7xx_hal_usart.c ****     return HAL_BUSY;
1621:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1622:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1623:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1624:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1625:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  This function handles USART Communication Timeout.
1626:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart USART handle
1627:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  Flag specifies the USART flag to check.
1628:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  Status The new Flag status (SET or RESET).
1629:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  Tickstart Tick start value
1630:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  Timeout Timeout duration
1631:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
1632:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1633:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, F
1634:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1635:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Wait until flag is set */
1636:HALLIB/Src/stm32f7xx_hal_usart.c ****   while((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
1637:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1638:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Check for the Timeout */
1639:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(Timeout != HAL_MAX_DELAY)
1640:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1641:HALLIB/Src/stm32f7xx_hal_usart.c ****       if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
1642:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1643:HALLIB/Src/stm32f7xx_hal_usart.c ****         /* Disable the USART Transmit Complete Interrupt */
1644:HALLIB/Src/stm32f7xx_hal_usart.c ****         CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
1645:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1646:HALLIB/Src/stm32f7xx_hal_usart.c ****         /* Disable the USART RXNE Interrupt */
1647:HALLIB/Src/stm32f7xx_hal_usart.c ****         CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
1648:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1649:HALLIB/Src/stm32f7xx_hal_usart.c ****         /* Disable the USART Parity Error Interrupt */
1650:HALLIB/Src/stm32f7xx_hal_usart.c ****         CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
1651:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1652:HALLIB/Src/stm32f7xx_hal_usart.c ****         /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
1653:HALLIB/Src/stm32f7xx_hal_usart.c ****         CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
1654:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1655:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->State= HAL_USART_STATE_READY;
ARM GAS  /tmp/ccNV7zic.s 			page 32


1656:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1657:HALLIB/Src/stm32f7xx_hal_usart.c ****         /* Process Unlocked */
1658:HALLIB/Src/stm32f7xx_hal_usart.c ****         __HAL_UNLOCK(husart);
1659:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1660:HALLIB/Src/stm32f7xx_hal_usart.c ****         return HAL_TIMEOUT;
1661:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1662:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1663:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1664:HALLIB/Src/stm32f7xx_hal_usart.c ****   return HAL_OK;
1665:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1666:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1667:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1668:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1669:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief DMA USART transmit process complete callback
1670:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  hdma DMA handle
1671:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1672:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1673:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
1674:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1675:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1676:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1677:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* DMA Normal mode */
1678:HALLIB/Src/stm32f7xx_hal_usart.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
1679:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1680:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferCount = 0U;
1681:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1682:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->State == HAL_USART_STATE_BUSY_TX)
1683:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1684:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Disable the DMA transfer for transmit request by resetting the DMAT bit
1685:HALLIB/Src/stm32f7xx_hal_usart.c ****          in the USART CR3 register */
1686:HALLIB/Src/stm32f7xx_hal_usart.c ****       CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1687:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1688:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* Enable the USART Transmit Complete Interrupt */
1689:HALLIB/Src/stm32f7xx_hal_usart.c ****       SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
1690:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1691:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1692:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* DMA Circular mode */
1693:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
1694:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1695:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->State == HAL_USART_STATE_BUSY_TX)
1696:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1697:HALLIB/Src/stm32f7xx_hal_usart.c ****     HAL_USART_TxCpltCallback(husart);
1698:HALLIB/Src/stm32f7xx_hal_usart.c ****    }
1699:HALLIB/Src/stm32f7xx_hal_usart.c ****  }
1700:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1701:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1702:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1703:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1704:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief DMA USART transmit process half complete callback
1705:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param hdma  DMA handle
1706:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1707:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1708:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
1709:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1710:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = (USART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
1711:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1712:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_USART_TxHalfCpltCallback(husart);
ARM GAS  /tmp/ccNV7zic.s 			page 33


1713:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1714:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1715:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1716:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief DMA USART receive process complete callback
1717:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  hdma DMA handle
1718:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1719:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1720:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
1721:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1722:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1723:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1724:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* DMA Normal mode */
1725:HALLIB/Src/stm32f7xx_hal_usart.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
1726:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1727:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferCount = 0U;
1728:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1729:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1730:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1731:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
1732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1733:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Disable the DMA RX transfer for the receiver request by resetting the DMAR bit
1734:HALLIB/Src/stm32f7xx_hal_usart.c ****     in USART CR3 register */
1735:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
1736:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* similarly, disable the DMA TX transfer that was started to provide the
1737:HALLIB/Src/stm32f7xx_hal_usart.c ****        clock to the slave device */
1738:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
1739:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1740:HALLIB/Src/stm32f7xx_hal_usart.c ****       if(husart->State == HAL_USART_STATE_BUSY_RX)
1741:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1742:HALLIB/Src/stm32f7xx_hal_usart.c ****         HAL_USART_RxCpltCallback(husart);
1743:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1744:HALLIB/Src/stm32f7xx_hal_usart.c ****       /* The USART state is HAL_USART_STATE_BUSY_TX_RX */
1745:HALLIB/Src/stm32f7xx_hal_usart.c ****       else
1746:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
1747:HALLIB/Src/stm32f7xx_hal_usart.c ****         HAL_USART_TxRxCpltCallback(husart);
1748:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
1749:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State= HAL_USART_STATE_READY;
1750:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1751:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* DMA circular mode */
1752:HALLIB/Src/stm32f7xx_hal_usart.c ****   else
1753:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1754:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(husart->State == HAL_USART_STATE_BUSY_RX)
1755:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1756:HALLIB/Src/stm32f7xx_hal_usart.c ****       HAL_USART_RxCpltCallback(husart);
1757:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1758:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* The USART state is HAL_USART_STATE_BUSY_TX_RX */
1759:HALLIB/Src/stm32f7xx_hal_usart.c ****     else
1760:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1761:HALLIB/Src/stm32f7xx_hal_usart.c ****       HAL_USART_TxRxCpltCallback(husart);
1762:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1763:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1764:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1765:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1766:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1767:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief DMA USART receive process half complete callback
1768:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param hdma  DMA handle
1769:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
ARM GAS  /tmp/ccNV7zic.s 			page 34


1770:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1771:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
1772:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1773:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = (USART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
1774:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1775:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_USART_RxHalfCpltCallback(husart);
1776:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1777:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1778:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1779:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief DMA USART communication error callback
1780:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  hdma DMA handle
1781:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1782:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1783:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMAError(DMA_HandleTypeDef *hdma)
1784:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1785:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1786:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1787:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->RxXferCount = 0U;
1788:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->TxXferCount = 0U;
1789:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1790:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Stop USART DMA Tx request if ongoing */
1791:HALLIB/Src/stm32f7xx_hal_usart.c ****   if((husart->State == HAL_USART_STATE_BUSY_TX)
1792:HALLIB/Src/stm32f7xx_hal_usart.c ****      &&(HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT)))
1793:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1794:HALLIB/Src/stm32f7xx_hal_usart.c ****     USART_EndTxTransfer(husart);
1795:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1796:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1797:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Stop USART DMA Rx request if ongoing */
1798:HALLIB/Src/stm32f7xx_hal_usart.c ****   if((husart->State == HAL_USART_STATE_BUSY_RX)
1799:HALLIB/Src/stm32f7xx_hal_usart.c ****      &&(HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)))
1800:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1801:HALLIB/Src/stm32f7xx_hal_usart.c ****     USART_EndRxTransfer(husart);
1802:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1803:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1804:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->ErrorCode |= HAL_USART_ERROR_DMA;
1805:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->State= HAL_USART_STATE_READY;
1806:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1807:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_USART_ErrorCallback(husart);
1808:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1809:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1810:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1811:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief DMA USART communication abort callback
1812:HALLIB/Src/stm32f7xx_hal_usart.c ****   *        (To be called at end of DMA Abort procedure).
1813:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param hdma DMA handle.
1814:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1815:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1816:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
1817:HALLIB/Src/stm32f7xx_hal_usart.c **** {
1818:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = (USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1819:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->RxXferCount = 0U;
1820:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->TxXferCount = 0U;
1821:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1822:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_USART_ErrorCallback(husart);
1823:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1824:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1825:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1826:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  End ongoing Tx transfer on USART peripheral (following error detection or Transmit comp
ARM GAS  /tmp/ccNV7zic.s 			page 35


1827:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart USART handle.
1828:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1829:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1830:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_EndTxTransfer(USART_HandleTypeDef *husart)
1831:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 116              		.loc 1 1831 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121              	.LVL9:
1832:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* At end of Tx process, restore husart->State to Ready */
1833:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
 122              		.loc 1 1833 0
 123 0000 0123     		movs	r3, #1
 124 0002 80F84530 		strb	r3, [r0, #69]
1834:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1835:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Disable TXEIE and TCIE interrupts */
1836:HALLIB/Src/stm32f7xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 125              		.loc 1 1836 0
 126 0006 0268     		ldr	r2, [r0]
 127 0008 1368     		ldr	r3, [r2]
 128 000a 23F0C003 		bic	r3, r3, #192
 129 000e 1360     		str	r3, [r2]
 130 0010 7047     		bx	lr
 131              		.cfi_endproc
 132              	.LFE172:
 134 0012 00BF     		.section	.text.USART_EndRxTransfer,"ax",%progbits
 135              		.align	2
 136              		.thumb
 137              		.thumb_func
 139              	USART_EndRxTransfer:
 140              	.LFB173:
1837:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1838:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1839:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1840:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception com
1841:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param  husart USART handle.
1842:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1843:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1844:HALLIB/Src/stm32f7xx_hal_usart.c **** static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
1845:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 141              		.loc 1 1845 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146              	.LVL10:
1846:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* At end of Rx process, restore husart->RxState to Ready */
1847:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->State = HAL_USART_STATE_READY;
 147              		.loc 1 1847 0
 148 0000 0123     		movs	r3, #1
 149 0002 80F84530 		strb	r3, [r0, #69]
1848:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1849:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Disable RXNE, PE and ERR interrupts */
1850:HALLIB/Src/stm32f7xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 150              		.loc 1 1850 0
ARM GAS  /tmp/ccNV7zic.s 			page 36


 151 0006 0268     		ldr	r2, [r0]
 152 0008 1368     		ldr	r3, [r2]
 153 000a 23F49073 		bic	r3, r3, #288
 154 000e 1360     		str	r3, [r2]
1851:HALLIB/Src/stm32f7xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 155              		.loc 1 1851 0
 156 0010 0268     		ldr	r2, [r0]
 157 0012 9368     		ldr	r3, [r2, #8]
 158 0014 23F00103 		bic	r3, r3, #1
 159 0018 9360     		str	r3, [r2, #8]
 160 001a 7047     		bx	lr
 161              		.cfi_endproc
 162              	.LFE173:
 164              		.section	.text.USART_SetConfig,"ax",%progbits
 165              		.align	2
 166              		.thumb
 167              		.thumb_func
 169              	USART_SetConfig:
 170              	.LFB174:
1852:HALLIB/Src/stm32f7xx_hal_usart.c **** }
1853:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1854:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1855:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Configure the USART peripheral
1856:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
1857:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval None
1858:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1859:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
1860:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 171              		.loc 1 1860 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              	.LVL11:
 176 0000 10B5     		push	{r4, lr}
 177              	.LCFI0:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 4, -8
 180              		.cfi_offset 14, -4
 181 0002 0446     		mov	r4, r0
 182              	.LVL12:
1861:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t tmpreg      = 0x0U;
1862:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_ClockSourceTypeDef clocksource = USART_CLOCKSOURCE_UNDEFINED;
1863:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_StatusTypeDef ret                = HAL_OK;
1864:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t brrtemp                     = 0x0000U;
1865:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t usartdiv                    = 0x0000U;
1866:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1867:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Check the parameters */
1868:HALLIB/Src/stm32f7xx_hal_usart.c ****   assert_param(IS_USART_POLARITY(husart->Init.CLKPolarity));
1869:HALLIB/Src/stm32f7xx_hal_usart.c ****   assert_param(IS_USART_PHASE(husart->Init.CLKPhase));
1870:HALLIB/Src/stm32f7xx_hal_usart.c ****   assert_param(IS_USART_LASTBIT(husart->Init.CLKLastBit));
1871:HALLIB/Src/stm32f7xx_hal_usart.c ****   assert_param(IS_USART_BAUDRATE(husart->Init.BaudRate));
1872:HALLIB/Src/stm32f7xx_hal_usart.c ****   assert_param(IS_USART_WORD_LENGTH(husart->Init.WordLength));
1873:HALLIB/Src/stm32f7xx_hal_usart.c ****   assert_param(IS_USART_STOPBITS(husart->Init.StopBits));
1874:HALLIB/Src/stm32f7xx_hal_usart.c ****   assert_param(IS_USART_PARITY(husart->Init.Parity));
1875:HALLIB/Src/stm32f7xx_hal_usart.c ****   assert_param(IS_USART_MODE(husart->Init.Mode));
1876:HALLIB/Src/stm32f7xx_hal_usart.c ****   assert_param(IS_USART_OVERSAMPLING(husart->Init.OverSampling));
1877:HALLIB/Src/stm32f7xx_hal_usart.c **** 
ARM GAS  /tmp/ccNV7zic.s 			page 37


1878:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1879:HALLIB/Src/stm32f7xx_hal_usart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
1880:HALLIB/Src/stm32f7xx_hal_usart.c ****    /* Clear M, PCE, PS, TE and RE bits and configure
1881:HALLIB/Src/stm32f7xx_hal_usart.c ****    *  the USART Word Length, Parity, Mode and OverSampling:
1882:HALLIB/Src/stm32f7xx_hal_usart.c ****    *  set the M bits according to husart->Init.WordLength value
1883:HALLIB/Src/stm32f7xx_hal_usart.c ****    *  set PCE and PS bits according to husart->Init.Parity value
1884:HALLIB/Src/stm32f7xx_hal_usart.c ****    *  set TE and RE bits according to husart->Init.Mode value
1885:HALLIB/Src/stm32f7xx_hal_usart.c ****    *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
1886:HALLIB/Src/stm32f7xx_hal_usart.c ****   tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_
 183              		.loc 1 1886 0
 184 0004 8268     		ldr	r2, [r0, #8]
 185 0006 0369     		ldr	r3, [r0, #16]
 186 0008 1A43     		orrs	r2, r2, r3
 187 000a 4369     		ldr	r3, [r0, #20]
 188 000c 1343     		orrs	r3, r3, r2
 189 000e 43F40042 		orr	r2, r3, #32768
 190              	.LVL13:
1887:HALLIB/Src/stm32f7xx_hal_usart.c ****   MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 191              		.loc 1 1887 0
 192 0012 0168     		ldr	r1, [r0]
 193 0014 0868     		ldr	r0, [r1]
 194              	.LVL14:
 195 0016 644B     		ldr	r3, .L48
 196 0018 0340     		ands	r3, r3, r0
 197 001a 1343     		orrs	r3, r3, r2
 198 001c 0B60     		str	r3, [r1]
 199              	.LVL15:
1888:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1889:HALLIB/Src/stm32f7xx_hal_usart.c ****   /*---------------------------- USART CR2 Configuration ---------------------*/
1890:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
1891:HALLIB/Src/stm32f7xx_hal_usart.c ****    * set CPOL bit according to husart->Init.CLKPolarity value
1892:HALLIB/Src/stm32f7xx_hal_usart.c ****    * set CPHA bit according to husart->Init.CLKPhase value
1893:HALLIB/Src/stm32f7xx_hal_usart.c ****    * set LBCL bit according to husart->Init.CLKLastBit value
1894:HALLIB/Src/stm32f7xx_hal_usart.c ****    * set STOP[13:12] bits according to husart->Init.StopBits value */
1895:HALLIB/Src/stm32f7xx_hal_usart.c ****   tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
1896:HALLIB/Src/stm32f7xx_hal_usart.c ****   tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 200              		.loc 1 1896 0
 201 001e E269     		ldr	r2, [r4, #28]
 202 0020 236A     		ldr	r3, [r4, #32]
 203 0022 1343     		orrs	r3, r3, r2
 204 0024 43F40063 		orr	r3, r3, #2048
 205              	.LVL16:
1897:HALLIB/Src/stm32f7xx_hal_usart.c ****   tmpreg |= ((uint32_t)husart->Init.CLKLastBit | (uint32_t)husart->Init.StopBits);
 206              		.loc 1 1897 0
 207 0028 616A     		ldr	r1, [r4, #36]
 208 002a E268     		ldr	r2, [r4, #12]
 209 002c 0A43     		orrs	r2, r2, r1
 210 002e 1A43     		orrs	r2, r2, r3
 211              	.LVL17:
1898:HALLIB/Src/stm32f7xx_hal_usart.c ****   MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 212              		.loc 1 1898 0
 213 0030 2168     		ldr	r1, [r4]
 214 0032 4B68     		ldr	r3, [r1, #4]
 215 0034 23F47C53 		bic	r3, r3, #16128
 216 0038 1343     		orrs	r3, r3, r2
 217 003a 4B60     		str	r3, [r1, #4]
1899:HALLIB/Src/stm32f7xx_hal_usart.c **** 
ARM GAS  /tmp/ccNV7zic.s 			page 38


1900:HALLIB/Src/stm32f7xx_hal_usart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
1901:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* no CR3 register configuration                                            */
1902:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1903:HALLIB/Src/stm32f7xx_hal_usart.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
1904:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
1905:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_GETCLOCKSOURCE(husart, clocksource);
 218              		.loc 1 1905 0
 219 003c 2368     		ldr	r3, [r4]
 220 003e 5B4A     		ldr	r2, .L48+4
 221              	.LVL18:
 222 0040 9342     		cmp	r3, r2
 223 0042 12D1     		bne	.L10
 224              		.loc 1 1905 0 is_stmt 0 discriminator 1
 225 0044 5A4B     		ldr	r3, .L48+8
 226 0046 D3F89030 		ldr	r3, [r3, #144]
 227 004a 03F00303 		and	r3, r3, #3
 228 004e 032B     		cmp	r3, #3
 229 0050 03D8     		bhi	.L11
 230 0052 DFE803F0 		tbb	[pc, r3]
 231              	.L13:
 232 0056 5A       		.byte	(.L41-.L13)/2
 233 0057 06       		.byte	(.L14-.L13)/2
 234 0058 04       		.byte	(.L15-.L13)/2
 235 0059 08       		.byte	(.L16-.L13)/2
 236              		.p2align 1
 237              	.L11:
1862:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_StatusTypeDef ret                = HAL_OK;
 238              		.loc 1 1862 0 is_stmt 1
 239 005a 1023     		movs	r3, #16
 240 005c 5EE0     		b	.L12
 241              	.L15:
 242              	.LVL19:
 243              		.loc 1 1905 0 discriminator 5
 244 005e 0223     		movs	r3, #2
 245 0060 5CE0     		b	.L12
 246              	.LVL20:
 247              	.L14:
 248              		.loc 1 1905 0 is_stmt 0 discriminator 4
 249 0062 0423     		movs	r3, #4
 250 0064 5AE0     		b	.L12
 251              	.LVL21:
 252              	.L16:
 253              		.loc 1 1905 0 discriminator 6
 254 0066 0823     		movs	r3, #8
 255 0068 58E0     		b	.L12
 256              	.LVL22:
 257              	.L10:
 258              		.loc 1 1905 0 discriminator 2
 259 006a 524A     		ldr	r2, .L48+12
 260 006c 9342     		cmp	r3, r2
 261 006e 17D1     		bne	.L17
 262              		.loc 1 1905 0 discriminator 7
 263 0070 4F4B     		ldr	r3, .L48+8
 264 0072 D3F89030 		ldr	r3, [r3, #144]
 265 0076 03F00C03 		and	r3, r3, #12
 266 007a 0C2B     		cmp	r3, #12
 267 007c 08D8     		bhi	.L18
ARM GAS  /tmp/ccNV7zic.s 			page 39


 268 007e DFE803F0 		tbb	[pc, r3]
 269              	.L19:
 270 0082 46       		.byte	(.L42-.L19)/2
 271 0083 07       		.byte	(.L18-.L19)/2
 272 0084 07       		.byte	(.L18-.L19)/2
 273 0085 07       		.byte	(.L18-.L19)/2
 274 0086 0B       		.byte	(.L20-.L19)/2
 275 0087 07       		.byte	(.L18-.L19)/2
 276 0088 07       		.byte	(.L18-.L19)/2
 277 0089 07       		.byte	(.L18-.L19)/2
 278 008a 09       		.byte	(.L21-.L19)/2
 279 008b 07       		.byte	(.L18-.L19)/2
 280 008c 07       		.byte	(.L18-.L19)/2
 281 008d 07       		.byte	(.L18-.L19)/2
 282 008e 0D       		.byte	(.L22-.L19)/2
 283 008f 00       		.p2align 1
 284              	.L18:
1862:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_StatusTypeDef ret                = HAL_OK;
 285              		.loc 1 1862 0 is_stmt 1
 286 0090 1023     		movs	r3, #16
 287 0092 43E0     		b	.L12
 288              	.L21:
 289              	.LVL23:
 290              		.loc 1 1905 0 discriminator 11
 291 0094 0223     		movs	r3, #2
 292 0096 41E0     		b	.L12
 293              	.LVL24:
 294              	.L20:
 295              		.loc 1 1905 0 is_stmt 0 discriminator 10
 296 0098 0423     		movs	r3, #4
 297 009a 3FE0     		b	.L12
 298              	.LVL25:
 299              	.L22:
 300              		.loc 1 1905 0 discriminator 12
 301 009c 0823     		movs	r3, #8
 302 009e 3DE0     		b	.L12
 303              	.LVL26:
 304              	.L17:
 305              		.loc 1 1905 0 discriminator 8
 306 00a0 454A     		ldr	r2, .L48+16
 307 00a2 9342     		cmp	r3, r2
 308 00a4 15D1     		bne	.L23
 309              		.loc 1 1905 0 discriminator 13
 310 00a6 424B     		ldr	r3, .L48+8
 311 00a8 D3F89030 		ldr	r3, [r3, #144]
 312 00ac 03F03003 		and	r3, r3, #48
 313 00b0 102B     		cmp	r3, #16
 314 00b2 0AD0     		beq	.L25
 315 00b4 01D8     		bhi	.L26
 316 00b6 63B3     		cbz	r3, .L43
 317 00b8 03E0     		b	.L24
 318              	.L26:
 319 00ba 202B     		cmp	r3, #32
 320 00bc 03D0     		beq	.L27
 321 00be 302B     		cmp	r3, #48
 322 00c0 05D0     		beq	.L28
 323              	.L24:
ARM GAS  /tmp/ccNV7zic.s 			page 40


1862:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_StatusTypeDef ret                = HAL_OK;
 324              		.loc 1 1862 0 is_stmt 1
 325 00c2 1023     		movs	r3, #16
 326 00c4 2AE0     		b	.L12
 327              	.L27:
 328              	.LVL27:
 329              		.loc 1 1905 0 discriminator 17
 330 00c6 0223     		movs	r3, #2
 331 00c8 28E0     		b	.L12
 332              	.LVL28:
 333              	.L25:
 334              		.loc 1 1905 0 is_stmt 0 discriminator 16
 335 00ca 0423     		movs	r3, #4
 336 00cc 26E0     		b	.L12
 337              	.LVL29:
 338              	.L28:
 339              		.loc 1 1905 0 discriminator 18
 340 00ce 0823     		movs	r3, #8
 341 00d0 24E0     		b	.L12
 342              	.LVL30:
 343              	.L23:
 344              		.loc 1 1905 0 discriminator 14
 345 00d2 3A4A     		ldr	r2, .L48+20
 346 00d4 9342     		cmp	r3, r2
 347 00d6 1ED1     		bne	.L44
 348              		.loc 1 1905 0 discriminator 19
 349 00d8 354B     		ldr	r3, .L48+8
 350 00da D3F89030 		ldr	r3, [r3, #144]
 351 00de 03F44063 		and	r3, r3, #3072
 352 00e2 B3F5806F 		cmp	r3, #1024
 353 00e6 0CD0     		beq	.L30
 354 00e8 01D8     		bhi	.L31
 355 00ea B3B1     		cbz	r3, .L45
 356 00ec 05E0     		b	.L29
 357              	.L31:
 358 00ee B3F5006F 		cmp	r3, #2048
 359 00f2 04D0     		beq	.L32
 360 00f4 B3F5406F 		cmp	r3, #3072
 361 00f8 05D0     		beq	.L33
 362              	.L29:
1862:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_StatusTypeDef ret                = HAL_OK;
 363              		.loc 1 1862 0 is_stmt 1
 364 00fa 1023     		movs	r3, #16
 365 00fc 0EE0     		b	.L12
 366              	.L32:
 367              	.LVL31:
 368              		.loc 1 1905 0 discriminator 22
 369 00fe 0223     		movs	r3, #2
 370 0100 0CE0     		b	.L12
 371              	.LVL32:
 372              	.L30:
 373              		.loc 1 1905 0 is_stmt 0 discriminator 21
 374 0102 0423     		movs	r3, #4
 375 0104 0AE0     		b	.L12
 376              	.LVL33:
 377              	.L33:
 378              		.loc 1 1905 0 discriminator 23
ARM GAS  /tmp/ccNV7zic.s 			page 41


 379 0106 0823     		movs	r3, #8
 380 0108 08E0     		b	.L12
 381              	.LVL34:
 382              	.L41:
 383              		.loc 1 1905 0
 384 010a 0123     		movs	r3, #1
 385 010c 06E0     		b	.L12
 386              	.L42:
 387 010e 0023     		movs	r3, #0
 388 0110 04E0     		b	.L12
 389              	.L43:
 390 0112 0023     		movs	r3, #0
 391 0114 02E0     		b	.L12
 392              	.L44:
1862:HALLIB/Src/stm32f7xx_hal_usart.c ****   HAL_StatusTypeDef ret                = HAL_OK;
 393              		.loc 1 1862 0 is_stmt 1
 394 0116 1023     		movs	r3, #16
 395 0118 00E0     		b	.L12
 396              	.L45:
 397              		.loc 1 1905 0
 398 011a 0123     		movs	r3, #1
 399              	.LVL35:
 400              	.L12:
1906:HALLIB/Src/stm32f7xx_hal_usart.c ****   switch (clocksource)
 401              		.loc 1 1906 0
 402 011c 082B     		cmp	r3, #8
 403 011e 39D8     		bhi	.L46
 404 0120 DFE803F0 		tbb	[pc, r3]
 405              	.L36:
 406 0124 05       		.byte	(.L35-.L36)/2
 407 0125 10       		.byte	(.L37-.L36)/2
 408 0126 1B       		.byte	(.L38-.L36)/2
 409 0127 38       		.byte	(.L46-.L36)/2
 410 0128 24       		.byte	(.L39-.L36)/2
 411 0129 38       		.byte	(.L46-.L36)/2
 412 012a 38       		.byte	(.L46-.L36)/2
 413 012b 38       		.byte	(.L46-.L36)/2
 414 012c 2F       		.byte	(.L40-.L36)/2
 415 012d 00       		.p2align 1
 416              	.L35:
1907:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1908:HALLIB/Src/stm32f7xx_hal_usart.c ****     case USART_CLOCKSOURCE_PCLK1:
1909:HALLIB/Src/stm32f7xx_hal_usart.c ****       usartdiv = (uint16_t)(((2*HAL_RCC_GetPCLK1Freq()) + (husart->Init.BaudRate/2))/ husart->Init.
 417              		.loc 1 1909 0
 418 012e FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 419              	.LVL36:
 420 0132 6368     		ldr	r3, [r4, #4]
 421 0134 5A08     		lsrs	r2, r3, #1
 422 0136 02EB4000 		add	r0, r2, r0, lsl #1
 423 013a B0FBF3F3 		udiv	r3, r0, r3
 424 013e 9BB2     		uxth	r3, r3
 425              	.LVL37:
1863:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t brrtemp                     = 0x0000U;
 426              		.loc 1 1863 0
 427 0140 0020     		movs	r0, #0
1910:HALLIB/Src/stm32f7xx_hal_usart.c ****       break;
 428              		.loc 1 1910 0
ARM GAS  /tmp/ccNV7zic.s 			page 42


 429 0142 29E0     		b	.L34
 430              	.LVL38:
 431              	.L37:
1911:HALLIB/Src/stm32f7xx_hal_usart.c ****     case USART_CLOCKSOURCE_PCLK2:
1912:HALLIB/Src/stm32f7xx_hal_usart.c ****       usartdiv = (uint16_t)(((2*HAL_RCC_GetPCLK2Freq()) + (husart->Init.BaudRate/2))/ husart->Init.
 432              		.loc 1 1912 0
 433 0144 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 434              	.LVL39:
 435 0148 6368     		ldr	r3, [r4, #4]
 436 014a 5A08     		lsrs	r2, r3, #1
 437 014c 02EB4000 		add	r0, r2, r0, lsl #1
 438 0150 B0FBF3F3 		udiv	r3, r0, r3
 439 0154 9BB2     		uxth	r3, r3
 440              	.LVL40:
1863:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t brrtemp                     = 0x0000U;
 441              		.loc 1 1863 0
 442 0156 0020     		movs	r0, #0
1913:HALLIB/Src/stm32f7xx_hal_usart.c ****       break;
 443              		.loc 1 1913 0
 444 0158 1EE0     		b	.L34
 445              	.LVL41:
 446              	.L38:
1914:HALLIB/Src/stm32f7xx_hal_usart.c ****     case USART_CLOCKSOURCE_HSI:
1915:HALLIB/Src/stm32f7xx_hal_usart.c ****       usartdiv = (uint16_t)(((2*HSI_VALUE) + (husart->Init.BaudRate/2))/ husart->Init.BaudRate);
 447              		.loc 1 1915 0
 448 015a 6268     		ldr	r2, [r4, #4]
 449 015c 184B     		ldr	r3, .L48+24
 450              	.LVL42:
 451 015e 03EB5203 		add	r3, r3, r2, lsr #1
 452 0162 B3FBF2F3 		udiv	r3, r3, r2
 453 0166 9BB2     		uxth	r3, r3
 454              	.LVL43:
1863:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t brrtemp                     = 0x0000U;
 455              		.loc 1 1863 0
 456 0168 0020     		movs	r0, #0
1916:HALLIB/Src/stm32f7xx_hal_usart.c ****       break;
 457              		.loc 1 1916 0
 458 016a 15E0     		b	.L34
 459              	.LVL44:
 460              	.L39:
1917:HALLIB/Src/stm32f7xx_hal_usart.c ****     case USART_CLOCKSOURCE_SYSCLK:
1918:HALLIB/Src/stm32f7xx_hal_usart.c ****       usartdiv = (uint16_t)(((2*HAL_RCC_GetSysClockFreq()) + (husart->Init.BaudRate/2))/ husart->In
 461              		.loc 1 1918 0
 462 016c FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 463              	.LVL45:
 464 0170 6368     		ldr	r3, [r4, #4]
 465 0172 5A08     		lsrs	r2, r3, #1
 466 0174 02EB4000 		add	r0, r2, r0, lsl #1
 467 0178 B0FBF3F3 		udiv	r3, r0, r3
 468 017c 9BB2     		uxth	r3, r3
 469              	.LVL46:
1863:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t brrtemp                     = 0x0000U;
 470              		.loc 1 1863 0
 471 017e 0020     		movs	r0, #0
1919:HALLIB/Src/stm32f7xx_hal_usart.c ****       break;
 472              		.loc 1 1919 0
 473 0180 0AE0     		b	.L34
ARM GAS  /tmp/ccNV7zic.s 			page 43


 474              	.LVL47:
 475              	.L40:
1920:HALLIB/Src/stm32f7xx_hal_usart.c ****     case USART_CLOCKSOURCE_LSE:
1921:HALLIB/Src/stm32f7xx_hal_usart.c ****       usartdiv = (uint16_t)(((2*LSE_VALUE) + (husart->Init.BaudRate/2))/ husart->Init.BaudRate);
 476              		.loc 1 1921 0
 477 0182 6268     		ldr	r2, [r4, #4]
 478 0184 5308     		lsrs	r3, r2, #1
 479              	.LVL48:
 480 0186 03F58033 		add	r3, r3, #65536
 481 018a B3FBF2F3 		udiv	r3, r3, r2
 482 018e 9BB2     		uxth	r3, r3
 483              	.LVL49:
1863:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t brrtemp                     = 0x0000U;
 484              		.loc 1 1863 0
 485 0190 0020     		movs	r0, #0
1922:HALLIB/Src/stm32f7xx_hal_usart.c ****       break;
 486              		.loc 1 1922 0
 487 0192 01E0     		b	.L34
 488              	.LVL50:
 489              	.L46:
1865:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 490              		.loc 1 1865 0
 491 0194 0023     		movs	r3, #0
 492              	.LVL51:
1923:HALLIB/Src/stm32f7xx_hal_usart.c ****     case USART_CLOCKSOURCE_UNDEFINED:
1924:HALLIB/Src/stm32f7xx_hal_usart.c ****     default:
1925:HALLIB/Src/stm32f7xx_hal_usart.c ****       ret = HAL_ERROR;
 493              		.loc 1 1925 0
 494 0196 0120     		movs	r0, #1
 495              	.LVL52:
 496              	.L34:
1926:HALLIB/Src/stm32f7xx_hal_usart.c ****       break;
1927:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1928:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1929:HALLIB/Src/stm32f7xx_hal_usart.c ****   brrtemp = usartdiv & 0xFFF0U;
 497              		.loc 1 1929 0
 498 0198 23F00F02 		bic	r2, r3, #15
 499              	.LVL53:
1930:HALLIB/Src/stm32f7xx_hal_usart.c ****   brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 500              		.loc 1 1930 0
 501 019c C3F34203 		ubfx	r3, r3, #1, #3
 502              	.LVL54:
 503 01a0 1343     		orrs	r3, r3, r2
 504              	.LVL55:
1931:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->Instance->BRR = brrtemp;
 505              		.loc 1 1931 0
 506 01a2 2268     		ldr	r2, [r4]
 507 01a4 D360     		str	r3, [r2, #12]
1932:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1933:HALLIB/Src/stm32f7xx_hal_usart.c ****   return ret;
1934:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 508              		.loc 1 1934 0
 509 01a6 10BD     		pop	{r4, pc}
 510              	.LVL56:
 511              	.L49:
 512              		.align	2
 513              	.L48:
ARM GAS  /tmp/ccNV7zic.s 			page 44


 514 01a8 F369FFEF 		.word	-268473869
 515 01ac 00100140 		.word	1073811456
 516 01b0 00380240 		.word	1073887232
 517 01b4 00440040 		.word	1073759232
 518 01b8 00480040 		.word	1073760256
 519 01bc 00140140 		.word	1073812480
 520 01c0 0048E801 		.word	32000000
 521              		.cfi_endproc
 522              	.LFE174:
 524              		.section	.text.USART_WaitOnFlagUntilTimeout,"ax",%progbits
 525              		.align	2
 526              		.thumb
 527              		.thumb_func
 529              	USART_WaitOnFlagUntilTimeout:
 530              	.LFB165:
1634:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Wait until flag is set */
 531              		.loc 1 1634 0
 532              		.cfi_startproc
 533              		@ args = 4, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              	.LVL57:
 536 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 537              	.LCFI1:
 538              		.cfi_def_cfa_offset 24
 539              		.cfi_offset 4, -24
 540              		.cfi_offset 5, -20
 541              		.cfi_offset 6, -16
 542              		.cfi_offset 7, -12
 543              		.cfi_offset 8, -8
 544              		.cfi_offset 14, -4
 545 0004 0546     		mov	r5, r0
 546 0006 0F46     		mov	r7, r1
 547 0008 1646     		mov	r6, r2
 548 000a 9846     		mov	r8, r3
 549 000c 069C     		ldr	r4, [sp, #24]
1636:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 550              		.loc 1 1636 0
 551 000e 26E0     		b	.L52
 552              	.LVL58:
 553              	.L55:
1639:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 554              		.loc 1 1639 0
 555 0010 B4F1FF3F 		cmp	r4, #-1
 556 0014 23D0     		beq	.L52
1641:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 557              		.loc 1 1641 0
 558 0016 2CB1     		cbz	r4, .L53
1641:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 559              		.loc 1 1641 0 is_stmt 0 discriminator 1
 560 0018 FFF7FEFF 		bl	HAL_GetTick
 561              	.LVL59:
 562 001c C8EB0000 		rsb	r0, r8, r0
 563 0020 8442     		cmp	r4, r0
 564 0022 1CD8     		bhi	.L52
 565              	.L53:
1644:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 566              		.loc 1 1644 0 is_stmt 1
ARM GAS  /tmp/ccNV7zic.s 			page 45


 567 0024 2A68     		ldr	r2, [r5]
 568 0026 1368     		ldr	r3, [r2]
 569 0028 23F08003 		bic	r3, r3, #128
 570 002c 1360     		str	r3, [r2]
1647:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 571              		.loc 1 1647 0
 572 002e 2A68     		ldr	r2, [r5]
 573 0030 1368     		ldr	r3, [r2]
 574 0032 23F02003 		bic	r3, r3, #32
 575 0036 1360     		str	r3, [r2]
1650:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 576              		.loc 1 1650 0
 577 0038 2A68     		ldr	r2, [r5]
 578 003a 1368     		ldr	r3, [r2]
 579 003c 23F48073 		bic	r3, r3, #256
 580 0040 1360     		str	r3, [r2]
1653:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 581              		.loc 1 1653 0
 582 0042 2A68     		ldr	r2, [r5]
 583 0044 9368     		ldr	r3, [r2, #8]
 584 0046 23F00103 		bic	r3, r3, #1
 585 004a 9360     		str	r3, [r2, #8]
1655:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 586              		.loc 1 1655 0
 587 004c 0123     		movs	r3, #1
 588 004e 85F84530 		strb	r3, [r5, #69]
1658:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 589              		.loc 1 1658 0
 590 0052 0023     		movs	r3, #0
 591 0054 85F84430 		strb	r3, [r5, #68]
1660:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 592              		.loc 1 1660 0
 593 0058 0320     		movs	r0, #3
 594 005a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 595              	.LVL60:
 596              	.L52:
1636:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 597              		.loc 1 1636 0
 598 005e 2B68     		ldr	r3, [r5]
 599 0060 DB69     		ldr	r3, [r3, #28]
 600 0062 37EA0303 		bics	r3, r7, r3
 601 0066 0CBF     		ite	eq
 602 0068 0123     		moveq	r3, #1
 603 006a 0023     		movne	r3, #0
 604 006c B342     		cmp	r3, r6
 605 006e CFD0     		beq	.L55
1664:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 606              		.loc 1 1664 0
 607 0070 0020     		movs	r0, #0
1665:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 608              		.loc 1 1665 0
 609 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 610              		.cfi_endproc
 611              	.LFE165:
 613 0076 00BF     		.section	.text.USART_CheckIdleState,"ax",%progbits
 614              		.align	2
 615              		.thumb
ARM GAS  /tmp/ccNV7zic.s 			page 46


 616              		.thumb_func
 618              	USART_CheckIdleState:
 619              	.LFB175:
1935:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1936:HALLIB/Src/stm32f7xx_hal_usart.c **** /**
1937:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @brief Check the USART Idle State
1938:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @param husart USART handle
1939:HALLIB/Src/stm32f7xx_hal_usart.c ****   * @retval HAL status
1940:HALLIB/Src/stm32f7xx_hal_usart.c ****   */
1941:HALLIB/Src/stm32f7xx_hal_usart.c **** static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
1942:HALLIB/Src/stm32f7xx_hal_usart.c **** {
 620              		.loc 1 1942 0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              	.LVL61:
 625 0000 10B5     		push	{r4, lr}
 626              	.LCFI2:
 627              		.cfi_def_cfa_offset 8
 628              		.cfi_offset 4, -8
 629              		.cfi_offset 14, -4
 630 0002 82B0     		sub	sp, sp, #8
 631              	.LCFI3:
 632              		.cfi_def_cfa_offset 16
 633 0004 0446     		mov	r4, r0
 634              	.LVL62:
1943:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t tickstart = 0U;
1944:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1945:HALLIB/Src/stm32f7xx_hal_usart.c ****    /* Initialize the USART ErrorCode */
1946:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->ErrorCode = HAL_USART_ERROR_NONE;
 635              		.loc 1 1946 0
 636 0006 0023     		movs	r3, #0
 637 0008 8364     		str	r3, [r0, #72]
1947:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1948:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Init tickstart for timeout managment*/
1949:HALLIB/Src/stm32f7xx_hal_usart.c ****   tickstart = HAL_GetTick();
 638              		.loc 1 1949 0
 639 000a FFF7FEFF 		bl	HAL_GetTick
 640              	.LVL63:
1950:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1951:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Check if the Transmitter is enabled */
1952:HALLIB/Src/stm32f7xx_hal_usart.c ****   if((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 641              		.loc 1 1952 0
 642 000e 2268     		ldr	r2, [r4]
 643 0010 1268     		ldr	r2, [r2]
 644 0012 12F0080F 		tst	r2, #8
 645 0016 0ED0     		beq	.L58
1953:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
1954:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Wait until TEACK flag is set */
1955:HALLIB/Src/stm32f7xx_hal_usart.c ****     if(USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, TEACK_REACK_TIMEOUT)
 646              		.loc 1 1955 0
 647 0018 4FF47A73 		mov	r3, #1000
 648 001c 0093     		str	r3, [sp]
 649 001e 0346     		mov	r3, r0
 650 0020 0022     		movs	r2, #0
 651 0022 4FF40011 		mov	r1, #2097152
 652 0026 2046     		mov	r0, r4
ARM GAS  /tmp/ccNV7zic.s 			page 47


 653              	.LVL64:
 654 0028 FFF7FEFF 		bl	USART_WaitOnFlagUntilTimeout
 655              	.LVL65:
 656 002c 18B1     		cbz	r0, .L58
1956:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
1957:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->State= HAL_USART_STATE_TIMEOUT;
 657              		.loc 1 1957 0
 658 002e 0320     		movs	r0, #3
 659 0030 84F84500 		strb	r0, [r4, #69]
1958:HALLIB/Src/stm32f7xx_hal_usart.c ****       return HAL_TIMEOUT;
 660              		.loc 1 1958 0
 661 0034 05E0     		b	.L59
 662              	.L58:
1959:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
1960:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
1961:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1962:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Initialize the USART state*/
1963:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->State= HAL_USART_STATE_READY;
 663              		.loc 1 1963 0
 664 0036 0123     		movs	r3, #1
 665 0038 84F84530 		strb	r3, [r4, #69]
1964:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1965:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Process Unlocked */
1966:HALLIB/Src/stm32f7xx_hal_usart.c ****   __HAL_UNLOCK(husart);
 666              		.loc 1 1966 0
 667 003c 0020     		movs	r0, #0
 668 003e 84F84400 		strb	r0, [r4, #68]
 669              	.L59:
1967:HALLIB/Src/stm32f7xx_hal_usart.c **** 
1968:HALLIB/Src/stm32f7xx_hal_usart.c ****   return HAL_OK;
1969:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 670              		.loc 1 1969 0
 671 0042 02B0     		add	sp, sp, #8
 672              	.LCFI4:
 673              		.cfi_def_cfa_offset 8
 674              		@ sp needed
 675 0044 10BD     		pop	{r4, pc}
 676              		.cfi_endproc
 677              	.LFE175:
 679 0046 00BF     		.section	.text.HAL_USART_MspInit,"ax",%progbits
 680              		.align	2
 681              		.weak	HAL_USART_MspInit
 682              		.thumb
 683              		.thumb_func
 685              	HAL_USART_MspInit:
 686              	.LFB138:
 272:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 687              		.loc 1 272 0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691              		@ link register save eliminated.
 692              	.LVL66:
 693 0000 7047     		bx	lr
 694              		.cfi_endproc
 695              	.LFE138:
 697 0002 00BF     		.section	.text.HAL_USART_Init,"ax",%progbits
ARM GAS  /tmp/ccNV7zic.s 			page 48


 698              		.align	2
 699              		.global	HAL_USART_Init
 700              		.thumb
 701              		.thumb_func
 703              	HAL_USART_Init:
 704              	.LFB136:
 190:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Check the USART handle allocation */
 705              		.loc 1 190 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 0
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 709              	.LVL67:
 192:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 710              		.loc 1 192 0
 711 0000 40B3     		cbz	r0, .L65
 190:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Check the USART handle allocation */
 712              		.loc 1 190 0
 713 0002 10B5     		push	{r4, lr}
 714              	.LCFI5:
 715              		.cfi_def_cfa_offset 8
 716              		.cfi_offset 4, -8
 717              		.cfi_offset 14, -4
 718 0004 0446     		mov	r4, r0
 200:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 719              		.loc 1 200 0
 720 0006 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 721 000a 1BB9     		cbnz	r3, .L64
 203:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 722              		.loc 1 203 0
 723 000c 80F84430 		strb	r3, [r0, #68]
 205:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 724              		.loc 1 205 0
 725 0010 FFF7FEFF 		bl	HAL_USART_MspInit
 726              	.LVL68:
 727              	.L64:
 208:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 728              		.loc 1 208 0
 729 0014 0223     		movs	r3, #2
 730 0016 84F84530 		strb	r3, [r4, #69]
 211:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 731              		.loc 1 211 0
 732 001a 2268     		ldr	r2, [r4]
 733 001c 1368     		ldr	r3, [r2]
 734 001e 23F00103 		bic	r3, r3, #1
 735 0022 1360     		str	r3, [r2]
 214:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 736              		.loc 1 214 0
 737 0024 2046     		mov	r0, r4
 738 0026 FFF7FEFF 		bl	USART_SetConfig
 739              	.LVL69:
 740 002a 0128     		cmp	r0, #1
 741 002c 14D0     		beq	.L63
 222:HALLIB/Src/stm32f7xx_hal_usart.c ****   CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 742              		.loc 1 222 0
 743 002e 2268     		ldr	r2, [r4]
 744 0030 5368     		ldr	r3, [r2, #4]
 745 0032 23F48043 		bic	r3, r3, #16384
ARM GAS  /tmp/ccNV7zic.s 			page 49


 746 0036 5360     		str	r3, [r2, #4]
 223:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 747              		.loc 1 223 0
 748 0038 2268     		ldr	r2, [r4]
 749 003a 9368     		ldr	r3, [r2, #8]
 750 003c 23F02A03 		bic	r3, r3, #42
 751 0040 9360     		str	r3, [r2, #8]
 226:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 752              		.loc 1 226 0
 753 0042 2268     		ldr	r2, [r4]
 754 0044 1368     		ldr	r3, [r2]
 755 0046 43F00103 		orr	r3, r3, #1
 756 004a 1360     		str	r3, [r2]
 229:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 757              		.loc 1 229 0
 758 004c 2046     		mov	r0, r4
 759 004e FFF7FEFF 		bl	USART_CheckIdleState
 760              	.LVL70:
 761 0052 10BD     		pop	{r4, pc}
 762              	.LVL71:
 763              	.L65:
 764              	.LCFI6:
 765              		.cfi_def_cfa_offset 0
 766              		.cfi_restore 4
 767              		.cfi_restore 14
 194:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 768              		.loc 1 194 0
 769 0054 0120     		movs	r0, #1
 770              	.LVL72:
 771 0056 7047     		bx	lr
 772              	.LVL73:
 773              	.L63:
 774              	.LCFI7:
 775              		.cfi_def_cfa_offset 8
 776              		.cfi_offset 4, -8
 777              		.cfi_offset 14, -4
 230:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 778              		.loc 1 230 0
 779 0058 10BD     		pop	{r4, pc}
 780              		.cfi_endproc
 781              	.LFE136:
 783 005a 00BF     		.section	.text.HAL_USART_MspDeInit,"ax",%progbits
 784              		.align	2
 785              		.weak	HAL_USART_MspDeInit
 786              		.thumb
 787              		.thumb_func
 789              	HAL_USART_MspDeInit:
 790              	.LFB139:
 287:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 791              		.loc 1 287 0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 795              		@ link register save eliminated.
 796              	.LVL74:
 797 0000 7047     		bx	lr
 798              		.cfi_endproc
ARM GAS  /tmp/ccNV7zic.s 			page 50


 799              	.LFE139:
 801 0002 00BF     		.section	.text.HAL_USART_DeInit,"ax",%progbits
 802              		.align	2
 803              		.global	HAL_USART_DeInit
 804              		.thumb
 805              		.thumb_func
 807              	HAL_USART_DeInit:
 808              	.LFB137:
 238:HALLIB/Src/stm32f7xx_hal_usart.c ****    /* Check the USART handle allocation */
 809              		.loc 1 238 0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              	.LVL75:
 240:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 814              		.loc 1 240 0
 815 0000 A0B1     		cbz	r0, .L71
 238:HALLIB/Src/stm32f7xx_hal_usart.c ****    /* Check the USART handle allocation */
 816              		.loc 1 238 0
 817 0002 38B5     		push	{r3, r4, r5, lr}
 818              	.LCFI8:
 819              		.cfi_def_cfa_offset 16
 820              		.cfi_offset 3, -16
 821              		.cfi_offset 4, -12
 822              		.cfi_offset 5, -8
 823              		.cfi_offset 14, -4
 824 0004 0446     		mov	r4, r0
 248:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 825              		.loc 1 248 0
 826 0006 0223     		movs	r3, #2
 827 0008 80F84530 		strb	r3, [r0, #69]
 250:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->Instance->CR2 = 0x0U;
 828              		.loc 1 250 0
 829 000c 0368     		ldr	r3, [r0]
 830 000e 0025     		movs	r5, #0
 831 0010 1D60     		str	r5, [r3]
 251:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->Instance->CR3 = 0x0U;
 832              		.loc 1 251 0
 833 0012 0368     		ldr	r3, [r0]
 834 0014 5D60     		str	r5, [r3, #4]
 252:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 835              		.loc 1 252 0
 836 0016 0368     		ldr	r3, [r0]
 837 0018 9D60     		str	r5, [r3, #8]
 255:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 838              		.loc 1 255 0
 839 001a FFF7FEFF 		bl	HAL_USART_MspDeInit
 840              	.LVL76:
 257:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->State = HAL_USART_STATE_RESET;
 841              		.loc 1 257 0
 842 001e A564     		str	r5, [r4, #72]
 258:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 843              		.loc 1 258 0
 844 0020 84F84550 		strb	r5, [r4, #69]
 261:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 845              		.loc 1 261 0
 846 0024 84F84450 		strb	r5, [r4, #68]
ARM GAS  /tmp/ccNV7zic.s 			page 51


 263:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 847              		.loc 1 263 0
 848 0028 2846     		mov	r0, r5
 849 002a 38BD     		pop	{r3, r4, r5, pc}
 850              	.LVL77:
 851              	.L71:
 852              	.LCFI9:
 853              		.cfi_def_cfa_offset 0
 854              		.cfi_restore 3
 855              		.cfi_restore 4
 856              		.cfi_restore 5
 857              		.cfi_restore 14
 242:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 858              		.loc 1 242 0
 859 002c 0120     		movs	r0, #1
 860              	.LVL78:
 861 002e 7047     		bx	lr
 862              		.cfi_endproc
 863              	.LFE137:
 865              		.section	.text.HAL_USART_Transmit,"ax",%progbits
 866              		.align	2
 867              		.global	HAL_USART_Transmit
 868              		.thumb
 869              		.thumb_func
 871              	HAL_USART_Transmit:
 872              	.LFB140:
 366:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
 873              		.loc 1 366 0
 874              		.cfi_startproc
 875              		@ args = 0, pretend = 0, frame = 0
 876              		@ frame_needed = 0, uses_anonymous_args = 0
 877              	.LVL79:
 878 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 879              	.LCFI10:
 880              		.cfi_def_cfa_offset 24
 881              		.cfi_offset 4, -24
 882              		.cfi_offset 5, -20
 883              		.cfi_offset 6, -16
 884              		.cfi_offset 7, -12
 885              		.cfi_offset 8, -8
 886              		.cfi_offset 14, -4
 887 0004 82B0     		sub	sp, sp, #8
 888              	.LCFI11:
 889              		.cfi_def_cfa_offset 32
 890 0006 1E46     		mov	r6, r3
 891              	.LVL80:
 370:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 892              		.loc 1 370 0
 893 0008 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 894              	.LVL81:
 895 000c 012B     		cmp	r3, #1
 896 000e 4CD1     		bne	.L80
 897 0010 0446     		mov	r4, r0
 898 0012 0D46     		mov	r5, r1
 899 0014 9046     		mov	r8, r2
 372:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 900              		.loc 1 372 0
ARM GAS  /tmp/ccNV7zic.s 			page 52


 901 0016 002A     		cmp	r2, #0
 902 0018 18BF     		it	ne
 903 001a 0029     		cmpne	r1, #0
 904 001c 47D0     		beq	.L81
 378:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 905              		.loc 1 378 0
 906 001e 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 907 0022 012B     		cmp	r3, #1
 908 0024 45D0     		beq	.L82
 378:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 909              		.loc 1 378 0 is_stmt 0 discriminator 2
 910 0026 0123     		movs	r3, #1
 911 0028 80F84430 		strb	r3, [r0, #68]
 380:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 912              		.loc 1 380 0 is_stmt 1 discriminator 2
 913 002c 0023     		movs	r3, #0
 914 002e 8364     		str	r3, [r0, #72]
 381:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 915              		.loc 1 381 0 discriminator 2
 916 0030 1223     		movs	r3, #18
 917 0032 80F84530 		strb	r3, [r0, #69]
 384:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 918              		.loc 1 384 0 discriminator 2
 919 0036 FFF7FEFF 		bl	HAL_GetTick
 920              	.LVL82:
 921 003a 0746     		mov	r7, r0
 922              	.LVL83:
 386:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferCount = Size;
 923              		.loc 1 386 0 discriminator 2
 924 003c A4F82C80 		strh	r8, [r4, #44]	@ movhi
 387:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 925              		.loc 1 387 0 discriminator 2
 926 0040 A4F82E80 		strh	r8, [r4, #46]	@ movhi
 390:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 927              		.loc 1 390 0 discriminator 2
 928 0044 1DE0     		b	.L76
 929              	.LVL84:
 930              	.L79:
 392:HALLIB/Src/stm32f7xx_hal_usart.c ****       if(USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 931              		.loc 1 392 0
 932 0046 E38D     		ldrh	r3, [r4, #46]
 933 0048 9BB2     		uxth	r3, r3
 934 004a 013B     		subs	r3, r3, #1
 935 004c 9BB2     		uxth	r3, r3
 936 004e E385     		strh	r3, [r4, #46]	@ movhi
 393:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
 937              		.loc 1 393 0
 938 0050 0096     		str	r6, [sp]
 939 0052 3B46     		mov	r3, r7
 940 0054 0022     		movs	r2, #0
 941 0056 4021     		movs	r1, #64
 942 0058 2046     		mov	r0, r4
 943 005a FFF7FEFF 		bl	USART_WaitOnFlagUntilTimeout
 944              	.LVL85:
 945 005e 50BB     		cbnz	r0, .L83
 397:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 946              		.loc 1 397 0
ARM GAS  /tmp/ccNV7zic.s 			page 53


 947 0060 A368     		ldr	r3, [r4, #8]
 948 0062 B3F5805F 		cmp	r3, #4096
 949 0066 08D1     		bne	.L77
 397:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 950              		.loc 1 397 0 is_stmt 0 discriminator 1
 951 0068 2369     		ldr	r3, [r4, #16]
 952 006a 33B9     		cbnz	r3, .L77
 953              	.LVL86:
 400:HALLIB/Src/stm32f7xx_hal_usart.c ****         pTxData += 2;
 954              		.loc 1 400 0 is_stmt 1
 955 006c 2268     		ldr	r2, [r4]
 956 006e 35F8023B 		ldrh	r3, [r5], #2
 957              	.LVL87:
 958 0072 C3F30803 		ubfx	r3, r3, #0, #9
 959 0076 9362     		str	r3, [r2, #40]
 960              	.LVL88:
 401:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 961              		.loc 1 401 0
 962 0078 03E0     		b	.L76
 963              	.LVL89:
 964              	.L77:
 405:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 965              		.loc 1 405 0
 966 007a 2368     		ldr	r3, [r4]
 967              	.LVL90:
 968 007c 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 969 007e 9A62     		str	r2, [r3, #40]
 970 0080 0135     		adds	r5, r5, #1
 971              	.LVL91:
 972              	.L76:
 390:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 973              		.loc 1 390 0
 974 0082 E38D     		ldrh	r3, [r4, #46]
 975 0084 9BB2     		uxth	r3, r3
 976 0086 002B     		cmp	r3, #0
 977 0088 DDD1     		bne	.L79
 409:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 978              		.loc 1 409 0
 979 008a 0096     		str	r6, [sp]
 980 008c 3B46     		mov	r3, r7
 981 008e 0022     		movs	r2, #0
 982 0090 4021     		movs	r1, #64
 983 0092 2046     		mov	r0, r4
 984 0094 FFF7FEFF 		bl	USART_WaitOnFlagUntilTimeout
 985              	.LVL92:
 986 0098 0346     		mov	r3, r0
 987 009a 70B9     		cbnz	r0, .L84
 414:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 988              		.loc 1 414 0
 989 009c 0122     		movs	r2, #1
 990 009e 84F84520 		strb	r2, [r4, #69]
 417:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 991              		.loc 1 417 0
 992 00a2 0022     		movs	r2, #0
 993 00a4 84F84420 		strb	r2, [r4, #68]
 419:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 994              		.loc 1 419 0
ARM GAS  /tmp/ccNV7zic.s 			page 54


 995 00a8 08E0     		b	.L75
 996              	.LVL93:
 997              	.L80:
 423:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 998              		.loc 1 423 0
 999 00aa 0223     		movs	r3, #2
 1000 00ac 06E0     		b	.L75
 1001              	.L81:
 374:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 1002              		.loc 1 374 0
 1003 00ae 0123     		movs	r3, #1
 1004 00b0 04E0     		b	.L75
 1005              	.L82:
 378:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1006              		.loc 1 378 0
 1007 00b2 0223     		movs	r3, #2
 1008 00b4 02E0     		b	.L75
 1009              	.LVL94:
 1010              	.L83:
 395:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
 1011              		.loc 1 395 0
 1012 00b6 0323     		movs	r3, #3
 1013 00b8 00E0     		b	.L75
 1014              	.L84:
 411:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 1015              		.loc 1 411 0
 1016 00ba 0323     		movs	r3, #3
 1017              	.LVL95:
 1018              	.L75:
 425:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1019              		.loc 1 425 0
 1020 00bc 1846     		mov	r0, r3
 1021 00be 02B0     		add	sp, sp, #8
 1022              	.LCFI12:
 1023              		.cfi_def_cfa_offset 24
 1024              		@ sp needed
 1025 00c0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1026              		.cfi_endproc
 1027              	.LFE140:
 1029              		.section	.text.HAL_USART_Receive,"ax",%progbits
 1030              		.align	2
 1031              		.global	HAL_USART_Receive
 1032              		.thumb
 1033              		.thumb_func
 1035              	HAL_USART_Receive:
 1036              	.LFB141:
 437:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
 1037              		.loc 1 437 0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              	.LVL96:
 1042 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1043              	.LCFI13:
 1044              		.cfi_def_cfa_offset 24
 1045              		.cfi_offset 4, -24
 1046              		.cfi_offset 5, -20
ARM GAS  /tmp/ccNV7zic.s 			page 55


 1047              		.cfi_offset 6, -16
 1048              		.cfi_offset 7, -12
 1049              		.cfi_offset 8, -8
 1050              		.cfi_offset 14, -4
 1051 0004 82B0     		sub	sp, sp, #8
 1052              	.LCFI14:
 1053              		.cfi_def_cfa_offset 32
 1054 0006 1E46     		mov	r6, r3
 1055              	.LVL97:
 442:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 1056              		.loc 1 442 0
 1057 0008 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1058              	.LVL98:
 1059 000c 012B     		cmp	r3, #1
 1060 000e 73D1     		bne	.L98
 1061 0010 0446     		mov	r4, r0
 1062 0012 0D46     		mov	r5, r1
 1063 0014 9046     		mov	r8, r2
 444:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1064              		.loc 1 444 0
 1065 0016 002A     		cmp	r2, #0
 1066 0018 18BF     		it	ne
 1067 001a 0029     		cmpne	r1, #0
 1068 001c 6ED0     		beq	.L99
 449:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1069              		.loc 1 449 0
 1070 001e 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1071 0022 012B     		cmp	r3, #1
 1072 0024 6CD0     		beq	.L100
 449:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1073              		.loc 1 449 0 is_stmt 0 discriminator 2
 1074 0026 0123     		movs	r3, #1
 1075 0028 80F84430 		strb	r3, [r0, #68]
 451:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 1076              		.loc 1 451 0 is_stmt 1 discriminator 2
 1077 002c 0023     		movs	r3, #0
 1078 002e 8364     		str	r3, [r0, #72]
 452:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1079              		.loc 1 452 0 discriminator 2
 1080 0030 2223     		movs	r3, #34
 1081 0032 80F84530 		strb	r3, [r0, #69]
 455:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1082              		.loc 1 455 0 discriminator 2
 1083 0036 FFF7FEFF 		bl	HAL_GetTick
 1084              	.LVL99:
 1085 003a 0746     		mov	r7, r0
 1086              	.LVL100:
 457:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferCount = Size;
 1087              		.loc 1 457 0 discriminator 2
 1088 003c A4F83480 		strh	r8, [r4, #52]	@ movhi
 458:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1089              		.loc 1 458 0 discriminator 2
 1090 0040 A4F83680 		strh	r8, [r4, #54]	@ movhi
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1091              		.loc 1 461 0 discriminator 2
 1092 0044 A368     		ldr	r3, [r4, #8]
 1093 0046 B3F5805F 		cmp	r3, #4096
ARM GAS  /tmp/ccNV7zic.s 			page 56


 1094 004a 08D1     		bne	.L88
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1095              		.loc 1 461 0 is_stmt 0 discriminator 1
 1096 004c 2369     		ldr	r3, [r4, #16]
 1097 004e 1BB9     		cbnz	r3, .L89
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1098              		.loc 1 461 0 discriminator 3
 1099 0050 40F2FF13 		movw	r3, #511
 1100 0054 2387     		strh	r3, [r4, #56]	@ movhi
 1101 0056 15E0     		b	.L90
 1102              	.L89:
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1103              		.loc 1 461 0 discriminator 4
 1104 0058 FF23     		movs	r3, #255
 1105 005a 2387     		strh	r3, [r4, #56]	@ movhi
 1106 005c 12E0     		b	.L90
 1107              	.L88:
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1108              		.loc 1 461 0 discriminator 2
 1109 005e 3BB9     		cbnz	r3, .L91
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1110              		.loc 1 461 0 discriminator 5
 1111 0060 2369     		ldr	r3, [r4, #16]
 1112 0062 13B9     		cbnz	r3, .L92
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1113              		.loc 1 461 0 discriminator 7
 1114 0064 FF23     		movs	r3, #255
 1115 0066 2387     		strh	r3, [r4, #56]	@ movhi
 1116 0068 0CE0     		b	.L90
 1117              	.L92:
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1118              		.loc 1 461 0 discriminator 8
 1119 006a 7F23     		movs	r3, #127
 1120 006c 2387     		strh	r3, [r4, #56]	@ movhi
 1121 006e 09E0     		b	.L90
 1122              	.L91:
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1123              		.loc 1 461 0 discriminator 6
 1124 0070 B3F1805F 		cmp	r3, #268435456
 1125 0074 06D1     		bne	.L90
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1126              		.loc 1 461 0 discriminator 9
 1127 0076 2369     		ldr	r3, [r4, #16]
 1128 0078 13B9     		cbnz	r3, .L93
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1129              		.loc 1 461 0 discriminator 10
 1130 007a 7F23     		movs	r3, #127
 1131 007c 2387     		strh	r3, [r4, #56]	@ movhi
 1132 007e 01E0     		b	.L90
 1133              	.L93:
 461:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1134              		.loc 1 461 0 discriminator 11
 1135 0080 3F23     		movs	r3, #63
 1136 0082 2387     		strh	r3, [r4, #56]	@ movhi
 1137              	.L90:
 462:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1138              		.loc 1 462 0 is_stmt 1
ARM GAS  /tmp/ccNV7zic.s 			page 57


 1139 0084 B4F83880 		ldrh	r8, [r4, #56]
 1140              	.LVL101:
 465:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1141              		.loc 1 465 0
 1142 0088 2BE0     		b	.L94
 1143              	.LVL102:
 1144              	.L97:
 467:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1145              		.loc 1 467 0
 1146 008a E38E     		ldrh	r3, [r4, #54]
 1147 008c 9BB2     		uxth	r3, r3
 1148 008e 013B     		subs	r3, r3, #1
 1149 0090 9BB2     		uxth	r3, r3
 1150 0092 E386     		strh	r3, [r4, #54]	@ movhi
 473:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 1151              		.loc 1 473 0
 1152 0094 0096     		str	r6, [sp]
 1153 0096 3B46     		mov	r3, r7
 1154 0098 0022     		movs	r2, #0
 1155 009a 4021     		movs	r1, #64
 1156 009c 2046     		mov	r0, r4
 1157 009e FFF7FEFF 		bl	USART_WaitOnFlagUntilTimeout
 1158              	.LVL103:
 1159 00a2 78BB     		cbnz	r0, .L101
 477:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1160              		.loc 1 477 0
 1161 00a4 2368     		ldr	r3, [r4]
 1162 00a6 FF22     		movs	r2, #255
 1163 00a8 9A62     		str	r2, [r3, #40]
 480:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 1164              		.loc 1 480 0
 1165 00aa 0096     		str	r6, [sp]
 1166 00ac 3B46     		mov	r3, r7
 1167 00ae 0022     		movs	r2, #0
 1168 00b0 2021     		movs	r1, #32
 1169 00b2 2046     		mov	r0, r4
 1170 00b4 FFF7FEFF 		bl	USART_WaitOnFlagUntilTimeout
 1171              	.LVL104:
 1172 00b8 30BB     		cbnz	r0, .L102
 485:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 1173              		.loc 1 485 0
 1174 00ba A368     		ldr	r3, [r4, #8]
 1175 00bc B3F5805F 		cmp	r3, #4096
 1176 00c0 08D1     		bne	.L95
 485:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 1177              		.loc 1 485 0 is_stmt 0 discriminator 1
 1178 00c2 2369     		ldr	r3, [r4, #16]
 1179 00c4 33B9     		cbnz	r3, .L95
 1180              	.LVL105:
 488:HALLIB/Src/stm32f7xx_hal_usart.c ****         pRxData +=2;
 1181              		.loc 1 488 0 is_stmt 1
 1182 00c6 2368     		ldr	r3, [r4]
 1183 00c8 5B6A     		ldr	r3, [r3, #36]
 1184 00ca 08EA0303 		and	r3, r8, r3
 1185 00ce 25F8023B 		strh	r3, [r5], #2	@ movhi
 1186              	.LVL106:
 489:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
ARM GAS  /tmp/ccNV7zic.s 			page 58


 1187              		.loc 1 489 0
 1188 00d2 06E0     		b	.L94
 1189              	.LVL107:
 1190              	.L95:
 493:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 1191              		.loc 1 493 0
 1192 00d4 2368     		ldr	r3, [r4]
 1193 00d6 5B6A     		ldr	r3, [r3, #36]
 1194 00d8 5FFA88F2 		uxtb	r2, r8
 1195 00dc 1340     		ands	r3, r3, r2
 1196 00de 2B70     		strb	r3, [r5]
 1197 00e0 0135     		adds	r5, r5, #1
 1198              	.LVL108:
 1199              	.L94:
 465:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1200              		.loc 1 465 0
 1201 00e2 E38E     		ldrh	r3, [r4, #54]
 1202 00e4 9BB2     		uxth	r3, r3
 1203 00e6 002B     		cmp	r3, #0
 1204 00e8 CFD1     		bne	.L97
 497:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1205              		.loc 1 497 0
 1206 00ea 0123     		movs	r3, #1
 1207 00ec 84F84530 		strb	r3, [r4, #69]
 500:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1208              		.loc 1 500 0
 1209 00f0 0020     		movs	r0, #0
 1210 00f2 84F84400 		strb	r0, [r4, #68]
 502:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1211              		.loc 1 502 0
 1212 00f6 08E0     		b	.L87
 1213              	.LVL109:
 1214              	.L98:
 506:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1215              		.loc 1 506 0
 1216 00f8 0220     		movs	r0, #2
 1217              	.LVL110:
 1218 00fa 06E0     		b	.L87
 1219              	.LVL111:
 1220              	.L99:
 446:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 1221              		.loc 1 446 0
 1222 00fc 0120     		movs	r0, #1
 1223              	.LVL112:
 1224 00fe 04E0     		b	.L87
 1225              	.LVL113:
 1226              	.L100:
 449:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1227              		.loc 1 449 0
 1228 0100 0220     		movs	r0, #2
 1229              	.LVL114:
 1230 0102 02E0     		b	.L87
 1231              	.LVL115:
 1232              	.L101:
 475:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 1233              		.loc 1 475 0
 1234 0104 0320     		movs	r0, #3
ARM GAS  /tmp/ccNV7zic.s 			page 59


 1235 0106 00E0     		b	.L87
 1236              	.L102:
 482:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 1237              		.loc 1 482 0
 1238 0108 0320     		movs	r0, #3
 1239              	.LVL116:
 1240              	.L87:
 508:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1241              		.loc 1 508 0
 1242 010a 02B0     		add	sp, sp, #8
 1243              	.LCFI15:
 1244              		.cfi_def_cfa_offset 24
 1245              		@ sp needed
 1246 010c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1247              		.cfi_endproc
 1248              	.LFE141:
 1250              		.section	.text.HAL_USART_TransmitReceive,"ax",%progbits
 1251              		.align	2
 1252              		.global	HAL_USART_TransmitReceive
 1253              		.thumb
 1254              		.thumb_func
 1256              	HAL_USART_TransmitReceive:
 1257              	.LFB142:
 520:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
 1258              		.loc 1 520 0
 1259              		.cfi_startproc
 1260              		@ args = 4, pretend = 0, frame = 0
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
 1262              	.LVL117:
 1263 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1264              	.LCFI16:
 1265              		.cfi_def_cfa_offset 24
 1266              		.cfi_offset 4, -24
 1267              		.cfi_offset 5, -20
 1268              		.cfi_offset 6, -16
 1269              		.cfi_offset 7, -12
 1270              		.cfi_offset 8, -8
 1271              		.cfi_offset 14, -4
 1272 0004 82B0     		sub	sp, sp, #8
 1273              	.LCFI17:
 1274              		.cfi_def_cfa_offset 32
 1275 0006 9846     		mov	r8, r3
 1276              	.LVL118:
 525:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 1277              		.loc 1 525 0
 1278 0008 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1279              	.LVL119:
 1280 000c 012B     		cmp	r3, #1
 1281 000e 40F09680 		bne	.L118
 1282 0012 0446     		mov	r4, r0
 1283 0014 0D46     		mov	r5, r1
 1284 0016 1646     		mov	r6, r2
 527:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1285              		.loc 1 527 0
 1286 0018 002A     		cmp	r2, #0
 1287 001a 18BF     		it	ne
 1288 001c 0029     		cmpne	r1, #0
ARM GAS  /tmp/ccNV7zic.s 			page 60


 1289 001e 00F09080 		beq	.L119
 527:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1290              		.loc 1 527 0 is_stmt 0 discriminator 1
 1291 0022 B8F1000F 		cmp	r8, #0
 1292 0026 00F08E80 		beq	.L120
 532:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1293              		.loc 1 532 0 is_stmt 1
 1294 002a 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1295 002e 012B     		cmp	r3, #1
 1296 0030 00F08B80 		beq	.L121
 532:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1297              		.loc 1 532 0 is_stmt 0 discriminator 2
 1298 0034 0123     		movs	r3, #1
 1299 0036 80F84430 		strb	r3, [r0, #68]
 534:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 1300              		.loc 1 534 0 is_stmt 1 discriminator 2
 1301 003a 0023     		movs	r3, #0
 1302 003c 8364     		str	r3, [r0, #72]
 535:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1303              		.loc 1 535 0 discriminator 2
 1304 003e 2223     		movs	r3, #34
 1305 0040 80F84530 		strb	r3, [r0, #69]
 538:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1306              		.loc 1 538 0 discriminator 2
 1307 0044 FFF7FEFF 		bl	HAL_GetTick
 1308              	.LVL120:
 1309 0048 0746     		mov	r7, r0
 1310              	.LVL121:
 540:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 1311              		.loc 1 540 0 discriminator 2
 1312 004a A4F83480 		strh	r8, [r4, #52]	@ movhi
 541:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferCount = Size;
 1313              		.loc 1 541 0 discriminator 2
 1314 004e A4F82C80 		strh	r8, [r4, #44]	@ movhi
 542:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferCount = Size;
 1315              		.loc 1 542 0 discriminator 2
 1316 0052 A4F82E80 		strh	r8, [r4, #46]	@ movhi
 543:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1317              		.loc 1 543 0 discriminator 2
 1318 0056 A4F83680 		strh	r8, [r4, #54]	@ movhi
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1319              		.loc 1 546 0 discriminator 2
 1320 005a A368     		ldr	r3, [r4, #8]
 1321 005c B3F5805F 		cmp	r3, #4096
 1322 0060 08D1     		bne	.L106
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1323              		.loc 1 546 0 is_stmt 0 discriminator 1
 1324 0062 2369     		ldr	r3, [r4, #16]
 1325 0064 1BB9     		cbnz	r3, .L107
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1326              		.loc 1 546 0 discriminator 3
 1327 0066 40F2FF13 		movw	r3, #511
 1328 006a 2387     		strh	r3, [r4, #56]	@ movhi
 1329 006c 15E0     		b	.L108
 1330              	.L107:
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1331              		.loc 1 546 0 discriminator 4
ARM GAS  /tmp/ccNV7zic.s 			page 61


 1332 006e FF23     		movs	r3, #255
 1333 0070 2387     		strh	r3, [r4, #56]	@ movhi
 1334 0072 12E0     		b	.L108
 1335              	.L106:
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1336              		.loc 1 546 0 discriminator 2
 1337 0074 3BB9     		cbnz	r3, .L109
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1338              		.loc 1 546 0 discriminator 5
 1339 0076 2369     		ldr	r3, [r4, #16]
 1340 0078 13B9     		cbnz	r3, .L110
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1341              		.loc 1 546 0 discriminator 7
 1342 007a FF23     		movs	r3, #255
 1343 007c 2387     		strh	r3, [r4, #56]	@ movhi
 1344 007e 0CE0     		b	.L108
 1345              	.L110:
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1346              		.loc 1 546 0 discriminator 8
 1347 0080 7F23     		movs	r3, #127
 1348 0082 2387     		strh	r3, [r4, #56]	@ movhi
 1349 0084 09E0     		b	.L108
 1350              	.L109:
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1351              		.loc 1 546 0 discriminator 6
 1352 0086 B3F1805F 		cmp	r3, #268435456
 1353 008a 06D1     		bne	.L108
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1354              		.loc 1 546 0 discriminator 9
 1355 008c 2369     		ldr	r3, [r4, #16]
 1356 008e 13B9     		cbnz	r3, .L111
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1357              		.loc 1 546 0 discriminator 10
 1358 0090 7F23     		movs	r3, #127
 1359 0092 2387     		strh	r3, [r4, #56]	@ movhi
 1360 0094 01E0     		b	.L108
 1361              	.L111:
 546:HALLIB/Src/stm32f7xx_hal_usart.c ****     uhMask = husart->Mask;
 1362              		.loc 1 546 0 discriminator 11
 1363 0096 3F23     		movs	r3, #63
 1364 0098 2387     		strh	r3, [r4, #56]	@ movhi
 1365              	.L108:
 547:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1366              		.loc 1 547 0 is_stmt 1
 1367 009a B4F83880 		ldrh	r8, [r4, #56]
 1368              	.LVL122:
 550:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1369              		.loc 1 550 0
 1370 009e 43E0     		b	.L112
 1371              	.LVL123:
 1372              	.L117:
 552:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->RxXferCount--;
 1373              		.loc 1 552 0
 1374 00a0 E38D     		ldrh	r3, [r4, #46]
 1375 00a2 9BB2     		uxth	r3, r3
 1376 00a4 013B     		subs	r3, r3, #1
 1377 00a6 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccNV7zic.s 			page 62


 1378 00a8 E385     		strh	r3, [r4, #46]	@ movhi
 553:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1379              		.loc 1 553 0
 1380 00aa E38E     		ldrh	r3, [r4, #54]
 1381 00ac 9BB2     		uxth	r3, r3
 1382 00ae 013B     		subs	r3, r3, #1
 1383 00b0 9BB2     		uxth	r3, r3
 1384 00b2 E386     		strh	r3, [r4, #54]	@ movhi
 556:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 1385              		.loc 1 556 0
 1386 00b4 089B     		ldr	r3, [sp, #32]
 1387 00b6 0093     		str	r3, [sp]
 1388 00b8 3B46     		mov	r3, r7
 1389 00ba 0022     		movs	r2, #0
 1390 00bc 4021     		movs	r1, #64
 1391 00be 2046     		mov	r0, r4
 1392 00c0 FFF7FEFF 		bl	USART_WaitOnFlagUntilTimeout
 1393              	.LVL124:
 1394 00c4 0028     		cmp	r0, #0
 1395 00c6 42D1     		bne	.L122
 560:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 1396              		.loc 1 560 0
 1397 00c8 A368     		ldr	r3, [r4, #8]
 1398 00ca B3F5805F 		cmp	r3, #4096
 1399 00ce 08D1     		bne	.L113
 560:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 1400              		.loc 1 560 0 is_stmt 0 discriminator 1
 1401 00d0 2369     		ldr	r3, [r4, #16]
 1402 00d2 33B9     		cbnz	r3, .L113
 1403              	.LVL125:
 563:HALLIB/Src/stm32f7xx_hal_usart.c ****         pTxData += 2;
 1404              		.loc 1 563 0 is_stmt 1
 1405 00d4 2268     		ldr	r2, [r4]
 1406 00d6 35F8023B 		ldrh	r3, [r5], #2
 1407              	.LVL126:
 1408 00da 08EA0303 		and	r3, r8, r3
 1409 00de 9362     		str	r3, [r2, #40]
 1410              	.LVL127:
 564:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 1411              		.loc 1 564 0
 1412 00e0 05E0     		b	.L114
 1413              	.LVL128:
 1414              	.L113:
 568:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 1415              		.loc 1 568 0
 1416 00e2 2268     		ldr	r2, [r4]
 1417              	.LVL129:
 1418 00e4 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 1419 00e6 08EA0303 		and	r3, r8, r3
 1420 00ea 9362     		str	r3, [r2, #40]
 1421 00ec 0135     		adds	r5, r5, #1
 1422              	.LVL130:
 1423              	.L114:
 572:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 1424              		.loc 1 572 0
 1425 00ee 089B     		ldr	r3, [sp, #32]
 1426 00f0 0093     		str	r3, [sp]
ARM GAS  /tmp/ccNV7zic.s 			page 63


 1427 00f2 3B46     		mov	r3, r7
 1428 00f4 0022     		movs	r2, #0
 1429 00f6 2021     		movs	r1, #32
 1430 00f8 2046     		mov	r0, r4
 1431 00fa FFF7FEFF 		bl	USART_WaitOnFlagUntilTimeout
 1432              	.LVL131:
 1433 00fe 40BB     		cbnz	r0, .L123
 577:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 1434              		.loc 1 577 0
 1435 0100 A368     		ldr	r3, [r4, #8]
 1436 0102 B3F5805F 		cmp	r3, #4096
 1437 0106 08D1     		bne	.L115
 577:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 1438              		.loc 1 577 0 is_stmt 0 discriminator 1
 1439 0108 2369     		ldr	r3, [r4, #16]
 1440 010a 33B9     		cbnz	r3, .L115
 1441              	.LVL132:
 580:HALLIB/Src/stm32f7xx_hal_usart.c ****         pRxData +=2U;
 1442              		.loc 1 580 0 is_stmt 1
 1443 010c 2368     		ldr	r3, [r4]
 1444 010e 5B6A     		ldr	r3, [r3, #36]
 1445 0110 08EA0303 		and	r3, r8, r3
 1446 0114 26F8023B 		strh	r3, [r6], #2	@ movhi
 1447              	.LVL133:
 581:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 1448              		.loc 1 581 0
 1449 0118 06E0     		b	.L112
 1450              	.LVL134:
 1451              	.L115:
 585:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 1452              		.loc 1 585 0
 1453 011a 2368     		ldr	r3, [r4]
 1454 011c 5B6A     		ldr	r3, [r3, #36]
 1455 011e 5FFA88F2 		uxtb	r2, r8
 1456 0122 1340     		ands	r3, r3, r2
 1457 0124 3370     		strb	r3, [r6]
 1458 0126 0136     		adds	r6, r6, #1
 1459              	.LVL135:
 1460              	.L112:
 550:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1461              		.loc 1 550 0
 1462 0128 E38D     		ldrh	r3, [r4, #46]
 1463 012a 9BB2     		uxth	r3, r3
 1464 012c 002B     		cmp	r3, #0
 1465 012e B7D1     		bne	.L117
 589:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1466              		.loc 1 589 0
 1467 0130 0123     		movs	r3, #1
 1468 0132 84F84530 		strb	r3, [r4, #69]
 592:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1469              		.loc 1 592 0
 1470 0136 0020     		movs	r0, #0
 1471 0138 84F84400 		strb	r0, [r4, #68]
 594:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1472              		.loc 1 594 0
 1473 013c 0AE0     		b	.L105
 1474              	.LVL136:
ARM GAS  /tmp/ccNV7zic.s 			page 64


 1475              	.L118:
 598:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1476              		.loc 1 598 0
 1477 013e 0220     		movs	r0, #2
 1478              	.LVL137:
 1479 0140 08E0     		b	.L105
 1480              	.LVL138:
 1481              	.L119:
 529:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 1482              		.loc 1 529 0
 1483 0142 0120     		movs	r0, #1
 1484              	.LVL139:
 1485 0144 06E0     		b	.L105
 1486              	.LVL140:
 1487              	.L120:
 1488 0146 0120     		movs	r0, #1
 1489              	.LVL141:
 1490 0148 04E0     		b	.L105
 1491              	.LVL142:
 1492              	.L121:
 532:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1493              		.loc 1 532 0
 1494 014a 0220     		movs	r0, #2
 1495              	.LVL143:
 1496 014c 02E0     		b	.L105
 1497              	.LVL144:
 1498              	.L122:
 558:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 1499              		.loc 1 558 0
 1500 014e 0320     		movs	r0, #3
 1501 0150 00E0     		b	.L105
 1502              	.L123:
 574:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 1503              		.loc 1 574 0
 1504 0152 0320     		movs	r0, #3
 1505              	.LVL145:
 1506              	.L105:
 600:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1507              		.loc 1 600 0
 1508 0154 02B0     		add	sp, sp, #8
 1509              	.LCFI18:
 1510              		.cfi_def_cfa_offset 24
 1511              		@ sp needed
 1512 0156 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1513              		.cfi_endproc
 1514              	.LFE142:
 1516 015a 00BF     		.section	.text.HAL_USART_Transmit_IT,"ax",%progbits
 1517              		.align	2
 1518              		.global	HAL_USART_Transmit_IT
 1519              		.thumb
 1520              		.thumb_func
 1522              	HAL_USART_Transmit_IT:
 1523              	.LFB143:
 610:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_READY)
 1524              		.loc 1 610 0
 1525              		.cfi_startproc
 1526              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccNV7zic.s 			page 65


 1527              		@ frame_needed = 0, uses_anonymous_args = 0
 1528              		@ link register save eliminated.
 1529              	.LVL146:
 611:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 1530              		.loc 1 611 0
 1531 0000 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1532 0004 012B     		cmp	r3, #1
 1533 0006 18D1     		bne	.L127
 613:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1534              		.loc 1 613 0
 1535 0008 002A     		cmp	r2, #0
 1536 000a 18BF     		it	ne
 1537 000c 0029     		cmpne	r1, #0
 1538 000e 16D0     		beq	.L128
 619:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1539              		.loc 1 619 0
 1540 0010 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1541 0014 012B     		cmp	r3, #1
 1542 0016 14D0     		beq	.L129
 621:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 1543              		.loc 1 621 0 discriminator 2
 1544 0018 8162     		str	r1, [r0, #40]
 622:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferCount = Size;
 1545              		.loc 1 622 0 discriminator 2
 1546 001a 8285     		strh	r2, [r0, #44]	@ movhi
 623:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1547              		.loc 1 623 0 discriminator 2
 1548 001c C285     		strh	r2, [r0, #46]	@ movhi
 625:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 1549              		.loc 1 625 0 discriminator 2
 1550 001e 0023     		movs	r3, #0
 1551 0020 8364     		str	r3, [r0, #72]
 626:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1552              		.loc 1 626 0 discriminator 2
 1553 0022 1222     		movs	r2, #18
 1554              	.LVL147:
 1555 0024 80F84520 		strb	r2, [r0, #69]
 635:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1556              		.loc 1 635 0 discriminator 2
 1557 0028 80F84430 		strb	r3, [r0, #68]
 638:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1558              		.loc 1 638 0 discriminator 2
 1559 002c 0168     		ldr	r1, [r0]
 1560              	.LVL148:
 1561 002e 0A68     		ldr	r2, [r1]
 1562 0030 42F08002 		orr	r2, r2, #128
 1563 0034 0A60     		str	r2, [r1]
 1564              	.LVL149:
 640:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1565              		.loc 1 640 0 discriminator 2
 1566 0036 1846     		mov	r0, r3
 1567              	.LVL150:
 1568 0038 7047     		bx	lr
 1569              	.LVL151:
 1570              	.L127:
 644:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1571              		.loc 1 644 0
ARM GAS  /tmp/ccNV7zic.s 			page 66


 1572 003a 0220     		movs	r0, #2
 1573              	.LVL152:
 1574 003c 7047     		bx	lr
 1575              	.LVL153:
 1576              	.L128:
 615:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 1577              		.loc 1 615 0
 1578 003e 0120     		movs	r0, #1
 1579              	.LVL154:
 1580 0040 7047     		bx	lr
 1581              	.LVL155:
 1582              	.L129:
 619:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1583              		.loc 1 619 0
 1584 0042 0220     		movs	r0, #2
 1585              	.LVL156:
 646:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1586              		.loc 1 646 0
 1587 0044 7047     		bx	lr
 1588              		.cfi_endproc
 1589              	.LFE143:
 1591 0046 00BF     		.section	.text.HAL_USART_Receive_IT,"ax",%progbits
 1592              		.align	2
 1593              		.global	HAL_USART_Receive_IT
 1594              		.thumb
 1595              		.thumb_func
 1597              	HAL_USART_Receive_IT:
 1598              	.LFB144:
 657:HALLIB/Src/stm32f7xx_hal_usart.c ****   if(husart->State == HAL_USART_STATE_READY)
 1599              		.loc 1 657 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 0, uses_anonymous_args = 0
 1603              		@ link register save eliminated.
 1604              	.LVL157:
 658:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 1605              		.loc 1 658 0
 1606 0000 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1607 0004 012B     		cmp	r3, #1
 1608 0006 4DD1     		bne	.L139
 660:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1609              		.loc 1 660 0
 1610 0008 002A     		cmp	r2, #0
 1611 000a 18BF     		it	ne
 1612 000c 0029     		cmpne	r1, #0
 1613 000e 4BD0     		beq	.L140
 665:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1614              		.loc 1 665 0
 1615 0010 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1616 0014 012B     		cmp	r3, #1
 1617 0016 49D0     		beq	.L141
 665:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1618              		.loc 1 665 0 is_stmt 0 discriminator 2
 1619 0018 0123     		movs	r3, #1
 1620 001a 80F84430 		strb	r3, [r0, #68]
 667:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferSize = Size;
 1621              		.loc 1 667 0 is_stmt 1 discriminator 2
ARM GAS  /tmp/ccNV7zic.s 			page 67


 1622 001e 0163     		str	r1, [r0, #48]
 668:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferCount = Size;
 1623              		.loc 1 668 0 discriminator 2
 1624 0020 8286     		strh	r2, [r0, #52]	@ movhi
 669:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1625              		.loc 1 669 0 discriminator 2
 1626 0022 C286     		strh	r2, [r0, #54]	@ movhi
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1627              		.loc 1 671 0 discriminator 2
 1628 0024 8368     		ldr	r3, [r0, #8]
 1629 0026 B3F5805F 		cmp	r3, #4096
 1630 002a 08D1     		bne	.L132
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1631              		.loc 1 671 0 is_stmt 0 discriminator 1
 1632 002c 0369     		ldr	r3, [r0, #16]
 1633 002e 1BB9     		cbnz	r3, .L133
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1634              		.loc 1 671 0 discriminator 3
 1635 0030 40F2FF13 		movw	r3, #511
 1636 0034 0387     		strh	r3, [r0, #56]	@ movhi
 1637 0036 15E0     		b	.L134
 1638              	.L133:
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1639              		.loc 1 671 0 discriminator 4
 1640 0038 FF23     		movs	r3, #255
 1641 003a 0387     		strh	r3, [r0, #56]	@ movhi
 1642 003c 12E0     		b	.L134
 1643              	.L132:
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1644              		.loc 1 671 0 discriminator 2
 1645 003e 3BB9     		cbnz	r3, .L135
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1646              		.loc 1 671 0 discriminator 5
 1647 0040 0369     		ldr	r3, [r0, #16]
 1648 0042 13B9     		cbnz	r3, .L136
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1649              		.loc 1 671 0 discriminator 7
 1650 0044 FF23     		movs	r3, #255
 1651 0046 0387     		strh	r3, [r0, #56]	@ movhi
 1652 0048 0CE0     		b	.L134
 1653              	.L136:
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1654              		.loc 1 671 0 discriminator 8
 1655 004a 7F23     		movs	r3, #127
 1656 004c 0387     		strh	r3, [r0, #56]	@ movhi
 1657 004e 09E0     		b	.L134
 1658              	.L135:
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1659              		.loc 1 671 0 discriminator 6
 1660 0050 B3F1805F 		cmp	r3, #268435456
 1661 0054 06D1     		bne	.L134
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1662              		.loc 1 671 0 discriminator 9
 1663 0056 0369     		ldr	r3, [r0, #16]
 1664 0058 13B9     		cbnz	r3, .L137
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1665              		.loc 1 671 0 discriminator 10
ARM GAS  /tmp/ccNV7zic.s 			page 68


 1666 005a 7F23     		movs	r3, #127
 1667 005c 0387     		strh	r3, [r0, #56]	@ movhi
 1668 005e 01E0     		b	.L134
 1669              	.L137:
 671:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1670              		.loc 1 671 0 discriminator 11
 1671 0060 3F23     		movs	r3, #63
 1672 0062 0387     		strh	r3, [r0, #56]	@ movhi
 1673              	.L134:
 673:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 1674              		.loc 1 673 0 is_stmt 1
 1675 0064 0022     		movs	r2, #0
 1676              	.LVL158:
 1677 0066 8264     		str	r2, [r0, #72]
 674:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1678              		.loc 1 674 0
 1679 0068 2223     		movs	r3, #34
 1680 006a 80F84530 		strb	r3, [r0, #69]
 677:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1681              		.loc 1 677 0
 1682 006e 0168     		ldr	r1, [r0]
 1683              	.LVL159:
 1684 0070 0B68     		ldr	r3, [r1]
 1685 0072 43F49073 		orr	r3, r3, #288
 1686 0076 0B60     		str	r3, [r1]
 1687              	.LVL160:
 680:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1688              		.loc 1 680 0
 1689 0078 0168     		ldr	r1, [r0]
 1690 007a 8B68     		ldr	r3, [r1, #8]
 1691 007c 43F00103 		orr	r3, r3, #1
 1692 0080 8B60     		str	r3, [r1, #8]
 683:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1693              		.loc 1 683 0
 1694 0082 80F84420 		strb	r2, [r0, #68]
 687:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1695              		.loc 1 687 0
 1696 0086 8368     		ldr	r3, [r0, #8]
 1697 0088 B3F5805F 		cmp	r3, #4096
 1698 008c 05D1     		bne	.L138
 689:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 1699              		.loc 1 689 0
 1700 008e 0368     		ldr	r3, [r0]
 1701 0090 40F2FF12 		movw	r2, #511
 1702 0094 9A62     		str	r2, [r3, #40]
 696:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1703              		.loc 1 696 0
 1704 0096 0020     		movs	r0, #0
 1705              	.LVL161:
 1706 0098 7047     		bx	lr
 1707              	.LVL162:
 1708              	.L138:
 693:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 1709              		.loc 1 693 0
 1710 009a 0368     		ldr	r3, [r0]
 1711 009c FF22     		movs	r2, #255
 1712 009e 9A62     		str	r2, [r3, #40]
ARM GAS  /tmp/ccNV7zic.s 			page 69


 696:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1713              		.loc 1 696 0
 1714 00a0 0020     		movs	r0, #0
 1715              	.LVL163:
 1716 00a2 7047     		bx	lr
 1717              	.LVL164:
 1718              	.L139:
 700:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1719              		.loc 1 700 0
 1720 00a4 0220     		movs	r0, #2
 1721              	.LVL165:
 1722 00a6 7047     		bx	lr
 1723              	.LVL166:
 1724              	.L140:
 662:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 1725              		.loc 1 662 0
 1726 00a8 0120     		movs	r0, #1
 1727              	.LVL167:
 1728 00aa 7047     		bx	lr
 1729              	.LVL168:
 1730              	.L141:
 665:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1731              		.loc 1 665 0
 1732 00ac 0220     		movs	r0, #2
 1733              	.LVL169:
 702:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1734              		.loc 1 702 0
 1735 00ae 7047     		bx	lr
 1736              		.cfi_endproc
 1737              	.LFE144:
 1739              		.section	.text.HAL_USART_TransmitReceive_IT,"ax",%progbits
 1740              		.align	2
 1741              		.global	HAL_USART_TransmitReceive_IT
 1742              		.thumb
 1743              		.thumb_func
 1745              	HAL_USART_TransmitReceive_IT:
 1746              	.LFB145:
 713:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1747              		.loc 1 713 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 1751              		@ link register save eliminated.
 1752              	.LVL170:
 1753 0000 10B4     		push	{r4}
 1754              	.LCFI19:
 1755              		.cfi_def_cfa_offset 4
 1756              		.cfi_offset 4, -4
 715:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 1757              		.loc 1 715 0
 1758 0002 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 1759 0006 012C     		cmp	r4, #1
 1760 0008 4FD1     		bne	.L150
 717:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1761              		.loc 1 717 0
 1762 000a 002A     		cmp	r2, #0
 1763 000c 18BF     		it	ne
ARM GAS  /tmp/ccNV7zic.s 			page 70


 1764 000e 0029     		cmpne	r1, #0
 1765 0010 4DD0     		beq	.L151
 717:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1766              		.loc 1 717 0 is_stmt 0 discriminator 1
 1767 0012 002B     		cmp	r3, #0
 1768 0014 4DD0     		beq	.L152
 722:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1769              		.loc 1 722 0 is_stmt 1
 1770 0016 90F84440 		ldrb	r4, [r0, #68]	@ zero_extendqisi2
 1771 001a 012C     		cmp	r4, #1
 1772 001c 4BD0     		beq	.L153
 722:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1773              		.loc 1 722 0 is_stmt 0 discriminator 2
 1774 001e 0124     		movs	r4, #1
 1775 0020 80F84440 		strb	r4, [r0, #68]
 724:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferSize = Size;
 1776              		.loc 1 724 0 is_stmt 1 discriminator 2
 1777 0024 0263     		str	r2, [r0, #48]
 725:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferCount = Size;
 1778              		.loc 1 725 0 discriminator 2
 1779 0026 8386     		strh	r3, [r0, #52]	@ movhi
 726:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
 1780              		.loc 1 726 0 discriminator 2
 1781 0028 C386     		strh	r3, [r0, #54]	@ movhi
 727:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 1782              		.loc 1 727 0 discriminator 2
 1783 002a 8162     		str	r1, [r0, #40]
 728:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferCount = Size;
 1784              		.loc 1 728 0 discriminator 2
 1785 002c 8385     		strh	r3, [r0, #44]	@ movhi
 729:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1786              		.loc 1 729 0 discriminator 2
 1787 002e C385     		strh	r3, [r0, #46]	@ movhi
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1788              		.loc 1 732 0 discriminator 2
 1789 0030 8368     		ldr	r3, [r0, #8]
 1790              	.LVL171:
 1791 0032 B3F5805F 		cmp	r3, #4096
 1792 0036 08D1     		bne	.L144
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1793              		.loc 1 732 0 is_stmt 0 discriminator 1
 1794 0038 0369     		ldr	r3, [r0, #16]
 1795 003a 1BB9     		cbnz	r3, .L145
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1796              		.loc 1 732 0 discriminator 3
 1797 003c 40F2FF13 		movw	r3, #511
 1798 0040 0387     		strh	r3, [r0, #56]	@ movhi
 1799 0042 15E0     		b	.L146
 1800              	.L145:
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1801              		.loc 1 732 0 discriminator 4
 1802 0044 FF23     		movs	r3, #255
 1803 0046 0387     		strh	r3, [r0, #56]	@ movhi
 1804 0048 12E0     		b	.L146
 1805              	.L144:
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1806              		.loc 1 732 0 discriminator 2
ARM GAS  /tmp/ccNV7zic.s 			page 71


 1807 004a 3BB9     		cbnz	r3, .L147
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1808              		.loc 1 732 0 discriminator 5
 1809 004c 0369     		ldr	r3, [r0, #16]
 1810 004e 13B9     		cbnz	r3, .L148
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1811              		.loc 1 732 0 discriminator 7
 1812 0050 FF23     		movs	r3, #255
 1813 0052 0387     		strh	r3, [r0, #56]	@ movhi
 1814 0054 0CE0     		b	.L146
 1815              	.L148:
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1816              		.loc 1 732 0 discriminator 8
 1817 0056 7F23     		movs	r3, #127
 1818 0058 0387     		strh	r3, [r0, #56]	@ movhi
 1819 005a 09E0     		b	.L146
 1820              	.L147:
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1821              		.loc 1 732 0 discriminator 6
 1822 005c B3F1805F 		cmp	r3, #268435456
 1823 0060 06D1     		bne	.L146
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1824              		.loc 1 732 0 discriminator 9
 1825 0062 0369     		ldr	r3, [r0, #16]
 1826 0064 13B9     		cbnz	r3, .L149
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1827              		.loc 1 732 0 discriminator 10
 1828 0066 7F23     		movs	r3, #127
 1829 0068 0387     		strh	r3, [r0, #56]	@ movhi
 1830 006a 01E0     		b	.L146
 1831              	.L149:
 732:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1832              		.loc 1 732 0 discriminator 11
 1833 006c 3F23     		movs	r3, #63
 1834 006e 0387     		strh	r3, [r0, #56]	@ movhi
 1835              	.L146:
 734:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX_RX;
 1836              		.loc 1 734 0 is_stmt 1
 1837 0070 0023     		movs	r3, #0
 1838 0072 8364     		str	r3, [r0, #72]
 735:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1839              		.loc 1 735 0
 1840 0074 3222     		movs	r2, #50
 1841              	.LVL172:
 1842 0076 80F84520 		strb	r2, [r0, #69]
 738:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1843              		.loc 1 738 0
 1844 007a 0168     		ldr	r1, [r0]
 1845              	.LVL173:
 1846 007c 0A68     		ldr	r2, [r1]
 1847 007e 42F02002 		orr	r2, r2, #32
 1848 0082 0A60     		str	r2, [r1]
 1849              	.LVL174:
 741:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1850              		.loc 1 741 0
 1851 0084 0168     		ldr	r1, [r0]
 1852 0086 0A68     		ldr	r2, [r1]
ARM GAS  /tmp/ccNV7zic.s 			page 72


 1853 0088 42F48072 		orr	r2, r2, #256
 1854 008c 0A60     		str	r2, [r1]
 744:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1855              		.loc 1 744 0
 1856 008e 0168     		ldr	r1, [r0]
 1857 0090 8A68     		ldr	r2, [r1, #8]
 1858 0092 42F00102 		orr	r2, r2, #1
 1859 0096 8A60     		str	r2, [r1, #8]
 747:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1860              		.loc 1 747 0
 1861 0098 80F84430 		strb	r3, [r0, #68]
 750:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1862              		.loc 1 750 0
 1863 009c 0168     		ldr	r1, [r0]
 1864 009e 0A68     		ldr	r2, [r1]
 1865 00a0 42F08002 		orr	r2, r2, #128
 1866 00a4 0A60     		str	r2, [r1]
 752:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1867              		.loc 1 752 0
 1868 00a6 1846     		mov	r0, r3
 1869              	.LVL175:
 1870 00a8 06E0     		b	.L143
 1871              	.LVL176:
 1872              	.L150:
 756:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1873              		.loc 1 756 0
 1874 00aa 0220     		movs	r0, #2
 1875              	.LVL177:
 1876 00ac 04E0     		b	.L143
 1877              	.LVL178:
 1878              	.L151:
 719:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 1879              		.loc 1 719 0
 1880 00ae 0120     		movs	r0, #1
 1881              	.LVL179:
 1882 00b0 02E0     		b	.L143
 1883              	.LVL180:
 1884              	.L152:
 1885 00b2 0120     		movs	r0, #1
 1886              	.LVL181:
 1887 00b4 00E0     		b	.L143
 1888              	.LVL182:
 1889              	.L153:
 722:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1890              		.loc 1 722 0
 1891 00b6 0220     		movs	r0, #2
 1892              	.LVL183:
 1893              	.L143:
 758:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1894              		.loc 1 758 0
 1895 00b8 5DF8044B 		ldr	r4, [sp], #4
 1896              	.LCFI20:
 1897              		.cfi_restore 4
 1898              		.cfi_def_cfa_offset 0
 1899 00bc 7047     		bx	lr
 1900              		.cfi_endproc
 1901              	.LFE145:
ARM GAS  /tmp/ccNV7zic.s 			page 73


 1903 00be 00BF     		.section	.text.HAL_USART_Transmit_DMA,"ax",%progbits
 1904              		.align	2
 1905              		.global	HAL_USART_Transmit_DMA
 1906              		.thumb
 1907              		.thumb_func
 1909              	HAL_USART_Transmit_DMA:
 1910              	.LFB146:
 768:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t *tmp;
 1911              		.loc 1 768 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 1915              	.LVL184:
 1916 0000 38B5     		push	{r3, r4, r5, lr}
 1917              	.LCFI21:
 1918              		.cfi_def_cfa_offset 16
 1919              		.cfi_offset 3, -16
 1920              		.cfi_offset 4, -12
 1921              		.cfi_offset 5, -8
 1922              		.cfi_offset 14, -4
 771:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 1923              		.loc 1 771 0
 1924 0002 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 1925 0006 012C     		cmp	r4, #1
 1926 0008 38D1     		bne	.L157
 773:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 1927              		.loc 1 773 0
 1928 000a 002A     		cmp	r2, #0
 1929 000c 18BF     		it	ne
 1930 000e 0029     		cmpne	r1, #0
 1931 0010 36D0     		beq	.L158
 778:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1932              		.loc 1 778 0
 1933 0012 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1934 0016 012B     		cmp	r3, #1
 1935 0018 34D0     		beq	.L159
 1936 001a 1346     		mov	r3, r2
 1937 001c 0446     		mov	r4, r0
 778:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1938              		.loc 1 778 0 is_stmt 0 discriminator 2
 1939 001e 0122     		movs	r2, #1
 1940              	.LVL185:
 1941 0020 80F84420 		strb	r2, [r0, #68]
 780:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 1942              		.loc 1 780 0 is_stmt 1 discriminator 2
 1943 0024 8162     		str	r1, [r0, #40]
 781:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferCount = Size;
 1944              		.loc 1 781 0 discriminator 2
 1945 0026 8385     		strh	r3, [r0, #44]	@ movhi
 782:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1946              		.loc 1 782 0 discriminator 2
 1947 0028 C385     		strh	r3, [r0, #46]	@ movhi
 784:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX;
 1948              		.loc 1 784 0 discriminator 2
 1949 002a 0025     		movs	r5, #0
 1950 002c 8564     		str	r5, [r0, #72]
 785:HALLIB/Src/stm32f7xx_hal_usart.c **** 
ARM GAS  /tmp/ccNV7zic.s 			page 74


 1951              		.loc 1 785 0 discriminator 2
 1952 002e 1222     		movs	r2, #18
 1953 0030 80F84520 		strb	r2, [r0, #69]
 788:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1954              		.loc 1 788 0 discriminator 2
 1955 0034 C26B     		ldr	r2, [r0, #60]
 1956 0036 1448     		ldr	r0, .L161
 1957              	.LVL186:
 1958 0038 D063     		str	r0, [r2, #60]
 791:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1959              		.loc 1 791 0 discriminator 2
 1960 003a E26B     		ldr	r2, [r4, #60]
 1961 003c 1348     		ldr	r0, .L161+4
 1962 003e 1064     		str	r0, [r2, #64]
 794:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1963              		.loc 1 794 0 discriminator 2
 1964 0040 E26B     		ldr	r2, [r4, #60]
 1965 0042 1348     		ldr	r0, .L161+8
 1966 0044 D064     		str	r0, [r2, #76]
 797:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->ISR, (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE | USART_ISR_ORE));
 1967              		.loc 1 797 0 discriminator 2
 1968 0046 2068     		ldr	r0, [r4]
 1969 0048 8268     		ldr	r2, [r0, #8]
 1970 004a 42F00102 		orr	r2, r2, #1
 1971 004e 8260     		str	r2, [r0, #8]
 798:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1972              		.loc 1 798 0 discriminator 2
 1973 0050 2068     		ldr	r0, [r4]
 1974 0052 C269     		ldr	r2, [r0, #28]
 1975 0054 42F00F02 		orr	r2, r2, #15
 1976 0058 C261     		str	r2, [r0, #28]
 1977              	.LVL187:
 802:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1978              		.loc 1 802 0 discriminator 2
 1979 005a 2268     		ldr	r2, [r4]
 1980 005c 2832     		adds	r2, r2, #40
 1981 005e E06B     		ldr	r0, [r4, #60]
 1982 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1983              	.LVL188:
 805:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1984              		.loc 1 805 0 discriminator 2
 1985 0064 2368     		ldr	r3, [r4]
 1986 0066 4022     		movs	r2, #64
 1987 0068 1A62     		str	r2, [r3, #32]
 808:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1988              		.loc 1 808 0 discriminator 2
 1989 006a 84F84450 		strb	r5, [r4, #68]
 812:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 1990              		.loc 1 812 0 discriminator 2
 1991 006e 2268     		ldr	r2, [r4]
 1992 0070 9368     		ldr	r3, [r2, #8]
 1993 0072 43F08003 		orr	r3, r3, #128
 1994 0076 9360     		str	r3, [r2, #8]
 814:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 1995              		.loc 1 814 0 discriminator 2
 1996 0078 2846     		mov	r0, r5
 1997 007a 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccNV7zic.s 			page 75


 1998              	.LVL189:
 1999              	.L157:
 818:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2000              		.loc 1 818 0
 2001 007c 0220     		movs	r0, #2
 2002              	.LVL190:
 2003 007e 38BD     		pop	{r3, r4, r5, pc}
 2004              	.LVL191:
 2005              	.L158:
 775:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 2006              		.loc 1 775 0
 2007 0080 0120     		movs	r0, #1
 2008              	.LVL192:
 2009 0082 38BD     		pop	{r3, r4, r5, pc}
 2010              	.LVL193:
 2011              	.L159:
 778:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2012              		.loc 1 778 0
 2013 0084 0220     		movs	r0, #2
 2014              	.LVL194:
 820:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2015              		.loc 1 820 0
 2016 0086 38BD     		pop	{r3, r4, r5, pc}
 2017              	.L162:
 2018              		.align	2
 2019              	.L161:
 2020 0088 00000000 		.word	USART_DMATransmitCplt
 2021 008c 00000000 		.word	USART_DMATxHalfCplt
 2022 0090 00000000 		.word	USART_DMAError
 2023              		.cfi_endproc
 2024              	.LFE146:
 2026              		.section	.text.HAL_USART_Receive_DMA,"ax",%progbits
 2027              		.align	2
 2028              		.global	HAL_USART_Receive_DMA
 2029              		.thumb
 2030              		.thumb_func
 2032              	HAL_USART_Receive_DMA:
 2033              	.LFB147:
 833:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t *tmp;
 2034              		.loc 1 833 0
 2035              		.cfi_startproc
 2036              		@ args = 0, pretend = 0, frame = 0
 2037              		@ frame_needed = 0, uses_anonymous_args = 0
 2038              	.LVL195:
 2039 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2040              	.LCFI22:
 2041              		.cfi_def_cfa_offset 24
 2042              		.cfi_offset 3, -24
 2043              		.cfi_offset 4, -20
 2044              		.cfi_offset 5, -16
 2045              		.cfi_offset 6, -12
 2046              		.cfi_offset 7, -8
 2047              		.cfi_offset 14, -4
 836:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2048              		.loc 1 836 0
 2049 0002 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 2050 0006 012C     		cmp	r4, #1
ARM GAS  /tmp/ccNV7zic.s 			page 76


 2051 0008 57D1     		bne	.L165
 838:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 2052              		.loc 1 838 0
 2053 000a 002A     		cmp	r2, #0
 2054 000c 18BF     		it	ne
 2055 000e 0029     		cmpne	r1, #0
 2056 0010 55D0     		beq	.L166
 844:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2057              		.loc 1 844 0
 2058 0012 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 2059 0016 012B     		cmp	r3, #1
 2060 0018 53D0     		beq	.L167
 2061 001a 1746     		mov	r7, r2
 2062 001c 0E46     		mov	r6, r1
 2063 001e 0446     		mov	r4, r0
 844:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2064              		.loc 1 844 0 is_stmt 0 discriminator 2
 2065 0020 0123     		movs	r3, #1
 2066 0022 80F84430 		strb	r3, [r0, #68]
 846:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferSize = Size;
 2067              		.loc 1 846 0 is_stmt 1 discriminator 2
 2068 0026 2163     		str	r1, [r4, #48]
 847:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pTxBuffPtr = pRxData;
 2069              		.loc 1 847 0 discriminator 2
 2070 0028 A286     		strh	r2, [r4, #52]	@ movhi
 848:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 2071              		.loc 1 848 0 discriminator 2
 2072 002a A162     		str	r1, [r4, #40]
 849:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2073              		.loc 1 849 0 discriminator 2
 2074 002c A285     		strh	r2, [r4, #44]	@ movhi
 851:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_RX;
 2075              		.loc 1 851 0 discriminator 2
 2076 002e 0025     		movs	r5, #0
 2077 0030 8564     		str	r5, [r0, #72]
 852:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2078              		.loc 1 852 0 discriminator 2
 2079 0032 2223     		movs	r3, #34
 2080 0034 80F84530 		strb	r3, [r0, #69]
 855:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2081              		.loc 1 855 0 discriminator 2
 2082 0038 036C     		ldr	r3, [r0, #64]
 2083 003a 234A     		ldr	r2, .L169
 2084              	.LVL196:
 2085 003c DA63     		str	r2, [r3, #60]
 2086              	.LVL197:
 858:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2087              		.loc 1 858 0 discriminator 2
 2088 003e 036C     		ldr	r3, [r0, #64]
 2089 0040 224A     		ldr	r2, .L169+4
 2090 0042 1A64     		str	r2, [r3, #64]
 861:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2091              		.loc 1 861 0 discriminator 2
 2092 0044 026C     		ldr	r2, [r0, #64]
 2093 0046 224B     		ldr	r3, .L169+8
 2094 0048 D364     		str	r3, [r2, #76]
 864:HALLIB/Src/stm32f7xx_hal_usart.c **** 
ARM GAS  /tmp/ccNV7zic.s 			page 77


 2095              		.loc 1 864 0 discriminator 2
 2096 004a C26B     		ldr	r2, [r0, #60]
 2097 004c 1565     		str	r5, [r2, #80]
 868:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->hdmatx->XferCpltCallback = NULL;
 2098              		.loc 1 868 0 discriminator 2
 2099 004e C26B     		ldr	r2, [r0, #60]
 2100 0050 1564     		str	r5, [r2, #64]
 869:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2101              		.loc 1 869 0 discriminator 2
 2102 0052 C26B     		ldr	r2, [r0, #60]
 2103 0054 D563     		str	r5, [r2, #60]
 872:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2104              		.loc 1 872 0 discriminator 2
 2105 0056 C26B     		ldr	r2, [r0, #60]
 2106 0058 D364     		str	r3, [r2, #76]
 875:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->ISR, (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE | USART_ISR_ORE));
 2107              		.loc 1 875 0 discriminator 2
 2108 005a 0268     		ldr	r2, [r0]
 2109 005c 9368     		ldr	r3, [r2, #8]
 2110 005e 43F00103 		orr	r3, r3, #1
 2111 0062 9360     		str	r3, [r2, #8]
 876:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2112              		.loc 1 876 0 discriminator 2
 2113 0064 0268     		ldr	r2, [r0]
 2114 0066 D369     		ldr	r3, [r2, #28]
 2115 0068 43F00F03 		orr	r3, r3, #15
 2116 006c D361     		str	r3, [r2, #28]
 2117              	.LVL198:
 880:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2118              		.loc 1 880 0 discriminator 2
 2119 006e 0168     		ldr	r1, [r0]
 2120              	.LVL199:
 2121 0070 3B46     		mov	r3, r7
 2122 0072 3246     		mov	r2, r6
 2123 0074 2431     		adds	r1, r1, #36
 2124 0076 006C     		ldr	r0, [r0, #64]
 2125              	.LVL200:
 2126 0078 FFF7FEFF 		bl	HAL_DMA_Start_IT
 2127              	.LVL201:
 885:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2128              		.loc 1 885 0 discriminator 2
 2129 007c 2268     		ldr	r2, [r4]
 2130 007e 3B46     		mov	r3, r7
 2131 0080 2832     		adds	r2, r2, #40
 2132 0082 3146     		mov	r1, r6
 2133 0084 E06B     		ldr	r0, [r4, #60]
 2134 0086 FFF7FEFF 		bl	HAL_DMA_Start_IT
 2135              	.LVL202:
 888:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2136              		.loc 1 888 0 discriminator 2
 2137 008a 84F84450 		strb	r5, [r4, #68]
 891:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2138              		.loc 1 891 0 discriminator 2
 2139 008e 2268     		ldr	r2, [r4]
 2140 0090 1368     		ldr	r3, [r2]
 2141 0092 43F48073 		orr	r3, r3, #256
 2142 0096 1360     		str	r3, [r2]
ARM GAS  /tmp/ccNV7zic.s 			page 78


 894:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2143              		.loc 1 894 0 discriminator 2
 2144 0098 2268     		ldr	r2, [r4]
 2145 009a 9368     		ldr	r3, [r2, #8]
 2146 009c 43F00103 		orr	r3, r3, #1
 2147 00a0 9360     		str	r3, [r2, #8]
 898:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2148              		.loc 1 898 0 discriminator 2
 2149 00a2 2268     		ldr	r2, [r4]
 2150 00a4 9368     		ldr	r3, [r2, #8]
 2151 00a6 43F04003 		orr	r3, r3, #64
 2152 00aa 9360     		str	r3, [r2, #8]
 902:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2153              		.loc 1 902 0 discriminator 2
 2154 00ac 2268     		ldr	r2, [r4]
 2155 00ae 9368     		ldr	r3, [r2, #8]
 2156 00b0 43F08003 		orr	r3, r3, #128
 2157 00b4 9360     		str	r3, [r2, #8]
 905:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2158              		.loc 1 905 0 discriminator 2
 2159 00b6 2846     		mov	r0, r5
 2160 00b8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2161              	.LVL203:
 2162              	.L165:
 909:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2163              		.loc 1 909 0
 2164 00ba 0220     		movs	r0, #2
 2165              	.LVL204:
 2166 00bc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2167              	.LVL205:
 2168              	.L166:
 840:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 2169              		.loc 1 840 0
 2170 00be 0120     		movs	r0, #1
 2171              	.LVL206:
 2172 00c0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2173              	.LVL207:
 2174              	.L167:
 844:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2175              		.loc 1 844 0
 2176 00c2 0220     		movs	r0, #2
 2177              	.LVL208:
 911:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2178              		.loc 1 911 0
 2179 00c4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2180              	.L170:
 2181 00c6 00BF     		.align	2
 2182              	.L169:
 2183 00c8 00000000 		.word	USART_DMAReceiveCplt
 2184 00cc 00000000 		.word	USART_DMARxHalfCplt
 2185 00d0 00000000 		.word	USART_DMAError
 2186              		.cfi_endproc
 2187              	.LFE147:
 2189              		.section	.text.HAL_USART_TransmitReceive_DMA,"ax",%progbits
 2190              		.align	2
 2191              		.global	HAL_USART_TransmitReceive_DMA
 2192              		.thumb
ARM GAS  /tmp/ccNV7zic.s 			page 79


 2193              		.thumb_func
 2195              	HAL_USART_TransmitReceive_DMA:
 2196              	.LFB148:
 923:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t *tmp;
 2197              		.loc 1 923 0
 2198              		.cfi_startproc
 2199              		@ args = 0, pretend = 0, frame = 0
 2200              		@ frame_needed = 0, uses_anonymous_args = 0
 2201              	.LVL209:
 2202 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2203              	.LCFI23:
 2204              		.cfi_def_cfa_offset 24
 2205              		.cfi_offset 3, -24
 2206              		.cfi_offset 4, -20
 2207              		.cfi_offset 5, -16
 2208              		.cfi_offset 6, -12
 2209              		.cfi_offset 7, -8
 2210              		.cfi_offset 14, -4
 926:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2211              		.loc 1 926 0
 2212 0002 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 2213 0006 012C     		cmp	r4, #1
 2214 0008 5BD1     		bne	.L173
 928:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 2215              		.loc 1 928 0
 2216 000a 002A     		cmp	r2, #0
 2217 000c 18BF     		it	ne
 2218 000e 0029     		cmpne	r1, #0
 2219 0010 59D0     		beq	.L174
 928:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 2220              		.loc 1 928 0 is_stmt 0 discriminator 1
 2221 0012 002B     		cmp	r3, #0
 2222 0014 59D0     		beq	.L175
 933:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2223              		.loc 1 933 0 is_stmt 1
 2224 0016 90F84440 		ldrb	r4, [r0, #68]	@ zero_extendqisi2
 2225 001a 012C     		cmp	r4, #1
 2226 001c 57D0     		beq	.L176
 2227 001e 1F46     		mov	r7, r3
 2228 0020 0E46     		mov	r6, r1
 2229 0022 0446     		mov	r4, r0
 933:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2230              		.loc 1 933 0 is_stmt 0 discriminator 2
 2231 0024 0123     		movs	r3, #1
 2232              	.LVL210:
 2233 0026 80F84430 		strb	r3, [r0, #68]
 935:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->RxXferSize = Size;
 2234              		.loc 1 935 0 is_stmt 1 discriminator 2
 2235 002a 0263     		str	r2, [r0, #48]
 936:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->pTxBuffPtr = pTxData;
 2236              		.loc 1 936 0 discriminator 2
 2237 002c 8786     		strh	r7, [r0, #52]	@ movhi
 937:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->TxXferSize = Size;
 2238              		.loc 1 937 0 discriminator 2
 2239 002e A162     		str	r1, [r4, #40]
 938:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2240              		.loc 1 938 0 discriminator 2
ARM GAS  /tmp/ccNV7zic.s 			page 80


 2241 0030 8785     		strh	r7, [r0, #44]	@ movhi
 940:HALLIB/Src/stm32f7xx_hal_usart.c ****     husart->State = HAL_USART_STATE_BUSY_TX_RX;
 2242              		.loc 1 940 0 discriminator 2
 2243 0032 0025     		movs	r5, #0
 2244 0034 8564     		str	r5, [r0, #72]
 941:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2245              		.loc 1 941 0 discriminator 2
 2246 0036 3223     		movs	r3, #50
 2247 0038 80F84530 		strb	r3, [r0, #69]
 944:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2248              		.loc 1 944 0 discriminator 2
 2249 003c 036C     		ldr	r3, [r0, #64]
 2250 003e 2549     		ldr	r1, .L178
 2251              	.LVL211:
 2252 0040 D963     		str	r1, [r3, #60]
 947:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2253              		.loc 1 947 0 discriminator 2
 2254 0042 036C     		ldr	r3, [r0, #64]
 2255 0044 2449     		ldr	r1, .L178+4
 2256 0046 1964     		str	r1, [r3, #64]
 950:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2257              		.loc 1 950 0 discriminator 2
 2258 0048 C36B     		ldr	r3, [r0, #60]
 2259 004a 2449     		ldr	r1, .L178+8
 2260 004c D963     		str	r1, [r3, #60]
 953:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2261              		.loc 1 953 0 discriminator 2
 2262 004e C36B     		ldr	r3, [r0, #60]
 2263 0050 2349     		ldr	r1, .L178+12
 2264 0052 1964     		str	r1, [r3, #64]
 956:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2265              		.loc 1 956 0 discriminator 2
 2266 0054 C16B     		ldr	r1, [r0, #60]
 2267 0056 234B     		ldr	r3, .L178+16
 2268 0058 CB64     		str	r3, [r1, #76]
 959:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2269              		.loc 1 959 0 discriminator 2
 2270 005a 016C     		ldr	r1, [r0, #64]
 2271 005c CB64     		str	r3, [r1, #76]
 962:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->ISR, (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE | USART_ISR_ORE));
 2272              		.loc 1 962 0 discriminator 2
 2273 005e 0168     		ldr	r1, [r0]
 2274 0060 8B68     		ldr	r3, [r1, #8]
 2275 0062 43F00103 		orr	r3, r3, #1
 2276 0066 8B60     		str	r3, [r1, #8]
 963:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2277              		.loc 1 963 0 discriminator 2
 2278 0068 0168     		ldr	r1, [r0]
 2279 006a CB69     		ldr	r3, [r1, #28]
 2280 006c 43F00F03 		orr	r3, r3, #15
 2281 0070 CB61     		str	r3, [r1, #28]
 2282              	.LVL212:
 967:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2283              		.loc 1 967 0 discriminator 2
 2284 0072 0168     		ldr	r1, [r0]
 2285 0074 3B46     		mov	r3, r7
 2286 0076 2431     		adds	r1, r1, #36
ARM GAS  /tmp/ccNV7zic.s 			page 81


 2287 0078 006C     		ldr	r0, [r0, #64]
 2288              	.LVL213:
 2289 007a FFF7FEFF 		bl	HAL_DMA_Start_IT
 2290              	.LVL214:
 971:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2291              		.loc 1 971 0 discriminator 2
 2292 007e 2268     		ldr	r2, [r4]
 2293 0080 3B46     		mov	r3, r7
 2294 0082 2832     		adds	r2, r2, #40
 2295 0084 3146     		mov	r1, r6
 2296 0086 E06B     		ldr	r0, [r4, #60]
 2297 0088 FFF7FEFF 		bl	HAL_DMA_Start_IT
 2298              	.LVL215:
 974:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2299              		.loc 1 974 0 discriminator 2
 2300 008c 2368     		ldr	r3, [r4]
 2301 008e 4022     		movs	r2, #64
 2302 0090 1A62     		str	r2, [r3, #32]
 977:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2303              		.loc 1 977 0 discriminator 2
 2304 0092 84F84450 		strb	r5, [r4, #68]
 980:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2305              		.loc 1 980 0 discriminator 2
 2306 0096 2268     		ldr	r2, [r4]
 2307 0098 1368     		ldr	r3, [r2]
 2308 009a 43F48073 		orr	r3, r3, #256
 2309 009e 1360     		str	r3, [r2]
 983:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2310              		.loc 1 983 0 discriminator 2
 2311 00a0 2268     		ldr	r2, [r4]
 2312 00a2 9368     		ldr	r3, [r2, #8]
 2313 00a4 43F00103 		orr	r3, r3, #1
 2314 00a8 9360     		str	r3, [r2, #8]
 987:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2315              		.loc 1 987 0 discriminator 2
 2316 00aa 2268     		ldr	r2, [r4]
 2317 00ac 9368     		ldr	r3, [r2, #8]
 2318 00ae 43F04003 		orr	r3, r3, #64
 2319 00b2 9360     		str	r3, [r2, #8]
 991:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2320              		.loc 1 991 0 discriminator 2
 2321 00b4 2268     		ldr	r2, [r4]
 2322 00b6 9368     		ldr	r3, [r2, #8]
 2323 00b8 43F08003 		orr	r3, r3, #128
 2324 00bc 9360     		str	r3, [r2, #8]
 993:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2325              		.loc 1 993 0 discriminator 2
 2326 00be 2846     		mov	r0, r5
 2327 00c0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2328              	.LVL216:
 2329              	.L173:
 997:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2330              		.loc 1 997 0
 2331 00c2 0220     		movs	r0, #2
 2332              	.LVL217:
 2333 00c4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2334              	.LVL218:
ARM GAS  /tmp/ccNV7zic.s 			page 82


 2335              	.L174:
 930:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 2336              		.loc 1 930 0
 2337 00c6 0120     		movs	r0, #1
 2338              	.LVL219:
 2339 00c8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2340              	.LVL220:
 2341              	.L175:
 2342 00ca 0120     		movs	r0, #1
 2343              	.LVL221:
 2344 00cc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2345              	.LVL222:
 2346              	.L176:
 933:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2347              		.loc 1 933 0
 2348 00ce 0220     		movs	r0, #2
 2349              	.LVL223:
 999:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2350              		.loc 1 999 0
 2351 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2352              	.LVL224:
 2353              	.L179:
 2354 00d2 00BF     		.align	2
 2355              	.L178:
 2356 00d4 00000000 		.word	USART_DMAReceiveCplt
 2357 00d8 00000000 		.word	USART_DMARxHalfCplt
 2358 00dc 00000000 		.word	USART_DMATransmitCplt
 2359 00e0 00000000 		.word	USART_DMATxHalfCplt
 2360 00e4 00000000 		.word	USART_DMAError
 2361              		.cfi_endproc
 2362              	.LFE148:
 2364              		.section	.text.HAL_USART_DMAPause,"ax",%progbits
 2365              		.align	2
 2366              		.global	HAL_USART_DMAPause
 2367              		.thumb
 2368              		.thumb_func
 2370              	HAL_USART_DMAPause:
 2371              	.LFB149:
1007:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Process Locked */
 2372              		.loc 1 1007 0
 2373              		.cfi_startproc
 2374              		@ args = 0, pretend = 0, frame = 0
 2375              		@ frame_needed = 0, uses_anonymous_args = 0
 2376              		@ link register save eliminated.
 2377              	.LVL225:
1009:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2378              		.loc 1 1009 0
 2379 0000 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 2380 0004 012B     		cmp	r3, #1
 2381 0006 2FD0     		beq	.L185
1009:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2382              		.loc 1 1009 0 is_stmt 0 discriminator 2
 2383 0008 0123     		movs	r3, #1
 2384 000a 80F84430 		strb	r3, [r0, #68]
1011:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2385              		.loc 1 1011 0 is_stmt 1 discriminator 2
 2386 000e 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
ARM GAS  /tmp/ccNV7zic.s 			page 83


 2387 0012 122B     		cmp	r3, #18
 2388 0014 05D1     		bne	.L182
1014:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2389              		.loc 1 1014 0
 2390 0016 0268     		ldr	r2, [r0]
 2391 0018 9368     		ldr	r3, [r2, #8]
 2392 001a 23F08003 		bic	r3, r3, #128
 2393 001e 9360     		str	r3, [r2, #8]
 2394 0020 1DE0     		b	.L183
 2395              	.L182:
1016:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2396              		.loc 1 1016 0
 2397 0022 222B     		cmp	r3, #34
 2398 0024 0FD1     		bne	.L184
1019:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 2399              		.loc 1 1019 0
 2400 0026 0268     		ldr	r2, [r0]
 2401 0028 1368     		ldr	r3, [r2]
 2402 002a 23F49073 		bic	r3, r3, #288
 2403 002e 1360     		str	r3, [r2]
1020:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Disable the USART DMA Rx request */
 2404              		.loc 1 1020 0
 2405 0030 0268     		ldr	r2, [r0]
 2406 0032 9368     		ldr	r3, [r2, #8]
 2407 0034 23F00103 		bic	r3, r3, #1
 2408 0038 9360     		str	r3, [r2, #8]
1022:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2409              		.loc 1 1022 0
 2410 003a 0268     		ldr	r2, [r0]
 2411 003c 9368     		ldr	r3, [r2, #8]
 2412 003e 23F04003 		bic	r3, r3, #64
 2413 0042 9360     		str	r3, [r2, #8]
 2414 0044 0BE0     		b	.L183
 2415              	.L184:
1024:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2416              		.loc 1 1024 0
 2417 0046 322B     		cmp	r3, #50
 2418 0048 09D1     		bne	.L183
1027:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* Disable the USART DMA Rx request */
 2419              		.loc 1 1027 0
 2420 004a 0268     		ldr	r2, [r0]
 2421 004c 9368     		ldr	r3, [r2, #8]
 2422 004e 23F04003 		bic	r3, r3, #64
 2423 0052 9360     		str	r3, [r2, #8]
1029:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2424              		.loc 1 1029 0
 2425 0054 0268     		ldr	r2, [r0]
 2426 0056 9368     		ldr	r3, [r2, #8]
 2427 0058 23F08003 		bic	r3, r3, #128
 2428 005c 9360     		str	r3, [r2, #8]
 2429              	.L183:
1033:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2430              		.loc 1 1033 0
 2431 005e 0023     		movs	r3, #0
 2432 0060 80F84430 		strb	r3, [r0, #68]
1035:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 2433              		.loc 1 1035 0
ARM GAS  /tmp/ccNV7zic.s 			page 84


 2434 0064 1846     		mov	r0, r3
 2435              	.LVL226:
 2436 0066 7047     		bx	lr
 2437              	.LVL227:
 2438              	.L185:
1009:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2439              		.loc 1 1009 0
 2440 0068 0220     		movs	r0, #2
 2441              	.LVL228:
1036:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2442              		.loc 1 1036 0
 2443 006a 7047     		bx	lr
 2444              		.cfi_endproc
 2445              	.LFE149:
 2447              		.section	.text.HAL_USART_DMAResume,"ax",%progbits
 2448              		.align	2
 2449              		.global	HAL_USART_DMAResume
 2450              		.thumb
 2451              		.thumb_func
 2453              	HAL_USART_DMAResume:
 2454              	.LFB150:
1044:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Process Locked */
 2455              		.loc 1 1044 0
 2456              		.cfi_startproc
 2457              		@ args = 0, pretend = 0, frame = 0
 2458              		@ frame_needed = 0, uses_anonymous_args = 0
 2459              		@ link register save eliminated.
 2460              	.LVL229:
1046:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2461              		.loc 1 1046 0
 2462 0000 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 2463 0004 012B     		cmp	r3, #1
 2464 0006 35D0     		beq	.L191
1046:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2465              		.loc 1 1046 0 is_stmt 0 discriminator 2
 2466 0008 0123     		movs	r3, #1
 2467 000a 80F84430 		strb	r3, [r0, #68]
1048:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2468              		.loc 1 1048 0 is_stmt 1 discriminator 2
 2469 000e 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 2470 0012 122B     		cmp	r3, #18
 2471 0014 05D1     		bne	.L188
1051:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2472              		.loc 1 1051 0
 2473 0016 0268     		ldr	r2, [r0]
 2474 0018 9368     		ldr	r3, [r2, #8]
 2475 001a 43F08003 		orr	r3, r3, #128
 2476 001e 9360     		str	r3, [r2, #8]
 2477 0020 23E0     		b	.L189
 2478              	.L188:
1053:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2479              		.loc 1 1053 0
 2480 0022 222B     		cmp	r3, #34
 2481 0024 12D1     		bne	.L190
1056:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2482              		.loc 1 1056 0
 2483 0026 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccNV7zic.s 			page 85


 2484 0028 0822     		movs	r2, #8
 2485 002a 1A62     		str	r2, [r3, #32]
1059:HALLIB/Src/stm32f7xx_hal_usart.c ****     SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 2486              		.loc 1 1059 0
 2487 002c 0268     		ldr	r2, [r0]
 2488 002e 1368     		ldr	r3, [r2]
 2489 0030 43F49073 		orr	r3, r3, #288
 2490 0034 1360     		str	r3, [r2]
1060:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2491              		.loc 1 1060 0
 2492 0036 0268     		ldr	r2, [r0]
 2493 0038 9368     		ldr	r3, [r2, #8]
 2494 003a 43F00103 		orr	r3, r3, #1
 2495 003e 9360     		str	r3, [r2, #8]
1063:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2496              		.loc 1 1063 0
 2497 0040 0268     		ldr	r2, [r0]
 2498 0042 9368     		ldr	r3, [r2, #8]
 2499 0044 43F04003 		orr	r3, r3, #64
 2500 0048 9360     		str	r3, [r2, #8]
 2501 004a 0EE0     		b	.L189
 2502              	.L190:
1065:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2503              		.loc 1 1065 0
 2504 004c 322B     		cmp	r3, #50
 2505 004e 0CD1     		bne	.L189
1068:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2506              		.loc 1 1068 0
 2507 0050 0368     		ldr	r3, [r0]
 2508 0052 0822     		movs	r2, #8
 2509 0054 1A62     		str	r2, [r3, #32]
1071:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2510              		.loc 1 1071 0
 2511 0056 0268     		ldr	r2, [r0]
 2512 0058 9368     		ldr	r3, [r2, #8]
 2513 005a 43F04003 		orr	r3, r3, #64
 2514 005e 9360     		str	r3, [r2, #8]
1074:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2515              		.loc 1 1074 0
 2516 0060 0268     		ldr	r2, [r0]
 2517 0062 9368     		ldr	r3, [r2, #8]
 2518 0064 43F08003 		orr	r3, r3, #128
 2519 0068 9360     		str	r3, [r2, #8]
 2520              	.L189:
1078:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2521              		.loc 1 1078 0
 2522 006a 0023     		movs	r3, #0
 2523 006c 80F84430 		strb	r3, [r0, #68]
1080:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 2524              		.loc 1 1080 0
 2525 0070 1846     		mov	r0, r3
 2526              	.LVL230:
 2527 0072 7047     		bx	lr
 2528              	.LVL231:
 2529              	.L191:
1046:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2530              		.loc 1 1046 0
ARM GAS  /tmp/ccNV7zic.s 			page 86


 2531 0074 0220     		movs	r0, #2
 2532              	.LVL232:
1081:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2533              		.loc 1 1081 0
 2534 0076 7047     		bx	lr
 2535              		.cfi_endproc
 2536              	.LFE150:
 2538              		.section	.text.HAL_USART_DMAStop,"ax",%progbits
 2539              		.align	2
 2540              		.global	HAL_USART_DMAStop
 2541              		.thumb
 2542              		.thumb_func
 2544              	HAL_USART_DMAStop:
 2545              	.LFB151:
1089:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* The Lock is not implemented on this API to allow the user application
 2546              		.loc 1 1089 0
 2547              		.cfi_startproc
 2548              		@ args = 0, pretend = 0, frame = 0
 2549              		@ frame_needed = 0, uses_anonymous_args = 0
 2550              	.LVL233:
 2551 0000 10B5     		push	{r4, lr}
 2552              	.LCFI24:
 2553              		.cfi_def_cfa_offset 8
 2554              		.cfi_offset 4, -8
 2555              		.cfi_offset 14, -4
 2556 0002 0446     		mov	r4, r0
1098:HALLIB/Src/stm32f7xx_hal_usart.c ****       (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT)))
 2557              		.loc 1 1098 0
 2558 0004 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 2559 0008 122B     		cmp	r3, #18
 2560 000a 0FD1     		bne	.L193
1099:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2561              		.loc 1 1099 0 discriminator 1
 2562 000c 0368     		ldr	r3, [r0]
 2563 000e 9B68     		ldr	r3, [r3, #8]
1098:HALLIB/Src/stm32f7xx_hal_usart.c ****       (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT)))
 2564              		.loc 1 1098 0 discriminator 1
 2565 0010 13F0800F 		tst	r3, #128
 2566 0014 0AD0     		beq	.L193
1101:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2567              		.loc 1 1101 0
 2568 0016 FFF7FEFF 		bl	USART_EndTxTransfer
 2569              	.LVL234:
1104:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 2570              		.loc 1 1104 0
 2571 001a E06B     		ldr	r0, [r4, #60]
 2572 001c 08B1     		cbz	r0, .L194
1106:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 2573              		.loc 1 1106 0
 2574 001e FFF7FEFF 		bl	HAL_DMA_Abort
 2575              	.LVL235:
 2576              	.L194:
1110:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2577              		.loc 1 1110 0
 2578 0022 2268     		ldr	r2, [r4]
 2579 0024 9368     		ldr	r3, [r2, #8]
 2580 0026 23F08003 		bic	r3, r3, #128
ARM GAS  /tmp/ccNV7zic.s 			page 87


 2581 002a 9360     		str	r3, [r2, #8]
 2582              	.L193:
1114:HALLIB/Src/stm32f7xx_hal_usart.c ****       (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)))
 2583              		.loc 1 1114 0
 2584 002c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2585 0030 222B     		cmp	r3, #34
 2586 0032 10D1     		bne	.L195
1115:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2587              		.loc 1 1115 0 discriminator 1
 2588 0034 2368     		ldr	r3, [r4]
 2589 0036 9B68     		ldr	r3, [r3, #8]
1114:HALLIB/Src/stm32f7xx_hal_usart.c ****       (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)))
 2590              		.loc 1 1114 0 discriminator 1
 2591 0038 13F0400F 		tst	r3, #64
 2592 003c 0BD0     		beq	.L195
1117:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2593              		.loc 1 1117 0
 2594 003e 2046     		mov	r0, r4
 2595 0040 FFF7FEFF 		bl	USART_EndRxTransfer
 2596              	.LVL236:
1120:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 2597              		.loc 1 1120 0
 2598 0044 206C     		ldr	r0, [r4, #64]
 2599 0046 08B1     		cbz	r0, .L196
1122:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 2600              		.loc 1 1122 0
 2601 0048 FFF7FEFF 		bl	HAL_DMA_Abort
 2602              	.LVL237:
 2603              	.L196:
1126:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2604              		.loc 1 1126 0
 2605 004c 2268     		ldr	r2, [r4]
 2606 004e 9368     		ldr	r3, [r2, #8]
 2607 0050 23F04003 		bic	r3, r3, #64
 2608 0054 9360     		str	r3, [r2, #8]
 2609              	.L195:
1130:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2610              		.loc 1 1130 0
 2611 0056 0020     		movs	r0, #0
 2612 0058 10BD     		pop	{r4, pc}
 2613              		.cfi_endproc
 2614              	.LFE151:
 2616 005a 00BF     		.section	.text.HAL_USART_TxCpltCallback,"ax",%progbits
 2617              		.align	2
 2618              		.weak	HAL_USART_TxCpltCallback
 2619              		.thumb
 2620              		.thumb_func
 2622              	HAL_USART_TxCpltCallback:
 2623              	.LFB153:
1286:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 2624              		.loc 1 1286 0
 2625              		.cfi_startproc
 2626              		@ args = 0, pretend = 0, frame = 0
 2627              		@ frame_needed = 0, uses_anonymous_args = 0
 2628              		@ link register save eliminated.
 2629              	.LVL238:
 2630 0000 7047     		bx	lr
ARM GAS  /tmp/ccNV7zic.s 			page 88


 2631              		.cfi_endproc
 2632              	.LFE153:
 2634 0002 00BF     		.section	.text.USART_DMATransmitCplt,"ax",%progbits
 2635              		.align	2
 2636              		.thumb
 2637              		.thumb_func
 2639              	USART_DMATransmitCplt:
 2640              	.LFB166:
1674:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2641              		.loc 1 1674 0
 2642              		.cfi_startproc
 2643              		@ args = 0, pretend = 0, frame = 0
 2644              		@ frame_needed = 0, uses_anonymous_args = 0
 2645              	.LVL239:
1674:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2646              		.loc 1 1674 0
 2647 0000 08B5     		push	{r3, lr}
 2648              	.LCFI25:
 2649              		.cfi_def_cfa_offset 8
 2650              		.cfi_offset 3, -8
 2651              		.cfi_offset 14, -4
1675:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2652              		.loc 1 1675 0
 2653 0002 836B     		ldr	r3, [r0, #56]
 2654              	.LVL240:
1678:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2655              		.loc 1 1678 0
 2656 0004 0268     		ldr	r2, [r0]
 2657 0006 1268     		ldr	r2, [r2]
 2658 0008 12F4807F 		tst	r2, #256
 2659 000c 10D1     		bne	.L200
1680:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2660              		.loc 1 1680 0
 2661 000e 0022     		movs	r2, #0
 2662 0010 DA85     		strh	r2, [r3, #46]	@ movhi
1682:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 2663              		.loc 1 1682 0
 2664 0012 93F84520 		ldrb	r2, [r3, #69]	@ zero_extendqisi2
 2665 0016 122A     		cmp	r2, #18
 2666 0018 11D1     		bne	.L199
1686:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2667              		.loc 1 1686 0
 2668 001a 1968     		ldr	r1, [r3]
 2669 001c 8A68     		ldr	r2, [r1, #8]
 2670 001e 22F08002 		bic	r2, r2, #128
 2671 0022 8A60     		str	r2, [r1, #8]
1689:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 2672              		.loc 1 1689 0
 2673 0024 1A68     		ldr	r2, [r3]
 2674 0026 1368     		ldr	r3, [r2]
 2675              	.LVL241:
 2676 0028 43F04003 		orr	r3, r3, #64
 2677 002c 1360     		str	r3, [r2]
 2678 002e 08BD     		pop	{r3, pc}
 2679              	.LVL242:
 2680              	.L200:
1695:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
ARM GAS  /tmp/ccNV7zic.s 			page 89


 2681              		.loc 1 1695 0
 2682 0030 93F84520 		ldrb	r2, [r3, #69]	@ zero_extendqisi2
 2683 0034 122A     		cmp	r2, #18
 2684 0036 02D1     		bne	.L199
1697:HALLIB/Src/stm32f7xx_hal_usart.c ****    }
 2685              		.loc 1 1697 0
 2686 0038 1846     		mov	r0, r3
 2687              	.LVL243:
 2688 003a FFF7FEFF 		bl	HAL_USART_TxCpltCallback
 2689              	.LVL244:
 2690              	.L199:
 2691 003e 08BD     		pop	{r3, pc}
 2692              		.cfi_endproc
 2693              	.LFE166:
 2695              		.section	.text.USART_EndTransmit_IT,"ax",%progbits
 2696              		.align	2
 2697              		.thumb
 2698              		.thumb_func
 2700              	USART_EndTransmit_IT:
 2701              	.LFB162:
1475:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Disable the USART Transmit Complete Interrupt */
 2702              		.loc 1 1475 0
 2703              		.cfi_startproc
 2704              		@ args = 0, pretend = 0, frame = 0
 2705              		@ frame_needed = 0, uses_anonymous_args = 0
 2706              	.LVL245:
 2707 0000 08B5     		push	{r3, lr}
 2708              	.LCFI26:
 2709              		.cfi_def_cfa_offset 8
 2710              		.cfi_offset 3, -8
 2711              		.cfi_offset 14, -4
1477:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2712              		.loc 1 1477 0
 2713 0002 0168     		ldr	r1, [r0]
 2714 0004 0A68     		ldr	r2, [r1]
 2715 0006 22F04002 		bic	r2, r2, #64
 2716 000a 0A60     		str	r2, [r1]
1480:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2717              		.loc 1 1480 0
 2718 000c 0168     		ldr	r1, [r0]
 2719 000e 8A68     		ldr	r2, [r1, #8]
 2720 0010 22F00102 		bic	r2, r2, #1
 2721 0014 8A60     		str	r2, [r1, #8]
1482:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2722              		.loc 1 1482 0
 2723 0016 0122     		movs	r2, #1
 2724 0018 80F84520 		strb	r2, [r0, #69]
1484:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2725              		.loc 1 1484 0
 2726 001c FFF7FEFF 		bl	HAL_USART_TxCpltCallback
 2727              	.LVL246:
1487:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2728              		.loc 1 1487 0
 2729 0020 0020     		movs	r0, #0
 2730 0022 08BD     		pop	{r3, pc}
 2731              		.cfi_endproc
 2732              	.LFE162:
ARM GAS  /tmp/ccNV7zic.s 			page 90


 2734              		.section	.text.HAL_USART_TxHalfCpltCallback,"ax",%progbits
 2735              		.align	2
 2736              		.weak	HAL_USART_TxHalfCpltCallback
 2737              		.thumb
 2738              		.thumb_func
 2740              	HAL_USART_TxHalfCpltCallback:
 2741              	.LFB154:
1301:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 2742              		.loc 1 1301 0
 2743              		.cfi_startproc
 2744              		@ args = 0, pretend = 0, frame = 0
 2745              		@ frame_needed = 0, uses_anonymous_args = 0
 2746              		@ link register save eliminated.
 2747              	.LVL247:
 2748 0000 7047     		bx	lr
 2749              		.cfi_endproc
 2750              	.LFE154:
 2752 0002 00BF     		.section	.text.USART_DMATxHalfCplt,"ax",%progbits
 2753              		.align	2
 2754              		.thumb
 2755              		.thumb_func
 2757              	USART_DMATxHalfCplt:
 2758              	.LFB167:
1709:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = (USART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 2759              		.loc 1 1709 0
 2760              		.cfi_startproc
 2761              		@ args = 0, pretend = 0, frame = 0
 2762              		@ frame_needed = 0, uses_anonymous_args = 0
 2763              	.LVL248:
1709:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = (USART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 2764              		.loc 1 1709 0
 2765 0000 08B5     		push	{r3, lr}
 2766              	.LCFI27:
 2767              		.cfi_def_cfa_offset 8
 2768              		.cfi_offset 3, -8
 2769              		.cfi_offset 14, -4
 2770              	.LVL249:
1712:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 2771              		.loc 1 1712 0
 2772 0002 806B     		ldr	r0, [r0, #56]
 2773              	.LVL250:
 2774 0004 FFF7FEFF 		bl	HAL_USART_TxHalfCpltCallback
 2775              	.LVL251:
 2776 0008 08BD     		pop	{r3, pc}
 2777              		.cfi_endproc
 2778              	.LFE167:
 2780 000a 00BF     		.section	.text.HAL_USART_RxCpltCallback,"ax",%progbits
 2781              		.align	2
 2782              		.weak	HAL_USART_RxCpltCallback
 2783              		.thumb
 2784              		.thumb_func
 2786              	HAL_USART_RxCpltCallback:
 2787              	.LFB155:
1316:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 2788              		.loc 1 1316 0
 2789              		.cfi_startproc
 2790              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccNV7zic.s 			page 91


 2791              		@ frame_needed = 0, uses_anonymous_args = 0
 2792              		@ link register save eliminated.
 2793              	.LVL252:
 2794 0000 7047     		bx	lr
 2795              		.cfi_endproc
 2796              	.LFE155:
 2798 0002 00BF     		.section	.text.USART_Receive_IT,"ax",%progbits
 2799              		.align	2
 2800              		.thumb
 2801              		.thumb_func
 2803              	USART_Receive_IT:
 2804              	.LFB163:
1497:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
 2805              		.loc 1 1497 0
 2806              		.cfi_startproc
 2807              		@ args = 0, pretend = 0, frame = 0
 2808              		@ frame_needed = 0, uses_anonymous_args = 0
 2809              	.LVL253:
1497:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
 2810              		.loc 1 1497 0
 2811 0000 08B5     		push	{r3, lr}
 2812              	.LCFI28:
 2813              		.cfi_def_cfa_offset 8
 2814              		.cfi_offset 3, -8
 2815              		.cfi_offset 14, -4
1499:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2816              		.loc 1 1499 0
 2817 0002 028F     		ldrh	r2, [r0, #56]
 2818              	.LVL254:
1501:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2819              		.loc 1 1501 0
 2820 0004 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 2821 0008 222B     		cmp	r3, #34
 2822 000a 35D1     		bne	.L213
1504:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 2823              		.loc 1 1504 0
 2824 000c 8368     		ldr	r3, [r0, #8]
 2825 000e B3F5805F 		cmp	r3, #4096
 2826 0012 0AD1     		bne	.L211
1504:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 2827              		.loc 1 1504 0 is_stmt 0 discriminator 1
 2828 0014 0369     		ldr	r3, [r0, #16]
 2829 0016 43B9     		cbnz	r3, .L211
1506:HALLIB/Src/stm32f7xx_hal_usart.c ****       *tmp = (uint16_t)(husart->Instance->RDR & uhMask);
 2830              		.loc 1 1506 0 is_stmt 1
 2831 0018 016B     		ldr	r1, [r0, #48]
 2832              	.LVL255:
1507:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->pRxBuffPtr += 2U;
 2833              		.loc 1 1507 0
 2834 001a 0368     		ldr	r3, [r0]
 2835 001c 5B6A     		ldr	r3, [r3, #36]
 2836 001e 1A40     		ands	r2, r2, r3
 2837              	.LVL256:
 2838 0020 0A80     		strh	r2, [r1]	@ movhi
 2839              	.LVL257:
1508:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 2840              		.loc 1 1508 0
ARM GAS  /tmp/ccNV7zic.s 			page 92


 2841 0022 036B     		ldr	r3, [r0, #48]
 2842 0024 0233     		adds	r3, r3, #2
 2843 0026 0363     		str	r3, [r0, #48]
 2844 0028 07E0     		b	.L212
 2845              	.LVL258:
 2846              	.L211:
1512:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 2847              		.loc 1 1512 0
 2848 002a 016B     		ldr	r1, [r0, #48]
 2849 002c 4B1C     		adds	r3, r1, #1
 2850 002e 0363     		str	r3, [r0, #48]
 2851 0030 0368     		ldr	r3, [r0]
 2852 0032 5B6A     		ldr	r3, [r3, #36]
 2853 0034 D2B2     		uxtb	r2, r2
 2854              	.LVL259:
 2855 0036 1A40     		ands	r2, r2, r3
 2856 0038 0A70     		strb	r2, [r1]
 2857              	.LVL260:
 2858              	.L212:
1515:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2859              		.loc 1 1515 0
 2860 003a 0368     		ldr	r3, [r0]
 2861 003c FF22     		movs	r2, #255
 2862 003e 9A62     		str	r2, [r3, #40]
1517:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 2863              		.loc 1 1517 0
 2864 0040 C38E     		ldrh	r3, [r0, #54]
 2865 0042 9BB2     		uxth	r3, r3
 2866 0044 013B     		subs	r3, r3, #1
 2867 0046 9BB2     		uxth	r3, r3
 2868 0048 C386     		strh	r3, [r0, #54]	@ movhi
 2869 004a BBB9     		cbnz	r3, .L214
1519:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2870              		.loc 1 1519 0
 2871 004c 0268     		ldr	r2, [r0]
 2872 004e 1368     		ldr	r3, [r2]
 2873 0050 23F02003 		bic	r3, r3, #32
 2874 0054 1360     		str	r3, [r2]
1522:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2875              		.loc 1 1522 0
 2876 0056 0268     		ldr	r2, [r0]
 2877 0058 1368     		ldr	r3, [r2]
 2878 005a 23F48073 		bic	r3, r3, #256
 2879 005e 1360     		str	r3, [r2]
1525:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2880              		.loc 1 1525 0
 2881 0060 0268     		ldr	r2, [r0]
 2882 0062 9368     		ldr	r3, [r2, #8]
 2883 0064 23F00103 		bic	r3, r3, #1
 2884 0068 9360     		str	r3, [r2, #8]
1527:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2885              		.loc 1 1527 0
 2886 006a 0123     		movs	r3, #1
 2887 006c 80F84530 		strb	r3, [r0, #69]
1529:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2888              		.loc 1 1529 0
 2889 0070 FFF7FEFF 		bl	HAL_USART_RxCpltCallback
ARM GAS  /tmp/ccNV7zic.s 			page 93


 2890              	.LVL261:
1531:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 2891              		.loc 1 1531 0
 2892 0074 0020     		movs	r0, #0
 2893 0076 08BD     		pop	{r3, pc}
 2894              	.LVL262:
 2895              	.L213:
1538:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2896              		.loc 1 1538 0
 2897 0078 0220     		movs	r0, #2
 2898              	.LVL263:
 2899 007a 08BD     		pop	{r3, pc}
 2900              	.LVL264:
 2901              	.L214:
1534:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 2902              		.loc 1 1534 0
 2903 007c 0020     		movs	r0, #0
 2904              	.LVL265:
1540:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2905              		.loc 1 1540 0
 2906 007e 08BD     		pop	{r3, pc}
 2907              		.cfi_endproc
 2908              	.LFE163:
 2910              		.section	.text.HAL_USART_RxHalfCpltCallback,"ax",%progbits
 2911              		.align	2
 2912              		.weak	HAL_USART_RxHalfCpltCallback
 2913              		.thumb
 2914              		.thumb_func
 2916              	HAL_USART_RxHalfCpltCallback:
 2917              	.LFB156:
1331:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 2918              		.loc 1 1331 0
 2919              		.cfi_startproc
 2920              		@ args = 0, pretend = 0, frame = 0
 2921              		@ frame_needed = 0, uses_anonymous_args = 0
 2922              		@ link register save eliminated.
 2923              	.LVL266:
 2924 0000 7047     		bx	lr
 2925              		.cfi_endproc
 2926              	.LFE156:
 2928 0002 00BF     		.section	.text.USART_DMARxHalfCplt,"ax",%progbits
 2929              		.align	2
 2930              		.thumb
 2931              		.thumb_func
 2933              	USART_DMARxHalfCplt:
 2934              	.LFB169:
1772:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = (USART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 2935              		.loc 1 1772 0
 2936              		.cfi_startproc
 2937              		@ args = 0, pretend = 0, frame = 0
 2938              		@ frame_needed = 0, uses_anonymous_args = 0
 2939              	.LVL267:
1772:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = (USART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 2940              		.loc 1 1772 0
 2941 0000 08B5     		push	{r3, lr}
 2942              	.LCFI29:
 2943              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccNV7zic.s 			page 94


 2944              		.cfi_offset 3, -8
 2945              		.cfi_offset 14, -4
 2946              	.LVL268:
1775:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 2947              		.loc 1 1775 0
 2948 0002 806B     		ldr	r0, [r0, #56]
 2949              	.LVL269:
 2950 0004 FFF7FEFF 		bl	HAL_USART_RxHalfCpltCallback
 2951              	.LVL270:
 2952 0008 08BD     		pop	{r3, pc}
 2953              		.cfi_endproc
 2954              	.LFE169:
 2956 000a 00BF     		.section	.text.HAL_USART_TxRxCpltCallback,"ax",%progbits
 2957              		.align	2
 2958              		.weak	HAL_USART_TxRxCpltCallback
 2959              		.thumb
 2960              		.thumb_func
 2962              	HAL_USART_TxRxCpltCallback:
 2963              	.LFB157:
1346:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 2964              		.loc 1 1346 0
 2965              		.cfi_startproc
 2966              		@ args = 0, pretend = 0, frame = 0
 2967              		@ frame_needed = 0, uses_anonymous_args = 0
 2968              		@ link register save eliminated.
 2969              	.LVL271:
 2970 0000 7047     		bx	lr
 2971              		.cfi_endproc
 2972              	.LFE157:
 2974 0002 00BF     		.section	.text.USART_DMAReceiveCplt,"ax",%progbits
 2975              		.align	2
 2976              		.thumb
 2977              		.thumb_func
 2979              	USART_DMAReceiveCplt:
 2980              	.LFB168:
1721:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2981              		.loc 1 1721 0
 2982              		.cfi_startproc
 2983              		@ args = 0, pretend = 0, frame = 0
 2984              		@ frame_needed = 0, uses_anonymous_args = 0
 2985              	.LVL272:
1721:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2986              		.loc 1 1721 0
 2987 0000 10B5     		push	{r4, lr}
 2988              	.LCFI30:
 2989              		.cfi_def_cfa_offset 8
 2990              		.cfi_offset 4, -8
 2991              		.cfi_offset 14, -4
1722:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 2992              		.loc 1 1722 0
 2993 0002 846B     		ldr	r4, [r0, #56]
 2994              	.LVL273:
1725:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 2995              		.loc 1 1725 0
 2996 0004 0368     		ldr	r3, [r0]
 2997 0006 1B68     		ldr	r3, [r3]
 2998 0008 13F4807F 		tst	r3, #256
ARM GAS  /tmp/ccNV7zic.s 			page 95


 2999 000c 24D1     		bne	.L221
1727:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3000              		.loc 1 1727 0
 3001 000e 0023     		movs	r3, #0
 3002 0010 E386     		strh	r3, [r4, #54]	@ movhi
1730:HALLIB/Src/stm32f7xx_hal_usart.c ****     CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 3003              		.loc 1 1730 0
 3004 0012 2268     		ldr	r2, [r4]
 3005 0014 1368     		ldr	r3, [r2]
 3006 0016 23F49073 		bic	r3, r3, #288
 3007 001a 1360     		str	r3, [r2]
1731:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3008              		.loc 1 1731 0
 3009 001c 2268     		ldr	r2, [r4]
 3010 001e 9368     		ldr	r3, [r2, #8]
 3011 0020 23F00103 		bic	r3, r3, #1
 3012 0024 9360     		str	r3, [r2, #8]
1735:HALLIB/Src/stm32f7xx_hal_usart.c ****     /* similarly, disable the DMA TX transfer that was started to provide the
 3013              		.loc 1 1735 0
 3014 0026 2268     		ldr	r2, [r4]
 3015 0028 9368     		ldr	r3, [r2, #8]
 3016 002a 23F04003 		bic	r3, r3, #64
 3017 002e 9360     		str	r3, [r2, #8]
1738:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3018              		.loc 1 1738 0
 3019 0030 2268     		ldr	r2, [r4]
 3020 0032 9368     		ldr	r3, [r2, #8]
 3021 0034 23F08003 		bic	r3, r3, #128
 3022 0038 9360     		str	r3, [r2, #8]
1740:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 3023              		.loc 1 1740 0
 3024 003a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3025 003e 222B     		cmp	r3, #34
 3026 0040 03D1     		bne	.L222
1742:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 3027              		.loc 1 1742 0
 3028 0042 2046     		mov	r0, r4
 3029              	.LVL274:
 3030 0044 FFF7FEFF 		bl	HAL_USART_RxCpltCallback
 3031              	.LVL275:
 3032 0048 02E0     		b	.L223
 3033              	.LVL276:
 3034              	.L222:
1747:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 3035              		.loc 1 1747 0
 3036 004a 2046     		mov	r0, r4
 3037              	.LVL277:
 3038 004c FFF7FEFF 		bl	HAL_USART_TxRxCpltCallback
 3039              	.LVL278:
 3040              	.L223:
1749:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 3041              		.loc 1 1749 0
 3042 0050 0123     		movs	r3, #1
 3043 0052 84F84530 		strb	r3, [r4, #69]
 3044 0056 10BD     		pop	{r4, pc}
 3045              	.LVL279:
 3046              	.L221:
ARM GAS  /tmp/ccNV7zic.s 			page 96


1754:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3047              		.loc 1 1754 0
 3048 0058 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3049 005c 222B     		cmp	r3, #34
 3050 005e 03D1     		bne	.L225
1756:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 3051              		.loc 1 1756 0
 3052 0060 2046     		mov	r0, r4
 3053              	.LVL280:
 3054 0062 FFF7FEFF 		bl	HAL_USART_RxCpltCallback
 3055              	.LVL281:
 3056 0066 10BD     		pop	{r4, pc}
 3057              	.LVL282:
 3058              	.L225:
1761:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 3059              		.loc 1 1761 0
 3060 0068 2046     		mov	r0, r4
 3061              	.LVL283:
 3062 006a FFF7FEFF 		bl	HAL_USART_TxRxCpltCallback
 3063              	.LVL284:
 3064 006e 10BD     		pop	{r4, pc}
 3065              		.cfi_endproc
 3066              	.LFE168:
 3068              		.section	.text.USART_TransmitReceive_IT,"ax",%progbits
 3069              		.align	2
 3070              		.thumb
 3071              		.thumb_func
 3073              	USART_TransmitReceive_IT:
 3074              	.LFB164:
1550:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
 3075              		.loc 1 1550 0
 3076              		.cfi_startproc
 3077              		@ args = 0, pretend = 0, frame = 0
 3078              		@ frame_needed = 0, uses_anonymous_args = 0
 3079              	.LVL285:
1552:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3080              		.loc 1 1552 0
 3081 0000 028F     		ldrh	r2, [r0, #56]
 3082              	.LVL286:
1554:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 3083              		.loc 1 1554 0
 3084 0002 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 3085 0006 322B     		cmp	r3, #50
 3086 0008 64D1     		bne	.L235
1550:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint16_t* tmp;
 3087              		.loc 1 1550 0
 3088 000a 10B5     		push	{r4, lr}
 3089              	.LCFI31:
 3090              		.cfi_def_cfa_offset 8
 3091              		.cfi_offset 4, -8
 3092              		.cfi_offset 14, -4
1556:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3093              		.loc 1 1556 0
 3094 000c C38D     		ldrh	r3, [r0, #46]
 3095 000e 9BB2     		uxth	r3, r3
 3096 0010 2BB3     		cbz	r3, .L229
1558:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
ARM GAS  /tmp/ccNV7zic.s 			page 97


 3097              		.loc 1 1558 0
 3098 0012 0368     		ldr	r3, [r0]
 3099 0014 D969     		ldr	r1, [r3, #28]
 3100 0016 11F0800F 		tst	r1, #128
 3101 001a 20D0     		beq	.L229
1560:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
 3102              		.loc 1 1560 0
 3103 001c 8168     		ldr	r1, [r0, #8]
 3104 001e B1F5805F 		cmp	r1, #4096
 3105 0022 09D1     		bne	.L230
1560:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
 3106              		.loc 1 1560 0 is_stmt 0 discriminator 1
 3107 0024 0169     		ldr	r1, [r0, #16]
 3108 0026 39B9     		cbnz	r1, .L230
1562:HALLIB/Src/stm32f7xx_hal_usart.c ****           husart->Instance->TDR = (uint16_t)(*tmp & uhMask);
 3109              		.loc 1 1562 0 is_stmt 1
 3110 0028 816A     		ldr	r1, [r0, #40]
 3111              	.LVL287:
1563:HALLIB/Src/stm32f7xx_hal_usart.c ****           husart->pTxBuffPtr += 2U;
 3112              		.loc 1 1563 0
 3113 002a 0988     		ldrh	r1, [r1]
 3114              	.LVL288:
 3115 002c 1140     		ands	r1, r1, r2
 3116 002e 9962     		str	r1, [r3, #40]
 3117              	.LVL289:
1564:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
 3118              		.loc 1 1564 0
 3119 0030 836A     		ldr	r3, [r0, #40]
 3120 0032 0233     		adds	r3, r3, #2
 3121 0034 8362     		str	r3, [r0, #40]
 3122 0036 05E0     		b	.L231
 3123              	.L230:
1568:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
 3124              		.loc 1 1568 0
 3125 0038 816A     		ldr	r1, [r0, #40]
 3126 003a 4C1C     		adds	r4, r1, #1
 3127 003c 8462     		str	r4, [r0, #40]
 3128 003e 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3129 0040 1140     		ands	r1, r1, r2
 3130 0042 9962     		str	r1, [r3, #40]
 3131              	.L231:
1570:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3132              		.loc 1 1570 0
 3133 0044 C38D     		ldrh	r3, [r0, #46]
 3134 0046 9BB2     		uxth	r3, r3
 3135 0048 013B     		subs	r3, r3, #1
 3136 004a 9BB2     		uxth	r3, r3
 3137 004c C385     		strh	r3, [r0, #46]	@ movhi
1573:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
 3138              		.loc 1 1573 0
 3139 004e C38D     		ldrh	r3, [r0, #46]
 3140 0050 9BB2     		uxth	r3, r3
 3141 0052 23B9     		cbnz	r3, .L229
1575:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
 3142              		.loc 1 1575 0
 3143 0054 0168     		ldr	r1, [r0]
 3144 0056 0B68     		ldr	r3, [r1]
ARM GAS  /tmp/ccNV7zic.s 			page 98


 3145 0058 23F08003 		bic	r3, r3, #128
 3146 005c 0B60     		str	r3, [r1]
 3147              	.L229:
1580:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3148              		.loc 1 1580 0
 3149 005e C38E     		ldrh	r3, [r0, #54]
 3150 0060 9BB2     		uxth	r3, r3
 3151 0062 F3B1     		cbz	r3, .L232
1582:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 3152              		.loc 1 1582 0
 3153 0064 0368     		ldr	r3, [r0]
 3154 0066 D969     		ldr	r1, [r3, #28]
 3155 0068 11F0200F 		tst	r1, #32
 3156 006c 19D0     		beq	.L232
1584:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
 3157              		.loc 1 1584 0
 3158 006e 8168     		ldr	r1, [r0, #8]
 3159 0070 B1F5805F 		cmp	r1, #4096
 3160 0074 09D1     		bne	.L233
1584:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
 3161              		.loc 1 1584 0 is_stmt 0 discriminator 1
 3162 0076 0169     		ldr	r1, [r0, #16]
 3163 0078 39B9     		cbnz	r1, .L233
1586:HALLIB/Src/stm32f7xx_hal_usart.c ****           *tmp = (uint16_t)(husart->Instance->RDR & uhMask);
 3164              		.loc 1 1586 0 is_stmt 1
 3165 007a 016B     		ldr	r1, [r0, #48]
 3166              	.LVL290:
1587:HALLIB/Src/stm32f7xx_hal_usart.c ****           husart->pRxBuffPtr += 2U;
 3167              		.loc 1 1587 0
 3168 007c 5B6A     		ldr	r3, [r3, #36]
 3169 007e 1A40     		ands	r2, r2, r3
 3170              	.LVL291:
 3171 0080 0A80     		strh	r2, [r1]	@ movhi
1588:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
 3172              		.loc 1 1588 0
 3173 0082 036B     		ldr	r3, [r0, #48]
 3174 0084 0233     		adds	r3, r3, #2
 3175 0086 0363     		str	r3, [r0, #48]
 3176 0088 06E0     		b	.L234
 3177              	.LVL292:
 3178              	.L233:
1592:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
 3179              		.loc 1 1592 0
 3180 008a 016B     		ldr	r1, [r0, #48]
 3181 008c 4C1C     		adds	r4, r1, #1
 3182 008e 0463     		str	r4, [r0, #48]
 3183 0090 5B6A     		ldr	r3, [r3, #36]
 3184 0092 D2B2     		uxtb	r2, r2
 3185              	.LVL293:
 3186 0094 1A40     		ands	r2, r2, r3
 3187 0096 0A70     		strb	r2, [r1]
 3188              	.L234:
1594:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 3189              		.loc 1 1594 0
 3190 0098 C38E     		ldrh	r3, [r0, #54]
 3191 009a 9BB2     		uxth	r3, r3
 3192 009c 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccNV7zic.s 			page 99


 3193 009e 9BB2     		uxth	r3, r3
 3194 00a0 C386     		strh	r3, [r0, #54]	@ movhi
 3195              	.L232:
1599:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3196              		.loc 1 1599 0
 3197 00a2 C38E     		ldrh	r3, [r0, #54]
 3198 00a4 9BB2     		uxth	r3, r3
 3199 00a6 BBB9     		cbnz	r3, .L236
1601:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3200              		.loc 1 1601 0
 3201 00a8 0268     		ldr	r2, [r0]
 3202 00aa 1368     		ldr	r3, [r2]
 3203 00ac 23F02003 		bic	r3, r3, #32
 3204 00b0 1360     		str	r3, [r2]
1604:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3205              		.loc 1 1604 0
 3206 00b2 0268     		ldr	r2, [r0]
 3207 00b4 1368     		ldr	r3, [r2]
 3208 00b6 23F48073 		bic	r3, r3, #256
 3209 00ba 1360     		str	r3, [r2]
1607:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3210              		.loc 1 1607 0
 3211 00bc 0268     		ldr	r2, [r0]
 3212 00be 9368     		ldr	r3, [r2, #8]
 3213 00c0 23F00103 		bic	r3, r3, #1
 3214 00c4 9360     		str	r3, [r2, #8]
1609:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3215              		.loc 1 1609 0
 3216 00c6 0123     		movs	r3, #1
 3217 00c8 80F84530 		strb	r3, [r0, #69]
1611:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3218              		.loc 1 1611 0
 3219 00cc FFF7FEFF 		bl	HAL_USART_TxRxCpltCallback
 3220              	.LVL294:
1613:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 3221              		.loc 1 1613 0
 3222 00d0 0020     		movs	r0, #0
 3223 00d2 10BD     		pop	{r4, pc}
 3224              	.LVL295:
 3225              	.L235:
 3226              	.LCFI32:
 3227              		.cfi_def_cfa_offset 0
 3228              		.cfi_restore 4
 3229              		.cfi_restore 14
1620:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 3230              		.loc 1 1620 0
 3231 00d4 0220     		movs	r0, #2
 3232              	.LVL296:
1622:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3233              		.loc 1 1622 0
 3234 00d6 7047     		bx	lr
 3235              	.LVL297:
 3236              	.L236:
 3237              	.LCFI33:
 3238              		.cfi_def_cfa_offset 8
 3239              		.cfi_offset 4, -8
 3240              		.cfi_offset 14, -4
ARM GAS  /tmp/ccNV7zic.s 			page 100


1616:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 3241              		.loc 1 1616 0
 3242 00d8 0020     		movs	r0, #0
 3243              	.LVL298:
1622:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3244              		.loc 1 1622 0
 3245 00da 10BD     		pop	{r4, pc}
 3246              		.cfi_endproc
 3247              	.LFE164:
 3249              		.section	.text.HAL_USART_ErrorCallback,"ax",%progbits
 3250              		.align	2
 3251              		.weak	HAL_USART_ErrorCallback
 3252              		.thumb
 3253              		.thumb_func
 3255              	HAL_USART_ErrorCallback:
 3256              	.LFB158:
1361:HALLIB/Src/stm32f7xx_hal_usart.c ****   /* Prevent unused argument(s) compilation warning */
 3257              		.loc 1 1361 0
 3258              		.cfi_startproc
 3259              		@ args = 0, pretend = 0, frame = 0
 3260              		@ frame_needed = 0, uses_anonymous_args = 0
 3261              		@ link register save eliminated.
 3262              	.LVL299:
 3263 0000 7047     		bx	lr
 3264              		.cfi_endproc
 3265              	.LFE158:
 3267 0002 00BF     		.section	.text.USART_DMAError,"ax",%progbits
 3268              		.align	2
 3269              		.thumb
 3270              		.thumb_func
 3272              	USART_DMAError:
 3273              	.LFB170:
1784:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3274              		.loc 1 1784 0
 3275              		.cfi_startproc
 3276              		@ args = 0, pretend = 0, frame = 0
 3277              		@ frame_needed = 0, uses_anonymous_args = 0
 3278              	.LVL300:
1784:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3279              		.loc 1 1784 0
 3280 0000 10B5     		push	{r4, lr}
 3281              	.LCFI34:
 3282              		.cfi_def_cfa_offset 8
 3283              		.cfi_offset 4, -8
 3284              		.cfi_offset 14, -4
1785:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3285              		.loc 1 1785 0
 3286 0002 846B     		ldr	r4, [r0, #56]
 3287              	.LVL301:
1787:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->TxXferCount = 0U;
 3288              		.loc 1 1787 0
 3289 0004 0023     		movs	r3, #0
 3290 0006 E386     		strh	r3, [r4, #54]	@ movhi
1788:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3291              		.loc 1 1788 0
 3292 0008 E385     		strh	r3, [r4, #46]	@ movhi
1791:HALLIB/Src/stm32f7xx_hal_usart.c ****      &&(HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT)))
ARM GAS  /tmp/ccNV7zic.s 			page 101


 3293              		.loc 1 1791 0
 3294 000a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3295 000e 122B     		cmp	r3, #18
 3296 0010 07D1     		bne	.L240
1792:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 3297              		.loc 1 1792 0
 3298 0012 2368     		ldr	r3, [r4]
 3299 0014 9B68     		ldr	r3, [r3, #8]
 3300 0016 13F0800F 		tst	r3, #128
 3301 001a 02D0     		beq	.L240
1794:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 3302              		.loc 1 1794 0
 3303 001c 2046     		mov	r0, r4
 3304              	.LVL302:
 3305 001e FFF7FEFF 		bl	USART_EndTxTransfer
 3306              	.LVL303:
 3307              	.L240:
1798:HALLIB/Src/stm32f7xx_hal_usart.c ****      &&(HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)))
 3308              		.loc 1 1798 0
 3309 0022 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3310 0026 222B     		cmp	r3, #34
 3311 0028 07D1     		bne	.L241
1799:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 3312              		.loc 1 1799 0
 3313 002a 2368     		ldr	r3, [r4]
 3314 002c 9B68     		ldr	r3, [r3, #8]
 3315 002e 13F0400F 		tst	r3, #64
 3316 0032 02D0     		beq	.L241
1801:HALLIB/Src/stm32f7xx_hal_usart.c ****   }
 3317              		.loc 1 1801 0
 3318 0034 2046     		mov	r0, r4
 3319 0036 FFF7FEFF 		bl	USART_EndRxTransfer
 3320              	.LVL304:
 3321              	.L241:
1804:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->State= HAL_USART_STATE_READY;
 3322              		.loc 1 1804 0
 3323 003a A36C     		ldr	r3, [r4, #72]
 3324 003c 43F01003 		orr	r3, r3, #16
 3325 0040 A364     		str	r3, [r4, #72]
1805:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3326              		.loc 1 1805 0
 3327 0042 0123     		movs	r3, #1
 3328 0044 84F84530 		strb	r3, [r4, #69]
1807:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 3329              		.loc 1 1807 0
 3330 0048 2046     		mov	r0, r4
 3331 004a FFF7FEFF 		bl	HAL_USART_ErrorCallback
 3332              	.LVL305:
 3333 004e 10BD     		pop	{r4, pc}
 3334              		.cfi_endproc
 3335              	.LFE170:
 3337              		.section	.text.HAL_USART_IRQHandler,"ax",%progbits
 3338              		.align	2
 3339              		.global	HAL_USART_IRQHandler
 3340              		.thumb
 3341              		.thumb_func
 3343              	HAL_USART_IRQHandler:
ARM GAS  /tmp/ccNV7zic.s 			page 102


 3344              	.LFB152:
1138:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t isrflags = READ_REG(husart->Instance->ISR);
 3345              		.loc 1 1138 0
 3346              		.cfi_startproc
 3347              		@ args = 0, pretend = 0, frame = 0
 3348              		@ frame_needed = 0, uses_anonymous_args = 0
 3349              	.LVL306:
 3350 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3351              	.LCFI35:
 3352              		.cfi_def_cfa_offset 24
 3353              		.cfi_offset 4, -24
 3354              		.cfi_offset 5, -20
 3355              		.cfi_offset 6, -16
 3356              		.cfi_offset 7, -12
 3357              		.cfi_offset 8, -8
 3358              		.cfi_offset 14, -4
 3359 0004 0546     		mov	r5, r0
1139:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 3360              		.loc 1 1139 0
 3361 0006 0368     		ldr	r3, [r0]
 3362 0008 DC69     		ldr	r4, [r3, #28]
 3363              	.LVL307:
1140:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 3364              		.loc 1 1140 0
 3365 000a 1F68     		ldr	r7, [r3]
 3366              	.LVL308:
1141:HALLIB/Src/stm32f7xx_hal_usart.c ****   uint32_t errorflags;
 3367              		.loc 1 1141 0
 3368 000c 9E68     		ldr	r6, [r3, #8]
 3369              	.LVL309:
1146:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 3370              		.loc 1 1146 0
 3371 000e 14F00F08 		ands	r8, r4, #15
 3372              	.LVL310:
 3373 0012 0ED1     		bne	.L244
1149:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3374              		.loc 1 1149 0
 3375 0014 14F0200F 		tst	r4, #32
 3376 0018 0BD0     		beq	.L244
1149:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3377              		.loc 1 1149 0 is_stmt 0 discriminator 1
 3378 001a 17F0200F 		tst	r7, #32
 3379 001e 08D0     		beq	.L244
1151:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 3380              		.loc 1 1151 0 is_stmt 1
 3381 0020 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 3382 0024 222B     		cmp	r3, #34
 3383 0026 02D1     		bne	.L245
1153:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 3384              		.loc 1 1153 0
 3385 0028 FFF7FEFF 		bl	USART_Receive_IT
 3386              	.LVL311:
 3387 002c 01E0     		b	.L244
 3388              	.LVL312:
 3389              	.L245:
1157:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 3390              		.loc 1 1157 0
ARM GAS  /tmp/ccNV7zic.s 			page 103


 3391 002e FFF7FEFF 		bl	USART_TransmitReceive_IT
 3392              	.LVL313:
 3393              	.L244:
1163:HALLIB/Src/stm32f7xx_hal_usart.c ****      && (   ((cr3its & USART_CR3_EIE) != RESET)
 3394              		.loc 1 1163 0
 3395 0032 B8F1000F 		cmp	r8, #0
 3396 0036 70D0     		beq	.L246
1164:HALLIB/Src/stm32f7xx_hal_usart.c ****          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 3397              		.loc 1 1164 0
 3398 0038 16F00106 		ands	r6, r6, #1
 3399              	.LVL314:
 3400 003c 02D1     		bne	.L247
1165:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 3401              		.loc 1 1165 0
 3402 003e 17F4907F 		tst	r7, #288
 3403 0042 6AD0     		beq	.L246
 3404              	.L247:
1169:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3405              		.loc 1 1169 0
 3406 0044 14F0010F 		tst	r4, #1
 3407 0048 08D0     		beq	.L248
1169:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3408              		.loc 1 1169 0 is_stmt 0 discriminator 1
 3409 004a 17F4807F 		tst	r7, #256
 3410 004e 05D0     		beq	.L248
1171:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_PE;
 3411              		.loc 1 1171 0 is_stmt 1
 3412 0050 2B68     		ldr	r3, [r5]
 3413 0052 0122     		movs	r2, #1
 3414 0054 1A62     		str	r2, [r3, #32]
1172:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 3415              		.loc 1 1172 0
 3416 0056 AB6C     		ldr	r3, [r5, #72]
 3417 0058 1343     		orrs	r3, r3, r2
 3418 005a AB64     		str	r3, [r5, #72]
 3419              	.L248:
1176:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3420              		.loc 1 1176 0
 3421 005c 14F0020F 		tst	r4, #2
 3422 0060 07D0     		beq	.L249
1176:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3423              		.loc 1 1176 0 is_stmt 0 discriminator 1
 3424 0062 36B1     		cbz	r6, .L249
1178:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_FE;
 3425              		.loc 1 1178 0 is_stmt 1
 3426 0064 2B68     		ldr	r3, [r5]
 3427 0066 0222     		movs	r2, #2
 3428 0068 1A62     		str	r2, [r3, #32]
1179:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 3429              		.loc 1 1179 0
 3430 006a AB6C     		ldr	r3, [r5, #72]
 3431 006c 43F00403 		orr	r3, r3, #4
 3432 0070 AB64     		str	r3, [r5, #72]
 3433              	.L249:
1183:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3434              		.loc 1 1183 0
 3435 0072 14F0040F 		tst	r4, #4
ARM GAS  /tmp/ccNV7zic.s 			page 104


 3436 0076 07D0     		beq	.L250
1183:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3437              		.loc 1 1183 0 is_stmt 0 discriminator 1
 3438 0078 36B1     		cbz	r6, .L250
1185:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_NE;
 3439              		.loc 1 1185 0 is_stmt 1
 3440 007a 2B68     		ldr	r3, [r5]
 3441 007c 0422     		movs	r2, #4
 3442 007e 1A62     		str	r2, [r3, #32]
1186:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 3443              		.loc 1 1186 0
 3444 0080 AB6C     		ldr	r3, [r5, #72]
 3445 0082 43F00203 		orr	r3, r3, #2
 3446 0086 AB64     		str	r3, [r5, #72]
 3447              	.L250:
1190:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3448              		.loc 1 1190 0
 3449 0088 14F0080F 		tst	r4, #8
 3450 008c 06D0     		beq	.L251
1190:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3451              		.loc 1 1190 0 is_stmt 0 discriminator 1
 3452 008e 2EB1     		cbz	r6, .L251
1192:HALLIB/Src/stm32f7xx_hal_usart.c ****       husart->ErrorCode |= HAL_USART_ERROR_ORE;
 3453              		.loc 1 1192 0 is_stmt 1
 3454 0090 2B68     		ldr	r3, [r5]
 3455 0092 0822     		movs	r2, #8
 3456 0094 1A62     		str	r2, [r3, #32]
1193:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 3457              		.loc 1 1193 0
 3458 0096 AB6C     		ldr	r3, [r5, #72]
 3459 0098 1343     		orrs	r3, r3, r2
 3460 009a AB64     		str	r3, [r5, #72]
 3461              	.L251:
1197:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3462              		.loc 1 1197 0
 3463 009c AB6C     		ldr	r3, [r5, #72]
 3464 009e 002B     		cmp	r3, #0
 3465 00a0 58D0     		beq	.L243
1200:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 3466              		.loc 1 1200 0
 3467 00a2 14F0200F 		tst	r4, #32
 3468 00a6 05D0     		beq	.L253
1200:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 3469              		.loc 1 1200 0 is_stmt 0 discriminator 1
 3470 00a8 17F0200F 		tst	r7, #32
 3471 00ac 02D0     		beq	.L253
1202:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 3472              		.loc 1 1202 0 is_stmt 1
 3473 00ae 2846     		mov	r0, r5
 3474 00b0 FFF7FEFF 		bl	USART_Receive_IT
 3475              	.LVL315:
 3476              	.L253:
1207:HALLIB/Src/stm32f7xx_hal_usart.c ****           (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)))
 3477              		.loc 1 1207 0
 3478 00b4 AB6C     		ldr	r3, [r5, #72]
 3479 00b6 13F0080F 		tst	r3, #8
 3480 00ba 04D1     		bne	.L254
ARM GAS  /tmp/ccNV7zic.s 			page 105


1208:HALLIB/Src/stm32f7xx_hal_usart.c ****       {
 3481              		.loc 1 1208 0 discriminator 1
 3482 00bc 2B68     		ldr	r3, [r5]
 3483 00be 9B68     		ldr	r3, [r3, #8]
1207:HALLIB/Src/stm32f7xx_hal_usart.c ****           (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)))
 3484              		.loc 1 1207 0 discriminator 1
 3485 00c0 13F0400F 		tst	r3, #64
 3486 00c4 22D0     		beq	.L255
 3487              	.L254:
1213:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3488              		.loc 1 1213 0
 3489 00c6 2846     		mov	r0, r5
 3490 00c8 FFF7FEFF 		bl	USART_EndRxTransfer
 3491              	.LVL316:
1216:HALLIB/Src/stm32f7xx_hal_usart.c ****         {
 3492              		.loc 1 1216 0
 3493 00cc 2B68     		ldr	r3, [r5]
 3494 00ce 9A68     		ldr	r2, [r3, #8]
 3495 00d0 12F0400F 		tst	r2, #64
 3496 00d4 15D0     		beq	.L256
1218:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3497              		.loc 1 1218 0
 3498 00d6 9A68     		ldr	r2, [r3, #8]
 3499 00d8 22F04002 		bic	r2, r2, #64
 3500 00dc 9A60     		str	r2, [r3, #8]
1221:HALLIB/Src/stm32f7xx_hal_usart.c ****           {
 3501              		.loc 1 1221 0
 3502 00de 2B6C     		ldr	r3, [r5, #64]
 3503 00e0 53B1     		cbz	r3, .L257
1225:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3504              		.loc 1 1225 0
 3505 00e2 1D4A     		ldr	r2, .L261
 3506 00e4 1A65     		str	r2, [r3, #80]
1228:HALLIB/Src/stm32f7xx_hal_usart.c ****             {
 3507              		.loc 1 1228 0
 3508 00e6 286C     		ldr	r0, [r5, #64]
 3509 00e8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3510              	.LVL317:
 3511 00ec 90B3     		cbz	r0, .L243
1231:HALLIB/Src/stm32f7xx_hal_usart.c ****             }
 3512              		.loc 1 1231 0
 3513 00ee 286C     		ldr	r0, [r5, #64]
 3514 00f0 036D     		ldr	r3, [r0, #80]
 3515 00f2 9847     		blx	r3
 3516              	.LVL318:
 3517 00f4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3518              	.LVL319:
 3519              	.L257:
1237:HALLIB/Src/stm32f7xx_hal_usart.c ****           }
 3520              		.loc 1 1237 0
 3521 00f8 2846     		mov	r0, r5
 3522 00fa FFF7FEFF 		bl	HAL_USART_ErrorCallback
 3523              	.LVL320:
 3524 00fe BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3525              	.LVL321:
 3526              	.L256:
1243:HALLIB/Src/stm32f7xx_hal_usart.c ****         }
ARM GAS  /tmp/ccNV7zic.s 			page 106


 3527              		.loc 1 1243 0
 3528 0102 2846     		mov	r0, r5
 3529 0104 FFF7FEFF 		bl	HAL_USART_ErrorCallback
 3530              	.LVL322:
 3531 0108 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3532              	.LVL323:
 3533              	.L255:
1250:HALLIB/Src/stm32f7xx_hal_usart.c ****         husart->ErrorCode = HAL_USART_ERROR_NONE;
 3534              		.loc 1 1250 0
 3535 010c 2846     		mov	r0, r5
 3536 010e FFF7FEFF 		bl	HAL_USART_ErrorCallback
 3537              	.LVL324:
1251:HALLIB/Src/stm32f7xx_hal_usart.c ****       }
 3538              		.loc 1 1251 0
 3539 0112 0023     		movs	r3, #0
 3540 0114 AB64     		str	r3, [r5, #72]
 3541 0116 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3542              	.LVL325:
 3543              	.L246:
1259:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 3544              		.loc 1 1259 0
 3545 011a 14F0800F 		tst	r4, #128
 3546 011e 10D0     		beq	.L258
1259:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 3547              		.loc 1 1259 0 is_stmt 0 discriminator 1
 3548 0120 17F0800F 		tst	r7, #128
 3549 0124 0DD0     		beq	.L258
1261:HALLIB/Src/stm32f7xx_hal_usart.c ****     {
 3550              		.loc 1 1261 0 is_stmt 1
 3551 0126 95F84530 		ldrb	r3, [r5, #69]	@ zero_extendqisi2
 3552 012a 122B     		cmp	r3, #18
 3553 012c 04D1     		bne	.L259
1263:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 3554              		.loc 1 1263 0
 3555 012e 2846     		mov	r0, r5
 3556 0130 FFF7FEFF 		bl	USART_Transmit_IT
 3557              	.LVL326:
 3558 0134 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3559              	.LVL327:
 3560              	.L259:
1267:HALLIB/Src/stm32f7xx_hal_usart.c ****     }
 3561              		.loc 1 1267 0
 3562 0138 2846     		mov	r0, r5
 3563 013a FFF7FEFF 		bl	USART_TransmitReceive_IT
 3564              	.LVL328:
 3565 013e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3566              	.LVL329:
 3567              	.L258:
1273:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 3568              		.loc 1 1273 0
 3569 0142 14F0400F 		tst	r4, #64
 3570 0146 05D0     		beq	.L243
1273:HALLIB/Src/stm32f7xx_hal_usart.c ****   {
 3571              		.loc 1 1273 0 is_stmt 0 discriminator 1
 3572 0148 17F0400F 		tst	r7, #64
 3573 014c 02D0     		beq	.L243
1275:HALLIB/Src/stm32f7xx_hal_usart.c ****     return;
ARM GAS  /tmp/ccNV7zic.s 			page 107


 3574              		.loc 1 1275 0 is_stmt 1
 3575 014e 2846     		mov	r0, r5
 3576 0150 FFF7FEFF 		bl	USART_EndTransmit_IT
 3577              	.LVL330:
 3578              	.L243:
 3579 0154 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3580              	.LVL331:
 3581              	.L262:
 3582              		.align	2
 3583              	.L261:
 3584 0158 00000000 		.word	USART_DMAAbortOnError
 3585              		.cfi_endproc
 3586              	.LFE152:
 3588              		.section	.text.USART_DMAAbortOnError,"ax",%progbits
 3589              		.align	2
 3590              		.thumb
 3591              		.thumb_func
 3593              	USART_DMAAbortOnError:
 3594              	.LFB171:
1817:HALLIB/Src/stm32f7xx_hal_usart.c ****   USART_HandleTypeDef* husart = (USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3595              		.loc 1 1817 0
 3596              		.cfi_startproc
 3597              		@ args = 0, pretend = 0, frame = 0
 3598              		@ frame_needed = 0, uses_anonymous_args = 0
 3599              	.LVL332:
 3600 0000 08B5     		push	{r3, lr}
 3601              	.LCFI36:
 3602              		.cfi_def_cfa_offset 8
 3603              		.cfi_offset 3, -8
 3604              		.cfi_offset 14, -4
1818:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->RxXferCount = 0U;
 3605              		.loc 1 1818 0
 3606 0002 806B     		ldr	r0, [r0, #56]
 3607              	.LVL333:
1819:HALLIB/Src/stm32f7xx_hal_usart.c ****   husart->TxXferCount = 0U;
 3608              		.loc 1 1819 0
 3609 0004 0023     		movs	r3, #0
 3610 0006 C386     		strh	r3, [r0, #54]	@ movhi
1820:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3611              		.loc 1 1820 0
 3612 0008 C385     		strh	r3, [r0, #46]	@ movhi
1822:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 3613              		.loc 1 1822 0
 3614 000a FFF7FEFF 		bl	HAL_USART_ErrorCallback
 3615              	.LVL334:
 3616 000e 08BD     		pop	{r3, pc}
 3617              		.cfi_endproc
 3618              	.LFE171:
 3620              		.section	.text.HAL_USART_GetState,"ax",%progbits
 3621              		.align	2
 3622              		.global	HAL_USART_GetState
 3623              		.thumb
 3624              		.thumb_func
 3626              	HAL_USART_GetState:
 3627              	.LFB159:
1399:HALLIB/Src/stm32f7xx_hal_usart.c ****   return husart->State;
 3628              		.loc 1 1399 0
ARM GAS  /tmp/ccNV7zic.s 			page 108


 3629              		.cfi_startproc
 3630              		@ args = 0, pretend = 0, frame = 0
 3631              		@ frame_needed = 0, uses_anonymous_args = 0
 3632              		@ link register save eliminated.
 3633              	.LVL335:
1401:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3634              		.loc 1 1401 0
 3635 0000 90F84500 		ldrb	r0, [r0, #69]	@ zero_extendqisi2
 3636              	.LVL336:
 3637 0004 7047     		bx	lr
 3638              		.cfi_endproc
 3639              	.LFE159:
 3641 0006 00BF     		.section	.text.HAL_USART_GetError,"ax",%progbits
 3642              		.align	2
 3643              		.global	HAL_USART_GetError
 3644              		.thumb
 3645              		.thumb_func
 3647              	HAL_USART_GetError:
 3648              	.LFB160:
1410:HALLIB/Src/stm32f7xx_hal_usart.c ****   return husart->ErrorCode;
 3649              		.loc 1 1410 0
 3650              		.cfi_startproc
 3651              		@ args = 0, pretend = 0, frame = 0
 3652              		@ frame_needed = 0, uses_anonymous_args = 0
 3653              		@ link register save eliminated.
 3654              	.LVL337:
1411:HALLIB/Src/stm32f7xx_hal_usart.c **** }
 3655              		.loc 1 1411 0
 3656 0000 806C     		ldr	r0, [r0, #72]
 3657              	.LVL338:
1412:HALLIB/Src/stm32f7xx_hal_usart.c **** 
 3658              		.loc 1 1412 0
 3659 0002 7047     		bx	lr
 3660              		.cfi_endproc
 3661              	.LFE160:
 3663              		.text
 3664              	.Letext0:
 3665              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 3666              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 3667              		.file 4 "Inc/stm32f767xx.h"
 3668              		.file 5 "Inc/stm32f7xx.h"
 3669              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 3670              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 3671              		.file 8 "HALLIB/Inc/stm32f7xx_hal_usart.h"
 3672              		.file 9 "HALLIB/Inc/stm32f7xx_hal_rcc.h"
 3673              		.file 10 "HALLIB/Inc/stm32f7xx_hal.h"
 3674              		.file 11 "CORE/core_cm7.h"
ARM GAS  /tmp/ccNV7zic.s 			page 109


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_usart.c
     /tmp/ccNV7zic.s:21     .text.USART_Transmit_IT:00000000 $t
     /tmp/ccNV7zic.s:25     .text.USART_Transmit_IT:00000000 USART_Transmit_IT
     /tmp/ccNV7zic.s:110    .text.USART_EndTxTransfer:00000000 $t
     /tmp/ccNV7zic.s:114    .text.USART_EndTxTransfer:00000000 USART_EndTxTransfer
     /tmp/ccNV7zic.s:135    .text.USART_EndRxTransfer:00000000 $t
     /tmp/ccNV7zic.s:139    .text.USART_EndRxTransfer:00000000 USART_EndRxTransfer
     /tmp/ccNV7zic.s:165    .text.USART_SetConfig:00000000 $t
     /tmp/ccNV7zic.s:169    .text.USART_SetConfig:00000000 USART_SetConfig
     /tmp/ccNV7zic.s:232    .text.USART_SetConfig:00000056 $d
     /tmp/ccNV7zic.s:236    .text.USART_SetConfig:0000005a $t
     /tmp/ccNV7zic.s:270    .text.USART_SetConfig:00000082 $d
     /tmp/ccNV7zic.s:406    .text.USART_SetConfig:00000124 $d
     /tmp/ccNV7zic.s:514    .text.USART_SetConfig:000001a8 $d
     /tmp/ccNV7zic.s:525    .text.USART_WaitOnFlagUntilTimeout:00000000 $t
     /tmp/ccNV7zic.s:529    .text.USART_WaitOnFlagUntilTimeout:00000000 USART_WaitOnFlagUntilTimeout
     /tmp/ccNV7zic.s:614    .text.USART_CheckIdleState:00000000 $t
     /tmp/ccNV7zic.s:618    .text.USART_CheckIdleState:00000000 USART_CheckIdleState
     /tmp/ccNV7zic.s:680    .text.HAL_USART_MspInit:00000000 $t
     /tmp/ccNV7zic.s:685    .text.HAL_USART_MspInit:00000000 HAL_USART_MspInit
     /tmp/ccNV7zic.s:698    .text.HAL_USART_Init:00000000 $t
     /tmp/ccNV7zic.s:703    .text.HAL_USART_Init:00000000 HAL_USART_Init
     /tmp/ccNV7zic.s:784    .text.HAL_USART_MspDeInit:00000000 $t
     /tmp/ccNV7zic.s:789    .text.HAL_USART_MspDeInit:00000000 HAL_USART_MspDeInit
     /tmp/ccNV7zic.s:802    .text.HAL_USART_DeInit:00000000 $t
     /tmp/ccNV7zic.s:807    .text.HAL_USART_DeInit:00000000 HAL_USART_DeInit
     /tmp/ccNV7zic.s:866    .text.HAL_USART_Transmit:00000000 $t
     /tmp/ccNV7zic.s:871    .text.HAL_USART_Transmit:00000000 HAL_USART_Transmit
     /tmp/ccNV7zic.s:1030   .text.HAL_USART_Receive:00000000 $t
     /tmp/ccNV7zic.s:1035   .text.HAL_USART_Receive:00000000 HAL_USART_Receive
     /tmp/ccNV7zic.s:1251   .text.HAL_USART_TransmitReceive:00000000 $t
     /tmp/ccNV7zic.s:1256   .text.HAL_USART_TransmitReceive:00000000 HAL_USART_TransmitReceive
     /tmp/ccNV7zic.s:1517   .text.HAL_USART_Transmit_IT:00000000 $t
     /tmp/ccNV7zic.s:1522   .text.HAL_USART_Transmit_IT:00000000 HAL_USART_Transmit_IT
     /tmp/ccNV7zic.s:1592   .text.HAL_USART_Receive_IT:00000000 $t
     /tmp/ccNV7zic.s:1597   .text.HAL_USART_Receive_IT:00000000 HAL_USART_Receive_IT
     /tmp/ccNV7zic.s:1740   .text.HAL_USART_TransmitReceive_IT:00000000 $t
     /tmp/ccNV7zic.s:1745   .text.HAL_USART_TransmitReceive_IT:00000000 HAL_USART_TransmitReceive_IT
     /tmp/ccNV7zic.s:1904   .text.HAL_USART_Transmit_DMA:00000000 $t
     /tmp/ccNV7zic.s:1909   .text.HAL_USART_Transmit_DMA:00000000 HAL_USART_Transmit_DMA
     /tmp/ccNV7zic.s:2020   .text.HAL_USART_Transmit_DMA:00000088 $d
     /tmp/ccNV7zic.s:2639   .text.USART_DMATransmitCplt:00000000 USART_DMATransmitCplt
     /tmp/ccNV7zic.s:2757   .text.USART_DMATxHalfCplt:00000000 USART_DMATxHalfCplt
     /tmp/ccNV7zic.s:3272   .text.USART_DMAError:00000000 USART_DMAError
     /tmp/ccNV7zic.s:2027   .text.HAL_USART_Receive_DMA:00000000 $t
     /tmp/ccNV7zic.s:2032   .text.HAL_USART_Receive_DMA:00000000 HAL_USART_Receive_DMA
     /tmp/ccNV7zic.s:2183   .text.HAL_USART_Receive_DMA:000000c8 $d
     /tmp/ccNV7zic.s:2979   .text.USART_DMAReceiveCplt:00000000 USART_DMAReceiveCplt
     /tmp/ccNV7zic.s:2933   .text.USART_DMARxHalfCplt:00000000 USART_DMARxHalfCplt
     /tmp/ccNV7zic.s:2190   .text.HAL_USART_TransmitReceive_DMA:00000000 $t
     /tmp/ccNV7zic.s:2195   .text.HAL_USART_TransmitReceive_DMA:00000000 HAL_USART_TransmitReceive_DMA
     /tmp/ccNV7zic.s:2356   .text.HAL_USART_TransmitReceive_DMA:000000d4 $d
     /tmp/ccNV7zic.s:2365   .text.HAL_USART_DMAPause:00000000 $t
     /tmp/ccNV7zic.s:2370   .text.HAL_USART_DMAPause:00000000 HAL_USART_DMAPause
     /tmp/ccNV7zic.s:2448   .text.HAL_USART_DMAResume:00000000 $t
     /tmp/ccNV7zic.s:2453   .text.HAL_USART_DMAResume:00000000 HAL_USART_DMAResume
ARM GAS  /tmp/ccNV7zic.s 			page 110


     /tmp/ccNV7zic.s:2539   .text.HAL_USART_DMAStop:00000000 $t
     /tmp/ccNV7zic.s:2544   .text.HAL_USART_DMAStop:00000000 HAL_USART_DMAStop
     /tmp/ccNV7zic.s:2617   .text.HAL_USART_TxCpltCallback:00000000 $t
     /tmp/ccNV7zic.s:2622   .text.HAL_USART_TxCpltCallback:00000000 HAL_USART_TxCpltCallback
     /tmp/ccNV7zic.s:2635   .text.USART_DMATransmitCplt:00000000 $t
     /tmp/ccNV7zic.s:2696   .text.USART_EndTransmit_IT:00000000 $t
     /tmp/ccNV7zic.s:2700   .text.USART_EndTransmit_IT:00000000 USART_EndTransmit_IT
     /tmp/ccNV7zic.s:2735   .text.HAL_USART_TxHalfCpltCallback:00000000 $t
     /tmp/ccNV7zic.s:2740   .text.HAL_USART_TxHalfCpltCallback:00000000 HAL_USART_TxHalfCpltCallback
     /tmp/ccNV7zic.s:2753   .text.USART_DMATxHalfCplt:00000000 $t
     /tmp/ccNV7zic.s:2781   .text.HAL_USART_RxCpltCallback:00000000 $t
     /tmp/ccNV7zic.s:2786   .text.HAL_USART_RxCpltCallback:00000000 HAL_USART_RxCpltCallback
     /tmp/ccNV7zic.s:2799   .text.USART_Receive_IT:00000000 $t
     /tmp/ccNV7zic.s:2803   .text.USART_Receive_IT:00000000 USART_Receive_IT
     /tmp/ccNV7zic.s:2911   .text.HAL_USART_RxHalfCpltCallback:00000000 $t
     /tmp/ccNV7zic.s:2916   .text.HAL_USART_RxHalfCpltCallback:00000000 HAL_USART_RxHalfCpltCallback
     /tmp/ccNV7zic.s:2929   .text.USART_DMARxHalfCplt:00000000 $t
     /tmp/ccNV7zic.s:2957   .text.HAL_USART_TxRxCpltCallback:00000000 $t
     /tmp/ccNV7zic.s:2962   .text.HAL_USART_TxRxCpltCallback:00000000 HAL_USART_TxRxCpltCallback
     /tmp/ccNV7zic.s:2975   .text.USART_DMAReceiveCplt:00000000 $t
     /tmp/ccNV7zic.s:3069   .text.USART_TransmitReceive_IT:00000000 $t
     /tmp/ccNV7zic.s:3073   .text.USART_TransmitReceive_IT:00000000 USART_TransmitReceive_IT
     /tmp/ccNV7zic.s:3250   .text.HAL_USART_ErrorCallback:00000000 $t
     /tmp/ccNV7zic.s:3255   .text.HAL_USART_ErrorCallback:00000000 HAL_USART_ErrorCallback
     /tmp/ccNV7zic.s:3268   .text.USART_DMAError:00000000 $t
     /tmp/ccNV7zic.s:3338   .text.HAL_USART_IRQHandler:00000000 $t
     /tmp/ccNV7zic.s:3343   .text.HAL_USART_IRQHandler:00000000 HAL_USART_IRQHandler
     /tmp/ccNV7zic.s:3584   .text.HAL_USART_IRQHandler:00000158 $d
     /tmp/ccNV7zic.s:3593   .text.USART_DMAAbortOnError:00000000 USART_DMAAbortOnError
     /tmp/ccNV7zic.s:3589   .text.USART_DMAAbortOnError:00000000 $t
     /tmp/ccNV7zic.s:3621   .text.HAL_USART_GetState:00000000 $t
     /tmp/ccNV7zic.s:3626   .text.HAL_USART_GetState:00000000 HAL_USART_GetState
     /tmp/ccNV7zic.s:3642   .text.HAL_USART_GetError:00000000 $t
     /tmp/ccNV7zic.s:3647   .text.HAL_USART_GetError:00000000 HAL_USART_GetError
                     .debug_frame:00000010 $d
     /tmp/ccNV7zic.s:283    .text.USART_SetConfig:0000008f $d
     /tmp/ccNV7zic.s:283    .text.USART_SetConfig:00000090 $t
     /tmp/ccNV7zic.s:415    .text.USART_SetConfig:0000012d $d
     /tmp/ccNV7zic.s:415    .text.USART_SetConfig:0000012e $t

UNDEFINED SYMBOLS
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetSysClockFreq
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
