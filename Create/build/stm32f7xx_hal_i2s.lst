ARM GAS  /tmp/cczIJhh6.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_i2s.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.I2S_GetClockFreq,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	I2S_GetClockFreq:
  26              	.LFB158:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_i2s.c"
   1:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_i2s.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @file    stm32f7xx_hal_i2s.c
   4:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief   I2S HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *          functionalities of the Integrated Interchip Sound (I2S) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *           + IO operation functions
  10:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *           + Peripheral State and Errors functions
  11:HALLIB/Src/stm32f7xx_hal_i2s.c ****   @verbatim
  12:HALLIB/Src/stm32f7xx_hal_i2s.c ****  ===============================================================================
  13:HALLIB/Src/stm32f7xx_hal_i2s.c ****                   ##### How to use this driver #####
  14:HALLIB/Src/stm32f7xx_hal_i2s.c ****  ===============================================================================
  15:HALLIB/Src/stm32f7xx_hal_i2s.c ****  [..]
  16:HALLIB/Src/stm32f7xx_hal_i2s.c ****     The I2S HAL driver can be used as follows:
  17:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
  18:HALLIB/Src/stm32f7xx_hal_i2s.c ****     (#) Declare a I2S_HandleTypeDef handle structure.
  19:HALLIB/Src/stm32f7xx_hal_i2s.c ****     (#) Initialize the I2S low level resources by implement the HAL_I2S_MspInit() API:
  20:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (##) Enable the SPIx interface clock.                      
  21:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (##) I2S pins configuration:
  22:HALLIB/Src/stm32f7xx_hal_i2s.c ****             (+++) Enable the clock for the I2S GPIOs.
  23:HALLIB/Src/stm32f7xx_hal_i2s.c ****             (+++) Configure these I2S pins as alternate function pull-up.
  24:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_I2S_Transmit_IT()
  25:HALLIB/Src/stm32f7xx_hal_i2s.c ****              and HAL_I2S_Receive_IT() APIs).
  26:HALLIB/Src/stm32f7xx_hal_i2s.c ****             (+++) Configure the I2Sx interrupt priority.
  27:HALLIB/Src/stm32f7xx_hal_i2s.c ****             (+++) Enable the NVIC I2S IRQ handle.
  28:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (##) DMA Configuration if you need to use DMA process (HAL_I2S_Transmit_DMA()
  29:HALLIB/Src/stm32f7xx_hal_i2s.c ****              and HAL_I2S_Receive_DMA() APIs:
  30:HALLIB/Src/stm32f7xx_hal_i2s.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  31:HALLIB/Src/stm32f7xx_hal_i2s.c ****             (+++) Enable the DMAx interface clock.
ARM GAS  /tmp/cczIJhh6.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_i2s.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.  
  33:HALLIB/Src/stm32f7xx_hal_i2s.c ****             (+++) Configure the DMA Tx/Rx Channel.
  34:HALLIB/Src/stm32f7xx_hal_i2s.c ****             (+++) Associate the initialized DMA handle to the I2S DMA Tx/Rx handle.
  35:HALLIB/Src/stm32f7xx_hal_i2s.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  36:HALLIB/Src/stm32f7xx_hal_i2s.c ****                 DMA Tx/Rx Channel.
  37:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
  38:HALLIB/Src/stm32f7xx_hal_i2s.c ****    (#) Program the Mode, Standard, Data Format, MCLK Output, Audio frequency and Polarity
  39:HALLIB/Src/stm32f7xx_hal_i2s.c ****        using HAL_I2S_Init() function.
  40:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
  41:HALLIB/Src/stm32f7xx_hal_i2s.c ****    -@- The specific I2S interrupts (Transmission complete interrupt, 
  42:HALLIB/Src/stm32f7xx_hal_i2s.c ****        RXNE interrupt and Error Interrupts) will be managed using the macros
  43:HALLIB/Src/stm32f7xx_hal_i2s.c ****        __HAL_I2S_ENABLE_IT() and __HAL_I2S_DISABLE_IT() inside the transmit and receive process.
  44:HALLIB/Src/stm32f7xx_hal_i2s.c ****    -@- Make sure that either:
  45:HALLIB/Src/stm32f7xx_hal_i2s.c ****        (+@) I2S clock is configured based on SYSCLK or 
  46:HALLIB/Src/stm32f7xx_hal_i2s.c ****        (+@) External clock source is configured after setting correctly 
  47:HALLIB/Src/stm32f7xx_hal_i2s.c ****             the define constant EXTERNAL_CLOCK_VALUE in the stm32f3xx_hal_conf.h file. 
  48:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
  49:HALLIB/Src/stm32f7xx_hal_i2s.c ****    (#) Three mode of operations are available within this driver :     
  50:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
  51:HALLIB/Src/stm32f7xx_hal_i2s.c ****    *** Polling mode IO operation ***
  52:HALLIB/Src/stm32f7xx_hal_i2s.c ****    =================================
  53:HALLIB/Src/stm32f7xx_hal_i2s.c ****    [..]    
  54:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) Send an amount of data in blocking mode using HAL_I2S_Transmit() 
  55:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) Receive an amount of data in blocking mode using HAL_I2S_Receive()
  56:HALLIB/Src/stm32f7xx_hal_i2s.c ****    
  57:HALLIB/Src/stm32f7xx_hal_i2s.c ****    *** Interrupt mode IO operation ***    
  58:HALLIB/Src/stm32f7xx_hal_i2s.c ****    ===================================
  59:HALLIB/Src/stm32f7xx_hal_i2s.c ****    [..]    
  60:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) Send an amount of data in non blocking mode using HAL_I2S_Transmit_IT() 
  61:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) At transmission end of half transfer HAL_I2S_TxHalfCpltCallback is executed and user can 
  62:HALLIB/Src/stm32f7xx_hal_i2s.c ****          add his own code by customization of function pointer HAL_I2S_TxHalfCpltCallback 
  63:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) At transmission end of transfer HAL_I2S_TxCpltCallback is executed and user can 
  64:HALLIB/Src/stm32f7xx_hal_i2s.c ****          add his own code by customization of function pointer HAL_I2S_TxCpltCallback
  65:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) Receive an amount of data in non blocking mode using HAL_I2S_Receive_IT() 
  66:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) At reception end of half transfer HAL_I2S_RxHalfCpltCallback is executed and user can 
  67:HALLIB/Src/stm32f7xx_hal_i2s.c ****          add his own code by customization of function pointer HAL_I2S_RxHalfCpltCallback 
  68:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) At reception end of transfer HAL_I2S_RxCpltCallback is executed and user can 
  69:HALLIB/Src/stm32f7xx_hal_i2s.c ****          add his own code by customization of function pointer HAL_I2S_RxCpltCallback              
  70:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) In case of transfer Error, HAL_I2S_ErrorCallback() function is executed and user can 
  71:HALLIB/Src/stm32f7xx_hal_i2s.c ****          add his own code by customization of function pointer HAL_I2S_ErrorCallback
  72:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
  73:HALLIB/Src/stm32f7xx_hal_i2s.c ****    *** DMA mode IO operation ***    
  74:HALLIB/Src/stm32f7xx_hal_i2s.c ****    ==============================
  75:HALLIB/Src/stm32f7xx_hal_i2s.c ****    [..] 
  76:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) Send an amount of data in non blocking mode (DMA) using HAL_I2S_Transmit_DMA() 
  77:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) At transmission end of half transfer HAL_I2S_TxHalfCpltCallback is executed and user can 
  78:HALLIB/Src/stm32f7xx_hal_i2s.c ****          add his own code by customization of function pointer HAL_I2S_TxHalfCpltCallback 
  79:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) At transmission end of transfer HAL_I2S_TxCpltCallback is executed and user can 
  80:HALLIB/Src/stm32f7xx_hal_i2s.c ****          add his own code by customization of function pointer HAL_I2S_TxCpltCallback
  81:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) Receive an amount of data in non blocking mode (DMA) using HAL_I2S_Receive_DMA() 
  82:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) At reception end of half transfer HAL_I2S_RxHalfCpltCallback is executed and user can 
  83:HALLIB/Src/stm32f7xx_hal_i2s.c ****          add his own code by customization of function pointer HAL_I2S_RxHalfCpltCallback 
  84:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) At reception end of transfer HAL_I2S_RxCpltCallback is executed and user can 
  85:HALLIB/Src/stm32f7xx_hal_i2s.c ****          add his own code by customization of function pointer HAL_I2S_RxCpltCallback              
  86:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) In case of transfer Error, HAL_I2S_ErrorCallback() function is executed and user can 
  87:HALLIB/Src/stm32f7xx_hal_i2s.c ****          add his own code by customization of function pointer HAL_I2S_ErrorCallback
  88:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) Pause the DMA Transfer using HAL_I2S_DMAPause()      
ARM GAS  /tmp/cczIJhh6.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) Resume the DMA Transfer using HAL_I2S_DMAResume()  
  90:HALLIB/Src/stm32f7xx_hal_i2s.c ****      (+) Stop the DMA Transfer using HAL_I2S_DMAStop()      
  91:HALLIB/Src/stm32f7xx_hal_i2s.c ****    
  92:HALLIB/Src/stm32f7xx_hal_i2s.c ****    *** I2S HAL driver macros list ***
  93:HALLIB/Src/stm32f7xx_hal_i2s.c ****    ============================================= 
  94:HALLIB/Src/stm32f7xx_hal_i2s.c ****    [..]
  95:HALLIB/Src/stm32f7xx_hal_i2s.c ****      Below the list of most used macros in I2S HAL driver.
  96:HALLIB/Src/stm32f7xx_hal_i2s.c ****        
  97:HALLIB/Src/stm32f7xx_hal_i2s.c ****       (+) __HAL_I2S_ENABLE: Enable the specified SPI peripheral (in I2S mode) 
  98:HALLIB/Src/stm32f7xx_hal_i2s.c ****       (+) __HAL_I2S_DISABLE: Disable the specified SPI peripheral (in I2S mode)    
  99:HALLIB/Src/stm32f7xx_hal_i2s.c ****       (+) __HAL_I2S_ENABLE_IT : Enable the specified I2S interrupts
 100:HALLIB/Src/stm32f7xx_hal_i2s.c ****       (+) __HAL_I2S_DISABLE_IT : Disable the specified I2S interrupts
 101:HALLIB/Src/stm32f7xx_hal_i2s.c ****       (+) __HAL_I2S_GET_FLAG: Check whether the specified I2S flag is set or not
 102:HALLIB/Src/stm32f7xx_hal_i2s.c ****       
 103:HALLIB/Src/stm32f7xx_hal_i2s.c ****     [..]  
 104:HALLIB/Src/stm32f7xx_hal_i2s.c ****       (@) You can refer to the I2S HAL driver header file for more useful macros
 105:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 106:HALLIB/Src/stm32f7xx_hal_i2s.c ****   @endverbatim
 107:HALLIB/Src/stm32f7xx_hal_i2s.c ****   ******************************************************************************
 108:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @attention
 109:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *
 110:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 111:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *
 112:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * Redistribution and use in source and binary forms, with or without modification,
 113:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * are permitted provided that the following conditions are met:
 114:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 115:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *      this list of conditions and the following disclaimer.
 116:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 117:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *      this list of conditions and the following disclaimer in the documentation
 118:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *      and/or other materials provided with the distribution.
 119:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 120:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *      may be used to endorse or promote products derived from this software
 121:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *      without specific prior written permission.
 122:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *
 123:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 124:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 125:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 126:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 127:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 128:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 129:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 130:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 131:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 132:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 133:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *
 134:HALLIB/Src/stm32f7xx_hal_i2s.c ****   ******************************************************************************
 135:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */ 
 136:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 137:HALLIB/Src/stm32f7xx_hal_i2s.c **** /* Includes ------------------------------------------------------------------*/
 138:HALLIB/Src/stm32f7xx_hal_i2s.c **** #include "stm32f7xx_hal.h"
 139:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 140:HALLIB/Src/stm32f7xx_hal_i2s.c **** /** @addtogroup STM32F7xx_HAL_Driver
 141:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @{
 142:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 143:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 144:HALLIB/Src/stm32f7xx_hal_i2s.c **** /** @defgroup I2S I2S
 145:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief I2S HAL module driver
ARM GAS  /tmp/cczIJhh6.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @{
 147:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 148:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 149:HALLIB/Src/stm32f7xx_hal_i2s.c **** #ifdef HAL_I2S_MODULE_ENABLED
 150:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 151:HALLIB/Src/stm32f7xx_hal_i2s.c **** /* Private typedef -----------------------------------------------------------*/
 152:HALLIB/Src/stm32f7xx_hal_i2s.c **** /* Private define ------------------------------------------------------------*/
 153:HALLIB/Src/stm32f7xx_hal_i2s.c **** /* Private macro -------------------------------------------------------------*/
 154:HALLIB/Src/stm32f7xx_hal_i2s.c **** /* Private variables ---------------------------------------------------------*/
 155:HALLIB/Src/stm32f7xx_hal_i2s.c **** /* Private function prototypes -----------------------------------------------*/
 156:HALLIB/Src/stm32f7xx_hal_i2s.c **** /** @defgroup I2S_Private_Functions I2S Private Functions
 157:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @{
 158:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 159:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma);
 160:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 161:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma);
 162:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 163:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_DMAError(DMA_HandleTypeDef *hdma);
 164:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s);
 165:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s);
 166:HALLIB/Src/stm32f7xx_hal_i2s.c **** static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s);
 167:HALLIB/Src/stm32f7xx_hal_i2s.c **** static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, uint
 168:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 169:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @}
 170:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 171:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 172:HALLIB/Src/stm32f7xx_hal_i2s.c **** /* Exported functions ---------------------------------------------------------*/
 173:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 174:HALLIB/Src/stm32f7xx_hal_i2s.c **** /** @defgroup I2S_Exported_Functions I2S Exported Functions
 175:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @{
 176:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 177:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 178:HALLIB/Src/stm32f7xx_hal_i2s.c **** /** @defgroup  I2S_Exported_Functions_Group1 Initialization and de-initialization functions 
 179:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *  @brief    Initialization and Configuration functions 
 180:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *
 181:HALLIB/Src/stm32f7xx_hal_i2s.c **** @verbatim    
 182:HALLIB/Src/stm32f7xx_hal_i2s.c ****  ===============================================================================
 183:HALLIB/Src/stm32f7xx_hal_i2s.c ****               ##### Initialization and de-initialization functions #####
 184:HALLIB/Src/stm32f7xx_hal_i2s.c ****  ===============================================================================
 185:HALLIB/Src/stm32f7xx_hal_i2s.c ****     [..]  This subsection provides a set of functions allowing to initialize and 
 186:HALLIB/Src/stm32f7xx_hal_i2s.c ****           de-initialize the I2Sx peripheral in simplex mode:
 187:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 188:HALLIB/Src/stm32f7xx_hal_i2s.c ****       (+) User must Implement HAL_I2S_MspInit() function in which he configures 
 189:HALLIB/Src/stm32f7xx_hal_i2s.c ****           all related peripherals resources (CLOCK, GPIO, DMA, IT and NVIC ).
 190:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 191:HALLIB/Src/stm32f7xx_hal_i2s.c ****       (+) Call the function HAL_I2S_Init() to configure the selected device with 
 192:HALLIB/Src/stm32f7xx_hal_i2s.c ****           the selected configuration:
 193:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) Mode
 194:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) Standard 
 195:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) Data Format
 196:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) MCLK Output
 197:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) Audio frequency
 198:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) Polarity
 199:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) Full duplex mode
 200:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 201:HALLIB/Src/stm32f7xx_hal_i2s.c ****       (+) Call the function HAL_I2S_DeInit() to restore the default configuration 
 202:HALLIB/Src/stm32f7xx_hal_i2s.c ****           of the selected I2Sx peripheral. 
ARM GAS  /tmp/cczIJhh6.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_i2s.c **** @endverbatim
 204:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @{
 205:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 206:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 207:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 208:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Initializes the I2S according to the specified parameters 
 209:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         in the I2S_InitTypeDef and create the associated handle.
 210:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 211:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 212:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
 213:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 214:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
 215:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 216:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 217:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t tmp = 0, i2sclk = 0;
 218:HALLIB/Src/stm32f7xx_hal_i2s.c ****  
 219:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Check the I2S handle allocation */
 220:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s == NULL)
 221:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 222:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_ERROR;
 223:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 224:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 225:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Check the parameters */
 226:HALLIB/Src/stm32f7xx_hal_i2s.c ****   assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 227:HALLIB/Src/stm32f7xx_hal_i2s.c ****   assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 228:HALLIB/Src/stm32f7xx_hal_i2s.c ****   assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 229:HALLIB/Src/stm32f7xx_hal_i2s.c ****   assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 230:HALLIB/Src/stm32f7xx_hal_i2s.c ****   assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 231:HALLIB/Src/stm32f7xx_hal_i2s.c ****   assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 232:HALLIB/Src/stm32f7xx_hal_i2s.c ****   assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));  
 233:HALLIB/Src/stm32f7xx_hal_i2s.c ****   assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 234:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 235:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_RESET)
 236:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 237:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Allocate lock resource and initialize it */
 238:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->Lock = HAL_UNLOCKED;
 239:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 240:HALLIB/Src/stm32f7xx_hal_i2s.c ****     HAL_I2S_MspInit(hi2s);
 241:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 242:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 243:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->State = HAL_I2S_STATE_BUSY;
 244:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 245:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 246:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 247:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->Instance->I2SCFGR &= ~(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 248:HALLIB/Src/stm32f7xx_hal_i2s.c ****                                SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
 249:HALLIB/Src/stm32f7xx_hal_i2s.c ****                                SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD); 
 250:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->Instance->I2SPR = 0x0002;
 251:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 252:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Get the I2SCFGR register value */
 253:HALLIB/Src/stm32f7xx_hal_i2s.c ****   tmpreg = hi2s->Instance->I2SCFGR;
 254:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 255:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 256:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->Init.AudioFreq == I2S_AUDIOFREQ_DEFAULT)
 257:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 258:HALLIB/Src/stm32f7xx_hal_i2s.c ****     i2sodd = (uint16_t)0;
 259:HALLIB/Src/stm32f7xx_hal_i2s.c ****     i2sdiv = (uint16_t)2;   
ARM GAS  /tmp/cczIJhh6.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 261:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 262:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else
 263:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 264:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 265:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 266:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 267:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Packet length is 16 bits */
 268:HALLIB/Src/stm32f7xx_hal_i2s.c ****       packetlength = 1;
 269:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 270:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
 271:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 272:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Packet length is 32 bits */
 273:HALLIB/Src/stm32f7xx_hal_i2s.c ****       packetlength = 2;
 274:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 275:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 276:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Get I2S source Clock frequency  ****************************************/
 277:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 278:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* If an external I2S clock has to be used, the specific define should be set  
 279:HALLIB/Src/stm32f7xx_hal_i2s.c ****     in the project configuration or in the stm32f3xx_conf.h file */
 280:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 281:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {    
 282:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Set the I2S clock to the external clock  value */
 283:HALLIB/Src/stm32f7xx_hal_i2s.c ****       i2sclk = EXTERNAL_CLOCK_VALUE;
 284:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 285:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
 286:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 287:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Get the I2S source clock value */
 288:HALLIB/Src/stm32f7xx_hal_i2s.c **** 			i2sclk = I2S_GetClockFreq(hi2s);
 289:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 290:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 291:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 292:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 293:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 294:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* MCLK output is enabled */
 295:HALLIB/Src/stm32f7xx_hal_i2s.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / hi2s->Init.AudioFreq)) + 5);
 296:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 297:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
 298:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 299:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* MCLK output is disabled */
 300:HALLIB/Src/stm32f7xx_hal_i2s.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / hi2s->Init.AudioFreq)) + 5);
 301:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 302:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 303:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Remove the flatting point */
 304:HALLIB/Src/stm32f7xx_hal_i2s.c ****     tmp = tmp / 10;  
 305:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 306:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Check the parity of the divider */
 307:HALLIB/Src/stm32f7xx_hal_i2s.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 308:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 309:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Compute the i2sdiv prescaler */
 310:HALLIB/Src/stm32f7xx_hal_i2s.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 311:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 312:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 313:HALLIB/Src/stm32f7xx_hal_i2s.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 314:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 315:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 316:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
ARM GAS  /tmp/cczIJhh6.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if((i2sdiv < 2) || (i2sdiv > 0xFF))
 318:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 319:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Set the default values */
 320:HALLIB/Src/stm32f7xx_hal_i2s.c ****     i2sdiv = 2;
 321:HALLIB/Src/stm32f7xx_hal_i2s.c ****     i2sodd = 0;
 322:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 323:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 324:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Write to SPIx I2SPR register the computed value */
 325:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->Instance->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)hi2s->Init.MC
 326:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 327:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Configure the I2S with the I2S_InitStruct values */
 328:HALLIB/Src/stm32f7xx_hal_i2s.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 329:HALLIB/Src/stm32f7xx_hal_i2s.c ****                        (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 330:HALLIB/Src/stm32f7xx_hal_i2s.c ****                        (uint16_t)hi2s->Init.CPOL))));
 331:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 332:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Write to SPIx I2SCFGR */  
 333:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->Instance->I2SCFGR = tmpreg;    
 334:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 335:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 336:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->State= HAL_I2S_STATE_READY;
 337:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 338:HALLIB/Src/stm32f7xx_hal_i2s.c ****   return HAL_OK;
 339:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 340:HALLIB/Src/stm32f7xx_hal_i2s.c ****            
 341:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 342:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief DeInitializes the I2S peripheral 
 343:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 344:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 345:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
 346:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 347:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
 348:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 349:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Check the I2S handle allocation */
 350:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s == NULL)
 351:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 352:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_ERROR;
 353:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 354:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 355:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Check the parameters */
 356:HALLIB/Src/stm32f7xx_hal_i2s.c ****   assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 357:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 358:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->State = HAL_I2S_STATE_BUSY;
 359:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 360:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
 361:HALLIB/Src/stm32f7xx_hal_i2s.c ****   HAL_I2S_MspDeInit(hi2s);
 362:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 363:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 364:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->State = HAL_I2S_STATE_RESET;
 365:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 366:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Release Lock */
 367:HALLIB/Src/stm32f7xx_hal_i2s.c ****   __HAL_UNLOCK(hi2s);
 368:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 369:HALLIB/Src/stm32f7xx_hal_i2s.c ****   return HAL_OK;
 370:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 371:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 372:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 373:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief I2S MSP Init
ARM GAS  /tmp/cczIJhh6.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 375:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 376:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
 377:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 378:HALLIB/Src/stm32f7xx_hal_i2s.c ****  __weak void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)
 379:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 380:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
 381:HALLIB/Src/stm32f7xx_hal_i2s.c ****   UNUSED(hi2s);
 382:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 383:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 384:HALLIB/Src/stm32f7xx_hal_i2s.c ****             the HAL_I2S_MspInit could be implemented in the user file
 385:HALLIB/Src/stm32f7xx_hal_i2s.c ****    */ 
 386:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 387:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 388:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 389:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief I2S MSP DeInit
 390:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 391:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 392:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
 393:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 394:HALLIB/Src/stm32f7xx_hal_i2s.c ****  __weak void HAL_I2S_MspDeInit(I2S_HandleTypeDef *hi2s)
 395:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 396:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
 397:HALLIB/Src/stm32f7xx_hal_i2s.c ****   UNUSED(hi2s);
 398:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 399:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 400:HALLIB/Src/stm32f7xx_hal_i2s.c ****             the HAL_I2S_MspDeInit could be implemented in the user file
 401:HALLIB/Src/stm32f7xx_hal_i2s.c ****    */ 
 402:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 403:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 404:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 405:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @}
 406:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 407:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 408:HALLIB/Src/stm32f7xx_hal_i2s.c **** /** @defgroup I2S_Exported_Functions_Group2 Input and Output operation functions 
 409:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *  @brief Data transfers functions 
 410:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *
 411:HALLIB/Src/stm32f7xx_hal_i2s.c **** @verbatim   
 412:HALLIB/Src/stm32f7xx_hal_i2s.c ****  ===============================================================================
 413:HALLIB/Src/stm32f7xx_hal_i2s.c ****                       ##### IO operation functions #####
 414:HALLIB/Src/stm32f7xx_hal_i2s.c ****  ===============================================================================  
 415:HALLIB/Src/stm32f7xx_hal_i2s.c ****     [..]
 416:HALLIB/Src/stm32f7xx_hal_i2s.c ****     This subsection provides a set of functions allowing to manage the I2S data 
 417:HALLIB/Src/stm32f7xx_hal_i2s.c ****     transfers.
 418:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 419:HALLIB/Src/stm32f7xx_hal_i2s.c ****     (#) There are two modes of transfer:
 420:HALLIB/Src/stm32f7xx_hal_i2s.c ****        (++) Blocking mode : The communication is performed in the polling mode. 
 421:HALLIB/Src/stm32f7xx_hal_i2s.c ****             The status of all data processing is returned by the same function 
 422:HALLIB/Src/stm32f7xx_hal_i2s.c ****             after finishing transfer.  
 423:HALLIB/Src/stm32f7xx_hal_i2s.c ****        (++) No-Blocking mode : The communication is performed using Interrupts 
 424:HALLIB/Src/stm32f7xx_hal_i2s.c ****             or DMA. These functions return the status of the transfer startup.
 425:HALLIB/Src/stm32f7xx_hal_i2s.c ****             The end of the data processing will be indicated through the 
 426:HALLIB/Src/stm32f7xx_hal_i2s.c ****             dedicated I2S IRQ when using Interrupt mode or the DMA IRQ when 
 427:HALLIB/Src/stm32f7xx_hal_i2s.c ****             using DMA mode.
 428:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 429:HALLIB/Src/stm32f7xx_hal_i2s.c ****     (#) Blocking mode functions are :
 430:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) HAL_I2S_Transmit()
ARM GAS  /tmp/cczIJhh6.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) HAL_I2S_Receive()
 432:HALLIB/Src/stm32f7xx_hal_i2s.c ****         
 433:HALLIB/Src/stm32f7xx_hal_i2s.c ****     (#) No-Blocking mode functions with Interrupt are :
 434:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) HAL_I2S_Transmit_IT()
 435:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) HAL_I2S_Receive_IT()
 436:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 437:HALLIB/Src/stm32f7xx_hal_i2s.c ****     (#) No-Blocking mode functions with DMA are :
 438:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) HAL_I2S_Transmit_DMA()
 439:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) HAL_I2S_Receive_DMA()
 440:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 441:HALLIB/Src/stm32f7xx_hal_i2s.c ****     (#) A set of Transfer Complete Callbacks are provided in non Blocking mode:
 442:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) HAL_I2S_TxCpltCallback()
 443:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) HAL_I2S_RxCpltCallback()
 444:HALLIB/Src/stm32f7xx_hal_i2s.c ****         (++) HAL_I2S_ErrorCallback()
 445:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 446:HALLIB/Src/stm32f7xx_hal_i2s.c **** @endverbatim
 447:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @{
 448:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 449:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 450:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 451:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Transmit an amount of data in blocking mode
 452:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 453:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 454:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param pData a 16-bit pointer to data buffer.
 455:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param Size number of data sample to be sent:
 456:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
 457:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       configuration phase, the Size parameter means the number of 16-bit data length 
 458:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       in the transaction and when a 24-bit data frame or a 32-bit data frame is selected 
 459:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       the Size parameter means the number of 16-bit data length. 
 460:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  Timeout Timeout duration
 461:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization 
 462:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       between Master and Slave(example: audio streaming).
 463:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
 464:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 465:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_
 466:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 467:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if((pData == NULL ) || (Size == 0)) 
 468:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 469:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return  HAL_ERROR;                                    
 470:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 471:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 472:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_READY)
 473:HALLIB/Src/stm32f7xx_hal_i2s.c ****   { 
 474:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)
 475:HALLIB/Src/stm32f7xx_hal_i2s.c ****        ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B)
 476:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 477:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferSize = (Size << 1);
 478:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = (Size << 1);
 479:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 480:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
 481:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 482:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferSize = Size;
 483:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = Size;
 484:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 485:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 486:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Locked */
 487:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_LOCK(hi2s);
ARM GAS  /tmp/cczIJhh6.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 489:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 490:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_TX;
 491:HALLIB/Src/stm32f7xx_hal_i2s.c ****    
 492:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Check if the I2S is already enabled */ 
 493:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 494:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 495:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Enable I2S peripheral */    
 496:HALLIB/Src/stm32f7xx_hal_i2s.c ****       __HAL_I2S_ENABLE(hi2s);
 497:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 498:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 499:HALLIB/Src/stm32f7xx_hal_i2s.c ****     while(hi2s->TxXferCount > 0)
 500:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 501:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->Instance->DR = (*pData++);
 502:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount--;   
 503:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Wait until TXE flag is set */
 504:HALLIB/Src/stm32f7xx_hal_i2s.c ****       if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 505:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 506:HALLIB/Src/stm32f7xx_hal_i2s.c ****         /* Set the error code and execute error callback*/
 507:HALLIB/Src/stm32f7xx_hal_i2s.c ****         hi2s->ErrorCode |= HAL_I2S_ERROR_TIMEOUT;
 508:HALLIB/Src/stm32f7xx_hal_i2s.c ****         HAL_I2S_ErrorCallback(hi2s);
 509:HALLIB/Src/stm32f7xx_hal_i2s.c ****         return HAL_TIMEOUT;
 510:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 511:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 512:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Check if an underrun occurs */
 513:HALLIB/Src/stm32f7xx_hal_i2s.c ****       if(__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET) 
 514:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 515:HALLIB/Src/stm32f7xx_hal_i2s.c ****         /* Set the I2S State ready */
 516:HALLIB/Src/stm32f7xx_hal_i2s.c ****         hi2s->State = HAL_I2S_STATE_READY; 
 517:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 518:HALLIB/Src/stm32f7xx_hal_i2s.c ****         /* Process Unlocked */
 519:HALLIB/Src/stm32f7xx_hal_i2s.c ****         __HAL_UNLOCK(hi2s);
 520:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 521:HALLIB/Src/stm32f7xx_hal_i2s.c ****         /* Set the error code and execute error callback*/
 522:HALLIB/Src/stm32f7xx_hal_i2s.c ****         hi2s->ErrorCode |= HAL_I2S_ERROR_UDR;
 523:HALLIB/Src/stm32f7xx_hal_i2s.c ****         HAL_I2S_ErrorCallback(hi2s);
 524:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 525:HALLIB/Src/stm32f7xx_hal_i2s.c ****         return HAL_ERROR;
 526:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 527:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }      
 528:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 529:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Check if Slave mode is selected */
 530:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX) || ((hi2s->Instance->I
 531:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 532:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Wait until Busy flag is reset */
 533:HALLIB/Src/stm32f7xx_hal_i2s.c ****       if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, SET, Timeout) != HAL_OK) 
 534:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 535:HALLIB/Src/stm32f7xx_hal_i2s.c ****         /* Set the error code and execute error callback*/
 536:HALLIB/Src/stm32f7xx_hal_i2s.c ****         hi2s->ErrorCode |= HAL_I2S_ERROR_TIMEOUT;
 537:HALLIB/Src/stm32f7xx_hal_i2s.c ****         HAL_I2S_ErrorCallback(hi2s);
 538:HALLIB/Src/stm32f7xx_hal_i2s.c ****         return HAL_TIMEOUT;
 539:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 540:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 541:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 542:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_READY; 
 543:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 544:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Unlocked */
ARM GAS  /tmp/cczIJhh6.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_UNLOCK(hi2s);
 546:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 547:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_OK;
 548:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 549:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else
 550:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 551:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_BUSY;
 552:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 553:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 554:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 555:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 556:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Receive an amount of data in blocking mode 
 557:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 558:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 559:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param pData a 16-bit pointer to data buffer.
 560:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param Size number of data sample to be sent:
 561:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
 562:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       configuration phase, the Size parameter means the number of 16-bit data length 
 563:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       in the transaction and when a 24-bit data frame or a 32-bit data frame is selected 
 564:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       the Size parameter means the number of 16-bit data length. 
 565:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param Timeout Timeout duration
 566:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization 
 567:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       between Master and Slave(example: audio streaming).
 568:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note In I2S Master Receiver mode, just after enabling the peripheral the clock will be generat
 569:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       in continuous way and as the I2S is not disabled at the end of the I2S transaction.
 570:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
 571:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 572:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t
 573:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 574:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if((pData == NULL ) || (Size == 0)) 
 575:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 576:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return  HAL_ERROR;                                    
 577:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 578:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 579:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_READY)
 580:HALLIB/Src/stm32f7xx_hal_i2s.c ****   { 
 581:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)
 582:HALLIB/Src/stm32f7xx_hal_i2s.c ****        ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B)
 583:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 584:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferSize = (Size << 1);
 585:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = (Size << 1);
 586:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 587:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
 588:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 589:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferSize = Size;
 590:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = Size;
 591:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 592:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Locked */
 593:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_LOCK(hi2s);
 594:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 595:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 596:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_RX;
 597:HALLIB/Src/stm32f7xx_hal_i2s.c ****         
 598:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Check if the I2S is already enabled */ 
 599:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 600:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 601:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Enable I2S peripheral */    
ARM GAS  /tmp/cczIJhh6.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_i2s.c ****       __HAL_I2S_ENABLE(hi2s);
 603:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 604:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 605:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Check if Master Receiver mode is selected */
 606:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 607:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 608:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
 609:HALLIB/Src/stm32f7xx_hal_i2s.c ****       access to the SPI_SR register. */ 
 610:HALLIB/Src/stm32f7xx_hal_i2s.c ****       __HAL_I2S_CLEAR_OVRFLAG(hi2s);        
 611:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 612:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 613:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Receive data */
 614:HALLIB/Src/stm32f7xx_hal_i2s.c ****     while(hi2s->RxXferCount > 0)
 615:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 616:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Wait until RXNE flag is set */
 617:HALLIB/Src/stm32f7xx_hal_i2s.c ****       if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK) 
 618:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 619:HALLIB/Src/stm32f7xx_hal_i2s.c ****         /* Set the error code and execute error callback*/
 620:HALLIB/Src/stm32f7xx_hal_i2s.c ****         hi2s->ErrorCode |= HAL_I2S_ERROR_TIMEOUT;
 621:HALLIB/Src/stm32f7xx_hal_i2s.c ****         HAL_I2S_ErrorCallback(hi2s);
 622:HALLIB/Src/stm32f7xx_hal_i2s.c ****         return HAL_TIMEOUT;
 623:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 624:HALLIB/Src/stm32f7xx_hal_i2s.c ****       
 625:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Check if an overrun occurs */
 626:HALLIB/Src/stm32f7xx_hal_i2s.c ****       if(__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET) 
 627:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 628:HALLIB/Src/stm32f7xx_hal_i2s.c ****         /* Set the I2S State ready */
 629:HALLIB/Src/stm32f7xx_hal_i2s.c ****         hi2s->State = HAL_I2S_STATE_READY; 
 630:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 631:HALLIB/Src/stm32f7xx_hal_i2s.c ****         /* Process Unlocked */
 632:HALLIB/Src/stm32f7xx_hal_i2s.c ****         __HAL_UNLOCK(hi2s);
 633:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 634:HALLIB/Src/stm32f7xx_hal_i2s.c ****         /* Set the error code and execute error callback*/
 635:HALLIB/Src/stm32f7xx_hal_i2s.c ****         hi2s->ErrorCode |= HAL_I2S_ERROR_OVR;
 636:HALLIB/Src/stm32f7xx_hal_i2s.c ****         HAL_I2S_ErrorCallback(hi2s);
 637:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 638:HALLIB/Src/stm32f7xx_hal_i2s.c ****         return HAL_ERROR;
 639:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 640:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 641:HALLIB/Src/stm32f7xx_hal_i2s.c ****       (*pData++) = hi2s->Instance->DR;
 642:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount--;
 643:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }      
 644:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 645:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_READY; 
 646:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 647:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Unlocked */
 648:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_UNLOCK(hi2s);
 649:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 650:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_OK;
 651:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 652:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else
 653:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 654:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_BUSY;
 655:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 656:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 657:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 658:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
ARM GAS  /tmp/cczIJhh6.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Transmit an amount of data in non-blocking mode with Interrupt
 660:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 661:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 662:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param pData a 16-bit pointer to data buffer.
 663:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param Size number of data sample to be sent:
 664:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
 665:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       configuration phase, the Size parameter means the number of 16-bit data length 
 666:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       in the transaction and when a 24-bit data frame or a 32-bit data frame is selected 
 667:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       the Size parameter means the number of 16-bit data length. 
 668:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization 
 669:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       between Master and Slave(example: audio streaming).
 670:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
 671:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 672:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
 673:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 674:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_READY)
 675:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 676:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if((pData == NULL) || (Size == 0)) 
 677:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 678:HALLIB/Src/stm32f7xx_hal_i2s.c ****       return  HAL_ERROR;                                    
 679:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 680:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 681:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->pTxBuffPtr = pData;
 682:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)
 683:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 684:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 685:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferSize = (Size << 1);
 686:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = (Size << 1);
 687:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
 688:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
 689:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 690:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferSize = Size;
 691:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = Size;
 692:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 693:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 694:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Locked */
 695:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_LOCK(hi2s);
 696:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 697:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 698:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_TX;
 699:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 700:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Enable TXE and ERR interrupt */
 701:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 702:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 703:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Check if the I2S is already enabled */ 
 704:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 705:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 706:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Enable I2S peripheral */    
 707:HALLIB/Src/stm32f7xx_hal_i2s.c ****       __HAL_I2S_ENABLE(hi2s);
 708:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 709:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 710:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Unlocked */
 711:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_UNLOCK(hi2s);
 712:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 713:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_OK;
 714:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 715:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else
ARM GAS  /tmp/cczIJhh6.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 717:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_BUSY;
 718:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 719:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 720:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 721:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 722:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Receive an amount of data in non-blocking mode with Interrupt
 723:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 724:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 725:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param pData a 16-bit pointer to the Receive data buffer.
 726:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param Size number of data sample to be sent:
 727:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
 728:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       configuration phase, the Size parameter means the number of 16-bit data length 
 729:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       in the transaction and when a 24-bit data frame or a 32-bit data frame is selected 
 730:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       the Size parameter means the number of 16-bit data length. 
 731:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization 
 732:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       between Master and Slave(example: audio streaming).
 733:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note It is recommended to use DMA for the I2S receiver to avoid de-synchronisation 
 734:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * between Master and Slave otherwise the I2S interrupt should be optimized. 
 735:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
 736:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 737:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_StatusTypeDef HAL_I2S_Receive_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
 738:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 739:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_READY)
 740:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 741:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if((pData == NULL) || (Size == 0)) 
 742:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 743:HALLIB/Src/stm32f7xx_hal_i2s.c ****       return  HAL_ERROR;                                    
 744:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 745:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 746:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->pRxBuffPtr = pData;
 747:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)
 748:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 749:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 750:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferSize = (Size << 1);
 751:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = (Size << 1);
 752:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
 753:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
 754:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 755:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferSize = Size;
 756:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = Size;
 757:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 758:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Locked */
 759:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_LOCK(hi2s);
 760:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 761:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 762:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_RX;
 763:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 764:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Enable TXE and ERR interrupt */
 765:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 766:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 767:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Check if the I2S is already enabled */ 
 768:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 769:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 770:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Enable I2S peripheral */    
 771:HALLIB/Src/stm32f7xx_hal_i2s.c ****       __HAL_I2S_ENABLE(hi2s);
 772:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
ARM GAS  /tmp/cczIJhh6.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 774:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Unlocked */
 775:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_UNLOCK(hi2s);
 776:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 777:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_OK;
 778:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 779:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else
 780:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 781:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_BUSY; 
 782:HALLIB/Src/stm32f7xx_hal_i2s.c ****   } 
 783:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 784:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 785:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 786:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Transmit an amount of data in non-blocking mode with DMA
 787:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 788:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 789:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param pData a 16-bit pointer to the Transmit data buffer.
 790:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param Size number of data sample to be sent:
 791:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
 792:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       configuration phase, the Size parameter means the number of 16-bit data length 
 793:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       in the transaction and when a 24-bit data frame or a 32-bit data frame is selected 
 794:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       the Size parameter means the number of 16-bit data length. 
 795:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization 
 796:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       between Master and Slave(example: audio streaming).
 797:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
 798:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 799:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
 800:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 801:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t *tmp;
 802:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 803:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if((pData == NULL) || (Size == 0)) 
 804:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 805:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return  HAL_ERROR;                                    
 806:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 807:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 808:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_READY)
 809:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {  
 810:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->pTxBuffPtr = pData;
 811:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)
 812:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 813:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 814:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferSize = (Size << 1);
 815:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = (Size << 1);
 816:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
 817:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
 818:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 819:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferSize = Size;
 820:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = Size;
 821:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
 822:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 823:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Locked */
 824:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_LOCK(hi2s);
 825:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 826:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 827:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_TX;
 828:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 829:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Set the I2S Tx DMA Half transfer complete callback */
ARM GAS  /tmp/cczIJhh6.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 831:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 832:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Set the I2S TxDMA transfer complete callback */
 833:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 834:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 835:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Set the DMA error callback */
 836:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 837:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 838:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Enable the Tx DMA Channel */
 839:HALLIB/Src/stm32f7xx_hal_i2s.c ****     tmp = (uint32_t*)&pData;
 840:HALLIB/Src/stm32f7xx_hal_i2s.c ****     HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t*)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize
 841:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 842:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Check if the I2S is already enabled */ 
 843:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 844:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 845:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Enable I2S peripheral */    
 846:HALLIB/Src/stm32f7xx_hal_i2s.c ****       __HAL_I2S_ENABLE(hi2s);
 847:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 848:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 849:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Enable Tx DMA Request */  
 850:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->Instance->CR2 |= SPI_CR2_TXDMAEN;
 851:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 852:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Unlocked */
 853:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_UNLOCK(hi2s);
 854:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 855:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_OK;
 856:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 857:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else
 858:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 859:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_BUSY;
 860:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 861:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 862:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 863:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 864:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Receive an amount of data in non-blocking mode with DMA 
 865:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 866:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 867:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param pData a 16-bit pointer to the Receive data buffer.
 868:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param Size number of data sample to be sent:
 869:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
 870:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       configuration phase, the Size parameter means the number of 16-bit data length 
 871:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       in the transaction and when a 24-bit data frame or a 32-bit data frame is selected 
 872:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       the Size parameter means the number of 16-bit data length. 
 873:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization 
 874:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *       between Master and Slave(example: audio streaming).
 875:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
 876:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 877:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
 878:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 879:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t *tmp;
 880:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 881:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if((pData == NULL) || (Size == 0)) 
 882:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 883:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return  HAL_ERROR;                                    
 884:HALLIB/Src/stm32f7xx_hal_i2s.c ****   } 
 885:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 886:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_READY)
ARM GAS  /tmp/cczIJhh6.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {    
 888:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->pRxBuffPtr = pData;
 889:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)
 890:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 891:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 892:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferSize = (Size << 1);
 893:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = (Size << 1);
 894:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
 895:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
 896:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 897:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferSize = Size;
 898:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = Size;
 899:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 900:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Locked */
 901:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_LOCK(hi2s);
 902:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 903:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 904:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_RX;
 905:HALLIB/Src/stm32f7xx_hal_i2s.c ****    
 906:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Set the I2S Rx DMA Half transfer complete callback */
 907:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 908:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 909:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Set the I2S Rx DMA transfer complete callback */
 910:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 911:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 912:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Set the DMA error callback */
 913:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 914:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 915:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Check if Master Receiver mode is selected */
 916:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 917:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 918:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
 919:HALLIB/Src/stm32f7xx_hal_i2s.c ****       access to the SPI_SR register. */ 
 920:HALLIB/Src/stm32f7xx_hal_i2s.c ****       __HAL_I2S_CLEAR_OVRFLAG(hi2s);        
 921:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 922:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 923:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Enable the Rx DMA Channel */
 924:HALLIB/Src/stm32f7xx_hal_i2s.c ****     tmp = (uint32_t*)&pData;        
 925:HALLIB/Src/stm32f7xx_hal_i2s.c ****     HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t*)tmp, hi2s->RxXferSize
 926:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 927:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Check if the I2S is already enabled */ 
 928:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 929:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 930:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Enable I2S peripheral */    
 931:HALLIB/Src/stm32f7xx_hal_i2s.c ****       __HAL_I2S_ENABLE(hi2s);
 932:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 933:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 934:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Enable Rx DMA Request */  
 935:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->Instance->CR2 |= SPI_CR2_RXDMAEN;
 936:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 937:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Process Unlocked */
 938:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_UNLOCK(hi2s);
 939:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 940:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_OK;
 941:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 942:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else
 943:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
ARM GAS  /tmp/cczIJhh6.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_i2s.c ****     return HAL_BUSY;
 945:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 946:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 947:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 948:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 949:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Pauses the audio stream playing from the Media.
 950:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 951:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 952:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
 953:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 954:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
 955:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 956:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Process Locked */
 957:HALLIB/Src/stm32f7xx_hal_i2s.c ****   __HAL_LOCK(hi2s);
 958:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 959:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 960:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 961:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Disable the I2S DMA Tx request */
 962:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
 963:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 964:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 965:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 966:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Disable the I2S DMA Rx request */
 967:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
 968:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 969:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 970:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 971:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if((hi2s->Init.Mode == I2S_MODE_SLAVE_TX)||(hi2s->Init.Mode == I2S_MODE_MASTER_TX))
 972:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 973:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Disable the I2S DMA Tx request */
 974:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
 975:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 976:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
 977:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 978:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Disable the I2S DMA Rx request */
 979:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
 980:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 981:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 982:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 983:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Process Unlocked */
 984:HALLIB/Src/stm32f7xx_hal_i2s.c ****   __HAL_UNLOCK(hi2s);
 985:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 986:HALLIB/Src/stm32f7xx_hal_i2s.c ****   return HAL_OK; 
 987:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 988:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 989:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 990:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Resumes the audio stream playing from the Media.
 991:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 992:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
 993:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
 994:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
 995:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
 996:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 997:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Process Locked */
 998:HALLIB/Src/stm32f7xx_hal_i2s.c ****   __HAL_LOCK(hi2s);
 999:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1000:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
ARM GAS  /tmp/cczIJhh6.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
1002:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Enable the I2S DMA Tx request */
1003:HALLIB/Src/stm32f7xx_hal_i2s.c ****     SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
1004:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1005:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
1006:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
1007:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Enable the I2S DMA Rx request */
1008:HALLIB/Src/stm32f7xx_hal_i2s.c ****     SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
1009:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1010:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1011:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* If the I2S peripheral is still not enabled, enable it */
1012:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
1013:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
1014:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Enable I2S peripheral */    
1015:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_I2S_ENABLE(hi2s);
1016:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1017:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1018:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Process Unlocked */
1019:HALLIB/Src/stm32f7xx_hal_i2s.c ****   __HAL_UNLOCK(hi2s);
1020:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1021:HALLIB/Src/stm32f7xx_hal_i2s.c ****   return HAL_OK;
1022:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1023:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1024:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1025:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Stops the audio stream playing from the Media.
1026:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1027:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
1028:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
1029:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1030:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
1031:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1032:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Process Locked */
1033:HALLIB/Src/stm32f7xx_hal_i2s.c ****   __HAL_LOCK(hi2s);
1034:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1035:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Disable the I2S Tx/Rx DMA requests */
1036:HALLIB/Src/stm32f7xx_hal_i2s.c ****   CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
1037:HALLIB/Src/stm32f7xx_hal_i2s.c ****   CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
1038:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1039:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Abort the I2S DMA Channel tx */
1040:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->hdmatx != NULL)
1041:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
1042:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Disable the I2S DMA channel */
1043:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_DMA_DISABLE(hi2s->hdmatx);
1044:HALLIB/Src/stm32f7xx_hal_i2s.c ****     HAL_DMA_Abort(hi2s->hdmatx);
1045:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1046:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Abort the I2S DMA Channel rx */
1047:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->hdmarx != NULL)
1048:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
1049:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Disable the I2S DMA channel */
1050:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_DMA_DISABLE(hi2s->hdmarx);
1051:HALLIB/Src/stm32f7xx_hal_i2s.c ****     HAL_DMA_Abort(hi2s->hdmarx);
1052:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1053:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1054:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Disable I2S peripheral */
1055:HALLIB/Src/stm32f7xx_hal_i2s.c ****   __HAL_I2S_DISABLE(hi2s);
1056:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1057:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->State = HAL_I2S_STATE_READY;
ARM GAS  /tmp/cczIJhh6.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1059:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Process Unlocked */
1060:HALLIB/Src/stm32f7xx_hal_i2s.c ****   __HAL_UNLOCK(hi2s);
1061:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1062:HALLIB/Src/stm32f7xx_hal_i2s.c ****   return HAL_OK;
1063:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1064:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1065:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1066:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief  This function handles I2S interrupt request.
1067:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1068:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
1069:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
1070:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1071:HALLIB/Src/stm32f7xx_hal_i2s.c **** void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
1072:HALLIB/Src/stm32f7xx_hal_i2s.c **** {  
1073:HALLIB/Src/stm32f7xx_hal_i2s.c ****   __IO uint32_t i2ssr = hi2s->Instance->SR;
1074:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1075:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
1076:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {  
1077:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* I2S in mode Receiver ----------------------------------------------------*/
1078:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) !=
1079:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1080:HALLIB/Src/stm32f7xx_hal_i2s.c ****       I2S_Receive_IT(hi2s);
1081:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
1082:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1083:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* I2S Overrun error interrupt occurred -------------------------------------*/
1084:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RE
1085:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1086:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Disable RXNE and ERR interrupt */
1087:HALLIB/Src/stm32f7xx_hal_i2s.c ****       __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
1088:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1089:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Set the I2S State ready */
1090:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->State = HAL_I2S_STATE_READY; 
1091:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1092:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Set the error code and execute error callback*/
1093:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->ErrorCode |= HAL_I2S_ERROR_OVR;
1094:HALLIB/Src/stm32f7xx_hal_i2s.c ****       HAL_I2S_ErrorCallback(hi2s);
1095:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
1096:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1097:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
1098:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {  
1099:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* I2S in mode Transmitter ---------------------------------------------------*/
1100:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RE
1101:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {     
1102:HALLIB/Src/stm32f7xx_hal_i2s.c ****       I2S_Transmit_IT(hi2s);
1103:HALLIB/Src/stm32f7xx_hal_i2s.c ****     } 
1104:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
1105:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* I2S Underrun error interrupt occurred ------------------------------------*/
1106:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RE
1107:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1108:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Disable TXE and ERR interrupt */
1109:HALLIB/Src/stm32f7xx_hal_i2s.c ****       __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
1110:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1111:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Set the I2S State ready */
1112:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->State = HAL_I2S_STATE_READY; 
1113:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1114:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Set the error code and execute error callback*/
ARM GAS  /tmp/cczIJhh6.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->ErrorCode |= HAL_I2S_ERROR_UDR;
1116:HALLIB/Src/stm32f7xx_hal_i2s.c ****       HAL_I2S_ErrorCallback(hi2s);
1117:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
1118:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1119:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1120:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1121:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1122:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @}
1123:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1124:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1125:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1126:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @}
1127:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1128:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1129:HALLIB/Src/stm32f7xx_hal_i2s.c **** /** @addtogroup I2S_Private_Functions I2S Private Functions
1130:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @{
1131:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1132:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1133:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief This function handles I2S Communication Timeout.
1134:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1135:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
1136:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param Flag Flag checked
1137:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param State Value of the flag expected
1138:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param Timeout Duration of the timeout
1139:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL status
1140:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1141:HALLIB/Src/stm32f7xx_hal_i2s.c **** static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, 
1142:HALLIB/Src/stm32f7xx_hal_i2s.c ****                                                        uint32_t State, uint32_t Timeout)
1143:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1144:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t tickstart = 0;
1145:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1146:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Get tick */
1147:HALLIB/Src/stm32f7xx_hal_i2s.c ****   tickstart = HAL_GetTick();
1148:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1149:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Wait until flag is set */
1150:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(State == RESET)
1151:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
1152:HALLIB/Src/stm32f7xx_hal_i2s.c ****     while(__HAL_I2S_GET_FLAG(hi2s, Flag) == RESET)
1153:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1154:HALLIB/Src/stm32f7xx_hal_i2s.c ****       if(Timeout != HAL_MAX_DELAY)
1155:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
1156:HALLIB/Src/stm32f7xx_hal_i2s.c ****         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
1157:HALLIB/Src/stm32f7xx_hal_i2s.c ****         {
1158:HALLIB/Src/stm32f7xx_hal_i2s.c ****           /* Set the I2S State ready */
1159:HALLIB/Src/stm32f7xx_hal_i2s.c ****           hi2s->State= HAL_I2S_STATE_READY;
1160:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1161:HALLIB/Src/stm32f7xx_hal_i2s.c ****           /* Process Unlocked */
1162:HALLIB/Src/stm32f7xx_hal_i2s.c ****           __HAL_UNLOCK(hi2s);
1163:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1164:HALLIB/Src/stm32f7xx_hal_i2s.c ****           return HAL_TIMEOUT;
1165:HALLIB/Src/stm32f7xx_hal_i2s.c ****         }
1166:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
1167:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
1168:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1169:HALLIB/Src/stm32f7xx_hal_i2s.c ****   else
1170:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
1171:HALLIB/Src/stm32f7xx_hal_i2s.c ****     while(__HAL_I2S_GET_FLAG(hi2s, Flag) != RESET)
ARM GAS  /tmp/cczIJhh6.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1173:HALLIB/Src/stm32f7xx_hal_i2s.c ****       if(Timeout != HAL_MAX_DELAY)
1174:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
1175:HALLIB/Src/stm32f7xx_hal_i2s.c ****         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
1176:HALLIB/Src/stm32f7xx_hal_i2s.c ****         {
1177:HALLIB/Src/stm32f7xx_hal_i2s.c ****           /* Set the I2S State ready */
1178:HALLIB/Src/stm32f7xx_hal_i2s.c ****           hi2s->State= HAL_I2S_STATE_READY;
1179:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1180:HALLIB/Src/stm32f7xx_hal_i2s.c ****           /* Process Unlocked */
1181:HALLIB/Src/stm32f7xx_hal_i2s.c ****           __HAL_UNLOCK(hi2s);
1182:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1183:HALLIB/Src/stm32f7xx_hal_i2s.c ****           return HAL_TIMEOUT;
1184:HALLIB/Src/stm32f7xx_hal_i2s.c ****         }
1185:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
1186:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
1187:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1188:HALLIB/Src/stm32f7xx_hal_i2s.c ****   return HAL_OK;    
1189:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1190:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1191:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @}
1192:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1193:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1194:HALLIB/Src/stm32f7xx_hal_i2s.c **** /** @addtogroup I2S_Exported_Functions I2S Exported Functions
1195:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @{
1196:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1197:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1198:HALLIB/Src/stm32f7xx_hal_i2s.c **** /** @addtogroup  I2S_Exported_Functions_Group2 Input and Output operation functions 
1199:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @{
1200:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1201:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1202:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Tx Transfer Half completed callbacks
1203:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1204:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
1205:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1206:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1207:HALLIB/Src/stm32f7xx_hal_i2s.c ****  __weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
1208:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1209:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
1210:HALLIB/Src/stm32f7xx_hal_i2s.c ****   UNUSED(hi2s);
1211:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1212:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1213:HALLIB/Src/stm32f7xx_hal_i2s.c ****             the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
1214:HALLIB/Src/stm32f7xx_hal_i2s.c ****    */ 
1215:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1216:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1217:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1218:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Tx Transfer completed callbacks
1219:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1220:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
1221:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1222:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1223:HALLIB/Src/stm32f7xx_hal_i2s.c ****  __weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
1224:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1225:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
1226:HALLIB/Src/stm32f7xx_hal_i2s.c ****   UNUSED(hi2s);
1227:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1228:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
ARM GAS  /tmp/cczIJhh6.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_i2s.c ****             the HAL_I2S_TxCpltCallback could be implemented in the user file
1230:HALLIB/Src/stm32f7xx_hal_i2s.c ****    */ 
1231:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1232:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1233:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1234:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Rx Transfer half completed callbacks
1235:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1236:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
1237:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1238:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1239:HALLIB/Src/stm32f7xx_hal_i2s.c **** __weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
1240:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1241:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
1242:HALLIB/Src/stm32f7xx_hal_i2s.c ****   UNUSED(hi2s);
1243:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1244:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1245:HALLIB/Src/stm32f7xx_hal_i2s.c ****             the HAL_I2S_RxCpltCallback could be implemented in the user file
1246:HALLIB/Src/stm32f7xx_hal_i2s.c ****    */
1247:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1248:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1249:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1250:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Rx Transfer completed callbacks
1251:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1252:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
1253:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1254:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1255:HALLIB/Src/stm32f7xx_hal_i2s.c **** __weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
1256:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1257:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
1258:HALLIB/Src/stm32f7xx_hal_i2s.c ****   UNUSED(hi2s);
1259:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1260:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1261:HALLIB/Src/stm32f7xx_hal_i2s.c ****             the HAL_I2S_RxCpltCallback could be implemented in the user file
1262:HALLIB/Src/stm32f7xx_hal_i2s.c ****    */
1263:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1264:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1265:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1266:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief I2S error callbacks
1267:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1268:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
1269:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1270:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1271:HALLIB/Src/stm32f7xx_hal_i2s.c ****  __weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
1272:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1273:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
1274:HALLIB/Src/stm32f7xx_hal_i2s.c ****   UNUSED(hi2s);
1275:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1276:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1277:HALLIB/Src/stm32f7xx_hal_i2s.c ****             the HAL_I2S_ErrorCallback could be implemented in the user file
1278:HALLIB/Src/stm32f7xx_hal_i2s.c ****    */ 
1279:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1280:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1281:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1282:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @}
1283:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1284:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1285:HALLIB/Src/stm32f7xx_hal_i2s.c **** /** @defgroup I2S_Exported_Functions_Group3 Peripheral State and Errors functions 
ARM GAS  /tmp/cczIJhh6.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *  @brief   Peripheral State functions 
1287:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *
1288:HALLIB/Src/stm32f7xx_hal_i2s.c **** @verbatim   
1289:HALLIB/Src/stm32f7xx_hal_i2s.c ****  ===============================================================================
1290:HALLIB/Src/stm32f7xx_hal_i2s.c ****                       ##### Peripheral State and Errors functions #####
1291:HALLIB/Src/stm32f7xx_hal_i2s.c ****  ===============================================================================  
1292:HALLIB/Src/stm32f7xx_hal_i2s.c ****     [..]
1293:HALLIB/Src/stm32f7xx_hal_i2s.c ****     This subsection permits to get in run-time the status of the peripheral 
1294:HALLIB/Src/stm32f7xx_hal_i2s.c ****     and the data flow.
1295:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1296:HALLIB/Src/stm32f7xx_hal_i2s.c **** @endverbatim
1297:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @{
1298:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1299:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1300:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1301:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief  Return the I2S state
1302:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1303:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
1304:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval HAL state
1305:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1306:HALLIB/Src/stm32f7xx_hal_i2s.c **** HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
1307:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1308:HALLIB/Src/stm32f7xx_hal_i2s.c ****   return hi2s->State;
1309:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1310:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1311:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1312:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief  Return the I2S error code
1313:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1314:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
1315:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval I2S Error Code
1316:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1317:HALLIB/Src/stm32f7xx_hal_i2s.c **** uint32_t HAL_I2S_GetError(I2S_HandleTypeDef *hi2s)
1318:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1319:HALLIB/Src/stm32f7xx_hal_i2s.c ****   return hi2s->ErrorCode;
1320:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1321:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1322:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @}
1323:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */  
1324:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1325:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1326:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @}
1327:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1328:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1329:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /**
1330:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief  Get I2S Input Clock based on I2S source clock selection
1331:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1332:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *               the configuration information for I2S module.   
1333:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval I2S Clock Input 
1334:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1335:HALLIB/Src/stm32f7xx_hal_i2s.c **** static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)   
1336:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
  28              		.loc 1 1336 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
ARM GAS  /tmp/cczIJhh6.s 			page 25


1337:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t tmpreg = 0;
1338:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* This variable used to store the VCO Input (value in Hz) */
1339:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t vcoinput = 0;
1340:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* This variable used to store the I2S_CK_x (value in Hz) */
1341:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t i2sclocksource = 0;
1342:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1343:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Configure I2S Clock based on I2S source clock selection */ 
1344:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1345:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
1346:HALLIB/Src/stm32f7xx_hal_i2s.c ****   switch(hi2s->Init.ClockSource)
  34              		.loc 1 1346 0
  35 0000 C369     		ldr	r3, [r0, #28]
  36 0002 012B     		cmp	r3, #1
  37 0004 25D0     		beq	.L7
  38 0006 022B     		cmp	r3, #2
  39 0008 01D0     		beq	.L4
1341:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
  40              		.loc 1 1341 0
  41 000a 0020     		movs	r0, #0
  42              	.LVL1:
  43 000c 7047     		bx	lr
  44              	.LVL2:
  45              	.L4:
1347:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
1348:HALLIB/Src/stm32f7xx_hal_i2s.c ****     case I2S_CLOCK_PLL :
1349:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1350:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Configure the PLLI2S division factor */
1351:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */ 
1352:HALLIB/Src/stm32f7xx_hal_i2s.c ****       if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
  46              		.loc 1 1352 0
  47 000e 124B     		ldr	r3, .L8
  48 0010 5B68     		ldr	r3, [r3, #4]
  49 0012 13F4800F 		tst	r3, #4194304
  50 0016 07D1     		bne	.L5
1353:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
1354:HALLIB/Src/stm32f7xx_hal_i2s.c ****         /* In Case the PLL Source is HSI (Internal Clock) */
1355:HALLIB/Src/stm32f7xx_hal_i2s.c ****         vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
  51              		.loc 1 1355 0
  52 0018 0F4B     		ldr	r3, .L8
  53 001a 5868     		ldr	r0, [r3, #4]
  54              	.LVL3:
  55 001c 00F03F00 		and	r0, r0, #63
  56 0020 0E4B     		ldr	r3, .L8+4
  57 0022 B3FBF0F0 		udiv	r0, r3, r0
  58              	.LVL4:
  59 0026 06E0     		b	.L6
  60              	.LVL5:
  61              	.L5:
1356:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
1357:HALLIB/Src/stm32f7xx_hal_i2s.c ****       else
1358:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
1359:HALLIB/Src/stm32f7xx_hal_i2s.c ****         /* In Case the PLL Source is HSE (External Clock) */
1360:HALLIB/Src/stm32f7xx_hal_i2s.c ****         vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
  62              		.loc 1 1360 0
  63 0028 0B4B     		ldr	r3, .L8
  64 002a 5868     		ldr	r0, [r3, #4]
  65              	.LVL6:
ARM GAS  /tmp/cczIJhh6.s 			page 26


  66 002c 00F03F00 		and	r0, r0, #63
  67 0030 0B4B     		ldr	r3, .L8+8
  68 0032 B3FBF0F0 		udiv	r0, r3, r0
  69              	.LVL7:
  70              	.L6:
1361:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
1362:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1363:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1364:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
1365:HALLIB/Src/stm32f7xx_hal_i2s.c ****       tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28;
  71              		.loc 1 1365 0
  72 0036 084B     		ldr	r3, .L8
  73 0038 D3F88420 		ldr	r2, [r3, #132]
  74 003c C2F30272 		ubfx	r2, r2, #28, #3
  75              	.LVL8:
1366:HALLIB/Src/stm32f7xx_hal_i2s.c ****       i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
  76              		.loc 1 1366 0
  77 0040 D3F88430 		ldr	r3, [r3, #132]
  78 0044 C3F38813 		ubfx	r3, r3, #6, #9
  79 0048 03FB00F3 		mul	r3, r3, r0
  80 004c B3FBF2F0 		udiv	r0, r3, r2
  81              	.LVL9:
1367:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
1368:HALLIB/Src/stm32f7xx_hal_i2s.c ****       break;
  82              		.loc 1 1368 0
  83 0050 7047     		bx	lr
  84              	.LVL10:
  85              	.L7:
1369:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
1370:HALLIB/Src/stm32f7xx_hal_i2s.c ****     case I2S_CLOCK_EXTERNAL :
1371:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1372:HALLIB/Src/stm32f7xx_hal_i2s.c ****       i2sclocksource = EXTERNAL_CLOCK_VALUE;
  86              		.loc 1 1372 0
  87 0052 0448     		ldr	r0, .L8+12
  88              	.LVL11:
1373:HALLIB/Src/stm32f7xx_hal_i2s.c ****       break;
1374:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
1375:HALLIB/Src/stm32f7xx_hal_i2s.c ****     default :
1376:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1377:HALLIB/Src/stm32f7xx_hal_i2s.c ****       break;
1378:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
1379:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1380:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1381:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* the return result is the value of I2S clock */
1382:HALLIB/Src/stm32f7xx_hal_i2s.c ****   return i2sclocksource; 
1383:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
  89              		.loc 1 1383 0
  90 0054 7047     		bx	lr
  91              	.L9:
  92 0056 00BF     		.align	2
  93              	.L8:
  94 0058 00380240 		.word	1073887232
  95 005c 0024F400 		.word	16000000
  96 0060 00127A00 		.word	8000000
  97 0064 0080BB00 		.word	12288000
  98              		.cfi_endproc
  99              	.LFE158:
ARM GAS  /tmp/cczIJhh6.s 			page 27


 101              		.section	.text.I2S_WaitFlagStateUntilTimeout,"ax",%progbits
 102              		.align	2
 103              		.thumb
 104              		.thumb_func
 106              	I2S_WaitFlagStateUntilTimeout:
 107              	.LFB150:
1143:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t tickstart = 0;
 108              		.loc 1 1143 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              	.LVL12:
 113 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 114              	.LCFI0:
 115              		.cfi_def_cfa_offset 24
 116              		.cfi_offset 4, -24
 117              		.cfi_offset 5, -20
 118              		.cfi_offset 6, -16
 119              		.cfi_offset 7, -12
 120              		.cfi_offset 8, -8
 121              		.cfi_offset 14, -4
 122 0004 0546     		mov	r5, r0
 123 0006 0E46     		mov	r6, r1
 124 0008 9046     		mov	r8, r2
 125 000a 1C46     		mov	r4, r3
 126              	.LVL13:
1147:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 127              		.loc 1 1147 0
 128 000c FFF7FEFF 		bl	HAL_GetTick
 129              	.LVL14:
 130 0010 0746     		mov	r7, r0
 131              	.LVL15:
1150:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 132              		.loc 1 1150 0
 133 0012 B8F1000F 		cmp	r8, #0
 134 0016 12D0     		beq	.L13
 135 0018 2BE0     		b	.L17
 136              	.LVL16:
 137              	.L16:
1154:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 138              		.loc 1 1154 0
 139 001a B4F1FF3F 		cmp	r4, #-1
 140 001e 0ED0     		beq	.L13
1156:HALLIB/Src/stm32f7xx_hal_i2s.c ****         {
 141              		.loc 1 1156 0
 142 0020 24B1     		cbz	r4, .L14
1156:HALLIB/Src/stm32f7xx_hal_i2s.c ****         {
 143              		.loc 1 1156 0 is_stmt 0 discriminator 1
 144 0022 FFF7FEFF 		bl	HAL_GetTick
 145              	.LVL17:
 146 0026 C01B     		subs	r0, r0, r7
 147 0028 8442     		cmp	r4, r0
 148 002a 08D2     		bcs	.L13
 149              	.L14:
1159:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 150              		.loc 1 1159 0 is_stmt 1
 151 002c 0123     		movs	r3, #1
ARM GAS  /tmp/cczIJhh6.s 			page 28


 152 002e 85F83930 		strb	r3, [r5, #57]
1162:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 153              		.loc 1 1162 0
 154 0032 0023     		movs	r3, #0
 155 0034 85F83830 		strb	r3, [r5, #56]
1164:HALLIB/Src/stm32f7xx_hal_i2s.c ****         }
 156              		.loc 1 1164 0
 157 0038 0320     		movs	r0, #3
 158 003a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 159              	.LVL18:
 160              	.L13:
1152:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 161              		.loc 1 1152 0
 162 003e 2B68     		ldr	r3, [r5]
 163 0040 9B68     		ldr	r3, [r3, #8]
 164 0042 36EA0303 		bics	r3, r6, r3
 165 0046 E8D1     		bne	.L16
1188:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 166              		.loc 1 1188 0
 167 0048 0020     		movs	r0, #0
 168 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 169              	.LVL19:
 170              	.L19:
1173:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 171              		.loc 1 1173 0
 172 004e B4F1FF3F 		cmp	r4, #-1
 173 0052 0ED0     		beq	.L17
1175:HALLIB/Src/stm32f7xx_hal_i2s.c ****         {
 174              		.loc 1 1175 0
 175 0054 24B1     		cbz	r4, .L18
1175:HALLIB/Src/stm32f7xx_hal_i2s.c ****         {
 176              		.loc 1 1175 0 is_stmt 0 discriminator 1
 177 0056 FFF7FEFF 		bl	HAL_GetTick
 178              	.LVL20:
 179 005a C01B     		subs	r0, r0, r7
 180 005c 8442     		cmp	r4, r0
 181 005e 08D2     		bcs	.L17
 182              	.L18:
1178:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 183              		.loc 1 1178 0 is_stmt 1
 184 0060 0123     		movs	r3, #1
 185 0062 85F83930 		strb	r3, [r5, #57]
1181:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 186              		.loc 1 1181 0
 187 0066 0023     		movs	r3, #0
 188 0068 85F83830 		strb	r3, [r5, #56]
1183:HALLIB/Src/stm32f7xx_hal_i2s.c ****         }
 189              		.loc 1 1183 0
 190 006c 0320     		movs	r0, #3
 191 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 192              	.LVL21:
 193              	.L17:
1171:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 194              		.loc 1 1171 0
 195 0072 2B68     		ldr	r3, [r5]
 196 0074 9B68     		ldr	r3, [r3, #8]
 197 0076 36EA0303 		bics	r3, r6, r3
ARM GAS  /tmp/cczIJhh6.s 			page 29


 198 007a E8D0     		beq	.L19
1188:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 199              		.loc 1 1188 0
 200 007c 0020     		movs	r0, #0
1189:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 201              		.loc 1 1189 0
 202 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 203              		.cfi_endproc
 204              	.LFE150:
 206 0082 00BF     		.section	.text.HAL_I2S_MspInit,"ax",%progbits
 207              		.align	2
 208              		.weak	HAL_I2S_MspInit
 209              		.thumb
 210              		.thumb_func
 212              	HAL_I2S_MspInit:
 213              	.LFB138:
 379:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
 214              		.loc 1 379 0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              		@ link register save eliminated.
 219              	.LVL22:
 220 0000 7047     		bx	lr
 221              		.cfi_endproc
 222              	.LFE138:
 224 0002 00BF     		.section	.text.HAL_I2S_Init,"ax",%progbits
 225              		.align	2
 226              		.global	HAL_I2S_Init
 227              		.thumb
 228              		.thumb_func
 230              	HAL_I2S_Init:
 231              	.LFB136:
 215:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 232              		.loc 1 215 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              	.LVL23:
 220:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 237              		.loc 1 220 0
 238 0000 0028     		cmp	r0, #0
 239 0002 6FD0     		beq	.L31
 215:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 240              		.loc 1 215 0
 241 0004 70B5     		push	{r4, r5, r6, lr}
 242              	.LCFI1:
 243              		.cfi_def_cfa_offset 16
 244              		.cfi_offset 4, -16
 245              		.cfi_offset 5, -12
 246              		.cfi_offset 6, -8
 247              		.cfi_offset 14, -4
 248 0006 0446     		mov	r4, r0
 235:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 249              		.loc 1 235 0
 250 0008 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 251 000c 13F0FF0F 		tst	r3, #255
ARM GAS  /tmp/cczIJhh6.s 			page 30


 252 0010 04D1     		bne	.L24
 238:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 253              		.loc 1 238 0
 254 0012 0023     		movs	r3, #0
 255 0014 80F83830 		strb	r3, [r0, #56]
 240:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 256              		.loc 1 240 0
 257 0018 FFF7FEFF 		bl	HAL_I2S_MspInit
 258              	.LVL24:
 259              	.L24:
 243:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 260              		.loc 1 243 0
 261 001c 0222     		movs	r2, #2
 262 001e 84F83920 		strb	r2, [r4, #57]
 247:HALLIB/Src/stm32f7xx_hal_i2s.c ****                                SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
 263              		.loc 1 247 0
 264 0022 2168     		ldr	r1, [r4]
 265 0024 C869     		ldr	r0, [r1, #28]
 266 0026 304B     		ldr	r3, .L38
 267 0028 0340     		ands	r3, r3, r0
 268 002a CB61     		str	r3, [r1, #28]
 250:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 269              		.loc 1 250 0
 270 002c 2368     		ldr	r3, [r4]
 271 002e 1A62     		str	r2, [r3, #32]
 253:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 272              		.loc 1 253 0
 273 0030 2368     		ldr	r3, [r4]
 274 0032 DD69     		ldr	r5, [r3, #28]
 275 0034 ADB2     		uxth	r5, r5
 276              	.LVL25:
 256:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 277              		.loc 1 256 0
 278 0036 6369     		ldr	r3, [r4, #20]
 279 0038 9342     		cmp	r3, r2
 280 003a 31D0     		beq	.L32
 265:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 281              		.loc 1 265 0
 282 003c E368     		ldr	r3, [r4, #12]
 283 003e 0BB9     		cbnz	r3, .L33
 268:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 284              		.loc 1 268 0
 285 0040 0126     		movs	r6, #1
 286 0042 00E0     		b	.L26
 287              	.L33:
 273:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 288              		.loc 1 273 0
 289 0044 0226     		movs	r6, #2
 290              	.L26:
 291              	.LVL26:
 280:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {    
 292              		.loc 1 280 0
 293 0046 E369     		ldr	r3, [r4, #28]
 294 0048 012B     		cmp	r3, #1
 295 004a 03D0     		beq	.L34
 288:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 296              		.loc 1 288 0
ARM GAS  /tmp/cczIJhh6.s 			page 31


 297 004c 2046     		mov	r0, r4
 298 004e FFF7FEFF 		bl	I2S_GetClockFreq
 299              	.LVL27:
 300 0052 00E0     		b	.L27
 301              	.LVL28:
 302              	.L34:
 283:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 303              		.loc 1 283 0
 304 0054 2548     		ldr	r0, .L38+4
 305              	.LVL29:
 306              	.L27:
 292:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 307              		.loc 1 292 0
 308 0056 2369     		ldr	r3, [r4, #16]
 309 0058 B3F5007F 		cmp	r3, #512
 310 005c 09D1     		bne	.L28
 295:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 311              		.loc 1 295 0
 312 005e 000A     		lsrs	r0, r0, #8
 313              	.LVL30:
 314 0060 00EB8000 		add	r0, r0, r0, lsl #2
 315 0064 4300     		lsls	r3, r0, #1
 316 0066 6269     		ldr	r2, [r4, #20]
 317 0068 B3FBF2F3 		udiv	r3, r3, r2
 318 006c 0533     		adds	r3, r3, #5
 319 006e 9BB2     		uxth	r3, r3
 320              	.LVL31:
 321 0070 0AE0     		b	.L29
 322              	.LVL32:
 323              	.L28:
 300:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 324              		.loc 1 300 0
 325 0072 7601     		lsls	r6, r6, #5
 326              	.LVL33:
 327 0074 B0FBF6F0 		udiv	r0, r0, r6
 328              	.LVL34:
 329 0078 00EB8000 		add	r0, r0, r0, lsl #2
 330 007c 4300     		lsls	r3, r0, #1
 331 007e 6269     		ldr	r2, [r4, #20]
 332 0080 B3FBF2F3 		udiv	r3, r3, r2
 333 0084 0533     		adds	r3, r3, #5
 334 0086 9BB2     		uxth	r3, r3
 335              	.LVL35:
 336              	.L29:
 304:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 337              		.loc 1 304 0
 338 0088 194A     		ldr	r2, .L38+8
 339 008a A2FB0323 		umull	r2, r3, r2, r3
 340              	.LVL36:
 341 008e DB08     		lsrs	r3, r3, #3
 342              	.LVL37:
 307:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 343              		.loc 1 307 0
 344 0090 03F00102 		and	r2, r3, #1
 345              	.LVL38:
 310:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 346              		.loc 1 310 0
ARM GAS  /tmp/cczIJhh6.s 			page 32


 347 0094 9B1A     		subs	r3, r3, r2
 348              	.LVL39:
 349 0096 C3F34F03 		ubfx	r3, r3, #1, #16
 350              	.LVL40:
 313:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 351              		.loc 1 313 0
 352 009a 1202     		lsls	r2, r2, #8
 353              	.LVL41:
 354 009c 92B2     		uxth	r2, r2
 355              	.LVL42:
 356 009e 01E0     		b	.L25
 357              	.LVL43:
 358              	.L32:
 258:HALLIB/Src/stm32f7xx_hal_i2s.c ****     i2sdiv = (uint16_t)2;   
 359              		.loc 1 258 0
 360 00a0 0022     		movs	r2, #0
 259:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 361              		.loc 1 259 0
 362 00a2 0223     		movs	r3, #2
 363              	.LVL44:
 364              	.L25:
 317:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 365              		.loc 1 317 0
 366 00a4 991E     		subs	r1, r3, #2
 367 00a6 89B2     		uxth	r1, r1
 368 00a8 FD29     		cmp	r1, #253
 369 00aa 01D9     		bls	.L30
 321:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 370              		.loc 1 321 0
 371 00ac 0022     		movs	r2, #0
 372              	.LVL45:
 320:HALLIB/Src/stm32f7xx_hal_i2s.c ****     i2sodd = 0;
 373              		.loc 1 320 0
 374 00ae 0223     		movs	r3, #2
 375              	.LVL46:
 376              	.L30:
 325:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 377              		.loc 1 325 0
 378 00b0 2068     		ldr	r0, [r4]
 379 00b2 218A     		ldrh	r1, [r4, #16]
 380 00b4 0A43     		orrs	r2, r2, r1
 381              	.LVL47:
 382 00b6 1343     		orrs	r3, r3, r2
 383              	.LVL48:
 384 00b8 0362     		str	r3, [r0, #32]
 328:HALLIB/Src/stm32f7xx_hal_i2s.c ****                        (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 385              		.loc 1 328 0
 386 00ba 6368     		ldr	r3, [r4, #4]
 329:HALLIB/Src/stm32f7xx_hal_i2s.c ****                        (uint16_t)hi2s->Init.CPOL))));
 387              		.loc 1 329 0
 388 00bc A268     		ldr	r2, [r4, #8]
 389 00be E168     		ldr	r1, [r4, #12]
 330:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 390              		.loc 1 330 0
 391 00c0 208B     		ldrh	r0, [r4, #24]
 329:HALLIB/Src/stm32f7xx_hal_i2s.c ****                        (uint16_t)hi2s->Init.CPOL))));
 392              		.loc 1 329 0
ARM GAS  /tmp/cczIJhh6.s 			page 33


 393 00c2 0143     		orrs	r1, r1, r0
 394 00c4 89B2     		uxth	r1, r1
 395 00c6 0A43     		orrs	r2, r2, r1
 396 00c8 92B2     		uxth	r2, r2
 328:HALLIB/Src/stm32f7xx_hal_i2s.c ****                        (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 397              		.loc 1 328 0
 398 00ca 1343     		orrs	r3, r3, r2
 399 00cc 9BB2     		uxth	r3, r3
 400 00ce 1D43     		orrs	r5, r5, r3
 401              	.LVL49:
 402 00d0 45F40065 		orr	r5, r5, #2048
 403              	.LVL50:
 333:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 404              		.loc 1 333 0
 405 00d4 2368     		ldr	r3, [r4]
 406 00d6 DD61     		str	r5, [r3, #28]
 335:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->State= HAL_I2S_STATE_READY;
 407              		.loc 1 335 0
 408 00d8 0020     		movs	r0, #0
 409 00da E063     		str	r0, [r4, #60]
 336:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 410              		.loc 1 336 0
 411 00dc 0123     		movs	r3, #1
 412 00de 84F83930 		strb	r3, [r4, #57]
 338:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 413              		.loc 1 338 0
 414 00e2 70BD     		pop	{r4, r5, r6, pc}
 415              	.LVL51:
 416              	.L31:
 417              	.LCFI2:
 418              		.cfi_def_cfa_offset 0
 419              		.cfi_restore 4
 420              		.cfi_restore 5
 421              		.cfi_restore 6
 422              		.cfi_restore 14
 222:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 423              		.loc 1 222 0
 424 00e4 0120     		movs	r0, #1
 425              	.LVL52:
 426 00e6 7047     		bx	lr
 427              	.L39:
 428              		.align	2
 429              	.L38:
 430 00e8 40F0FFFF 		.word	-4032
 431 00ec 0080BB00 		.word	12288000
 432 00f0 CDCCCCCC 		.word	-858993459
 433              		.cfi_endproc
 434              	.LFE136:
 436              		.section	.text.HAL_I2S_MspDeInit,"ax",%progbits
 437              		.align	2
 438              		.weak	HAL_I2S_MspDeInit
 439              		.thumb
 440              		.thumb_func
 442              	HAL_I2S_MspDeInit:
 443              	.LFB139:
 395:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
 444              		.loc 1 395 0
ARM GAS  /tmp/cczIJhh6.s 			page 34


 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 449              	.LVL53:
 450 0000 7047     		bx	lr
 451              		.cfi_endproc
 452              	.LFE139:
 454 0002 00BF     		.section	.text.HAL_I2S_DeInit,"ax",%progbits
 455              		.align	2
 456              		.global	HAL_I2S_DeInit
 457              		.thumb
 458              		.thumb_func
 460              	HAL_I2S_DeInit:
 461              	.LFB137:
 348:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Check the I2S handle allocation */
 462              		.loc 1 348 0
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 0
 465              		@ frame_needed = 0, uses_anonymous_args = 0
 466              	.LVL54:
 350:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 467              		.loc 1 350 0
 468 0000 68B1     		cbz	r0, .L43
 348:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Check the I2S handle allocation */
 469              		.loc 1 348 0
 470 0002 10B5     		push	{r4, lr}
 471              	.LCFI3:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
 475 0004 0446     		mov	r4, r0
 358:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 476              		.loc 1 358 0
 477 0006 0223     		movs	r3, #2
 478 0008 80F83930 		strb	r3, [r0, #57]
 361:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 479              		.loc 1 361 0
 480 000c FFF7FEFF 		bl	HAL_I2S_MspDeInit
 481              	.LVL55:
 363:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->State = HAL_I2S_STATE_RESET;
 482              		.loc 1 363 0
 483 0010 0020     		movs	r0, #0
 484 0012 E063     		str	r0, [r4, #60]
 364:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 485              		.loc 1 364 0
 486 0014 84F83900 		strb	r0, [r4, #57]
 367:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 487              		.loc 1 367 0
 488 0018 84F83800 		strb	r0, [r4, #56]
 369:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 489              		.loc 1 369 0
 490 001c 10BD     		pop	{r4, pc}
 491              	.LVL56:
 492              	.L43:
 493              	.LCFI4:
 494              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cczIJhh6.s 			page 35


 495              		.cfi_restore 4
 496              		.cfi_restore 14
 352:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 497              		.loc 1 352 0
 498 001e 0120     		movs	r0, #1
 499              	.LVL57:
 500 0020 7047     		bx	lr
 501              		.cfi_endproc
 502              	.LFE137:
 504 0022 00BF     		.section	.text.HAL_I2S_Transmit_IT,"ax",%progbits
 505              		.align	2
 506              		.global	HAL_I2S_Transmit_IT
 507              		.thumb
 508              		.thumb_func
 510              	HAL_I2S_Transmit_IT:
 511              	.LFB142:
 673:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_READY)
 512              		.loc 1 673 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 517              	.LVL58:
 674:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 518              		.loc 1 674 0
 519 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 520 0004 DBB2     		uxtb	r3, r3
 521 0006 012B     		cmp	r3, #1
 522 0008 36D1     		bne	.L52
 676:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 523              		.loc 1 676 0
 524 000a 002A     		cmp	r2, #0
 525 000c 18BF     		it	ne
 526 000e 0029     		cmpne	r1, #0
 527 0010 34D0     		beq	.L53
 681:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)
 528              		.loc 1 681 0
 529 0012 0162     		str	r1, [r0, #32]
 682:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 530              		.loc 1 682 0
 531 0014 0168     		ldr	r1, [r0]
 532              	.LVL59:
 533 0016 CB69     		ldr	r3, [r1, #28]
 534 0018 03F00703 		and	r3, r3, #7
 535 001c 032B     		cmp	r3, #3
 536 001e 04D0     		beq	.L48
 683:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 537              		.loc 1 683 0 discriminator 1
 538 0020 CB69     		ldr	r3, [r1, #28]
 539 0022 03F00703 		and	r3, r3, #7
 682:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 540              		.loc 1 682 0 discriminator 1
 541 0026 052B     		cmp	r3, #5
 542 0028 04D1     		bne	.L49
 543              	.L48:
 685:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = (Size << 1);
 544              		.loc 1 685 0
ARM GAS  /tmp/cczIJhh6.s 			page 36


 545 002a 5200     		lsls	r2, r2, #1
 546              	.LVL60:
 547 002c 92B2     		uxth	r2, r2
 548 002e 8284     		strh	r2, [r0, #36]	@ movhi
 686:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
 549              		.loc 1 686 0
 550 0030 C284     		strh	r2, [r0, #38]	@ movhi
 551 0032 01E0     		b	.L50
 552              	.LVL61:
 553              	.L49:
 690:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = Size;
 554              		.loc 1 690 0
 555 0034 8284     		strh	r2, [r0, #36]	@ movhi
 691:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 556              		.loc 1 691 0
 557 0036 C284     		strh	r2, [r0, #38]	@ movhi
 558              	.LVL62:
 559              	.L50:
 695:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 560              		.loc 1 695 0
 561 0038 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 562 003c DBB2     		uxtb	r3, r3
 563 003e 012B     		cmp	r3, #1
 564 0040 1ED0     		beq	.L54
 695:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 565              		.loc 1 695 0 is_stmt 0 discriminator 2
 566 0042 0123     		movs	r3, #1
 567 0044 80F83830 		strb	r3, [r0, #56]
 697:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_TX;
 568              		.loc 1 697 0 is_stmt 1 discriminator 2
 569 0048 0023     		movs	r3, #0
 570 004a C363     		str	r3, [r0, #60]
 698:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 571              		.loc 1 698 0 discriminator 2
 572 004c 0323     		movs	r3, #3
 573 004e 80F83930 		strb	r3, [r0, #57]
 701:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 574              		.loc 1 701 0 discriminator 2
 575 0052 0268     		ldr	r2, [r0]
 576 0054 5368     		ldr	r3, [r2, #4]
 577 0056 43F0A003 		orr	r3, r3, #160
 578 005a 5360     		str	r3, [r2, #4]
 579              	.LVL63:
 704:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 580              		.loc 1 704 0 discriminator 2
 581 005c 0368     		ldr	r3, [r0]
 582 005e DA69     		ldr	r2, [r3, #28]
 583 0060 12F4806F 		tst	r2, #1024
 584 0064 03D1     		bne	.L51
 707:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 585              		.loc 1 707 0
 586 0066 DA69     		ldr	r2, [r3, #28]
 587 0068 42F48062 		orr	r2, r2, #1024
 588 006c DA61     		str	r2, [r3, #28]
 589              	.L51:
 711:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 590              		.loc 1 711 0
ARM GAS  /tmp/cczIJhh6.s 			page 37


 591 006e 0023     		movs	r3, #0
 592 0070 80F83830 		strb	r3, [r0, #56]
 713:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 593              		.loc 1 713 0
 594 0074 1846     		mov	r0, r3
 595              	.LVL64:
 596 0076 7047     		bx	lr
 597              	.LVL65:
 598              	.L52:
 717:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 599              		.loc 1 717 0
 600 0078 0220     		movs	r0, #2
 601              	.LVL66:
 602 007a 7047     		bx	lr
 603              	.LVL67:
 604              	.L53:
 678:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 605              		.loc 1 678 0
 606 007c 0120     		movs	r0, #1
 607              	.LVL68:
 608 007e 7047     		bx	lr
 609              	.LVL69:
 610              	.L54:
 695:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 611              		.loc 1 695 0
 612 0080 0220     		movs	r0, #2
 613              	.LVL70:
 719:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 614              		.loc 1 719 0
 615 0082 7047     		bx	lr
 616              		.cfi_endproc
 617              	.LFE142:
 619              		.section	.text.HAL_I2S_Receive_IT,"ax",%progbits
 620              		.align	2
 621              		.global	HAL_I2S_Receive_IT
 622              		.thumb
 623              		.thumb_func
 625              	HAL_I2S_Receive_IT:
 626              	.LFB143:
 738:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->State == HAL_I2S_STATE_READY)
 627              		.loc 1 738 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 632              	.LVL71:
 739:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 633              		.loc 1 739 0
 634 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 635 0004 DBB2     		uxtb	r3, r3
 636 0006 012B     		cmp	r3, #1
 637 0008 36D1     		bne	.L61
 741:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 638              		.loc 1 741 0
 639 000a 002A     		cmp	r2, #0
 640 000c 18BF     		it	ne
 641 000e 0029     		cmpne	r1, #0
ARM GAS  /tmp/cczIJhh6.s 			page 38


 642 0010 34D0     		beq	.L62
 746:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)
 643              		.loc 1 746 0
 644 0012 8162     		str	r1, [r0, #40]
 747:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 645              		.loc 1 747 0
 646 0014 0168     		ldr	r1, [r0]
 647              	.LVL72:
 648 0016 CB69     		ldr	r3, [r1, #28]
 649 0018 03F00703 		and	r3, r3, #7
 650 001c 032B     		cmp	r3, #3
 651 001e 04D0     		beq	.L57
 748:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 652              		.loc 1 748 0 discriminator 1
 653 0020 CB69     		ldr	r3, [r1, #28]
 654 0022 03F00703 		and	r3, r3, #7
 747:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 655              		.loc 1 747 0 discriminator 1
 656 0026 052B     		cmp	r3, #5
 657 0028 04D1     		bne	.L58
 658              	.L57:
 750:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = (Size << 1);
 659              		.loc 1 750 0
 660 002a 5200     		lsls	r2, r2, #1
 661              	.LVL73:
 662 002c 92B2     		uxth	r2, r2
 663 002e 8285     		strh	r2, [r0, #44]	@ movhi
 751:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
 664              		.loc 1 751 0
 665 0030 C285     		strh	r2, [r0, #46]	@ movhi
 666 0032 01E0     		b	.L59
 667              	.LVL74:
 668              	.L58:
 755:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = Size;
 669              		.loc 1 755 0
 670 0034 8285     		strh	r2, [r0, #44]	@ movhi
 756:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 671              		.loc 1 756 0
 672 0036 C285     		strh	r2, [r0, #46]	@ movhi
 673              	.LVL75:
 674              	.L59:
 759:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 675              		.loc 1 759 0
 676 0038 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 677 003c DBB2     		uxtb	r3, r3
 678 003e 012B     		cmp	r3, #1
 679 0040 1ED0     		beq	.L63
 759:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 680              		.loc 1 759 0 is_stmt 0 discriminator 2
 681 0042 0123     		movs	r3, #1
 682 0044 80F83830 		strb	r3, [r0, #56]
 761:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_RX;
 683              		.loc 1 761 0 is_stmt 1 discriminator 2
 684 0048 0023     		movs	r3, #0
 685 004a C363     		str	r3, [r0, #60]
 762:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 686              		.loc 1 762 0 discriminator 2
ARM GAS  /tmp/cczIJhh6.s 			page 39


 687 004c 0423     		movs	r3, #4
 688 004e 80F83930 		strb	r3, [r0, #57]
 765:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 689              		.loc 1 765 0 discriminator 2
 690 0052 0268     		ldr	r2, [r0]
 691 0054 5368     		ldr	r3, [r2, #4]
 692 0056 43F06003 		orr	r3, r3, #96
 693 005a 5360     		str	r3, [r2, #4]
 694              	.LVL76:
 768:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 695              		.loc 1 768 0 discriminator 2
 696 005c 0368     		ldr	r3, [r0]
 697 005e DA69     		ldr	r2, [r3, #28]
 698 0060 12F4806F 		tst	r2, #1024
 699 0064 03D1     		bne	.L60
 771:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 700              		.loc 1 771 0
 701 0066 DA69     		ldr	r2, [r3, #28]
 702 0068 42F48062 		orr	r2, r2, #1024
 703 006c DA61     		str	r2, [r3, #28]
 704              	.L60:
 775:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 705              		.loc 1 775 0
 706 006e 0023     		movs	r3, #0
 707 0070 80F83830 		strb	r3, [r0, #56]
 777:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 708              		.loc 1 777 0
 709 0074 1846     		mov	r0, r3
 710              	.LVL77:
 711 0076 7047     		bx	lr
 712              	.LVL78:
 713              	.L61:
 781:HALLIB/Src/stm32f7xx_hal_i2s.c ****   } 
 714              		.loc 1 781 0
 715 0078 0220     		movs	r0, #2
 716              	.LVL79:
 717 007a 7047     		bx	lr
 718              	.LVL80:
 719              	.L62:
 743:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 720              		.loc 1 743 0
 721 007c 0120     		movs	r0, #1
 722              	.LVL81:
 723 007e 7047     		bx	lr
 724              	.LVL82:
 725              	.L63:
 759:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 726              		.loc 1 759 0
 727 0080 0220     		movs	r0, #2
 728              	.LVL83:
 783:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 729              		.loc 1 783 0
 730 0082 7047     		bx	lr
 731              		.cfi_endproc
 732              	.LFE143:
 734              		.section	.text.HAL_I2S_Transmit_DMA,"ax",%progbits
 735              		.align	2
ARM GAS  /tmp/cczIJhh6.s 			page 40


 736              		.global	HAL_I2S_Transmit_DMA
 737              		.thumb
 738              		.thumb_func
 740              	HAL_I2S_Transmit_DMA:
 741              	.LFB144:
 800:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t *tmp;
 742              		.loc 1 800 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746              	.LVL84:
 803:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 747              		.loc 1 803 0
 748 0000 002A     		cmp	r2, #0
 749 0002 18BF     		it	ne
 750 0004 0029     		cmpne	r1, #0
 751 0006 4BD0     		beq	.L70
 800:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t *tmp;
 752              		.loc 1 800 0
 753 0008 38B5     		push	{r3, r4, r5, lr}
 754              	.LCFI5:
 755              		.cfi_def_cfa_offset 16
 756              		.cfi_offset 3, -16
 757              		.cfi_offset 4, -12
 758              		.cfi_offset 5, -8
 759              		.cfi_offset 14, -4
 760 000a 0D46     		mov	r5, r1
 761 000c 1446     		mov	r4, r2
 808:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {  
 762              		.loc 1 808 0
 763 000e 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 764 0012 DBB2     		uxtb	r3, r3
 765 0014 012B     		cmp	r3, #1
 766 0016 45D1     		bne	.L71
 810:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)
 767              		.loc 1 810 0
 768 0018 0162     		str	r1, [r0, #32]
 811:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 769              		.loc 1 811 0
 770 001a 0268     		ldr	r2, [r0]
 771              	.LVL85:
 772 001c D369     		ldr	r3, [r2, #28]
 773 001e 03F00703 		and	r3, r3, #7
 774 0022 032B     		cmp	r3, #3
 775 0024 04D0     		beq	.L66
 812:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 776              		.loc 1 812 0 discriminator 1
 777 0026 D369     		ldr	r3, [r2, #28]
 778 0028 03F00703 		and	r3, r3, #7
 811:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 779              		.loc 1 811 0 discriminator 1
 780 002c 052B     		cmp	r3, #5
 781 002e 04D1     		bne	.L67
 782              	.L66:
 814:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = (Size << 1);
 783              		.loc 1 814 0
 784 0030 6400     		lsls	r4, r4, #1
ARM GAS  /tmp/cczIJhh6.s 			page 41


 785 0032 A4B2     		uxth	r4, r4
 786 0034 8484     		strh	r4, [r0, #36]	@ movhi
 815:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
 787              		.loc 1 815 0
 788 0036 C484     		strh	r4, [r0, #38]	@ movhi
 789 0038 01E0     		b	.L68
 790              	.L67:
 819:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = Size;
 791              		.loc 1 819 0
 792 003a 8484     		strh	r4, [r0, #36]	@ movhi
 820:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
 793              		.loc 1 820 0
 794 003c C484     		strh	r4, [r0, #38]	@ movhi
 795              	.L68:
 824:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 796              		.loc 1 824 0
 797 003e 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 798 0042 DBB2     		uxtb	r3, r3
 799 0044 012B     		cmp	r3, #1
 800 0046 2FD0     		beq	.L72
 801 0048 2946     		mov	r1, r5
 802              	.LVL86:
 803 004a 0446     		mov	r4, r0
 824:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 804              		.loc 1 824 0 is_stmt 0 discriminator 2
 805 004c 0123     		movs	r3, #1
 806 004e 80F83830 		strb	r3, [r0, #56]
 826:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_TX;
 807              		.loc 1 826 0 is_stmt 1 discriminator 2
 808 0052 0023     		movs	r3, #0
 809 0054 C363     		str	r3, [r0, #60]
 827:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 810              		.loc 1 827 0 discriminator 2
 811 0056 0323     		movs	r3, #3
 812 0058 80F83930 		strb	r3, [r0, #57]
 830:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 813              		.loc 1 830 0 discriminator 2
 814 005c 036B     		ldr	r3, [r0, #48]
 815 005e 134A     		ldr	r2, .L74
 816 0060 1A64     		str	r2, [r3, #64]
 833:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 817              		.loc 1 833 0 discriminator 2
 818 0062 036B     		ldr	r3, [r0, #48]
 819 0064 124A     		ldr	r2, .L74+4
 820 0066 DA63     		str	r2, [r3, #60]
 836:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 821              		.loc 1 836 0 discriminator 2
 822 0068 036B     		ldr	r3, [r0, #48]
 823 006a 124A     		ldr	r2, .L74+8
 824 006c DA64     		str	r2, [r3, #76]
 825              	.LVL87:
 840:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 826              		.loc 1 840 0 discriminator 2
 827 006e 0268     		ldr	r2, [r0]
 828 0070 838C     		ldrh	r3, [r0, #36]
 829 0072 9BB2     		uxth	r3, r3
 830 0074 0C32     		adds	r2, r2, #12
ARM GAS  /tmp/cczIJhh6.s 			page 42


 831 0076 006B     		ldr	r0, [r0, #48]
 832              	.LVL88:
 833 0078 FFF7FEFF 		bl	HAL_DMA_Start_IT
 834              	.LVL89:
 843:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 835              		.loc 1 843 0 discriminator 2
 836 007c 2368     		ldr	r3, [r4]
 837 007e DA69     		ldr	r2, [r3, #28]
 838 0080 12F4806F 		tst	r2, #1024
 839 0084 03D1     		bne	.L69
 846:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 840              		.loc 1 846 0
 841 0086 DA69     		ldr	r2, [r3, #28]
 842 0088 42F48062 		orr	r2, r2, #1024
 843 008c DA61     		str	r2, [r3, #28]
 844              	.L69:
 850:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 845              		.loc 1 850 0
 846 008e 2268     		ldr	r2, [r4]
 847 0090 5368     		ldr	r3, [r2, #4]
 848 0092 43F00203 		orr	r3, r3, #2
 849 0096 5360     		str	r3, [r2, #4]
 853:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 850              		.loc 1 853 0
 851 0098 0020     		movs	r0, #0
 852 009a 84F83800 		strb	r0, [r4, #56]
 855:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 853              		.loc 1 855 0
 854 009e 38BD     		pop	{r3, r4, r5, pc}
 855              	.LVL90:
 856              	.L70:
 857              	.LCFI6:
 858              		.cfi_def_cfa_offset 0
 859              		.cfi_restore 3
 860              		.cfi_restore 4
 861              		.cfi_restore 5
 862              		.cfi_restore 14
 805:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 863              		.loc 1 805 0
 864 00a0 0120     		movs	r0, #1
 865              	.LVL91:
 861:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 866              		.loc 1 861 0
 867 00a2 7047     		bx	lr
 868              	.LVL92:
 869              	.L71:
 870              	.LCFI7:
 871              		.cfi_def_cfa_offset 16
 872              		.cfi_offset 3, -16
 873              		.cfi_offset 4, -12
 874              		.cfi_offset 5, -8
 875              		.cfi_offset 14, -4
 859:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 876              		.loc 1 859 0
 877 00a4 0220     		movs	r0, #2
 878              	.LVL93:
 879 00a6 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/cczIJhh6.s 			page 43


 880              	.LVL94:
 881              	.L72:
 824:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 882              		.loc 1 824 0
 883 00a8 0220     		movs	r0, #2
 884              	.LVL95:
 861:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 885              		.loc 1 861 0
 886 00aa 38BD     		pop	{r3, r4, r5, pc}
 887              	.L75:
 888              		.align	2
 889              	.L74:
 890 00ac 00000000 		.word	I2S_DMATxHalfCplt
 891 00b0 00000000 		.word	I2S_DMATxCplt
 892 00b4 00000000 		.word	I2S_DMAError
 893              		.cfi_endproc
 894              	.LFE144:
 896              		.section	.text.HAL_I2S_Receive_DMA,"ax",%progbits
 897              		.align	2
 898              		.global	HAL_I2S_Receive_DMA
 899              		.thumb
 900              		.thumb_func
 902              	HAL_I2S_Receive_DMA:
 903              	.LFB145:
 878:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t *tmp;
 904              		.loc 1 878 0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 8
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 908              	.LVL96:
 881:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 909              		.loc 1 881 0
 910 0000 002A     		cmp	r2, #0
 911 0002 18BF     		it	ne
 912 0004 0029     		cmpne	r1, #0
 913 0006 57D0     		beq	.L83
 878:HALLIB/Src/stm32f7xx_hal_i2s.c ****   uint32_t *tmp;
 914              		.loc 1 878 0
 915 0008 30B5     		push	{r4, r5, lr}
 916              	.LCFI8:
 917              		.cfi_def_cfa_offset 12
 918              		.cfi_offset 4, -12
 919              		.cfi_offset 5, -8
 920              		.cfi_offset 14, -4
 921 000a 83B0     		sub	sp, sp, #12
 922              	.LCFI9:
 923              		.cfi_def_cfa_offset 24
 924 000c 0D46     		mov	r5, r1
 925 000e 1446     		mov	r4, r2
 886:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {    
 926              		.loc 1 886 0
 927 0010 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 928 0014 DBB2     		uxtb	r3, r3
 929 0016 012B     		cmp	r3, #1
 930 0018 50D1     		bne	.L84
 888:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)
 931              		.loc 1 888 0
ARM GAS  /tmp/cczIJhh6.s 			page 44


 932 001a 8162     		str	r1, [r0, #40]
 889:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 933              		.loc 1 889 0
 934 001c 0268     		ldr	r2, [r0]
 935              	.LVL97:
 936 001e D369     		ldr	r3, [r2, #28]
 937 0020 03F00703 		and	r3, r3, #7
 938 0024 032B     		cmp	r3, #3
 939 0026 04D0     		beq	.L78
 890:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 940              		.loc 1 890 0 discriminator 1
 941 0028 D369     		ldr	r3, [r2, #28]
 942 002a 03F00703 		and	r3, r3, #7
 889:HALLIB/Src/stm32f7xx_hal_i2s.c ****       ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 943              		.loc 1 889 0 discriminator 1
 944 002e 052B     		cmp	r3, #5
 945 0030 04D1     		bne	.L79
 946              	.L78:
 892:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = (Size << 1);
 947              		.loc 1 892 0
 948 0032 6400     		lsls	r4, r4, #1
 949 0034 A4B2     		uxth	r4, r4
 950 0036 8485     		strh	r4, [r0, #44]	@ movhi
 893:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
 951              		.loc 1 893 0
 952 0038 C485     		strh	r4, [r0, #46]	@ movhi
 953 003a 01E0     		b	.L80
 954              	.L79:
 897:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = Size;
 955              		.loc 1 897 0
 956 003c 8485     		strh	r4, [r0, #44]	@ movhi
 898:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 957              		.loc 1 898 0
 958 003e C485     		strh	r4, [r0, #46]	@ movhi
 959              	.L80:
 901:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 960              		.loc 1 901 0
 961 0040 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 962 0044 DBB2     		uxtb	r3, r3
 963 0046 012B     		cmp	r3, #1
 964 0048 3AD0     		beq	.L85
 901:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 965              		.loc 1 901 0 is_stmt 0 discriminator 2
 966 004a 0123     		movs	r3, #1
 967 004c 80F83830 		strb	r3, [r0, #56]
 903:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_RX;
 968              		.loc 1 903 0 is_stmt 1 discriminator 2
 969 0050 0023     		movs	r3, #0
 970 0052 C363     		str	r3, [r0, #60]
 904:HALLIB/Src/stm32f7xx_hal_i2s.c ****    
 971              		.loc 1 904 0 discriminator 2
 972 0054 0423     		movs	r3, #4
 973 0056 80F83930 		strb	r3, [r0, #57]
 907:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 974              		.loc 1 907 0 discriminator 2
 975 005a 436B     		ldr	r3, [r0, #52]
 976 005c 1A4A     		ldr	r2, .L87
ARM GAS  /tmp/cczIJhh6.s 			page 45


 977 005e 1A64     		str	r2, [r3, #64]
 910:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 978              		.loc 1 910 0 discriminator 2
 979 0060 436B     		ldr	r3, [r0, #52]
 980 0062 1A4A     		ldr	r2, .L87+4
 981 0064 DA63     		str	r2, [r3, #60]
 913:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 982              		.loc 1 913 0 discriminator 2
 983 0066 436B     		ldr	r3, [r0, #52]
 984 0068 194A     		ldr	r2, .L87+8
 985 006a DA64     		str	r2, [r3, #76]
 916:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 986              		.loc 1 916 0 discriminator 2
 987 006c 0168     		ldr	r1, [r0]
 988              	.LVL98:
 989 006e CB69     		ldr	r3, [r1, #28]
 990 0070 03F44073 		and	r3, r3, #768
 991 0074 B3F5407F 		cmp	r3, #768
 992 0078 04D1     		bne	.L81
 993              	.LBB2:
 920:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 994              		.loc 1 920 0
 995 007a CB68     		ldr	r3, [r1, #12]
 996 007c 0193     		str	r3, [sp, #4]
 997 007e 8B68     		ldr	r3, [r1, #8]
 998 0080 0193     		str	r3, [sp, #4]
 999 0082 019B     		ldr	r3, [sp, #4]
 1000              	.L81:
 1001 0084 2A46     		mov	r2, r5
 1002 0086 0446     		mov	r4, r0
 1003              	.LVL99:
 1004              	.LBE2:
 925:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 1005              		.loc 1 925 0
 1006 0088 838D     		ldrh	r3, [r0, #44]
 1007 008a 9BB2     		uxth	r3, r3
 1008 008c 0C31     		adds	r1, r1, #12
 1009 008e 406B     		ldr	r0, [r0, #52]
 1010              	.LVL100:
 1011 0090 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1012              	.LVL101:
 928:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 1013              		.loc 1 928 0
 1014 0094 2368     		ldr	r3, [r4]
 1015 0096 DA69     		ldr	r2, [r3, #28]
 1016 0098 12F4806F 		tst	r2, #1024
 1017 009c 03D1     		bne	.L82
 931:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 1018              		.loc 1 931 0
 1019 009e DA69     		ldr	r2, [r3, #28]
 1020 00a0 42F48062 		orr	r2, r2, #1024
 1021 00a4 DA61     		str	r2, [r3, #28]
 1022              	.L82:
 935:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 1023              		.loc 1 935 0
 1024 00a6 2268     		ldr	r2, [r4]
 1025 00a8 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/cczIJhh6.s 			page 46


 1026 00aa 43F00103 		orr	r3, r3, #1
 1027 00ae 5360     		str	r3, [r2, #4]
 938:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1028              		.loc 1 938 0
 1029 00b0 0020     		movs	r0, #0
 1030 00b2 84F83800 		strb	r0, [r4, #56]
 940:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1031              		.loc 1 940 0
 1032 00b6 04E0     		b	.L77
 1033              	.LVL102:
 1034              	.L83:
 1035              	.LCFI10:
 1036              		.cfi_def_cfa_offset 0
 1037              		.cfi_restore 4
 1038              		.cfi_restore 5
 1039              		.cfi_restore 14
 883:HALLIB/Src/stm32f7xx_hal_i2s.c ****   } 
 1040              		.loc 1 883 0
 1041 00b8 0120     		movs	r0, #1
 1042              	.LVL103:
 946:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1043              		.loc 1 946 0
 1044 00ba 7047     		bx	lr
 1045              	.LVL104:
 1046              	.L84:
 1047              	.LCFI11:
 1048              		.cfi_def_cfa_offset 24
 1049              		.cfi_offset 4, -12
 1050              		.cfi_offset 5, -8
 1051              		.cfi_offset 14, -4
 944:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1052              		.loc 1 944 0
 1053 00bc 0220     		movs	r0, #2
 1054              	.LVL105:
 1055 00be 00E0     		b	.L77
 1056              	.LVL106:
 1057              	.L85:
 901:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 1058              		.loc 1 901 0
 1059 00c0 0220     		movs	r0, #2
 1060              	.LVL107:
 1061              	.L77:
 946:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1062              		.loc 1 946 0
 1063 00c2 03B0     		add	sp, sp, #12
 1064              	.LCFI12:
 1065              		.cfi_def_cfa_offset 12
 1066              		@ sp needed
 1067 00c4 30BD     		pop	{r4, r5, pc}
 1068              	.LVL108:
 1069              	.L88:
 1070 00c6 00BF     		.align	2
 1071              	.L87:
 1072 00c8 00000000 		.word	I2S_DMARxHalfCplt
 1073 00cc 00000000 		.word	I2S_DMARxCplt
 1074 00d0 00000000 		.word	I2S_DMAError
 1075              		.cfi_endproc
ARM GAS  /tmp/cczIJhh6.s 			page 47


 1076              	.LFE145:
 1078              		.section	.text.HAL_I2S_DMAPause,"ax",%progbits
 1079              		.align	2
 1080              		.global	HAL_I2S_DMAPause
 1081              		.thumb
 1082              		.thumb_func
 1084              	HAL_I2S_DMAPause:
 1085              	.LFB146:
 955:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Process Locked */
 1086              		.loc 1 955 0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 0
 1089              		@ frame_needed = 0, uses_anonymous_args = 0
 1090              		@ link register save eliminated.
 1091              	.LVL109:
 957:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1092              		.loc 1 957 0
 1093 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1094 0004 DBB2     		uxtb	r3, r3
 1095 0006 012B     		cmp	r3, #1
 1096 0008 33D0     		beq	.L95
 957:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1097              		.loc 1 957 0 is_stmt 0 discriminator 2
 1098 000a 0123     		movs	r3, #1
 1099 000c 80F83830 		strb	r3, [r0, #56]
 959:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 1100              		.loc 1 959 0 is_stmt 1 discriminator 2
 1101 0010 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1102 0014 DBB2     		uxtb	r3, r3
 1103 0016 032B     		cmp	r3, #3
 1104 0018 05D1     		bne	.L91
 962:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1105              		.loc 1 962 0
 1106 001a 0268     		ldr	r2, [r0]
 1107 001c 5368     		ldr	r3, [r2, #4]
 1108 001e 23F00203 		bic	r3, r3, #2
 1109 0022 5360     		str	r3, [r2, #4]
 1110 0024 20E0     		b	.L92
 1111              	.L91:
 964:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 1112              		.loc 1 964 0
 1113 0026 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1114 002a DBB2     		uxtb	r3, r3
 1115 002c 042B     		cmp	r3, #4
 1116 002e 05D1     		bne	.L93
 967:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1117              		.loc 1 967 0
 1118 0030 0268     		ldr	r2, [r0]
 1119 0032 5368     		ldr	r3, [r2, #4]
 1120 0034 23F00103 		bic	r3, r3, #1
 1121 0038 5360     		str	r3, [r2, #4]
 1122 003a 15E0     		b	.L92
 1123              	.L93:
 969:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 1124              		.loc 1 969 0
 1125 003c 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1126 0040 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cczIJhh6.s 			page 48


 1127 0042 052B     		cmp	r3, #5
 1128 0044 10D1     		bne	.L92
 971:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 1129              		.loc 1 971 0
 1130 0046 4368     		ldr	r3, [r0, #4]
 1131 0048 B3F5007F 		cmp	r3, #512
 1132 004c 18BF     		it	ne
 1133 004e 002B     		cmpne	r3, #0
 1134 0050 05D1     		bne	.L94
 974:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 1135              		.loc 1 974 0
 1136 0052 0268     		ldr	r2, [r0]
 1137 0054 5368     		ldr	r3, [r2, #4]
 1138 0056 23F00203 		bic	r3, r3, #2
 1139 005a 5360     		str	r3, [r2, #4]
 1140 005c 04E0     		b	.L92
 1141              	.L94:
 979:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 1142              		.loc 1 979 0
 1143 005e 0268     		ldr	r2, [r0]
 1144 0060 5368     		ldr	r3, [r2, #4]
 1145 0062 23F00103 		bic	r3, r3, #1
 1146 0066 5360     		str	r3, [r2, #4]
 1147              	.L92:
 984:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1148              		.loc 1 984 0
 1149 0068 0023     		movs	r3, #0
 1150 006a 80F83830 		strb	r3, [r0, #56]
 986:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 1151              		.loc 1 986 0
 1152 006e 1846     		mov	r0, r3
 1153              	.LVL110:
 1154 0070 7047     		bx	lr
 1155              	.LVL111:
 1156              	.L95:
 957:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1157              		.loc 1 957 0
 1158 0072 0220     		movs	r0, #2
 1159              	.LVL112:
 987:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1160              		.loc 1 987 0
 1161 0074 7047     		bx	lr
 1162              		.cfi_endproc
 1163              	.LFE146:
 1165 0076 00BF     		.section	.text.HAL_I2S_DMAResume,"ax",%progbits
 1166              		.align	2
 1167              		.global	HAL_I2S_DMAResume
 1168              		.thumb
 1169              		.thumb_func
 1171              	HAL_I2S_DMAResume:
 1172              	.LFB147:
 996:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Process Locked */
 1173              		.loc 1 996 0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 0
 1176              		@ frame_needed = 0, uses_anonymous_args = 0
 1177              		@ link register save eliminated.
ARM GAS  /tmp/cczIJhh6.s 			page 49


 1178              	.LVL113:
 998:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1179              		.loc 1 998 0
 1180 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1181 0004 DBB2     		uxtb	r3, r3
 1182 0006 012B     		cmp	r3, #1
 1183 0008 25D0     		beq	.L101
 998:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1184              		.loc 1 998 0 is_stmt 0 discriminator 2
 1185 000a 0123     		movs	r3, #1
 1186 000c 80F83830 		strb	r3, [r0, #56]
1000:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 1187              		.loc 1 1000 0 is_stmt 1 discriminator 2
 1188 0010 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1189 0014 DBB2     		uxtb	r3, r3
 1190 0016 032B     		cmp	r3, #3
 1191 0018 05D1     		bne	.L98
1003:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1192              		.loc 1 1003 0
 1193 001a 0268     		ldr	r2, [r0]
 1194 001c 5368     		ldr	r3, [r2, #4]
 1195 001e 43F00203 		orr	r3, r3, #2
 1196 0022 5360     		str	r3, [r2, #4]
 1197 0024 09E0     		b	.L99
 1198              	.L98:
1005:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 1199              		.loc 1 1005 0
 1200 0026 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1201 002a DBB2     		uxtb	r3, r3
 1202 002c 042B     		cmp	r3, #4
 1203 002e 04D1     		bne	.L99
1008:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1204              		.loc 1 1008 0
 1205 0030 0268     		ldr	r2, [r0]
 1206 0032 5368     		ldr	r3, [r2, #4]
 1207 0034 43F00103 		orr	r3, r3, #1
 1208 0038 5360     		str	r3, [r2, #4]
 1209              	.L99:
1012:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 1210              		.loc 1 1012 0
 1211 003a 0368     		ldr	r3, [r0]
 1212 003c DA69     		ldr	r2, [r3, #28]
 1213 003e 12F4806F 		tst	r2, #1024
 1214 0042 03D1     		bne	.L100
1015:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1215              		.loc 1 1015 0
 1216 0044 DA69     		ldr	r2, [r3, #28]
 1217 0046 42F48062 		orr	r2, r2, #1024
 1218 004a DA61     		str	r2, [r3, #28]
 1219              	.L100:
1019:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1220              		.loc 1 1019 0
 1221 004c 0023     		movs	r3, #0
 1222 004e 80F83830 		strb	r3, [r0, #56]
1021:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 1223              		.loc 1 1021 0
 1224 0052 1846     		mov	r0, r3
ARM GAS  /tmp/cczIJhh6.s 			page 50


 1225              	.LVL114:
 1226 0054 7047     		bx	lr
 1227              	.LVL115:
 1228              	.L101:
 998:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1229              		.loc 1 998 0
 1230 0056 0220     		movs	r0, #2
 1231              	.LVL116:
1022:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1232              		.loc 1 1022 0
 1233 0058 7047     		bx	lr
 1234              		.cfi_endproc
 1235              	.LFE147:
 1237 005a 00BF     		.section	.text.HAL_I2S_DMAStop,"ax",%progbits
 1238              		.align	2
 1239              		.global	HAL_I2S_DMAStop
 1240              		.thumb
 1241              		.thumb_func
 1243              	HAL_I2S_DMAStop:
 1244              	.LFB148:
1031:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Process Locked */
 1245              		.loc 1 1031 0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 0
 1248              		@ frame_needed = 0, uses_anonymous_args = 0
 1249              	.LVL117:
1033:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1250              		.loc 1 1033 0
 1251 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1252 0004 DBB2     		uxtb	r3, r3
 1253 0006 012B     		cmp	r3, #1
 1254 0008 2ED0     		beq	.L106
1031:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Process Locked */
 1255              		.loc 1 1031 0 discriminator 2
 1256 000a 10B5     		push	{r4, lr}
 1257              	.LCFI13:
 1258              		.cfi_def_cfa_offset 8
 1259              		.cfi_offset 4, -8
 1260              		.cfi_offset 14, -4
 1261 000c 0446     		mov	r4, r0
1033:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1262              		.loc 1 1033 0 discriminator 2
 1263 000e 0123     		movs	r3, #1
 1264 0010 80F83830 		strb	r3, [r0, #56]
1036:HALLIB/Src/stm32f7xx_hal_i2s.c ****   CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 1265              		.loc 1 1036 0 discriminator 2
 1266 0014 0268     		ldr	r2, [r0]
 1267 0016 5368     		ldr	r3, [r2, #4]
 1268 0018 23F00203 		bic	r3, r3, #2
 1269 001c 5360     		str	r3, [r2, #4]
1037:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1270              		.loc 1 1037 0 discriminator 2
 1271 001e 0268     		ldr	r2, [r0]
 1272 0020 5368     		ldr	r3, [r2, #4]
 1273 0022 23F00103 		bic	r3, r3, #1
 1274 0026 5360     		str	r3, [r2, #4]
1040:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
ARM GAS  /tmp/cczIJhh6.s 			page 51


 1275              		.loc 1 1040 0 discriminator 2
 1276 0028 036B     		ldr	r3, [r0, #48]
 1277 002a 3BB1     		cbz	r3, .L104
1043:HALLIB/Src/stm32f7xx_hal_i2s.c ****     HAL_DMA_Abort(hi2s->hdmatx);
 1278              		.loc 1 1043 0
 1279 002c 1A68     		ldr	r2, [r3]
 1280 002e 1368     		ldr	r3, [r2]
 1281 0030 23F00103 		bic	r3, r3, #1
 1282 0034 1360     		str	r3, [r2]
1044:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1283              		.loc 1 1044 0
 1284 0036 006B     		ldr	r0, [r0, #48]
 1285              	.LVL118:
 1286 0038 FFF7FEFF 		bl	HAL_DMA_Abort
 1287              	.LVL119:
 1288              	.L104:
1047:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 1289              		.loc 1 1047 0
 1290 003c 636B     		ldr	r3, [r4, #52]
 1291 003e 3BB1     		cbz	r3, .L105
1050:HALLIB/Src/stm32f7xx_hal_i2s.c ****     HAL_DMA_Abort(hi2s->hdmarx);
 1292              		.loc 1 1050 0
 1293 0040 1A68     		ldr	r2, [r3]
 1294 0042 1368     		ldr	r3, [r2]
 1295 0044 23F00103 		bic	r3, r3, #1
 1296 0048 1360     		str	r3, [r2]
1051:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1297              		.loc 1 1051 0
 1298 004a 606B     		ldr	r0, [r4, #52]
 1299 004c FFF7FEFF 		bl	HAL_DMA_Abort
 1300              	.LVL120:
 1301              	.L105:
1055:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1302              		.loc 1 1055 0
 1303 0050 2268     		ldr	r2, [r4]
 1304 0052 D369     		ldr	r3, [r2, #28]
 1305 0054 23F48063 		bic	r3, r3, #1024
 1306 0058 D361     		str	r3, [r2, #28]
1057:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1307              		.loc 1 1057 0
 1308 005a 0123     		movs	r3, #1
 1309 005c 84F83930 		strb	r3, [r4, #57]
1060:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1310              		.loc 1 1060 0
 1311 0060 0020     		movs	r0, #0
 1312 0062 84F83800 		strb	r0, [r4, #56]
1062:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 1313              		.loc 1 1062 0
 1314 0066 10BD     		pop	{r4, pc}
 1315              	.LVL121:
 1316              	.L106:
 1317              	.LCFI14:
 1318              		.cfi_def_cfa_offset 0
 1319              		.cfi_restore 4
 1320              		.cfi_restore 14
1033:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1321              		.loc 1 1033 0
ARM GAS  /tmp/cczIJhh6.s 			page 52


 1322 0068 0220     		movs	r0, #2
 1323              	.LVL122:
 1324 006a 7047     		bx	lr
 1325              		.cfi_endproc
 1326              	.LFE148:
 1328              		.section	.text.HAL_I2S_TxHalfCpltCallback,"ax",%progbits
 1329              		.align	2
 1330              		.weak	HAL_I2S_TxHalfCpltCallback
 1331              		.thumb
 1332              		.thumb_func
 1334              	HAL_I2S_TxHalfCpltCallback:
 1335              	.LFB151:
1208:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
 1336              		.loc 1 1208 0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 0
 1339              		@ frame_needed = 0, uses_anonymous_args = 0
 1340              		@ link register save eliminated.
 1341              	.LVL123:
 1342 0000 7047     		bx	lr
 1343              		.cfi_endproc
 1344              	.LFE151:
 1346 0002 00BF     		.section	.text.I2S_DMATxHalfCplt,"ax",%progbits
 1347              		.align	2
 1348              		.thumb
 1349              		.thumb_func
 1351              	I2S_DMATxHalfCplt:
 1352              	.LFB160:
1384:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1385:HALLIB/Src/stm32f7xx_hal_i2s.c **** /** @addtogroup I2S_Private_Functions I2S Private Functions
1386:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @{
1387:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1388:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1389:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief DMA I2S transmit process complete callback 
1390:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1391:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *                the configuration information for the specified DMA module.
1392:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1393:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1394:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)   
1395:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1396:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
1397:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1398:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
1399:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
1400:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->TxXferCount = 0;
1401:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1402:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Disable Tx DMA Request */
1403:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
1404:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
1405:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
1406:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1407:HALLIB/Src/stm32f7xx_hal_i2s.c ****       if(hi2s->RxXferCount == 0)
1408:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
1409:HALLIB/Src/stm32f7xx_hal_i2s.c ****         hi2s->State = HAL_I2S_STATE_READY;
1410:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
1411:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
1412:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
ARM GAS  /tmp/cczIJhh6.s 			page 53


1413:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1414:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->State = HAL_I2S_STATE_READY; 
1415:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
1416:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1417:HALLIB/Src/stm32f7xx_hal_i2s.c ****   HAL_I2S_TxCpltCallback(hi2s);
1418:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1419:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1420:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1421:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief DMA I2S transmit process half complete callback 
1422:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1423:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *                the configuration information for the specified DMA module.
1424:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1425:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1426:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
1427:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 1353              		.loc 1 1427 0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 1357              	.LVL124:
 1358              		.loc 1 1427 0
 1359 0000 08B5     		push	{r3, lr}
 1360              	.LCFI15:
 1361              		.cfi_def_cfa_offset 8
 1362              		.cfi_offset 3, -8
 1363              		.cfi_offset 14, -4
 1364              	.LVL125:
1428:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
1429:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1430:HALLIB/Src/stm32f7xx_hal_i2s.c ****   HAL_I2S_TxHalfCpltCallback(hi2s);
 1365              		.loc 1 1430 0
 1366 0002 806B     		ldr	r0, [r0, #56]
 1367              	.LVL126:
 1368 0004 FFF7FEFF 		bl	HAL_I2S_TxHalfCpltCallback
 1369              	.LVL127:
 1370 0008 08BD     		pop	{r3, pc}
 1371              		.cfi_endproc
 1372              	.LFE160:
 1374 000a 00BF     		.section	.text.HAL_I2S_TxCpltCallback,"ax",%progbits
 1375              		.align	2
 1376              		.weak	HAL_I2S_TxCpltCallback
 1377              		.thumb
 1378              		.thumb_func
 1380              	HAL_I2S_TxCpltCallback:
 1381              	.LFB152:
1224:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
 1382              		.loc 1 1224 0
 1383              		.cfi_startproc
 1384              		@ args = 0, pretend = 0, frame = 0
 1385              		@ frame_needed = 0, uses_anonymous_args = 0
 1386              		@ link register save eliminated.
 1387              	.LVL128:
 1388 0000 7047     		bx	lr
 1389              		.cfi_endproc
 1390              	.LFE152:
 1392 0002 00BF     		.section	.text.I2S_DMATxCplt,"ax",%progbits
 1393              		.align	2
ARM GAS  /tmp/cczIJhh6.s 			page 54


 1394              		.thumb
 1395              		.thumb_func
 1397              	I2S_DMATxCplt:
 1398              	.LFB159:
1395:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 1399              		.loc 1 1395 0
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 0
 1402              		@ frame_needed = 0, uses_anonymous_args = 0
 1403              	.LVL129:
1395:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 1404              		.loc 1 1395 0
 1405 0000 08B5     		push	{r3, lr}
 1406              	.LCFI16:
 1407              		.cfi_def_cfa_offset 8
 1408              		.cfi_offset 3, -8
 1409              		.cfi_offset 14, -4
1396:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 1410              		.loc 1 1396 0
 1411 0002 836B     		ldr	r3, [r0, #56]
 1412              	.LVL130:
1398:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 1413              		.loc 1 1398 0
 1414 0004 0268     		ldr	r2, [r0]
 1415 0006 1268     		ldr	r2, [r2]
 1416 0008 12F4807F 		tst	r2, #256
 1417 000c 15D1     		bne	.L114
1400:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1418              		.loc 1 1400 0
 1419 000e 0022     		movs	r2, #0
 1420 0010 DA84     		strh	r2, [r3, #38]	@ movhi
1403:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 1421              		.loc 1 1403 0
 1422 0012 1968     		ldr	r1, [r3]
 1423 0014 4A68     		ldr	r2, [r1, #4]
 1424 0016 22F00202 		bic	r2, r2, #2
 1425 001a 4A60     		str	r2, [r1, #4]
1405:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 1426              		.loc 1 1405 0
 1427 001c 93F83920 		ldrb	r2, [r3, #57]	@ zero_extendqisi2
 1428 0020 D2B2     		uxtb	r2, r2
 1429 0022 052A     		cmp	r2, #5
 1430 0024 06D1     		bne	.L115
1407:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 1431              		.loc 1 1407 0
 1432 0026 DA8D     		ldrh	r2, [r3, #46]
 1433 0028 92B2     		uxth	r2, r2
 1434 002a 32B9     		cbnz	r2, .L114
1409:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 1435              		.loc 1 1409 0
 1436 002c 0122     		movs	r2, #1
 1437 002e 83F83920 		strb	r2, [r3, #57]
 1438 0032 02E0     		b	.L114
 1439              	.L115:
1414:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 1440              		.loc 1 1414 0
 1441 0034 0122     		movs	r2, #1
ARM GAS  /tmp/cczIJhh6.s 			page 55


 1442 0036 83F83920 		strb	r2, [r3, #57]
 1443              	.L114:
1417:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 1444              		.loc 1 1417 0
 1445 003a 1846     		mov	r0, r3
 1446              	.LVL131:
 1447 003c FFF7FEFF 		bl	HAL_I2S_TxCpltCallback
 1448              	.LVL132:
 1449 0040 08BD     		pop	{r3, pc}
 1450              		.cfi_endproc
 1451              	.LFE159:
 1453 0042 00BF     		.section	.text.I2S_Transmit_IT,"ax",%progbits
 1454              		.align	2
 1455              		.thumb
 1456              		.thumb_func
 1458              	I2S_Transmit_IT:
 1459              	.LFB164:
1431:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1432:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1433:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1434:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief DMA I2S receive process complete callback 
1435:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1436:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *                the configuration information for the specified DMA module.
1437:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1438:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1439:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)   
1440:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1441:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
1442:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1443:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
1444:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
1445:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Disable Rx DMA Request */
1446:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
1447:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1448:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->RxXferCount = 0;
1449:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
1450:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1451:HALLIB/Src/stm32f7xx_hal_i2s.c ****       if(hi2s->TxXferCount == 0)
1452:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
1453:HALLIB/Src/stm32f7xx_hal_i2s.c ****         hi2s->State = HAL_I2S_STATE_READY;
1454:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
1455:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
1456:HALLIB/Src/stm32f7xx_hal_i2s.c ****     else
1457:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
1458:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->State = HAL_I2S_STATE_READY; 
1459:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
1460:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1461:HALLIB/Src/stm32f7xx_hal_i2s.c ****   HAL_I2S_RxCpltCallback(hi2s); 
1462:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1463:HALLIB/Src/stm32f7xx_hal_i2s.c ****       
1464:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1465:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief DMA I2S receive process half complete callback 
1466:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1467:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *                the configuration information for the specified DMA module.
1468:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1469:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1470:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
ARM GAS  /tmp/cczIJhh6.s 			page 56


1471:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1472:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
1473:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1474:HALLIB/Src/stm32f7xx_hal_i2s.c ****   HAL_I2S_RxHalfCpltCallback(hi2s); 
1475:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1476:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1477:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1478:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief DMA I2S communication error callback 
1479:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1480:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *                the configuration information for the specified DMA module.
1481:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1482:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1483:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_DMAError(DMA_HandleTypeDef *hdma)   
1484:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
1485:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1486:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1487:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Disable Rx and Tx DMA Request */
1488:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->Instance->CR2 &= (uint32_t)(~(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
1489:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->TxXferCount = 0;
1490:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->RxXferCount = 0;
1491:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
1492:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->State= HAL_I2S_STATE_READY;
1493:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1494:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Set the error code and execute error callback*/
1495:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->ErrorCode |= HAL_I2S_ERROR_DMA;
1496:HALLIB/Src/stm32f7xx_hal_i2s.c ****   HAL_I2S_ErrorCallback(hi2s);
1497:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1498:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1499:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1500:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Transmit an amount of data in non-blocking mode with Interrupt
1501:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
1502:HALLIB/Src/stm32f7xx_hal_i2s.c ****   *         the configuration information for I2S module
1503:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1504:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1505:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
1506:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 1460              		.loc 1 1506 0
 1461              		.cfi_startproc
 1462              		@ args = 0, pretend = 0, frame = 0
 1463              		@ frame_needed = 0, uses_anonymous_args = 0
 1464              	.LVL133:
 1465 0000 08B5     		push	{r3, lr}
 1466              	.LCFI17:
 1467              		.cfi_def_cfa_offset 8
 1468              		.cfi_offset 3, -8
 1469              		.cfi_offset 14, -4
1507:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Transmit data */
1508:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 1470              		.loc 1 1508 0
 1471 0002 0268     		ldr	r2, [r0]
 1472 0004 036A     		ldr	r3, [r0, #32]
 1473 0006 991C     		adds	r1, r3, #2
 1474 0008 0162     		str	r1, [r0, #32]
 1475 000a 1B88     		ldrh	r3, [r3]
 1476 000c D360     		str	r3, [r2, #12]
1509:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->TxXferCount--;	
 1477              		.loc 1 1509 0
ARM GAS  /tmp/cczIJhh6.s 			page 57


 1478 000e C38C     		ldrh	r3, [r0, #38]
 1479 0010 9BB2     		uxth	r3, r3
 1480 0012 013B     		subs	r3, r3, #1
 1481 0014 9BB2     		uxth	r3, r3
 1482 0016 C384     		strh	r3, [r0, #38]	@ movhi
1510:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1511:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->TxXferCount == 0)
 1483              		.loc 1 1511 0
 1484 0018 C38C     		ldrh	r3, [r0, #38]
 1485 001a 9BB2     		uxth	r3, r3
 1486 001c 4BB9     		cbnz	r3, .L117
1512:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
1513:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Disable TXE and ERR interrupt */
1514:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 1487              		.loc 1 1514 0
 1488 001e 0268     		ldr	r2, [r0]
 1489 0020 5368     		ldr	r3, [r2, #4]
 1490 0022 23F0A003 		bic	r3, r3, #160
 1491 0026 5360     		str	r3, [r2, #4]
1515:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1516:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_READY;
 1492              		.loc 1 1516 0
 1493 0028 0123     		movs	r3, #1
 1494 002a 80F83930 		strb	r3, [r0, #57]
1517:HALLIB/Src/stm32f7xx_hal_i2s.c ****     HAL_I2S_TxCpltCallback(hi2s);
 1495              		.loc 1 1517 0
 1496 002e FFF7FEFF 		bl	HAL_I2S_TxCpltCallback
 1497              	.LVL134:
 1498              	.L117:
 1499 0032 08BD     		pop	{r3, pc}
 1500              		.cfi_endproc
 1501              	.LFE164:
 1503              		.section	.text.HAL_I2S_RxHalfCpltCallback,"ax",%progbits
 1504              		.align	2
 1505              		.weak	HAL_I2S_RxHalfCpltCallback
 1506              		.thumb
 1507              		.thumb_func
 1509              	HAL_I2S_RxHalfCpltCallback:
 1510              	.LFB153:
1240:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
 1511              		.loc 1 1240 0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 0
 1514              		@ frame_needed = 0, uses_anonymous_args = 0
 1515              		@ link register save eliminated.
 1516              	.LVL135:
 1517 0000 7047     		bx	lr
 1518              		.cfi_endproc
 1519              	.LFE153:
 1521 0002 00BF     		.section	.text.I2S_DMARxHalfCplt,"ax",%progbits
 1522              		.align	2
 1523              		.thumb
 1524              		.thumb_func
 1526              	I2S_DMARxHalfCplt:
 1527              	.LFB162:
1471:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 1528              		.loc 1 1471 0
ARM GAS  /tmp/cczIJhh6.s 			page 58


 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 0
 1531              		@ frame_needed = 0, uses_anonymous_args = 0
 1532              	.LVL136:
1471:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 1533              		.loc 1 1471 0
 1534 0000 08B5     		push	{r3, lr}
 1535              	.LCFI18:
 1536              		.cfi_def_cfa_offset 8
 1537              		.cfi_offset 3, -8
 1538              		.cfi_offset 14, -4
 1539              	.LVL137:
1474:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 1540              		.loc 1 1474 0
 1541 0002 806B     		ldr	r0, [r0, #56]
 1542              	.LVL138:
 1543 0004 FFF7FEFF 		bl	HAL_I2S_RxHalfCpltCallback
 1544              	.LVL139:
 1545 0008 08BD     		pop	{r3, pc}
 1546              		.cfi_endproc
 1547              	.LFE162:
 1549 000a 00BF     		.section	.text.HAL_I2S_RxCpltCallback,"ax",%progbits
 1550              		.align	2
 1551              		.weak	HAL_I2S_RxCpltCallback
 1552              		.thumb
 1553              		.thumb_func
 1555              	HAL_I2S_RxCpltCallback:
 1556              	.LFB154:
1256:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
 1557              		.loc 1 1256 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 0
 1560              		@ frame_needed = 0, uses_anonymous_args = 0
 1561              		@ link register save eliminated.
 1562              	.LVL140:
 1563 0000 7047     		bx	lr
 1564              		.cfi_endproc
 1565              	.LFE154:
 1567 0002 00BF     		.section	.text.I2S_DMARxCplt,"ax",%progbits
 1568              		.align	2
 1569              		.thumb
 1570              		.thumb_func
 1572              	I2S_DMARxCplt:
 1573              	.LFB161:
1440:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 1574              		.loc 1 1440 0
 1575              		.cfi_startproc
 1576              		@ args = 0, pretend = 0, frame = 0
 1577              		@ frame_needed = 0, uses_anonymous_args = 0
 1578              	.LVL141:
1440:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 1579              		.loc 1 1440 0
 1580 0000 08B5     		push	{r3, lr}
 1581              	.LCFI19:
 1582              		.cfi_def_cfa_offset 8
 1583              		.cfi_offset 3, -8
 1584              		.cfi_offset 14, -4
ARM GAS  /tmp/cczIJhh6.s 			page 59


1441:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1585              		.loc 1 1441 0
 1586 0002 836B     		ldr	r3, [r0, #56]
 1587              	.LVL142:
1443:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 1588              		.loc 1 1443 0
 1589 0004 0268     		ldr	r2, [r0]
 1590 0006 1268     		ldr	r2, [r2]
 1591 0008 12F4807F 		tst	r2, #256
 1592 000c 15D1     		bne	.L125
1446:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1593              		.loc 1 1446 0
 1594 000e 1968     		ldr	r1, [r3]
 1595 0010 4A68     		ldr	r2, [r1, #4]
 1596 0012 22F00102 		bic	r2, r2, #1
 1597 0016 4A60     		str	r2, [r1, #4]
1448:HALLIB/Src/stm32f7xx_hal_i2s.c ****     if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 1598              		.loc 1 1448 0
 1599 0018 0022     		movs	r2, #0
 1600 001a DA85     		strh	r2, [r3, #46]	@ movhi
1449:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 1601              		.loc 1 1449 0
 1602 001c 93F83920 		ldrb	r2, [r3, #57]	@ zero_extendqisi2
 1603 0020 D2B2     		uxtb	r2, r2
 1604 0022 052A     		cmp	r2, #5
 1605 0024 06D1     		bne	.L126
1451:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 1606              		.loc 1 1451 0
 1607 0026 DA8C     		ldrh	r2, [r3, #38]
 1608 0028 92B2     		uxth	r2, r2
 1609 002a 32B9     		cbnz	r2, .L125
1453:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 1610              		.loc 1 1453 0
 1611 002c 0122     		movs	r2, #1
 1612 002e 83F83920 		strb	r2, [r3, #57]
 1613 0032 02E0     		b	.L125
 1614              	.L126:
1458:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 1615              		.loc 1 1458 0
 1616 0034 0122     		movs	r2, #1
 1617 0036 83F83920 		strb	r2, [r3, #57]
 1618              	.L125:
1461:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 1619              		.loc 1 1461 0
 1620 003a 1846     		mov	r0, r3
 1621              	.LVL143:
 1622 003c FFF7FEFF 		bl	HAL_I2S_RxCpltCallback
 1623              	.LVL144:
 1624 0040 08BD     		pop	{r3, pc}
 1625              		.cfi_endproc
 1626              	.LFE161:
 1628 0042 00BF     		.section	.text.I2S_Receive_IT,"ax",%progbits
 1629              		.align	2
 1630              		.thumb
 1631              		.thumb_func
 1633              	I2S_Receive_IT:
 1634              	.LFB165:
ARM GAS  /tmp/cczIJhh6.s 			page 60


1518:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
1519:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
1520:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1521:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
1522:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @brief Receive an amount of data in non-blocking mode with Interrupt
1523:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @param hi2s I2S handle
1524:HALLIB/Src/stm32f7xx_hal_i2s.c ****   * @retval None
1525:HALLIB/Src/stm32f7xx_hal_i2s.c ****   */
1526:HALLIB/Src/stm32f7xx_hal_i2s.c **** static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
1527:HALLIB/Src/stm32f7xx_hal_i2s.c **** {
 1635              		.loc 1 1527 0
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 0
 1638              		@ frame_needed = 0, uses_anonymous_args = 0
 1639              	.LVL145:
 1640 0000 08B5     		push	{r3, lr}
 1641              	.LCFI20:
 1642              		.cfi_def_cfa_offset 8
 1643              		.cfi_offset 3, -8
 1644              		.cfi_offset 14, -4
1528:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Receive data */    
1529:HALLIB/Src/stm32f7xx_hal_i2s.c ****   (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 1645              		.loc 1 1529 0
 1646 0002 836A     		ldr	r3, [r0, #40]
 1647 0004 9A1C     		adds	r2, r3, #2
 1648 0006 8262     		str	r2, [r0, #40]
 1649 0008 0268     		ldr	r2, [r0]
 1650 000a D268     		ldr	r2, [r2, #12]
 1651 000c 1A80     		strh	r2, [r3]	@ movhi
1530:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->RxXferCount--;
 1652              		.loc 1 1530 0
 1653 000e C38D     		ldrh	r3, [r0, #46]
 1654 0010 9BB2     		uxth	r3, r3
 1655 0012 013B     		subs	r3, r3, #1
 1656 0014 9BB2     		uxth	r3, r3
 1657 0016 C385     		strh	r3, [r0, #46]	@ movhi
1531:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1532:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if(hi2s->RxXferCount == 0)
 1658              		.loc 1 1532 0
 1659 0018 C38D     		ldrh	r3, [r0, #46]
 1660 001a 9BB2     		uxth	r3, r3
 1661 001c 4BB9     		cbnz	r3, .L128
1533:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {    
1534:HALLIB/Src/stm32f7xx_hal_i2s.c ****     /* Disable RXNE and ERR interrupt */
1535:HALLIB/Src/stm32f7xx_hal_i2s.c ****     __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 1662              		.loc 1 1535 0
 1663 001e 0268     		ldr	r2, [r0]
 1664 0020 5368     		ldr	r3, [r2, #4]
 1665 0022 23F06003 		bic	r3, r3, #96
 1666 0026 5360     		str	r3, [r2, #4]
1536:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
1537:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_READY;     
 1667              		.loc 1 1537 0
 1668 0028 0123     		movs	r3, #1
 1669 002a 80F83930 		strb	r3, [r0, #57]
1538:HALLIB/Src/stm32f7xx_hal_i2s.c ****     HAL_I2S_RxCpltCallback(hi2s); 
 1670              		.loc 1 1538 0
ARM GAS  /tmp/cczIJhh6.s 			page 61


 1671 002e FFF7FEFF 		bl	HAL_I2S_RxCpltCallback
 1672              	.LVL146:
 1673              	.L128:
 1674 0032 08BD     		pop	{r3, pc}
 1675              		.cfi_endproc
 1676              	.LFE165:
 1678              		.section	.text.HAL_I2S_ErrorCallback,"ax",%progbits
 1679              		.align	2
 1680              		.weak	HAL_I2S_ErrorCallback
 1681              		.thumb
 1682              		.thumb_func
 1684              	HAL_I2S_ErrorCallback:
 1685              	.LFB155:
1272:HALLIB/Src/stm32f7xx_hal_i2s.c ****   /* Prevent unused argument(s) compilation warning */
 1686              		.loc 1 1272 0
 1687              		.cfi_startproc
 1688              		@ args = 0, pretend = 0, frame = 0
 1689              		@ frame_needed = 0, uses_anonymous_args = 0
 1690              		@ link register save eliminated.
 1691              	.LVL147:
 1692 0000 7047     		bx	lr
 1693              		.cfi_endproc
 1694              	.LFE155:
 1696 0002 00BF     		.section	.text.HAL_I2S_Transmit,"ax",%progbits
 1697              		.align	2
 1698              		.global	HAL_I2S_Transmit
 1699              		.thumb
 1700              		.thumb_func
 1702              	HAL_I2S_Transmit:
 1703              	.LFB140:
 466:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if((pData == NULL ) || (Size == 0)) 
 1704              		.loc 1 466 0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 0
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708              	.LVL148:
 467:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 1709              		.loc 1 467 0
 1710 0000 002A     		cmp	r2, #0
 1711 0002 18BF     		it	ne
 1712 0004 0029     		cmpne	r1, #0
 1713 0006 00F08780 		beq	.L143
 466:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if((pData == NULL ) || (Size == 0)) 
 1714              		.loc 1 466 0
 1715 000a 70B5     		push	{r4, r5, r6, lr}
 1716              	.LCFI21:
 1717              		.cfi_def_cfa_offset 16
 1718              		.cfi_offset 4, -16
 1719              		.cfi_offset 5, -12
 1720              		.cfi_offset 6, -8
 1721              		.cfi_offset 14, -4
 1722 000c 0446     		mov	r4, r0
 1723 000e 1D46     		mov	r5, r3
 1724 0010 0B46     		mov	r3, r1
 1725              	.LVL149:
 1726 0012 1046     		mov	r0, r2
 1727              	.LVL150:
ARM GAS  /tmp/cczIJhh6.s 			page 62


 472:HALLIB/Src/stm32f7xx_hal_i2s.c ****   { 
 1728              		.loc 1 472 0
 1729 0014 94F83920 		ldrb	r2, [r4, #57]	@ zero_extendqisi2
 1730              	.LVL151:
 1731 0018 D2B2     		uxtb	r2, r2
 1732 001a 012A     		cmp	r2, #1
 1733 001c 7ED1     		bne	.L144
 474:HALLIB/Src/stm32f7xx_hal_i2s.c ****        ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B)
 1734              		.loc 1 474 0
 1735 001e 2168     		ldr	r1, [r4]
 1736              	.LVL152:
 1737 0020 CA69     		ldr	r2, [r1, #28]
 1738 0022 02F00702 		and	r2, r2, #7
 1739 0026 032A     		cmp	r2, #3
 1740 0028 04D0     		beq	.L134
 475:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 1741              		.loc 1 475 0 discriminator 1
 1742 002a CA69     		ldr	r2, [r1, #28]
 1743 002c 02F00702 		and	r2, r2, #7
 474:HALLIB/Src/stm32f7xx_hal_i2s.c ****        ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B)
 1744              		.loc 1 474 0 discriminator 1
 1745 0030 052A     		cmp	r2, #5
 1746 0032 04D1     		bne	.L135
 1747              	.L134:
 477:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = (Size << 1);
 1748              		.loc 1 477 0
 1749 0034 4000     		lsls	r0, r0, #1
 1750 0036 80B2     		uxth	r0, r0
 1751 0038 A084     		strh	r0, [r4, #36]	@ movhi
 478:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 1752              		.loc 1 478 0
 1753 003a E084     		strh	r0, [r4, #38]	@ movhi
 1754 003c 01E0     		b	.L136
 1755              	.L135:
 482:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount = Size;
 1756              		.loc 1 482 0
 1757 003e A084     		strh	r0, [r4, #36]	@ movhi
 483:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 1758              		.loc 1 483 0
 1759 0040 E084     		strh	r0, [r4, #38]	@ movhi
 1760              	.L136:
 487:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 1761              		.loc 1 487 0
 1762 0042 94F83820 		ldrb	r2, [r4, #56]	@ zero_extendqisi2
 1763 0046 D2B2     		uxtb	r2, r2
 1764 0048 012A     		cmp	r2, #1
 1765 004a 69D0     		beq	.L145
 487:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 1766              		.loc 1 487 0 is_stmt 0 discriminator 2
 1767 004c 0122     		movs	r2, #1
 1768 004e 84F83820 		strb	r2, [r4, #56]
 489:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_TX;
 1769              		.loc 1 489 0 is_stmt 1 discriminator 2
 1770 0052 0022     		movs	r2, #0
 1771 0054 E263     		str	r2, [r4, #60]
 490:HALLIB/Src/stm32f7xx_hal_i2s.c ****    
 1772              		.loc 1 490 0 discriminator 2
ARM GAS  /tmp/cczIJhh6.s 			page 63


 1773 0056 0322     		movs	r2, #3
 1774 0058 84F83920 		strb	r2, [r4, #57]
 493:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 1775              		.loc 1 493 0 discriminator 2
 1776 005c 2268     		ldr	r2, [r4]
 1777 005e D169     		ldr	r1, [r2, #28]
 1778 0060 11F4806F 		tst	r1, #1024
 1779 0064 32D1     		bne	.L139
 496:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 1780              		.loc 1 496 0
 1781 0066 D169     		ldr	r1, [r2, #28]
 1782 0068 41F48061 		orr	r1, r1, #1024
 1783 006c D161     		str	r1, [r2, #28]
 1784 006e 2DE0     		b	.L139
 1785              	.L140:
 501:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount--;   
 1786              		.loc 1 501 0
 1787 0070 2268     		ldr	r2, [r4]
 1788 0072 9E1C     		adds	r6, r3, #2
 1789              	.LVL153:
 1790 0074 1B88     		ldrh	r3, [r3]
 1791 0076 D360     		str	r3, [r2, #12]
 502:HALLIB/Src/stm32f7xx_hal_i2s.c ****       /* Wait until TXE flag is set */
 1792              		.loc 1 502 0
 1793 0078 E38C     		ldrh	r3, [r4, #38]
 1794 007a 9BB2     		uxth	r3, r3
 1795 007c 013B     		subs	r3, r3, #1
 1796 007e 9BB2     		uxth	r3, r3
 1797 0080 E384     		strh	r3, [r4, #38]	@ movhi
 504:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 1798              		.loc 1 504 0
 1799 0082 2B46     		mov	r3, r5
 1800 0084 0122     		movs	r2, #1
 1801 0086 0221     		movs	r1, #2
 1802 0088 2046     		mov	r0, r4
 1803 008a FFF7FEFF 		bl	I2S_WaitFlagStateUntilTimeout
 1804              	.LVL154:
 1805 008e 40B1     		cbz	r0, .L138
 507:HALLIB/Src/stm32f7xx_hal_i2s.c ****         HAL_I2S_ErrorCallback(hi2s);
 1806              		.loc 1 507 0
 1807 0090 E36B     		ldr	r3, [r4, #60]
 1808 0092 43F00103 		orr	r3, r3, #1
 1809 0096 E363     		str	r3, [r4, #60]
 508:HALLIB/Src/stm32f7xx_hal_i2s.c ****         return HAL_TIMEOUT;
 1810              		.loc 1 508 0
 1811 0098 2046     		mov	r0, r4
 1812 009a FFF7FEFF 		bl	HAL_I2S_ErrorCallback
 1813              	.LVL155:
 509:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 1814              		.loc 1 509 0
 1815 009e 0320     		movs	r0, #3
 1816 00a0 70BD     		pop	{r4, r5, r6, pc}
 1817              	.LVL156:
 1818              	.L138:
 513:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 1819              		.loc 1 513 0
 1820 00a2 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cczIJhh6.s 			page 64


 1821 00a4 9B68     		ldr	r3, [r3, #8]
 1822 00a6 13F0080F 		tst	r3, #8
 1823 00aa 0ED0     		beq	.L146
 516:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1824              		.loc 1 516 0
 1825 00ac 0125     		movs	r5, #1
 1826              	.LVL157:
 1827 00ae 84F83950 		strb	r5, [r4, #57]
 519:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1828              		.loc 1 519 0
 1829 00b2 0023     		movs	r3, #0
 1830 00b4 84F83830 		strb	r3, [r4, #56]
 522:HALLIB/Src/stm32f7xx_hal_i2s.c ****         HAL_I2S_ErrorCallback(hi2s);
 1831              		.loc 1 522 0
 1832 00b8 E36B     		ldr	r3, [r4, #60]
 1833 00ba 43F00403 		orr	r3, r3, #4
 1834 00be E363     		str	r3, [r4, #60]
 523:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1835              		.loc 1 523 0
 1836 00c0 2046     		mov	r0, r4
 1837 00c2 FFF7FEFF 		bl	HAL_I2S_ErrorCallback
 1838              	.LVL158:
 525:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 1839              		.loc 1 525 0
 1840 00c6 2846     		mov	r0, r5
 1841 00c8 70BD     		pop	{r4, r5, r6, pc}
 1842              	.LVL159:
 1843              	.L146:
 501:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->TxXferCount--;   
 1844              		.loc 1 501 0
 1845 00ca 3346     		mov	r3, r6
 1846              	.LVL160:
 1847              	.L139:
 499:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 1848              		.loc 1 499 0
 1849 00cc E28C     		ldrh	r2, [r4, #38]
 1850 00ce 92B2     		uxth	r2, r2
 1851 00d0 002A     		cmp	r2, #0
 1852 00d2 CDD1     		bne	.L140
 530:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 1853              		.loc 1 530 0
 1854 00d4 2368     		ldr	r3, [r4]
 1855              	.LVL161:
 1856 00d6 DA69     		ldr	r2, [r3, #28]
 1857 00d8 12F4407F 		tst	r2, #768
 1858 00dc 05D0     		beq	.L141
 530:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 1859              		.loc 1 530 0 is_stmt 0 discriminator 1
 1860 00de DB69     		ldr	r3, [r3, #28]
 1861 00e0 03F44073 		and	r3, r3, #768
 1862 00e4 B3F5807F 		cmp	r3, #256
 1863 00e8 0FD1     		bne	.L142
 1864              	.L141:
 533:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 1865              		.loc 1 533 0 is_stmt 1
 1866 00ea 2B46     		mov	r3, r5
 1867 00ec 0122     		movs	r2, #1
ARM GAS  /tmp/cczIJhh6.s 			page 65


 1868 00ee 8021     		movs	r1, #128
 1869 00f0 2046     		mov	r0, r4
 1870 00f2 FFF7FEFF 		bl	I2S_WaitFlagStateUntilTimeout
 1871              	.LVL162:
 1872 00f6 40B1     		cbz	r0, .L142
 536:HALLIB/Src/stm32f7xx_hal_i2s.c ****         HAL_I2S_ErrorCallback(hi2s);
 1873              		.loc 1 536 0
 1874 00f8 E36B     		ldr	r3, [r4, #60]
 1875 00fa 43F00103 		orr	r3, r3, #1
 1876 00fe E363     		str	r3, [r4, #60]
 537:HALLIB/Src/stm32f7xx_hal_i2s.c ****         return HAL_TIMEOUT;
 1877              		.loc 1 537 0
 1878 0100 2046     		mov	r0, r4
 1879 0102 FFF7FEFF 		bl	HAL_I2S_ErrorCallback
 1880              	.LVL163:
 538:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 1881              		.loc 1 538 0
 1882 0106 0320     		movs	r0, #3
 1883 0108 70BD     		pop	{r4, r5, r6, pc}
 1884              	.LVL164:
 1885              	.L142:
 542:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 1886              		.loc 1 542 0
 1887 010a 0123     		movs	r3, #1
 1888 010c 84F83930 		strb	r3, [r4, #57]
 545:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 1889              		.loc 1 545 0
 1890 0110 0020     		movs	r0, #0
 1891 0112 84F83800 		strb	r0, [r4, #56]
 547:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1892              		.loc 1 547 0
 1893 0116 70BD     		pop	{r4, r5, r6, pc}
 1894              	.LVL165:
 1895              	.L143:
 1896              	.LCFI22:
 1897              		.cfi_def_cfa_offset 0
 1898              		.cfi_restore 4
 1899              		.cfi_restore 5
 1900              		.cfi_restore 6
 1901              		.cfi_restore 14
 469:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1902              		.loc 1 469 0
 1903 0118 0120     		movs	r0, #1
 1904              	.LVL166:
 553:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1905              		.loc 1 553 0
 1906 011a 7047     		bx	lr
 1907              	.LVL167:
 1908              	.L144:
 1909              	.LCFI23:
 1910              		.cfi_def_cfa_offset 16
 1911              		.cfi_offset 4, -16
 1912              		.cfi_offset 5, -12
 1913              		.cfi_offset 6, -8
 1914              		.cfi_offset 14, -4
 551:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 1915              		.loc 1 551 0
ARM GAS  /tmp/cczIJhh6.s 			page 66


 1916 011c 0220     		movs	r0, #2
 1917 011e 70BD     		pop	{r4, r5, r6, pc}
 1918              	.LVL168:
 1919              	.L145:
 487:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 1920              		.loc 1 487 0
 1921 0120 0220     		movs	r0, #2
 553:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 1922              		.loc 1 553 0
 1923 0122 70BD     		pop	{r4, r5, r6, pc}
 1924              		.cfi_endproc
 1925              	.LFE140:
 1927              		.section	.text.HAL_I2S_Receive,"ax",%progbits
 1928              		.align	2
 1929              		.global	HAL_I2S_Receive
 1930              		.thumb
 1931              		.thumb_func
 1933              	HAL_I2S_Receive:
 1934              	.LFB141:
 573:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if((pData == NULL ) || (Size == 0)) 
 1935              		.loc 1 573 0
 1936              		.cfi_startproc
 1937              		@ args = 0, pretend = 0, frame = 8
 1938              		@ frame_needed = 0, uses_anonymous_args = 0
 1939              	.LVL169:
 574:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {
 1940              		.loc 1 574 0
 1941 0000 002A     		cmp	r2, #0
 1942 0002 18BF     		it	ne
 1943 0004 0029     		cmpne	r1, #0
 1944 0006 76D0     		beq	.L159
 573:HALLIB/Src/stm32f7xx_hal_i2s.c ****   if((pData == NULL ) || (Size == 0)) 
 1945              		.loc 1 573 0
 1946 0008 70B5     		push	{r4, r5, r6, lr}
 1947              	.LCFI24:
 1948              		.cfi_def_cfa_offset 16
 1949              		.cfi_offset 4, -16
 1950              		.cfi_offset 5, -12
 1951              		.cfi_offset 6, -8
 1952              		.cfi_offset 14, -4
 1953 000a 82B0     		sub	sp, sp, #8
 1954              	.LCFI25:
 1955              		.cfi_def_cfa_offset 24
 1956 000c 0446     		mov	r4, r0
 1957 000e 1E46     		mov	r6, r3
 1958 0010 0D46     		mov	r5, r1
 1959 0012 1046     		mov	r0, r2
 1960              	.LVL170:
 579:HALLIB/Src/stm32f7xx_hal_i2s.c ****   { 
 1961              		.loc 1 579 0
 1962 0014 94F83930 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 1963              	.LVL171:
 1964 0018 DBB2     		uxtb	r3, r3
 1965 001a 012B     		cmp	r3, #1
 1966 001c 6DD1     		bne	.L160
 581:HALLIB/Src/stm32f7xx_hal_i2s.c ****        ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B)
 1967              		.loc 1 581 0
ARM GAS  /tmp/cczIJhh6.s 			page 67


 1968 001e 2268     		ldr	r2, [r4]
 1969              	.LVL172:
 1970 0020 D369     		ldr	r3, [r2, #28]
 1971 0022 03F00703 		and	r3, r3, #7
 1972 0026 032B     		cmp	r3, #3
 1973 0028 04D0     		beq	.L150
 582:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 1974              		.loc 1 582 0 discriminator 1
 1975 002a D369     		ldr	r3, [r2, #28]
 1976 002c 03F00703 		and	r3, r3, #7
 581:HALLIB/Src/stm32f7xx_hal_i2s.c ****        ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B)
 1977              		.loc 1 581 0 discriminator 1
 1978 0030 052B     		cmp	r3, #5
 1979 0032 04D1     		bne	.L151
 1980              	.L150:
 584:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = (Size << 1);
 1981              		.loc 1 584 0
 1982 0034 4000     		lsls	r0, r0, #1
 1983 0036 80B2     		uxth	r0, r0
 1984 0038 A085     		strh	r0, [r4, #44]	@ movhi
 585:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 1985              		.loc 1 585 0
 1986 003a E085     		strh	r0, [r4, #46]	@ movhi
 1987 003c 01E0     		b	.L152
 1988              	.L151:
 589:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount = Size;
 1989              		.loc 1 589 0
 1990 003e A085     		strh	r0, [r4, #44]	@ movhi
 590:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 1991              		.loc 1 590 0
 1992 0040 E085     		strh	r0, [r4, #46]	@ movhi
 1993              	.L152:
 593:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 1994              		.loc 1 593 0
 1995 0042 94F83830 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 1996 0046 DBB2     		uxtb	r3, r3
 1997 0048 012B     		cmp	r3, #1
 1998 004a 58D0     		beq	.L161
 593:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 1999              		.loc 1 593 0 is_stmt 0 discriminator 2
 2000 004c 0123     		movs	r3, #1
 2001 004e 84F83830 		strb	r3, [r4, #56]
 595:HALLIB/Src/stm32f7xx_hal_i2s.c ****     hi2s->State = HAL_I2S_STATE_BUSY_RX;
 2002              		.loc 1 595 0 is_stmt 1 discriminator 2
 2003 0052 0023     		movs	r3, #0
 2004 0054 E363     		str	r3, [r4, #60]
 596:HALLIB/Src/stm32f7xx_hal_i2s.c ****         
 2005              		.loc 1 596 0 discriminator 2
 2006 0056 0423     		movs	r3, #4
 2007 0058 84F83930 		strb	r3, [r4, #57]
 599:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 2008              		.loc 1 599 0 discriminator 2
 2009 005c 2368     		ldr	r3, [r4]
 2010 005e DA69     		ldr	r2, [r3, #28]
 2011 0060 12F4806F 		tst	r2, #1024
 2012 0064 03D1     		bne	.L153
 602:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
ARM GAS  /tmp/cczIJhh6.s 			page 68


 2013              		.loc 1 602 0
 2014 0066 DA69     		ldr	r2, [r3, #28]
 2015 0068 42F48062 		orr	r2, r2, #1024
 2016 006c DA61     		str	r2, [r3, #28]
 2017              	.L153:
 606:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 2018              		.loc 1 606 0
 2019 006e 2268     		ldr	r2, [r4]
 2020 0070 D369     		ldr	r3, [r2, #28]
 2021 0072 03F44073 		and	r3, r3, #768
 2022 0076 B3F5407F 		cmp	r3, #768
 2023 007a 31D1     		bne	.L155
 2024              	.LBB3:
 610:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 2025              		.loc 1 610 0
 2026 007c D368     		ldr	r3, [r2, #12]
 2027 007e 0193     		str	r3, [sp, #4]
 2028 0080 9368     		ldr	r3, [r2, #8]
 2029 0082 0193     		str	r3, [sp, #4]
 2030 0084 019B     		ldr	r3, [sp, #4]
 2031 0086 2BE0     		b	.L155
 2032              	.LVL173:
 2033              	.L158:
 2034              	.LBE3:
 617:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 2035              		.loc 1 617 0
 2036 0088 3346     		mov	r3, r6
 2037 008a 0122     		movs	r2, #1
 2038 008c 1146     		mov	r1, r2
 2039 008e 2046     		mov	r0, r4
 2040 0090 FFF7FEFF 		bl	I2S_WaitFlagStateUntilTimeout
 2041              	.LVL174:
 2042 0094 40B1     		cbz	r0, .L156
 620:HALLIB/Src/stm32f7xx_hal_i2s.c ****         HAL_I2S_ErrorCallback(hi2s);
 2043              		.loc 1 620 0
 2044 0096 E36B     		ldr	r3, [r4, #60]
 2045 0098 43F00103 		orr	r3, r3, #1
 2046 009c E363     		str	r3, [r4, #60]
 621:HALLIB/Src/stm32f7xx_hal_i2s.c ****         return HAL_TIMEOUT;
 2047              		.loc 1 621 0
 2048 009e 2046     		mov	r0, r4
 2049 00a0 FFF7FEFF 		bl	HAL_I2S_ErrorCallback
 2050              	.LVL175:
 622:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 2051              		.loc 1 622 0
 2052 00a4 0320     		movs	r0, #3
 2053 00a6 2BE0     		b	.L149
 2054              	.L156:
 626:HALLIB/Src/stm32f7xx_hal_i2s.c ****       {
 2055              		.loc 1 626 0
 2056 00a8 2368     		ldr	r3, [r4]
 2057 00aa 9A68     		ldr	r2, [r3, #8]
 2058 00ac 12F0400F 		tst	r2, #64
 2059 00b0 0ED0     		beq	.L157
 629:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2060              		.loc 1 629 0
 2061 00b2 0125     		movs	r5, #1
ARM GAS  /tmp/cczIJhh6.s 			page 69


 2062              	.LVL176:
 2063 00b4 84F83950 		strb	r5, [r4, #57]
 632:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2064              		.loc 1 632 0
 2065 00b8 0023     		movs	r3, #0
 2066 00ba 84F83830 		strb	r3, [r4, #56]
 635:HALLIB/Src/stm32f7xx_hal_i2s.c ****         HAL_I2S_ErrorCallback(hi2s);
 2067              		.loc 1 635 0
 2068 00be E36B     		ldr	r3, [r4, #60]
 2069 00c0 43F00203 		orr	r3, r3, #2
 2070 00c4 E363     		str	r3, [r4, #60]
 636:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2071              		.loc 1 636 0
 2072 00c6 2046     		mov	r0, r4
 2073 00c8 FFF7FEFF 		bl	HAL_I2S_ErrorCallback
 2074              	.LVL177:
 638:HALLIB/Src/stm32f7xx_hal_i2s.c ****       }
 2075              		.loc 1 638 0
 2076 00cc 2846     		mov	r0, r5
 2077 00ce 17E0     		b	.L149
 2078              	.LVL178:
 2079              	.L157:
 641:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount--;
 2080              		.loc 1 641 0
 2081 00d0 DB68     		ldr	r3, [r3, #12]
 2082 00d2 2B80     		strh	r3, [r5]	@ movhi
 642:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }      
 2083              		.loc 1 642 0
 2084 00d4 E38D     		ldrh	r3, [r4, #46]
 2085 00d6 9BB2     		uxth	r3, r3
 2086 00d8 013B     		subs	r3, r3, #1
 2087 00da 9BB2     		uxth	r3, r3
 2088 00dc E385     		strh	r3, [r4, #46]	@ movhi
 641:HALLIB/Src/stm32f7xx_hal_i2s.c ****       hi2s->RxXferCount--;
 2089              		.loc 1 641 0
 2090 00de 0235     		adds	r5, r5, #2
 2091              	.LVL179:
 2092              	.L155:
 614:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 2093              		.loc 1 614 0
 2094 00e0 E38D     		ldrh	r3, [r4, #46]
 2095 00e2 9BB2     		uxth	r3, r3
 2096 00e4 002B     		cmp	r3, #0
 2097 00e6 CFD1     		bne	.L158
 645:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 2098              		.loc 1 645 0
 2099 00e8 0123     		movs	r3, #1
 2100 00ea 84F83930 		strb	r3, [r4, #57]
 648:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 2101              		.loc 1 648 0
 2102 00ee 0020     		movs	r0, #0
 2103 00f0 84F83800 		strb	r0, [r4, #56]
 650:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 2104              		.loc 1 650 0
 2105 00f4 04E0     		b	.L149
 2106              	.LVL180:
 2107              	.L159:
ARM GAS  /tmp/cczIJhh6.s 			page 70


 2108              	.LCFI26:
 2109              		.cfi_def_cfa_offset 0
 2110              		.cfi_restore 4
 2111              		.cfi_restore 5
 2112              		.cfi_restore 6
 2113              		.cfi_restore 14
 576:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 2114              		.loc 1 576 0
 2115 00f6 0120     		movs	r0, #1
 2116              	.LVL181:
 656:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2117              		.loc 1 656 0
 2118 00f8 7047     		bx	lr
 2119              	.LVL182:
 2120              	.L160:
 2121              	.LCFI27:
 2122              		.cfi_def_cfa_offset 24
 2123              		.cfi_offset 4, -16
 2124              		.cfi_offset 5, -12
 2125              		.cfi_offset 6, -8
 2126              		.cfi_offset 14, -4
 654:HALLIB/Src/stm32f7xx_hal_i2s.c ****   }
 2127              		.loc 1 654 0
 2128 00fa 0220     		movs	r0, #2
 2129 00fc 00E0     		b	.L149
 2130              	.LVL183:
 2131              	.L161:
 593:HALLIB/Src/stm32f7xx_hal_i2s.c ****     
 2132              		.loc 1 593 0
 2133 00fe 0220     		movs	r0, #2
 2134              	.LVL184:
 2135              	.L149:
 656:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2136              		.loc 1 656 0
 2137 0100 02B0     		add	sp, sp, #8
 2138              	.LCFI28:
 2139              		.cfi_def_cfa_offset 16
 2140              		@ sp needed
 2141 0102 70BD     		pop	{r4, r5, r6, pc}
 2142              		.cfi_endproc
 2143              	.LFE141:
 2145              		.section	.text.I2S_DMAError,"ax",%progbits
 2146              		.align	2
 2147              		.thumb
 2148              		.thumb_func
 2150              	I2S_DMAError:
 2151              	.LFB163:
1484:HALLIB/Src/stm32f7xx_hal_i2s.c ****   I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2152              		.loc 1 1484 0
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 0
 2155              		@ frame_needed = 0, uses_anonymous_args = 0
 2156              	.LVL185:
 2157 0000 08B5     		push	{r3, lr}
 2158              	.LCFI29:
 2159              		.cfi_def_cfa_offset 8
 2160              		.cfi_offset 3, -8
ARM GAS  /tmp/cczIJhh6.s 			page 71


 2161              		.cfi_offset 14, -4
1485:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 2162              		.loc 1 1485 0
 2163 0002 806B     		ldr	r0, [r0, #56]
 2164              	.LVL186:
1488:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->TxXferCount = 0;
 2165              		.loc 1 1488 0
 2166 0004 0268     		ldr	r2, [r0]
 2167 0006 5368     		ldr	r3, [r2, #4]
 2168 0008 23F00303 		bic	r3, r3, #3
 2169 000c 5360     		str	r3, [r2, #4]
1489:HALLIB/Src/stm32f7xx_hal_i2s.c ****   hi2s->RxXferCount = 0;
 2170              		.loc 1 1489 0
 2171 000e 0023     		movs	r3, #0
 2172 0010 C384     		strh	r3, [r0, #38]	@ movhi
1490:HALLIB/Src/stm32f7xx_hal_i2s.c ****   
 2173              		.loc 1 1490 0
 2174 0012 C385     		strh	r3, [r0, #46]	@ movhi
1492:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2175              		.loc 1 1492 0
 2176 0014 0123     		movs	r3, #1
 2177 0016 80F83930 		strb	r3, [r0, #57]
1495:HALLIB/Src/stm32f7xx_hal_i2s.c ****   HAL_I2S_ErrorCallback(hi2s);
 2178              		.loc 1 1495 0
 2179 001a C36B     		ldr	r3, [r0, #60]
 2180 001c 43F00803 		orr	r3, r3, #8
 2181 0020 C363     		str	r3, [r0, #60]
1496:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 2182              		.loc 1 1496 0
 2183 0022 FFF7FEFF 		bl	HAL_I2S_ErrorCallback
 2184              	.LVL187:
 2185 0026 08BD     		pop	{r3, pc}
 2186              		.cfi_endproc
 2187              	.LFE163:
 2189              		.section	.text.HAL_I2S_IRQHandler,"ax",%progbits
 2190              		.align	2
 2191              		.global	HAL_I2S_IRQHandler
 2192              		.thumb
 2193              		.thumb_func
 2195              	HAL_I2S_IRQHandler:
 2196              	.LFB149:
1072:HALLIB/Src/stm32f7xx_hal_i2s.c ****   __IO uint32_t i2ssr = hi2s->Instance->SR;
 2197              		.loc 1 1072 0
 2198              		.cfi_startproc
 2199              		@ args = 0, pretend = 0, frame = 8
 2200              		@ frame_needed = 0, uses_anonymous_args = 0
 2201              	.LVL188:
 2202 0000 10B5     		push	{r4, lr}
 2203              	.LCFI30:
 2204              		.cfi_def_cfa_offset 8
 2205              		.cfi_offset 4, -8
 2206              		.cfi_offset 14, -4
 2207 0002 82B0     		sub	sp, sp, #8
 2208              	.LCFI31:
 2209              		.cfi_def_cfa_offset 16
 2210 0004 0446     		mov	r4, r0
1073:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
ARM GAS  /tmp/cczIJhh6.s 			page 72


 2211              		.loc 1 1073 0
 2212 0006 0268     		ldr	r2, [r0]
 2213 0008 9368     		ldr	r3, [r2, #8]
 2214 000a 0193     		str	r3, [sp, #4]
1075:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {  
 2215              		.loc 1 1075 0
 2216 000c 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 2217 0010 DBB2     		uxtb	r3, r3
 2218 0012 042B     		cmp	r3, #4
 2219 0014 21D1     		bne	.L166
1078:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 2220              		.loc 1 1078 0
 2221 0016 019B     		ldr	r3, [sp, #4]
 2222 0018 13F0010F 		tst	r3, #1
 2223 001c 05D0     		beq	.L167
1078:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 2224              		.loc 1 1078 0 is_stmt 0 discriminator 1
 2225 001e 5368     		ldr	r3, [r2, #4]
 2226 0020 13F0400F 		tst	r3, #64
 2227 0024 01D0     		beq	.L167
1080:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 2228              		.loc 1 1080 0 is_stmt 1
 2229 0026 FFF7FEFF 		bl	I2S_Receive_IT
 2230              	.LVL189:
 2231              	.L167:
1084:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 2232              		.loc 1 1084 0
 2233 002a 019B     		ldr	r3, [sp, #4]
 2234 002c 13F0400F 		tst	r3, #64
 2235 0030 39D0     		beq	.L165
1084:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 2236              		.loc 1 1084 0 is_stmt 0 discriminator 1
 2237 0032 2368     		ldr	r3, [r4]
 2238 0034 5A68     		ldr	r2, [r3, #4]
 2239 0036 12F0200F 		tst	r2, #32
 2240 003a 34D0     		beq	.L165
1087:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2241              		.loc 1 1087 0 is_stmt 1
 2242 003c 5A68     		ldr	r2, [r3, #4]
 2243 003e 22F06002 		bic	r2, r2, #96
 2244 0042 5A60     		str	r2, [r3, #4]
1090:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2245              		.loc 1 1090 0
 2246 0044 0123     		movs	r3, #1
 2247 0046 84F83930 		strb	r3, [r4, #57]
1093:HALLIB/Src/stm32f7xx_hal_i2s.c ****       HAL_I2S_ErrorCallback(hi2s);
 2248              		.loc 1 1093 0
 2249 004a E36B     		ldr	r3, [r4, #60]
 2250 004c 43F00203 		orr	r3, r3, #2
 2251 0050 E363     		str	r3, [r4, #60]
1094:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }  
 2252              		.loc 1 1094 0
 2253 0052 2046     		mov	r0, r4
 2254 0054 FFF7FEFF 		bl	HAL_I2S_ErrorCallback
 2255              	.LVL190:
 2256 0058 25E0     		b	.L165
 2257              	.LVL191:
ARM GAS  /tmp/cczIJhh6.s 			page 73


 2258              	.L166:
1097:HALLIB/Src/stm32f7xx_hal_i2s.c ****   {  
 2259              		.loc 1 1097 0
 2260 005a 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 2261 005e DBB2     		uxtb	r3, r3
 2262 0060 032B     		cmp	r3, #3
 2263 0062 20D1     		bne	.L165
1100:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {     
 2264              		.loc 1 1100 0
 2265 0064 019B     		ldr	r3, [sp, #4]
 2266 0066 13F0020F 		tst	r3, #2
 2267 006a 05D0     		beq	.L169
1100:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {     
 2268              		.loc 1 1100 0 is_stmt 0 discriminator 1
 2269 006c 5368     		ldr	r3, [r2, #4]
 2270 006e 13F0800F 		tst	r3, #128
 2271 0072 01D0     		beq	.L169
1102:HALLIB/Src/stm32f7xx_hal_i2s.c ****     } 
 2272              		.loc 1 1102 0 is_stmt 1
 2273 0074 FFF7FEFF 		bl	I2S_Transmit_IT
 2274              	.LVL192:
 2275              	.L169:
1106:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 2276              		.loc 1 1106 0
 2277 0078 019B     		ldr	r3, [sp, #4]
 2278 007a 13F0080F 		tst	r3, #8
 2279 007e 12D0     		beq	.L165
1106:HALLIB/Src/stm32f7xx_hal_i2s.c ****     {
 2280              		.loc 1 1106 0 is_stmt 0 discriminator 1
 2281 0080 2368     		ldr	r3, [r4]
 2282 0082 5A68     		ldr	r2, [r3, #4]
 2283 0084 12F0200F 		tst	r2, #32
 2284 0088 0DD0     		beq	.L165
1109:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2285              		.loc 1 1109 0 is_stmt 1
 2286 008a 5A68     		ldr	r2, [r3, #4]
 2287 008c 22F0A002 		bic	r2, r2, #160
 2288 0090 5A60     		str	r2, [r3, #4]
1112:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2289              		.loc 1 1112 0
 2290 0092 0123     		movs	r3, #1
 2291 0094 84F83930 		strb	r3, [r4, #57]
1115:HALLIB/Src/stm32f7xx_hal_i2s.c ****       HAL_I2S_ErrorCallback(hi2s);
 2292              		.loc 1 1115 0
 2293 0098 E36B     		ldr	r3, [r4, #60]
 2294 009a 43F00403 		orr	r3, r3, #4
 2295 009e E363     		str	r3, [r4, #60]
1116:HALLIB/Src/stm32f7xx_hal_i2s.c ****     }
 2296              		.loc 1 1116 0
 2297 00a0 2046     		mov	r0, r4
 2298 00a2 FFF7FEFF 		bl	HAL_I2S_ErrorCallback
 2299              	.LVL193:
 2300              	.L165:
1119:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2301              		.loc 1 1119 0
 2302 00a6 02B0     		add	sp, sp, #8
 2303              	.LCFI32:
ARM GAS  /tmp/cczIJhh6.s 			page 74


 2304              		.cfi_def_cfa_offset 8
 2305              		@ sp needed
 2306 00a8 10BD     		pop	{r4, pc}
 2307              		.cfi_endproc
 2308              	.LFE149:
 2310 00aa 00BF     		.section	.text.HAL_I2S_GetState,"ax",%progbits
 2311              		.align	2
 2312              		.global	HAL_I2S_GetState
 2313              		.thumb
 2314              		.thumb_func
 2316              	HAL_I2S_GetState:
 2317              	.LFB156:
1307:HALLIB/Src/stm32f7xx_hal_i2s.c ****   return hi2s->State;
 2318              		.loc 1 1307 0
 2319              		.cfi_startproc
 2320              		@ args = 0, pretend = 0, frame = 0
 2321              		@ frame_needed = 0, uses_anonymous_args = 0
 2322              		@ link register save eliminated.
 2323              	.LVL194:
1308:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 2324              		.loc 1 1308 0
 2325 0000 90F83900 		ldrb	r0, [r0, #57]	@ zero_extendqisi2
 2326              	.LVL195:
1309:HALLIB/Src/stm32f7xx_hal_i2s.c **** 
 2327              		.loc 1 1309 0
 2328 0004 7047     		bx	lr
 2329              		.cfi_endproc
 2330              	.LFE156:
 2332 0006 00BF     		.section	.text.HAL_I2S_GetError,"ax",%progbits
 2333              		.align	2
 2334              		.global	HAL_I2S_GetError
 2335              		.thumb
 2336              		.thumb_func
 2338              	HAL_I2S_GetError:
 2339              	.LFB157:
1318:HALLIB/Src/stm32f7xx_hal_i2s.c ****   return hi2s->ErrorCode;
 2340              		.loc 1 1318 0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 0
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 2344              		@ link register save eliminated.
 2345              	.LVL196:
1319:HALLIB/Src/stm32f7xx_hal_i2s.c **** }
 2346              		.loc 1 1319 0
 2347 0000 C06B     		ldr	r0, [r0, #60]
 2348              	.LVL197:
1320:HALLIB/Src/stm32f7xx_hal_i2s.c **** /**
 2349              		.loc 1 1320 0
 2350 0002 7047     		bx	lr
 2351              		.cfi_endproc
 2352              	.LFE157:
 2354              		.text
 2355              	.Letext0:
 2356              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 2357              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 2358              		.file 4 "Inc/stm32f767xx.h"
 2359              		.file 5 "Inc/stm32f7xx.h"
ARM GAS  /tmp/cczIJhh6.s 			page 75


 2360              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 2361              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 2362              		.file 8 "HALLIB/Inc/stm32f7xx_hal_i2s.h"
 2363              		.file 9 "HALLIB/Inc/stm32f7xx_hal.h"
 2364              		.file 10 "CORE/core_cm7.h"
ARM GAS  /tmp/cczIJhh6.s 			page 76


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_i2s.c
     /tmp/cczIJhh6.s:21     .text.I2S_GetClockFreq:00000000 $t
     /tmp/cczIJhh6.s:25     .text.I2S_GetClockFreq:00000000 I2S_GetClockFreq
     /tmp/cczIJhh6.s:94     .text.I2S_GetClockFreq:00000058 $d
     /tmp/cczIJhh6.s:102    .text.I2S_WaitFlagStateUntilTimeout:00000000 $t
     /tmp/cczIJhh6.s:106    .text.I2S_WaitFlagStateUntilTimeout:00000000 I2S_WaitFlagStateUntilTimeout
     /tmp/cczIJhh6.s:207    .text.HAL_I2S_MspInit:00000000 $t
     /tmp/cczIJhh6.s:212    .text.HAL_I2S_MspInit:00000000 HAL_I2S_MspInit
     /tmp/cczIJhh6.s:225    .text.HAL_I2S_Init:00000000 $t
     /tmp/cczIJhh6.s:230    .text.HAL_I2S_Init:00000000 HAL_I2S_Init
     /tmp/cczIJhh6.s:430    .text.HAL_I2S_Init:000000e8 $d
     /tmp/cczIJhh6.s:437    .text.HAL_I2S_MspDeInit:00000000 $t
     /tmp/cczIJhh6.s:442    .text.HAL_I2S_MspDeInit:00000000 HAL_I2S_MspDeInit
     /tmp/cczIJhh6.s:455    .text.HAL_I2S_DeInit:00000000 $t
     /tmp/cczIJhh6.s:460    .text.HAL_I2S_DeInit:00000000 HAL_I2S_DeInit
     /tmp/cczIJhh6.s:505    .text.HAL_I2S_Transmit_IT:00000000 $t
     /tmp/cczIJhh6.s:510    .text.HAL_I2S_Transmit_IT:00000000 HAL_I2S_Transmit_IT
     /tmp/cczIJhh6.s:620    .text.HAL_I2S_Receive_IT:00000000 $t
     /tmp/cczIJhh6.s:625    .text.HAL_I2S_Receive_IT:00000000 HAL_I2S_Receive_IT
     /tmp/cczIJhh6.s:735    .text.HAL_I2S_Transmit_DMA:00000000 $t
     /tmp/cczIJhh6.s:740    .text.HAL_I2S_Transmit_DMA:00000000 HAL_I2S_Transmit_DMA
     /tmp/cczIJhh6.s:890    .text.HAL_I2S_Transmit_DMA:000000ac $d
     /tmp/cczIJhh6.s:1351   .text.I2S_DMATxHalfCplt:00000000 I2S_DMATxHalfCplt
     /tmp/cczIJhh6.s:1397   .text.I2S_DMATxCplt:00000000 I2S_DMATxCplt
     /tmp/cczIJhh6.s:2150   .text.I2S_DMAError:00000000 I2S_DMAError
     /tmp/cczIJhh6.s:897    .text.HAL_I2S_Receive_DMA:00000000 $t
     /tmp/cczIJhh6.s:902    .text.HAL_I2S_Receive_DMA:00000000 HAL_I2S_Receive_DMA
     /tmp/cczIJhh6.s:1072   .text.HAL_I2S_Receive_DMA:000000c8 $d
     /tmp/cczIJhh6.s:1526   .text.I2S_DMARxHalfCplt:00000000 I2S_DMARxHalfCplt
     /tmp/cczIJhh6.s:1572   .text.I2S_DMARxCplt:00000000 I2S_DMARxCplt
     /tmp/cczIJhh6.s:1079   .text.HAL_I2S_DMAPause:00000000 $t
     /tmp/cczIJhh6.s:1084   .text.HAL_I2S_DMAPause:00000000 HAL_I2S_DMAPause
     /tmp/cczIJhh6.s:1166   .text.HAL_I2S_DMAResume:00000000 $t
     /tmp/cczIJhh6.s:1171   .text.HAL_I2S_DMAResume:00000000 HAL_I2S_DMAResume
     /tmp/cczIJhh6.s:1238   .text.HAL_I2S_DMAStop:00000000 $t
     /tmp/cczIJhh6.s:1243   .text.HAL_I2S_DMAStop:00000000 HAL_I2S_DMAStop
     /tmp/cczIJhh6.s:1329   .text.HAL_I2S_TxHalfCpltCallback:00000000 $t
     /tmp/cczIJhh6.s:1334   .text.HAL_I2S_TxHalfCpltCallback:00000000 HAL_I2S_TxHalfCpltCallback
     /tmp/cczIJhh6.s:1347   .text.I2S_DMATxHalfCplt:00000000 $t
     /tmp/cczIJhh6.s:1375   .text.HAL_I2S_TxCpltCallback:00000000 $t
     /tmp/cczIJhh6.s:1380   .text.HAL_I2S_TxCpltCallback:00000000 HAL_I2S_TxCpltCallback
     /tmp/cczIJhh6.s:1393   .text.I2S_DMATxCplt:00000000 $t
     /tmp/cczIJhh6.s:1454   .text.I2S_Transmit_IT:00000000 $t
     /tmp/cczIJhh6.s:1458   .text.I2S_Transmit_IT:00000000 I2S_Transmit_IT
     /tmp/cczIJhh6.s:1504   .text.HAL_I2S_RxHalfCpltCallback:00000000 $t
     /tmp/cczIJhh6.s:1509   .text.HAL_I2S_RxHalfCpltCallback:00000000 HAL_I2S_RxHalfCpltCallback
     /tmp/cczIJhh6.s:1522   .text.I2S_DMARxHalfCplt:00000000 $t
     /tmp/cczIJhh6.s:1550   .text.HAL_I2S_RxCpltCallback:00000000 $t
     /tmp/cczIJhh6.s:1555   .text.HAL_I2S_RxCpltCallback:00000000 HAL_I2S_RxCpltCallback
     /tmp/cczIJhh6.s:1568   .text.I2S_DMARxCplt:00000000 $t
     /tmp/cczIJhh6.s:1629   .text.I2S_Receive_IT:00000000 $t
     /tmp/cczIJhh6.s:1633   .text.I2S_Receive_IT:00000000 I2S_Receive_IT
     /tmp/cczIJhh6.s:1679   .text.HAL_I2S_ErrorCallback:00000000 $t
     /tmp/cczIJhh6.s:1684   .text.HAL_I2S_ErrorCallback:00000000 HAL_I2S_ErrorCallback
     /tmp/cczIJhh6.s:1697   .text.HAL_I2S_Transmit:00000000 $t
     /tmp/cczIJhh6.s:1702   .text.HAL_I2S_Transmit:00000000 HAL_I2S_Transmit
ARM GAS  /tmp/cczIJhh6.s 			page 77


     /tmp/cczIJhh6.s:1928   .text.HAL_I2S_Receive:00000000 $t
     /tmp/cczIJhh6.s:1933   .text.HAL_I2S_Receive:00000000 HAL_I2S_Receive
     /tmp/cczIJhh6.s:2146   .text.I2S_DMAError:00000000 $t
     /tmp/cczIJhh6.s:2190   .text.HAL_I2S_IRQHandler:00000000 $t
     /tmp/cczIJhh6.s:2195   .text.HAL_I2S_IRQHandler:00000000 HAL_I2S_IRQHandler
     /tmp/cczIJhh6.s:2311   .text.HAL_I2S_GetState:00000000 $t
     /tmp/cczIJhh6.s:2316   .text.HAL_I2S_GetState:00000000 HAL_I2S_GetState
     /tmp/cczIJhh6.s:2333   .text.HAL_I2S_GetError:00000000 $t
     /tmp/cczIJhh6.s:2338   .text.HAL_I2S_GetError:00000000 HAL_I2S_GetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
