ARM GAS  /tmp/cc5gP5av.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_dcmi.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.DCMI_DMAXferCplt,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	DCMI_DMAXferCplt:
  26              	.LFB154:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_dcmi.c"
   1:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @file    stm32f7xx_hal_dcmi.c
   4:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief   DCMI HAL module driver
   6:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *          functionalities of the Digital Camera Interface (DCMI) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *           + IO operation functions
  10:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *           + Peripheral Control functions 
  11:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *           + Peripheral State and Error functions  
  12:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *           
  13:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   @verbatim
  14:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                         ##### How to use this driver #####
  16:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   ==============================================================================
  17:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   [..]
  18:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       The sequence below describes how to use this driver to capture image
  19:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       from a camera module connected to the DCMI Interface.
  20:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       This sequence does not take into account the configuration of the
  21:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       camera module, which should be made before to configure and enable
  22:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       the DCMI to capture images.
  23:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
  24:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     (#) Program the required configuration through following parameters:
  25:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         horizontal and vertical polarity, pixel clock polarity, Capture Rate,
  26:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         Synchronization Mode, code of the frame delimiter and data width 
  27:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         using HAL_DCMI_Init() function.
  28:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
  29:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     (#) Configure the DMA2_Stream1 channel1 to transfer Data from DCMI DR
  30:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         register to the destination memory buffer.
  31:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
ARM GAS  /tmp/cc5gP5av.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     (#) Program the required configuration through following parameters:
  33:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         DCMI mode, destination memory Buffer address and the data length 
  34:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         and enable capture using HAL_DCMI_Start_DMA() function.
  35:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
  36:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     (#) Optionally, configure and Enable the CROP feature to select a rectangular
  37:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         window from the received image using HAL_DCMI_ConfigCrop() 
  38:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         and HAL_DCMI_EnableCROP() functions
  39:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
  40:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     (#) The capture can be stopped using HAL_DCMI_Stop() function.
  41:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
  42:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     (#) To control DCMI state you can use the function HAL_DCMI_GetState().
  43:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
  44:HALLIB/Src/stm32f7xx_hal_dcmi.c ****      *** DCMI HAL driver macros list ***
  45:HALLIB/Src/stm32f7xx_hal_dcmi.c ****      ============================================= 
  46:HALLIB/Src/stm32f7xx_hal_dcmi.c ****      [..]
  47:HALLIB/Src/stm32f7xx_hal_dcmi.c ****        Below the list of most used macros in DCMI HAL driver.
  48:HALLIB/Src/stm32f7xx_hal_dcmi.c ****        
  49:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) __HAL_DCMI_ENABLE: Enable the DCMI peripheral.
  50:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) __HAL_DCMI_DISABLE: Disable the DCMI peripheral.
  51:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) __HAL_DCMI_GET_FLAG: Get the DCMI pending flags.
  52:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) __HAL_DCMI_CLEAR_FLAG: Clear the DCMI pending flags.
  53:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) __HAL_DCMI_ENABLE_IT: Enable the specified DCMI interrupts.
  54:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) __HAL_DCMI_DISABLE_IT: Disable the specified DCMI interrupts.
  55:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) __HAL_DCMI_GET_IT_SOURCE: Check whether the specified DCMI interrupt has occurred or not.
  56:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  
  57:HALLIB/Src/stm32f7xx_hal_dcmi.c ****      [..] 
  58:HALLIB/Src/stm32f7xx_hal_dcmi.c ****        (@) You can refer to the DCMI HAL driver header file for more useful macros
  59:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       
  60:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   @endverbatim
  61:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   ******************************************************************************
  62:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @attention
  63:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *
  64:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  65:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *
  66:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * Redistribution and use in source and binary forms, with or without modification,
  67:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * are permitted provided that the following conditions are met:
  68:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  69:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *      this list of conditions and the following disclaimer.
  70:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  71:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *      this list of conditions and the following disclaimer in the documentation
  72:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *      and/or other materials provided with the distribution.
  73:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  74:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *      may be used to endorse or promote products derived from this software
  75:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *      without specific prior written permission.
  76:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *
  77:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  78:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  79:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  80:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  81:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  82:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  83:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  84:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  85:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  86:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  87:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *
  88:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   ******************************************************************************
ARM GAS  /tmp/cc5gP5av.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */ 
  90:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
  91:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /* Includes ------------------------------------------------------------------*/
  92:HALLIB/Src/stm32f7xx_hal_dcmi.c **** #include "stm32f7xx_hal.h"
  93:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
  94:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /** @addtogroup STM32F7xx_HAL_Driver
  95:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @{
  96:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
  97:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /** @defgroup DCMI DCMI
  98:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief DCMI HAL module driver
  99:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @{
 100:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 101:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 102:HALLIB/Src/stm32f7xx_hal_dcmi.c **** #ifdef HAL_DCMI_MODULE_ENABLED
 103:HALLIB/Src/stm32f7xx_hal_dcmi.c **** #if defined (DCMI)
 104:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 105:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /* Private typedef -----------------------------------------------------------*/
 106:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /* Private define ------------------------------------------------------------*/
 107:HALLIB/Src/stm32f7xx_hal_dcmi.c **** #define HAL_TIMEOUT_DCMI_STOP    ((uint32_t)1000) /* Set timeout to 1s  */
 108:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 109:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /* Private macro -------------------------------------------------------------*/
 110:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /* Private variables ---------------------------------------------------------*/
 111:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /* Private function prototypes -----------------------------------------------*/
 112:HALLIB/Src/stm32f7xx_hal_dcmi.c **** static void       DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma);
 113:HALLIB/Src/stm32f7xx_hal_dcmi.c **** static void       DCMI_DMAError(DMA_HandleTypeDef *hdma);
 114:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 115:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /* Exported functions --------------------------------------------------------*/
 116:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 117:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /** @defgroup DCMI_Exported_Functions DCMI Exported Functions
 118:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @{
 119:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 120:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 121:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /** @defgroup DCMI_Exported_Functions_Group1 Initialization and Configuration functions
 122:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  *  @brief   Initialization and Configuration functions
 123:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  *
 124:HALLIB/Src/stm32f7xx_hal_dcmi.c **** @verbatim   
 125:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  ===============================================================================
 126:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                 ##### Initialization and Configuration functions #####
 127:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  ===============================================================================  
 128:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     [..]  This section provides functions allowing to:
 129:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) Initialize and configure the DCMI
 130:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) De-initialize the DCMI 
 131:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 132:HALLIB/Src/stm32f7xx_hal_dcmi.c **** @endverbatim
 133:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @{
 134:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 135:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 136:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 137:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Initializes the DCMI according to the specified
 138:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *         parameters in the DCMI_InitTypeDef and create the associated handle.
 139:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 140:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 141:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval HAL status
 142:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 143:HALLIB/Src/stm32f7xx_hal_dcmi.c **** HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
 144:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {     
 145:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Check the DCMI peripheral state */
ARM GAS  /tmp/cc5gP5av.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if(hdcmi == NULL)
 147:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 148:HALLIB/Src/stm32f7xx_hal_dcmi.c ****      return HAL_ERROR;
 149:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 150:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 151:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Check function parameters */
 152:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
 153:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
 154:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
 155:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
 156:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
 157:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
 158:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
 159:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
 160:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 161:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
 162:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
 163:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
 164:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
 165:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                 
 166:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if(hdcmi->State == HAL_DCMI_STATE_RESET)
 167:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 168:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Init the low level hardware */
 169:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     HAL_DCMI_MspInit(hdcmi);
 170:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   } 
 171:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 172:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Change the DCMI state */
 173:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State = HAL_DCMI_STATE_BUSY; 
 174:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                           /* Configures the HS, VS, DE and PC polarity */
 175:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 176:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                            DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
 177:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                            DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
 178:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                            DCMI_CR_LSM | DCMI_CR_OELS);
 179:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 180:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 181:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 182:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 183:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 184:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 185:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.LineSelectStart);
 186:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      
 187:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 188:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 189:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 190:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                              ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|
 191:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                              ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 192:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                              ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 193:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 194:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 195:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 196:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Enable the Line, Vsync, Error and Overrun interrupts */
 197:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 198:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 199:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Update error code */
 200:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 201:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 202:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Initialize the DCMI state*/
ARM GAS  /tmp/cc5gP5av.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State  = HAL_DCMI_STATE_READY;
 204:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 205:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return HAL_OK;
 206:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 207:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 208:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 209:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Deinitializes the DCMI peripheral registers to their default reset
 210:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *         values.
 211:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 212:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 213:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval HAL status
 214:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 215:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 216:HALLIB/Src/stm32f7xx_hal_dcmi.c **** HAL_StatusTypeDef HAL_DCMI_DeInit(DCMI_HandleTypeDef *hdcmi)
 217:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 218:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* DeInit the low level hardware */
 219:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   HAL_DCMI_MspDeInit(hdcmi);
 220:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 221:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Update error code */
 222:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 223:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 224:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Initialize the DCMI state*/
 225:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State = HAL_DCMI_STATE_RESET;
 226:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 227:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Release Lock */
 228:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_UNLOCK(hdcmi);
 229:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 230:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return HAL_OK;
 231:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 232:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 233:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 234:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Initializes the DCMI MSP.
 235:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 236:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 237:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval None
 238:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 239:HALLIB/Src/stm32f7xx_hal_dcmi.c **** __weak void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
 240:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 241:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Prevent unused argument(s) compilation warning */
 242:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   UNUSED(hdcmi);
 243:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  
 244:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 245:HALLIB/Src/stm32f7xx_hal_dcmi.c ****             the HAL_DCMI_MspInit could be implemented in the user file
 246:HALLIB/Src/stm32f7xx_hal_dcmi.c ****    */ 
 247:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 248:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 249:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 250:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  DeInitializes the DCMI MSP.
 251:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 252:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 253:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval None
 254:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 255:HALLIB/Src/stm32f7xx_hal_dcmi.c **** __weak void HAL_DCMI_MspDeInit(DCMI_HandleTypeDef* hdcmi)
 256:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 257:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Prevent unused argument(s) compilation warning */
 258:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   UNUSED(hdcmi);
 259:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  
ARM GAS  /tmp/cc5gP5av.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 261:HALLIB/Src/stm32f7xx_hal_dcmi.c ****             the HAL_DCMI_MspDeInit could be implemented in the user file
 262:HALLIB/Src/stm32f7xx_hal_dcmi.c ****    */
 263:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 264:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 265:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 266:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @}
 267:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 268:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /** @defgroup DCMI_Exported_Functions_Group2 IO operation functions 
 269:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  *  @brief   IO operation functions  
 270:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  *
 271:HALLIB/Src/stm32f7xx_hal_dcmi.c **** @verbatim   
 272:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  ===============================================================================
 273:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                       #####  IO operation functions  #####
 274:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  ===============================================================================  
 275:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     [..]  This section provides functions allowing to:
 276:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) Configure destination address and data length and 
 277:HALLIB/Src/stm32f7xx_hal_dcmi.c ****           Enables DCMI DMA request and enables DCMI capture
 278:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) Stop the DCMI capture.
 279:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) Handles DCMI interrupt request.
 280:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 281:HALLIB/Src/stm32f7xx_hal_dcmi.c **** @endverbatim
 282:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @{
 283:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 284:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 285:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 286:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Enables DCMI DMA request and enables DCMI capture  
 287:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi     pointer to a DCMI_HandleTypeDef structure that contains
 288:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                    the configuration information for DCMI.
 289:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  DCMI_Mode DCMI capture mode snapshot or continuous grab.
 290:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  pData     The destination memory Buffer address (LCD Frame buffer).
 291:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  Length    The length of capture to be transferred.
 292:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval HAL status
 293:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 294:HALLIB/Src/stm32f7xx_hal_dcmi.c **** HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData,
 295:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {  
 296:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Initialize the second memory address */
 297:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   uint32_t SecondMemAddress = 0;
 298:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 299:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Check function parameters */
 300:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));
 301:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 302:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Locked */
 303:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_LOCK(hdcmi);
 304:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 305:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Lock the DCMI peripheral state */
 306:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State = HAL_DCMI_STATE_BUSY;
 307:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 308:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Enable DCMI by setting DCMIEN bit */
 309:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_DCMI_ENABLE(hdcmi);
 310:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 311:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Configure the DCMI Mode */
 312:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 313:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 314:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 315:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Set the DMA memory0 conversion complete callback */
 316:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
ARM GAS  /tmp/cc5gP5av.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 318:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Set the DMA error callback */
 319:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 320:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 321:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Set the dma abort callback */
 322:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->DMA_Handle->XferAbortCallback = NULL;
 323:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 324:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Reset transfer counters value */ 
 325:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->XferCount = 0;
 326:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->XferTransferNumber = 0;
 327:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 328:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if(Length <= 0xFFFF)
 329:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 330:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Enable the DMA Stream */
 331:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 332:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 333:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   else /* DCMI_DOUBLE_BUFFER Mode */
 334:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 335:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Set the DMA memory1 conversion complete callback */
 336:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt; 
 337:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 338:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Initialize transfer parameters */
 339:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->XferCount = 1;
 340:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->XferSize = Length;
 341:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->pBuffPtr = pData;
 342:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       
 343:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Get the number of buffer */
 344:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     while(hdcmi->XferSize > 0xFFFF)
 345:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     {
 346:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       hdcmi->XferSize = (hdcmi->XferSize/2);
 347:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       hdcmi->XferCount = hdcmi->XferCount*2;
 348:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     }
 349:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 350:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Update DCMI counter  and transfer number*/
 351:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->XferCount = (hdcmi->XferCount - 2);
 352:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->XferTransferNumber = hdcmi->XferCount;
 353:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 354:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Update second memory address */
 355:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     SecondMemAddress = (uint32_t)(pData + (4*hdcmi->XferSize));
 356:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 357:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Start DMA multi buffer transfer */
 358:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pDat
 359:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 360:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 361:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Enable Capture */
 362:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 363:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 364:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Release Lock */
 365:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_UNLOCK(hdcmi);
 366:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 367:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Return function status */
 368:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return HAL_OK;
 369:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 370:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 371:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 372:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Disable DCMI DMA request and Disable DCMI capture  
 373:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
ARM GAS  /tmp/cc5gP5av.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI. 
 375:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval HAL status     
 376:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 377:HALLIB/Src/stm32f7xx_hal_dcmi.c **** HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
 378:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 379:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock /8/1000);
 380:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   HAL_StatusTypeDef status = HAL_OK;
 381:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 382:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process locked */
 383:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_LOCK(hdcmi);
 384:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 385:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Lock the DCMI peripheral state */
 386:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State = HAL_DCMI_STATE_BUSY;
 387:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 388:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Disable Capture */
 389:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 390:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 391:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Check if the DCMI capture effectively disabled */
 392:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   do
 393:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 394:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     if (count-- == 0)
 395:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     {
 396:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       /* Update error code */
 397:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 398:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       
 399:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       status = HAL_TIMEOUT;
 400:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       break;
 401:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     } 
 402:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 403:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0);
 404:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 405:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Disable the DCMI */
 406:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_DCMI_DISABLE(hdcmi);
 407:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 408:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Disable the DMA */
 409:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   HAL_DMA_Abort(hdcmi->DMA_Handle);
 410:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 411:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Update error code */
 412:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 413:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 414:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Change DCMI state */
 415:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State = HAL_DCMI_STATE_READY;
 416:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 417:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Unlocked */
 418:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_UNLOCK(hdcmi);
 419:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 420:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Return function status */
 421:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return status;
 422:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 423:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 424:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 425:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Suspend DCMI capture  
 426:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 427:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI. 
 428:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval HAL status     
 429:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 430:HALLIB/Src/stm32f7xx_hal_dcmi.c **** HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef* hdcmi)
ARM GAS  /tmp/cc5gP5av.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 432:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock /8/1000);
 433:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   HAL_StatusTypeDef status = HAL_OK;
 434:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 435:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process locked */
 436:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_LOCK(hdcmi);
 437:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 438:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 439:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 440:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Change DCMI state */
 441:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 442:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 443:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Disable Capture */
 444:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 445:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 446:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Check if the DCMI capture effectively disabled */
 447:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     do
 448:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     {
 449:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       if (count-- == 0)
 450:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       {        
 451:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         /* Update error code */
 452:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 453:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         
 454:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         /* Change DCMI state */
 455:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         hdcmi->State = HAL_DCMI_STATE_READY;
 456:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         
 457:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         status = HAL_TIMEOUT;
 458:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         break;
 459:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       }
 460:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     }
 461:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0);
 462:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }    
 463:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Unlocked */
 464:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_UNLOCK(hdcmi);
 465:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 466:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Return function status */
 467:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return status;
 468:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 469:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 470:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 471:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Resume DCMI capture  
 472:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 473:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI. 
 474:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval HAL status     
 475:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 476:HALLIB/Src/stm32f7xx_hal_dcmi.c **** HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef* hdcmi)
 477:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 478:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process locked */
 479:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_LOCK(hdcmi);
 480:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 481:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if(hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 482:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 483:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Change DCMI state */
 484:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->State = HAL_DCMI_STATE_BUSY;
 485:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 486:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Disable Capture */
 487:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
ARM GAS  /tmp/cc5gP5av.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   } 
 489:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Unlocked */
 490:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_UNLOCK(hdcmi);
 491:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 492:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Return function status */
 493:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return HAL_OK;
 494:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 495:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 496:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 497:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Handles DCMI interrupt request.
 498:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 499:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for the DCMI.
 500:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval None
 501:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 502:HALLIB/Src/stm32f7xx_hal_dcmi.c **** void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
 503:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {  
 504:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 505:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 506:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Synchronization error interrupt management *******************************/
 507:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 508:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 509:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Clear the Synchronization error flag */
 510:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 511:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 512:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Update error code */
 513:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 514:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 515:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Change DCMI state */
 516:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->State = HAL_DCMI_STATE_ERROR;
 517:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 518:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Set the synchronization error callback */
 519:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 520:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 521:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Abort the DMA Transfer */
 522:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     HAL_DMA_Abort_IT(hdcmi->DMA_Handle); 
 523:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 524:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Overflow interrupt management ********************************************/
 525:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 526:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 527:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Clear the Overflow flag */
 528:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 529:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 530:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Update error code */
 531:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 532:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 533:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Change DCMI state */
 534:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->State = HAL_DCMI_STATE_ERROR;
 535:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 536:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Set the overflow callback */
 537:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 538:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 539:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Abort the DMA Transfer */
 540:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 541:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 542:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Line Interrupt management ************************************************/
 543:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 544:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
ARM GAS  /tmp/cc5gP5av.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Clear the Line interrupt flag */  
 546:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 547:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 548:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Line interrupt Callback */
 549:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     HAL_DCMI_LineEventCallback(hdcmi);
 550:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 551:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* VSYNC interrupt management ***********************************************/
 552:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 553:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 554:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Clear the VSYNC flag */
 555:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 556:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 557:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* VSYNC Callback */
 558:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     HAL_DCMI_VsyncEventCallback(hdcmi);
 559:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 560:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* FRAME interrupt management ***********************************************/
 561:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)   
 562:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 563:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
 564:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 565:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     { 
 566:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       /* Disable the Line, Vsync, Error and Overrun interrupts */
 567:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 568:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     }
 569:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 570:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Disable the Frame interrupt */
 571:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 572:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 573:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Clear the End of Frame flag */
 574:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 575:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 576:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Frame Callback */
 577:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     HAL_DCMI_FrameEventCallback(hdcmi);
 578:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 579:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 580:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 581:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 582:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Error DCMI callback.
 583:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 584:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 585:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval None
 586:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 587:HALLIB/Src/stm32f7xx_hal_dcmi.c **** __weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
 588:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 589:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Prevent unused argument(s) compilation warning */
 590:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   UNUSED(hdcmi);
 591:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  
 592:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 593:HALLIB/Src/stm32f7xx_hal_dcmi.c ****             the HAL_DCMI_ErrorCallback could be implemented in the user file
 594:HALLIB/Src/stm32f7xx_hal_dcmi.c ****    */
 595:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 596:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 597:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 598:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Line Event callback.
 599:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 600:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 601:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval None
ARM GAS  /tmp/cc5gP5av.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 603:HALLIB/Src/stm32f7xx_hal_dcmi.c **** __weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
 604:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 605:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 606:HALLIB/Src/stm32f7xx_hal_dcmi.c ****             the HAL_DCMI_LineEventCallback could be implemented in the user file
 607:HALLIB/Src/stm32f7xx_hal_dcmi.c ****    */
 608:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 609:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 610:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 611:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  VSYNC Event callback.
 612:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 613:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 614:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval None
 615:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 616:HALLIB/Src/stm32f7xx_hal_dcmi.c **** __weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
 617:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 618:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Prevent unused argument(s) compilation warning */
 619:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   UNUSED(hdcmi);
 620:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  
 621:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 622:HALLIB/Src/stm32f7xx_hal_dcmi.c ****             the HAL_DCMI_VsyncEventCallback could be implemented in the user file
 623:HALLIB/Src/stm32f7xx_hal_dcmi.c ****    */
 624:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 625:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 626:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 627:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Frame Event callback.
 628:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 629:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 630:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval None
 631:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 632:HALLIB/Src/stm32f7xx_hal_dcmi.c **** __weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 633:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 634:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Prevent unused argument(s) compilation warning */
 635:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   UNUSED(hdcmi);
 636:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  
 637:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 638:HALLIB/Src/stm32f7xx_hal_dcmi.c ****             the HAL_DCMI_FrameEventCallback could be implemented in the user file
 639:HALLIB/Src/stm32f7xx_hal_dcmi.c ****    */
 640:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 641:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 642:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 643:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @}
 644:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 645:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 646:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /** @defgroup DCMI_Exported_Functions_Group3 Peripheral Control functions
 647:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  *  @brief    Peripheral Control functions 
 648:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  *
 649:HALLIB/Src/stm32f7xx_hal_dcmi.c **** @verbatim   
 650:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  ===============================================================================
 651:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                     ##### Peripheral Control functions #####
 652:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  ===============================================================================  
 653:HALLIB/Src/stm32f7xx_hal_dcmi.c **** [..]  This section provides functions allowing to:
 654:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) Configure the CROP feature.
 655:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) Enable/Disable the CROP feature.
 656:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) Set embedded synchronization delimiters unmasks.
 657:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 658:HALLIB/Src/stm32f7xx_hal_dcmi.c **** @endverbatim
ARM GAS  /tmp/cc5gP5av.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @{
 660:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 661:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 662:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 663:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Configure the DCMI CROP coordinate.
 664:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 665:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 666:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  YSize DCMI Line number
 667:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  XSize DCMI Pixel per line
 668:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  X0    DCMI window X offset
 669:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  Y0    DCMI window Y offset
 670:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval HAL status
 671:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 672:HALLIB/Src/stm32f7xx_hal_dcmi.c **** HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t
 673:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 674:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Locked */
 675:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_LOCK(hdcmi);
 676:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 677:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Lock the DCMI peripheral state */
 678:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State = HAL_DCMI_STATE_BUSY;
 679:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 680:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Check the parameters */
 681:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_WINDOW_COORDINATE(X0));
 682:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));
 683:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
 684:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));
 685:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 	
 686:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Configure CROP */
 687:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 688:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 689:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 690:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Initialize the DCMI state*/
 691:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State  = HAL_DCMI_STATE_READY;
 692:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 693:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Unlocked */
 694:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_UNLOCK(hdcmi);
 695:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 696:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return HAL_OK;
 697:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 698:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 699:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 700:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Disable the Crop feature.
 701:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 702:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 703:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval HAL status
 704:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 705:HALLIB/Src/stm32f7xx_hal_dcmi.c **** HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
 706:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 707:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Locked */
 708:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_LOCK(hdcmi);
 709:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 710:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Lock the DCMI peripheral state */
 711:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State = HAL_DCMI_STATE_BUSY;
 712:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 713:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Disable DCMI Crop feature */
 714:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;  
 715:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
ARM GAS  /tmp/cc5gP5av.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Change the DCMI state*/
 717:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State = HAL_DCMI_STATE_READY;   
 718:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 719:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Unlocked */
 720:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_UNLOCK(hdcmi);
 721:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 722:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return HAL_OK;  
 723:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 724:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 725:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 726:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Enable the Crop feature.
 727:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 728:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 729:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval HAL status
 730:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 731:HALLIB/Src/stm32f7xx_hal_dcmi.c **** HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
 732:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 733:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Locked */
 734:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_LOCK(hdcmi);
 735:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 736:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Lock the DCMI peripheral state */
 737:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State = HAL_DCMI_STATE_BUSY;
 738:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 739:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Enable DCMI Crop feature */
 740:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 741:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 742:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Change the DCMI state*/
 743:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->State = HAL_DCMI_STATE_READY;
 744:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 745:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Unlocked */
 746:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   __HAL_UNLOCK(hdcmi);
 747:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 748:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return HAL_OK;  
 749:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 750:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 751:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 752:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @}
 753:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 754:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 755:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /** @defgroup DCMI_Exported_Functions_Group4 Peripheral State functions
 756:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  *  @brief    Peripheral State functions 
 757:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  *
 758:HALLIB/Src/stm32f7xx_hal_dcmi.c **** @verbatim   
 759:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  ===============================================================================
 760:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                ##### Peripheral State and Errors functions #####
 761:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  ===============================================================================  
 762:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     [..]
 763:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     This subsection provides functions allowing to
 764:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) Check the DCMI state.
 765:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       (+) Get the specific DCMI error flag.  
 766:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 767:HALLIB/Src/stm32f7xx_hal_dcmi.c **** @endverbatim
 768:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @{
 769:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */ 
 770:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 771:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 772:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  Return the DCMI state
ARM GAS  /tmp/cc5gP5av.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
 774:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for DCMI.
 775:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval HAL state
 776:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 777:HALLIB/Src/stm32f7xx_hal_dcmi.c **** HAL_DCMI_StateTypeDef HAL_DCMI_GetState(DCMI_HandleTypeDef *hdcmi)  
 778:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 779:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return hdcmi->State;
 780:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 781:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 782:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 783:HALLIB/Src/stm32f7xx_hal_dcmi.c **** * @brief  Return the DCMI error code
 784:HALLIB/Src/stm32f7xx_hal_dcmi.c **** * @param  hdcmi  pointer to a DCMI_HandleTypeDef structure that contains
 785:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *               the configuration information for DCMI.
 786:HALLIB/Src/stm32f7xx_hal_dcmi.c **** * @retval DCMI Error Code
 787:HALLIB/Src/stm32f7xx_hal_dcmi.c **** */
 788:HALLIB/Src/stm32f7xx_hal_dcmi.c **** uint32_t HAL_DCMI_GetError(DCMI_HandleTypeDef *hdcmi)
 789:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 790:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return hdcmi->ErrorCode;
 791:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 792:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 793:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 794:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @}
 795:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 796:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /* Private functions ---------------------------------------------------------*/
 797:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /** @defgroup DCMI_Private_Functions DCMI Private Functions
 798:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @{
 799:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 800:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /**
 801:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  DMA conversion complete callback. 
 802:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 803:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for the specified DMA module.
 804:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval None
 805:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 806:HALLIB/Src/stm32f7xx_hal_dcmi.c **** static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
 807:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
  28              		.loc 1 807 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38              	.LVL1:
 808:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   uint32_t tmp = 0;
 809:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 810:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  39              		.loc 1 810 0
  40 0002 846B     		ldr	r4, [r0, #56]
  41              	.LVL2:
 811:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 812:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if(hdcmi->XferCount != 0)
  42              		.loc 1 812 0
  43 0004 A36B     		ldr	r3, [r4, #56]
  44 0006 1BB3     		cbz	r3, .L2
ARM GAS  /tmp/cc5gP5av.s 			page 16


 813:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 814:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Update memory 0 address location */
 815:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
  45              		.loc 1 815 0
  46 0008 A06C     		ldr	r0, [r4, #72]
  47              	.LVL3:
  48 000a 0268     		ldr	r2, [r0]
  49 000c 1368     		ldr	r3, [r2]
  50 000e 03F40023 		and	r3, r3, #524288
  51              	.LVL4:
 816:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     if(((hdcmi->XferCount % 2) == 0) && (tmp != 0))
  52              		.loc 1 816 0
  53 0012 A16B     		ldr	r1, [r4, #56]
  54 0014 11F0010F 		tst	r1, #1
  55 0018 0BD1     		bne	.L3
  56              		.loc 1 816 0 is_stmt 0 discriminator 1
  57 001a 53B1     		cbz	r3, .L3
 817:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     {
 818:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       tmp = hdcmi->DMA_Handle->Instance->M0AR;
  58              		.loc 1 818 0 is_stmt 1
  59 001c D368     		ldr	r3, [r2, #12]
  60              	.LVL5:
 819:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8*hdcmi->XferSize)), MEMORY0);
  61              		.loc 1 819 0
  62 001e E16B     		ldr	r1, [r4, #60]
  63 0020 0022     		movs	r2, #0
  64 0022 03EBC101 		add	r1, r3, r1, lsl #3
  65 0026 FFF7FEFF 		bl	HAL_DMAEx_ChangeMemory
  66              	.LVL6:
 820:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       hdcmi->XferCount--;
  67              		.loc 1 820 0
  68 002a A36B     		ldr	r3, [r4, #56]
  69 002c 013B     		subs	r3, r3, #1
  70 002e A363     		str	r3, [r4, #56]
  71 0030 22E0     		b	.L4
  72              	.LVL7:
  73              	.L3:
 821:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     }
 822:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Update memory 1 address location */
 823:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
  74              		.loc 1 823 0
  75 0032 1368     		ldr	r3, [r2]
  76              	.LVL8:
  77 0034 13F4002F 		tst	r3, #524288
  78 0038 1ED1     		bne	.L4
 824:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     {
 825:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       tmp = hdcmi->DMA_Handle->Instance->M1AR;
  79              		.loc 1 825 0
  80 003a 1369     		ldr	r3, [r2, #16]
  81              	.LVL9:
 826:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8*hdcmi->XferSize)), MEMORY1);
  82              		.loc 1 826 0
  83 003c E16B     		ldr	r1, [r4, #60]
  84 003e 0122     		movs	r2, #1
  85 0040 03EBC101 		add	r1, r3, r1, lsl #3
  86 0044 FFF7FEFF 		bl	HAL_DMAEx_ChangeMemory
  87              	.LVL10:
ARM GAS  /tmp/cc5gP5av.s 			page 17


 827:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       hdcmi->XferCount--;
  88              		.loc 1 827 0
  89 0048 A36B     		ldr	r3, [r4, #56]
  90 004a 013B     		subs	r3, r3, #1
  91 004c A363     		str	r3, [r4, #56]
  92 004e 13E0     		b	.L4
  93              	.LVL11:
  94              	.L2:
 828:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     }
 829:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 830:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Update memory 0 address location */
 831:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
  95              		.loc 1 831 0
  96 0050 A36C     		ldr	r3, [r4, #72]
  97 0052 1B68     		ldr	r3, [r3]
  98 0054 1A68     		ldr	r2, [r3]
  99 0056 12F4002F 		tst	r2, #524288
 100 005a 02D0     		beq	.L5
 832:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 833:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 101              		.loc 1 833 0
 102 005c 626C     		ldr	r2, [r4, #68]
 103 005e DA60     		str	r2, [r3, #12]
 104 0060 0AE0     		b	.L4
 105              	.L5:
 834:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 835:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Update memory 1 address location */
 836:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 106              		.loc 1 836 0
 107 0062 1A68     		ldr	r2, [r3]
 108 0064 12F4002F 		tst	r2, #524288
 109 0068 06D1     		bne	.L4
 837:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 838:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     tmp = hdcmi->pBuffPtr;
 110              		.loc 1 838 0
 111 006a 626C     		ldr	r2, [r4, #68]
 112              	.LVL12:
 839:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4*hdcmi->XferSize));
 113              		.loc 1 839 0
 114 006c E16B     		ldr	r1, [r4, #60]
 115 006e 02EB8102 		add	r2, r2, r1, lsl #2
 116              	.LVL13:
 117 0072 1A61     		str	r2, [r3, #16]
 118              	.LVL14:
 840:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->XferCount = hdcmi->XferTransferNumber;
 119              		.loc 1 840 0
 120 0074 236C     		ldr	r3, [r4, #64]
 121 0076 A363     		str	r3, [r4, #56]
 122              	.LVL15:
 123              	.L4:
 841:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 842:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 843:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Check if the frame is transferred */
 844:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 124              		.loc 1 844 0
 125 0078 A26B     		ldr	r2, [r4, #56]
 126 007a 236C     		ldr	r3, [r4, #64]
ARM GAS  /tmp/cc5gP5av.s 			page 18


 127 007c 9A42     		cmp	r2, r3
 128 007e 0CD1     		bne	.L1
 845:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 846:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Enable the Frame interrupt */
 847:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 129              		.loc 1 847 0
 130 0080 2268     		ldr	r2, [r4]
 131 0082 D368     		ldr	r3, [r2, #12]
 132 0084 43F00103 		orr	r3, r3, #1
 133 0088 D360     		str	r3, [r2, #12]
 848:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 849:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* When snapshot mode, set dcmi state to ready */
 850:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 134              		.loc 1 850 0
 135 008a 2368     		ldr	r3, [r4]
 136 008c 1B68     		ldr	r3, [r3]
 137 008e 13F0020F 		tst	r3, #2
 138 0092 02D0     		beq	.L1
 851:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     {  
 852:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       hdcmi->State= HAL_DCMI_STATE_READY;
 139              		.loc 1 852 0
 140 0094 0123     		movs	r3, #1
 141 0096 84F83530 		strb	r3, [r4, #53]
 142              	.L1:
 143 009a 10BD     		pop	{r4, pc}
 144              		.cfi_endproc
 145              	.LFE154:
 147              		.section	.text.HAL_DCMI_MspInit,"ax",%progbits
 148              		.align	2
 149              		.weak	HAL_DCMI_MspInit
 150              		.thumb
 151              		.thumb_func
 153              	HAL_DCMI_MspInit:
 154              	.LFB138:
 240:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Prevent unused argument(s) compilation warning */
 155              		.loc 1 240 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160              	.LVL16:
 161 0000 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE138:
 165 0002 00BF     		.section	.text.HAL_DCMI_Init,"ax",%progbits
 166              		.align	2
 167              		.global	HAL_DCMI_Init
 168              		.thumb
 169              		.thumb_func
 171              	HAL_DCMI_Init:
 172              	.LFB136:
 144:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Check the DCMI peripheral state */
 173              		.loc 1 144 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              	.LVL17:
ARM GAS  /tmp/cc5gP5av.s 			page 19


 146:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 178              		.loc 1 146 0
 179 0000 0028     		cmp	r0, #0
 180 0002 43D0     		beq	.L13
 144:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Check the DCMI peripheral state */
 181              		.loc 1 144 0
 182 0004 10B5     		push	{r4, lr}
 183              	.LCFI1:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 14, -4
 187 0006 0446     		mov	r4, r0
 166:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 188              		.loc 1 166 0
 189 0008 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 190 000c 13F0FF0F 		tst	r3, #255
 191 0010 01D1     		bne	.L11
 169:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   } 
 192              		.loc 1 169 0
 193 0012 FFF7FEFF 		bl	HAL_DCMI_MspInit
 194              	.LVL18:
 195              	.L11:
 173:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                           /* Configures the HS, VS, DE and PC polarity */
 196              		.loc 1 173 0
 197 0016 0223     		movs	r3, #2
 198 0018 84F83530 		strb	r3, [r4, #53]
 175:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                            DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
 199              		.loc 1 175 0
 200 001c 2268     		ldr	r2, [r4]
 201 001e 1168     		ldr	r1, [r2]
 202 0020 1B4B     		ldr	r3, .L16
 203 0022 0B40     		ands	r3, r3, r1
 204 0024 1360     		str	r3, [r2]
 180:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 205              		.loc 1 180 0
 206 0026 2168     		ldr	r1, [r4]
 207 0028 0868     		ldr	r0, [r1]
 208 002a 6268     		ldr	r2, [r4, #4]
 209 002c 6369     		ldr	r3, [r4, #20]
 210 002e 1A43     		orrs	r2, r2, r3
 181:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 211              		.loc 1 181 0
 212 0030 E368     		ldr	r3, [r4, #12]
 180:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 213              		.loc 1 180 0
 214 0032 1A43     		orrs	r2, r2, r3
 181:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 215              		.loc 1 181 0
 216 0034 2369     		ldr	r3, [r4, #16]
 217 0036 1A43     		orrs	r2, r2, r3
 182:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 218              		.loc 1 182 0
 219 0038 A368     		ldr	r3, [r4, #8]
 181:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 220              		.loc 1 181 0
 221 003a 1343     		orrs	r3, r3, r2
 182:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
ARM GAS  /tmp/cc5gP5av.s 			page 20


 222              		.loc 1 182 0
 223 003c A269     		ldr	r2, [r4, #24]
 224 003e 1343     		orrs	r3, r3, r2
 183:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 225              		.loc 1 183 0
 226 0040 226A     		ldr	r2, [r4, #32]
 182:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 227              		.loc 1 182 0
 228 0042 1343     		orrs	r3, r3, r2
 183:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 229              		.loc 1 183 0
 230 0044 626A     		ldr	r2, [r4, #36]
 231 0046 1343     		orrs	r3, r3, r2
 184:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.LineSelectStart);
 232              		.loc 1 184 0
 233 0048 A26A     		ldr	r2, [r4, #40]
 183:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 234              		.loc 1 183 0
 235 004a 1343     		orrs	r3, r3, r2
 184:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.LineSelectStart);
 236              		.loc 1 184 0
 237 004c E26A     		ldr	r2, [r4, #44]
 238 004e 1A43     		orrs	r2, r2, r3
 185:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      
 239              		.loc 1 185 0
 240 0050 236B     		ldr	r3, [r4, #48]
 184:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.LineSelectStart);
 241              		.loc 1 184 0
 242 0052 1343     		orrs	r3, r3, r2
 180:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                                      hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 243              		.loc 1 180 0
 244 0054 0343     		orrs	r3, r3, r0
 245 0056 0B60     		str	r3, [r1]
 187:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 246              		.loc 1 187 0
 247 0058 6368     		ldr	r3, [r4, #4]
 248 005a 102B     		cmp	r3, #16
 249 005c 0BD1     		bne	.L12
 189:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                              ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|
 250              		.loc 1 189 0
 251 005e 2268     		ldr	r2, [r4]
 252 0060 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 190:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                              ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 253              		.loc 1 190 0
 254 0062 617F     		ldrb	r1, [r4, #29]	@ zero_extendqisi2
 189:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                              ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|
 255              		.loc 1 189 0
 256 0064 43EA0123 		orr	r3, r3, r1, lsl #8
 191:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                              ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 257              		.loc 1 191 0
 258 0068 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 190:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                              ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 259              		.loc 1 190 0
 260 006a 43EA0143 		orr	r3, r3, r1, lsl #16
 192:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 261              		.loc 1 192 0
 262 006e E17F     		ldrb	r1, [r4, #31]	@ zero_extendqisi2
ARM GAS  /tmp/cc5gP5av.s 			page 21


 191:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                              ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 263              		.loc 1 191 0
 264 0070 43EA0163 		orr	r3, r3, r1, lsl #24
 189:HALLIB/Src/stm32f7xx_hal_dcmi.c ****                              ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|
 265              		.loc 1 189 0
 266 0074 9361     		str	r3, [r2, #24]
 267              	.L12:
 197:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 268              		.loc 1 197 0
 269 0076 2268     		ldr	r2, [r4]
 270 0078 D368     		ldr	r3, [r2, #12]
 271 007a 43F01E03 		orr	r3, r3, #30
 272 007e D360     		str	r3, [r2, #12]
 200:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 273              		.loc 1 200 0
 274 0080 0020     		movs	r0, #0
 275 0082 E064     		str	r0, [r4, #76]
 203:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 276              		.loc 1 203 0
 277 0084 0123     		movs	r3, #1
 278 0086 84F83530 		strb	r3, [r4, #53]
 205:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 279              		.loc 1 205 0
 280 008a 10BD     		pop	{r4, pc}
 281              	.LVL19:
 282              	.L13:
 283              	.LCFI2:
 284              		.cfi_def_cfa_offset 0
 285              		.cfi_restore 4
 286              		.cfi_restore 14
 148:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 287              		.loc 1 148 0
 288 008c 0120     		movs	r0, #1
 289              	.LVL20:
 290 008e 7047     		bx	lr
 291              	.L17:
 292              		.align	2
 293              	.L16:
 294 0090 07F0E0FF 		.word	-2035705
 295              		.cfi_endproc
 296              	.LFE136:
 298              		.section	.text.HAL_DCMI_MspDeInit,"ax",%progbits
 299              		.align	2
 300              		.weak	HAL_DCMI_MspDeInit
 301              		.thumb
 302              		.thumb_func
 304              	HAL_DCMI_MspDeInit:
 305              	.LFB139:
 256:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Prevent unused argument(s) compilation warning */
 306              		.loc 1 256 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310              		@ link register save eliminated.
 311              	.LVL21:
 312 0000 7047     		bx	lr
 313              		.cfi_endproc
ARM GAS  /tmp/cc5gP5av.s 			page 22


 314              	.LFE139:
 316 0002 00BF     		.section	.text.HAL_DCMI_DeInit,"ax",%progbits
 317              		.align	2
 318              		.global	HAL_DCMI_DeInit
 319              		.thumb
 320              		.thumb_func
 322              	HAL_DCMI_DeInit:
 323              	.LFB137:
 217:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* DeInit the low level hardware */
 324              		.loc 1 217 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              	.LVL22:
 217:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* DeInit the low level hardware */
 329              		.loc 1 217 0
 330 0000 10B5     		push	{r4, lr}
 331              	.LCFI3:
 332              		.cfi_def_cfa_offset 8
 333              		.cfi_offset 4, -8
 334              		.cfi_offset 14, -4
 335 0002 0446     		mov	r4, r0
 219:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 336              		.loc 1 219 0
 337 0004 FFF7FEFF 		bl	HAL_DCMI_MspDeInit
 338              	.LVL23:
 222:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 339              		.loc 1 222 0
 340 0008 0020     		movs	r0, #0
 341 000a E064     		str	r0, [r4, #76]
 225:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 342              		.loc 1 225 0
 343 000c 84F83500 		strb	r0, [r4, #53]
 228:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 344              		.loc 1 228 0
 345 0010 84F83400 		strb	r0, [r4, #52]
 231:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 346              		.loc 1 231 0
 347 0014 10BD     		pop	{r4, pc}
 348              		.cfi_endproc
 349              	.LFE137:
 351 0016 00BF     		.section	.text.HAL_DCMI_Start_DMA,"ax",%progbits
 352              		.align	2
 353              		.global	HAL_DCMI_Start_DMA
 354              		.thumb
 355              		.thumb_func
 357              	HAL_DCMI_Start_DMA:
 358              	.LFB140:
 295:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Initialize the second memory address */
 359              		.loc 1 295 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
 363              	.LVL24:
 364 0000 30B5     		push	{r4, r5, lr}
 365              	.LCFI4:
 366              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cc5gP5av.s 			page 23


 367              		.cfi_offset 4, -12
 368              		.cfi_offset 5, -8
 369              		.cfi_offset 14, -4
 370 0002 83B0     		sub	sp, sp, #12
 371              	.LCFI5:
 372              		.cfi_def_cfa_offset 24
 373              	.LVL25:
 303:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 374              		.loc 1 303 0
 375 0004 90F83440 		ldrb	r4, [r0, #52]	@ zero_extendqisi2
 376 0008 012C     		cmp	r4, #1
 377 000a 52D0     		beq	.L27
 378 000c 0446     		mov	r4, r0
 303:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 379              		.loc 1 303 0 is_stmt 0 discriminator 2
 380 000e 0120     		movs	r0, #1
 381              	.LVL26:
 382 0010 84F83400 		strb	r0, [r4, #52]
 306:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 383              		.loc 1 306 0 is_stmt 1 discriminator 2
 384 0014 0220     		movs	r0, #2
 385 0016 84F83500 		strb	r0, [r4, #53]
 309:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 386              		.loc 1 309 0 discriminator 2
 387 001a 2568     		ldr	r5, [r4]
 388 001c 2868     		ldr	r0, [r5]
 389 001e 40F48040 		orr	r0, r0, #16384
 390 0022 2860     		str	r0, [r5]
 312:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 391              		.loc 1 312 0 discriminator 2
 392 0024 2568     		ldr	r5, [r4]
 393 0026 2868     		ldr	r0, [r5]
 394 0028 20F00200 		bic	r0, r0, #2
 395 002c 2860     		str	r0, [r5]
 313:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 396              		.loc 1 313 0 discriminator 2
 397 002e 2068     		ldr	r0, [r4]
 398 0030 0568     		ldr	r5, [r0]
 399 0032 2943     		orrs	r1, r1, r5
 400              	.LVL27:
 401 0034 0160     		str	r1, [r0]
 316:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 402              		.loc 1 316 0 discriminator 2
 403 0036 A16C     		ldr	r1, [r4, #72]
 404 0038 1F48     		ldr	r0, .L29
 405 003a C863     		str	r0, [r1, #60]
 319:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 406              		.loc 1 319 0 discriminator 2
 407 003c A16C     		ldr	r1, [r4, #72]
 408 003e 1F48     		ldr	r0, .L29+4
 409 0040 C864     		str	r0, [r1, #76]
 322:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 410              		.loc 1 322 0 discriminator 2
 411 0042 A06C     		ldr	r0, [r4, #72]
 412 0044 0021     		movs	r1, #0
 413 0046 0165     		str	r1, [r0, #80]
 325:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->XferTransferNumber = 0;
ARM GAS  /tmp/cc5gP5av.s 			page 24


 414              		.loc 1 325 0 discriminator 2
 415 0048 A163     		str	r1, [r4, #56]
 326:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 416              		.loc 1 326 0 discriminator 2
 417 004a 2164     		str	r1, [r4, #64]
 328:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 418              		.loc 1 328 0 discriminator 2
 419 004c B3F5803F 		cmp	r3, #65536
 420 0050 05D2     		bcs	.L23
 331:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 421              		.loc 1 331 0
 422 0052 2168     		ldr	r1, [r4]
 423 0054 2831     		adds	r1, r1, #40
 424 0056 A06C     		ldr	r0, [r4, #72]
 425 0058 FFF7FEFF 		bl	HAL_DMA_Start_IT
 426              	.LVL28:
 427 005c 20E0     		b	.L24
 428              	.LVL29:
 429              	.L23:
 336:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 430              		.loc 1 336 0
 431 005e A16C     		ldr	r1, [r4, #72]
 432 0060 1548     		ldr	r0, .L29
 433 0062 4864     		str	r0, [r1, #68]
 339:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->XferSize = Length;
 434              		.loc 1 339 0
 435 0064 0121     		movs	r1, #1
 436 0066 A163     		str	r1, [r4, #56]
 340:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->pBuffPtr = pData;
 437              		.loc 1 340 0
 438 0068 E363     		str	r3, [r4, #60]
 341:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       
 439              		.loc 1 341 0
 440 006a 6264     		str	r2, [r4, #68]
 344:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     {
 441              		.loc 1 344 0
 442 006c 05E0     		b	.L25
 443              	.LVL30:
 444              	.L26:
 346:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       hdcmi->XferCount = hdcmi->XferCount*2;
 445              		.loc 1 346 0
 446 006e E36B     		ldr	r3, [r4, #60]
 447 0070 5B08     		lsrs	r3, r3, #1
 448 0072 E363     		str	r3, [r4, #60]
 347:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     }
 449              		.loc 1 347 0
 450 0074 A36B     		ldr	r3, [r4, #56]
 451 0076 5B00     		lsls	r3, r3, #1
 452 0078 A363     		str	r3, [r4, #56]
 453              	.L25:
 344:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     {
 454              		.loc 1 344 0
 455 007a E36B     		ldr	r3, [r4, #60]
 456 007c B3F5803F 		cmp	r3, #65536
 457 0080 F5D2     		bcs	.L26
 351:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->XferTransferNumber = hdcmi->XferCount;
 458              		.loc 1 351 0
ARM GAS  /tmp/cc5gP5av.s 			page 25


 459 0082 A36B     		ldr	r3, [r4, #56]
 460 0084 023B     		subs	r3, r3, #2
 461 0086 A363     		str	r3, [r4, #56]
 352:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 462              		.loc 1 352 0
 463 0088 A36B     		ldr	r3, [r4, #56]
 464 008a 2364     		str	r3, [r4, #64]
 355:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 465              		.loc 1 355 0
 466 008c E36B     		ldr	r3, [r4, #60]
 467              	.LVL31:
 358:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 468              		.loc 1 358 0
 469 008e 2168     		ldr	r1, [r4]
 470 0090 E06B     		ldr	r0, [r4, #60]
 471 0092 0090     		str	r0, [sp]
 472 0094 02EB8303 		add	r3, r2, r3, lsl #2
 473              	.LVL32:
 474 0098 2831     		adds	r1, r1, #40
 475 009a A06C     		ldr	r0, [r4, #72]
 476 009c FFF7FEFF 		bl	HAL_DMAEx_MultiBufferStart_IT
 477              	.LVL33:
 478              	.L24:
 362:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 479              		.loc 1 362 0
 480 00a0 2268     		ldr	r2, [r4]
 481 00a2 1368     		ldr	r3, [r2]
 482 00a4 43F00103 		orr	r3, r3, #1
 483 00a8 1360     		str	r3, [r2]
 365:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 484              		.loc 1 365 0
 485 00aa 0020     		movs	r0, #0
 486 00ac 84F83400 		strb	r0, [r4, #52]
 368:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 487              		.loc 1 368 0
 488 00b0 00E0     		b	.L22
 489              	.LVL34:
 490              	.L27:
 303:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 491              		.loc 1 303 0
 492 00b2 0220     		movs	r0, #2
 493              	.LVL35:
 494              	.L22:
 369:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 495              		.loc 1 369 0
 496 00b4 03B0     		add	sp, sp, #12
 497              	.LCFI6:
 498              		.cfi_def_cfa_offset 12
 499              		@ sp needed
 500 00b6 30BD     		pop	{r4, r5, pc}
 501              	.L30:
 502              		.align	2
 503              	.L29:
 504 00b8 00000000 		.word	DCMI_DMAXferCplt
 505 00bc 00000000 		.word	DCMI_DMAError
 506              		.cfi_endproc
 507              	.LFE140:
ARM GAS  /tmp/cc5gP5av.s 			page 26


 509              		.section	.text.HAL_DCMI_Stop,"ax",%progbits
 510              		.align	2
 511              		.global	HAL_DCMI_Stop
 512              		.thumb
 513              		.thumb_func
 515              	HAL_DCMI_Stop:
 516              	.LFB141:
 378:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock /8/1000);
 517              		.loc 1 378 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              	.LVL36:
 522 0000 38B5     		push	{r3, r4, r5, lr}
 523              	.LCFI7:
 524              		.cfi_def_cfa_offset 16
 525              		.cfi_offset 3, -16
 526              		.cfi_offset 4, -12
 527              		.cfi_offset 5, -8
 528              		.cfi_offset 14, -4
 379:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   HAL_StatusTypeDef status = HAL_OK;
 529              		.loc 1 379 0
 530 0002 1E4B     		ldr	r3, .L38
 531 0004 1B68     		ldr	r3, [r3]
 532 0006 1E4A     		ldr	r2, .L38+4
 533 0008 A2FB0323 		umull	r2, r3, r2, r3
 534 000c 5A0A     		lsrs	r2, r3, #9
 535 000e 4FF47A73 		mov	r3, #1000
 536 0012 03FB02F3 		mul	r3, r3, r2
 537              	.LVL37:
 383:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 538              		.loc 1 383 0
 539 0016 90F83420 		ldrb	r2, [r0, #52]	@ zero_extendqisi2
 540 001a 012A     		cmp	r2, #1
 541 001c 2CD0     		beq	.L36
 383:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 542              		.loc 1 383 0 is_stmt 0 discriminator 2
 543 001e 0122     		movs	r2, #1
 544 0020 80F83420 		strb	r2, [r0, #52]
 386:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 545              		.loc 1 386 0 is_stmt 1 discriminator 2
 546 0024 0222     		movs	r2, #2
 547 0026 80F83520 		strb	r2, [r0, #53]
 389:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 548              		.loc 1 389 0 discriminator 2
 549 002a 0168     		ldr	r1, [r0]
 550 002c 0A68     		ldr	r2, [r1]
 551 002e 22F00102 		bic	r2, r2, #1
 552 0032 0A60     		str	r2, [r1]
 553              	.L35:
 394:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     {
 554              		.loc 1 394 0
 555 0034 5A1E     		subs	r2, r3, #1
 556              	.LVL38:
 557 0036 2BB9     		cbnz	r3, .L33
 397:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       
 558              		.loc 1 397 0
ARM GAS  /tmp/cc5gP5av.s 			page 27


 559 0038 C36C     		ldr	r3, [r0, #76]
 560 003a 43F02003 		orr	r3, r3, #32
 561 003e C364     		str	r3, [r0, #76]
 562              	.LVL39:
 399:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       break;
 563              		.loc 1 399 0
 564 0040 0325     		movs	r5, #3
 400:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     } 
 565              		.loc 1 400 0
 566 0042 06E0     		b	.L34
 567              	.LVL40:
 568              	.L33:
 403:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 569              		.loc 1 403 0
 570 0044 0368     		ldr	r3, [r0]
 571 0046 1968     		ldr	r1, [r3]
 394:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     {
 572              		.loc 1 394 0
 573 0048 1346     		mov	r3, r2
 403:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 574              		.loc 1 403 0
 575 004a 11F0010F 		tst	r1, #1
 576 004e F1D1     		bne	.L35
 380:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 577              		.loc 1 380 0
 578 0050 0025     		movs	r5, #0
 579              	.LVL41:
 580              	.L34:
 581 0052 0446     		mov	r4, r0
 582              	.LVL42:
 406:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 583              		.loc 1 406 0
 584 0054 0268     		ldr	r2, [r0]
 585              	.LVL43:
 586 0056 1368     		ldr	r3, [r2]
 587 0058 23F48043 		bic	r3, r3, #16384
 588 005c 1360     		str	r3, [r2]
 409:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 589              		.loc 1 409 0
 590 005e 806C     		ldr	r0, [r0, #72]
 591              	.LVL44:
 592 0060 FFF7FEFF 		bl	HAL_DMA_Abort
 593              	.LVL45:
 412:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 594              		.loc 1 412 0
 595 0064 E36C     		ldr	r3, [r4, #76]
 596 0066 E364     		str	r3, [r4, #76]
 415:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 597              		.loc 1 415 0
 598 0068 0123     		movs	r3, #1
 599 006a 84F83530 		strb	r3, [r4, #53]
 418:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 600              		.loc 1 418 0
 601 006e 0023     		movs	r3, #0
 602 0070 84F83430 		strb	r3, [r4, #52]
 421:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 603              		.loc 1 421 0
ARM GAS  /tmp/cc5gP5av.s 			page 28


 604 0074 2846     		mov	r0, r5
 605 0076 38BD     		pop	{r3, r4, r5, pc}
 606              	.LVL46:
 607              	.L36:
 383:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 608              		.loc 1 383 0
 609 0078 0220     		movs	r0, #2
 610              	.LVL47:
 422:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 611              		.loc 1 422 0
 612 007a 38BD     		pop	{r3, r4, r5, pc}
 613              	.LVL48:
 614              	.L39:
 615              		.align	2
 616              	.L38:
 617 007c 00000000 		.word	SystemCoreClock
 618 0080 D34D6210 		.word	274877907
 619              		.cfi_endproc
 620              	.LFE141:
 622              		.section	.text.HAL_DCMI_Suspend,"ax",%progbits
 623              		.align	2
 624              		.global	HAL_DCMI_Suspend
 625              		.thumb
 626              		.thumb_func
 628              	HAL_DCMI_Suspend:
 629              	.LFB142:
 431:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock /8/1000);
 630              		.loc 1 431 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634              		@ link register save eliminated.
 635              	.LVL49:
 432:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   HAL_StatusTypeDef status = HAL_OK;
 636              		.loc 1 432 0
 637 0000 1C4B     		ldr	r3, .L47
 638 0002 1B68     		ldr	r3, [r3]
 639 0004 1C4A     		ldr	r2, .L47+4
 640 0006 A2FB0323 		umull	r2, r3, r2, r3
 641 000a 5A0A     		lsrs	r2, r3, #9
 642 000c 4FF47A73 		mov	r3, #1000
 643 0010 03FB02F3 		mul	r3, r3, r2
 644              	.LVL50:
 436:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 645              		.loc 1 436 0
 646 0014 90F83420 		ldrb	r2, [r0, #52]	@ zero_extendqisi2
 647 0018 012A     		cmp	r2, #1
 648 001a 28D0     		beq	.L45
 436:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 649              		.loc 1 436 0 is_stmt 0 discriminator 2
 650 001c 0122     		movs	r2, #1
 651 001e 80F83420 		strb	r2, [r0, #52]
 438:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 652              		.loc 1 438 0 is_stmt 1 discriminator 2
 653 0022 90F83520 		ldrb	r2, [r0, #53]	@ zero_extendqisi2
 654 0026 D2B2     		uxtb	r2, r2
 655 0028 022A     		cmp	r2, #2
ARM GAS  /tmp/cc5gP5av.s 			page 29


 656 002a 1AD1     		bne	.L46
 441:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 657              		.loc 1 441 0
 658 002c 0522     		movs	r2, #5
 659 002e 80F83520 		strb	r2, [r0, #53]
 444:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 660              		.loc 1 444 0
 661 0032 0168     		ldr	r1, [r0]
 662 0034 0A68     		ldr	r2, [r1]
 663 0036 22F00102 		bic	r2, r2, #1
 664 003a 0A60     		str	r2, [r1]
 665              	.L44:
 449:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       {        
 666              		.loc 1 449 0
 667 003c 5A1E     		subs	r2, r3, #1
 668              	.LVL51:
 669 003e 43B9     		cbnz	r3, .L43
 452:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         
 670              		.loc 1 452 0
 671 0040 C36C     		ldr	r3, [r0, #76]
 672 0042 43F02003 		orr	r3, r3, #32
 673 0046 C364     		str	r3, [r0, #76]
 455:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         
 674              		.loc 1 455 0
 675 0048 0123     		movs	r3, #1
 676 004a 80F83530 		strb	r3, [r0, #53]
 677              	.LVL52:
 457:HALLIB/Src/stm32f7xx_hal_dcmi.c ****         break;
 678              		.loc 1 457 0
 679 004e 0323     		movs	r3, #3
 458:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       }
 680              		.loc 1 458 0
 681 0050 08E0     		b	.L42
 682              	.LVL53:
 683              	.L43:
 461:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }    
 684              		.loc 1 461 0
 685 0052 0368     		ldr	r3, [r0]
 686 0054 1968     		ldr	r1, [r3]
 449:HALLIB/Src/stm32f7xx_hal_dcmi.c ****       {        
 687              		.loc 1 449 0
 688 0056 1346     		mov	r3, r2
 461:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }    
 689              		.loc 1 461 0
 690 0058 11F0010F 		tst	r1, #1
 691 005c EED1     		bne	.L44
 433:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 692              		.loc 1 433 0
 693 005e 0023     		movs	r3, #0
 694 0060 00E0     		b	.L42
 695              	.LVL54:
 696              	.L46:
 697 0062 0023     		movs	r3, #0
 698              	.LVL55:
 699              	.L42:
 464:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 700              		.loc 1 464 0
ARM GAS  /tmp/cc5gP5av.s 			page 30


 701 0064 0022     		movs	r2, #0
 702 0066 80F83420 		strb	r2, [r0, #52]
 467:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 703              		.loc 1 467 0
 704 006a 1846     		mov	r0, r3
 705              	.LVL56:
 706 006c 7047     		bx	lr
 707              	.LVL57:
 708              	.L45:
 436:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 709              		.loc 1 436 0
 710 006e 0220     		movs	r0, #2
 711              	.LVL58:
 468:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 712              		.loc 1 468 0
 713 0070 7047     		bx	lr
 714              	.L48:
 715 0072 00BF     		.align	2
 716              	.L47:
 717 0074 00000000 		.word	SystemCoreClock
 718 0078 D34D6210 		.word	274877907
 719              		.cfi_endproc
 720              	.LFE142:
 722              		.section	.text.HAL_DCMI_Resume,"ax",%progbits
 723              		.align	2
 724              		.global	HAL_DCMI_Resume
 725              		.thumb
 726              		.thumb_func
 728              	HAL_DCMI_Resume:
 729              	.LFB143:
 477:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process locked */
 730              		.loc 1 477 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734              		@ link register save eliminated.
 735              	.LVL59:
 479:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 736              		.loc 1 479 0
 737 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 738 0004 012B     		cmp	r3, #1
 739 0006 14D0     		beq	.L52
 479:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 740              		.loc 1 479 0 is_stmt 0 discriminator 2
 741 0008 0123     		movs	r3, #1
 742 000a 80F83430 		strb	r3, [r0, #52]
 481:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 743              		.loc 1 481 0 is_stmt 1 discriminator 2
 744 000e 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 745 0012 DBB2     		uxtb	r3, r3
 746 0014 052B     		cmp	r3, #5
 747 0016 07D1     		bne	.L51
 484:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 748              		.loc 1 484 0
 749 0018 0223     		movs	r3, #2
 750 001a 80F83530 		strb	r3, [r0, #53]
 487:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   } 
ARM GAS  /tmp/cc5gP5av.s 			page 31


 751              		.loc 1 487 0
 752 001e 0268     		ldr	r2, [r0]
 753 0020 1368     		ldr	r3, [r2]
 754 0022 43F00103 		orr	r3, r3, #1
 755 0026 1360     		str	r3, [r2]
 756              	.L51:
 490:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 757              		.loc 1 490 0
 758 0028 0023     		movs	r3, #0
 759 002a 80F83430 		strb	r3, [r0, #52]
 493:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 760              		.loc 1 493 0
 761 002e 1846     		mov	r0, r3
 762              	.LVL60:
 763 0030 7047     		bx	lr
 764              	.LVL61:
 765              	.L52:
 479:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 766              		.loc 1 479 0
 767 0032 0220     		movs	r0, #2
 768              	.LVL62:
 494:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 769              		.loc 1 494 0
 770 0034 7047     		bx	lr
 771              		.cfi_endproc
 772              	.LFE143:
 774 0036 00BF     		.section	.text.HAL_DCMI_ErrorCallback,"ax",%progbits
 775              		.align	2
 776              		.weak	HAL_DCMI_ErrorCallback
 777              		.thumb
 778              		.thumb_func
 780              	HAL_DCMI_ErrorCallback:
 781              	.LFB145:
 588:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Prevent unused argument(s) compilation warning */
 782              		.loc 1 588 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 0
 785              		@ frame_needed = 0, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 787              	.LVL63:
 788 0000 7047     		bx	lr
 789              		.cfi_endproc
 790              	.LFE145:
 792 0002 00BF     		.section	.text.DCMI_DMAError,"ax",%progbits
 793              		.align	2
 794              		.thumb
 795              		.thumb_func
 797              	DCMI_DMAError:
 798              	.LFB155:
 853:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     }
 854:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }  
 855:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 856:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 857:HALLIB/Src/stm32f7xx_hal_dcmi.c **** /**
 858:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @brief  DMA error callback 
 859:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 860:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   *                the configuration information for the specified DMA module.
ARM GAS  /tmp/cc5gP5av.s 			page 32


 861:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   * @retval None
 862:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   */
 863:HALLIB/Src/stm32f7xx_hal_dcmi.c **** static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
 864:HALLIB/Src/stm32f7xx_hal_dcmi.c **** {
 799              		.loc 1 864 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              	.LVL64:
 804              		.loc 1 864 0
 805 0000 08B5     		push	{r3, lr}
 806              	.LCFI8:
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 3, -8
 809              		.cfi_offset 14, -4
 865:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 810              		.loc 1 865 0
 811 0002 806B     		ldr	r0, [r0, #56]
 812              	.LVL65:
 866:HALLIB/Src/stm32f7xx_hal_dcmi.c ****  
 867:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 813              		.loc 1 867 0
 814 0004 836C     		ldr	r3, [r0, #72]
 815 0006 5B6D     		ldr	r3, [r3, #84]
 816 0008 022B     		cmp	r3, #2
 817 000a 06D0     		beq	.L55
 868:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 869:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Initialize the DCMI state*/
 870:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->State = HAL_DCMI_STATE_READY;
 818              		.loc 1 870 0
 819 000c 0123     		movs	r3, #1
 820 000e 80F83530 		strb	r3, [r0, #53]
 871:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 872:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     /* Set DCMI Error Code */
 873:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 821              		.loc 1 873 0
 822 0012 C36C     		ldr	r3, [r0, #76]
 823 0014 43F04003 		orr	r3, r3, #64
 824 0018 C364     		str	r3, [r0, #76]
 825              	.L55:
 874:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 875:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 876:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* DCMI error Callback */  
 877:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   HAL_DCMI_ErrorCallback(hdcmi);
 826              		.loc 1 877 0
 827 001a FFF7FEFF 		bl	HAL_DCMI_ErrorCallback
 828              	.LVL66:
 829 001e 08BD     		pop	{r3, pc}
 830              		.cfi_endproc
 831              	.LFE155:
 833              		.section	.text.HAL_DCMI_LineEventCallback,"ax",%progbits
 834              		.align	2
 835              		.weak	HAL_DCMI_LineEventCallback
 836              		.thumb
 837              		.thumb_func
 839              	HAL_DCMI_LineEventCallback:
 840              	.LFB146:
ARM GAS  /tmp/cc5gP5av.s 			page 33


 604:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 841              		.loc 1 604 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 0
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845              		@ link register save eliminated.
 846              	.LVL67:
 847 0000 7047     		bx	lr
 848              		.cfi_endproc
 849              	.LFE146:
 851 0002 00BF     		.section	.text.HAL_DCMI_VsyncEventCallback,"ax",%progbits
 852              		.align	2
 853              		.weak	HAL_DCMI_VsyncEventCallback
 854              		.thumb
 855              		.thumb_func
 857              	HAL_DCMI_VsyncEventCallback:
 858              	.LFB147:
 617:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Prevent unused argument(s) compilation warning */
 859              		.loc 1 617 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              		@ link register save eliminated.
 864              	.LVL68:
 865 0000 7047     		bx	lr
 866              		.cfi_endproc
 867              	.LFE147:
 869 0002 00BF     		.section	.text.HAL_DCMI_FrameEventCallback,"ax",%progbits
 870              		.align	2
 871              		.weak	HAL_DCMI_FrameEventCallback
 872              		.thumb
 873              		.thumb_func
 875              	HAL_DCMI_FrameEventCallback:
 876              	.LFB148:
 633:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Prevent unused argument(s) compilation warning */
 877              		.loc 1 633 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 0
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881              		@ link register save eliminated.
 882              	.LVL69:
 883 0000 7047     		bx	lr
 884              		.cfi_endproc
 885              	.LFE148:
 887 0002 00BF     		.section	.text.HAL_DCMI_IRQHandler,"ax",%progbits
 888              		.align	2
 889              		.global	HAL_DCMI_IRQHandler
 890              		.thumb
 891              		.thumb_func
 893              	HAL_DCMI_IRQHandler:
 894              	.LFB144:
 503:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 895              		.loc 1 503 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 899              	.LVL70:
ARM GAS  /tmp/cc5gP5av.s 			page 34


 503:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 900              		.loc 1 503 0
 901 0000 38B5     		push	{r3, r4, r5, lr}
 902              	.LCFI9:
 903              		.cfi_def_cfa_offset 16
 904              		.cfi_offset 3, -16
 905              		.cfi_offset 4, -12
 906              		.cfi_offset 5, -8
 907              		.cfi_offset 14, -4
 908 0002 0446     		mov	r4, r0
 504:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   
 909              		.loc 1 504 0
 910 0004 0368     		ldr	r3, [r0]
 911 0006 1D69     		ldr	r5, [r3, #16]
 912              	.LVL71:
 507:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 913              		.loc 1 507 0
 914 0008 15F0040F 		tst	r5, #4
 915 000c 0DD0     		beq	.L61
 510:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 916              		.loc 1 510 0
 917 000e 0422     		movs	r2, #4
 918 0010 5A61     		str	r2, [r3, #20]
 513:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 919              		.loc 1 513 0
 920 0012 C36C     		ldr	r3, [r0, #76]
 921 0014 43F00203 		orr	r3, r3, #2
 922 0018 C364     		str	r3, [r0, #76]
 516:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 923              		.loc 1 516 0
 924 001a 80F83520 		strb	r2, [r0, #53]
 519:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 925              		.loc 1 519 0
 926 001e 836C     		ldr	r3, [r0, #72]
 927 0020 204A     		ldr	r2, .L68
 928 0022 1A65     		str	r2, [r3, #80]
 522:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 929              		.loc 1 522 0
 930 0024 806C     		ldr	r0, [r0, #72]
 931              	.LVL72:
 932 0026 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 933              	.LVL73:
 934              	.L61:
 525:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 935              		.loc 1 525 0
 936 002a 15F0020F 		tst	r5, #2
 937 002e 0FD0     		beq	.L62
 528:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 938              		.loc 1 528 0
 939 0030 2368     		ldr	r3, [r4]
 940 0032 0222     		movs	r2, #2
 941 0034 5A61     		str	r2, [r3, #20]
 531:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 942              		.loc 1 531 0
 943 0036 E36C     		ldr	r3, [r4, #76]
 944 0038 43F00103 		orr	r3, r3, #1
 945 003c E364     		str	r3, [r4, #76]
ARM GAS  /tmp/cc5gP5av.s 			page 35


 534:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 946              		.loc 1 534 0
 947 003e 0423     		movs	r3, #4
 948 0040 84F83530 		strb	r3, [r4, #53]
 537:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 949              		.loc 1 537 0
 950 0044 A36C     		ldr	r3, [r4, #72]
 951 0046 174A     		ldr	r2, .L68
 952 0048 1A65     		str	r2, [r3, #80]
 540:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 953              		.loc 1 540 0
 954 004a A06C     		ldr	r0, [r4, #72]
 955 004c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 956              	.LVL74:
 957              	.L62:
 543:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 958              		.loc 1 543 0
 959 0050 15F0100F 		tst	r5, #16
 960 0054 05D0     		beq	.L63
 546:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 961              		.loc 1 546 0
 962 0056 2368     		ldr	r3, [r4]
 963 0058 1022     		movs	r2, #16
 964 005a 5A61     		str	r2, [r3, #20]
 549:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 965              		.loc 1 549 0
 966 005c 2046     		mov	r0, r4
 967 005e FFF7FEFF 		bl	HAL_DCMI_LineEventCallback
 968              	.LVL75:
 969              	.L63:
 552:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 970              		.loc 1 552 0
 971 0062 15F0080F 		tst	r5, #8
 972 0066 05D0     		beq	.L64
 555:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 973              		.loc 1 555 0
 974 0068 2368     		ldr	r3, [r4]
 975 006a 0822     		movs	r2, #8
 976 006c 5A61     		str	r2, [r3, #20]
 558:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 977              		.loc 1 558 0
 978 006e 2046     		mov	r0, r4
 979 0070 FFF7FEFF 		bl	HAL_DCMI_VsyncEventCallback
 980              	.LVL76:
 981              	.L64:
 561:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   {
 982              		.loc 1 561 0
 983 0074 15F0010F 		tst	r5, #1
 984 0078 13D0     		beq	.L60
 564:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     { 
 985              		.loc 1 564 0
 986 007a 2368     		ldr	r3, [r4]
 987 007c 1A68     		ldr	r2, [r3]
 988 007e 12F0020F 		tst	r2, #2
 989 0082 03D0     		beq	.L66
 567:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     }
 990              		.loc 1 567 0
ARM GAS  /tmp/cc5gP5av.s 			page 36


 991 0084 DA68     		ldr	r2, [r3, #12]
 992 0086 22F01E02 		bic	r2, r2, #30
 993 008a DA60     		str	r2, [r3, #12]
 994              	.L66:
 571:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 995              		.loc 1 571 0
 996 008c 2268     		ldr	r2, [r4]
 997 008e D368     		ldr	r3, [r2, #12]
 998 0090 23F00103 		bic	r3, r3, #1
 999 0094 D360     		str	r3, [r2, #12]
 574:HALLIB/Src/stm32f7xx_hal_dcmi.c ****     
 1000              		.loc 1 574 0
 1001 0096 2368     		ldr	r3, [r4]
 1002 0098 0122     		movs	r2, #1
 1003 009a 5A61     		str	r2, [r3, #20]
 577:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   }
 1004              		.loc 1 577 0
 1005 009c 2046     		mov	r0, r4
 1006 009e FFF7FEFF 		bl	HAL_DCMI_FrameEventCallback
 1007              	.LVL77:
 1008              	.L60:
 1009 00a2 38BD     		pop	{r3, r4, r5, pc}
 1010              	.LVL78:
 1011              	.L69:
 1012              		.align	2
 1013              	.L68:
 1014 00a4 00000000 		.word	DCMI_DMAError
 1015              		.cfi_endproc
 1016              	.LFE144:
 1018              		.section	.text.HAL_DCMI_ConfigCrop,"ax",%progbits
 1019              		.align	2
 1020              		.global	HAL_DCMI_ConfigCrop
 1021              		.thumb
 1022              		.thumb_func
 1024              	HAL_DCMI_ConfigCrop:
 1025              	.LFB149:
 673:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Locked */
 1026              		.loc 1 673 0
 1027              		.cfi_startproc
 1028              		@ args = 4, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              		@ link register save eliminated.
 1031              	.LVL79:
 1032 0000 30B4     		push	{r4, r5}
 1033              	.LCFI10:
 1034              		.cfi_def_cfa_offset 8
 1035              		.cfi_offset 4, -8
 1036              		.cfi_offset 5, -4
 675:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1037              		.loc 1 675 0
 1038 0002 90F83440 		ldrb	r4, [r0, #52]	@ zero_extendqisi2
 1039 0006 012C     		cmp	r4, #1
 1040 0008 13D0     		beq	.L72
 678:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1041              		.loc 1 678 0 discriminator 2
 1042 000a 0224     		movs	r4, #2
 1043 000c 80F83540 		strb	r4, [r0, #53]
ARM GAS  /tmp/cc5gP5av.s 			page 37


 687:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 1044              		.loc 1 687 0 discriminator 2
 1045 0010 0468     		ldr	r4, [r0]
 1046 0012 029D     		ldr	r5, [sp, #8]
 1047 0014 43EA0543 		orr	r3, r3, r5, lsl #16
 1048              	.LVL80:
 1049 0018 6362     		str	r3, [r4, #36]
 688:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1050              		.loc 1 688 0 discriminator 2
 1051 001a 0368     		ldr	r3, [r0]
 1052 001c 41EA0241 		orr	r1, r1, r2, lsl #16
 1053              	.LVL81:
 1054 0020 1962     		str	r1, [r3, #32]
 691:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1055              		.loc 1 691 0 discriminator 2
 1056 0022 0123     		movs	r3, #1
 1057 0024 80F83530 		strb	r3, [r0, #53]
 694:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1058              		.loc 1 694 0 discriminator 2
 1059 0028 0023     		movs	r3, #0
 1060 002a 80F83430 		strb	r3, [r0, #52]
 696:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 1061              		.loc 1 696 0 discriminator 2
 1062 002e 1846     		mov	r0, r3
 1063              	.LVL82:
 1064 0030 00E0     		b	.L71
 1065              	.LVL83:
 1066              	.L72:
 675:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1067              		.loc 1 675 0
 1068 0032 0220     		movs	r0, #2
 1069              	.LVL84:
 1070              	.L71:
 697:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1071              		.loc 1 697 0
 1072 0034 30BC     		pop	{r4, r5}
 1073              	.LCFI11:
 1074              		.cfi_restore 5
 1075              		.cfi_restore 4
 1076              		.cfi_def_cfa_offset 0
 1077              	.LVL85:
 1078 0036 7047     		bx	lr
 1079              		.cfi_endproc
 1080              	.LFE149:
 1082              		.section	.text.HAL_DCMI_DisableCrop,"ax",%progbits
 1083              		.align	2
 1084              		.global	HAL_DCMI_DisableCrop
 1085              		.thumb
 1086              		.thumb_func
 1088              	HAL_DCMI_DisableCrop:
 1089              	.LFB150:
 706:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Locked */
 1090              		.loc 1 706 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              		@ link register save eliminated.
ARM GAS  /tmp/cc5gP5av.s 			page 38


 1095              	.LVL86:
 708:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1096              		.loc 1 708 0
 1097 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1098 0004 012B     		cmp	r3, #1
 1099 0006 11D0     		beq	.L76
 708:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1100              		.loc 1 708 0 is_stmt 0 discriminator 2
 1101 0008 0122     		movs	r2, #1
 1102 000a 80F83420 		strb	r2, [r0, #52]
 711:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1103              		.loc 1 711 0 is_stmt 1 discriminator 2
 1104 000e 0223     		movs	r3, #2
 1105 0010 80F83530 		strb	r3, [r0, #53]
 714:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1106              		.loc 1 714 0 discriminator 2
 1107 0014 0168     		ldr	r1, [r0]
 1108 0016 0B68     		ldr	r3, [r1]
 1109 0018 23F00403 		bic	r3, r3, #4
 1110 001c 0B60     		str	r3, [r1]
 717:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1111              		.loc 1 717 0 discriminator 2
 1112 001e 80F83520 		strb	r2, [r0, #53]
 720:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1113              		.loc 1 720 0 discriminator 2
 1114 0022 0023     		movs	r3, #0
 1115 0024 80F83430 		strb	r3, [r0, #52]
 722:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 1116              		.loc 1 722 0 discriminator 2
 1117 0028 1846     		mov	r0, r3
 1118              	.LVL87:
 1119 002a 7047     		bx	lr
 1120              	.LVL88:
 1121              	.L76:
 708:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1122              		.loc 1 708 0
 1123 002c 0220     		movs	r0, #2
 1124              	.LVL89:
 723:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1125              		.loc 1 723 0
 1126 002e 7047     		bx	lr
 1127              		.cfi_endproc
 1128              	.LFE150:
 1130              		.section	.text.HAL_DCMI_EnableCrop,"ax",%progbits
 1131              		.align	2
 1132              		.global	HAL_DCMI_EnableCrop
 1133              		.thumb
 1134              		.thumb_func
 1136              	HAL_DCMI_EnableCrop:
 1137              	.LFB151:
 732:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   /* Process Locked */
 1138              		.loc 1 732 0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 1142              		@ link register save eliminated.
 1143              	.LVL90:
ARM GAS  /tmp/cc5gP5av.s 			page 39


 734:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1144              		.loc 1 734 0
 1145 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1146 0004 012B     		cmp	r3, #1
 1147 0006 11D0     		beq	.L79
 734:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1148              		.loc 1 734 0 is_stmt 0 discriminator 2
 1149 0008 0122     		movs	r2, #1
 1150 000a 80F83420 		strb	r2, [r0, #52]
 737:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1151              		.loc 1 737 0 is_stmt 1 discriminator 2
 1152 000e 0223     		movs	r3, #2
 1153 0010 80F83530 		strb	r3, [r0, #53]
 740:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1154              		.loc 1 740 0 discriminator 2
 1155 0014 0168     		ldr	r1, [r0]
 1156 0016 0B68     		ldr	r3, [r1]
 1157 0018 43F00403 		orr	r3, r3, #4
 1158 001c 0B60     		str	r3, [r1]
 743:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1159              		.loc 1 743 0 discriminator 2
 1160 001e 80F83520 		strb	r2, [r0, #53]
 746:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1161              		.loc 1 746 0 discriminator 2
 1162 0022 0023     		movs	r3, #0
 1163 0024 80F83430 		strb	r3, [r0, #52]
 748:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 1164              		.loc 1 748 0 discriminator 2
 1165 0028 1846     		mov	r0, r3
 1166              	.LVL91:
 1167 002a 7047     		bx	lr
 1168              	.LVL92:
 1169              	.L79:
 734:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1170              		.loc 1 734 0
 1171 002c 0220     		movs	r0, #2
 1172              	.LVL93:
 749:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1173              		.loc 1 749 0
 1174 002e 7047     		bx	lr
 1175              		.cfi_endproc
 1176              	.LFE151:
 1178              		.section	.text.HAL_DCMI_GetState,"ax",%progbits
 1179              		.align	2
 1180              		.global	HAL_DCMI_GetState
 1181              		.thumb
 1182              		.thumb_func
 1184              	HAL_DCMI_GetState:
 1185              	.LFB152:
 778:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return hdcmi->State;
 1186              		.loc 1 778 0
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 0
 1189              		@ frame_needed = 0, uses_anonymous_args = 0
 1190              		@ link register save eliminated.
 1191              	.LVL94:
 779:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
ARM GAS  /tmp/cc5gP5av.s 			page 40


 1192              		.loc 1 779 0
 1193 0000 90F83500 		ldrb	r0, [r0, #53]	@ zero_extendqisi2
 1194              	.LVL95:
 780:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1195              		.loc 1 780 0
 1196 0004 7047     		bx	lr
 1197              		.cfi_endproc
 1198              	.LFE152:
 1200 0006 00BF     		.section	.text.HAL_DCMI_GetError,"ax",%progbits
 1201              		.align	2
 1202              		.global	HAL_DCMI_GetError
 1203              		.thumb
 1204              		.thumb_func
 1206              	HAL_DCMI_GetError:
 1207              	.LFB153:
 789:HALLIB/Src/stm32f7xx_hal_dcmi.c ****   return hdcmi->ErrorCode;
 1208              		.loc 1 789 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212              		@ link register save eliminated.
 1213              	.LVL96:
 790:HALLIB/Src/stm32f7xx_hal_dcmi.c **** }
 1214              		.loc 1 790 0
 1215 0000 C06C     		ldr	r0, [r0, #76]
 1216              	.LVL97:
 791:HALLIB/Src/stm32f7xx_hal_dcmi.c **** 
 1217              		.loc 1 791 0
 1218 0002 7047     		bx	lr
 1219              		.cfi_endproc
 1220              	.LFE153:
 1222              		.text
 1223              	.Letext0:
 1224              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 1225              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 1226              		.file 4 "Inc/stm32f767xx.h"
 1227              		.file 5 "HALLIB/Inc/stm32f7xx_hal_def.h"
 1228              		.file 6 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 1229              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma_ex.h"
 1230              		.file 8 "HALLIB/Inc/stm32f7xx_hal_dcmi.h"
 1231              		.file 9 "CORE/core_cm7.h"
 1232              		.file 10 "Inc/system_stm32f7xx.h"
ARM GAS  /tmp/cc5gP5av.s 			page 41


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_dcmi.c
     /tmp/cc5gP5av.s:21     .text.DCMI_DMAXferCplt:00000000 $t
     /tmp/cc5gP5av.s:25     .text.DCMI_DMAXferCplt:00000000 DCMI_DMAXferCplt
     /tmp/cc5gP5av.s:148    .text.HAL_DCMI_MspInit:00000000 $t
     /tmp/cc5gP5av.s:153    .text.HAL_DCMI_MspInit:00000000 HAL_DCMI_MspInit
     /tmp/cc5gP5av.s:166    .text.HAL_DCMI_Init:00000000 $t
     /tmp/cc5gP5av.s:171    .text.HAL_DCMI_Init:00000000 HAL_DCMI_Init
     /tmp/cc5gP5av.s:294    .text.HAL_DCMI_Init:00000090 $d
     /tmp/cc5gP5av.s:299    .text.HAL_DCMI_MspDeInit:00000000 $t
     /tmp/cc5gP5av.s:304    .text.HAL_DCMI_MspDeInit:00000000 HAL_DCMI_MspDeInit
     /tmp/cc5gP5av.s:317    .text.HAL_DCMI_DeInit:00000000 $t
     /tmp/cc5gP5av.s:322    .text.HAL_DCMI_DeInit:00000000 HAL_DCMI_DeInit
     /tmp/cc5gP5av.s:352    .text.HAL_DCMI_Start_DMA:00000000 $t
     /tmp/cc5gP5av.s:357    .text.HAL_DCMI_Start_DMA:00000000 HAL_DCMI_Start_DMA
     /tmp/cc5gP5av.s:504    .text.HAL_DCMI_Start_DMA:000000b8 $d
     /tmp/cc5gP5av.s:797    .text.DCMI_DMAError:00000000 DCMI_DMAError
     /tmp/cc5gP5av.s:510    .text.HAL_DCMI_Stop:00000000 $t
     /tmp/cc5gP5av.s:515    .text.HAL_DCMI_Stop:00000000 HAL_DCMI_Stop
     /tmp/cc5gP5av.s:617    .text.HAL_DCMI_Stop:0000007c $d
     /tmp/cc5gP5av.s:623    .text.HAL_DCMI_Suspend:00000000 $t
     /tmp/cc5gP5av.s:628    .text.HAL_DCMI_Suspend:00000000 HAL_DCMI_Suspend
     /tmp/cc5gP5av.s:717    .text.HAL_DCMI_Suspend:00000074 $d
     /tmp/cc5gP5av.s:723    .text.HAL_DCMI_Resume:00000000 $t
     /tmp/cc5gP5av.s:728    .text.HAL_DCMI_Resume:00000000 HAL_DCMI_Resume
     /tmp/cc5gP5av.s:775    .text.HAL_DCMI_ErrorCallback:00000000 $t
     /tmp/cc5gP5av.s:780    .text.HAL_DCMI_ErrorCallback:00000000 HAL_DCMI_ErrorCallback
     /tmp/cc5gP5av.s:793    .text.DCMI_DMAError:00000000 $t
     /tmp/cc5gP5av.s:834    .text.HAL_DCMI_LineEventCallback:00000000 $t
     /tmp/cc5gP5av.s:839    .text.HAL_DCMI_LineEventCallback:00000000 HAL_DCMI_LineEventCallback
     /tmp/cc5gP5av.s:852    .text.HAL_DCMI_VsyncEventCallback:00000000 $t
     /tmp/cc5gP5av.s:857    .text.HAL_DCMI_VsyncEventCallback:00000000 HAL_DCMI_VsyncEventCallback
     /tmp/cc5gP5av.s:870    .text.HAL_DCMI_FrameEventCallback:00000000 $t
     /tmp/cc5gP5av.s:875    .text.HAL_DCMI_FrameEventCallback:00000000 HAL_DCMI_FrameEventCallback
     /tmp/cc5gP5av.s:888    .text.HAL_DCMI_IRQHandler:00000000 $t
     /tmp/cc5gP5av.s:893    .text.HAL_DCMI_IRQHandler:00000000 HAL_DCMI_IRQHandler
     /tmp/cc5gP5av.s:1014   .text.HAL_DCMI_IRQHandler:000000a4 $d
     /tmp/cc5gP5av.s:1019   .text.HAL_DCMI_ConfigCrop:00000000 $t
     /tmp/cc5gP5av.s:1024   .text.HAL_DCMI_ConfigCrop:00000000 HAL_DCMI_ConfigCrop
     /tmp/cc5gP5av.s:1083   .text.HAL_DCMI_DisableCrop:00000000 $t
     /tmp/cc5gP5av.s:1088   .text.HAL_DCMI_DisableCrop:00000000 HAL_DCMI_DisableCrop
     /tmp/cc5gP5av.s:1131   .text.HAL_DCMI_EnableCrop:00000000 $t
     /tmp/cc5gP5av.s:1136   .text.HAL_DCMI_EnableCrop:00000000 HAL_DCMI_EnableCrop
     /tmp/cc5gP5av.s:1179   .text.HAL_DCMI_GetState:00000000 $t
     /tmp/cc5gP5av.s:1184   .text.HAL_DCMI_GetState:00000000 HAL_DCMI_GetState
     /tmp/cc5gP5av.s:1201   .text.HAL_DCMI_GetError:00000000 $t
     /tmp/cc5gP5av.s:1206   .text.HAL_DCMI_GetError:00000000 HAL_DCMI_GetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_DMAEx_ChangeMemory
HAL_DMA_Start_IT
HAL_DMAEx_MultiBufferStart_IT
HAL_DMA_Abort
SystemCoreClock
HAL_DMA_Abort_IT
