ARM GAS  /tmp/ccwQVsCz.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_nand.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_NAND_MspInit,"ax",%progbits
  21              		.align	2
  22              		.weak	HAL_NAND_MspInit
  23              		.thumb
  24              		.thumb_func
  26              	HAL_NAND_MspInit:
  27              	.LFB138:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal_nand.c"
   1:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_nand.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @file    stm32f7xx_hal_nand.c
   4:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief   NAND HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_nand.c ****   *          This file provides a generic firmware to drive NAND memories mounted 
   7:HALLIB/Src/stm32f7xx_hal_nand.c ****   *          as external device.
   8:HALLIB/Src/stm32f7xx_hal_nand.c ****   *         
   9:HALLIB/Src/stm32f7xx_hal_nand.c ****   @verbatim
  10:HALLIB/Src/stm32f7xx_hal_nand.c ****   ==============================================================================
  11:HALLIB/Src/stm32f7xx_hal_nand.c ****                          ##### How to use this driver #####
  12:HALLIB/Src/stm32f7xx_hal_nand.c ****   ==============================================================================    
  13:HALLIB/Src/stm32f7xx_hal_nand.c ****     [..]
  14:HALLIB/Src/stm32f7xx_hal_nand.c ****       This driver is a generic layered driver which contains a set of APIs used to 
  15:HALLIB/Src/stm32f7xx_hal_nand.c ****       control NAND flash memories. It uses the FMC/FSMC layer functions to interface 
  16:HALLIB/Src/stm32f7xx_hal_nand.c ****       with NAND devices. This driver is used as follows:
  17:HALLIB/Src/stm32f7xx_hal_nand.c ****     
  18:HALLIB/Src/stm32f7xx_hal_nand.c ****       (+) NAND flash memory configuration sequence using the function HAL_NAND_Init() 
  19:HALLIB/Src/stm32f7xx_hal_nand.c ****           with control and timing parameters for both common and attribute spaces.
  20:HALLIB/Src/stm32f7xx_hal_nand.c ****             
  21:HALLIB/Src/stm32f7xx_hal_nand.c ****       (+) Read NAND flash memory maker and device IDs using the function
  22:HALLIB/Src/stm32f7xx_hal_nand.c ****           HAL_NAND_Read_ID(). The read information is stored in the NAND_ID_TypeDef 
  23:HALLIB/Src/stm32f7xx_hal_nand.c ****           structure declared by the function caller. 
  24:HALLIB/Src/stm32f7xx_hal_nand.c ****         
  25:HALLIB/Src/stm32f7xx_hal_nand.c ****       (+) Access NAND flash memory by read/write operations using the functions
  26:HALLIB/Src/stm32f7xx_hal_nand.c ****           HAL_NAND_Read_Page_8b()/HAL_NAND_Read_SpareArea_8b(), 
  27:HALLIB/Src/stm32f7xx_hal_nand.c ****           HAL_NAND_Write_Page_8b()/HAL_NAND_Write_SpareArea_8b(),
  28:HALLIB/Src/stm32f7xx_hal_nand.c ****           HAL_NAND_Read_Page_16b()/HAL_NAND_Read_SpareArea_16b(), 
  29:HALLIB/Src/stm32f7xx_hal_nand.c ****           HAL_NAND_Write_Page_16b()/HAL_NAND_Write_SpareArea_16b()
  30:HALLIB/Src/stm32f7xx_hal_nand.c ****           to read/write page(s)/spare area(s). These functions use specific device 
ARM GAS  /tmp/ccwQVsCz.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal_nand.c ****           information (Block, page size..) predefined by the user in the NAND_DeviceConfigTypeDef 
  32:HALLIB/Src/stm32f7xx_hal_nand.c ****           structure. The read/write address information is contained by the Nand_Address_Typedef
  33:HALLIB/Src/stm32f7xx_hal_nand.c ****           structure passed as parameter.
  34:HALLIB/Src/stm32f7xx_hal_nand.c ****         
  35:HALLIB/Src/stm32f7xx_hal_nand.c ****       (+) Perform NAND flash Reset chip operation using the function HAL_NAND_Reset().
  36:HALLIB/Src/stm32f7xx_hal_nand.c ****         
  37:HALLIB/Src/stm32f7xx_hal_nand.c ****       (+) Perform NAND flash erase block operation using the function HAL_NAND_Erase_Block().
  38:HALLIB/Src/stm32f7xx_hal_nand.c ****           The erase block address information is contained in the Nand_Address_Typedef 
  39:HALLIB/Src/stm32f7xx_hal_nand.c ****           structure passed as parameter.
  40:HALLIB/Src/stm32f7xx_hal_nand.c ****     
  41:HALLIB/Src/stm32f7xx_hal_nand.c ****       (+) Read the NAND flash status operation using the function HAL_NAND_Read_Status().
  42:HALLIB/Src/stm32f7xx_hal_nand.c ****         
  43:HALLIB/Src/stm32f7xx_hal_nand.c ****       (+) You can also control the NAND device by calling the control APIs HAL_NAND_ECC_Enable()/
  44:HALLIB/Src/stm32f7xx_hal_nand.c ****           HAL_NAND_ECC_Disable() to respectively enable/disable the ECC code correction
  45:HALLIB/Src/stm32f7xx_hal_nand.c ****           feature or the function HAL_NAND_GetECC() to get the ECC correction code. 
  46:HALLIB/Src/stm32f7xx_hal_nand.c ****        
  47:HALLIB/Src/stm32f7xx_hal_nand.c ****       (+) You can monitor the NAND device HAL state by calling the function
  48:HALLIB/Src/stm32f7xx_hal_nand.c ****           HAL_NAND_GetState()  
  49:HALLIB/Src/stm32f7xx_hal_nand.c **** 
  50:HALLIB/Src/stm32f7xx_hal_nand.c ****     [..]
  51:HALLIB/Src/stm32f7xx_hal_nand.c ****       (@) This driver is a set of generic APIs which handle standard NAND flash operations.
  52:HALLIB/Src/stm32f7xx_hal_nand.c ****           If a NAND flash device contains different operations and/or implementations, 
  53:HALLIB/Src/stm32f7xx_hal_nand.c ****           it should be implemented separately.
  54:HALLIB/Src/stm32f7xx_hal_nand.c **** 
  55:HALLIB/Src/stm32f7xx_hal_nand.c ****   @endverbatim
  56:HALLIB/Src/stm32f7xx_hal_nand.c ****   ******************************************************************************
  57:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @attention
  58:HALLIB/Src/stm32f7xx_hal_nand.c ****   *
  59:HALLIB/Src/stm32f7xx_hal_nand.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  60:HALLIB/Src/stm32f7xx_hal_nand.c ****   *
  61:HALLIB/Src/stm32f7xx_hal_nand.c ****   * Redistribution and use in source and binary forms, with or without modification,
  62:HALLIB/Src/stm32f7xx_hal_nand.c ****   * are permitted provided that the following conditions are met:
  63:HALLIB/Src/stm32f7xx_hal_nand.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  64:HALLIB/Src/stm32f7xx_hal_nand.c ****   *      this list of conditions and the following disclaimer.
  65:HALLIB/Src/stm32f7xx_hal_nand.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  66:HALLIB/Src/stm32f7xx_hal_nand.c ****   *      this list of conditions and the following disclaimer in the documentation
  67:HALLIB/Src/stm32f7xx_hal_nand.c ****   *      and/or other materials provided with the distribution.
  68:HALLIB/Src/stm32f7xx_hal_nand.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  69:HALLIB/Src/stm32f7xx_hal_nand.c ****   *      may be used to endorse or promote products derived from this software
  70:HALLIB/Src/stm32f7xx_hal_nand.c ****   *      without specific prior written permission.
  71:HALLIB/Src/stm32f7xx_hal_nand.c ****   *
  72:HALLIB/Src/stm32f7xx_hal_nand.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  73:HALLIB/Src/stm32f7xx_hal_nand.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  74:HALLIB/Src/stm32f7xx_hal_nand.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  75:HALLIB/Src/stm32f7xx_hal_nand.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  76:HALLIB/Src/stm32f7xx_hal_nand.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  77:HALLIB/Src/stm32f7xx_hal_nand.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  78:HALLIB/Src/stm32f7xx_hal_nand.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  79:HALLIB/Src/stm32f7xx_hal_nand.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  80:HALLIB/Src/stm32f7xx_hal_nand.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  81:HALLIB/Src/stm32f7xx_hal_nand.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  82:HALLIB/Src/stm32f7xx_hal_nand.c ****   *
  83:HALLIB/Src/stm32f7xx_hal_nand.c ****   ******************************************************************************
  84:HALLIB/Src/stm32f7xx_hal_nand.c ****   */ 
  85:HALLIB/Src/stm32f7xx_hal_nand.c **** 
  86:HALLIB/Src/stm32f7xx_hal_nand.c **** /* Includes ------------------------------------------------------------------*/
  87:HALLIB/Src/stm32f7xx_hal_nand.c **** #include "stm32f7xx_hal.h"
ARM GAS  /tmp/ccwQVsCz.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal_nand.c **** 
  89:HALLIB/Src/stm32f7xx_hal_nand.c **** /** @addtogroup STM32F7xx_HAL_Driver
  90:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @{
  91:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
  92:HALLIB/Src/stm32f7xx_hal_nand.c **** 
  93:HALLIB/Src/stm32f7xx_hal_nand.c **** 
  94:HALLIB/Src/stm32f7xx_hal_nand.c **** #ifdef HAL_NAND_MODULE_ENABLED
  95:HALLIB/Src/stm32f7xx_hal_nand.c **** 
  96:HALLIB/Src/stm32f7xx_hal_nand.c **** /** @defgroup NAND NAND 
  97:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief NAND HAL module driver
  98:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @{
  99:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 100:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 101:HALLIB/Src/stm32f7xx_hal_nand.c **** /* Private typedef -----------------------------------------------------------*/
 102:HALLIB/Src/stm32f7xx_hal_nand.c **** /* Private Constants ------------------------------------------------------------*/
 103:HALLIB/Src/stm32f7xx_hal_nand.c **** /* Private macro -------------------------------------------------------------*/    
 104:HALLIB/Src/stm32f7xx_hal_nand.c **** /* Private variables ---------------------------------------------------------*/
 105:HALLIB/Src/stm32f7xx_hal_nand.c **** /* Private function prototypes -----------------------------------------------*/
 106:HALLIB/Src/stm32f7xx_hal_nand.c **** /* Exported functions ---------------------------------------------------------*/
 107:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 108:HALLIB/Src/stm32f7xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions NAND Exported Functions
 109:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @{
 110:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 111:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 112:HALLIB/Src/stm32f7xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group1 Initialization and de-initialization functions 
 113:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief    Initialization and Configuration functions 
 114:HALLIB/Src/stm32f7xx_hal_nand.c ****   *
 115:HALLIB/Src/stm32f7xx_hal_nand.c ****   @verbatim    
 116:HALLIB/Src/stm32f7xx_hal_nand.c ****   ==============================================================================
 117:HALLIB/Src/stm32f7xx_hal_nand.c ****             ##### NAND Initialization and de-initialization functions #####
 118:HALLIB/Src/stm32f7xx_hal_nand.c ****   ==============================================================================
 119:HALLIB/Src/stm32f7xx_hal_nand.c ****   [..]  
 120:HALLIB/Src/stm32f7xx_hal_nand.c ****     This section provides functions allowing to initialize/de-initialize
 121:HALLIB/Src/stm32f7xx_hal_nand.c ****     the NAND memory
 122:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 123:HALLIB/Src/stm32f7xx_hal_nand.c **** @endverbatim
 124:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @{
 125:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 126:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 127:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 128:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Perform NAND memory Initialization sequence
 129:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 130:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 131:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  ComSpace_Timing pointer to Common space timing structure
 132:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  AttSpace_Timing pointer to Attribute space timing structure
 133:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
 134:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 135:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Ti
 136:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 137:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND handle state */
 138:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand == NULL)
 139:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 140:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_ERROR;
 141:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 142:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 143:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_RESET)
 144:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
ARM GAS  /tmp/ccwQVsCz.s 			page 4


 145:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Allocate lock resource and initialize it */
 146:HALLIB/Src/stm32f7xx_hal_nand.c ****     hnand->Lock = HAL_UNLOCKED;
 147:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Initialize the low level hardware (MSP) */
 148:HALLIB/Src/stm32f7xx_hal_nand.c ****     HAL_NAND_MspInit(hnand);
 149:HALLIB/Src/stm32f7xx_hal_nand.c ****   } 
 150:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 151:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Initialize NAND control Interface */
 152:HALLIB/Src/stm32f7xx_hal_nand.c ****   FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 153:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 154:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Initialize NAND common space timing Interface */  
 155:HALLIB/Src/stm32f7xx_hal_nand.c ****   FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 156:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 157:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Initialize NAND attribute space timing Interface */  
 158:HALLIB/Src/stm32f7xx_hal_nand.c ****   FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 159:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 160:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Enable the NAND device */
 161:HALLIB/Src/stm32f7xx_hal_nand.c ****   __FMC_NAND_ENABLE(hnand->Instance);
 162:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 163:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */
 164:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 165:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 166:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;
 167:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 168:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 169:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 170:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Perform NAND memory De-Initialization sequence
 171:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 172:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 173:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
 174:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 175:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_DeInit(NAND_HandleTypeDef *hnand)  
 176:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 177:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Initialize the low level hardware (MSP) */
 178:HALLIB/Src/stm32f7xx_hal_nand.c ****   HAL_NAND_MspDeInit(hnand);
 179:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 180:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Configure the NAND registers with their reset values */
 181:HALLIB/Src/stm32f7xx_hal_nand.c ****   FMC_NAND_DeInit(hnand->Instance, hnand->Init.NandBank);
 182:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 183:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Reset the NAND controller state */
 184:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_RESET;
 185:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 186:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Release Lock */
 187:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
 188:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 189:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;
 190:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 191:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 192:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 193:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  NAND MSP Init
 194:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 195:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 196:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval None
 197:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 198:HALLIB/Src/stm32f7xx_hal_nand.c **** __weak void HAL_NAND_MspInit(NAND_HandleTypeDef *hnand)
 199:HALLIB/Src/stm32f7xx_hal_nand.c **** {
  29              		.loc 1 199 0
  30              		.cfi_startproc
ARM GAS  /tmp/ccwQVsCz.s 			page 5


  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE138:
  39 0002 00BF     		.section	.text.HAL_NAND_Init,"ax",%progbits
  40              		.align	2
  41              		.global	HAL_NAND_Init
  42              		.thumb
  43              		.thumb_func
  45              	HAL_NAND_Init:
  46              	.LFB136:
 136:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND handle state */
  47              		.loc 1 136 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              	.LVL1:
 138:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
  52              		.loc 1 138 0
  53 0000 28B3     		cbz	r0, .L5
 136:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND handle state */
  54              		.loc 1 136 0
  55 0002 70B5     		push	{r4, r5, r6, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 16
  58              		.cfi_offset 4, -16
  59              		.cfi_offset 5, -12
  60              		.cfi_offset 6, -8
  61              		.cfi_offset 14, -4
  62 0004 0446     		mov	r4, r0
  63 0006 1546     		mov	r5, r2
  64 0008 0E46     		mov	r6, r1
 143:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
  65              		.loc 1 143 0
  66 000a 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
  67 000e 13F0FF0F 		tst	r3, #255
  68 0012 04D1     		bne	.L4
 146:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Initialize the low level hardware (MSP) */
  69              		.loc 1 146 0
  70 0014 0023     		movs	r3, #0
  71 0016 80F82030 		strb	r3, [r0, #32]
 148:HALLIB/Src/stm32f7xx_hal_nand.c ****   } 
  72              		.loc 1 148 0
  73 001a FFF7FEFF 		bl	HAL_NAND_MspInit
  74              	.LVL2:
  75              	.L4:
 152:HALLIB/Src/stm32f7xx_hal_nand.c ****   
  76              		.loc 1 152 0
  77 001e 211D     		adds	r1, r4, #4
  78 0020 2068     		ldr	r0, [r4]
  79 0022 FFF7FEFF 		bl	FMC_NAND_Init
  80              	.LVL3:
 155:HALLIB/Src/stm32f7xx_hal_nand.c ****   
  81              		.loc 1 155 0
ARM GAS  /tmp/ccwQVsCz.s 			page 6


  82 0026 6268     		ldr	r2, [r4, #4]
  83 0028 3146     		mov	r1, r6
  84 002a 2068     		ldr	r0, [r4]
  85 002c FFF7FEFF 		bl	FMC_NAND_CommonSpace_Timing_Init
  86              	.LVL4:
 158:HALLIB/Src/stm32f7xx_hal_nand.c ****   
  87              		.loc 1 158 0
  88 0030 6268     		ldr	r2, [r4, #4]
  89 0032 2946     		mov	r1, r5
  90 0034 2068     		ldr	r0, [r4]
  91 0036 FFF7FEFF 		bl	FMC_NAND_AttributeSpace_Timing_Init
  92              	.LVL5:
 161:HALLIB/Src/stm32f7xx_hal_nand.c ****   
  93              		.loc 1 161 0
  94 003a 2268     		ldr	r2, [r4]
  95 003c 1368     		ldr	r3, [r2]
  96 003e 43F00403 		orr	r3, r3, #4
  97 0042 1360     		str	r3, [r2]
 164:HALLIB/Src/stm32f7xx_hal_nand.c **** 
  98              		.loc 1 164 0
  99 0044 0123     		movs	r3, #1
 100 0046 84F82130 		strb	r3, [r4, #33]
 166:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 101              		.loc 1 166 0
 102 004a 0020     		movs	r0, #0
 103 004c 70BD     		pop	{r4, r5, r6, pc}
 104              	.LVL6:
 105              	.L5:
 106              	.LCFI1:
 107              		.cfi_def_cfa_offset 0
 108              		.cfi_restore 4
 109              		.cfi_restore 5
 110              		.cfi_restore 6
 111              		.cfi_restore 14
 140:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 112              		.loc 1 140 0
 113 004e 0120     		movs	r0, #1
 114              	.LVL7:
 115 0050 7047     		bx	lr
 116              		.cfi_endproc
 117              	.LFE136:
 119 0052 00BF     		.section	.text.HAL_NAND_MspDeInit,"ax",%progbits
 120              		.align	2
 121              		.weak	HAL_NAND_MspDeInit
 122              		.thumb
 123              		.thumb_func
 125              	HAL_NAND_MspDeInit:
 126              	.LFB139:
 200:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Prevent unused argument(s) compilation warning */
 201:HALLIB/Src/stm32f7xx_hal_nand.c ****   UNUSED(hnand);
 202:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 203:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 204:HALLIB/Src/stm32f7xx_hal_nand.c ****             the HAL_NAND_MspInit could be implemented in the user file
 205:HALLIB/Src/stm32f7xx_hal_nand.c ****    */ 
 206:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 207:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 208:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
ARM GAS  /tmp/ccwQVsCz.s 			page 7


 209:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  NAND MSP DeInit
 210:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 211:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 212:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval None
 213:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 214:HALLIB/Src/stm32f7xx_hal_nand.c **** __weak void HAL_NAND_MspDeInit(NAND_HandleTypeDef *hnand)
 215:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 127              		.loc 1 215 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132              	.LVL8:
 133 0000 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE139:
 137 0002 00BF     		.section	.text.HAL_NAND_DeInit,"ax",%progbits
 138              		.align	2
 139              		.global	HAL_NAND_DeInit
 140              		.thumb
 141              		.thumb_func
 143              	HAL_NAND_DeInit:
 144              	.LFB137:
 176:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Initialize the low level hardware (MSP) */
 145              		.loc 1 176 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              	.LVL9:
 176:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Initialize the low level hardware (MSP) */
 150              		.loc 1 176 0
 151 0000 10B5     		push	{r4, lr}
 152              	.LCFI2:
 153              		.cfi_def_cfa_offset 8
 154              		.cfi_offset 4, -8
 155              		.cfi_offset 14, -4
 156 0002 0446     		mov	r4, r0
 178:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 157              		.loc 1 178 0
 158 0004 FFF7FEFF 		bl	HAL_NAND_MspDeInit
 159              	.LVL10:
 181:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 160              		.loc 1 181 0
 161 0008 6168     		ldr	r1, [r4, #4]
 162 000a 2068     		ldr	r0, [r4]
 163 000c FFF7FEFF 		bl	FMC_NAND_DeInit
 164              	.LVL11:
 184:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 165              		.loc 1 184 0
 166 0010 0020     		movs	r0, #0
 167 0012 84F82100 		strb	r0, [r4, #33]
 187:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 168              		.loc 1 187 0
 169 0016 84F82000 		strb	r0, [r4, #32]
 190:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 170              		.loc 1 190 0
 171 001a 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccwQVsCz.s 			page 8


 172              		.cfi_endproc
 173              	.LFE137:
 175              		.section	.text.HAL_NAND_ITCallback,"ax",%progbits
 176              		.align	2
 177              		.weak	HAL_NAND_ITCallback
 178              		.thumb
 179              		.thumb_func
 181              	HAL_NAND_ITCallback:
 182              	.LFB141:
 216:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Prevent unused argument(s) compilation warning */
 217:HALLIB/Src/stm32f7xx_hal_nand.c ****   UNUSED(hnand);
 218:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 219:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 220:HALLIB/Src/stm32f7xx_hal_nand.c ****             the HAL_NAND_MspDeInit could be implemented in the user file
 221:HALLIB/Src/stm32f7xx_hal_nand.c ****    */ 
 222:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 223:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 224:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 225:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 226:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  This function handles NAND device interrupt request.
 227:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 228:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 229:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
 230:HALLIB/Src/stm32f7xx_hal_nand.c **** */
 231:HALLIB/Src/stm32f7xx_hal_nand.c **** void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
 232:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 233:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check NAND interrupt Rising edge flag */
 234:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 235:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 236:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* NAND interrupt callback*/
 237:HALLIB/Src/stm32f7xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 238:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 239:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Clear NAND interrupt Rising edge pending bit */
 240:HALLIB/Src/stm32f7xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
 241:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 242:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 243:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check NAND interrupt Level flag */
 244:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 245:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 246:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* NAND interrupt callback*/
 247:HALLIB/Src/stm32f7xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 248:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 249:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Clear NAND interrupt Level pending bit */
 250:HALLIB/Src/stm32f7xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
 251:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 252:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 253:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check NAND interrupt Falling edge flag */
 254:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 255:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 256:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* NAND interrupt callback*/
 257:HALLIB/Src/stm32f7xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 258:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 259:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Clear NAND interrupt Falling edge pending bit */
 260:HALLIB/Src/stm32f7xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
 261:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 262:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 263:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check NAND interrupt FIFO empty flag */
ARM GAS  /tmp/ccwQVsCz.s 			page 9


 264:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 265:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 266:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* NAND interrupt callback*/
 267:HALLIB/Src/stm32f7xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 268:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 269:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Clear NAND interrupt FIFO empty pending bit */
 270:HALLIB/Src/stm32f7xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
 271:HALLIB/Src/stm32f7xx_hal_nand.c ****   }  
 272:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 273:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 274:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 275:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 276:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  NAND interrupt feature callback
 277:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 278:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 279:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval None
 280:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 281:HALLIB/Src/stm32f7xx_hal_nand.c **** __weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
 282:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 183              		.loc 1 282 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 188              	.LVL12:
 189 0000 7047     		bx	lr
 190              		.cfi_endproc
 191              	.LFE141:
 193 0002 00BF     		.section	.text.HAL_NAND_IRQHandler,"ax",%progbits
 194              		.align	2
 195              		.global	HAL_NAND_IRQHandler
 196              		.thumb
 197              		.thumb_func
 199              	HAL_NAND_IRQHandler:
 200              	.LFB140:
 232:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check NAND interrupt Rising edge flag */
 201              		.loc 1 232 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              	.LVL13:
 232:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check NAND interrupt Rising edge flag */
 206              		.loc 1 232 0
 207 0000 10B5     		push	{r4, lr}
 208              	.LCFI3:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 4, -8
 211              		.cfi_offset 14, -4
 212 0002 0446     		mov	r4, r0
 234:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 213              		.loc 1 234 0
 214 0004 0368     		ldr	r3, [r0]
 215 0006 5B68     		ldr	r3, [r3, #4]
 216 0008 13F0010F 		tst	r3, #1
 217 000c 06D0     		beq	.L13
 237:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 218              		.loc 1 237 0
ARM GAS  /tmp/ccwQVsCz.s 			page 10


 219 000e FFF7FEFF 		bl	HAL_NAND_ITCallback
 220              	.LVL14:
 240:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 221              		.loc 1 240 0
 222 0012 2268     		ldr	r2, [r4]
 223 0014 5368     		ldr	r3, [r2, #4]
 224 0016 23F00103 		bic	r3, r3, #1
 225 001a 5360     		str	r3, [r2, #4]
 226              	.L13:
 244:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 227              		.loc 1 244 0
 228 001c 2368     		ldr	r3, [r4]
 229 001e 5B68     		ldr	r3, [r3, #4]
 230 0020 13F0020F 		tst	r3, #2
 231 0024 07D0     		beq	.L14
 247:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 232              		.loc 1 247 0
 233 0026 2046     		mov	r0, r4
 234 0028 FFF7FEFF 		bl	HAL_NAND_ITCallback
 235              	.LVL15:
 250:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 236              		.loc 1 250 0
 237 002c 2268     		ldr	r2, [r4]
 238 002e 5368     		ldr	r3, [r2, #4]
 239 0030 23F00203 		bic	r3, r3, #2
 240 0034 5360     		str	r3, [r2, #4]
 241              	.L14:
 254:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 242              		.loc 1 254 0
 243 0036 2368     		ldr	r3, [r4]
 244 0038 5B68     		ldr	r3, [r3, #4]
 245 003a 13F0040F 		tst	r3, #4
 246 003e 07D0     		beq	.L15
 257:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 247              		.loc 1 257 0
 248 0040 2046     		mov	r0, r4
 249 0042 FFF7FEFF 		bl	HAL_NAND_ITCallback
 250              	.LVL16:
 260:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 251              		.loc 1 260 0
 252 0046 2268     		ldr	r2, [r4]
 253 0048 5368     		ldr	r3, [r2, #4]
 254 004a 23F00403 		bic	r3, r3, #4
 255 004e 5360     		str	r3, [r2, #4]
 256              	.L15:
 264:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 257              		.loc 1 264 0
 258 0050 2368     		ldr	r3, [r4]
 259 0052 5B68     		ldr	r3, [r3, #4]
 260 0054 13F0400F 		tst	r3, #64
 261 0058 07D0     		beq	.L12
 267:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 262              		.loc 1 267 0
 263 005a 2046     		mov	r0, r4
 264 005c FFF7FEFF 		bl	HAL_NAND_ITCallback
 265              	.LVL17:
 270:HALLIB/Src/stm32f7xx_hal_nand.c ****   }  
ARM GAS  /tmp/ccwQVsCz.s 			page 11


 266              		.loc 1 270 0
 267 0060 2268     		ldr	r2, [r4]
 268 0062 5368     		ldr	r3, [r2, #4]
 269 0064 23F04003 		bic	r3, r3, #64
 270 0068 5360     		str	r3, [r2, #4]
 271              	.L12:
 272 006a 10BD     		pop	{r4, pc}
 273              		.cfi_endproc
 274              	.LFE140:
 276              		.section	.text.HAL_NAND_Read_ID,"ax",%progbits
 277              		.align	2
 278              		.global	HAL_NAND_Read_ID
 279              		.thumb
 280              		.thumb_func
 282              	HAL_NAND_Read_ID:
 283              	.LFB142:
 283:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Prevent unused argument(s) compilation warning */
 284:HALLIB/Src/stm32f7xx_hal_nand.c ****   UNUSED(hnand);
 285:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 286:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 287:HALLIB/Src/stm32f7xx_hal_nand.c ****             the HAL_NAND_ITCallback could be implemented in the user file
 288:HALLIB/Src/stm32f7xx_hal_nand.c ****    */
 289:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 290:HALLIB/Src/stm32f7xx_hal_nand.c ****  
 291:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 292:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @}
 293:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 294:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 295:HALLIB/Src/stm32f7xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group2 Input and Output functions 
 296:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief    Input Output and memory control functions 
 297:HALLIB/Src/stm32f7xx_hal_nand.c ****   *
 298:HALLIB/Src/stm32f7xx_hal_nand.c ****   @verbatim    
 299:HALLIB/Src/stm32f7xx_hal_nand.c ****   ==============================================================================
 300:HALLIB/Src/stm32f7xx_hal_nand.c ****                     ##### NAND Input and Output functions #####
 301:HALLIB/Src/stm32f7xx_hal_nand.c ****   ==============================================================================
 302:HALLIB/Src/stm32f7xx_hal_nand.c ****   [..]  
 303:HALLIB/Src/stm32f7xx_hal_nand.c ****     This section provides functions allowing to use and control the NAND 
 304:HALLIB/Src/stm32f7xx_hal_nand.c ****     memory
 305:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 306:HALLIB/Src/stm32f7xx_hal_nand.c **** @endverbatim
 307:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @{
 308:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 309:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 310:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 311:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Read the NAND memory electronic signature
 312:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 313:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 314:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pNAND_ID NAND ID structure
 315:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
 316:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 317:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDTypeDef *pNAND_ID)
 318:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 284              		.loc 1 318 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 8
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
ARM GAS  /tmp/ccwQVsCz.s 			page 12


 289              	.LVL18:
 290 0000 82B0     		sub	sp, sp, #8
 291              	.LCFI4:
 292              		.cfi_def_cfa_offset 8
 319:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t data = 0;
 293              		.loc 1 319 0
 294 0002 0023     		movs	r3, #0
 295 0004 0193     		str	r3, [sp, #4]
 320:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t data1 = 0;
 296              		.loc 1 320 0
 297 0006 0093     		str	r3, [sp]
 298              	.LVL19:
 321:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t deviceAddress = 0;
 322:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 323:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process Locked */
 324:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_LOCK(hnand);  
 299              		.loc 1 324 0
 300 0008 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 301 000c 012B     		cmp	r3, #1
 302 000e 44D0     		beq	.L22
 303              		.loc 1 324 0 is_stmt 0 discriminator 2
 304 0010 0123     		movs	r3, #1
 305 0012 80F82030 		strb	r3, [r0, #32]
 325:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 326:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
 327:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 306              		.loc 1 327 0 is_stmt 1 discriminator 2
 307 0016 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 308 001a DBB2     		uxtb	r3, r3
 309 001c 022B     		cmp	r3, #2
 310 001e 3ED0     		beq	.L23
 311              	.LVL20:
 328:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 329:HALLIB/Src/stm32f7xx_hal_nand.c ****     return HAL_BUSY;
 330:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 331:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 332:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */
 333:HALLIB/Src/stm32f7xx_hal_nand.c ****   deviceAddress = NAND_DEVICE;
 334:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 335:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */ 
 336:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 312              		.loc 1 336 0
 313 0020 0223     		movs	r3, #2
 314 0022 80F82130 		strb	r3, [r0, #33]
 337:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 338:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Send Read ID command sequence */ 	
 339:HALLIB/Src/stm32f7xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA))  = NAND_CMD_READID;
 315              		.loc 1 339 0
 316 0026 9022     		movs	r2, #144
 317 0028 1E4B     		ldr	r3, .L25
 318 002a 1A70     		strb	r2, [r3]
 319              	.LBB340:
 320              	.LBB341:
 321              		.file 2 "CORE/cmsis_gcc.h"
   1:CORE/cmsis_gcc.h **** /**************************************************************************//**
   2:CORE/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:CORE/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
ARM GAS  /tmp/ccwQVsCz.s 			page 13


   4:CORE/cmsis_gcc.h ****  * @version  V4.30
   5:CORE/cmsis_gcc.h ****  * @date     20. October 2015
   6:CORE/cmsis_gcc.h ****  ******************************************************************************/
   7:CORE/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:CORE/cmsis_gcc.h **** 
   9:CORE/cmsis_gcc.h ****    All rights reserved.
  10:CORE/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:CORE/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:CORE/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:CORE/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:CORE/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:CORE/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:CORE/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:CORE/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:CORE/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:CORE/cmsis_gcc.h ****      specific prior written permission.
  20:CORE/cmsis_gcc.h ****    *
  21:CORE/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:CORE/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:CORE/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:CORE/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:CORE/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:CORE/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:CORE/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:CORE/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:CORE/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:CORE/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:CORE/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:CORE/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:CORE/cmsis_gcc.h **** 
  34:CORE/cmsis_gcc.h **** 
  35:CORE/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:CORE/cmsis_gcc.h **** 
  38:CORE/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:CORE/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:CORE/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:CORE/cmsis_gcc.h **** #endif
  45:CORE/cmsis_gcc.h **** 
  46:CORE/cmsis_gcc.h **** 
  47:CORE/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:CORE/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:CORE/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:CORE/cmsis_gcc.h ****   @{
  51:CORE/cmsis_gcc.h ****  */
  52:CORE/cmsis_gcc.h **** 
  53:CORE/cmsis_gcc.h **** /**
  54:CORE/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:CORE/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:CORE/cmsis_gcc.h ****  */
  58:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:CORE/cmsis_gcc.h **** {
  60:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  /tmp/ccwQVsCz.s 			page 14


  61:CORE/cmsis_gcc.h **** }
  62:CORE/cmsis_gcc.h **** 
  63:CORE/cmsis_gcc.h **** 
  64:CORE/cmsis_gcc.h **** /**
  65:CORE/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:CORE/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:CORE/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:CORE/cmsis_gcc.h ****  */
  69:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:CORE/cmsis_gcc.h **** {
  71:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:CORE/cmsis_gcc.h **** }
  73:CORE/cmsis_gcc.h **** 
  74:CORE/cmsis_gcc.h **** 
  75:CORE/cmsis_gcc.h **** /**
  76:CORE/cmsis_gcc.h ****   \brief   Get Control Register
  77:CORE/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:CORE/cmsis_gcc.h ****   \return               Control Register value
  79:CORE/cmsis_gcc.h ****  */
  80:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:CORE/cmsis_gcc.h **** {
  82:CORE/cmsis_gcc.h ****   uint32_t result;
  83:CORE/cmsis_gcc.h **** 
  84:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:CORE/cmsis_gcc.h ****   return(result);
  86:CORE/cmsis_gcc.h **** }
  87:CORE/cmsis_gcc.h **** 
  88:CORE/cmsis_gcc.h **** 
  89:CORE/cmsis_gcc.h **** /**
  90:CORE/cmsis_gcc.h ****   \brief   Set Control Register
  91:CORE/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:CORE/cmsis_gcc.h ****  */
  94:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:CORE/cmsis_gcc.h **** {
  96:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:CORE/cmsis_gcc.h **** }
  98:CORE/cmsis_gcc.h **** 
  99:CORE/cmsis_gcc.h **** 
 100:CORE/cmsis_gcc.h **** /**
 101:CORE/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:CORE/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:CORE/cmsis_gcc.h ****   \return               IPSR Register value
 104:CORE/cmsis_gcc.h ****  */
 105:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:CORE/cmsis_gcc.h **** {
 107:CORE/cmsis_gcc.h ****   uint32_t result;
 108:CORE/cmsis_gcc.h **** 
 109:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:CORE/cmsis_gcc.h ****   return(result);
 111:CORE/cmsis_gcc.h **** }
 112:CORE/cmsis_gcc.h **** 
 113:CORE/cmsis_gcc.h **** 
 114:CORE/cmsis_gcc.h **** /**
 115:CORE/cmsis_gcc.h ****   \brief   Get APSR Register
 116:CORE/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:CORE/cmsis_gcc.h ****   \return               APSR Register value
ARM GAS  /tmp/ccwQVsCz.s 			page 15


 118:CORE/cmsis_gcc.h ****  */
 119:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:CORE/cmsis_gcc.h **** {
 121:CORE/cmsis_gcc.h ****   uint32_t result;
 122:CORE/cmsis_gcc.h **** 
 123:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:CORE/cmsis_gcc.h ****   return(result);
 125:CORE/cmsis_gcc.h **** }
 126:CORE/cmsis_gcc.h **** 
 127:CORE/cmsis_gcc.h **** 
 128:CORE/cmsis_gcc.h **** /**
 129:CORE/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:CORE/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:CORE/cmsis_gcc.h **** 
 132:CORE/cmsis_gcc.h ****     \return               xPSR Register value
 133:CORE/cmsis_gcc.h ****  */
 134:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:CORE/cmsis_gcc.h **** {
 136:CORE/cmsis_gcc.h ****   uint32_t result;
 137:CORE/cmsis_gcc.h **** 
 138:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:CORE/cmsis_gcc.h ****   return(result);
 140:CORE/cmsis_gcc.h **** }
 141:CORE/cmsis_gcc.h **** 
 142:CORE/cmsis_gcc.h **** 
 143:CORE/cmsis_gcc.h **** /**
 144:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:CORE/cmsis_gcc.h ****   \return               PSP Register value
 147:CORE/cmsis_gcc.h ****  */
 148:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:CORE/cmsis_gcc.h **** {
 150:CORE/cmsis_gcc.h ****   register uint32_t result;
 151:CORE/cmsis_gcc.h **** 
 152:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:CORE/cmsis_gcc.h ****   return(result);
 154:CORE/cmsis_gcc.h **** }
 155:CORE/cmsis_gcc.h **** 
 156:CORE/cmsis_gcc.h **** 
 157:CORE/cmsis_gcc.h **** /**
 158:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:CORE/cmsis_gcc.h ****  */
 162:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:CORE/cmsis_gcc.h **** {
 164:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:CORE/cmsis_gcc.h **** }
 166:CORE/cmsis_gcc.h **** 
 167:CORE/cmsis_gcc.h **** 
 168:CORE/cmsis_gcc.h **** /**
 169:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:CORE/cmsis_gcc.h ****   \return               MSP Register value
 172:CORE/cmsis_gcc.h ****  */
 173:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:CORE/cmsis_gcc.h **** {
ARM GAS  /tmp/ccwQVsCz.s 			page 16


 175:CORE/cmsis_gcc.h ****   register uint32_t result;
 176:CORE/cmsis_gcc.h **** 
 177:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:CORE/cmsis_gcc.h ****   return(result);
 179:CORE/cmsis_gcc.h **** }
 180:CORE/cmsis_gcc.h **** 
 181:CORE/cmsis_gcc.h **** 
 182:CORE/cmsis_gcc.h **** /**
 183:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:CORE/cmsis_gcc.h **** 
 186:CORE/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:CORE/cmsis_gcc.h ****  */
 188:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:CORE/cmsis_gcc.h **** {
 190:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:CORE/cmsis_gcc.h **** }
 192:CORE/cmsis_gcc.h **** 
 193:CORE/cmsis_gcc.h **** 
 194:CORE/cmsis_gcc.h **** /**
 195:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:CORE/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 198:CORE/cmsis_gcc.h ****  */
 199:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:CORE/cmsis_gcc.h **** {
 201:CORE/cmsis_gcc.h ****   uint32_t result;
 202:CORE/cmsis_gcc.h **** 
 203:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:CORE/cmsis_gcc.h ****   return(result);
 205:CORE/cmsis_gcc.h **** }
 206:CORE/cmsis_gcc.h **** 
 207:CORE/cmsis_gcc.h **** 
 208:CORE/cmsis_gcc.h **** /**
 209:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:CORE/cmsis_gcc.h ****  */
 213:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:CORE/cmsis_gcc.h **** {
 215:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:CORE/cmsis_gcc.h **** }
 217:CORE/cmsis_gcc.h **** 
 218:CORE/cmsis_gcc.h **** 
 219:CORE/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:CORE/cmsis_gcc.h **** 
 221:CORE/cmsis_gcc.h **** /**
 222:CORE/cmsis_gcc.h ****   \brief   Enable FIQ
 223:CORE/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:CORE/cmsis_gcc.h ****  */
 226:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:CORE/cmsis_gcc.h **** {
 228:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:CORE/cmsis_gcc.h **** }
 230:CORE/cmsis_gcc.h **** 
 231:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccwQVsCz.s 			page 17


 232:CORE/cmsis_gcc.h **** /**
 233:CORE/cmsis_gcc.h ****   \brief   Disable FIQ
 234:CORE/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:CORE/cmsis_gcc.h ****  */
 237:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:CORE/cmsis_gcc.h **** {
 239:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:CORE/cmsis_gcc.h **** }
 241:CORE/cmsis_gcc.h **** 
 242:CORE/cmsis_gcc.h **** 
 243:CORE/cmsis_gcc.h **** /**
 244:CORE/cmsis_gcc.h ****   \brief   Get Base Priority
 245:CORE/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 247:CORE/cmsis_gcc.h ****  */
 248:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:CORE/cmsis_gcc.h **** {
 250:CORE/cmsis_gcc.h ****   uint32_t result;
 251:CORE/cmsis_gcc.h **** 
 252:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:CORE/cmsis_gcc.h ****   return(result);
 254:CORE/cmsis_gcc.h **** }
 255:CORE/cmsis_gcc.h **** 
 256:CORE/cmsis_gcc.h **** 
 257:CORE/cmsis_gcc.h **** /**
 258:CORE/cmsis_gcc.h ****   \brief   Set Base Priority
 259:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:CORE/cmsis_gcc.h ****  */
 262:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:CORE/cmsis_gcc.h **** {
 264:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:CORE/cmsis_gcc.h **** }
 266:CORE/cmsis_gcc.h **** 
 267:CORE/cmsis_gcc.h **** 
 268:CORE/cmsis_gcc.h **** /**
 269:CORE/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:CORE/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:CORE/cmsis_gcc.h ****  */
 274:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:CORE/cmsis_gcc.h **** {
 276:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:CORE/cmsis_gcc.h **** }
 278:CORE/cmsis_gcc.h **** 
 279:CORE/cmsis_gcc.h **** 
 280:CORE/cmsis_gcc.h **** /**
 281:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:CORE/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 284:CORE/cmsis_gcc.h ****  */
 285:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:CORE/cmsis_gcc.h **** {
 287:CORE/cmsis_gcc.h ****   uint32_t result;
 288:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccwQVsCz.s 			page 18


 289:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:CORE/cmsis_gcc.h ****   return(result);
 291:CORE/cmsis_gcc.h **** }
 292:CORE/cmsis_gcc.h **** 
 293:CORE/cmsis_gcc.h **** 
 294:CORE/cmsis_gcc.h **** /**
 295:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:CORE/cmsis_gcc.h ****  */
 299:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:CORE/cmsis_gcc.h **** {
 301:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:CORE/cmsis_gcc.h **** }
 303:CORE/cmsis_gcc.h **** 
 304:CORE/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:CORE/cmsis_gcc.h **** 
 306:CORE/cmsis_gcc.h **** 
 307:CORE/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:CORE/cmsis_gcc.h **** 
 309:CORE/cmsis_gcc.h **** /**
 310:CORE/cmsis_gcc.h ****   \brief   Get FPSCR
 311:CORE/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:CORE/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:CORE/cmsis_gcc.h ****  */
 314:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:CORE/cmsis_gcc.h **** {
 316:CORE/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:CORE/cmsis_gcc.h ****   uint32_t result;
 318:CORE/cmsis_gcc.h **** 
 319:CORE/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 321:CORE/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 323:CORE/cmsis_gcc.h ****   return(result);
 324:CORE/cmsis_gcc.h **** #else
 325:CORE/cmsis_gcc.h ****    return(0);
 326:CORE/cmsis_gcc.h **** #endif
 327:CORE/cmsis_gcc.h **** }
 328:CORE/cmsis_gcc.h **** 
 329:CORE/cmsis_gcc.h **** 
 330:CORE/cmsis_gcc.h **** /**
 331:CORE/cmsis_gcc.h ****   \brief   Set FPSCR
 332:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:CORE/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:CORE/cmsis_gcc.h ****  */
 335:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:CORE/cmsis_gcc.h **** {
 337:CORE/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:CORE/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 340:CORE/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 342:CORE/cmsis_gcc.h **** #endif
 343:CORE/cmsis_gcc.h **** }
 344:CORE/cmsis_gcc.h **** 
 345:CORE/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
ARM GAS  /tmp/ccwQVsCz.s 			page 19


 346:CORE/cmsis_gcc.h **** 
 347:CORE/cmsis_gcc.h **** 
 348:CORE/cmsis_gcc.h **** 
 349:CORE/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:CORE/cmsis_gcc.h **** 
 351:CORE/cmsis_gcc.h **** 
 352:CORE/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:CORE/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:CORE/cmsis_gcc.h ****   Access to dedicated instructions
 355:CORE/cmsis_gcc.h ****   @{
 356:CORE/cmsis_gcc.h **** */
 357:CORE/cmsis_gcc.h **** 
 358:CORE/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:CORE/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:CORE/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:CORE/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:CORE/cmsis_gcc.h **** #else
 365:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:CORE/cmsis_gcc.h **** #endif
 368:CORE/cmsis_gcc.h **** 
 369:CORE/cmsis_gcc.h **** /**
 370:CORE/cmsis_gcc.h ****   \brief   No Operation
 371:CORE/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:CORE/cmsis_gcc.h ****  */
 373:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:CORE/cmsis_gcc.h **** {
 375:CORE/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:CORE/cmsis_gcc.h **** }
 377:CORE/cmsis_gcc.h **** 
 378:CORE/cmsis_gcc.h **** 
 379:CORE/cmsis_gcc.h **** /**
 380:CORE/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:CORE/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:CORE/cmsis_gcc.h ****  */
 383:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:CORE/cmsis_gcc.h **** {
 385:CORE/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:CORE/cmsis_gcc.h **** }
 387:CORE/cmsis_gcc.h **** 
 388:CORE/cmsis_gcc.h **** 
 389:CORE/cmsis_gcc.h **** /**
 390:CORE/cmsis_gcc.h ****   \brief   Wait For Event
 391:CORE/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:CORE/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:CORE/cmsis_gcc.h ****  */
 394:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:CORE/cmsis_gcc.h **** {
 396:CORE/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:CORE/cmsis_gcc.h **** }
 398:CORE/cmsis_gcc.h **** 
 399:CORE/cmsis_gcc.h **** 
 400:CORE/cmsis_gcc.h **** /**
 401:CORE/cmsis_gcc.h ****   \brief   Send Event
 402:CORE/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
ARM GAS  /tmp/ccwQVsCz.s 			page 20


 403:CORE/cmsis_gcc.h ****  */
 404:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:CORE/cmsis_gcc.h **** {
 406:CORE/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:CORE/cmsis_gcc.h **** }
 408:CORE/cmsis_gcc.h **** 
 409:CORE/cmsis_gcc.h **** 
 410:CORE/cmsis_gcc.h **** /**
 411:CORE/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:CORE/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:CORE/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:CORE/cmsis_gcc.h ****            after the instruction has been completed.
 415:CORE/cmsis_gcc.h ****  */
 416:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:CORE/cmsis_gcc.h **** {
 418:CORE/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:CORE/cmsis_gcc.h **** }
 420:CORE/cmsis_gcc.h **** 
 421:CORE/cmsis_gcc.h **** 
 422:CORE/cmsis_gcc.h **** /**
 423:CORE/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:CORE/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:CORE/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:CORE/cmsis_gcc.h ****  */
 427:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:CORE/cmsis_gcc.h **** {
 429:CORE/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 322              		.loc 2 429 0
 323              		.syntax unified
 324              	@ 429 "CORE/cmsis_gcc.h" 1
 325 002c BFF34F8F 		dsb 0xF
 326              	@ 0 "" 2
 327              		.thumb
 328              		.syntax unified
 329              	.LBE341:
 330              	.LBE340:
 340:HALLIB/Src/stm32f7xx_hal_nand.c ****   __DSB();
 341:HALLIB/Src/stm32f7xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 331              		.loc 1 341 0
 332 0030 0022     		movs	r2, #0
 333 0032 03F58033 		add	r3, r3, #65536
 334 0036 1A70     		strb	r2, [r3]
 335              	.LBB342:
 336              	.LBB343:
 337              		.loc 2 429 0
 338              		.syntax unified
 339              	@ 429 "CORE/cmsis_gcc.h" 1
 340 0038 BFF34F8F 		dsb 0xF
 341              	@ 0 "" 2
 342              		.thumb
 343              		.syntax unified
 344              	.LBE343:
 345              	.LBE342:
 342:HALLIB/Src/stm32f7xx_hal_nand.c ****   __DSB();
 343:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 344:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Read the electronic signature from NAND flash */
 345:HALLIB/Src/stm32f7xx_hal_nand.c ****   if (hnand->Init.MemoryDataWidth == FMC_NAND_PCC_MEM_BUS_WIDTH_8)
ARM GAS  /tmp/ccwQVsCz.s 			page 21


 346              		.loc 1 345 0
 347 003c C368     		ldr	r3, [r0, #12]
 348 003e 8BB9     		cbnz	r3, .L20
 346:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 347:HALLIB/Src/stm32f7xx_hal_nand.c ****     data = *(__IO uint32_t *)deviceAddress;
 349              		.loc 1 347 0
 350 0040 4FF00043 		mov	r3, #-2147483648
 351 0044 1B68     		ldr	r3, [r3]
 352 0046 0193     		str	r3, [sp, #4]
 348:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 349:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Return the data read */
 350:HALLIB/Src/stm32f7xx_hal_nand.c ****     pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 353              		.loc 1 350 0
 354 0048 019B     		ldr	r3, [sp, #4]
 355 004a 0B70     		strb	r3, [r1]
 351:HALLIB/Src/stm32f7xx_hal_nand.c ****     pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 356              		.loc 1 351 0
 357 004c 019B     		ldr	r3, [sp, #4]
 358 004e C3F30723 		ubfx	r3, r3, #8, #8
 359 0052 4B70     		strb	r3, [r1, #1]
 352:HALLIB/Src/stm32f7xx_hal_nand.c ****     pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 360              		.loc 1 352 0
 361 0054 019B     		ldr	r3, [sp, #4]
 362 0056 C3F30743 		ubfx	r3, r3, #16, #8
 363 005a 8B70     		strb	r3, [r1, #2]
 353:HALLIB/Src/stm32f7xx_hal_nand.c ****     pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 364              		.loc 1 353 0
 365 005c 019B     		ldr	r3, [sp, #4]
 366 005e 1B0E     		lsrs	r3, r3, #24
 367 0060 CB70     		strb	r3, [r1, #3]
 368 0062 12E0     		b	.L21
 369              	.L20:
 354:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 355:HALLIB/Src/stm32f7xx_hal_nand.c ****   else
 356:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 357:HALLIB/Src/stm32f7xx_hal_nand.c ****     data = *(__IO uint32_t *)deviceAddress;
 370              		.loc 1 357 0
 371 0064 4FF00043 		mov	r3, #-2147483648
 372 0068 1B68     		ldr	r3, [r3]
 373 006a 0193     		str	r3, [sp, #4]
 358:HALLIB/Src/stm32f7xx_hal_nand.c ****     data1 = *((__IO uint32_t *)deviceAddress + 4);
 374              		.loc 1 358 0
 375 006c 0E4B     		ldr	r3, .L25+4
 376 006e 1B68     		ldr	r3, [r3]
 377 0070 0093     		str	r3, [sp]
 359:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 360:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Return the data read */
 361:HALLIB/Src/stm32f7xx_hal_nand.c ****     pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 378              		.loc 1 361 0
 379 0072 019B     		ldr	r3, [sp, #4]
 380 0074 0B70     		strb	r3, [r1]
 362:HALLIB/Src/stm32f7xx_hal_nand.c ****     pNAND_ID->Device_Id  = ADDR_3RD_CYCLE(data);
 381              		.loc 1 362 0
 382 0076 019B     		ldr	r3, [sp, #4]
 383 0078 C3F30743 		ubfx	r3, r3, #16, #8
 384 007c 4B70     		strb	r3, [r1, #1]
 363:HALLIB/Src/stm32f7xx_hal_nand.c ****     pNAND_ID->Third_Id   = ADDR_1ST_CYCLE(data1);
ARM GAS  /tmp/ccwQVsCz.s 			page 22


 385              		.loc 1 363 0
 386 007e 009B     		ldr	r3, [sp]
 387 0080 8B70     		strb	r3, [r1, #2]
 364:HALLIB/Src/stm32f7xx_hal_nand.c ****     pNAND_ID->Fourth_Id  = ADDR_3RD_CYCLE(data1);
 388              		.loc 1 364 0
 389 0082 009B     		ldr	r3, [sp]
 390 0084 C3F30743 		ubfx	r3, r3, #16, #8
 391 0088 CB70     		strb	r3, [r1, #3]
 392              	.L21:
 365:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 366:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 367:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */ 
 368:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 393              		.loc 1 368 0
 394 008a 0123     		movs	r3, #1
 395 008c 80F82130 		strb	r3, [r0, #33]
 369:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 370:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process unlocked */
 371:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);   
 396              		.loc 1 371 0
 397 0090 0023     		movs	r3, #0
 398 0092 80F82030 		strb	r3, [r0, #32]
 372:HALLIB/Src/stm32f7xx_hal_nand.c ****    
 373:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;
 399              		.loc 1 373 0
 400 0096 1846     		mov	r0, r3
 401              	.LVL21:
 402 0098 02E0     		b	.L19
 403              	.LVL22:
 404              	.L22:
 324:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 405              		.loc 1 324 0
 406 009a 0220     		movs	r0, #2
 407              	.LVL23:
 408 009c 00E0     		b	.L19
 409              	.LVL24:
 410              	.L23:
 329:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 411              		.loc 1 329 0
 412 009e 0220     		movs	r0, #2
 413              	.LVL25:
 414              	.L19:
 374:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 415              		.loc 1 374 0
 416 00a0 02B0     		add	sp, sp, #8
 417              	.LCFI5:
 418              		.cfi_def_cfa_offset 0
 419              		@ sp needed
 420 00a2 7047     		bx	lr
 421              	.L26:
 422              		.align	2
 423              	.L25:
 424 00a4 00000180 		.word	-2147418112
 425 00a8 10000080 		.word	-2147483632
 426              		.cfi_endproc
 427              	.LFE142:
 429              		.section	.text.HAL_NAND_Reset,"ax",%progbits
ARM GAS  /tmp/ccwQVsCz.s 			page 23


 430              		.align	2
 431              		.global	HAL_NAND_Reset
 432              		.thumb
 433              		.thumb_func
 435              	HAL_NAND_Reset:
 436              	.LFB143:
 375:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 376:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 377:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  NAND memory reset
 378:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 379:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 380:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
 381:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 382:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
 383:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 437              		.loc 1 383 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 442              	.LVL26:
 384:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t deviceAddress = 0;
 385:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 386:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process Locked */
 387:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_LOCK(hnand);
 443              		.loc 1 387 0
 444 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 445 0004 012B     		cmp	r3, #1
 446 0006 15D0     		beq	.L29
 447              		.loc 1 387 0 is_stmt 0 discriminator 2
 448 0008 0123     		movs	r3, #1
 449 000a 80F82030 		strb	r3, [r0, #32]
 388:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 389:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
 390:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 450              		.loc 1 390 0 is_stmt 1 discriminator 2
 451 000e 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 452 0012 DBB2     		uxtb	r3, r3
 453 0014 022B     		cmp	r3, #2
 454 0016 0FD0     		beq	.L30
 455              	.LVL27:
 391:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 392:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
 393:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 394:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 395:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */  
 396:HALLIB/Src/stm32f7xx_hal_nand.c ****   deviceAddress = NAND_DEVICE;
 397:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 398:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */   
 399:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY; 
 456              		.loc 1 399 0
 457 0018 0223     		movs	r3, #2
 458 001a 80F82130 		strb	r3, [r0, #33]
 400:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 401:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Send NAND reset command */  
 402:HALLIB/Src/stm32f7xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = 0xFF;
 459              		.loc 1 402 0
ARM GAS  /tmp/ccwQVsCz.s 			page 24


 460 001e FF22     		movs	r2, #255
 461 0020 064B     		ldr	r3, .L31
 462 0022 1A70     		strb	r2, [r3]
 403:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 404:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */   
 405:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 463              		.loc 1 405 0
 464 0024 0123     		movs	r3, #1
 465 0026 80F82130 		strb	r3, [r0, #33]
 406:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 407:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process unlocked */
 408:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);    
 466              		.loc 1 408 0
 467 002a 0023     		movs	r3, #0
 468 002c 80F82030 		strb	r3, [r0, #32]
 409:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 410:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;
 469              		.loc 1 410 0
 470 0030 1846     		mov	r0, r3
 471              	.LVL28:
 472 0032 7047     		bx	lr
 473              	.LVL29:
 474              	.L29:
 387:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 475              		.loc 1 387 0
 476 0034 0220     		movs	r0, #2
 477              	.LVL30:
 478 0036 7047     		bx	lr
 479              	.LVL31:
 480              	.L30:
 392:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 481              		.loc 1 392 0
 482 0038 0220     		movs	r0, #2
 483              	.LVL32:
 411:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 412:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 484              		.loc 1 412 0
 485 003a 7047     		bx	lr
 486              	.L32:
 487              		.align	2
 488              	.L31:
 489 003c 00000180 		.word	-2147418112
 490              		.cfi_endproc
 491              	.LFE143:
 493              		.section	.text.HAL_NAND_ConfigDevice,"ax",%progbits
 494              		.align	2
 495              		.global	HAL_NAND_ConfigDevice
 496              		.thumb
 497              		.thumb_func
 499              	HAL_NAND_ConfigDevice:
 500              	.LFB144:
 413:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 414:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 415:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Configure the device: Enter the physical parameters of the device
 416:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 417:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 418:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pDeviceConfig  pointer to NAND_DeviceConfigTypeDef structure
ARM GAS  /tmp/ccwQVsCz.s 			page 25


 419:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
 420:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 421:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_ConfigDevice(NAND_HandleTypeDef *hnand, NAND_DeviceConfigTypeDef *pDevi
 422:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 501              		.loc 1 422 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              		@ link register save eliminated.
 506              	.LVL33:
 423:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->Config.PageSize           = pDeviceConfig->PageSize;
 507              		.loc 1 423 0
 508 0000 0B68     		ldr	r3, [r1]
 509 0002 4362     		str	r3, [r0, #36]
 424:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->Config.SpareAreaSize      = pDeviceConfig->SpareAreaSize;
 510              		.loc 1 424 0
 511 0004 4B68     		ldr	r3, [r1, #4]
 512 0006 8362     		str	r3, [r0, #40]
 425:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->Config.BlockSize          = pDeviceConfig->BlockSize;
 513              		.loc 1 425 0
 514 0008 8B68     		ldr	r3, [r1, #8]
 515 000a C362     		str	r3, [r0, #44]
 426:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->Config.BlockNbr           = pDeviceConfig->BlockNbr;
 516              		.loc 1 426 0
 517 000c CB68     		ldr	r3, [r1, #12]
 518 000e 0363     		str	r3, [r0, #48]
 427:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->Config.PlaneSize          = pDeviceConfig->PlaneSize;
 519              		.loc 1 427 0
 520 0010 4B69     		ldr	r3, [r1, #20]
 521 0012 8363     		str	r3, [r0, #56]
 428:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->Config.PlaneNbr           = pDeviceConfig->PlaneNbr;
 522              		.loc 1 428 0
 523 0014 0B69     		ldr	r3, [r1, #16]
 524 0016 4363     		str	r3, [r0, #52]
 429:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->Config.ExtraCommandEnable = pDeviceConfig->ExtraCommandEnable;
 525              		.loc 1 429 0
 526 0018 0B7E     		ldrb	r3, [r1, #24]	@ zero_extendqisi2
 527 001a 80F83C30 		strb	r3, [r0, #60]
 430:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 431:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;
 432:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 528              		.loc 1 432 0
 529 001e 0020     		movs	r0, #0
 530              	.LVL34:
 531 0020 7047     		bx	lr
 532              		.cfi_endproc
 533              	.LFE144:
 535 0022 00BF     		.section	.text.HAL_NAND_Erase_Block,"ax",%progbits
 536              		.align	2
 537              		.global	HAL_NAND_Erase_Block
 538              		.thumb
 539              		.thumb_func
 541              	HAL_NAND_Erase_Block:
 542              	.LFB153:
 433:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 434:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 435:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
ARM GAS  /tmp/ccwQVsCz.s 			page 26


 436:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Read Page(s) from NAND memory block (8-bits addressing)
 437:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 438:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 439:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 440:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pBuffer  pointer to destination read buffer
 441:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  NumPageToRead  number of pages to read from block 
 442:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
 443:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 444:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, u
 445:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 446:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index  = 0;
 447:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0U;
 448:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t deviceAddress = 0, size = 0, numPagesRead = 0, nandAddress = 0;
 449:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 450:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process Locked */
 451:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_LOCK(hnand); 
 452:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 453:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
 454:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 455:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 456:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
 457:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 458:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 459:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */
 460:HALLIB/Src/stm32f7xx_hal_nand.c ****   deviceAddress = NAND_DEVICE;
 461:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 462:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */ 
 463:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 464:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 465:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* NAND raw address calculation */
 466:HALLIB/Src/stm32f7xx_hal_nand.c ****   nandAddress = ARRAY_ADDRESS(pAddress, hnand);
 467:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 468:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Page(s) read loop */  
 469:HALLIB/Src/stm32f7xx_hal_nand.c ****   while((NumPageToRead != 0) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr
 470:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 471:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* update the buffer size */
 472:HALLIB/Src/stm32f7xx_hal_nand.c ****     size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesRead);
 473:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 474:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Send read page command sequence */
 475:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
 476:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 477:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 478:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
 479:HALLIB/Src/stm32f7xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512)
 480:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 481:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
 482:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 483:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 484:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 485:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 486:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 487:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 488:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 489:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 490:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 491:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 492:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
ARM GAS  /tmp/ccwQVsCz.s 			page 27


 493:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 494:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 495:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 496:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 497:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 498:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 499:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 500:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 501:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 502:HALLIB/Src/stm32f7xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
 503:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 504:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
 505:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 506:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 507:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 508:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 509:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 510:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 511:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 512:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 513:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 514:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 515:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 516:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 517:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 518:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 519:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 520:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 521:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 522:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 523:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 524:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 525:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 526:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 527:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 528:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 529:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 530:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 531:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 532:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 533:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 534:HALLIB/Src/stm32f7xx_hal_nand.c ****     if(hnand->Config.ExtraCommandEnable == ENABLE)
 535:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 536:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Get tick */
 537:HALLIB/Src/stm32f7xx_hal_nand.c ****       tickstart = HAL_GetTick();
 538:HALLIB/Src/stm32f7xx_hal_nand.c ****       
 539:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Read status until NAND is ready */
 540:HALLIB/Src/stm32f7xx_hal_nand.c ****       while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 541:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 542:HALLIB/Src/stm32f7xx_hal_nand.c ****         if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 543:HALLIB/Src/stm32f7xx_hal_nand.c ****         {
 544:HALLIB/Src/stm32f7xx_hal_nand.c ****           return HAL_TIMEOUT; 
 545:HALLIB/Src/stm32f7xx_hal_nand.c ****         }
 546:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 547:HALLIB/Src/stm32f7xx_hal_nand.c ****       
 548:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Go back to read mode */
 549:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = ((uint8_t)0x00U);
ARM GAS  /tmp/ccwQVsCz.s 			page 28


 550:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 551:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 552:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 553:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Get Data into Buffer */    
 554:HALLIB/Src/stm32f7xx_hal_nand.c ****     for(; index < size; index++)
 555:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 556:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(uint8_t *)pBuffer++ = *(uint8_t *)deviceAddress;
 557:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 558:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 559:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment read pages number */
 560:HALLIB/Src/stm32f7xx_hal_nand.c ****     numPagesRead++;
 561:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 562:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Decrement pages to read */
 563:HALLIB/Src/stm32f7xx_hal_nand.c ****     NumPageToRead--;
 564:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 565:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment the NAND address */
 566:HALLIB/Src/stm32f7xx_hal_nand.c ****     nandAddress = (uint32_t)(nandAddress + 1);
 567:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 568:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 569:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */ 
 570:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 571:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 572:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process unlocked */
 573:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);  
 574:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 575:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;
 576:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 577:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 578:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 579:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 580:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Read Page(s) from NAND memory block (16-bits addressing)
 581:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 582:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 583:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 584:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pBuffer  pointer to destination read buffer. pBuffer should be 16bits aligned
 585:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  NumPageToRead  number of pages to read from block 
 586:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
 587:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 588:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_Page_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, 
 589:HALLIB/Src/stm32f7xx_hal_nand.c **** {   
 590:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index  = 0;
 591:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0;
 592:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t deviceAddress = 0, size = 0, numPagesRead = 0, nandAddress = 0;
 593:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 594:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process Locked */
 595:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_LOCK(hnand); 
 596:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 597:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
 598:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 599:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 600:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
 601:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 602:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 603:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */
 604:HALLIB/Src/stm32f7xx_hal_nand.c ****   deviceAddress = NAND_DEVICE;
 605:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 606:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */ 
ARM GAS  /tmp/ccwQVsCz.s 			page 29


 607:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 608:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 609:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* NAND raw address calculation */
 610:HALLIB/Src/stm32f7xx_hal_nand.c ****   nandAddress = ARRAY_ADDRESS(pAddress, hnand);
 611:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 612:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Page(s) read loop */  
 613:HALLIB/Src/stm32f7xx_hal_nand.c ****   while((NumPageToRead != 0) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr
 614:HALLIB/Src/stm32f7xx_hal_nand.c ****   {	   
 615:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* update the buffer size */
 616:HALLIB/Src/stm32f7xx_hal_nand.c ****     size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesRead);
 617:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 618:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Send read page command sequence */
 619:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;  
 620:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 621:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 622:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
 623:HALLIB/Src/stm32f7xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512)
 624:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 625:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
 626:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 627:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 628:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 629:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 630:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 631:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 632:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 633:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 634:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 635:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 636:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 637:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 638:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 639:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 640:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 641:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 642:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 643:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 644:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 645:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 646:HALLIB/Src/stm32f7xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
 647:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 648:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
 649:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 650:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 651:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 652:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 653:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 654:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 655:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 656:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 657:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 658:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 659:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 660:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 661:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 662:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 663:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
ARM GAS  /tmp/ccwQVsCz.s 			page 30


 664:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 665:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 666:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 667:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 668:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 669:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 670:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 671:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 672:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 673:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 674:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 675:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 676:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 677:HALLIB/Src/stm32f7xx_hal_nand.c ****     if(hnand->Config.ExtraCommandEnable == ENABLE)
 678:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 679:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Get tick */
 680:HALLIB/Src/stm32f7xx_hal_nand.c ****       tickstart = HAL_GetTick();
 681:HALLIB/Src/stm32f7xx_hal_nand.c ****       
 682:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Read status until NAND is ready */
 683:HALLIB/Src/stm32f7xx_hal_nand.c ****       while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 684:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 685:HALLIB/Src/stm32f7xx_hal_nand.c ****         if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 686:HALLIB/Src/stm32f7xx_hal_nand.c ****         {
 687:HALLIB/Src/stm32f7xx_hal_nand.c ****           return HAL_TIMEOUT; 
 688:HALLIB/Src/stm32f7xx_hal_nand.c ****         }
 689:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 690:HALLIB/Src/stm32f7xx_hal_nand.c ****       
 691:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Go back to read mode */
 692:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = ((uint8_t)0x00U);
 693:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 694:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 695:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 696:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Get Data into Buffer */    
 697:HALLIB/Src/stm32f7xx_hal_nand.c ****     for(; index < size; index++)
 698:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 699:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(uint16_t *)pBuffer++ = *(uint16_t *)deviceAddress;
 700:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 701:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 702:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment read pages number */
 703:HALLIB/Src/stm32f7xx_hal_nand.c ****     numPagesRead++;
 704:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 705:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Decrement pages to read */
 706:HALLIB/Src/stm32f7xx_hal_nand.c ****     NumPageToRead--;
 707:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 708:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment the NAND address */
 709:HALLIB/Src/stm32f7xx_hal_nand.c ****     nandAddress = (uint32_t)(nandAddress + 1);
 710:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 711:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 712:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */ 
 713:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 714:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 715:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process unlocked */
 716:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);  
 717:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 718:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;
 719:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 720:HALLIB/Src/stm32f7xx_hal_nand.c **** 
ARM GAS  /tmp/ccwQVsCz.s 			page 31


 721:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 722:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Write Page(s) to NAND memory block (8-bits addressing)
 723:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 724:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 725:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 726:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write  
 727:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  NumPageToWrite   number of pages to write to block 
 728:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
 729:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 730:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, 
 731:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 732:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0;
 733:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0;
 734:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t deviceAddress = 0, size = 0, numPagesWritten = 0, nandAddress = 0;
 735:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 736:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process Locked */
 737:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_LOCK(hnand);  
 738:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 739:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
 740:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 741:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 742:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
 743:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 744:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 745:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */
 746:HALLIB/Src/stm32f7xx_hal_nand.c ****   deviceAddress = NAND_DEVICE;
 747:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 748:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */ 
 749:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 750:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 751:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* NAND raw address calculation */
 752:HALLIB/Src/stm32f7xx_hal_nand.c ****   nandAddress = ARRAY_ADDRESS(pAddress, hnand);
 753:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 754:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Page(s) write loop */
 755:HALLIB/Src/stm32f7xx_hal_nand.c ****   while((NumPageToWrite != 0) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNb
 756:HALLIB/Src/stm32f7xx_hal_nand.c ****   {  
 757:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* update the buffer size */
 758:HALLIB/Src/stm32f7xx_hal_nand.c ****     size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesWritten);
 759:HALLIB/Src/stm32f7xx_hal_nand.c ****  
 760:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Send write page command sequence */
 761:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
 762:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 763:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
 764:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 765:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 766:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
 767:HALLIB/Src/stm32f7xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512)
 768:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 769:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
 770:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 771:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 772:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 773:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 774:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 775:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 776:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 777:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
ARM GAS  /tmp/ccwQVsCz.s 			page 32


 778:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 779:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 780:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 781:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 782:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 783:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 784:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 785:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 786:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 787:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 788:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 789:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 790:HALLIB/Src/stm32f7xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
 791:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 792:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
 793:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 794:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 795:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 796:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 797:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 798:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 799:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 800:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 801:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 802:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 803:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 804:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 805:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 806:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 807:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 808:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 809:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 810:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 811:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 812:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 813:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 814:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 815:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 816:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 817:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 818:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Write data to memory */
 819:HALLIB/Src/stm32f7xx_hal_nand.c ****     for(; index < size; index++)
 820:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 821:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)deviceAddress = *(uint8_t *)pBuffer++;
 822:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 823:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 824:HALLIB/Src/stm32f7xx_hal_nand.c ****    
 825:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 826:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 827:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 828:HALLIB/Src/stm32f7xx_hal_nand.c **** 	/* Get tick */
 829:HALLIB/Src/stm32f7xx_hal_nand.c ****     tickstart = HAL_GetTick();
 830:HALLIB/Src/stm32f7xx_hal_nand.c **** 	
 831:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Read status until NAND is ready */
 832:HALLIB/Src/stm32f7xx_hal_nand.c ****     while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 833:HALLIB/Src/stm32f7xx_hal_nand.c ****     {  
 834:HALLIB/Src/stm32f7xx_hal_nand.c ****       if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
ARM GAS  /tmp/ccwQVsCz.s 			page 33


 835:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 836:HALLIB/Src/stm32f7xx_hal_nand.c ****         return HAL_TIMEOUT; 
 837:HALLIB/Src/stm32f7xx_hal_nand.c ****       } 
 838:HALLIB/Src/stm32f7xx_hal_nand.c ****     }    
 839:HALLIB/Src/stm32f7xx_hal_nand.c ****  
 840:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment written pages number */
 841:HALLIB/Src/stm32f7xx_hal_nand.c ****     numPagesWritten++;
 842:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 843:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Decrement pages to write */
 844:HALLIB/Src/stm32f7xx_hal_nand.c ****     NumPageToWrite--;
 845:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 846:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment the NAND address */
 847:HALLIB/Src/stm32f7xx_hal_nand.c ****     nandAddress = (uint32_t)(nandAddress + 1);
 848:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 849:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 850:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */ 
 851:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 852:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 853:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process unlocked */
 854:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);      
 855:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 856:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;
 857:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 858:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 859:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 860:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Write Page(s) to NAND memory block (16-bits addressing)
 861:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 862:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
 863:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 864:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write. pBuffer should be 16bits aligned
 865:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  NumPageToWrite   number of pages to write to block 
 866:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
 867:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
 868:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_Page_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress,
 869:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 870:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0;
 871:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0;
 872:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t deviceAddress = 0, size = 0, numPagesWritten = 0, nandAddress = 0;
 873:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 874:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process Locked */
 875:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_LOCK(hnand);  
 876:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 877:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
 878:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 879:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 880:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
 881:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 882:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 883:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */
 884:HALLIB/Src/stm32f7xx_hal_nand.c ****   deviceAddress = NAND_DEVICE;
 885:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 886:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */ 
 887:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 888:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 889:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* NAND raw address calculation */
 890:HALLIB/Src/stm32f7xx_hal_nand.c ****   nandAddress = ARRAY_ADDRESS(pAddress, hnand);
 891:HALLIB/Src/stm32f7xx_hal_nand.c ****   
ARM GAS  /tmp/ccwQVsCz.s 			page 34


 892:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Page(s) write loop */
 893:HALLIB/Src/stm32f7xx_hal_nand.c ****   while((NumPageToWrite != 0) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNb
 894:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 895:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* update the buffer size */
 896:HALLIB/Src/stm32f7xx_hal_nand.c ****     size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesWritten);
 897:HALLIB/Src/stm32f7xx_hal_nand.c ****  
 898:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Send write page command sequence */
 899:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
 900:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 901:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
 902:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 903:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 904:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
 905:HALLIB/Src/stm32f7xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512)
 906:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 907:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
 908:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 909:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 910:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 911:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 912:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 913:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 914:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 915:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 916:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 917:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 918:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 919:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 920:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 921:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 922:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 923:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 924:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 925:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 926:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 927:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 928:HALLIB/Src/stm32f7xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
 929:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 930:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
 931:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 932:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 933:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 934:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 935:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 936:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 937:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 938:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 939:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 940:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 941:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 942:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 943:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 944:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 945:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 946:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 947:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 948:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
ARM GAS  /tmp/ccwQVsCz.s 			page 35


 949:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 950:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 951:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 952:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 953:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 954:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 955:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 956:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Write data to memory */
 957:HALLIB/Src/stm32f7xx_hal_nand.c ****     for(; index < size; index++)
 958:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 959:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint16_t *)deviceAddress = *(uint16_t *)pBuffer++;
 960:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 961:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 962:HALLIB/Src/stm32f7xx_hal_nand.c ****    
 963:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 964:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 965:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 966:HALLIB/Src/stm32f7xx_hal_nand.c **** 	/* Get tick */
 967:HALLIB/Src/stm32f7xx_hal_nand.c ****     tickstart = HAL_GetTick();
 968:HALLIB/Src/stm32f7xx_hal_nand.c **** 	  
 969:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Read status until NAND is ready */
 970:HALLIB/Src/stm32f7xx_hal_nand.c ****     while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 971:HALLIB/Src/stm32f7xx_hal_nand.c ****     {  
 972:HALLIB/Src/stm32f7xx_hal_nand.c ****       if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 973:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 974:HALLIB/Src/stm32f7xx_hal_nand.c ****         return HAL_TIMEOUT; 
 975:HALLIB/Src/stm32f7xx_hal_nand.c ****       } 
 976:HALLIB/Src/stm32f7xx_hal_nand.c ****     }   
 977:HALLIB/Src/stm32f7xx_hal_nand.c ****  
 978:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment written pages number */
 979:HALLIB/Src/stm32f7xx_hal_nand.c ****     numPagesWritten++;
 980:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 981:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Decrement pages to write */
 982:HALLIB/Src/stm32f7xx_hal_nand.c ****     NumPageToWrite--;
 983:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 984:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment the NAND address */
 985:HALLIB/Src/stm32f7xx_hal_nand.c ****     nandAddress = (uint32_t)(nandAddress + 1);
 986:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 987:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 988:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */ 
 989:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 990:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 991:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process unlocked */
 992:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);      
 993:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 994:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;
 995:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 996:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 997:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
 998:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Read Spare area(s) from NAND memory (8-bits addressing)
 999:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1000:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
1001:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1002:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pBuffer pointer to source buffer to write  
1003:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  NumSpareAreaToRead Number of spare area to read  
1004:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
1005:HALLIB/Src/stm32f7xx_hal_nand.c **** */
ARM GAS  /tmp/ccwQVsCz.s 			page 36


1006:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_SpareArea_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddre
1007:HALLIB/Src/stm32f7xx_hal_nand.c **** {
1008:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0;
1009:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0U;
1010:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t deviceAddress = 0, size = 0, numSpareAreaRead = 0, nandAddress = 0, columnAddress = 0;
1011:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1012:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process Locked */
1013:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_LOCK(hnand);  
1014:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1015:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
1016:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
1017:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1018:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
1019:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1020:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1021:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */
1022:HALLIB/Src/stm32f7xx_hal_nand.c ****   deviceAddress = NAND_DEVICE;
1023:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1024:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */
1025:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
1026:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1027:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* NAND raw address calculation */
1028:HALLIB/Src/stm32f7xx_hal_nand.c ****   nandAddress = ARRAY_ADDRESS(pAddress, hnand);
1029:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1030:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Column in page address */
1031:HALLIB/Src/stm32f7xx_hal_nand.c ****   columnAddress = COLUMN_ADDRESS(hnand);
1032:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1033:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Spare area(s) read loop */ 
1034:HALLIB/Src/stm32f7xx_hal_nand.c ****   while((NumSpareAreaToRead != 0) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.Blo
1035:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1036:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* update the buffer size */
1037:HALLIB/Src/stm32f7xx_hal_nand.c ****     size = (hnand->Config.SpareAreaSize) + ((hnand->Config.SpareAreaSize) * numSpareAreaRead);   
1038:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1039:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
1040:HALLIB/Src/stm32f7xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512)
1041:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1042:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Send read spare area command sequence */     
1043:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_C;
1044:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1045:HALLIB/Src/stm32f7xx_hal_nand.c ****       
1046:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
1047:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1048:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
1049:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1050:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1051:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1052:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1053:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1054:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1055:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1056:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1057:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
1058:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1059:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1060:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1061:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1062:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
ARM GAS  /tmp/ccwQVsCz.s 			page 37


1063:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1064:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1065:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1066:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1067:HALLIB/Src/stm32f7xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
1068:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1069:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Send read spare area command sequence */ 
1070:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
1071:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1072:HALLIB/Src/stm32f7xx_hal_nand.c ****       
1073:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
1074:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1075:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress);
1076:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1077:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress);
1078:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1079:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1080:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1081:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1082:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1083:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1084:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1085:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1086:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress);
1087:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1088:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress);
1089:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1090:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1091:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1092:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1093:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1094:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1095:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1096:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1097:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1098:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1099:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
1100:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
1101:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1102:HALLIB/Src/stm32f7xx_hal_nand.c ****     if(hnand->Config.ExtraCommandEnable == ENABLE)
1103:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1104:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Get tick */
1105:HALLIB/Src/stm32f7xx_hal_nand.c ****       tickstart = HAL_GetTick();
1106:HALLIB/Src/stm32f7xx_hal_nand.c ****       
1107:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Read status until NAND is ready */
1108:HALLIB/Src/stm32f7xx_hal_nand.c ****       while(HAL_NAND_Read_Status(hnand) != NAND_READY)
1109:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1110:HALLIB/Src/stm32f7xx_hal_nand.c ****         if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
1111:HALLIB/Src/stm32f7xx_hal_nand.c ****         {
1112:HALLIB/Src/stm32f7xx_hal_nand.c ****           return HAL_TIMEOUT; 
1113:HALLIB/Src/stm32f7xx_hal_nand.c ****         }
1114:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1115:HALLIB/Src/stm32f7xx_hal_nand.c ****       
1116:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Go back to read mode */
1117:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = ((uint8_t)0x00U);
1118:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1119:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
ARM GAS  /tmp/ccwQVsCz.s 			page 38


1120:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1121:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Get Data into Buffer */
1122:HALLIB/Src/stm32f7xx_hal_nand.c ****     for(; index < size; index++)
1123:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1124:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(uint8_t *)pBuffer++ = *(uint8_t *)deviceAddress;
1125:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1126:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1127:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment read spare areas number */
1128:HALLIB/Src/stm32f7xx_hal_nand.c ****     numSpareAreaRead++;
1129:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1130:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Decrement spare areas to read */
1131:HALLIB/Src/stm32f7xx_hal_nand.c ****     NumSpareAreaToRead--;
1132:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1133:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment the NAND address */
1134:HALLIB/Src/stm32f7xx_hal_nand.c ****     nandAddress = (uint32_t)(nandAddress + 1);
1135:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1136:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1137:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */
1138:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
1139:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1140:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process unlocked */
1141:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);     
1142:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1143:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;  
1144:HALLIB/Src/stm32f7xx_hal_nand.c **** }
1145:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1146:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1147:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Read Spare area(s) from NAND memory (16-bits addressing)
1148:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1149:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
1150:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1151:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pBuffer pointer to source buffer to write. pBuffer should be 16bits aligned.
1152:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  NumSpareAreaToRead Number of spare area to read  
1153:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
1154:HALLIB/Src/stm32f7xx_hal_nand.c **** */
1155:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_SpareArea_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddr
1156:HALLIB/Src/stm32f7xx_hal_nand.c **** {
1157:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0; 
1158:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0U;
1159:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t deviceAddress = 0, size = 0, numSpareAreaRead = 0, nandAddress = 0, columnAddress = 0;
1160:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1161:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process Locked */
1162:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_LOCK(hnand);  
1163:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1164:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
1165:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
1166:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1167:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
1168:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1169:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1170:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */
1171:HALLIB/Src/stm32f7xx_hal_nand.c ****   deviceAddress = NAND_DEVICE;
1172:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1173:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */
1174:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
1175:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1176:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* NAND raw address calculation */
ARM GAS  /tmp/ccwQVsCz.s 			page 39


1177:HALLIB/Src/stm32f7xx_hal_nand.c ****   nandAddress = ARRAY_ADDRESS(pAddress, hnand);
1178:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1179:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Column in page address */
1180:HALLIB/Src/stm32f7xx_hal_nand.c ****   columnAddress = (uint32_t)(COLUMN_ADDRESS(hnand) * 2);
1181:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1182:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Spare area(s) read loop */ 
1183:HALLIB/Src/stm32f7xx_hal_nand.c ****   while((NumSpareAreaToRead != 0) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.Blo
1184:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1185:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* update the buffer size */
1186:HALLIB/Src/stm32f7xx_hal_nand.c ****     size = (hnand->Config.SpareAreaSize) + ((hnand->Config.SpareAreaSize) * numSpareAreaRead);
1187:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1188:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
1189:HALLIB/Src/stm32f7xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512)
1190:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1191:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Send read spare area command sequence */     
1192:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_C;
1193:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1194:HALLIB/Src/stm32f7xx_hal_nand.c ****       
1195:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
1196:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1197:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
1198:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1199:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1200:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1201:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1202:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1203:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1204:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1205:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1206:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
1207:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1208:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1209:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1210:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1211:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1212:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1213:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1214:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1215:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1216:HALLIB/Src/stm32f7xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
1217:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1218:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Send read spare area command sequence */     
1219:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
1220:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1221:HALLIB/Src/stm32f7xx_hal_nand.c ****       
1222:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
1223:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1224:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress);
1225:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1226:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress);
1227:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1228:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1229:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1230:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1231:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1232:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1233:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
ARM GAS  /tmp/ccwQVsCz.s 			page 40


1234:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1235:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress);
1236:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1237:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress);
1238:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1239:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1240:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1241:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1242:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1243:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1244:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1245:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1246:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1247:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1248:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
1249:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
1250:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1251:HALLIB/Src/stm32f7xx_hal_nand.c ****     if(hnand->Config.ExtraCommandEnable == ENABLE)
1252:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1253:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Get tick */
1254:HALLIB/Src/stm32f7xx_hal_nand.c ****       tickstart = HAL_GetTick();
1255:HALLIB/Src/stm32f7xx_hal_nand.c ****       
1256:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Read status until NAND is ready */
1257:HALLIB/Src/stm32f7xx_hal_nand.c ****       while(HAL_NAND_Read_Status(hnand) != NAND_READY)
1258:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1259:HALLIB/Src/stm32f7xx_hal_nand.c ****         if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
1260:HALLIB/Src/stm32f7xx_hal_nand.c ****         {
1261:HALLIB/Src/stm32f7xx_hal_nand.c ****           return HAL_TIMEOUT; 
1262:HALLIB/Src/stm32f7xx_hal_nand.c ****         }
1263:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1264:HALLIB/Src/stm32f7xx_hal_nand.c ****       
1265:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Go back to read mode */
1266:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = ((uint8_t)0x00U);
1267:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1268:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1269:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1270:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Get Data into Buffer */
1271:HALLIB/Src/stm32f7xx_hal_nand.c ****     for(; index < size; index++)
1272:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1273:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(uint16_t *)pBuffer++ = *(uint16_t *)deviceAddress;
1274:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1275:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1276:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment read spare areas number */
1277:HALLIB/Src/stm32f7xx_hal_nand.c ****     numSpareAreaRead++;
1278:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1279:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Decrement spare areas to read */
1280:HALLIB/Src/stm32f7xx_hal_nand.c ****     NumSpareAreaToRead--;
1281:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1282:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment the NAND address */
1283:HALLIB/Src/stm32f7xx_hal_nand.c ****     nandAddress = (uint32_t)(nandAddress + 1);
1284:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1285:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1286:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */
1287:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
1288:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1289:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process unlocked */
1290:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);     
ARM GAS  /tmp/ccwQVsCz.s 			page 41


1291:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1292:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;  
1293:HALLIB/Src/stm32f7xx_hal_nand.c **** }
1294:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1295:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1296:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Write Spare area(s) to NAND memory (8-bits addressing)
1297:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1298:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
1299:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1300:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write  
1301:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  NumSpareAreaTowrite   number of spare areas to write to block
1302:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
1303:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
1304:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_SpareArea_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddr
1305:HALLIB/Src/stm32f7xx_hal_nand.c **** {
1306:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0;
1307:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0;
1308:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t deviceAddress = 0, size = 0, numSpareAreaWritten = 0, nandAddress = 0, columnAddress =0;
1309:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1310:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process Locked */
1311:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_LOCK(hnand); 
1312:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1313:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
1314:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
1315:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1316:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
1317:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1318:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1319:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */
1320:HALLIB/Src/stm32f7xx_hal_nand.c ****   deviceAddress = NAND_DEVICE;
1321:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1322:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the FMC_NAND controller state */
1323:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;  
1324:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1325:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Page address calculation */
1326:HALLIB/Src/stm32f7xx_hal_nand.c ****   nandAddress = ARRAY_ADDRESS(pAddress, hnand); 
1327:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1328:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Column in page address */
1329:HALLIB/Src/stm32f7xx_hal_nand.c ****   columnAddress = COLUMN_ADDRESS(hnand);
1330:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1331:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Spare area(s) write loop */
1332:HALLIB/Src/stm32f7xx_hal_nand.c ****   while((NumSpareAreaTowrite != 0) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.Bl
1333:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1334:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* update the buffer size */
1335:HALLIB/Src/stm32f7xx_hal_nand.c ****     size = (hnand->Config.SpareAreaSize) + ((hnand->Config.SpareAreaSize) * numSpareAreaWritten);
1336:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1337:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
1338:HALLIB/Src/stm32f7xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512)
1339:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1340:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Send write Spare area command sequence */
1341:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_C;
1342:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1343:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
1344:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1345:HALLIB/Src/stm32f7xx_hal_nand.c ****       
1346:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
1347:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
ARM GAS  /tmp/ccwQVsCz.s 			page 42


1348:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
1349:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1350:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1351:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1352:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1353:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1354:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1355:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1356:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1357:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
1358:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1359:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1360:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1361:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1362:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1363:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1364:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1365:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1366:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1367:HALLIB/Src/stm32f7xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
1368:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1369:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Send write Spare area command sequence */
1370:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
1371:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1372:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
1373:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1374:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1375:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
1376:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1377:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress);
1378:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1379:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress);
1380:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1381:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1382:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1383:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1384:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1385:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1386:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1387:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1388:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress);
1389:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1390:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress);
1391:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1392:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1393:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1394:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1395:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1396:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1397:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1398:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1399:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1400:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1401:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Write data to memory */
1402:HALLIB/Src/stm32f7xx_hal_nand.c ****     for(; index < size; index++)
1403:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1404:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)deviceAddress = *(uint8_t *)pBuffer++;
ARM GAS  /tmp/ccwQVsCz.s 			page 43


1405:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1406:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1407:HALLIB/Src/stm32f7xx_hal_nand.c ****    
1408:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
1409:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
1410:HALLIB/Src/stm32f7xx_hal_nand.c ****    
1411:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Get tick */
1412:HALLIB/Src/stm32f7xx_hal_nand.c ****     tickstart = HAL_GetTick();
1413:HALLIB/Src/stm32f7xx_hal_nand.c **** 	
1414:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Read status until NAND is ready */
1415:HALLIB/Src/stm32f7xx_hal_nand.c ****     while(HAL_NAND_Read_Status(hnand) != NAND_READY)
1416:HALLIB/Src/stm32f7xx_hal_nand.c ****     {  
1417:HALLIB/Src/stm32f7xx_hal_nand.c ****       if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
1418:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1419:HALLIB/Src/stm32f7xx_hal_nand.c ****         return HAL_TIMEOUT; 
1420:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1421:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1422:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1423:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment written spare areas number */
1424:HALLIB/Src/stm32f7xx_hal_nand.c ****     numSpareAreaWritten++;
1425:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1426:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Decrement spare areas to write */
1427:HALLIB/Src/stm32f7xx_hal_nand.c ****     NumSpareAreaTowrite--;
1428:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1429:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment the NAND address */
1430:HALLIB/Src/stm32f7xx_hal_nand.c ****     nandAddress = (uint32_t)(nandAddress + 1);
1431:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1432:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1433:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */
1434:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
1435:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1436:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process unlocked */
1437:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
1438:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1439:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;  
1440:HALLIB/Src/stm32f7xx_hal_nand.c **** }
1441:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1442:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1443:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Write Spare area(s) to NAND memory (16-bits addressing)
1444:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1445:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
1446:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1447:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write. pBuffer should be 16bits aligned.  
1448:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  NumSpareAreaTowrite   number of spare areas to write to block
1449:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
1450:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
1451:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_SpareArea_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAdd
1452:HALLIB/Src/stm32f7xx_hal_nand.c **** {
1453:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0;
1454:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0;
1455:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t deviceAddress = 0, size = 0, numSpareAreaWritten = 0, nandAddress = 0, columnAddress = 0
1456:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1457:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process Locked */
1458:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_LOCK(hnand); 
1459:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1460:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
1461:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
ARM GAS  /tmp/ccwQVsCz.s 			page 44


1462:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1463:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
1464:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1465:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1466:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */
1467:HALLIB/Src/stm32f7xx_hal_nand.c ****   deviceAddress = NAND_DEVICE;
1468:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1469:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the FMC_NAND controller state */
1470:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;  
1471:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1472:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* NAND raw address calculation */
1473:HALLIB/Src/stm32f7xx_hal_nand.c ****   nandAddress = ARRAY_ADDRESS(pAddress, hnand);
1474:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1475:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Column in page address */
1476:HALLIB/Src/stm32f7xx_hal_nand.c ****   columnAddress = (uint32_t)(COLUMN_ADDRESS(hnand) * 2);
1477:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1478:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Spare area(s) write loop */
1479:HALLIB/Src/stm32f7xx_hal_nand.c ****   while((NumSpareAreaTowrite != 0) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.Bl
1480:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1481:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* update the buffer size */
1482:HALLIB/Src/stm32f7xx_hal_nand.c ****     size = (hnand->Config.SpareAreaSize) + ((hnand->Config.SpareAreaSize) * numSpareAreaWritten);
1483:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1484:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
1485:HALLIB/Src/stm32f7xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512)
1486:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1487:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Send write Spare area command sequence */
1488:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_C;
1489:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1490:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
1491:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1492:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1493:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
1494:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1495:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
1496:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1497:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1498:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1499:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1500:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1501:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1502:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1503:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1504:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
1505:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1506:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1507:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1508:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1509:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1510:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1511:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1512:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1513:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1514:HALLIB/Src/stm32f7xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
1515:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1516:HALLIB/Src/stm32f7xx_hal_nand.c ****       /* Send write Spare area command sequence */
1517:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
1518:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
ARM GAS  /tmp/ccwQVsCz.s 			page 45


1519:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
1520:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1521:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1522:HALLIB/Src/stm32f7xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535)
1523:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1524:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress);
1525:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1526:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress);
1527:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1528:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1529:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1530:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1531:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1532:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1533:HALLIB/Src/stm32f7xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1534:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1535:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress);
1536:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1537:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress);
1538:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1539:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1540:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1541:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1542:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1543:HALLIB/Src/stm32f7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1544:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
1545:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1546:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1547:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1548:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Write data to memory */
1549:HALLIB/Src/stm32f7xx_hal_nand.c ****     for(; index < size; index++)
1550:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1551:HALLIB/Src/stm32f7xx_hal_nand.c ****       *(__IO uint16_t *)deviceAddress = *(uint16_t *)pBuffer++;
1552:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
1553:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1554:HALLIB/Src/stm32f7xx_hal_nand.c ****    
1555:HALLIB/Src/stm32f7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
1556:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
1557:HALLIB/Src/stm32f7xx_hal_nand.c ****    
1558:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Get tick */
1559:HALLIB/Src/stm32f7xx_hal_nand.c ****     tickstart = HAL_GetTick();
1560:HALLIB/Src/stm32f7xx_hal_nand.c **** 	  
1561:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Read status until NAND is ready */
1562:HALLIB/Src/stm32f7xx_hal_nand.c ****     while(HAL_NAND_Read_Status(hnand) != NAND_READY)
1563:HALLIB/Src/stm32f7xx_hal_nand.c ****     { 
1564:HALLIB/Src/stm32f7xx_hal_nand.c ****       if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
1565:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1566:HALLIB/Src/stm32f7xx_hal_nand.c ****         return HAL_TIMEOUT; 
1567:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1568:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1569:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1570:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment written spare areas number */
1571:HALLIB/Src/stm32f7xx_hal_nand.c ****     numSpareAreaWritten++;
1572:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1573:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Decrement spare areas to write */
1574:HALLIB/Src/stm32f7xx_hal_nand.c ****     NumSpareAreaTowrite--;
1575:HALLIB/Src/stm32f7xx_hal_nand.c ****     
ARM GAS  /tmp/ccwQVsCz.s 			page 46


1576:HALLIB/Src/stm32f7xx_hal_nand.c ****     /* Increment the NAND address */
1577:HALLIB/Src/stm32f7xx_hal_nand.c ****     nandAddress = (uint32_t)(nandAddress + 1);
1578:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1579:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1580:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */
1581:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
1582:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1583:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process unlocked */
1584:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
1585:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1586:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;  
1587:HALLIB/Src/stm32f7xx_hal_nand.c **** }
1588:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1589:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1590:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  NAND memory Block erase 
1591:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1592:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
1593:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1594:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
1595:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
1596:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
1597:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 543              		.loc 1 1597 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 548              	.LVL35:
1598:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t DeviceAddress = 0;
1599:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1600:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process Locked */
1601:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_LOCK(hnand);
 549              		.loc 1 1601 0
 550 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 551 0004 012B     		cmp	r3, #1
 552 0006 46D0     		beq	.L36
 553              		.loc 1 1601 0 is_stmt 0 discriminator 2
 554 0008 0123     		movs	r3, #1
 555 000a 80F82030 		strb	r3, [r0, #32]
1602:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1603:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
1604:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 556              		.loc 1 1604 0 is_stmt 1 discriminator 2
 557 000e 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 558 0012 DBB2     		uxtb	r3, r3
 559 0014 022B     		cmp	r3, #2
 560 0016 40D0     		beq	.L37
1597:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t DeviceAddress = 0;
 561              		.loc 1 1597 0
 562 0018 F0B4     		push	{r4, r5, r6, r7}
 563              	.LCFI6:
 564              		.cfi_def_cfa_offset 16
 565              		.cfi_offset 4, -16
 566              		.cfi_offset 5, -12
 567              		.cfi_offset 6, -8
 568              		.cfi_offset 7, -4
 569              	.LVL36:
ARM GAS  /tmp/ccwQVsCz.s 			page 47


1605:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1606:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
1607:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1608:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1609:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */
1610:HALLIB/Src/stm32f7xx_hal_nand.c ****   DeviceAddress = NAND_DEVICE;
1611:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1612:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */
1613:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;  
 570              		.loc 1 1613 0
 571 001a 0223     		movs	r3, #2
 572 001c 80F82130 		strb	r3, [r0, #33]
1614:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1615:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Send Erase block command sequence */
1616:HALLIB/Src/stm32f7xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(DeviceAddress | CMD_AREA)) = NAND_CMD_ERASE0;
 573              		.loc 1 1616 0
 574 0020 204D     		ldr	r5, .L40
 575 0022 6023     		movs	r3, #96
 576 0024 2B70     		strb	r3, [r5]
 577              	.LBB344:
 578              	.LBB345:
 579              		.loc 2 429 0
 580              		.syntax unified
 581              	@ 429 "CORE/cmsis_gcc.h" 1
 582 0026 BFF34F8F 		dsb 0xF
 583              	@ 0 "" 2
 584              		.thumb
 585              		.syntax unified
 586              	.LBE345:
 587              	.LBE344:
1617:HALLIB/Src/stm32f7xx_hal_nand.c ****   __DSB();
1618:HALLIB/Src/stm32f7xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(DeviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress,
 588              		.loc 1 1618 0
 589 002a 0E88     		ldrh	r6, [r1]
 590 002c 8B88     		ldrh	r3, [r1, #4]
 591 002e 4C88     		ldrh	r4, [r1, #2]
 592 0030 826B     		ldr	r2, [r0, #56]
 593 0032 02FB0432 		mla	r2, r2, r4, r3
 594 0036 C36A     		ldr	r3, [r0, #44]
 595 0038 12FB0363 		smlabb	r3, r2, r3, r6
 596 003c DBB2     		uxtb	r3, r3
 597 003e 1A4E     		ldr	r6, .L40+4
 598 0040 3370     		strb	r3, [r6]
 599              	.LBB346:
 600              	.LBB347:
 601              		.loc 2 429 0
 602              		.syntax unified
 603              	@ 429 "CORE/cmsis_gcc.h" 1
 604 0042 BFF34F8F 		dsb 0xF
 605              	@ 0 "" 2
 606              		.thumb
 607              		.syntax unified
 608              	.LBE347:
 609              	.LBE346:
1619:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
1620:HALLIB/Src/stm32f7xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(DeviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress,
 610              		.loc 1 1620 0
ARM GAS  /tmp/ccwQVsCz.s 			page 48


 611 0046 0F88     		ldrh	r7, [r1]
 612 0048 8B88     		ldrh	r3, [r1, #4]
 613 004a 4C88     		ldrh	r4, [r1, #2]
 614 004c 826B     		ldr	r2, [r0, #56]
 615 004e 02FB0432 		mla	r2, r2, r4, r3
 616 0052 C36A     		ldr	r3, [r0, #44]
 617 0054 03FB0273 		mla	r3, r3, r2, r7
 618 0058 C3F30723 		ubfx	r3, r3, #8, #8
 619 005c 3370     		strb	r3, [r6]
 620              	.LBB348:
 621              	.LBB349:
 622              		.loc 2 429 0
 623              		.syntax unified
 624              	@ 429 "CORE/cmsis_gcc.h" 1
 625 005e BFF34F8F 		dsb 0xF
 626              	@ 0 "" 2
 627              		.thumb
 628              		.syntax unified
 629              	.LBE349:
 630              	.LBE348:
1621:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
1622:HALLIB/Src/stm32f7xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(DeviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress,
 631              		.loc 1 1622 0
 632 0062 0C88     		ldrh	r4, [r1]
 633 0064 8B88     		ldrh	r3, [r1, #4]
 634 0066 4988     		ldrh	r1, [r1, #2]
 635              	.LVL37:
 636 0068 826B     		ldr	r2, [r0, #56]
 637 006a 02FB0132 		mla	r2, r2, r1, r3
 638 006e C36A     		ldr	r3, [r0, #44]
 639 0070 03FB0243 		mla	r3, r3, r2, r4
 640 0074 C3F30743 		ubfx	r3, r3, #16, #8
 641 0078 3370     		strb	r3, [r6]
 642              	.LBB350:
 643              	.LBB351:
 644              		.loc 2 429 0
 645              		.syntax unified
 646              	@ 429 "CORE/cmsis_gcc.h" 1
 647 007a BFF34F8F 		dsb 0xF
 648              	@ 0 "" 2
 649              		.thumb
 650              		.syntax unified
 651              	.LBE351:
 652              	.LBE350:
1623:HALLIB/Src/stm32f7xx_hal_nand.c ****   __DSB();
1624:HALLIB/Src/stm32f7xx_hal_nand.c **** 		
1625:HALLIB/Src/stm32f7xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(DeviceAddress | CMD_AREA)) = NAND_CMD_ERASE1; 
 653              		.loc 1 1625 0
 654 007e D023     		movs	r3, #208
 655 0080 2B70     		strb	r3, [r5]
 656              	.LBB352:
 657              	.LBB353:
 658              		.loc 2 429 0
 659              		.syntax unified
 660              	@ 429 "CORE/cmsis_gcc.h" 1
 661 0082 BFF34F8F 		dsb 0xF
 662              	@ 0 "" 2
ARM GAS  /tmp/ccwQVsCz.s 			page 49


 663              		.thumb
 664              		.syntax unified
 665              	.LBE353:
 666              	.LBE352:
1626:HALLIB/Src/stm32f7xx_hal_nand.c ****   __DSB();
1627:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1628:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND controller state */
1629:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 667              		.loc 1 1629 0
 668 0086 0123     		movs	r3, #1
 669 0088 80F82130 		strb	r3, [r0, #33]
1630:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1631:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Process unlocked */
1632:HALLIB/Src/stm32f7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);    
 670              		.loc 1 1632 0
 671 008c 0023     		movs	r3, #0
 672 008e 80F82030 		strb	r3, [r0, #32]
1633:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1634:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;  
 673              		.loc 1 1634 0
 674 0092 1846     		mov	r0, r3
 675              	.LVL38:
 676 0094 03E0     		b	.L35
 677              	.LVL39:
 678              	.L36:
 679              	.LCFI7:
 680              		.cfi_def_cfa_offset 0
 681              		.cfi_restore 4
 682              		.cfi_restore 5
 683              		.cfi_restore 6
 684              		.cfi_restore 7
1601:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 685              		.loc 1 1601 0
 686 0096 0220     		movs	r0, #2
 687              	.LVL40:
 688 0098 7047     		bx	lr
 689              	.LVL41:
 690              	.L37:
1606:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 691              		.loc 1 1606 0
 692 009a 0220     		movs	r0, #2
 693              	.LVL42:
 694 009c 7047     		bx	lr
 695              	.LVL43:
 696              	.L35:
 697              	.LCFI8:
 698              		.cfi_def_cfa_offset 16
 699              		.cfi_offset 4, -16
 700              		.cfi_offset 5, -12
 701              		.cfi_offset 6, -8
 702              		.cfi_offset 7, -4
1635:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 703              		.loc 1 1635 0
 704 009e F0BC     		pop	{r4, r5, r6, r7}
 705              	.LCFI9:
 706              		.cfi_restore 7
 707              		.cfi_restore 6
ARM GAS  /tmp/ccwQVsCz.s 			page 50


 708              		.cfi_restore 5
 709              		.cfi_restore 4
 710              		.cfi_def_cfa_offset 0
 711 00a0 7047     		bx	lr
 712              	.L41:
 713 00a2 00BF     		.align	2
 714              	.L40:
 715 00a4 00000180 		.word	-2147418112
 716 00a8 00000280 		.word	-2147352576
 717              		.cfi_endproc
 718              	.LFE153:
 720              		.section	.text.HAL_NAND_Address_Inc,"ax",%progbits
 721              		.align	2
 722              		.global	HAL_NAND_Address_Inc
 723              		.thumb
 724              		.thumb_func
 726              	HAL_NAND_Address_Inc:
 727              	.LFB154:
1636:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1637:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1638:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Increment the NAND memory address
1639:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1640:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
1641:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param pAddress pointer to NAND address structure
1642:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval The new status of the increment address operation. It can be:
1643:HALLIB/Src/stm32f7xx_hal_nand.c ****   *           - NAND_VALID_ADDRESS: When the new address is valid address
1644:HALLIB/Src/stm32f7xx_hal_nand.c ****   *           - NAND_INVALID_ADDRESS: When the new address is invalid address
1645:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
1646:HALLIB/Src/stm32f7xx_hal_nand.c **** uint32_t HAL_NAND_Address_Inc(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
1647:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 728              		.loc 1 1647 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		@ link register save eliminated.
 733              	.LVL44:
1648:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t status = NAND_VALID_ADDRESS;
1649:HALLIB/Src/stm32f7xx_hal_nand.c ****  
1650:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Increment page address */
1651:HALLIB/Src/stm32f7xx_hal_nand.c ****   pAddress->Page++;
 734              		.loc 1 1651 0
 735 0000 0B88     		ldrh	r3, [r1]
 736 0002 0133     		adds	r3, r3, #1
 737 0004 9BB2     		uxth	r3, r3
 738 0006 0B80     		strh	r3, [r1]	@ movhi
1652:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1653:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check NAND address is valid */
1654:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(pAddress->Page == hnand->Config.BlockSize)
 739              		.loc 1 1654 0
 740 0008 C26A     		ldr	r2, [r0, #44]
 741 000a 9342     		cmp	r3, r2
 742 000c 14D1     		bne	.L44
1655:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1656:HALLIB/Src/stm32f7xx_hal_nand.c ****     pAddress->Page = 0;
 743              		.loc 1 1656 0
 744 000e 0023     		movs	r3, #0
 745 0010 0B80     		strh	r3, [r1]	@ movhi
ARM GAS  /tmp/ccwQVsCz.s 			page 51


1657:HALLIB/Src/stm32f7xx_hal_nand.c ****     pAddress->Block++;
 746              		.loc 1 1657 0
 747 0012 8B88     		ldrh	r3, [r1, #4]
 748 0014 0133     		adds	r3, r3, #1
 749 0016 9BB2     		uxth	r3, r3
 750 0018 8B80     		strh	r3, [r1, #4]	@ movhi
1658:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1659:HALLIB/Src/stm32f7xx_hal_nand.c ****     if(pAddress->Block == hnand->Config.PlaneSize)
 751              		.loc 1 1659 0
 752 001a 826B     		ldr	r2, [r0, #56]
 753 001c 9342     		cmp	r3, r2
 754 001e 0ED1     		bne	.L45
1660:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
1661:HALLIB/Src/stm32f7xx_hal_nand.c ****       pAddress->Block = 0;
 755              		.loc 1 1661 0
 756 0020 0023     		movs	r3, #0
 757 0022 8B80     		strh	r3, [r1, #4]	@ movhi
1662:HALLIB/Src/stm32f7xx_hal_nand.c ****       pAddress->Plane++;
 758              		.loc 1 1662 0
 759 0024 4B88     		ldrh	r3, [r1, #2]
 760 0026 0133     		adds	r3, r3, #1
 761 0028 9BB2     		uxth	r3, r3
 762 002a 4B80     		strh	r3, [r1, #2]	@ movhi
1663:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1664:HALLIB/Src/stm32f7xx_hal_nand.c ****       if(pAddress->Plane == (hnand->Config.PlaneNbr))
 763              		.loc 1 1664 0
 764 002c 426B     		ldr	r2, [r0, #52]
 765 002e 9342     		cmp	r3, r2
 766 0030 08D0     		beq	.L46
1648:HALLIB/Src/stm32f7xx_hal_nand.c ****  
 767              		.loc 1 1648 0
 768 0032 4FF48070 		mov	r0, #256
 769              	.LVL45:
 770 0036 7047     		bx	lr
 771              	.LVL46:
 772              	.L44:
 773 0038 4FF48070 		mov	r0, #256
 774              	.LVL47:
 775 003c 7047     		bx	lr
 776              	.LVL48:
 777              	.L45:
 778 003e 4FF48070 		mov	r0, #256
 779              	.LVL49:
 780 0042 7047     		bx	lr
 781              	.LVL50:
 782              	.L46:
1665:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
1666:HALLIB/Src/stm32f7xx_hal_nand.c ****         status = NAND_INVALID_ADDRESS;
 783              		.loc 1 1666 0
 784 0044 4FF40070 		mov	r0, #512
 785              	.LVL51:
1667:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
1668:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
1669:HALLIB/Src/stm32f7xx_hal_nand.c ****   } 
1670:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1671:HALLIB/Src/stm32f7xx_hal_nand.c ****   return (status);
1672:HALLIB/Src/stm32f7xx_hal_nand.c **** }
ARM GAS  /tmp/ccwQVsCz.s 			page 52


 786              		.loc 1 1672 0
 787 0048 7047     		bx	lr
 788              		.cfi_endproc
 789              	.LFE154:
 791 004a 00BF     		.section	.text.HAL_NAND_ECC_Enable,"ax",%progbits
 792              		.align	2
 793              		.global	HAL_NAND_ECC_Enable
 794              		.thumb
 795              		.thumb_func
 797              	HAL_NAND_ECC_Enable:
 798              	.LFB155:
1673:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1674:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @}
1675:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
1676:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1677:HALLIB/Src/stm32f7xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group3 Peripheral Control functions 
1678:HALLIB/Src/stm32f7xx_hal_nand.c ****  *  @brief   management functions 
1679:HALLIB/Src/stm32f7xx_hal_nand.c ****  *
1680:HALLIB/Src/stm32f7xx_hal_nand.c **** @verbatim   
1681:HALLIB/Src/stm32f7xx_hal_nand.c ****   ==============================================================================
1682:HALLIB/Src/stm32f7xx_hal_nand.c ****                          ##### NAND Control functions #####
1683:HALLIB/Src/stm32f7xx_hal_nand.c ****   ==============================================================================  
1684:HALLIB/Src/stm32f7xx_hal_nand.c ****   [..]
1685:HALLIB/Src/stm32f7xx_hal_nand.c ****     This subsection provides a set of functions allowing to control dynamically
1686:HALLIB/Src/stm32f7xx_hal_nand.c ****     the NAND interface.
1687:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1688:HALLIB/Src/stm32f7xx_hal_nand.c **** @endverbatim
1689:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @{
1690:HALLIB/Src/stm32f7xx_hal_nand.c ****   */ 
1691:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1692:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1693:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1694:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Enables dynamically NAND ECC feature.
1695:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1696:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
1697:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
1698:HALLIB/Src/stm32f7xx_hal_nand.c ****   */    
1699:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_ECC_Enable(NAND_HandleTypeDef *hnand)
1700:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 799              		.loc 1 1700 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              	.LVL52:
1701:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
1702:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 804              		.loc 1 1702 0
 805 0000 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 806 0004 DBB2     		uxtb	r3, r3
 807 0006 022B     		cmp	r3, #2
 808 0008 0DD0     		beq	.L49
1700:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
 809              		.loc 1 1700 0
 810 000a 10B5     		push	{r4, lr}
 811              	.LCFI10:
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 4, -8
ARM GAS  /tmp/ccwQVsCz.s 			page 53


 814              		.cfi_offset 14, -4
 815 000c 0446     		mov	r4, r0
1703:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1704:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
1705:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1706:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1707:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND state */
1708:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 816              		.loc 1 1708 0
 817 000e 0223     		movs	r3, #2
 818 0010 80F82130 		strb	r3, [r0, #33]
1709:HALLIB/Src/stm32f7xx_hal_nand.c ****    
1710:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Enable ECC feature */
1711:HALLIB/Src/stm32f7xx_hal_nand.c ****   FMC_NAND_ECC_Enable(hnand->Instance, hnand->Init.NandBank);
 819              		.loc 1 1711 0
 820 0014 4168     		ldr	r1, [r0, #4]
 821 0016 0068     		ldr	r0, [r0]
 822              	.LVL53:
 823 0018 FFF7FEFF 		bl	FMC_NAND_ECC_Enable
 824              	.LVL54:
1712:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1713:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND state */
1714:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 825              		.loc 1 1714 0
 826 001c 0123     		movs	r3, #1
 827 001e 84F82130 		strb	r3, [r4, #33]
1715:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1716:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;  
 828              		.loc 1 1716 0
 829 0022 0020     		movs	r0, #0
 830 0024 10BD     		pop	{r4, pc}
 831              	.LVL55:
 832              	.L49:
 833              	.LCFI11:
 834              		.cfi_def_cfa_offset 0
 835              		.cfi_restore 4
 836              		.cfi_restore 14
1704:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 837              		.loc 1 1704 0
 838 0026 0220     		movs	r0, #2
 839              	.LVL56:
 840 0028 7047     		bx	lr
 841              		.cfi_endproc
 842              	.LFE155:
 844 002a 00BF     		.section	.text.HAL_NAND_ECC_Disable,"ax",%progbits
 845              		.align	2
 846              		.global	HAL_NAND_ECC_Disable
 847              		.thumb
 848              		.thumb_func
 850              	HAL_NAND_ECC_Disable:
 851              	.LFB156:
1717:HALLIB/Src/stm32f7xx_hal_nand.c **** }
1718:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1719:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1720:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Disables dynamically FMC_NAND ECC feature.
1721:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1722:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
ARM GAS  /tmp/ccwQVsCz.s 			page 54


1723:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
1724:HALLIB/Src/stm32f7xx_hal_nand.c ****   */  
1725:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)  
1726:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 852              		.loc 1 1726 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856              	.LVL57:
1727:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
1728:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 857              		.loc 1 1728 0
 858 0000 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 859 0004 DBB2     		uxtb	r3, r3
 860 0006 022B     		cmp	r3, #2
 861 0008 0DD0     		beq	.L54
1726:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
 862              		.loc 1 1726 0
 863 000a 10B5     		push	{r4, lr}
 864              	.LCFI12:
 865              		.cfi_def_cfa_offset 8
 866              		.cfi_offset 4, -8
 867              		.cfi_offset 14, -4
 868 000c 0446     		mov	r4, r0
1729:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1730:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
1731:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1732:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1733:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND state */
1734:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 869              		.loc 1 1734 0
 870 000e 0223     		movs	r3, #2
 871 0010 80F82130 		strb	r3, [r0, #33]
1735:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1736:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Disable ECC feature */
1737:HALLIB/Src/stm32f7xx_hal_nand.c ****   FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
 872              		.loc 1 1737 0
 873 0014 4168     		ldr	r1, [r0, #4]
 874 0016 0068     		ldr	r0, [r0]
 875              	.LVL58:
 876 0018 FFF7FEFF 		bl	FMC_NAND_ECC_Disable
 877              	.LVL59:
1738:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1739:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND state */
1740:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 878              		.loc 1 1740 0
 879 001c 0123     		movs	r3, #1
 880 001e 84F82130 		strb	r3, [r4, #33]
1741:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1742:HALLIB/Src/stm32f7xx_hal_nand.c ****   return HAL_OK;  
 881              		.loc 1 1742 0
 882 0022 0020     		movs	r0, #0
 883 0024 10BD     		pop	{r4, pc}
 884              	.LVL60:
 885              	.L54:
 886              	.LCFI13:
 887              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccwQVsCz.s 			page 55


 888              		.cfi_restore 4
 889              		.cfi_restore 14
1730:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 890              		.loc 1 1730 0
 891 0026 0220     		movs	r0, #2
 892              	.LVL61:
 893 0028 7047     		bx	lr
 894              		.cfi_endproc
 895              	.LFE156:
 897 002a 00BF     		.section	.text.HAL_NAND_GetECC,"ax",%progbits
 898              		.align	2
 899              		.global	HAL_NAND_GetECC
 900              		.thumb
 901              		.thumb_func
 903              	HAL_NAND_GetECC:
 904              	.LFB157:
1743:HALLIB/Src/stm32f7xx_hal_nand.c **** }
1744:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1745:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1746:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  Disables dynamically NAND ECC feature.
1747:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1748:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
1749:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  ECCval pointer to ECC value 
1750:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  Timeout maximum timeout to wait    
1751:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL status
1752:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
1753:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_GetECC(NAND_HandleTypeDef *hnand, uint32_t *ECCval, uint32_t Timeout)
1754:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 905              		.loc 1 1754 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909              	.LVL62:
 910 0000 10B5     		push	{r4, lr}
 911              	.LCFI14:
 912              		.cfi_def_cfa_offset 8
 913              		.cfi_offset 4, -8
 914              		.cfi_offset 14, -4
 915              	.LVL63:
1755:HALLIB/Src/stm32f7xx_hal_nand.c ****   HAL_StatusTypeDef status = HAL_OK;
1756:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1757:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Check the NAND controller state */
1758:HALLIB/Src/stm32f7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 916              		.loc 1 1758 0
 917 0002 90F82140 		ldrb	r4, [r0, #33]	@ zero_extendqisi2
 918 0006 E4B2     		uxtb	r4, r4
 919 0008 022C     		cmp	r4, #2
 920 000a 0CD0     		beq	.L59
 921 000c 1346     		mov	r3, r2
 922 000e 0446     		mov	r4, r0
1759:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1760:HALLIB/Src/stm32f7xx_hal_nand.c ****      return HAL_BUSY;
1761:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1762:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1763:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND state */
1764:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;  
 923              		.loc 1 1764 0
ARM GAS  /tmp/ccwQVsCz.s 			page 56


 924 0010 0222     		movs	r2, #2
 925              	.LVL64:
 926 0012 80F82120 		strb	r2, [r0, #33]
1765:HALLIB/Src/stm32f7xx_hal_nand.c ****    
1766:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Get NAND ECC value */
1767:HALLIB/Src/stm32f7xx_hal_nand.c ****   status = FMC_NAND_GetECC(hnand->Instance, ECCval, hnand->Init.NandBank, Timeout);
 927              		.loc 1 1767 0
 928 0016 4268     		ldr	r2, [r0, #4]
 929 0018 0068     		ldr	r0, [r0]
 930              	.LVL65:
 931 001a FFF7FEFF 		bl	FMC_NAND_GetECC
 932              	.LVL66:
1768:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1769:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Update the NAND state */
1770:HALLIB/Src/stm32f7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 933              		.loc 1 1770 0
 934 001e 0123     		movs	r3, #1
 935 0020 84F82130 		strb	r3, [r4, #33]
1771:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1772:HALLIB/Src/stm32f7xx_hal_nand.c ****   return status;  
 936              		.loc 1 1772 0
 937 0024 10BD     		pop	{r4, pc}
 938              	.LVL67:
 939              	.L59:
1760:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 940              		.loc 1 1760 0
 941 0026 0220     		movs	r0, #2
 942              	.LVL68:
1773:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 943              		.loc 1 1773 0
 944 0028 10BD     		pop	{r4, pc}
 945              		.cfi_endproc
 946              	.LFE157:
 948 002a 00BF     		.section	.text.HAL_NAND_GetState,"ax",%progbits
 949              		.align	2
 950              		.global	HAL_NAND_GetState
 951              		.thumb
 952              		.thumb_func
 954              	HAL_NAND_GetState:
 955              	.LFB158:
1774:HALLIB/Src/stm32f7xx_hal_nand.c ****                       
1775:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1776:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @}
1777:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
1778:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1779:HALLIB/Src/stm32f7xx_hal_nand.c ****     
1780:HALLIB/Src/stm32f7xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group4 Peripheral State functions  
1781:HALLIB/Src/stm32f7xx_hal_nand.c ****  *  @brief   Peripheral State functions 
1782:HALLIB/Src/stm32f7xx_hal_nand.c ****  *
1783:HALLIB/Src/stm32f7xx_hal_nand.c **** @verbatim   
1784:HALLIB/Src/stm32f7xx_hal_nand.c ****   ==============================================================================
1785:HALLIB/Src/stm32f7xx_hal_nand.c ****                          ##### NAND State functions #####
1786:HALLIB/Src/stm32f7xx_hal_nand.c ****   ==============================================================================  
1787:HALLIB/Src/stm32f7xx_hal_nand.c ****   [..]
1788:HALLIB/Src/stm32f7xx_hal_nand.c ****     This subsection permits to get in run-time the status of the NAND controller 
1789:HALLIB/Src/stm32f7xx_hal_nand.c ****     and the data flow.
1790:HALLIB/Src/stm32f7xx_hal_nand.c **** 
ARM GAS  /tmp/ccwQVsCz.s 			page 57


1791:HALLIB/Src/stm32f7xx_hal_nand.c **** @endverbatim
1792:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @{
1793:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
1794:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1795:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1796:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  return the NAND state
1797:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1798:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
1799:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval HAL state
1800:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
1801:HALLIB/Src/stm32f7xx_hal_nand.c **** HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
1802:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 956              		.loc 1 1802 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              		@ link register save eliminated.
 961              	.LVL69:
1803:HALLIB/Src/stm32f7xx_hal_nand.c ****   return hnand->State;
 962              		.loc 1 1803 0
 963 0000 90F82100 		ldrb	r0, [r0, #33]	@ zero_extendqisi2
 964              	.LVL70:
1804:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 965              		.loc 1 1804 0
 966 0004 7047     		bx	lr
 967              		.cfi_endproc
 968              	.LFE158:
 970 0006 00BF     		.section	.text.HAL_NAND_Read_Status,"ax",%progbits
 971              		.align	2
 972              		.global	HAL_NAND_Read_Status
 973              		.thumb
 974              		.thumb_func
 976              	HAL_NAND_Read_Status:
 977              	.LFB159:
1805:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1806:HALLIB/Src/stm32f7xx_hal_nand.c **** /**
1807:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @brief  NAND memory read status 
1808:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1809:HALLIB/Src/stm32f7xx_hal_nand.c ****   *                the configuration information for NAND module.
1810:HALLIB/Src/stm32f7xx_hal_nand.c ****   * @retval NAND status
1811:HALLIB/Src/stm32f7xx_hal_nand.c ****   */
1812:HALLIB/Src/stm32f7xx_hal_nand.c **** uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
1813:HALLIB/Src/stm32f7xx_hal_nand.c **** {
 978              		.loc 1 1813 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982              		@ link register save eliminated.
 983              	.LVL71:
1814:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t data = 0;
1815:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t DeviceAddress = 0;
1816:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1817:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Identify the device address */
1818:HALLIB/Src/stm32f7xx_hal_nand.c ****    DeviceAddress = NAND_DEVICE;
1819:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1820:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Send Read status operation command */
1821:HALLIB/Src/stm32f7xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(DeviceAddress | CMD_AREA)) = NAND_CMD_STATUS;
ARM GAS  /tmp/ccwQVsCz.s 			page 58


 984              		.loc 1 1821 0
 985 0000 7022     		movs	r2, #112
 986 0002 094B     		ldr	r3, .L66
 987 0004 1A70     		strb	r2, [r3]
1822:HALLIB/Src/stm32f7xx_hal_nand.c ****   
1823:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Read status register data */
1824:HALLIB/Src/stm32f7xx_hal_nand.c ****   data = *(__IO uint8_t *)DeviceAddress;
 988              		.loc 1 1824 0
 989 0006 4FF00043 		mov	r3, #-2147483648
 990 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 991 000c DBB2     		uxtb	r3, r3
 992              	.LVL72:
1825:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1826:HALLIB/Src/stm32f7xx_hal_nand.c ****   /* Return the status */
1827:HALLIB/Src/stm32f7xx_hal_nand.c ****   if((data & NAND_ERROR) == NAND_ERROR)
 993              		.loc 1 1827 0
 994 000e 13F0010F 		tst	r3, #1
 995 0012 04D1     		bne	.L64
1828:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1829:HALLIB/Src/stm32f7xx_hal_nand.c ****     return NAND_ERROR;
1830:HALLIB/Src/stm32f7xx_hal_nand.c ****   } 
1831:HALLIB/Src/stm32f7xx_hal_nand.c ****   else if((data & NAND_READY) == NAND_READY)
 996              		.loc 1 1831 0
 997 0014 13F0400F 		tst	r3, #64
 998 0018 03D0     		beq	.L65
1832:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
1833:HALLIB/Src/stm32f7xx_hal_nand.c ****     return NAND_READY;
 999              		.loc 1 1833 0
 1000 001a 4020     		movs	r0, #64
 1001              	.LVL73:
 1002 001c 7047     		bx	lr
 1003              	.LVL74:
 1004              	.L64:
1829:HALLIB/Src/stm32f7xx_hal_nand.c ****   } 
 1005              		.loc 1 1829 0
 1006 001e 0120     		movs	r0, #1
 1007              	.LVL75:
 1008 0020 7047     		bx	lr
 1009              	.LVL76:
 1010              	.L65:
1834:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
1835:HALLIB/Src/stm32f7xx_hal_nand.c **** 
1836:HALLIB/Src/stm32f7xx_hal_nand.c ****   return NAND_BUSY; 
 1011              		.loc 1 1836 0
 1012 0022 0020     		movs	r0, #0
 1013              	.LVL77:
1837:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 1014              		.loc 1 1837 0
 1015 0024 7047     		bx	lr
 1016              	.L67:
 1017 0026 00BF     		.align	2
 1018              	.L66:
 1019 0028 00000180 		.word	-2147418112
 1020              		.cfi_endproc
 1021              	.LFE159:
 1023              		.section	.text.HAL_NAND_Read_Page_8b,"ax",%progbits
 1024              		.align	2
ARM GAS  /tmp/ccwQVsCz.s 			page 59


 1025              		.global	HAL_NAND_Read_Page_8b
 1026              		.thumb
 1027              		.thumb_func
 1029              	HAL_NAND_Read_Page_8b:
 1030              	.LFB145:
 445:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index  = 0;
 1031              		.loc 1 445 0
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 8
 1034              		@ frame_needed = 0, uses_anonymous_args = 0
 1035              	.LVL78:
 1036 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1037              	.LCFI15:
 1038              		.cfi_def_cfa_offset 32
 1039              		.cfi_offset 4, -32
 1040              		.cfi_offset 5, -28
 1041              		.cfi_offset 6, -24
 1042              		.cfi_offset 7, -20
 1043              		.cfi_offset 8, -16
 1044              		.cfi_offset 9, -12
 1045              		.cfi_offset 10, -8
 1046              		.cfi_offset 14, -4
 1047 0004 82B0     		sub	sp, sp, #8
 1048              	.LCFI16:
 1049              		.cfi_def_cfa_offset 40
 1050 0006 9846     		mov	r8, r3
 446:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0U;
 1051              		.loc 1 446 0
 1052 0008 0023     		movs	r3, #0
 1053              	.LVL79:
 1054 000a 0193     		str	r3, [sp, #4]
 1055              	.LVL80:
 451:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1056              		.loc 1 451 0
 1057 000c 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1058 0010 012B     		cmp	r3, #1
 1059 0012 00F0BF80 		beq	.L82
 1060 0016 0646     		mov	r6, r0
 1061 0018 1446     		mov	r4, r2
 451:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1062              		.loc 1 451 0 is_stmt 0 discriminator 2
 1063 001a 0123     		movs	r3, #1
 1064 001c 80F82030 		strb	r3, [r0, #32]
 454:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 1065              		.loc 1 454 0 is_stmt 1 discriminator 2
 1066 0020 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 1067 0024 DBB2     		uxtb	r3, r3
 1068 0026 022B     		cmp	r3, #2
 1069 0028 00F0B680 		beq	.L83
 1070              	.LVL81:
 463:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1071              		.loc 1 463 0
 1072 002c 0223     		movs	r3, #2
 1073 002e 80F82130 		strb	r3, [r0, #33]
 466:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1074              		.loc 1 466 0
 1075 0032 0888     		ldrh	r0, [r1]
ARM GAS  /tmp/ccwQVsCz.s 			page 60


 1076              	.LVL82:
 1077 0034 8B88     		ldrh	r3, [r1, #4]
 1078 0036 4A88     		ldrh	r2, [r1, #2]
 1079              	.LVL83:
 1080 0038 B76B     		ldr	r7, [r6, #56]
 1081 003a 07FB0233 		mla	r3, r7, r2, r3
 1082 003e F76A     		ldr	r7, [r6, #44]
 1083 0040 07FB0307 		mla	r7, r7, r3, r0
 1084              	.LVL84:
 448:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1085              		.loc 1 448 0
 1086 0044 4FF00009 		mov	r9, #0
 469:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 1087              		.loc 1 469 0
 1088 0048 93E0     		b	.L70
 1089              	.LVL85:
 1090              	.L81:
 472:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 1091              		.loc 1 472 0
 1092 004a 09F10109 		add	r9, r9, #1
 1093              	.LVL86:
 1094 004e 756A     		ldr	r5, [r6, #36]
 1095 0050 05FB09F5 		mul	r5, r5, r9
 1096              	.LVL87:
 475:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 1097              		.loc 1 475 0
 1098 0054 0022     		movs	r2, #0
 1099 0056 534B     		ldr	r3, .L86
 1100 0058 1A70     		strb	r2, [r3]
 1101              	.LBB354:
 1102              	.LBB355:
 1103              		.loc 2 429 0
 1104              		.syntax unified
 1105              	@ 429 "CORE/cmsis_gcc.h" 1
 1106 005a BFF34F8F 		dsb 0xF
 1107              	@ 0 "" 2
 1108              		.thumb
 1109              		.syntax unified
 1110              	.LBE355:
 1111              	.LBE354:
 479:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 1112              		.loc 1 479 0
 1113 005e 736A     		ldr	r3, [r6, #36]
 1114 0060 B3F5007F 		cmp	r3, #512
 1115 0064 29D8     		bhi	.L71
 481:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 1116              		.loc 1 481 0
 1117 0066 F26A     		ldr	r2, [r6, #44]
 1118 0068 336B     		ldr	r3, [r6, #48]
 1119 006a 03FB02F3 		mul	r3, r3, r2
 1120 006e B3F5803F 		cmp	r3, #65536
 1121 0072 0ED2     		bcs	.L72
 483:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1122              		.loc 1 483 0
 1123 0074 4C4B     		ldr	r3, .L86+4
 1124 0076 0022     		movs	r2, #0
 1125 0078 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccwQVsCz.s 			page 61


 1126              	.LBB356:
 1127              	.LBB357:
 1128              		.loc 2 429 0
 1129              		.syntax unified
 1130              	@ 429 "CORE/cmsis_gcc.h" 1
 1131 007a BFF34F8F 		dsb 0xF
 1132              	@ 0 "" 2
 1133              		.thumb
 1134              		.syntax unified
 1135              	.LBE357:
 1136              	.LBE356:
 485:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1137              		.loc 1 485 0
 1138 007e FAB2     		uxtb	r2, r7
 1139 0080 1A70     		strb	r2, [r3]
 1140              	.LBB358:
 1141              	.LBB359:
 1142              		.loc 2 429 0
 1143              		.syntax unified
 1144              	@ 429 "CORE/cmsis_gcc.h" 1
 1145 0082 BFF34F8F 		dsb 0xF
 1146              	@ 0 "" 2
 1147              		.thumb
 1148              		.syntax unified
 1149              	.LBE359:
 1150              	.LBE358:
 487:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1151              		.loc 1 487 0
 1152 0086 C7F30722 		ubfx	r2, r7, #8, #8
 1153 008a 1A70     		strb	r2, [r3]
 1154              	.LBB360:
 1155              	.LBB361:
 1156              		.loc 2 429 0
 1157              		.syntax unified
 1158              	@ 429 "CORE/cmsis_gcc.h" 1
 1159 008c BFF34F8F 		dsb 0xF
 1160              	@ 0 "" 2
 1161              		.thumb
 1162              		.syntax unified
 1163 0090 42E0     		b	.L73
 1164              	.L72:
 1165              	.LBE361:
 1166              	.LBE360:
 492:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1167              		.loc 1 492 0
 1168 0092 454B     		ldr	r3, .L86+4
 1169 0094 0022     		movs	r2, #0
 1170 0096 1A70     		strb	r2, [r3]
 1171              	.LBB362:
 1172              	.LBB363:
 1173              		.loc 2 429 0
 1174              		.syntax unified
 1175              	@ 429 "CORE/cmsis_gcc.h" 1
 1176 0098 BFF34F8F 		dsb 0xF
 1177              	@ 0 "" 2
 1178              		.thumb
 1179              		.syntax unified
ARM GAS  /tmp/ccwQVsCz.s 			page 62


 1180              	.LBE363:
 1181              	.LBE362:
 494:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1182              		.loc 1 494 0
 1183 009c FAB2     		uxtb	r2, r7
 1184 009e 1A70     		strb	r2, [r3]
 1185              	.LBB364:
 1186              	.LBB365:
 1187              		.loc 2 429 0
 1188              		.syntax unified
 1189              	@ 429 "CORE/cmsis_gcc.h" 1
 1190 00a0 BFF34F8F 		dsb 0xF
 1191              	@ 0 "" 2
 1192              		.thumb
 1193              		.syntax unified
 1194              	.LBE365:
 1195              	.LBE364:
 496:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1196              		.loc 1 496 0
 1197 00a4 C7F30722 		ubfx	r2, r7, #8, #8
 1198 00a8 1A70     		strb	r2, [r3]
 1199              	.LBB366:
 1200              	.LBB367:
 1201              		.loc 2 429 0
 1202              		.syntax unified
 1203              	@ 429 "CORE/cmsis_gcc.h" 1
 1204 00aa BFF34F8F 		dsb 0xF
 1205              	@ 0 "" 2
 1206              		.thumb
 1207              		.syntax unified
 1208              	.LBE367:
 1209              	.LBE366:
 498:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1210              		.loc 1 498 0
 1211 00ae C7F30742 		ubfx	r2, r7, #16, #8
 1212 00b2 1A70     		strb	r2, [r3]
 1213              	.LBB368:
 1214              	.LBB369:
 1215              		.loc 2 429 0
 1216              		.syntax unified
 1217              	@ 429 "CORE/cmsis_gcc.h" 1
 1218 00b4 BFF34F8F 		dsb 0xF
 1219              	@ 0 "" 2
 1220              		.thumb
 1221              		.syntax unified
 1222 00b8 2EE0     		b	.L73
 1223              	.L71:
 1224              	.LBE369:
 1225              	.LBE368:
 504:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 1226              		.loc 1 504 0
 1227 00ba F26A     		ldr	r2, [r6, #44]
 1228 00bc 336B     		ldr	r3, [r6, #48]
 1229 00be 03FB02F3 		mul	r3, r3, r2
 1230 00c2 B3F5803F 		cmp	r3, #65536
 1231 00c6 11D2     		bcs	.L74
 506:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
ARM GAS  /tmp/ccwQVsCz.s 			page 63


 1232              		.loc 1 506 0
 1233 00c8 374B     		ldr	r3, .L86+4
 1234 00ca 0022     		movs	r2, #0
 1235 00cc 1A70     		strb	r2, [r3]
 1236              	.LBB370:
 1237              	.LBB371:
 1238              		.loc 2 429 0
 1239              		.syntax unified
 1240              	@ 429 "CORE/cmsis_gcc.h" 1
 1241 00ce BFF34F8F 		dsb 0xF
 1242              	@ 0 "" 2
 1243              		.thumb
 1244              		.syntax unified
 1245              	.LBE371:
 1246              	.LBE370:
 508:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1247              		.loc 1 508 0
 1248 00d2 1A70     		strb	r2, [r3]
 1249              	.LBB372:
 1250              	.LBB373:
 1251              		.loc 2 429 0
 1252              		.syntax unified
 1253              	@ 429 "CORE/cmsis_gcc.h" 1
 1254 00d4 BFF34F8F 		dsb 0xF
 1255              	@ 0 "" 2
 1256              		.thumb
 1257              		.syntax unified
 1258              	.LBE373:
 1259              	.LBE372:
 510:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1260              		.loc 1 510 0
 1261 00d8 FAB2     		uxtb	r2, r7
 1262 00da 1A70     		strb	r2, [r3]
 1263              	.LBB374:
 1264              	.LBB375:
 1265              		.loc 2 429 0
 1266              		.syntax unified
 1267              	@ 429 "CORE/cmsis_gcc.h" 1
 1268 00dc BFF34F8F 		dsb 0xF
 1269              	@ 0 "" 2
 1270              		.thumb
 1271              		.syntax unified
 1272              	.LBE375:
 1273              	.LBE374:
 512:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1274              		.loc 1 512 0
 1275 00e0 C7F30722 		ubfx	r2, r7, #8, #8
 1276 00e4 1A70     		strb	r2, [r3]
 1277              	.LBB376:
 1278              	.LBB377:
 1279              		.loc 2 429 0
 1280              		.syntax unified
 1281              	@ 429 "CORE/cmsis_gcc.h" 1
 1282 00e6 BFF34F8F 		dsb 0xF
 1283              	@ 0 "" 2
 1284              		.thumb
 1285              		.syntax unified
ARM GAS  /tmp/ccwQVsCz.s 			page 64


 1286 00ea 15E0     		b	.L73
 1287              	.L74:
 1288              	.LBE377:
 1289              	.LBE376:
 517:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1290              		.loc 1 517 0
 1291 00ec 2E4B     		ldr	r3, .L86+4
 1292 00ee 0022     		movs	r2, #0
 1293 00f0 1A70     		strb	r2, [r3]
 1294              	.LBB378:
 1295              	.LBB379:
 1296              		.loc 2 429 0
 1297              		.syntax unified
 1298              	@ 429 "CORE/cmsis_gcc.h" 1
 1299 00f2 BFF34F8F 		dsb 0xF
 1300              	@ 0 "" 2
 1301              		.thumb
 1302              		.syntax unified
 1303              	.LBE379:
 1304              	.LBE378:
 519:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1305              		.loc 1 519 0
 1306 00f6 1A70     		strb	r2, [r3]
 1307              	.LBB380:
 1308              	.LBB381:
 1309              		.loc 2 429 0
 1310              		.syntax unified
 1311              	@ 429 "CORE/cmsis_gcc.h" 1
 1312 00f8 BFF34F8F 		dsb 0xF
 1313              	@ 0 "" 2
 1314              		.thumb
 1315              		.syntax unified
 1316              	.LBE381:
 1317              	.LBE380:
 521:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1318              		.loc 1 521 0
 1319 00fc FAB2     		uxtb	r2, r7
 1320 00fe 1A70     		strb	r2, [r3]
 1321              	.LBB382:
 1322              	.LBB383:
 1323              		.loc 2 429 0
 1324              		.syntax unified
 1325              	@ 429 "CORE/cmsis_gcc.h" 1
 1326 0100 BFF34F8F 		dsb 0xF
 1327              	@ 0 "" 2
 1328              		.thumb
 1329              		.syntax unified
 1330              	.LBE383:
 1331              	.LBE382:
 523:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1332              		.loc 1 523 0
 1333 0104 C7F30722 		ubfx	r2, r7, #8, #8
 1334 0108 1A70     		strb	r2, [r3]
 1335              	.LBB384:
 1336              	.LBB385:
 1337              		.loc 2 429 0
 1338              		.syntax unified
ARM GAS  /tmp/ccwQVsCz.s 			page 65


 1339              	@ 429 "CORE/cmsis_gcc.h" 1
 1340 010a BFF34F8F 		dsb 0xF
 1341              	@ 0 "" 2
 1342              		.thumb
 1343              		.syntax unified
 1344              	.LBE385:
 1345              	.LBE384:
 525:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1346              		.loc 1 525 0
 1347 010e C7F30742 		ubfx	r2, r7, #16, #8
 1348 0112 1A70     		strb	r2, [r3]
 1349              	.LBB386:
 1350              	.LBB387:
 1351              		.loc 2 429 0
 1352              		.syntax unified
 1353              	@ 429 "CORE/cmsis_gcc.h" 1
 1354 0114 BFF34F8F 		dsb 0xF
 1355              	@ 0 "" 2
 1356              		.thumb
 1357              		.syntax unified
 1358              	.L73:
 1359              	.LBE387:
 1360              	.LBE386:
 530:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 1361              		.loc 1 530 0
 1362 0118 3022     		movs	r2, #48
 1363 011a 224B     		ldr	r3, .L86
 1364 011c 1A70     		strb	r2, [r3]
 1365              	.LBB388:
 1366              	.LBB389:
 1367              		.loc 2 429 0
 1368              		.syntax unified
 1369              	@ 429 "CORE/cmsis_gcc.h" 1
 1370 011e BFF34F8F 		dsb 0xF
 1371              	@ 0 "" 2
 1372              		.thumb
 1373              		.syntax unified
 1374              	.LBE389:
 1375              	.LBE388:
 534:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 1376              		.loc 1 534 0
 1377 0122 96F83C30 		ldrb	r3, [r6, #60]	@ zero_extendqisi2
 1378 0126 012B     		cmp	r3, #1
 1379 0128 1DD1     		bne	.L78
 537:HALLIB/Src/stm32f7xx_hal_nand.c ****       
 1380              		.loc 1 537 0
 1381 012a FFF7FEFF 		bl	HAL_GetTick
 1382              	.LVL88:
 1383 012e 8246     		mov	r10, r0
 1384              	.LVL89:
 540:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 1385              		.loc 1 540 0
 1386 0130 06E0     		b	.L76
 1387              	.LVL90:
 1388              	.L77:
 542:HALLIB/Src/stm32f7xx_hal_nand.c ****         {
 1389              		.loc 1 542 0
ARM GAS  /tmp/ccwQVsCz.s 			page 66


 1390 0132 FFF7FEFF 		bl	HAL_GetTick
 1391              	.LVL91:
 1392 0136 CAEB0000 		rsb	r0, r10, r0
 1393 013a B0F1807F 		cmp	r0, #16777216
 1394 013e 2DD8     		bhi	.L84
 1395              	.L76:
 540:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 1396              		.loc 1 540 0
 1397 0140 3046     		mov	r0, r6
 1398 0142 FFF7FEFF 		bl	HAL_NAND_Read_Status
 1399              	.LVL92:
 1400 0146 4028     		cmp	r0, #64
 1401 0148 F3D1     		bne	.L77
 549:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 1402              		.loc 1 549 0
 1403 014a 0022     		movs	r2, #0
 1404 014c 154B     		ldr	r3, .L86
 1405 014e 1A70     		strb	r2, [r3]
 1406              	.LBB390:
 1407              	.LBB391:
 1408              		.loc 2 429 0
 1409              		.syntax unified
 1410              	@ 429 "CORE/cmsis_gcc.h" 1
 1411 0150 BFF34F8F 		dsb 0xF
 1412              	@ 0 "" 2
 1413              		.thumb
 1414              		.syntax unified
 1415 0154 07E0     		b	.L78
 1416              	.LVL93:
 1417              	.L79:
 1418              	.LBE391:
 1419              	.LBE390:
 556:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 1420              		.loc 1 556 0 discriminator 2
 1421 0156 4FF00043 		mov	r3, #-2147483648
 1422 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1423 015c 2370     		strb	r3, [r4]
 554:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 1424              		.loc 1 554 0 discriminator 2
 1425 015e 019B     		ldr	r3, [sp, #4]
 1426 0160 0133     		adds	r3, r3, #1
 1427 0162 0193     		str	r3, [sp, #4]
 556:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 1428              		.loc 1 556 0 discriminator 2
 1429 0164 0134     		adds	r4, r4, #1
 1430              	.LVL94:
 1431              	.L78:
 554:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 1432              		.loc 1 554 0 discriminator 1
 1433 0166 019B     		ldr	r3, [sp, #4]
 1434 0168 9D42     		cmp	r5, r3
 1435 016a F4D8     		bhi	.L79
 1436              	.LVL95:
 563:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 1437              		.loc 1 563 0
 1438 016c 08F1FF38 		add	r8, r8, #-1
 1439              	.LVL96:
ARM GAS  /tmp/ccwQVsCz.s 			page 67


 566:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 1440              		.loc 1 566 0
 1441 0170 0137     		adds	r7, r7, #1
 1442              	.LVL97:
 1443              	.L70:
 469:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 1444              		.loc 1 469 0
 1445 0172 B8F1000F 		cmp	r8, #0
 1446 0176 06D0     		beq	.L80
 469:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 1447              		.loc 1 469 0 is_stmt 0 discriminator 1
 1448 0178 F26A     		ldr	r2, [r6, #44]
 1449 017a 336B     		ldr	r3, [r6, #48]
 1450 017c 03FB02F3 		mul	r3, r3, r2
 1451 0180 9F42     		cmp	r7, r3
 1452 0182 FFF462AF 		bcc	.L81
 1453              	.L80:
 570:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1454              		.loc 1 570 0 is_stmt 1
 1455 0186 0123     		movs	r3, #1
 1456 0188 86F82130 		strb	r3, [r6, #33]
 573:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 1457              		.loc 1 573 0
 1458 018c 0020     		movs	r0, #0
 1459 018e 86F82000 		strb	r0, [r6, #32]
 575:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 1460              		.loc 1 575 0
 1461 0192 04E0     		b	.L69
 1462              	.LVL98:
 1463              	.L82:
 451:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1464              		.loc 1 451 0
 1465 0194 0220     		movs	r0, #2
 1466              	.LVL99:
 1467 0196 02E0     		b	.L69
 1468              	.LVL100:
 1469              	.L83:
 456:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 1470              		.loc 1 456 0
 1471 0198 0220     		movs	r0, #2
 1472              	.LVL101:
 1473 019a 00E0     		b	.L69
 1474              	.LVL102:
 1475              	.L84:
 544:HALLIB/Src/stm32f7xx_hal_nand.c ****         }
 1476              		.loc 1 544 0
 1477 019c 0320     		movs	r0, #3
 1478              	.LVL103:
 1479              	.L69:
 577:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 1480              		.loc 1 577 0
 1481 019e 02B0     		add	sp, sp, #8
 1482              	.LCFI17:
 1483              		.cfi_def_cfa_offset 32
 1484              		@ sp needed
 1485 01a0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1486              	.LVL104:
ARM GAS  /tmp/ccwQVsCz.s 			page 68


 1487              	.L87:
 1488              		.align	2
 1489              	.L86:
 1490 01a4 00000180 		.word	-2147418112
 1491 01a8 00000280 		.word	-2147352576
 1492              		.cfi_endproc
 1493              	.LFE145:
 1495              		.section	.text.HAL_NAND_Read_Page_16b,"ax",%progbits
 1496              		.align	2
 1497              		.global	HAL_NAND_Read_Page_16b
 1498              		.thumb
 1499              		.thumb_func
 1501              	HAL_NAND_Read_Page_16b:
 1502              	.LFB146:
 589:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index  = 0;
 1503              		.loc 1 589 0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 8
 1506              		@ frame_needed = 0, uses_anonymous_args = 0
 1507              	.LVL105:
 1508 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1509              	.LCFI18:
 1510              		.cfi_def_cfa_offset 32
 1511              		.cfi_offset 4, -32
 1512              		.cfi_offset 5, -28
 1513              		.cfi_offset 6, -24
 1514              		.cfi_offset 7, -20
 1515              		.cfi_offset 8, -16
 1516              		.cfi_offset 9, -12
 1517              		.cfi_offset 10, -8
 1518              		.cfi_offset 14, -4
 1519 0004 82B0     		sub	sp, sp, #8
 1520              	.LCFI19:
 1521              		.cfi_def_cfa_offset 40
 1522 0006 9846     		mov	r8, r3
 590:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0;
 1523              		.loc 1 590 0
 1524 0008 0023     		movs	r3, #0
 1525              	.LVL106:
 1526 000a 0193     		str	r3, [sp, #4]
 1527              	.LVL107:
 595:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1528              		.loc 1 595 0
 1529 000c 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1530 0010 012B     		cmp	r3, #1
 1531 0012 00F0BF80 		beq	.L102
 1532 0016 0646     		mov	r6, r0
 1533 0018 1446     		mov	r4, r2
 595:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1534              		.loc 1 595 0 is_stmt 0 discriminator 2
 1535 001a 0123     		movs	r3, #1
 1536 001c 80F82030 		strb	r3, [r0, #32]
 598:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 1537              		.loc 1 598 0 is_stmt 1 discriminator 2
 1538 0020 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 1539 0024 DBB2     		uxtb	r3, r3
 1540 0026 022B     		cmp	r3, #2
ARM GAS  /tmp/ccwQVsCz.s 			page 69


 1541 0028 00F0B680 		beq	.L103
 1542              	.LVL108:
 607:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1543              		.loc 1 607 0
 1544 002c 0223     		movs	r3, #2
 1545 002e 80F82130 		strb	r3, [r0, #33]
 610:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1546              		.loc 1 610 0
 1547 0032 0888     		ldrh	r0, [r1]
 1548              	.LVL109:
 1549 0034 8B88     		ldrh	r3, [r1, #4]
 1550 0036 4A88     		ldrh	r2, [r1, #2]
 1551              	.LVL110:
 1552 0038 B76B     		ldr	r7, [r6, #56]
 1553 003a 07FB0233 		mla	r3, r7, r2, r3
 1554 003e F76A     		ldr	r7, [r6, #44]
 1555 0040 07FB0307 		mla	r7, r7, r3, r0
 1556              	.LVL111:
 592:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1557              		.loc 1 592 0
 1558 0044 4FF00009 		mov	r9, #0
 613:HALLIB/Src/stm32f7xx_hal_nand.c ****   {	   
 1559              		.loc 1 613 0
 1560 0048 93E0     		b	.L90
 1561              	.LVL112:
 1562              	.L101:
 616:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 1563              		.loc 1 616 0
 1564 004a 09F10109 		add	r9, r9, #1
 1565              	.LVL113:
 1566 004e 756A     		ldr	r5, [r6, #36]
 1567 0050 05FB09F5 		mul	r5, r5, r9
 1568              	.LVL114:
 619:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 1569              		.loc 1 619 0
 1570 0054 0022     		movs	r2, #0
 1571 0056 534B     		ldr	r3, .L106
 1572 0058 1A70     		strb	r2, [r3]
 1573              	.LBB392:
 1574              	.LBB393:
 1575              		.loc 2 429 0
 1576              		.syntax unified
 1577              	@ 429 "CORE/cmsis_gcc.h" 1
 1578 005a BFF34F8F 		dsb 0xF
 1579              	@ 0 "" 2
 1580              		.thumb
 1581              		.syntax unified
 1582              	.LBE393:
 1583              	.LBE392:
 623:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 1584              		.loc 1 623 0
 1585 005e 736A     		ldr	r3, [r6, #36]
 1586 0060 B3F5007F 		cmp	r3, #512
 1587 0064 29D8     		bhi	.L91
 625:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 1588              		.loc 1 625 0
 1589 0066 F26A     		ldr	r2, [r6, #44]
ARM GAS  /tmp/ccwQVsCz.s 			page 70


 1590 0068 336B     		ldr	r3, [r6, #48]
 1591 006a 03FB02F3 		mul	r3, r3, r2
 1592 006e B3F5803F 		cmp	r3, #65536
 1593 0072 0ED2     		bcs	.L92
 627:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1594              		.loc 1 627 0
 1595 0074 4C4B     		ldr	r3, .L106+4
 1596 0076 0022     		movs	r2, #0
 1597 0078 1A70     		strb	r2, [r3]
 1598              	.LBB394:
 1599              	.LBB395:
 1600              		.loc 2 429 0
 1601              		.syntax unified
 1602              	@ 429 "CORE/cmsis_gcc.h" 1
 1603 007a BFF34F8F 		dsb 0xF
 1604              	@ 0 "" 2
 1605              		.thumb
 1606              		.syntax unified
 1607              	.LBE395:
 1608              	.LBE394:
 629:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1609              		.loc 1 629 0
 1610 007e FAB2     		uxtb	r2, r7
 1611 0080 1A70     		strb	r2, [r3]
 1612              	.LBB396:
 1613              	.LBB397:
 1614              		.loc 2 429 0
 1615              		.syntax unified
 1616              	@ 429 "CORE/cmsis_gcc.h" 1
 1617 0082 BFF34F8F 		dsb 0xF
 1618              	@ 0 "" 2
 1619              		.thumb
 1620              		.syntax unified
 1621              	.LBE397:
 1622              	.LBE396:
 631:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1623              		.loc 1 631 0
 1624 0086 C7F30722 		ubfx	r2, r7, #8, #8
 1625 008a 1A70     		strb	r2, [r3]
 1626              	.LBB398:
 1627              	.LBB399:
 1628              		.loc 2 429 0
 1629              		.syntax unified
 1630              	@ 429 "CORE/cmsis_gcc.h" 1
 1631 008c BFF34F8F 		dsb 0xF
 1632              	@ 0 "" 2
 1633              		.thumb
 1634              		.syntax unified
 1635 0090 42E0     		b	.L93
 1636              	.L92:
 1637              	.LBE399:
 1638              	.LBE398:
 636:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1639              		.loc 1 636 0
 1640 0092 454B     		ldr	r3, .L106+4
 1641 0094 0022     		movs	r2, #0
 1642 0096 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccwQVsCz.s 			page 71


 1643              	.LBB400:
 1644              	.LBB401:
 1645              		.loc 2 429 0
 1646              		.syntax unified
 1647              	@ 429 "CORE/cmsis_gcc.h" 1
 1648 0098 BFF34F8F 		dsb 0xF
 1649              	@ 0 "" 2
 1650              		.thumb
 1651              		.syntax unified
 1652              	.LBE401:
 1653              	.LBE400:
 638:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1654              		.loc 1 638 0
 1655 009c FAB2     		uxtb	r2, r7
 1656 009e 1A70     		strb	r2, [r3]
 1657              	.LBB402:
 1658              	.LBB403:
 1659              		.loc 2 429 0
 1660              		.syntax unified
 1661              	@ 429 "CORE/cmsis_gcc.h" 1
 1662 00a0 BFF34F8F 		dsb 0xF
 1663              	@ 0 "" 2
 1664              		.thumb
 1665              		.syntax unified
 1666              	.LBE403:
 1667              	.LBE402:
 640:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1668              		.loc 1 640 0
 1669 00a4 C7F30722 		ubfx	r2, r7, #8, #8
 1670 00a8 1A70     		strb	r2, [r3]
 1671              	.LBB404:
 1672              	.LBB405:
 1673              		.loc 2 429 0
 1674              		.syntax unified
 1675              	@ 429 "CORE/cmsis_gcc.h" 1
 1676 00aa BFF34F8F 		dsb 0xF
 1677              	@ 0 "" 2
 1678              		.thumb
 1679              		.syntax unified
 1680              	.LBE405:
 1681              	.LBE404:
 642:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1682              		.loc 1 642 0
 1683 00ae C7F30742 		ubfx	r2, r7, #16, #8
 1684 00b2 1A70     		strb	r2, [r3]
 1685              	.LBB406:
 1686              	.LBB407:
 1687              		.loc 2 429 0
 1688              		.syntax unified
 1689              	@ 429 "CORE/cmsis_gcc.h" 1
 1690 00b4 BFF34F8F 		dsb 0xF
 1691              	@ 0 "" 2
 1692              		.thumb
 1693              		.syntax unified
 1694 00b8 2EE0     		b	.L93
 1695              	.L91:
 1696              	.LBE407:
ARM GAS  /tmp/ccwQVsCz.s 			page 72


 1697              	.LBE406:
 648:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 1698              		.loc 1 648 0
 1699 00ba F26A     		ldr	r2, [r6, #44]
 1700 00bc 336B     		ldr	r3, [r6, #48]
 1701 00be 03FB02F3 		mul	r3, r3, r2
 1702 00c2 B3F5803F 		cmp	r3, #65536
 1703 00c6 11D2     		bcs	.L94
 650:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1704              		.loc 1 650 0
 1705 00c8 374B     		ldr	r3, .L106+4
 1706 00ca 0022     		movs	r2, #0
 1707 00cc 1A70     		strb	r2, [r3]
 1708              	.LBB408:
 1709              	.LBB409:
 1710              		.loc 2 429 0
 1711              		.syntax unified
 1712              	@ 429 "CORE/cmsis_gcc.h" 1
 1713 00ce BFF34F8F 		dsb 0xF
 1714              	@ 0 "" 2
 1715              		.thumb
 1716              		.syntax unified
 1717              	.LBE409:
 1718              	.LBE408:
 652:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1719              		.loc 1 652 0
 1720 00d2 1A70     		strb	r2, [r3]
 1721              	.LBB410:
 1722              	.LBB411:
 1723              		.loc 2 429 0
 1724              		.syntax unified
 1725              	@ 429 "CORE/cmsis_gcc.h" 1
 1726 00d4 BFF34F8F 		dsb 0xF
 1727              	@ 0 "" 2
 1728              		.thumb
 1729              		.syntax unified
 1730              	.LBE411:
 1731              	.LBE410:
 654:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1732              		.loc 1 654 0
 1733 00d8 FAB2     		uxtb	r2, r7
 1734 00da 1A70     		strb	r2, [r3]
 1735              	.LBB412:
 1736              	.LBB413:
 1737              		.loc 2 429 0
 1738              		.syntax unified
 1739              	@ 429 "CORE/cmsis_gcc.h" 1
 1740 00dc BFF34F8F 		dsb 0xF
 1741              	@ 0 "" 2
 1742              		.thumb
 1743              		.syntax unified
 1744              	.LBE413:
 1745              	.LBE412:
 656:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1746              		.loc 1 656 0
 1747 00e0 C7F30722 		ubfx	r2, r7, #8, #8
 1748 00e4 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccwQVsCz.s 			page 73


 1749              	.LBB414:
 1750              	.LBB415:
 1751              		.loc 2 429 0
 1752              		.syntax unified
 1753              	@ 429 "CORE/cmsis_gcc.h" 1
 1754 00e6 BFF34F8F 		dsb 0xF
 1755              	@ 0 "" 2
 1756              		.thumb
 1757              		.syntax unified
 1758 00ea 15E0     		b	.L93
 1759              	.L94:
 1760              	.LBE415:
 1761              	.LBE414:
 661:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1762              		.loc 1 661 0
 1763 00ec 2E4B     		ldr	r3, .L106+4
 1764 00ee 0022     		movs	r2, #0
 1765 00f0 1A70     		strb	r2, [r3]
 1766              	.LBB416:
 1767              	.LBB417:
 1768              		.loc 2 429 0
 1769              		.syntax unified
 1770              	@ 429 "CORE/cmsis_gcc.h" 1
 1771 00f2 BFF34F8F 		dsb 0xF
 1772              	@ 0 "" 2
 1773              		.thumb
 1774              		.syntax unified
 1775              	.LBE417:
 1776              	.LBE416:
 663:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1777              		.loc 1 663 0
 1778 00f6 1A70     		strb	r2, [r3]
 1779              	.LBB418:
 1780              	.LBB419:
 1781              		.loc 2 429 0
 1782              		.syntax unified
 1783              	@ 429 "CORE/cmsis_gcc.h" 1
 1784 00f8 BFF34F8F 		dsb 0xF
 1785              	@ 0 "" 2
 1786              		.thumb
 1787              		.syntax unified
 1788              	.LBE419:
 1789              	.LBE418:
 665:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1790              		.loc 1 665 0
 1791 00fc FAB2     		uxtb	r2, r7
 1792 00fe 1A70     		strb	r2, [r3]
 1793              	.LBB420:
 1794              	.LBB421:
 1795              		.loc 2 429 0
 1796              		.syntax unified
 1797              	@ 429 "CORE/cmsis_gcc.h" 1
 1798 0100 BFF34F8F 		dsb 0xF
 1799              	@ 0 "" 2
 1800              		.thumb
 1801              		.syntax unified
 1802              	.LBE421:
ARM GAS  /tmp/ccwQVsCz.s 			page 74


 1803              	.LBE420:
 667:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1804              		.loc 1 667 0
 1805 0104 C7F30722 		ubfx	r2, r7, #8, #8
 1806 0108 1A70     		strb	r2, [r3]
 1807              	.LBB422:
 1808              	.LBB423:
 1809              		.loc 2 429 0
 1810              		.syntax unified
 1811              	@ 429 "CORE/cmsis_gcc.h" 1
 1812 010a BFF34F8F 		dsb 0xF
 1813              	@ 0 "" 2
 1814              		.thumb
 1815              		.syntax unified
 1816              	.LBE423:
 1817              	.LBE422:
 669:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 1818              		.loc 1 669 0
 1819 010e C7F30742 		ubfx	r2, r7, #16, #8
 1820 0112 1A70     		strb	r2, [r3]
 1821              	.LBB424:
 1822              	.LBB425:
 1823              		.loc 2 429 0
 1824              		.syntax unified
 1825              	@ 429 "CORE/cmsis_gcc.h" 1
 1826 0114 BFF34F8F 		dsb 0xF
 1827              	@ 0 "" 2
 1828              		.thumb
 1829              		.syntax unified
 1830              	.L93:
 1831              	.LBE425:
 1832              	.LBE424:
 674:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 1833              		.loc 1 674 0
 1834 0118 3022     		movs	r2, #48
 1835 011a 224B     		ldr	r3, .L106
 1836 011c 1A70     		strb	r2, [r3]
 1837              	.LBB426:
 1838              	.LBB427:
 1839              		.loc 2 429 0
 1840              		.syntax unified
 1841              	@ 429 "CORE/cmsis_gcc.h" 1
 1842 011e BFF34F8F 		dsb 0xF
 1843              	@ 0 "" 2
 1844              		.thumb
 1845              		.syntax unified
 1846              	.LBE427:
 1847              	.LBE426:
 677:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 1848              		.loc 1 677 0
 1849 0122 96F83C30 		ldrb	r3, [r6, #60]	@ zero_extendqisi2
 1850 0126 012B     		cmp	r3, #1
 1851 0128 1DD1     		bne	.L98
 680:HALLIB/Src/stm32f7xx_hal_nand.c ****       
 1852              		.loc 1 680 0
 1853 012a FFF7FEFF 		bl	HAL_GetTick
 1854              	.LVL115:
ARM GAS  /tmp/ccwQVsCz.s 			page 75


 1855 012e 8246     		mov	r10, r0
 1856              	.LVL116:
 683:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 1857              		.loc 1 683 0
 1858 0130 06E0     		b	.L96
 1859              	.LVL117:
 1860              	.L97:
 685:HALLIB/Src/stm32f7xx_hal_nand.c ****         {
 1861              		.loc 1 685 0
 1862 0132 FFF7FEFF 		bl	HAL_GetTick
 1863              	.LVL118:
 1864 0136 CAEB0000 		rsb	r0, r10, r0
 1865 013a B0F1807F 		cmp	r0, #16777216
 1866 013e 2DD8     		bhi	.L104
 1867              	.L96:
 683:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 1868              		.loc 1 683 0
 1869 0140 3046     		mov	r0, r6
 1870 0142 FFF7FEFF 		bl	HAL_NAND_Read_Status
 1871              	.LVL119:
 1872 0146 4028     		cmp	r0, #64
 1873 0148 F3D1     		bne	.L97
 692:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 1874              		.loc 1 692 0
 1875 014a 0022     		movs	r2, #0
 1876 014c 154B     		ldr	r3, .L106
 1877 014e 1A70     		strb	r2, [r3]
 1878              	.LBB428:
 1879              	.LBB429:
 1880              		.loc 2 429 0
 1881              		.syntax unified
 1882              	@ 429 "CORE/cmsis_gcc.h" 1
 1883 0150 BFF34F8F 		dsb 0xF
 1884              	@ 0 "" 2
 1885              		.thumb
 1886              		.syntax unified
 1887 0154 07E0     		b	.L98
 1888              	.LVL120:
 1889              	.L99:
 1890              	.LBE429:
 1891              	.LBE428:
 699:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 1892              		.loc 1 699 0 discriminator 2
 1893 0156 4FF00043 		mov	r3, #-2147483648
 1894 015a 1B88     		ldrh	r3, [r3]
 1895 015c 2380     		strh	r3, [r4]	@ movhi
 697:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 1896              		.loc 1 697 0 discriminator 2
 1897 015e 019B     		ldr	r3, [sp, #4]
 1898 0160 0133     		adds	r3, r3, #1
 1899 0162 0193     		str	r3, [sp, #4]
 699:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 1900              		.loc 1 699 0 discriminator 2
 1901 0164 0234     		adds	r4, r4, #2
 1902              	.LVL121:
 1903              	.L98:
 697:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
ARM GAS  /tmp/ccwQVsCz.s 			page 76


 1904              		.loc 1 697 0 discriminator 1
 1905 0166 019B     		ldr	r3, [sp, #4]
 1906 0168 9D42     		cmp	r5, r3
 1907 016a F4D8     		bhi	.L99
 1908              	.LVL122:
 706:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 1909              		.loc 1 706 0
 1910 016c 08F1FF38 		add	r8, r8, #-1
 1911              	.LVL123:
 709:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 1912              		.loc 1 709 0
 1913 0170 0137     		adds	r7, r7, #1
 1914              	.LVL124:
 1915              	.L90:
 613:HALLIB/Src/stm32f7xx_hal_nand.c ****   {	   
 1916              		.loc 1 613 0
 1917 0172 B8F1000F 		cmp	r8, #0
 1918 0176 06D0     		beq	.L100
 613:HALLIB/Src/stm32f7xx_hal_nand.c ****   {	   
 1919              		.loc 1 613 0 is_stmt 0 discriminator 1
 1920 0178 F26A     		ldr	r2, [r6, #44]
 1921 017a 336B     		ldr	r3, [r6, #48]
 1922 017c 03FB02F3 		mul	r3, r3, r2
 1923 0180 9F42     		cmp	r7, r3
 1924 0182 FFF462AF 		bcc	.L101
 1925              	.L100:
 713:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1926              		.loc 1 713 0 is_stmt 1
 1927 0186 0123     		movs	r3, #1
 1928 0188 86F82130 		strb	r3, [r6, #33]
 716:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 1929              		.loc 1 716 0
 1930 018c 0020     		movs	r0, #0
 1931 018e 86F82000 		strb	r0, [r6, #32]
 718:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 1932              		.loc 1 718 0
 1933 0192 04E0     		b	.L89
 1934              	.LVL125:
 1935              	.L102:
 595:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 1936              		.loc 1 595 0
 1937 0194 0220     		movs	r0, #2
 1938              	.LVL126:
 1939 0196 02E0     		b	.L89
 1940              	.LVL127:
 1941              	.L103:
 600:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 1942              		.loc 1 600 0
 1943 0198 0220     		movs	r0, #2
 1944              	.LVL128:
 1945 019a 00E0     		b	.L89
 1946              	.LVL129:
 1947              	.L104:
 687:HALLIB/Src/stm32f7xx_hal_nand.c ****         }
 1948              		.loc 1 687 0
 1949 019c 0320     		movs	r0, #3
 1950              	.LVL130:
ARM GAS  /tmp/ccwQVsCz.s 			page 77


 1951              	.L89:
 719:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 1952              		.loc 1 719 0
 1953 019e 02B0     		add	sp, sp, #8
 1954              	.LCFI20:
 1955              		.cfi_def_cfa_offset 32
 1956              		@ sp needed
 1957 01a0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1958              	.LVL131:
 1959              	.L107:
 1960              		.align	2
 1961              	.L106:
 1962 01a4 00000180 		.word	-2147418112
 1963 01a8 00000280 		.word	-2147352576
 1964              		.cfi_endproc
 1965              	.LFE146:
 1967              		.section	.text.HAL_NAND_Write_Page_8b,"ax",%progbits
 1968              		.align	2
 1969              		.global	HAL_NAND_Write_Page_8b
 1970              		.thumb
 1971              		.thumb_func
 1973              	HAL_NAND_Write_Page_8b:
 1974              	.LFB147:
 731:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0;
 1975              		.loc 1 731 0
 1976              		.cfi_startproc
 1977              		@ args = 0, pretend = 0, frame = 8
 1978              		@ frame_needed = 0, uses_anonymous_args = 0
 1979              	.LVL132:
 1980 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1981              	.LCFI21:
 1982              		.cfi_def_cfa_offset 28
 1983              		.cfi_offset 4, -28
 1984              		.cfi_offset 5, -24
 1985              		.cfi_offset 6, -20
 1986              		.cfi_offset 7, -16
 1987              		.cfi_offset 8, -12
 1988              		.cfi_offset 9, -8
 1989              		.cfi_offset 14, -4
 1990 0004 83B0     		sub	sp, sp, #12
 1991              	.LCFI22:
 1992              		.cfi_def_cfa_offset 40
 1993 0006 1F46     		mov	r7, r3
 732:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0;
 1994              		.loc 1 732 0
 1995 0008 0023     		movs	r3, #0
 1996              	.LVL133:
 1997 000a 0193     		str	r3, [sp, #4]
 1998              	.LVL134:
 737:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 1999              		.loc 1 737 0
 2000 000c 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2001 0010 012B     		cmp	r3, #1
 2002 0012 00F0BA80 		beq	.L121
 2003 0016 0546     		mov	r5, r0
 2004 0018 1446     		mov	r4, r2
 737:HALLIB/Src/stm32f7xx_hal_nand.c **** 
ARM GAS  /tmp/ccwQVsCz.s 			page 78


 2005              		.loc 1 737 0 is_stmt 0 discriminator 2
 2006 001a 0123     		movs	r3, #1
 2007 001c 80F82030 		strb	r3, [r0, #32]
 740:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 2008              		.loc 1 740 0 is_stmt 1 discriminator 2
 2009 0020 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 2010 0024 DBB2     		uxtb	r3, r3
 2011 0026 022B     		cmp	r3, #2
 2012 0028 00F0B180 		beq	.L122
 2013              	.LVL135:
 749:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2014              		.loc 1 749 0
 2015 002c 0223     		movs	r3, #2
 2016 002e 80F82130 		strb	r3, [r0, #33]
 752:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2017              		.loc 1 752 0
 2018 0032 0888     		ldrh	r0, [r1]
 2019              	.LVL136:
 2020 0034 8B88     		ldrh	r3, [r1, #4]
 2021 0036 4A88     		ldrh	r2, [r1, #2]
 2022              	.LVL137:
 2023 0038 AE6B     		ldr	r6, [r5, #56]
 2024 003a 06FB0233 		mla	r3, r6, r2, r3
 2025 003e EE6A     		ldr	r6, [r5, #44]
 2026 0040 06FB0306 		mla	r6, r6, r3, r0
 2027              	.LVL138:
 734:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2028              		.loc 1 734 0
 2029 0044 4FF00008 		mov	r8, #0
 755:HALLIB/Src/stm32f7xx_hal_nand.c ****   {  
 2030              		.loc 1 755 0
 2031 0048 90E0     		b	.L110
 2032              	.LVL139:
 2033              	.L120:
 758:HALLIB/Src/stm32f7xx_hal_nand.c ****  
 2034              		.loc 1 758 0
 2035 004a 08F10108 		add	r8, r8, #1
 2036              	.LVL140:
 2037 004e 686A     		ldr	r0, [r5, #36]
 2038 0050 00FB08F0 		mul	r0, r0, r8
 2039              	.LVL141:
 761:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 2040              		.loc 1 761 0
 2041 0054 514B     		ldr	r3, .L125
 2042 0056 0022     		movs	r2, #0
 2043 0058 1A70     		strb	r2, [r3]
 2044              	.LBB430:
 2045              	.LBB431:
 2046              		.loc 2 429 0
 2047              		.syntax unified
 2048              	@ 429 "CORE/cmsis_gcc.h" 1
 2049 005a BFF34F8F 		dsb 0xF
 2050              	@ 0 "" 2
 2051              		.thumb
 2052              		.syntax unified
 2053              	.LBE431:
 2054              	.LBE430:
ARM GAS  /tmp/ccwQVsCz.s 			page 79


 763:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 2055              		.loc 1 763 0
 2056 005e 8022     		movs	r2, #128
 2057 0060 1A70     		strb	r2, [r3]
 2058              	.LBB432:
 2059              	.LBB433:
 2060              		.loc 2 429 0
 2061              		.syntax unified
 2062              	@ 429 "CORE/cmsis_gcc.h" 1
 2063 0062 BFF34F8F 		dsb 0xF
 2064              	@ 0 "" 2
 2065              		.thumb
 2066              		.syntax unified
 2067              	.LBE433:
 2068              	.LBE432:
 767:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 2069              		.loc 1 767 0
 2070 0066 6B6A     		ldr	r3, [r5, #36]
 2071 0068 B3F5007F 		cmp	r3, #512
 2072 006c 29D8     		bhi	.L111
 769:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 2073              		.loc 1 769 0
 2074 006e EA6A     		ldr	r2, [r5, #44]
 2075 0070 2B6B     		ldr	r3, [r5, #48]
 2076 0072 03FB02F3 		mul	r3, r3, r2
 2077 0076 B3F5803F 		cmp	r3, #65536
 2078 007a 0ED2     		bcs	.L112
 771:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2079              		.loc 1 771 0
 2080 007c 484B     		ldr	r3, .L125+4
 2081 007e 0022     		movs	r2, #0
 2082 0080 1A70     		strb	r2, [r3]
 2083              	.LBB434:
 2084              	.LBB435:
 2085              		.loc 2 429 0
 2086              		.syntax unified
 2087              	@ 429 "CORE/cmsis_gcc.h" 1
 2088 0082 BFF34F8F 		dsb 0xF
 2089              	@ 0 "" 2
 2090              		.thumb
 2091              		.syntax unified
 2092              	.LBE435:
 2093              	.LBE434:
 773:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2094              		.loc 1 773 0
 2095 0086 F2B2     		uxtb	r2, r6
 2096 0088 1A70     		strb	r2, [r3]
 2097              	.LBB436:
 2098              	.LBB437:
 2099              		.loc 2 429 0
 2100              		.syntax unified
 2101              	@ 429 "CORE/cmsis_gcc.h" 1
 2102 008a BFF34F8F 		dsb 0xF
 2103              	@ 0 "" 2
 2104              		.thumb
 2105              		.syntax unified
 2106              	.LBE437:
ARM GAS  /tmp/ccwQVsCz.s 			page 80


 2107              	.LBE436:
 775:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2108              		.loc 1 775 0
 2109 008e C6F30722 		ubfx	r2, r6, #8, #8
 2110 0092 1A70     		strb	r2, [r3]
 2111              	.LBB438:
 2112              	.LBB439:
 2113              		.loc 2 429 0
 2114              		.syntax unified
 2115              	@ 429 "CORE/cmsis_gcc.h" 1
 2116 0094 BFF34F8F 		dsb 0xF
 2117              	@ 0 "" 2
 2118              		.thumb
 2119              		.syntax unified
 2120 0098 4EE0     		b	.L115
 2121              	.L112:
 2122              	.LBE439:
 2123              	.LBE438:
 780:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2124              		.loc 1 780 0
 2125 009a 414B     		ldr	r3, .L125+4
 2126 009c 0022     		movs	r2, #0
 2127 009e 1A70     		strb	r2, [r3]
 2128              	.LBB440:
 2129              	.LBB441:
 2130              		.loc 2 429 0
 2131              		.syntax unified
 2132              	@ 429 "CORE/cmsis_gcc.h" 1
 2133 00a0 BFF34F8F 		dsb 0xF
 2134              	@ 0 "" 2
 2135              		.thumb
 2136              		.syntax unified
 2137              	.LBE441:
 2138              	.LBE440:
 782:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2139              		.loc 1 782 0
 2140 00a4 F2B2     		uxtb	r2, r6
 2141 00a6 1A70     		strb	r2, [r3]
 2142              	.LBB442:
 2143              	.LBB443:
 2144              		.loc 2 429 0
 2145              		.syntax unified
 2146              	@ 429 "CORE/cmsis_gcc.h" 1
 2147 00a8 BFF34F8F 		dsb 0xF
 2148              	@ 0 "" 2
 2149              		.thumb
 2150              		.syntax unified
 2151              	.LBE443:
 2152              	.LBE442:
 784:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2153              		.loc 1 784 0
 2154 00ac C6F30722 		ubfx	r2, r6, #8, #8
 2155 00b0 1A70     		strb	r2, [r3]
 2156              	.LBB444:
 2157              	.LBB445:
 2158              		.loc 2 429 0
 2159              		.syntax unified
ARM GAS  /tmp/ccwQVsCz.s 			page 81


 2160              	@ 429 "CORE/cmsis_gcc.h" 1
 2161 00b2 BFF34F8F 		dsb 0xF
 2162              	@ 0 "" 2
 2163              		.thumb
 2164              		.syntax unified
 2165              	.LBE445:
 2166              	.LBE444:
 786:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2167              		.loc 1 786 0
 2168 00b6 C6F30742 		ubfx	r2, r6, #16, #8
 2169 00ba 1A70     		strb	r2, [r3]
 2170              	.LBB446:
 2171              	.LBB447:
 2172              		.loc 2 429 0
 2173              		.syntax unified
 2174              	@ 429 "CORE/cmsis_gcc.h" 1
 2175 00bc BFF34F8F 		dsb 0xF
 2176              	@ 0 "" 2
 2177              		.thumb
 2178              		.syntax unified
 2179 00c0 3AE0     		b	.L115
 2180              	.L111:
 2181              	.LBE447:
 2182              	.LBE446:
 792:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 2183              		.loc 1 792 0
 2184 00c2 EA6A     		ldr	r2, [r5, #44]
 2185 00c4 2B6B     		ldr	r3, [r5, #48]
 2186 00c6 03FB02F3 		mul	r3, r3, r2
 2187 00ca B3F5803F 		cmp	r3, #65536
 2188 00ce 11D2     		bcs	.L114
 794:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2189              		.loc 1 794 0
 2190 00d0 334B     		ldr	r3, .L125+4
 2191 00d2 0022     		movs	r2, #0
 2192 00d4 1A70     		strb	r2, [r3]
 2193              	.LBB448:
 2194              	.LBB449:
 2195              		.loc 2 429 0
 2196              		.syntax unified
 2197              	@ 429 "CORE/cmsis_gcc.h" 1
 2198 00d6 BFF34F8F 		dsb 0xF
 2199              	@ 0 "" 2
 2200              		.thumb
 2201              		.syntax unified
 2202              	.LBE449:
 2203              	.LBE448:
 796:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2204              		.loc 1 796 0
 2205 00da 1A70     		strb	r2, [r3]
 2206              	.LBB450:
 2207              	.LBB451:
 2208              		.loc 2 429 0
 2209              		.syntax unified
 2210              	@ 429 "CORE/cmsis_gcc.h" 1
 2211 00dc BFF34F8F 		dsb 0xF
 2212              	@ 0 "" 2
ARM GAS  /tmp/ccwQVsCz.s 			page 82


 2213              		.thumb
 2214              		.syntax unified
 2215              	.LBE451:
 2216              	.LBE450:
 798:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2217              		.loc 1 798 0
 2218 00e0 F2B2     		uxtb	r2, r6
 2219 00e2 1A70     		strb	r2, [r3]
 2220              	.LBB452:
 2221              	.LBB453:
 2222              		.loc 2 429 0
 2223              		.syntax unified
 2224              	@ 429 "CORE/cmsis_gcc.h" 1
 2225 00e4 BFF34F8F 		dsb 0xF
 2226              	@ 0 "" 2
 2227              		.thumb
 2228              		.syntax unified
 2229              	.LBE453:
 2230              	.LBE452:
 800:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2231              		.loc 1 800 0
 2232 00e8 C6F30722 		ubfx	r2, r6, #8, #8
 2233 00ec 1A70     		strb	r2, [r3]
 2234              	.LBB454:
 2235              	.LBB455:
 2236              		.loc 2 429 0
 2237              		.syntax unified
 2238              	@ 429 "CORE/cmsis_gcc.h" 1
 2239 00ee BFF34F8F 		dsb 0xF
 2240              	@ 0 "" 2
 2241              		.thumb
 2242              		.syntax unified
 2243 00f2 21E0     		b	.L115
 2244              	.L114:
 2245              	.LBE455:
 2246              	.LBE454:
 805:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2247              		.loc 1 805 0
 2248 00f4 2A4B     		ldr	r3, .L125+4
 2249 00f6 0022     		movs	r2, #0
 2250 00f8 1A70     		strb	r2, [r3]
 2251              	.LBB456:
 2252              	.LBB457:
 2253              		.loc 2 429 0
 2254              		.syntax unified
 2255              	@ 429 "CORE/cmsis_gcc.h" 1
 2256 00fa BFF34F8F 		dsb 0xF
 2257              	@ 0 "" 2
 2258              		.thumb
 2259              		.syntax unified
 2260              	.LBE457:
 2261              	.LBE456:
 807:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2262              		.loc 1 807 0
 2263 00fe 1A70     		strb	r2, [r3]
 2264              	.LBB458:
 2265              	.LBB459:
ARM GAS  /tmp/ccwQVsCz.s 			page 83


 2266              		.loc 2 429 0
 2267              		.syntax unified
 2268              	@ 429 "CORE/cmsis_gcc.h" 1
 2269 0100 BFF34F8F 		dsb 0xF
 2270              	@ 0 "" 2
 2271              		.thumb
 2272              		.syntax unified
 2273              	.LBE459:
 2274              	.LBE458:
 809:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2275              		.loc 1 809 0
 2276 0104 F2B2     		uxtb	r2, r6
 2277 0106 1A70     		strb	r2, [r3]
 2278              	.LBB460:
 2279              	.LBB461:
 2280              		.loc 2 429 0
 2281              		.syntax unified
 2282              	@ 429 "CORE/cmsis_gcc.h" 1
 2283 0108 BFF34F8F 		dsb 0xF
 2284              	@ 0 "" 2
 2285              		.thumb
 2286              		.syntax unified
 2287              	.LBE461:
 2288              	.LBE460:
 811:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2289              		.loc 1 811 0
 2290 010c C6F30722 		ubfx	r2, r6, #8, #8
 2291 0110 1A70     		strb	r2, [r3]
 2292              	.LBB462:
 2293              	.LBB463:
 2294              		.loc 2 429 0
 2295              		.syntax unified
 2296              	@ 429 "CORE/cmsis_gcc.h" 1
 2297 0112 BFF34F8F 		dsb 0xF
 2298              	@ 0 "" 2
 2299              		.thumb
 2300              		.syntax unified
 2301              	.LBE463:
 2302              	.LBE462:
 813:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2303              		.loc 1 813 0
 2304 0116 C6F30742 		ubfx	r2, r6, #16, #8
 2305 011a 1A70     		strb	r2, [r3]
 2306              	.LBB464:
 2307              	.LBB465:
 2308              		.loc 2 429 0
 2309              		.syntax unified
 2310              	@ 429 "CORE/cmsis_gcc.h" 1
 2311 011c BFF34F8F 		dsb 0xF
 2312              	@ 0 "" 2
 2313              		.thumb
 2314              		.syntax unified
 2315 0120 0AE0     		b	.L115
 2316              	.L116:
 2317              	.LBE465:
 2318              	.LBE464:
 821:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
ARM GAS  /tmp/ccwQVsCz.s 			page 84


 2319              		.loc 1 821 0 discriminator 2
 2320 0122 621C     		adds	r2, r4, #1
 2321              	.LVL142:
 2322 0124 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 2323 0126 4FF00043 		mov	r3, #-2147483648
 2324 012a 1970     		strb	r1, [r3]
 2325              	.LBB466:
 2326              	.LBB467:
 2327              		.loc 2 429 0 discriminator 2
 2328              		.syntax unified
 2329              	@ 429 "CORE/cmsis_gcc.h" 1
 2330 012c BFF34F8F 		dsb 0xF
 2331              	@ 0 "" 2
 2332              		.thumb
 2333              		.syntax unified
 2334              	.LBE467:
 2335              	.LBE466:
 819:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 2336              		.loc 1 819 0 discriminator 2
 2337 0130 019B     		ldr	r3, [sp, #4]
 2338 0132 0133     		adds	r3, r3, #1
 2339 0134 0193     		str	r3, [sp, #4]
 821:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 2340              		.loc 1 821 0 discriminator 2
 2341 0136 1446     		mov	r4, r2
 2342              	.LVL143:
 2343              	.L115:
 819:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 2344              		.loc 1 819 0 discriminator 1
 2345 0138 019B     		ldr	r3, [sp, #4]
 2346 013a 9842     		cmp	r0, r3
 2347 013c F1D8     		bhi	.L116
 825:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 2348              		.loc 1 825 0
 2349 013e 1022     		movs	r2, #16
 2350 0140 164B     		ldr	r3, .L125
 2351 0142 1A70     		strb	r2, [r3]
 2352              	.LBB468:
 2353              	.LBB469:
 2354              		.loc 2 429 0
 2355              		.syntax unified
 2356              	@ 429 "CORE/cmsis_gcc.h" 1
 2357 0144 BFF34F8F 		dsb 0xF
 2358              	@ 0 "" 2
 2359              		.thumb
 2360              		.syntax unified
 2361              	.LBE469:
 2362              	.LBE468:
 829:HALLIB/Src/stm32f7xx_hal_nand.c **** 	
 2363              		.loc 1 829 0
 2364 0148 FFF7FEFF 		bl	HAL_GetTick
 2365              	.LVL144:
 2366 014c 8146     		mov	r9, r0
 2367              	.LVL145:
 832:HALLIB/Src/stm32f7xx_hal_nand.c ****     {  
 2368              		.loc 1 832 0
 2369 014e 06E0     		b	.L117
ARM GAS  /tmp/ccwQVsCz.s 			page 85


 2370              	.LVL146:
 2371              	.L118:
 834:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 2372              		.loc 1 834 0
 2373 0150 FFF7FEFF 		bl	HAL_GetTick
 2374              	.LVL147:
 2375 0154 C9EB0000 		rsb	r0, r9, r0
 2376 0158 B0F1807F 		cmp	r0, #16777216
 2377 015c 19D8     		bhi	.L123
 2378              	.L117:
 832:HALLIB/Src/stm32f7xx_hal_nand.c ****     {  
 2379              		.loc 1 832 0
 2380 015e 2846     		mov	r0, r5
 2381 0160 FFF7FEFF 		bl	HAL_NAND_Read_Status
 2382              	.LVL148:
 2383 0164 4028     		cmp	r0, #64
 2384 0166 F3D1     		bne	.L118
 2385              	.LVL149:
 844:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 2386              		.loc 1 844 0
 2387 0168 013F     		subs	r7, r7, #1
 2388              	.LVL150:
 847:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 2389              		.loc 1 847 0
 2390 016a 0136     		adds	r6, r6, #1
 2391              	.LVL151:
 2392              	.L110:
 755:HALLIB/Src/stm32f7xx_hal_nand.c ****   {  
 2393              		.loc 1 755 0
 2394 016c 37B1     		cbz	r7, .L119
 755:HALLIB/Src/stm32f7xx_hal_nand.c ****   {  
 2395              		.loc 1 755 0 is_stmt 0 discriminator 1
 2396 016e EA6A     		ldr	r2, [r5, #44]
 2397 0170 2B6B     		ldr	r3, [r5, #48]
 2398 0172 03FB02F3 		mul	r3, r3, r2
 2399 0176 9E42     		cmp	r6, r3
 2400 0178 FFF467AF 		bcc	.L120
 2401              	.L119:
 851:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2402              		.loc 1 851 0 is_stmt 1
 2403 017c 0123     		movs	r3, #1
 2404 017e 85F82130 		strb	r3, [r5, #33]
 854:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2405              		.loc 1 854 0
 2406 0182 0020     		movs	r0, #0
 2407 0184 85F82000 		strb	r0, [r5, #32]
 856:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 2408              		.loc 1 856 0
 2409 0188 04E0     		b	.L109
 2410              	.LVL152:
 2411              	.L121:
 737:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 2412              		.loc 1 737 0
 2413 018a 0220     		movs	r0, #2
 2414              	.LVL153:
 2415 018c 02E0     		b	.L109
 2416              	.LVL154:
ARM GAS  /tmp/ccwQVsCz.s 			page 86


 2417              	.L122:
 742:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 2418              		.loc 1 742 0
 2419 018e 0220     		movs	r0, #2
 2420              	.LVL155:
 2421 0190 00E0     		b	.L109
 2422              	.LVL156:
 2423              	.L123:
 836:HALLIB/Src/stm32f7xx_hal_nand.c ****       } 
 2424              		.loc 1 836 0
 2425 0192 0320     		movs	r0, #3
 2426              	.LVL157:
 2427              	.L109:
 857:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 2428              		.loc 1 857 0
 2429 0194 03B0     		add	sp, sp, #12
 2430              	.LCFI23:
 2431              		.cfi_def_cfa_offset 28
 2432              		@ sp needed
 2433 0196 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2434              	.LVL158:
 2435              	.L126:
 2436 019a 00BF     		.align	2
 2437              	.L125:
 2438 019c 00000180 		.word	-2147418112
 2439 01a0 00000280 		.word	-2147352576
 2440              		.cfi_endproc
 2441              	.LFE147:
 2443              		.section	.text.HAL_NAND_Write_Page_16b,"ax",%progbits
 2444              		.align	2
 2445              		.global	HAL_NAND_Write_Page_16b
 2446              		.thumb
 2447              		.thumb_func
 2449              	HAL_NAND_Write_Page_16b:
 2450              	.LFB148:
 869:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0;
 2451              		.loc 1 869 0
 2452              		.cfi_startproc
 2453              		@ args = 0, pretend = 0, frame = 8
 2454              		@ frame_needed = 0, uses_anonymous_args = 0
 2455              	.LVL159:
 2456 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2457              	.LCFI24:
 2458              		.cfi_def_cfa_offset 28
 2459              		.cfi_offset 4, -28
 2460              		.cfi_offset 5, -24
 2461              		.cfi_offset 6, -20
 2462              		.cfi_offset 7, -16
 2463              		.cfi_offset 8, -12
 2464              		.cfi_offset 9, -8
 2465              		.cfi_offset 14, -4
 2466 0004 83B0     		sub	sp, sp, #12
 2467              	.LCFI25:
 2468              		.cfi_def_cfa_offset 40
 2469 0006 1F46     		mov	r7, r3
 870:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0;
 2470              		.loc 1 870 0
ARM GAS  /tmp/ccwQVsCz.s 			page 87


 2471 0008 0023     		movs	r3, #0
 2472              	.LVL160:
 2473 000a 0193     		str	r3, [sp, #4]
 2474              	.LVL161:
 875:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 2475              		.loc 1 875 0
 2476 000c 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2477 0010 012B     		cmp	r3, #1
 2478 0012 00F0BA80 		beq	.L140
 2479 0016 0546     		mov	r5, r0
 2480 0018 1446     		mov	r4, r2
 875:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 2481              		.loc 1 875 0 is_stmt 0 discriminator 2
 2482 001a 0123     		movs	r3, #1
 2483 001c 80F82030 		strb	r3, [r0, #32]
 878:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 2484              		.loc 1 878 0 is_stmt 1 discriminator 2
 2485 0020 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 2486 0024 DBB2     		uxtb	r3, r3
 2487 0026 022B     		cmp	r3, #2
 2488 0028 00F0B180 		beq	.L141
 2489              	.LVL162:
 887:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2490              		.loc 1 887 0
 2491 002c 0223     		movs	r3, #2
 2492 002e 80F82130 		strb	r3, [r0, #33]
 890:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2493              		.loc 1 890 0
 2494 0032 0888     		ldrh	r0, [r1]
 2495              	.LVL163:
 2496 0034 8B88     		ldrh	r3, [r1, #4]
 2497 0036 4A88     		ldrh	r2, [r1, #2]
 2498              	.LVL164:
 2499 0038 AE6B     		ldr	r6, [r5, #56]
 2500 003a 06FB0233 		mla	r3, r6, r2, r3
 2501 003e EE6A     		ldr	r6, [r5, #44]
 2502 0040 06FB0306 		mla	r6, r6, r3, r0
 2503              	.LVL165:
 872:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2504              		.loc 1 872 0
 2505 0044 4FF00008 		mov	r8, #0
 893:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 2506              		.loc 1 893 0
 2507 0048 90E0     		b	.L129
 2508              	.LVL166:
 2509              	.L139:
 896:HALLIB/Src/stm32f7xx_hal_nand.c ****  
 2510              		.loc 1 896 0
 2511 004a 08F10108 		add	r8, r8, #1
 2512              	.LVL167:
 2513 004e 686A     		ldr	r0, [r5, #36]
 2514 0050 00FB08F0 		mul	r0, r0, r8
 2515              	.LVL168:
 899:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 2516              		.loc 1 899 0
 2517 0054 514B     		ldr	r3, .L144
 2518 0056 0022     		movs	r2, #0
ARM GAS  /tmp/ccwQVsCz.s 			page 88


 2519 0058 1A70     		strb	r2, [r3]
 2520              	.LBB470:
 2521              	.LBB471:
 2522              		.loc 2 429 0
 2523              		.syntax unified
 2524              	@ 429 "CORE/cmsis_gcc.h" 1
 2525 005a BFF34F8F 		dsb 0xF
 2526              	@ 0 "" 2
 2527              		.thumb
 2528              		.syntax unified
 2529              	.LBE471:
 2530              	.LBE470:
 901:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 2531              		.loc 1 901 0
 2532 005e 8022     		movs	r2, #128
 2533 0060 1A70     		strb	r2, [r3]
 2534              	.LBB472:
 2535              	.LBB473:
 2536              		.loc 2 429 0
 2537              		.syntax unified
 2538              	@ 429 "CORE/cmsis_gcc.h" 1
 2539 0062 BFF34F8F 		dsb 0xF
 2540              	@ 0 "" 2
 2541              		.thumb
 2542              		.syntax unified
 2543              	.LBE473:
 2544              	.LBE472:
 905:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 2545              		.loc 1 905 0
 2546 0066 6B6A     		ldr	r3, [r5, #36]
 2547 0068 B3F5007F 		cmp	r3, #512
 2548 006c 29D8     		bhi	.L130
 907:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 2549              		.loc 1 907 0
 2550 006e EA6A     		ldr	r2, [r5, #44]
 2551 0070 2B6B     		ldr	r3, [r5, #48]
 2552 0072 03FB02F3 		mul	r3, r3, r2
 2553 0076 B3F5803F 		cmp	r3, #65536
 2554 007a 0ED2     		bcs	.L131
 909:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2555              		.loc 1 909 0
 2556 007c 484B     		ldr	r3, .L144+4
 2557 007e 0022     		movs	r2, #0
 2558 0080 1A70     		strb	r2, [r3]
 2559              	.LBB474:
 2560              	.LBB475:
 2561              		.loc 2 429 0
 2562              		.syntax unified
 2563              	@ 429 "CORE/cmsis_gcc.h" 1
 2564 0082 BFF34F8F 		dsb 0xF
 2565              	@ 0 "" 2
 2566              		.thumb
 2567              		.syntax unified
 2568              	.LBE475:
 2569              	.LBE474:
 911:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2570              		.loc 1 911 0
ARM GAS  /tmp/ccwQVsCz.s 			page 89


 2571 0086 F2B2     		uxtb	r2, r6
 2572 0088 1A70     		strb	r2, [r3]
 2573              	.LBB476:
 2574              	.LBB477:
 2575              		.loc 2 429 0
 2576              		.syntax unified
 2577              	@ 429 "CORE/cmsis_gcc.h" 1
 2578 008a BFF34F8F 		dsb 0xF
 2579              	@ 0 "" 2
 2580              		.thumb
 2581              		.syntax unified
 2582              	.LBE477:
 2583              	.LBE476:
 913:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2584              		.loc 1 913 0
 2585 008e C6F30722 		ubfx	r2, r6, #8, #8
 2586 0092 1A70     		strb	r2, [r3]
 2587              	.LBB478:
 2588              	.LBB479:
 2589              		.loc 2 429 0
 2590              		.syntax unified
 2591              	@ 429 "CORE/cmsis_gcc.h" 1
 2592 0094 BFF34F8F 		dsb 0xF
 2593              	@ 0 "" 2
 2594              		.thumb
 2595              		.syntax unified
 2596 0098 4EE0     		b	.L134
 2597              	.L131:
 2598              	.LBE479:
 2599              	.LBE478:
 918:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2600              		.loc 1 918 0
 2601 009a 414B     		ldr	r3, .L144+4
 2602 009c 0022     		movs	r2, #0
 2603 009e 1A70     		strb	r2, [r3]
 2604              	.LBB480:
 2605              	.LBB481:
 2606              		.loc 2 429 0
 2607              		.syntax unified
 2608              	@ 429 "CORE/cmsis_gcc.h" 1
 2609 00a0 BFF34F8F 		dsb 0xF
 2610              	@ 0 "" 2
 2611              		.thumb
 2612              		.syntax unified
 2613              	.LBE481:
 2614              	.LBE480:
 920:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2615              		.loc 1 920 0
 2616 00a4 F2B2     		uxtb	r2, r6
 2617 00a6 1A70     		strb	r2, [r3]
 2618              	.LBB482:
 2619              	.LBB483:
 2620              		.loc 2 429 0
 2621              		.syntax unified
 2622              	@ 429 "CORE/cmsis_gcc.h" 1
 2623 00a8 BFF34F8F 		dsb 0xF
 2624              	@ 0 "" 2
ARM GAS  /tmp/ccwQVsCz.s 			page 90


 2625              		.thumb
 2626              		.syntax unified
 2627              	.LBE483:
 2628              	.LBE482:
 922:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2629              		.loc 1 922 0
 2630 00ac C6F30722 		ubfx	r2, r6, #8, #8
 2631 00b0 1A70     		strb	r2, [r3]
 2632              	.LBB484:
 2633              	.LBB485:
 2634              		.loc 2 429 0
 2635              		.syntax unified
 2636              	@ 429 "CORE/cmsis_gcc.h" 1
 2637 00b2 BFF34F8F 		dsb 0xF
 2638              	@ 0 "" 2
 2639              		.thumb
 2640              		.syntax unified
 2641              	.LBE485:
 2642              	.LBE484:
 924:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2643              		.loc 1 924 0
 2644 00b6 C6F30742 		ubfx	r2, r6, #16, #8
 2645 00ba 1A70     		strb	r2, [r3]
 2646              	.LBB486:
 2647              	.LBB487:
 2648              		.loc 2 429 0
 2649              		.syntax unified
 2650              	@ 429 "CORE/cmsis_gcc.h" 1
 2651 00bc BFF34F8F 		dsb 0xF
 2652              	@ 0 "" 2
 2653              		.thumb
 2654              		.syntax unified
 2655 00c0 3AE0     		b	.L134
 2656              	.L130:
 2657              	.LBE487:
 2658              	.LBE486:
 930:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 2659              		.loc 1 930 0
 2660 00c2 EA6A     		ldr	r2, [r5, #44]
 2661 00c4 2B6B     		ldr	r3, [r5, #48]
 2662 00c6 03FB02F3 		mul	r3, r3, r2
 2663 00ca B3F5803F 		cmp	r3, #65536
 2664 00ce 11D2     		bcs	.L133
 932:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2665              		.loc 1 932 0
 2666 00d0 334B     		ldr	r3, .L144+4
 2667 00d2 0022     		movs	r2, #0
 2668 00d4 1A70     		strb	r2, [r3]
 2669              	.LBB488:
 2670              	.LBB489:
 2671              		.loc 2 429 0
 2672              		.syntax unified
 2673              	@ 429 "CORE/cmsis_gcc.h" 1
 2674 00d6 BFF34F8F 		dsb 0xF
 2675              	@ 0 "" 2
 2676              		.thumb
 2677              		.syntax unified
ARM GAS  /tmp/ccwQVsCz.s 			page 91


 2678              	.LBE489:
 2679              	.LBE488:
 934:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2680              		.loc 1 934 0
 2681 00da 1A70     		strb	r2, [r3]
 2682              	.LBB490:
 2683              	.LBB491:
 2684              		.loc 2 429 0
 2685              		.syntax unified
 2686              	@ 429 "CORE/cmsis_gcc.h" 1
 2687 00dc BFF34F8F 		dsb 0xF
 2688              	@ 0 "" 2
 2689              		.thumb
 2690              		.syntax unified
 2691              	.LBE491:
 2692              	.LBE490:
 936:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2693              		.loc 1 936 0
 2694 00e0 F2B2     		uxtb	r2, r6
 2695 00e2 1A70     		strb	r2, [r3]
 2696              	.LBB492:
 2697              	.LBB493:
 2698              		.loc 2 429 0
 2699              		.syntax unified
 2700              	@ 429 "CORE/cmsis_gcc.h" 1
 2701 00e4 BFF34F8F 		dsb 0xF
 2702              	@ 0 "" 2
 2703              		.thumb
 2704              		.syntax unified
 2705              	.LBE493:
 2706              	.LBE492:
 938:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2707              		.loc 1 938 0
 2708 00e8 C6F30722 		ubfx	r2, r6, #8, #8
 2709 00ec 1A70     		strb	r2, [r3]
 2710              	.LBB494:
 2711              	.LBB495:
 2712              		.loc 2 429 0
 2713              		.syntax unified
 2714              	@ 429 "CORE/cmsis_gcc.h" 1
 2715 00ee BFF34F8F 		dsb 0xF
 2716              	@ 0 "" 2
 2717              		.thumb
 2718              		.syntax unified
 2719 00f2 21E0     		b	.L134
 2720              	.L133:
 2721              	.LBE495:
 2722              	.LBE494:
 943:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2723              		.loc 1 943 0
 2724 00f4 2A4B     		ldr	r3, .L144+4
 2725 00f6 0022     		movs	r2, #0
 2726 00f8 1A70     		strb	r2, [r3]
 2727              	.LBB496:
 2728              	.LBB497:
 2729              		.loc 2 429 0
 2730              		.syntax unified
ARM GAS  /tmp/ccwQVsCz.s 			page 92


 2731              	@ 429 "CORE/cmsis_gcc.h" 1
 2732 00fa BFF34F8F 		dsb 0xF
 2733              	@ 0 "" 2
 2734              		.thumb
 2735              		.syntax unified
 2736              	.LBE497:
 2737              	.LBE496:
 945:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2738              		.loc 1 945 0
 2739 00fe 1A70     		strb	r2, [r3]
 2740              	.LBB498:
 2741              	.LBB499:
 2742              		.loc 2 429 0
 2743              		.syntax unified
 2744              	@ 429 "CORE/cmsis_gcc.h" 1
 2745 0100 BFF34F8F 		dsb 0xF
 2746              	@ 0 "" 2
 2747              		.thumb
 2748              		.syntax unified
 2749              	.LBE499:
 2750              	.LBE498:
 947:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2751              		.loc 1 947 0
 2752 0104 F2B2     		uxtb	r2, r6
 2753 0106 1A70     		strb	r2, [r3]
 2754              	.LBB500:
 2755              	.LBB501:
 2756              		.loc 2 429 0
 2757              		.syntax unified
 2758              	@ 429 "CORE/cmsis_gcc.h" 1
 2759 0108 BFF34F8F 		dsb 0xF
 2760              	@ 0 "" 2
 2761              		.thumb
 2762              		.syntax unified
 2763              	.LBE501:
 2764              	.LBE500:
 949:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2765              		.loc 1 949 0
 2766 010c C6F30722 		ubfx	r2, r6, #8, #8
 2767 0110 1A70     		strb	r2, [r3]
 2768              	.LBB502:
 2769              	.LBB503:
 2770              		.loc 2 429 0
 2771              		.syntax unified
 2772              	@ 429 "CORE/cmsis_gcc.h" 1
 2773 0112 BFF34F8F 		dsb 0xF
 2774              	@ 0 "" 2
 2775              		.thumb
 2776              		.syntax unified
 2777              	.LBE503:
 2778              	.LBE502:
 951:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 2779              		.loc 1 951 0
 2780 0116 C6F30742 		ubfx	r2, r6, #16, #8
 2781 011a 1A70     		strb	r2, [r3]
 2782              	.LBB504:
 2783              	.LBB505:
ARM GAS  /tmp/ccwQVsCz.s 			page 93


 2784              		.loc 2 429 0
 2785              		.syntax unified
 2786              	@ 429 "CORE/cmsis_gcc.h" 1
 2787 011c BFF34F8F 		dsb 0xF
 2788              	@ 0 "" 2
 2789              		.thumb
 2790              		.syntax unified
 2791 0120 0AE0     		b	.L134
 2792              	.L135:
 2793              	.LBE505:
 2794              	.LBE504:
 959:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 2795              		.loc 1 959 0 discriminator 2
 2796 0122 A21C     		adds	r2, r4, #2
 2797              	.LVL169:
 2798 0124 2188     		ldrh	r1, [r4]
 2799 0126 4FF00043 		mov	r3, #-2147483648
 2800 012a 1980     		strh	r1, [r3]	@ movhi
 2801              	.LBB506:
 2802              	.LBB507:
 2803              		.loc 2 429 0 discriminator 2
 2804              		.syntax unified
 2805              	@ 429 "CORE/cmsis_gcc.h" 1
 2806 012c BFF34F8F 		dsb 0xF
 2807              	@ 0 "" 2
 2808              		.thumb
 2809              		.syntax unified
 2810              	.LBE507:
 2811              	.LBE506:
 957:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 2812              		.loc 1 957 0 discriminator 2
 2813 0130 019B     		ldr	r3, [sp, #4]
 2814 0132 0133     		adds	r3, r3, #1
 2815 0134 0193     		str	r3, [sp, #4]
 959:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 2816              		.loc 1 959 0 discriminator 2
 2817 0136 1446     		mov	r4, r2
 2818              	.LVL170:
 2819              	.L134:
 957:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 2820              		.loc 1 957 0 discriminator 1
 2821 0138 019B     		ldr	r3, [sp, #4]
 2822 013a 9842     		cmp	r0, r3
 2823 013c F1D8     		bhi	.L135
 963:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 2824              		.loc 1 963 0
 2825 013e 1022     		movs	r2, #16
 2826 0140 164B     		ldr	r3, .L144
 2827 0142 1A70     		strb	r2, [r3]
 2828              	.LBB508:
 2829              	.LBB509:
 2830              		.loc 2 429 0
 2831              		.syntax unified
 2832              	@ 429 "CORE/cmsis_gcc.h" 1
 2833 0144 BFF34F8F 		dsb 0xF
 2834              	@ 0 "" 2
 2835              		.thumb
ARM GAS  /tmp/ccwQVsCz.s 			page 94


 2836              		.syntax unified
 2837              	.LBE509:
 2838              	.LBE508:
 967:HALLIB/Src/stm32f7xx_hal_nand.c **** 	  
 2839              		.loc 1 967 0
 2840 0148 FFF7FEFF 		bl	HAL_GetTick
 2841              	.LVL171:
 2842 014c 8146     		mov	r9, r0
 2843              	.LVL172:
 970:HALLIB/Src/stm32f7xx_hal_nand.c ****     {  
 2844              		.loc 1 970 0
 2845 014e 06E0     		b	.L136
 2846              	.LVL173:
 2847              	.L137:
 972:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 2848              		.loc 1 972 0
 2849 0150 FFF7FEFF 		bl	HAL_GetTick
 2850              	.LVL174:
 2851 0154 C9EB0000 		rsb	r0, r9, r0
 2852 0158 B0F1807F 		cmp	r0, #16777216
 2853 015c 19D8     		bhi	.L142
 2854              	.L136:
 970:HALLIB/Src/stm32f7xx_hal_nand.c ****     {  
 2855              		.loc 1 970 0
 2856 015e 2846     		mov	r0, r5
 2857 0160 FFF7FEFF 		bl	HAL_NAND_Read_Status
 2858              	.LVL175:
 2859 0164 4028     		cmp	r0, #64
 2860 0166 F3D1     		bne	.L137
 2861              	.LVL176:
 982:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 2862              		.loc 1 982 0
 2863 0168 013F     		subs	r7, r7, #1
 2864              	.LVL177:
 985:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 2865              		.loc 1 985 0
 2866 016a 0136     		adds	r6, r6, #1
 2867              	.LVL178:
 2868              	.L129:
 893:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 2869              		.loc 1 893 0
 2870 016c 37B1     		cbz	r7, .L138
 893:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 2871              		.loc 1 893 0 is_stmt 0 discriminator 1
 2872 016e EA6A     		ldr	r2, [r5, #44]
 2873 0170 2B6B     		ldr	r3, [r5, #48]
 2874 0172 03FB02F3 		mul	r3, r3, r2
 2875 0176 9E42     		cmp	r6, r3
 2876 0178 FFF467AF 		bcc	.L139
 2877              	.L138:
 989:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2878              		.loc 1 989 0 is_stmt 1
 2879 017c 0123     		movs	r3, #1
 2880 017e 85F82130 		strb	r3, [r5, #33]
 992:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2881              		.loc 1 992 0
 2882 0182 0020     		movs	r0, #0
ARM GAS  /tmp/ccwQVsCz.s 			page 95


 2883 0184 85F82000 		strb	r0, [r5, #32]
 994:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 2884              		.loc 1 994 0
 2885 0188 04E0     		b	.L128
 2886              	.LVL179:
 2887              	.L140:
 875:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 2888              		.loc 1 875 0
 2889 018a 0220     		movs	r0, #2
 2890              	.LVL180:
 2891 018c 02E0     		b	.L128
 2892              	.LVL181:
 2893              	.L141:
 880:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 2894              		.loc 1 880 0
 2895 018e 0220     		movs	r0, #2
 2896              	.LVL182:
 2897 0190 00E0     		b	.L128
 2898              	.LVL183:
 2899              	.L142:
 974:HALLIB/Src/stm32f7xx_hal_nand.c ****       } 
 2900              		.loc 1 974 0
 2901 0192 0320     		movs	r0, #3
 2902              	.LVL184:
 2903              	.L128:
 995:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 2904              		.loc 1 995 0
 2905 0194 03B0     		add	sp, sp, #12
 2906              	.LCFI26:
 2907              		.cfi_def_cfa_offset 28
 2908              		@ sp needed
 2909 0196 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2910              	.LVL185:
 2911              	.L145:
 2912 019a 00BF     		.align	2
 2913              	.L144:
 2914 019c 00000180 		.word	-2147418112
 2915 01a0 00000280 		.word	-2147352576
 2916              		.cfi_endproc
 2917              	.LFE148:
 2919              		.section	.text.HAL_NAND_Read_SpareArea_8b,"ax",%progbits
 2920              		.align	2
 2921              		.global	HAL_NAND_Read_SpareArea_8b
 2922              		.thumb
 2923              		.thumb_func
 2925              	HAL_NAND_Read_SpareArea_8b:
 2926              	.LFB149:
1007:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0;
 2927              		.loc 1 1007 0
 2928              		.cfi_startproc
 2929              		@ args = 0, pretend = 0, frame = 8
 2930              		@ frame_needed = 0, uses_anonymous_args = 0
 2931              	.LVL186:
 2932 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2933              	.LCFI27:
 2934              		.cfi_def_cfa_offset 36
 2935              		.cfi_offset 4, -36
ARM GAS  /tmp/ccwQVsCz.s 			page 96


 2936              		.cfi_offset 5, -32
 2937              		.cfi_offset 6, -28
 2938              		.cfi_offset 7, -24
 2939              		.cfi_offset 8, -20
 2940              		.cfi_offset 9, -16
 2941              		.cfi_offset 10, -12
 2942              		.cfi_offset 11, -8
 2943              		.cfi_offset 14, -4
 2944 0004 83B0     		sub	sp, sp, #12
 2945              	.LCFI28:
 2946              		.cfi_def_cfa_offset 48
 2947 0006 9846     		mov	r8, r3
1008:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0U;
 2948              		.loc 1 1008 0
 2949 0008 0023     		movs	r3, #0
 2950              	.LVL187:
 2951 000a 0193     		str	r3, [sp, #4]
 2952              	.LVL188:
1013:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2953              		.loc 1 1013 0
 2954 000c 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2955 0010 012B     		cmp	r3, #1
 2956 0012 00F0CC80 		beq	.L160
 2957 0016 0646     		mov	r6, r0
 2958 0018 1446     		mov	r4, r2
1013:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2959              		.loc 1 1013 0 is_stmt 0 discriminator 2
 2960 001a 0123     		movs	r3, #1
 2961 001c 80F82030 		strb	r3, [r0, #32]
1016:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 2962              		.loc 1 1016 0 is_stmt 1 discriminator 2
 2963 0020 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 2964 0024 DBB2     		uxtb	r3, r3
 2965 0026 022B     		cmp	r3, #2
 2966 0028 00F0C380 		beq	.L161
 2967              	.LVL189:
1025:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2968              		.loc 1 1025 0
 2969 002c 0223     		movs	r3, #2
 2970 002e 80F82130 		strb	r3, [r0, #33]
1028:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2971              		.loc 1 1028 0
 2972 0032 0888     		ldrh	r0, [r1]
 2973              	.LVL190:
 2974 0034 8B88     		ldrh	r3, [r1, #4]
 2975 0036 4A88     		ldrh	r2, [r1, #2]
 2976              	.LVL191:
 2977 0038 B76B     		ldr	r7, [r6, #56]
 2978 003a 07FB0233 		mla	r3, r7, r2, r3
 2979 003e F76A     		ldr	r7, [r6, #44]
 2980 0040 07FB0307 		mla	r7, r7, r3, r0
 2981              	.LVL192:
1031:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 2982              		.loc 1 1031 0
 2983 0044 D6F824A0 		ldr	r10, [r6, #36]
 2984              	.LVL193:
1010:HALLIB/Src/stm32f7xx_hal_nand.c ****   
ARM GAS  /tmp/ccwQVsCz.s 			page 97


 2985              		.loc 1 1010 0
 2986 0048 4FF00009 		mov	r9, #0
1034:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 2987              		.loc 1 1034 0
 2988 004c 9EE0     		b	.L148
 2989              	.LVL194:
 2990              	.L159:
1037:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 2991              		.loc 1 1037 0
 2992 004e 09F10109 		add	r9, r9, #1
 2993              	.LVL195:
 2994 0052 B56A     		ldr	r5, [r6, #40]
 2995 0054 05FB09F5 		mul	r5, r5, r9
 2996              	.LVL196:
1040:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 2997              		.loc 1 1040 0
 2998 0058 736A     		ldr	r3, [r6, #36]
 2999 005a B3F5007F 		cmp	r3, #512
 3000 005e 2ED8     		bhi	.L149
1043:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 3001              		.loc 1 1043 0
 3002 0060 5022     		movs	r2, #80
 3003 0062 574B     		ldr	r3, .L164
 3004 0064 1A70     		strb	r2, [r3]
 3005              	.LBB510:
 3006              	.LBB511:
 3007              		.loc 2 429 0
 3008              		.syntax unified
 3009              	@ 429 "CORE/cmsis_gcc.h" 1
 3010 0066 BFF34F8F 		dsb 0xF
 3011              	@ 0 "" 2
 3012              		.thumb
 3013              		.syntax unified
 3014              	.LBE511:
 3015              	.LBE510:
1046:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 3016              		.loc 1 1046 0
 3017 006a F26A     		ldr	r2, [r6, #44]
 3018 006c 336B     		ldr	r3, [r6, #48]
 3019 006e 03FB02F3 		mul	r3, r3, r2
 3020 0072 B3F5803F 		cmp	r3, #65536
 3021 0076 0ED2     		bcs	.L150
1048:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3022              		.loc 1 1048 0
 3023 0078 524B     		ldr	r3, .L164+4
 3024 007a 0022     		movs	r2, #0
 3025 007c 1A70     		strb	r2, [r3]
 3026              	.LBB512:
 3027              	.LBB513:
 3028              		.loc 2 429 0
 3029              		.syntax unified
 3030              	@ 429 "CORE/cmsis_gcc.h" 1
 3031 007e BFF34F8F 		dsb 0xF
 3032              	@ 0 "" 2
 3033              		.thumb
 3034              		.syntax unified
 3035              	.LBE513:
ARM GAS  /tmp/ccwQVsCz.s 			page 98


 3036              	.LBE512:
1050:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3037              		.loc 1 1050 0
 3038 0082 FAB2     		uxtb	r2, r7
 3039 0084 1A70     		strb	r2, [r3]
 3040              	.LBB514:
 3041              	.LBB515:
 3042              		.loc 2 429 0
 3043              		.syntax unified
 3044              	@ 429 "CORE/cmsis_gcc.h" 1
 3045 0086 BFF34F8F 		dsb 0xF
 3046              	@ 0 "" 2
 3047              		.thumb
 3048              		.syntax unified
 3049              	.LBE515:
 3050              	.LBE514:
1052:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3051              		.loc 1 1052 0
 3052 008a C7F30722 		ubfx	r2, r7, #8, #8
 3053 008e 1A70     		strb	r2, [r3]
 3054              	.LBB516:
 3055              	.LBB517:
 3056              		.loc 2 429 0
 3057              		.syntax unified
 3058              	@ 429 "CORE/cmsis_gcc.h" 1
 3059 0090 BFF34F8F 		dsb 0xF
 3060              	@ 0 "" 2
 3061              		.thumb
 3062              		.syntax unified
 3063 0094 4DE0     		b	.L151
 3064              	.L150:
 3065              	.LBE517:
 3066              	.LBE516:
1057:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3067              		.loc 1 1057 0
 3068 0096 4B4B     		ldr	r3, .L164+4
 3069 0098 0022     		movs	r2, #0
 3070 009a 1A70     		strb	r2, [r3]
 3071              	.LBB518:
 3072              	.LBB519:
 3073              		.loc 2 429 0
 3074              		.syntax unified
 3075              	@ 429 "CORE/cmsis_gcc.h" 1
 3076 009c BFF34F8F 		dsb 0xF
 3077              	@ 0 "" 2
 3078              		.thumb
 3079              		.syntax unified
 3080              	.LBE519:
 3081              	.LBE518:
1059:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3082              		.loc 1 1059 0
 3083 00a0 FAB2     		uxtb	r2, r7
 3084 00a2 1A70     		strb	r2, [r3]
 3085              	.LBB520:
 3086              	.LBB521:
 3087              		.loc 2 429 0
 3088              		.syntax unified
ARM GAS  /tmp/ccwQVsCz.s 			page 99


 3089              	@ 429 "CORE/cmsis_gcc.h" 1
 3090 00a4 BFF34F8F 		dsb 0xF
 3091              	@ 0 "" 2
 3092              		.thumb
 3093              		.syntax unified
 3094              	.LBE521:
 3095              	.LBE520:
1061:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3096              		.loc 1 1061 0
 3097 00a8 C7F30722 		ubfx	r2, r7, #8, #8
 3098 00ac 1A70     		strb	r2, [r3]
 3099              	.LBB522:
 3100              	.LBB523:
 3101              		.loc 2 429 0
 3102              		.syntax unified
 3103              	@ 429 "CORE/cmsis_gcc.h" 1
 3104 00ae BFF34F8F 		dsb 0xF
 3105              	@ 0 "" 2
 3106              		.thumb
 3107              		.syntax unified
 3108              	.LBE523:
 3109              	.LBE522:
1063:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3110              		.loc 1 1063 0
 3111 00b2 C7F30742 		ubfx	r2, r7, #16, #8
 3112 00b6 1A70     		strb	r2, [r3]
 3113              	.LBB524:
 3114              	.LBB525:
 3115              		.loc 2 429 0
 3116              		.syntax unified
 3117              	@ 429 "CORE/cmsis_gcc.h" 1
 3118 00b8 BFF34F8F 		dsb 0xF
 3119              	@ 0 "" 2
 3120              		.thumb
 3121              		.syntax unified
 3122 00bc 39E0     		b	.L151
 3123              	.L149:
 3124              	.LBE525:
 3125              	.LBE524:
1070:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 3126              		.loc 1 1070 0
 3127 00be 0022     		movs	r2, #0
 3128 00c0 3F4B     		ldr	r3, .L164
 3129 00c2 1A70     		strb	r2, [r3]
 3130              	.LBB526:
 3131              	.LBB527:
 3132              		.loc 2 429 0
 3133              		.syntax unified
 3134              	@ 429 "CORE/cmsis_gcc.h" 1
 3135 00c4 BFF34F8F 		dsb 0xF
 3136              	@ 0 "" 2
 3137              		.thumb
 3138              		.syntax unified
 3139              	.LBE527:
 3140              	.LBE526:
1073:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 3141              		.loc 1 1073 0
ARM GAS  /tmp/ccwQVsCz.s 			page 100


 3142 00c8 F26A     		ldr	r2, [r6, #44]
 3143 00ca 336B     		ldr	r3, [r6, #48]
 3144 00cc 03FB02F3 		mul	r3, r3, r2
 3145 00d0 B3F5803F 		cmp	r3, #65536
 3146 00d4 14D2     		bcs	.L152
1075:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3147              		.loc 1 1075 0
 3148 00d6 5FFA8AF2 		uxtb	r2, r10
 3149 00da 3A4B     		ldr	r3, .L164+4
 3150 00dc 1A70     		strb	r2, [r3]
 3151              	.LBB528:
 3152              	.LBB529:
 3153              		.loc 2 429 0
 3154              		.syntax unified
 3155              	@ 429 "CORE/cmsis_gcc.h" 1
 3156 00de BFF34F8F 		dsb 0xF
 3157              	@ 0 "" 2
 3158              		.thumb
 3159              		.syntax unified
 3160              	.LBE529:
 3161              	.LBE528:
1077:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3162              		.loc 1 1077 0
 3163 00e2 CAF30722 		ubfx	r2, r10, #8, #8
 3164 00e6 1A70     		strb	r2, [r3]
 3165              	.LBB530:
 3166              	.LBB531:
 3167              		.loc 2 429 0
 3168              		.syntax unified
 3169              	@ 429 "CORE/cmsis_gcc.h" 1
 3170 00e8 BFF34F8F 		dsb 0xF
 3171              	@ 0 "" 2
 3172              		.thumb
 3173              		.syntax unified
 3174              	.LBE531:
 3175              	.LBE530:
1079:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3176              		.loc 1 1079 0
 3177 00ec FAB2     		uxtb	r2, r7
 3178 00ee 1A70     		strb	r2, [r3]
 3179              	.LBB532:
 3180              	.LBB533:
 3181              		.loc 2 429 0
 3182              		.syntax unified
 3183              	@ 429 "CORE/cmsis_gcc.h" 1
 3184 00f0 BFF34F8F 		dsb 0xF
 3185              	@ 0 "" 2
 3186              		.thumb
 3187              		.syntax unified
 3188              	.LBE533:
 3189              	.LBE532:
1081:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3190              		.loc 1 1081 0
 3191 00f4 C7F30722 		ubfx	r2, r7, #8, #8
 3192 00f8 1A70     		strb	r2, [r3]
 3193              	.LBB534:
 3194              	.LBB535:
ARM GAS  /tmp/ccwQVsCz.s 			page 101


 3195              		.loc 2 429 0
 3196              		.syntax unified
 3197              	@ 429 "CORE/cmsis_gcc.h" 1
 3198 00fa BFF34F8F 		dsb 0xF
 3199              	@ 0 "" 2
 3200              		.thumb
 3201              		.syntax unified
 3202 00fe 18E0     		b	.L151
 3203              	.L152:
 3204              	.LBE535:
 3205              	.LBE534:
1086:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3206              		.loc 1 1086 0
 3207 0100 5FFA8AF2 		uxtb	r2, r10
 3208 0104 2F4B     		ldr	r3, .L164+4
 3209 0106 1A70     		strb	r2, [r3]
 3210              	.LBB536:
 3211              	.LBB537:
 3212              		.loc 2 429 0
 3213              		.syntax unified
 3214              	@ 429 "CORE/cmsis_gcc.h" 1
 3215 0108 BFF34F8F 		dsb 0xF
 3216              	@ 0 "" 2
 3217              		.thumb
 3218              		.syntax unified
 3219              	.LBE537:
 3220              	.LBE536:
1088:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3221              		.loc 1 1088 0
 3222 010c CAF30722 		ubfx	r2, r10, #8, #8
 3223 0110 1A70     		strb	r2, [r3]
 3224              	.LBB538:
 3225              	.LBB539:
 3226              		.loc 2 429 0
 3227              		.syntax unified
 3228              	@ 429 "CORE/cmsis_gcc.h" 1
 3229 0112 BFF34F8F 		dsb 0xF
 3230              	@ 0 "" 2
 3231              		.thumb
 3232              		.syntax unified
 3233              	.LBE539:
 3234              	.LBE538:
1090:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3235              		.loc 1 1090 0
 3236 0116 FAB2     		uxtb	r2, r7
 3237 0118 1A70     		strb	r2, [r3]
 3238              	.LBB540:
 3239              	.LBB541:
 3240              		.loc 2 429 0
 3241              		.syntax unified
 3242              	@ 429 "CORE/cmsis_gcc.h" 1
 3243 011a BFF34F8F 		dsb 0xF
 3244              	@ 0 "" 2
 3245              		.thumb
 3246              		.syntax unified
 3247              	.LBE541:
 3248              	.LBE540:
ARM GAS  /tmp/ccwQVsCz.s 			page 102


1092:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3249              		.loc 1 1092 0
 3250 011e C7F30722 		ubfx	r2, r7, #8, #8
 3251 0122 1A70     		strb	r2, [r3]
 3252              	.LBB542:
 3253              	.LBB543:
 3254              		.loc 2 429 0
 3255              		.syntax unified
 3256              	@ 429 "CORE/cmsis_gcc.h" 1
 3257 0124 BFF34F8F 		dsb 0xF
 3258              	@ 0 "" 2
 3259              		.thumb
 3260              		.syntax unified
 3261              	.LBE543:
 3262              	.LBE542:
1094:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3263              		.loc 1 1094 0
 3264 0128 C7F30742 		ubfx	r2, r7, #16, #8
 3265 012c 1A70     		strb	r2, [r3]
 3266              	.LBB544:
 3267              	.LBB545:
 3268              		.loc 2 429 0
 3269              		.syntax unified
 3270              	@ 429 "CORE/cmsis_gcc.h" 1
 3271 012e BFF34F8F 		dsb 0xF
 3272              	@ 0 "" 2
 3273              		.thumb
 3274              		.syntax unified
 3275              	.L151:
 3276              	.LBE545:
 3277              	.LBE544:
1099:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 3278              		.loc 1 1099 0
 3279 0132 3022     		movs	r2, #48
 3280 0134 224B     		ldr	r3, .L164
 3281 0136 1A70     		strb	r2, [r3]
 3282              	.LBB546:
 3283              	.LBB547:
 3284              		.loc 2 429 0
 3285              		.syntax unified
 3286              	@ 429 "CORE/cmsis_gcc.h" 1
 3287 0138 BFF34F8F 		dsb 0xF
 3288              	@ 0 "" 2
 3289              		.thumb
 3290              		.syntax unified
 3291              	.LBE547:
 3292              	.LBE546:
1102:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 3293              		.loc 1 1102 0
 3294 013c 96F83C30 		ldrb	r3, [r6, #60]	@ zero_extendqisi2
 3295 0140 012B     		cmp	r3, #1
 3296 0142 1DD1     		bne	.L156
1105:HALLIB/Src/stm32f7xx_hal_nand.c ****       
 3297              		.loc 1 1105 0
 3298 0144 FFF7FEFF 		bl	HAL_GetTick
 3299              	.LVL197:
 3300 0148 8346     		mov	fp, r0
ARM GAS  /tmp/ccwQVsCz.s 			page 103


 3301              	.LVL198:
1108:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 3302              		.loc 1 1108 0
 3303 014a 06E0     		b	.L154
 3304              	.LVL199:
 3305              	.L155:
1110:HALLIB/Src/stm32f7xx_hal_nand.c ****         {
 3306              		.loc 1 1110 0
 3307 014c FFF7FEFF 		bl	HAL_GetTick
 3308              	.LVL200:
 3309 0150 CBEB0000 		rsb	r0, fp, r0
 3310 0154 B0F1807F 		cmp	r0, #16777216
 3311 0158 2DD8     		bhi	.L162
 3312              	.L154:
1108:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 3313              		.loc 1 1108 0
 3314 015a 3046     		mov	r0, r6
 3315 015c FFF7FEFF 		bl	HAL_NAND_Read_Status
 3316              	.LVL201:
 3317 0160 4028     		cmp	r0, #64
 3318 0162 F3D1     		bne	.L155
1117:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 3319              		.loc 1 1117 0
 3320 0164 0022     		movs	r2, #0
 3321 0166 164B     		ldr	r3, .L164
 3322 0168 1A70     		strb	r2, [r3]
 3323              	.LBB548:
 3324              	.LBB549:
 3325              		.loc 2 429 0
 3326              		.syntax unified
 3327              	@ 429 "CORE/cmsis_gcc.h" 1
 3328 016a BFF34F8F 		dsb 0xF
 3329              	@ 0 "" 2
 3330              		.thumb
 3331              		.syntax unified
 3332 016e 07E0     		b	.L156
 3333              	.LVL202:
 3334              	.L157:
 3335              	.LBE549:
 3336              	.LBE548:
1124:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 3337              		.loc 1 1124 0 discriminator 2
 3338 0170 4FF00043 		mov	r3, #-2147483648
 3339 0174 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3340 0176 2370     		strb	r3, [r4]
1122:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 3341              		.loc 1 1122 0 discriminator 2
 3342 0178 019B     		ldr	r3, [sp, #4]
 3343 017a 0133     		adds	r3, r3, #1
 3344 017c 0193     		str	r3, [sp, #4]
1124:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 3345              		.loc 1 1124 0 discriminator 2
 3346 017e 0134     		adds	r4, r4, #1
 3347              	.LVL203:
 3348              	.L156:
1122:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 3349              		.loc 1 1122 0 discriminator 1
ARM GAS  /tmp/ccwQVsCz.s 			page 104


 3350 0180 019B     		ldr	r3, [sp, #4]
 3351 0182 9D42     		cmp	r5, r3
 3352 0184 F4D8     		bhi	.L157
 3353              	.LVL204:
1131:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 3354              		.loc 1 1131 0
 3355 0186 08F1FF38 		add	r8, r8, #-1
 3356              	.LVL205:
1134:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 3357              		.loc 1 1134 0
 3358 018a 0137     		adds	r7, r7, #1
 3359              	.LVL206:
 3360              	.L148:
1034:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 3361              		.loc 1 1034 0
 3362 018c B8F1000F 		cmp	r8, #0
 3363 0190 06D0     		beq	.L158
1034:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 3364              		.loc 1 1034 0 is_stmt 0 discriminator 1
 3365 0192 F26A     		ldr	r2, [r6, #44]
 3366 0194 336B     		ldr	r3, [r6, #48]
 3367 0196 03FB02F3 		mul	r3, r3, r2
 3368 019a 9F42     		cmp	r7, r3
 3369 019c FFF457AF 		bcc	.L159
 3370              	.L158:
1138:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3371              		.loc 1 1138 0 is_stmt 1
 3372 01a0 0123     		movs	r3, #1
 3373 01a2 86F82130 		strb	r3, [r6, #33]
1141:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 3374              		.loc 1 1141 0
 3375 01a6 0020     		movs	r0, #0
 3376 01a8 86F82000 		strb	r0, [r6, #32]
1143:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 3377              		.loc 1 1143 0
 3378 01ac 04E0     		b	.L147
 3379              	.LVL207:
 3380              	.L160:
1013:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3381              		.loc 1 1013 0
 3382 01ae 0220     		movs	r0, #2
 3383              	.LVL208:
 3384 01b0 02E0     		b	.L147
 3385              	.LVL209:
 3386              	.L161:
1018:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 3387              		.loc 1 1018 0
 3388 01b2 0220     		movs	r0, #2
 3389              	.LVL210:
 3390 01b4 00E0     		b	.L147
 3391              	.LVL211:
 3392              	.L162:
1112:HALLIB/Src/stm32f7xx_hal_nand.c ****         }
 3393              		.loc 1 1112 0
 3394 01b6 0320     		movs	r0, #3
 3395              	.LVL212:
 3396              	.L147:
ARM GAS  /tmp/ccwQVsCz.s 			page 105


1144:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 3397              		.loc 1 1144 0
 3398 01b8 03B0     		add	sp, sp, #12
 3399              	.LCFI29:
 3400              		.cfi_def_cfa_offset 36
 3401              		@ sp needed
 3402 01ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3403              	.LVL213:
 3404              	.L165:
 3405 01be 00BF     		.align	2
 3406              	.L164:
 3407 01c0 00000180 		.word	-2147418112
 3408 01c4 00000280 		.word	-2147352576
 3409              		.cfi_endproc
 3410              	.LFE149:
 3412              		.section	.text.HAL_NAND_Read_SpareArea_16b,"ax",%progbits
 3413              		.align	2
 3414              		.global	HAL_NAND_Read_SpareArea_16b
 3415              		.thumb
 3416              		.thumb_func
 3418              	HAL_NAND_Read_SpareArea_16b:
 3419              	.LFB150:
1156:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0; 
 3420              		.loc 1 1156 0
 3421              		.cfi_startproc
 3422              		@ args = 0, pretend = 0, frame = 8
 3423              		@ frame_needed = 0, uses_anonymous_args = 0
 3424              	.LVL214:
 3425 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3426              	.LCFI30:
 3427              		.cfi_def_cfa_offset 36
 3428              		.cfi_offset 4, -36
 3429              		.cfi_offset 5, -32
 3430              		.cfi_offset 6, -28
 3431              		.cfi_offset 7, -24
 3432              		.cfi_offset 8, -20
 3433              		.cfi_offset 9, -16
 3434              		.cfi_offset 10, -12
 3435              		.cfi_offset 11, -8
 3436              		.cfi_offset 14, -4
 3437 0004 83B0     		sub	sp, sp, #12
 3438              	.LCFI31:
 3439              		.cfi_def_cfa_offset 48
 3440 0006 9846     		mov	r8, r3
1157:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0U;
 3441              		.loc 1 1157 0
 3442 0008 0023     		movs	r3, #0
 3443              	.LVL215:
 3444 000a 0193     		str	r3, [sp, #4]
 3445              	.LVL216:
1162:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3446              		.loc 1 1162 0
 3447 000c 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 3448 0010 012B     		cmp	r3, #1
 3449 0012 00F0CD80 		beq	.L180
 3450 0016 0646     		mov	r6, r0
 3451 0018 1446     		mov	r4, r2
ARM GAS  /tmp/ccwQVsCz.s 			page 106


1162:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3452              		.loc 1 1162 0 is_stmt 0 discriminator 2
 3453 001a 0123     		movs	r3, #1
 3454 001c 80F82030 		strb	r3, [r0, #32]
1165:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 3455              		.loc 1 1165 0 is_stmt 1 discriminator 2
 3456 0020 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 3457 0024 DBB2     		uxtb	r3, r3
 3458 0026 022B     		cmp	r3, #2
 3459 0028 00F0C480 		beq	.L181
 3460              	.LVL217:
1174:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3461              		.loc 1 1174 0
 3462 002c 0223     		movs	r3, #2
 3463 002e 80F82130 		strb	r3, [r0, #33]
1177:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3464              		.loc 1 1177 0
 3465 0032 0888     		ldrh	r0, [r1]
 3466              	.LVL218:
 3467 0034 8B88     		ldrh	r3, [r1, #4]
 3468 0036 4A88     		ldrh	r2, [r1, #2]
 3469              	.LVL219:
 3470 0038 B76B     		ldr	r7, [r6, #56]
 3471 003a 07FB0233 		mla	r3, r7, r2, r3
 3472 003e F76A     		ldr	r7, [r6, #44]
 3473 0040 07FB0307 		mla	r7, r7, r3, r0
 3474              	.LVL220:
1180:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3475              		.loc 1 1180 0
 3476 0044 736A     		ldr	r3, [r6, #36]
 3477 0046 4FEA430A 		lsl	r10, r3, #1
 3478              	.LVL221:
1159:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3479              		.loc 1 1159 0
 3480 004a 4FF00009 		mov	r9, #0
1183:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 3481              		.loc 1 1183 0
 3482 004e 9EE0     		b	.L168
 3483              	.LVL222:
 3484              	.L179:
1186:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 3485              		.loc 1 1186 0
 3486 0050 09F10109 		add	r9, r9, #1
 3487              	.LVL223:
 3488 0054 B56A     		ldr	r5, [r6, #40]
 3489 0056 05FB09F5 		mul	r5, r5, r9
 3490              	.LVL224:
1189:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 3491              		.loc 1 1189 0
 3492 005a 736A     		ldr	r3, [r6, #36]
 3493 005c B3F5007F 		cmp	r3, #512
 3494 0060 2ED8     		bhi	.L169
1192:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 3495              		.loc 1 1192 0
 3496 0062 5022     		movs	r2, #80
 3497 0064 564B     		ldr	r3, .L184
 3498 0066 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccwQVsCz.s 			page 107


 3499              	.LBB550:
 3500              	.LBB551:
 3501              		.loc 2 429 0
 3502              		.syntax unified
 3503              	@ 429 "CORE/cmsis_gcc.h" 1
 3504 0068 BFF34F8F 		dsb 0xF
 3505              	@ 0 "" 2
 3506              		.thumb
 3507              		.syntax unified
 3508              	.LBE551:
 3509              	.LBE550:
1195:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 3510              		.loc 1 1195 0
 3511 006c F26A     		ldr	r2, [r6, #44]
 3512 006e 336B     		ldr	r3, [r6, #48]
 3513 0070 03FB02F3 		mul	r3, r3, r2
 3514 0074 B3F5803F 		cmp	r3, #65536
 3515 0078 0ED2     		bcs	.L170
1197:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3516              		.loc 1 1197 0
 3517 007a 524B     		ldr	r3, .L184+4
 3518 007c 0022     		movs	r2, #0
 3519 007e 1A70     		strb	r2, [r3]
 3520              	.LBB552:
 3521              	.LBB553:
 3522              		.loc 2 429 0
 3523              		.syntax unified
 3524              	@ 429 "CORE/cmsis_gcc.h" 1
 3525 0080 BFF34F8F 		dsb 0xF
 3526              	@ 0 "" 2
 3527              		.thumb
 3528              		.syntax unified
 3529              	.LBE553:
 3530              	.LBE552:
1199:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3531              		.loc 1 1199 0
 3532 0084 FAB2     		uxtb	r2, r7
 3533 0086 1A70     		strb	r2, [r3]
 3534              	.LBB554:
 3535              	.LBB555:
 3536              		.loc 2 429 0
 3537              		.syntax unified
 3538              	@ 429 "CORE/cmsis_gcc.h" 1
 3539 0088 BFF34F8F 		dsb 0xF
 3540              	@ 0 "" 2
 3541              		.thumb
 3542              		.syntax unified
 3543              	.LBE555:
 3544              	.LBE554:
1201:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3545              		.loc 1 1201 0
 3546 008c C7F30722 		ubfx	r2, r7, #8, #8
 3547 0090 1A70     		strb	r2, [r3]
 3548              	.LBB556:
 3549              	.LBB557:
 3550              		.loc 2 429 0
 3551              		.syntax unified
ARM GAS  /tmp/ccwQVsCz.s 			page 108


 3552              	@ 429 "CORE/cmsis_gcc.h" 1
 3553 0092 BFF34F8F 		dsb 0xF
 3554              	@ 0 "" 2
 3555              		.thumb
 3556              		.syntax unified
 3557 0096 4DE0     		b	.L171
 3558              	.L170:
 3559              	.LBE557:
 3560              	.LBE556:
1206:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3561              		.loc 1 1206 0
 3562 0098 4A4B     		ldr	r3, .L184+4
 3563 009a 0022     		movs	r2, #0
 3564 009c 1A70     		strb	r2, [r3]
 3565              	.LBB558:
 3566              	.LBB559:
 3567              		.loc 2 429 0
 3568              		.syntax unified
 3569              	@ 429 "CORE/cmsis_gcc.h" 1
 3570 009e BFF34F8F 		dsb 0xF
 3571              	@ 0 "" 2
 3572              		.thumb
 3573              		.syntax unified
 3574              	.LBE559:
 3575              	.LBE558:
1208:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3576              		.loc 1 1208 0
 3577 00a2 FAB2     		uxtb	r2, r7
 3578 00a4 1A70     		strb	r2, [r3]
 3579              	.LBB560:
 3580              	.LBB561:
 3581              		.loc 2 429 0
 3582              		.syntax unified
 3583              	@ 429 "CORE/cmsis_gcc.h" 1
 3584 00a6 BFF34F8F 		dsb 0xF
 3585              	@ 0 "" 2
 3586              		.thumb
 3587              		.syntax unified
 3588              	.LBE561:
 3589              	.LBE560:
1210:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3590              		.loc 1 1210 0
 3591 00aa C7F30722 		ubfx	r2, r7, #8, #8
 3592 00ae 1A70     		strb	r2, [r3]
 3593              	.LBB562:
 3594              	.LBB563:
 3595              		.loc 2 429 0
 3596              		.syntax unified
 3597              	@ 429 "CORE/cmsis_gcc.h" 1
 3598 00b0 BFF34F8F 		dsb 0xF
 3599              	@ 0 "" 2
 3600              		.thumb
 3601              		.syntax unified
 3602              	.LBE563:
 3603              	.LBE562:
1212:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3604              		.loc 1 1212 0
ARM GAS  /tmp/ccwQVsCz.s 			page 109


 3605 00b4 C7F30742 		ubfx	r2, r7, #16, #8
 3606 00b8 1A70     		strb	r2, [r3]
 3607              	.LBB564:
 3608              	.LBB565:
 3609              		.loc 2 429 0
 3610              		.syntax unified
 3611              	@ 429 "CORE/cmsis_gcc.h" 1
 3612 00ba BFF34F8F 		dsb 0xF
 3613              	@ 0 "" 2
 3614              		.thumb
 3615              		.syntax unified
 3616 00be 39E0     		b	.L171
 3617              	.L169:
 3618              	.LBE565:
 3619              	.LBE564:
1219:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 3620              		.loc 1 1219 0
 3621 00c0 0022     		movs	r2, #0
 3622 00c2 3F4B     		ldr	r3, .L184
 3623 00c4 1A70     		strb	r2, [r3]
 3624              	.LBB566:
 3625              	.LBB567:
 3626              		.loc 2 429 0
 3627              		.syntax unified
 3628              	@ 429 "CORE/cmsis_gcc.h" 1
 3629 00c6 BFF34F8F 		dsb 0xF
 3630              	@ 0 "" 2
 3631              		.thumb
 3632              		.syntax unified
 3633              	.LBE567:
 3634              	.LBE566:
1222:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 3635              		.loc 1 1222 0
 3636 00ca F26A     		ldr	r2, [r6, #44]
 3637 00cc 336B     		ldr	r3, [r6, #48]
 3638 00ce 03FB02F3 		mul	r3, r3, r2
 3639 00d2 B3F5803F 		cmp	r3, #65536
 3640 00d6 14D2     		bcs	.L172
1224:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3641              		.loc 1 1224 0
 3642 00d8 5FFA8AF2 		uxtb	r2, r10
 3643 00dc 394B     		ldr	r3, .L184+4
 3644 00de 1A70     		strb	r2, [r3]
 3645              	.LBB568:
 3646              	.LBB569:
 3647              		.loc 2 429 0
 3648              		.syntax unified
 3649              	@ 429 "CORE/cmsis_gcc.h" 1
 3650 00e0 BFF34F8F 		dsb 0xF
 3651              	@ 0 "" 2
 3652              		.thumb
 3653              		.syntax unified
 3654              	.LBE569:
 3655              	.LBE568:
1226:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3656              		.loc 1 1226 0
 3657 00e4 CAF30722 		ubfx	r2, r10, #8, #8
ARM GAS  /tmp/ccwQVsCz.s 			page 110


 3658 00e8 1A70     		strb	r2, [r3]
 3659              	.LBB570:
 3660              	.LBB571:
 3661              		.loc 2 429 0
 3662              		.syntax unified
 3663              	@ 429 "CORE/cmsis_gcc.h" 1
 3664 00ea BFF34F8F 		dsb 0xF
 3665              	@ 0 "" 2
 3666              		.thumb
 3667              		.syntax unified
 3668              	.LBE571:
 3669              	.LBE570:
1228:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3670              		.loc 1 1228 0
 3671 00ee FAB2     		uxtb	r2, r7
 3672 00f0 1A70     		strb	r2, [r3]
 3673              	.LBB572:
 3674              	.LBB573:
 3675              		.loc 2 429 0
 3676              		.syntax unified
 3677              	@ 429 "CORE/cmsis_gcc.h" 1
 3678 00f2 BFF34F8F 		dsb 0xF
 3679              	@ 0 "" 2
 3680              		.thumb
 3681              		.syntax unified
 3682              	.LBE573:
 3683              	.LBE572:
1230:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3684              		.loc 1 1230 0
 3685 00f6 C7F30722 		ubfx	r2, r7, #8, #8
 3686 00fa 1A70     		strb	r2, [r3]
 3687              	.LBB574:
 3688              	.LBB575:
 3689              		.loc 2 429 0
 3690              		.syntax unified
 3691              	@ 429 "CORE/cmsis_gcc.h" 1
 3692 00fc BFF34F8F 		dsb 0xF
 3693              	@ 0 "" 2
 3694              		.thumb
 3695              		.syntax unified
 3696 0100 18E0     		b	.L171
 3697              	.L172:
 3698              	.LBE575:
 3699              	.LBE574:
1235:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3700              		.loc 1 1235 0
 3701 0102 5FFA8AF2 		uxtb	r2, r10
 3702 0106 2F4B     		ldr	r3, .L184+4
 3703 0108 1A70     		strb	r2, [r3]
 3704              	.LBB576:
 3705              	.LBB577:
 3706              		.loc 2 429 0
 3707              		.syntax unified
 3708              	@ 429 "CORE/cmsis_gcc.h" 1
 3709 010a BFF34F8F 		dsb 0xF
 3710              	@ 0 "" 2
 3711              		.thumb
ARM GAS  /tmp/ccwQVsCz.s 			page 111


 3712              		.syntax unified
 3713              	.LBE577:
 3714              	.LBE576:
1237:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3715              		.loc 1 1237 0
 3716 010e CAF30722 		ubfx	r2, r10, #8, #8
 3717 0112 1A70     		strb	r2, [r3]
 3718              	.LBB578:
 3719              	.LBB579:
 3720              		.loc 2 429 0
 3721              		.syntax unified
 3722              	@ 429 "CORE/cmsis_gcc.h" 1
 3723 0114 BFF34F8F 		dsb 0xF
 3724              	@ 0 "" 2
 3725              		.thumb
 3726              		.syntax unified
 3727              	.LBE579:
 3728              	.LBE578:
1239:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3729              		.loc 1 1239 0
 3730 0118 FAB2     		uxtb	r2, r7
 3731 011a 1A70     		strb	r2, [r3]
 3732              	.LBB580:
 3733              	.LBB581:
 3734              		.loc 2 429 0
 3735              		.syntax unified
 3736              	@ 429 "CORE/cmsis_gcc.h" 1
 3737 011c BFF34F8F 		dsb 0xF
 3738              	@ 0 "" 2
 3739              		.thumb
 3740              		.syntax unified
 3741              	.LBE581:
 3742              	.LBE580:
1241:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3743              		.loc 1 1241 0
 3744 0120 C7F30722 		ubfx	r2, r7, #8, #8
 3745 0124 1A70     		strb	r2, [r3]
 3746              	.LBB582:
 3747              	.LBB583:
 3748              		.loc 2 429 0
 3749              		.syntax unified
 3750              	@ 429 "CORE/cmsis_gcc.h" 1
 3751 0126 BFF34F8F 		dsb 0xF
 3752              	@ 0 "" 2
 3753              		.thumb
 3754              		.syntax unified
 3755              	.LBE583:
 3756              	.LBE582:
1243:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 3757              		.loc 1 1243 0
 3758 012a C7F30742 		ubfx	r2, r7, #16, #8
 3759 012e 1A70     		strb	r2, [r3]
 3760              	.LBB584:
 3761              	.LBB585:
 3762              		.loc 2 429 0
 3763              		.syntax unified
 3764              	@ 429 "CORE/cmsis_gcc.h" 1
ARM GAS  /tmp/ccwQVsCz.s 			page 112


 3765 0130 BFF34F8F 		dsb 0xF
 3766              	@ 0 "" 2
 3767              		.thumb
 3768              		.syntax unified
 3769              	.L171:
 3770              	.LBE585:
 3771              	.LBE584:
1248:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 3772              		.loc 1 1248 0
 3773 0134 3022     		movs	r2, #48
 3774 0136 224B     		ldr	r3, .L184
 3775 0138 1A70     		strb	r2, [r3]
 3776              	.LBB586:
 3777              	.LBB587:
 3778              		.loc 2 429 0
 3779              		.syntax unified
 3780              	@ 429 "CORE/cmsis_gcc.h" 1
 3781 013a BFF34F8F 		dsb 0xF
 3782              	@ 0 "" 2
 3783              		.thumb
 3784              		.syntax unified
 3785              	.LBE587:
 3786              	.LBE586:
1251:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 3787              		.loc 1 1251 0
 3788 013e 96F83C30 		ldrb	r3, [r6, #60]	@ zero_extendqisi2
 3789 0142 012B     		cmp	r3, #1
 3790 0144 1DD1     		bne	.L176
1254:HALLIB/Src/stm32f7xx_hal_nand.c ****       
 3791              		.loc 1 1254 0
 3792 0146 FFF7FEFF 		bl	HAL_GetTick
 3793              	.LVL225:
 3794 014a 8346     		mov	fp, r0
 3795              	.LVL226:
1257:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 3796              		.loc 1 1257 0
 3797 014c 06E0     		b	.L174
 3798              	.LVL227:
 3799              	.L175:
1259:HALLIB/Src/stm32f7xx_hal_nand.c ****         {
 3800              		.loc 1 1259 0
 3801 014e FFF7FEFF 		bl	HAL_GetTick
 3802              	.LVL228:
 3803 0152 CBEB0000 		rsb	r0, fp, r0
 3804 0156 B0F1807F 		cmp	r0, #16777216
 3805 015a 2DD8     		bhi	.L182
 3806              	.L174:
1257:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 3807              		.loc 1 1257 0
 3808 015c 3046     		mov	r0, r6
 3809 015e FFF7FEFF 		bl	HAL_NAND_Read_Status
 3810              	.LVL229:
 3811 0162 4028     		cmp	r0, #64
 3812 0164 F3D1     		bne	.L175
1266:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 3813              		.loc 1 1266 0
 3814 0166 0022     		movs	r2, #0
ARM GAS  /tmp/ccwQVsCz.s 			page 113


 3815 0168 154B     		ldr	r3, .L184
 3816 016a 1A70     		strb	r2, [r3]
 3817              	.LBB588:
 3818              	.LBB589:
 3819              		.loc 2 429 0
 3820              		.syntax unified
 3821              	@ 429 "CORE/cmsis_gcc.h" 1
 3822 016c BFF34F8F 		dsb 0xF
 3823              	@ 0 "" 2
 3824              		.thumb
 3825              		.syntax unified
 3826 0170 07E0     		b	.L176
 3827              	.LVL230:
 3828              	.L177:
 3829              	.LBE589:
 3830              	.LBE588:
1273:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 3831              		.loc 1 1273 0 discriminator 2
 3832 0172 4FF00043 		mov	r3, #-2147483648
 3833 0176 1B88     		ldrh	r3, [r3]
 3834 0178 2380     		strh	r3, [r4]	@ movhi
1271:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 3835              		.loc 1 1271 0 discriminator 2
 3836 017a 019B     		ldr	r3, [sp, #4]
 3837 017c 0133     		adds	r3, r3, #1
 3838 017e 0193     		str	r3, [sp, #4]
1273:HALLIB/Src/stm32f7xx_hal_nand.c ****     }
 3839              		.loc 1 1273 0 discriminator 2
 3840 0180 0234     		adds	r4, r4, #2
 3841              	.LVL231:
 3842              	.L176:
1271:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 3843              		.loc 1 1271 0 discriminator 1
 3844 0182 019B     		ldr	r3, [sp, #4]
 3845 0184 9D42     		cmp	r5, r3
 3846 0186 F4D8     		bhi	.L177
 3847              	.LVL232:
1280:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 3848              		.loc 1 1280 0
 3849 0188 08F1FF38 		add	r8, r8, #-1
 3850              	.LVL233:
1283:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 3851              		.loc 1 1283 0
 3852 018c 0137     		adds	r7, r7, #1
 3853              	.LVL234:
 3854              	.L168:
1183:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 3855              		.loc 1 1183 0
 3856 018e B8F1000F 		cmp	r8, #0
 3857 0192 06D0     		beq	.L178
1183:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 3858              		.loc 1 1183 0 is_stmt 0 discriminator 1
 3859 0194 F26A     		ldr	r2, [r6, #44]
 3860 0196 336B     		ldr	r3, [r6, #48]
 3861 0198 03FB02F3 		mul	r3, r3, r2
 3862 019c 9F42     		cmp	r7, r3
 3863 019e FFF457AF 		bcc	.L179
ARM GAS  /tmp/ccwQVsCz.s 			page 114


 3864              	.L178:
1287:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3865              		.loc 1 1287 0 is_stmt 1
 3866 01a2 0123     		movs	r3, #1
 3867 01a4 86F82130 		strb	r3, [r6, #33]
1290:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 3868              		.loc 1 1290 0
 3869 01a8 0020     		movs	r0, #0
 3870 01aa 86F82000 		strb	r0, [r6, #32]
1292:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 3871              		.loc 1 1292 0
 3872 01ae 04E0     		b	.L167
 3873              	.LVL235:
 3874              	.L180:
1162:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3875              		.loc 1 1162 0
 3876 01b0 0220     		movs	r0, #2
 3877              	.LVL236:
 3878 01b2 02E0     		b	.L167
 3879              	.LVL237:
 3880              	.L181:
1167:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 3881              		.loc 1 1167 0
 3882 01b4 0220     		movs	r0, #2
 3883              	.LVL238:
 3884 01b6 00E0     		b	.L167
 3885              	.LVL239:
 3886              	.L182:
1261:HALLIB/Src/stm32f7xx_hal_nand.c ****         }
 3887              		.loc 1 1261 0
 3888 01b8 0320     		movs	r0, #3
 3889              	.LVL240:
 3890              	.L167:
1293:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 3891              		.loc 1 1293 0
 3892 01ba 03B0     		add	sp, sp, #12
 3893              	.LCFI32:
 3894              		.cfi_def_cfa_offset 36
 3895              		@ sp needed
 3896 01bc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3897              	.LVL241:
 3898              	.L185:
 3899              		.align	2
 3900              	.L184:
 3901 01c0 00000180 		.word	-2147418112
 3902 01c4 00000280 		.word	-2147352576
 3903              		.cfi_endproc
 3904              	.LFE150:
 3906              		.section	.text.HAL_NAND_Write_SpareArea_8b,"ax",%progbits
 3907              		.align	2
 3908              		.global	HAL_NAND_Write_SpareArea_8b
 3909              		.thumb
 3910              		.thumb_func
 3912              	HAL_NAND_Write_SpareArea_8b:
 3913              	.LFB151:
1305:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0;
 3914              		.loc 1 1305 0
ARM GAS  /tmp/ccwQVsCz.s 			page 115


 3915              		.cfi_startproc
 3916              		@ args = 0, pretend = 0, frame = 8
 3917              		@ frame_needed = 0, uses_anonymous_args = 0
 3918              	.LVL242:
 3919 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3920              	.LCFI33:
 3921              		.cfi_def_cfa_offset 32
 3922              		.cfi_offset 4, -32
 3923              		.cfi_offset 5, -28
 3924              		.cfi_offset 6, -24
 3925              		.cfi_offset 7, -20
 3926              		.cfi_offset 8, -16
 3927              		.cfi_offset 9, -12
 3928              		.cfi_offset 10, -8
 3929              		.cfi_offset 14, -4
 3930 0004 82B0     		sub	sp, sp, #8
 3931              	.LCFI34:
 3932              		.cfi_def_cfa_offset 40
 3933 0006 1F46     		mov	r7, r3
1306:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0;
 3934              		.loc 1 1306 0
 3935 0008 0023     		movs	r3, #0
 3936              	.LVL243:
 3937 000a 0193     		str	r3, [sp, #4]
 3938              	.LVL244:
1311:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3939              		.loc 1 1311 0
 3940 000c 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 3941 0010 012B     		cmp	r3, #1
 3942 0012 00F0CB80 		beq	.L199
 3943 0016 0546     		mov	r5, r0
 3944 0018 1446     		mov	r4, r2
1311:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3945              		.loc 1 1311 0 is_stmt 0 discriminator 2
 3946 001a 0123     		movs	r3, #1
 3947 001c 80F82030 		strb	r3, [r0, #32]
1314:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 3948              		.loc 1 1314 0 is_stmt 1 discriminator 2
 3949 0020 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 3950 0024 DBB2     		uxtb	r3, r3
 3951 0026 022B     		cmp	r3, #2
 3952 0028 00F0C280 		beq	.L200
 3953              	.LVL245:
1323:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3954              		.loc 1 1323 0
 3955 002c 0223     		movs	r3, #2
 3956 002e 80F82130 		strb	r3, [r0, #33]
1326:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3957              		.loc 1 1326 0
 3958 0032 0888     		ldrh	r0, [r1]
 3959              	.LVL246:
 3960 0034 8B88     		ldrh	r3, [r1, #4]
 3961 0036 4A88     		ldrh	r2, [r1, #2]
 3962              	.LVL247:
 3963 0038 AE6B     		ldr	r6, [r5, #56]
 3964 003a 06FB0233 		mla	r3, r6, r2, r3
 3965 003e EE6A     		ldr	r6, [r5, #44]
ARM GAS  /tmp/ccwQVsCz.s 			page 116


 3966 0040 06FB0306 		mla	r6, r6, r3, r0
 3967              	.LVL248:
1329:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 3968              		.loc 1 1329 0
 3969 0044 D5F82490 		ldr	r9, [r5, #36]
 3970              	.LVL249:
1308:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 3971              		.loc 1 1308 0
 3972 0048 4FF00008 		mov	r8, #0
1332:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 3973              		.loc 1 1332 0
 3974 004c 9FE0     		b	.L188
 3975              	.LVL250:
 3976              	.L198:
1335:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 3977              		.loc 1 1335 0
 3978 004e 08F10108 		add	r8, r8, #1
 3979              	.LVL251:
 3980 0052 A86A     		ldr	r0, [r5, #40]
 3981 0054 00FB08F0 		mul	r0, r0, r8
 3982              	.LVL252:
1338:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 3983              		.loc 1 1338 0
 3984 0058 6B6A     		ldr	r3, [r5, #36]
 3985 005a B3F5007F 		cmp	r3, #512
 3986 005e 32D8     		bhi	.L189
1341:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 3987              		.loc 1 1341 0
 3988 0060 564B     		ldr	r3, .L203
 3989 0062 5022     		movs	r2, #80
 3990 0064 1A70     		strb	r2, [r3]
 3991              	.LBB590:
 3992              	.LBB591:
 3993              		.loc 2 429 0
 3994              		.syntax unified
 3995              	@ 429 "CORE/cmsis_gcc.h" 1
 3996 0066 BFF34F8F 		dsb 0xF
 3997              	@ 0 "" 2
 3998              		.thumb
 3999              		.syntax unified
 4000              	.LBE591:
 4001              	.LBE590:
1343:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 4002              		.loc 1 1343 0
 4003 006a 8022     		movs	r2, #128
 4004 006c 1A70     		strb	r2, [r3]
 4005              	.LBB592:
 4006              	.LBB593:
 4007              		.loc 2 429 0
 4008              		.syntax unified
 4009              	@ 429 "CORE/cmsis_gcc.h" 1
 4010 006e BFF34F8F 		dsb 0xF
 4011              	@ 0 "" 2
 4012              		.thumb
 4013              		.syntax unified
 4014              	.LBE593:
 4015              	.LBE592:
ARM GAS  /tmp/ccwQVsCz.s 			page 117


1346:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 4016              		.loc 1 1346 0
 4017 0072 EA6A     		ldr	r2, [r5, #44]
 4018 0074 2B6B     		ldr	r3, [r5, #48]
 4019 0076 03FB02F3 		mul	r3, r3, r2
 4020 007a B3F5803F 		cmp	r3, #65536
 4021 007e 0ED2     		bcs	.L190
1348:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4022              		.loc 1 1348 0
 4023 0080 4F4B     		ldr	r3, .L203+4
 4024 0082 0022     		movs	r2, #0
 4025 0084 1A70     		strb	r2, [r3]
 4026              	.LBB594:
 4027              	.LBB595:
 4028              		.loc 2 429 0
 4029              		.syntax unified
 4030              	@ 429 "CORE/cmsis_gcc.h" 1
 4031 0086 BFF34F8F 		dsb 0xF
 4032              	@ 0 "" 2
 4033              		.thumb
 4034              		.syntax unified
 4035              	.LBE595:
 4036              	.LBE594:
1350:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4037              		.loc 1 1350 0
 4038 008a F2B2     		uxtb	r2, r6
 4039 008c 1A70     		strb	r2, [r3]
 4040              	.LBB596:
 4041              	.LBB597:
 4042              		.loc 2 429 0
 4043              		.syntax unified
 4044              	@ 429 "CORE/cmsis_gcc.h" 1
 4045 008e BFF34F8F 		dsb 0xF
 4046              	@ 0 "" 2
 4047              		.thumb
 4048              		.syntax unified
 4049              	.LBE597:
 4050              	.LBE596:
1352:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4051              		.loc 1 1352 0
 4052 0092 C6F30722 		ubfx	r2, r6, #8, #8
 4053 0096 1A70     		strb	r2, [r3]
 4054              	.LBB598:
 4055              	.LBB599:
 4056              		.loc 2 429 0
 4057              		.syntax unified
 4058              	@ 429 "CORE/cmsis_gcc.h" 1
 4059 0098 BFF34F8F 		dsb 0xF
 4060              	@ 0 "" 2
 4061              		.thumb
 4062              		.syntax unified
 4063 009c 5DE0     		b	.L193
 4064              	.L190:
 4065              	.LBE599:
 4066              	.LBE598:
1357:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4067              		.loc 1 1357 0
ARM GAS  /tmp/ccwQVsCz.s 			page 118


 4068 009e 484B     		ldr	r3, .L203+4
 4069 00a0 0022     		movs	r2, #0
 4070 00a2 1A70     		strb	r2, [r3]
 4071              	.LBB600:
 4072              	.LBB601:
 4073              		.loc 2 429 0
 4074              		.syntax unified
 4075              	@ 429 "CORE/cmsis_gcc.h" 1
 4076 00a4 BFF34F8F 		dsb 0xF
 4077              	@ 0 "" 2
 4078              		.thumb
 4079              		.syntax unified
 4080              	.LBE601:
 4081              	.LBE600:
1359:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4082              		.loc 1 1359 0
 4083 00a8 F2B2     		uxtb	r2, r6
 4084 00aa 1A70     		strb	r2, [r3]
 4085              	.LBB602:
 4086              	.LBB603:
 4087              		.loc 2 429 0
 4088              		.syntax unified
 4089              	@ 429 "CORE/cmsis_gcc.h" 1
 4090 00ac BFF34F8F 		dsb 0xF
 4091              	@ 0 "" 2
 4092              		.thumb
 4093              		.syntax unified
 4094              	.LBE603:
 4095              	.LBE602:
1361:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4096              		.loc 1 1361 0
 4097 00b0 C6F30722 		ubfx	r2, r6, #8, #8
 4098 00b4 1A70     		strb	r2, [r3]
 4099              	.LBB604:
 4100              	.LBB605:
 4101              		.loc 2 429 0
 4102              		.syntax unified
 4103              	@ 429 "CORE/cmsis_gcc.h" 1
 4104 00b6 BFF34F8F 		dsb 0xF
 4105              	@ 0 "" 2
 4106              		.thumb
 4107              		.syntax unified
 4108              	.LBE605:
 4109              	.LBE604:
1363:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4110              		.loc 1 1363 0
 4111 00ba C6F30742 		ubfx	r2, r6, #16, #8
 4112 00be 1A70     		strb	r2, [r3]
 4113              	.LBB606:
 4114              	.LBB607:
 4115              		.loc 2 429 0
 4116              		.syntax unified
 4117              	@ 429 "CORE/cmsis_gcc.h" 1
 4118 00c0 BFF34F8F 		dsb 0xF
 4119              	@ 0 "" 2
 4120              		.thumb
 4121              		.syntax unified
ARM GAS  /tmp/ccwQVsCz.s 			page 119


 4122 00c4 49E0     		b	.L193
 4123              	.L189:
 4124              	.LBE607:
 4125              	.LBE606:
1370:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 4126              		.loc 1 1370 0
 4127 00c6 3D4B     		ldr	r3, .L203
 4128 00c8 0022     		movs	r2, #0
 4129 00ca 1A70     		strb	r2, [r3]
 4130              	.LBB608:
 4131              	.LBB609:
 4132              		.loc 2 429 0
 4133              		.syntax unified
 4134              	@ 429 "CORE/cmsis_gcc.h" 1
 4135 00cc BFF34F8F 		dsb 0xF
 4136              	@ 0 "" 2
 4137              		.thumb
 4138              		.syntax unified
 4139              	.LBE609:
 4140              	.LBE608:
1372:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 4141              		.loc 1 1372 0
 4142 00d0 8022     		movs	r2, #128
 4143 00d2 1A70     		strb	r2, [r3]
 4144              	.LBB610:
 4145              	.LBB611:
 4146              		.loc 2 429 0
 4147              		.syntax unified
 4148              	@ 429 "CORE/cmsis_gcc.h" 1
 4149 00d4 BFF34F8F 		dsb 0xF
 4150              	@ 0 "" 2
 4151              		.thumb
 4152              		.syntax unified
 4153              	.LBE611:
 4154              	.LBE610:
1375:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 4155              		.loc 1 1375 0
 4156 00d8 EA6A     		ldr	r2, [r5, #44]
 4157 00da 2B6B     		ldr	r3, [r5, #48]
 4158 00dc 03FB02F3 		mul	r3, r3, r2
 4159 00e0 B3F5803F 		cmp	r3, #65536
 4160 00e4 14D2     		bcs	.L192
1377:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4161              		.loc 1 1377 0
 4162 00e6 5FFA89F2 		uxtb	r2, r9
 4163 00ea 354B     		ldr	r3, .L203+4
 4164 00ec 1A70     		strb	r2, [r3]
 4165              	.LBB612:
 4166              	.LBB613:
 4167              		.loc 2 429 0
 4168              		.syntax unified
 4169              	@ 429 "CORE/cmsis_gcc.h" 1
 4170 00ee BFF34F8F 		dsb 0xF
 4171              	@ 0 "" 2
 4172              		.thumb
 4173              		.syntax unified
 4174              	.LBE613:
ARM GAS  /tmp/ccwQVsCz.s 			page 120


 4175              	.LBE612:
1379:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4176              		.loc 1 1379 0
 4177 00f2 C9F30722 		ubfx	r2, r9, #8, #8
 4178 00f6 1A70     		strb	r2, [r3]
 4179              	.LBB614:
 4180              	.LBB615:
 4181              		.loc 2 429 0
 4182              		.syntax unified
 4183              	@ 429 "CORE/cmsis_gcc.h" 1
 4184 00f8 BFF34F8F 		dsb 0xF
 4185              	@ 0 "" 2
 4186              		.thumb
 4187              		.syntax unified
 4188              	.LBE615:
 4189              	.LBE614:
1381:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4190              		.loc 1 1381 0
 4191 00fc F2B2     		uxtb	r2, r6
 4192 00fe 1A70     		strb	r2, [r3]
 4193              	.LBB616:
 4194              	.LBB617:
 4195              		.loc 2 429 0
 4196              		.syntax unified
 4197              	@ 429 "CORE/cmsis_gcc.h" 1
 4198 0100 BFF34F8F 		dsb 0xF
 4199              	@ 0 "" 2
 4200              		.thumb
 4201              		.syntax unified
 4202              	.LBE617:
 4203              	.LBE616:
1383:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4204              		.loc 1 1383 0
 4205 0104 C6F30722 		ubfx	r2, r6, #8, #8
 4206 0108 1A70     		strb	r2, [r3]
 4207              	.LBB618:
 4208              	.LBB619:
 4209              		.loc 2 429 0
 4210              		.syntax unified
 4211              	@ 429 "CORE/cmsis_gcc.h" 1
 4212 010a BFF34F8F 		dsb 0xF
 4213              	@ 0 "" 2
 4214              		.thumb
 4215              		.syntax unified
 4216 010e 24E0     		b	.L193
 4217              	.L192:
 4218              	.LBE619:
 4219              	.LBE618:
1388:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4220              		.loc 1 1388 0
 4221 0110 5FFA89F2 		uxtb	r2, r9
 4222 0114 2A4B     		ldr	r3, .L203+4
 4223 0116 1A70     		strb	r2, [r3]
 4224              	.LBB620:
 4225              	.LBB621:
 4226              		.loc 2 429 0
 4227              		.syntax unified
ARM GAS  /tmp/ccwQVsCz.s 			page 121


 4228              	@ 429 "CORE/cmsis_gcc.h" 1
 4229 0118 BFF34F8F 		dsb 0xF
 4230              	@ 0 "" 2
 4231              		.thumb
 4232              		.syntax unified
 4233              	.LBE621:
 4234              	.LBE620:
1390:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4235              		.loc 1 1390 0
 4236 011c C9F30722 		ubfx	r2, r9, #8, #8
 4237 0120 1A70     		strb	r2, [r3]
 4238              	.LBB622:
 4239              	.LBB623:
 4240              		.loc 2 429 0
 4241              		.syntax unified
 4242              	@ 429 "CORE/cmsis_gcc.h" 1
 4243 0122 BFF34F8F 		dsb 0xF
 4244              	@ 0 "" 2
 4245              		.thumb
 4246              		.syntax unified
 4247              	.LBE623:
 4248              	.LBE622:
1392:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4249              		.loc 1 1392 0
 4250 0126 F2B2     		uxtb	r2, r6
 4251 0128 1A70     		strb	r2, [r3]
 4252              	.LBB624:
 4253              	.LBB625:
 4254              		.loc 2 429 0
 4255              		.syntax unified
 4256              	@ 429 "CORE/cmsis_gcc.h" 1
 4257 012a BFF34F8F 		dsb 0xF
 4258              	@ 0 "" 2
 4259              		.thumb
 4260              		.syntax unified
 4261              	.LBE625:
 4262              	.LBE624:
1394:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4263              		.loc 1 1394 0
 4264 012e C6F30722 		ubfx	r2, r6, #8, #8
 4265 0132 1A70     		strb	r2, [r3]
 4266              	.LBB626:
 4267              	.LBB627:
 4268              		.loc 2 429 0
 4269              		.syntax unified
 4270              	@ 429 "CORE/cmsis_gcc.h" 1
 4271 0134 BFF34F8F 		dsb 0xF
 4272              	@ 0 "" 2
 4273              		.thumb
 4274              		.syntax unified
 4275              	.LBE627:
 4276              	.LBE626:
1396:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4277              		.loc 1 1396 0
 4278 0138 C6F30742 		ubfx	r2, r6, #16, #8
 4279 013c 1A70     		strb	r2, [r3]
 4280              	.LBB628:
ARM GAS  /tmp/ccwQVsCz.s 			page 122


 4281              	.LBB629:
 4282              		.loc 2 429 0
 4283              		.syntax unified
 4284              	@ 429 "CORE/cmsis_gcc.h" 1
 4285 013e BFF34F8F 		dsb 0xF
 4286              	@ 0 "" 2
 4287              		.thumb
 4288              		.syntax unified
 4289 0142 0AE0     		b	.L193
 4290              	.L194:
 4291              	.LBE629:
 4292              	.LBE628:
1404:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 4293              		.loc 1 1404 0 discriminator 2
 4294 0144 621C     		adds	r2, r4, #1
 4295              	.LVL253:
 4296 0146 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 4297 0148 4FF00043 		mov	r3, #-2147483648
 4298 014c 1970     		strb	r1, [r3]
 4299              	.LBB630:
 4300              	.LBB631:
 4301              		.loc 2 429 0 discriminator 2
 4302              		.syntax unified
 4303              	@ 429 "CORE/cmsis_gcc.h" 1
 4304 014e BFF34F8F 		dsb 0xF
 4305              	@ 0 "" 2
 4306              		.thumb
 4307              		.syntax unified
 4308              	.LBE631:
 4309              	.LBE630:
1402:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 4310              		.loc 1 1402 0 discriminator 2
 4311 0152 019B     		ldr	r3, [sp, #4]
 4312 0154 0133     		adds	r3, r3, #1
 4313 0156 0193     		str	r3, [sp, #4]
1404:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 4314              		.loc 1 1404 0 discriminator 2
 4315 0158 1446     		mov	r4, r2
 4316              	.LVL254:
 4317              	.L193:
1402:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 4318              		.loc 1 1402 0 discriminator 1
 4319 015a 019B     		ldr	r3, [sp, #4]
 4320 015c 9842     		cmp	r0, r3
 4321 015e F1D8     		bhi	.L194
1408:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 4322              		.loc 1 1408 0
 4323 0160 1022     		movs	r2, #16
 4324 0162 164B     		ldr	r3, .L203
 4325 0164 1A70     		strb	r2, [r3]
 4326              	.LBB632:
 4327              	.LBB633:
 4328              		.loc 2 429 0
 4329              		.syntax unified
 4330              	@ 429 "CORE/cmsis_gcc.h" 1
 4331 0166 BFF34F8F 		dsb 0xF
 4332              	@ 0 "" 2
ARM GAS  /tmp/ccwQVsCz.s 			page 123


 4333              		.thumb
 4334              		.syntax unified
 4335              	.LBE633:
 4336              	.LBE632:
1412:HALLIB/Src/stm32f7xx_hal_nand.c **** 	
 4337              		.loc 1 1412 0
 4338 016a FFF7FEFF 		bl	HAL_GetTick
 4339              	.LVL255:
 4340 016e 8246     		mov	r10, r0
 4341              	.LVL256:
1415:HALLIB/Src/stm32f7xx_hal_nand.c ****     {  
 4342              		.loc 1 1415 0
 4343 0170 06E0     		b	.L195
 4344              	.LVL257:
 4345              	.L196:
1417:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 4346              		.loc 1 1417 0
 4347 0172 FFF7FEFF 		bl	HAL_GetTick
 4348              	.LVL258:
 4349 0176 CAEB0000 		rsb	r0, r10, r0
 4350 017a B0F1807F 		cmp	r0, #16777216
 4351 017e 19D8     		bhi	.L201
 4352              	.L195:
1415:HALLIB/Src/stm32f7xx_hal_nand.c ****     {  
 4353              		.loc 1 1415 0
 4354 0180 2846     		mov	r0, r5
 4355 0182 FFF7FEFF 		bl	HAL_NAND_Read_Status
 4356              	.LVL259:
 4357 0186 4028     		cmp	r0, #64
 4358 0188 F3D1     		bne	.L196
 4359              	.LVL260:
1427:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 4360              		.loc 1 1427 0
 4361 018a 013F     		subs	r7, r7, #1
 4362              	.LVL261:
1430:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 4363              		.loc 1 1430 0
 4364 018c 0136     		adds	r6, r6, #1
 4365              	.LVL262:
 4366              	.L188:
1332:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 4367              		.loc 1 1332 0
 4368 018e 37B1     		cbz	r7, .L197
1332:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 4369              		.loc 1 1332 0 is_stmt 0 discriminator 1
 4370 0190 EA6A     		ldr	r2, [r5, #44]
 4371 0192 2B6B     		ldr	r3, [r5, #48]
 4372 0194 03FB02F3 		mul	r3, r3, r2
 4373 0198 9E42     		cmp	r6, r3
 4374 019a FFF458AF 		bcc	.L198
 4375              	.L197:
1434:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 4376              		.loc 1 1434 0 is_stmt 1
 4377 019e 0123     		movs	r3, #1
 4378 01a0 85F82130 		strb	r3, [r5, #33]
1437:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 4379              		.loc 1 1437 0
ARM GAS  /tmp/ccwQVsCz.s 			page 124


 4380 01a4 0020     		movs	r0, #0
 4381 01a6 85F82000 		strb	r0, [r5, #32]
1439:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 4382              		.loc 1 1439 0
 4383 01aa 04E0     		b	.L187
 4384              	.LVL263:
 4385              	.L199:
1311:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 4386              		.loc 1 1311 0
 4387 01ac 0220     		movs	r0, #2
 4388              	.LVL264:
 4389 01ae 02E0     		b	.L187
 4390              	.LVL265:
 4391              	.L200:
1316:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 4392              		.loc 1 1316 0
 4393 01b0 0220     		movs	r0, #2
 4394              	.LVL266:
 4395 01b2 00E0     		b	.L187
 4396              	.LVL267:
 4397              	.L201:
1419:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 4398              		.loc 1 1419 0
 4399 01b4 0320     		movs	r0, #3
 4400              	.LVL268:
 4401              	.L187:
1440:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 4402              		.loc 1 1440 0
 4403 01b6 02B0     		add	sp, sp, #8
 4404              	.LCFI35:
 4405              		.cfi_def_cfa_offset 32
 4406              		@ sp needed
 4407 01b8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4408              	.LVL269:
 4409              	.L204:
 4410              		.align	2
 4411              	.L203:
 4412 01bc 00000180 		.word	-2147418112
 4413 01c0 00000280 		.word	-2147352576
 4414              		.cfi_endproc
 4415              	.LFE151:
 4417              		.section	.text.HAL_NAND_Write_SpareArea_16b,"ax",%progbits
 4418              		.align	2
 4419              		.global	HAL_NAND_Write_SpareArea_16b
 4420              		.thumb
 4421              		.thumb_func
 4423              	HAL_NAND_Write_SpareArea_16b:
 4424              	.LFB152:
1452:HALLIB/Src/stm32f7xx_hal_nand.c ****   __IO uint32_t index = 0;
 4425              		.loc 1 1452 0
 4426              		.cfi_startproc
 4427              		@ args = 0, pretend = 0, frame = 8
 4428              		@ frame_needed = 0, uses_anonymous_args = 0
 4429              	.LVL270:
 4430 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4431              	.LCFI36:
 4432              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccwQVsCz.s 			page 125


 4433              		.cfi_offset 4, -32
 4434              		.cfi_offset 5, -28
 4435              		.cfi_offset 6, -24
 4436              		.cfi_offset 7, -20
 4437              		.cfi_offset 8, -16
 4438              		.cfi_offset 9, -12
 4439              		.cfi_offset 10, -8
 4440              		.cfi_offset 14, -4
 4441 0004 82B0     		sub	sp, sp, #8
 4442              	.LCFI37:
 4443              		.cfi_def_cfa_offset 40
 4444 0006 1F46     		mov	r7, r3
1453:HALLIB/Src/stm32f7xx_hal_nand.c ****   uint32_t tickstart = 0;
 4445              		.loc 1 1453 0
 4446 0008 0023     		movs	r3, #0
 4447              	.LVL271:
 4448 000a 0193     		str	r3, [sp, #4]
 4449              	.LVL272:
1458:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 4450              		.loc 1 1458 0
 4451 000c 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 4452 0010 012B     		cmp	r3, #1
 4453 0012 00F0CC80 		beq	.L218
 4454 0016 0546     		mov	r5, r0
 4455 0018 1446     		mov	r4, r2
1458:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 4456              		.loc 1 1458 0 is_stmt 0 discriminator 2
 4457 001a 0123     		movs	r3, #1
 4458 001c 80F82030 		strb	r3, [r0, #32]
1461:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 4459              		.loc 1 1461 0 is_stmt 1 discriminator 2
 4460 0020 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 4461 0024 DBB2     		uxtb	r3, r3
 4462 0026 022B     		cmp	r3, #2
 4463 0028 00F0C380 		beq	.L219
 4464              	.LVL273:
1470:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 4465              		.loc 1 1470 0
 4466 002c 0223     		movs	r3, #2
 4467 002e 80F82130 		strb	r3, [r0, #33]
1473:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 4468              		.loc 1 1473 0
 4469 0032 0888     		ldrh	r0, [r1]
 4470              	.LVL274:
 4471 0034 8B88     		ldrh	r3, [r1, #4]
 4472 0036 4A88     		ldrh	r2, [r1, #2]
 4473              	.LVL275:
 4474 0038 AE6B     		ldr	r6, [r5, #56]
 4475 003a 06FB0233 		mla	r3, r6, r2, r3
 4476 003e EE6A     		ldr	r6, [r5, #44]
 4477 0040 06FB0306 		mla	r6, r6, r3, r0
 4478              	.LVL276:
1476:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 4479              		.loc 1 1476 0
 4480 0044 6B6A     		ldr	r3, [r5, #36]
 4481 0046 4FEA4309 		lsl	r9, r3, #1
 4482              	.LVL277:
ARM GAS  /tmp/ccwQVsCz.s 			page 126


1455:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 4483              		.loc 1 1455 0
 4484 004a 4FF00008 		mov	r8, #0
1479:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 4485              		.loc 1 1479 0
 4486 004e 9FE0     		b	.L207
 4487              	.LVL278:
 4488              	.L217:
1482:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 4489              		.loc 1 1482 0
 4490 0050 08F10108 		add	r8, r8, #1
 4491              	.LVL279:
 4492 0054 A86A     		ldr	r0, [r5, #40]
 4493 0056 00FB08F0 		mul	r0, r0, r8
 4494              	.LVL280:
1485:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 4495              		.loc 1 1485 0
 4496 005a 6B6A     		ldr	r3, [r5, #36]
 4497 005c B3F5007F 		cmp	r3, #512
 4498 0060 32D8     		bhi	.L208
1488:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 4499              		.loc 1 1488 0
 4500 0062 574B     		ldr	r3, .L222
 4501 0064 5022     		movs	r2, #80
 4502 0066 1A70     		strb	r2, [r3]
 4503              	.LBB634:
 4504              	.LBB635:
 4505              		.loc 2 429 0
 4506              		.syntax unified
 4507              	@ 429 "CORE/cmsis_gcc.h" 1
 4508 0068 BFF34F8F 		dsb 0xF
 4509              	@ 0 "" 2
 4510              		.thumb
 4511              		.syntax unified
 4512              	.LBE635:
 4513              	.LBE634:
1490:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 4514              		.loc 1 1490 0
 4515 006c 8022     		movs	r2, #128
 4516 006e 1A70     		strb	r2, [r3]
 4517              	.LBB636:
 4518              	.LBB637:
 4519              		.loc 2 429 0
 4520              		.syntax unified
 4521              	@ 429 "CORE/cmsis_gcc.h" 1
 4522 0070 BFF34F8F 		dsb 0xF
 4523              	@ 0 "" 2
 4524              		.thumb
 4525              		.syntax unified
 4526              	.LBE637:
 4527              	.LBE636:
1493:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 4528              		.loc 1 1493 0
 4529 0074 EA6A     		ldr	r2, [r5, #44]
 4530 0076 2B6B     		ldr	r3, [r5, #48]
 4531 0078 03FB02F3 		mul	r3, r3, r2
 4532 007c B3F5803F 		cmp	r3, #65536
ARM GAS  /tmp/ccwQVsCz.s 			page 127


 4533 0080 0ED2     		bcs	.L209
1495:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4534              		.loc 1 1495 0
 4535 0082 504B     		ldr	r3, .L222+4
 4536 0084 0022     		movs	r2, #0
 4537 0086 1A70     		strb	r2, [r3]
 4538              	.LBB638:
 4539              	.LBB639:
 4540              		.loc 2 429 0
 4541              		.syntax unified
 4542              	@ 429 "CORE/cmsis_gcc.h" 1
 4543 0088 BFF34F8F 		dsb 0xF
 4544              	@ 0 "" 2
 4545              		.thumb
 4546              		.syntax unified
 4547              	.LBE639:
 4548              	.LBE638:
1497:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4549              		.loc 1 1497 0
 4550 008c F2B2     		uxtb	r2, r6
 4551 008e 1A70     		strb	r2, [r3]
 4552              	.LBB640:
 4553              	.LBB641:
 4554              		.loc 2 429 0
 4555              		.syntax unified
 4556              	@ 429 "CORE/cmsis_gcc.h" 1
 4557 0090 BFF34F8F 		dsb 0xF
 4558              	@ 0 "" 2
 4559              		.thumb
 4560              		.syntax unified
 4561              	.LBE641:
 4562              	.LBE640:
1499:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4563              		.loc 1 1499 0
 4564 0094 C6F30722 		ubfx	r2, r6, #8, #8
 4565 0098 1A70     		strb	r2, [r3]
 4566              	.LBB642:
 4567              	.LBB643:
 4568              		.loc 2 429 0
 4569              		.syntax unified
 4570              	@ 429 "CORE/cmsis_gcc.h" 1
 4571 009a BFF34F8F 		dsb 0xF
 4572              	@ 0 "" 2
 4573              		.thumb
 4574              		.syntax unified
 4575 009e 5DE0     		b	.L212
 4576              	.L209:
 4577              	.LBE643:
 4578              	.LBE642:
1504:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4579              		.loc 1 1504 0
 4580 00a0 484B     		ldr	r3, .L222+4
 4581 00a2 0022     		movs	r2, #0
 4582 00a4 1A70     		strb	r2, [r3]
 4583              	.LBB644:
 4584              	.LBB645:
 4585              		.loc 2 429 0
ARM GAS  /tmp/ccwQVsCz.s 			page 128


 4586              		.syntax unified
 4587              	@ 429 "CORE/cmsis_gcc.h" 1
 4588 00a6 BFF34F8F 		dsb 0xF
 4589              	@ 0 "" 2
 4590              		.thumb
 4591              		.syntax unified
 4592              	.LBE645:
 4593              	.LBE644:
1506:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4594              		.loc 1 1506 0
 4595 00aa F2B2     		uxtb	r2, r6
 4596 00ac 1A70     		strb	r2, [r3]
 4597              	.LBB646:
 4598              	.LBB647:
 4599              		.loc 2 429 0
 4600              		.syntax unified
 4601              	@ 429 "CORE/cmsis_gcc.h" 1
 4602 00ae BFF34F8F 		dsb 0xF
 4603              	@ 0 "" 2
 4604              		.thumb
 4605              		.syntax unified
 4606              	.LBE647:
 4607              	.LBE646:
1508:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4608              		.loc 1 1508 0
 4609 00b2 C6F30722 		ubfx	r2, r6, #8, #8
 4610 00b6 1A70     		strb	r2, [r3]
 4611              	.LBB648:
 4612              	.LBB649:
 4613              		.loc 2 429 0
 4614              		.syntax unified
 4615              	@ 429 "CORE/cmsis_gcc.h" 1
 4616 00b8 BFF34F8F 		dsb 0xF
 4617              	@ 0 "" 2
 4618              		.thumb
 4619              		.syntax unified
 4620              	.LBE649:
 4621              	.LBE648:
1510:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4622              		.loc 1 1510 0
 4623 00bc C6F30742 		ubfx	r2, r6, #16, #8
 4624 00c0 1A70     		strb	r2, [r3]
 4625              	.LBB650:
 4626              	.LBB651:
 4627              		.loc 2 429 0
 4628              		.syntax unified
 4629              	@ 429 "CORE/cmsis_gcc.h" 1
 4630 00c2 BFF34F8F 		dsb 0xF
 4631              	@ 0 "" 2
 4632              		.thumb
 4633              		.syntax unified
 4634 00c6 49E0     		b	.L212
 4635              	.L208:
 4636              	.LBE651:
 4637              	.LBE650:
1517:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 4638              		.loc 1 1517 0
ARM GAS  /tmp/ccwQVsCz.s 			page 129


 4639 00c8 3D4B     		ldr	r3, .L222
 4640 00ca 0022     		movs	r2, #0
 4641 00cc 1A70     		strb	r2, [r3]
 4642              	.LBB652:
 4643              	.LBB653:
 4644              		.loc 2 429 0
 4645              		.syntax unified
 4646              	@ 429 "CORE/cmsis_gcc.h" 1
 4647 00ce BFF34F8F 		dsb 0xF
 4648              	@ 0 "" 2
 4649              		.thumb
 4650              		.syntax unified
 4651              	.LBE653:
 4652              	.LBE652:
1519:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 4653              		.loc 1 1519 0
 4654 00d2 8022     		movs	r2, #128
 4655 00d4 1A70     		strb	r2, [r3]
 4656              	.LBB654:
 4657              	.LBB655:
 4658              		.loc 2 429 0
 4659              		.syntax unified
 4660              	@ 429 "CORE/cmsis_gcc.h" 1
 4661 00d6 BFF34F8F 		dsb 0xF
 4662              	@ 0 "" 2
 4663              		.thumb
 4664              		.syntax unified
 4665              	.LBE655:
 4666              	.LBE654:
1522:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 4667              		.loc 1 1522 0
 4668 00da EA6A     		ldr	r2, [r5, #44]
 4669 00dc 2B6B     		ldr	r3, [r5, #48]
 4670 00de 03FB02F3 		mul	r3, r3, r2
 4671 00e2 B3F5803F 		cmp	r3, #65536
 4672 00e6 14D2     		bcs	.L211
1524:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4673              		.loc 1 1524 0
 4674 00e8 5FFA89F2 		uxtb	r2, r9
 4675 00ec 354B     		ldr	r3, .L222+4
 4676 00ee 1A70     		strb	r2, [r3]
 4677              	.LBB656:
 4678              	.LBB657:
 4679              		.loc 2 429 0
 4680              		.syntax unified
 4681              	@ 429 "CORE/cmsis_gcc.h" 1
 4682 00f0 BFF34F8F 		dsb 0xF
 4683              	@ 0 "" 2
 4684              		.thumb
 4685              		.syntax unified
 4686              	.LBE657:
 4687              	.LBE656:
1526:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4688              		.loc 1 1526 0
 4689 00f4 C9F30722 		ubfx	r2, r9, #8, #8
 4690 00f8 1A70     		strb	r2, [r3]
 4691              	.LBB658:
ARM GAS  /tmp/ccwQVsCz.s 			page 130


 4692              	.LBB659:
 4693              		.loc 2 429 0
 4694              		.syntax unified
 4695              	@ 429 "CORE/cmsis_gcc.h" 1
 4696 00fa BFF34F8F 		dsb 0xF
 4697              	@ 0 "" 2
 4698              		.thumb
 4699              		.syntax unified
 4700              	.LBE659:
 4701              	.LBE658:
1528:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4702              		.loc 1 1528 0
 4703 00fe F2B2     		uxtb	r2, r6
 4704 0100 1A70     		strb	r2, [r3]
 4705              	.LBB660:
 4706              	.LBB661:
 4707              		.loc 2 429 0
 4708              		.syntax unified
 4709              	@ 429 "CORE/cmsis_gcc.h" 1
 4710 0102 BFF34F8F 		dsb 0xF
 4711              	@ 0 "" 2
 4712              		.thumb
 4713              		.syntax unified
 4714              	.LBE661:
 4715              	.LBE660:
1530:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4716              		.loc 1 1530 0
 4717 0106 C6F30722 		ubfx	r2, r6, #8, #8
 4718 010a 1A70     		strb	r2, [r3]
 4719              	.LBB662:
 4720              	.LBB663:
 4721              		.loc 2 429 0
 4722              		.syntax unified
 4723              	@ 429 "CORE/cmsis_gcc.h" 1
 4724 010c BFF34F8F 		dsb 0xF
 4725              	@ 0 "" 2
 4726              		.thumb
 4727              		.syntax unified
 4728 0110 24E0     		b	.L212
 4729              	.L211:
 4730              	.LBE663:
 4731              	.LBE662:
1535:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4732              		.loc 1 1535 0
 4733 0112 5FFA89F2 		uxtb	r2, r9
 4734 0116 2B4B     		ldr	r3, .L222+4
 4735 0118 1A70     		strb	r2, [r3]
 4736              	.LBB664:
 4737              	.LBB665:
 4738              		.loc 2 429 0
 4739              		.syntax unified
 4740              	@ 429 "CORE/cmsis_gcc.h" 1
 4741 011a BFF34F8F 		dsb 0xF
 4742              	@ 0 "" 2
 4743              		.thumb
 4744              		.syntax unified
 4745              	.LBE665:
ARM GAS  /tmp/ccwQVsCz.s 			page 131


 4746              	.LBE664:
1537:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4747              		.loc 1 1537 0
 4748 011e C9F30722 		ubfx	r2, r9, #8, #8
 4749 0122 1A70     		strb	r2, [r3]
 4750              	.LBB666:
 4751              	.LBB667:
 4752              		.loc 2 429 0
 4753              		.syntax unified
 4754              	@ 429 "CORE/cmsis_gcc.h" 1
 4755 0124 BFF34F8F 		dsb 0xF
 4756              	@ 0 "" 2
 4757              		.thumb
 4758              		.syntax unified
 4759              	.LBE667:
 4760              	.LBE666:
1539:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4761              		.loc 1 1539 0
 4762 0128 F2B2     		uxtb	r2, r6
 4763 012a 1A70     		strb	r2, [r3]
 4764              	.LBB668:
 4765              	.LBB669:
 4766              		.loc 2 429 0
 4767              		.syntax unified
 4768              	@ 429 "CORE/cmsis_gcc.h" 1
 4769 012c BFF34F8F 		dsb 0xF
 4770              	@ 0 "" 2
 4771              		.thumb
 4772              		.syntax unified
 4773              	.LBE669:
 4774              	.LBE668:
1541:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4775              		.loc 1 1541 0
 4776 0130 C6F30722 		ubfx	r2, r6, #8, #8
 4777 0134 1A70     		strb	r2, [r3]
 4778              	.LBB670:
 4779              	.LBB671:
 4780              		.loc 2 429 0
 4781              		.syntax unified
 4782              	@ 429 "CORE/cmsis_gcc.h" 1
 4783 0136 BFF34F8F 		dsb 0xF
 4784              	@ 0 "" 2
 4785              		.thumb
 4786              		.syntax unified
 4787              	.LBE671:
 4788              	.LBE670:
1543:HALLIB/Src/stm32f7xx_hal_nand.c ****         __DSB();
 4789              		.loc 1 1543 0
 4790 013a C6F30742 		ubfx	r2, r6, #16, #8
 4791 013e 1A70     		strb	r2, [r3]
 4792              	.LBB672:
 4793              	.LBB673:
 4794              		.loc 2 429 0
 4795              		.syntax unified
 4796              	@ 429 "CORE/cmsis_gcc.h" 1
 4797 0140 BFF34F8F 		dsb 0xF
 4798              	@ 0 "" 2
ARM GAS  /tmp/ccwQVsCz.s 			page 132


 4799              		.thumb
 4800              		.syntax unified
 4801 0144 0AE0     		b	.L212
 4802              	.L213:
 4803              	.LBE673:
 4804              	.LBE672:
1551:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 4805              		.loc 1 1551 0 discriminator 2
 4806 0146 A21C     		adds	r2, r4, #2
 4807              	.LVL281:
 4808 0148 2188     		ldrh	r1, [r4]
 4809 014a 4FF00043 		mov	r3, #-2147483648
 4810 014e 1980     		strh	r1, [r3]	@ movhi
 4811              	.LBB674:
 4812              	.LBB675:
 4813              		.loc 2 429 0 discriminator 2
 4814              		.syntax unified
 4815              	@ 429 "CORE/cmsis_gcc.h" 1
 4816 0150 BFF34F8F 		dsb 0xF
 4817              	@ 0 "" 2
 4818              		.thumb
 4819              		.syntax unified
 4820              	.LBE675:
 4821              	.LBE674:
1549:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 4822              		.loc 1 1549 0 discriminator 2
 4823 0154 019B     		ldr	r3, [sp, #4]
 4824 0156 0133     		adds	r3, r3, #1
 4825 0158 0193     		str	r3, [sp, #4]
1551:HALLIB/Src/stm32f7xx_hal_nand.c ****       __DSB();
 4826              		.loc 1 1551 0 discriminator 2
 4827 015a 1446     		mov	r4, r2
 4828              	.LVL282:
 4829              	.L212:
1549:HALLIB/Src/stm32f7xx_hal_nand.c ****     {
 4830              		.loc 1 1549 0 discriminator 1
 4831 015c 019B     		ldr	r3, [sp, #4]
 4832 015e 9842     		cmp	r0, r3
 4833 0160 F1D8     		bhi	.L213
1555:HALLIB/Src/stm32f7xx_hal_nand.c ****     __DSB();
 4834              		.loc 1 1555 0
 4835 0162 1022     		movs	r2, #16
 4836 0164 164B     		ldr	r3, .L222
 4837 0166 1A70     		strb	r2, [r3]
 4838              	.LBB676:
 4839              	.LBB677:
 4840              		.loc 2 429 0
 4841              		.syntax unified
 4842              	@ 429 "CORE/cmsis_gcc.h" 1
 4843 0168 BFF34F8F 		dsb 0xF
 4844              	@ 0 "" 2
 4845              		.thumb
 4846              		.syntax unified
 4847              	.LBE677:
 4848              	.LBE676:
1559:HALLIB/Src/stm32f7xx_hal_nand.c **** 	  
 4849              		.loc 1 1559 0
ARM GAS  /tmp/ccwQVsCz.s 			page 133


 4850 016c FFF7FEFF 		bl	HAL_GetTick
 4851              	.LVL283:
 4852 0170 8246     		mov	r10, r0
 4853              	.LVL284:
1562:HALLIB/Src/stm32f7xx_hal_nand.c ****     { 
 4854              		.loc 1 1562 0
 4855 0172 06E0     		b	.L214
 4856              	.LVL285:
 4857              	.L215:
1564:HALLIB/Src/stm32f7xx_hal_nand.c ****       {
 4858              		.loc 1 1564 0
 4859 0174 FFF7FEFF 		bl	HAL_GetTick
 4860              	.LVL286:
 4861 0178 CAEB0000 		rsb	r0, r10, r0
 4862 017c B0F1807F 		cmp	r0, #16777216
 4863 0180 19D8     		bhi	.L220
 4864              	.L214:
1562:HALLIB/Src/stm32f7xx_hal_nand.c ****     { 
 4865              		.loc 1 1562 0
 4866 0182 2846     		mov	r0, r5
 4867 0184 FFF7FEFF 		bl	HAL_NAND_Read_Status
 4868              	.LVL287:
 4869 0188 4028     		cmp	r0, #64
 4870 018a F3D1     		bne	.L215
 4871              	.LVL288:
1574:HALLIB/Src/stm32f7xx_hal_nand.c ****     
 4872              		.loc 1 1574 0
 4873 018c 013F     		subs	r7, r7, #1
 4874              	.LVL289:
1577:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 4875              		.loc 1 1577 0
 4876 018e 0136     		adds	r6, r6, #1
 4877              	.LVL290:
 4878              	.L207:
1479:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 4879              		.loc 1 1479 0
 4880 0190 37B1     		cbz	r7, .L216
1479:HALLIB/Src/stm32f7xx_hal_nand.c ****   {
 4881              		.loc 1 1479 0 is_stmt 0 discriminator 1
 4882 0192 EA6A     		ldr	r2, [r5, #44]
 4883 0194 2B6B     		ldr	r3, [r5, #48]
 4884 0196 03FB02F3 		mul	r3, r3, r2
 4885 019a 9E42     		cmp	r6, r3
 4886 019c FFF458AF 		bcc	.L217
 4887              	.L216:
1581:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 4888              		.loc 1 1581 0 is_stmt 1
 4889 01a0 0123     		movs	r3, #1
 4890 01a2 85F82130 		strb	r3, [r5, #33]
1584:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 4891              		.loc 1 1584 0
 4892 01a6 0020     		movs	r0, #0
 4893 01a8 85F82000 		strb	r0, [r5, #32]
1586:HALLIB/Src/stm32f7xx_hal_nand.c **** }
 4894              		.loc 1 1586 0
 4895 01ac 04E0     		b	.L206
 4896              	.LVL291:
ARM GAS  /tmp/ccwQVsCz.s 			page 134


 4897              	.L218:
1458:HALLIB/Src/stm32f7xx_hal_nand.c ****   
 4898              		.loc 1 1458 0
 4899 01ae 0220     		movs	r0, #2
 4900              	.LVL292:
 4901 01b0 02E0     		b	.L206
 4902              	.LVL293:
 4903              	.L219:
1463:HALLIB/Src/stm32f7xx_hal_nand.c ****   }
 4904              		.loc 1 1463 0
 4905 01b2 0220     		movs	r0, #2
 4906              	.LVL294:
 4907 01b4 00E0     		b	.L206
 4908              	.LVL295:
 4909              	.L220:
1566:HALLIB/Src/stm32f7xx_hal_nand.c ****       }
 4910              		.loc 1 1566 0
 4911 01b6 0320     		movs	r0, #3
 4912              	.LVL296:
 4913              	.L206:
1587:HALLIB/Src/stm32f7xx_hal_nand.c **** 
 4914              		.loc 1 1587 0
 4915 01b8 02B0     		add	sp, sp, #8
 4916              	.LCFI38:
 4917              		.cfi_def_cfa_offset 32
 4918              		@ sp needed
 4919 01ba BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4920              	.LVL297:
 4921              	.L223:
 4922 01be 00BF     		.align	2
 4923              	.L222:
 4924 01c0 00000180 		.word	-2147418112
 4925 01c4 00000280 		.word	-2147352576
 4926              		.cfi_endproc
 4927              	.LFE152:
 4929              		.text
 4930              	.Letext0:
 4931              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 4932              		.file 4 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 4933              		.file 5 "Inc/stm32f767xx.h"
 4934              		.file 6 "Inc/stm32f7xx.h"
 4935              		.file 7 "HALLIB/Inc/stm32f7xx_hal_def.h"
 4936              		.file 8 "HALLIB/Inc/stm32f7xx_ll_fmc.h"
 4937              		.file 9 "HALLIB/Inc/stm32f7xx_hal_nand.h"
 4938              		.file 10 "HALLIB/Inc/stm32f7xx_hal.h"
 4939              		.file 11 "CORE/core_cm7.h"
ARM GAS  /tmp/ccwQVsCz.s 			page 135


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_nand.c
     /tmp/ccwQVsCz.s:21     .text.HAL_NAND_MspInit:00000000 $t
     /tmp/ccwQVsCz.s:26     .text.HAL_NAND_MspInit:00000000 HAL_NAND_MspInit
     /tmp/ccwQVsCz.s:40     .text.HAL_NAND_Init:00000000 $t
     /tmp/ccwQVsCz.s:45     .text.HAL_NAND_Init:00000000 HAL_NAND_Init
     /tmp/ccwQVsCz.s:120    .text.HAL_NAND_MspDeInit:00000000 $t
     /tmp/ccwQVsCz.s:125    .text.HAL_NAND_MspDeInit:00000000 HAL_NAND_MspDeInit
     /tmp/ccwQVsCz.s:138    .text.HAL_NAND_DeInit:00000000 $t
     /tmp/ccwQVsCz.s:143    .text.HAL_NAND_DeInit:00000000 HAL_NAND_DeInit
     /tmp/ccwQVsCz.s:176    .text.HAL_NAND_ITCallback:00000000 $t
     /tmp/ccwQVsCz.s:181    .text.HAL_NAND_ITCallback:00000000 HAL_NAND_ITCallback
     /tmp/ccwQVsCz.s:194    .text.HAL_NAND_IRQHandler:00000000 $t
     /tmp/ccwQVsCz.s:199    .text.HAL_NAND_IRQHandler:00000000 HAL_NAND_IRQHandler
     /tmp/ccwQVsCz.s:277    .text.HAL_NAND_Read_ID:00000000 $t
     /tmp/ccwQVsCz.s:282    .text.HAL_NAND_Read_ID:00000000 HAL_NAND_Read_ID
     /tmp/ccwQVsCz.s:424    .text.HAL_NAND_Read_ID:000000a4 $d
     /tmp/ccwQVsCz.s:430    .text.HAL_NAND_Reset:00000000 $t
     /tmp/ccwQVsCz.s:435    .text.HAL_NAND_Reset:00000000 HAL_NAND_Reset
     /tmp/ccwQVsCz.s:489    .text.HAL_NAND_Reset:0000003c $d
     /tmp/ccwQVsCz.s:494    .text.HAL_NAND_ConfigDevice:00000000 $t
     /tmp/ccwQVsCz.s:499    .text.HAL_NAND_ConfigDevice:00000000 HAL_NAND_ConfigDevice
     /tmp/ccwQVsCz.s:536    .text.HAL_NAND_Erase_Block:00000000 $t
     /tmp/ccwQVsCz.s:541    .text.HAL_NAND_Erase_Block:00000000 HAL_NAND_Erase_Block
     /tmp/ccwQVsCz.s:715    .text.HAL_NAND_Erase_Block:000000a4 $d
     /tmp/ccwQVsCz.s:721    .text.HAL_NAND_Address_Inc:00000000 $t
     /tmp/ccwQVsCz.s:726    .text.HAL_NAND_Address_Inc:00000000 HAL_NAND_Address_Inc
     /tmp/ccwQVsCz.s:792    .text.HAL_NAND_ECC_Enable:00000000 $t
     /tmp/ccwQVsCz.s:797    .text.HAL_NAND_ECC_Enable:00000000 HAL_NAND_ECC_Enable
     /tmp/ccwQVsCz.s:845    .text.HAL_NAND_ECC_Disable:00000000 $t
     /tmp/ccwQVsCz.s:850    .text.HAL_NAND_ECC_Disable:00000000 HAL_NAND_ECC_Disable
     /tmp/ccwQVsCz.s:898    .text.HAL_NAND_GetECC:00000000 $t
     /tmp/ccwQVsCz.s:903    .text.HAL_NAND_GetECC:00000000 HAL_NAND_GetECC
     /tmp/ccwQVsCz.s:949    .text.HAL_NAND_GetState:00000000 $t
     /tmp/ccwQVsCz.s:954    .text.HAL_NAND_GetState:00000000 HAL_NAND_GetState
     /tmp/ccwQVsCz.s:971    .text.HAL_NAND_Read_Status:00000000 $t
     /tmp/ccwQVsCz.s:976    .text.HAL_NAND_Read_Status:00000000 HAL_NAND_Read_Status
     /tmp/ccwQVsCz.s:1019   .text.HAL_NAND_Read_Status:00000028 $d
     /tmp/ccwQVsCz.s:1024   .text.HAL_NAND_Read_Page_8b:00000000 $t
     /tmp/ccwQVsCz.s:1029   .text.HAL_NAND_Read_Page_8b:00000000 HAL_NAND_Read_Page_8b
     /tmp/ccwQVsCz.s:1490   .text.HAL_NAND_Read_Page_8b:000001a4 $d
     /tmp/ccwQVsCz.s:1496   .text.HAL_NAND_Read_Page_16b:00000000 $t
     /tmp/ccwQVsCz.s:1501   .text.HAL_NAND_Read_Page_16b:00000000 HAL_NAND_Read_Page_16b
     /tmp/ccwQVsCz.s:1962   .text.HAL_NAND_Read_Page_16b:000001a4 $d
     /tmp/ccwQVsCz.s:1968   .text.HAL_NAND_Write_Page_8b:00000000 $t
     /tmp/ccwQVsCz.s:1973   .text.HAL_NAND_Write_Page_8b:00000000 HAL_NAND_Write_Page_8b
     /tmp/ccwQVsCz.s:2438   .text.HAL_NAND_Write_Page_8b:0000019c $d
     /tmp/ccwQVsCz.s:2444   .text.HAL_NAND_Write_Page_16b:00000000 $t
     /tmp/ccwQVsCz.s:2449   .text.HAL_NAND_Write_Page_16b:00000000 HAL_NAND_Write_Page_16b
     /tmp/ccwQVsCz.s:2914   .text.HAL_NAND_Write_Page_16b:0000019c $d
     /tmp/ccwQVsCz.s:2920   .text.HAL_NAND_Read_SpareArea_8b:00000000 $t
     /tmp/ccwQVsCz.s:2925   .text.HAL_NAND_Read_SpareArea_8b:00000000 HAL_NAND_Read_SpareArea_8b
     /tmp/ccwQVsCz.s:3407   .text.HAL_NAND_Read_SpareArea_8b:000001c0 $d
     /tmp/ccwQVsCz.s:3413   .text.HAL_NAND_Read_SpareArea_16b:00000000 $t
     /tmp/ccwQVsCz.s:3418   .text.HAL_NAND_Read_SpareArea_16b:00000000 HAL_NAND_Read_SpareArea_16b
     /tmp/ccwQVsCz.s:3901   .text.HAL_NAND_Read_SpareArea_16b:000001c0 $d
     /tmp/ccwQVsCz.s:3907   .text.HAL_NAND_Write_SpareArea_8b:00000000 $t
ARM GAS  /tmp/ccwQVsCz.s 			page 136


     /tmp/ccwQVsCz.s:3912   .text.HAL_NAND_Write_SpareArea_8b:00000000 HAL_NAND_Write_SpareArea_8b
     /tmp/ccwQVsCz.s:4412   .text.HAL_NAND_Write_SpareArea_8b:000001bc $d
     /tmp/ccwQVsCz.s:4418   .text.HAL_NAND_Write_SpareArea_16b:00000000 $t
     /tmp/ccwQVsCz.s:4423   .text.HAL_NAND_Write_SpareArea_16b:00000000 HAL_NAND_Write_SpareArea_16b
     /tmp/ccwQVsCz.s:4924   .text.HAL_NAND_Write_SpareArea_16b:000001c0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
FMC_NAND_Init
FMC_NAND_CommonSpace_Timing_Init
FMC_NAND_AttributeSpace_Timing_Init
FMC_NAND_DeInit
FMC_NAND_ECC_Enable
FMC_NAND_ECC_Disable
FMC_NAND_GetECC
HAL_GetTick
