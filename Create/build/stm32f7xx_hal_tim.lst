ARM GAS  /tmp/ccrrJVNd.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_tim.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.TIM_TI1_ConfigInputStage,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	TIM_TI1_ConfigInputStage:
  26              	.LFB234:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_tim.c"
   1:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_tim.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @file    stm32f7xx_hal_tim.c
   4:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief   TIM HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          functionalities of the Timer (TIM) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Base Initialization
   9:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Base Start
  10:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Base Start Interruption
  11:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Base Start DMA
  12:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Output Compare/PWM Initialization
  13:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Output Compare/PWM Channel Configuration
  14:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Output Compare/PWM  Start
  15:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Output Compare/PWM  Start Interruption
  16:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Output Compare/PWM Start DMA
  17:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Input Capture Initialization
  18:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Input Capture Channel Configuration
  19:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Input Capture Start
  20:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Input Capture Start Interruption 
  21:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Input Capture Start DMA
  22:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time One Pulse Initialization
  23:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time One Pulse Channel Configuration
  24:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time One Pulse Start 
  25:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Encoder Interface Initialization
  26:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Encoder Interface Start
  27:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Encoder Interface Start Interruption
  28:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time Encoder Interface Start DMA
  29:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Commutation Event configuration with Interruption and DMA
  30:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time OCRef clear configuration
  31:HALLIB/Src/stm32f7xx_hal_tim.c ****   *           + Time External Clock configuration
ARM GAS  /tmp/ccrrJVNd.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_tim.c ****   @verbatim 
  33:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
  34:HALLIB/Src/stm32f7xx_hal_tim.c ****                       ##### TIMER Generic features #####
  35:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
  36:HALLIB/Src/stm32f7xx_hal_tim.c ****   [..] The Timer features include: 
  37:HALLIB/Src/stm32f7xx_hal_tim.c ****        (#) 16-bit up, down, up/down auto-reload counter.
  38:HALLIB/Src/stm32f7xx_hal_tim.c ****        (#) 16-bit programmable prescaler allowing dividing (also on the fly) the 
  39:HALLIB/Src/stm32f7xx_hal_tim.c ****            counter clock frequency either by any factor between 1 and 65536.
  40:HALLIB/Src/stm32f7xx_hal_tim.c ****        (#) Up to 4 independent channels for:
  41:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) Input Capture
  42:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) Output Compare
  43:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) PWM generation (Edge and Center-aligned Mode)
  44:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) One-pulse mode output               
  45:HALLIB/Src/stm32f7xx_hal_tim.c ****    
  46:HALLIB/Src/stm32f7xx_hal_tim.c ****                         ##### How to use this driver #####
  47:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
  48:HALLIB/Src/stm32f7xx_hal_tim.c ****     [..]
  49:HALLIB/Src/stm32f7xx_hal_tim.c ****      (#) Initialize the TIM low level resources by implementing the following functions 
  50:HALLIB/Src/stm32f7xx_hal_tim.c ****          depending from feature used :
  51:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) Time Base : HAL_TIM_Base_MspInit() 
  52:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) Input Capture : HAL_TIM_IC_MspInit()
  53:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) Output Compare : HAL_TIM_OC_MspInit()
  54:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) PWM generation : HAL_TIM_PWM_MspInit()
  55:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) One-pulse mode output : HAL_TIM_OnePulse_MspInit()
  56:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) Encoder mode output : HAL_TIM_Encoder_MspInit()
  57:HALLIB/Src/stm32f7xx_hal_tim.c ****            
  58:HALLIB/Src/stm32f7xx_hal_tim.c ****      (#) Initialize the TIM low level resources :
  59:HALLIB/Src/stm32f7xx_hal_tim.c ****         (##) Enable the TIM interface clock using __HAL_RCC_TIMx_CLK_ENABLE(); 
  60:HALLIB/Src/stm32f7xx_hal_tim.c ****         (##) TIM pins configuration
  61:HALLIB/Src/stm32f7xx_hal_tim.c ****             (+++) Enable the clock for the TIM GPIOs using the following function:
  62:HALLIB/Src/stm32f7xx_hal_tim.c ****                  __HAL_RCC_GPIOx_CLK_ENABLE();   
  63:HALLIB/Src/stm32f7xx_hal_tim.c ****             (+++) Configure these TIM pins in Alternate function mode using HAL_GPIO_Init();  
  64:HALLIB/Src/stm32f7xx_hal_tim.c **** 
  65:HALLIB/Src/stm32f7xx_hal_tim.c ****      (#) The external Clock can be configured, if needed (the default clock is the 
  66:HALLIB/Src/stm32f7xx_hal_tim.c ****          internal clock from the APBx), using the following function:
  67:HALLIB/Src/stm32f7xx_hal_tim.c ****          HAL_TIM_ConfigClockSource, the clock configuration should be done before 
  68:HALLIB/Src/stm32f7xx_hal_tim.c ****          any start function.
  69:HALLIB/Src/stm32f7xx_hal_tim.c ****   
  70:HALLIB/Src/stm32f7xx_hal_tim.c ****      (#) Configure the TIM in the desired functioning mode using one of the 
  71:HALLIB/Src/stm32f7xx_hal_tim.c ****          initialization function of this driver:
  72:HALLIB/Src/stm32f7xx_hal_tim.c ****          (++) HAL_TIM_Base_Init: to use the Timer to generate a simple time base
  73:HALLIB/Src/stm32f7xx_hal_tim.c ****          (++) HAL_TIM_OC_Init and HAL_TIM_OC_ConfigChannel: to use the Timer to generate an 
  74:HALLIB/Src/stm32f7xx_hal_tim.c ****               Output Compare signal.
  75:HALLIB/Src/stm32f7xx_hal_tim.c ****          (++) HAL_TIM_PWM_Init and HAL_TIM_PWM_ConfigChannel: to use the Timer to generate a 
  76:HALLIB/Src/stm32f7xx_hal_tim.c ****               PWM signal.
  77:HALLIB/Src/stm32f7xx_hal_tim.c ****          (++) HAL_TIM_IC_Init and HAL_TIM_IC_ConfigChannel: to use the Timer to measure an 
  78:HALLIB/Src/stm32f7xx_hal_tim.c ****               external signal.
  79:HALLIB/Src/stm32f7xx_hal_tim.c ****          (++) HAL_TIM_OnePulse_Init and HAL_TIM_OnePulse_ConfigChannel: to use the Timer 
  80:HALLIB/Src/stm32f7xx_hal_tim.c ****               in One Pulse Mode.
  81:HALLIB/Src/stm32f7xx_hal_tim.c ****          (++) HAL_TIM_Encoder_Init: to use the Timer Encoder Interface.
  82:HALLIB/Src/stm32f7xx_hal_tim.c ****          
  83:HALLIB/Src/stm32f7xx_hal_tim.c ****      (#) Activate the TIM peripheral using one of the start functions depending from the feature us
  84:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) Time Base : HAL_TIM_Base_Start(), HAL_TIM_Base_Start_DMA(), HAL_TIM_Base_Start_IT()
  85:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) Input Capture :  HAL_TIM_IC_Start(), HAL_TIM_IC_Start_DMA(), HAL_TIM_IC_Start_IT()
  86:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) Output Compare : HAL_TIM_OC_Start(), HAL_TIM_OC_Start_DMA(), HAL_TIM_OC_Start_IT()
  87:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) PWM generation : HAL_TIM_PWM_Start(), HAL_TIM_PWM_Start_DMA(), HAL_TIM_PWM_Start_IT
  88:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) One-pulse mode output : HAL_TIM_OnePulse_Start(), HAL_TIM_OnePulse_Start_IT()
ARM GAS  /tmp/ccrrJVNd.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_tim.c ****            (++) Encoder mode output : HAL_TIM_Encoder_Start(), HAL_TIM_Encoder_Start_DMA(), HAL_TIM
  90:HALLIB/Src/stm32f7xx_hal_tim.c **** 
  91:HALLIB/Src/stm32f7xx_hal_tim.c ****      (#) The DMA Burst is managed with the two following functions:
  92:HALLIB/Src/stm32f7xx_hal_tim.c ****          HAL_TIM_DMABurst_WriteStart()
  93:HALLIB/Src/stm32f7xx_hal_tim.c ****          HAL_TIM_DMABurst_ReadStart()
  94:HALLIB/Src/stm32f7xx_hal_tim.c ****   
  95:HALLIB/Src/stm32f7xx_hal_tim.c ****     *** Callback registration ***
  96:HALLIB/Src/stm32f7xx_hal_tim.c ****   =============================================
  97:HALLIB/Src/stm32f7xx_hal_tim.c **** 
  98:HALLIB/Src/stm32f7xx_hal_tim.c ****   The compilation define  USE_HAL_TIM_REGISTER_CALLBACKS when set to 1
  99:HALLIB/Src/stm32f7xx_hal_tim.c ****   allows the user to configure dynamically the driver callbacks.
 100:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 101:HALLIB/Src/stm32f7xx_hal_tim.c ****   Use Function @ref HAL_TIM_RegisterCallback() to register a callback.
 102:HALLIB/Src/stm32f7xx_hal_tim.c ****   @ref HAL_TIM_RegisterCallback() takes as parameters the HAL peripheral handle,
 103:HALLIB/Src/stm32f7xx_hal_tim.c ****   the Callback ID and a pointer to the user callback function.
 104:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 105:HALLIB/Src/stm32f7xx_hal_tim.c ****   Use function @ref HAL_TIM_UnRegisterCallback() to reset a callback to the default
 106:HALLIB/Src/stm32f7xx_hal_tim.c ****   weak function.
 107:HALLIB/Src/stm32f7xx_hal_tim.c ****   @ref HAL_TIM_UnRegisterCallback takes as parameters the HAL peripheral handle,
 108:HALLIB/Src/stm32f7xx_hal_tim.c ****   and the Callback ID.
 109:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 110:HALLIB/Src/stm32f7xx_hal_tim.c ****   These functions allow to register/unregister following callbacks:
 111:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Base_MspInitCallback       : TIM Base Msp Init Callback.
 112:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Base_MspDeInitCallback     : TIM Base Msp DeInit Callback.
 113:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) IC_MspInitCallback         : TIM IC Msp Init Callback.
 114:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) IC_MspDeInitCallback       : TIM IC Msp DeInit Callback.
 115:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) OC_MspInitCallback         : TIM OC Msp Init Callback.
 116:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) OC_MspDeInitCallback       : TIM OC Msp DeInit Callback.
 117:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) PWM_MspInitCallback        : TIM PWM Msp Init Callback.
 118:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) PWM_MspDeInitCallback      : TIM PWM Msp DeInit Callback.
 119:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) OnePulse_MspInitCallback   : TIM One Pulse Msp Init Callback.
 120:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) OnePulse_MspDeInitCallback : TIM One Pulse Msp DeInit Callback.
 121:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Encoder_MspInitCallback    : TIM Encoder Msp Init Callback.
 122:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Encoder_MspDeInitCallback  : TIM Encoder Msp DeInit Callback.
 123:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) PeriodElapsedCallback      : TIM Period Elapsed Callback.
 124:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) TriggerCallback            : TIM Trigger Callback.
 125:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) IC_CaptureCallback         : TIM Input Capture Callback.
 126:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) OC_DelayElapsedCallback    : TIM Output Compare Delay Elapsed Callback.
 127:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) PWM_PulseFinishedCallback  : TIM PWM Pulse Finished Callback.
 128:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) ErrorCallback              : TIM Error Callback.
 129:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) CommutationCallback        : TIM Commutation Callback.
 130:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) BreakCallback              : TIM Break Callback.
 131:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 132:HALLIB/Src/stm32f7xx_hal_tim.c ****   By default, after the Init and when the state is HAL_TIM_STATE_RESET
 133:HALLIB/Src/stm32f7xx_hal_tim.c ****   all interrupt callbacks are set to the corresponding weak functions:
 134:HALLIB/Src/stm32f7xx_hal_tim.c ****   examples @ref HAL_TIM_TriggerCallback(), @ref HAL_TIM_ErrorCallback().
 135:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 136:HALLIB/Src/stm32f7xx_hal_tim.c ****   Exception done for MspInit and MspDeInit functions that are reset to the legacy weak
 137:HALLIB/Src/stm32f7xx_hal_tim.c ****   functionalities in the Init/DeInit only when these callbacks are null
 138:HALLIB/Src/stm32f7xx_hal_tim.c ****   (not registered beforehand). If not, MspInit or MspDeInit are not null, the Init/DeInit
 139:HALLIB/Src/stm32f7xx_hal_tim.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 140:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 141:HALLIB/Src/stm32f7xx_hal_tim.c ****   Callbacks can be registered/unregistered in HAL_TIM_STATE_READY state only.
 142:HALLIB/Src/stm32f7xx_hal_tim.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 143:HALLIB/Src/stm32f7xx_hal_tim.c ****   in HAL_TIM_STATE_READY or HAL_TIM_STATE_RESET state,
 144:HALLIB/Src/stm32f7xx_hal_tim.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 145:HALLIB/Src/stm32f7xx_hal_tim.c ****   In that case first register the MspInit/MspDeInit user callbacks
ARM GAS  /tmp/ccrrJVNd.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_tim.c ****   using @ref HAL_TIM_RegisterCallback() before calling DeInit or Init function.
 147:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 148:HALLIB/Src/stm32f7xx_hal_tim.c ****   When The compilation define USE_HAL_TIM_REGISTER_CALLBACKS is set to 0 or
 149:HALLIB/Src/stm32f7xx_hal_tim.c ****   not defined, the callback registration feature is not available and all callbacks
 150:HALLIB/Src/stm32f7xx_hal_tim.c ****   are set to the corresponding weak functions.
 151:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 152:HALLIB/Src/stm32f7xx_hal_tim.c ****   @endverbatim
 153:HALLIB/Src/stm32f7xx_hal_tim.c ****   ******************************************************************************
 154:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @attention
 155:HALLIB/Src/stm32f7xx_hal_tim.c ****   *
 156:HALLIB/Src/stm32f7xx_hal_tim.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 157:HALLIB/Src/stm32f7xx_hal_tim.c ****   *
 158:HALLIB/Src/stm32f7xx_hal_tim.c ****   * Redistribution and use in source and binary forms, with or without modification,
 159:HALLIB/Src/stm32f7xx_hal_tim.c ****   * are permitted provided that the following conditions are met:
 160:HALLIB/Src/stm32f7xx_hal_tim.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 161:HALLIB/Src/stm32f7xx_hal_tim.c ****   *      this list of conditions and the following disclaimer.
 162:HALLIB/Src/stm32f7xx_hal_tim.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 163:HALLIB/Src/stm32f7xx_hal_tim.c ****   *      this list of conditions and the following disclaimer in the documentation
 164:HALLIB/Src/stm32f7xx_hal_tim.c ****   *      and/or other materials provided with the distribution.
 165:HALLIB/Src/stm32f7xx_hal_tim.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 166:HALLIB/Src/stm32f7xx_hal_tim.c ****   *      may be used to endorse or promote products derived from this software
 167:HALLIB/Src/stm32f7xx_hal_tim.c ****   *      without specific prior written permission.
 168:HALLIB/Src/stm32f7xx_hal_tim.c ****   *
 169:HALLIB/Src/stm32f7xx_hal_tim.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 170:HALLIB/Src/stm32f7xx_hal_tim.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 171:HALLIB/Src/stm32f7xx_hal_tim.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 172:HALLIB/Src/stm32f7xx_hal_tim.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 173:HALLIB/Src/stm32f7xx_hal_tim.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 174:HALLIB/Src/stm32f7xx_hal_tim.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 175:HALLIB/Src/stm32f7xx_hal_tim.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 176:HALLIB/Src/stm32f7xx_hal_tim.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 177:HALLIB/Src/stm32f7xx_hal_tim.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 178:HALLIB/Src/stm32f7xx_hal_tim.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 179:HALLIB/Src/stm32f7xx_hal_tim.c ****   *
 180:HALLIB/Src/stm32f7xx_hal_tim.c ****   ******************************************************************************
 181:HALLIB/Src/stm32f7xx_hal_tim.c ****   */ 
 182:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 183:HALLIB/Src/stm32f7xx_hal_tim.c **** /* Includes ------------------------------------------------------------------*/
 184:HALLIB/Src/stm32f7xx_hal_tim.c **** #include "stm32f7xx_hal.h"
 185:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 186:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @addtogroup STM32F7xx_HAL_Driver
 187:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
 188:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 189:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 190:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM TIM
 191:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief TIM HAL module driver
 192:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
 193:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 194:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 195:HALLIB/Src/stm32f7xx_hal_tim.c **** #ifdef HAL_TIM_MODULE_ENABLED
 196:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 197:HALLIB/Src/stm32f7xx_hal_tim.c **** /* Private typedef -----------------------------------------------------------*/
 198:HALLIB/Src/stm32f7xx_hal_tim.c **** /* Private define ------------------------------------------------------------*/
 199:HALLIB/Src/stm32f7xx_hal_tim.c **** /* Private macro -------------------------------------------------------------*/
 200:HALLIB/Src/stm32f7xx_hal_tim.c **** /* Private variables ---------------------------------------------------------*/
 201:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @addtogroup TIM_Private_Functions
 202:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
ARM GAS  /tmp/ccrrJVNd.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 204:HALLIB/Src/stm32f7xx_hal_tim.c **** /* Private function prototypes -----------------------------------------------*/
 205:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFil
 206:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
 207:HALLIB/Src/stm32f7xx_hal_tim.c ****                        uint32_t TIM_ICFilter);
 208:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFil
 209:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
 210:HALLIB/Src/stm32f7xx_hal_tim.c ****                        uint32_t TIM_ICFilter);
 211:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
 212:HALLIB/Src/stm32f7xx_hal_tim.c ****                        uint32_t TIM_ICFilter);
 213:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 214:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_ITRx_SetConfig(TIM_TypeDef* TIMx, uint16_t TIM_ITRx);
 215:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma);
 216:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma);
 217:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
 218:HALLIB/Src/stm32f7xx_hal_tim.c ****                                      TIM_SlaveConfigTypeDef * sSlaveConfig);
 219:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 220:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 221:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @}
 222:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 223:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 224:HALLIB/Src/stm32f7xx_hal_tim.c **** /* Exported functions --------------------------------------------------------*/
 225:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions TIM Exported Functions
 226:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
 227:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 228:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 229:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group1 Time Base functions 
 230:HALLIB/Src/stm32f7xx_hal_tim.c ****  *  @brief    Time Base functions 
 231:HALLIB/Src/stm32f7xx_hal_tim.c ****  *
 232:HALLIB/Src/stm32f7xx_hal_tim.c **** @verbatim    
 233:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
 234:HALLIB/Src/stm32f7xx_hal_tim.c ****               ##### Time Base functions #####
 235:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
 236:HALLIB/Src/stm32f7xx_hal_tim.c ****   [..]  
 237:HALLIB/Src/stm32f7xx_hal_tim.c ****     This section provides functions allowing to:
 238:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Initialize and configure the TIM base. 
 239:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) De-initialize the TIM base.
 240:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time Base.
 241:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time Base.
 242:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time Base and enable interrupt.
 243:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time Base and disable interrupt.
 244:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time Base and enable DMA transfer.
 245:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time Base and disable DMA transfer.
 246:HALLIB/Src/stm32f7xx_hal_tim.c ****  
 247:HALLIB/Src/stm32f7xx_hal_tim.c **** @endverbatim
 248:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
 249:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 250:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 251:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM Time base Unit according to the specified
 252:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         parameters in the TIM_HandleTypeDef and create the associated handle.
 253:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 254:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 255:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 256:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 257:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 258:HALLIB/Src/stm32f7xx_hal_tim.c **** { 
 259:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
ARM GAS  /tmp/ccrrJVNd.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim == NULL)
 261:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 262:HALLIB/Src/stm32f7xx_hal_tim.c ****     return HAL_ERROR;
 263:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 264:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 265:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 266:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 267:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 268:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 269:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 270:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 271:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->State == HAL_TIM_STATE_RESET)
 272:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 273:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
 274:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
 275:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 276:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 277:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy week callbacks */
 278:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_ResetCallback(htim);
 279:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 280:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(htim->Base_MspInitCallback == NULL)
 281:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 282:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 283:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 284:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
 285:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Base_MspInitCallback(htim);
 286:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
 287:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
 288:HALLIB/Src/stm32f7xx_hal_tim.c ****     HAL_TIM_Base_MspInit(htim);
 289:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 290:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 291:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the TIM state */
 292:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_BUSY;
 293:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 294:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Time Base configuration */
 295:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 296:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 297:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Initialize the TIM state*/
 298:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY;
 299:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 300:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 301:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 302:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 303:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 304:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes the TIM Base peripheral 
 305:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 306:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 307:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 308:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 309:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
 310:HALLIB/Src/stm32f7xx_hal_tim.c **** {  
 311:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 312:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 313:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 314:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
 315:HALLIB/Src/stm32f7xx_hal_tim.c ****    
 316:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
ARM GAS  /tmp/ccrrJVNd.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 318:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 319:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 320:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->Base_MspDeInitCallback == NULL)
 321:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 322:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Base_MspDeInitCallback = HAL_TIM_Base_MspDeInit;
 323:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 324:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware */
 325:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Base_MspDeInitCallback(htim);
 326:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
 327:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
 328:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_TIM_Base_MspDeInit(htim);
 329:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 330:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 331:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change TIM state */  
 332:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET; 
 333:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 334:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Release Lock */
 335:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
 336:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 337:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 338:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 339:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 340:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 341:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM Base MSP.
 342:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 343:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 344:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
 345:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 346:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
 347:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 348:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 349:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
 350:HALLIB/Src/stm32f7xx_hal_tim.c ****  
 351:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 352:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_Base_MspInit could be implemented in the user file
 353:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
 354:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 355:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 356:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 357:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes TIM Base MSP.
 358:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 359:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 360:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
 361:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 362:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
 363:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 364:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 365:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
 366:HALLIB/Src/stm32f7xx_hal_tim.c ****  
 367:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 368:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_Base_MspDeInit could be implemented in the user file
 369:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
 370:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 371:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 372:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 373:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Base generation.
ARM GAS  /tmp/ccrrJVNd.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 375:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 376:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 377:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 378:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
 379:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 380:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 381:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 382:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 383:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the TIM state */
 384:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_BUSY;
 385:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 386:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
 387:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);
 388:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 389:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change the TIM state*/
 390:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY;
 391:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 392:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
 393:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 394:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 395:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 396:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 397:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Base generation.
 398:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 399:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 400:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 401:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 402:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
 403:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 404:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 405:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 406:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 407:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the TIM state */
 408:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_BUSY;
 409:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 410:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
 411:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 412:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 413:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change the TIM state*/
 414:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY;
 415:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 416:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
 417:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 418:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 419:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 420:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 421:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Base generation in interrupt mode.
 422:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 423:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 424:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 425:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 426:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
 427:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 428:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 429:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 430:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the TIM Update interrupt */
 432:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 433:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 434:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
 435:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);
 436:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 437:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
 438:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 439:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 440:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 441:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 442:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Base generation in interrupt mode.
 443:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 444:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 445:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 446:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 447:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
 448:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 449:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 450:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 451:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Update interrupt */
 452:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 453:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 454:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
 455:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 456:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 457:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
 458:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 459:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 460:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 461:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 462:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Base generation in DMA mode.
 463:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 464:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 465:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  pData The source Buffer address.
 466:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Length The length of data to be transferred from memory to peripheral.
 467:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 468:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 469:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
 470:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 471:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 472:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_INSTANCE(htim->Instance)); 
 473:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 474:HALLIB/Src/stm32f7xx_hal_tim.c ****   if((htim->State == HAL_TIM_STATE_BUSY))
 475:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 476:HALLIB/Src/stm32f7xx_hal_tim.c ****      return HAL_BUSY;
 477:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 478:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if((htim->State == HAL_TIM_STATE_READY))
 479:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 480:HALLIB/Src/stm32f7xx_hal_tim.c ****     if((pData == 0 ) && (Length > 0)) 
 481:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 482:HALLIB/Src/stm32f7xx_hal_tim.c ****       return HAL_ERROR;                                    
 483:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 484:HALLIB/Src/stm32f7xx_hal_tim.c ****     else
 485:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 486:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
 487:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
ARM GAS  /tmp/ccrrJVNd.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
 489:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the DMA Period elapsed callback */
 490:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 491:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 492:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the DMA error callback */
 493:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = HAL_TIM_DMAError ;
 494:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 495:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the DMA Stream */
 496:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, 
 497:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 498:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the TIM Update DMA request */
 499:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 500:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 501:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
 502:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);  
 503:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 504:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
 505:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 506:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 507:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 508:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 509:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Base generation in DMA mode.
 510:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 511:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 512:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 513:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 514:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
 515:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 516:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 517:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));
 518:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 519:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Update DMA request */
 520:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 521:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 522:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
 523:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 524:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 525:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change the htim state */
 526:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
 527:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 528:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
 529:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 530:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 531:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 532:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 533:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @}
 534:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 535:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 536:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group2 Time Output Compare functions 
 537:HALLIB/Src/stm32f7xx_hal_tim.c ****  *  @brief    Time Output Compare functions 
 538:HALLIB/Src/stm32f7xx_hal_tim.c ****  *
 539:HALLIB/Src/stm32f7xx_hal_tim.c **** @verbatim    
 540:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
 541:HALLIB/Src/stm32f7xx_hal_tim.c ****                   ##### Time Output Compare functions #####
 542:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
 543:HALLIB/Src/stm32f7xx_hal_tim.c ****   [..]
 544:HALLIB/Src/stm32f7xx_hal_tim.c ****     This section provides functions allowing to:
ARM GAS  /tmp/ccrrJVNd.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Initialize and configure the TIM Output Compare. 
 546:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) De-initialize the TIM Output Compare.
 547:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time Output Compare.
 548:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time Output Compare.
 549:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time Output Compare and enable interrupt.
 550:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time Output Compare and disable interrupt.
 551:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time Output Compare and enable DMA transfer.
 552:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time Output Compare and disable DMA transfer.
 553:HALLIB/Src/stm32f7xx_hal_tim.c ****  
 554:HALLIB/Src/stm32f7xx_hal_tim.c **** @endverbatim
 555:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
 556:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 557:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 558:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM Output Compare according to the specified
 559:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         parameters in the TIM_HandleTypeDef and create the associated handle.
 560:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 561:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 562:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 563:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 564:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
 565:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 566:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
 567:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim == NULL)
 568:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 569:HALLIB/Src/stm32f7xx_hal_tim.c ****     return HAL_ERROR;
 570:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 571:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 572:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 573:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 574:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 575:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 576:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 577:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 578:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->State == HAL_TIM_STATE_RESET)
 579:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 580:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
 581:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
 582:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 583:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 584:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy week callbacks */
 585:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_ResetCallback(htim);
 586:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 587:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(htim->OC_MspInitCallback == NULL)
 588:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 589:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OC_MspInitCallback = HAL_TIM_OC_MspDeInit;
 590:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 591:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
 592:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->OC_MspInitCallback(htim);
 593:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
 594:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
 595:HALLIB/Src/stm32f7xx_hal_tim.c ****     HAL_TIM_OC_MspInit(htim);
 596:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 597:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 598:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the TIM state */
 599:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_BUSY;
 600:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 601:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Init the base time for the Output Compare */  
ARM GAS  /tmp/ccrrJVNd.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 603:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 604:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Initialize the TIM state*/
 605:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY;
 606:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 607:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 608:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 609:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 610:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 611:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes the TIM peripheral 
 612:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 613:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 614:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 615:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 616:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
 617:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 618:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 619:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 620:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 621:HALLIB/Src/stm32f7xx_hal_tim.c ****    htim->State = HAL_TIM_STATE_BUSY;
 622:HALLIB/Src/stm32f7xx_hal_tim.c ****    
 623:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
 624:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 625:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 626:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 627:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->OC_MspDeInitCallback == NULL)
 628:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 629:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->OC_MspDeInitCallback = HAL_TIM_OC_MspDeInit;
 630:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 631:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware */
 632:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->OC_MspDeInitCallback(htim);
 633:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
 634:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
 635:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_TIM_OC_MspDeInit(htim);
 636:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 637:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 638:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change TIM state */  
 639:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET; 
 640:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 641:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Release Lock */
 642:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
 643:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 644:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 645:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 646:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 647:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 648:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM Output Compare MSP.
 649:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 650:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 651:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
 652:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 653:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 654:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 655:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 656:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
 657:HALLIB/Src/stm32f7xx_hal_tim.c ****  
 658:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
ARM GAS  /tmp/ccrrJVNd.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_OC_MspInit could be implemented in the user file
 660:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
 661:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 662:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 663:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 664:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes TIM Output Compare MSP.
 665:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 666:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 667:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
 668:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 669:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
 670:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 671:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 672:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
 673:HALLIB/Src/stm32f7xx_hal_tim.c ****  
 674:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 675:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_OC_MspDeInit could be implemented in the user file
 676:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
 677:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 678:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 679:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 680:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Output Compare signal generation.
 681:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 682:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.  
 683:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channel to be enabled.
 684:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
 685:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
 686:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 687:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 688:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected   
 689:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 690:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 691:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 692:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 693:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 694:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 695:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 696:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Output compare channel */
 697:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 698:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 699:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 700:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 701:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Enable the main output */
 702:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
 703:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 704:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 705:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
 706:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim); 
 707:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 708:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
 709:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 710:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 711:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 712:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 713:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Output Compare signal generation.
 714:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 715:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
ARM GAS  /tmp/ccrrJVNd.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channel to be disabled.
 717:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
 718:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
 719:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 720:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 721:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 722:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 723:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 724:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 725:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 726:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 727:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 728:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 729:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Output compare channel */
 730:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 731:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 732:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 733:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 734:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the Main Output */
 735:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
 736:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
 737:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 738:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
 739:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);  
 740:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 741:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
 742:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 743:HALLIB/Src/stm32f7xx_hal_tim.c **** }  
 744:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 745:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 746:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Output Compare signal generation in interrupt mode.
 747:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 748:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 749:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channel to be enabled.
 750:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
 751:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
 752:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 753:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 754:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 755:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 756:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 757:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
 758:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 759:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 760:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 761:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 762:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
 763:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 764:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
 765:HALLIB/Src/stm32f7xx_hal_tim.c ****     {       
 766:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 interrupt */
 767:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 768:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 769:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 770:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 771:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
 772:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
ARM GAS  /tmp/ccrrJVNd.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2 interrupt */
 774:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 775:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 776:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 777:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 778:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
 779:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 780:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 3 interrupt */
 781:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 782:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 783:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 784:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 785:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
 786:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 787:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4 interrupt */
 788:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 789:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 790:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 791:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 792:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
 793:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 794:HALLIB/Src/stm32f7xx_hal_tim.c ****   } 
 795:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 796:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Output compare channel */
 797:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 798:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 799:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 801:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Enable the main output */
 802:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
 803:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 804:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 805:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
 806:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);
 807:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 808:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
 809:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 810:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 811:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 812:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 813:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Output Compare signal generation in interrupt mode.
 814:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 815:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 816:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channel to be disabled.
 817:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
 818:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
 819:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 820:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 821:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 822:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 823:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 824:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
 825:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 826:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 827:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 828:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 829:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
ARM GAS  /tmp/ccrrJVNd.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 831:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
 832:HALLIB/Src/stm32f7xx_hal_tim.c ****     {       
 833:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 interrupt */
 834:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 835:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 836:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 837:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 838:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
 839:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 840:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 interrupt */
 841:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 842:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 843:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 844:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 845:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
 846:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 847:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3 interrupt */
 848:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 849:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 850:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 851:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 852:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
 853:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 854:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4 interrupt */
 855:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 856:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 857:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 858:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 859:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
 860:HALLIB/Src/stm32f7xx_hal_tim.c ****     break; 
 861:HALLIB/Src/stm32f7xx_hal_tim.c ****   } 
 862:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 863:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Output compare channel */
 864:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
 865:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 866:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 867:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 868:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the Main Output */
 869:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
 870:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 871:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 872:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
 873:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);  
 874:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 875:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
 876:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 877:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 878:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 879:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 880:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Output Compare signal generation in DMA mode.
 881:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 882:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
 883:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channel to be enabled.
 884:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
 885:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
 886:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
ARM GAS  /tmp/ccrrJVNd.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 888:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 889:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  pData The source Buffer address.
 890:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Length The length of data to be transferred from memory to TIM peripheral
 891:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
 892:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
 893:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, 
 894:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 895:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 896:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 897:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 898:HALLIB/Src/stm32f7xx_hal_tim.c ****   if((htim->State == HAL_TIM_STATE_BUSY))
 899:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 900:HALLIB/Src/stm32f7xx_hal_tim.c ****      return HAL_BUSY;
 901:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 902:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if((htim->State == HAL_TIM_STATE_READY))
 903:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 904:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(((uint32_t)pData == 0 ) && (Length > 0)) 
 905:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 906:HALLIB/Src/stm32f7xx_hal_tim.c ****       return HAL_ERROR;                                    
 907:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 908:HALLIB/Src/stm32f7xx_hal_tim.c ****     else
 909:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 910:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
 911:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 912:HALLIB/Src/stm32f7xx_hal_tim.c ****   }    
 913:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
 914:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 915:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
 916:HALLIB/Src/stm32f7xx_hal_tim.c ****     {      
 917:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
 918:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
 919:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 920:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
 921:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
 922:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 923:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
 924:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1
 925:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 926:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 DMA request */
 927:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 928:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 929:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 930:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 931:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
 932:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 933:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
 934:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
 935:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 936:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
 937:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
 938:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 939:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
 940:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2
 941:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 942:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2 DMA request */
 943:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
ARM GAS  /tmp/ccrrJVNd.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 945:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 946:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 947:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
 948:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 949:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
 950:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
 951:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 952:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
 953:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
 954:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 955:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
 956:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3
 957:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 958:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 3 DMA request */
 959:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 960:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 961:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 962:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 963:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
 964:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 965:HALLIB/Src/stm32f7xx_hal_tim.c ****      /* Set the DMA Period elapsed callback */
 966:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
 967:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 968:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
 969:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
 970:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 971:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
 972:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4
 973:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 974:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4 DMA request */
 975:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 976:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 977:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 978:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 979:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
 980:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
 981:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 982:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 983:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Output compare channel */
 984:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 985:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 986:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 987:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 988:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Enable the main output */
 989:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
 990:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
 991:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 992:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
 993:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim); 
 994:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 995:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
 996:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
 997:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 998:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 999:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1000:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Output Compare signal generation in DMA mode.
ARM GAS  /tmp/ccrrJVNd.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1002:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1003:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channel to be disabled.
1004:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1005:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1006:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1007:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1008:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1009:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1010:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1011:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
1012:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1013:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1014:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1015:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1016:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
1017:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1018:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
1019:HALLIB/Src/stm32f7xx_hal_tim.c ****     {       
1020:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 DMA request */
1021:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
1022:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1023:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1024:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1025:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
1026:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1027:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 DMA request */
1028:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
1029:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1030:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1031:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1032:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
1033:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1034:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3 DMA request */
1035:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
1036:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1037:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1038:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1039:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
1040:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1041:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4 interrupt */
1042:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
1043:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1044:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1045:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1046:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
1047:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1048:HALLIB/Src/stm32f7xx_hal_tim.c ****   } 
1049:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1050:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Output compare channel */
1051:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
1052:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1053:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
1054:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1055:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the Main Output */
1056:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
1057:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
ARM GAS  /tmp/ccrrJVNd.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1059:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
1060:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1061:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1062:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change the htim state */
1063:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
1064:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1065:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
1066:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1067:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1068:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1069:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1070:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @}
1071:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1072:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1073:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group3 Time PWM functions 
1074:HALLIB/Src/stm32f7xx_hal_tim.c ****  *  @brief    Time PWM functions 
1075:HALLIB/Src/stm32f7xx_hal_tim.c ****  *
1076:HALLIB/Src/stm32f7xx_hal_tim.c **** @verbatim    
1077:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
1078:HALLIB/Src/stm32f7xx_hal_tim.c ****                           ##### Time PWM functions #####
1079:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
1080:HALLIB/Src/stm32f7xx_hal_tim.c ****   [..]  
1081:HALLIB/Src/stm32f7xx_hal_tim.c ****     This section provides functions allowing to:
1082:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Initialize and configure the TIM OPWM. 
1083:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) De-initialize the TIM PWM.
1084:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time PWM.
1085:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time PWM.
1086:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time PWM and enable interrupt.
1087:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time PWM and disable interrupt.
1088:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time PWM and enable DMA transfer.
1089:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time PWM and disable DMA transfer.
1090:HALLIB/Src/stm32f7xx_hal_tim.c ****  
1091:HALLIB/Src/stm32f7xx_hal_tim.c **** @endverbatim
1092:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
1093:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1094:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1095:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM PWM Time Base according to the specified
1096:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         parameters in the TIM_HandleTypeDef and create the associated handle.
1097:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1098:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1099:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1100:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1101:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
1102:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1103:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
1104:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim == NULL)
1105:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1106:HALLIB/Src/stm32f7xx_hal_tim.c ****     return HAL_ERROR;
1107:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1108:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1109:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1110:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
1111:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
1112:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
1113:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
1114:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->State == HAL_TIM_STATE_RESET)
1116:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1117:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
1118:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
1119:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1120:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
1121:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy week callbacks */
1122:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_ResetCallback(htim);
1123:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1124:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(htim->PWM_MspInitCallback == NULL)
1125:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1126:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
1127:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1128:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
1129:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->PWM_MspInitCallback(htim);
1130:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
1131:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
1132:HALLIB/Src/stm32f7xx_hal_tim.c ****     HAL_TIM_PWM_MspInit(htim);
1133:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
1134:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1135:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the TIM state */
1136:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_BUSY;  
1137:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1138:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Init the base time for the PWM */  
1139:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance, &htim->Init); 
1140:HALLIB/Src/stm32f7xx_hal_tim.c ****    
1141:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Initialize the TIM state*/
1142:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY;
1143:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1144:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1145:HALLIB/Src/stm32f7xx_hal_tim.c **** }  
1146:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1147:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1148:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes the TIM peripheral 
1149:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1150:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1151:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1152:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1153:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
1154:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1155:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1156:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
1157:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1158:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
1159:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1160:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
1161:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1162:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1163:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
1164:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->PWM_MspDeInitCallback == NULL)
1165:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1166:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->PWM_MspDeInitCallback = HAL_TIM_PWM_MspDeInit;
1167:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1168:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware */
1169:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->PWM_MspDeInitCallback(htim);
1170:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
1171:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
ARM GAS  /tmp/ccrrJVNd.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_TIM_PWM_MspDeInit(htim);
1173:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
1174:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1175:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change TIM state */  
1176:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET; 
1177:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1178:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Release Lock */
1179:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
1180:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1181:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1182:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1183:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1184:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1185:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM PWM MSP.
1186:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1187:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1188:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
1189:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1190:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
1191:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1192:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
1193:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
1194:HALLIB/Src/stm32f7xx_hal_tim.c ****  
1195:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1196:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_PWM_MspInit could be implemented in the user file
1197:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
1198:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1199:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1200:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1201:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes TIM PWM MSP.
1202:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1203:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1204:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
1205:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1206:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
1207:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1208:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
1209:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
1210:HALLIB/Src/stm32f7xx_hal_tim.c ****  
1211:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1212:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_PWM_MspDeInit could be implemented in the user file
1213:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
1214:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1215:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1216:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1217:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the PWM signal generation.
1218:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1219:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1220:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
1221:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1222:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1223:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1224:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1225:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1226:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1227:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1228:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
ARM GAS  /tmp/ccrrJVNd.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1230:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1231:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1232:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1233:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Capture compare channel */
1234:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
1235:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1236:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
1237:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1238:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Enable the main output */
1239:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
1240:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1241:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1242:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
1243:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);
1244:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1245:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
1246:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1247:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
1248:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1249:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1250:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the PWM signal generation.
1251:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1252:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1253:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled.
1254:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1255:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1256:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1257:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1258:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1259:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1260:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1261:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
1262:HALLIB/Src/stm32f7xx_hal_tim.c **** { 
1263:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1264:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1265:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1266:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Capture compare channel */
1267:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
1268:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1269:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
1270:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1271:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the Main Output */
1272:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
1273:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1274:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1275:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
1276:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1277:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1278:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change the htim state */
1279:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
1280:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1281:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
1282:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1283:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
1284:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1285:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
ARM GAS  /tmp/ccrrJVNd.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the PWM signal generation in interrupt mode.
1287:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1288:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1289:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channel to be enabled.
1290:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1291:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1292:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1293:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1294:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1295:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1296:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1297:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
1298:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1299:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1300:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1301:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1302:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
1303:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1304:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
1305:HALLIB/Src/stm32f7xx_hal_tim.c ****     {       
1306:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 interrupt */
1307:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
1308:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1309:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1310:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1311:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
1312:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1313:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2 interrupt */
1314:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
1315:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1316:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1317:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1318:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
1319:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1320:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 3 interrupt */
1321:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
1322:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1323:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1324:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1325:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
1326:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1327:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4 interrupt */
1328:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
1329:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1330:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1331:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1332:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
1333:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1334:HALLIB/Src/stm32f7xx_hal_tim.c ****   } 
1335:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1336:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Capture compare channel */
1337:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
1338:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1339:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
1340:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1341:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Enable the main output */
1342:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
ARM GAS  /tmp/ccrrJVNd.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1344:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1345:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
1346:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);
1347:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1348:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
1349:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1350:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
1351:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1352:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1353:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the PWM signal generation in interrupt mode.
1354:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1355:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1356:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled.
1357:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1358:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1359:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1360:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1361:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1362:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1363:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1364:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
1365:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1366:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1367:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1368:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1369:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
1370:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1371:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
1372:HALLIB/Src/stm32f7xx_hal_tim.c ****     {       
1373:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 interrupt */
1374:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
1375:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1376:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1377:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1378:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
1379:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1380:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 interrupt */
1381:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
1382:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1383:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1384:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1385:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
1386:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1387:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3 interrupt */
1388:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
1389:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1390:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1391:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1392:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
1393:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1394:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4 interrupt */
1395:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
1396:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1397:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1398:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1399:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
ARM GAS  /tmp/ccrrJVNd.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_tim.c ****     break; 
1401:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1402:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1403:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Capture compare channel */
1404:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
1405:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1406:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
1407:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1408:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the Main Output */
1409:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
1410:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1411:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1412:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
1413:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1414:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1415:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
1416:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1417:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
1418:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1419:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1420:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM PWM signal generation in DMA mode.
1421:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1422:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1423:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
1424:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1425:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1426:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1427:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1428:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1429:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  pData The source Buffer address.
1430:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Length The length of data to be transferred from memory to TIM peripheral
1431:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1432:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1433:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData,
1434:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1435:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1436:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1437:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1438:HALLIB/Src/stm32f7xx_hal_tim.c ****   if((htim->State == HAL_TIM_STATE_BUSY))
1439:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1440:HALLIB/Src/stm32f7xx_hal_tim.c ****      return HAL_BUSY;
1441:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1442:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if((htim->State == HAL_TIM_STATE_READY))
1443:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1444:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(((uint32_t)pData == 0 ) && (Length > 0)) 
1445:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1446:HALLIB/Src/stm32f7xx_hal_tim.c ****       return HAL_ERROR;                                    
1447:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1448:HALLIB/Src/stm32f7xx_hal_tim.c ****     else
1449:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1450:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
1451:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1452:HALLIB/Src/stm32f7xx_hal_tim.c ****   }    
1453:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
1454:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1455:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
1456:HALLIB/Src/stm32f7xx_hal_tim.c ****     {      
ARM GAS  /tmp/ccrrJVNd.s 			page 27


1457:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
1458:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
1459:HALLIB/Src/stm32f7xx_hal_tim.c ****      
1460:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
1461:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
1462:HALLIB/Src/stm32f7xx_hal_tim.c ****       
1463:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
1464:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1
1465:HALLIB/Src/stm32f7xx_hal_tim.c ****       
1466:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 DMA request */
1467:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
1468:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1469:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1470:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1471:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
1472:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1473:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
1474:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
1475:HALLIB/Src/stm32f7xx_hal_tim.c ****      
1476:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
1477:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
1478:HALLIB/Src/stm32f7xx_hal_tim.c ****       
1479:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
1480:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2
1481:HALLIB/Src/stm32f7xx_hal_tim.c ****       
1482:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2 DMA request */
1483:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
1484:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1485:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1486:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1487:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
1488:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1489:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
1490:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
1491:HALLIB/Src/stm32f7xx_hal_tim.c ****      
1492:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
1493:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
1494:HALLIB/Src/stm32f7xx_hal_tim.c ****       
1495:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
1496:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3
1497:HALLIB/Src/stm32f7xx_hal_tim.c ****       
1498:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Output Capture/Compare 3 request */
1499:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
1500:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1501:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1502:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1503:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
1504:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1505:HALLIB/Src/stm32f7xx_hal_tim.c ****      /* Set the DMA Period elapsed callback */
1506:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
1507:HALLIB/Src/stm32f7xx_hal_tim.c ****      
1508:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
1509:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
1510:HALLIB/Src/stm32f7xx_hal_tim.c ****       
1511:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
1512:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4
1513:HALLIB/Src/stm32f7xx_hal_tim.c ****       
ARM GAS  /tmp/ccrrJVNd.s 			page 28


1514:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4 DMA request */
1515:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
1516:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1517:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1518:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1519:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
1520:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1521:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1522:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1523:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Capture compare channel */
1524:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
1525:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1526:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
1527:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1528:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Enable the main output */
1529:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
1530:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1531:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1532:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
1533:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim); 
1534:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1535:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
1536:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1537:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1538:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1539:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1540:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM PWM signal generation in DMA mode.
1541:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1542:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1543:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled.
1544:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1545:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1546:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1547:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1548:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1549:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1550:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1551:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
1552:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1553:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1554:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1555:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1556:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
1557:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1558:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
1559:HALLIB/Src/stm32f7xx_hal_tim.c ****     {       
1560:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 DMA request */
1561:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
1562:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1563:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1564:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1565:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
1566:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1567:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 DMA request */
1568:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
1569:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1570:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
ARM GAS  /tmp/ccrrJVNd.s 			page 29


1571:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1572:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
1573:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1574:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3 DMA request */
1575:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
1576:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1577:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1578:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1579:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
1580:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1581:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4 interrupt */
1582:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
1583:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1584:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1585:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1586:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
1587:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1588:HALLIB/Src/stm32f7xx_hal_tim.c ****   } 
1589:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1590:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Capture compare channel */
1591:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
1592:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1593:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
1594:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1595:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the Main Output */
1596:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
1597:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1598:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1599:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
1600:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1601:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1602:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change the htim state */
1603:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
1604:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1605:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
1606:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1607:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1608:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1609:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1610:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @}
1611:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1612:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1613:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group4 Time Input Capture functions 
1614:HALLIB/Src/stm32f7xx_hal_tim.c ****  *  @brief    Time Input Capture functions 
1615:HALLIB/Src/stm32f7xx_hal_tim.c ****  *
1616:HALLIB/Src/stm32f7xx_hal_tim.c **** @verbatim    
1617:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
1618:HALLIB/Src/stm32f7xx_hal_tim.c ****               ##### Time Input Capture functions #####
1619:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
1620:HALLIB/Src/stm32f7xx_hal_tim.c ****  [..]  
1621:HALLIB/Src/stm32f7xx_hal_tim.c ****    This section provides functions allowing to:
1622:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Initialize and configure the TIM Input Capture. 
1623:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) De-initialize the TIM Input Capture.
1624:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Start the Time Input Capture.
1625:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Stop the Time Input Capture.
1626:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Start the Time Input Capture and enable interrupt.
1627:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Stop the Time Input Capture and disable interrupt.
ARM GAS  /tmp/ccrrJVNd.s 			page 30


1628:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Start the Time Input Capture and enable DMA transfer.
1629:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Stop the Time Input Capture and disable DMA transfer.
1630:HALLIB/Src/stm32f7xx_hal_tim.c ****  
1631:HALLIB/Src/stm32f7xx_hal_tim.c **** @endverbatim
1632:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
1633:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1634:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1635:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM Input Capture Time base according to the specified
1636:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         parameters in the TIM_HandleTypeDef and create the associated handle.
1637:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1638:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1639:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1640:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1641:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
1642:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1643:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
1644:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim == NULL)
1645:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1646:HALLIB/Src/stm32f7xx_hal_tim.c ****     return HAL_ERROR;
1647:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1648:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1649:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1650:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
1651:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
1652:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 
1653:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
1654:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1655:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->State == HAL_TIM_STATE_RESET)
1656:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1657:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
1658:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
1659:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1660:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
1661:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy week callbacks */
1662:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_ResetCallback(htim);
1663:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1664:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(htim->IC_MspInitCallback == NULL)
1665:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1666:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
1667:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1668:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
1669:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->IC_MspInitCallback(htim);
1670:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
1671:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
1672:HALLIB/Src/stm32f7xx_hal_tim.c ****     HAL_TIM_IC_MspInit(htim);
1673:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
1674:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1675:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1676:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the TIM state */
1677:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_BUSY;   
1678:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1679:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Init the base time for the input capture */  
1680:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance, &htim->Init); 
1681:HALLIB/Src/stm32f7xx_hal_tim.c ****    
1682:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Initialize the TIM state*/
1683:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY;
1684:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 31


1685:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1686:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1687:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1688:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1689:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes the TIM peripheral 
1690:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1691:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1692:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1693:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1694:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
1695:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1696:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1697:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
1698:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1699:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
1700:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1701:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
1702:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1703:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1704:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
1705:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->IC_MspDeInitCallback == NULL)
1706:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1707:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->IC_MspDeInitCallback = HAL_TIM_IC_MspDeInit;
1708:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1709:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware */
1710:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->IC_MspDeInitCallback(htim);
1711:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
1712:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
1713:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_TIM_IC_MspDeInit(htim);
1714:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
1715:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1716:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change TIM state */  
1717:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET;
1718:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1719:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Release Lock */
1720:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
1721:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1722:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1723:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1724:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1725:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1726:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM INput Capture MSP.
1727:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1728:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1729:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
1730:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1731:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
1732:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1733:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
1734:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
1735:HALLIB/Src/stm32f7xx_hal_tim.c ****  
1736:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1737:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_IC_MspInit could be implemented in the user file
1738:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
1739:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1740:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1741:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
ARM GAS  /tmp/ccrrJVNd.s 			page 32


1742:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes TIM Input Capture MSP.
1743:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1744:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1745:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
1746:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1747:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
1748:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1749:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
1750:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
1751:HALLIB/Src/stm32f7xx_hal_tim.c ****    
1752:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1753:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_IC_MspDeInit could be implemented in the user file
1754:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
1755:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1756:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1757:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1758:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Input Capture measurement.
1759:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1760:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1761:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
1762:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1763:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1764:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1765:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1766:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1767:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1768:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1769:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Start (TIM_HandleTypeDef *htim, uint32_t Channel)
1770:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1771:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1772:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1773:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1774:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Input Capture channel */
1775:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
1776:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1777:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
1778:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);  
1779:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1780:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
1781:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;  
1782:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
1783:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1784:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1785:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Input Capture measurement.
1786:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1787:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1788:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled.
1789:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1790:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1791:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1792:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1793:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1794:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1795:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1796:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
1797:HALLIB/Src/stm32f7xx_hal_tim.c **** { 
1798:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
ARM GAS  /tmp/ccrrJVNd.s 			page 33


1799:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1800:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1801:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Input Capture channel */
1802:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
1803:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1804:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
1805:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim); 
1806:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1807:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
1808:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1809:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1810:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1811:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1812:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Input Capture measurement in interrupt mode.
1813:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1814:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1815:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
1816:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1817:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1818:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1819:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1820:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1821:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1822:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1823:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
1824:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1825:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1826:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1827:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1828:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
1829:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1830:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
1831:HALLIB/Src/stm32f7xx_hal_tim.c ****     {       
1832:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 interrupt */
1833:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
1834:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1835:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1836:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1837:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
1838:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1839:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2 interrupt */
1840:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
1841:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1842:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1843:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1844:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
1845:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1846:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 3 interrupt */
1847:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
1848:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1849:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1850:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1851:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
1852:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1853:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4 interrupt */
1854:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
1855:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
ARM GAS  /tmp/ccrrJVNd.s 			page 34


1856:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1857:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1858:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
1859:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1860:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
1861:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Input Capture channel */
1862:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
1863:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1864:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
1865:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);  
1866:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1867:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
1868:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;  
1869:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
1870:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1871:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1872:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Input Capture measurement in interrupt mode.
1873:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1874:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1875:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled.
1876:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1877:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1878:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1879:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1880:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1881:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1882:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1883:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
1884:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1885:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1886:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1887:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1888:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
1889:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1890:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
1891:HALLIB/Src/stm32f7xx_hal_tim.c ****     {       
1892:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 interrupt */
1893:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
1894:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1895:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1896:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1897:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
1898:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1899:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 interrupt */
1900:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
1901:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1902:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1903:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1904:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
1905:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1906:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3 interrupt */
1907:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
1908:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1909:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1910:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1911:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
1912:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
ARM GAS  /tmp/ccrrJVNd.s 			page 35


1913:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4 interrupt */
1914:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
1915:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1916:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1917:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1918:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
1919:HALLIB/Src/stm32f7xx_hal_tim.c ****     break; 
1920:HALLIB/Src/stm32f7xx_hal_tim.c ****   } 
1921:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1922:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Input Capture channel */
1923:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
1924:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1925:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
1926:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim); 
1927:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1928:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
1929:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
1930:HALLIB/Src/stm32f7xx_hal_tim.c **** }
1931:HALLIB/Src/stm32f7xx_hal_tim.c **** 
1932:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
1933:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Input Capture measurement on in DMA mode.
1934:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
1935:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
1936:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
1937:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
1938:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1939:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1940:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1941:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1942:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  pData The destination Buffer address.
1943:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Length The length of data to be transferred from TIM peripheral to memory.
1944:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
1945:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
1946:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, 
1947:HALLIB/Src/stm32f7xx_hal_tim.c **** {
1948:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
1949:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1950:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
1951:HALLIB/Src/stm32f7xx_hal_tim.c ****   
1952:HALLIB/Src/stm32f7xx_hal_tim.c ****   if((htim->State == HAL_TIM_STATE_BUSY))
1953:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1954:HALLIB/Src/stm32f7xx_hal_tim.c ****      return HAL_BUSY;
1955:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
1956:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if((htim->State == HAL_TIM_STATE_READY))
1957:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
1958:HALLIB/Src/stm32f7xx_hal_tim.c ****     if((pData == 0 ) && (Length > 0)) 
1959:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1960:HALLIB/Src/stm32f7xx_hal_tim.c ****       return HAL_ERROR;                                    
1961:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1962:HALLIB/Src/stm32f7xx_hal_tim.c ****     else
1963:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1964:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
1965:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1966:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
1967:HALLIB/Src/stm32f7xx_hal_tim.c ****    
1968:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
1969:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
ARM GAS  /tmp/ccrrJVNd.s 			page 36


1970:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
1971:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1972:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
1973:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
1974:HALLIB/Src/stm32f7xx_hal_tim.c ****      
1975:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
1976:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
1977:HALLIB/Src/stm32f7xx_hal_tim.c ****       
1978:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
1979:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData
1980:HALLIB/Src/stm32f7xx_hal_tim.c ****       
1981:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 DMA request */      
1982:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
1983:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
1984:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
1985:HALLIB/Src/stm32f7xx_hal_tim.c ****     
1986:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
1987:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
1988:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
1989:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
1990:HALLIB/Src/stm32f7xx_hal_tim.c ****      
1991:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
1992:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
1993:HALLIB/Src/stm32f7xx_hal_tim.c ****       
1994:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
1995:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData
1996:HALLIB/Src/stm32f7xx_hal_tim.c ****       
1997:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2  DMA request */
1998:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
1999:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2000:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2001:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2002:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
2003:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2004:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
2005:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
2006:HALLIB/Src/stm32f7xx_hal_tim.c ****      
2007:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
2008:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
2009:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2010:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
2011:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData
2012:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2013:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 3  DMA request */
2014:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
2015:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2016:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2017:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2018:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
2019:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2020:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
2021:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
2022:HALLIB/Src/stm32f7xx_hal_tim.c ****      
2023:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
2024:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
2025:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2026:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
ARM GAS  /tmp/ccrrJVNd.s 			page 37


2027:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData
2028:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2029:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4  DMA request */
2030:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
2031:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2032:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2033:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2034:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
2035:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2036:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2037:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2038:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Input Capture channel */
2039:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
2040:HALLIB/Src/stm32f7xx_hal_tim.c ****    
2041:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
2042:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim); 
2043:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2044:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2045:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2046:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2047:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2048:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2049:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Input Capture measurement on in DMA mode.
2050:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2051:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2052:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled.
2053:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
2054:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2055:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2056:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
2057:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
2058:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2059:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2060:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
2061:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2062:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
2063:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
2064:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
2065:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2066:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
2067:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2068:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
2069:HALLIB/Src/stm32f7xx_hal_tim.c ****     {       
2070:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 DMA request */
2071:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
2072:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2073:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2074:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2075:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
2076:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2077:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 DMA request */
2078:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
2079:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2080:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2081:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2082:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
2083:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
ARM GAS  /tmp/ccrrJVNd.s 			page 38


2084:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3  DMA request */
2085:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
2086:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2087:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2088:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2089:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
2090:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2091:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4  DMA request */
2092:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
2093:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2094:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2095:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2096:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
2097:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2098:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2099:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2100:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Input Capture channel */
2101:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
2102:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2103:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
2104:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim); 
2105:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2106:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change the htim state */
2107:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
2108:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2109:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2110:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2111:HALLIB/Src/stm32f7xx_hal_tim.c **** }  
2112:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2113:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @}
2114:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2115:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2116:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group5 Time One Pulse functions 
2117:HALLIB/Src/stm32f7xx_hal_tim.c ****  *  @brief    Time One Pulse functions 
2118:HALLIB/Src/stm32f7xx_hal_tim.c ****  *
2119:HALLIB/Src/stm32f7xx_hal_tim.c **** @verbatim    
2120:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
2121:HALLIB/Src/stm32f7xx_hal_tim.c ****                         ##### Time One Pulse functions #####
2122:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
2123:HALLIB/Src/stm32f7xx_hal_tim.c ****   [..]  
2124:HALLIB/Src/stm32f7xx_hal_tim.c ****     This section provides functions allowing to:
2125:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Initialize and configure the TIM One Pulse. 
2126:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) De-initialize the TIM One Pulse.
2127:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time One Pulse.
2128:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time One Pulse.
2129:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time One Pulse and enable interrupt.
2130:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time One Pulse and disable interrupt.
2131:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time One Pulse and enable DMA transfer.
2132:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time One Pulse and disable DMA transfer.
2133:HALLIB/Src/stm32f7xx_hal_tim.c ****  
2134:HALLIB/Src/stm32f7xx_hal_tim.c **** @endverbatim
2135:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
2136:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2137:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2138:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM One Pulse Time Base according to the specified
2139:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         parameters in the TIM_HandleTypeDef and create the associated handle.
2140:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
ARM GAS  /tmp/ccrrJVNd.s 			page 39


2141:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2142:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  OnePulseMode Select the One pulse mode.
2143:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         This parameter can be one of the following values:
2144:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
2145:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
2146:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2147:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2148:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
2149:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2150:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
2151:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim == NULL)
2152:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2153:HALLIB/Src/stm32f7xx_hal_tim.c ****     return HAL_ERROR;
2154:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2155:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2156:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
2157:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
2158:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
2159:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
2160:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_OPM_MODE(OnePulseMode));
2161:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
2162:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2163:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->State == HAL_TIM_STATE_RESET)
2164:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2165:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
2166:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
2167:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2168:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
2169:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy week callbacks */
2170:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_ResetCallback(htim);
2171:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2172:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(htim->OnePulse_MspDeInitCallback == NULL)
2173:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2174:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OnePulse_MspDeInitCallback = HAL_TIM_OnePulse_MspInit;
2175:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2176:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
2177:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->OnePulse_MspDeInitCallback(htim);
2178:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
2179:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
2180:HALLIB/Src/stm32f7xx_hal_tim.c ****     HAL_TIM_OnePulse_MspInit(htim);
2181:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
2182:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2183:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2184:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the TIM state */
2185:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_BUSY;  
2186:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2187:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Configure the Time base in the One Pulse Mode */
2188:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance, &htim->Init);
2189:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2190:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the OPM Bit */
2191:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->CR1 &= ~TIM_CR1_OPM;
2192:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2193:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Configure the OPM Mode */
2194:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->CR1 |= OnePulseMode;
2195:HALLIB/Src/stm32f7xx_hal_tim.c ****    
2196:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Initialize the TIM state*/
2197:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY;
ARM GAS  /tmp/ccrrJVNd.s 			page 40


2198:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2199:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2200:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2201:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2202:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2203:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes the TIM One Pulse  
2204:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2205:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2206:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2207:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2208:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
2209:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2210:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
2211:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
2212:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2213:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
2214:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2215:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
2216:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2217:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2218:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
2219:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->OnePulse_MspDeInitCallback == NULL)
2220:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2221:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->OnePulse_MspDeInitCallback = HAL_TIM_OnePulse_MspDeInit;
2222:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2223:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware */
2224:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->OnePulse_MspDeInitCallback(htim);
2225:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
2226:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
2227:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_TIM_OnePulse_MspDeInit(htim);
2228:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
2229:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2230:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change TIM state */  
2231:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET;
2232:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2233:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Release Lock */
2234:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
2235:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2236:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2237:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2238:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2239:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2240:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM One Pulse MSP.
2241:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2242:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2243:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
2244:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2245:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
2246:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2247:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2248:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
2249:HALLIB/Src/stm32f7xx_hal_tim.c ****  
2250:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2251:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_OnePulse_MspInit could be implemented in the user file
2252:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
2253:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2254:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 41


2255:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2256:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes TIM One Pulse MSP.
2257:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2258:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2259:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
2260:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2261:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
2262:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2263:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2264:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
2265:HALLIB/Src/stm32f7xx_hal_tim.c ****  
2266:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2267:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
2268:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
2269:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2270:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2271:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2272:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM One Pulse signal generation.
2273:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2274:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2275:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  OutputChannel  TIM Channels to be enabled.
2276:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
2277:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2278:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2279:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2280:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2281:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
2282:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2283:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2284:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(OutputChannel);
2285:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2286:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Capture compare and the Input Capture channels 
2287:HALLIB/Src/stm32f7xx_hal_tim.c ****     (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2
2288:HALLIB/Src/stm32f7xx_hal_tim.c ****     if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
2289:HALLIB/Src/stm32f7xx_hal_tim.c ****     if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
2290:HALLIB/Src/stm32f7xx_hal_tim.c ****     in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together 
2291:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2292:HALLIB/Src/stm32f7xx_hal_tim.c ****     No need to enable the counter, it's enabled automatically by hardware 
2293:HALLIB/Src/stm32f7xx_hal_tim.c ****     (the counter starts in response to a stimulus and generate a pulse */
2294:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2295:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
2296:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
2297:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2298:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
2299:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2300:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Enable the main output */
2301:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
2302:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2303:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2304:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2305:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2306:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2307:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2308:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2309:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM One Pulse signal generation.
2310:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2311:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
ARM GAS  /tmp/ccrrJVNd.s 			page 42


2312:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  OutputChannel  TIM Channels to be disable.
2313:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
2314:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2315:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2316:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2317:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2318:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
2319:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2320:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2321:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(OutputChannel);
2322:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2323:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Capture compare and the Input Capture channels 
2324:HALLIB/Src/stm32f7xx_hal_tim.c ****   (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
2325:HALLIB/Src/stm32f7xx_hal_tim.c ****   if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
2326:HALLIB/Src/stm32f7xx_hal_tim.c ****   if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
2327:HALLIB/Src/stm32f7xx_hal_tim.c ****   in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
2328:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2329:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
2330:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
2331:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2332:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
2333:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2334:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the Main Output */
2335:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
2336:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2337:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2338:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
2339:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim); 
2340:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2341:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2342:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2343:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2344:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2345:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2346:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM One Pulse signal generation in interrupt mode.
2347:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2348:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2349:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  OutputChannel  TIM Channels to be enabled.
2350:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
2351:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2352:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2353:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2354:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2355:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
2356:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2357:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Capture compare and the Input Capture channels 
2358:HALLIB/Src/stm32f7xx_hal_tim.c ****     (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2
2359:HALLIB/Src/stm32f7xx_hal_tim.c ****     if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
2360:HALLIB/Src/stm32f7xx_hal_tim.c ****     if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
2361:HALLIB/Src/stm32f7xx_hal_tim.c ****     in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together 
2362:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2363:HALLIB/Src/stm32f7xx_hal_tim.c ****     No need to enable the counter, it's enabled automatically by hardware 
2364:HALLIB/Src/stm32f7xx_hal_tim.c ****     (the counter starts in response to a stimulus and generate a pulse */
2365:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2366:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2367:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(OutputChannel);
2368:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 43


2369:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the TIM Capture/Compare 1 interrupt */
2370:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
2371:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2372:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the TIM Capture/Compare 2 interrupt */
2373:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
2374:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2375:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
2376:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
2377:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2378:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
2379:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2380:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Enable the main output */
2381:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
2382:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2383:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2384:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2385:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2386:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2387:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2388:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2389:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM One Pulse signal generation in interrupt mode.
2390:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2391:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2392:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  OutputChannel  TIM Channels to be enabled.
2393:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
2394:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2395:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2396:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2397:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2398:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
2399:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2400:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2401:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(OutputChannel);
2402:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2403:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Capture/Compare 1 interrupt */
2404:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);  
2405:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2406:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Capture/Compare 2 interrupt */
2407:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
2408:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2409:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Capture compare and the Input Capture channels 
2410:HALLIB/Src/stm32f7xx_hal_tim.c ****   (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
2411:HALLIB/Src/stm32f7xx_hal_tim.c ****   if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
2412:HALLIB/Src/stm32f7xx_hal_tim.c ****   if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
2413:HALLIB/Src/stm32f7xx_hal_tim.c ****   in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */  
2414:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
2415:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
2416:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2417:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
2418:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2419:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the Main Output */
2420:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
2421:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2422:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2423:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
2424:HALLIB/Src/stm32f7xx_hal_tim.c ****    __HAL_TIM_DISABLE(htim);  
2425:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 44


2426:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2427:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2428:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2429:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2430:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2431:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @}
2432:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2433:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2434:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group6 Time Encoder functions 
2435:HALLIB/Src/stm32f7xx_hal_tim.c ****  *  @brief    Time Encoder functions 
2436:HALLIB/Src/stm32f7xx_hal_tim.c ****  *
2437:HALLIB/Src/stm32f7xx_hal_tim.c **** @verbatim    
2438:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
2439:HALLIB/Src/stm32f7xx_hal_tim.c ****                           ##### Time Encoder functions #####
2440:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
2441:HALLIB/Src/stm32f7xx_hal_tim.c ****   [..]
2442:HALLIB/Src/stm32f7xx_hal_tim.c ****     This section provides functions allowing to:
2443:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Initialize and configure the TIM Encoder. 
2444:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) De-initialize the TIM Encoder.
2445:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time Encoder.
2446:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time Encoder.
2447:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time Encoder and enable interrupt.
2448:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time Encoder and disable interrupt.
2449:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Start the Time Encoder and enable DMA transfer.
2450:HALLIB/Src/stm32f7xx_hal_tim.c ****     (+) Stop the Time Encoder and disable DMA transfer.
2451:HALLIB/Src/stm32f7xx_hal_tim.c ****  
2452:HALLIB/Src/stm32f7xx_hal_tim.c **** @endverbatim
2453:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
2454:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2455:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2456:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM Encoder Interface and create the associated handle.
2457:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2458:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2459:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  sConfig TIM Encoder Interface configuration structure
2460:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2461:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2462:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
2463:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2464:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr = 0;
2465:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmr1 = 0;
2466:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
2467:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2468:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
2469:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim == NULL)
2470:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2471:HALLIB/Src/stm32f7xx_hal_tim.c ****     return HAL_ERROR;
2472:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2473:HALLIB/Src/stm32f7xx_hal_tim.c ****    
2474:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
2475:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
2476:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
2477:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
2478:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
2479:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
2480:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
2481:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
2482:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
ARM GAS  /tmp/ccrrJVNd.s 			page 45


2483:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_POLARITY(sConfig->IC2Polarity));
2484:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
2485:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
2486:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
2487:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
2488:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2489:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->State == HAL_TIM_STATE_RESET)
2490:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2491:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
2492:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
2493:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2494:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
2495:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy week callbacks */
2496:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_ResetCallback(htim);
2497:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2498:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(htim->Encoder_MspInitCallback == NULL)
2499:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2500:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
2501:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2502:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
2503:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Encoder_MspInitCallback(htim);
2504:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
2505:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
2506:HALLIB/Src/stm32f7xx_hal_tim.c ****     HAL_TIM_Encoder_MspInit(htim);
2507:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
2508:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2509:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2510:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the TIM state */
2511:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_BUSY;   
2512:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2513:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the SMS bits */
2514:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->SMCR &= ~TIM_SMCR_SMS;
2515:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2516:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Configure the Time base in the Encoder Mode */
2517:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance, &htim->Init);  
2518:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2519:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx SMCR register value */
2520:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR;
2521:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2522:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CCMR1 register value */
2523:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 = htim->Instance->CCMR1;
2524:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2525:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CCER register value */
2526:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = htim->Instance->CCER;
2527:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2528:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the encoder Mode */
2529:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr |= sConfig->EncoderMode;
2530:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2531:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Capture Compare 1 and the Capture Compare 2 as input */
2532:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
2533:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
2534:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2535:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
2536:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
2537:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
2538:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
2539:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
ARM GAS  /tmp/ccrrJVNd.s 			page 46


2540:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2541:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the TI1 and the TI2 Polarities */
2542:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
2543:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
2544:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
2545:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2546:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx SMCR */
2547:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->SMCR = tmpsmcr;
2548:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2549:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCMR1 */
2550:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->CCMR1 = tmpccmr1;
2551:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2552:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCER */
2553:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->CCER = tmpccer;
2554:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2555:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Initialize the TIM state*/
2556:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY;
2557:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2558:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2559:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2560:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2561:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2562:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes the TIM Encoder interface  
2563:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2564:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2565:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2566:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2567:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
2568:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2569:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
2570:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
2571:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2572:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
2573:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2574:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
2575:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2576:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2577:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
2578:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->Encoder_MspDeInitCallback == NULL)
2579:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2580:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Encoder_MspDeInitCallback = HAL_TIM_Encoder_MspDeInit;
2581:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2582:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware */
2583:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Encoder_MspDeInitCallback(htim);
2584:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
2585:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
2586:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_TIM_Encoder_MspDeInit(htim);
2587:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
2588:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2589:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change TIM state */  
2590:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET;
2591:HALLIB/Src/stm32f7xx_hal_tim.c ****  
2592:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Release Lock */
2593:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
2594:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2595:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2596:HALLIB/Src/stm32f7xx_hal_tim.c **** }
ARM GAS  /tmp/ccrrJVNd.s 			page 47


2597:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2598:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2599:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM Encoder Interface MSP.
2600:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2601:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2602:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
2603:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2604:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
2605:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2606:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2607:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
2608:HALLIB/Src/stm32f7xx_hal_tim.c ****  
2609:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2610:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_Encoder_MspInit could be implemented in the user file
2611:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
2612:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2613:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2614:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2615:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  DeInitializes TIM Encoder Interface MSP.
2616:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2617:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2618:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
2619:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2620:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
2621:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2622:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2623:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
2624:HALLIB/Src/stm32f7xx_hal_tim.c ****  
2625:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2626:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
2627:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
2628:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2629:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2630:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2631:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Encoder Interface.
2632:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2633:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2634:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
2635:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
2636:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2637:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2638:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
2639:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2640:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2641:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
2642:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2643:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
2644:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
2645:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2646:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the encoder interface channels */
2647:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
2648:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2649:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
2650:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2651:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
2652:HALLIB/Src/stm32f7xx_hal_tim.c ****       break; 
2653:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
ARM GAS  /tmp/ccrrJVNd.s 			page 48


2654:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
2655:HALLIB/Src/stm32f7xx_hal_tim.c ****     { 
2656:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
2657:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
2658:HALLIB/Src/stm32f7xx_hal_tim.c ****     }  
2659:HALLIB/Src/stm32f7xx_hal_tim.c ****     default :
2660:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2661:HALLIB/Src/stm32f7xx_hal_tim.c ****      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
2662:HALLIB/Src/stm32f7xx_hal_tim.c ****      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
2663:HALLIB/Src/stm32f7xx_hal_tim.c ****      break; 
2664:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2665:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
2666:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
2667:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);
2668:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2669:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2670:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2671:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2672:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2673:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2674:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Encoder Interface.
2675:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2676:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2677:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled.
2678:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
2679:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2680:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2681:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
2682:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2683:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2684:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
2685:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2686:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
2687:HALLIB/Src/stm32f7xx_hal_tim.c ****     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
2688:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2689:HALLIB/Src/stm32f7xx_hal_tim.c ****    /* Disable the Input Capture channels 1 and 2
2690:HALLIB/Src/stm32f7xx_hal_tim.c ****     (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_C
2691:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
2692:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2693:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
2694:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2695:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
2696:HALLIB/Src/stm32f7xx_hal_tim.c ****       break; 
2697:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2698:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
2699:HALLIB/Src/stm32f7xx_hal_tim.c ****     { 
2700:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
2701:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
2702:HALLIB/Src/stm32f7xx_hal_tim.c ****     }  
2703:HALLIB/Src/stm32f7xx_hal_tim.c ****     default :
2704:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2705:HALLIB/Src/stm32f7xx_hal_tim.c ****      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
2706:HALLIB/Src/stm32f7xx_hal_tim.c ****      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
2707:HALLIB/Src/stm32f7xx_hal_tim.c ****      break; 
2708:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2709:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
2710:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
ARM GAS  /tmp/ccrrJVNd.s 			page 49


2711:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2712:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2713:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2714:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2715:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2716:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2717:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2718:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Encoder Interface in interrupt mode.
2719:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2720:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2721:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
2722:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
2723:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2724:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2725:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
2726:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2727:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2728:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
2729:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2730:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
2731:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
2732:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2733:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the encoder interface channels */
2734:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the capture compare Interrupts 1 and/or 2 */
2735:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
2736:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2737:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
2738:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2739:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
2740:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
2741:HALLIB/Src/stm32f7xx_hal_tim.c ****       break; 
2742:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2743:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
2744:HALLIB/Src/stm32f7xx_hal_tim.c ****     { 
2745:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
2746:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2); 
2747:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
2748:HALLIB/Src/stm32f7xx_hal_tim.c ****     }  
2749:HALLIB/Src/stm32f7xx_hal_tim.c ****     default :
2750:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2751:HALLIB/Src/stm32f7xx_hal_tim.c ****      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
2752:HALLIB/Src/stm32f7xx_hal_tim.c ****      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
2753:HALLIB/Src/stm32f7xx_hal_tim.c ****      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
2754:HALLIB/Src/stm32f7xx_hal_tim.c ****      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
2755:HALLIB/Src/stm32f7xx_hal_tim.c ****      break; 
2756:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2757:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2758:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2759:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Peripheral */
2760:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);
2761:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2762:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2763:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2764:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2765:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2766:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2767:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Encoder Interface in interrupt mode.
ARM GAS  /tmp/ccrrJVNd.s 			page 50


2768:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2769:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2770:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled.
2771:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
2772:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2773:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2774:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
2775:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2776:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2777:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
2778:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2779:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
2780:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
2781:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2782:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Input Capture channels 1 and 2
2783:HALLIB/Src/stm32f7xx_hal_tim.c ****     (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_C
2784:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(Channel == TIM_CHANNEL_1)
2785:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2786:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
2787:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2788:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the capture compare Interrupts 1 */
2789:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
2790:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
2791:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if(Channel == TIM_CHANNEL_2)
2792:HALLIB/Src/stm32f7xx_hal_tim.c ****   {  
2793:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
2794:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2795:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the capture compare Interrupts 2 */
2796:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
2797:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
2798:HALLIB/Src/stm32f7xx_hal_tim.c ****   else
2799:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2800:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
2801:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
2802:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2803:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the capture compare Interrupts 1 and 2 */
2804:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
2805:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
2806:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2807:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2808:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
2809:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2810:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2811:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change the htim state */
2812:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
2813:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2814:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2815:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2816:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2817:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2818:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2819:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Starts the TIM Encoder Interface in DMA mode.
2820:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2821:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2822:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
2823:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
2824:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
ARM GAS  /tmp/ccrrJVNd.s 			page 51


2825:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2826:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
2827:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  pData1 The destination Buffer address for IC1.
2828:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  pData2 The destination Buffer address for IC2.
2829:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Length The length of data to be transferred from TIM peripheral to memory.
2830:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2831:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2832:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pD
2833:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2834:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
2835:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
2836:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2837:HALLIB/Src/stm32f7xx_hal_tim.c ****   if((htim->State == HAL_TIM_STATE_BUSY))
2838:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2839:HALLIB/Src/stm32f7xx_hal_tim.c ****      return HAL_BUSY;
2840:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2841:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if((htim->State == HAL_TIM_STATE_READY))
2842:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2843:HALLIB/Src/stm32f7xx_hal_tim.c ****     if((((pData1 == 0) || (pData2 == 0) )) && (Length > 0)) 
2844:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2845:HALLIB/Src/stm32f7xx_hal_tim.c ****       return HAL_ERROR;                                    
2846:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2847:HALLIB/Src/stm32f7xx_hal_tim.c ****     else
2848:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2849:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
2850:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2851:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
2852:HALLIB/Src/stm32f7xx_hal_tim.c ****    
2853:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
2854:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2855:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
2856:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2857:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
2858:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
2859:HALLIB/Src/stm32f7xx_hal_tim.c ****      
2860:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
2861:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
2862:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2863:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
2864:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pDat
2865:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2866:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Input Capture DMA request */      
2867:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
2868:HALLIB/Src/stm32f7xx_hal_tim.c ****             
2869:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the Peripheral */
2870:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE(htim);
2871:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2872:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the Capture compare channel */
2873:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
2874:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2875:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2876:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2877:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
2878:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2879:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
2880:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
2881:HALLIB/Src/stm32f7xx_hal_tim.c ****      
ARM GAS  /tmp/ccrrJVNd.s 			page 52


2882:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
2883:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError;
2884:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
2885:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData
2886:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2887:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Input Capture  DMA request */
2888:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
2889:HALLIB/Src/stm32f7xx_hal_tim.c ****      
2890:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the Peripheral */
2891:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE(htim);
2892:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2893:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the Capture compare channel */
2894:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
2895:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2896:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2897:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2898:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_ALL:
2899:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
2900:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
2901:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
2902:HALLIB/Src/stm32f7xx_hal_tim.c ****      
2903:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
2904:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
2905:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2906:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
2907:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData
2908:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2909:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
2910:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
2911:HALLIB/Src/stm32f7xx_hal_tim.c ****      
2912:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
2913:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
2914:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2915:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
2916:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData
2917:HALLIB/Src/stm32f7xx_hal_tim.c ****           
2918:HALLIB/Src/stm32f7xx_hal_tim.c ****      /* Enable the Peripheral */
2919:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE(htim);
2920:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2921:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the Capture compare channel */
2922:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
2923:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
2924:HALLIB/Src/stm32f7xx_hal_tim.c ****       
2925:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Input Capture  DMA request */
2926:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
2927:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Input Capture  DMA request */
2928:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
2929:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
2930:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2931:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2932:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
2933:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
2934:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
2935:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2936:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2937:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2938:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 53


2939:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2940:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM Encoder Interface in DMA mode.
2941:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
2942:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
2943:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
2944:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
2945:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2946:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2947:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
2948:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
2949:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2950:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
2951:HALLIB/Src/stm32f7xx_hal_tim.c **** {
2952:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
2953:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
2954:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2955:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Input Capture channels 1 and 2
2956:HALLIB/Src/stm32f7xx_hal_tim.c ****     (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_C
2957:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(Channel == TIM_CHANNEL_1)
2958:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2959:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
2960:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2961:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the capture compare DMA Request 1 */
2962:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
2963:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
2964:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if(Channel == TIM_CHANNEL_2)
2965:HALLIB/Src/stm32f7xx_hal_tim.c ****   {  
2966:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
2967:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2968:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the capture compare DMA Request 2 */
2969:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
2970:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
2971:HALLIB/Src/stm32f7xx_hal_tim.c ****   else
2972:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
2973:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
2974:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
2975:HALLIB/Src/stm32f7xx_hal_tim.c ****     
2976:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Disable the capture compare DMA Request 1 and 2 */
2977:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
2978:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
2979:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
2980:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2981:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Peripheral */
2982:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2983:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2984:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change the htim state */
2985:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
2986:HALLIB/Src/stm32f7xx_hal_tim.c ****   
2987:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
2988:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
2989:HALLIB/Src/stm32f7xx_hal_tim.c **** }
2990:HALLIB/Src/stm32f7xx_hal_tim.c **** 
2991:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
2992:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @}
2993:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
2994:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group7 TIM IRQ handler management 
2995:HALLIB/Src/stm32f7xx_hal_tim.c ****  *  @brief    IRQ handler management 
ARM GAS  /tmp/ccrrJVNd.s 			page 54


2996:HALLIB/Src/stm32f7xx_hal_tim.c ****  *
2997:HALLIB/Src/stm32f7xx_hal_tim.c **** @verbatim   
2998:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
2999:HALLIB/Src/stm32f7xx_hal_tim.c ****                         ##### IRQ handler management #####
3000:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================  
3001:HALLIB/Src/stm32f7xx_hal_tim.c ****   [..]  
3002:HALLIB/Src/stm32f7xx_hal_tim.c ****     This section provides Timer IRQ handler function.
3003:HALLIB/Src/stm32f7xx_hal_tim.c ****                
3004:HALLIB/Src/stm32f7xx_hal_tim.c **** @endverbatim
3005:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
3006:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
3007:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
3008:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  This function handles TIM interrupts requests.
3009:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
3010:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
3011:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
3012:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
3013:HALLIB/Src/stm32f7xx_hal_tim.c **** void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
3014:HALLIB/Src/stm32f7xx_hal_tim.c **** {
3015:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Capture compare 1 event */
3016:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
3017:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3018:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
3019:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3020:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
3021:HALLIB/Src/stm32f7xx_hal_tim.c ****         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
3022:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
3023:HALLIB/Src/stm32f7xx_hal_tim.c ****         
3024:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Input capture event */
3025:HALLIB/Src/stm32f7xx_hal_tim.c ****         if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
3026:HALLIB/Src/stm32f7xx_hal_tim.c ****         {
3027:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3028:HALLIB/Src/stm32f7xx_hal_tim.c ****           htim->IC_CaptureCallback(htim);
3029:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3030:HALLIB/Src/stm32f7xx_hal_tim.c ****           HAL_TIM_IC_CaptureCallback(htim);
3031:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3032:HALLIB/Src/stm32f7xx_hal_tim.c ****         }
3033:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Output compare event */
3034:HALLIB/Src/stm32f7xx_hal_tim.c ****         else
3035:HALLIB/Src/stm32f7xx_hal_tim.c ****         {
3036:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3037:HALLIB/Src/stm32f7xx_hal_tim.c ****           htim->OC_DelayElapsedCallback(htim);
3038:HALLIB/Src/stm32f7xx_hal_tim.c ****           htim->PWM_PulseFinishedCallback(htim);
3039:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3040:HALLIB/Src/stm32f7xx_hal_tim.c ****           HAL_TIM_OC_DelayElapsedCallback(htim);
3041:HALLIB/Src/stm32f7xx_hal_tim.c ****           HAL_TIM_PWM_PulseFinishedCallback(htim);
3042:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3043:HALLIB/Src/stm32f7xx_hal_tim.c ****         }
3044:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3045:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
3046:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3047:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3048:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Capture compare 2 event */
3049:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
3050:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3051:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
3052:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
ARM GAS  /tmp/ccrrJVNd.s 			page 55


3053:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
3054:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
3055:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Input capture event */
3056:HALLIB/Src/stm32f7xx_hal_tim.c ****       if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
3057:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
3058:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3059:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->IC_CaptureCallback(htim);
3060:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3061:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_IC_CaptureCallback(htim);
3062:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3063:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
3064:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Output compare event */
3065:HALLIB/Src/stm32f7xx_hal_tim.c ****       else
3066:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
3067:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3068:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->OC_DelayElapsedCallback(htim);
3069:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->PWM_PulseFinishedCallback(htim);
3070:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3071:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_OC_DelayElapsedCallback(htim);
3072:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
3073:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3074:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
3075:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3076:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3077:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3078:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Capture compare 3 event */
3079:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
3080:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3081:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
3082:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3083:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
3084:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
3085:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Input capture event */
3086:HALLIB/Src/stm32f7xx_hal_tim.c ****       if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
3087:HALLIB/Src/stm32f7xx_hal_tim.c ****       {          
3088:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3089:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->IC_CaptureCallback(htim);
3090:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3091:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_IC_CaptureCallback(htim);
3092:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3093:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
3094:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Output compare event */
3095:HALLIB/Src/stm32f7xx_hal_tim.c ****       else
3096:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
3097:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3098:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->OC_DelayElapsedCallback(htim);
3099:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->PWM_PulseFinishedCallback(htim);
3100:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3101:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_OC_DelayElapsedCallback(htim);
3102:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
3103:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3104:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
3105:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3106:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3107:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3108:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Capture compare 4 event */
3109:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
ARM GAS  /tmp/ccrrJVNd.s 			page 56


3110:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3111:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
3112:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3113:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
3114:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
3115:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Input capture event */
3116:HALLIB/Src/stm32f7xx_hal_tim.c ****       if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
3117:HALLIB/Src/stm32f7xx_hal_tim.c ****       {          
3118:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3119:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->IC_CaptureCallback(htim);
3120:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3121:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_IC_CaptureCallback(htim);
3122:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3123:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
3124:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Output compare event */
3125:HALLIB/Src/stm32f7xx_hal_tim.c ****       else
3126:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
3127:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3128:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->OC_DelayElapsedCallback(htim);
3129:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->PWM_PulseFinishedCallback(htim);
3130:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3131:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_OC_DelayElapsedCallback(htim);
3132:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
3133:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3134:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
3135:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3136:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3137:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3138:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* TIM Update event */
3139:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
3140:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3141:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
3142:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3143:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
3144:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3145:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PeriodElapsedCallback(htim);
3146:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3147:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_TIM_PeriodElapsedCallback(htim);
3148:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3149:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3150:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3151:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* TIM Break input event */
3152:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
3153:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3154:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
3155:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3156:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
3157:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3158:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->BreakCallback(htim);
3159:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3160:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_TIMEx_BreakCallback(htim);
3161:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3162:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3163:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3164:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3165:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3166:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* TIM Break input event */
ARM GAS  /tmp/ccrrJVNd.s 			page 57


3167:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
3168:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3169:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
3170:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3171:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
3172:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3173:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->BreakCallback(htim);
3174:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3175:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_TIMEx_BreakCallback(htim);
3176:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3177:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3178:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3179:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3180:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* TIM Trigger detection event */
3181:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
3182:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3183:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
3184:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3185:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
3186:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3187:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->TriggerCallback(htim);
3188:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3189:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_TIM_TriggerCallback(htim);
3190:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3191:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3192:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3193:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* TIM commutation event */
3194:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
3195:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3196:HALLIB/Src/stm32f7xx_hal_tim.c ****     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
3197:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3198:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
3199:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3200:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->CommutationCallback(htim);
3201:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
3202:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_TIMEx_CommutationCallback(htim);
3203:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3204:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3205:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3206:HALLIB/Src/stm32f7xx_hal_tim.c **** }
3207:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3208:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
3209:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @}
3210:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
3211:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3212:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group8 Peripheral Control functions
3213:HALLIB/Src/stm32f7xx_hal_tim.c ****  *  @brief   	Peripheral Control functions 
3214:HALLIB/Src/stm32f7xx_hal_tim.c ****  *
3215:HALLIB/Src/stm32f7xx_hal_tim.c **** @verbatim   
3216:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
3217:HALLIB/Src/stm32f7xx_hal_tim.c ****                    ##### Peripheral Control functions #####
3218:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================  
3219:HALLIB/Src/stm32f7xx_hal_tim.c ****  [..] 
3220:HALLIB/Src/stm32f7xx_hal_tim.c ****    This section provides functions allowing to:
3221:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Configure The Input Output channels for OC, PWM, IC or One Pulse mode. 
3222:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Configure External Clock source.
3223:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Configure Complementary channels, break features and dead time.
ARM GAS  /tmp/ccrrJVNd.s 			page 58


3224:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Configure Master and the Slave synchronization.
3225:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Configure the DMA Burst Mode.
3226:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3227:HALLIB/Src/stm32f7xx_hal_tim.c **** @endverbatim
3228:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
3229:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
3230:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3231:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
3232:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM Output Compare Channels according to the specified
3233:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         parameters in the TIM_OC_InitTypeDef.
3234:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
3235:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
3236:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  sConfig TIM Output Compare configuration structure
3237:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
3238:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
3239:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
3240:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
3241:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
3242:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
3243:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
3244:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
3245:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sCon
3246:HALLIB/Src/stm32f7xx_hal_tim.c **** {
3247:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */ 
3248:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CHANNELS(Channel)); 
3249:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
3250:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
3251:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3252:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check input state */
3253:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim); 
3254:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3255:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
3256:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3257:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
3258:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3259:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
3260:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3261:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
3262:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the TIM Channel 1 in Output Compare */
3263:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_OC1_SetConfig(htim->Instance, sConfig);
3264:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3265:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3266:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3267:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
3268:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3269:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
3270:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the TIM Channel 2 in Output Compare */
3271:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_OC2_SetConfig(htim->Instance, sConfig);
3272:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3273:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3274:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3275:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
3276:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3277:HALLIB/Src/stm32f7xx_hal_tim.c ****        assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
3278:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the TIM Channel 3 in Output Compare */
3279:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_OC3_SetConfig(htim->Instance, sConfig);
3280:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
ARM GAS  /tmp/ccrrJVNd.s 			page 59


3281:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3282:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3283:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
3284:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3285:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
3286:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the TIM Channel 4 in Output Compare */
3287:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_OC4_SetConfig(htim->Instance, sConfig);
3288:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3289:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3290:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3291:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
3292:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;    
3293:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3294:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
3295:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3296:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim); 
3297:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3298:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
3299:HALLIB/Src/stm32f7xx_hal_tim.c **** }
3300:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3301:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
3302:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM Input Capture Channels according to the specified
3303:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         parameters in the TIM_IC_InitTypeDef.
3304:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
3305:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
3306:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  sConfig TIM Input Capture configuration structure
3307:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
3308:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
3309:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
3310:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
3311:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
3312:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
3313:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
3314:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
3315:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, ui
3316:HALLIB/Src/stm32f7xx_hal_tim.c **** {
3317:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
3318:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
3319:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
3320:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
3321:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
3322:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
3323:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3324:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim);
3325:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3326:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
3327:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3328:HALLIB/Src/stm32f7xx_hal_tim.c ****   if (Channel == TIM_CHANNEL_1)
3329:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3330:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* TI1 Configuration */
3331:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_TI1_SetConfig(htim->Instance,
3332:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICPolarity,
3333:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICSelection,
3334:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICFilter);
3335:HALLIB/Src/stm32f7xx_hal_tim.c ****                
3336:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the IC1PSC Bits */
3337:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
ARM GAS  /tmp/ccrrJVNd.s 			page 60


3338:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3339:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the IC1PSC value */
3340:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Instance->CCMR1 |= sConfig->ICPrescaler;
3341:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3342:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if (Channel == TIM_CHANNEL_2)
3343:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3344:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* TI2 Configuration */
3345:HALLIB/Src/stm32f7xx_hal_tim.c ****     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
3346:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3347:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_TI2_SetConfig(htim->Instance, 
3348:HALLIB/Src/stm32f7xx_hal_tim.c ****                       sConfig->ICPolarity,
3349:HALLIB/Src/stm32f7xx_hal_tim.c ****                       sConfig->ICSelection,
3350:HALLIB/Src/stm32f7xx_hal_tim.c ****                       sConfig->ICFilter);
3351:HALLIB/Src/stm32f7xx_hal_tim.c ****                
3352:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the IC2PSC Bits */
3353:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
3354:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3355:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the IC2PSC value */
3356:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
3357:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3358:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if (Channel == TIM_CHANNEL_3)
3359:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3360:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* TI3 Configuration */
3361:HALLIB/Src/stm32f7xx_hal_tim.c ****     assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
3362:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3363:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_TI3_SetConfig(htim->Instance,  
3364:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICPolarity,
3365:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICSelection,
3366:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICFilter);
3367:HALLIB/Src/stm32f7xx_hal_tim.c ****                
3368:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the IC3PSC Bits */
3369:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
3370:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3371:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the IC3PSC value */
3372:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Instance->CCMR2 |= sConfig->ICPrescaler;
3373:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3374:HALLIB/Src/stm32f7xx_hal_tim.c ****   else
3375:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3376:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* TI4 Configuration */
3377:HALLIB/Src/stm32f7xx_hal_tim.c ****     assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
3378:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3379:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_TI4_SetConfig(htim->Instance, 
3380:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICPolarity,
3381:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICSelection,
3382:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICFilter);
3383:HALLIB/Src/stm32f7xx_hal_tim.c ****                
3384:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the IC4PSC Bits */
3385:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
3386:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3387:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the IC4PSC value */
3388:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
3389:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3390:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3391:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
3392:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3393:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
3394:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 61


3395:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK; 
3396:HALLIB/Src/stm32f7xx_hal_tim.c **** }
3397:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3398:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
3399:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM PWM  channels according to the specified
3400:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         parameters in the TIM_OC_InitTypeDef.
3401:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
3402:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
3403:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  sConfig TIM PWM configuration structure
3404:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
3405:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
3406:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
3407:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
3408:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
3409:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
3410:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
3411:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
3412:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sCo
3413:HALLIB/Src/stm32f7xx_hal_tim.c **** {
3414:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim);
3415:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3416:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */ 
3417:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CHANNELS(Channel)); 
3418:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
3419:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
3420:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode)); 
3421:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3422:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
3423:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3424:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
3425:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3426:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
3427:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3428:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
3429:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the Channel 1 in PWM mode */
3430:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_OC1_SetConfig(htim->Instance, sConfig);
3431:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3432:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the Preload enable bit for channel1 */
3433:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
3434:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3435:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the Output Fast mode */
3436:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
3437:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR1 |= sConfig->OCFastMode;
3438:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3439:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3440:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3441:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
3442:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3443:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
3444:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the Channel 2 in PWM mode */
3445:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_OC2_SetConfig(htim->Instance, sConfig);
3446:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3447:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the Preload enable bit for channel2 */
3448:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
3449:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3450:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the Output Fast mode */
3451:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
ARM GAS  /tmp/ccrrJVNd.s 			page 62


3452:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
3453:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3454:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3455:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3456:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
3457:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3458:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
3459:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the Channel 3 in PWM mode */
3460:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_OC3_SetConfig(htim->Instance, sConfig);
3461:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3462:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the Preload enable bit for channel3 */
3463:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
3464:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3465:HALLIB/Src/stm32f7xx_hal_tim.c ****      /* Configure the Output Fast mode */
3466:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
3467:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR2 |= sConfig->OCFastMode;  
3468:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3469:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3470:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3471:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
3472:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3473:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
3474:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the Channel 4 in PWM mode */
3475:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_OC4_SetConfig(htim->Instance, sConfig);
3476:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3477:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the Preload enable bit for channel4 */
3478:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
3479:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3480:HALLIB/Src/stm32f7xx_hal_tim.c ****      /* Configure the Output Fast mode */
3481:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
3482:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
3483:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3484:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3485:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3486:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
3487:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;    
3488:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3489:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3490:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
3491:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3492:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
3493:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3494:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
3495:HALLIB/Src/stm32f7xx_hal_tim.c **** }
3496:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3497:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
3498:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Initializes the TIM One Pulse Channels according to the specified
3499:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         parameters in the TIM_OnePulse_InitTypeDef.
3500:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
3501:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
3502:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  sConfig TIM One Pulse configuration structure
3503:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  OutputChannel TIM Channels to be enabled.
3504:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
3505:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
3506:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
3507:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  InputChannel TIM Channels to be enabled.
3508:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccrrJVNd.s 			page 63


3509:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
3510:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
3511:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
3512:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
3513:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef
3514:HALLIB/Src/stm32f7xx_hal_tim.c **** {
3515:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_OC_InitTypeDef temp1;
3516:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3517:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
3518:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
3519:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_OPM_CHANNELS(InputChannel));
3520:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3521:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(OutputChannel != InputChannel)  
3522:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3523:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_LOCK(htim);
3524:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3525:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->State = HAL_TIM_STATE_BUSY;
3526:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3527:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Extract the Output compare configuration from sConfig structure */  
3528:HALLIB/Src/stm32f7xx_hal_tim.c ****     temp1.OCMode = sConfig->OCMode;
3529:HALLIB/Src/stm32f7xx_hal_tim.c ****     temp1.Pulse = sConfig->Pulse;
3530:HALLIB/Src/stm32f7xx_hal_tim.c ****     temp1.OCPolarity = sConfig->OCPolarity;
3531:HALLIB/Src/stm32f7xx_hal_tim.c ****     temp1.OCNPolarity = sConfig->OCNPolarity;
3532:HALLIB/Src/stm32f7xx_hal_tim.c ****     temp1.OCIdleState = sConfig->OCIdleState;
3533:HALLIB/Src/stm32f7xx_hal_tim.c ****     temp1.OCNIdleState = sConfig->OCNIdleState; 
3534:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3535:HALLIB/Src/stm32f7xx_hal_tim.c ****     switch (OutputChannel)
3536:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3537:HALLIB/Src/stm32f7xx_hal_tim.c ****       case TIM_CHANNEL_1:
3538:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
3539:HALLIB/Src/stm32f7xx_hal_tim.c ****         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
3540:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3541:HALLIB/Src/stm32f7xx_hal_tim.c ****         TIM_OC1_SetConfig(htim->Instance, &temp1); 
3542:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
3543:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
3544:HALLIB/Src/stm32f7xx_hal_tim.c ****       case TIM_CHANNEL_2:
3545:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
3546:HALLIB/Src/stm32f7xx_hal_tim.c ****         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
3547:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3548:HALLIB/Src/stm32f7xx_hal_tim.c ****         TIM_OC2_SetConfig(htim->Instance, &temp1);
3549:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
3550:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
3551:HALLIB/Src/stm32f7xx_hal_tim.c ****       default:
3552:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;  
3553:HALLIB/Src/stm32f7xx_hal_tim.c ****     } 
3554:HALLIB/Src/stm32f7xx_hal_tim.c ****     switch (InputChannel)
3555:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3556:HALLIB/Src/stm32f7xx_hal_tim.c ****       case TIM_CHANNEL_1:
3557:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
3558:HALLIB/Src/stm32f7xx_hal_tim.c ****         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
3559:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3560:HALLIB/Src/stm32f7xx_hal_tim.c ****         TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
3561:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sConfig->ICSelection, sConfig->ICFilter);
3562:HALLIB/Src/stm32f7xx_hal_tim.c ****                
3563:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Reset the IC1PSC Bits */
3564:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
3565:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 64


3566:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Select the Trigger source */
3567:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR &= ~TIM_SMCR_TS;
3568:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_TS_TI1FP1;
3569:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3570:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Select the Slave Mode */      
3571:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR &= ~TIM_SMCR_SMS;
3572:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
3573:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
3574:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
3575:HALLIB/Src/stm32f7xx_hal_tim.c ****       case TIM_CHANNEL_2:
3576:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
3577:HALLIB/Src/stm32f7xx_hal_tim.c ****         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
3578:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3579:HALLIB/Src/stm32f7xx_hal_tim.c ****         TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
3580:HALLIB/Src/stm32f7xx_hal_tim.c ****                  sConfig->ICSelection, sConfig->ICFilter);
3581:HALLIB/Src/stm32f7xx_hal_tim.c ****                
3582:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Reset the IC2PSC Bits */
3583:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
3584:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3585:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Select the Trigger source */
3586:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR &= ~TIM_SMCR_TS;
3587:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_TS_TI2FP2;
3588:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3589:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Select the Slave Mode */      
3590:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR &= ~TIM_SMCR_SMS;
3591:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
3592:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
3593:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
3594:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3595:HALLIB/Src/stm32f7xx_hal_tim.c ****       default:
3596:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;  
3597:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3598:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3599:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->State = HAL_TIM_STATE_READY;
3600:HALLIB/Src/stm32f7xx_hal_tim.c ****     
3601:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_UNLOCK(htim);
3602:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3603:HALLIB/Src/stm32f7xx_hal_tim.c ****     return HAL_OK;
3604:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3605:HALLIB/Src/stm32f7xx_hal_tim.c ****   else
3606:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3607:HALLIB/Src/stm32f7xx_hal_tim.c ****     return HAL_ERROR;
3608:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3609:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
3610:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3611:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
3612:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configure the DMA Burst to transfer Data from the memory to the TIM peripheral  
3613:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
3614:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
3615:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  BurstBaseAddress TIM Base address from when the DMA will starts the Data write.
3616:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         This parameters can be on of the following values:
3617:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CR1  
3618:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CR2
3619:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_SMCR
3620:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_DIER
3621:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_SR
3622:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_EGR
ARM GAS  /tmp/ccrrJVNd.s 			page 65


3623:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCMR1
3624:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCMR2
3625:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCER
3626:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CNT   
3627:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_PSC   
3628:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_ARR
3629:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_RCR
3630:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR1
3631:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR2
3632:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR3  
3633:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR4
3634:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_BDTR
3635:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_DCR
3636:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  BurstRequestSrc TIM DMA Request sources.
3637:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         This parameters can be on of the following values:
3638:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_UPDATE: TIM update Interrupt source
3639:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
3640:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
3641:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
3642:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
3643:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_COM: TIM Commutation DMA source
3644:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_TRIGGER: TIM Trigger DMA source
3645:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  BurstBuffer The Buffer address.
3646:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  BurstLength DMA Burst length. This parameter can be one value
3647:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         between TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
3648:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
3649:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
3650:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, u
3651:HALLIB/Src/stm32f7xx_hal_tim.c ****                                               uint32_t* BurstBuffer, uint32_t  BurstLength)
3652:HALLIB/Src/stm32f7xx_hal_tim.c **** {
3653:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
3654:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
3655:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
3656:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
3657:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(BurstLength));
3658:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3659:HALLIB/Src/stm32f7xx_hal_tim.c ****   if((htim->State == HAL_TIM_STATE_BUSY))
3660:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3661:HALLIB/Src/stm32f7xx_hal_tim.c ****      return HAL_BUSY;
3662:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3663:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if((htim->State == HAL_TIM_STATE_READY))
3664:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3665:HALLIB/Src/stm32f7xx_hal_tim.c ****     if((BurstBuffer == 0 ) && (BurstLength > 0)) 
3666:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3667:HALLIB/Src/stm32f7xx_hal_tim.c ****       return HAL_ERROR;                                    
3668:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3669:HALLIB/Src/stm32f7xx_hal_tim.c ****     else
3670:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3671:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
3672:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3673:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3674:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch(BurstRequestSrc)
3675:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3676:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_UPDATE:
3677:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3678:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3679:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
ARM GAS  /tmp/ccrrJVNd.s 			page 66


3680:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3681:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3682:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = HAL_TIM_DMAError ;
3683:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3684:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3685:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Insta
3686:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3687:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3688:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC1:
3689:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3690:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3691:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
3692:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3693:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3694:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
3695:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3696:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3697:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance
3698:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3699:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3700:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC2:
3701:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3702:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3703:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
3704:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3705:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3706:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
3707:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3708:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3709:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance
3710:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3711:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3712:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC3:
3713:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3714:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3715:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
3716:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3717:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3718:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
3719:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3720:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3721:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance
3722:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3723:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3724:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC4:
3725:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3726:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3727:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMADelayPulseCplt;
3728:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3729:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3730:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
3731:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3732:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3733:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance
3734:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3735:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3736:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_COM:
ARM GAS  /tmp/ccrrJVNd.s 			page 67


3737:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3738:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3739:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = HAL_TIMEx_DMACommutationCplt;
3740:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3741:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3742:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = HAL_TIM_DMAError ;
3743:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3744:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3745:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->
3746:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3747:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3748:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
3749:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3750:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3751:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
3752:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3753:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3754:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = HAL_TIM_DMAError ;
3755:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3756:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3757:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Inst
3758:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3759:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3760:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
3761:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;  
3762:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3763:HALLIB/Src/stm32f7xx_hal_tim.c ****    /* configure the DMA Burst Mode */
3764:HALLIB/Src/stm32f7xx_hal_tim.c ****    htim->Instance->DCR = BurstBaseAddress | BurstLength;  
3765:HALLIB/Src/stm32f7xx_hal_tim.c ****    
3766:HALLIB/Src/stm32f7xx_hal_tim.c ****    /* Enable the TIM DMA Request */
3767:HALLIB/Src/stm32f7xx_hal_tim.c ****    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);  
3768:HALLIB/Src/stm32f7xx_hal_tim.c ****    
3769:HALLIB/Src/stm32f7xx_hal_tim.c ****    htim->State = HAL_TIM_STATE_READY;
3770:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3771:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
3772:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
3773:HALLIB/Src/stm32f7xx_hal_tim.c **** }
3774:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3775:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
3776:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stops the TIM DMA Burst mode 
3777:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
3778:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
3779:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  BurstRequestSrc TIM DMA Request sources to disable
3780:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
3781:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
3782:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
3783:HALLIB/Src/stm32f7xx_hal_tim.c **** {
3784:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
3785:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
3786:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3787:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Abort the DMA transfer (at least disable the DMA channel) */
3788:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch(BurstRequestSrc)
3789:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3790:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_UPDATE:
3791:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3792:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
3793:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
ARM GAS  /tmp/ccrrJVNd.s 			page 68


3794:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3795:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC1:
3796:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3797:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
3798:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3799:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3800:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC2:
3801:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3802:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
3803:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3804:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3805:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC3:
3806:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3807:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
3808:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3809:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3810:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC4:
3811:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3812:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
3813:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3814:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3815:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_COM:
3816:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3817:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
3818:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3819:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3820:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
3821:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3822:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
3823:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3824:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3825:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
3826:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3827:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3828:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3829:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Update DMA request */
3830:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
3831:HALLIB/Src/stm32f7xx_hal_tim.c ****       
3832:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
3833:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;  
3834:HALLIB/Src/stm32f7xx_hal_tim.c **** }
3835:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3836:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
3837:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configure the DMA Burst to transfer Data from the TIM peripheral to the memory 
3838:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
3839:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
3840:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  BurstBaseAddress TIM Base address from when the DMA will starts the Data read.
3841:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         This parameters can be on of the following values:
3842:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CR1  
3843:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CR2
3844:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_SMCR
3845:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_DIER
3846:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_SR
3847:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_EGR
3848:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCMR1
3849:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCMR2
3850:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCER
ARM GAS  /tmp/ccrrJVNd.s 			page 69


3851:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CNT   
3852:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_PSC   
3853:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_ARR
3854:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_RCR
3855:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR1
3856:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR2
3857:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR3  
3858:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR4
3859:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_BDTR
3860:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMABASE_DCR
3861:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  BurstRequestSrc TIM DMA Request sources.
3862:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         This parameters can be on of the following values:
3863:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_UPDATE: TIM update Interrupt source
3864:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
3865:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
3866:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
3867:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
3868:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_COM: TIM Commutation DMA source
3869:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_DMA_TRIGGER: TIM Trigger DMA source
3870:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  BurstBuffer The Buffer address.
3871:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  BurstLength DMA Burst length. This parameter can be one value
3872:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         between TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
3873:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
3874:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
3875:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, ui
3876:HALLIB/Src/stm32f7xx_hal_tim.c ****                                              uint32_t  *BurstBuffer, uint32_t  BurstLength)
3877:HALLIB/Src/stm32f7xx_hal_tim.c **** {
3878:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
3879:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
3880:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
3881:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
3882:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(BurstLength));
3883:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3884:HALLIB/Src/stm32f7xx_hal_tim.c ****   if((htim->State == HAL_TIM_STATE_BUSY))
3885:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3886:HALLIB/Src/stm32f7xx_hal_tim.c ****      return HAL_BUSY;
3887:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3888:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if((htim->State == HAL_TIM_STATE_READY))
3889:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3890:HALLIB/Src/stm32f7xx_hal_tim.c ****     if((BurstBuffer == 0 ) && (BurstLength > 0)) 
3891:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3892:HALLIB/Src/stm32f7xx_hal_tim.c ****       return HAL_ERROR;                                    
3893:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3894:HALLIB/Src/stm32f7xx_hal_tim.c ****     else
3895:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
3896:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
3897:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3898:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
3899:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch(BurstRequestSrc)
3900:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
3901:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_UPDATE:
3902:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3903:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3904:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
3905:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3906:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3907:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = HAL_TIM_DMAError ;
ARM GAS  /tmp/ccrrJVNd.s 			page 70


3908:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3909:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3910:HALLIB/Src/stm32f7xx_hal_tim.c ****        HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)B
3911:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3912:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3913:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC1:
3914:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3915:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3916:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
3917:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3918:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3919:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = HAL_TIM_DMAError ;
3920:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3921:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3922:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)Burst
3923:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3924:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3925:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC2:
3926:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3927:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3928:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
3929:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3930:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3931:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = HAL_TIM_DMAError ;
3932:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3933:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3934:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)Burst
3935:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3936:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3937:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC3:
3938:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3939:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3940:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
3941:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3942:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3943:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = HAL_TIM_DMAError ;
3944:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3945:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3946:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)Burst
3947:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3948:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3949:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC4:
3950:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3951:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3952:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = HAL_TIM_DMACaptureCplt;
3953:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3954:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3955:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = HAL_TIM_DMAError ;
3956:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3957:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3958:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)Burst
3959:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3960:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3961:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_COM:
3962:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3963:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3964:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = HAL_TIMEx_DMACommutationCplt;
ARM GAS  /tmp/ccrrJVNd.s 			page 71


3965:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3966:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3967:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = HAL_TIM_DMAError ;
3968:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3969:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3970:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32
3971:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3972:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3973:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
3974:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
3975:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA Period elapsed callback */
3976:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
3977:HALLIB/Src/stm32f7xx_hal_tim.c ****      
3978:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the DMA error callback */
3979:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = HAL_TIM_DMAError ;
3980:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3981:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
3982:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)B
3983:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
3984:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
3985:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
3986:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;  
3987:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
3988:HALLIB/Src/stm32f7xx_hal_tim.c **** 
3989:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* configure the DMA Burst Mode */
3990:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->DCR = BurstBaseAddress | BurstLength;  
3991:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3992:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the TIM DMA Request */
3993:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
3994:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3995:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
3996:HALLIB/Src/stm32f7xx_hal_tim.c ****   
3997:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
3998:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
3999:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4000:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4001:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4002:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Stop the DMA burst reading 
4003:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4004:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4005:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  BurstRequestSrc TIM DMA Request sources to disable.
4006:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
4007:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4008:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
4009:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4010:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
4011:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
4012:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4013:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Abort the DMA transfer (at least disable the DMA channel) */
4014:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch(BurstRequestSrc)
4015:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
4016:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_UPDATE:
4017:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
4018:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
4019:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4020:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4021:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC1:
ARM GAS  /tmp/ccrrJVNd.s 			page 72


4022:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
4023:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
4024:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4025:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4026:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC2:
4027:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
4028:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
4029:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4030:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4031:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC3:
4032:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
4033:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
4034:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4035:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4036:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC4:
4037:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
4038:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
4039:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4040:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4041:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_COM:
4042:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
4043:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
4044:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4045:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4046:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
4047:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
4048:HALLIB/Src/stm32f7xx_hal_tim.c ****       HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
4049:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4050:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4051:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
4052:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;  
4053:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
4054:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4055:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the TIM Update DMA request */
4056:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
4057:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4058:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
4059:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;  
4060:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4061:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4062:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4063:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Generate a software event
4064:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4065:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4066:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  EventSource specifies the event source.
4067:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
4068:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_UPDATE: Timer update Event source
4069:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_CC1: Timer Capture Compare 1 Event source
4070:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_CC2: Timer Capture Compare 2 Event source
4071:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_CC3: Timer Capture Compare 3 Event source
4072:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_CC4: Timer Capture Compare 4 Event source
4073:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_COM: Timer COM event source  
4074:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_TRIGGER: Timer Trigger Event source
4075:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_BREAK: Timer Break event source
4076:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_BREAK2: Timer Break2 event source  
4077:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @note   TIM6 and TIM7 can only generate an update event. 
4078:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @note   TIM_EVENTSOURCE_COM, TIM_EVENTSOURCE_BREAK and TIM_EVENTSOURCE_BREAK2 are used only wit
ARM GAS  /tmp/ccrrJVNd.s 			page 73


4079:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
4080:HALLIB/Src/stm32f7xx_hal_tim.c ****   */ 
4081:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4082:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
4083:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4084:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
4085:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
4086:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_EVENT_SOURCE(EventSource));
4087:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4088:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Process Locked */
4089:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim);
4090:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4091:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change the TIM state */
4092:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
4093:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4094:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the event sources */
4095:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->EGR = EventSource;
4096:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4097:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Change the TIM state */
4098:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
4099:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4100:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
4101:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4102:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Return function status */
4103:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;  
4104:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4105:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4106:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4107:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configures the OCRef clear feature
4108:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4109:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4110:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  sClearInputConfig pointer to a TIM_ClearInputConfigTypeDef structure that
4111:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         contains the OCREF clear feature and parameters for the TIM peripheral. 
4112:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel specifies the TIM Channel.
4113:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
4114:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
4115:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
4116:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
4117:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
4118:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
4119:HALLIB/Src/stm32f7xx_hal_tim.c ****   */ 
4120:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigType
4121:HALLIB/Src/stm32f7xx_hal_tim.c **** { 
4122:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
4123:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
4124:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CHANNELS(Channel));
4125:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));
4126:HALLIB/Src/stm32f7xx_hal_tim.c ****    
4127:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Process Locked */
4128:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim);
4129:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4130:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
4131:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4132:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
4133:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
4134:HALLIB/Src/stm32f7xx_hal_tim.c ****     assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
4135:HALLIB/Src/stm32f7xx_hal_tim.c ****     assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
ARM GAS  /tmp/ccrrJVNd.s 			page 74


4136:HALLIB/Src/stm32f7xx_hal_tim.c ****     assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
4137:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4138:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_ETR_SetConfig(htim->Instance, 
4139:HALLIB/Src/stm32f7xx_hal_tim.c ****                       sClearInputConfig->ClearInputPrescaler,
4140:HALLIB/Src/stm32f7xx_hal_tim.c ****                       sClearInputConfig->ClearInputPolarity,
4141:HALLIB/Src/stm32f7xx_hal_tim.c ****                       sClearInputConfig->ClearInputFilter);
4142:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
4143:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4144:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
4145:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
4146:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
4147:HALLIB/Src/stm32f7xx_hal_tim.c ****     {        
4148:HALLIB/Src/stm32f7xx_hal_tim.c ****       if(sClearInputConfig->ClearInputState != RESET)  
4149:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
4150:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Enable the Ocref clear feature for Channel 1 */
4151:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
4152:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
4153:HALLIB/Src/stm32f7xx_hal_tim.c ****       else
4154:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
4155:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Disable the Ocref clear feature for Channel 1 */
4156:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
4157:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
4158:HALLIB/Src/stm32f7xx_hal_tim.c ****     }    
4159:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4160:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:    
4161:HALLIB/Src/stm32f7xx_hal_tim.c ****     { 
4162:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
4163:HALLIB/Src/stm32f7xx_hal_tim.c ****       if(sClearInputConfig->ClearInputState != RESET)  
4164:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
4165:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Enable the Ocref clear feature for Channel 2 */
4166:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
4167:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
4168:HALLIB/Src/stm32f7xx_hal_tim.c ****       else
4169:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
4170:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Disable the Ocref clear feature for Channel 2 */
4171:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
4172:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
4173:HALLIB/Src/stm32f7xx_hal_tim.c ****     } 
4174:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4175:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:   
4176:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
4177:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
4178:HALLIB/Src/stm32f7xx_hal_tim.c ****       if(sClearInputConfig->ClearInputState != RESET)  
4179:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
4180:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Enable the Ocref clear feature for Channel 3 */
4181:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
4182:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
4183:HALLIB/Src/stm32f7xx_hal_tim.c ****       else
4184:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
4185:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Disable the Ocref clear feature for Channel 3 */
4186:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
4187:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
4188:HALLIB/Src/stm32f7xx_hal_tim.c ****     } 
4189:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4190:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:    
4191:HALLIB/Src/stm32f7xx_hal_tim.c ****     {  
4192:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
ARM GAS  /tmp/ccrrJVNd.s 			page 75


4193:HALLIB/Src/stm32f7xx_hal_tim.c ****       if(sClearInputConfig->ClearInputState != RESET)  
4194:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
4195:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Enable the Ocref clear feature for Channel 4 */
4196:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
4197:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
4198:HALLIB/Src/stm32f7xx_hal_tim.c ****       else
4199:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
4200:HALLIB/Src/stm32f7xx_hal_tim.c ****         /* Disable the Ocref clear feature for Channel 4 */
4201:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
4202:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
4203:HALLIB/Src/stm32f7xx_hal_tim.c ****     } 
4204:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4205:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:  
4206:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4207:HALLIB/Src/stm32f7xx_hal_tim.c ****   } 
4208:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4209:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
4210:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4211:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
4212:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4213:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;  
4214:HALLIB/Src/stm32f7xx_hal_tim.c **** }  
4215:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4216:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4217:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief   Configures the clock source to be used
4218:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4219:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4220:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
4221:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         contains the clock source information for the TIM peripheral. 
4222:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
4223:HALLIB/Src/stm32f7xx_hal_tim.c ****   */ 
4224:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sCloc
4225:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4226:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr = 0;
4227:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4228:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Process Locked */
4229:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim);
4230:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4231:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
4232:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4233:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
4234:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
4235:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4236:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
4237:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR;
4238:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
4239:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
4240:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->SMCR = tmpsmcr;
4241:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4242:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (sClockSourceConfig->ClockSource)
4243:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
4244:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_INTERNAL:
4245:HALLIB/Src/stm32f7xx_hal_tim.c ****     { 
4246:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_INSTANCE(htim->Instance));      
4247:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable slave mode to clock the prescaler directly with the internal clock */
4248:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->SMCR &= ~TIM_SMCR_SMS;
4249:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
ARM GAS  /tmp/ccrrJVNd.s 			page 76


4250:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4251:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4252:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ETRMODE1:
4253:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4254:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
4255:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
4256:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
4257:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
4258:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the ETR Clock source */
4259:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_ETR_SetConfig(htim->Instance, 
4260:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPrescaler, 
4261:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPolarity, 
4262:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockFilter);
4263:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Get the TIMx SMCR register value */
4264:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpsmcr = htim->Instance->SMCR;
4265:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Reset the SMS and TS Bits */
4266:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
4267:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Select the External clock mode1 and the ETRF trigger */
4268:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
4269:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Write to TIMx SMCR */
4270:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->SMCR = tmpsmcr;
4271:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4272:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4273:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4274:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ETRMODE2:
4275:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4276:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
4277:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
4278:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
4279:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
4280:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4281:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the ETR Clock source */
4282:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_ETR_SetConfig(htim->Instance, 
4283:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPrescaler, 
4284:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPolarity,
4285:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockFilter);
4286:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the External clock mode2 */
4287:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->SMCR |= TIM_SMCR_ECE;
4288:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4289:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4290:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4291:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_TI1:
4292:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4293:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
4294:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4295:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check TI1 input conditioning related parameters */
4296:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
4297:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
4298:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4299:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_TI1_ConfigInputStage(htim->Instance, 
4300:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPolarity, 
4301:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockFilter);
4302:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
4303:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4304:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4305:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_TI2:
4306:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
ARM GAS  /tmp/ccrrJVNd.s 			page 77


4307:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
4308:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4309:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check TI1 input conditioning related parameters */
4310:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
4311:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
4312:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4313:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_TI2_ConfigInputStage(htim->Instance, 
4314:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPolarity, 
4315:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockFilter);
4316:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
4317:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4318:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4319:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_TI1ED:
4320:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4321:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
4322:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check TI1 input conditioning related parameters */
4323:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
4324:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
4325:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4326:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_TI1_ConfigInputStage(htim->Instance, 
4327:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPolarity,
4328:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockFilter);
4329:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
4330:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4331:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4332:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR0:
4333:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4334:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
4335:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
4336:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4337:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4338:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR1:
4339:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4340:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
4341:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
4342:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4343:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4344:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR2:
4345:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4346:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
4347:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
4348:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4349:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4350:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR3:
4351:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4352:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
4353:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
4354:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4355:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4356:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4357:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
4358:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;    
4359:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
4360:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
4361:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4362:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
4363:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 78


4364:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
4365:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4366:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4367:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4368:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Selects the signal connected to the TI1 input: direct from CH1_input
4369:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         or a XOR combination between CH1_input, CH2_input & CH3_input
4370:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4371:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4372:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TI1_Selection Indicate whether or not channel 1 is connected to the
4373:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         output of a XOR gate.
4374:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         This parameter can be one of the following values:
4375:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_TI1SELECTION_CH1: The TIMx_CH1 pin is connected to TI1 input
4376:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
4377:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            pins are connected to the TI1 input (XOR combination)
4378:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
4379:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4380:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
4381:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4382:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpcr2 = 0;
4383:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4384:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
4385:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_XOR_INSTANCE(htim->Instance)); 
4386:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_TI1SELECTION(TI1_Selection));
4387:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4388:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
4389:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpcr2 = htim->Instance->CR2;
4390:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4391:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the TI1 selection */
4392:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpcr2 &= ~TIM_CR2_TI1S;
4393:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4394:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the TI1 selection */
4395:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpcr2 |= TI1_Selection;
4396:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4397:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMxCR2 */
4398:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->CR2 = tmpcr2;
4399:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4400:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
4401:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4402:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4403:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4404:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configures the TIM in Slave mode
4405:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4406:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4407:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  sSlaveConfig pointer to a TIM_SlaveConfigTypeDef structure that
4408:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         contains the selected trigger (internal trigger input, filtered
4409:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         timer input or external trigger input) and the ) and the Slave 
4410:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         mode (Disable, Reset, Gated, Trigger, External clock mode 1). 
4411:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
4412:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4413:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDe
4414:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4415:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr  = 0;
4416:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmr1 = 0;
4417:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
4418:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4419:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
4420:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
ARM GAS  /tmp/ccrrJVNd.s 			page 79


4421:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
4422:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
4423:HALLIB/Src/stm32f7xx_hal_tim.c ****    
4424:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim);
4425:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4426:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
4427:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4428:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx SMCR register value */
4429:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR;
4430:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4431:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the Trigger Selection Bits */
4432:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr &= ~TIM_SMCR_TS;
4433:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Input Trigger source */
4434:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr |= sSlaveConfig->InputTrigger;
4435:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4436:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the slave mode Bits */
4437:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr &= ~TIM_SMCR_SMS;
4438:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the slave mode */
4439:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr |= sSlaveConfig->SlaveMode;
4440:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4441:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx SMCR */
4442:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->SMCR = tmpsmcr;
4443:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4444:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Configure the trigger prescaler, filter, and polarity */
4445:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (sSlaveConfig->InputTrigger)
4446:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
4447:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_ETRF:
4448:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4449:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
4450:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
4451:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
4452:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
4453:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
4454:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the ETR Trigger source */
4455:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_ETR_SetConfig(htim->Instance, 
4456:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sSlaveConfig->TriggerPrescaler, 
4457:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sSlaveConfig->TriggerPolarity, 
4458:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sSlaveConfig->TriggerFilter);
4459:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4460:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4461:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4462:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_TI1F_ED:
4463:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4464:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
4465:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
4466:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
4467:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4468:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the Channel 1: Reset the CC1E Bit */
4469:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccer = htim->Instance->CCER;
4470:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCER &= ~TIM_CCER_CC1E;
4471:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccmr1 = htim->Instance->CCMR1;    
4472:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4473:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the filter */
4474:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccmr1 &= ~TIM_CCMR1_IC1F;
4475:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
4476:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4477:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Write to TIMx CCMR1 and CCER registers */
ARM GAS  /tmp/ccrrJVNd.s 			page 80


4478:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR1 = tmpccmr1;
4479:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCER = tmpccer;                               
4480:HALLIB/Src/stm32f7xx_hal_tim.c ****                                
4481:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4482:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4483:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4484:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_TI1FP1:
4485:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4486:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
4487:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
4488:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
4489:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
4490:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4491:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure TI1 Filter and Polarity */
4492:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_TI1_ConfigInputStage(htim->Instance,
4493:HALLIB/Src/stm32f7xx_hal_tim.c ****                                sSlaveConfig->TriggerPolarity,
4494:HALLIB/Src/stm32f7xx_hal_tim.c ****                                sSlaveConfig->TriggerFilter);
4495:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4496:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4497:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4498:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_TI2FP2:
4499:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4500:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
4501:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
4502:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
4503:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
4504:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4505:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure TI2 Filter and Polarity */
4506:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_TI2_ConfigInputStage(htim->Instance,
4507:HALLIB/Src/stm32f7xx_hal_tim.c ****                                 sSlaveConfig->TriggerPolarity,
4508:HALLIB/Src/stm32f7xx_hal_tim.c ****                                 sSlaveConfig->TriggerFilter);
4509:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4510:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4511:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4512:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_ITR0:
4513:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4514:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameter */
4515:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
4516:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4517:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4518:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4519:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_ITR1:
4520:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4521:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameter */
4522:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
4523:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4524:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4525:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4526:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_ITR2:
4527:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4528:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameter */
4529:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
4530:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4531:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4532:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4533:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_ITR3:
4534:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
ARM GAS  /tmp/ccrrJVNd.s 			page 81


4535:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameter */
4536:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
4537:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4538:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4539:HALLIB/Src/stm32f7xx_hal_tim.c ****        
4540:HALLIB/Src/stm32f7xx_hal_tim.c ****   default:
4541:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
4542:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
4543:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4544:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
4545:HALLIB/Src/stm32f7xx_hal_tim.c ****      
4546:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);  
4547:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4548:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
4549:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
4550:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4551:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4552:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configures the TIM in Slave mode in interrupt mode
4553:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim TIM handle.
4554:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  sSlaveConfig pointer to a TIM_SlaveConfigTypeDef structure that
4555:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         contains the selected trigger (internal trigger input, filtered
4556:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         timer input or external trigger input) and the ) and the Slave 
4557:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         mode (Disable, Reset, Gated, Trigger, External clock mode 1). 
4558:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL status
4559:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4560:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim, 
4561:HALLIB/Src/stm32f7xx_hal_tim.c ****                                                         TIM_SlaveConfigTypeDef * sSlaveConfig)
4562:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4563:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
4564:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
4565:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
4566:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
4567:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4568:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim);
4569:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4570:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
4571:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4572:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
4573:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4574:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable Trigger Interrupt */
4575:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
4576:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4577:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable Trigger DMA request */
4578:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
4579:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4580:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
4581:HALLIB/Src/stm32f7xx_hal_tim.c ****      
4582:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);  
4583:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4584:HALLIB/Src/stm32f7xx_hal_tim.c ****   return HAL_OK;
4585:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4586:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4587:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4588:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Read the captured value from Capture Compare unit
4589:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4590:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4591:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled.
ARM GAS  /tmp/ccrrJVNd.s 			page 82


4592:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
4593:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
4594:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
4595:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
4596:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
4597:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval Captured value
4598:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4599:HALLIB/Src/stm32f7xx_hal_tim.c **** uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
4600:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4601:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpreg = 0;
4602:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4603:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim);
4604:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4605:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (Channel)
4606:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
4607:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_1:
4608:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4609:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
4610:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
4611:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4612:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Return the capture 1 value */
4613:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpreg = htim->Instance->CCR1;
4614:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4615:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4616:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4617:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_2:
4618:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4619:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
4620:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
4621:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4622:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Return the capture 2 value */
4623:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpreg = htim->Instance->CCR2;
4624:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4625:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4626:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4627:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4628:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_3:
4629:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4630:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
4631:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
4632:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4633:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Return the capture 3 value */
4634:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpreg = htim->Instance->CCR3;
4635:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4636:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4637:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4638:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4639:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CHANNEL_4:
4640:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4641:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
4642:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
4643:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4644:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Return the capture 4 value */
4645:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpreg = htim->Instance->CCR4;
4646:HALLIB/Src/stm32f7xx_hal_tim.c ****       
4647:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4648:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
ARM GAS  /tmp/ccrrJVNd.s 			page 83


4649:HALLIB/Src/stm32f7xx_hal_tim.c ****     
4650:HALLIB/Src/stm32f7xx_hal_tim.c ****     default:
4651:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;  
4652:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
4653:HALLIB/Src/stm32f7xx_hal_tim.c ****      
4654:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);  
4655:HALLIB/Src/stm32f7xx_hal_tim.c ****   return tmpreg;
4656:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4657:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4658:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4659:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @}
4660:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4661:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4662:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group9 TIM Callbacks functions
4663:HALLIB/Src/stm32f7xx_hal_tim.c ****  *  @brief    TIM Callbacks functions 
4664:HALLIB/Src/stm32f7xx_hal_tim.c ****  *
4665:HALLIB/Src/stm32f7xx_hal_tim.c **** @verbatim   
4666:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
4667:HALLIB/Src/stm32f7xx_hal_tim.c ****                         ##### TIM Callbacks functions #####
4668:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================  
4669:HALLIB/Src/stm32f7xx_hal_tim.c ****  [..]  
4670:HALLIB/Src/stm32f7xx_hal_tim.c ****    This section provides TIM callback functions:
4671:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Timer Period elapsed callback
4672:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Timer Output Compare callback
4673:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Timer Input capture callback
4674:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Timer Trigger callback
4675:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Timer Error callback
4676:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Timer_RegisterCallback
4677:HALLIB/Src/stm32f7xx_hal_tim.c ****    (+) Timer_UnRegisterCallback
4678:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4679:HALLIB/Src/stm32f7xx_hal_tim.c **** @endverbatim
4680:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
4681:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4682:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4683:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4684:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Period elapsed callback in non blocking mode 
4685:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4686:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4687:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
4688:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4689:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
4690:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4691:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4692:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
4693:HALLIB/Src/stm32f7xx_hal_tim.c ****  
4694:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
4695:HALLIB/Src/stm32f7xx_hal_tim.c ****             the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
4696:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
4697:HALLIB/Src/stm32f7xx_hal_tim.c ****   
4698:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4699:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4700:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Output Compare callback in non blocking mode 
4701:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4702:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4703:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
4704:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4705:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
ARM GAS  /tmp/ccrrJVNd.s 			page 84


4706:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4707:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4708:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
4709:HALLIB/Src/stm32f7xx_hal_tim.c ****  
4710:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
4711:HALLIB/Src/stm32f7xx_hal_tim.c ****             the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
4712:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
4713:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4714:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4715:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Input Capture callback in non blocking mode 
4716:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4717:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4718:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
4719:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4720:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
4721:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4722:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4723:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
4724:HALLIB/Src/stm32f7xx_hal_tim.c ****  
4725:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
4726:HALLIB/Src/stm32f7xx_hal_tim.c ****             the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
4727:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
4728:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4729:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4730:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4731:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  PWM Pulse finished callback in non blocking mode 
4732:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4733:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4734:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
4735:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4736:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
4737:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4738:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4739:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
4740:HALLIB/Src/stm32f7xx_hal_tim.c ****  
4741:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
4742:HALLIB/Src/stm32f7xx_hal_tim.c ****             the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
4743:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
4744:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4745:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4746:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4747:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Hall Trigger detection callback in non blocking mode 
4748:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4749:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4750:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
4751:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4752:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
4753:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4754:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4755:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
4756:HALLIB/Src/stm32f7xx_hal_tim.c ****  
4757:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
4758:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_TriggerCallback could be implemented in the user file
4759:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
4760:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4761:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4762:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
ARM GAS  /tmp/ccrrJVNd.s 			page 85


4763:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Timer error callback in non blocking mode 
4764:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
4765:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
4766:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
4767:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4768:HALLIB/Src/stm32f7xx_hal_tim.c **** __weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
4769:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4770:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4771:HALLIB/Src/stm32f7xx_hal_tim.c ****   UNUSED(htim);
4772:HALLIB/Src/stm32f7xx_hal_tim.c ****  
4773:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
4774:HALLIB/Src/stm32f7xx_hal_tim.c ****             the HAL_TIM_ErrorCallback could be implemented in the user file
4775:HALLIB/Src/stm32f7xx_hal_tim.c ****    */
4776:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4777:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4778:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
4779:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4780:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Register a User TIM callback to be used instead of the weak predefined callback
4781:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param htim tim handle
4782:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param CallbackID ID of the callback to be registered
4783:HALLIB/Src/stm32f7xx_hal_tim.c ****   *        This parameter can be one of the following values:
4784:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BASE_MSPINIT_CB_ID Base MspInit Callback ID
4785:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BASE_MSPDEINIT_CB_ID Base MspDeInit Callback ID
4786:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_MSPINIT_CB_ID IC MspInit Callback ID
4787:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_MSPDEINIT_CB_ID IC MspDeInit Callback ID
4788:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_MSPINIT_CB_ID OC MspInit Callback ID
4789:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_MSPDEINIT_CB_ID OC MspDeInit Callback ID
4790:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_MSPINIT_CB_ID PWM MspInit Callback ID
4791:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_MSPDEINIT_CB_ID PWM MspDeInit Callback ID
4792:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ONE_PULSE_MSPINIT_CB_ID One Pulse MspInit Callback ID
4793:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID One Pulse MspDeInit Callback ID
4794:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ENCODER_MSPINIT_CB_ID Encoder MspInit Callback ID
4795:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ENCODER_MSPDEINIT_CB_ID Encoder MspDeInit Callback ID
4796:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID Hall Sensor MspInit Callback ID
4797:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID Hall Sensor MspDeInit Callback ID
4798:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PERIOD_ELAPSED_CB_ID Period Elapsed Callback ID
4799:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_TRIGGER_CB_ID Trigger Callback ID
4800:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_CAPTURE_CB_ID Input Capture Callback ID
4801:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_DELAY_ELAPSED_CB_ID Output Compare Delay Elapsed Callback ID
4802:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_PULSE_FINISHED_CB_ID PWM Pulse Finished Callback ID
4803:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ERROR_CB_ID Error Callback ID
4804:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_COMMUTATION_CB_ID Commutation Callback ID
4805:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BREAK_CB_ID Break Callback ID
4806:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param pCallback pointer to the callback function
4807:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval status
4808:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
4809:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef Callb
4810:HALLIB/Src/stm32f7xx_hal_tim.c **** {
4811:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_StatusTypeDef status = HAL_OK;
4812:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4813:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(pCallback == NULL)
4814:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
4815:HALLIB/Src/stm32f7xx_hal_tim.c ****     return HAL_ERROR;
4816:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
4817:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Process locked */
4818:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim);
4819:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 86


4820:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->State == HAL_TIM_STATE_READY)
4821:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
4822:HALLIB/Src/stm32f7xx_hal_tim.c ****     switch (CallbackID)
4823:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4824:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_BASE_MSPINIT_CB_ID :
4825:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Base_MspInitCallback         = pCallback;
4826:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4827:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4828:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_BASE_MSPDEINIT_CB_ID :
4829:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Base_MspDeInitCallback       = pCallback;
4830:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4831:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4832:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_IC_MSPINIT_CB_ID :
4833:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->IC_MspInitCallback           = pCallback;
4834:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4835:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4836:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_IC_MSPDEINIT_CB_ID :
4837:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->IC_MspDeInitCallback         = pCallback;
4838:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4839:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4840:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_OC_MSPINIT_CB_ID :
4841:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OC_MspInitCallback           = pCallback;
4842:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4843:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4844:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_OC_MSPDEINIT_CB_ID :
4845:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OC_MspDeInitCallback         = pCallback;
4846:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4847:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4848:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PWM_MSPINIT_CB_ID :
4849:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PWM_MspInitCallback          = pCallback;
4850:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4851:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4852:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PWM_MSPDEINIT_CB_ID :
4853:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PWM_MspDeInitCallback        = pCallback;
4854:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4855:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4856:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
4857:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OnePulse_MspInitCallback     = pCallback;
4858:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4859:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4860:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
4861:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OnePulse_MspDeInitCallback   = pCallback;
4862:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4863:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4864:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ENCODER_MSPINIT_CB_ID :
4865:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Encoder_MspInitCallback      = pCallback;
4866:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4867:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4868:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
4869:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Encoder_MspDeInitCallback    = pCallback;
4870:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4871:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4872:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
4873:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->HallSensor_MspInitCallback   = pCallback;
4874:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4875:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4876:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
ARM GAS  /tmp/ccrrJVNd.s 			page 87


4877:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->HallSensor_MspDeInitCallback = pCallback;
4878:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4879:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4880:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PERIOD_ELAPSED_CB_ID :
4881:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PeriodElapsedCallback        = pCallback;
4882:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4883:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4884:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_TRIGGER_CB_ID :
4885:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->TriggerCallback              = pCallback;
4886:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4887:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4888:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_IC_CAPTURE_CB_ID :
4889:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->IC_CaptureCallback           = pCallback;
4890:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4891:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4892:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
4893:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OC_DelayElapsedCallback      = pCallback;
4894:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4895:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4896:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
4897:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PWM_PulseFinishedCallback    = pCallback;
4898:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4899:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4900:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ERROR_CB_ID :
4901:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->ErrorCallback                = pCallback;
4902:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4903:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4904:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_COMMUTATION_CB_ID :
4905:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->CommutationCallback          = pCallback;
4906:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4907:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4908:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_BREAK_CB_ID :
4909:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->BreakCallback                = pCallback;
4910:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4911:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4912:HALLIB/Src/stm32f7xx_hal_tim.c ****     default :
4913:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Return error status */
4914:HALLIB/Src/stm32f7xx_hal_tim.c ****       status =  HAL_ERROR;
4915:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4916:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4917:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
4918:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if(htim->State == HAL_TIM_STATE_RESET)
4919:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
4920:HALLIB/Src/stm32f7xx_hal_tim.c ****     switch (CallbackID)
4921:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
4922:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_BASE_MSPINIT_CB_ID :
4923:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Base_MspInitCallback         = pCallback;
4924:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4925:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4926:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_BASE_MSPDEINIT_CB_ID :
4927:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Base_MspDeInitCallback       = pCallback;
4928:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4929:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4930:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_IC_MSPINIT_CB_ID :
4931:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->IC_MspInitCallback           = pCallback;
4932:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4933:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 88


4934:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_IC_MSPDEINIT_CB_ID :
4935:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->IC_MspDeInitCallback         = pCallback;
4936:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4937:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4938:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_OC_MSPINIT_CB_ID :
4939:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OC_MspInitCallback           = pCallback;
4940:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4941:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4942:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_OC_MSPDEINIT_CB_ID :
4943:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OC_MspDeInitCallback         = pCallback;
4944:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4945:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4946:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PWM_MSPINIT_CB_ID :
4947:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PWM_MspInitCallback          = pCallback;
4948:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4949:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4950:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PWM_MSPDEINIT_CB_ID :
4951:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PWM_MspDeInitCallback        = pCallback;
4952:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4953:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4954:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
4955:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OnePulse_MspInitCallback     = pCallback;
4956:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4957:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4958:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
4959:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OnePulse_MspDeInitCallback   = pCallback;
4960:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4961:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4962:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ENCODER_MSPINIT_CB_ID :
4963:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Encoder_MspInitCallback      = pCallback;
4964:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4965:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4966:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
4967:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Encoder_MspDeInitCallback    = pCallback;
4968:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4969:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4970:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
4971:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->HallSensor_MspInitCallback   = pCallback;
4972:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4973:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4974:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
4975:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->HallSensor_MspDeInitCallback = pCallback;
4976:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4977:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4978:HALLIB/Src/stm32f7xx_hal_tim.c ****     default :
4979:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Return error status */
4980:HALLIB/Src/stm32f7xx_hal_tim.c ****       status =  HAL_ERROR;
4981:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
4982:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
4983:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
4984:HALLIB/Src/stm32f7xx_hal_tim.c ****   else
4985:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
4986:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Return error status */
4987:HALLIB/Src/stm32f7xx_hal_tim.c ****     status =  HAL_ERROR;
4988:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
4989:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4990:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Release Lock */
ARM GAS  /tmp/ccrrJVNd.s 			page 89


4991:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
4992:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4993:HALLIB/Src/stm32f7xx_hal_tim.c ****   return status;
4994:HALLIB/Src/stm32f7xx_hal_tim.c **** }
4995:HALLIB/Src/stm32f7xx_hal_tim.c **** 
4996:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
4997:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Unregister a TIM callback
4998:HALLIB/Src/stm32f7xx_hal_tim.c ****   *         TIM callback is redirected to the weak predefined callback
4999:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param htim tim handle
5000:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param CallbackID ID of the callback to be unregistered
5001:HALLIB/Src/stm32f7xx_hal_tim.c ****   *        This parameter can be one of the following values:
5002:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BASE_MSPINIT_CB_ID Base MspInit Callback ID
5003:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BASE_MSPDEINIT_CB_ID Base MspDeInit Callback ID
5004:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_MSPINIT_CB_ID IC MspInit Callback ID
5005:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_MSPDEINIT_CB_ID IC MspDeInit Callback ID
5006:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_MSPINIT_CB_ID OC MspInit Callback ID
5007:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_MSPDEINIT_CB_ID OC MspDeInit Callback ID
5008:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_MSPINIT_CB_ID PWM MspInit Callback ID
5009:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_MSPDEINIT_CB_ID PWM MspDeInit Callback ID
5010:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ONE_PULSE_MSPINIT_CB_ID One Pulse MspInit Callback ID
5011:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID One Pulse MspDeInit Callback ID
5012:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ENCODER_MSPINIT_CB_ID Encoder MspInit Callback ID
5013:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ENCODER_MSPDEINIT_CB_ID Encoder MspDeInit Callback ID
5014:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID Hall Sensor MspInit Callback ID
5015:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID Hall Sensor MspDeInit Callback ID
5016:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PERIOD_ELAPSED_CB_ID Period Elapsed Callback ID
5017:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_TRIGGER_CB_ID Trigger Callback ID
5018:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_CAPTURE_CB_ID Input Capture Callback ID
5019:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_DELAY_ELAPSED_CB_ID Output Compare Delay Elapsed Callback ID
5020:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_PULSE_FINISHED_CB_ID PWM Pulse Finished Callback ID
5021:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ERROR_CB_ID Error Callback ID
5022:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_COMMUTATION_CB_ID Commutation Callback ID
5023:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BREAK_CB_ID Break Callback ID
5024:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval status
5025:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5026:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_UnRegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef Cal
5027:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5028:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_StatusTypeDef status = HAL_OK;
5029:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5030:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Process locked */
5031:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim);
5032:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5033:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(htim->State == HAL_TIM_STATE_READY)
5034:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5035:HALLIB/Src/stm32f7xx_hal_tim.c ****     switch (CallbackID)
5036:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
5037:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_BASE_MSPINIT_CB_ID :
5038:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Base_MspInitCallback         = HAL_TIM_Base_MspInit;              /* Legacy weak Base M
5039:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5040:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5041:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_BASE_MSPDEINIT_CB_ID :
5042:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Base_MspDeInitCallback       = HAL_TIM_Base_MspDeInit;            /* Legacy weak Base M
5043:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5044:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5045:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_IC_MSPINIT_CB_ID :
5046:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->IC_MspInitCallback           = HAL_TIM_IC_MspInit;                /* Legacy weak IC Msp
5047:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
ARM GAS  /tmp/ccrrJVNd.s 			page 90


5048:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5049:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_IC_MSPDEINIT_CB_ID :
5050:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->IC_MspDeInitCallback         = HAL_TIM_IC_MspDeInit;              /* Legacy weak IC Msp
5051:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5052:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5053:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_OC_MSPINIT_CB_ID :
5054:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OC_MspInitCallback           = HAL_TIM_OC_MspInit;                /* Legacy weak OC Msp
5055:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5056:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5057:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_OC_MSPDEINIT_CB_ID :
5058:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OC_MspDeInitCallback         = HAL_TIM_OC_MspDeInit;              /* Legacy weak OC Msp
5059:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5060:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5061:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PWM_MSPINIT_CB_ID :
5062:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PWM_MspInitCallback          = HAL_TIM_PWM_MspInit;               /* Legacy weak PWM Ms
5063:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5064:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5065:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PWM_MSPDEINIT_CB_ID :
5066:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PWM_MspDeInitCallback        = HAL_TIM_PWM_MspDeInit;             /* Legacy weak PWM Ms
5067:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5068:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5069:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
5070:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OnePulse_MspInitCallback     = HAL_TIM_OnePulse_MspInit;          /* Legacy weak One Pu
5071:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5072:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5073:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
5074:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OnePulse_MspDeInitCallback   = HAL_TIM_OnePulse_MspDeInit;        /* Legacy weak One Pu
5075:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5076:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5077:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ENCODER_MSPINIT_CB_ID :
5078:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Encoder_MspInitCallback      = HAL_TIM_Encoder_MspInit;           /* Legacy weak Encode
5079:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5080:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5081:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
5082:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Encoder_MspDeInitCallback    = HAL_TIM_Encoder_MspDeInit;         /* Legacy weak Encode
5083:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5084:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5085:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
5086:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->HallSensor_MspInitCallback   = HAL_TIMEx_HallSensor_MspInit;      /* Legacy weak Hall S
5087:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5088:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5089:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
5090:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->HallSensor_MspDeInitCallback = HAL_TIMEx_HallSensor_MspDeInit;    /* Legacy weak Hall S
5091:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5092:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5093:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PERIOD_ELAPSED_CB_ID :
5094:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PeriodElapsedCallback        = HAL_TIM_PeriodElapsedCallback;     /* Legacy weak Period
5095:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5096:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5097:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_TRIGGER_CB_ID :
5098:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->TriggerCallback              = HAL_TIM_TriggerCallback;           /* Legacy weak Trigge
5099:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5100:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5101:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_IC_CAPTURE_CB_ID :
5102:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->IC_CaptureCallback           = HAL_TIM_IC_CaptureCallback;        /* Legacy weak IC Cap
5103:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5104:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 91


5105:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
5106:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OC_DelayElapsedCallback      = HAL_TIM_OC_DelayElapsedCallback;   /* Legacy weak OC Del
5107:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5108:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5109:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
5110:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PWM_PulseFinishedCallback    = HAL_TIM_PWM_PulseFinishedCallback; /* Legacy weak PWM Pu
5111:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5112:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5113:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ERROR_CB_ID :
5114:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->ErrorCallback                = HAL_TIM_ErrorCallback;             /* Legacy weak Error 
5115:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5116:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5117:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_COMMUTATION_CB_ID :
5118:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->CommutationCallback          = HAL_TIMEx_CommutationCallback;     /* Legacy weak Commut
5119:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5120:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5121:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_BREAK_CB_ID :
5122:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->BreakCallback                = HAL_TIMEx_BreakCallback;           /* Legacy weak Break 
5123:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5124:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5125:HALLIB/Src/stm32f7xx_hal_tim.c ****     default :
5126:HALLIB/Src/stm32f7xx_hal_tim.c ****      /* Return error status */
5127:HALLIB/Src/stm32f7xx_hal_tim.c ****       status =  HAL_ERROR;
5128:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5129:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
5130:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5131:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if(htim->State == HAL_TIM_STATE_RESET)
5132:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5133:HALLIB/Src/stm32f7xx_hal_tim.c ****     switch (CallbackID)
5134:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
5135:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_BASE_MSPINIT_CB_ID :
5136:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Base_MspInitCallback         = HAL_TIM_Base_MspInit;              /* Legacy weak Base M
5137:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5138:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5139:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_BASE_MSPDEINIT_CB_ID :
5140:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Base_MspDeInitCallback       = HAL_TIM_Base_MspDeInit;            /* Legacy weak Base M
5141:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5142:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5143:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_IC_MSPINIT_CB_ID :
5144:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->IC_MspInitCallback           = HAL_TIM_IC_MspInit;                /* Legacy weak IC Msp
5145:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5146:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5147:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_IC_MSPDEINIT_CB_ID :
5148:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->IC_MspDeInitCallback         = HAL_TIM_IC_MspDeInit;              /* Legacy weak IC Msp
5149:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5150:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5151:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_OC_MSPINIT_CB_ID :
5152:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OC_MspInitCallback           = HAL_TIM_OC_MspInit;                /* Legacy weak OC Msp
5153:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5154:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5155:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_OC_MSPDEINIT_CB_ID :
5156:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OC_MspDeInitCallback         = HAL_TIM_OC_MspDeInit;              /* Legacy weak OC Msp
5157:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5158:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5159:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PWM_MSPINIT_CB_ID :
5160:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PWM_MspInitCallback          = HAL_TIM_PWM_MspInit;               /* Legacy weak PWM Ms
5161:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
ARM GAS  /tmp/ccrrJVNd.s 			page 92


5162:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5163:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_PWM_MSPDEINIT_CB_ID :
5164:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->PWM_MspDeInitCallback        = HAL_TIM_PWM_MspDeInit;             /* Legacy weak PWM Ms
5165:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5166:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5167:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
5168:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OnePulse_MspInitCallback     = HAL_TIM_OnePulse_MspInit;          /* Legacy weak One Pu
5169:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5170:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5171:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
5172:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->OnePulse_MspDeInitCallback   = HAL_TIM_OnePulse_MspDeInit;        /* Legacy weak One Pu
5173:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5174:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5175:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ENCODER_MSPINIT_CB_ID :
5176:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Encoder_MspInitCallback      = HAL_TIM_Encoder_MspInit;           /* Legacy weak Encode
5177:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5178:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5179:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
5180:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Encoder_MspDeInitCallback    = HAL_TIM_Encoder_MspDeInit;         /* Legacy weak Encode
5181:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5182:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5183:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
5184:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->HallSensor_MspInitCallback   = HAL_TIMEx_HallSensor_MspInit;      /* Legacy weak Hall S
5185:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5186:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5187:HALLIB/Src/stm32f7xx_hal_tim.c ****     case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
5188:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->HallSensor_MspDeInitCallback = HAL_TIMEx_HallSensor_MspDeInit;    /* Legacy weak Hall S
5189:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5190:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5191:HALLIB/Src/stm32f7xx_hal_tim.c ****     default :
5192:HALLIB/Src/stm32f7xx_hal_tim.c ****      /* Return error status */
5193:HALLIB/Src/stm32f7xx_hal_tim.c ****       status =  HAL_ERROR;
5194:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
5195:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
5196:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5197:HALLIB/Src/stm32f7xx_hal_tim.c ****   else
5198:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5199:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Return error status */
5200:HALLIB/Src/stm32f7xx_hal_tim.c ****     status =  HAL_ERROR;
5201:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5202:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5203:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Release Lock */
5204:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_UNLOCK(htim);
5205:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5206:HALLIB/Src/stm32f7xx_hal_tim.c ****   return status;
5207:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5208:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5209:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5210:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5211:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @}
5212:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5213:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5214:HALLIB/Src/stm32f7xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group10 Peripheral State functions 
5215:HALLIB/Src/stm32f7xx_hal_tim.c ****  *  @brief   Peripheral State functions 
5216:HALLIB/Src/stm32f7xx_hal_tim.c ****  *
5217:HALLIB/Src/stm32f7xx_hal_tim.c **** @verbatim   
5218:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================
ARM GAS  /tmp/ccrrJVNd.s 			page 93


5219:HALLIB/Src/stm32f7xx_hal_tim.c ****                         ##### Peripheral State functions #####
5220:HALLIB/Src/stm32f7xx_hal_tim.c ****   ==============================================================================  
5221:HALLIB/Src/stm32f7xx_hal_tim.c ****   [..]
5222:HALLIB/Src/stm32f7xx_hal_tim.c ****     This subsection permits to get in run-time the status of the peripheral 
5223:HALLIB/Src/stm32f7xx_hal_tim.c ****     and the data flow.
5224:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5225:HALLIB/Src/stm32f7xx_hal_tim.c **** @endverbatim
5226:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @{
5227:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5228:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5229:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5230:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Return the TIM Base state
5231:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
5232:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
5233:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL state
5234:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5235:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
5236:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5237:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
5238:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5239:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5240:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5241:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Return the TIM OC state
5242:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
5243:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
5244:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL state
5245:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5246:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
5247:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5248:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
5249:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5250:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5251:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5252:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Return the TIM PWM state
5253:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
5254:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
5255:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL state
5256:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5257:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
5258:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5259:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
5260:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5261:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5262:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5263:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Return the TIM Input Capture state
5264:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
5265:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
5266:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL state
5267:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5268:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
5269:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5270:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
5271:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5272:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5273:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5274:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Return the TIM One Pulse Mode state
5275:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
ARM GAS  /tmp/ccrrJVNd.s 			page 94


5276:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
5277:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL state
5278:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5279:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
5280:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5281:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
5282:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5283:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5284:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5285:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Return the TIM Encoder Mode state
5286:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
5287:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
5288:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval HAL state
5289:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5290:HALLIB/Src/stm32f7xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
5291:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5292:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
5293:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5294:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5295:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5296:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @}
5297:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5298:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5299:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5300:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  TIM DMA error callback 
5301:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
5302:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for the specified DMA module.
5303:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5304:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5305:HALLIB/Src/stm32f7xx_hal_tim.c **** void HAL_TIM_DMAError(DMA_HandleTypeDef *hdma)
5306:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5307:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
5308:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5309:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY;
5310:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5311:HALLIB/Src/stm32f7xx_hal_tim.c ****    htim->ErrorCallback(htim);
5312:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
5313:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_TIM_ErrorCallback(htim);
5314:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5315:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5316:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5317:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5318:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  TIM DMA Delay Pulse complete callback. 
5319:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
5320:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for the specified DMA module.
5321:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5322:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5323:HALLIB/Src/stm32f7xx_hal_tim.c **** void HAL_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
5324:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5325:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
5326:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5327:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY; 
5328:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5329:HALLIB/Src/stm32f7xx_hal_tim.c ****   if (hdma == htim->hdma[TIM_DMA_ID_CC1])
5330:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5331:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
5332:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
ARM GAS  /tmp/ccrrJVNd.s 			page 95


5333:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
5334:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5335:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
5336:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5337:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
5338:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5339:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
5340:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5341:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
5342:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5343:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
5344:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5345:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5346:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5347:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->PWM_PulseFinishedCallback(htim);
5348:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
5349:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_TIM_PWM_PulseFinishedCallback(htim);
5350:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5351:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
5352:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5353:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5354:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  TIM DMA Capture complete callback. 
5355:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
5356:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for the specified DMA module.
5357:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5358:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5359:HALLIB/Src/stm32f7xx_hal_tim.c **** void HAL_TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
5360:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5361:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
5362:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5363:HALLIB/Src/stm32f7xx_hal_tim.c ****    htim->State= HAL_TIM_STATE_READY; 
5364:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5365:HALLIB/Src/stm32f7xx_hal_tim.c ****   if (hdma == htim->hdma[TIM_DMA_ID_CC1])
5366:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5367:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
5368:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5369:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
5370:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5371:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
5372:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5373:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
5374:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5375:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
5376:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5377:HALLIB/Src/stm32f7xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
5378:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5379:HALLIB/Src/stm32f7xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
5380:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5381:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5382:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->IC_CaptureCallback(htim);
5383:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
5384:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_TIM_IC_CaptureCallback(htim);
5385:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5386:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
5387:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5388:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5389:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 96


5390:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5391:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  TIM DMA Period Elapse complete callback. 
5392:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
5393:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for the specified DMA module.
5394:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5395:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5396:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
5397:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5398:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
5399:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5400:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY;
5401:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5402:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->PeriodElapsedCallback(htim);
5403:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
5404:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_TIM_PeriodElapsedCallback(htim);
5405:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5406:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5407:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5408:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5409:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  TIM DMA Trigger callback. 
5410:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
5411:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for the specified DMA module.
5412:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5413:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5414:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
5415:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5416:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;  
5417:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5418:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->State= HAL_TIM_STATE_READY; 
5419:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5420:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->TriggerCallback(htim);
5421:HALLIB/Src/stm32f7xx_hal_tim.c **** #else
5422:HALLIB/Src/stm32f7xx_hal_tim.c ****   HAL_TIM_TriggerCallback(htim);
5423:HALLIB/Src/stm32f7xx_hal_tim.c ****  #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5424:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5425:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5426:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5427:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Time Base configuration
5428:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx TIM peripheral
5429:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Structure pointer on TIM Time Base required parameters  
5430:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5431:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5432:HALLIB/Src/stm32f7xx_hal_tim.c **** void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
5433:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5434:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpcr1 = 0;
5435:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpcr1 = TIMx->CR1;
5436:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5437:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set TIM Time Base Unit parameters ---------------------------------------*/
5438:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
5439:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5440:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Select the Counter Mode */
5441:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
5442:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr1 |= Structure->CounterMode;
5443:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5444:HALLIB/Src/stm32f7xx_hal_tim.c ****  
5445:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
5446:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
ARM GAS  /tmp/ccrrJVNd.s 			page 97


5447:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the clock division */
5448:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr1 &= ~TIM_CR1_CKD;
5449:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr1 |= (uint32_t)Structure->ClockDivision;
5450:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5451:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5452:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the auto-reload preload */
5453:HALLIB/Src/stm32f7xx_hal_tim.c ****   MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
5454:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5455:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CR1 = tmpcr1;
5456:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5457:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Auto-reload value */
5458:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->ARR = (uint32_t)Structure->Period ;
5459:HALLIB/Src/stm32f7xx_hal_tim.c ****  
5460:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Prescaler value */
5461:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->PSC = (uint32_t)Structure->Prescaler;
5462:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5463:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
5464:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5465:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Repetition Counter value */
5466:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIMx->RCR = Structure->RepetitionCounter;
5467:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5468:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5469:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Generate an update event to reload the Prescaler 
5470:HALLIB/Src/stm32f7xx_hal_tim.c ****      and the repetition counter(only for TIM1 and TIM8) value immediately */
5471:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->EGR = TIM_EGR_UG;
5472:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5473:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5474:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5475:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Time Output Compare 1 configuration
5476:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
5477:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  OC_Config The output configuration structure
5478:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5479:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5480:HALLIB/Src/stm32f7xx_hal_tim.c **** void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
5481:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5482:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmrx = 0;
5483:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
5484:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpcr2 = 0;  
5485:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5486:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
5487:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC1E;
5488:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5489:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CCER register value */
5490:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = TIMx->CCER;
5491:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
5492:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpcr2 = TIMx->CR2;
5493:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5494:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CCMR1 register value */
5495:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx = TIMx->CCMR1;
5496:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5497:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the Output Compare Mode Bits */
5498:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR1_OC1M;
5499:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR1_CC1S;
5500:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Output Compare Mode */
5501:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx |= OC_Config->OCMode;
5502:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5503:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the Output Polarity level */
ARM GAS  /tmp/ccrrJVNd.s 			page 98


5504:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~TIM_CCER_CC1P;
5505:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Output Compare Polarity */
5506:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= OC_Config->OCPolarity;
5507:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5508:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5509:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
5510:HALLIB/Src/stm32f7xx_hal_tim.c ****   {   
5511:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output N Polarity level */
5512:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC1NP;
5513:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Polarity */
5514:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccer |= OC_Config->OCNPolarity;
5515:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output N State */
5516:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC1NE;
5517:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5518:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
5519:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS1;
5520:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS1N;
5521:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output Idle state */
5522:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 |= OC_Config->OCIdleState;
5523:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Idle state */
5524:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 |= OC_Config->OCNIdleState;
5525:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5526:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CR2 */
5527:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CR2 = tmpcr2;
5528:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5529:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCMR1 */
5530:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmrx;
5531:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5532:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Capture Compare Register value */
5533:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCR1 = OC_Config->Pulse;
5534:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5535:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCER */
5536:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER = tmpccer;  
5537:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
5538:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5539:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5540:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Time Output Compare 2 configuration
5541:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
5542:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  OC_Config The output configuration structure
5543:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5544:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5545:HALLIB/Src/stm32f7xx_hal_tim.c **** void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
5546:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5547:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmrx = 0;
5548:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
5549:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpcr2 = 0;
5550:HALLIB/Src/stm32f7xx_hal_tim.c ****    
5551:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
5552:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC2E;
5553:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5554:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CCER register value */  
5555:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = TIMx->CCER;
5556:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
5557:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpcr2 = TIMx->CR2;
5558:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5559:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CCMR1 register value */
5560:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx = TIMx->CCMR1;
ARM GAS  /tmp/ccrrJVNd.s 			page 99


5561:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5562:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
5563:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR1_OC2M;
5564:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR1_CC2S;
5565:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5566:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Output Compare Mode */
5567:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx |= (OC_Config->OCMode << 8);
5568:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5569:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the Output Polarity level */
5570:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~TIM_CCER_CC2P;
5571:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Output Compare Polarity */
5572:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= (OC_Config->OCPolarity << 4);
5573:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5574:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
5575:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5576:HALLIB/Src/stm32f7xx_hal_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
5577:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5578:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output N Polarity level */
5579:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC2NP;
5580:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Polarity */
5581:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccer |= (OC_Config->OCNPolarity << 4);
5582:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output N State */
5583:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC2NE;
5584:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5585:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
5586:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS2;
5587:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS2N;
5588:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output Idle state */
5589:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 |= (OC_Config->OCIdleState << 2);
5590:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Idle state */
5591:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 |= (OC_Config->OCNIdleState << 2);
5592:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5593:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CR2 */
5594:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CR2 = tmpcr2;
5595:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5596:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCMR1 */
5597:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmrx;
5598:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5599:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Capture Compare Register value */
5600:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCR2 = OC_Config->Pulse;
5601:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5602:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCER */
5603:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER = tmpccer;
5604:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5605:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5606:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5607:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Time Output Compare 3 configuration
5608:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
5609:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  OC_Config The output configuration structure
5610:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5611:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5612:HALLIB/Src/stm32f7xx_hal_tim.c **** void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
5613:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5614:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmrx = 0;
5615:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
5616:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpcr2 = 0;   
5617:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 100


5618:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Channel 3: Reset the CC2E Bit */
5619:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC3E;
5620:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5621:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CCER register value */
5622:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = TIMx->CCER;
5623:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
5624:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpcr2 = TIMx->CR2;
5625:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5626:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CCMR2 register value */
5627:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx = TIMx->CCMR2;
5628:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5629:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
5630:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR2_OC3M;
5631:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR2_CC3S;  
5632:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Output Compare Mode */
5633:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx |= OC_Config->OCMode;
5634:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5635:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the Output Polarity level */
5636:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~TIM_CCER_CC3P;
5637:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Output Compare Polarity */
5638:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= (OC_Config->OCPolarity << 8);
5639:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5640:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
5641:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5642:HALLIB/Src/stm32f7xx_hal_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
5643:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5644:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output N Polarity level */
5645:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC3NP;
5646:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Polarity */
5647:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccer |= (OC_Config->OCNPolarity << 8);
5648:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output N State */
5649:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC3NE;
5650:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5651:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
5652:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS3;
5653:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS3N;
5654:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output Idle state */
5655:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 |= (OC_Config->OCIdleState << 4);
5656:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Idle state */
5657:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 |= (OC_Config->OCNIdleState << 4);
5658:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5659:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CR2 */
5660:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CR2 = tmpcr2;
5661:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5662:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCMR2 */
5663:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCMR2 = tmpccmrx;
5664:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5665:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Capture Compare Register value */
5666:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCR3 = OC_Config->Pulse;
5667:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5668:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCER */
5669:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER = tmpccer;
5670:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5671:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5672:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5673:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Time Output Compare 4 configuration
5674:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
ARM GAS  /tmp/ccrrJVNd.s 			page 101


5675:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  OC_Config The output configuration structure
5676:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5677:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5678:HALLIB/Src/stm32f7xx_hal_tim.c **** void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
5679:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5680:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmrx = 0;
5681:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
5682:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpcr2 = 0;
5683:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5684:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Channel 4: Reset the CC4E Bit */
5685:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC4E;
5686:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5687:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CCER register value */
5688:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = TIMx->CCER;
5689:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
5690:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpcr2 = TIMx->CR2;
5691:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5692:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CCMR2 register value */
5693:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx = TIMx->CCMR2;
5694:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5695:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
5696:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR2_OC4M;
5697:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR2_CC4S;
5698:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5699:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Output Compare Mode */
5700:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmrx |= (OC_Config->OCMode << 8);
5701:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5702:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the Output Polarity level */
5703:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~TIM_CCER_CC4P;
5704:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Output Compare Polarity */
5705:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= (OC_Config->OCPolarity << 12);
5706:HALLIB/Src/stm32f7xx_hal_tim.c ****    
5707:HALLIB/Src/stm32f7xx_hal_tim.c ****   /*if((TIMx == TIM1) || (TIMx == TIM8))*/
5708:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
5709:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5710:HALLIB/Src/stm32f7xx_hal_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
5711:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output Compare IDLE State */
5712:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS4;
5713:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output Idle state */
5714:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr2 |= (OC_Config->OCIdleState << 6);
5715:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5716:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CR2 */
5717:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CR2 = tmpcr2;
5718:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5719:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCMR2 */  
5720:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCMR2 = tmpccmrx;
5721:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5722:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Capture Compare Register value */
5723:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCR4 = OC_Config->Pulse;
5724:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5725:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCER */
5726:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER = tmpccer;
5727:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5728:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5729:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5730:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Time Output Compare 4 configuration
5731:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  htim pointer to a TIM_HandleTypeDef structure that contains
ARM GAS  /tmp/ccrrJVNd.s 			page 102


5732:HALLIB/Src/stm32f7xx_hal_tim.c ****   *                the configuration information for TIM module.
5733:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  sSlaveConfig The slave configuration structure
5734:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5735:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5736:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
5737:HALLIB/Src/stm32f7xx_hal_tim.c ****                               TIM_SlaveConfigTypeDef * sSlaveConfig)
5738:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5739:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr = 0;
5740:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmr1 = 0;
5741:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
5742:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5743:HALLIB/Src/stm32f7xx_hal_tim.c ****  /* Get the TIMx SMCR register value */
5744:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR;
5745:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5746:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the Trigger Selection Bits */
5747:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr &= ~TIM_SMCR_TS;
5748:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Input Trigger source */
5749:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr |= sSlaveConfig->InputTrigger;
5750:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5751:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the slave mode Bits */
5752:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr &= ~TIM_SMCR_SMS;
5753:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the slave mode */
5754:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr |= sSlaveConfig->SlaveMode;
5755:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5756:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx SMCR */
5757:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->SMCR = tmpsmcr;
5758:HALLIB/Src/stm32f7xx_hal_tim.c ****  
5759:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Configure the trigger prescaler, filter, and polarity */
5760:HALLIB/Src/stm32f7xx_hal_tim.c ****   switch (sSlaveConfig->InputTrigger)
5761:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5762:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_ETRF:
5763:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
5764:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
5765:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
5766:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
5767:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
5768:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
5769:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure the ETR Trigger source */
5770:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_ETR_SetConfig(htim->Instance, 
5771:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sSlaveConfig->TriggerPrescaler, 
5772:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sSlaveConfig->TriggerPolarity, 
5773:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sSlaveConfig->TriggerFilter);
5774:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
5775:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
5776:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5777:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_TI1F_ED:
5778:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
5779:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
5780:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
5781:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
5782:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
5783:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5784:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Disable the Channel 1: Reset the CC1E Bit */
5785:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccer = htim->Instance->CCER;
5786:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCER &= ~TIM_CCER_CC1E;
5787:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccmr1 = htim->Instance->CCMR1;    
5788:HALLIB/Src/stm32f7xx_hal_tim.c ****       
ARM GAS  /tmp/ccrrJVNd.s 			page 103


5789:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Set the filter */
5790:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccmr1 &= ~TIM_CCMR1_IC1F;
5791:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
5792:HALLIB/Src/stm32f7xx_hal_tim.c ****       
5793:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Write to TIMx CCMR1 and CCER registers */
5794:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR1 = tmpccmr1;
5795:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCER = tmpccer;                               
5796:HALLIB/Src/stm32f7xx_hal_tim.c ****                                
5797:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
5798:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
5799:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5800:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_TI1FP1:
5801:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
5802:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
5803:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
5804:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
5805:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
5806:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5807:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure TI1 Filter and Polarity */
5808:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_TI1_ConfigInputStage(htim->Instance,
5809:HALLIB/Src/stm32f7xx_hal_tim.c ****                                sSlaveConfig->TriggerPolarity,
5810:HALLIB/Src/stm32f7xx_hal_tim.c ****                                sSlaveConfig->TriggerFilter);
5811:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
5812:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
5813:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5814:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_TI2FP2:
5815:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
5816:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameters */
5817:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
5818:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
5819:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
5820:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5821:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Configure TI2 Filter and Polarity */
5822:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_TI2_ConfigInputStage(htim->Instance,
5823:HALLIB/Src/stm32f7xx_hal_tim.c ****                                 sSlaveConfig->TriggerPolarity,
5824:HALLIB/Src/stm32f7xx_hal_tim.c ****                                 sSlaveConfig->TriggerFilter);
5825:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
5826:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
5827:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5828:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_ITR0:
5829:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
5830:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameter */
5831:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
5832:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
5833:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
5834:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5835:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_ITR1:
5836:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
5837:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameter */
5838:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
5839:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
5840:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
5841:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5842:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_ITR2:
5843:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
5844:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameter */
5845:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
ARM GAS  /tmp/ccrrJVNd.s 			page 104


5846:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
5847:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
5848:HALLIB/Src/stm32f7xx_hal_tim.c ****     
5849:HALLIB/Src/stm32f7xx_hal_tim.c ****   case TIM_TS_ITR3:
5850:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
5851:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Check the parameter */
5852:HALLIB/Src/stm32f7xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
5853:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
5854:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
5855:HALLIB/Src/stm32f7xx_hal_tim.c ****        
5856:HALLIB/Src/stm32f7xx_hal_tim.c ****   default:
5857:HALLIB/Src/stm32f7xx_hal_tim.c ****     break;
5858:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5859:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5860:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5861:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5862:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configure the TI1 as Input.
5863:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral.
5864:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICPolarity  The Input Polarity.
5865:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
5866:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Rising
5867:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Falling
5868:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_BothEdge  
5869:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICSelection specifies the input to be used.
5870:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
5871:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 1 is selected to be connected to IC1.
5872:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 1 is selected to be connected to IC2.
5873:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 1 is selected to be connected to TRC.
5874:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
5875:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
5876:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None  
5877:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @note TIM_ICFilter and TIM_ICPolarity are not used in INDIRECT mode as TI2FP1 
5878:HALLIB/Src/stm32f7xx_hal_tim.c ****   *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
5879:HALLIB/Src/stm32f7xx_hal_tim.c ****   *        protected against un-initialized filter and polarity values.  
5880:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5881:HALLIB/Src/stm32f7xx_hal_tim.c **** void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
5882:HALLIB/Src/stm32f7xx_hal_tim.c ****                        uint32_t TIM_ICFilter)
5883:HALLIB/Src/stm32f7xx_hal_tim.c **** {
5884:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmr1 = 0;
5885:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
5886:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5887:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
5888:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC1E;
5889:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 = TIMx->CCMR1;
5890:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = TIMx->CCER;
5891:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5892:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Input */
5893:HALLIB/Src/stm32f7xx_hal_tim.c ****   if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
5894:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5895:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccmr1 &= ~TIM_CCMR1_CC1S;
5896:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccmr1 |= TIM_ICSelection;
5897:HALLIB/Src/stm32f7xx_hal_tim.c ****   } 
5898:HALLIB/Src/stm32f7xx_hal_tim.c ****   else
5899:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
5900:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccmr1 |= TIM_CCMR1_CC1S_0;
5901:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
5902:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 105


5903:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the filter */
5904:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 &= ~TIM_CCMR1_IC1F;
5905:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
5906:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5907:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Polarity and set the CC1E Bit */
5908:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
5909:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
5910:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5911:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
5912:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmr1;
5913:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER = tmpccer;
5914:HALLIB/Src/stm32f7xx_hal_tim.c **** }
5915:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5916:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5917:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configure the Polarity and Filter for TI1.
5918:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral.
5919:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICPolarity  The Input Polarity.
5920:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
5921:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Rising
5922:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Falling
5923:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_BothEdge
5924:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
5925:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
5926:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5927:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5928:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFil
5929:HALLIB/Src/stm32f7xx_hal_tim.c **** {
  28              		.loc 1 5929 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 10B4     		push	{r4}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 4, -4
  38              	.LVL1:
5930:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmr1 = 0;
5931:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
5932:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5933:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
5934:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = TIMx->CCER;
  39              		.loc 1 5934 0
  40 0002 036A     		ldr	r3, [r0, #32]
  41              	.LVL2:
5935:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC1E;
  42              		.loc 1 5935 0
  43 0004 046A     		ldr	r4, [r0, #32]
  44 0006 24F00104 		bic	r4, r4, #1
  45 000a 0462     		str	r4, [r0, #32]
5936:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 = TIMx->CCMR1;    
  46              		.loc 1 5936 0
  47 000c 8469     		ldr	r4, [r0, #24]
  48              	.LVL3:
5937:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5938:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the filter */
ARM GAS  /tmp/ccrrJVNd.s 			page 106


5939:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 &= ~TIM_CCMR1_IC1F;
  49              		.loc 1 5939 0
  50 000e 24F0F004 		bic	r4, r4, #240
  51              	.LVL4:
5940:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= (TIM_ICFilter << 4);
  52              		.loc 1 5940 0
  53 0012 44EA0212 		orr	r2, r4, r2, lsl #4
  54              	.LVL5:
5941:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5942:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Polarity and set the CC1E Bit */
5943:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  55              		.loc 1 5943 0
  56 0016 23F00A03 		bic	r3, r3, #10
  57              	.LVL6:
5944:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= TIM_ICPolarity;
  58              		.loc 1 5944 0
  59 001a 1943     		orrs	r1, r1, r3
  60              	.LVL7:
5945:HALLIB/Src/stm32f7xx_hal_tim.c ****   
5946:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
5947:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmr1;
  61              		.loc 1 5947 0
  62 001c 8261     		str	r2, [r0, #24]
5948:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER = tmpccer;
  63              		.loc 1 5948 0
  64 001e 0162     		str	r1, [r0, #32]
5949:HALLIB/Src/stm32f7xx_hal_tim.c **** }
  65              		.loc 1 5949 0
  66 0020 5DF8044B 		ldr	r4, [sp], #4
  67              	.LCFI1:
  68              		.cfi_restore 4
  69              		.cfi_def_cfa_offset 0
  70 0024 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE234:
  74 0026 00BF     		.section	.text.TIM_TI2_SetConfig,"ax",%progbits
  75              		.align	2
  76              		.thumb
  77              		.thumb_func
  79              	TIM_TI2_SetConfig:
  80              	.LFB235:
5950:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5951:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
5952:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configure the TI2 as Input.
5953:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
5954:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICPolarity  The Input Polarity.
5955:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
5956:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Rising
5957:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Falling
5958:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_BothEdge   
5959:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICSelection specifies the input to be used.
5960:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
5961:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 2 is selected to be connected to IC2.
5962:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 2 is selected to be connected to IC1.
5963:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 2 is selected to be connected to TRC.
5964:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
5965:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
ARM GAS  /tmp/ccrrJVNd.s 			page 107


5966:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
5967:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @note TIM_ICFilter and TIM_ICPolarity are not used in INDIRECT mode as TI1FP2 
5968:HALLIB/Src/stm32f7xx_hal_tim.c ****   *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
5969:HALLIB/Src/stm32f7xx_hal_tim.c ****   *        protected against un-initialized filter and polarity values.  
5970:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
5971:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
5972:HALLIB/Src/stm32f7xx_hal_tim.c ****                        uint32_t TIM_ICFilter)
5973:HALLIB/Src/stm32f7xx_hal_tim.c **** {
  81              		.loc 1 5973 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86              	.LVL8:
  87 0000 30B4     		push	{r4, r5}
  88              	.LCFI2:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 4, -8
  91              		.cfi_offset 5, -4
  92              	.LVL9:
5974:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmr1 = 0;
5975:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
5976:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5977:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
5978:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC2E;
  93              		.loc 1 5978 0
  94 0002 046A     		ldr	r4, [r0, #32]
  95 0004 24F01004 		bic	r4, r4, #16
  96 0008 0462     		str	r4, [r0, #32]
5979:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 = TIMx->CCMR1;
  97              		.loc 1 5979 0
  98 000a 8469     		ldr	r4, [r0, #24]
  99              	.LVL10:
5980:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 100              		.loc 1 5980 0
 101 000c 056A     		ldr	r5, [r0, #32]
 102              	.LVL11:
5981:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5982:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Input */
5983:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 &= ~TIM_CCMR1_CC2S;
 103              		.loc 1 5983 0
 104 000e 24F44074 		bic	r4, r4, #768
 105              	.LVL12:
5984:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= (TIM_ICSelection << 8);
 106              		.loc 1 5984 0
 107 0012 44EA0222 		orr	r2, r4, r2, lsl #8
 108              	.LVL13:
5985:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5986:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the filter */
5987:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 &= ~TIM_CCMR1_IC2F;
 109              		.loc 1 5987 0
 110 0016 22F47042 		bic	r2, r2, #61440
 111              	.LVL14:
5988:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 112              		.loc 1 5988 0
 113 001a 1B03     		lsls	r3, r3, #12
 114              	.LVL15:
ARM GAS  /tmp/ccrrJVNd.s 			page 108


 115 001c 9BB2     		uxth	r3, r3
 116 001e 1A43     		orrs	r2, r2, r3
 117              	.LVL16:
5989:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5990:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Polarity and set the CC2E Bit */
5991:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 118              		.loc 1 5991 0
 119 0020 25F0A005 		bic	r5, r5, #160
 120              	.LVL17:
5992:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 121              		.loc 1 5992 0
 122 0024 0901     		lsls	r1, r1, #4
 123              	.LVL18:
 124 0026 01F0A001 		and	r1, r1, #160
 125 002a 2943     		orrs	r1, r1, r5
 126              	.LVL19:
5993:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5994:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
5995:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 127              		.loc 1 5995 0
 128 002c 8261     		str	r2, [r0, #24]
5996:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER = tmpccer;
 129              		.loc 1 5996 0
 130 002e 0162     		str	r1, [r0, #32]
5997:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 131              		.loc 1 5997 0
 132 0030 30BC     		pop	{r4, r5}
 133              	.LCFI3:
 134              		.cfi_restore 5
 135              		.cfi_restore 4
 136              		.cfi_def_cfa_offset 0
 137 0032 7047     		bx	lr
 138              		.cfi_endproc
 139              	.LFE235:
 141              		.section	.text.TIM_TI2_ConfigInputStage,"ax",%progbits
 142              		.align	2
 143              		.thumb
 144              		.thumb_func
 146              	TIM_TI2_ConfigInputStage:
 147              	.LFB236:
5998:HALLIB/Src/stm32f7xx_hal_tim.c **** 
5999:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
6000:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configure the Polarity and Filter for TI2.
6001:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral.
6002:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICPolarity  The Input Polarity.
6003:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
6004:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Rising
6005:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Falling
6006:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_BothEdge
6007:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
6008:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
6009:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
6010:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
6011:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFil
6012:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 148              		.loc 1 6012 0
 149              		.cfi_startproc
ARM GAS  /tmp/ccrrJVNd.s 			page 109


 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153              	.LVL20:
 154 0000 10B4     		push	{r4}
 155              	.LCFI4:
 156              		.cfi_def_cfa_offset 4
 157              		.cfi_offset 4, -4
 158              	.LVL21:
6013:HALLIB/Src/stm32f7xx_hal_tim.c **** uint32_t tmpccmr1 = 0;
6014:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
6015:HALLIB/Src/stm32f7xx_hal_tim.c ****   
6016:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
6017:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC2E;
 159              		.loc 1 6017 0
 160 0002 036A     		ldr	r3, [r0, #32]
 161 0004 23F01003 		bic	r3, r3, #16
 162 0008 0362     		str	r3, [r0, #32]
6018:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 163              		.loc 1 6018 0
 164 000a 8469     		ldr	r4, [r0, #24]
 165              	.LVL22:
6019:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 166              		.loc 1 6019 0
 167 000c 036A     		ldr	r3, [r0, #32]
 168              	.LVL23:
6020:HALLIB/Src/stm32f7xx_hal_tim.c ****   
6021:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the filter */
6022:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 &= ~TIM_CCMR1_IC2F;
 169              		.loc 1 6022 0
 170 000e 24F47044 		bic	r4, r4, #61440
 171              	.LVL24:
6023:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= (TIM_ICFilter << 12);
 172              		.loc 1 6023 0
 173 0012 44EA0232 		orr	r2, r4, r2, lsl #12
 174              	.LVL25:
6024:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6025:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Polarity and set the CC2E Bit */
6026:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 175              		.loc 1 6026 0
 176 0016 23F0A003 		bic	r3, r3, #160
 177              	.LVL26:
6027:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= (TIM_ICPolarity << 4);
 178              		.loc 1 6027 0
 179 001a 43EA0111 		orr	r1, r3, r1, lsl #4
 180              	.LVL27:
6028:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6029:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
6030:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 181              		.loc 1 6030 0
 182 001e 8261     		str	r2, [r0, #24]
6031:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER = tmpccer;
 183              		.loc 1 6031 0
 184 0020 0162     		str	r1, [r0, #32]
6032:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 185              		.loc 1 6032 0
 186 0022 5DF8044B 		ldr	r4, [sp], #4
ARM GAS  /tmp/ccrrJVNd.s 			page 110


 187              	.LCFI5:
 188              		.cfi_restore 4
 189              		.cfi_def_cfa_offset 0
 190 0026 7047     		bx	lr
 191              		.cfi_endproc
 192              	.LFE236:
 194              		.section	.text.TIM_TI3_SetConfig,"ax",%progbits
 195              		.align	2
 196              		.thumb
 197              		.thumb_func
 199              	TIM_TI3_SetConfig:
 200              	.LFB237:
6033:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6034:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
6035:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configure the TI3 as Input.
6036:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6037:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICPolarity  The Input Polarity.
6038:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
6039:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Rising
6040:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Falling
6041:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_BothEdge         
6042:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICSelection specifies the input to be used.
6043:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
6044:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 3 is selected to be connected to IC3.
6045:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 3 is selected to be connected to IC4.
6046:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 3 is selected to be connected to TRC.
6047:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
6048:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
6049:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
6050:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @note TIM_ICFilter and TIM_ICPolarity are not used in INDIRECT mode as TI3FP4 
6051:HALLIB/Src/stm32f7xx_hal_tim.c ****   *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
6052:HALLIB/Src/stm32f7xx_hal_tim.c ****   *        protected against un-initialized filter and polarity values.  
6053:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
6054:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
6055:HALLIB/Src/stm32f7xx_hal_tim.c ****                        uint32_t TIM_ICFilter)
6056:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 201              		.loc 1 6056 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206              	.LVL28:
 207 0000 30B4     		push	{r4, r5}
 208              	.LCFI6:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 4, -8
 211              		.cfi_offset 5, -4
 212              	.LVL29:
6057:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmr2 = 0;
6058:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
6059:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6060:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Channel 3: Reset the CC3E Bit */
6061:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC3E;
 213              		.loc 1 6061 0
 214 0002 046A     		ldr	r4, [r0, #32]
 215 0004 24F48074 		bic	r4, r4, #256
 216 0008 0462     		str	r4, [r0, #32]
ARM GAS  /tmp/ccrrJVNd.s 			page 111


6062:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 217              		.loc 1 6062 0
 218 000a C469     		ldr	r4, [r0, #28]
 219              	.LVL30:
6063:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 220              		.loc 1 6063 0
 221 000c 056A     		ldr	r5, [r0, #32]
 222              	.LVL31:
6064:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6065:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Input */
6066:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr2 &= ~TIM_CCMR2_CC3S;
 223              		.loc 1 6066 0
 224 000e 24F00304 		bic	r4, r4, #3
 225              	.LVL32:
6067:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr2 |= TIM_ICSelection;
 226              		.loc 1 6067 0
 227 0012 2243     		orrs	r2, r2, r4
 228              	.LVL33:
6068:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6069:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the filter */
6070:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr2 &= ~TIM_CCMR2_IC3F;
 229              		.loc 1 6070 0
 230 0014 22F0F002 		bic	r2, r2, #240
 231              	.LVL34:
6071:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 232              		.loc 1 6071 0
 233 0018 1B01     		lsls	r3, r3, #4
 234              	.LVL35:
 235 001a DBB2     		uxtb	r3, r3
 236 001c 1A43     		orrs	r2, r2, r3
 237              	.LVL36:
6072:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6073:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Polarity and set the CC3E Bit */
6074:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 238              		.loc 1 6074 0
 239 001e 25F42065 		bic	r5, r5, #2560
 240              	.LVL37:
6075:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 241              		.loc 1 6075 0
 242 0022 0902     		lsls	r1, r1, #8
 243              	.LVL38:
 244 0024 01F42061 		and	r1, r1, #2560
 245 0028 2943     		orrs	r1, r1, r5
 246              	.LVL39:
6076:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6077:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
6078:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 247              		.loc 1 6078 0
 248 002a C261     		str	r2, [r0, #28]
6079:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER = tmpccer;
 249              		.loc 1 6079 0
 250 002c 0162     		str	r1, [r0, #32]
6080:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 251              		.loc 1 6080 0
 252 002e 30BC     		pop	{r4, r5}
 253              	.LCFI7:
 254              		.cfi_restore 5
ARM GAS  /tmp/ccrrJVNd.s 			page 112


 255              		.cfi_restore 4
 256              		.cfi_def_cfa_offset 0
 257 0030 7047     		bx	lr
 258              		.cfi_endproc
 259              	.LFE237:
 261 0032 00BF     		.section	.text.TIM_TI4_SetConfig,"ax",%progbits
 262              		.align	2
 263              		.thumb
 264              		.thumb_func
 266              	TIM_TI4_SetConfig:
 267              	.LFB238:
6081:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6082:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
6083:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configure the TI4 as Input.
6084:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6085:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICPolarity  The Input Polarity.
6086:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
6087:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Rising
6088:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_Falling
6089:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICPolarity_BothEdge     
6090:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICSelection specifies the input to be used.
6091:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
6092:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 4 is selected to be connected to IC4.
6093:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 4 is selected to be connected to IC3.
6094:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 4 is selected to be connected to TRC.
6095:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
6096:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
6097:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
6098:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @note TIM_ICFilter and TIM_ICPolarity are not used in INDIRECT mode as TI4FP3 
6099:HALLIB/Src/stm32f7xx_hal_tim.c ****   *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
6100:HALLIB/Src/stm32f7xx_hal_tim.c ****   *        protected against un-initialized filter and polarity values.  
6101:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
6102:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
6103:HALLIB/Src/stm32f7xx_hal_tim.c ****                        uint32_t TIM_ICFilter)
6104:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 268              		.loc 1 6104 0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272              		@ link register save eliminated.
 273              	.LVL40:
 274 0000 30B4     		push	{r4, r5}
 275              	.LCFI8:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 4, -8
 278              		.cfi_offset 5, -4
 279              	.LVL41:
6105:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmr2 = 0;
6106:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccer = 0;
6107:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6108:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Disable the Channel 4: Reset the CC4E Bit */
6109:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC4E;
 280              		.loc 1 6109 0
 281 0002 046A     		ldr	r4, [r0, #32]
 282 0004 24F48054 		bic	r4, r4, #4096
 283 0008 0462     		str	r4, [r0, #32]
6110:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr2 = TIMx->CCMR2;
ARM GAS  /tmp/ccrrJVNd.s 			page 113


 284              		.loc 1 6110 0
 285 000a C469     		ldr	r4, [r0, #28]
 286              	.LVL42:
6111:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 287              		.loc 1 6111 0
 288 000c 056A     		ldr	r5, [r0, #32]
 289              	.LVL43:
6112:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6113:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Input */
6114:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr2 &= ~TIM_CCMR2_CC4S;
 290              		.loc 1 6114 0
 291 000e 24F44074 		bic	r4, r4, #768
 292              	.LVL44:
6115:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr2 |= (TIM_ICSelection << 8);
 293              		.loc 1 6115 0
 294 0012 44EA0222 		orr	r2, r4, r2, lsl #8
 295              	.LVL45:
6116:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6117:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the filter */
6118:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr2 &= ~TIM_CCMR2_IC4F;
 296              		.loc 1 6118 0
 297 0016 22F47042 		bic	r2, r2, #61440
 298              	.LVL46:
6119:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 299              		.loc 1 6119 0
 300 001a 1B03     		lsls	r3, r3, #12
 301              	.LVL47:
 302 001c 9BB2     		uxth	r3, r3
 303 001e 1A43     		orrs	r2, r2, r3
 304              	.LVL48:
6120:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6121:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Polarity and set the CC4E Bit */
6122:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 305              		.loc 1 6122 0
 306 0020 25F42045 		bic	r5, r5, #40960
 307              	.LVL49:
6123:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 308              		.loc 1 6123 0
 309 0024 0903     		lsls	r1, r1, #12
 310              	.LVL50:
 311 0026 01F42041 		and	r1, r1, #40960
 312 002a 2943     		orrs	r1, r1, r5
 313              	.LVL51:
6124:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6125:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
6126:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 314              		.loc 1 6126 0
 315 002c C261     		str	r2, [r0, #28]
6127:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER = tmpccer ;
 316              		.loc 1 6127 0
 317 002e 0162     		str	r1, [r0, #32]
6128:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 318              		.loc 1 6128 0
 319 0030 30BC     		pop	{r4, r5}
 320              	.LCFI9:
 321              		.cfi_restore 5
 322              		.cfi_restore 4
ARM GAS  /tmp/ccrrJVNd.s 			page 114


 323              		.cfi_def_cfa_offset 0
 324 0032 7047     		bx	lr
 325              		.cfi_endproc
 326              	.LFE238:
 328              		.section	.text.TIM_ITRx_SetConfig,"ax",%progbits
 329              		.align	2
 330              		.thumb
 331              		.thumb_func
 333              	TIM_ITRx_SetConfig:
 334              	.LFB239:
6129:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6130:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
6131:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Selects the Input Trigger source
6132:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6133:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ITRx The Input Trigger source.
6134:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
6135:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_TS_ITR0: Internal Trigger 0
6136:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_TS_ITR1: Internal Trigger 1
6137:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_TS_ITR2: Internal Trigger 2
6138:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_TS_ITR3: Internal Trigger 3
6139:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_TS_TI1F_ED: TI1 Edge Detector
6140:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
6141:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
6142:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_TS_ETRF: External Trigger input
6143:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
6144:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
6145:HALLIB/Src/stm32f7xx_hal_tim.c **** static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
6146:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 335              		.loc 1 6146 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340              	.LVL52:
6147:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr = 0;
6148:HALLIB/Src/stm32f7xx_hal_tim.c ****   
6149:HALLIB/Src/stm32f7xx_hal_tim.c ****    /* Get the TIMx SMCR register value */
6150:HALLIB/Src/stm32f7xx_hal_tim.c ****    tmpsmcr = TIMx->SMCR;
 341              		.loc 1 6150 0
 342 0000 8368     		ldr	r3, [r0, #8]
 343              	.LVL53:
6151:HALLIB/Src/stm32f7xx_hal_tim.c ****    /* Reset the TS Bits */
6152:HALLIB/Src/stm32f7xx_hal_tim.c ****    tmpsmcr &= ~TIM_SMCR_TS;
 344              		.loc 1 6152 0
 345 0002 23F07003 		bic	r3, r3, #112
 346              	.LVL54:
6153:HALLIB/Src/stm32f7xx_hal_tim.c ****    /* Set the Input Trigger source and the slave mode*/
6154:HALLIB/Src/stm32f7xx_hal_tim.c ****    tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 347              		.loc 1 6154 0
 348 0006 41F00701 		orr	r1, r1, #7
 349              	.LVL55:
 350 000a 1943     		orrs	r1, r1, r3
 351              	.LVL56:
6155:HALLIB/Src/stm32f7xx_hal_tim.c ****    /* Write to TIMx SMCR */
6156:HALLIB/Src/stm32f7xx_hal_tim.c ****    TIMx->SMCR = tmpsmcr;
 352              		.loc 1 6156 0
 353 000c 8160     		str	r1, [r0, #8]
ARM GAS  /tmp/ccrrJVNd.s 			page 115


 354 000e 7047     		bx	lr
 355              		.cfi_endproc
 356              	.LFE239:
 358              		.section	.text.HAL_TIM_Base_MspInit,"ax",%progbits
 359              		.align	2
 360              		.weak	HAL_TIM_Base_MspInit
 361              		.thumb
 362              		.thumb_func
 364              	HAL_TIM_Base_MspInit:
 365              	.LFB138:
 347:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 366              		.loc 1 347 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              		@ link register save eliminated.
 371              	.LVL57:
 372 0000 7047     		bx	lr
 373              		.cfi_endproc
 374              	.LFE138:
 376 0002 00BF     		.section	.text.HAL_TIM_Base_MspDeInit,"ax",%progbits
 377              		.align	2
 378              		.weak	HAL_TIM_Base_MspDeInit
 379              		.thumb
 380              		.thumb_func
 382              	HAL_TIM_Base_MspDeInit:
 383              	.LFB139:
 363:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 384              		.loc 1 363 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              		@ link register save eliminated.
 389              	.LVL58:
 390 0000 7047     		bx	lr
 391              		.cfi_endproc
 392              	.LFE139:
 394 0002 00BF     		.section	.text.HAL_TIM_Base_DeInit,"ax",%progbits
 395              		.align	2
 396              		.global	HAL_TIM_Base_DeInit
 397              		.thumb
 398              		.thumb_func
 400              	HAL_TIM_Base_DeInit:
 401              	.LFB137:
 310:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 402              		.loc 1 310 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              	.LVL59:
 310:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 407              		.loc 1 310 0
 408 0000 10B5     		push	{r4, lr}
 409              	.LCFI10:
 410              		.cfi_def_cfa_offset 8
 411              		.cfi_offset 4, -8
 412              		.cfi_offset 14, -4
ARM GAS  /tmp/ccrrJVNd.s 			page 116


 413 0002 0446     		mov	r4, r0
 314:HALLIB/Src/stm32f7xx_hal_tim.c ****    
 414              		.loc 1 314 0
 415 0004 0223     		movs	r3, #2
 416 0006 80F83D30 		strb	r3, [r0, #61]
 317:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 417              		.loc 1 317 0
 418 000a 0368     		ldr	r3, [r0]
 419 000c 196A     		ldr	r1, [r3, #32]
 420 000e 41F21112 		movw	r2, #4369
 421 0012 1142     		tst	r1, r2
 422 0014 08D1     		bne	.L15
 317:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 423              		.loc 1 317 0 is_stmt 0 discriminator 1
 424 0016 196A     		ldr	r1, [r3, #32]
 425 0018 40F24442 		movw	r2, #1092
 426 001c 1142     		tst	r1, r2
 427 001e 03D1     		bne	.L15
 317:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 428              		.loc 1 317 0 discriminator 2
 429 0020 1A68     		ldr	r2, [r3]
 430 0022 22F00102 		bic	r2, r2, #1
 431 0026 1A60     		str	r2, [r3]
 432              	.L15:
 328:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 433              		.loc 1 328 0 is_stmt 1
 434 0028 2046     		mov	r0, r4
 435              	.LVL60:
 436 002a FFF7FEFF 		bl	HAL_TIM_Base_MspDeInit
 437              	.LVL61:
 332:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 438              		.loc 1 332 0
 439 002e 0020     		movs	r0, #0
 440 0030 84F83D00 		strb	r0, [r4, #61]
 335:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 441              		.loc 1 335 0
 442 0034 84F83C00 		strb	r0, [r4, #60]
 338:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 443              		.loc 1 338 0
 444 0038 10BD     		pop	{r4, pc}
 445              		.cfi_endproc
 446              	.LFE137:
 448 003a 00BF     		.section	.text.HAL_TIM_Base_Start,"ax",%progbits
 449              		.align	2
 450              		.global	HAL_TIM_Base_Start
 451              		.thumb
 452              		.thumb_func
 454              	HAL_TIM_Base_Start:
 455              	.LFB140:
 379:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 456              		.loc 1 379 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 0
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              		@ link register save eliminated.
 461              	.LVL62:
 384:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 117


 462              		.loc 1 384 0
 463 0000 0223     		movs	r3, #2
 464 0002 80F83D30 		strb	r3, [r0, #61]
 387:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 465              		.loc 1 387 0
 466 0006 0268     		ldr	r2, [r0]
 467 0008 1368     		ldr	r3, [r2]
 468 000a 43F00103 		orr	r3, r3, #1
 469 000e 1360     		str	r3, [r2]
 390:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 470              		.loc 1 390 0
 471 0010 0123     		movs	r3, #1
 472 0012 80F83D30 		strb	r3, [r0, #61]
 394:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 473              		.loc 1 394 0
 474 0016 0020     		movs	r0, #0
 475              	.LVL63:
 476 0018 7047     		bx	lr
 477              		.cfi_endproc
 478              	.LFE140:
 480 001a 00BF     		.section	.text.HAL_TIM_Base_Stop,"ax",%progbits
 481              		.align	2
 482              		.global	HAL_TIM_Base_Stop
 483              		.thumb
 484              		.thumb_func
 486              	HAL_TIM_Base_Stop:
 487              	.LFB141:
 403:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 488              		.loc 1 403 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 493              	.LVL64:
 408:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 494              		.loc 1 408 0
 495 0000 0223     		movs	r3, #2
 496 0002 80F83D30 		strb	r3, [r0, #61]
 411:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 497              		.loc 1 411 0
 498 0006 0368     		ldr	r3, [r0]
 499 0008 196A     		ldr	r1, [r3, #32]
 500 000a 41F21112 		movw	r2, #4369
 501 000e 1142     		tst	r1, r2
 502 0010 08D1     		bne	.L19
 411:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 503              		.loc 1 411 0 is_stmt 0 discriminator 1
 504 0012 196A     		ldr	r1, [r3, #32]
 505 0014 40F24442 		movw	r2, #1092
 506 0018 1142     		tst	r1, r2
 507 001a 03D1     		bne	.L19
 411:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 508              		.loc 1 411 0 discriminator 2
 509 001c 1A68     		ldr	r2, [r3]
 510 001e 22F00102 		bic	r2, r2, #1
 511 0022 1A60     		str	r2, [r3]
 512              	.L19:
ARM GAS  /tmp/ccrrJVNd.s 			page 118


 414:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 513              		.loc 1 414 0 is_stmt 1
 514 0024 0123     		movs	r3, #1
 515 0026 80F83D30 		strb	r3, [r0, #61]
 418:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 516              		.loc 1 418 0
 517 002a 0020     		movs	r0, #0
 518              	.LVL65:
 519 002c 7047     		bx	lr
 520              		.cfi_endproc
 521              	.LFE141:
 523 002e 00BF     		.section	.text.HAL_TIM_Base_Start_IT,"ax",%progbits
 524              		.align	2
 525              		.global	HAL_TIM_Base_Start_IT
 526              		.thumb
 527              		.thumb_func
 529              	HAL_TIM_Base_Start_IT:
 530              	.LFB142:
 427:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 531              		.loc 1 427 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              		@ link register save eliminated.
 536              	.LVL66:
 432:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 537              		.loc 1 432 0
 538 0000 0268     		ldr	r2, [r0]
 539 0002 D368     		ldr	r3, [r2, #12]
 540 0004 43F00103 		orr	r3, r3, #1
 541 0008 D360     		str	r3, [r2, #12]
 435:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 542              		.loc 1 435 0
 543 000a 0268     		ldr	r2, [r0]
 544 000c 1368     		ldr	r3, [r2]
 545 000e 43F00103 		orr	r3, r3, #1
 546 0012 1360     		str	r3, [r2]
 439:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 547              		.loc 1 439 0
 548 0014 0020     		movs	r0, #0
 549              	.LVL67:
 550 0016 7047     		bx	lr
 551              		.cfi_endproc
 552              	.LFE142:
 554              		.section	.text.HAL_TIM_Base_Stop_IT,"ax",%progbits
 555              		.align	2
 556              		.global	HAL_TIM_Base_Stop_IT
 557              		.thumb
 558              		.thumb_func
 560              	HAL_TIM_Base_Stop_IT:
 561              	.LFB143:
 448:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 562              		.loc 1 448 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              		@ link register save eliminated.
ARM GAS  /tmp/ccrrJVNd.s 			page 119


 567              	.LVL68:
 452:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 568              		.loc 1 452 0
 569 0000 0268     		ldr	r2, [r0]
 570 0002 D368     		ldr	r3, [r2, #12]
 571 0004 23F00103 		bic	r3, r3, #1
 572 0008 D360     		str	r3, [r2, #12]
 455:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 573              		.loc 1 455 0
 574 000a 0368     		ldr	r3, [r0]
 575 000c 196A     		ldr	r1, [r3, #32]
 576 000e 41F21112 		movw	r2, #4369
 577 0012 1142     		tst	r1, r2
 578 0014 08D1     		bne	.L22
 455:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 579              		.loc 1 455 0 is_stmt 0 discriminator 1
 580 0016 196A     		ldr	r1, [r3, #32]
 581 0018 40F24442 		movw	r2, #1092
 582 001c 1142     		tst	r1, r2
 583 001e 03D1     		bne	.L22
 455:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 584              		.loc 1 455 0 discriminator 2
 585 0020 1A68     		ldr	r2, [r3]
 586 0022 22F00102 		bic	r2, r2, #1
 587 0026 1A60     		str	r2, [r3]
 588              	.L22:
 459:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 589              		.loc 1 459 0 is_stmt 1
 590 0028 0020     		movs	r0, #0
 591              	.LVL69:
 592 002a 7047     		bx	lr
 593              		.cfi_endproc
 594              	.LFE143:
 596              		.section	.text.HAL_TIM_Base_Start_DMA,"ax",%progbits
 597              		.align	2
 598              		.global	HAL_TIM_Base_Start_DMA
 599              		.thumb
 600              		.thumb_func
 602              	HAL_TIM_Base_Start_DMA:
 603              	.LFB144:
 470:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 604              		.loc 1 470 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 0
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608              	.LVL70:
 609 0000 10B5     		push	{r4, lr}
 610              	.LCFI11:
 611              		.cfi_def_cfa_offset 8
 612              		.cfi_offset 4, -8
 613              		.cfi_offset 14, -4
 474:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 614              		.loc 1 474 0
 615 0002 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 616 0006 E4B2     		uxtb	r4, r4
 617 0008 022C     		cmp	r4, #2
 618 000a 27D0     		beq	.L26
ARM GAS  /tmp/ccrrJVNd.s 			page 120


 478:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 619              		.loc 1 478 0
 620 000c 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 621 0010 DBB2     		uxtb	r3, r3
 622 0012 012B     		cmp	r3, #1
 623 0014 09D1     		bne	.L25
 480:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 624              		.loc 1 480 0
 625 0016 B1FA81F3 		clz	r3, r1
 626 001a 5B09     		lsrs	r3, r3, #5
 627 001c 002A     		cmp	r2, #0
 628 001e 08BF     		it	eq
 629 0020 0023     		moveq	r3, #0
 630 0022 EBB9     		cbnz	r3, .L27
 486:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 631              		.loc 1 486 0
 632 0024 0223     		movs	r3, #2
 633 0026 80F83D30 		strb	r3, [r0, #61]
 634              	.L25:
 635 002a 1346     		mov	r3, r2
 636 002c 0446     		mov	r4, r0
 490:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 637              		.loc 1 490 0
 638 002e 026A     		ldr	r2, [r0, #32]
 639              	.LVL71:
 640 0030 0C48     		ldr	r0, .L29
 641              	.LVL72:
 642 0032 D063     		str	r0, [r2, #60]
 493:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 643              		.loc 1 493 0
 644 0034 226A     		ldr	r2, [r4, #32]
 645 0036 0C48     		ldr	r0, .L29+4
 646 0038 D064     		str	r0, [r2, #76]
 496:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 647              		.loc 1 496 0
 648 003a 2268     		ldr	r2, [r4]
 649 003c 2C32     		adds	r2, r2, #44
 650 003e 206A     		ldr	r0, [r4, #32]
 651 0040 FFF7FEFF 		bl	HAL_DMA_Start_IT
 652              	.LVL73:
 499:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 653              		.loc 1 499 0
 654 0044 2268     		ldr	r2, [r4]
 655 0046 D368     		ldr	r3, [r2, #12]
 656 0048 43F48073 		orr	r3, r3, #256
 657 004c D360     		str	r3, [r2, #12]
 502:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 658              		.loc 1 502 0
 659 004e 2268     		ldr	r2, [r4]
 660 0050 1368     		ldr	r3, [r2]
 661 0052 43F00103 		orr	r3, r3, #1
 662 0056 1360     		str	r3, [r2]
 505:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 663              		.loc 1 505 0
 664 0058 0020     		movs	r0, #0
 665 005a 10BD     		pop	{r4, pc}
 666              	.LVL74:
ARM GAS  /tmp/ccrrJVNd.s 			page 121


 667              	.L26:
 476:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 668              		.loc 1 476 0
 669 005c 0220     		movs	r0, #2
 670              	.LVL75:
 671 005e 10BD     		pop	{r4, pc}
 672              	.LVL76:
 673              	.L27:
 482:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 674              		.loc 1 482 0
 675 0060 0120     		movs	r0, #1
 676              	.LVL77:
 506:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 677              		.loc 1 506 0
 678 0062 10BD     		pop	{r4, pc}
 679              	.L30:
 680              		.align	2
 681              	.L29:
 682 0064 00000000 		.word	TIM_DMAPeriodElapsedCplt
 683 0068 00000000 		.word	TIM_DMAError
 684              		.cfi_endproc
 685              	.LFE144:
 687              		.section	.text.HAL_TIM_Base_Stop_DMA,"ax",%progbits
 688              		.align	2
 689              		.global	HAL_TIM_Base_Stop_DMA
 690              		.thumb
 691              		.thumb_func
 693              	HAL_TIM_Base_Stop_DMA:
 694              	.LFB145:
 515:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 695              		.loc 1 515 0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              		@ link register save eliminated.
 700              	.LVL78:
 520:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 701              		.loc 1 520 0
 702 0000 0268     		ldr	r2, [r0]
 703 0002 D368     		ldr	r3, [r2, #12]
 704 0004 23F48073 		bic	r3, r3, #256
 705 0008 D360     		str	r3, [r2, #12]
 523:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 706              		.loc 1 523 0
 707 000a 0368     		ldr	r3, [r0]
 708 000c 196A     		ldr	r1, [r3, #32]
 709 000e 41F21112 		movw	r2, #4369
 710 0012 1142     		tst	r1, r2
 711 0014 08D1     		bne	.L32
 523:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 712              		.loc 1 523 0 is_stmt 0 discriminator 1
 713 0016 196A     		ldr	r1, [r3, #32]
 714 0018 40F24442 		movw	r2, #1092
 715 001c 1142     		tst	r1, r2
 716 001e 03D1     		bne	.L32
 523:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 717              		.loc 1 523 0 discriminator 2
ARM GAS  /tmp/ccrrJVNd.s 			page 122


 718 0020 1A68     		ldr	r2, [r3]
 719 0022 22F00102 		bic	r2, r2, #1
 720 0026 1A60     		str	r2, [r3]
 721              	.L32:
 526:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 722              		.loc 1 526 0 is_stmt 1
 723 0028 0123     		movs	r3, #1
 724 002a 80F83D30 		strb	r3, [r0, #61]
 530:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 725              		.loc 1 530 0
 726 002e 0020     		movs	r0, #0
 727              	.LVL79:
 728 0030 7047     		bx	lr
 729              		.cfi_endproc
 730              	.LFE145:
 732 0032 00BF     		.section	.text.HAL_TIM_OC_MspInit,"ax",%progbits
 733              		.align	2
 734              		.weak	HAL_TIM_OC_MspInit
 735              		.thumb
 736              		.thumb_func
 738              	HAL_TIM_OC_MspInit:
 739              	.LFB148:
 654:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 740              		.loc 1 654 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              		@ link register save eliminated.
 745              	.LVL80:
 746 0000 7047     		bx	lr
 747              		.cfi_endproc
 748              	.LFE148:
 750 0002 00BF     		.section	.text.HAL_TIM_OC_MspDeInit,"ax",%progbits
 751              		.align	2
 752              		.weak	HAL_TIM_OC_MspDeInit
 753              		.thumb
 754              		.thumb_func
 756              	HAL_TIM_OC_MspDeInit:
 757              	.LFB149:
 670:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 758              		.loc 1 670 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 0
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 762              		@ link register save eliminated.
 763              	.LVL81:
 764 0000 7047     		bx	lr
 765              		.cfi_endproc
 766              	.LFE149:
 768 0002 00BF     		.section	.text.HAL_TIM_OC_DeInit,"ax",%progbits
 769              		.align	2
 770              		.global	HAL_TIM_OC_DeInit
 771              		.thumb
 772              		.thumb_func
 774              	HAL_TIM_OC_DeInit:
 775              	.LFB147:
 617:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
ARM GAS  /tmp/ccrrJVNd.s 			page 123


 776              		.loc 1 617 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              	.LVL82:
 617:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 781              		.loc 1 617 0
 782 0000 10B5     		push	{r4, lr}
 783              	.LCFI12:
 784              		.cfi_def_cfa_offset 8
 785              		.cfi_offset 4, -8
 786              		.cfi_offset 14, -4
 787 0002 0446     		mov	r4, r0
 621:HALLIB/Src/stm32f7xx_hal_tim.c ****    
 788              		.loc 1 621 0
 789 0004 0223     		movs	r3, #2
 790 0006 80F83D30 		strb	r3, [r0, #61]
 624:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 791              		.loc 1 624 0
 792 000a 0368     		ldr	r3, [r0]
 793 000c 196A     		ldr	r1, [r3, #32]
 794 000e 41F21112 		movw	r2, #4369
 795 0012 1142     		tst	r1, r2
 796 0014 08D1     		bne	.L36
 624:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 797              		.loc 1 624 0 is_stmt 0 discriminator 1
 798 0016 196A     		ldr	r1, [r3, #32]
 799 0018 40F24442 		movw	r2, #1092
 800 001c 1142     		tst	r1, r2
 801 001e 03D1     		bne	.L36
 624:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 802              		.loc 1 624 0 discriminator 2
 803 0020 1A68     		ldr	r2, [r3]
 804 0022 22F00102 		bic	r2, r2, #1
 805 0026 1A60     		str	r2, [r3]
 806              	.L36:
 635:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 807              		.loc 1 635 0 is_stmt 1
 808 0028 2046     		mov	r0, r4
 809              	.LVL83:
 810 002a FFF7FEFF 		bl	HAL_TIM_OC_MspDeInit
 811              	.LVL84:
 639:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 812              		.loc 1 639 0
 813 002e 0020     		movs	r0, #0
 814 0030 84F83D00 		strb	r0, [r4, #61]
 642:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 815              		.loc 1 642 0
 816 0034 84F83C00 		strb	r0, [r4, #60]
 645:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 817              		.loc 1 645 0
 818 0038 10BD     		pop	{r4, pc}
 819              		.cfi_endproc
 820              	.LFE147:
 822 003a 00BF     		.section	.text.HAL_TIM_PWM_MspInit,"ax",%progbits
 823              		.align	2
 824              		.weak	HAL_TIM_PWM_MspInit
ARM GAS  /tmp/ccrrJVNd.s 			page 124


 825              		.thumb
 826              		.thumb_func
 828              	HAL_TIM_PWM_MspInit:
 829              	.LFB158:
1191:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 830              		.loc 1 1191 0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 0
 833              		@ frame_needed = 0, uses_anonymous_args = 0
 834              		@ link register save eliminated.
 835              	.LVL85:
 836 0000 7047     		bx	lr
 837              		.cfi_endproc
 838              	.LFE158:
 840 0002 00BF     		.section	.text.HAL_TIM_PWM_MspDeInit,"ax",%progbits
 841              		.align	2
 842              		.weak	HAL_TIM_PWM_MspDeInit
 843              		.thumb
 844              		.thumb_func
 846              	HAL_TIM_PWM_MspDeInit:
 847              	.LFB159:
1207:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 848              		.loc 1 1207 0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852              		@ link register save eliminated.
 853              	.LVL86:
 854 0000 7047     		bx	lr
 855              		.cfi_endproc
 856              	.LFE159:
 858 0002 00BF     		.section	.text.HAL_TIM_PWM_DeInit,"ax",%progbits
 859              		.align	2
 860              		.global	HAL_TIM_PWM_DeInit
 861              		.thumb
 862              		.thumb_func
 864              	HAL_TIM_PWM_DeInit:
 865              	.LFB157:
1154:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 866              		.loc 1 1154 0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870              	.LVL87:
1154:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 871              		.loc 1 1154 0
 872 0000 10B5     		push	{r4, lr}
 873              	.LCFI13:
 874              		.cfi_def_cfa_offset 8
 875              		.cfi_offset 4, -8
 876              		.cfi_offset 14, -4
 877 0002 0446     		mov	r4, r0
1158:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 878              		.loc 1 1158 0
 879 0004 0223     		movs	r3, #2
 880 0006 80F83D30 		strb	r3, [r0, #61]
1161:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 125


 881              		.loc 1 1161 0
 882 000a 0368     		ldr	r3, [r0]
 883 000c 196A     		ldr	r1, [r3, #32]
 884 000e 41F21112 		movw	r2, #4369
 885 0012 1142     		tst	r1, r2
 886 0014 08D1     		bne	.L41
1161:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 887              		.loc 1 1161 0 is_stmt 0 discriminator 1
 888 0016 196A     		ldr	r1, [r3, #32]
 889 0018 40F24442 		movw	r2, #1092
 890 001c 1142     		tst	r1, r2
 891 001e 03D1     		bne	.L41
1161:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 892              		.loc 1 1161 0 discriminator 2
 893 0020 1A68     		ldr	r2, [r3]
 894 0022 22F00102 		bic	r2, r2, #1
 895 0026 1A60     		str	r2, [r3]
 896              	.L41:
1172:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 897              		.loc 1 1172 0 is_stmt 1
 898 0028 2046     		mov	r0, r4
 899              	.LVL88:
 900 002a FFF7FEFF 		bl	HAL_TIM_PWM_MspDeInit
 901              	.LVL89:
1176:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 902              		.loc 1 1176 0
 903 002e 0020     		movs	r0, #0
 904 0030 84F83D00 		strb	r0, [r4, #61]
1179:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 905              		.loc 1 1179 0
 906 0034 84F83C00 		strb	r0, [r4, #60]
1182:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 907              		.loc 1 1182 0
 908 0038 10BD     		pop	{r4, pc}
 909              		.cfi_endproc
 910              	.LFE157:
 912 003a 00BF     		.section	.text.HAL_TIM_IC_MspInit,"ax",%progbits
 913              		.align	2
 914              		.weak	HAL_TIM_IC_MspInit
 915              		.thumb
 916              		.thumb_func
 918              	HAL_TIM_IC_MspInit:
 919              	.LFB168:
1732:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 920              		.loc 1 1732 0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 0
 923              		@ frame_needed = 0, uses_anonymous_args = 0
 924              		@ link register save eliminated.
 925              	.LVL90:
 926 0000 7047     		bx	lr
 927              		.cfi_endproc
 928              	.LFE168:
 930 0002 00BF     		.section	.text.HAL_TIM_IC_MspDeInit,"ax",%progbits
 931              		.align	2
 932              		.weak	HAL_TIM_IC_MspDeInit
 933              		.thumb
ARM GAS  /tmp/ccrrJVNd.s 			page 126


 934              		.thumb_func
 936              	HAL_TIM_IC_MspDeInit:
 937              	.LFB169:
1748:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 938              		.loc 1 1748 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 942              		@ link register save eliminated.
 943              	.LVL91:
 944 0000 7047     		bx	lr
 945              		.cfi_endproc
 946              	.LFE169:
 948 0002 00BF     		.section	.text.HAL_TIM_IC_DeInit,"ax",%progbits
 949              		.align	2
 950              		.global	HAL_TIM_IC_DeInit
 951              		.thumb
 952              		.thumb_func
 954              	HAL_TIM_IC_DeInit:
 955              	.LFB167:
1695:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 956              		.loc 1 1695 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              	.LVL92:
1695:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 961              		.loc 1 1695 0
 962 0000 10B5     		push	{r4, lr}
 963              	.LCFI14:
 964              		.cfi_def_cfa_offset 8
 965              		.cfi_offset 4, -8
 966              		.cfi_offset 14, -4
 967 0002 0446     		mov	r4, r0
1699:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 968              		.loc 1 1699 0
 969 0004 0223     		movs	r3, #2
 970 0006 80F83D30 		strb	r3, [r0, #61]
1702:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 971              		.loc 1 1702 0
 972 000a 0368     		ldr	r3, [r0]
 973 000c 196A     		ldr	r1, [r3, #32]
 974 000e 41F21112 		movw	r2, #4369
 975 0012 1142     		tst	r1, r2
 976 0014 08D1     		bne	.L46
1702:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 977              		.loc 1 1702 0 is_stmt 0 discriminator 1
 978 0016 196A     		ldr	r1, [r3, #32]
 979 0018 40F24442 		movw	r2, #1092
 980 001c 1142     		tst	r1, r2
 981 001e 03D1     		bne	.L46
1702:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 982              		.loc 1 1702 0 discriminator 2
 983 0020 1A68     		ldr	r2, [r3]
 984 0022 22F00102 		bic	r2, r2, #1
 985 0026 1A60     		str	r2, [r3]
 986              	.L46:
ARM GAS  /tmp/ccrrJVNd.s 			page 127


1713:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 987              		.loc 1 1713 0 is_stmt 1
 988 0028 2046     		mov	r0, r4
 989              	.LVL93:
 990 002a FFF7FEFF 		bl	HAL_TIM_IC_MspDeInit
 991              	.LVL94:
1717:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 992              		.loc 1 1717 0
 993 002e 0020     		movs	r0, #0
 994 0030 84F83D00 		strb	r0, [r4, #61]
1720:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 995              		.loc 1 1720 0
 996 0034 84F83C00 		strb	r0, [r4, #60]
1723:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 997              		.loc 1 1723 0
 998 0038 10BD     		pop	{r4, pc}
 999              		.cfi_endproc
 1000              	.LFE167:
 1002 003a 00BF     		.section	.text.HAL_TIM_OnePulse_MspInit,"ax",%progbits
 1003              		.align	2
 1004              		.weak	HAL_TIM_OnePulse_MspInit
 1005              		.thumb
 1006              		.thumb_func
 1008              	HAL_TIM_OnePulse_MspInit:
 1009              	.LFB178:
2246:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1010              		.loc 1 2246 0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 0
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014              		@ link register save eliminated.
 1015              	.LVL95:
 1016 0000 7047     		bx	lr
 1017              		.cfi_endproc
 1018              	.LFE178:
 1020 0002 00BF     		.section	.text.HAL_TIM_OnePulse_MspDeInit,"ax",%progbits
 1021              		.align	2
 1022              		.weak	HAL_TIM_OnePulse_MspDeInit
 1023              		.thumb
 1024              		.thumb_func
 1026              	HAL_TIM_OnePulse_MspDeInit:
 1027              	.LFB179:
2262:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1028              		.loc 1 2262 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 0
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032              		@ link register save eliminated.
 1033              	.LVL96:
 1034 0000 7047     		bx	lr
 1035              		.cfi_endproc
 1036              	.LFE179:
 1038 0002 00BF     		.section	.text.HAL_TIM_OnePulse_DeInit,"ax",%progbits
 1039              		.align	2
 1040              		.global	HAL_TIM_OnePulse_DeInit
 1041              		.thumb
 1042              		.thumb_func
ARM GAS  /tmp/ccrrJVNd.s 			page 128


 1044              	HAL_TIM_OnePulse_DeInit:
 1045              	.LFB177:
2209:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 1046              		.loc 1 2209 0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 0
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 1050              	.LVL97:
2209:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 1051              		.loc 1 2209 0
 1052 0000 10B5     		push	{r4, lr}
 1053              	.LCFI15:
 1054              		.cfi_def_cfa_offset 8
 1055              		.cfi_offset 4, -8
 1056              		.cfi_offset 14, -4
 1057 0002 0446     		mov	r4, r0
2213:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1058              		.loc 1 2213 0
 1059 0004 0223     		movs	r3, #2
 1060 0006 80F83D30 		strb	r3, [r0, #61]
2216:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1061              		.loc 1 2216 0
 1062 000a 0368     		ldr	r3, [r0]
 1063 000c 196A     		ldr	r1, [r3, #32]
 1064 000e 41F21112 		movw	r2, #4369
 1065 0012 1142     		tst	r1, r2
 1066 0014 08D1     		bne	.L51
2216:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1067              		.loc 1 2216 0 is_stmt 0 discriminator 1
 1068 0016 196A     		ldr	r1, [r3, #32]
 1069 0018 40F24442 		movw	r2, #1092
 1070 001c 1142     		tst	r1, r2
 1071 001e 03D1     		bne	.L51
2216:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1072              		.loc 1 2216 0 discriminator 2
 1073 0020 1A68     		ldr	r2, [r3]
 1074 0022 22F00102 		bic	r2, r2, #1
 1075 0026 1A60     		str	r2, [r3]
 1076              	.L51:
2227:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 1077              		.loc 1 2227 0 is_stmt 1
 1078 0028 2046     		mov	r0, r4
 1079              	.LVL98:
 1080 002a FFF7FEFF 		bl	HAL_TIM_OnePulse_MspDeInit
 1081              	.LVL99:
2231:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1082              		.loc 1 2231 0
 1083 002e 0020     		movs	r0, #0
 1084 0030 84F83D00 		strb	r0, [r4, #61]
2234:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1085              		.loc 1 2234 0
 1086 0034 84F83C00 		strb	r0, [r4, #60]
2237:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1087              		.loc 1 2237 0
 1088 0038 10BD     		pop	{r4, pc}
 1089              		.cfi_endproc
 1090              	.LFE177:
ARM GAS  /tmp/ccrrJVNd.s 			page 129


 1092 003a 00BF     		.section	.text.HAL_TIM_Encoder_MspInit,"ax",%progbits
 1093              		.align	2
 1094              		.weak	HAL_TIM_Encoder_MspInit
 1095              		.thumb
 1096              		.thumb_func
 1098              	HAL_TIM_Encoder_MspInit:
 1099              	.LFB186:
2605:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1100              		.loc 1 2605 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 1105              	.LVL100:
 1106 0000 7047     		bx	lr
 1107              		.cfi_endproc
 1108              	.LFE186:
 1110 0002 00BF     		.section	.text.HAL_TIM_Encoder_MspDeInit,"ax",%progbits
 1111              		.align	2
 1112              		.weak	HAL_TIM_Encoder_MspDeInit
 1113              		.thumb
 1114              		.thumb_func
 1116              	HAL_TIM_Encoder_MspDeInit:
 1117              	.LFB187:
2621:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1118              		.loc 1 2621 0
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 0
 1121              		@ frame_needed = 0, uses_anonymous_args = 0
 1122              		@ link register save eliminated.
 1123              	.LVL101:
 1124 0000 7047     		bx	lr
 1125              		.cfi_endproc
 1126              	.LFE187:
 1128 0002 00BF     		.section	.text.HAL_TIM_Encoder_DeInit,"ax",%progbits
 1129              		.align	2
 1130              		.global	HAL_TIM_Encoder_DeInit
 1131              		.thumb
 1132              		.thumb_func
 1134              	HAL_TIM_Encoder_DeInit:
 1135              	.LFB185:
2568:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 1136              		.loc 1 2568 0
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 0
 1139              		@ frame_needed = 0, uses_anonymous_args = 0
 1140              	.LVL102:
2568:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 1141              		.loc 1 2568 0
 1142 0000 10B5     		push	{r4, lr}
 1143              	.LCFI16:
 1144              		.cfi_def_cfa_offset 8
 1145              		.cfi_offset 4, -8
 1146              		.cfi_offset 14, -4
 1147 0002 0446     		mov	r4, r0
2572:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1148              		.loc 1 2572 0
ARM GAS  /tmp/ccrrJVNd.s 			page 130


 1149 0004 0223     		movs	r3, #2
 1150 0006 80F83D30 		strb	r3, [r0, #61]
2575:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1151              		.loc 1 2575 0
 1152 000a 0368     		ldr	r3, [r0]
 1153 000c 196A     		ldr	r1, [r3, #32]
 1154 000e 41F21112 		movw	r2, #4369
 1155 0012 1142     		tst	r1, r2
 1156 0014 08D1     		bne	.L56
2575:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1157              		.loc 1 2575 0 is_stmt 0 discriminator 1
 1158 0016 196A     		ldr	r1, [r3, #32]
 1159 0018 40F24442 		movw	r2, #1092
 1160 001c 1142     		tst	r1, r2
 1161 001e 03D1     		bne	.L56
2575:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1162              		.loc 1 2575 0 discriminator 2
 1163 0020 1A68     		ldr	r2, [r3]
 1164 0022 22F00102 		bic	r2, r2, #1
 1165 0026 1A60     		str	r2, [r3]
 1166              	.L56:
2586:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 1167              		.loc 1 2586 0 is_stmt 1
 1168 0028 2046     		mov	r0, r4
 1169              	.LVL103:
 1170 002a FFF7FEFF 		bl	HAL_TIM_Encoder_MspDeInit
 1171              	.LVL104:
2590:HALLIB/Src/stm32f7xx_hal_tim.c ****  
 1172              		.loc 1 2590 0
 1173 002e 0020     		movs	r0, #0
 1174 0030 84F83D00 		strb	r0, [r4, #61]
2593:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1175              		.loc 1 2593 0
 1176 0034 84F83C00 		strb	r0, [r4, #60]
2596:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1177              		.loc 1 2596 0
 1178 0038 10BD     		pop	{r4, pc}
 1179              		.cfi_endproc
 1180              	.LFE185:
 1182 003a 00BF     		.section	.text.HAL_TIM_DMABurst_WriteStart,"ax",%progbits
 1183              		.align	2
 1184              		.global	HAL_TIM_DMABurst_WriteStart
 1185              		.thumb
 1186              		.thumb_func
 1188              	HAL_TIM_DMABurst_WriteStart:
 1189              	.LFB199:
3652:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 1190              		.loc 1 3652 0
 1191              		.cfi_startproc
 1192              		@ args = 4, pretend = 0, frame = 0
 1193              		@ frame_needed = 0, uses_anonymous_args = 0
 1194              	.LVL105:
 1195 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1196              	.LCFI17:
 1197              		.cfi_def_cfa_offset 24
 1198              		.cfi_offset 4, -24
 1199              		.cfi_offset 5, -20
ARM GAS  /tmp/ccrrJVNd.s 			page 131


 1200              		.cfi_offset 6, -16
 1201              		.cfi_offset 7, -12
 1202              		.cfi_offset 8, -8
 1203              		.cfi_offset 14, -4
 1204 0004 069D     		ldr	r5, [sp, #24]
3659:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 1205              		.loc 1 3659 0
 1206 0006 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 1207 000a E4B2     		uxtb	r4, r4
 1208 000c 022C     		cmp	r4, #2
 1209 000e 00F0A380 		beq	.L70
3663:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 1210              		.loc 1 3663 0
 1211 0012 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 1212 0016 E4B2     		uxtb	r4, r4
 1213 0018 012C     		cmp	r4, #1
 1214 001a 0BD1     		bne	.L60
3665:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 1215              		.loc 1 3665 0
 1216 001c B3FA83F4 		clz	r4, r3
 1217 0020 6409     		lsrs	r4, r4, #5
 1218 0022 002D     		cmp	r5, #0
 1219 0024 08BF     		it	eq
 1220 0026 0024     		moveq	r4, #0
 1221 0028 002C     		cmp	r4, #0
 1222 002a 40F09880 		bne	.L71
3671:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1223              		.loc 1 3671 0
 1224 002e 0224     		movs	r4, #2
 1225 0030 80F83D40 		strb	r4, [r0, #61]
 1226              	.L60:
 1227 0034 1F46     		mov	r7, r3
 1228 0036 1646     		mov	r6, r2
 1229 0038 8846     		mov	r8, r1
 1230 003a 0446     		mov	r4, r0
3674:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 1231              		.loc 1 3674 0
 1232 003c B2F5006F 		cmp	r2, #2048
 1233 0040 41D0     		beq	.L62
 1234 0042 09D8     		bhi	.L63
 1235 0044 B2F5007F 		cmp	r2, #512
 1236 0048 1FD0     		beq	.L64
 1237 004a B2F5806F 		cmp	r2, #1024
 1238 004e 2BD0     		beq	.L65
 1239 0050 B2F5807F 		cmp	r2, #256
 1240 0054 72D1     		bne	.L61
 1241 0056 09E0     		b	.L66
 1242              	.L63:
 1243 0058 B2F5005F 		cmp	r2, #8192
 1244 005c 51D0     		beq	.L67
 1245 005e B2F5804F 		cmp	r2, #16384
 1246 0062 5DD0     		beq	.L68
 1247 0064 B2F5805F 		cmp	r2, #4096
 1248 0068 68D1     		bne	.L61
 1249 006a 3BE0     		b	.L69
 1250              	.L66:
3679:HALLIB/Src/stm32f7xx_hal_tim.c ****      
ARM GAS  /tmp/ccrrJVNd.s 			page 132


 1251              		.loc 1 3679 0
 1252 006c 036A     		ldr	r3, [r0, #32]
 1253              	.LVL106:
 1254 006e 3D4A     		ldr	r2, .L73
 1255              	.LVL107:
 1256 0070 DA63     		str	r2, [r3, #60]
3682:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1257              		.loc 1 3682 0
 1258 0072 036A     		ldr	r3, [r0, #32]
 1259 0074 3C4A     		ldr	r2, .L73+4
 1260 0076 DA64     		str	r2, [r3, #76]
3685:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1261              		.loc 1 3685 0
 1262 0078 0268     		ldr	r2, [r0]
 1263 007a 2B0A     		lsrs	r3, r5, #8
 1264 007c 0133     		adds	r3, r3, #1
 1265 007e 4C32     		adds	r2, r2, #76
 1266 0080 3946     		mov	r1, r7
 1267              	.LVL108:
 1268 0082 006A     		ldr	r0, [r0, #32]
 1269              	.LVL109:
 1270 0084 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1271              	.LVL110:
3687:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC1:
 1272              		.loc 1 3687 0
 1273 0088 58E0     		b	.L61
 1274              	.LVL111:
 1275              	.L64:
3691:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1276              		.loc 1 3691 0
 1277 008a 436A     		ldr	r3, [r0, #36]
 1278              	.LVL112:
 1279 008c 374A     		ldr	r2, .L73+8
 1280              	.LVL113:
 1281 008e DA63     		str	r2, [r3, #60]
3694:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1282              		.loc 1 3694 0
 1283 0090 436A     		ldr	r3, [r0, #36]
 1284 0092 354A     		ldr	r2, .L73+4
 1285 0094 DA64     		str	r2, [r3, #76]
3697:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1286              		.loc 1 3697 0
 1287 0096 0268     		ldr	r2, [r0]
 1288 0098 2B0A     		lsrs	r3, r5, #8
 1289 009a 0133     		adds	r3, r3, #1
 1290 009c 4C32     		adds	r2, r2, #76
 1291 009e 3946     		mov	r1, r7
 1292              	.LVL114:
 1293 00a0 406A     		ldr	r0, [r0, #36]
 1294              	.LVL115:
 1295 00a2 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1296              	.LVL116:
3699:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC2:
 1297              		.loc 1 3699 0
 1298 00a6 49E0     		b	.L61
 1299              	.LVL117:
 1300              	.L65:
ARM GAS  /tmp/ccrrJVNd.s 			page 133


3703:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1301              		.loc 1 3703 0
 1302 00a8 836A     		ldr	r3, [r0, #40]
 1303              	.LVL118:
 1304 00aa 304A     		ldr	r2, .L73+8
 1305              	.LVL119:
 1306 00ac DA63     		str	r2, [r3, #60]
3706:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1307              		.loc 1 3706 0
 1308 00ae 836A     		ldr	r3, [r0, #40]
 1309 00b0 2D4A     		ldr	r2, .L73+4
 1310 00b2 DA64     		str	r2, [r3, #76]
3709:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1311              		.loc 1 3709 0
 1312 00b4 0268     		ldr	r2, [r0]
 1313 00b6 2B0A     		lsrs	r3, r5, #8
 1314 00b8 0133     		adds	r3, r3, #1
 1315 00ba 4C32     		adds	r2, r2, #76
 1316 00bc 3946     		mov	r1, r7
 1317              	.LVL120:
 1318 00be 806A     		ldr	r0, [r0, #40]
 1319              	.LVL121:
 1320 00c0 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1321              	.LVL122:
3711:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC3:
 1322              		.loc 1 3711 0
 1323 00c4 3AE0     		b	.L61
 1324              	.LVL123:
 1325              	.L62:
3715:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1326              		.loc 1 3715 0
 1327 00c6 C36A     		ldr	r3, [r0, #44]
 1328              	.LVL124:
 1329 00c8 284A     		ldr	r2, .L73+8
 1330              	.LVL125:
 1331 00ca DA63     		str	r2, [r3, #60]
3718:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1332              		.loc 1 3718 0
 1333 00cc C36A     		ldr	r3, [r0, #44]
 1334 00ce 264A     		ldr	r2, .L73+4
 1335 00d0 DA64     		str	r2, [r3, #76]
3721:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1336              		.loc 1 3721 0
 1337 00d2 0268     		ldr	r2, [r0]
 1338 00d4 2B0A     		lsrs	r3, r5, #8
 1339 00d6 0133     		adds	r3, r3, #1
 1340 00d8 4C32     		adds	r2, r2, #76
 1341 00da 3946     		mov	r1, r7
 1342              	.LVL126:
 1343 00dc C06A     		ldr	r0, [r0, #44]
 1344              	.LVL127:
 1345 00de FFF7FEFF 		bl	HAL_DMA_Start_IT
 1346              	.LVL128:
3723:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC4:
 1347              		.loc 1 3723 0
 1348 00e2 2BE0     		b	.L61
 1349              	.LVL129:
ARM GAS  /tmp/ccrrJVNd.s 			page 134


 1350              	.L69:
3727:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1351              		.loc 1 3727 0
 1352 00e4 036B     		ldr	r3, [r0, #48]
 1353              	.LVL130:
 1354 00e6 214A     		ldr	r2, .L73+8
 1355              	.LVL131:
 1356 00e8 DA63     		str	r2, [r3, #60]
3730:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1357              		.loc 1 3730 0
 1358 00ea 036B     		ldr	r3, [r0, #48]
 1359 00ec 1E4A     		ldr	r2, .L73+4
 1360 00ee DA64     		str	r2, [r3, #76]
3733:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1361              		.loc 1 3733 0
 1362 00f0 0268     		ldr	r2, [r0]
 1363 00f2 2B0A     		lsrs	r3, r5, #8
 1364 00f4 0133     		adds	r3, r3, #1
 1365 00f6 4C32     		adds	r2, r2, #76
 1366 00f8 3946     		mov	r1, r7
 1367              	.LVL132:
 1368 00fa 006B     		ldr	r0, [r0, #48]
 1369              	.LVL133:
 1370 00fc FFF7FEFF 		bl	HAL_DMA_Start_IT
 1371              	.LVL134:
3735:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_COM:
 1372              		.loc 1 3735 0
 1373 0100 1CE0     		b	.L61
 1374              	.LVL135:
 1375              	.L67:
3739:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1376              		.loc 1 3739 0
 1377 0102 436B     		ldr	r3, [r0, #52]
 1378              	.LVL136:
 1379 0104 1A4A     		ldr	r2, .L73+12
 1380              	.LVL137:
 1381 0106 DA63     		str	r2, [r3, #60]
3742:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1382              		.loc 1 3742 0
 1383 0108 436B     		ldr	r3, [r0, #52]
 1384 010a 174A     		ldr	r2, .L73+4
 1385 010c DA64     		str	r2, [r3, #76]
3745:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1386              		.loc 1 3745 0
 1387 010e 0268     		ldr	r2, [r0]
 1388 0110 2B0A     		lsrs	r3, r5, #8
 1389 0112 0133     		adds	r3, r3, #1
 1390 0114 4C32     		adds	r2, r2, #76
 1391 0116 3946     		mov	r1, r7
 1392              	.LVL138:
 1393 0118 406B     		ldr	r0, [r0, #52]
 1394              	.LVL139:
 1395 011a FFF7FEFF 		bl	HAL_DMA_Start_IT
 1396              	.LVL140:
3747:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
 1397              		.loc 1 3747 0
 1398 011e 0DE0     		b	.L61
ARM GAS  /tmp/ccrrJVNd.s 			page 135


 1399              	.LVL141:
 1400              	.L68:
3751:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1401              		.loc 1 3751 0
 1402 0120 836B     		ldr	r3, [r0, #56]
 1403              	.LVL142:
 1404 0122 144A     		ldr	r2, .L73+16
 1405              	.LVL143:
 1406 0124 DA63     		str	r2, [r3, #60]
3754:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1407              		.loc 1 3754 0
 1408 0126 836B     		ldr	r3, [r0, #56]
 1409 0128 0F4A     		ldr	r2, .L73+4
 1410 012a DA64     		str	r2, [r3, #76]
3757:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1411              		.loc 1 3757 0
 1412 012c 0268     		ldr	r2, [r0]
 1413 012e 2B0A     		lsrs	r3, r5, #8
 1414 0130 0133     		adds	r3, r3, #1
 1415 0132 4C32     		adds	r2, r2, #76
 1416 0134 3946     		mov	r1, r7
 1417              	.LVL144:
 1418 0136 806B     		ldr	r0, [r0, #56]
 1419              	.LVL145:
 1420 0138 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1421              	.LVL146:
 1422              	.L61:
3764:HALLIB/Src/stm32f7xx_hal_tim.c ****    
 1423              		.loc 1 3764 0
 1424 013c 2368     		ldr	r3, [r4]
 1425 013e 45EA0805 		orr	r5, r5, r8
 1426 0142 9D64     		str	r5, [r3, #72]
3767:HALLIB/Src/stm32f7xx_hal_tim.c ****    
 1427              		.loc 1 3767 0
 1428 0144 2368     		ldr	r3, [r4]
 1429 0146 DA68     		ldr	r2, [r3, #12]
 1430 0148 1643     		orrs	r6, r6, r2
 1431              	.LVL147:
 1432 014a DE60     		str	r6, [r3, #12]
3769:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1433              		.loc 1 3769 0
 1434 014c 0123     		movs	r3, #1
 1435 014e 84F83D30 		strb	r3, [r4, #61]
3772:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 1436              		.loc 1 3772 0
 1437 0152 0020     		movs	r0, #0
 1438 0154 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1439              	.LVL148:
 1440              	.L70:
3661:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 1441              		.loc 1 3661 0
 1442 0158 0220     		movs	r0, #2
 1443              	.LVL149:
 1444 015a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1445              	.LVL150:
 1446              	.L71:
3667:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
ARM GAS  /tmp/ccrrJVNd.s 			page 136


 1447              		.loc 1 3667 0
 1448 015e 0120     		movs	r0, #1
 1449              	.LVL151:
3773:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1450              		.loc 1 3773 0
 1451 0160 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1452              	.LVL152:
 1453              	.L74:
 1454              		.align	2
 1455              	.L73:
 1456 0164 00000000 		.word	TIM_DMAPeriodElapsedCplt
 1457 0168 00000000 		.word	TIM_DMAError
 1458 016c 00000000 		.word	TIM_DMADelayPulseCplt
 1459 0170 00000000 		.word	TIMEx_DMACommutationCplt
 1460 0174 00000000 		.word	TIM_DMATriggerCplt
 1461              		.cfi_endproc
 1462              	.LFE199:
 1464              		.section	.text.HAL_TIM_DMABurst_WriteStop,"ax",%progbits
 1465              		.align	2
 1466              		.global	HAL_TIM_DMABurst_WriteStop
 1467              		.thumb
 1468              		.thumb_func
 1470              	HAL_TIM_DMABurst_WriteStop:
 1471              	.LFB200:
3783:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 1472              		.loc 1 3783 0
 1473              		.cfi_startproc
 1474              		@ args = 0, pretend = 0, frame = 0
 1475              		@ frame_needed = 0, uses_anonymous_args = 0
 1476              	.LVL153:
 1477 0000 38B5     		push	{r3, r4, r5, lr}
 1478              	.LCFI18:
 1479              		.cfi_def_cfa_offset 16
 1480              		.cfi_offset 3, -16
 1481              		.cfi_offset 4, -12
 1482              		.cfi_offset 5, -8
 1483              		.cfi_offset 14, -4
 1484 0002 0546     		mov	r5, r0
 1485 0004 0C46     		mov	r4, r1
3788:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 1486              		.loc 1 3788 0
 1487 0006 B1F5006F 		cmp	r1, #2048
 1488 000a 20D0     		beq	.L77
 1489 000c 09D8     		bhi	.L78
 1490 000e B1F5007F 		cmp	r1, #512
 1491 0012 14D0     		beq	.L79
 1492 0014 B1F5806F 		cmp	r1, #1024
 1493 0018 15D0     		beq	.L80
 1494 001a B1F5807F 		cmp	r1, #256
 1495 001e 25D1     		bne	.L76
 1496 0020 09E0     		b	.L81
 1497              	.L78:
 1498 0022 B1F5005F 		cmp	r1, #8192
 1499 0026 1AD0     		beq	.L82
 1500 0028 B1F5804F 		cmp	r1, #16384
 1501 002c 1BD0     		beq	.L83
 1502 002e B1F5805F 		cmp	r1, #4096
ARM GAS  /tmp/ccrrJVNd.s 			page 137


 1503 0032 1BD1     		bne	.L76
 1504 0034 0FE0     		b	.L84
 1505              	.L81:
3792:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1506              		.loc 1 3792 0
 1507 0036 006A     		ldr	r0, [r0, #32]
 1508              	.LVL154:
 1509 0038 FFF7FEFF 		bl	HAL_DMA_Abort
 1510              	.LVL155:
3794:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC1:
 1511              		.loc 1 3794 0
 1512 003c 16E0     		b	.L76
 1513              	.LVL156:
 1514              	.L79:
3797:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1515              		.loc 1 3797 0
 1516 003e 406A     		ldr	r0, [r0, #36]
 1517              	.LVL157:
 1518 0040 FFF7FEFF 		bl	HAL_DMA_Abort
 1519              	.LVL158:
3799:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC2:
 1520              		.loc 1 3799 0
 1521 0044 12E0     		b	.L76
 1522              	.LVL159:
 1523              	.L80:
3802:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1524              		.loc 1 3802 0
 1525 0046 806A     		ldr	r0, [r0, #40]
 1526              	.LVL160:
 1527 0048 FFF7FEFF 		bl	HAL_DMA_Abort
 1528              	.LVL161:
3804:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC3:
 1529              		.loc 1 3804 0
 1530 004c 0EE0     		b	.L76
 1531              	.LVL162:
 1532              	.L77:
3807:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1533              		.loc 1 3807 0
 1534 004e C06A     		ldr	r0, [r0, #44]
 1535              	.LVL163:
 1536 0050 FFF7FEFF 		bl	HAL_DMA_Abort
 1537              	.LVL164:
3809:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC4:
 1538              		.loc 1 3809 0
 1539 0054 0AE0     		b	.L76
 1540              	.LVL165:
 1541              	.L84:
3812:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1542              		.loc 1 3812 0
 1543 0056 006B     		ldr	r0, [r0, #48]
 1544              	.LVL166:
 1545 0058 FFF7FEFF 		bl	HAL_DMA_Abort
 1546              	.LVL167:
3814:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_COM:
 1547              		.loc 1 3814 0
 1548 005c 06E0     		b	.L76
 1549              	.LVL168:
ARM GAS  /tmp/ccrrJVNd.s 			page 138


 1550              	.L82:
3817:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1551              		.loc 1 3817 0
 1552 005e 406B     		ldr	r0, [r0, #52]
 1553              	.LVL169:
 1554 0060 FFF7FEFF 		bl	HAL_DMA_Abort
 1555              	.LVL170:
3819:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
 1556              		.loc 1 3819 0
 1557 0064 02E0     		b	.L76
 1558              	.LVL171:
 1559              	.L83:
3822:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1560              		.loc 1 3822 0
 1561 0066 806B     		ldr	r0, [r0, #56]
 1562              	.LVL172:
 1563 0068 FFF7FEFF 		bl	HAL_DMA_Abort
 1564              	.LVL173:
 1565              	.L76:
3830:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 1566              		.loc 1 3830 0
 1567 006c 2A68     		ldr	r2, [r5]
 1568 006e D368     		ldr	r3, [r2, #12]
 1569 0070 23EA0404 		bic	r4, r3, r4
 1570              	.LVL174:
 1571 0074 D460     		str	r4, [r2, #12]
3834:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1572              		.loc 1 3834 0
 1573 0076 0020     		movs	r0, #0
 1574 0078 38BD     		pop	{r3, r4, r5, pc}
 1575              		.cfi_endproc
 1576              	.LFE200:
 1578 007a 00BF     		.section	.text.HAL_TIM_DMABurst_ReadStart,"ax",%progbits
 1579              		.align	2
 1580              		.global	HAL_TIM_DMABurst_ReadStart
 1581              		.thumb
 1582              		.thumb_func
 1584              	HAL_TIM_DMABurst_ReadStart:
 1585              	.LFB201:
3877:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 1586              		.loc 1 3877 0
 1587              		.cfi_startproc
 1588              		@ args = 4, pretend = 0, frame = 0
 1589              		@ frame_needed = 0, uses_anonymous_args = 0
 1590              	.LVL175:
 1591 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1592              	.LCFI19:
 1593              		.cfi_def_cfa_offset 24
 1594              		.cfi_offset 4, -24
 1595              		.cfi_offset 5, -20
 1596              		.cfi_offset 6, -16
 1597              		.cfi_offset 7, -12
 1598              		.cfi_offset 8, -8
 1599              		.cfi_offset 14, -4
 1600 0004 069D     		ldr	r5, [sp, #24]
3884:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 1601              		.loc 1 3884 0
ARM GAS  /tmp/ccrrJVNd.s 			page 139


 1602 0006 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 1603 000a E4B2     		uxtb	r4, r4
 1604 000c 022C     		cmp	r4, #2
 1605 000e 00F0A380 		beq	.L98
3888:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 1606              		.loc 1 3888 0
 1607 0012 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 1608 0016 E4B2     		uxtb	r4, r4
 1609 0018 012C     		cmp	r4, #1
 1610 001a 0BD1     		bne	.L88
3890:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 1611              		.loc 1 3890 0
 1612 001c B3FA83F4 		clz	r4, r3
 1613 0020 6409     		lsrs	r4, r4, #5
 1614 0022 002D     		cmp	r5, #0
 1615 0024 08BF     		it	eq
 1616 0026 0024     		moveq	r4, #0
 1617 0028 002C     		cmp	r4, #0
 1618 002a 40F09880 		bne	.L99
3896:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1619              		.loc 1 3896 0
 1620 002e 0224     		movs	r4, #2
 1621 0030 80F83D40 		strb	r4, [r0, #61]
 1622              	.L88:
 1623 0034 1F46     		mov	r7, r3
 1624 0036 1646     		mov	r6, r2
 1625 0038 8846     		mov	r8, r1
 1626 003a 0446     		mov	r4, r0
3899:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 1627              		.loc 1 3899 0
 1628 003c B2F5006F 		cmp	r2, #2048
 1629 0040 41D0     		beq	.L90
 1630 0042 09D8     		bhi	.L91
 1631 0044 B2F5007F 		cmp	r2, #512
 1632 0048 1FD0     		beq	.L92
 1633 004a B2F5806F 		cmp	r2, #1024
 1634 004e 2BD0     		beq	.L93
 1635 0050 B2F5807F 		cmp	r2, #256
 1636 0054 72D1     		bne	.L89
 1637 0056 09E0     		b	.L94
 1638              	.L91:
 1639 0058 B2F5005F 		cmp	r2, #8192
 1640 005c 51D0     		beq	.L95
 1641 005e B2F5804F 		cmp	r2, #16384
 1642 0062 5DD0     		beq	.L96
 1643 0064 B2F5805F 		cmp	r2, #4096
 1644 0068 68D1     		bne	.L89
 1645 006a 3BE0     		b	.L97
 1646              	.L94:
3904:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1647              		.loc 1 3904 0
 1648 006c 036A     		ldr	r3, [r0, #32]
 1649              	.LVL176:
 1650 006e 3D4A     		ldr	r2, .L101
 1651              	.LVL177:
 1652 0070 DA63     		str	r2, [r3, #60]
3907:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 140


 1653              		.loc 1 3907 0
 1654 0072 036A     		ldr	r3, [r0, #32]
 1655 0074 3C4A     		ldr	r2, .L101+4
 1656 0076 DA64     		str	r2, [r3, #76]
3910:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1657              		.loc 1 3910 0
 1658 0078 0168     		ldr	r1, [r0]
 1659              	.LVL178:
 1660 007a 2B0A     		lsrs	r3, r5, #8
 1661 007c 0133     		adds	r3, r3, #1
 1662 007e 3A46     		mov	r2, r7
 1663 0080 4C31     		adds	r1, r1, #76
 1664 0082 006A     		ldr	r0, [r0, #32]
 1665              	.LVL179:
 1666 0084 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1667              	.LVL180:
3912:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC1:
 1668              		.loc 1 3912 0
 1669 0088 58E0     		b	.L89
 1670              	.LVL181:
 1671              	.L92:
3916:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1672              		.loc 1 3916 0
 1673 008a 436A     		ldr	r3, [r0, #36]
 1674              	.LVL182:
 1675 008c 374A     		ldr	r2, .L101+8
 1676              	.LVL183:
 1677 008e DA63     		str	r2, [r3, #60]
3919:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1678              		.loc 1 3919 0
 1679 0090 436A     		ldr	r3, [r0, #36]
 1680 0092 354A     		ldr	r2, .L101+4
 1681 0094 DA64     		str	r2, [r3, #76]
3922:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1682              		.loc 1 3922 0
 1683 0096 0168     		ldr	r1, [r0]
 1684              	.LVL184:
 1685 0098 2B0A     		lsrs	r3, r5, #8
 1686 009a 0133     		adds	r3, r3, #1
 1687 009c 3A46     		mov	r2, r7
 1688 009e 4C31     		adds	r1, r1, #76
 1689 00a0 406A     		ldr	r0, [r0, #36]
 1690              	.LVL185:
 1691 00a2 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1692              	.LVL186:
3924:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC2:
 1693              		.loc 1 3924 0
 1694 00a6 49E0     		b	.L89
 1695              	.LVL187:
 1696              	.L93:
3928:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1697              		.loc 1 3928 0
 1698 00a8 836A     		ldr	r3, [r0, #40]
 1699              	.LVL188:
 1700 00aa 304A     		ldr	r2, .L101+8
 1701              	.LVL189:
 1702 00ac DA63     		str	r2, [r3, #60]
ARM GAS  /tmp/ccrrJVNd.s 			page 141


3931:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1703              		.loc 1 3931 0
 1704 00ae 836A     		ldr	r3, [r0, #40]
 1705 00b0 2D4A     		ldr	r2, .L101+4
 1706 00b2 DA64     		str	r2, [r3, #76]
3934:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1707              		.loc 1 3934 0
 1708 00b4 0168     		ldr	r1, [r0]
 1709              	.LVL190:
 1710 00b6 2B0A     		lsrs	r3, r5, #8
 1711 00b8 0133     		adds	r3, r3, #1
 1712 00ba 3A46     		mov	r2, r7
 1713 00bc 4C31     		adds	r1, r1, #76
 1714 00be 806A     		ldr	r0, [r0, #40]
 1715              	.LVL191:
 1716 00c0 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1717              	.LVL192:
3936:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC3:
 1718              		.loc 1 3936 0
 1719 00c4 3AE0     		b	.L89
 1720              	.LVL193:
 1721              	.L90:
3940:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1722              		.loc 1 3940 0
 1723 00c6 C36A     		ldr	r3, [r0, #44]
 1724              	.LVL194:
 1725 00c8 284A     		ldr	r2, .L101+8
 1726              	.LVL195:
 1727 00ca DA63     		str	r2, [r3, #60]
3943:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1728              		.loc 1 3943 0
 1729 00cc C36A     		ldr	r3, [r0, #44]
 1730 00ce 264A     		ldr	r2, .L101+4
 1731 00d0 DA64     		str	r2, [r3, #76]
3946:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1732              		.loc 1 3946 0
 1733 00d2 0168     		ldr	r1, [r0]
 1734              	.LVL196:
 1735 00d4 2B0A     		lsrs	r3, r5, #8
 1736 00d6 0133     		adds	r3, r3, #1
 1737 00d8 3A46     		mov	r2, r7
 1738 00da 4C31     		adds	r1, r1, #76
 1739 00dc C06A     		ldr	r0, [r0, #44]
 1740              	.LVL197:
 1741 00de FFF7FEFF 		bl	HAL_DMA_Start_IT
 1742              	.LVL198:
3948:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC4:
 1743              		.loc 1 3948 0
 1744 00e2 2BE0     		b	.L89
 1745              	.LVL199:
 1746              	.L97:
3952:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1747              		.loc 1 3952 0
 1748 00e4 036B     		ldr	r3, [r0, #48]
 1749              	.LVL200:
 1750 00e6 214A     		ldr	r2, .L101+8
 1751              	.LVL201:
ARM GAS  /tmp/ccrrJVNd.s 			page 142


 1752 00e8 DA63     		str	r2, [r3, #60]
3955:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1753              		.loc 1 3955 0
 1754 00ea 036B     		ldr	r3, [r0, #48]
 1755 00ec 1E4A     		ldr	r2, .L101+4
 1756 00ee DA64     		str	r2, [r3, #76]
3958:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1757              		.loc 1 3958 0
 1758 00f0 0168     		ldr	r1, [r0]
 1759              	.LVL202:
 1760 00f2 2B0A     		lsrs	r3, r5, #8
 1761 00f4 0133     		adds	r3, r3, #1
 1762 00f6 3A46     		mov	r2, r7
 1763 00f8 4C31     		adds	r1, r1, #76
 1764 00fa 006B     		ldr	r0, [r0, #48]
 1765              	.LVL203:
 1766 00fc FFF7FEFF 		bl	HAL_DMA_Start_IT
 1767              	.LVL204:
3960:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_COM:
 1768              		.loc 1 3960 0
 1769 0100 1CE0     		b	.L89
 1770              	.LVL205:
 1771              	.L95:
3964:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1772              		.loc 1 3964 0
 1773 0102 436B     		ldr	r3, [r0, #52]
 1774              	.LVL206:
 1775 0104 1A4A     		ldr	r2, .L101+12
 1776              	.LVL207:
 1777 0106 DA63     		str	r2, [r3, #60]
3967:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1778              		.loc 1 3967 0
 1779 0108 436B     		ldr	r3, [r0, #52]
 1780 010a 174A     		ldr	r2, .L101+4
 1781 010c DA64     		str	r2, [r3, #76]
3970:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1782              		.loc 1 3970 0
 1783 010e 0168     		ldr	r1, [r0]
 1784              	.LVL208:
 1785 0110 2B0A     		lsrs	r3, r5, #8
 1786 0112 0133     		adds	r3, r3, #1
 1787 0114 3A46     		mov	r2, r7
 1788 0116 4C31     		adds	r1, r1, #76
 1789 0118 406B     		ldr	r0, [r0, #52]
 1790              	.LVL209:
 1791 011a FFF7FEFF 		bl	HAL_DMA_Start_IT
 1792              	.LVL210:
3972:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
 1793              		.loc 1 3972 0
 1794 011e 0DE0     		b	.L89
 1795              	.LVL211:
 1796              	.L96:
3976:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 1797              		.loc 1 3976 0
 1798 0120 836B     		ldr	r3, [r0, #56]
 1799              	.LVL212:
 1800 0122 144A     		ldr	r2, .L101+16
ARM GAS  /tmp/ccrrJVNd.s 			page 143


 1801              	.LVL213:
 1802 0124 DA63     		str	r2, [r3, #60]
3979:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1803              		.loc 1 3979 0
 1804 0126 836B     		ldr	r3, [r0, #56]
 1805 0128 0F4A     		ldr	r2, .L101+4
 1806 012a DA64     		str	r2, [r3, #76]
3982:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1807              		.loc 1 3982 0
 1808 012c 0168     		ldr	r1, [r0]
 1809              	.LVL214:
 1810 012e 2B0A     		lsrs	r3, r5, #8
 1811 0130 0133     		adds	r3, r3, #1
 1812 0132 3A46     		mov	r2, r7
 1813 0134 4C31     		adds	r1, r1, #76
 1814 0136 806B     		ldr	r0, [r0, #56]
 1815              	.LVL215:
 1816 0138 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1817              	.LVL216:
 1818              	.L89:
3990:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1819              		.loc 1 3990 0
 1820 013c 2368     		ldr	r3, [r4]
 1821 013e 45EA0805 		orr	r5, r5, r8
 1822 0142 9D64     		str	r5, [r3, #72]
3993:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1823              		.loc 1 3993 0
 1824 0144 2368     		ldr	r3, [r4]
 1825 0146 DA68     		ldr	r2, [r3, #12]
 1826 0148 1643     		orrs	r6, r6, r2
 1827              	.LVL217:
 1828 014a DE60     		str	r6, [r3, #12]
3995:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1829              		.loc 1 3995 0
 1830 014c 0123     		movs	r3, #1
 1831 014e 84F83D30 		strb	r3, [r4, #61]
3998:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 1832              		.loc 1 3998 0
 1833 0152 0020     		movs	r0, #0
 1834 0154 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1835              	.LVL218:
 1836              	.L98:
3886:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 1837              		.loc 1 3886 0
 1838 0158 0220     		movs	r0, #2
 1839              	.LVL219:
 1840 015a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1841              	.LVL220:
 1842              	.L99:
3892:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1843              		.loc 1 3892 0
 1844 015e 0120     		movs	r0, #1
 1845              	.LVL221:
3999:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1846              		.loc 1 3999 0
 1847 0160 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1848              	.LVL222:
ARM GAS  /tmp/ccrrJVNd.s 			page 144


 1849              	.L102:
 1850              		.align	2
 1851              	.L101:
 1852 0164 00000000 		.word	TIM_DMAPeriodElapsedCplt
 1853 0168 00000000 		.word	TIM_DMAError
 1854 016c 00000000 		.word	TIM_DMACaptureCplt
 1855 0170 00000000 		.word	TIMEx_DMACommutationCplt
 1856 0174 00000000 		.word	TIM_DMATriggerCplt
 1857              		.cfi_endproc
 1858              	.LFE201:
 1860              		.section	.text.HAL_TIM_DMABurst_ReadStop,"ax",%progbits
 1861              		.align	2
 1862              		.global	HAL_TIM_DMABurst_ReadStop
 1863              		.thumb
 1864              		.thumb_func
 1866              	HAL_TIM_DMABurst_ReadStop:
 1867              	.LFB202:
4009:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 1868              		.loc 1 4009 0
 1869              		.cfi_startproc
 1870              		@ args = 0, pretend = 0, frame = 0
 1871              		@ frame_needed = 0, uses_anonymous_args = 0
 1872              	.LVL223:
 1873 0000 38B5     		push	{r3, r4, r5, lr}
 1874              	.LCFI20:
 1875              		.cfi_def_cfa_offset 16
 1876              		.cfi_offset 3, -16
 1877              		.cfi_offset 4, -12
 1878              		.cfi_offset 5, -8
 1879              		.cfi_offset 14, -4
 1880 0002 0546     		mov	r5, r0
 1881 0004 0C46     		mov	r4, r1
4014:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 1882              		.loc 1 4014 0
 1883 0006 B1F5006F 		cmp	r1, #2048
 1884 000a 20D0     		beq	.L105
 1885 000c 09D8     		bhi	.L106
 1886 000e B1F5007F 		cmp	r1, #512
 1887 0012 14D0     		beq	.L107
 1888 0014 B1F5806F 		cmp	r1, #1024
 1889 0018 15D0     		beq	.L108
 1890 001a B1F5807F 		cmp	r1, #256
 1891 001e 25D1     		bne	.L104
 1892 0020 09E0     		b	.L109
 1893              	.L106:
 1894 0022 B1F5005F 		cmp	r1, #8192
 1895 0026 1AD0     		beq	.L110
 1896 0028 B1F5804F 		cmp	r1, #16384
 1897 002c 1BD0     		beq	.L111
 1898 002e B1F5805F 		cmp	r1, #4096
 1899 0032 1BD1     		bne	.L104
 1900 0034 0FE0     		b	.L112
 1901              	.L109:
4018:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1902              		.loc 1 4018 0
 1903 0036 006A     		ldr	r0, [r0, #32]
 1904              	.LVL224:
ARM GAS  /tmp/ccrrJVNd.s 			page 145


 1905 0038 FFF7FEFF 		bl	HAL_DMA_Abort
 1906              	.LVL225:
4020:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC1:
 1907              		.loc 1 4020 0
 1908 003c 16E0     		b	.L104
 1909              	.LVL226:
 1910              	.L107:
4023:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1911              		.loc 1 4023 0
 1912 003e 406A     		ldr	r0, [r0, #36]
 1913              	.LVL227:
 1914 0040 FFF7FEFF 		bl	HAL_DMA_Abort
 1915              	.LVL228:
4025:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC2:
 1916              		.loc 1 4025 0
 1917 0044 12E0     		b	.L104
 1918              	.LVL229:
 1919              	.L108:
4028:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1920              		.loc 1 4028 0
 1921 0046 806A     		ldr	r0, [r0, #40]
 1922              	.LVL230:
 1923 0048 FFF7FEFF 		bl	HAL_DMA_Abort
 1924              	.LVL231:
4030:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC3:
 1925              		.loc 1 4030 0
 1926 004c 0EE0     		b	.L104
 1927              	.LVL232:
 1928              	.L105:
4033:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1929              		.loc 1 4033 0
 1930 004e C06A     		ldr	r0, [r0, #44]
 1931              	.LVL233:
 1932 0050 FFF7FEFF 		bl	HAL_DMA_Abort
 1933              	.LVL234:
4035:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_CC4:
 1934              		.loc 1 4035 0
 1935 0054 0AE0     		b	.L104
 1936              	.LVL235:
 1937              	.L112:
4038:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1938              		.loc 1 4038 0
 1939 0056 006B     		ldr	r0, [r0, #48]
 1940              	.LVL236:
 1941 0058 FFF7FEFF 		bl	HAL_DMA_Abort
 1942              	.LVL237:
4040:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_COM:
 1943              		.loc 1 4040 0
 1944 005c 06E0     		b	.L104
 1945              	.LVL238:
 1946              	.L110:
4043:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1947              		.loc 1 4043 0
 1948 005e 406B     		ldr	r0, [r0, #52]
 1949              	.LVL239:
 1950 0060 FFF7FEFF 		bl	HAL_DMA_Abort
 1951              	.LVL240:
ARM GAS  /tmp/ccrrJVNd.s 			page 146


4045:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
 1952              		.loc 1 4045 0
 1953 0064 02E0     		b	.L104
 1954              	.LVL241:
 1955              	.L111:
4048:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 1956              		.loc 1 4048 0
 1957 0066 806B     		ldr	r0, [r0, #56]
 1958              	.LVL242:
 1959 0068 FFF7FEFF 		bl	HAL_DMA_Abort
 1960              	.LVL243:
 1961              	.L104:
4056:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 1962              		.loc 1 4056 0
 1963 006c 2A68     		ldr	r2, [r5]
 1964 006e D368     		ldr	r3, [r2, #12]
 1965 0070 23EA0404 		bic	r4, r3, r4
 1966              	.LVL244:
 1967 0074 D460     		str	r4, [r2, #12]
4060:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 1968              		.loc 1 4060 0
 1969 0076 0020     		movs	r0, #0
 1970 0078 38BD     		pop	{r3, r4, r5, pc}
 1971              		.cfi_endproc
 1972              	.LFE202:
 1974 007a 00BF     		.section	.text.HAL_TIM_GenerateEvent,"ax",%progbits
 1975              		.align	2
 1976              		.global	HAL_TIM_GenerateEvent
 1977              		.thumb
 1978              		.thumb_func
 1980              	HAL_TIM_GenerateEvent:
 1981              	.LFB203:
4083:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 1982              		.loc 1 4083 0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 0
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 1986              		@ link register save eliminated.
 1987              	.LVL245:
4089:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1988              		.loc 1 4089 0
 1989 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1990 0004 012B     		cmp	r3, #1
 1991 0006 0CD0     		beq	.L116
4092:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1992              		.loc 1 4092 0 discriminator 2
 1993 0008 0223     		movs	r3, #2
 1994 000a 80F83D30 		strb	r3, [r0, #61]
4095:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1995              		.loc 1 4095 0 discriminator 2
 1996 000e 0368     		ldr	r3, [r0]
 1997 0010 5961     		str	r1, [r3, #20]
4098:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 1998              		.loc 1 4098 0 discriminator 2
 1999 0012 0123     		movs	r3, #1
 2000 0014 80F83D30 		strb	r3, [r0, #61]
4100:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 147


 2001              		.loc 1 4100 0 discriminator 2
 2002 0018 0023     		movs	r3, #0
 2003 001a 80F83C30 		strb	r3, [r0, #60]
4103:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 2004              		.loc 1 4103 0 discriminator 2
 2005 001e 1846     		mov	r0, r3
 2006              	.LVL246:
 2007 0020 7047     		bx	lr
 2008              	.LVL247:
 2009              	.L116:
4089:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 2010              		.loc 1 4089 0
 2011 0022 0220     		movs	r0, #2
 2012              	.LVL248:
4104:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2013              		.loc 1 4104 0
 2014 0024 7047     		bx	lr
 2015              		.cfi_endproc
 2016              	.LFE203:
 2018 0026 00BF     		.section	.text.HAL_TIM_ConfigTI1Input,"ax",%progbits
 2019              		.align	2
 2020              		.global	HAL_TIM_ConfigTI1Input
 2021              		.thumb
 2022              		.thumb_func
 2024              	HAL_TIM_ConfigTI1Input:
 2025              	.LFB206:
4381:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpcr2 = 0;
 2026              		.loc 1 4381 0
 2027              		.cfi_startproc
 2028              		@ args = 0, pretend = 0, frame = 0
 2029              		@ frame_needed = 0, uses_anonymous_args = 0
 2030              		@ link register save eliminated.
 2031              	.LVL249:
4389:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2032              		.loc 1 4389 0
 2033 0000 0268     		ldr	r2, [r0]
 2034 0002 5368     		ldr	r3, [r2, #4]
 2035              	.LVL250:
4392:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2036              		.loc 1 4392 0
 2037 0004 23F08003 		bic	r3, r3, #128
 2038              	.LVL251:
4395:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 2039              		.loc 1 4395 0
 2040 0008 1943     		orrs	r1, r1, r3
 2041              	.LVL252:
4398:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2042              		.loc 1 4398 0
 2043 000a 5160     		str	r1, [r2, #4]
4401:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2044              		.loc 1 4401 0
 2045 000c 0020     		movs	r0, #0
 2046              	.LVL253:
 2047 000e 7047     		bx	lr
 2048              		.cfi_endproc
 2049              	.LFE206:
 2051              		.section	.text.HAL_TIM_ReadCapturedValue,"ax",%progbits
ARM GAS  /tmp/ccrrJVNd.s 			page 148


 2052              		.align	2
 2053              		.global	HAL_TIM_ReadCapturedValue
 2054              		.thumb
 2055              		.thumb_func
 2057              	HAL_TIM_ReadCapturedValue:
 2058              	.LFB209:
4600:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpreg = 0;
 2059              		.loc 1 4600 0
 2060              		.cfi_startproc
 2061              		@ args = 0, pretend = 0, frame = 0
 2062              		@ frame_needed = 0, uses_anonymous_args = 0
 2063              		@ link register save eliminated.
 2064              	.LVL254:
4603:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 2065              		.loc 1 4603 0
 2066 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2067 0004 012B     		cmp	r3, #1
 2068 0006 1FD0     		beq	.L126
4603:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 2069              		.loc 1 4603 0 is_stmt 0 discriminator 2
 2070 0008 0123     		movs	r3, #1
 2071 000a 80F83C30 		strb	r3, [r0, #60]
4605:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2072              		.loc 1 4605 0 is_stmt 1 discriminator 2
 2073 000e 0C29     		cmp	r1, #12
 2074 0010 14D8     		bhi	.L127
 2075 0012 DFE801F0 		tbb	[pc, r1]
 2076              	.L122:
 2077 0016 07       		.byte	(.L121-.L122)/2
 2078 0017 13       		.byte	(.L127-.L122)/2
 2079 0018 13       		.byte	(.L127-.L122)/2
 2080 0019 13       		.byte	(.L127-.L122)/2
 2081 001a 0A       		.byte	(.L123-.L122)/2
 2082 001b 13       		.byte	(.L127-.L122)/2
 2083 001c 13       		.byte	(.L127-.L122)/2
 2084 001d 13       		.byte	(.L127-.L122)/2
 2085 001e 0D       		.byte	(.L124-.L122)/2
 2086 001f 13       		.byte	(.L127-.L122)/2
 2087 0020 13       		.byte	(.L127-.L122)/2
 2088 0021 13       		.byte	(.L127-.L122)/2
 2089 0022 10       		.byte	(.L125-.L122)/2
 2090 0023 00       		.p2align 1
 2091              	.L121:
4613:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 2092              		.loc 1 4613 0
 2093 0024 0368     		ldr	r3, [r0]
 2094 0026 5B6B     		ldr	r3, [r3, #52]
 2095              	.LVL255:
4615:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 2096              		.loc 1 4615 0
 2097 0028 09E0     		b	.L120
 2098              	.LVL256:
 2099              	.L123:
4623:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 2100              		.loc 1 4623 0
 2101 002a 0368     		ldr	r3, [r0]
 2102 002c 9B6B     		ldr	r3, [r3, #56]
ARM GAS  /tmp/ccrrJVNd.s 			page 149


 2103              	.LVL257:
4625:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 2104              		.loc 1 4625 0
 2105 002e 06E0     		b	.L120
 2106              	.LVL258:
 2107              	.L124:
4634:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 2108              		.loc 1 4634 0
 2109 0030 0368     		ldr	r3, [r0]
 2110 0032 DB6B     		ldr	r3, [r3, #60]
 2111              	.LVL259:
4636:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 2112              		.loc 1 4636 0
 2113 0034 03E0     		b	.L120
 2114              	.LVL260:
 2115              	.L125:
4645:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 2116              		.loc 1 4645 0
 2117 0036 0368     		ldr	r3, [r0]
 2118 0038 1B6C     		ldr	r3, [r3, #64]
 2119              	.LVL261:
4647:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 2120              		.loc 1 4647 0
 2121 003a 00E0     		b	.L120
 2122              	.LVL262:
 2123              	.L127:
4601:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 2124              		.loc 1 4601 0
 2125 003c 0023     		movs	r3, #0
 2126              	.LVL263:
 2127              	.L120:
4654:HALLIB/Src/stm32f7xx_hal_tim.c ****   return tmpreg;
 2128              		.loc 1 4654 0
 2129 003e 0022     		movs	r2, #0
 2130 0040 80F83C20 		strb	r2, [r0, #60]
4655:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 2131              		.loc 1 4655 0
 2132 0044 1846     		mov	r0, r3
 2133              	.LVL264:
 2134 0046 7047     		bx	lr
 2135              	.LVL265:
 2136              	.L126:
4603:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 2137              		.loc 1 4603 0
 2138 0048 0220     		movs	r0, #2
 2139              	.LVL266:
4656:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2140              		.loc 1 4656 0
 2141 004a 7047     		bx	lr
 2142              		.cfi_endproc
 2143              	.LFE209:
 2145              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 2146              		.align	2
 2147              		.weak	HAL_TIM_PeriodElapsedCallback
 2148              		.thumb
 2149              		.thumb_func
 2151              	HAL_TIM_PeriodElapsedCallback:
ARM GAS  /tmp/ccrrJVNd.s 			page 150


 2152              	.LFB210:
4690:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 2153              		.loc 1 4690 0
 2154              		.cfi_startproc
 2155              		@ args = 0, pretend = 0, frame = 0
 2156              		@ frame_needed = 0, uses_anonymous_args = 0
 2157              		@ link register save eliminated.
 2158              	.LVL267:
 2159 0000 7047     		bx	lr
 2160              		.cfi_endproc
 2161              	.LFE210:
 2163 0002 00BF     		.section	.text.TIM_DMAPeriodElapsedCplt,"ax",%progbits
 2164              		.align	2
 2165              		.thumb
 2166              		.thumb_func
 2168              	TIM_DMAPeriodElapsedCplt:
 2169              	.LFB225:
5397:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2170              		.loc 1 5397 0
 2171              		.cfi_startproc
 2172              		@ args = 0, pretend = 0, frame = 0
 2173              		@ frame_needed = 0, uses_anonymous_args = 0
 2174              	.LVL268:
5397:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2175              		.loc 1 5397 0
 2176 0000 08B5     		push	{r3, lr}
 2177              	.LCFI21:
 2178              		.cfi_def_cfa_offset 8
 2179              		.cfi_offset 3, -8
 2180              		.cfi_offset 14, -4
5398:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2181              		.loc 1 5398 0
 2182 0002 806B     		ldr	r0, [r0, #56]
 2183              	.LVL269:
5400:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 2184              		.loc 1 5400 0
 2185 0004 0123     		movs	r3, #1
 2186 0006 80F83D30 		strb	r3, [r0, #61]
5404:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2187              		.loc 1 5404 0
 2188 000a FFF7FEFF 		bl	HAL_TIM_PeriodElapsedCallback
 2189              	.LVL270:
 2190 000e 08BD     		pop	{r3, pc}
 2191              		.cfi_endproc
 2192              	.LFE225:
 2194              		.section	.text.HAL_TIM_OC_DelayElapsedCallback,"ax",%progbits
 2195              		.align	2
 2196              		.weak	HAL_TIM_OC_DelayElapsedCallback
 2197              		.thumb
 2198              		.thumb_func
 2200              	HAL_TIM_OC_DelayElapsedCallback:
 2201              	.LFB211:
4706:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 2202              		.loc 1 4706 0
 2203              		.cfi_startproc
 2204              		@ args = 0, pretend = 0, frame = 0
 2205              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccrrJVNd.s 			page 151


 2206              		@ link register save eliminated.
 2207              	.LVL271:
 2208 0000 7047     		bx	lr
 2209              		.cfi_endproc
 2210              	.LFE211:
 2212 0002 00BF     		.section	.text.HAL_TIM_IC_CaptureCallback,"ax",%progbits
 2213              		.align	2
 2214              		.weak	HAL_TIM_IC_CaptureCallback
 2215              		.thumb
 2216              		.thumb_func
 2218              	HAL_TIM_IC_CaptureCallback:
 2219              	.LFB212:
4721:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 2220              		.loc 1 4721 0
 2221              		.cfi_startproc
 2222              		@ args = 0, pretend = 0, frame = 0
 2223              		@ frame_needed = 0, uses_anonymous_args = 0
 2224              		@ link register save eliminated.
 2225              	.LVL272:
 2226 0000 7047     		bx	lr
 2227              		.cfi_endproc
 2228              	.LFE212:
 2230 0002 00BF     		.section	.text.TIM_DMACaptureCplt,"ax",%progbits
 2231              		.align	2
 2232              		.global	TIM_DMACaptureCplt
 2233              		.thumb
 2234              		.thumb_func
 2236              	TIM_DMACaptureCplt:
 2237              	.LFB224:
5360:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2238              		.loc 1 5360 0
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 0
 2241              		@ frame_needed = 0, uses_anonymous_args = 0
 2242              	.LVL273:
5360:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2243              		.loc 1 5360 0
 2244 0000 10B5     		push	{r4, lr}
 2245              	.LCFI22:
 2246              		.cfi_def_cfa_offset 8
 2247              		.cfi_offset 4, -8
 2248              		.cfi_offset 14, -4
5361:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 2249              		.loc 1 5361 0
 2250 0002 846B     		ldr	r4, [r0, #56]
 2251              	.LVL274:
5363:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 2252              		.loc 1 5363 0
 2253 0004 0123     		movs	r3, #1
 2254 0006 84F83D30 		strb	r3, [r4, #61]
5365:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2255              		.loc 1 5365 0
 2256 000a 636A     		ldr	r3, [r4, #36]
 2257 000c 9842     		cmp	r0, r3
 2258 000e 02D1     		bne	.L134
5367:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 2259              		.loc 1 5367 0
ARM GAS  /tmp/ccrrJVNd.s 			page 152


 2260 0010 0123     		movs	r3, #1
 2261 0012 2377     		strb	r3, [r4, #28]
 2262 0014 10E0     		b	.L135
 2263              	.L134:
5369:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2264              		.loc 1 5369 0
 2265 0016 A36A     		ldr	r3, [r4, #40]
 2266 0018 9842     		cmp	r0, r3
 2267 001a 02D1     		bne	.L136
5371:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 2268              		.loc 1 5371 0
 2269 001c 0223     		movs	r3, #2
 2270 001e 2377     		strb	r3, [r4, #28]
 2271 0020 0AE0     		b	.L135
 2272              	.L136:
5373:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2273              		.loc 1 5373 0
 2274 0022 E36A     		ldr	r3, [r4, #44]
 2275 0024 9842     		cmp	r0, r3
 2276 0026 02D1     		bne	.L137
5375:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 2277              		.loc 1 5375 0
 2278 0028 0423     		movs	r3, #4
 2279 002a 2377     		strb	r3, [r4, #28]
 2280 002c 04E0     		b	.L135
 2281              	.L137:
5377:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2282              		.loc 1 5377 0
 2283 002e 236B     		ldr	r3, [r4, #48]
 2284 0030 9842     		cmp	r0, r3
 2285 0032 01D1     		bne	.L135
5379:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 2286              		.loc 1 5379 0
 2287 0034 0823     		movs	r3, #8
 2288 0036 2377     		strb	r3, [r4, #28]
 2289              	.L135:
5384:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2290              		.loc 1 5384 0
 2291 0038 2046     		mov	r0, r4
 2292              	.LVL275:
 2293 003a FFF7FEFF 		bl	HAL_TIM_IC_CaptureCallback
 2294              	.LVL276:
5386:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2295              		.loc 1 5386 0
 2296 003e 0023     		movs	r3, #0
 2297 0040 2377     		strb	r3, [r4, #28]
 2298 0042 10BD     		pop	{r4, pc}
 2299              		.cfi_endproc
 2300              	.LFE224:
 2302              		.section	.text.HAL_TIM_PWM_PulseFinishedCallback,"ax",%progbits
 2303              		.align	2
 2304              		.weak	HAL_TIM_PWM_PulseFinishedCallback
 2305              		.thumb
 2306              		.thumb_func
 2308              	HAL_TIM_PWM_PulseFinishedCallback:
 2309              	.LFB213:
4737:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/ccrrJVNd.s 			page 153


 2310              		.loc 1 4737 0
 2311              		.cfi_startproc
 2312              		@ args = 0, pretend = 0, frame = 0
 2313              		@ frame_needed = 0, uses_anonymous_args = 0
 2314              		@ link register save eliminated.
 2315              	.LVL277:
 2316 0000 7047     		bx	lr
 2317              		.cfi_endproc
 2318              	.LFE213:
 2320 0002 00BF     		.section	.text.TIM_DMADelayPulseCplt,"ax",%progbits
 2321              		.align	2
 2322              		.global	TIM_DMADelayPulseCplt
 2323              		.thumb
 2324              		.thumb_func
 2326              	TIM_DMADelayPulseCplt:
 2327              	.LFB223:
5324:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2328              		.loc 1 5324 0
 2329              		.cfi_startproc
 2330              		@ args = 0, pretend = 0, frame = 0
 2331              		@ frame_needed = 0, uses_anonymous_args = 0
 2332              	.LVL278:
5324:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2333              		.loc 1 5324 0
 2334 0000 10B5     		push	{r4, lr}
 2335              	.LCFI23:
 2336              		.cfi_def_cfa_offset 8
 2337              		.cfi_offset 4, -8
 2338              		.cfi_offset 14, -4
5325:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 2339              		.loc 1 5325 0
 2340 0002 846B     		ldr	r4, [r0, #56]
 2341              	.LVL279:
5327:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 2342              		.loc 1 5327 0
 2343 0004 0123     		movs	r3, #1
 2344 0006 84F83D30 		strb	r3, [r4, #61]
5329:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2345              		.loc 1 5329 0
 2346 000a 636A     		ldr	r3, [r4, #36]
 2347 000c 9842     		cmp	r0, r3
 2348 000e 02D1     		bne	.L141
5331:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 2349              		.loc 1 5331 0
 2350 0010 0123     		movs	r3, #1
 2351 0012 2377     		strb	r3, [r4, #28]
 2352 0014 10E0     		b	.L142
 2353              	.L141:
5333:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2354              		.loc 1 5333 0
 2355 0016 A36A     		ldr	r3, [r4, #40]
 2356 0018 9842     		cmp	r0, r3
 2357 001a 02D1     		bne	.L143
5335:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 2358              		.loc 1 5335 0
 2359 001c 0223     		movs	r3, #2
 2360 001e 2377     		strb	r3, [r4, #28]
ARM GAS  /tmp/ccrrJVNd.s 			page 154


 2361 0020 0AE0     		b	.L142
 2362              	.L143:
5337:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2363              		.loc 1 5337 0
 2364 0022 E36A     		ldr	r3, [r4, #44]
 2365 0024 9842     		cmp	r0, r3
 2366 0026 02D1     		bne	.L144
5339:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 2367              		.loc 1 5339 0
 2368 0028 0423     		movs	r3, #4
 2369 002a 2377     		strb	r3, [r4, #28]
 2370 002c 04E0     		b	.L142
 2371              	.L144:
5341:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2372              		.loc 1 5341 0
 2373 002e 236B     		ldr	r3, [r4, #48]
 2374 0030 9842     		cmp	r0, r3
 2375 0032 01D1     		bne	.L142
5343:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 2376              		.loc 1 5343 0
 2377 0034 0823     		movs	r3, #8
 2378 0036 2377     		strb	r3, [r4, #28]
 2379              	.L142:
5349:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2380              		.loc 1 5349 0
 2381 0038 2046     		mov	r0, r4
 2382              	.LVL280:
 2383 003a FFF7FEFF 		bl	HAL_TIM_PWM_PulseFinishedCallback
 2384              	.LVL281:
5351:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 2385              		.loc 1 5351 0
 2386 003e 0023     		movs	r3, #0
 2387 0040 2377     		strb	r3, [r4, #28]
 2388 0042 10BD     		pop	{r4, pc}
 2389              		.cfi_endproc
 2390              	.LFE223:
 2392              		.section	.text.HAL_TIM_TriggerCallback,"ax",%progbits
 2393              		.align	2
 2394              		.weak	HAL_TIM_TriggerCallback
 2395              		.thumb
 2396              		.thumb_func
 2398              	HAL_TIM_TriggerCallback:
 2399              	.LFB214:
4753:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 2400              		.loc 1 4753 0
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 0
 2403              		@ frame_needed = 0, uses_anonymous_args = 0
 2404              		@ link register save eliminated.
 2405              	.LVL282:
 2406 0000 7047     		bx	lr
 2407              		.cfi_endproc
 2408              	.LFE214:
 2410 0002 00BF     		.section	.text.HAL_TIM_IRQHandler,"ax",%progbits
 2411              		.align	2
 2412              		.global	HAL_TIM_IRQHandler
 2413              		.thumb
ARM GAS  /tmp/ccrrJVNd.s 			page 155


 2414              		.thumb_func
 2416              	HAL_TIM_IRQHandler:
 2417              	.LFB194:
3014:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Capture compare 1 event */
 2418              		.loc 1 3014 0
 2419              		.cfi_startproc
 2420              		@ args = 0, pretend = 0, frame = 0
 2421              		@ frame_needed = 0, uses_anonymous_args = 0
 2422              	.LVL283:
3014:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Capture compare 1 event */
 2423              		.loc 1 3014 0
 2424 0000 10B5     		push	{r4, lr}
 2425              	.LCFI24:
 2426              		.cfi_def_cfa_offset 8
 2427              		.cfi_offset 4, -8
 2428              		.cfi_offset 14, -4
 2429 0002 0446     		mov	r4, r0
3016:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2430              		.loc 1 3016 0
 2431 0004 0368     		ldr	r3, [r0]
 2432 0006 1A69     		ldr	r2, [r3, #16]
 2433 0008 12F0020F 		tst	r2, #2
 2434 000c 17D0     		beq	.L148
3018:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 2435              		.loc 1 3018 0
 2436 000e DA68     		ldr	r2, [r3, #12]
 2437 0010 12F0020F 		tst	r2, #2
 2438 0014 13D0     		beq	.L148
3021:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 2439              		.loc 1 3021 0
 2440 0016 6FF00202 		mvn	r2, #2
 2441 001a 1A61     		str	r2, [r3, #16]
3022:HALLIB/Src/stm32f7xx_hal_tim.c ****         
 2442              		.loc 1 3022 0
 2443 001c 0123     		movs	r3, #1
 2444 001e 0377     		strb	r3, [r0, #28]
3025:HALLIB/Src/stm32f7xx_hal_tim.c ****         {
 2445              		.loc 1 3025 0
 2446 0020 0368     		ldr	r3, [r0]
 2447 0022 9B69     		ldr	r3, [r3, #24]
 2448 0024 13F0030F 		tst	r3, #3
 2449 0028 02D0     		beq	.L149
3030:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2450              		.loc 1 3030 0
 2451 002a FFF7FEFF 		bl	HAL_TIM_IC_CaptureCallback
 2452              	.LVL284:
 2453 002e 04E0     		b	.L150
 2454              	.LVL285:
 2455              	.L149:
3040:HALLIB/Src/stm32f7xx_hal_tim.c ****           HAL_TIM_PWM_PulseFinishedCallback(htim);
 2456              		.loc 1 3040 0
 2457 0030 FFF7FEFF 		bl	HAL_TIM_OC_DelayElapsedCallback
 2458              	.LVL286:
3041:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2459              		.loc 1 3041 0
 2460 0034 2046     		mov	r0, r4
 2461 0036 FFF7FEFF 		bl	HAL_TIM_PWM_PulseFinishedCallback
ARM GAS  /tmp/ccrrJVNd.s 			page 156


 2462              	.LVL287:
 2463              	.L150:
3044:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 2464              		.loc 1 3044 0
 2465 003a 0023     		movs	r3, #0
 2466 003c 2377     		strb	r3, [r4, #28]
 2467              	.L148:
3049:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2468              		.loc 1 3049 0
 2469 003e 2368     		ldr	r3, [r4]
 2470 0040 1A69     		ldr	r2, [r3, #16]
 2471 0042 12F0040F 		tst	r2, #4
 2472 0046 19D0     		beq	.L151
3051:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 2473              		.loc 1 3051 0
 2474 0048 DA68     		ldr	r2, [r3, #12]
 2475 004a 12F0040F 		tst	r2, #4
 2476 004e 15D0     		beq	.L151
3053:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 2477              		.loc 1 3053 0
 2478 0050 6FF00402 		mvn	r2, #4
 2479 0054 1A61     		str	r2, [r3, #16]
3054:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Input capture event */
 2480              		.loc 1 3054 0
 2481 0056 0223     		movs	r3, #2
 2482 0058 2377     		strb	r3, [r4, #28]
3056:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
 2483              		.loc 1 3056 0
 2484 005a 2368     		ldr	r3, [r4]
 2485 005c 9B69     		ldr	r3, [r3, #24]
 2486 005e 13F4407F 		tst	r3, #768
 2487 0062 03D0     		beq	.L152
3061:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2488              		.loc 1 3061 0
 2489 0064 2046     		mov	r0, r4
 2490 0066 FFF7FEFF 		bl	HAL_TIM_IC_CaptureCallback
 2491              	.LVL288:
 2492 006a 05E0     		b	.L153
 2493              	.L152:
3071:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
 2494              		.loc 1 3071 0
 2495 006c 2046     		mov	r0, r4
 2496 006e FFF7FEFF 		bl	HAL_TIM_OC_DelayElapsedCallback
 2497              	.LVL289:
3072:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2498              		.loc 1 3072 0
 2499 0072 2046     		mov	r0, r4
 2500 0074 FFF7FEFF 		bl	HAL_TIM_PWM_PulseFinishedCallback
 2501              	.LVL290:
 2502              	.L153:
3075:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 2503              		.loc 1 3075 0
 2504 0078 0023     		movs	r3, #0
 2505 007a 2377     		strb	r3, [r4, #28]
 2506              	.L151:
3079:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2507              		.loc 1 3079 0
ARM GAS  /tmp/ccrrJVNd.s 			page 157


 2508 007c 2368     		ldr	r3, [r4]
 2509 007e 1A69     		ldr	r2, [r3, #16]
 2510 0080 12F0080F 		tst	r2, #8
 2511 0084 19D0     		beq	.L154
3081:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 2512              		.loc 1 3081 0
 2513 0086 DA68     		ldr	r2, [r3, #12]
 2514 0088 12F0080F 		tst	r2, #8
 2515 008c 15D0     		beq	.L154
3083:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 2516              		.loc 1 3083 0
 2517 008e 6FF00802 		mvn	r2, #8
 2518 0092 1A61     		str	r2, [r3, #16]
3084:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Input capture event */
 2519              		.loc 1 3084 0
 2520 0094 0423     		movs	r3, #4
 2521 0096 2377     		strb	r3, [r4, #28]
3086:HALLIB/Src/stm32f7xx_hal_tim.c ****       {          
 2522              		.loc 1 3086 0
 2523 0098 2368     		ldr	r3, [r4]
 2524 009a DB69     		ldr	r3, [r3, #28]
 2525 009c 13F0030F 		tst	r3, #3
 2526 00a0 03D0     		beq	.L155
3091:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2527              		.loc 1 3091 0
 2528 00a2 2046     		mov	r0, r4
 2529 00a4 FFF7FEFF 		bl	HAL_TIM_IC_CaptureCallback
 2530              	.LVL291:
 2531 00a8 05E0     		b	.L156
 2532              	.L155:
3101:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
 2533              		.loc 1 3101 0
 2534 00aa 2046     		mov	r0, r4
 2535 00ac FFF7FEFF 		bl	HAL_TIM_OC_DelayElapsedCallback
 2536              	.LVL292:
3102:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2537              		.loc 1 3102 0
 2538 00b0 2046     		mov	r0, r4
 2539 00b2 FFF7FEFF 		bl	HAL_TIM_PWM_PulseFinishedCallback
 2540              	.LVL293:
 2541              	.L156:
3105:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 2542              		.loc 1 3105 0
 2543 00b6 0023     		movs	r3, #0
 2544 00b8 2377     		strb	r3, [r4, #28]
 2545              	.L154:
3109:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2546              		.loc 1 3109 0
 2547 00ba 2368     		ldr	r3, [r4]
 2548 00bc 1A69     		ldr	r2, [r3, #16]
 2549 00be 12F0100F 		tst	r2, #16
 2550 00c2 19D0     		beq	.L157
3111:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 2551              		.loc 1 3111 0
 2552 00c4 DA68     		ldr	r2, [r3, #12]
 2553 00c6 12F0100F 		tst	r2, #16
 2554 00ca 15D0     		beq	.L157
ARM GAS  /tmp/ccrrJVNd.s 			page 158


3113:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 2555              		.loc 1 3113 0
 2556 00cc 6FF01002 		mvn	r2, #16
 2557 00d0 1A61     		str	r2, [r3, #16]
3114:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Input capture event */
 2558              		.loc 1 3114 0
 2559 00d2 0823     		movs	r3, #8
 2560 00d4 2377     		strb	r3, [r4, #28]
3116:HALLIB/Src/stm32f7xx_hal_tim.c ****       {          
 2561              		.loc 1 3116 0
 2562 00d6 2368     		ldr	r3, [r4]
 2563 00d8 DB69     		ldr	r3, [r3, #28]
 2564 00da 13F4407F 		tst	r3, #768
 2565 00de 03D0     		beq	.L158
3121:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2566              		.loc 1 3121 0
 2567 00e0 2046     		mov	r0, r4
 2568 00e2 FFF7FEFF 		bl	HAL_TIM_IC_CaptureCallback
 2569              	.LVL294:
 2570 00e6 05E0     		b	.L159
 2571              	.L158:
3131:HALLIB/Src/stm32f7xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
 2572              		.loc 1 3131 0
 2573 00e8 2046     		mov	r0, r4
 2574 00ea FFF7FEFF 		bl	HAL_TIM_OC_DelayElapsedCallback
 2575              	.LVL295:
3132:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2576              		.loc 1 3132 0
 2577 00ee 2046     		mov	r0, r4
 2578 00f0 FFF7FEFF 		bl	HAL_TIM_PWM_PulseFinishedCallback
 2579              	.LVL296:
 2580              	.L159:
3135:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 2581              		.loc 1 3135 0
 2582 00f4 0023     		movs	r3, #0
 2583 00f6 2377     		strb	r3, [r4, #28]
 2584              	.L157:
3139:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2585              		.loc 1 3139 0
 2586 00f8 2368     		ldr	r3, [r4]
 2587 00fa 1A69     		ldr	r2, [r3, #16]
 2588 00fc 12F0010F 		tst	r2, #1
 2589 0100 09D0     		beq	.L160
3141:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 2590              		.loc 1 3141 0
 2591 0102 DA68     		ldr	r2, [r3, #12]
 2592 0104 12F0010F 		tst	r2, #1
 2593 0108 05D0     		beq	.L160
3143:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 2594              		.loc 1 3143 0
 2595 010a 6FF00102 		mvn	r2, #1
 2596 010e 1A61     		str	r2, [r3, #16]
3147:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2597              		.loc 1 3147 0
 2598 0110 2046     		mov	r0, r4
 2599 0112 FFF7FEFF 		bl	HAL_TIM_PeriodElapsedCallback
 2600              	.LVL297:
ARM GAS  /tmp/ccrrJVNd.s 			page 159


 2601              	.L160:
3152:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2602              		.loc 1 3152 0
 2603 0116 2368     		ldr	r3, [r4]
 2604 0118 1A69     		ldr	r2, [r3, #16]
 2605 011a 12F0800F 		tst	r2, #128
 2606 011e 09D0     		beq	.L161
3154:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 2607              		.loc 1 3154 0
 2608 0120 DA68     		ldr	r2, [r3, #12]
 2609 0122 12F0800F 		tst	r2, #128
 2610 0126 05D0     		beq	.L161
3156:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 2611              		.loc 1 3156 0
 2612 0128 6FF08002 		mvn	r2, #128
 2613 012c 1A61     		str	r2, [r3, #16]
3160:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2614              		.loc 1 3160 0
 2615 012e 2046     		mov	r0, r4
 2616 0130 FFF7FEFF 		bl	HAL_TIMEx_BreakCallback
 2617              	.LVL298:
 2618              	.L161:
3167:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2619              		.loc 1 3167 0
 2620 0134 2368     		ldr	r3, [r4]
 2621 0136 1A69     		ldr	r2, [r3, #16]
 2622 0138 12F4807F 		tst	r2, #256
 2623 013c 09D0     		beq	.L162
3169:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 2624              		.loc 1 3169 0
 2625 013e DA68     		ldr	r2, [r3, #12]
 2626 0140 12F0800F 		tst	r2, #128
 2627 0144 05D0     		beq	.L162
3171:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 2628              		.loc 1 3171 0
 2629 0146 6FF08002 		mvn	r2, #128
 2630 014a 1A61     		str	r2, [r3, #16]
3175:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2631              		.loc 1 3175 0
 2632 014c 2046     		mov	r0, r4
 2633 014e FFF7FEFF 		bl	HAL_TIMEx_BreakCallback
 2634              	.LVL299:
 2635              	.L162:
3181:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2636              		.loc 1 3181 0
 2637 0152 2368     		ldr	r3, [r4]
 2638 0154 1A69     		ldr	r2, [r3, #16]
 2639 0156 12F0400F 		tst	r2, #64
 2640 015a 09D0     		beq	.L163
3183:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 2641              		.loc 1 3183 0
 2642 015c DA68     		ldr	r2, [r3, #12]
 2643 015e 12F0400F 		tst	r2, #64
 2644 0162 05D0     		beq	.L163
3185:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 2645              		.loc 1 3185 0
 2646 0164 6FF04002 		mvn	r2, #64
ARM GAS  /tmp/ccrrJVNd.s 			page 160


 2647 0168 1A61     		str	r2, [r3, #16]
3189:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2648              		.loc 1 3189 0
 2649 016a 2046     		mov	r0, r4
 2650 016c FFF7FEFF 		bl	HAL_TIM_TriggerCallback
 2651              	.LVL300:
 2652              	.L163:
3194:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2653              		.loc 1 3194 0
 2654 0170 2368     		ldr	r3, [r4]
 2655 0172 1A69     		ldr	r2, [r3, #16]
 2656 0174 12F0200F 		tst	r2, #32
 2657 0178 09D0     		beq	.L147
3196:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 2658              		.loc 1 3196 0
 2659 017a DA68     		ldr	r2, [r3, #12]
 2660 017c 12F0200F 		tst	r2, #32
 2661 0180 05D0     		beq	.L147
3198:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 2662              		.loc 1 3198 0
 2663 0182 6FF02002 		mvn	r2, #32
 2664 0186 1A61     		str	r2, [r3, #16]
3202:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2665              		.loc 1 3202 0
 2666 0188 2046     		mov	r0, r4
 2667 018a FFF7FEFF 		bl	HAL_TIMEx_CommutationCallback
 2668              	.LVL301:
 2669              	.L147:
 2670 018e 10BD     		pop	{r4, pc}
 2671              		.cfi_endproc
 2672              	.LFE194:
 2674              		.section	.text.TIM_DMATriggerCplt,"ax",%progbits
 2675              		.align	2
 2676              		.thumb
 2677              		.thumb_func
 2679              	TIM_DMATriggerCplt:
 2680              	.LFB226:
5415:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;  
 2681              		.loc 1 5415 0
 2682              		.cfi_startproc
 2683              		@ args = 0, pretend = 0, frame = 0
 2684              		@ frame_needed = 0, uses_anonymous_args = 0
 2685              	.LVL302:
 2686 0000 08B5     		push	{r3, lr}
 2687              	.LCFI25:
 2688              		.cfi_def_cfa_offset 8
 2689              		.cfi_offset 3, -8
 2690              		.cfi_offset 14, -4
5416:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 2691              		.loc 1 5416 0
 2692 0002 806B     		ldr	r0, [r0, #56]
 2693              	.LVL303:
5418:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 2694              		.loc 1 5418 0
 2695 0004 0123     		movs	r3, #1
 2696 0006 80F83D30 		strb	r3, [r0, #61]
5422:HALLIB/Src/stm32f7xx_hal_tim.c ****  #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccrrJVNd.s 			page 161


 2697              		.loc 1 5422 0
 2698 000a FFF7FEFF 		bl	HAL_TIM_TriggerCallback
 2699              	.LVL304:
 2700 000e 08BD     		pop	{r3, pc}
 2701              		.cfi_endproc
 2702              	.LFE226:
 2704              		.section	.text.HAL_TIM_ErrorCallback,"ax",%progbits
 2705              		.align	2
 2706              		.weak	HAL_TIM_ErrorCallback
 2707              		.thumb
 2708              		.thumb_func
 2710              	HAL_TIM_ErrorCallback:
 2711              	.LFB215:
4769:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 2712              		.loc 1 4769 0
 2713              		.cfi_startproc
 2714              		@ args = 0, pretend = 0, frame = 0
 2715              		@ frame_needed = 0, uses_anonymous_args = 0
 2716              		@ link register save eliminated.
 2717              	.LVL305:
 2718 0000 7047     		bx	lr
 2719              		.cfi_endproc
 2720              	.LFE215:
 2722 0002 00BF     		.section	.text.TIM_DMAError,"ax",%progbits
 2723              		.align	2
 2724              		.global	TIM_DMAError
 2725              		.thumb
 2726              		.thumb_func
 2728              	TIM_DMAError:
 2729              	.LFB222:
5306:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2730              		.loc 1 5306 0
 2731              		.cfi_startproc
 2732              		@ args = 0, pretend = 0, frame = 0
 2733              		@ frame_needed = 0, uses_anonymous_args = 0
 2734              	.LVL306:
5306:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2735              		.loc 1 5306 0
 2736 0000 08B5     		push	{r3, lr}
 2737              	.LCFI26:
 2738              		.cfi_def_cfa_offset 8
 2739              		.cfi_offset 3, -8
 2740              		.cfi_offset 14, -4
5307:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 2741              		.loc 1 5307 0
 2742 0002 806B     		ldr	r0, [r0, #56]
 2743              	.LVL307:
5309:HALLIB/Src/stm32f7xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 2744              		.loc 1 5309 0
 2745 0004 0123     		movs	r3, #1
 2746 0006 80F83D30 		strb	r3, [r0, #61]
5313:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2747              		.loc 1 5313 0
 2748 000a FFF7FEFF 		bl	HAL_TIM_ErrorCallback
 2749              	.LVL308:
 2750 000e 08BD     		pop	{r3, pc}
 2751              		.cfi_endproc
ARM GAS  /tmp/ccrrJVNd.s 			page 162


 2752              	.LFE222:
 2754              		.section	.text.HAL_TIM_Base_GetState,"ax",%progbits
 2755              		.align	2
 2756              		.global	HAL_TIM_Base_GetState
 2757              		.thumb
 2758              		.thumb_func
 2760              	HAL_TIM_Base_GetState:
 2761              	.LFB216:
5236:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
 2762              		.loc 1 5236 0
 2763              		.cfi_startproc
 2764              		@ args = 0, pretend = 0, frame = 0
 2765              		@ frame_needed = 0, uses_anonymous_args = 0
 2766              		@ link register save eliminated.
 2767              	.LVL309:
5237:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 2768              		.loc 1 5237 0
 2769 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 2770              	.LVL310:
5238:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2771              		.loc 1 5238 0
 2772 0004 7047     		bx	lr
 2773              		.cfi_endproc
 2774              	.LFE216:
 2776 0006 00BF     		.section	.text.HAL_TIM_OC_GetState,"ax",%progbits
 2777              		.align	2
 2778              		.global	HAL_TIM_OC_GetState
 2779              		.thumb
 2780              		.thumb_func
 2782              	HAL_TIM_OC_GetState:
 2783              	.LFB217:
5247:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
 2784              		.loc 1 5247 0
 2785              		.cfi_startproc
 2786              		@ args = 0, pretend = 0, frame = 0
 2787              		@ frame_needed = 0, uses_anonymous_args = 0
 2788              		@ link register save eliminated.
 2789              	.LVL311:
5248:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 2790              		.loc 1 5248 0
 2791 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 2792              	.LVL312:
5249:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2793              		.loc 1 5249 0
 2794 0004 7047     		bx	lr
 2795              		.cfi_endproc
 2796              	.LFE217:
 2798 0006 00BF     		.section	.text.HAL_TIM_PWM_GetState,"ax",%progbits
 2799              		.align	2
 2800              		.global	HAL_TIM_PWM_GetState
 2801              		.thumb
 2802              		.thumb_func
 2804              	HAL_TIM_PWM_GetState:
 2805              	.LFB218:
5258:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
 2806              		.loc 1 5258 0
 2807              		.cfi_startproc
ARM GAS  /tmp/ccrrJVNd.s 			page 163


 2808              		@ args = 0, pretend = 0, frame = 0
 2809              		@ frame_needed = 0, uses_anonymous_args = 0
 2810              		@ link register save eliminated.
 2811              	.LVL313:
5259:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 2812              		.loc 1 5259 0
 2813 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 2814              	.LVL314:
5260:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2815              		.loc 1 5260 0
 2816 0004 7047     		bx	lr
 2817              		.cfi_endproc
 2818              	.LFE218:
 2820 0006 00BF     		.section	.text.HAL_TIM_IC_GetState,"ax",%progbits
 2821              		.align	2
 2822              		.global	HAL_TIM_IC_GetState
 2823              		.thumb
 2824              		.thumb_func
 2826              	HAL_TIM_IC_GetState:
 2827              	.LFB219:
5269:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
 2828              		.loc 1 5269 0
 2829              		.cfi_startproc
 2830              		@ args = 0, pretend = 0, frame = 0
 2831              		@ frame_needed = 0, uses_anonymous_args = 0
 2832              		@ link register save eliminated.
 2833              	.LVL315:
5270:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 2834              		.loc 1 5270 0
 2835 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 2836              	.LVL316:
5271:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2837              		.loc 1 5271 0
 2838 0004 7047     		bx	lr
 2839              		.cfi_endproc
 2840              	.LFE219:
 2842 0006 00BF     		.section	.text.HAL_TIM_OnePulse_GetState,"ax",%progbits
 2843              		.align	2
 2844              		.global	HAL_TIM_OnePulse_GetState
 2845              		.thumb
 2846              		.thumb_func
 2848              	HAL_TIM_OnePulse_GetState:
 2849              	.LFB220:
5280:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
 2850              		.loc 1 5280 0
 2851              		.cfi_startproc
 2852              		@ args = 0, pretend = 0, frame = 0
 2853              		@ frame_needed = 0, uses_anonymous_args = 0
 2854              		@ link register save eliminated.
 2855              	.LVL317:
5281:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 2856              		.loc 1 5281 0
 2857 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 2858              	.LVL318:
5282:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2859              		.loc 1 5282 0
 2860 0004 7047     		bx	lr
ARM GAS  /tmp/ccrrJVNd.s 			page 164


 2861              		.cfi_endproc
 2862              	.LFE220:
 2864 0006 00BF     		.section	.text.HAL_TIM_Encoder_GetState,"ax",%progbits
 2865              		.align	2
 2866              		.global	HAL_TIM_Encoder_GetState
 2867              		.thumb
 2868              		.thumb_func
 2870              	HAL_TIM_Encoder_GetState:
 2871              	.LFB221:
5291:HALLIB/Src/stm32f7xx_hal_tim.c ****   return htim->State;
 2872              		.loc 1 5291 0
 2873              		.cfi_startproc
 2874              		@ args = 0, pretend = 0, frame = 0
 2875              		@ frame_needed = 0, uses_anonymous_args = 0
 2876              		@ link register save eliminated.
 2877              	.LVL319:
5292:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 2878              		.loc 1 5292 0
 2879 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 2880              	.LVL320:
5293:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 2881              		.loc 1 5293 0
 2882 0004 7047     		bx	lr
 2883              		.cfi_endproc
 2884              	.LFE221:
 2886 0006 00BF     		.section	.text.TIM_Base_SetConfig,"ax",%progbits
 2887              		.align	2
 2888              		.global	TIM_Base_SetConfig
 2889              		.thumb
 2890              		.thumb_func
 2892              	TIM_Base_SetConfig:
 2893              	.LFB227:
5433:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpcr1 = 0;
 2894              		.loc 1 5433 0
 2895              		.cfi_startproc
 2896              		@ args = 0, pretend = 0, frame = 0
 2897              		@ frame_needed = 0, uses_anonymous_args = 0
 2898              		@ link register save eliminated.
 2899              	.LVL321:
 2900 0000 70B4     		push	{r4, r5, r6}
 2901              	.LCFI27:
 2902              		.cfi_def_cfa_offset 12
 2903              		.cfi_offset 4, -12
 2904              		.cfi_offset 5, -8
 2905              		.cfi_offset 6, -4
 2906              	.LVL322:
5435:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 2907              		.loc 1 5435 0
 2908 0002 0368     		ldr	r3, [r0]
 2909              	.LVL323:
5438:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2910              		.loc 1 5438 0
 2911 0004 454A     		ldr	r2, .L197
 2912 0006 9042     		cmp	r0, r2
 2913 0008 14BF     		ite	ne
 2914 000a 0022     		movne	r2, #0
 2915 000c 0122     		moveq	r2, #1
ARM GAS  /tmp/ccrrJVNd.s 			page 165


 2916 000e B0F1804F 		cmp	r0, #1073741824
 2917 0012 14BF     		ite	ne
 2918 0014 1446     		movne	r4, r2
 2919 0016 42F00104 		orreq	r4, r2, #1
 2920 001a BCB9     		cbnz	r4, .L185
5438:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2921              		.loc 1 5438 0 is_stmt 0 discriminator 2
 2922 001c 404D     		ldr	r5, .L197+4
 2923 001e A842     		cmp	r0, r5
 2924 0020 14BF     		ite	ne
 2925 0022 0025     		movne	r5, #0
 2926 0024 0125     		moveq	r5, #1
 2927 0026 3F4E     		ldr	r6, .L197+8
 2928 0028 B042     		cmp	r0, r6
 2929 002a 11D0     		beq	.L186
 2930 002c 85B9     		cbnz	r5, .L186
5438:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2931              		.loc 1 5438 0 discriminator 4
 2932 002e 05F18045 		add	r5, r5, #1073741824
 2933 0032 05F58235 		add	r5, r5, #66560
 2934 0036 A842     		cmp	r0, r5
 2935 0038 14BF     		ite	ne
 2936 003a 0025     		movne	r5, #0
 2937 003c 0125     		moveq	r5, #1
 2938 003e 06F50066 		add	r6, r6, #2048
 2939 0042 B042     		cmp	r0, r6
 2940 0044 00D0     		beq	.L194
 2941 0046 2DB1     		cbz	r5, .L187
 2942              	.L194:
5438:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2943              		.loc 1 5438 0
 2944 0048 0125     		movs	r5, #1
 2945 004a 04E0     		b	.L178
 2946              	.L185:
 2947 004c 0125     		movs	r5, #1
 2948 004e 02E0     		b	.L178
 2949              	.L186:
 2950 0050 0125     		movs	r5, #1
 2951 0052 00E0     		b	.L178
 2952              	.L187:
 2953 0054 0025     		movs	r5, #0
 2954              	.L178:
5438:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2955              		.loc 1 5438 0 discriminator 8
 2956 0056 1DB1     		cbz	r5, .L180
5441:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr1 |= Structure->CounterMode;
 2957              		.loc 1 5441 0 is_stmt 1
 2958 0058 23F07003 		bic	r3, r3, #112
 2959              	.LVL324:
5442:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 2960              		.loc 1 5442 0
 2961 005c 4D68     		ldr	r5, [r1, #4]
 2962 005e 2B43     		orrs	r3, r3, r5
 2963              	.LVL325:
 2964              	.L180:
5445:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2965              		.loc 1 5445 0
ARM GAS  /tmp/ccrrJVNd.s 			page 166


 2966 0060 002C     		cmp	r4, #0
 2967 0062 35D1     		bne	.L188
5445:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2968              		.loc 1 5445 0 is_stmt 0 discriminator 2
 2969 0064 2E4C     		ldr	r4, .L197+4
 2970 0066 A042     		cmp	r0, r4
 2971 0068 14BF     		ite	ne
 2972 006a 0024     		movne	r4, #0
 2973 006c 0124     		moveq	r4, #1
 2974 006e 2D4D     		ldr	r5, .L197+8
 2975 0070 A842     		cmp	r0, r5
 2976 0072 2FD0     		beq	.L189
 2977 0074 74BB     		cbnz	r4, .L189
5445:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2978              		.loc 1 5445 0 discriminator 4
 2979 0076 04F18044 		add	r4, r4, #1073741824
 2980 007a 04F58234 		add	r4, r4, #66560
 2981 007e A042     		cmp	r0, r4
 2982 0080 14BF     		ite	ne
 2983 0082 0024     		movne	r4, #0
 2984 0084 0124     		moveq	r4, #1
 2985 0086 05F50065 		add	r5, r5, #2048
 2986 008a A842     		cmp	r0, r5
 2987 008c 24D0     		beq	.L190
 2988 008e 1CBB     		cbnz	r4, .L190
5445:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2989              		.loc 1 5445 0 discriminator 6
 2990 0090 254C     		ldr	r4, .L197+12
 2991 0092 A042     		cmp	r0, r4
 2992 0094 14BF     		ite	ne
 2993 0096 0024     		movne	r4, #0
 2994 0098 0124     		moveq	r4, #1
 2995 009a 05F59A35 		add	r5, r5, #78848
 2996 009e A842     		cmp	r0, r5
 2997 00a0 1CD0     		beq	.L191
 2998 00a2 DCB9     		cbnz	r4, .L191
5445:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 2999              		.loc 1 5445 0 discriminator 8
 3000 00a4 214C     		ldr	r4, .L197+16
 3001 00a6 A042     		cmp	r0, r4
 3002 00a8 14BF     		ite	ne
 3003 00aa 0024     		movne	r4, #0
 3004 00ac 0124     		moveq	r4, #1
 3005 00ae 05F50065 		add	r5, r5, #2048
 3006 00b2 A842     		cmp	r0, r5
 3007 00b4 14D0     		beq	.L192
 3008 00b6 9CB9     		cbnz	r4, .L192
5445:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3009              		.loc 1 5445 0 discriminator 10
 3010 00b8 1D4C     		ldr	r4, .L197+20
 3011 00ba A042     		cmp	r0, r4
 3012 00bc 14BF     		ite	ne
 3013 00be 0024     		movne	r4, #0
 3014 00c0 0124     		moveq	r4, #1
 3015 00c2 A5F59635 		sub	r5, r5, #76800
 3016 00c6 A842     		cmp	r0, r5
 3017 00c8 00D0     		beq	.L195
ARM GAS  /tmp/ccrrJVNd.s 			page 167


 3018 00ca 5CB1     		cbz	r4, .L193
 3019              	.L195:
5445:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3020              		.loc 1 5445 0
 3021 00cc 0124     		movs	r4, #1
 3022 00ce 0AE0     		b	.L181
 3023              	.L188:
 3024 00d0 0124     		movs	r4, #1
 3025 00d2 08E0     		b	.L181
 3026              	.L189:
 3027 00d4 0124     		movs	r4, #1
 3028 00d6 06E0     		b	.L181
 3029              	.L190:
 3030 00d8 0124     		movs	r4, #1
 3031 00da 04E0     		b	.L181
 3032              	.L191:
 3033 00dc 0124     		movs	r4, #1
 3034 00de 02E0     		b	.L181
 3035              	.L192:
 3036 00e0 0124     		movs	r4, #1
 3037 00e2 00E0     		b	.L181
 3038              	.L193:
 3039 00e4 0024     		movs	r4, #0
 3040              	.L181:
5445:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3041              		.loc 1 5445 0 discriminator 14
 3042 00e6 1CB1     		cbz	r4, .L183
5448:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpcr1 |= (uint32_t)Structure->ClockDivision;
 3043              		.loc 1 5448 0 is_stmt 1
 3044 00e8 23F44073 		bic	r3, r3, #768
 3045              	.LVL326:
5449:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3046              		.loc 1 5449 0
 3047 00ec CC68     		ldr	r4, [r1, #12]
 3048 00ee 2343     		orrs	r3, r3, r4
 3049              	.LVL327:
 3050              	.L183:
5453:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3051              		.loc 1 5453 0
 3052 00f0 23F08003 		bic	r3, r3, #128
 3053              	.LVL328:
 3054 00f4 4C69     		ldr	r4, [r1, #20]
 3055 00f6 2343     		orrs	r3, r3, r4
 3056              	.LVL329:
5455:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3057              		.loc 1 5455 0
 3058 00f8 0360     		str	r3, [r0]
5458:HALLIB/Src/stm32f7xx_hal_tim.c ****  
 3059              		.loc 1 5458 0
 3060 00fa 8B68     		ldr	r3, [r1, #8]
 3061              	.LVL330:
 3062 00fc C362     		str	r3, [r0, #44]
 3063              	.LVL331:
5461:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3064              		.loc 1 5461 0
 3065 00fe 0B68     		ldr	r3, [r1]
 3066 0100 8362     		str	r3, [r0, #40]
ARM GAS  /tmp/ccrrJVNd.s 			page 168


5463:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3067              		.loc 1 5463 0
 3068 0102 0C4B     		ldr	r3, .L197+24
 3069 0104 9842     		cmp	r0, r3
 3070 0106 08BF     		it	eq
 3071 0108 42F00102 		orreq	r2, r2, #1
 3072 010c 0AB1     		cbz	r2, .L184
5466:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3073              		.loc 1 5466 0
 3074 010e 0B69     		ldr	r3, [r1, #16]
 3075 0110 0363     		str	r3, [r0, #48]
 3076              	.L184:
5471:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 3077              		.loc 1 5471 0
 3078 0112 0123     		movs	r3, #1
 3079 0114 4361     		str	r3, [r0, #20]
5472:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3080              		.loc 1 5472 0
 3081 0116 70BC     		pop	{r4, r5, r6}
 3082              	.LCFI28:
 3083              		.cfi_restore 6
 3084              		.cfi_restore 5
 3085              		.cfi_restore 4
 3086              		.cfi_def_cfa_offset 0
 3087 0118 7047     		bx	lr
 3088              	.L198:
 3089 011a 00BF     		.align	2
 3090              	.L197:
 3091 011c 00000140 		.word	1073807360
 3092 0120 00080040 		.word	1073743872
 3093 0124 00040040 		.word	1073742848
 3094 0128 00440140 		.word	1073824768
 3095 012c 00180040 		.word	1073747968
 3096 0130 00200040 		.word	1073750016
 3097 0134 00040140 		.word	1073808384
 3098              		.cfi_endproc
 3099              	.LFE227:
 3101              		.section	.text.HAL_TIM_Base_Init,"ax",%progbits
 3102              		.align	2
 3103              		.global	HAL_TIM_Base_Init
 3104              		.thumb
 3105              		.thumb_func
 3107              	HAL_TIM_Base_Init:
 3108              	.LFB136:
 258:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
 3109              		.loc 1 258 0
 3110              		.cfi_startproc
 3111              		@ args = 0, pretend = 0, frame = 0
 3112              		@ frame_needed = 0, uses_anonymous_args = 0
 3113              	.LVL332:
 260:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3114              		.loc 1 260 0
 3115 0000 B8B1     		cbz	r0, .L202
 258:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
 3116              		.loc 1 258 0
 3117 0002 10B5     		push	{r4, lr}
 3118              	.LCFI29:
ARM GAS  /tmp/ccrrJVNd.s 			page 169


 3119              		.cfi_def_cfa_offset 8
 3120              		.cfi_offset 4, -8
 3121              		.cfi_offset 14, -4
 3122 0004 0446     		mov	r4, r0
 271:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3123              		.loc 1 271 0
 3124 0006 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 3125 000a 13F0FF0F 		tst	r3, #255
 3126 000e 04D1     		bne	.L201
 274:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3127              		.loc 1 274 0
 3128 0010 0023     		movs	r3, #0
 3129 0012 80F83C30 		strb	r3, [r0, #60]
 288:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3130              		.loc 1 288 0
 3131 0016 FFF7FEFF 		bl	HAL_TIM_Base_MspInit
 3132              	.LVL333:
 3133              	.L201:
 292:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3134              		.loc 1 292 0
 3135 001a 0223     		movs	r3, #2
 3136 001c 84F83D30 		strb	r3, [r4, #61]
 295:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3137              		.loc 1 295 0
 3138 0020 211D     		adds	r1, r4, #4
 3139 0022 2068     		ldr	r0, [r4]
 3140 0024 FFF7FEFF 		bl	TIM_Base_SetConfig
 3141              	.LVL334:
 298:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3142              		.loc 1 298 0
 3143 0028 0123     		movs	r3, #1
 3144 002a 84F83D30 		strb	r3, [r4, #61]
 300:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 3145              		.loc 1 300 0
 3146 002e 0020     		movs	r0, #0
 3147 0030 10BD     		pop	{r4, pc}
 3148              	.LVL335:
 3149              	.L202:
 3150              	.LCFI30:
 3151              		.cfi_def_cfa_offset 0
 3152              		.cfi_restore 4
 3153              		.cfi_restore 14
 262:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3154              		.loc 1 262 0
 3155 0032 0120     		movs	r0, #1
 3156              	.LVL336:
 3157 0034 7047     		bx	lr
 3158              		.cfi_endproc
 3159              	.LFE136:
 3161 0036 00BF     		.section	.text.HAL_TIM_OC_Init,"ax",%progbits
 3162              		.align	2
 3163              		.global	HAL_TIM_OC_Init
 3164              		.thumb
 3165              		.thumb_func
 3167              	HAL_TIM_OC_Init:
 3168              	.LFB146:
 565:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
ARM GAS  /tmp/ccrrJVNd.s 			page 170


 3169              		.loc 1 565 0
 3170              		.cfi_startproc
 3171              		@ args = 0, pretend = 0, frame = 0
 3172              		@ frame_needed = 0, uses_anonymous_args = 0
 3173              	.LVL337:
 567:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3174              		.loc 1 567 0
 3175 0000 B8B1     		cbz	r0, .L208
 565:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
 3176              		.loc 1 565 0
 3177 0002 10B5     		push	{r4, lr}
 3178              	.LCFI31:
 3179              		.cfi_def_cfa_offset 8
 3180              		.cfi_offset 4, -8
 3181              		.cfi_offset 14, -4
 3182 0004 0446     		mov	r4, r0
 578:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3183              		.loc 1 578 0
 3184 0006 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 3185 000a 13F0FF0F 		tst	r3, #255
 3186 000e 04D1     		bne	.L207
 581:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3187              		.loc 1 581 0
 3188 0010 0023     		movs	r3, #0
 3189 0012 80F83C30 		strb	r3, [r0, #60]
 595:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3190              		.loc 1 595 0
 3191 0016 FFF7FEFF 		bl	HAL_TIM_OC_MspInit
 3192              	.LVL338:
 3193              	.L207:
 599:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3194              		.loc 1 599 0
 3195 001a 0223     		movs	r3, #2
 3196 001c 84F83D30 		strb	r3, [r4, #61]
 602:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3197              		.loc 1 602 0
 3198 0020 211D     		adds	r1, r4, #4
 3199 0022 2068     		ldr	r0, [r4]
 3200 0024 FFF7FEFF 		bl	TIM_Base_SetConfig
 3201              	.LVL339:
 605:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3202              		.loc 1 605 0
 3203 0028 0123     		movs	r3, #1
 3204 002a 84F83D30 		strb	r3, [r4, #61]
 607:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 3205              		.loc 1 607 0
 3206 002e 0020     		movs	r0, #0
 3207 0030 10BD     		pop	{r4, pc}
 3208              	.LVL340:
 3209              	.L208:
 3210              	.LCFI32:
 3211              		.cfi_def_cfa_offset 0
 3212              		.cfi_restore 4
 3213              		.cfi_restore 14
 569:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3214              		.loc 1 569 0
 3215 0032 0120     		movs	r0, #1
ARM GAS  /tmp/ccrrJVNd.s 			page 171


 3216              	.LVL341:
 3217 0034 7047     		bx	lr
 3218              		.cfi_endproc
 3219              	.LFE146:
 3221 0036 00BF     		.section	.text.HAL_TIM_PWM_Init,"ax",%progbits
 3222              		.align	2
 3223              		.global	HAL_TIM_PWM_Init
 3224              		.thumb
 3225              		.thumb_func
 3227              	HAL_TIM_PWM_Init:
 3228              	.LFB156:
1102:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
 3229              		.loc 1 1102 0
 3230              		.cfi_startproc
 3231              		@ args = 0, pretend = 0, frame = 0
 3232              		@ frame_needed = 0, uses_anonymous_args = 0
 3233              	.LVL342:
1104:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3234              		.loc 1 1104 0
 3235 0000 B8B1     		cbz	r0, .L214
1102:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
 3236              		.loc 1 1102 0
 3237 0002 10B5     		push	{r4, lr}
 3238              	.LCFI33:
 3239              		.cfi_def_cfa_offset 8
 3240              		.cfi_offset 4, -8
 3241              		.cfi_offset 14, -4
 3242 0004 0446     		mov	r4, r0
1115:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3243              		.loc 1 1115 0
 3244 0006 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 3245 000a 13F0FF0F 		tst	r3, #255
 3246 000e 04D1     		bne	.L213
1118:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3247              		.loc 1 1118 0
 3248 0010 0023     		movs	r3, #0
 3249 0012 80F83C30 		strb	r3, [r0, #60]
1132:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3250              		.loc 1 1132 0
 3251 0016 FFF7FEFF 		bl	HAL_TIM_PWM_MspInit
 3252              	.LVL343:
 3253              	.L213:
1136:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3254              		.loc 1 1136 0
 3255 001a 0223     		movs	r3, #2
 3256 001c 84F83D30 		strb	r3, [r4, #61]
1139:HALLIB/Src/stm32f7xx_hal_tim.c ****    
 3257              		.loc 1 1139 0
 3258 0020 211D     		adds	r1, r4, #4
 3259 0022 2068     		ldr	r0, [r4]
 3260 0024 FFF7FEFF 		bl	TIM_Base_SetConfig
 3261              	.LVL344:
1142:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3262              		.loc 1 1142 0
 3263 0028 0123     		movs	r3, #1
 3264 002a 84F83D30 		strb	r3, [r4, #61]
1144:HALLIB/Src/stm32f7xx_hal_tim.c **** }  
ARM GAS  /tmp/ccrrJVNd.s 			page 172


 3265              		.loc 1 1144 0
 3266 002e 0020     		movs	r0, #0
 3267 0030 10BD     		pop	{r4, pc}
 3268              	.LVL345:
 3269              	.L214:
 3270              	.LCFI34:
 3271              		.cfi_def_cfa_offset 0
 3272              		.cfi_restore 4
 3273              		.cfi_restore 14
1106:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3274              		.loc 1 1106 0
 3275 0032 0120     		movs	r0, #1
 3276              	.LVL346:
 3277 0034 7047     		bx	lr
 3278              		.cfi_endproc
 3279              	.LFE156:
 3281 0036 00BF     		.section	.text.HAL_TIM_IC_Init,"ax",%progbits
 3282              		.align	2
 3283              		.global	HAL_TIM_IC_Init
 3284              		.thumb
 3285              		.thumb_func
 3287              	HAL_TIM_IC_Init:
 3288              	.LFB166:
1642:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
 3289              		.loc 1 1642 0
 3290              		.cfi_startproc
 3291              		@ args = 0, pretend = 0, frame = 0
 3292              		@ frame_needed = 0, uses_anonymous_args = 0
 3293              	.LVL347:
1644:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3294              		.loc 1 1644 0
 3295 0000 B8B1     		cbz	r0, .L220
1642:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
 3296              		.loc 1 1642 0
 3297 0002 10B5     		push	{r4, lr}
 3298              	.LCFI35:
 3299              		.cfi_def_cfa_offset 8
 3300              		.cfi_offset 4, -8
 3301              		.cfi_offset 14, -4
 3302 0004 0446     		mov	r4, r0
1655:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3303              		.loc 1 1655 0
 3304 0006 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 3305 000a 13F0FF0F 		tst	r3, #255
 3306 000e 04D1     		bne	.L219
1658:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3307              		.loc 1 1658 0
 3308 0010 0023     		movs	r3, #0
 3309 0012 80F83C30 		strb	r3, [r0, #60]
1672:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3310              		.loc 1 1672 0
 3311 0016 FFF7FEFF 		bl	HAL_TIM_IC_MspInit
 3312              	.LVL348:
 3313              	.L219:
1677:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3314              		.loc 1 1677 0
 3315 001a 0223     		movs	r3, #2
ARM GAS  /tmp/ccrrJVNd.s 			page 173


 3316 001c 84F83D30 		strb	r3, [r4, #61]
1680:HALLIB/Src/stm32f7xx_hal_tim.c ****    
 3317              		.loc 1 1680 0
 3318 0020 211D     		adds	r1, r4, #4
 3319 0022 2068     		ldr	r0, [r4]
 3320 0024 FFF7FEFF 		bl	TIM_Base_SetConfig
 3321              	.LVL349:
1683:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3322              		.loc 1 1683 0
 3323 0028 0123     		movs	r3, #1
 3324 002a 84F83D30 		strb	r3, [r4, #61]
1685:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 3325              		.loc 1 1685 0
 3326 002e 0020     		movs	r0, #0
 3327 0030 10BD     		pop	{r4, pc}
 3328              	.LVL350:
 3329              	.L220:
 3330              	.LCFI36:
 3331              		.cfi_def_cfa_offset 0
 3332              		.cfi_restore 4
 3333              		.cfi_restore 14
1646:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3334              		.loc 1 1646 0
 3335 0032 0120     		movs	r0, #1
 3336              	.LVL351:
 3337 0034 7047     		bx	lr
 3338              		.cfi_endproc
 3339              	.LFE166:
 3341 0036 00BF     		.section	.text.HAL_TIM_OnePulse_Init,"ax",%progbits
 3342              		.align	2
 3343              		.global	HAL_TIM_OnePulse_Init
 3344              		.thumb
 3345              		.thumb_func
 3347              	HAL_TIM_OnePulse_Init:
 3348              	.LFB176:
2149:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
 3349              		.loc 1 2149 0
 3350              		.cfi_startproc
 3351              		@ args = 0, pretend = 0, frame = 0
 3352              		@ frame_needed = 0, uses_anonymous_args = 0
 3353              	.LVL352:
2151:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3354              		.loc 1 2151 0
 3355 0000 08B3     		cbz	r0, .L226
2149:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the TIM handle allocation */
 3356              		.loc 1 2149 0
 3357 0002 38B5     		push	{r3, r4, r5, lr}
 3358              	.LCFI37:
 3359              		.cfi_def_cfa_offset 16
 3360              		.cfi_offset 3, -16
 3361              		.cfi_offset 4, -12
 3362              		.cfi_offset 5, -8
 3363              		.cfi_offset 14, -4
 3364 0004 0446     		mov	r4, r0
 3365 0006 0D46     		mov	r5, r1
2163:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3366              		.loc 1 2163 0
ARM GAS  /tmp/ccrrJVNd.s 			page 174


 3367 0008 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 3368 000c 13F0FF0F 		tst	r3, #255
 3369 0010 04D1     		bne	.L225
2166:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3370              		.loc 1 2166 0
 3371 0012 0023     		movs	r3, #0
 3372 0014 80F83C30 		strb	r3, [r0, #60]
2180:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3373              		.loc 1 2180 0
 3374 0018 FFF7FEFF 		bl	HAL_TIM_OnePulse_MspInit
 3375              	.LVL353:
 3376              	.L225:
2185:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3377              		.loc 1 2185 0
 3378 001c 0223     		movs	r3, #2
 3379 001e 84F83D30 		strb	r3, [r4, #61]
2188:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3380              		.loc 1 2188 0
 3381 0022 211D     		adds	r1, r4, #4
 3382 0024 2068     		ldr	r0, [r4]
 3383 0026 FFF7FEFF 		bl	TIM_Base_SetConfig
 3384              	.LVL354:
2191:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3385              		.loc 1 2191 0
 3386 002a 2268     		ldr	r2, [r4]
 3387 002c 1368     		ldr	r3, [r2]
 3388 002e 23F00803 		bic	r3, r3, #8
 3389 0032 1360     		str	r3, [r2]
2194:HALLIB/Src/stm32f7xx_hal_tim.c ****    
 3390              		.loc 1 2194 0
 3391 0034 2368     		ldr	r3, [r4]
 3392 0036 1968     		ldr	r1, [r3]
 3393 0038 2943     		orrs	r1, r1, r5
 3394 003a 1960     		str	r1, [r3]
2197:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3395              		.loc 1 2197 0
 3396 003c 0123     		movs	r3, #1
 3397 003e 84F83D30 		strb	r3, [r4, #61]
2199:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 3398              		.loc 1 2199 0
 3399 0042 0020     		movs	r0, #0
 3400 0044 38BD     		pop	{r3, r4, r5, pc}
 3401              	.LVL355:
 3402              	.L226:
 3403              	.LCFI38:
 3404              		.cfi_def_cfa_offset 0
 3405              		.cfi_restore 3
 3406              		.cfi_restore 4
 3407              		.cfi_restore 5
 3408              		.cfi_restore 14
2153:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3409              		.loc 1 2153 0
 3410 0046 0120     		movs	r0, #1
 3411              	.LVL356:
 3412 0048 7047     		bx	lr
 3413              		.cfi_endproc
 3414              	.LFE176:
ARM GAS  /tmp/ccrrJVNd.s 			page 175


 3416 004a 00BF     		.section	.text.HAL_TIM_Encoder_Init,"ax",%progbits
 3417              		.align	2
 3418              		.global	HAL_TIM_Encoder_Init
 3419              		.thumb
 3420              		.thumb_func
 3422              	HAL_TIM_Encoder_Init:
 3423              	.LFB184:
2463:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr = 0;
 3424              		.loc 1 2463 0
 3425              		.cfi_startproc
 3426              		@ args = 0, pretend = 0, frame = 0
 3427              		@ frame_needed = 0, uses_anonymous_args = 0
 3428              	.LVL357:
2469:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3429              		.loc 1 2469 0
 3430 0000 0028     		cmp	r0, #0
 3431 0002 46D0     		beq	.L232
2463:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr = 0;
 3432              		.loc 1 2463 0
 3433 0004 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3434              	.LCFI39:
 3435              		.cfi_def_cfa_offset 24
 3436              		.cfi_offset 3, -24
 3437              		.cfi_offset 4, -20
 3438              		.cfi_offset 5, -16
 3439              		.cfi_offset 6, -12
 3440              		.cfi_offset 7, -8
 3441              		.cfi_offset 14, -4
 3442 0006 0546     		mov	r5, r0
 3443 0008 0C46     		mov	r4, r1
2489:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3444              		.loc 1 2489 0
 3445 000a 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 3446 000e 13F0FF0F 		tst	r3, #255
 3447 0012 04D1     		bne	.L231
2492:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3448              		.loc 1 2492 0
 3449 0014 0023     		movs	r3, #0
 3450 0016 80F83C30 		strb	r3, [r0, #60]
2506:HALLIB/Src/stm32f7xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3451              		.loc 1 2506 0
 3452 001a FFF7FEFF 		bl	HAL_TIM_Encoder_MspInit
 3453              	.LVL358:
 3454              	.L231:
2511:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3455              		.loc 1 2511 0
 3456 001e 0223     		movs	r3, #2
 3457 0020 85F83D30 		strb	r3, [r5, #61]
2514:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3458              		.loc 1 2514 0
 3459 0024 2946     		mov	r1, r5
 3460 0026 51F8042B 		ldr	r2, [r1], #4
 3461 002a 9068     		ldr	r0, [r2, #8]
 3462 002c 1A4B     		ldr	r3, .L235
 3463 002e 0340     		ands	r3, r3, r0
 3464 0030 9360     		str	r3, [r2, #8]
2517:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 176


 3465              		.loc 1 2517 0
 3466 0032 2868     		ldr	r0, [r5]
 3467 0034 FFF7FEFF 		bl	TIM_Base_SetConfig
 3468              	.LVL359:
2520:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3469              		.loc 1 2520 0
 3470 0038 2868     		ldr	r0, [r5]
 3471 003a 8668     		ldr	r6, [r0, #8]
 3472              	.LVL360:
2523:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3473              		.loc 1 2523 0
 3474 003c 8369     		ldr	r3, [r0, #24]
 3475              	.LVL361:
2526:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3476              		.loc 1 2526 0
 3477 003e 076A     		ldr	r7, [r0, #32]
 3478              	.LVL362:
2529:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3479              		.loc 1 2529 0
 3480 0040 2268     		ldr	r2, [r4]
 3481 0042 1643     		orrs	r6, r6, r2
 3482              	.LVL363:
2532:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 3483              		.loc 1 2532 0
 3484 0044 1549     		ldr	r1, .L235+4
 3485 0046 1940     		ands	r1, r1, r3
 3486              	.LVL364:
2533:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3487              		.loc 1 2533 0
 3488 0048 A368     		ldr	r3, [r4, #8]
 3489 004a A269     		ldr	r2, [r4, #24]
 3490 004c 43EA0223 		orr	r3, r3, r2, lsl #8
 3491 0050 41EA0302 		orr	r2, r1, r3
 3492              	.LVL365:
2537:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 3493              		.loc 1 2537 0
 3494 0054 124B     		ldr	r3, .L235+8
 3495 0056 1340     		ands	r3, r3, r2
 3496              	.LVL366:
2538:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 3497              		.loc 1 2538 0
 3498 0058 E168     		ldr	r1, [r4, #12]
 3499 005a E269     		ldr	r2, [r4, #28]
 3500 005c 41EA0221 		orr	r1, r1, r2, lsl #8
 3501 0060 1943     		orrs	r1, r1, r3
 3502              	.LVL367:
2539:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3503              		.loc 1 2539 0
 3504 0062 236A     		ldr	r3, [r4, #32]
 3505 0064 1A03     		lsls	r2, r3, #12
 3506 0066 2369     		ldr	r3, [r4, #16]
 3507 0068 42EA0313 		orr	r3, r2, r3, lsl #4
 3508 006c 0B43     		orrs	r3, r3, r1
 3509              	.LVL368:
2543:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 3510              		.loc 1 2543 0
 3511 006e 27F0AA0E 		bic	lr, r7, #170
ARM GAS  /tmp/ccrrJVNd.s 			page 177


 3512              	.LVL369:
2544:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3513              		.loc 1 2544 0
 3514 0072 6168     		ldr	r1, [r4, #4]
 3515 0074 6269     		ldr	r2, [r4, #20]
 3516 0076 41EA0212 		orr	r2, r1, r2, lsl #4
 3517 007a 4EEA0202 		orr	r2, lr, r2
 3518              	.LVL370:
2547:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3519              		.loc 1 2547 0
 3520 007e 8660     		str	r6, [r0, #8]
2550:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3521              		.loc 1 2550 0
 3522 0080 2968     		ldr	r1, [r5]
 3523 0082 8B61     		str	r3, [r1, #24]
2553:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3524              		.loc 1 2553 0
 3525 0084 2B68     		ldr	r3, [r5]
 3526              	.LVL371:
 3527 0086 1A62     		str	r2, [r3, #32]
 3528              	.LVL372:
2556:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3529              		.loc 1 2556 0
 3530 0088 0123     		movs	r3, #1
 3531 008a 85F83D30 		strb	r3, [r5, #61]
2558:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 3532              		.loc 1 2558 0
 3533 008e 0020     		movs	r0, #0
 3534 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3535              	.LVL373:
 3536              	.L232:
 3537              	.LCFI40:
 3538              		.cfi_def_cfa_offset 0
 3539              		.cfi_restore 3
 3540              		.cfi_restore 4
 3541              		.cfi_restore 5
 3542              		.cfi_restore 6
 3543              		.cfi_restore 7
 3544              		.cfi_restore 14
2471:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3545              		.loc 1 2471 0
 3546 0092 0120     		movs	r0, #1
 3547              	.LVL374:
 3548 0094 7047     		bx	lr
 3549              	.L236:
 3550 0096 00BF     		.align	2
 3551              	.L235:
 3552 0098 F8FFFEFF 		.word	-65544
 3553 009c FCFCFFFF 		.word	-772
 3554 00a0 0303FFFF 		.word	-64765
 3555              		.cfi_endproc
 3556              	.LFE184:
 3558              		.section	.text.TIM_OC1_SetConfig,"ax",%progbits
 3559              		.align	2
 3560              		.global	TIM_OC1_SetConfig
 3561              		.thumb
 3562              		.thumb_func
ARM GAS  /tmp/ccrrJVNd.s 			page 178


 3564              	TIM_OC1_SetConfig:
 3565              	.LFB228:
5481:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmrx = 0;
 3566              		.loc 1 5481 0
 3567              		.cfi_startproc
 3568              		@ args = 0, pretend = 0, frame = 0
 3569              		@ frame_needed = 0, uses_anonymous_args = 0
 3570              		@ link register save eliminated.
 3571              	.LVL375:
 3572 0000 70B4     		push	{r4, r5, r6}
 3573              	.LCFI41:
 3574              		.cfi_def_cfa_offset 12
 3575              		.cfi_offset 4, -12
 3576              		.cfi_offset 5, -8
 3577              		.cfi_offset 6, -4
 3578              	.LVL376:
5487:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3579              		.loc 1 5487 0
 3580 0002 036A     		ldr	r3, [r0, #32]
 3581 0004 23F00103 		bic	r3, r3, #1
 3582 0008 0362     		str	r3, [r0, #32]
5490:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
 3583              		.loc 1 5490 0
 3584 000a 036A     		ldr	r3, [r0, #32]
 3585              	.LVL377:
5492:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3586              		.loc 1 5492 0
 3587 000c 4268     		ldr	r2, [r0, #4]
 3588              	.LVL378:
5495:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3589              		.loc 1 5495 0
 3590 000e 8569     		ldr	r5, [r0, #24]
 3591              	.LVL379:
5499:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Output Compare Mode */
 3592              		.loc 1 5499 0
 3593 0010 104C     		ldr	r4, .L240
 3594 0012 2C40     		ands	r4, r4, r5
 3595              	.LVL380:
5501:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3596              		.loc 1 5501 0
 3597 0014 0D68     		ldr	r5, [r1]
 3598 0016 2C43     		orrs	r4, r4, r5
 3599              	.LVL381:
5504:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Output Compare Polarity */
 3600              		.loc 1 5504 0
 3601 0018 23F00205 		bic	r5, r3, #2
 3602              	.LVL382:
5506:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3603              		.loc 1 5506 0
 3604 001c 8B68     		ldr	r3, [r1, #8]
 3605 001e 2B43     		orrs	r3, r3, r5
 3606              	.LVL383:
5509:HALLIB/Src/stm32f7xx_hal_tim.c ****   {   
 3607              		.loc 1 5509 0
 3608 0020 0D4D     		ldr	r5, .L240+4
 3609 0022 0E4E     		ldr	r6, .L240+8
 3610 0024 A842     		cmp	r0, r5
ARM GAS  /tmp/ccrrJVNd.s 			page 179


 3611 0026 18BF     		it	ne
 3612 0028 B042     		cmpne	r0, r6
 3613 002a 0BD1     		bne	.L238
5512:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Polarity */
 3614              		.loc 1 5512 0
 3615 002c 23F00803 		bic	r3, r3, #8
 3616              	.LVL384:
5514:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output N State */
 3617              		.loc 1 5514 0
 3618 0030 CD68     		ldr	r5, [r1, #12]
 3619 0032 2B43     		orrs	r3, r3, r5
 3620              	.LVL385:
5516:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3621              		.loc 1 5516 0
 3622 0034 23F00403 		bic	r3, r3, #4
 3623              	.LVL386:
5520:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output Idle state */
 3624              		.loc 1 5520 0
 3625 0038 22F44072 		bic	r2, r2, #768
 3626              	.LVL387:
5522:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Idle state */
 3627              		.loc 1 5522 0
 3628 003c 4D69     		ldr	r5, [r1, #20]
 3629 003e 1543     		orrs	r5, r5, r2
 3630              	.LVL388:
5524:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3631              		.loc 1 5524 0
 3632 0040 8A69     		ldr	r2, [r1, #24]
 3633 0042 2A43     		orrs	r2, r2, r5
 3634              	.LVL389:
 3635              	.L238:
5527:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3636              		.loc 1 5527 0
 3637 0044 4260     		str	r2, [r0, #4]
5530:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3638              		.loc 1 5530 0
 3639 0046 8461     		str	r4, [r0, #24]
5533:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3640              		.loc 1 5533 0
 3641 0048 4A68     		ldr	r2, [r1, #4]
 3642              	.LVL390:
 3643 004a 4263     		str	r2, [r0, #52]
5536:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
 3644              		.loc 1 5536 0
 3645 004c 0362     		str	r3, [r0, #32]
5537:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3646              		.loc 1 5537 0
 3647 004e 70BC     		pop	{r4, r5, r6}
 3648              	.LCFI42:
 3649              		.cfi_restore 6
 3650              		.cfi_restore 5
 3651              		.cfi_restore 4
 3652              		.cfi_def_cfa_offset 0
 3653              	.LVL391:
 3654 0050 7047     		bx	lr
 3655              	.L241:
 3656 0052 00BF     		.align	2
ARM GAS  /tmp/ccrrJVNd.s 			page 180


 3657              	.L240:
 3658 0054 8CFFFEFF 		.word	-65652
 3659 0058 00040140 		.word	1073808384
 3660 005c 00000140 		.word	1073807360
 3661              		.cfi_endproc
 3662              	.LFE228:
 3664              		.section	.text.TIM_OC2_SetConfig,"ax",%progbits
 3665              		.align	2
 3666              		.global	TIM_OC2_SetConfig
 3667              		.thumb
 3668              		.thumb_func
 3670              	TIM_OC2_SetConfig:
 3671              	.LFB229:
5546:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmrx = 0;
 3672              		.loc 1 5546 0
 3673              		.cfi_startproc
 3674              		@ args = 0, pretend = 0, frame = 0
 3675              		@ frame_needed = 0, uses_anonymous_args = 0
 3676              		@ link register save eliminated.
 3677              	.LVL392:
 3678 0000 70B4     		push	{r4, r5, r6}
 3679              	.LCFI43:
 3680              		.cfi_def_cfa_offset 12
 3681              		.cfi_offset 4, -12
 3682              		.cfi_offset 5, -8
 3683              		.cfi_offset 6, -4
 3684              	.LVL393:
5552:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3685              		.loc 1 5552 0
 3686 0002 036A     		ldr	r3, [r0, #32]
 3687 0004 23F01003 		bic	r3, r3, #16
 3688 0008 0362     		str	r3, [r0, #32]
5555:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
 3689              		.loc 1 5555 0
 3690 000a 036A     		ldr	r3, [r0, #32]
 3691              	.LVL394:
5557:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3692              		.loc 1 5557 0
 3693 000c 4468     		ldr	r4, [r0, #4]
 3694              	.LVL395:
5560:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3695              		.loc 1 5560 0
 3696 000e 8569     		ldr	r5, [r0, #24]
 3697              	.LVL396:
5564:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3698              		.loc 1 5564 0
 3699 0010 124A     		ldr	r2, .L245
 3700 0012 2A40     		ands	r2, r2, r5
 3701              	.LVL397:
5567:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3702              		.loc 1 5567 0
 3703 0014 0D68     		ldr	r5, [r1]
 3704 0016 42EA0522 		orr	r2, r2, r5, lsl #8
 3705              	.LVL398:
5570:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Output Compare Polarity */
 3706              		.loc 1 5570 0
 3707 001a 23F02003 		bic	r3, r3, #32
ARM GAS  /tmp/ccrrJVNd.s 			page 181


 3708              	.LVL399:
5572:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3709              		.loc 1 5572 0
 3710 001e 8D68     		ldr	r5, [r1, #8]
 3711 0020 43EA0513 		orr	r3, r3, r5, lsl #4
 3712              	.LVL400:
5574:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3713              		.loc 1 5574 0
 3714 0024 0E4D     		ldr	r5, .L245+4
 3715 0026 0F4E     		ldr	r6, .L245+8
 3716 0028 A842     		cmp	r0, r5
 3717 002a 18BF     		it	ne
 3718 002c B042     		cmpne	r0, r6
 3719 002e 0ED1     		bne	.L243
5579:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Polarity */
 3720              		.loc 1 5579 0
 3721 0030 23F08003 		bic	r3, r3, #128
 3722              	.LVL401:
5581:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output N State */
 3723              		.loc 1 5581 0
 3724 0034 CD68     		ldr	r5, [r1, #12]
 3725 0036 43EA0513 		orr	r3, r3, r5, lsl #4
 3726              	.LVL402:
5583:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3727              		.loc 1 5583 0
 3728 003a 23F04003 		bic	r3, r3, #64
 3729              	.LVL403:
5587:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output Idle state */
 3730              		.loc 1 5587 0
 3731 003e 24F44064 		bic	r4, r4, #3072
 3732              	.LVL404:
5589:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Idle state */
 3733              		.loc 1 5589 0
 3734 0042 4D69     		ldr	r5, [r1, #20]
 3735 0044 44EA8504 		orr	r4, r4, r5, lsl #2
 3736              	.LVL405:
5591:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3737              		.loc 1 5591 0
 3738 0048 8D69     		ldr	r5, [r1, #24]
 3739 004a 44EA8504 		orr	r4, r4, r5, lsl #2
 3740              	.LVL406:
 3741              	.L243:
5594:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3742              		.loc 1 5594 0
 3743 004e 4460     		str	r4, [r0, #4]
5597:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3744              		.loc 1 5597 0
 3745 0050 8261     		str	r2, [r0, #24]
5600:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3746              		.loc 1 5600 0
 3747 0052 4A68     		ldr	r2, [r1, #4]
 3748              	.LVL407:
 3749 0054 8263     		str	r2, [r0, #56]
 3750              	.LVL408:
5603:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 3751              		.loc 1 5603 0
 3752 0056 0362     		str	r3, [r0, #32]
ARM GAS  /tmp/ccrrJVNd.s 			page 182


5604:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3753              		.loc 1 5604 0
 3754 0058 70BC     		pop	{r4, r5, r6}
 3755              	.LCFI44:
 3756              		.cfi_restore 6
 3757              		.cfi_restore 5
 3758              		.cfi_restore 4
 3759              		.cfi_def_cfa_offset 0
 3760              	.LVL409:
 3761 005a 7047     		bx	lr
 3762              	.L246:
 3763              		.align	2
 3764              	.L245:
 3765 005c FF8CFFFE 		.word	-16806657
 3766 0060 00040140 		.word	1073808384
 3767 0064 00000140 		.word	1073807360
 3768              		.cfi_endproc
 3769              	.LFE229:
 3771              		.section	.text.TIM_OC3_SetConfig,"ax",%progbits
 3772              		.align	2
 3773              		.global	TIM_OC3_SetConfig
 3774              		.thumb
 3775              		.thumb_func
 3777              	TIM_OC3_SetConfig:
 3778              	.LFB230:
5613:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmrx = 0;
 3779              		.loc 1 5613 0
 3780              		.cfi_startproc
 3781              		@ args = 0, pretend = 0, frame = 0
 3782              		@ frame_needed = 0, uses_anonymous_args = 0
 3783              		@ link register save eliminated.
 3784              	.LVL410:
 3785 0000 70B4     		push	{r4, r5, r6}
 3786              	.LCFI45:
 3787              		.cfi_def_cfa_offset 12
 3788              		.cfi_offset 4, -12
 3789              		.cfi_offset 5, -8
 3790              		.cfi_offset 6, -4
 3791              	.LVL411:
5619:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3792              		.loc 1 5619 0
 3793 0002 036A     		ldr	r3, [r0, #32]
 3794 0004 23F48073 		bic	r3, r3, #256
 3795 0008 0362     		str	r3, [r0, #32]
5622:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
 3796              		.loc 1 5622 0
 3797 000a 036A     		ldr	r3, [r0, #32]
 3798              	.LVL412:
5624:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3799              		.loc 1 5624 0
 3800 000c 4268     		ldr	r2, [r0, #4]
 3801              	.LVL413:
5627:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3802              		.loc 1 5627 0
 3803 000e C569     		ldr	r5, [r0, #28]
 3804              	.LVL414:
5631:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Select the Output Compare Mode */
ARM GAS  /tmp/ccrrJVNd.s 			page 183


 3805              		.loc 1 5631 0
 3806 0010 124C     		ldr	r4, .L250
 3807 0012 2C40     		ands	r4, r4, r5
 3808              	.LVL415:
5633:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3809              		.loc 1 5633 0
 3810 0014 0D68     		ldr	r5, [r1]
 3811 0016 2C43     		orrs	r4, r4, r5
 3812              	.LVL416:
5636:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Output Compare Polarity */
 3813              		.loc 1 5636 0
 3814 0018 23F40073 		bic	r3, r3, #512
 3815              	.LVL417:
5638:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3816              		.loc 1 5638 0
 3817 001c 8D68     		ldr	r5, [r1, #8]
 3818 001e 43EA0523 		orr	r3, r3, r5, lsl #8
 3819              	.LVL418:
5640:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3820              		.loc 1 5640 0
 3821 0022 0F4D     		ldr	r5, .L250+4
 3822 0024 0F4E     		ldr	r6, .L250+8
 3823 0026 A842     		cmp	r0, r5
 3824 0028 18BF     		it	ne
 3825 002a B042     		cmpne	r0, r6
 3826 002c 0ED1     		bne	.L248
5645:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Polarity */
 3827              		.loc 1 5645 0
 3828 002e 23F40063 		bic	r3, r3, #2048
 3829              	.LVL419:
5647:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Reset the Output N State */
 3830              		.loc 1 5647 0
 3831 0032 CD68     		ldr	r5, [r1, #12]
 3832 0034 43EA0523 		orr	r3, r3, r5, lsl #8
 3833              	.LVL420:
5649:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3834              		.loc 1 5649 0
 3835 0038 23F48063 		bic	r3, r3, #1024
 3836              	.LVL421:
5653:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output Idle state */
 3837              		.loc 1 5653 0
 3838 003c 22F44052 		bic	r2, r2, #12288
 3839              	.LVL422:
5655:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output N Idle state */
 3840              		.loc 1 5655 0
 3841 0040 4D69     		ldr	r5, [r1, #20]
 3842 0042 42EA0512 		orr	r2, r2, r5, lsl #4
 3843              	.LVL423:
5657:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3844              		.loc 1 5657 0
 3845 0046 8D69     		ldr	r5, [r1, #24]
 3846 0048 42EA0512 		orr	r2, r2, r5, lsl #4
 3847              	.LVL424:
 3848              	.L248:
5660:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3849              		.loc 1 5660 0
 3850 004c 4260     		str	r2, [r0, #4]
ARM GAS  /tmp/ccrrJVNd.s 			page 184


5663:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3851              		.loc 1 5663 0
 3852 004e C461     		str	r4, [r0, #28]
5666:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3853              		.loc 1 5666 0
 3854 0050 4A68     		ldr	r2, [r1, #4]
 3855              	.LVL425:
 3856 0052 C263     		str	r2, [r0, #60]
5669:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 3857              		.loc 1 5669 0
 3858 0054 0362     		str	r3, [r0, #32]
5670:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3859              		.loc 1 5670 0
 3860 0056 70BC     		pop	{r4, r5, r6}
 3861              	.LCFI46:
 3862              		.cfi_restore 6
 3863              		.cfi_restore 5
 3864              		.cfi_restore 4
 3865              		.cfi_def_cfa_offset 0
 3866              	.LVL426:
 3867 0058 7047     		bx	lr
 3868              	.L251:
 3869 005a 00BF     		.align	2
 3870              	.L250:
 3871 005c 8CFFFEFF 		.word	-65652
 3872 0060 00040140 		.word	1073808384
 3873 0064 00000140 		.word	1073807360
 3874              		.cfi_endproc
 3875              	.LFE230:
 3877              		.section	.text.TIM_OC4_SetConfig,"ax",%progbits
 3878              		.align	2
 3879              		.global	TIM_OC4_SetConfig
 3880              		.thumb
 3881              		.thumb_func
 3883              	TIM_OC4_SetConfig:
 3884              	.LFB231:
5679:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmrx = 0;
 3885              		.loc 1 5679 0
 3886              		.cfi_startproc
 3887              		@ args = 0, pretend = 0, frame = 0
 3888              		@ frame_needed = 0, uses_anonymous_args = 0
 3889              		@ link register save eliminated.
 3890              	.LVL427:
 3891 0000 70B4     		push	{r4, r5, r6}
 3892              	.LCFI47:
 3893              		.cfi_def_cfa_offset 12
 3894              		.cfi_offset 4, -12
 3895              		.cfi_offset 5, -8
 3896              		.cfi_offset 6, -4
 3897              	.LVL428:
5685:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3898              		.loc 1 5685 0
 3899 0002 036A     		ldr	r3, [r0, #32]
 3900 0004 23F48053 		bic	r3, r3, #4096
 3901 0008 0362     		str	r3, [r0, #32]
5688:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
 3902              		.loc 1 5688 0
ARM GAS  /tmp/ccrrJVNd.s 			page 185


 3903 000a 036A     		ldr	r3, [r0, #32]
 3904              	.LVL429:
5690:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3905              		.loc 1 5690 0
 3906 000c 4468     		ldr	r4, [r0, #4]
 3907              	.LVL430:
5693:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3908              		.loc 1 5693 0
 3909 000e C569     		ldr	r5, [r0, #28]
 3910              	.LVL431:
5697:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3911              		.loc 1 5697 0
 3912 0010 0D4A     		ldr	r2, .L255
 3913 0012 2A40     		ands	r2, r2, r5
 3914              	.LVL432:
5700:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3915              		.loc 1 5700 0
 3916 0014 0D68     		ldr	r5, [r1]
 3917 0016 42EA0522 		orr	r2, r2, r5, lsl #8
 3918              	.LVL433:
5703:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Output Compare Polarity */
 3919              		.loc 1 5703 0
 3920 001a 23F40053 		bic	r3, r3, #8192
 3921              	.LVL434:
5705:HALLIB/Src/stm32f7xx_hal_tim.c ****    
 3922              		.loc 1 5705 0
 3923 001e 8D68     		ldr	r5, [r1, #8]
 3924 0020 43EA0533 		orr	r3, r3, r5, lsl #12
 3925              	.LVL435:
5708:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 3926              		.loc 1 5708 0
 3927 0024 094D     		ldr	r5, .L255+4
 3928 0026 0A4E     		ldr	r6, .L255+8
 3929 0028 A842     		cmp	r0, r5
 3930 002a 18BF     		it	ne
 3931 002c B042     		cmpne	r0, r6
 3932 002e 04D1     		bne	.L253
5712:HALLIB/Src/stm32f7xx_hal_tim.c ****     /* Set the Output Idle state */
 3933              		.loc 1 5712 0
 3934 0030 24F48044 		bic	r4, r4, #16384
 3935              	.LVL436:
5714:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 3936              		.loc 1 5714 0
 3937 0034 4D69     		ldr	r5, [r1, #20]
 3938 0036 44EA8514 		orr	r4, r4, r5, lsl #6
 3939              	.LVL437:
 3940              	.L253:
5717:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3941              		.loc 1 5717 0
 3942 003a 4460     		str	r4, [r0, #4]
5720:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 3943              		.loc 1 5720 0
 3944 003c C261     		str	r2, [r0, #28]
5723:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3945              		.loc 1 5723 0
 3946 003e 4A68     		ldr	r2, [r1, #4]
 3947              	.LVL438:
ARM GAS  /tmp/ccrrJVNd.s 			page 186


 3948 0040 0264     		str	r2, [r0, #64]
 3949              	.LVL439:
5726:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 3950              		.loc 1 5726 0
 3951 0042 0362     		str	r3, [r0, #32]
5727:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 3952              		.loc 1 5727 0
 3953 0044 70BC     		pop	{r4, r5, r6}
 3954              	.LCFI48:
 3955              		.cfi_restore 6
 3956              		.cfi_restore 5
 3957              		.cfi_restore 4
 3958              		.cfi_def_cfa_offset 0
 3959              	.LVL440:
 3960 0046 7047     		bx	lr
 3961              	.L256:
 3962              		.align	2
 3963              	.L255:
 3964 0048 FF8CFFFE 		.word	-16806657
 3965 004c 00040140 		.word	1073808384
 3966 0050 00000140 		.word	1073807360
 3967              		.cfi_endproc
 3968              	.LFE231:
 3970              		.section	.text.HAL_TIM_OC_ConfigChannel,"ax",%progbits
 3971              		.align	2
 3972              		.weak	HAL_TIM_OC_ConfigChannel
 3973              		.thumb
 3974              		.thumb_func
 3976              	HAL_TIM_OC_ConfigChannel:
 3977              	.LFB195:
3246:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */ 
 3978              		.loc 1 3246 0
 3979              		.cfi_startproc
 3980              		@ args = 0, pretend = 0, frame = 0
 3981              		@ frame_needed = 0, uses_anonymous_args = 0
 3982              	.LVL441:
3253:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3983              		.loc 1 3253 0
 3984 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 3985 0004 012B     		cmp	r3, #1
 3986 0006 28D0     		beq	.L265
3246:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */ 
 3987              		.loc 1 3246 0 discriminator 2
 3988 0008 10B5     		push	{r4, lr}
 3989              	.LCFI49:
 3990              		.cfi_def_cfa_offset 8
 3991              		.cfi_offset 4, -8
 3992              		.cfi_offset 14, -4
 3993 000a 0446     		mov	r4, r0
3253:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3994              		.loc 1 3253 0 discriminator 2
 3995 000c 0123     		movs	r3, #1
 3996 000e 80F83C30 		strb	r3, [r0, #60]
3255:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 3997              		.loc 1 3255 0 discriminator 2
 3998 0012 0223     		movs	r3, #2
 3999 0014 80F83D30 		strb	r3, [r0, #61]
ARM GAS  /tmp/ccrrJVNd.s 			page 187


3257:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4000              		.loc 1 3257 0 discriminator 2
 4001 0018 0C2A     		cmp	r2, #12
 4002 001a 17D8     		bhi	.L259
 4003 001c DFE802F0 		tbb	[pc, r2]
 4004              	.L261:
 4005 0020 07       		.byte	(.L260-.L261)/2
 4006 0021 16       		.byte	(.L259-.L261)/2
 4007 0022 16       		.byte	(.L259-.L261)/2
 4008 0023 16       		.byte	(.L259-.L261)/2
 4009 0024 0B       		.byte	(.L262-.L261)/2
 4010 0025 16       		.byte	(.L259-.L261)/2
 4011 0026 16       		.byte	(.L259-.L261)/2
 4012 0027 16       		.byte	(.L259-.L261)/2
 4013 0028 0F       		.byte	(.L263-.L261)/2
 4014 0029 16       		.byte	(.L259-.L261)/2
 4015 002a 16       		.byte	(.L259-.L261)/2
 4016 002b 16       		.byte	(.L259-.L261)/2
 4017 002c 13       		.byte	(.L264-.L261)/2
 4018 002d 00       		.p2align 1
 4019              	.L260:
3263:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 4020              		.loc 1 3263 0
 4021 002e 0068     		ldr	r0, [r0]
 4022              	.LVL442:
 4023 0030 FFF7FEFF 		bl	TIM_OC1_SetConfig
 4024              	.LVL443:
3265:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 4025              		.loc 1 3265 0
 4026 0034 0AE0     		b	.L259
 4027              	.LVL444:
 4028              	.L262:
3271:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 4029              		.loc 1 3271 0
 4030 0036 0068     		ldr	r0, [r0]
 4031              	.LVL445:
 4032 0038 FFF7FEFF 		bl	TIM_OC2_SetConfig
 4033              	.LVL446:
3273:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 4034              		.loc 1 3273 0
 4035 003c 06E0     		b	.L259
 4036              	.LVL447:
 4037              	.L263:
3279:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 4038              		.loc 1 3279 0
 4039 003e 0068     		ldr	r0, [r0]
 4040              	.LVL448:
 4041 0040 FFF7FEFF 		bl	TIM_OC3_SetConfig
 4042              	.LVL449:
3281:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 4043              		.loc 1 3281 0
 4044 0044 02E0     		b	.L259
 4045              	.LVL450:
 4046              	.L264:
3287:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 4047              		.loc 1 3287 0
 4048 0046 0068     		ldr	r0, [r0]
ARM GAS  /tmp/ccrrJVNd.s 			page 188


 4049              	.LVL451:
 4050 0048 FFF7FEFF 		bl	TIM_OC4_SetConfig
 4051              	.LVL452:
 4052              	.L259:
3294:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4053              		.loc 1 3294 0
 4054 004c 0123     		movs	r3, #1
 4055 004e 84F83D30 		strb	r3, [r4, #61]
3296:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4056              		.loc 1 3296 0
 4057 0052 0020     		movs	r0, #0
 4058 0054 84F83C00 		strb	r0, [r4, #60]
3298:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 4059              		.loc 1 3298 0
 4060 0058 10BD     		pop	{r4, pc}
 4061              	.LVL453:
 4062              	.L265:
 4063              	.LCFI50:
 4064              		.cfi_def_cfa_offset 0
 4065              		.cfi_restore 4
 4066              		.cfi_restore 14
3253:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4067              		.loc 1 3253 0
 4068 005a 0220     		movs	r0, #2
 4069              	.LVL454:
 4070 005c 7047     		bx	lr
 4071              		.cfi_endproc
 4072              	.LFE195:
 4074 005e 00BF     		.section	.text.HAL_TIM_PWM_ConfigChannel,"ax",%progbits
 4075              		.align	2
 4076              		.weak	HAL_TIM_PWM_ConfigChannel
 4077              		.thumb
 4078              		.thumb_func
 4080              	HAL_TIM_PWM_ConfigChannel:
 4081              	.LFB197:
3413:HALLIB/Src/stm32f7xx_hal_tim.c ****   __HAL_LOCK(htim);
 4082              		.loc 1 3413 0
 4083              		.cfi_startproc
 4084              		@ args = 0, pretend = 0, frame = 0
 4085              		@ frame_needed = 0, uses_anonymous_args = 0
 4086              	.LVL455:
 4087 0000 38B5     		push	{r3, r4, r5, lr}
 4088              	.LCFI51:
 4089              		.cfi_def_cfa_offset 16
 4090              		.cfi_offset 3, -16
 4091              		.cfi_offset 4, -12
 4092              		.cfi_offset 5, -8
 4093              		.cfi_offset 14, -4
3414:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4094              		.loc 1 3414 0
 4095 0002 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 4096 0006 012B     		cmp	r3, #1
 4097 0008 66D0     		beq	.L276
 4098 000a 0D46     		mov	r5, r1
 4099 000c 0446     		mov	r4, r0
3414:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4100              		.loc 1 3414 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/ccrrJVNd.s 			page 189


 4101 000e 0123     		movs	r3, #1
 4102 0010 80F83C30 		strb	r3, [r0, #60]
3422:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 4103              		.loc 1 3422 0 is_stmt 1 discriminator 2
 4104 0014 0223     		movs	r3, #2
 4105 0016 80F83D30 		strb	r3, [r0, #61]
3424:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4106              		.loc 1 3424 0 discriminator 2
 4107 001a 0C2A     		cmp	r2, #12
 4108 001c 55D8     		bhi	.L270
 4109 001e DFE802F0 		tbb	[pc, r2]
 4110              	.L272:
 4111 0022 07       		.byte	(.L271-.L272)/2
 4112 0023 54       		.byte	(.L270-.L272)/2
 4113 0024 54       		.byte	(.L270-.L272)/2
 4114 0025 54       		.byte	(.L270-.L272)/2
 4115 0026 1A       		.byte	(.L273-.L272)/2
 4116 0027 54       		.byte	(.L270-.L272)/2
 4117 0028 54       		.byte	(.L270-.L272)/2
 4118 0029 54       		.byte	(.L270-.L272)/2
 4119 002a 2E       		.byte	(.L274-.L272)/2
 4120 002b 54       		.byte	(.L270-.L272)/2
 4121 002c 54       		.byte	(.L270-.L272)/2
 4122 002d 54       		.byte	(.L270-.L272)/2
 4123 002e 41       		.byte	(.L275-.L272)/2
 4124 002f 00       		.p2align 1
 4125              	.L271:
3430:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 4126              		.loc 1 3430 0
 4127 0030 0068     		ldr	r0, [r0]
 4128              	.LVL456:
 4129 0032 FFF7FEFF 		bl	TIM_OC1_SetConfig
 4130              	.LVL457:
3433:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 4131              		.loc 1 3433 0
 4132 0036 2268     		ldr	r2, [r4]
 4133 0038 9369     		ldr	r3, [r2, #24]
 4134 003a 43F00803 		orr	r3, r3, #8
 4135 003e 9361     		str	r3, [r2, #24]
3436:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR1 |= sConfig->OCFastMode;
 4136              		.loc 1 3436 0
 4137 0040 2268     		ldr	r2, [r4]
 4138 0042 9369     		ldr	r3, [r2, #24]
 4139 0044 23F00403 		bic	r3, r3, #4
 4140 0048 9361     		str	r3, [r2, #24]
3437:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 4141              		.loc 1 3437 0
 4142 004a 2268     		ldr	r2, [r4]
 4143 004c 9169     		ldr	r1, [r2, #24]
 4144 004e 2B69     		ldr	r3, [r5, #16]
 4145 0050 0B43     		orrs	r3, r3, r1
 4146 0052 9361     		str	r3, [r2, #24]
3439:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 4147              		.loc 1 3439 0
 4148 0054 39E0     		b	.L270
 4149              	.LVL458:
 4150              	.L273:
ARM GAS  /tmp/ccrrJVNd.s 			page 190


3445:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 4151              		.loc 1 3445 0
 4152 0056 0068     		ldr	r0, [r0]
 4153              	.LVL459:
 4154 0058 FFF7FEFF 		bl	TIM_OC2_SetConfig
 4155              	.LVL460:
3448:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 4156              		.loc 1 3448 0
 4157 005c 2268     		ldr	r2, [r4]
 4158 005e 9369     		ldr	r3, [r2, #24]
 4159 0060 43F40063 		orr	r3, r3, #2048
 4160 0064 9361     		str	r3, [r2, #24]
3451:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 4161              		.loc 1 3451 0
 4162 0066 2268     		ldr	r2, [r4]
 4163 0068 9369     		ldr	r3, [r2, #24]
 4164 006a 23F48063 		bic	r3, r3, #1024
 4165 006e 9361     		str	r3, [r2, #24]
3452:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 4166              		.loc 1 3452 0
 4167 0070 2268     		ldr	r2, [r4]
 4168 0072 9369     		ldr	r3, [r2, #24]
 4169 0074 2969     		ldr	r1, [r5, #16]
 4170 0076 43EA0123 		orr	r3, r3, r1, lsl #8
 4171 007a 9361     		str	r3, [r2, #24]
3454:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 4172              		.loc 1 3454 0
 4173 007c 25E0     		b	.L270
 4174              	.LVL461:
 4175              	.L274:
3460:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 4176              		.loc 1 3460 0
 4177 007e 0068     		ldr	r0, [r0]
 4178              	.LVL462:
 4179 0080 FFF7FEFF 		bl	TIM_OC3_SetConfig
 4180              	.LVL463:
3463:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 4181              		.loc 1 3463 0
 4182 0084 2268     		ldr	r2, [r4]
 4183 0086 D369     		ldr	r3, [r2, #28]
 4184 0088 43F00803 		orr	r3, r3, #8
 4185 008c D361     		str	r3, [r2, #28]
3466:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 4186              		.loc 1 3466 0
 4187 008e 2268     		ldr	r2, [r4]
 4188 0090 D369     		ldr	r3, [r2, #28]
 4189 0092 23F00403 		bic	r3, r3, #4
 4190 0096 D361     		str	r3, [r2, #28]
3467:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 4191              		.loc 1 3467 0
 4192 0098 2268     		ldr	r2, [r4]
 4193 009a D169     		ldr	r1, [r2, #28]
 4194 009c 2B69     		ldr	r3, [r5, #16]
 4195 009e 0B43     		orrs	r3, r3, r1
 4196 00a0 D361     		str	r3, [r2, #28]
3469:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 4197              		.loc 1 3469 0
ARM GAS  /tmp/ccrrJVNd.s 			page 191


 4198 00a2 12E0     		b	.L270
 4199              	.LVL464:
 4200              	.L275:
3475:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 4201              		.loc 1 3475 0
 4202 00a4 0068     		ldr	r0, [r0]
 4203              	.LVL465:
 4204 00a6 FFF7FEFF 		bl	TIM_OC4_SetConfig
 4205              	.LVL466:
3478:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 4206              		.loc 1 3478 0
 4207 00aa 2268     		ldr	r2, [r4]
 4208 00ac D369     		ldr	r3, [r2, #28]
 4209 00ae 43F40063 		orr	r3, r3, #2048
 4210 00b2 D361     		str	r3, [r2, #28]
3481:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 4211              		.loc 1 3481 0
 4212 00b4 2268     		ldr	r2, [r4]
 4213 00b6 D369     		ldr	r3, [r2, #28]
 4214 00b8 23F48063 		bic	r3, r3, #1024
 4215 00bc D361     		str	r3, [r2, #28]
3482:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 4216              		.loc 1 3482 0
 4217 00be 2268     		ldr	r2, [r4]
 4218 00c0 D369     		ldr	r3, [r2, #28]
 4219 00c2 2969     		ldr	r1, [r5, #16]
 4220 00c4 43EA0123 		orr	r3, r3, r1, lsl #8
 4221 00c8 D361     		str	r3, [r2, #28]
 4222              	.L270:
3490:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 4223              		.loc 1 3490 0
 4224 00ca 0123     		movs	r3, #1
 4225 00cc 84F83D30 		strb	r3, [r4, #61]
3492:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4226              		.loc 1 3492 0
 4227 00d0 0020     		movs	r0, #0
 4228 00d2 84F83C00 		strb	r0, [r4, #60]
3494:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 4229              		.loc 1 3494 0
 4230 00d6 38BD     		pop	{r3, r4, r5, pc}
 4231              	.LVL467:
 4232              	.L276:
3414:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4233              		.loc 1 3414 0
 4234 00d8 0220     		movs	r0, #2
 4235              	.LVL468:
3495:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4236              		.loc 1 3495 0
 4237 00da 38BD     		pop	{r3, r4, r5, pc}
 4238              		.cfi_endproc
 4239              	.LFE197:
 4241              		.section	.text.TIM_TI1_SetConfig,"ax",%progbits
 4242              		.align	2
 4243              		.global	TIM_TI1_SetConfig
 4244              		.thumb
 4245              		.thumb_func
 4247              	TIM_TI1_SetConfig:
ARM GAS  /tmp/ccrrJVNd.s 			page 192


 4248              	.LFB233:
5883:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpccmr1 = 0;
 4249              		.loc 1 5883 0
 4250              		.cfi_startproc
 4251              		@ args = 0, pretend = 0, frame = 0
 4252              		@ frame_needed = 0, uses_anonymous_args = 0
 4253              		@ link register save eliminated.
 4254              	.LVL469:
 4255 0000 F0B4     		push	{r4, r5, r6, r7}
 4256              	.LCFI52:
 4257              		.cfi_def_cfa_offset 16
 4258              		.cfi_offset 4, -16
 4259              		.cfi_offset 5, -12
 4260              		.cfi_offset 6, -8
 4261              		.cfi_offset 7, -4
 4262              	.LVL470:
5888:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 4263              		.loc 1 5888 0
 4264 0002 046A     		ldr	r4, [r0, #32]
 4265 0004 24F00104 		bic	r4, r4, #1
 4266 0008 0462     		str	r4, [r0, #32]
5889:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 4267              		.loc 1 5889 0
 4268 000a 8469     		ldr	r4, [r0, #24]
 4269              	.LVL471:
5890:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4270              		.loc 1 5890 0
 4271 000c 056A     		ldr	r5, [r0, #32]
 4272              	.LVL472:
5893:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4273              		.loc 1 5893 0
 4274 000e 224E     		ldr	r6, .L289
 4275 0010 B0F1804F 		cmp	r0, #1073741824
 4276 0014 18BF     		it	ne
 4277 0016 B042     		cmpne	r0, r6
 4278 0018 22D0     		beq	.L283
5893:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4279              		.loc 1 5893 0 is_stmt 0 discriminator 2
 4280 001a A6F57846 		sub	r6, r6, #63488
 4281 001e B042     		cmp	r0, r6
 4282 0020 14BF     		ite	ne
 4283 0022 0026     		movne	r6, #0
 4284 0024 0126     		moveq	r6, #1
 4285 0026 1D4F     		ldr	r7, .L289+4
 4286 0028 B842     		cmp	r0, r7
 4287 002a 1BD0     		beq	.L284
 4288 002c D6B9     		cbnz	r6, .L284
5893:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4289              		.loc 1 5893 0 discriminator 4
 4290 002e 06F18046 		add	r6, r6, #1073741824
 4291 0032 06F58236 		add	r6, r6, #66560
 4292 0036 B042     		cmp	r0, r6
 4293 0038 14BF     		ite	ne
 4294 003a 0026     		movne	r6, #0
 4295 003c 0126     		moveq	r6, #1
 4296 003e 07F50067 		add	r7, r7, #2048
 4297 0042 B842     		cmp	r0, r7
ARM GAS  /tmp/ccrrJVNd.s 			page 193


 4298 0044 10D0     		beq	.L285
 4299 0046 7EB9     		cbnz	r6, .L285
5893:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4300              		.loc 1 5893 0 discriminator 6
 4301 0048 154E     		ldr	r6, .L289+8
 4302 004a B042     		cmp	r0, r6
 4303 004c 14BF     		ite	ne
 4304 004e 0026     		movne	r6, #0
 4305 0050 0126     		moveq	r6, #1
 4306 0052 07F59A37 		add	r7, r7, #78848
 4307 0056 B842     		cmp	r0, r7
 4308 0058 00D0     		beq	.L287
 4309 005a 3EB1     		cbz	r6, .L286
 4310              	.L287:
5893:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4311              		.loc 1 5893 0
 4312 005c 0126     		movs	r6, #1
 4313 005e 06E0     		b	.L279
 4314              	.L283:
 4315 0060 0126     		movs	r6, #1
 4316 0062 04E0     		b	.L279
 4317              	.L284:
 4318 0064 0126     		movs	r6, #1
 4319 0066 02E0     		b	.L279
 4320              	.L285:
 4321 0068 0126     		movs	r6, #1
 4322 006a 00E0     		b	.L279
 4323              	.L286:
 4324 006c 0026     		movs	r6, #0
 4325              	.L279:
5893:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4326              		.loc 1 5893 0 discriminator 10
 4327 006e 1EB1     		cbz	r6, .L281
5895:HALLIB/Src/stm32f7xx_hal_tim.c ****     tmpccmr1 |= TIM_ICSelection;
 4328              		.loc 1 5895 0 is_stmt 1
 4329 0070 24F00304 		bic	r4, r4, #3
 4330              	.LVL473:
5896:HALLIB/Src/stm32f7xx_hal_tim.c ****   } 
 4331              		.loc 1 5896 0
 4332 0074 2243     		orrs	r2, r2, r4
 4333              	.LVL474:
 4334 0076 01E0     		b	.L282
 4335              	.LVL475:
 4336              	.L281:
5900:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 4337              		.loc 1 5900 0
 4338 0078 44F00102 		orr	r2, r4, #1
 4339              	.LVL476:
 4340              	.L282:
5904:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 4341              		.loc 1 5904 0
 4342 007c 22F0F002 		bic	r2, r2, #240
 4343              	.LVL477:
5905:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4344              		.loc 1 5905 0
 4345 0080 1B01     		lsls	r3, r3, #4
 4346              	.LVL478:
ARM GAS  /tmp/ccrrJVNd.s 			page 194


 4347 0082 DBB2     		uxtb	r3, r3
 4348 0084 1343     		orrs	r3, r3, r2
 4349              	.LVL479:
5908:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 4350              		.loc 1 5908 0
 4351 0086 25F00A02 		bic	r2, r5, #10
 4352              	.LVL480:
5909:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4353              		.loc 1 5909 0
 4354 008a 01F00A01 		and	r1, r1, #10
 4355              	.LVL481:
 4356 008e 1143     		orrs	r1, r1, r2
 4357              	.LVL482:
5912:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER = tmpccer;
 4358              		.loc 1 5912 0
 4359 0090 8361     		str	r3, [r0, #24]
5913:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 4360              		.loc 1 5913 0
 4361 0092 0162     		str	r1, [r0, #32]
5914:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4362              		.loc 1 5914 0
 4363 0094 F0BC     		pop	{r4, r5, r6, r7}
 4364              	.LCFI53:
 4365              		.cfi_restore 7
 4366              		.cfi_restore 6
 4367              		.cfi_restore 5
 4368              		.cfi_restore 4
 4369              		.cfi_def_cfa_offset 0
 4370 0096 7047     		bx	lr
 4371              	.L290:
 4372              		.align	2
 4373              	.L289:
 4374 0098 00000140 		.word	1073807360
 4375 009c 00040040 		.word	1073742848
 4376 00a0 00180040 		.word	1073747968
 4377              		.cfi_endproc
 4378              	.LFE233:
 4380              		.section	.text.HAL_TIM_IC_ConfigChannel,"ax",%progbits
 4381              		.align	2
 4382              		.global	HAL_TIM_IC_ConfigChannel
 4383              		.thumb
 4384              		.thumb_func
 4386              	HAL_TIM_IC_ConfigChannel:
 4387              	.LFB196:
3316:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 4388              		.loc 1 3316 0
 4389              		.cfi_startproc
 4390              		@ args = 0, pretend = 0, frame = 0
 4391              		@ frame_needed = 0, uses_anonymous_args = 0
 4392              	.LVL483:
 4393 0000 38B5     		push	{r3, r4, r5, lr}
 4394              	.LCFI54:
 4395              		.cfi_def_cfa_offset 16
 4396              		.cfi_offset 3, -16
 4397              		.cfi_offset 4, -12
 4398              		.cfi_offset 5, -8
 4399              		.cfi_offset 14, -4
ARM GAS  /tmp/ccrrJVNd.s 			page 195


3324:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4400              		.loc 1 3324 0
 4401 0002 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 4402 0006 012B     		cmp	r3, #1
 4403 0008 58D0     		beq	.L297
 4404 000a 0D46     		mov	r5, r1
 4405 000c 0446     		mov	r4, r0
3324:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4406              		.loc 1 3324 0 is_stmt 0 discriminator 2
 4407 000e 0123     		movs	r3, #1
 4408 0010 80F83C30 		strb	r3, [r0, #60]
3326:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4409              		.loc 1 3326 0 is_stmt 1 discriminator 2
 4410 0014 0223     		movs	r3, #2
 4411 0016 80F83D30 		strb	r3, [r0, #61]
3328:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4412              		.loc 1 3328 0 discriminator 2
 4413 001a 82B9     		cbnz	r2, .L293
3331:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICPolarity,
 4414              		.loc 1 3331 0
 4415 001c CB68     		ldr	r3, [r1, #12]
 4416 001e 4A68     		ldr	r2, [r1, #4]
 4417              	.LVL484:
 4418 0020 0968     		ldr	r1, [r1]
 4419              	.LVL485:
 4420 0022 0068     		ldr	r0, [r0]
 4421              	.LVL486:
 4422 0024 FFF7FEFF 		bl	TIM_TI1_SetConfig
 4423              	.LVL487:
3337:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4424              		.loc 1 3337 0
 4425 0028 2268     		ldr	r2, [r4]
 4426 002a 9369     		ldr	r3, [r2, #24]
 4427 002c 23F00C03 		bic	r3, r3, #12
 4428 0030 9361     		str	r3, [r2, #24]
3340:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 4429              		.loc 1 3340 0
 4430 0032 2268     		ldr	r2, [r4]
 4431 0034 9169     		ldr	r1, [r2, #24]
 4432 0036 AB68     		ldr	r3, [r5, #8]
 4433 0038 0B43     		orrs	r3, r3, r1
 4434 003a 9361     		str	r3, [r2, #24]
 4435 003c 37E0     		b	.L294
 4436              	.LVL488:
 4437              	.L293:
3342:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4438              		.loc 1 3342 0
 4439 003e 042A     		cmp	r2, #4
 4440 0040 11D1     		bne	.L295
3347:HALLIB/Src/stm32f7xx_hal_tim.c ****                       sConfig->ICPolarity,
 4441              		.loc 1 3347 0
 4442 0042 CB68     		ldr	r3, [r1, #12]
 4443 0044 4A68     		ldr	r2, [r1, #4]
 4444              	.LVL489:
 4445 0046 0968     		ldr	r1, [r1]
 4446              	.LVL490:
 4447 0048 0068     		ldr	r0, [r0]
ARM GAS  /tmp/ccrrJVNd.s 			page 196


 4448              	.LVL491:
 4449 004a FFF7FEFF 		bl	TIM_TI2_SetConfig
 4450              	.LVL492:
3353:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4451              		.loc 1 3353 0
 4452 004e 2268     		ldr	r2, [r4]
 4453 0050 9369     		ldr	r3, [r2, #24]
 4454 0052 23F44063 		bic	r3, r3, #3072
 4455 0056 9361     		str	r3, [r2, #24]
3356:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 4456              		.loc 1 3356 0
 4457 0058 2268     		ldr	r2, [r4]
 4458 005a 9369     		ldr	r3, [r2, #24]
 4459 005c A968     		ldr	r1, [r5, #8]
 4460 005e 43EA0123 		orr	r3, r3, r1, lsl #8
 4461 0062 9361     		str	r3, [r2, #24]
 4462 0064 23E0     		b	.L294
 4463              	.LVL493:
 4464              	.L295:
3358:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4465              		.loc 1 3358 0
 4466 0066 082A     		cmp	r2, #8
 4467 0068 10D1     		bne	.L296
3363:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICPolarity,
 4468              		.loc 1 3363 0
 4469 006a CB68     		ldr	r3, [r1, #12]
 4470 006c 4A68     		ldr	r2, [r1, #4]
 4471              	.LVL494:
 4472 006e 0968     		ldr	r1, [r1]
 4473              	.LVL495:
 4474 0070 0068     		ldr	r0, [r0]
 4475              	.LVL496:
 4476 0072 FFF7FEFF 		bl	TIM_TI3_SetConfig
 4477              	.LVL497:
3369:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4478              		.loc 1 3369 0
 4479 0076 2268     		ldr	r2, [r4]
 4480 0078 D369     		ldr	r3, [r2, #28]
 4481 007a 23F00C03 		bic	r3, r3, #12
 4482 007e D361     		str	r3, [r2, #28]
3372:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 4483              		.loc 1 3372 0
 4484 0080 2268     		ldr	r2, [r4]
 4485 0082 D169     		ldr	r1, [r2, #28]
 4486 0084 AB68     		ldr	r3, [r5, #8]
 4487 0086 0B43     		orrs	r3, r3, r1
 4488 0088 D361     		str	r3, [r2, #28]
 4489 008a 10E0     		b	.L294
 4490              	.LVL498:
 4491              	.L296:
3379:HALLIB/Src/stm32f7xx_hal_tim.c ****                sConfig->ICPolarity,
 4492              		.loc 1 3379 0
 4493 008c CB68     		ldr	r3, [r1, #12]
 4494 008e 4A68     		ldr	r2, [r1, #4]
 4495              	.LVL499:
 4496 0090 0968     		ldr	r1, [r1]
 4497              	.LVL500:
ARM GAS  /tmp/ccrrJVNd.s 			page 197


 4498 0092 0068     		ldr	r0, [r0]
 4499              	.LVL501:
 4500 0094 FFF7FEFF 		bl	TIM_TI4_SetConfig
 4501              	.LVL502:
3385:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4502              		.loc 1 3385 0
 4503 0098 2268     		ldr	r2, [r4]
 4504 009a D369     		ldr	r3, [r2, #28]
 4505 009c 23F44063 		bic	r3, r3, #3072
 4506 00a0 D361     		str	r3, [r2, #28]
3388:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 4507              		.loc 1 3388 0
 4508 00a2 2268     		ldr	r2, [r4]
 4509 00a4 D369     		ldr	r3, [r2, #28]
 4510 00a6 A968     		ldr	r1, [r5, #8]
 4511 00a8 43EA0123 		orr	r3, r3, r1, lsl #8
 4512 00ac D361     		str	r3, [r2, #28]
 4513              	.L294:
3391:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 4514              		.loc 1 3391 0
 4515 00ae 0123     		movs	r3, #1
 4516 00b0 84F83D30 		strb	r3, [r4, #61]
3393:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4517              		.loc 1 3393 0
 4518 00b4 0020     		movs	r0, #0
 4519 00b6 84F83C00 		strb	r0, [r4, #60]
3395:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 4520              		.loc 1 3395 0
 4521 00ba 38BD     		pop	{r3, r4, r5, pc}
 4522              	.LVL503:
 4523              	.L297:
3324:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4524              		.loc 1 3324 0
 4525 00bc 0220     		movs	r0, #2
 4526              	.LVL504:
3396:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4527              		.loc 1 3396 0
 4528 00be 38BD     		pop	{r3, r4, r5, pc}
 4529              		.cfi_endproc
 4530              	.LFE196:
 4532              		.section	.text.HAL_TIM_OnePulse_ConfigChannel,"ax",%progbits
 4533              		.align	2
 4534              		.global	HAL_TIM_OnePulse_ConfigChannel
 4535              		.thumb
 4536              		.thumb_func
 4538              	HAL_TIM_OnePulse_ConfigChannel:
 4539              	.LFB198:
3514:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_OC_InitTypeDef temp1;
 4540              		.loc 1 3514 0
 4541              		.cfi_startproc
 4542              		@ args = 0, pretend = 0, frame = 32
 4543              		@ frame_needed = 0, uses_anonymous_args = 0
 4544              	.LVL505:
3521:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4545              		.loc 1 3521 0
 4546 0000 9A42     		cmp	r2, r3
 4547 0002 71D0     		beq	.L307
ARM GAS  /tmp/ccrrJVNd.s 			page 198


3514:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_OC_InitTypeDef temp1;
 4548              		.loc 1 3514 0
 4549 0004 70B5     		push	{r4, r5, r6, lr}
 4550              	.LCFI55:
 4551              		.cfi_def_cfa_offset 16
 4552              		.cfi_offset 4, -16
 4553              		.cfi_offset 5, -12
 4554              		.cfi_offset 6, -8
 4555              		.cfi_offset 14, -4
 4556 0006 88B0     		sub	sp, sp, #32
 4557              	.LCFI56:
 4558              		.cfi_def_cfa_offset 48
3523:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4559              		.loc 1 3523 0
 4560 0008 90F83C40 		ldrb	r4, [r0, #60]	@ zero_extendqisi2
 4561 000c 012C     		cmp	r4, #1
 4562 000e 6DD0     		beq	.L308
 4563 0010 1E46     		mov	r6, r3
 4564 0012 0D46     		mov	r5, r1
 4565 0014 0446     		mov	r4, r0
3523:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4566              		.loc 1 3523 0 is_stmt 0 discriminator 2
 4567 0016 0123     		movs	r3, #1
 4568              	.LVL506:
 4569 0018 80F83C30 		strb	r3, [r0, #60]
3525:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4570              		.loc 1 3525 0 is_stmt 1 discriminator 2
 4571 001c 0223     		movs	r3, #2
 4572 001e 80F83D30 		strb	r3, [r0, #61]
3528:HALLIB/Src/stm32f7xx_hal_tim.c ****     temp1.Pulse = sConfig->Pulse;
 4573              		.loc 1 3528 0 discriminator 2
 4574 0022 0B68     		ldr	r3, [r1]
 4575 0024 0193     		str	r3, [sp, #4]
3529:HALLIB/Src/stm32f7xx_hal_tim.c ****     temp1.OCPolarity = sConfig->OCPolarity;
 4576              		.loc 1 3529 0 discriminator 2
 4577 0026 4B68     		ldr	r3, [r1, #4]
 4578 0028 0293     		str	r3, [sp, #8]
3530:HALLIB/Src/stm32f7xx_hal_tim.c ****     temp1.OCNPolarity = sConfig->OCNPolarity;
 4579              		.loc 1 3530 0 discriminator 2
 4580 002a 8B68     		ldr	r3, [r1, #8]
 4581 002c 0393     		str	r3, [sp, #12]
3531:HALLIB/Src/stm32f7xx_hal_tim.c ****     temp1.OCIdleState = sConfig->OCIdleState;
 4582              		.loc 1 3531 0 discriminator 2
 4583 002e CB68     		ldr	r3, [r1, #12]
 4584 0030 0493     		str	r3, [sp, #16]
3532:HALLIB/Src/stm32f7xx_hal_tim.c ****     temp1.OCNIdleState = sConfig->OCNIdleState; 
 4585              		.loc 1 3532 0 discriminator 2
 4586 0032 0B69     		ldr	r3, [r1, #16]
 4587 0034 0693     		str	r3, [sp, #24]
3533:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 4588              		.loc 1 3533 0 discriminator 2
 4589 0036 4B69     		ldr	r3, [r1, #20]
 4590 0038 0793     		str	r3, [sp, #28]
3535:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 4591              		.loc 1 3535 0 discriminator 2
 4592 003a 12B1     		cbz	r2, .L302
 4593 003c 042A     		cmp	r2, #4
ARM GAS  /tmp/ccrrJVNd.s 			page 199


 4594 003e 05D0     		beq	.L303
 4595 0040 08E0     		b	.L301
 4596              	.L302:
3541:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4597              		.loc 1 3541 0
 4598 0042 01A9     		add	r1, sp, #4
 4599              	.LVL507:
 4600 0044 0068     		ldr	r0, [r0]
 4601              	.LVL508:
 4602 0046 FFF7FEFF 		bl	TIM_OC1_SetConfig
 4603              	.LVL509:
3543:HALLIB/Src/stm32f7xx_hal_tim.c ****       case TIM_CHANNEL_2:
 4604              		.loc 1 3543 0
 4605 004a 03E0     		b	.L301
 4606              	.LVL510:
 4607              	.L303:
3548:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4608              		.loc 1 3548 0
 4609 004c 01A9     		add	r1, sp, #4
 4610              	.LVL511:
 4611 004e 0068     		ldr	r0, [r0]
 4612              	.LVL512:
 4613 0050 FFF7FEFF 		bl	TIM_OC2_SetConfig
 4614              	.LVL513:
 4615              	.L301:
3554:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 4616              		.loc 1 3554 0
 4617 0054 16B1     		cbz	r6, .L305
 4618 0056 042E     		cmp	r6, #4
 4619 0058 20D0     		beq	.L306
 4620 005a 3EE0     		b	.L304
 4621              	.L305:
3560:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sConfig->ICSelection, sConfig->ICFilter);
 4622              		.loc 1 3560 0
 4623 005c 2B6A     		ldr	r3, [r5, #32]
 4624 005e EA69     		ldr	r2, [r5, #28]
 4625 0060 A969     		ldr	r1, [r5, #24]
 4626 0062 2068     		ldr	r0, [r4]
 4627 0064 FFF7FEFF 		bl	TIM_TI1_SetConfig
 4628              	.LVL514:
3564:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4629              		.loc 1 3564 0
 4630 0068 2268     		ldr	r2, [r4]
 4631 006a 9369     		ldr	r3, [r2, #24]
 4632 006c 23F00C03 		bic	r3, r3, #12
 4633 0070 9361     		str	r3, [r2, #24]
3567:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_TS_TI1FP1;
 4634              		.loc 1 3567 0
 4635 0072 2268     		ldr	r2, [r4]
 4636 0074 9368     		ldr	r3, [r2, #8]
 4637 0076 23F07003 		bic	r3, r3, #112
 4638 007a 9360     		str	r3, [r2, #8]
3568:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 4639              		.loc 1 3568 0
 4640 007c 2268     		ldr	r2, [r4]
 4641 007e 9368     		ldr	r3, [r2, #8]
 4642 0080 43F05003 		orr	r3, r3, #80
ARM GAS  /tmp/ccrrJVNd.s 			page 200


 4643 0084 9360     		str	r3, [r2, #8]
3571:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 4644              		.loc 1 3571 0
 4645 0086 2268     		ldr	r2, [r4]
 4646 0088 9168     		ldr	r1, [r2, #8]
 4647 008a 1A4B     		ldr	r3, .L310
 4648 008c 0B40     		ands	r3, r3, r1
 4649 008e 9360     		str	r3, [r2, #8]
3572:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4650              		.loc 1 3572 0
 4651 0090 2268     		ldr	r2, [r4]
 4652 0092 9368     		ldr	r3, [r2, #8]
 4653 0094 43F00603 		orr	r3, r3, #6
 4654 0098 9360     		str	r3, [r2, #8]
3574:HALLIB/Src/stm32f7xx_hal_tim.c ****       case TIM_CHANNEL_2:
 4655              		.loc 1 3574 0
 4656 009a 1EE0     		b	.L304
 4657              	.L306:
3579:HALLIB/Src/stm32f7xx_hal_tim.c ****                  sConfig->ICSelection, sConfig->ICFilter);
 4658              		.loc 1 3579 0
 4659 009c 2B6A     		ldr	r3, [r5, #32]
 4660 009e EA69     		ldr	r2, [r5, #28]
 4661 00a0 A969     		ldr	r1, [r5, #24]
 4662 00a2 2068     		ldr	r0, [r4]
 4663 00a4 FFF7FEFF 		bl	TIM_TI2_SetConfig
 4664              	.LVL515:
3583:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4665              		.loc 1 3583 0
 4666 00a8 2268     		ldr	r2, [r4]
 4667 00aa 9369     		ldr	r3, [r2, #24]
 4668 00ac 23F44063 		bic	r3, r3, #3072
 4669 00b0 9361     		str	r3, [r2, #24]
3586:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_TS_TI2FP2;
 4670              		.loc 1 3586 0
 4671 00b2 2268     		ldr	r2, [r4]
 4672 00b4 9368     		ldr	r3, [r2, #8]
 4673 00b6 23F07003 		bic	r3, r3, #112
 4674 00ba 9360     		str	r3, [r2, #8]
3587:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 4675              		.loc 1 3587 0
 4676 00bc 2268     		ldr	r2, [r4]
 4677 00be 9368     		ldr	r3, [r2, #8]
 4678 00c0 43F06003 		orr	r3, r3, #96
 4679 00c4 9360     		str	r3, [r2, #8]
3590:HALLIB/Src/stm32f7xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 4680              		.loc 1 3590 0
 4681 00c6 2268     		ldr	r2, [r4]
 4682 00c8 9168     		ldr	r1, [r2, #8]
 4683 00ca 0A4B     		ldr	r3, .L310
 4684 00cc 0B40     		ands	r3, r3, r1
 4685 00ce 9360     		str	r3, [r2, #8]
3591:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4686              		.loc 1 3591 0
 4687 00d0 2268     		ldr	r2, [r4]
 4688 00d2 9368     		ldr	r3, [r2, #8]
 4689 00d4 43F00603 		orr	r3, r3, #6
 4690 00d8 9360     		str	r3, [r2, #8]
ARM GAS  /tmp/ccrrJVNd.s 			page 201


 4691              	.L304:
3599:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 4692              		.loc 1 3599 0
 4693 00da 0123     		movs	r3, #1
 4694 00dc 84F83D30 		strb	r3, [r4, #61]
3601:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4695              		.loc 1 3601 0
 4696 00e0 0020     		movs	r0, #0
 4697 00e2 84F83C00 		strb	r0, [r4, #60]
3603:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 4698              		.loc 1 3603 0
 4699 00e6 02E0     		b	.L300
 4700              	.LVL516:
 4701              	.L307:
 4702              	.LCFI57:
 4703              		.cfi_def_cfa_offset 0
 4704              		.cfi_restore 4
 4705              		.cfi_restore 5
 4706              		.cfi_restore 6
 4707              		.cfi_restore 14
3607:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 4708              		.loc 1 3607 0
 4709 00e8 0120     		movs	r0, #1
 4710              	.LVL517:
3609:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4711              		.loc 1 3609 0
 4712 00ea 7047     		bx	lr
 4713              	.LVL518:
 4714              	.L308:
 4715              	.LCFI58:
 4716              		.cfi_def_cfa_offset 48
 4717              		.cfi_offset 4, -16
 4718              		.cfi_offset 5, -12
 4719              		.cfi_offset 6, -8
 4720              		.cfi_offset 14, -4
3523:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4721              		.loc 1 3523 0
 4722 00ec 0220     		movs	r0, #2
 4723              	.LVL519:
 4724              	.L300:
3609:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 4725              		.loc 1 3609 0
 4726 00ee 08B0     		add	sp, sp, #32
 4727              	.LCFI59:
 4728              		.cfi_def_cfa_offset 16
 4729              		@ sp needed
 4730 00f0 70BD     		pop	{r4, r5, r6, pc}
 4731              	.L311:
 4732 00f2 00BF     		.align	2
 4733              	.L310:
 4734 00f4 F8FFFEFF 		.word	-65544
 4735              		.cfi_endproc
 4736              	.LFE198:
 4738              		.section	.text.TIM_ETR_SetConfig,"ax",%progbits
 4739              		.align	2
 4740              		.global	TIM_ETR_SetConfig
 4741              		.thumb
ARM GAS  /tmp/ccrrJVNd.s 			page 202


 4742              		.thumb_func
 4744              	TIM_ETR_SetConfig:
 4745              	.LFB240:
6157:HALLIB/Src/stm32f7xx_hal_tim.c **** }
6158:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6159:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
6160:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Configures the TIMx External Trigger (ETR).
6161:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6162:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ExtTRGPrescaler The external Trigger Prescaler.
6163:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
6164:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV1: ETRP Prescaler OFF.
6165:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
6166:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
6167:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
6168:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIM_ExtTRGPolarity The external Trigger Polarity.
6169:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
6170:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
6171:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
6172:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  ExtTRGFilter External Trigger Filter.
6173:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
6174:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
6175:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
6176:HALLIB/Src/stm32f7xx_hal_tim.c **** void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
6177:HALLIB/Src/stm32f7xx_hal_tim.c ****                        uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
6178:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 4746              		.loc 1 6178 0
 4747              		.cfi_startproc
 4748              		@ args = 0, pretend = 0, frame = 0
 4749              		@ frame_needed = 0, uses_anonymous_args = 0
 4750              		@ link register save eliminated.
 4751              	.LVL520:
 4752 0000 10B4     		push	{r4}
 4753              	.LCFI60:
 4754              		.cfi_def_cfa_offset 4
 4755              		.cfi_offset 4, -4
 4756              	.LVL521:
6179:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr = 0;
6180:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6181:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr = TIMx->SMCR;
 4757              		.loc 1 6181 0
 4758 0002 8468     		ldr	r4, [r0, #8]
 4759              	.LVL522:
6182:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6183:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the ETR Bits */
6184:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 4760              		.loc 1 6184 0
 4761 0004 24F47F44 		bic	r4, r4, #65280
 4762              	.LVL523:
6185:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6186:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Prescaler, the Filter value and the Polarity */
6187:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 4763              		.loc 1 6187 0
 4764 0008 42EA0323 		orr	r3, r2, r3, lsl #8
 4765              	.LVL524:
 4766 000c 1943     		orrs	r1, r1, r3
 4767              	.LVL525:
 4768 000e 44EA0103 		orr	r3, r4, r1
ARM GAS  /tmp/ccrrJVNd.s 			page 203


 4769              	.LVL526:
6188:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6189:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Write to TIMx SMCR */
6190:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->SMCR = tmpsmcr;
 4770              		.loc 1 6190 0
 4771 0012 8360     		str	r3, [r0, #8]
6191:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
 4772              		.loc 1 6191 0
 4773 0014 5DF8044B 		ldr	r4, [sp], #4
 4774              	.LCFI61:
 4775              		.cfi_restore 4
 4776              		.cfi_def_cfa_offset 0
 4777 0018 7047     		bx	lr
 4778              		.cfi_endproc
 4779              	.LFE240:
 4781 001a 00BF     		.section	.text.HAL_TIM_ConfigOCrefClear,"ax",%progbits
 4782              		.align	2
 4783              		.weak	HAL_TIM_ConfigOCrefClear
 4784              		.thumb
 4785              		.thumb_func
 4787              	HAL_TIM_ConfigOCrefClear:
 4788              	.LFB204:
4121:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 4789              		.loc 1 4121 0
 4790              		.cfi_startproc
 4791              		@ args = 0, pretend = 0, frame = 0
 4792              		@ frame_needed = 0, uses_anonymous_args = 0
 4793              	.LVL527:
4128:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4794              		.loc 1 4128 0
 4795 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 4796 0004 012B     		cmp	r3, #1
 4797 0006 5BD0     		beq	.L327
4121:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 4798              		.loc 1 4121 0 discriminator 2
 4799 0008 70B5     		push	{r4, r5, r6, lr}
 4800              	.LCFI62:
 4801              		.cfi_def_cfa_offset 16
 4802              		.cfi_offset 4, -16
 4803              		.cfi_offset 5, -12
 4804              		.cfi_offset 6, -8
 4805              		.cfi_offset 14, -4
 4806 000a 1646     		mov	r6, r2
 4807 000c 0D46     		mov	r5, r1
 4808 000e 0446     		mov	r4, r0
4128:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4809              		.loc 1 4128 0 discriminator 2
 4810 0010 0123     		movs	r3, #1
 4811 0012 80F83C30 		strb	r3, [r0, #60]
4130:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4812              		.loc 1 4130 0 discriminator 2
 4813 0016 0223     		movs	r3, #2
 4814 0018 80F83D30 		strb	r3, [r0, #61]
4132:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4815              		.loc 1 4132 0 discriminator 2
 4816 001c 4B68     		ldr	r3, [r1, #4]
 4817 001e 012B     		cmp	r3, #1
ARM GAS  /tmp/ccrrJVNd.s 			page 204


 4818 0020 05D1     		bne	.L316
4138:HALLIB/Src/stm32f7xx_hal_tim.c ****                       sClearInputConfig->ClearInputPrescaler,
 4819              		.loc 1 4138 0
 4820 0022 0B69     		ldr	r3, [r1, #16]
 4821 0024 8A68     		ldr	r2, [r1, #8]
 4822              	.LVL528:
 4823 0026 C968     		ldr	r1, [r1, #12]
 4824              	.LVL529:
 4825 0028 0068     		ldr	r0, [r0]
 4826              	.LVL530:
 4827 002a FFF7FEFF 		bl	TIM_ETR_SetConfig
 4828              	.LVL531:
 4829              	.L316:
4144:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4830              		.loc 1 4144 0
 4831 002e 0C2E     		cmp	r6, #12
 4832 0030 3FD8     		bhi	.L317
 4833 0032 DFE806F0 		tbb	[pc, r6]
 4834              	.L319:
 4835 0036 07       		.byte	(.L318-.L319)/2
 4836 0037 3E       		.byte	(.L317-.L319)/2
 4837 0038 3E       		.byte	(.L317-.L319)/2
 4838 0039 3E       		.byte	(.L317-.L319)/2
 4839 003a 15       		.byte	(.L320-.L319)/2
 4840 003b 3E       		.byte	(.L317-.L319)/2
 4841 003c 3E       		.byte	(.L317-.L319)/2
 4842 003d 3E       		.byte	(.L317-.L319)/2
 4843 003e 23       		.byte	(.L321-.L319)/2
 4844 003f 3E       		.byte	(.L317-.L319)/2
 4845 0040 3E       		.byte	(.L317-.L319)/2
 4846 0041 3E       		.byte	(.L317-.L319)/2
 4847 0042 31       		.byte	(.L322-.L319)/2
 4848 0043 00       		.p2align 1
 4849              	.L318:
4148:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
 4850              		.loc 1 4148 0
 4851 0044 2B68     		ldr	r3, [r5]
 4852 0046 2BB1     		cbz	r3, .L323
4151:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4853              		.loc 1 4151 0
 4854 0048 2268     		ldr	r2, [r4]
 4855 004a 9369     		ldr	r3, [r2, #24]
 4856 004c 43F08003 		orr	r3, r3, #128
 4857 0050 9361     		str	r3, [r2, #24]
 4858 0052 2EE0     		b	.L317
 4859              	.L323:
4156:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4860              		.loc 1 4156 0
 4861 0054 2268     		ldr	r2, [r4]
 4862 0056 9369     		ldr	r3, [r2, #24]
 4863 0058 23F08003 		bic	r3, r3, #128
 4864 005c 9361     		str	r3, [r2, #24]
 4865 005e 28E0     		b	.L317
 4866              	.L320:
4163:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
 4867              		.loc 1 4163 0
 4868 0060 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccrrJVNd.s 			page 205


 4869 0062 2BB1     		cbz	r3, .L324
4166:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4870              		.loc 1 4166 0
 4871 0064 2268     		ldr	r2, [r4]
 4872 0066 9369     		ldr	r3, [r2, #24]
 4873 0068 43F40043 		orr	r3, r3, #32768
 4874 006c 9361     		str	r3, [r2, #24]
 4875 006e 20E0     		b	.L317
 4876              	.L324:
4171:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4877              		.loc 1 4171 0
 4878 0070 2268     		ldr	r2, [r4]
 4879 0072 9369     		ldr	r3, [r2, #24]
 4880 0074 23F40043 		bic	r3, r3, #32768
 4881 0078 9361     		str	r3, [r2, #24]
 4882 007a 1AE0     		b	.L317
 4883              	.L321:
4178:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
 4884              		.loc 1 4178 0
 4885 007c 2B68     		ldr	r3, [r5]
 4886 007e 2BB1     		cbz	r3, .L325
4181:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4887              		.loc 1 4181 0
 4888 0080 2268     		ldr	r2, [r4]
 4889 0082 D369     		ldr	r3, [r2, #28]
 4890 0084 43F08003 		orr	r3, r3, #128
 4891 0088 D361     		str	r3, [r2, #28]
 4892 008a 12E0     		b	.L317
 4893              	.L325:
4186:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4894              		.loc 1 4186 0
 4895 008c 2268     		ldr	r2, [r4]
 4896 008e D369     		ldr	r3, [r2, #28]
 4897 0090 23F08003 		bic	r3, r3, #128
 4898 0094 D361     		str	r3, [r2, #28]
 4899 0096 0CE0     		b	.L317
 4900              	.L322:
4193:HALLIB/Src/stm32f7xx_hal_tim.c ****       {
 4901              		.loc 1 4193 0
 4902 0098 2B68     		ldr	r3, [r5]
 4903 009a 2BB1     		cbz	r3, .L326
4196:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4904              		.loc 1 4196 0
 4905 009c 2268     		ldr	r2, [r4]
 4906 009e D369     		ldr	r3, [r2, #28]
 4907 00a0 43F40043 		orr	r3, r3, #32768
 4908 00a4 D361     		str	r3, [r2, #28]
 4909 00a6 04E0     		b	.L317
 4910              	.L326:
4201:HALLIB/Src/stm32f7xx_hal_tim.c ****       }
 4911              		.loc 1 4201 0
 4912 00a8 2268     		ldr	r2, [r4]
 4913 00aa D369     		ldr	r3, [r2, #28]
 4914 00ac 23F40043 		bic	r3, r3, #32768
 4915 00b0 D361     		str	r3, [r2, #28]
 4916              	.L317:
4209:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 206


 4917              		.loc 1 4209 0
 4918 00b2 0123     		movs	r3, #1
 4919 00b4 84F83D30 		strb	r3, [r4, #61]
4211:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4920              		.loc 1 4211 0
 4921 00b8 0020     		movs	r0, #0
 4922 00ba 84F83C00 		strb	r0, [r4, #60]
4213:HALLIB/Src/stm32f7xx_hal_tim.c **** }  
 4923              		.loc 1 4213 0
 4924 00be 70BD     		pop	{r4, r5, r6, pc}
 4925              	.LVL532:
 4926              	.L327:
 4927              	.LCFI63:
 4928              		.cfi_def_cfa_offset 0
 4929              		.cfi_restore 4
 4930              		.cfi_restore 5
 4931              		.cfi_restore 6
 4932              		.cfi_restore 14
4128:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4933              		.loc 1 4128 0
 4934 00c0 0220     		movs	r0, #2
 4935              	.LVL533:
 4936 00c2 7047     		bx	lr
 4937              		.cfi_endproc
 4938              	.LFE204:
 4940              		.section	.text.HAL_TIM_ConfigClockSource,"ax",%progbits
 4941              		.align	2
 4942              		.global	HAL_TIM_ConfigClockSource
 4943              		.thumb
 4944              		.thumb_func
 4946              	HAL_TIM_ConfigClockSource:
 4947              	.LFB205:
4225:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr = 0;
 4948              		.loc 1 4225 0
 4949              		.cfi_startproc
 4950              		@ args = 0, pretend = 0, frame = 0
 4951              		@ frame_needed = 0, uses_anonymous_args = 0
 4952              	.LVL534:
4229:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4953              		.loc 1 4229 0
 4954 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 4955 0004 012B     		cmp	r3, #1
 4956 0006 00F08380 		beq	.L346
4225:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr = 0;
 4957              		.loc 1 4225 0 discriminator 2
 4958 000a 10B5     		push	{r4, lr}
 4959              	.LCFI64:
 4960              		.cfi_def_cfa_offset 8
 4961              		.cfi_offset 4, -8
 4962              		.cfi_offset 14, -4
 4963 000c 0446     		mov	r4, r0
4229:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4964              		.loc 1 4229 0 discriminator 2
 4965 000e 0123     		movs	r3, #1
 4966 0010 80F83C30 		strb	r3, [r0, #60]
4231:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4967              		.loc 1 4231 0 discriminator 2
ARM GAS  /tmp/ccrrJVNd.s 			page 207


 4968 0014 0223     		movs	r3, #2
 4969 0016 80F83D30 		strb	r3, [r0, #61]
4237:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 4970              		.loc 1 4237 0 discriminator 2
 4971 001a 0268     		ldr	r2, [r0]
 4972 001c 9068     		ldr	r0, [r2, #8]
 4973              	.LVL535:
4239:HALLIB/Src/stm32f7xx_hal_tim.c ****   htim->Instance->SMCR = tmpsmcr;
 4974              		.loc 1 4239 0 discriminator 2
 4975 001e 3D4B     		ldr	r3, .L349
 4976 0020 0340     		ands	r3, r3, r0
 4977              	.LVL536:
4240:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 4978              		.loc 1 4240 0 discriminator 2
 4979 0022 9360     		str	r3, [r2, #8]
4242:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 4980              		.loc 1 4242 0 discriminator 2
 4981 0024 0B68     		ldr	r3, [r1]
 4982              	.LVL537:
 4983 0026 402B     		cmp	r3, #64
 4984 0028 4ED0     		beq	.L333
 4985 002a 0AD8     		bhi	.L334
 4986 002c 102B     		cmp	r3, #16
 4987 002e 5AD0     		beq	.L335
 4988 0030 02D8     		bhi	.L336
 4989 0032 002B     		cmp	r3, #0
 4990 0034 52D0     		beq	.L337
 4991 0036 64E0     		b	.L332
 4992              	.L336:
 4993 0038 202B     		cmp	r3, #32
 4994 003a 59D0     		beq	.L338
 4995 003c 302B     		cmp	r3, #48
 4996 003e 5CD0     		beq	.L339
 4997 0040 5FE0     		b	.L332
 4998              	.L334:
 4999 0042 702B     		cmp	r3, #112
 5000 0044 12D0     		beq	.L340
 5001 0046 04D8     		bhi	.L341
 5002 0048 502B     		cmp	r3, #80
 5003 004a 29D0     		beq	.L342
 5004 004c 602B     		cmp	r3, #96
 5005 004e 31D0     		beq	.L343
 5006 0050 57E0     		b	.L332
 5007              	.L341:
 5008 0052 B3F5805F 		cmp	r3, #4096
 5009 0056 03D0     		beq	.L344
 5010 0058 B3F5005F 		cmp	r3, #8192
 5011 005c 14D0     		beq	.L345
 5012 005e 50E0     		b	.L332
 5013              	.L344:
4248:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5014              		.loc 1 4248 0
 5015 0060 2268     		ldr	r2, [r4]
 5016              	.LVL538:
 5017 0062 9168     		ldr	r1, [r2, #8]
 5018              	.LVL539:
 5019 0064 2C4B     		ldr	r3, .L349+4
ARM GAS  /tmp/ccrrJVNd.s 			page 208


 5020 0066 0B40     		ands	r3, r3, r1
 5021 0068 9360     		str	r3, [r2, #8]
4250:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5022              		.loc 1 4250 0
 5023 006a 4AE0     		b	.L332
 5024              	.LVL540:
 5025              	.L340:
4259:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPrescaler, 
 5026              		.loc 1 4259 0
 5027 006c CB68     		ldr	r3, [r1, #12]
 5028 006e 4A68     		ldr	r2, [r1, #4]
 5029              	.LVL541:
 5030 0070 8968     		ldr	r1, [r1, #8]
 5031              	.LVL542:
 5032 0072 2068     		ldr	r0, [r4]
 5033              	.LVL543:
 5034 0074 FFF7FEFF 		bl	TIM_ETR_SetConfig
 5035              	.LVL544:
4264:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Reset the SMS and TS Bits */
 5036              		.loc 1 4264 0
 5037 0078 2268     		ldr	r2, [r4]
 5038 007a 9168     		ldr	r1, [r2, #8]
 5039              	.LVL545:
4266:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Select the External clock mode1 and the ETRF trigger */
 5040              		.loc 1 4266 0
 5041 007c 274B     		ldr	r3, .L349+8
 5042 007e 0B40     		ands	r3, r3, r1
 5043              	.LVL546:
4268:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Write to TIMx SMCR */
 5044              		.loc 1 4268 0
 5045 0080 43F07703 		orr	r3, r3, #119
 5046              	.LVL547:
4270:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5047              		.loc 1 4270 0
 5048 0084 9360     		str	r3, [r2, #8]
4272:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5049              		.loc 1 4272 0
 5050 0086 3CE0     		b	.L332
 5051              	.LVL548:
 5052              	.L345:
4282:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPrescaler, 
 5053              		.loc 1 4282 0
 5054 0088 CB68     		ldr	r3, [r1, #12]
 5055 008a 4A68     		ldr	r2, [r1, #4]
 5056              	.LVL549:
 5057 008c 8968     		ldr	r1, [r1, #8]
 5058              	.LVL550:
 5059 008e 2068     		ldr	r0, [r4]
 5060              	.LVL551:
 5061 0090 FFF7FEFF 		bl	TIM_ETR_SetConfig
 5062              	.LVL552:
4287:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5063              		.loc 1 4287 0
 5064 0094 2268     		ldr	r2, [r4]
 5065 0096 9368     		ldr	r3, [r2, #8]
 5066 0098 43F48043 		orr	r3, r3, #16384
 5067 009c 9360     		str	r3, [r2, #8]
ARM GAS  /tmp/ccrrJVNd.s 			page 209


4289:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5068              		.loc 1 4289 0
 5069 009e 30E0     		b	.L332
 5070              	.LVL553:
 5071              	.L342:
4299:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPolarity, 
 5072              		.loc 1 4299 0
 5073 00a0 CA68     		ldr	r2, [r1, #12]
 5074              	.LVL554:
 5075 00a2 4968     		ldr	r1, [r1, #4]
 5076              	.LVL555:
 5077 00a4 2068     		ldr	r0, [r4]
 5078              	.LVL556:
 5079 00a6 FFF7FEFF 		bl	TIM_TI1_ConfigInputStage
 5080              	.LVL557:
4302:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5081              		.loc 1 4302 0
 5082 00aa 5021     		movs	r1, #80
 5083 00ac 2068     		ldr	r0, [r4]
 5084 00ae FFF7FEFF 		bl	TIM_ITRx_SetConfig
 5085              	.LVL558:
4304:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_TI2:
 5086              		.loc 1 4304 0
 5087 00b2 26E0     		b	.L332
 5088              	.LVL559:
 5089              	.L343:
4313:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPolarity, 
 5090              		.loc 1 4313 0
 5091 00b4 CA68     		ldr	r2, [r1, #12]
 5092              	.LVL560:
 5093 00b6 4968     		ldr	r1, [r1, #4]
 5094              	.LVL561:
 5095 00b8 2068     		ldr	r0, [r4]
 5096              	.LVL562:
 5097 00ba FFF7FEFF 		bl	TIM_TI2_ConfigInputStage
 5098              	.LVL563:
4316:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5099              		.loc 1 4316 0
 5100 00be 6021     		movs	r1, #96
 5101 00c0 2068     		ldr	r0, [r4]
 5102 00c2 FFF7FEFF 		bl	TIM_ITRx_SetConfig
 5103              	.LVL564:
4318:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_TI1ED:
 5104              		.loc 1 4318 0
 5105 00c6 1CE0     		b	.L332
 5106              	.LVL565:
 5107              	.L333:
4326:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sClockSourceConfig->ClockPolarity,
 5108              		.loc 1 4326 0
 5109 00c8 CA68     		ldr	r2, [r1, #12]
 5110              	.LVL566:
 5111 00ca 4968     		ldr	r1, [r1, #4]
 5112              	.LVL567:
 5113 00cc 2068     		ldr	r0, [r4]
 5114              	.LVL568:
 5115 00ce FFF7FEFF 		bl	TIM_TI1_ConfigInputStage
 5116              	.LVL569:
ARM GAS  /tmp/ccrrJVNd.s 			page 210


4329:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5117              		.loc 1 4329 0
 5118 00d2 4021     		movs	r1, #64
 5119 00d4 2068     		ldr	r0, [r4]
 5120 00d6 FFF7FEFF 		bl	TIM_ITRx_SetConfig
 5121              	.LVL570:
4331:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR0:
 5122              		.loc 1 4331 0
 5123 00da 12E0     		b	.L332
 5124              	.LVL571:
 5125              	.L337:
4335:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5126              		.loc 1 4335 0
 5127 00dc 0021     		movs	r1, #0
 5128              	.LVL572:
 5129 00de 2068     		ldr	r0, [r4]
 5130 00e0 FFF7FEFF 		bl	TIM_ITRx_SetConfig
 5131              	.LVL573:
4337:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR1:
 5132              		.loc 1 4337 0
 5133 00e4 0DE0     		b	.L332
 5134              	.LVL574:
 5135              	.L335:
4341:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5136              		.loc 1 4341 0
 5137 00e6 1021     		movs	r1, #16
 5138              	.LVL575:
 5139 00e8 2068     		ldr	r0, [r4]
 5140 00ea FFF7FEFF 		bl	TIM_ITRx_SetConfig
 5141              	.LVL576:
4343:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR2:
 5142              		.loc 1 4343 0
 5143 00ee 08E0     		b	.L332
 5144              	.LVL577:
 5145              	.L338:
4347:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5146              		.loc 1 4347 0
 5147 00f0 2021     		movs	r1, #32
 5148              	.LVL578:
 5149 00f2 2068     		ldr	r0, [r4]
 5150 00f4 FFF7FEFF 		bl	TIM_ITRx_SetConfig
 5151              	.LVL579:
4349:HALLIB/Src/stm32f7xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR3:
 5152              		.loc 1 4349 0
 5153 00f8 03E0     		b	.L332
 5154              	.LVL580:
 5155              	.L339:
4353:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5156              		.loc 1 4353 0
 5157 00fa 3021     		movs	r1, #48
 5158              	.LVL581:
 5159 00fc 2068     		ldr	r0, [r4]
 5160 00fe FFF7FEFF 		bl	TIM_ITRx_SetConfig
 5161              	.LVL582:
 5162              	.L332:
4360:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5163              		.loc 1 4360 0
ARM GAS  /tmp/ccrrJVNd.s 			page 211


 5164 0102 0123     		movs	r3, #1
 5165 0104 84F83D30 		strb	r3, [r4, #61]
4362:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5166              		.loc 1 4362 0
 5167 0108 0020     		movs	r0, #0
 5168 010a 84F83C00 		strb	r0, [r4, #60]
4364:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 5169              		.loc 1 4364 0
 5170 010e 10BD     		pop	{r4, pc}
 5171              	.LVL583:
 5172              	.L346:
 5173              	.LCFI65:
 5174              		.cfi_def_cfa_offset 0
 5175              		.cfi_restore 4
 5176              		.cfi_restore 14
4229:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5177              		.loc 1 4229 0
 5178 0110 0220     		movs	r0, #2
 5179              	.LVL584:
 5180 0112 7047     		bx	lr
 5181              	.L350:
 5182              		.align	2
 5183              	.L349:
 5184 0114 8800FEFF 		.word	-130936
 5185 0118 F8FFFEFF 		.word	-65544
 5186 011c 88FFFEFF 		.word	-65656
 5187              		.cfi_endproc
 5188              	.LFE205:
 5190              		.section	.text.HAL_TIM_SlaveConfigSynchronization,"ax",%progbits
 5191              		.align	2
 5192              		.global	HAL_TIM_SlaveConfigSynchronization
 5193              		.thumb
 5194              		.thumb_func
 5196              	HAL_TIM_SlaveConfigSynchronization:
 5197              	.LFB207:
4414:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr  = 0;
 5198              		.loc 1 4414 0
 5199              		.cfi_startproc
 5200              		@ args = 0, pretend = 0, frame = 0
 5201              		@ frame_needed = 0, uses_anonymous_args = 0
 5202              	.LVL585:
4424:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5203              		.loc 1 4424 0
 5204 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 5205 0004 012B     		cmp	r3, #1
 5206 0006 47D0     		beq	.L359
4414:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr  = 0;
 5207              		.loc 1 4414 0 discriminator 2
 5208 0008 10B5     		push	{r4, lr}
 5209              	.LCFI66:
 5210              		.cfi_def_cfa_offset 8
 5211              		.cfi_offset 4, -8
 5212              		.cfi_offset 14, -4
 5213 000a 0446     		mov	r4, r0
4424:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5214              		.loc 1 4424 0 discriminator 2
 5215 000c 0123     		movs	r3, #1
ARM GAS  /tmp/ccrrJVNd.s 			page 212


 5216 000e 80F83C30 		strb	r3, [r0, #60]
4426:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5217              		.loc 1 4426 0 discriminator 2
 5218 0012 0223     		movs	r3, #2
 5219 0014 80F83D30 		strb	r3, [r0, #61]
4429:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5220              		.loc 1 4429 0 discriminator 2
 5221 0018 0068     		ldr	r0, [r0]
 5222              	.LVL586:
 5223 001a 8368     		ldr	r3, [r0, #8]
 5224              	.LVL587:
4432:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Input Trigger source */
 5225              		.loc 1 4432 0 discriminator 2
 5226 001c 23F07002 		bic	r2, r3, #112
 5227              	.LVL588:
4434:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5228              		.loc 1 4434 0 discriminator 2
 5229 0020 4B68     		ldr	r3, [r1, #4]
 5230 0022 1343     		orrs	r3, r3, r2
 5231              	.LVL589:
4437:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the slave mode */
 5232              		.loc 1 4437 0 discriminator 2
 5233 0024 1D4A     		ldr	r2, .L362
 5234 0026 1A40     		ands	r2, r2, r3
 5235              	.LVL590:
4439:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5236              		.loc 1 4439 0 discriminator 2
 5237 0028 0B68     		ldr	r3, [r1]
 5238 002a 1343     		orrs	r3, r3, r2
 5239              	.LVL591:
4442:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5240              		.loc 1 4442 0 discriminator 2
 5241 002c 8360     		str	r3, [r0, #8]
4445:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 5242              		.loc 1 4445 0 discriminator 2
 5243 002e 4B68     		ldr	r3, [r1, #4]
 5244              	.LVL592:
 5245 0030 502B     		cmp	r3, #80
 5246 0032 1FD0     		beq	.L354
 5247 0034 02D8     		bhi	.L355
 5248 0036 402B     		cmp	r3, #64
 5249 0038 0BD0     		beq	.L356
 5250 003a 26E0     		b	.L353
 5251              	.L355:
 5252 003c 602B     		cmp	r3, #96
 5253 003e 1FD0     		beq	.L357
 5254 0040 702B     		cmp	r3, #112
 5255 0042 22D1     		bne	.L353
4455:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sSlaveConfig->TriggerPrescaler, 
 5256              		.loc 1 4455 0
 5257 0044 0B69     		ldr	r3, [r1, #16]
 5258 0046 8A68     		ldr	r2, [r1, #8]
 5259 0048 C968     		ldr	r1, [r1, #12]
 5260              	.LVL593:
 5261 004a 2068     		ldr	r0, [r4]
 5262              	.LVL594:
 5263 004c FFF7FEFF 		bl	TIM_ETR_SetConfig
ARM GAS  /tmp/ccrrJVNd.s 			page 213


 5264              	.LVL595:
4460:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5265              		.loc 1 4460 0
 5266 0050 1BE0     		b	.L353
 5267              	.LVL596:
 5268              	.L356:
4469:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCER &= ~TIM_CCER_CC1E;
 5269              		.loc 1 4469 0
 5270 0052 2368     		ldr	r3, [r4]
 5271 0054 186A     		ldr	r0, [r3, #32]
 5272              	.LVL597:
4470:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccmr1 = htim->Instance->CCMR1;    
 5273              		.loc 1 4470 0
 5274 0056 1A6A     		ldr	r2, [r3, #32]
 5275 0058 22F00102 		bic	r2, r2, #1
 5276 005c 1A62     		str	r2, [r3, #32]
4471:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 5277              		.loc 1 4471 0
 5278 005e 2268     		ldr	r2, [r4]
 5279 0060 9369     		ldr	r3, [r2, #24]
 5280              	.LVL598:
4474:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
 5281              		.loc 1 4474 0
 5282 0062 23F0F003 		bic	r3, r3, #240
 5283              	.LVL599:
4475:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 5284              		.loc 1 4475 0
 5285 0066 0969     		ldr	r1, [r1, #16]
 5286              	.LVL600:
 5287 0068 43EA0113 		orr	r3, r3, r1, lsl #4
 5288              	.LVL601:
4478:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCER = tmpccer;                               
 5289              		.loc 1 4478 0
 5290 006c 9361     		str	r3, [r2, #24]
4479:HALLIB/Src/stm32f7xx_hal_tim.c ****                                
 5291              		.loc 1 4479 0
 5292 006e 2368     		ldr	r3, [r4]
 5293              	.LVL602:
 5294 0070 1862     		str	r0, [r3, #32]
 5295              	.LVL603:
4482:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5296              		.loc 1 4482 0
 5297 0072 0AE0     		b	.L353
 5298              	.LVL604:
 5299              	.L354:
4492:HALLIB/Src/stm32f7xx_hal_tim.c ****                                sSlaveConfig->TriggerPolarity,
 5300              		.loc 1 4492 0
 5301 0074 0A69     		ldr	r2, [r1, #16]
 5302 0076 8968     		ldr	r1, [r1, #8]
 5303              	.LVL605:
 5304 0078 2068     		ldr	r0, [r4]
 5305              	.LVL606:
 5306 007a FFF7FEFF 		bl	TIM_TI1_ConfigInputStage
 5307              	.LVL607:
4496:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5308              		.loc 1 4496 0
 5309 007e 04E0     		b	.L353
ARM GAS  /tmp/ccrrJVNd.s 			page 214


 5310              	.LVL608:
 5311              	.L357:
4506:HALLIB/Src/stm32f7xx_hal_tim.c ****                                 sSlaveConfig->TriggerPolarity,
 5312              		.loc 1 4506 0
 5313 0080 0A69     		ldr	r2, [r1, #16]
 5314 0082 8968     		ldr	r1, [r1, #8]
 5315              	.LVL609:
 5316 0084 2068     		ldr	r0, [r4]
 5317              	.LVL610:
 5318 0086 FFF7FEFF 		bl	TIM_TI2_ConfigInputStage
 5319              	.LVL611:
 5320              	.L353:
4544:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 5321              		.loc 1 4544 0
 5322 008a 0123     		movs	r3, #1
 5323 008c 84F83D30 		strb	r3, [r4, #61]
4546:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5324              		.loc 1 4546 0
 5325 0090 0020     		movs	r0, #0
 5326 0092 84F83C00 		strb	r0, [r4, #60]
4548:HALLIB/Src/stm32f7xx_hal_tim.c **** } 
 5327              		.loc 1 4548 0
 5328 0096 10BD     		pop	{r4, pc}
 5329              	.LVL612:
 5330              	.L359:
 5331              	.LCFI67:
 5332              		.cfi_def_cfa_offset 0
 5333              		.cfi_restore 4
 5334              		.cfi_restore 14
4424:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5335              		.loc 1 4424 0
 5336 0098 0220     		movs	r0, #2
 5337              	.LVL613:
 5338 009a 7047     		bx	lr
 5339              	.L363:
 5340              		.align	2
 5341              	.L362:
 5342 009c F8FFFEFF 		.word	-65544
 5343              		.cfi_endproc
 5344              	.LFE207:
 5346              		.section	.text.TIM_SlaveTimer_SetConfig,"ax",%progbits
 5347              		.align	2
 5348              		.thumb
 5349              		.thumb_func
 5351              	TIM_SlaveTimer_SetConfig:
 5352              	.LFB232:
5738:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmpsmcr = 0;
 5353              		.loc 1 5738 0
 5354              		.cfi_startproc
 5355              		@ args = 0, pretend = 0, frame = 0
 5356              		@ frame_needed = 0, uses_anonymous_args = 0
 5357              	.LVL614:
 5358 0000 10B5     		push	{r4, lr}
 5359              	.LCFI68:
 5360              		.cfi_def_cfa_offset 8
 5361              		.cfi_offset 4, -8
 5362              		.cfi_offset 14, -4
ARM GAS  /tmp/ccrrJVNd.s 			page 215


 5363              	.LVL615:
5744:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5364              		.loc 1 5744 0
 5365 0002 0468     		ldr	r4, [r0]
 5366 0004 A368     		ldr	r3, [r4, #8]
 5367              	.LVL616:
5747:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the Input Trigger source */
 5368              		.loc 1 5747 0
 5369 0006 23F07002 		bic	r2, r3, #112
 5370              	.LVL617:
5749:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5371              		.loc 1 5749 0
 5372 000a 4B68     		ldr	r3, [r1, #4]
 5373 000c 1343     		orrs	r3, r3, r2
 5374              	.LVL618:
5752:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set the slave mode */
 5375              		.loc 1 5752 0
 5376 000e 1A4A     		ldr	r2, .L372
 5377 0010 1A40     		ands	r2, r2, r3
 5378              	.LVL619:
5754:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5379              		.loc 1 5754 0
 5380 0012 0B68     		ldr	r3, [r1]
 5381 0014 1343     		orrs	r3, r3, r2
 5382              	.LVL620:
5757:HALLIB/Src/stm32f7xx_hal_tim.c ****  
 5383              		.loc 1 5757 0
 5384 0016 A360     		str	r3, [r4, #8]
5760:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 5385              		.loc 1 5760 0
 5386 0018 4B68     		ldr	r3, [r1, #4]
 5387              	.LVL621:
 5388 001a 502B     		cmp	r3, #80
 5389 001c 1FD0     		beq	.L366
 5390 001e 02D8     		bhi	.L367
 5391 0020 402B     		cmp	r3, #64
 5392 0022 0BD0     		beq	.L368
 5393 0024 10BD     		pop	{r4, pc}
 5394              	.LVL622:
 5395              	.L367:
 5396 0026 602B     		cmp	r3, #96
 5397 0028 1FD0     		beq	.L369
 5398 002a 702B     		cmp	r3, #112
 5399 002c 22D1     		bne	.L364
5770:HALLIB/Src/stm32f7xx_hal_tim.c ****                         sSlaveConfig->TriggerPrescaler, 
 5400              		.loc 1 5770 0
 5401 002e 0B69     		ldr	r3, [r1, #16]
 5402 0030 8A68     		ldr	r2, [r1, #8]
 5403 0032 C968     		ldr	r1, [r1, #12]
 5404              	.LVL623:
 5405 0034 0068     		ldr	r0, [r0]
 5406              	.LVL624:
 5407 0036 FFF7FEFF 		bl	TIM_ETR_SetConfig
 5408              	.LVL625:
5775:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5409              		.loc 1 5775 0
 5410 003a 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccrrJVNd.s 			page 216


 5411              	.LVL626:
 5412              	.L368:
5785:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCER &= ~TIM_CCER_CC1E;
 5413              		.loc 1 5785 0
 5414 003c 0368     		ldr	r3, [r0]
 5415 003e 1C6A     		ldr	r4, [r3, #32]
 5416              	.LVL627:
5786:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccmr1 = htim->Instance->CCMR1;    
 5417              		.loc 1 5786 0
 5418 0040 1A6A     		ldr	r2, [r3, #32]
 5419 0042 22F00102 		bic	r2, r2, #1
 5420 0046 1A62     		str	r2, [r3, #32]
5787:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 5421              		.loc 1 5787 0
 5422 0048 0268     		ldr	r2, [r0]
 5423 004a 9369     		ldr	r3, [r2, #24]
 5424              	.LVL628:
5790:HALLIB/Src/stm32f7xx_hal_tim.c ****       tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
 5425              		.loc 1 5790 0
 5426 004c 23F0F003 		bic	r3, r3, #240
 5427              	.LVL629:
5791:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 5428              		.loc 1 5791 0
 5429 0050 0969     		ldr	r1, [r1, #16]
 5430              	.LVL630:
 5431 0052 43EA0113 		orr	r3, r3, r1, lsl #4
 5432              	.LVL631:
5794:HALLIB/Src/stm32f7xx_hal_tim.c ****       htim->Instance->CCER = tmpccer;                               
 5433              		.loc 1 5794 0
 5434 0056 9361     		str	r3, [r2, #24]
5795:HALLIB/Src/stm32f7xx_hal_tim.c ****                                
 5435              		.loc 1 5795 0
 5436 0058 0368     		ldr	r3, [r0]
 5437              	.LVL632:
 5438 005a 1C62     		str	r4, [r3, #32]
 5439              	.LVL633:
5798:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5440              		.loc 1 5798 0
 5441 005c 10BD     		pop	{r4, pc}
 5442              	.LVL634:
 5443              	.L366:
5808:HALLIB/Src/stm32f7xx_hal_tim.c ****                                sSlaveConfig->TriggerPolarity,
 5444              		.loc 1 5808 0
 5445 005e 0A69     		ldr	r2, [r1, #16]
 5446 0060 8968     		ldr	r1, [r1, #8]
 5447              	.LVL635:
 5448 0062 0068     		ldr	r0, [r0]
 5449              	.LVL636:
 5450 0064 FFF7FEFF 		bl	TIM_TI1_ConfigInputStage
 5451              	.LVL637:
5812:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5452              		.loc 1 5812 0
 5453 0068 10BD     		pop	{r4, pc}
 5454              	.LVL638:
 5455              	.L369:
5822:HALLIB/Src/stm32f7xx_hal_tim.c ****                                 sSlaveConfig->TriggerPolarity,
 5456              		.loc 1 5822 0
ARM GAS  /tmp/ccrrJVNd.s 			page 217


 5457 006a 0A69     		ldr	r2, [r1, #16]
 5458 006c 8968     		ldr	r1, [r1, #8]
 5459              	.LVL639:
 5460 006e 0068     		ldr	r0, [r0]
 5461              	.LVL640:
 5462 0070 FFF7FEFF 		bl	TIM_TI2_ConfigInputStage
 5463              	.LVL641:
 5464              	.L364:
 5465 0074 10BD     		pop	{r4, pc}
 5466              	.L373:
 5467 0076 00BF     		.align	2
 5468              	.L372:
 5469 0078 F8FFFEFF 		.word	-65544
 5470              		.cfi_endproc
 5471              	.LFE232:
 5473              		.section	.text.HAL_TIM_SlaveConfigSynchronization_IT,"ax",%progbits
 5474              		.align	2
 5475              		.global	HAL_TIM_SlaveConfigSynchronization_IT
 5476              		.thumb
 5477              		.thumb_func
 5479              	HAL_TIM_SlaveConfigSynchronization_IT:
 5480              	.LFB208:
4562:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 5481              		.loc 1 4562 0
 5482              		.cfi_startproc
 5483              		@ args = 0, pretend = 0, frame = 0
 5484              		@ frame_needed = 0, uses_anonymous_args = 0
 5485              	.LVL642:
 5486 0000 38B5     		push	{r3, r4, r5, lr}
 5487              	.LCFI69:
 5488              		.cfi_def_cfa_offset 16
 5489              		.cfi_offset 3, -16
 5490              		.cfi_offset 4, -12
 5491              		.cfi_offset 5, -8
 5492              		.cfi_offset 14, -4
4568:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5493              		.loc 1 4568 0
 5494 0002 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 5495 0006 012B     		cmp	r3, #1
 5496 0008 18D0     		beq	.L376
 5497 000a 0446     		mov	r4, r0
4568:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5498              		.loc 1 4568 0 is_stmt 0 discriminator 2
 5499 000c 0125     		movs	r5, #1
 5500 000e 80F83C50 		strb	r5, [r0, #60]
4570:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5501              		.loc 1 4570 0 is_stmt 1 discriminator 2
 5502 0012 0223     		movs	r3, #2
 5503 0014 80F83D30 		strb	r3, [r0, #61]
4572:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5504              		.loc 1 4572 0 discriminator 2
 5505 0018 FFF7FEFF 		bl	TIM_SlaveTimer_SetConfig
 5506              	.LVL643:
4575:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5507              		.loc 1 4575 0 discriminator 2
 5508 001c 2268     		ldr	r2, [r4]
 5509 001e D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccrrJVNd.s 			page 218


 5510 0020 43F04003 		orr	r3, r3, #64
 5511 0024 D360     		str	r3, [r2, #12]
4578:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5512              		.loc 1 4578 0 discriminator 2
 5513 0026 2268     		ldr	r2, [r4]
 5514 0028 D368     		ldr	r3, [r2, #12]
 5515 002a 23F48043 		bic	r3, r3, #16384
 5516 002e D360     		str	r3, [r2, #12]
4580:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 5517              		.loc 1 4580 0 discriminator 2
 5518 0030 84F83D50 		strb	r5, [r4, #61]
4582:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5519              		.loc 1 4582 0 discriminator 2
 5520 0034 0020     		movs	r0, #0
 5521 0036 84F83C00 		strb	r0, [r4, #60]
4584:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 5522              		.loc 1 4584 0 discriminator 2
 5523 003a 38BD     		pop	{r3, r4, r5, pc}
 5524              	.LVL644:
 5525              	.L376:
4568:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5526              		.loc 1 4568 0
 5527 003c 0220     		movs	r0, #2
 5528              	.LVL645:
4585:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5529              		.loc 1 4585 0
 5530 003e 38BD     		pop	{r3, r4, r5, pc}
 5531              		.cfi_endproc
 5532              	.LFE208:
 5534              		.section	.text.TIM_CCxChannelCmd,"ax",%progbits
 5535              		.align	2
 5536              		.global	TIM_CCxChannelCmd
 5537              		.thumb
 5538              		.thumb_func
 5540              	TIM_CCxChannelCmd:
 5541              	.LFB241:
6192:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6193:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
6194:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel x.
6195:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6196:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  Channel specifies the TIM Channel
6197:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be one of the following values:
6198:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
6199:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
6200:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
6201:HALLIB/Src/stm32f7xx_hal_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
6202:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @param  ChannelState specifies the TIM Channel CCxE bit new state.
6203:HALLIB/Src/stm32f7xx_hal_tim.c ****   *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
6204:HALLIB/Src/stm32f7xx_hal_tim.c ****   * @retval None
6205:HALLIB/Src/stm32f7xx_hal_tim.c ****   */
6206:HALLIB/Src/stm32f7xx_hal_tim.c **** void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
6207:HALLIB/Src/stm32f7xx_hal_tim.c **** {
 5542              		.loc 1 6207 0
 5543              		.cfi_startproc
 5544              		@ args = 0, pretend = 0, frame = 0
 5545              		@ frame_needed = 0, uses_anonymous_args = 0
 5546              		@ link register save eliminated.
ARM GAS  /tmp/ccrrJVNd.s 			page 219


 5547              	.LVL646:
 5548 0000 10B4     		push	{r4}
 5549              	.LCFI70:
 5550              		.cfi_def_cfa_offset 4
 5551              		.cfi_offset 4, -4
 5552              	.LVL647:
6208:HALLIB/Src/stm32f7xx_hal_tim.c ****   uint32_t tmp = 0;
6209:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6210:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
6211:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
6212:HALLIB/Src/stm32f7xx_hal_tim.c ****   assert_param(IS_TIM_CHANNELS(Channel));
6213:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6214:HALLIB/Src/stm32f7xx_hal_tim.c ****   tmp = TIM_CCER_CC1E << Channel;
 5553              		.loc 1 6214 0
 5554 0002 0123     		movs	r3, #1
 5555 0004 03FA01F4 		lsl	r4, r3, r1
 5556              	.LVL648:
6215:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6216:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Reset the CCxE Bit */
6217:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER &= ~tmp;
 5557              		.loc 1 6217 0
 5558 0008 036A     		ldr	r3, [r0, #32]
 5559 000a 23EA0403 		bic	r3, r3, r4
 5560 000e 0362     		str	r3, [r0, #32]
6218:HALLIB/Src/stm32f7xx_hal_tim.c **** 
6219:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Set or reset the CCxE Bit */ 
6220:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 5561              		.loc 1 6220 0
 5562 0010 036A     		ldr	r3, [r0, #32]
 5563 0012 8A40     		lsls	r2, r2, r1
 5564              	.LVL649:
 5565 0014 1A43     		orrs	r2, r2, r3
 5566 0016 0262     		str	r2, [r0, #32]
6221:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 5567              		.loc 1 6221 0
 5568 0018 5DF8044B 		ldr	r4, [sp], #4
 5569              	.LCFI71:
 5570              		.cfi_restore 4
 5571              		.cfi_def_cfa_offset 0
 5572              	.LVL650:
 5573 001c 7047     		bx	lr
 5574              		.cfi_endproc
 5575              	.LFE241:
 5577 001e 00BF     		.section	.text.HAL_TIM_OC_Start,"ax",%progbits
 5578              		.align	2
 5579              		.global	HAL_TIM_OC_Start
 5580              		.thumb
 5581              		.thumb_func
 5583              	HAL_TIM_OC_Start:
 5584              	.LFB150:
 692:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 5585              		.loc 1 692 0
 5586              		.cfi_startproc
 5587              		@ args = 0, pretend = 0, frame = 0
 5588              		@ frame_needed = 0, uses_anonymous_args = 0
 5589              	.LVL651:
 5590 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccrrJVNd.s 			page 220


 5591              	.LCFI72:
 5592              		.cfi_def_cfa_offset 8
 5593              		.cfi_offset 4, -8
 5594              		.cfi_offset 14, -4
 5595 0002 0446     		mov	r4, r0
 697:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5596              		.loc 1 697 0
 5597 0004 0122     		movs	r2, #1
 5598 0006 0068     		ldr	r0, [r0]
 5599              	.LVL652:
 5600 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 5601              	.LVL653:
 699:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 5602              		.loc 1 699 0
 5603 000c 2368     		ldr	r3, [r4]
 5604 000e 084A     		ldr	r2, .L383
 5605 0010 0849     		ldr	r1, .L383+4
 5606 0012 9342     		cmp	r3, r2
 5607 0014 18BF     		it	ne
 5608 0016 8B42     		cmpne	r3, r1
 5609 0018 03D1     		bne	.L381
 702:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 5610              		.loc 1 702 0
 5611 001a 5A6C     		ldr	r2, [r3, #68]
 5612 001c 42F40042 		orr	r2, r2, #32768
 5613 0020 5A64     		str	r2, [r3, #68]
 5614              	.L381:
 706:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5615              		.loc 1 706 0
 5616 0022 2268     		ldr	r2, [r4]
 5617 0024 1368     		ldr	r3, [r2]
 5618 0026 43F00103 		orr	r3, r3, #1
 5619 002a 1360     		str	r3, [r2]
 710:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5620              		.loc 1 710 0
 5621 002c 0020     		movs	r0, #0
 5622 002e 10BD     		pop	{r4, pc}
 5623              	.LVL654:
 5624              	.L384:
 5625              		.align	2
 5626              	.L383:
 5627 0030 00040140 		.word	1073808384
 5628 0034 00000140 		.word	1073807360
 5629              		.cfi_endproc
 5630              	.LFE150:
 5632              		.section	.text.HAL_TIM_OC_Stop,"ax",%progbits
 5633              		.align	2
 5634              		.global	HAL_TIM_OC_Stop
 5635              		.thumb
 5636              		.thumb_func
 5638              	HAL_TIM_OC_Stop:
 5639              	.LFB151:
 725:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 5640              		.loc 1 725 0
 5641              		.cfi_startproc
 5642              		@ args = 0, pretend = 0, frame = 0
 5643              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccrrJVNd.s 			page 221


 5644              	.LVL655:
 5645 0000 10B5     		push	{r4, lr}
 5646              	.LCFI73:
 5647              		.cfi_def_cfa_offset 8
 5648              		.cfi_offset 4, -8
 5649              		.cfi_offset 14, -4
 5650 0002 0446     		mov	r4, r0
 730:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5651              		.loc 1 730 0
 5652 0004 0022     		movs	r2, #0
 5653 0006 0068     		ldr	r0, [r0]
 5654              	.LVL656:
 5655 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 5656              	.LVL657:
 732:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 5657              		.loc 1 732 0
 5658 000c 2368     		ldr	r3, [r4]
 5659 000e 124A     		ldr	r2, .L389
 5660 0010 1249     		ldr	r1, .L389+4
 5661 0012 9342     		cmp	r3, r2
 5662 0014 18BF     		it	ne
 5663 0016 8B42     		cmpne	r3, r1
 5664 0018 0DD1     		bne	.L386
 735:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
 5665              		.loc 1 735 0
 5666 001a 196A     		ldr	r1, [r3, #32]
 5667 001c 41F21112 		movw	r2, #4369
 5668 0020 1142     		tst	r1, r2
 5669 0022 08D1     		bne	.L386
 735:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
 5670              		.loc 1 735 0 is_stmt 0 discriminator 1
 5671 0024 196A     		ldr	r1, [r3, #32]
 5672 0026 40F24442 		movw	r2, #1092
 5673 002a 1142     		tst	r1, r2
 5674 002c 03D1     		bne	.L386
 735:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
 5675              		.loc 1 735 0 discriminator 2
 5676 002e 5A6C     		ldr	r2, [r3, #68]
 5677 0030 22F40042 		bic	r2, r2, #32768
 5678 0034 5A64     		str	r2, [r3, #68]
 5679              	.L386:
 739:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5680              		.loc 1 739 0 is_stmt 1
 5681 0036 2368     		ldr	r3, [r4]
 5682 0038 196A     		ldr	r1, [r3, #32]
 5683 003a 41F21112 		movw	r2, #4369
 5684 003e 1142     		tst	r1, r2
 5685 0040 08D1     		bne	.L387
 739:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5686              		.loc 1 739 0 is_stmt 0 discriminator 1
 5687 0042 196A     		ldr	r1, [r3, #32]
 5688 0044 40F24442 		movw	r2, #1092
 5689 0048 1142     		tst	r1, r2
 5690 004a 03D1     		bne	.L387
 739:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5691              		.loc 1 739 0 discriminator 2
 5692 004c 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccrrJVNd.s 			page 222


 5693 004e 22F00102 		bic	r2, r2, #1
 5694 0052 1A60     		str	r2, [r3]
 5695              	.L387:
 743:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5696              		.loc 1 743 0 is_stmt 1
 5697 0054 0020     		movs	r0, #0
 5698 0056 10BD     		pop	{r4, pc}
 5699              	.LVL658:
 5700              	.L390:
 5701              		.align	2
 5702              	.L389:
 5703 0058 00040140 		.word	1073808384
 5704 005c 00000140 		.word	1073807360
 5705              		.cfi_endproc
 5706              	.LFE151:
 5708              		.section	.text.HAL_TIM_OC_Start_IT,"ax",%progbits
 5709              		.align	2
 5710              		.global	HAL_TIM_OC_Start_IT
 5711              		.thumb
 5712              		.thumb_func
 5714              	HAL_TIM_OC_Start_IT:
 5715              	.LFB152:
 758:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 5716              		.loc 1 758 0
 5717              		.cfi_startproc
 5718              		@ args = 0, pretend = 0, frame = 0
 5719              		@ frame_needed = 0, uses_anonymous_args = 0
 5720              	.LVL659:
 5721 0000 10B5     		push	{r4, lr}
 5722              	.LCFI74:
 5723              		.cfi_def_cfa_offset 8
 5724              		.cfi_offset 4, -8
 5725              		.cfi_offset 14, -4
 5726 0002 0446     		mov	r4, r0
 762:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 5727              		.loc 1 762 0
 5728 0004 0C29     		cmp	r1, #12
 5729 0006 1FD8     		bhi	.L392
 5730 0008 DFE801F0 		tbb	[pc, r1]
 5731              	.L394:
 5732 000c 07       		.byte	(.L393-.L394)/2
 5733 000d 1E       		.byte	(.L392-.L394)/2
 5734 000e 1E       		.byte	(.L392-.L394)/2
 5735 000f 1E       		.byte	(.L392-.L394)/2
 5736 0010 0D       		.byte	(.L395-.L394)/2
 5737 0011 1E       		.byte	(.L392-.L394)/2
 5738 0012 1E       		.byte	(.L392-.L394)/2
 5739 0013 1E       		.byte	(.L392-.L394)/2
 5740 0014 13       		.byte	(.L396-.L394)/2
 5741 0015 1E       		.byte	(.L392-.L394)/2
 5742 0016 1E       		.byte	(.L392-.L394)/2
 5743 0017 1E       		.byte	(.L392-.L394)/2
 5744 0018 19       		.byte	(.L397-.L394)/2
 5745 0019 00       		.p2align 1
 5746              	.L393:
 767:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5747              		.loc 1 767 0
ARM GAS  /tmp/ccrrJVNd.s 			page 223


 5748 001a 0268     		ldr	r2, [r0]
 5749 001c D368     		ldr	r3, [r2, #12]
 5750 001e 43F00203 		orr	r3, r3, #2
 5751 0022 D360     		str	r3, [r2, #12]
 769:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5752              		.loc 1 769 0
 5753 0024 10E0     		b	.L392
 5754              	.L395:
 774:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5755              		.loc 1 774 0
 5756 0026 0268     		ldr	r2, [r0]
 5757 0028 D368     		ldr	r3, [r2, #12]
 5758 002a 43F00403 		orr	r3, r3, #4
 5759 002e D360     		str	r3, [r2, #12]
 776:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5760              		.loc 1 776 0
 5761 0030 0AE0     		b	.L392
 5762              	.L396:
 781:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5763              		.loc 1 781 0
 5764 0032 0268     		ldr	r2, [r0]
 5765 0034 D368     		ldr	r3, [r2, #12]
 5766 0036 43F00803 		orr	r3, r3, #8
 5767 003a D360     		str	r3, [r2, #12]
 783:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5768              		.loc 1 783 0
 5769 003c 04E0     		b	.L392
 5770              	.L397:
 788:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5771              		.loc 1 788 0
 5772 003e 0268     		ldr	r2, [r0]
 5773 0040 D368     		ldr	r3, [r2, #12]
 5774 0042 43F01003 		orr	r3, r3, #16
 5775 0046 D360     		str	r3, [r2, #12]
 5776              	.L392:
 797:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5777              		.loc 1 797 0
 5778 0048 0122     		movs	r2, #1
 5779 004a 2068     		ldr	r0, [r4]
 5780              	.LVL660:
 5781 004c FFF7FEFF 		bl	TIM_CCxChannelCmd
 5782              	.LVL661:
 799:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 5783              		.loc 1 799 0
 5784 0050 2368     		ldr	r3, [r4]
 5785 0052 084A     		ldr	r2, .L400
 5786 0054 0849     		ldr	r1, .L400+4
 5787 0056 9342     		cmp	r3, r2
 5788 0058 18BF     		it	ne
 5789 005a 8B42     		cmpne	r3, r1
 5790 005c 03D1     		bne	.L398
 802:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 5791              		.loc 1 802 0
 5792 005e 5A6C     		ldr	r2, [r3, #68]
 5793 0060 42F40042 		orr	r2, r2, #32768
 5794 0064 5A64     		str	r2, [r3, #68]
 5795              	.L398:
ARM GAS  /tmp/ccrrJVNd.s 			page 224


 806:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5796              		.loc 1 806 0
 5797 0066 2268     		ldr	r2, [r4]
 5798 0068 1368     		ldr	r3, [r2]
 5799 006a 43F00103 		orr	r3, r3, #1
 5800 006e 1360     		str	r3, [r2]
 810:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5801              		.loc 1 810 0
 5802 0070 0020     		movs	r0, #0
 5803 0072 10BD     		pop	{r4, pc}
 5804              	.LVL662:
 5805              	.L401:
 5806              		.align	2
 5807              	.L400:
 5808 0074 00040140 		.word	1073808384
 5809 0078 00000140 		.word	1073807360
 5810              		.cfi_endproc
 5811              	.LFE152:
 5813              		.section	.text.HAL_TIM_OC_Stop_IT,"ax",%progbits
 5814              		.align	2
 5815              		.global	HAL_TIM_OC_Stop_IT
 5816              		.thumb
 5817              		.thumb_func
 5819              	HAL_TIM_OC_Stop_IT:
 5820              	.LFB153:
 825:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 5821              		.loc 1 825 0
 5822              		.cfi_startproc
 5823              		@ args = 0, pretend = 0, frame = 0
 5824              		@ frame_needed = 0, uses_anonymous_args = 0
 5825              	.LVL663:
 5826 0000 10B5     		push	{r4, lr}
 5827              	.LCFI75:
 5828              		.cfi_def_cfa_offset 8
 5829              		.cfi_offset 4, -8
 5830              		.cfi_offset 14, -4
 5831 0002 0446     		mov	r4, r0
 829:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 5832              		.loc 1 829 0
 5833 0004 0C29     		cmp	r1, #12
 5834 0006 1FD8     		bhi	.L403
 5835 0008 DFE801F0 		tbb	[pc, r1]
 5836              	.L405:
 5837 000c 07       		.byte	(.L404-.L405)/2
 5838 000d 1E       		.byte	(.L403-.L405)/2
 5839 000e 1E       		.byte	(.L403-.L405)/2
 5840 000f 1E       		.byte	(.L403-.L405)/2
 5841 0010 0D       		.byte	(.L406-.L405)/2
 5842 0011 1E       		.byte	(.L403-.L405)/2
 5843 0012 1E       		.byte	(.L403-.L405)/2
 5844 0013 1E       		.byte	(.L403-.L405)/2
 5845 0014 13       		.byte	(.L407-.L405)/2
 5846 0015 1E       		.byte	(.L403-.L405)/2
 5847 0016 1E       		.byte	(.L403-.L405)/2
 5848 0017 1E       		.byte	(.L403-.L405)/2
 5849 0018 19       		.byte	(.L408-.L405)/2
 5850 0019 00       		.p2align 1
ARM GAS  /tmp/ccrrJVNd.s 			page 225


 5851              	.L404:
 834:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5852              		.loc 1 834 0
 5853 001a 0268     		ldr	r2, [r0]
 5854 001c D368     		ldr	r3, [r2, #12]
 5855 001e 23F00203 		bic	r3, r3, #2
 5856 0022 D360     		str	r3, [r2, #12]
 836:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5857              		.loc 1 836 0
 5858 0024 10E0     		b	.L403
 5859              	.L406:
 841:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5860              		.loc 1 841 0
 5861 0026 0268     		ldr	r2, [r0]
 5862 0028 D368     		ldr	r3, [r2, #12]
 5863 002a 23F00403 		bic	r3, r3, #4
 5864 002e D360     		str	r3, [r2, #12]
 843:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5865              		.loc 1 843 0
 5866 0030 0AE0     		b	.L403
 5867              	.L407:
 848:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5868              		.loc 1 848 0
 5869 0032 0268     		ldr	r2, [r0]
 5870 0034 D368     		ldr	r3, [r2, #12]
 5871 0036 23F00803 		bic	r3, r3, #8
 5872 003a D360     		str	r3, [r2, #12]
 850:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 5873              		.loc 1 850 0
 5874 003c 04E0     		b	.L403
 5875              	.L408:
 855:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5876              		.loc 1 855 0
 5877 003e 0268     		ldr	r2, [r0]
 5878 0040 D368     		ldr	r3, [r2, #12]
 5879 0042 23F01003 		bic	r3, r3, #16
 5880 0046 D360     		str	r3, [r2, #12]
 5881              	.L403:
 864:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5882              		.loc 1 864 0
 5883 0048 0022     		movs	r2, #0
 5884 004a 2068     		ldr	r0, [r4]
 5885              	.LVL664:
 5886 004c FFF7FEFF 		bl	TIM_CCxChannelCmd
 5887              	.LVL665:
 866:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 5888              		.loc 1 866 0
 5889 0050 2368     		ldr	r3, [r4]
 5890 0052 124A     		ldr	r2, .L412
 5891 0054 1249     		ldr	r1, .L412+4
 5892 0056 9342     		cmp	r3, r2
 5893 0058 18BF     		it	ne
 5894 005a 8B42     		cmpne	r3, r1
 5895 005c 0DD1     		bne	.L409
 869:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 5896              		.loc 1 869 0
 5897 005e 196A     		ldr	r1, [r3, #32]
ARM GAS  /tmp/ccrrJVNd.s 			page 226


 5898 0060 41F21112 		movw	r2, #4369
 5899 0064 1142     		tst	r1, r2
 5900 0066 08D1     		bne	.L409
 869:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 5901              		.loc 1 869 0 is_stmt 0 discriminator 1
 5902 0068 196A     		ldr	r1, [r3, #32]
 5903 006a 40F24442 		movw	r2, #1092
 5904 006e 1142     		tst	r1, r2
 5905 0070 03D1     		bne	.L409
 869:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 5906              		.loc 1 869 0 discriminator 2
 5907 0072 5A6C     		ldr	r2, [r3, #68]
 5908 0074 22F40042 		bic	r2, r2, #32768
 5909 0078 5A64     		str	r2, [r3, #68]
 5910              	.L409:
 873:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5911              		.loc 1 873 0 is_stmt 1
 5912 007a 2368     		ldr	r3, [r4]
 5913 007c 196A     		ldr	r1, [r3, #32]
 5914 007e 41F21112 		movw	r2, #4369
 5915 0082 1142     		tst	r1, r2
 5916 0084 08D1     		bne	.L410
 873:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5917              		.loc 1 873 0 is_stmt 0 discriminator 1
 5918 0086 196A     		ldr	r1, [r3, #32]
 5919 0088 40F24442 		movw	r2, #1092
 5920 008c 1142     		tst	r1, r2
 5921 008e 03D1     		bne	.L410
 873:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 5922              		.loc 1 873 0 discriminator 2
 5923 0090 1A68     		ldr	r2, [r3]
 5924 0092 22F00102 		bic	r2, r2, #1
 5925 0096 1A60     		str	r2, [r3]
 5926              	.L410:
 877:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 5927              		.loc 1 877 0 is_stmt 1
 5928 0098 0020     		movs	r0, #0
 5929 009a 10BD     		pop	{r4, pc}
 5930              	.LVL666:
 5931              	.L413:
 5932              		.align	2
 5933              	.L412:
 5934 009c 00040140 		.word	1073808384
 5935 00a0 00000140 		.word	1073807360
 5936              		.cfi_endproc
 5937              	.LFE153:
 5939              		.section	.text.HAL_TIM_OC_Start_DMA,"ax",%progbits
 5940              		.align	2
 5941              		.global	HAL_TIM_OC_Start_DMA
 5942              		.thumb
 5943              		.thumb_func
 5945              	HAL_TIM_OC_Start_DMA:
 5946              	.LFB154:
 894:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 5947              		.loc 1 894 0
 5948              		.cfi_startproc
 5949              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrrJVNd.s 			page 227


 5950              		@ frame_needed = 0, uses_anonymous_args = 0
 5951              	.LVL667:
 5952 0000 70B5     		push	{r4, r5, r6, lr}
 5953              	.LCFI76:
 5954              		.cfi_def_cfa_offset 16
 5955              		.cfi_offset 4, -16
 5956              		.cfi_offset 5, -12
 5957              		.cfi_offset 6, -8
 5958              		.cfi_offset 14, -4
 898:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 5959              		.loc 1 898 0
 5960 0002 90F83D50 		ldrb	r5, [r0, #61]	@ zero_extendqisi2
 5961 0006 EDB2     		uxtb	r5, r5
 5962 0008 022D     		cmp	r5, #2
 5963 000a 7BD0     		beq	.L424
 902:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 5964              		.loc 1 902 0
 5965 000c 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 5966 0010 E4B2     		uxtb	r4, r4
 5967 0012 012C     		cmp	r4, #1
 5968 0014 0AD1     		bne	.L416
 904:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 5969              		.loc 1 904 0
 5970 0016 B2FA82F4 		clz	r4, r2
 5971 001a 6409     		lsrs	r4, r4, #5
 5972 001c 002B     		cmp	r3, #0
 5973 001e 08BF     		it	eq
 5974 0020 0024     		moveq	r4, #0
 5975 0022 002C     		cmp	r4, #0
 5976 0024 70D1     		bne	.L425
 910:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 5977              		.loc 1 910 0
 5978 0026 0224     		movs	r4, #2
 5979 0028 80F83D40 		strb	r4, [r0, #61]
 5980              	.L416:
 5981 002c 1646     		mov	r6, r2
 5982 002e 0D46     		mov	r5, r1
 5983 0030 0446     		mov	r4, r0
 913:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 5984              		.loc 1 913 0
 5985 0032 0C29     		cmp	r1, #12
 5986 0034 4FD8     		bhi	.L417
 5987 0036 DFE801F0 		tbb	[pc, r1]
 5988              	.LVL668:
 5989              	.L419:
 5990 003a 07       		.byte	(.L418-.L419)/2
 5991 003b 4E       		.byte	(.L417-.L419)/2
 5992 003c 4E       		.byte	(.L417-.L419)/2
 5993 003d 4E       		.byte	(.L417-.L419)/2
 5994 003e 19       		.byte	(.L420-.L419)/2
 5995 003f 4E       		.byte	(.L417-.L419)/2
 5996 0040 4E       		.byte	(.L417-.L419)/2
 5997 0041 4E       		.byte	(.L417-.L419)/2
 5998 0042 2B       		.byte	(.L421-.L419)/2
 5999 0043 4E       		.byte	(.L417-.L419)/2
 6000 0044 4E       		.byte	(.L417-.L419)/2
 6001 0045 4E       		.byte	(.L417-.L419)/2
ARM GAS  /tmp/ccrrJVNd.s 			page 228


 6002 0046 3D       		.byte	(.L422-.L419)/2
 6003 0047 00       		.p2align 1
 6004              	.L418:
 918:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 6005              		.loc 1 918 0
 6006 0048 426A     		ldr	r2, [r0, #36]
 6007 004a 3049     		ldr	r1, .L427
 6008              	.LVL669:
 6009 004c D163     		str	r1, [r2, #60]
 921:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6010              		.loc 1 921 0
 6011 004e 426A     		ldr	r2, [r0, #36]
 6012 0050 2F49     		ldr	r1, .L427+4
 6013 0052 D164     		str	r1, [r2, #76]
 924:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6014              		.loc 1 924 0
 6015 0054 0268     		ldr	r2, [r0]
 6016 0056 3432     		adds	r2, r2, #52
 6017 0058 3146     		mov	r1, r6
 6018 005a 406A     		ldr	r0, [r0, #36]
 6019              	.LVL670:
 6020 005c FFF7FEFF 		bl	HAL_DMA_Start_IT
 6021              	.LVL671:
 927:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6022              		.loc 1 927 0
 6023 0060 2268     		ldr	r2, [r4]
 6024 0062 D368     		ldr	r3, [r2, #12]
 6025 0064 43F40073 		orr	r3, r3, #512
 6026 0068 D360     		str	r3, [r2, #12]
 929:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6027              		.loc 1 929 0
 6028 006a 34E0     		b	.L417
 6029              	.LVL672:
 6030              	.L420:
 934:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 6031              		.loc 1 934 0
 6032 006c 826A     		ldr	r2, [r0, #40]
 6033 006e 2749     		ldr	r1, .L427
 6034              	.LVL673:
 6035 0070 D163     		str	r1, [r2, #60]
 937:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6036              		.loc 1 937 0
 6037 0072 826A     		ldr	r2, [r0, #40]
 6038 0074 2649     		ldr	r1, .L427+4
 6039 0076 D164     		str	r1, [r2, #76]
 940:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6040              		.loc 1 940 0
 6041 0078 0268     		ldr	r2, [r0]
 6042 007a 3832     		adds	r2, r2, #56
 6043 007c 3146     		mov	r1, r6
 6044 007e 806A     		ldr	r0, [r0, #40]
 6045              	.LVL674:
 6046 0080 FFF7FEFF 		bl	HAL_DMA_Start_IT
 6047              	.LVL675:
 943:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6048              		.loc 1 943 0
 6049 0084 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccrrJVNd.s 			page 229


 6050 0086 D368     		ldr	r3, [r2, #12]
 6051 0088 43F48063 		orr	r3, r3, #1024
 6052 008c D360     		str	r3, [r2, #12]
 945:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6053              		.loc 1 945 0
 6054 008e 22E0     		b	.L417
 6055              	.LVL676:
 6056              	.L421:
 950:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 6057              		.loc 1 950 0
 6058 0090 C26A     		ldr	r2, [r0, #44]
 6059 0092 1E49     		ldr	r1, .L427
 6060              	.LVL677:
 6061 0094 D163     		str	r1, [r2, #60]
 953:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6062              		.loc 1 953 0
 6063 0096 C26A     		ldr	r2, [r0, #44]
 6064 0098 1D49     		ldr	r1, .L427+4
 6065 009a D164     		str	r1, [r2, #76]
 956:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6066              		.loc 1 956 0
 6067 009c 0268     		ldr	r2, [r0]
 6068 009e 3C32     		adds	r2, r2, #60
 6069 00a0 3146     		mov	r1, r6
 6070 00a2 C06A     		ldr	r0, [r0, #44]
 6071              	.LVL678:
 6072 00a4 FFF7FEFF 		bl	HAL_DMA_Start_IT
 6073              	.LVL679:
 959:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6074              		.loc 1 959 0
 6075 00a8 2268     		ldr	r2, [r4]
 6076 00aa D368     		ldr	r3, [r2, #12]
 6077 00ac 43F40063 		orr	r3, r3, #2048
 6078 00b0 D360     		str	r3, [r2, #12]
 961:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6079              		.loc 1 961 0
 6080 00b2 10E0     		b	.L417
 6081              	.LVL680:
 6082              	.L422:
 966:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 6083              		.loc 1 966 0
 6084 00b4 026B     		ldr	r2, [r0, #48]
 6085 00b6 1549     		ldr	r1, .L427
 6086              	.LVL681:
 6087 00b8 D163     		str	r1, [r2, #60]
 969:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6088              		.loc 1 969 0
 6089 00ba 026B     		ldr	r2, [r0, #48]
 6090 00bc 1449     		ldr	r1, .L427+4
 6091 00be D164     		str	r1, [r2, #76]
 972:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6092              		.loc 1 972 0
 6093 00c0 0268     		ldr	r2, [r0]
 6094 00c2 4032     		adds	r2, r2, #64
 6095 00c4 3146     		mov	r1, r6
 6096 00c6 006B     		ldr	r0, [r0, #48]
 6097              	.LVL682:
ARM GAS  /tmp/ccrrJVNd.s 			page 230


 6098 00c8 FFF7FEFF 		bl	HAL_DMA_Start_IT
 6099              	.LVL683:
 975:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6100              		.loc 1 975 0
 6101 00cc 2268     		ldr	r2, [r4]
 6102 00ce D368     		ldr	r3, [r2, #12]
 6103 00d0 43F48053 		orr	r3, r3, #4096
 6104 00d4 D360     		str	r3, [r2, #12]
 6105              	.L417:
 984:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6106              		.loc 1 984 0
 6107 00d6 0122     		movs	r2, #1
 6108 00d8 2946     		mov	r1, r5
 6109 00da 2068     		ldr	r0, [r4]
 6110 00dc FFF7FEFF 		bl	TIM_CCxChannelCmd
 6111              	.LVL684:
 986:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6112              		.loc 1 986 0
 6113 00e0 2368     		ldr	r3, [r4]
 6114 00e2 0C4A     		ldr	r2, .L427+8
 6115 00e4 0C49     		ldr	r1, .L427+12
 6116 00e6 9342     		cmp	r3, r2
 6117 00e8 18BF     		it	ne
 6118 00ea 8B42     		cmpne	r3, r1
 6119 00ec 03D1     		bne	.L423
 989:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
 6120              		.loc 1 989 0
 6121 00ee 5A6C     		ldr	r2, [r3, #68]
 6122 00f0 42F40042 		orr	r2, r2, #32768
 6123 00f4 5A64     		str	r2, [r3, #68]
 6124              	.L423:
 993:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6125              		.loc 1 993 0
 6126 00f6 2268     		ldr	r2, [r4]
 6127 00f8 1368     		ldr	r3, [r2]
 6128 00fa 43F00103 		orr	r3, r3, #1
 6129 00fe 1360     		str	r3, [r2]
 996:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 6130              		.loc 1 996 0
 6131 0100 0020     		movs	r0, #0
 6132 0102 70BD     		pop	{r4, r5, r6, pc}
 6133              	.LVL685:
 6134              	.L424:
 900:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6135              		.loc 1 900 0
 6136 0104 0220     		movs	r0, #2
 6137              	.LVL686:
 6138 0106 70BD     		pop	{r4, r5, r6, pc}
 6139              	.LVL687:
 6140              	.L425:
 906:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6141              		.loc 1 906 0
 6142 0108 0120     		movs	r0, #1
 6143              	.LVL688:
 997:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 6144              		.loc 1 997 0
 6145 010a 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccrrJVNd.s 			page 231


 6146              	.L428:
 6147              		.align	2
 6148              	.L427:
 6149 010c 00000000 		.word	TIM_DMADelayPulseCplt
 6150 0110 00000000 		.word	TIM_DMAError
 6151 0114 00040140 		.word	1073808384
 6152 0118 00000140 		.word	1073807360
 6153              		.cfi_endproc
 6154              	.LFE154:
 6156              		.section	.text.HAL_TIM_OC_Stop_DMA,"ax",%progbits
 6157              		.align	2
 6158              		.global	HAL_TIM_OC_Stop_DMA
 6159              		.thumb
 6160              		.thumb_func
 6162              	HAL_TIM_OC_Stop_DMA:
 6163              	.LFB155:
1012:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 6164              		.loc 1 1012 0
 6165              		.cfi_startproc
 6166              		@ args = 0, pretend = 0, frame = 0
 6167              		@ frame_needed = 0, uses_anonymous_args = 0
 6168              	.LVL689:
 6169 0000 10B5     		push	{r4, lr}
 6170              	.LCFI77:
 6171              		.cfi_def_cfa_offset 8
 6172              		.cfi_offset 4, -8
 6173              		.cfi_offset 14, -4
 6174 0002 0446     		mov	r4, r0
1016:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6175              		.loc 1 1016 0
 6176 0004 0C29     		cmp	r1, #12
 6177 0006 1FD8     		bhi	.L430
 6178 0008 DFE801F0 		tbb	[pc, r1]
 6179              	.L432:
 6180 000c 07       		.byte	(.L431-.L432)/2
 6181 000d 1E       		.byte	(.L430-.L432)/2
 6182 000e 1E       		.byte	(.L430-.L432)/2
 6183 000f 1E       		.byte	(.L430-.L432)/2
 6184 0010 0D       		.byte	(.L433-.L432)/2
 6185 0011 1E       		.byte	(.L430-.L432)/2
 6186 0012 1E       		.byte	(.L430-.L432)/2
 6187 0013 1E       		.byte	(.L430-.L432)/2
 6188 0014 13       		.byte	(.L434-.L432)/2
 6189 0015 1E       		.byte	(.L430-.L432)/2
 6190 0016 1E       		.byte	(.L430-.L432)/2
 6191 0017 1E       		.byte	(.L430-.L432)/2
 6192 0018 19       		.byte	(.L435-.L432)/2
 6193 0019 00       		.p2align 1
 6194              	.L431:
1021:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6195              		.loc 1 1021 0
 6196 001a 0268     		ldr	r2, [r0]
 6197 001c D368     		ldr	r3, [r2, #12]
 6198 001e 23F40073 		bic	r3, r3, #512
 6199 0022 D360     		str	r3, [r2, #12]
1023:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6200              		.loc 1 1023 0
ARM GAS  /tmp/ccrrJVNd.s 			page 232


 6201 0024 10E0     		b	.L430
 6202              	.L433:
1028:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6203              		.loc 1 1028 0
 6204 0026 0268     		ldr	r2, [r0]
 6205 0028 D368     		ldr	r3, [r2, #12]
 6206 002a 23F48063 		bic	r3, r3, #1024
 6207 002e D360     		str	r3, [r2, #12]
1030:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6208              		.loc 1 1030 0
 6209 0030 0AE0     		b	.L430
 6210              	.L434:
1035:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6211              		.loc 1 1035 0
 6212 0032 0268     		ldr	r2, [r0]
 6213 0034 D368     		ldr	r3, [r2, #12]
 6214 0036 23F40063 		bic	r3, r3, #2048
 6215 003a D360     		str	r3, [r2, #12]
1037:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6216              		.loc 1 1037 0
 6217 003c 04E0     		b	.L430
 6218              	.L435:
1042:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6219              		.loc 1 1042 0
 6220 003e 0268     		ldr	r2, [r0]
 6221 0040 D368     		ldr	r3, [r2, #12]
 6222 0042 23F48053 		bic	r3, r3, #4096
 6223 0046 D360     		str	r3, [r2, #12]
 6224              	.L430:
1051:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6225              		.loc 1 1051 0
 6226 0048 0022     		movs	r2, #0
 6227 004a 2068     		ldr	r0, [r4]
 6228              	.LVL690:
 6229 004c FFF7FEFF 		bl	TIM_CCxChannelCmd
 6230              	.LVL691:
1053:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6231              		.loc 1 1053 0
 6232 0050 2368     		ldr	r3, [r4]
 6233 0052 144A     		ldr	r2, .L439
 6234 0054 1449     		ldr	r1, .L439+4
 6235 0056 9342     		cmp	r3, r2
 6236 0058 18BF     		it	ne
 6237 005a 8B42     		cmpne	r3, r1
 6238 005c 0DD1     		bne	.L436
1056:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6239              		.loc 1 1056 0
 6240 005e 196A     		ldr	r1, [r3, #32]
 6241 0060 41F21112 		movw	r2, #4369
 6242 0064 1142     		tst	r1, r2
 6243 0066 08D1     		bne	.L436
1056:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6244              		.loc 1 1056 0 is_stmt 0 discriminator 1
 6245 0068 196A     		ldr	r1, [r3, #32]
 6246 006a 40F24442 		movw	r2, #1092
 6247 006e 1142     		tst	r1, r2
 6248 0070 03D1     		bne	.L436
ARM GAS  /tmp/ccrrJVNd.s 			page 233


1056:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6249              		.loc 1 1056 0 discriminator 2
 6250 0072 5A6C     		ldr	r2, [r3, #68]
 6251 0074 22F40042 		bic	r2, r2, #32768
 6252 0078 5A64     		str	r2, [r3, #68]
 6253              	.L436:
1060:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6254              		.loc 1 1060 0 is_stmt 1
 6255 007a 2368     		ldr	r3, [r4]
 6256 007c 196A     		ldr	r1, [r3, #32]
 6257 007e 41F21112 		movw	r2, #4369
 6258 0082 1142     		tst	r1, r2
 6259 0084 08D1     		bne	.L437
1060:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6260              		.loc 1 1060 0 is_stmt 0 discriminator 1
 6261 0086 196A     		ldr	r1, [r3, #32]
 6262 0088 40F24442 		movw	r2, #1092
 6263 008c 1142     		tst	r1, r2
 6264 008e 03D1     		bne	.L437
1060:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6265              		.loc 1 1060 0 discriminator 2
 6266 0090 1A68     		ldr	r2, [r3]
 6267 0092 22F00102 		bic	r2, r2, #1
 6268 0096 1A60     		str	r2, [r3]
 6269              	.L437:
1063:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6270              		.loc 1 1063 0 is_stmt 1
 6271 0098 0123     		movs	r3, #1
 6272 009a 84F83D30 		strb	r3, [r4, #61]
1067:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 6273              		.loc 1 1067 0
 6274 009e 0020     		movs	r0, #0
 6275 00a0 10BD     		pop	{r4, pc}
 6276              	.LVL692:
 6277              	.L440:
 6278 00a2 00BF     		.align	2
 6279              	.L439:
 6280 00a4 00040140 		.word	1073808384
 6281 00a8 00000140 		.word	1073807360
 6282              		.cfi_endproc
 6283              	.LFE155:
 6285              		.section	.text.HAL_TIM_PWM_Start,"ax",%progbits
 6286              		.align	2
 6287              		.global	HAL_TIM_PWM_Start
 6288              		.thumb
 6289              		.thumb_func
 6291              	HAL_TIM_PWM_Start:
 6292              	.LFB160:
1229:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 6293              		.loc 1 1229 0
 6294              		.cfi_startproc
 6295              		@ args = 0, pretend = 0, frame = 0
 6296              		@ frame_needed = 0, uses_anonymous_args = 0
 6297              	.LVL693:
 6298 0000 10B5     		push	{r4, lr}
 6299              	.LCFI78:
 6300              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccrrJVNd.s 			page 234


 6301              		.cfi_offset 4, -8
 6302              		.cfi_offset 14, -4
 6303 0002 0446     		mov	r4, r0
1234:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6304              		.loc 1 1234 0
 6305 0004 0122     		movs	r2, #1
 6306 0006 0068     		ldr	r0, [r0]
 6307              	.LVL694:
 6308 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 6309              	.LVL695:
1236:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6310              		.loc 1 1236 0
 6311 000c 2368     		ldr	r3, [r4]
 6312 000e 084A     		ldr	r2, .L444
 6313 0010 0849     		ldr	r1, .L444+4
 6314 0012 9342     		cmp	r3, r2
 6315 0014 18BF     		it	ne
 6316 0016 8B42     		cmpne	r3, r1
 6317 0018 03D1     		bne	.L442
1239:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6318              		.loc 1 1239 0
 6319 001a 5A6C     		ldr	r2, [r3, #68]
 6320 001c 42F40042 		orr	r2, r2, #32768
 6321 0020 5A64     		str	r2, [r3, #68]
 6322              	.L442:
1243:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6323              		.loc 1 1243 0
 6324 0022 2268     		ldr	r2, [r4]
 6325 0024 1368     		ldr	r3, [r2]
 6326 0026 43F00103 		orr	r3, r3, #1
 6327 002a 1360     		str	r3, [r2]
1247:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 6328              		.loc 1 1247 0
 6329 002c 0020     		movs	r0, #0
 6330 002e 10BD     		pop	{r4, pc}
 6331              	.LVL696:
 6332              	.L445:
 6333              		.align	2
 6334              	.L444:
 6335 0030 00040140 		.word	1073808384
 6336 0034 00000140 		.word	1073807360
 6337              		.cfi_endproc
 6338              	.LFE160:
 6340              		.section	.text.HAL_TIM_PWM_Stop,"ax",%progbits
 6341              		.align	2
 6342              		.global	HAL_TIM_PWM_Stop
 6343              		.thumb
 6344              		.thumb_func
 6346              	HAL_TIM_PWM_Stop:
 6347              	.LFB161:
1262:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 6348              		.loc 1 1262 0
 6349              		.cfi_startproc
 6350              		@ args = 0, pretend = 0, frame = 0
 6351              		@ frame_needed = 0, uses_anonymous_args = 0
 6352              	.LVL697:
 6353 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccrrJVNd.s 			page 235


 6354              	.LCFI79:
 6355              		.cfi_def_cfa_offset 8
 6356              		.cfi_offset 4, -8
 6357              		.cfi_offset 14, -4
 6358 0002 0446     		mov	r4, r0
1267:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6359              		.loc 1 1267 0
 6360 0004 0022     		movs	r2, #0
 6361 0006 0068     		ldr	r0, [r0]
 6362              	.LVL698:
 6363 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 6364              	.LVL699:
1269:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6365              		.loc 1 1269 0
 6366 000c 2368     		ldr	r3, [r4]
 6367 000e 144A     		ldr	r2, .L450
 6368 0010 1449     		ldr	r1, .L450+4
 6369 0012 9342     		cmp	r3, r2
 6370 0014 18BF     		it	ne
 6371 0016 8B42     		cmpne	r3, r1
 6372 0018 0DD1     		bne	.L447
1272:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6373              		.loc 1 1272 0
 6374 001a 196A     		ldr	r1, [r3, #32]
 6375 001c 41F21112 		movw	r2, #4369
 6376 0020 1142     		tst	r1, r2
 6377 0022 08D1     		bne	.L447
1272:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6378              		.loc 1 1272 0 is_stmt 0 discriminator 1
 6379 0024 196A     		ldr	r1, [r3, #32]
 6380 0026 40F24442 		movw	r2, #1092
 6381 002a 1142     		tst	r1, r2
 6382 002c 03D1     		bne	.L447
1272:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6383              		.loc 1 1272 0 discriminator 2
 6384 002e 5A6C     		ldr	r2, [r3, #68]
 6385 0030 22F40042 		bic	r2, r2, #32768
 6386 0034 5A64     		str	r2, [r3, #68]
 6387              	.L447:
1276:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6388              		.loc 1 1276 0 is_stmt 1
 6389 0036 2368     		ldr	r3, [r4]
 6390 0038 196A     		ldr	r1, [r3, #32]
 6391 003a 41F21112 		movw	r2, #4369
 6392 003e 1142     		tst	r1, r2
 6393 0040 08D1     		bne	.L448
1276:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6394              		.loc 1 1276 0 is_stmt 0 discriminator 1
 6395 0042 196A     		ldr	r1, [r3, #32]
 6396 0044 40F24442 		movw	r2, #1092
 6397 0048 1142     		tst	r1, r2
 6398 004a 03D1     		bne	.L448
1276:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6399              		.loc 1 1276 0 discriminator 2
 6400 004c 1A68     		ldr	r2, [r3]
 6401 004e 22F00102 		bic	r2, r2, #1
 6402 0052 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccrrJVNd.s 			page 236


 6403              	.L448:
1279:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6404              		.loc 1 1279 0 is_stmt 1
 6405 0054 0123     		movs	r3, #1
 6406 0056 84F83D30 		strb	r3, [r4, #61]
1283:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 6407              		.loc 1 1283 0
 6408 005a 0020     		movs	r0, #0
 6409 005c 10BD     		pop	{r4, pc}
 6410              	.LVL700:
 6411              	.L451:
 6412 005e 00BF     		.align	2
 6413              	.L450:
 6414 0060 00040140 		.word	1073808384
 6415 0064 00000140 		.word	1073807360
 6416              		.cfi_endproc
 6417              	.LFE161:
 6419              		.section	.text.HAL_TIM_PWM_Start_IT,"ax",%progbits
 6420              		.align	2
 6421              		.global	HAL_TIM_PWM_Start_IT
 6422              		.thumb
 6423              		.thumb_func
 6425              	HAL_TIM_PWM_Start_IT:
 6426              	.LFB162:
1298:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 6427              		.loc 1 1298 0
 6428              		.cfi_startproc
 6429              		@ args = 0, pretend = 0, frame = 0
 6430              		@ frame_needed = 0, uses_anonymous_args = 0
 6431              	.LVL701:
 6432 0000 10B5     		push	{r4, lr}
 6433              	.LCFI80:
 6434              		.cfi_def_cfa_offset 8
 6435              		.cfi_offset 4, -8
 6436              		.cfi_offset 14, -4
 6437 0002 0446     		mov	r4, r0
1302:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6438              		.loc 1 1302 0
 6439 0004 0C29     		cmp	r1, #12
 6440 0006 1FD8     		bhi	.L453
 6441 0008 DFE801F0 		tbb	[pc, r1]
 6442              	.L455:
 6443 000c 07       		.byte	(.L454-.L455)/2
 6444 000d 1E       		.byte	(.L453-.L455)/2
 6445 000e 1E       		.byte	(.L453-.L455)/2
 6446 000f 1E       		.byte	(.L453-.L455)/2
 6447 0010 0D       		.byte	(.L456-.L455)/2
 6448 0011 1E       		.byte	(.L453-.L455)/2
 6449 0012 1E       		.byte	(.L453-.L455)/2
 6450 0013 1E       		.byte	(.L453-.L455)/2
 6451 0014 13       		.byte	(.L457-.L455)/2
 6452 0015 1E       		.byte	(.L453-.L455)/2
 6453 0016 1E       		.byte	(.L453-.L455)/2
 6454 0017 1E       		.byte	(.L453-.L455)/2
 6455 0018 19       		.byte	(.L458-.L455)/2
 6456 0019 00       		.p2align 1
 6457              	.L454:
ARM GAS  /tmp/ccrrJVNd.s 			page 237


1307:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6458              		.loc 1 1307 0
 6459 001a 0268     		ldr	r2, [r0]
 6460 001c D368     		ldr	r3, [r2, #12]
 6461 001e 43F00203 		orr	r3, r3, #2
 6462 0022 D360     		str	r3, [r2, #12]
1309:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6463              		.loc 1 1309 0
 6464 0024 10E0     		b	.L453
 6465              	.L456:
1314:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6466              		.loc 1 1314 0
 6467 0026 0268     		ldr	r2, [r0]
 6468 0028 D368     		ldr	r3, [r2, #12]
 6469 002a 43F00403 		orr	r3, r3, #4
 6470 002e D360     		str	r3, [r2, #12]
1316:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6471              		.loc 1 1316 0
 6472 0030 0AE0     		b	.L453
 6473              	.L457:
1321:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6474              		.loc 1 1321 0
 6475 0032 0268     		ldr	r2, [r0]
 6476 0034 D368     		ldr	r3, [r2, #12]
 6477 0036 43F00803 		orr	r3, r3, #8
 6478 003a D360     		str	r3, [r2, #12]
1323:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6479              		.loc 1 1323 0
 6480 003c 04E0     		b	.L453
 6481              	.L458:
1328:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6482              		.loc 1 1328 0
 6483 003e 0268     		ldr	r2, [r0]
 6484 0040 D368     		ldr	r3, [r2, #12]
 6485 0042 43F01003 		orr	r3, r3, #16
 6486 0046 D360     		str	r3, [r2, #12]
 6487              	.L453:
1337:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6488              		.loc 1 1337 0
 6489 0048 0122     		movs	r2, #1
 6490 004a 2068     		ldr	r0, [r4]
 6491              	.LVL702:
 6492 004c FFF7FEFF 		bl	TIM_CCxChannelCmd
 6493              	.LVL703:
1339:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6494              		.loc 1 1339 0
 6495 0050 2368     		ldr	r3, [r4]
 6496 0052 084A     		ldr	r2, .L461
 6497 0054 0849     		ldr	r1, .L461+4
 6498 0056 9342     		cmp	r3, r2
 6499 0058 18BF     		it	ne
 6500 005a 8B42     		cmpne	r3, r1
 6501 005c 03D1     		bne	.L459
1342:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6502              		.loc 1 1342 0
 6503 005e 5A6C     		ldr	r2, [r3, #68]
 6504 0060 42F40042 		orr	r2, r2, #32768
ARM GAS  /tmp/ccrrJVNd.s 			page 238


 6505 0064 5A64     		str	r2, [r3, #68]
 6506              	.L459:
1346:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6507              		.loc 1 1346 0
 6508 0066 2268     		ldr	r2, [r4]
 6509 0068 1368     		ldr	r3, [r2]
 6510 006a 43F00103 		orr	r3, r3, #1
 6511 006e 1360     		str	r3, [r2]
1350:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 6512              		.loc 1 1350 0
 6513 0070 0020     		movs	r0, #0
 6514 0072 10BD     		pop	{r4, pc}
 6515              	.LVL704:
 6516              	.L462:
 6517              		.align	2
 6518              	.L461:
 6519 0074 00040140 		.word	1073808384
 6520 0078 00000140 		.word	1073807360
 6521              		.cfi_endproc
 6522              	.LFE162:
 6524              		.section	.text.HAL_TIM_PWM_Stop_IT,"ax",%progbits
 6525              		.align	2
 6526              		.global	HAL_TIM_PWM_Stop_IT
 6527              		.thumb
 6528              		.thumb_func
 6530              	HAL_TIM_PWM_Stop_IT:
 6531              	.LFB163:
1365:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 6532              		.loc 1 1365 0
 6533              		.cfi_startproc
 6534              		@ args = 0, pretend = 0, frame = 0
 6535              		@ frame_needed = 0, uses_anonymous_args = 0
 6536              	.LVL705:
 6537 0000 10B5     		push	{r4, lr}
 6538              	.LCFI81:
 6539              		.cfi_def_cfa_offset 8
 6540              		.cfi_offset 4, -8
 6541              		.cfi_offset 14, -4
 6542 0002 0446     		mov	r4, r0
1369:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6543              		.loc 1 1369 0
 6544 0004 0C29     		cmp	r1, #12
 6545 0006 1FD8     		bhi	.L464
 6546 0008 DFE801F0 		tbb	[pc, r1]
 6547              	.L466:
 6548 000c 07       		.byte	(.L465-.L466)/2
 6549 000d 1E       		.byte	(.L464-.L466)/2
 6550 000e 1E       		.byte	(.L464-.L466)/2
 6551 000f 1E       		.byte	(.L464-.L466)/2
 6552 0010 0D       		.byte	(.L467-.L466)/2
 6553 0011 1E       		.byte	(.L464-.L466)/2
 6554 0012 1E       		.byte	(.L464-.L466)/2
 6555 0013 1E       		.byte	(.L464-.L466)/2
 6556 0014 13       		.byte	(.L468-.L466)/2
 6557 0015 1E       		.byte	(.L464-.L466)/2
 6558 0016 1E       		.byte	(.L464-.L466)/2
 6559 0017 1E       		.byte	(.L464-.L466)/2
ARM GAS  /tmp/ccrrJVNd.s 			page 239


 6560 0018 19       		.byte	(.L469-.L466)/2
 6561 0019 00       		.p2align 1
 6562              	.L465:
1374:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6563              		.loc 1 1374 0
 6564 001a 0268     		ldr	r2, [r0]
 6565 001c D368     		ldr	r3, [r2, #12]
 6566 001e 23F00203 		bic	r3, r3, #2
 6567 0022 D360     		str	r3, [r2, #12]
1376:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6568              		.loc 1 1376 0
 6569 0024 10E0     		b	.L464
 6570              	.L467:
1381:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6571              		.loc 1 1381 0
 6572 0026 0268     		ldr	r2, [r0]
 6573 0028 D368     		ldr	r3, [r2, #12]
 6574 002a 23F00403 		bic	r3, r3, #4
 6575 002e D360     		str	r3, [r2, #12]
1383:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6576              		.loc 1 1383 0
 6577 0030 0AE0     		b	.L464
 6578              	.L468:
1388:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6579              		.loc 1 1388 0
 6580 0032 0268     		ldr	r2, [r0]
 6581 0034 D368     		ldr	r3, [r2, #12]
 6582 0036 23F00803 		bic	r3, r3, #8
 6583 003a D360     		str	r3, [r2, #12]
1390:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6584              		.loc 1 1390 0
 6585 003c 04E0     		b	.L464
 6586              	.L469:
1395:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6587              		.loc 1 1395 0
 6588 003e 0268     		ldr	r2, [r0]
 6589 0040 D368     		ldr	r3, [r2, #12]
 6590 0042 23F01003 		bic	r3, r3, #16
 6591 0046 D360     		str	r3, [r2, #12]
 6592              	.L464:
1404:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6593              		.loc 1 1404 0
 6594 0048 0022     		movs	r2, #0
 6595 004a 2068     		ldr	r0, [r4]
 6596              	.LVL706:
 6597 004c FFF7FEFF 		bl	TIM_CCxChannelCmd
 6598              	.LVL707:
1406:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6599              		.loc 1 1406 0
 6600 0050 2368     		ldr	r3, [r4]
 6601 0052 124A     		ldr	r2, .L473
 6602 0054 1249     		ldr	r1, .L473+4
 6603 0056 9342     		cmp	r3, r2
 6604 0058 18BF     		it	ne
 6605 005a 8B42     		cmpne	r3, r1
 6606 005c 0DD1     		bne	.L470
1409:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
ARM GAS  /tmp/ccrrJVNd.s 			page 240


 6607              		.loc 1 1409 0
 6608 005e 196A     		ldr	r1, [r3, #32]
 6609 0060 41F21112 		movw	r2, #4369
 6610 0064 1142     		tst	r1, r2
 6611 0066 08D1     		bne	.L470
1409:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6612              		.loc 1 1409 0 is_stmt 0 discriminator 1
 6613 0068 196A     		ldr	r1, [r3, #32]
 6614 006a 40F24442 		movw	r2, #1092
 6615 006e 1142     		tst	r1, r2
 6616 0070 03D1     		bne	.L470
1409:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6617              		.loc 1 1409 0 discriminator 2
 6618 0072 5A6C     		ldr	r2, [r3, #68]
 6619 0074 22F40042 		bic	r2, r2, #32768
 6620 0078 5A64     		str	r2, [r3, #68]
 6621              	.L470:
1413:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6622              		.loc 1 1413 0 is_stmt 1
 6623 007a 2368     		ldr	r3, [r4]
 6624 007c 196A     		ldr	r1, [r3, #32]
 6625 007e 41F21112 		movw	r2, #4369
 6626 0082 1142     		tst	r1, r2
 6627 0084 08D1     		bne	.L471
1413:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6628              		.loc 1 1413 0 is_stmt 0 discriminator 1
 6629 0086 196A     		ldr	r1, [r3, #32]
 6630 0088 40F24442 		movw	r2, #1092
 6631 008c 1142     		tst	r1, r2
 6632 008e 03D1     		bne	.L471
1413:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6633              		.loc 1 1413 0 discriminator 2
 6634 0090 1A68     		ldr	r2, [r3]
 6635 0092 22F00102 		bic	r2, r2, #1
 6636 0096 1A60     		str	r2, [r3]
 6637              	.L471:
1417:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 6638              		.loc 1 1417 0 is_stmt 1
 6639 0098 0020     		movs	r0, #0
 6640 009a 10BD     		pop	{r4, pc}
 6641              	.LVL708:
 6642              	.L474:
 6643              		.align	2
 6644              	.L473:
 6645 009c 00040140 		.word	1073808384
 6646 00a0 00000140 		.word	1073807360
 6647              		.cfi_endproc
 6648              	.LFE163:
 6650              		.section	.text.HAL_TIM_PWM_Start_DMA,"ax",%progbits
 6651              		.align	2
 6652              		.global	HAL_TIM_PWM_Start_DMA
 6653              		.thumb
 6654              		.thumb_func
 6656              	HAL_TIM_PWM_Start_DMA:
 6657              	.LFB164:
1434:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 6658              		.loc 1 1434 0
ARM GAS  /tmp/ccrrJVNd.s 			page 241


 6659              		.cfi_startproc
 6660              		@ args = 0, pretend = 0, frame = 0
 6661              		@ frame_needed = 0, uses_anonymous_args = 0
 6662              	.LVL709:
 6663 0000 70B5     		push	{r4, r5, r6, lr}
 6664              	.LCFI82:
 6665              		.cfi_def_cfa_offset 16
 6666              		.cfi_offset 4, -16
 6667              		.cfi_offset 5, -12
 6668              		.cfi_offset 6, -8
 6669              		.cfi_offset 14, -4
1438:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6670              		.loc 1 1438 0
 6671 0002 90F83D50 		ldrb	r5, [r0, #61]	@ zero_extendqisi2
 6672 0006 EDB2     		uxtb	r5, r5
 6673 0008 022D     		cmp	r5, #2
 6674 000a 7BD0     		beq	.L485
1442:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6675              		.loc 1 1442 0
 6676 000c 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 6677 0010 E4B2     		uxtb	r4, r4
 6678 0012 012C     		cmp	r4, #1
 6679 0014 0AD1     		bne	.L477
1444:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 6680              		.loc 1 1444 0
 6681 0016 B2FA82F4 		clz	r4, r2
 6682 001a 6409     		lsrs	r4, r4, #5
 6683 001c 002B     		cmp	r3, #0
 6684 001e 08BF     		it	eq
 6685 0020 0024     		moveq	r4, #0
 6686 0022 002C     		cmp	r4, #0
 6687 0024 70D1     		bne	.L486
1450:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6688              		.loc 1 1450 0
 6689 0026 0224     		movs	r4, #2
 6690 0028 80F83D40 		strb	r4, [r0, #61]
 6691              	.L477:
 6692 002c 1646     		mov	r6, r2
 6693 002e 0D46     		mov	r5, r1
 6694 0030 0446     		mov	r4, r0
1453:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6695              		.loc 1 1453 0
 6696 0032 0C29     		cmp	r1, #12
 6697 0034 4FD8     		bhi	.L478
 6698 0036 DFE801F0 		tbb	[pc, r1]
 6699              	.LVL710:
 6700              	.L480:
 6701 003a 07       		.byte	(.L479-.L480)/2
 6702 003b 4E       		.byte	(.L478-.L480)/2
 6703 003c 4E       		.byte	(.L478-.L480)/2
 6704 003d 4E       		.byte	(.L478-.L480)/2
 6705 003e 19       		.byte	(.L481-.L480)/2
 6706 003f 4E       		.byte	(.L478-.L480)/2
 6707 0040 4E       		.byte	(.L478-.L480)/2
 6708 0041 4E       		.byte	(.L478-.L480)/2
 6709 0042 2B       		.byte	(.L482-.L480)/2
 6710 0043 4E       		.byte	(.L478-.L480)/2
ARM GAS  /tmp/ccrrJVNd.s 			page 242


 6711 0044 4E       		.byte	(.L478-.L480)/2
 6712 0045 4E       		.byte	(.L478-.L480)/2
 6713 0046 3D       		.byte	(.L483-.L480)/2
 6714 0047 00       		.p2align 1
 6715              	.L479:
1458:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 6716              		.loc 1 1458 0
 6717 0048 426A     		ldr	r2, [r0, #36]
 6718 004a 3049     		ldr	r1, .L488
 6719              	.LVL711:
 6720 004c D163     		str	r1, [r2, #60]
1461:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6721              		.loc 1 1461 0
 6722 004e 426A     		ldr	r2, [r0, #36]
 6723 0050 2F49     		ldr	r1, .L488+4
 6724 0052 D164     		str	r1, [r2, #76]
1464:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6725              		.loc 1 1464 0
 6726 0054 0268     		ldr	r2, [r0]
 6727 0056 3432     		adds	r2, r2, #52
 6728 0058 3146     		mov	r1, r6
 6729 005a 406A     		ldr	r0, [r0, #36]
 6730              	.LVL712:
 6731 005c FFF7FEFF 		bl	HAL_DMA_Start_IT
 6732              	.LVL713:
1467:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6733              		.loc 1 1467 0
 6734 0060 2268     		ldr	r2, [r4]
 6735 0062 D368     		ldr	r3, [r2, #12]
 6736 0064 43F40073 		orr	r3, r3, #512
 6737 0068 D360     		str	r3, [r2, #12]
1469:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6738              		.loc 1 1469 0
 6739 006a 34E0     		b	.L478
 6740              	.LVL714:
 6741              	.L481:
1474:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 6742              		.loc 1 1474 0
 6743 006c 826A     		ldr	r2, [r0, #40]
 6744 006e 2749     		ldr	r1, .L488
 6745              	.LVL715:
 6746 0070 D163     		str	r1, [r2, #60]
1477:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6747              		.loc 1 1477 0
 6748 0072 826A     		ldr	r2, [r0, #40]
 6749 0074 2649     		ldr	r1, .L488+4
 6750 0076 D164     		str	r1, [r2, #76]
1480:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6751              		.loc 1 1480 0
 6752 0078 0268     		ldr	r2, [r0]
 6753 007a 3832     		adds	r2, r2, #56
 6754 007c 3146     		mov	r1, r6
 6755 007e 806A     		ldr	r0, [r0, #40]
 6756              	.LVL716:
 6757 0080 FFF7FEFF 		bl	HAL_DMA_Start_IT
 6758              	.LVL717:
1483:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
ARM GAS  /tmp/ccrrJVNd.s 			page 243


 6759              		.loc 1 1483 0
 6760 0084 2268     		ldr	r2, [r4]
 6761 0086 D368     		ldr	r3, [r2, #12]
 6762 0088 43F48063 		orr	r3, r3, #1024
 6763 008c D360     		str	r3, [r2, #12]
1485:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6764              		.loc 1 1485 0
 6765 008e 22E0     		b	.L478
 6766              	.LVL718:
 6767              	.L482:
1490:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 6768              		.loc 1 1490 0
 6769 0090 C26A     		ldr	r2, [r0, #44]
 6770 0092 1E49     		ldr	r1, .L488
 6771              	.LVL719:
 6772 0094 D163     		str	r1, [r2, #60]
1493:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6773              		.loc 1 1493 0
 6774 0096 C26A     		ldr	r2, [r0, #44]
 6775 0098 1D49     		ldr	r1, .L488+4
 6776 009a D164     		str	r1, [r2, #76]
1496:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6777              		.loc 1 1496 0
 6778 009c 0268     		ldr	r2, [r0]
 6779 009e 3C32     		adds	r2, r2, #60
 6780 00a0 3146     		mov	r1, r6
 6781 00a2 C06A     		ldr	r0, [r0, #44]
 6782              	.LVL720:
 6783 00a4 FFF7FEFF 		bl	HAL_DMA_Start_IT
 6784              	.LVL721:
1499:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6785              		.loc 1 1499 0
 6786 00a8 2268     		ldr	r2, [r4]
 6787 00aa D368     		ldr	r3, [r2, #12]
 6788 00ac 43F40063 		orr	r3, r3, #2048
 6789 00b0 D360     		str	r3, [r2, #12]
1501:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6790              		.loc 1 1501 0
 6791 00b2 10E0     		b	.L478
 6792              	.LVL722:
 6793              	.L483:
1506:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 6794              		.loc 1 1506 0
 6795 00b4 026B     		ldr	r2, [r0, #48]
 6796 00b6 1549     		ldr	r1, .L488
 6797              	.LVL723:
 6798 00b8 D163     		str	r1, [r2, #60]
1509:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6799              		.loc 1 1509 0
 6800 00ba 026B     		ldr	r2, [r0, #48]
 6801 00bc 1449     		ldr	r1, .L488+4
 6802 00be D164     		str	r1, [r2, #76]
1512:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 6803              		.loc 1 1512 0
 6804 00c0 0268     		ldr	r2, [r0]
 6805 00c2 4032     		adds	r2, r2, #64
 6806 00c4 3146     		mov	r1, r6
ARM GAS  /tmp/ccrrJVNd.s 			page 244


 6807 00c6 006B     		ldr	r0, [r0, #48]
 6808              	.LVL724:
 6809 00c8 FFF7FEFF 		bl	HAL_DMA_Start_IT
 6810              	.LVL725:
1515:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6811              		.loc 1 1515 0
 6812 00cc 2268     		ldr	r2, [r4]
 6813 00ce D368     		ldr	r3, [r2, #12]
 6814 00d0 43F48053 		orr	r3, r3, #4096
 6815 00d4 D360     		str	r3, [r2, #12]
 6816              	.L478:
1524:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6817              		.loc 1 1524 0
 6818 00d6 0122     		movs	r2, #1
 6819 00d8 2946     		mov	r1, r5
 6820 00da 2068     		ldr	r0, [r4]
 6821 00dc FFF7FEFF 		bl	TIM_CCxChannelCmd
 6822              	.LVL726:
1526:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6823              		.loc 1 1526 0
 6824 00e0 2368     		ldr	r3, [r4]
 6825 00e2 0C4A     		ldr	r2, .L488+8
 6826 00e4 0C49     		ldr	r1, .L488+12
 6827 00e6 9342     		cmp	r3, r2
 6828 00e8 18BF     		it	ne
 6829 00ea 8B42     		cmpne	r3, r1
 6830 00ec 03D1     		bne	.L484
1529:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6831              		.loc 1 1529 0
 6832 00ee 5A6C     		ldr	r2, [r3, #68]
 6833 00f0 42F40042 		orr	r2, r2, #32768
 6834 00f4 5A64     		str	r2, [r3, #68]
 6835              	.L484:
1533:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6836              		.loc 1 1533 0
 6837 00f6 2268     		ldr	r2, [r4]
 6838 00f8 1368     		ldr	r3, [r2]
 6839 00fa 43F00103 		orr	r3, r3, #1
 6840 00fe 1360     		str	r3, [r2]
1536:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 6841              		.loc 1 1536 0
 6842 0100 0020     		movs	r0, #0
 6843 0102 70BD     		pop	{r4, r5, r6, pc}
 6844              	.LVL727:
 6845              	.L485:
1440:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6846              		.loc 1 1440 0
 6847 0104 0220     		movs	r0, #2
 6848              	.LVL728:
 6849 0106 70BD     		pop	{r4, r5, r6, pc}
 6850              	.LVL729:
 6851              	.L486:
1446:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6852              		.loc 1 1446 0
 6853 0108 0120     		movs	r0, #1
 6854              	.LVL730:
1537:HALLIB/Src/stm32f7xx_hal_tim.c **** 
ARM GAS  /tmp/ccrrJVNd.s 			page 245


 6855              		.loc 1 1537 0
 6856 010a 70BD     		pop	{r4, r5, r6, pc}
 6857              	.L489:
 6858              		.align	2
 6859              	.L488:
 6860 010c 00000000 		.word	TIM_DMADelayPulseCplt
 6861 0110 00000000 		.word	TIM_DMAError
 6862 0114 00040140 		.word	1073808384
 6863 0118 00000140 		.word	1073807360
 6864              		.cfi_endproc
 6865              	.LFE164:
 6867              		.section	.text.HAL_TIM_PWM_Stop_DMA,"ax",%progbits
 6868              		.align	2
 6869              		.global	HAL_TIM_PWM_Stop_DMA
 6870              		.thumb
 6871              		.thumb_func
 6873              	HAL_TIM_PWM_Stop_DMA:
 6874              	.LFB165:
1552:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 6875              		.loc 1 1552 0
 6876              		.cfi_startproc
 6877              		@ args = 0, pretend = 0, frame = 0
 6878              		@ frame_needed = 0, uses_anonymous_args = 0
 6879              	.LVL731:
 6880 0000 10B5     		push	{r4, lr}
 6881              	.LCFI83:
 6882              		.cfi_def_cfa_offset 8
 6883              		.cfi_offset 4, -8
 6884              		.cfi_offset 14, -4
 6885 0002 0446     		mov	r4, r0
1556:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6886              		.loc 1 1556 0
 6887 0004 0C29     		cmp	r1, #12
 6888 0006 1FD8     		bhi	.L491
 6889 0008 DFE801F0 		tbb	[pc, r1]
 6890              	.L493:
 6891 000c 07       		.byte	(.L492-.L493)/2
 6892 000d 1E       		.byte	(.L491-.L493)/2
 6893 000e 1E       		.byte	(.L491-.L493)/2
 6894 000f 1E       		.byte	(.L491-.L493)/2
 6895 0010 0D       		.byte	(.L494-.L493)/2
 6896 0011 1E       		.byte	(.L491-.L493)/2
 6897 0012 1E       		.byte	(.L491-.L493)/2
 6898 0013 1E       		.byte	(.L491-.L493)/2
 6899 0014 13       		.byte	(.L495-.L493)/2
 6900 0015 1E       		.byte	(.L491-.L493)/2
 6901 0016 1E       		.byte	(.L491-.L493)/2
 6902 0017 1E       		.byte	(.L491-.L493)/2
 6903 0018 19       		.byte	(.L496-.L493)/2
 6904 0019 00       		.p2align 1
 6905              	.L492:
1561:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6906              		.loc 1 1561 0
 6907 001a 0268     		ldr	r2, [r0]
 6908 001c D368     		ldr	r3, [r2, #12]
 6909 001e 23F40073 		bic	r3, r3, #512
 6910 0022 D360     		str	r3, [r2, #12]
ARM GAS  /tmp/ccrrJVNd.s 			page 246


1563:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6911              		.loc 1 1563 0
 6912 0024 10E0     		b	.L491
 6913              	.L494:
1568:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6914              		.loc 1 1568 0
 6915 0026 0268     		ldr	r2, [r0]
 6916 0028 D368     		ldr	r3, [r2, #12]
 6917 002a 23F48063 		bic	r3, r3, #1024
 6918 002e D360     		str	r3, [r2, #12]
1570:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6919              		.loc 1 1570 0
 6920 0030 0AE0     		b	.L491
 6921              	.L495:
1575:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6922              		.loc 1 1575 0
 6923 0032 0268     		ldr	r2, [r0]
 6924 0034 D368     		ldr	r3, [r2, #12]
 6925 0036 23F40063 		bic	r3, r3, #2048
 6926 003a D360     		str	r3, [r2, #12]
1577:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 6927              		.loc 1 1577 0
 6928 003c 04E0     		b	.L491
 6929              	.L496:
1582:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 6930              		.loc 1 1582 0
 6931 003e 0268     		ldr	r2, [r0]
 6932 0040 D368     		ldr	r3, [r2, #12]
 6933 0042 23F48053 		bic	r3, r3, #4096
 6934 0046 D360     		str	r3, [r2, #12]
 6935              	.L491:
1591:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6936              		.loc 1 1591 0
 6937 0048 0022     		movs	r2, #0
 6938 004a 2068     		ldr	r0, [r4]
 6939              	.LVL732:
 6940 004c FFF7FEFF 		bl	TIM_CCxChannelCmd
 6941              	.LVL733:
1593:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 6942              		.loc 1 1593 0
 6943 0050 2368     		ldr	r3, [r4]
 6944 0052 144A     		ldr	r2, .L500
 6945 0054 1449     		ldr	r1, .L500+4
 6946 0056 9342     		cmp	r3, r2
 6947 0058 18BF     		it	ne
 6948 005a 8B42     		cmpne	r3, r1
 6949 005c 0DD1     		bne	.L497
1596:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6950              		.loc 1 1596 0
 6951 005e 196A     		ldr	r1, [r3, #32]
 6952 0060 41F21112 		movw	r2, #4369
 6953 0064 1142     		tst	r1, r2
 6954 0066 08D1     		bne	.L497
1596:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6955              		.loc 1 1596 0 is_stmt 0 discriminator 1
 6956 0068 196A     		ldr	r1, [r3, #32]
 6957 006a 40F24442 		movw	r2, #1092
ARM GAS  /tmp/ccrrJVNd.s 			page 247


 6958 006e 1142     		tst	r1, r2
 6959 0070 03D1     		bne	.L497
1596:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 6960              		.loc 1 1596 0 discriminator 2
 6961 0072 5A6C     		ldr	r2, [r3, #68]
 6962 0074 22F40042 		bic	r2, r2, #32768
 6963 0078 5A64     		str	r2, [r3, #68]
 6964              	.L497:
1600:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6965              		.loc 1 1600 0 is_stmt 1
 6966 007a 2368     		ldr	r3, [r4]
 6967 007c 196A     		ldr	r1, [r3, #32]
 6968 007e 41F21112 		movw	r2, #4369
 6969 0082 1142     		tst	r1, r2
 6970 0084 08D1     		bne	.L498
1600:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6971              		.loc 1 1600 0 is_stmt 0 discriminator 1
 6972 0086 196A     		ldr	r1, [r3, #32]
 6973 0088 40F24442 		movw	r2, #1092
 6974 008c 1142     		tst	r1, r2
 6975 008e 03D1     		bne	.L498
1600:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6976              		.loc 1 1600 0 discriminator 2
 6977 0090 1A68     		ldr	r2, [r3]
 6978 0092 22F00102 		bic	r2, r2, #1
 6979 0096 1A60     		str	r2, [r3]
 6980              	.L498:
1603:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 6981              		.loc 1 1603 0 is_stmt 1
 6982 0098 0123     		movs	r3, #1
 6983 009a 84F83D30 		strb	r3, [r4, #61]
1607:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 6984              		.loc 1 1607 0
 6985 009e 0020     		movs	r0, #0
 6986 00a0 10BD     		pop	{r4, pc}
 6987              	.LVL734:
 6988              	.L501:
 6989 00a2 00BF     		.align	2
 6990              	.L500:
 6991 00a4 00040140 		.word	1073808384
 6992 00a8 00000140 		.word	1073807360
 6993              		.cfi_endproc
 6994              	.LFE165:
 6996              		.section	.text.HAL_TIM_IC_Start,"ax",%progbits
 6997              		.align	2
 6998              		.global	HAL_TIM_IC_Start
 6999              		.thumb
 7000              		.thumb_func
 7002              	HAL_TIM_IC_Start:
 7003              	.LFB170:
1770:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 7004              		.loc 1 1770 0
 7005              		.cfi_startproc
 7006              		@ args = 0, pretend = 0, frame = 0
 7007              		@ frame_needed = 0, uses_anonymous_args = 0
 7008              	.LVL735:
 7009 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccrrJVNd.s 			page 248


 7010              	.LCFI84:
 7011              		.cfi_def_cfa_offset 8
 7012              		.cfi_offset 4, -8
 7013              		.cfi_offset 14, -4
 7014 0002 0446     		mov	r4, r0
1775:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7015              		.loc 1 1775 0
 7016 0004 0122     		movs	r2, #1
 7017 0006 0068     		ldr	r0, [r0]
 7018              	.LVL736:
 7019 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7020              	.LVL737:
1778:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7021              		.loc 1 1778 0
 7022 000c 2268     		ldr	r2, [r4]
 7023 000e 1368     		ldr	r3, [r2]
 7024 0010 43F00103 		orr	r3, r3, #1
 7025 0014 1360     		str	r3, [r2]
1782:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7026              		.loc 1 1782 0
 7027 0016 0020     		movs	r0, #0
 7028 0018 10BD     		pop	{r4, pc}
 7029              		.cfi_endproc
 7030              	.LFE170:
 7032 001a 00BF     		.section	.text.HAL_TIM_IC_Stop,"ax",%progbits
 7033              		.align	2
 7034              		.global	HAL_TIM_IC_Stop
 7035              		.thumb
 7036              		.thumb_func
 7038              	HAL_TIM_IC_Stop:
 7039              	.LFB171:
1797:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 7040              		.loc 1 1797 0
 7041              		.cfi_startproc
 7042              		@ args = 0, pretend = 0, frame = 0
 7043              		@ frame_needed = 0, uses_anonymous_args = 0
 7044              	.LVL738:
 7045 0000 10B5     		push	{r4, lr}
 7046              	.LCFI85:
 7047              		.cfi_def_cfa_offset 8
 7048              		.cfi_offset 4, -8
 7049              		.cfi_offset 14, -4
 7050 0002 0446     		mov	r4, r0
1802:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7051              		.loc 1 1802 0
 7052 0004 0022     		movs	r2, #0
 7053 0006 0068     		ldr	r0, [r0]
 7054              	.LVL739:
 7055 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7056              	.LVL740:
1805:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7057              		.loc 1 1805 0
 7058 000c 2368     		ldr	r3, [r4]
 7059 000e 196A     		ldr	r1, [r3, #32]
 7060 0010 41F21112 		movw	r2, #4369
 7061 0014 1142     		tst	r1, r2
 7062 0016 08D1     		bne	.L505
ARM GAS  /tmp/ccrrJVNd.s 			page 249


1805:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7063              		.loc 1 1805 0 is_stmt 0 discriminator 1
 7064 0018 196A     		ldr	r1, [r3, #32]
 7065 001a 40F24442 		movw	r2, #1092
 7066 001e 1142     		tst	r1, r2
 7067 0020 03D1     		bne	.L505
1805:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7068              		.loc 1 1805 0 discriminator 2
 7069 0022 1A68     		ldr	r2, [r3]
 7070 0024 22F00102 		bic	r2, r2, #1
 7071 0028 1A60     		str	r2, [r3]
 7072              	.L505:
1809:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7073              		.loc 1 1809 0 is_stmt 1
 7074 002a 0020     		movs	r0, #0
 7075 002c 10BD     		pop	{r4, pc}
 7076              		.cfi_endproc
 7077              	.LFE171:
 7079 002e 00BF     		.section	.text.HAL_TIM_IC_Start_IT,"ax",%progbits
 7080              		.align	2
 7081              		.global	HAL_TIM_IC_Start_IT
 7082              		.thumb
 7083              		.thumb_func
 7085              	HAL_TIM_IC_Start_IT:
 7086              	.LFB172:
1824:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 7087              		.loc 1 1824 0
 7088              		.cfi_startproc
 7089              		@ args = 0, pretend = 0, frame = 0
 7090              		@ frame_needed = 0, uses_anonymous_args = 0
 7091              	.LVL741:
 7092 0000 10B5     		push	{r4, lr}
 7093              	.LCFI86:
 7094              		.cfi_def_cfa_offset 8
 7095              		.cfi_offset 4, -8
 7096              		.cfi_offset 14, -4
 7097 0002 0446     		mov	r4, r0
1828:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7098              		.loc 1 1828 0
 7099 0004 0C29     		cmp	r1, #12
 7100 0006 1FD8     		bhi	.L508
 7101 0008 DFE801F0 		tbb	[pc, r1]
 7102              	.L510:
 7103 000c 07       		.byte	(.L509-.L510)/2
 7104 000d 1E       		.byte	(.L508-.L510)/2
 7105 000e 1E       		.byte	(.L508-.L510)/2
 7106 000f 1E       		.byte	(.L508-.L510)/2
 7107 0010 0D       		.byte	(.L511-.L510)/2
 7108 0011 1E       		.byte	(.L508-.L510)/2
 7109 0012 1E       		.byte	(.L508-.L510)/2
 7110 0013 1E       		.byte	(.L508-.L510)/2
 7111 0014 13       		.byte	(.L512-.L510)/2
 7112 0015 1E       		.byte	(.L508-.L510)/2
 7113 0016 1E       		.byte	(.L508-.L510)/2
 7114 0017 1E       		.byte	(.L508-.L510)/2
 7115 0018 19       		.byte	(.L513-.L510)/2
 7116 0019 00       		.p2align 1
ARM GAS  /tmp/ccrrJVNd.s 			page 250


 7117              	.L509:
1833:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7118              		.loc 1 1833 0
 7119 001a 0268     		ldr	r2, [r0]
 7120 001c D368     		ldr	r3, [r2, #12]
 7121 001e 43F00203 		orr	r3, r3, #2
 7122 0022 D360     		str	r3, [r2, #12]
1835:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7123              		.loc 1 1835 0
 7124 0024 10E0     		b	.L508
 7125              	.L511:
1840:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7126              		.loc 1 1840 0
 7127 0026 0268     		ldr	r2, [r0]
 7128 0028 D368     		ldr	r3, [r2, #12]
 7129 002a 43F00403 		orr	r3, r3, #4
 7130 002e D360     		str	r3, [r2, #12]
1842:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7131              		.loc 1 1842 0
 7132 0030 0AE0     		b	.L508
 7133              	.L512:
1847:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7134              		.loc 1 1847 0
 7135 0032 0268     		ldr	r2, [r0]
 7136 0034 D368     		ldr	r3, [r2, #12]
 7137 0036 43F00803 		orr	r3, r3, #8
 7138 003a D360     		str	r3, [r2, #12]
1849:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7139              		.loc 1 1849 0
 7140 003c 04E0     		b	.L508
 7141              	.L513:
1854:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7142              		.loc 1 1854 0
 7143 003e 0268     		ldr	r2, [r0]
 7144 0040 D368     		ldr	r3, [r2, #12]
 7145 0042 43F01003 		orr	r3, r3, #16
 7146 0046 D360     		str	r3, [r2, #12]
 7147              	.L508:
1862:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7148              		.loc 1 1862 0
 7149 0048 0122     		movs	r2, #1
 7150 004a 2068     		ldr	r0, [r4]
 7151              	.LVL742:
 7152 004c FFF7FEFF 		bl	TIM_CCxChannelCmd
 7153              	.LVL743:
1865:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7154              		.loc 1 1865 0
 7155 0050 2268     		ldr	r2, [r4]
 7156 0052 1368     		ldr	r3, [r2]
 7157 0054 43F00103 		orr	r3, r3, #1
 7158 0058 1360     		str	r3, [r2]
1869:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7159              		.loc 1 1869 0
 7160 005a 0020     		movs	r0, #0
 7161 005c 10BD     		pop	{r4, pc}
 7162              		.cfi_endproc
 7163              	.LFE172:
ARM GAS  /tmp/ccrrJVNd.s 			page 251


 7165 005e 00BF     		.section	.text.HAL_TIM_IC_Stop_IT,"ax",%progbits
 7166              		.align	2
 7167              		.global	HAL_TIM_IC_Stop_IT
 7168              		.thumb
 7169              		.thumb_func
 7171              	HAL_TIM_IC_Stop_IT:
 7172              	.LFB173:
1884:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 7173              		.loc 1 1884 0
 7174              		.cfi_startproc
 7175              		@ args = 0, pretend = 0, frame = 0
 7176              		@ frame_needed = 0, uses_anonymous_args = 0
 7177              	.LVL744:
 7178 0000 10B5     		push	{r4, lr}
 7179              	.LCFI87:
 7180              		.cfi_def_cfa_offset 8
 7181              		.cfi_offset 4, -8
 7182              		.cfi_offset 14, -4
 7183 0002 0446     		mov	r4, r0
1888:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7184              		.loc 1 1888 0
 7185 0004 0C29     		cmp	r1, #12
 7186 0006 1FD8     		bhi	.L516
 7187 0008 DFE801F0 		tbb	[pc, r1]
 7188              	.L518:
 7189 000c 07       		.byte	(.L517-.L518)/2
 7190 000d 1E       		.byte	(.L516-.L518)/2
 7191 000e 1E       		.byte	(.L516-.L518)/2
 7192 000f 1E       		.byte	(.L516-.L518)/2
 7193 0010 0D       		.byte	(.L519-.L518)/2
 7194 0011 1E       		.byte	(.L516-.L518)/2
 7195 0012 1E       		.byte	(.L516-.L518)/2
 7196 0013 1E       		.byte	(.L516-.L518)/2
 7197 0014 13       		.byte	(.L520-.L518)/2
 7198 0015 1E       		.byte	(.L516-.L518)/2
 7199 0016 1E       		.byte	(.L516-.L518)/2
 7200 0017 1E       		.byte	(.L516-.L518)/2
 7201 0018 19       		.byte	(.L521-.L518)/2
 7202 0019 00       		.p2align 1
 7203              	.L517:
1893:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7204              		.loc 1 1893 0
 7205 001a 0268     		ldr	r2, [r0]
 7206 001c D368     		ldr	r3, [r2, #12]
 7207 001e 23F00203 		bic	r3, r3, #2
 7208 0022 D360     		str	r3, [r2, #12]
1895:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7209              		.loc 1 1895 0
 7210 0024 10E0     		b	.L516
 7211              	.L519:
1900:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7212              		.loc 1 1900 0
 7213 0026 0268     		ldr	r2, [r0]
 7214 0028 D368     		ldr	r3, [r2, #12]
 7215 002a 23F00403 		bic	r3, r3, #4
 7216 002e D360     		str	r3, [r2, #12]
1902:HALLIB/Src/stm32f7xx_hal_tim.c ****     
ARM GAS  /tmp/ccrrJVNd.s 			page 252


 7217              		.loc 1 1902 0
 7218 0030 0AE0     		b	.L516
 7219              	.L520:
1907:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7220              		.loc 1 1907 0
 7221 0032 0268     		ldr	r2, [r0]
 7222 0034 D368     		ldr	r3, [r2, #12]
 7223 0036 23F00803 		bic	r3, r3, #8
 7224 003a D360     		str	r3, [r2, #12]
1909:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7225              		.loc 1 1909 0
 7226 003c 04E0     		b	.L516
 7227              	.L521:
1914:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7228              		.loc 1 1914 0
 7229 003e 0268     		ldr	r2, [r0]
 7230 0040 D368     		ldr	r3, [r2, #12]
 7231 0042 23F01003 		bic	r3, r3, #16
 7232 0046 D360     		str	r3, [r2, #12]
 7233              	.L516:
1923:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7234              		.loc 1 1923 0
 7235 0048 0022     		movs	r2, #0
 7236 004a 2068     		ldr	r0, [r4]
 7237              	.LVL745:
 7238 004c FFF7FEFF 		bl	TIM_CCxChannelCmd
 7239              	.LVL746:
1926:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7240              		.loc 1 1926 0
 7241 0050 2368     		ldr	r3, [r4]
 7242 0052 196A     		ldr	r1, [r3, #32]
 7243 0054 41F21112 		movw	r2, #4369
 7244 0058 1142     		tst	r1, r2
 7245 005a 08D1     		bne	.L522
1926:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7246              		.loc 1 1926 0 is_stmt 0 discriminator 1
 7247 005c 196A     		ldr	r1, [r3, #32]
 7248 005e 40F24442 		movw	r2, #1092
 7249 0062 1142     		tst	r1, r2
 7250 0064 03D1     		bne	.L522
1926:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7251              		.loc 1 1926 0 discriminator 2
 7252 0066 1A68     		ldr	r2, [r3]
 7253 0068 22F00102 		bic	r2, r2, #1
 7254 006c 1A60     		str	r2, [r3]
 7255              	.L522:
1930:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7256              		.loc 1 1930 0 is_stmt 1
 7257 006e 0020     		movs	r0, #0
 7258 0070 10BD     		pop	{r4, pc}
 7259              		.cfi_endproc
 7260              	.LFE173:
 7262 0072 00BF     		.section	.text.HAL_TIM_IC_Start_DMA,"ax",%progbits
 7263              		.align	2
 7264              		.global	HAL_TIM_IC_Start_DMA
 7265              		.thumb
 7266              		.thumb_func
ARM GAS  /tmp/ccrrJVNd.s 			page 253


 7268              	HAL_TIM_IC_Start_DMA:
 7269              	.LFB174:
1947:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 7270              		.loc 1 1947 0
 7271              		.cfi_startproc
 7272              		@ args = 0, pretend = 0, frame = 0
 7273              		@ frame_needed = 0, uses_anonymous_args = 0
 7274              	.LVL747:
 7275 0000 38B5     		push	{r3, r4, r5, lr}
 7276              	.LCFI88:
 7277              		.cfi_def_cfa_offset 16
 7278              		.cfi_offset 3, -16
 7279              		.cfi_offset 4, -12
 7280              		.cfi_offset 5, -8
 7281              		.cfi_offset 14, -4
1952:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7282              		.loc 1 1952 0
 7283 0002 90F83D50 		ldrb	r5, [r0, #61]	@ zero_extendqisi2
 7284 0006 EDB2     		uxtb	r5, r5
 7285 0008 022D     		cmp	r5, #2
 7286 000a 6BD0     		beq	.L533
1956:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7287              		.loc 1 1956 0
 7288 000c 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 7289 0010 E4B2     		uxtb	r4, r4
 7290 0012 012C     		cmp	r4, #1
 7291 0014 0AD1     		bne	.L526
1958:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 7292              		.loc 1 1958 0
 7293 0016 B2FA82F4 		clz	r4, r2
 7294 001a 6409     		lsrs	r4, r4, #5
 7295 001c 002B     		cmp	r3, #0
 7296 001e 08BF     		it	eq
 7297 0020 0024     		moveq	r4, #0
 7298 0022 002C     		cmp	r4, #0
 7299 0024 60D1     		bne	.L534
1964:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7300              		.loc 1 1964 0
 7301 0026 0224     		movs	r4, #2
 7302 0028 80F83D40 		strb	r4, [r0, #61]
 7303              	.L526:
 7304 002c 0D46     		mov	r5, r1
 7305 002e 0446     		mov	r4, r0
1968:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7306              		.loc 1 1968 0
 7307 0030 0C2D     		cmp	r5, #12
 7308 0032 4BD8     		bhi	.L527
 7309 0034 DFE805F0 		tbb	[pc, r5]
 7310              	.LVL748:
 7311              	.L529:
 7312 0038 07       		.byte	(.L528-.L529)/2
 7313 0039 4A       		.byte	(.L527-.L529)/2
 7314 003a 4A       		.byte	(.L527-.L529)/2
 7315 003b 4A       		.byte	(.L527-.L529)/2
 7316 003c 18       		.byte	(.L530-.L529)/2
 7317 003d 4A       		.byte	(.L527-.L529)/2
 7318 003e 4A       		.byte	(.L527-.L529)/2
ARM GAS  /tmp/ccrrJVNd.s 			page 254


 7319 003f 4A       		.byte	(.L527-.L529)/2
 7320 0040 29       		.byte	(.L531-.L529)/2
 7321 0041 4A       		.byte	(.L527-.L529)/2
 7322 0042 4A       		.byte	(.L527-.L529)/2
 7323 0043 4A       		.byte	(.L527-.L529)/2
 7324 0044 3A       		.byte	(.L532-.L529)/2
 7325 0045 00       		.p2align 1
 7326              	.L528:
1973:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 7327              		.loc 1 1973 0
 7328 0046 416A     		ldr	r1, [r0, #36]
 7329 0048 2848     		ldr	r0, .L536
 7330              	.LVL749:
 7331 004a C863     		str	r0, [r1, #60]
1976:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 7332              		.loc 1 1976 0
 7333 004c 616A     		ldr	r1, [r4, #36]
 7334 004e 2848     		ldr	r0, .L536+4
 7335 0050 C864     		str	r0, [r1, #76]
1979:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 7336              		.loc 1 1979 0
 7337 0052 2168     		ldr	r1, [r4]
 7338 0054 3431     		adds	r1, r1, #52
 7339 0056 606A     		ldr	r0, [r4, #36]
 7340 0058 FFF7FEFF 		bl	HAL_DMA_Start_IT
 7341              	.LVL750:
1982:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7342              		.loc 1 1982 0
 7343 005c 2268     		ldr	r2, [r4]
 7344 005e D368     		ldr	r3, [r2, #12]
 7345 0060 43F40073 		orr	r3, r3, #512
 7346 0064 D360     		str	r3, [r2, #12]
1984:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7347              		.loc 1 1984 0
 7348 0066 31E0     		b	.L527
 7349              	.LVL751:
 7350              	.L530:
1989:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 7351              		.loc 1 1989 0
 7352 0068 816A     		ldr	r1, [r0, #40]
 7353 006a 2048     		ldr	r0, .L536
 7354              	.LVL752:
 7355 006c C863     		str	r0, [r1, #60]
1992:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 7356              		.loc 1 1992 0
 7357 006e A16A     		ldr	r1, [r4, #40]
 7358 0070 1F48     		ldr	r0, .L536+4
 7359 0072 C864     		str	r0, [r1, #76]
1995:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 7360              		.loc 1 1995 0
 7361 0074 2168     		ldr	r1, [r4]
 7362 0076 3831     		adds	r1, r1, #56
 7363 0078 A06A     		ldr	r0, [r4, #40]
 7364 007a FFF7FEFF 		bl	HAL_DMA_Start_IT
 7365              	.LVL753:
1998:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7366              		.loc 1 1998 0
ARM GAS  /tmp/ccrrJVNd.s 			page 255


 7367 007e 2268     		ldr	r2, [r4]
 7368 0080 D368     		ldr	r3, [r2, #12]
 7369 0082 43F48063 		orr	r3, r3, #1024
 7370 0086 D360     		str	r3, [r2, #12]
2000:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7371              		.loc 1 2000 0
 7372 0088 20E0     		b	.L527
 7373              	.LVL754:
 7374              	.L531:
2005:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 7375              		.loc 1 2005 0
 7376 008a C16A     		ldr	r1, [r0, #44]
 7377 008c 1748     		ldr	r0, .L536
 7378              	.LVL755:
 7379 008e C863     		str	r0, [r1, #60]
2008:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 7380              		.loc 1 2008 0
 7381 0090 E16A     		ldr	r1, [r4, #44]
 7382 0092 1748     		ldr	r0, .L536+4
 7383 0094 C864     		str	r0, [r1, #76]
2011:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 7384              		.loc 1 2011 0
 7385 0096 2168     		ldr	r1, [r4]
 7386 0098 3C31     		adds	r1, r1, #60
 7387 009a E06A     		ldr	r0, [r4, #44]
 7388 009c FFF7FEFF 		bl	HAL_DMA_Start_IT
 7389              	.LVL756:
2014:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7390              		.loc 1 2014 0
 7391 00a0 2268     		ldr	r2, [r4]
 7392 00a2 D368     		ldr	r3, [r2, #12]
 7393 00a4 43F40063 		orr	r3, r3, #2048
 7394 00a8 D360     		str	r3, [r2, #12]
2016:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7395              		.loc 1 2016 0
 7396 00aa 0FE0     		b	.L527
 7397              	.LVL757:
 7398              	.L532:
2021:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 7399              		.loc 1 2021 0
 7400 00ac 016B     		ldr	r1, [r0, #48]
 7401 00ae 0F48     		ldr	r0, .L536
 7402              	.LVL758:
 7403 00b0 C863     		str	r0, [r1, #60]
2024:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 7404              		.loc 1 2024 0
 7405 00b2 216B     		ldr	r1, [r4, #48]
 7406 00b4 0E48     		ldr	r0, .L536+4
 7407 00b6 C864     		str	r0, [r1, #76]
2027:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 7408              		.loc 1 2027 0
 7409 00b8 2168     		ldr	r1, [r4]
 7410 00ba 4031     		adds	r1, r1, #64
 7411 00bc 206B     		ldr	r0, [r4, #48]
 7412 00be FFF7FEFF 		bl	HAL_DMA_Start_IT
 7413              	.LVL759:
2030:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
ARM GAS  /tmp/ccrrJVNd.s 			page 256


 7414              		.loc 1 2030 0
 7415 00c2 2268     		ldr	r2, [r4]
 7416 00c4 D368     		ldr	r3, [r2, #12]
 7417 00c6 43F48053 		orr	r3, r3, #4096
 7418 00ca D360     		str	r3, [r2, #12]
 7419              	.L527:
2039:HALLIB/Src/stm32f7xx_hal_tim.c ****    
 7420              		.loc 1 2039 0
 7421 00cc 0122     		movs	r2, #1
 7422 00ce 2946     		mov	r1, r5
 7423 00d0 2068     		ldr	r0, [r4]
 7424 00d2 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7425              	.LVL760:
2042:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7426              		.loc 1 2042 0
 7427 00d6 2268     		ldr	r2, [r4]
 7428 00d8 1368     		ldr	r3, [r2]
 7429 00da 43F00103 		orr	r3, r3, #1
 7430 00de 1360     		str	r3, [r2]
2045:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 7431              		.loc 1 2045 0
 7432 00e0 0020     		movs	r0, #0
 7433 00e2 38BD     		pop	{r3, r4, r5, pc}
 7434              	.LVL761:
 7435              	.L533:
1954:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 7436              		.loc 1 1954 0
 7437 00e4 0220     		movs	r0, #2
 7438              	.LVL762:
 7439 00e6 38BD     		pop	{r3, r4, r5, pc}
 7440              	.LVL763:
 7441              	.L534:
1960:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7442              		.loc 1 1960 0
 7443 00e8 0120     		movs	r0, #1
 7444              	.LVL764:
2046:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7445              		.loc 1 2046 0
 7446 00ea 38BD     		pop	{r3, r4, r5, pc}
 7447              	.LVL765:
 7448              	.L537:
 7449              		.align	2
 7450              	.L536:
 7451 00ec 00000000 		.word	TIM_DMACaptureCplt
 7452 00f0 00000000 		.word	TIM_DMAError
 7453              		.cfi_endproc
 7454              	.LFE174:
 7456              		.section	.text.HAL_TIM_IC_Stop_DMA,"ax",%progbits
 7457              		.align	2
 7458              		.global	HAL_TIM_IC_Stop_DMA
 7459              		.thumb
 7460              		.thumb_func
 7462              	HAL_TIM_IC_Stop_DMA:
 7463              	.LFB175:
2061:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 7464              		.loc 1 2061 0
 7465              		.cfi_startproc
ARM GAS  /tmp/ccrrJVNd.s 			page 257


 7466              		@ args = 0, pretend = 0, frame = 0
 7467              		@ frame_needed = 0, uses_anonymous_args = 0
 7468              	.LVL766:
 7469 0000 10B5     		push	{r4, lr}
 7470              	.LCFI89:
 7471              		.cfi_def_cfa_offset 8
 7472              		.cfi_offset 4, -8
 7473              		.cfi_offset 14, -4
 7474 0002 0446     		mov	r4, r0
2066:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7475              		.loc 1 2066 0
 7476 0004 0C29     		cmp	r1, #12
 7477 0006 1FD8     		bhi	.L539
 7478 0008 DFE801F0 		tbb	[pc, r1]
 7479              	.L541:
 7480 000c 07       		.byte	(.L540-.L541)/2
 7481 000d 1E       		.byte	(.L539-.L541)/2
 7482 000e 1E       		.byte	(.L539-.L541)/2
 7483 000f 1E       		.byte	(.L539-.L541)/2
 7484 0010 0D       		.byte	(.L542-.L541)/2
 7485 0011 1E       		.byte	(.L539-.L541)/2
 7486 0012 1E       		.byte	(.L539-.L541)/2
 7487 0013 1E       		.byte	(.L539-.L541)/2
 7488 0014 13       		.byte	(.L543-.L541)/2
 7489 0015 1E       		.byte	(.L539-.L541)/2
 7490 0016 1E       		.byte	(.L539-.L541)/2
 7491 0017 1E       		.byte	(.L539-.L541)/2
 7492 0018 19       		.byte	(.L544-.L541)/2
 7493 0019 00       		.p2align 1
 7494              	.L540:
2071:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7495              		.loc 1 2071 0
 7496 001a 0268     		ldr	r2, [r0]
 7497 001c D368     		ldr	r3, [r2, #12]
 7498 001e 23F40073 		bic	r3, r3, #512
 7499 0022 D360     		str	r3, [r2, #12]
2073:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7500              		.loc 1 2073 0
 7501 0024 10E0     		b	.L539
 7502              	.L542:
2078:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7503              		.loc 1 2078 0
 7504 0026 0268     		ldr	r2, [r0]
 7505 0028 D368     		ldr	r3, [r2, #12]
 7506 002a 23F48063 		bic	r3, r3, #1024
 7507 002e D360     		str	r3, [r2, #12]
2080:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7508              		.loc 1 2080 0
 7509 0030 0AE0     		b	.L539
 7510              	.L543:
2085:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7511              		.loc 1 2085 0
 7512 0032 0268     		ldr	r2, [r0]
 7513 0034 D368     		ldr	r3, [r2, #12]
 7514 0036 23F40063 		bic	r3, r3, #2048
 7515 003a D360     		str	r3, [r2, #12]
2087:HALLIB/Src/stm32f7xx_hal_tim.c ****     
ARM GAS  /tmp/ccrrJVNd.s 			page 258


 7516              		.loc 1 2087 0
 7517 003c 04E0     		b	.L539
 7518              	.L544:
2092:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7519              		.loc 1 2092 0
 7520 003e 0268     		ldr	r2, [r0]
 7521 0040 D368     		ldr	r3, [r2, #12]
 7522 0042 23F48053 		bic	r3, r3, #4096
 7523 0046 D360     		str	r3, [r2, #12]
 7524              	.L539:
2101:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7525              		.loc 1 2101 0
 7526 0048 0022     		movs	r2, #0
 7527 004a 2068     		ldr	r0, [r4]
 7528              	.LVL767:
 7529 004c FFF7FEFF 		bl	TIM_CCxChannelCmd
 7530              	.LVL768:
2104:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7531              		.loc 1 2104 0
 7532 0050 2368     		ldr	r3, [r4]
 7533 0052 196A     		ldr	r1, [r3, #32]
 7534 0054 41F21112 		movw	r2, #4369
 7535 0058 1142     		tst	r1, r2
 7536 005a 08D1     		bne	.L545
2104:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7537              		.loc 1 2104 0 is_stmt 0 discriminator 1
 7538 005c 196A     		ldr	r1, [r3, #32]
 7539 005e 40F24442 		movw	r2, #1092
 7540 0062 1142     		tst	r1, r2
 7541 0064 03D1     		bne	.L545
2104:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7542              		.loc 1 2104 0 discriminator 2
 7543 0066 1A68     		ldr	r2, [r3]
 7544 0068 22F00102 		bic	r2, r2, #1
 7545 006c 1A60     		str	r2, [r3]
 7546              	.L545:
2107:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7547              		.loc 1 2107 0 is_stmt 1
 7548 006e 0123     		movs	r3, #1
 7549 0070 84F83D30 		strb	r3, [r4, #61]
2111:HALLIB/Src/stm32f7xx_hal_tim.c **** /**
 7550              		.loc 1 2111 0
 7551 0074 0020     		movs	r0, #0
 7552 0076 10BD     		pop	{r4, pc}
 7553              		.cfi_endproc
 7554              	.LFE175:
 7556              		.section	.text.HAL_TIM_OnePulse_Start,"ax",%progbits
 7557              		.align	2
 7558              		.global	HAL_TIM_OnePulse_Start
 7559              		.thumb
 7560              		.thumb_func
 7562              	HAL_TIM_OnePulse_Start:
 7563              	.LFB180:
2282:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 7564              		.loc 1 2282 0
 7565              		.cfi_startproc
 7566              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrrJVNd.s 			page 259


 7567              		@ frame_needed = 0, uses_anonymous_args = 0
 7568              	.LVL769:
 7569 0000 10B5     		push	{r4, lr}
 7570              	.LCFI90:
 7571              		.cfi_def_cfa_offset 8
 7572              		.cfi_offset 4, -8
 7573              		.cfi_offset 14, -4
 7574 0002 0446     		mov	r4, r0
2295:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 7575              		.loc 1 2295 0
 7576 0004 0122     		movs	r2, #1
 7577 0006 0021     		movs	r1, #0
 7578              	.LVL770:
 7579 0008 0068     		ldr	r0, [r0]
 7580              	.LVL771:
 7581 000a FFF7FEFF 		bl	TIM_CCxChannelCmd
 7582              	.LVL772:
2296:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7583              		.loc 1 2296 0
 7584 000e 0122     		movs	r2, #1
 7585 0010 0421     		movs	r1, #4
 7586 0012 2068     		ldr	r0, [r4]
 7587 0014 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7588              	.LVL773:
2298:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7589              		.loc 1 2298 0
 7590 0018 2368     		ldr	r3, [r4]
 7591 001a 064A     		ldr	r2, .L550
 7592 001c 0649     		ldr	r1, .L550+4
 7593 001e 9342     		cmp	r3, r2
 7594 0020 18BF     		it	ne
 7595 0022 8B42     		cmpne	r3, r1
 7596 0024 03D1     		bne	.L548
2301:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 7597              		.loc 1 2301 0
 7598 0026 5A6C     		ldr	r2, [r3, #68]
 7599 0028 42F40042 		orr	r2, r2, #32768
 7600 002c 5A64     		str	r2, [r3, #68]
 7601              	.L548:
2306:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7602              		.loc 1 2306 0
 7603 002e 0020     		movs	r0, #0
 7604 0030 10BD     		pop	{r4, pc}
 7605              	.LVL774:
 7606              	.L551:
 7607 0032 00BF     		.align	2
 7608              	.L550:
 7609 0034 00040140 		.word	1073808384
 7610 0038 00000140 		.word	1073807360
 7611              		.cfi_endproc
 7612              	.LFE180:
 7614              		.section	.text.HAL_TIM_OnePulse_Stop,"ax",%progbits
 7615              		.align	2
 7616              		.global	HAL_TIM_OnePulse_Stop
 7617              		.thumb
 7618              		.thumb_func
 7620              	HAL_TIM_OnePulse_Stop:
ARM GAS  /tmp/ccrrJVNd.s 			page 260


 7621              	.LFB181:
2319:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 7622              		.loc 1 2319 0
 7623              		.cfi_startproc
 7624              		@ args = 0, pretend = 0, frame = 0
 7625              		@ frame_needed = 0, uses_anonymous_args = 0
 7626              	.LVL775:
 7627 0000 10B5     		push	{r4, lr}
 7628              	.LCFI91:
 7629              		.cfi_def_cfa_offset 8
 7630              		.cfi_offset 4, -8
 7631              		.cfi_offset 14, -4
 7632 0002 0446     		mov	r4, r0
2329:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 7633              		.loc 1 2329 0
 7634 0004 0022     		movs	r2, #0
 7635 0006 1146     		mov	r1, r2
 7636              	.LVL776:
 7637 0008 0068     		ldr	r0, [r0]
 7638              	.LVL777:
 7639 000a FFF7FEFF 		bl	TIM_CCxChannelCmd
 7640              	.LVL778:
2330:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7641              		.loc 1 2330 0
 7642 000e 0022     		movs	r2, #0
 7643 0010 0421     		movs	r1, #4
 7644 0012 2068     		ldr	r0, [r4]
 7645 0014 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7646              	.LVL779:
2332:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7647              		.loc 1 2332 0
 7648 0018 2368     		ldr	r3, [r4]
 7649 001a 124A     		ldr	r2, .L556
 7650 001c 1249     		ldr	r1, .L556+4
 7651 001e 9342     		cmp	r3, r2
 7652 0020 18BF     		it	ne
 7653 0022 8B42     		cmpne	r3, r1
 7654 0024 0DD1     		bne	.L553
2335:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 7655              		.loc 1 2335 0
 7656 0026 196A     		ldr	r1, [r3, #32]
 7657 0028 41F21112 		movw	r2, #4369
 7658 002c 1142     		tst	r1, r2
 7659 002e 08D1     		bne	.L553
2335:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 7660              		.loc 1 2335 0 is_stmt 0 discriminator 1
 7661 0030 196A     		ldr	r1, [r3, #32]
 7662 0032 40F24442 		movw	r2, #1092
 7663 0036 1142     		tst	r1, r2
 7664 0038 03D1     		bne	.L553
2335:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 7665              		.loc 1 2335 0 discriminator 2
 7666 003a 5A6C     		ldr	r2, [r3, #68]
 7667 003c 22F40042 		bic	r2, r2, #32768
 7668 0040 5A64     		str	r2, [r3, #68]
 7669              	.L553:
2339:HALLIB/Src/stm32f7xx_hal_tim.c ****   
ARM GAS  /tmp/ccrrJVNd.s 			page 261


 7670              		.loc 1 2339 0 is_stmt 1
 7671 0042 2368     		ldr	r3, [r4]
 7672 0044 196A     		ldr	r1, [r3, #32]
 7673 0046 41F21112 		movw	r2, #4369
 7674 004a 1142     		tst	r1, r2
 7675 004c 08D1     		bne	.L554
2339:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7676              		.loc 1 2339 0 is_stmt 0 discriminator 1
 7677 004e 196A     		ldr	r1, [r3, #32]
 7678 0050 40F24442 		movw	r2, #1092
 7679 0054 1142     		tst	r1, r2
 7680 0056 03D1     		bne	.L554
2339:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7681              		.loc 1 2339 0 discriminator 2
 7682 0058 1A68     		ldr	r2, [r3]
 7683 005a 22F00102 		bic	r2, r2, #1
 7684 005e 1A60     		str	r2, [r3]
 7685              	.L554:
2343:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7686              		.loc 1 2343 0 is_stmt 1
 7687 0060 0020     		movs	r0, #0
 7688 0062 10BD     		pop	{r4, pc}
 7689              	.LVL780:
 7690              	.L557:
 7691              		.align	2
 7692              	.L556:
 7693 0064 00040140 		.word	1073808384
 7694 0068 00000140 		.word	1073807360
 7695              		.cfi_endproc
 7696              	.LFE181:
 7698              		.section	.text.HAL_TIM_OnePulse_Start_IT,"ax",%progbits
 7699              		.align	2
 7700              		.global	HAL_TIM_OnePulse_Start_IT
 7701              		.thumb
 7702              		.thumb_func
 7704              	HAL_TIM_OnePulse_Start_IT:
 7705              	.LFB182:
2356:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Enable the Capture compare and the Input Capture channels 
 7706              		.loc 1 2356 0
 7707              		.cfi_startproc
 7708              		@ args = 0, pretend = 0, frame = 0
 7709              		@ frame_needed = 0, uses_anonymous_args = 0
 7710              	.LVL781:
 7711 0000 10B5     		push	{r4, lr}
 7712              	.LCFI92:
 7713              		.cfi_def_cfa_offset 8
 7714              		.cfi_offset 4, -8
 7715              		.cfi_offset 14, -4
 7716 0002 0446     		mov	r4, r0
2370:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7717              		.loc 1 2370 0
 7718 0004 0268     		ldr	r2, [r0]
 7719 0006 D368     		ldr	r3, [r2, #12]
 7720 0008 43F00203 		orr	r3, r3, #2
 7721 000c D360     		str	r3, [r2, #12]
2373:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7722              		.loc 1 2373 0
ARM GAS  /tmp/ccrrJVNd.s 			page 262


 7723 000e 0268     		ldr	r2, [r0]
 7724 0010 D368     		ldr	r3, [r2, #12]
 7725 0012 43F00403 		orr	r3, r3, #4
 7726 0016 D360     		str	r3, [r2, #12]
2375:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 7727              		.loc 1 2375 0
 7728 0018 0122     		movs	r2, #1
 7729 001a 0021     		movs	r1, #0
 7730              	.LVL782:
 7731 001c 0068     		ldr	r0, [r0]
 7732              	.LVL783:
 7733 001e FFF7FEFF 		bl	TIM_CCxChannelCmd
 7734              	.LVL784:
2376:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7735              		.loc 1 2376 0
 7736 0022 0122     		movs	r2, #1
 7737 0024 0421     		movs	r1, #4
 7738 0026 2068     		ldr	r0, [r4]
 7739 0028 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7740              	.LVL785:
2378:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7741              		.loc 1 2378 0
 7742 002c 2368     		ldr	r3, [r4]
 7743 002e 064A     		ldr	r2, .L561
 7744 0030 0649     		ldr	r1, .L561+4
 7745 0032 9342     		cmp	r3, r2
 7746 0034 18BF     		it	ne
 7747 0036 8B42     		cmpne	r3, r1
 7748 0038 03D1     		bne	.L559
2381:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 7749              		.loc 1 2381 0
 7750 003a 5A6C     		ldr	r2, [r3, #68]
 7751 003c 42F40042 		orr	r2, r2, #32768
 7752 0040 5A64     		str	r2, [r3, #68]
 7753              	.L559:
2386:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7754              		.loc 1 2386 0
 7755 0042 0020     		movs	r0, #0
 7756 0044 10BD     		pop	{r4, pc}
 7757              	.LVL786:
 7758              	.L562:
 7759 0046 00BF     		.align	2
 7760              	.L561:
 7761 0048 00040140 		.word	1073808384
 7762 004c 00000140 		.word	1073807360
 7763              		.cfi_endproc
 7764              	.LFE182:
 7766              		.section	.text.HAL_TIM_OnePulse_Stop_IT,"ax",%progbits
 7767              		.align	2
 7768              		.global	HAL_TIM_OnePulse_Stop_IT
 7769              		.thumb
 7770              		.thumb_func
 7772              	HAL_TIM_OnePulse_Stop_IT:
 7773              	.LFB183:
2399:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 7774              		.loc 1 2399 0
 7775              		.cfi_startproc
ARM GAS  /tmp/ccrrJVNd.s 			page 263


 7776              		@ args = 0, pretend = 0, frame = 0
 7777              		@ frame_needed = 0, uses_anonymous_args = 0
 7778              	.LVL787:
 7779 0000 10B5     		push	{r4, lr}
 7780              	.LCFI93:
 7781              		.cfi_def_cfa_offset 8
 7782              		.cfi_offset 4, -8
 7783              		.cfi_offset 14, -4
 7784 0002 0446     		mov	r4, r0
2404:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7785              		.loc 1 2404 0
 7786 0004 0268     		ldr	r2, [r0]
 7787 0006 D368     		ldr	r3, [r2, #12]
 7788 0008 23F00203 		bic	r3, r3, #2
 7789 000c D360     		str	r3, [r2, #12]
2407:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7790              		.loc 1 2407 0
 7791 000e 0268     		ldr	r2, [r0]
 7792 0010 D368     		ldr	r3, [r2, #12]
 7793 0012 23F00403 		bic	r3, r3, #4
 7794 0016 D360     		str	r3, [r2, #12]
2414:HALLIB/Src/stm32f7xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 7795              		.loc 1 2414 0
 7796 0018 0022     		movs	r2, #0
 7797 001a 1146     		mov	r1, r2
 7798              	.LVL788:
 7799 001c 0068     		ldr	r0, [r0]
 7800              	.LVL789:
 7801 001e FFF7FEFF 		bl	TIM_CCxChannelCmd
 7802              	.LVL790:
2415:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 7803              		.loc 1 2415 0
 7804 0022 0022     		movs	r2, #0
 7805 0024 0421     		movs	r1, #4
 7806 0026 2068     		ldr	r0, [r4]
 7807 0028 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7808              	.LVL791:
2417:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7809              		.loc 1 2417 0
 7810 002c 2368     		ldr	r3, [r4]
 7811 002e 124A     		ldr	r2, .L567
 7812 0030 1249     		ldr	r1, .L567+4
 7813 0032 9342     		cmp	r3, r2
 7814 0034 18BF     		it	ne
 7815 0036 8B42     		cmpne	r3, r1
 7816 0038 0DD1     		bne	.L564
2420:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 7817              		.loc 1 2420 0
 7818 003a 196A     		ldr	r1, [r3, #32]
 7819 003c 41F21112 		movw	r2, #4369
 7820 0040 1142     		tst	r1, r2
 7821 0042 08D1     		bne	.L564
2420:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 7822              		.loc 1 2420 0 is_stmt 0 discriminator 1
 7823 0044 196A     		ldr	r1, [r3, #32]
 7824 0046 40F24442 		movw	r2, #1092
 7825 004a 1142     		tst	r1, r2
ARM GAS  /tmp/ccrrJVNd.s 			page 264


 7826 004c 03D1     		bne	.L564
2420:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 7827              		.loc 1 2420 0 discriminator 2
 7828 004e 5A6C     		ldr	r2, [r3, #68]
 7829 0050 22F40042 		bic	r2, r2, #32768
 7830 0054 5A64     		str	r2, [r3, #68]
 7831              	.L564:
2424:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7832              		.loc 1 2424 0 is_stmt 1
 7833 0056 2368     		ldr	r3, [r4]
 7834 0058 196A     		ldr	r1, [r3, #32]
 7835 005a 41F21112 		movw	r2, #4369
 7836 005e 1142     		tst	r1, r2
 7837 0060 08D1     		bne	.L565
2424:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7838              		.loc 1 2424 0 is_stmt 0 discriminator 1
 7839 0062 196A     		ldr	r1, [r3, #32]
 7840 0064 40F24442 		movw	r2, #1092
 7841 0068 1142     		tst	r1, r2
 7842 006a 03D1     		bne	.L565
2424:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7843              		.loc 1 2424 0 discriminator 2
 7844 006c 1A68     		ldr	r2, [r3]
 7845 006e 22F00102 		bic	r2, r2, #1
 7846 0072 1A60     		str	r2, [r3]
 7847              	.L565:
2428:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7848              		.loc 1 2428 0 is_stmt 1
 7849 0074 0020     		movs	r0, #0
 7850 0076 10BD     		pop	{r4, pc}
 7851              	.LVL792:
 7852              	.L568:
 7853              		.align	2
 7854              	.L567:
 7855 0078 00040140 		.word	1073808384
 7856 007c 00000140 		.word	1073807360
 7857              		.cfi_endproc
 7858              	.LFE183:
 7860              		.section	.text.HAL_TIM_Encoder_Start,"ax",%progbits
 7861              		.align	2
 7862              		.global	HAL_TIM_Encoder_Start
 7863              		.thumb
 7864              		.thumb_func
 7866              	HAL_TIM_Encoder_Start:
 7867              	.LFB188:
2642:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 7868              		.loc 1 2642 0
 7869              		.cfi_startproc
 7870              		@ args = 0, pretend = 0, frame = 0
 7871              		@ frame_needed = 0, uses_anonymous_args = 0
 7872              	.LVL793:
 7873 0000 10B5     		push	{r4, lr}
 7874              	.LCFI94:
 7875              		.cfi_def_cfa_offset 8
 7876              		.cfi_offset 4, -8
 7877              		.cfi_offset 14, -4
 7878 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccrrJVNd.s 			page 265


2647:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7879              		.loc 1 2647 0
 7880 0004 11B1     		cbz	r1, .L571
 7881 0006 0429     		cmp	r1, #4
 7882 0008 06D0     		beq	.L572
 7883 000a 0BE0     		b	.L574
 7884              	.L571:
2651:HALLIB/Src/stm32f7xx_hal_tim.c ****       break; 
 7885              		.loc 1 2651 0
 7886 000c 0122     		movs	r2, #1
 7887 000e 0021     		movs	r1, #0
 7888              	.LVL794:
 7889 0010 0068     		ldr	r0, [r0]
 7890              	.LVL795:
 7891 0012 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7892              	.LVL796:
2652:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7893              		.loc 1 2652 0
 7894 0016 0FE0     		b	.L573
 7895              	.LVL797:
 7896              	.L572:
2656:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
 7897              		.loc 1 2656 0
 7898 0018 0122     		movs	r2, #1
 7899 001a 0421     		movs	r1, #4
 7900              	.LVL798:
 7901 001c 0068     		ldr	r0, [r0]
 7902              	.LVL799:
 7903 001e FFF7FEFF 		bl	TIM_CCxChannelCmd
 7904              	.LVL800:
2657:HALLIB/Src/stm32f7xx_hal_tim.c ****     }  
 7905              		.loc 1 2657 0
 7906 0022 09E0     		b	.L573
 7907              	.LVL801:
 7908              	.L574:
2661:HALLIB/Src/stm32f7xx_hal_tim.c ****      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 7909              		.loc 1 2661 0
 7910 0024 0122     		movs	r2, #1
 7911 0026 0021     		movs	r1, #0
 7912              	.LVL802:
 7913 0028 0068     		ldr	r0, [r0]
 7914              	.LVL803:
 7915 002a FFF7FEFF 		bl	TIM_CCxChannelCmd
 7916              	.LVL804:
2662:HALLIB/Src/stm32f7xx_hal_tim.c ****      break; 
 7917              		.loc 1 2662 0
 7918 002e 0122     		movs	r2, #1
 7919 0030 0421     		movs	r1, #4
 7920 0032 2068     		ldr	r0, [r4]
 7921 0034 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7922              	.LVL805:
 7923              	.L573:
2667:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7924              		.loc 1 2667 0
 7925 0038 2268     		ldr	r2, [r4]
 7926 003a 1368     		ldr	r3, [r2]
 7927 003c 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/ccrrJVNd.s 			page 266


 7928 0040 1360     		str	r3, [r2]
2671:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 7929              		.loc 1 2671 0
 7930 0042 0020     		movs	r0, #0
 7931 0044 10BD     		pop	{r4, pc}
 7932              		.cfi_endproc
 7933              	.LFE188:
 7935 0046 00BF     		.section	.text.HAL_TIM_Encoder_Stop,"ax",%progbits
 7936              		.align	2
 7937              		.global	HAL_TIM_Encoder_Stop
 7938              		.thumb
 7939              		.thumb_func
 7941              	HAL_TIM_Encoder_Stop:
 7942              	.LFB189:
2685:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 7943              		.loc 1 2685 0
 7944              		.cfi_startproc
 7945              		@ args = 0, pretend = 0, frame = 0
 7946              		@ frame_needed = 0, uses_anonymous_args = 0
 7947              	.LVL806:
 7948 0000 10B5     		push	{r4, lr}
 7949              	.LCFI95:
 7950              		.cfi_def_cfa_offset 8
 7951              		.cfi_offset 4, -8
 7952              		.cfi_offset 14, -4
 7953 0002 0446     		mov	r4, r0
2691:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 7954              		.loc 1 2691 0
 7955 0004 11B1     		cbz	r1, .L578
 7956 0006 0429     		cmp	r1, #4
 7957 0008 06D0     		beq	.L579
 7958 000a 0BE0     		b	.L582
 7959              	.L578:
2695:HALLIB/Src/stm32f7xx_hal_tim.c ****       break; 
 7960              		.loc 1 2695 0
 7961 000c 0022     		movs	r2, #0
 7962 000e 1146     		mov	r1, r2
 7963              	.LVL807:
 7964 0010 0068     		ldr	r0, [r0]
 7965              	.LVL808:
 7966 0012 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7967              	.LVL809:
2696:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 7968              		.loc 1 2696 0
 7969 0016 0FE0     		b	.L580
 7970              	.LVL810:
 7971              	.L579:
2700:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
 7972              		.loc 1 2700 0
 7973 0018 0022     		movs	r2, #0
 7974 001a 0421     		movs	r1, #4
 7975              	.LVL811:
 7976 001c 0068     		ldr	r0, [r0]
 7977              	.LVL812:
 7978 001e FFF7FEFF 		bl	TIM_CCxChannelCmd
 7979              	.LVL813:
2701:HALLIB/Src/stm32f7xx_hal_tim.c ****     }  
ARM GAS  /tmp/ccrrJVNd.s 			page 267


 7980              		.loc 1 2701 0
 7981 0022 09E0     		b	.L580
 7982              	.LVL814:
 7983              	.L582:
2705:HALLIB/Src/stm32f7xx_hal_tim.c ****      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 7984              		.loc 1 2705 0
 7985 0024 0022     		movs	r2, #0
 7986 0026 1146     		mov	r1, r2
 7987              	.LVL815:
 7988 0028 0068     		ldr	r0, [r0]
 7989              	.LVL816:
 7990 002a FFF7FEFF 		bl	TIM_CCxChannelCmd
 7991              	.LVL817:
2706:HALLIB/Src/stm32f7xx_hal_tim.c ****      break; 
 7992              		.loc 1 2706 0
 7993 002e 0022     		movs	r2, #0
 7994 0030 0421     		movs	r1, #4
 7995 0032 2068     		ldr	r0, [r4]
 7996 0034 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7997              	.LVL818:
 7998              	.L580:
2711:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 7999              		.loc 1 2711 0
 8000 0038 2368     		ldr	r3, [r4]
 8001 003a 196A     		ldr	r1, [r3, #32]
 8002 003c 41F21112 		movw	r2, #4369
 8003 0040 1142     		tst	r1, r2
 8004 0042 08D1     		bne	.L581
2711:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 8005              		.loc 1 2711 0 is_stmt 0 discriminator 1
 8006 0044 196A     		ldr	r1, [r3, #32]
 8007 0046 40F24442 		movw	r2, #1092
 8008 004a 1142     		tst	r1, r2
 8009 004c 03D1     		bne	.L581
2711:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 8010              		.loc 1 2711 0 discriminator 2
 8011 004e 1A68     		ldr	r2, [r3]
 8012 0050 22F00102 		bic	r2, r2, #1
 8013 0054 1A60     		str	r2, [r3]
 8014              	.L581:
2715:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 8015              		.loc 1 2715 0 is_stmt 1
 8016 0056 0020     		movs	r0, #0
 8017 0058 10BD     		pop	{r4, pc}
 8018              		.cfi_endproc
 8019              	.LFE189:
 8021 005a 00BF     		.section	.text.HAL_TIM_Encoder_Start_IT,"ax",%progbits
 8022              		.align	2
 8023              		.global	HAL_TIM_Encoder_Start_IT
 8024              		.thumb
 8025              		.thumb_func
 8027              	HAL_TIM_Encoder_Start_IT:
 8028              	.LFB190:
2729:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 8029              		.loc 1 2729 0
 8030              		.cfi_startproc
 8031              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrrJVNd.s 			page 268


 8032              		@ frame_needed = 0, uses_anonymous_args = 0
 8033              	.LVL819:
 8034 0000 10B5     		push	{r4, lr}
 8035              	.LCFI96:
 8036              		.cfi_def_cfa_offset 8
 8037              		.cfi_offset 4, -8
 8038              		.cfi_offset 14, -4
 8039 0002 0446     		mov	r4, r0
2735:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 8040              		.loc 1 2735 0
 8041 0004 11B1     		cbz	r1, .L586
 8042 0006 0429     		cmp	r1, #4
 8043 0008 0BD0     		beq	.L587
 8044 000a 15E0     		b	.L589
 8045              	.L586:
2739:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8046              		.loc 1 2739 0
 8047 000c 0122     		movs	r2, #1
 8048 000e 0021     		movs	r1, #0
 8049              	.LVL820:
 8050 0010 0068     		ldr	r0, [r0]
 8051              	.LVL821:
 8052 0012 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8053              	.LVL822:
2740:HALLIB/Src/stm32f7xx_hal_tim.c ****       break; 
 8054              		.loc 1 2740 0
 8055 0016 2268     		ldr	r2, [r4]
 8056 0018 D368     		ldr	r3, [r2, #12]
 8057 001a 43F00203 		orr	r3, r3, #2
 8058 001e D360     		str	r3, [r2, #12]
2741:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 8059              		.loc 1 2741 0
 8060 0020 1EE0     		b	.L588
 8061              	.LVL823:
 8062              	.L587:
2745:HALLIB/Src/stm32f7xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2); 
 8063              		.loc 1 2745 0
 8064 0022 0122     		movs	r2, #1
 8065 0024 0421     		movs	r1, #4
 8066              	.LVL824:
 8067 0026 0068     		ldr	r0, [r0]
 8068              	.LVL825:
 8069 0028 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8070              	.LVL826:
2746:HALLIB/Src/stm32f7xx_hal_tim.c ****       break;
 8071              		.loc 1 2746 0
 8072 002c 2268     		ldr	r2, [r4]
 8073 002e D368     		ldr	r3, [r2, #12]
 8074 0030 43F00403 		orr	r3, r3, #4
 8075 0034 D360     		str	r3, [r2, #12]
2747:HALLIB/Src/stm32f7xx_hal_tim.c ****     }  
 8076              		.loc 1 2747 0
 8077 0036 13E0     		b	.L588
 8078              	.LVL827:
 8079              	.L589:
2751:HALLIB/Src/stm32f7xx_hal_tim.c ****      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8080              		.loc 1 2751 0
ARM GAS  /tmp/ccrrJVNd.s 			page 269


 8081 0038 0122     		movs	r2, #1
 8082 003a 0021     		movs	r1, #0
 8083              	.LVL828:
 8084 003c 0068     		ldr	r0, [r0]
 8085              	.LVL829:
 8086 003e FFF7FEFF 		bl	TIM_CCxChannelCmd
 8087              	.LVL830:
2752:HALLIB/Src/stm32f7xx_hal_tim.c ****      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8088              		.loc 1 2752 0
 8089 0042 0122     		movs	r2, #1
 8090 0044 0421     		movs	r1, #4
 8091 0046 2068     		ldr	r0, [r4]
 8092 0048 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8093              	.LVL831:
2753:HALLIB/Src/stm32f7xx_hal_tim.c ****      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8094              		.loc 1 2753 0
 8095 004c 2268     		ldr	r2, [r4]
 8096 004e D368     		ldr	r3, [r2, #12]
 8097 0050 43F00203 		orr	r3, r3, #2
 8098 0054 D360     		str	r3, [r2, #12]
2754:HALLIB/Src/stm32f7xx_hal_tim.c ****      break; 
 8099              		.loc 1 2754 0
 8100 0056 2268     		ldr	r2, [r4]
 8101 0058 D368     		ldr	r3, [r2, #12]
 8102 005a 43F00403 		orr	r3, r3, #4
 8103 005e D360     		str	r3, [r2, #12]
 8104              	.L588:
2760:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 8105              		.loc 1 2760 0
 8106 0060 2268     		ldr	r2, [r4]
 8107 0062 1368     		ldr	r3, [r2]
 8108 0064 43F00103 		orr	r3, r3, #1
 8109 0068 1360     		str	r3, [r2]
2764:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 8110              		.loc 1 2764 0
 8111 006a 0020     		movs	r0, #0
 8112 006c 10BD     		pop	{r4, pc}
 8113              		.cfi_endproc
 8114              	.LFE190:
 8116 006e 00BF     		.section	.text.HAL_TIM_Encoder_Stop_IT,"ax",%progbits
 8117              		.align	2
 8118              		.global	HAL_TIM_Encoder_Stop_IT
 8119              		.thumb
 8120              		.thumb_func
 8122              	HAL_TIM_Encoder_Stop_IT:
 8123              	.LFB191:
2778:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 8124              		.loc 1 2778 0
 8125              		.cfi_startproc
 8126              		@ args = 0, pretend = 0, frame = 0
 8127              		@ frame_needed = 0, uses_anonymous_args = 0
 8128              	.LVL832:
 8129 0000 10B5     		push	{r4, lr}
 8130              	.LCFI97:
 8131              		.cfi_def_cfa_offset 8
 8132              		.cfi_offset 4, -8
 8133              		.cfi_offset 14, -4
ARM GAS  /tmp/ccrrJVNd.s 			page 270


 8134 0002 0446     		mov	r4, r0
2784:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 8135              		.loc 1 2784 0
 8136 0004 51B9     		cbnz	r1, .L592
2786:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 8137              		.loc 1 2786 0
 8138 0006 0022     		movs	r2, #0
 8139 0008 1146     		mov	r1, r2
 8140              	.LVL833:
 8141 000a 0068     		ldr	r0, [r0]
 8142              	.LVL834:
 8143 000c FFF7FEFF 		bl	TIM_CCxChannelCmd
 8144              	.LVL835:
2789:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
 8145              		.loc 1 2789 0
 8146 0010 2268     		ldr	r2, [r4]
 8147 0012 D368     		ldr	r3, [r2, #12]
 8148 0014 23F00203 		bic	r3, r3, #2
 8149 0018 D360     		str	r3, [r2, #12]
 8150 001a 20E0     		b	.L593
 8151              	.LVL836:
 8152              	.L592:
2791:HALLIB/Src/stm32f7xx_hal_tim.c ****   {  
 8153              		.loc 1 2791 0
 8154 001c 0429     		cmp	r1, #4
 8155 001e 0AD1     		bne	.L594
2793:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 8156              		.loc 1 2793 0
 8157 0020 0022     		movs	r2, #0
 8158 0022 0421     		movs	r1, #4
 8159              	.LVL837:
 8160 0024 0068     		ldr	r0, [r0]
 8161              	.LVL838:
 8162 0026 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8163              	.LVL839:
2796:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
 8164              		.loc 1 2796 0
 8165 002a 2268     		ldr	r2, [r4]
 8166 002c D368     		ldr	r3, [r2, #12]
 8167 002e 23F00403 		bic	r3, r3, #4
 8168 0032 D360     		str	r3, [r2, #12]
 8169 0034 13E0     		b	.L593
 8170              	.LVL840:
 8171              	.L594:
2800:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 8172              		.loc 1 2800 0
 8173 0036 0022     		movs	r2, #0
 8174 0038 1146     		mov	r1, r2
 8175              	.LVL841:
 8176 003a 0068     		ldr	r0, [r0]
 8177              	.LVL842:
 8178 003c FFF7FEFF 		bl	TIM_CCxChannelCmd
 8179              	.LVL843:
2801:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 8180              		.loc 1 2801 0
 8181 0040 0022     		movs	r2, #0
 8182 0042 0421     		movs	r1, #4
ARM GAS  /tmp/ccrrJVNd.s 			page 271


 8183 0044 2068     		ldr	r0, [r4]
 8184 0046 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8185              	.LVL844:
2804:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8186              		.loc 1 2804 0
 8187 004a 2268     		ldr	r2, [r4]
 8188 004c D368     		ldr	r3, [r2, #12]
 8189 004e 23F00203 		bic	r3, r3, #2
 8190 0052 D360     		str	r3, [r2, #12]
2805:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 8191              		.loc 1 2805 0
 8192 0054 2268     		ldr	r2, [r4]
 8193 0056 D368     		ldr	r3, [r2, #12]
 8194 0058 23F00403 		bic	r3, r3, #4
 8195 005c D360     		str	r3, [r2, #12]
 8196              	.L593:
2809:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 8197              		.loc 1 2809 0
 8198 005e 2368     		ldr	r3, [r4]
 8199 0060 196A     		ldr	r1, [r3, #32]
 8200 0062 41F21112 		movw	r2, #4369
 8201 0066 1142     		tst	r1, r2
 8202 0068 08D1     		bne	.L595
2809:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 8203              		.loc 1 2809 0 is_stmt 0 discriminator 1
 8204 006a 196A     		ldr	r1, [r3, #32]
 8205 006c 40F24442 		movw	r2, #1092
 8206 0070 1142     		tst	r1, r2
 8207 0072 03D1     		bne	.L595
2809:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 8208              		.loc 1 2809 0 discriminator 2
 8209 0074 1A68     		ldr	r2, [r3]
 8210 0076 22F00102 		bic	r2, r2, #1
 8211 007a 1A60     		str	r2, [r3]
 8212              	.L595:
2812:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 8213              		.loc 1 2812 0 is_stmt 1
 8214 007c 0123     		movs	r3, #1
 8215 007e 84F83D30 		strb	r3, [r4, #61]
2816:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 8216              		.loc 1 2816 0
 8217 0082 0020     		movs	r0, #0
 8218 0084 10BD     		pop	{r4, pc}
 8219              		.cfi_endproc
 8220              	.LFE191:
 8222 0086 00BF     		.section	.text.HAL_TIM_Encoder_Start_DMA,"ax",%progbits
 8223              		.align	2
 8224              		.global	HAL_TIM_Encoder_Start_DMA
 8225              		.thumb
 8226              		.thumb_func
 8228              	HAL_TIM_Encoder_Start_DMA:
 8229              	.LFB192:
2833:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 8230              		.loc 1 2833 0
 8231              		.cfi_startproc
 8232              		@ args = 4, pretend = 0, frame = 0
 8233              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccrrJVNd.s 			page 272


 8234              	.LVL845:
 8235 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8236              	.LCFI98:
 8237              		.cfi_def_cfa_offset 24
 8238              		.cfi_offset 4, -24
 8239              		.cfi_offset 5, -20
 8240              		.cfi_offset 6, -16
 8241              		.cfi_offset 7, -12
 8242              		.cfi_offset 8, -8
 8243              		.cfi_offset 14, -4
 8244 0004 BDF81850 		ldrh	r5, [sp, #24]
2837:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 8245              		.loc 1 2837 0
 8246 0008 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 8247 000c E4B2     		uxtb	r4, r4
 8248 000e 022C     		cmp	r4, #2
 8249 0010 00F08A80 		beq	.L604
2841:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 8250              		.loc 1 2841 0
 8251 0014 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 8252 0018 E4B2     		uxtb	r4, r4
 8253 001a 012C     		cmp	r4, #1
 8254 001c 09D1     		bne	.L599
2843:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 8255              		.loc 1 2843 0
 8256 001e 002B     		cmp	r3, #0
 8257 0020 18BF     		it	ne
 8258 0022 002A     		cmpne	r2, #0
 8259 0024 02D1     		bne	.L600
2843:HALLIB/Src/stm32f7xx_hal_tim.c ****     {
 8260              		.loc 1 2843 0 is_stmt 0 discriminator 1
 8261 0026 002D     		cmp	r5, #0
 8262 0028 40F08180 		bne	.L605
 8263              	.L600:
2849:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 8264              		.loc 1 2849 0 is_stmt 1
 8265 002c 0224     		movs	r4, #2
 8266 002e 80F83D40 		strb	r4, [r0, #61]
 8267              	.L599:
 8268 0032 1E46     		mov	r6, r3
 8269 0034 0446     		mov	r4, r0
2853:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 8270              		.loc 1 2853 0
 8271 0036 0429     		cmp	r1, #4
 8272 0038 21D0     		beq	.L601
 8273 003a 3C29     		cmp	r1, #60
 8274 003c 3ED0     		beq	.L602
 8275 003e 0029     		cmp	r1, #0
 8276 0040 78D1     		bne	.L607
2858:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 8277              		.loc 1 2858 0
 8278 0042 436A     		ldr	r3, [r0, #36]
 8279              	.LVL846:
 8280 0044 3D49     		ldr	r1, .L609
 8281              	.LVL847:
 8282 0046 D963     		str	r1, [r3, #60]
2861:HALLIB/Src/stm32f7xx_hal_tim.c ****       
ARM GAS  /tmp/ccrrJVNd.s 			page 273


 8283              		.loc 1 2861 0
 8284 0048 436A     		ldr	r3, [r0, #36]
 8285 004a 3D49     		ldr	r1, .L609+4
 8286 004c D964     		str	r1, [r3, #76]
2864:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 8287              		.loc 1 2864 0
 8288 004e 0168     		ldr	r1, [r0]
 8289 0050 2B46     		mov	r3, r5
 8290 0052 3431     		adds	r1, r1, #52
 8291 0054 406A     		ldr	r0, [r0, #36]
 8292              	.LVL848:
 8293 0056 FFF7FEFF 		bl	HAL_DMA_Start_IT
 8294              	.LVL849:
2867:HALLIB/Src/stm32f7xx_hal_tim.c ****             
 8295              		.loc 1 2867 0
 8296 005a 2268     		ldr	r2, [r4]
 8297 005c D368     		ldr	r3, [r2, #12]
 8298 005e 43F40073 		orr	r3, r3, #512
 8299 0062 D360     		str	r3, [r2, #12]
2870:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 8300              		.loc 1 2870 0
 8301 0064 2268     		ldr	r2, [r4]
 8302 0066 1368     		ldr	r3, [r2]
 8303 0068 43F00103 		orr	r3, r3, #1
 8304 006c 1360     		str	r3, [r2]
2873:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 8305              		.loc 1 2873 0
 8306 006e 0122     		movs	r2, #1
 8307 0070 0021     		movs	r1, #0
 8308 0072 2068     		ldr	r0, [r4]
 8309 0074 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8310              	.LVL850:
2936:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 8311              		.loc 1 2936 0
 8312 0078 0020     		movs	r0, #0
2875:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 8313              		.loc 1 2875 0
 8314 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8315              	.LVL851:
 8316              	.L601:
2880:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 8317              		.loc 1 2880 0
 8318 007e 836A     		ldr	r3, [r0, #40]
 8319              	.LVL852:
 8320 0080 2E4A     		ldr	r2, .L609
 8321              	.LVL853:
 8322 0082 DA63     		str	r2, [r3, #60]
2883:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the DMA Stream */
 8323              		.loc 1 2883 0
 8324 0084 836A     		ldr	r3, [r0, #40]
 8325 0086 2E4A     		ldr	r2, .L609+4
 8326 0088 DA64     		str	r2, [r3, #76]
2885:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 8327              		.loc 1 2885 0
 8328 008a 0168     		ldr	r1, [r0]
 8329              	.LVL854:
 8330 008c 2B46     		mov	r3, r5
ARM GAS  /tmp/ccrrJVNd.s 			page 274


 8331 008e 3246     		mov	r2, r6
 8332 0090 3831     		adds	r1, r1, #56
 8333 0092 806A     		ldr	r0, [r0, #40]
 8334              	.LVL855:
 8335 0094 FFF7FEFF 		bl	HAL_DMA_Start_IT
 8336              	.LVL856:
2888:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 8337              		.loc 1 2888 0
 8338 0098 2268     		ldr	r2, [r4]
 8339 009a D368     		ldr	r3, [r2, #12]
 8340 009c 43F48063 		orr	r3, r3, #1024
 8341 00a0 D360     		str	r3, [r2, #12]
2891:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 8342              		.loc 1 2891 0
 8343 00a2 2268     		ldr	r2, [r4]
 8344 00a4 1368     		ldr	r3, [r2]
 8345 00a6 43F00103 		orr	r3, r3, #1
 8346 00aa 1360     		str	r3, [r2]
2894:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 8347              		.loc 1 2894 0
 8348 00ac 0122     		movs	r2, #1
 8349 00ae 0421     		movs	r1, #4
 8350 00b0 2068     		ldr	r0, [r4]
 8351 00b2 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8352              	.LVL857:
2936:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 8353              		.loc 1 2936 0
 8354 00b6 0020     		movs	r0, #0
2896:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 8355              		.loc 1 2896 0
 8356 00b8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8357              	.LVL858:
 8358              	.L602:
2901:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 8359              		.loc 1 2901 0
 8360 00bc 436A     		ldr	r3, [r0, #36]
 8361              	.LVL859:
 8362 00be DFF87C80 		ldr	r8, .L609
 8363 00c2 C3F83C80 		str	r8, [r3, #60]
2904:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 8364              		.loc 1 2904 0
 8365 00c6 436A     		ldr	r3, [r0, #36]
 8366 00c8 1D4F     		ldr	r7, .L609+4
 8367 00ca DF64     		str	r7, [r3, #76]
2907:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 8368              		.loc 1 2907 0
 8369 00cc 0168     		ldr	r1, [r0]
 8370              	.LVL860:
 8371 00ce 2B46     		mov	r3, r5
 8372 00d0 3431     		adds	r1, r1, #52
 8373 00d2 406A     		ldr	r0, [r0, #36]
 8374              	.LVL861:
 8375 00d4 FFF7FEFF 		bl	HAL_DMA_Start_IT
 8376              	.LVL862:
2910:HALLIB/Src/stm32f7xx_hal_tim.c ****      
 8377              		.loc 1 2910 0
 8378 00d8 A36A     		ldr	r3, [r4, #40]
ARM GAS  /tmp/ccrrJVNd.s 			page 275


 8379 00da C3F83C80 		str	r8, [r3, #60]
2913:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 8380              		.loc 1 2913 0
 8381 00de A36A     		ldr	r3, [r4, #40]
 8382 00e0 DF64     		str	r7, [r3, #76]
2916:HALLIB/Src/stm32f7xx_hal_tim.c ****           
 8383              		.loc 1 2916 0
 8384 00e2 2168     		ldr	r1, [r4]
 8385 00e4 2B46     		mov	r3, r5
 8386 00e6 3246     		mov	r2, r6
 8387 00e8 3831     		adds	r1, r1, #56
 8388 00ea A06A     		ldr	r0, [r4, #40]
 8389 00ec FFF7FEFF 		bl	HAL_DMA_Start_IT
 8390              	.LVL863:
2919:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 8391              		.loc 1 2919 0
 8392 00f0 2268     		ldr	r2, [r4]
 8393 00f2 1368     		ldr	r3, [r2]
 8394 00f4 43F00103 		orr	r3, r3, #1
 8395 00f8 1360     		str	r3, [r2]
2922:HALLIB/Src/stm32f7xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8396              		.loc 1 2922 0
 8397 00fa 0122     		movs	r2, #1
 8398 00fc 0021     		movs	r1, #0
 8399 00fe 2068     		ldr	r0, [r4]
 8400 0100 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8401              	.LVL864:
2923:HALLIB/Src/stm32f7xx_hal_tim.c ****       
 8402              		.loc 1 2923 0
 8403 0104 0122     		movs	r2, #1
 8404 0106 0421     		movs	r1, #4
 8405 0108 2068     		ldr	r0, [r4]
 8406 010a FFF7FEFF 		bl	TIM_CCxChannelCmd
 8407              	.LVL865:
2926:HALLIB/Src/stm32f7xx_hal_tim.c ****       /* Enable the TIM Input Capture  DMA request */
 8408              		.loc 1 2926 0
 8409 010e 2268     		ldr	r2, [r4]
 8410 0110 D368     		ldr	r3, [r2, #12]
 8411 0112 43F40073 		orr	r3, r3, #512
 8412 0116 D360     		str	r3, [r2, #12]
2928:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 8413              		.loc 1 2928 0
 8414 0118 2268     		ldr	r2, [r4]
 8415 011a D368     		ldr	r3, [r2, #12]
 8416 011c 43F48063 		orr	r3, r3, #1024
 8417 0120 D360     		str	r3, [r2, #12]
2936:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 8418              		.loc 1 2936 0
 8419 0122 0020     		movs	r0, #0
2930:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 8420              		.loc 1 2930 0
 8421 0124 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8422              	.LVL866:
 8423              	.L604:
2839:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 8424              		.loc 1 2839 0
 8425 0128 0220     		movs	r0, #2
ARM GAS  /tmp/ccrrJVNd.s 			page 276


 8426              	.LVL867:
 8427 012a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8428              	.LVL868:
 8429              	.L605:
2845:HALLIB/Src/stm32f7xx_hal_tim.c ****     }
 8430              		.loc 1 2845 0
 8431 012e 0120     		movs	r0, #1
 8432              	.LVL869:
 8433 0130 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8434              	.LVL870:
 8435              	.L607:
2936:HALLIB/Src/stm32f7xx_hal_tim.c **** }
 8436              		.loc 1 2936 0
 8437 0134 0020     		movs	r0, #0
 8438              	.LVL871:
2937:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 8439              		.loc 1 2937 0
 8440 0136 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8441              	.LVL872:
 8442              	.L610:
 8443 013a 00BF     		.align	2
 8444              	.L609:
 8445 013c 00000000 		.word	TIM_DMACaptureCplt
 8446 0140 00000000 		.word	TIM_DMAError
 8447              		.cfi_endproc
 8448              	.LFE192:
 8450              		.section	.text.HAL_TIM_Encoder_Stop_DMA,"ax",%progbits
 8451              		.align	2
 8452              		.global	HAL_TIM_Encoder_Stop_DMA
 8453              		.thumb
 8454              		.thumb_func
 8456              	HAL_TIM_Encoder_Stop_DMA:
 8457              	.LFB193:
2951:HALLIB/Src/stm32f7xx_hal_tim.c ****   /* Check the parameters */
 8458              		.loc 1 2951 0
 8459              		.cfi_startproc
 8460              		@ args = 0, pretend = 0, frame = 0
 8461              		@ frame_needed = 0, uses_anonymous_args = 0
 8462              	.LVL873:
 8463 0000 10B5     		push	{r4, lr}
 8464              	.LCFI99:
 8465              		.cfi_def_cfa_offset 8
 8466              		.cfi_offset 4, -8
 8467              		.cfi_offset 14, -4
 8468 0002 0446     		mov	r4, r0
2957:HALLIB/Src/stm32f7xx_hal_tim.c ****   {
 8469              		.loc 1 2957 0
 8470 0004 51B9     		cbnz	r1, .L612
2959:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 8471              		.loc 1 2959 0
 8472 0006 0022     		movs	r2, #0
 8473 0008 1146     		mov	r1, r2
 8474              	.LVL874:
 8475 000a 0068     		ldr	r0, [r0]
 8476              	.LVL875:
 8477 000c FFF7FEFF 		bl	TIM_CCxChannelCmd
 8478              	.LVL876:
ARM GAS  /tmp/ccrrJVNd.s 			page 277


2962:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
 8479              		.loc 1 2962 0
 8480 0010 2268     		ldr	r2, [r4]
 8481 0012 D368     		ldr	r3, [r2, #12]
 8482 0014 23F40073 		bic	r3, r3, #512
 8483 0018 D360     		str	r3, [r2, #12]
 8484 001a 20E0     		b	.L613
 8485              	.LVL877:
 8486              	.L612:
2964:HALLIB/Src/stm32f7xx_hal_tim.c ****   {  
 8487              		.loc 1 2964 0
 8488 001c 0429     		cmp	r1, #4
 8489 001e 0AD1     		bne	.L614
2966:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 8490              		.loc 1 2966 0
 8491 0020 0022     		movs	r2, #0
 8492 0022 0421     		movs	r1, #4
 8493              	.LVL878:
 8494 0024 0068     		ldr	r0, [r0]
 8495              	.LVL879:
 8496 0026 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8497              	.LVL880:
2969:HALLIB/Src/stm32f7xx_hal_tim.c ****   }  
 8498              		.loc 1 2969 0
 8499 002a 2268     		ldr	r2, [r4]
 8500 002c D368     		ldr	r3, [r2, #12]
 8501 002e 23F48063 		bic	r3, r3, #1024
 8502 0032 D360     		str	r3, [r2, #12]
 8503 0034 13E0     		b	.L613
 8504              	.LVL881:
 8505              	.L614:
2973:HALLIB/Src/stm32f7xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 8506              		.loc 1 2973 0
 8507 0036 0022     		movs	r2, #0
 8508 0038 1146     		mov	r1, r2
 8509              	.LVL882:
 8510 003a 0068     		ldr	r0, [r0]
 8511              	.LVL883:
 8512 003c FFF7FEFF 		bl	TIM_CCxChannelCmd
 8513              	.LVL884:
2974:HALLIB/Src/stm32f7xx_hal_tim.c ****     
 8514              		.loc 1 2974 0
 8515 0040 0022     		movs	r2, #0
 8516 0042 0421     		movs	r1, #4
 8517 0044 2068     		ldr	r0, [r4]
 8518 0046 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8519              	.LVL885:
2977:HALLIB/Src/stm32f7xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8520              		.loc 1 2977 0
 8521 004a 2268     		ldr	r2, [r4]
 8522 004c D368     		ldr	r3, [r2, #12]
 8523 004e 23F40073 		bic	r3, r3, #512
 8524 0052 D360     		str	r3, [r2, #12]
2978:HALLIB/Src/stm32f7xx_hal_tim.c ****   }
 8525              		.loc 1 2978 0
 8526 0054 2268     		ldr	r2, [r4]
 8527 0056 D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccrrJVNd.s 			page 278


 8528 0058 23F48063 		bic	r3, r3, #1024
 8529 005c D360     		str	r3, [r2, #12]
 8530              	.L613:
2982:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 8531              		.loc 1 2982 0
 8532 005e 2368     		ldr	r3, [r4]
 8533 0060 196A     		ldr	r1, [r3, #32]
 8534 0062 41F21112 		movw	r2, #4369
 8535 0066 1142     		tst	r1, r2
 8536 0068 08D1     		bne	.L615
2982:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 8537              		.loc 1 2982 0 is_stmt 0 discriminator 1
 8538 006a 196A     		ldr	r1, [r3, #32]
 8539 006c 40F24442 		movw	r2, #1092
 8540 0070 1142     		tst	r1, r2
 8541 0072 03D1     		bne	.L615
2982:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 8542              		.loc 1 2982 0 discriminator 2
 8543 0074 1A68     		ldr	r2, [r3]
 8544 0076 22F00102 		bic	r2, r2, #1
 8545 007a 1A60     		str	r2, [r3]
 8546              	.L615:
2985:HALLIB/Src/stm32f7xx_hal_tim.c ****   
 8547              		.loc 1 2985 0 is_stmt 1
 8548 007c 0123     		movs	r3, #1
 8549 007e 84F83D30 		strb	r3, [r4, #61]
2989:HALLIB/Src/stm32f7xx_hal_tim.c **** 
 8550              		.loc 1 2989 0
 8551 0082 0020     		movs	r0, #0
 8552 0084 10BD     		pop	{r4, pc}
 8553              		.cfi_endproc
 8554              	.LFE193:
 8556 0086 00BF     		.text
 8557              	.Letext0:
 8558              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 8559              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 8560              		.file 4 "Inc/stm32f767xx.h"
 8561              		.file 5 "Inc/stm32f7xx.h"
 8562              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 8563              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 8564              		.file 8 "HALLIB/Inc/stm32f7xx_hal_tim.h"
 8565              		.file 9 "HALLIB/Inc/stm32f7xx_hal_tim_ex.h"
 8566              		.file 10 "CORE/core_cm7.h"
ARM GAS  /tmp/ccrrJVNd.s 			page 279


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_tim.c
     /tmp/ccrrJVNd.s:21     .text.TIM_TI1_ConfigInputStage:00000000 $t
     /tmp/ccrrJVNd.s:25     .text.TIM_TI1_ConfigInputStage:00000000 TIM_TI1_ConfigInputStage
     /tmp/ccrrJVNd.s:75     .text.TIM_TI2_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:79     .text.TIM_TI2_SetConfig:00000000 TIM_TI2_SetConfig
     /tmp/ccrrJVNd.s:142    .text.TIM_TI2_ConfigInputStage:00000000 $t
     /tmp/ccrrJVNd.s:146    .text.TIM_TI2_ConfigInputStage:00000000 TIM_TI2_ConfigInputStage
     /tmp/ccrrJVNd.s:195    .text.TIM_TI3_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:199    .text.TIM_TI3_SetConfig:00000000 TIM_TI3_SetConfig
     /tmp/ccrrJVNd.s:262    .text.TIM_TI4_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:266    .text.TIM_TI4_SetConfig:00000000 TIM_TI4_SetConfig
     /tmp/ccrrJVNd.s:329    .text.TIM_ITRx_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:333    .text.TIM_ITRx_SetConfig:00000000 TIM_ITRx_SetConfig
     /tmp/ccrrJVNd.s:359    .text.HAL_TIM_Base_MspInit:00000000 $t
     /tmp/ccrrJVNd.s:364    .text.HAL_TIM_Base_MspInit:00000000 HAL_TIM_Base_MspInit
     /tmp/ccrrJVNd.s:377    .text.HAL_TIM_Base_MspDeInit:00000000 $t
     /tmp/ccrrJVNd.s:382    .text.HAL_TIM_Base_MspDeInit:00000000 HAL_TIM_Base_MspDeInit
     /tmp/ccrrJVNd.s:395    .text.HAL_TIM_Base_DeInit:00000000 $t
     /tmp/ccrrJVNd.s:400    .text.HAL_TIM_Base_DeInit:00000000 HAL_TIM_Base_DeInit
     /tmp/ccrrJVNd.s:449    .text.HAL_TIM_Base_Start:00000000 $t
     /tmp/ccrrJVNd.s:454    .text.HAL_TIM_Base_Start:00000000 HAL_TIM_Base_Start
     /tmp/ccrrJVNd.s:481    .text.HAL_TIM_Base_Stop:00000000 $t
     /tmp/ccrrJVNd.s:486    .text.HAL_TIM_Base_Stop:00000000 HAL_TIM_Base_Stop
     /tmp/ccrrJVNd.s:524    .text.HAL_TIM_Base_Start_IT:00000000 $t
     /tmp/ccrrJVNd.s:529    .text.HAL_TIM_Base_Start_IT:00000000 HAL_TIM_Base_Start_IT
     /tmp/ccrrJVNd.s:555    .text.HAL_TIM_Base_Stop_IT:00000000 $t
     /tmp/ccrrJVNd.s:560    .text.HAL_TIM_Base_Stop_IT:00000000 HAL_TIM_Base_Stop_IT
     /tmp/ccrrJVNd.s:597    .text.HAL_TIM_Base_Start_DMA:00000000 $t
     /tmp/ccrrJVNd.s:602    .text.HAL_TIM_Base_Start_DMA:00000000 HAL_TIM_Base_Start_DMA
     /tmp/ccrrJVNd.s:682    .text.HAL_TIM_Base_Start_DMA:00000064 $d
     /tmp/ccrrJVNd.s:2168   .text.TIM_DMAPeriodElapsedCplt:00000000 TIM_DMAPeriodElapsedCplt
     /tmp/ccrrJVNd.s:2728   .text.TIM_DMAError:00000000 TIM_DMAError
     /tmp/ccrrJVNd.s:688    .text.HAL_TIM_Base_Stop_DMA:00000000 $t
     /tmp/ccrrJVNd.s:693    .text.HAL_TIM_Base_Stop_DMA:00000000 HAL_TIM_Base_Stop_DMA
     /tmp/ccrrJVNd.s:733    .text.HAL_TIM_OC_MspInit:00000000 $t
     /tmp/ccrrJVNd.s:738    .text.HAL_TIM_OC_MspInit:00000000 HAL_TIM_OC_MspInit
     /tmp/ccrrJVNd.s:751    .text.HAL_TIM_OC_MspDeInit:00000000 $t
     /tmp/ccrrJVNd.s:756    .text.HAL_TIM_OC_MspDeInit:00000000 HAL_TIM_OC_MspDeInit
     /tmp/ccrrJVNd.s:769    .text.HAL_TIM_OC_DeInit:00000000 $t
     /tmp/ccrrJVNd.s:774    .text.HAL_TIM_OC_DeInit:00000000 HAL_TIM_OC_DeInit
     /tmp/ccrrJVNd.s:823    .text.HAL_TIM_PWM_MspInit:00000000 $t
     /tmp/ccrrJVNd.s:828    .text.HAL_TIM_PWM_MspInit:00000000 HAL_TIM_PWM_MspInit
     /tmp/ccrrJVNd.s:841    .text.HAL_TIM_PWM_MspDeInit:00000000 $t
     /tmp/ccrrJVNd.s:846    .text.HAL_TIM_PWM_MspDeInit:00000000 HAL_TIM_PWM_MspDeInit
     /tmp/ccrrJVNd.s:859    .text.HAL_TIM_PWM_DeInit:00000000 $t
     /tmp/ccrrJVNd.s:864    .text.HAL_TIM_PWM_DeInit:00000000 HAL_TIM_PWM_DeInit
     /tmp/ccrrJVNd.s:913    .text.HAL_TIM_IC_MspInit:00000000 $t
     /tmp/ccrrJVNd.s:918    .text.HAL_TIM_IC_MspInit:00000000 HAL_TIM_IC_MspInit
     /tmp/ccrrJVNd.s:931    .text.HAL_TIM_IC_MspDeInit:00000000 $t
     /tmp/ccrrJVNd.s:936    .text.HAL_TIM_IC_MspDeInit:00000000 HAL_TIM_IC_MspDeInit
     /tmp/ccrrJVNd.s:949    .text.HAL_TIM_IC_DeInit:00000000 $t
     /tmp/ccrrJVNd.s:954    .text.HAL_TIM_IC_DeInit:00000000 HAL_TIM_IC_DeInit
     /tmp/ccrrJVNd.s:1003   .text.HAL_TIM_OnePulse_MspInit:00000000 $t
     /tmp/ccrrJVNd.s:1008   .text.HAL_TIM_OnePulse_MspInit:00000000 HAL_TIM_OnePulse_MspInit
     /tmp/ccrrJVNd.s:1021   .text.HAL_TIM_OnePulse_MspDeInit:00000000 $t
     /tmp/ccrrJVNd.s:1026   .text.HAL_TIM_OnePulse_MspDeInit:00000000 HAL_TIM_OnePulse_MspDeInit
ARM GAS  /tmp/ccrrJVNd.s 			page 280


     /tmp/ccrrJVNd.s:1039   .text.HAL_TIM_OnePulse_DeInit:00000000 $t
     /tmp/ccrrJVNd.s:1044   .text.HAL_TIM_OnePulse_DeInit:00000000 HAL_TIM_OnePulse_DeInit
     /tmp/ccrrJVNd.s:1093   .text.HAL_TIM_Encoder_MspInit:00000000 $t
     /tmp/ccrrJVNd.s:1098   .text.HAL_TIM_Encoder_MspInit:00000000 HAL_TIM_Encoder_MspInit
     /tmp/ccrrJVNd.s:1111   .text.HAL_TIM_Encoder_MspDeInit:00000000 $t
     /tmp/ccrrJVNd.s:1116   .text.HAL_TIM_Encoder_MspDeInit:00000000 HAL_TIM_Encoder_MspDeInit
     /tmp/ccrrJVNd.s:1129   .text.HAL_TIM_Encoder_DeInit:00000000 $t
     /tmp/ccrrJVNd.s:1134   .text.HAL_TIM_Encoder_DeInit:00000000 HAL_TIM_Encoder_DeInit
     /tmp/ccrrJVNd.s:1183   .text.HAL_TIM_DMABurst_WriteStart:00000000 $t
     /tmp/ccrrJVNd.s:1188   .text.HAL_TIM_DMABurst_WriteStart:00000000 HAL_TIM_DMABurst_WriteStart
     /tmp/ccrrJVNd.s:1456   .text.HAL_TIM_DMABurst_WriteStart:00000164 $d
     /tmp/ccrrJVNd.s:2326   .text.TIM_DMADelayPulseCplt:00000000 TIM_DMADelayPulseCplt
     /tmp/ccrrJVNd.s:2679   .text.TIM_DMATriggerCplt:00000000 TIM_DMATriggerCplt
     /tmp/ccrrJVNd.s:1465   .text.HAL_TIM_DMABurst_WriteStop:00000000 $t
     /tmp/ccrrJVNd.s:1470   .text.HAL_TIM_DMABurst_WriteStop:00000000 HAL_TIM_DMABurst_WriteStop
     /tmp/ccrrJVNd.s:1579   .text.HAL_TIM_DMABurst_ReadStart:00000000 $t
     /tmp/ccrrJVNd.s:1584   .text.HAL_TIM_DMABurst_ReadStart:00000000 HAL_TIM_DMABurst_ReadStart
     /tmp/ccrrJVNd.s:1852   .text.HAL_TIM_DMABurst_ReadStart:00000164 $d
     /tmp/ccrrJVNd.s:2236   .text.TIM_DMACaptureCplt:00000000 TIM_DMACaptureCplt
     /tmp/ccrrJVNd.s:1861   .text.HAL_TIM_DMABurst_ReadStop:00000000 $t
     /tmp/ccrrJVNd.s:1866   .text.HAL_TIM_DMABurst_ReadStop:00000000 HAL_TIM_DMABurst_ReadStop
     /tmp/ccrrJVNd.s:1975   .text.HAL_TIM_GenerateEvent:00000000 $t
     /tmp/ccrrJVNd.s:1980   .text.HAL_TIM_GenerateEvent:00000000 HAL_TIM_GenerateEvent
     /tmp/ccrrJVNd.s:2019   .text.HAL_TIM_ConfigTI1Input:00000000 $t
     /tmp/ccrrJVNd.s:2024   .text.HAL_TIM_ConfigTI1Input:00000000 HAL_TIM_ConfigTI1Input
     /tmp/ccrrJVNd.s:2052   .text.HAL_TIM_ReadCapturedValue:00000000 $t
     /tmp/ccrrJVNd.s:2057   .text.HAL_TIM_ReadCapturedValue:00000000 HAL_TIM_ReadCapturedValue
     /tmp/ccrrJVNd.s:2077   .text.HAL_TIM_ReadCapturedValue:00000016 $d
     /tmp/ccrrJVNd.s:2146   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccrrJVNd.s:2151   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccrrJVNd.s:2164   .text.TIM_DMAPeriodElapsedCplt:00000000 $t
     /tmp/ccrrJVNd.s:2195   .text.HAL_TIM_OC_DelayElapsedCallback:00000000 $t
     /tmp/ccrrJVNd.s:2200   .text.HAL_TIM_OC_DelayElapsedCallback:00000000 HAL_TIM_OC_DelayElapsedCallback
     /tmp/ccrrJVNd.s:2213   .text.HAL_TIM_IC_CaptureCallback:00000000 $t
     /tmp/ccrrJVNd.s:2218   .text.HAL_TIM_IC_CaptureCallback:00000000 HAL_TIM_IC_CaptureCallback
     /tmp/ccrrJVNd.s:2231   .text.TIM_DMACaptureCplt:00000000 $t
     /tmp/ccrrJVNd.s:2303   .text.HAL_TIM_PWM_PulseFinishedCallback:00000000 $t
     /tmp/ccrrJVNd.s:2308   .text.HAL_TIM_PWM_PulseFinishedCallback:00000000 HAL_TIM_PWM_PulseFinishedCallback
     /tmp/ccrrJVNd.s:2321   .text.TIM_DMADelayPulseCplt:00000000 $t
     /tmp/ccrrJVNd.s:2393   .text.HAL_TIM_TriggerCallback:00000000 $t
     /tmp/ccrrJVNd.s:2398   .text.HAL_TIM_TriggerCallback:00000000 HAL_TIM_TriggerCallback
     /tmp/ccrrJVNd.s:2411   .text.HAL_TIM_IRQHandler:00000000 $t
     /tmp/ccrrJVNd.s:2416   .text.HAL_TIM_IRQHandler:00000000 HAL_TIM_IRQHandler
     /tmp/ccrrJVNd.s:2675   .text.TIM_DMATriggerCplt:00000000 $t
     /tmp/ccrrJVNd.s:2705   .text.HAL_TIM_ErrorCallback:00000000 $t
     /tmp/ccrrJVNd.s:2710   .text.HAL_TIM_ErrorCallback:00000000 HAL_TIM_ErrorCallback
     /tmp/ccrrJVNd.s:2723   .text.TIM_DMAError:00000000 $t
     /tmp/ccrrJVNd.s:2755   .text.HAL_TIM_Base_GetState:00000000 $t
     /tmp/ccrrJVNd.s:2760   .text.HAL_TIM_Base_GetState:00000000 HAL_TIM_Base_GetState
     /tmp/ccrrJVNd.s:2777   .text.HAL_TIM_OC_GetState:00000000 $t
     /tmp/ccrrJVNd.s:2782   .text.HAL_TIM_OC_GetState:00000000 HAL_TIM_OC_GetState
     /tmp/ccrrJVNd.s:2799   .text.HAL_TIM_PWM_GetState:00000000 $t
     /tmp/ccrrJVNd.s:2804   .text.HAL_TIM_PWM_GetState:00000000 HAL_TIM_PWM_GetState
     /tmp/ccrrJVNd.s:2821   .text.HAL_TIM_IC_GetState:00000000 $t
     /tmp/ccrrJVNd.s:2826   .text.HAL_TIM_IC_GetState:00000000 HAL_TIM_IC_GetState
     /tmp/ccrrJVNd.s:2843   .text.HAL_TIM_OnePulse_GetState:00000000 $t
     /tmp/ccrrJVNd.s:2848   .text.HAL_TIM_OnePulse_GetState:00000000 HAL_TIM_OnePulse_GetState
ARM GAS  /tmp/ccrrJVNd.s 			page 281


     /tmp/ccrrJVNd.s:2865   .text.HAL_TIM_Encoder_GetState:00000000 $t
     /tmp/ccrrJVNd.s:2870   .text.HAL_TIM_Encoder_GetState:00000000 HAL_TIM_Encoder_GetState
     /tmp/ccrrJVNd.s:2887   .text.TIM_Base_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:2892   .text.TIM_Base_SetConfig:00000000 TIM_Base_SetConfig
     /tmp/ccrrJVNd.s:3091   .text.TIM_Base_SetConfig:0000011c $d
     /tmp/ccrrJVNd.s:3102   .text.HAL_TIM_Base_Init:00000000 $t
     /tmp/ccrrJVNd.s:3107   .text.HAL_TIM_Base_Init:00000000 HAL_TIM_Base_Init
     /tmp/ccrrJVNd.s:3162   .text.HAL_TIM_OC_Init:00000000 $t
     /tmp/ccrrJVNd.s:3167   .text.HAL_TIM_OC_Init:00000000 HAL_TIM_OC_Init
     /tmp/ccrrJVNd.s:3222   .text.HAL_TIM_PWM_Init:00000000 $t
     /tmp/ccrrJVNd.s:3227   .text.HAL_TIM_PWM_Init:00000000 HAL_TIM_PWM_Init
     /tmp/ccrrJVNd.s:3282   .text.HAL_TIM_IC_Init:00000000 $t
     /tmp/ccrrJVNd.s:3287   .text.HAL_TIM_IC_Init:00000000 HAL_TIM_IC_Init
     /tmp/ccrrJVNd.s:3342   .text.HAL_TIM_OnePulse_Init:00000000 $t
     /tmp/ccrrJVNd.s:3347   .text.HAL_TIM_OnePulse_Init:00000000 HAL_TIM_OnePulse_Init
     /tmp/ccrrJVNd.s:3417   .text.HAL_TIM_Encoder_Init:00000000 $t
     /tmp/ccrrJVNd.s:3422   .text.HAL_TIM_Encoder_Init:00000000 HAL_TIM_Encoder_Init
     /tmp/ccrrJVNd.s:3552   .text.HAL_TIM_Encoder_Init:00000098 $d
     /tmp/ccrrJVNd.s:3559   .text.TIM_OC1_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:3564   .text.TIM_OC1_SetConfig:00000000 TIM_OC1_SetConfig
     /tmp/ccrrJVNd.s:3658   .text.TIM_OC1_SetConfig:00000054 $d
     /tmp/ccrrJVNd.s:3665   .text.TIM_OC2_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:3670   .text.TIM_OC2_SetConfig:00000000 TIM_OC2_SetConfig
     /tmp/ccrrJVNd.s:3765   .text.TIM_OC2_SetConfig:0000005c $d
     /tmp/ccrrJVNd.s:3772   .text.TIM_OC3_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:3777   .text.TIM_OC3_SetConfig:00000000 TIM_OC3_SetConfig
     /tmp/ccrrJVNd.s:3871   .text.TIM_OC3_SetConfig:0000005c $d
     /tmp/ccrrJVNd.s:3878   .text.TIM_OC4_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:3883   .text.TIM_OC4_SetConfig:00000000 TIM_OC4_SetConfig
     /tmp/ccrrJVNd.s:3964   .text.TIM_OC4_SetConfig:00000048 $d
     /tmp/ccrrJVNd.s:3971   .text.HAL_TIM_OC_ConfigChannel:00000000 $t
     /tmp/ccrrJVNd.s:3976   .text.HAL_TIM_OC_ConfigChannel:00000000 HAL_TIM_OC_ConfigChannel
     /tmp/ccrrJVNd.s:4005   .text.HAL_TIM_OC_ConfigChannel:00000020 $d
     /tmp/ccrrJVNd.s:4075   .text.HAL_TIM_PWM_ConfigChannel:00000000 $t
     /tmp/ccrrJVNd.s:4080   .text.HAL_TIM_PWM_ConfigChannel:00000000 HAL_TIM_PWM_ConfigChannel
     /tmp/ccrrJVNd.s:4111   .text.HAL_TIM_PWM_ConfigChannel:00000022 $d
     /tmp/ccrrJVNd.s:4242   .text.TIM_TI1_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:4247   .text.TIM_TI1_SetConfig:00000000 TIM_TI1_SetConfig
     /tmp/ccrrJVNd.s:4374   .text.TIM_TI1_SetConfig:00000098 $d
     /tmp/ccrrJVNd.s:4381   .text.HAL_TIM_IC_ConfigChannel:00000000 $t
     /tmp/ccrrJVNd.s:4386   .text.HAL_TIM_IC_ConfigChannel:00000000 HAL_TIM_IC_ConfigChannel
     /tmp/ccrrJVNd.s:4533   .text.HAL_TIM_OnePulse_ConfigChannel:00000000 $t
     /tmp/ccrrJVNd.s:4538   .text.HAL_TIM_OnePulse_ConfigChannel:00000000 HAL_TIM_OnePulse_ConfigChannel
     /tmp/ccrrJVNd.s:4734   .text.HAL_TIM_OnePulse_ConfigChannel:000000f4 $d
     /tmp/ccrrJVNd.s:4739   .text.TIM_ETR_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:4744   .text.TIM_ETR_SetConfig:00000000 TIM_ETR_SetConfig
     /tmp/ccrrJVNd.s:4782   .text.HAL_TIM_ConfigOCrefClear:00000000 $t
     /tmp/ccrrJVNd.s:4787   .text.HAL_TIM_ConfigOCrefClear:00000000 HAL_TIM_ConfigOCrefClear
     /tmp/ccrrJVNd.s:4835   .text.HAL_TIM_ConfigOCrefClear:00000036 $d
     /tmp/ccrrJVNd.s:4941   .text.HAL_TIM_ConfigClockSource:00000000 $t
     /tmp/ccrrJVNd.s:4946   .text.HAL_TIM_ConfigClockSource:00000000 HAL_TIM_ConfigClockSource
     /tmp/ccrrJVNd.s:5184   .text.HAL_TIM_ConfigClockSource:00000114 $d
     /tmp/ccrrJVNd.s:5191   .text.HAL_TIM_SlaveConfigSynchronization:00000000 $t
     /tmp/ccrrJVNd.s:5196   .text.HAL_TIM_SlaveConfigSynchronization:00000000 HAL_TIM_SlaveConfigSynchronization
     /tmp/ccrrJVNd.s:5342   .text.HAL_TIM_SlaveConfigSynchronization:0000009c $d
     /tmp/ccrrJVNd.s:5347   .text.TIM_SlaveTimer_SetConfig:00000000 $t
     /tmp/ccrrJVNd.s:5351   .text.TIM_SlaveTimer_SetConfig:00000000 TIM_SlaveTimer_SetConfig
ARM GAS  /tmp/ccrrJVNd.s 			page 282


     /tmp/ccrrJVNd.s:5469   .text.TIM_SlaveTimer_SetConfig:00000078 $d
     /tmp/ccrrJVNd.s:5474   .text.HAL_TIM_SlaveConfigSynchronization_IT:00000000 $t
     /tmp/ccrrJVNd.s:5479   .text.HAL_TIM_SlaveConfigSynchronization_IT:00000000 HAL_TIM_SlaveConfigSynchronization_IT
     /tmp/ccrrJVNd.s:5535   .text.TIM_CCxChannelCmd:00000000 $t
     /tmp/ccrrJVNd.s:5540   .text.TIM_CCxChannelCmd:00000000 TIM_CCxChannelCmd
     /tmp/ccrrJVNd.s:5578   .text.HAL_TIM_OC_Start:00000000 $t
     /tmp/ccrrJVNd.s:5583   .text.HAL_TIM_OC_Start:00000000 HAL_TIM_OC_Start
     /tmp/ccrrJVNd.s:5627   .text.HAL_TIM_OC_Start:00000030 $d
     /tmp/ccrrJVNd.s:5633   .text.HAL_TIM_OC_Stop:00000000 $t
     /tmp/ccrrJVNd.s:5638   .text.HAL_TIM_OC_Stop:00000000 HAL_TIM_OC_Stop
     /tmp/ccrrJVNd.s:5703   .text.HAL_TIM_OC_Stop:00000058 $d
     /tmp/ccrrJVNd.s:5709   .text.HAL_TIM_OC_Start_IT:00000000 $t
     /tmp/ccrrJVNd.s:5714   .text.HAL_TIM_OC_Start_IT:00000000 HAL_TIM_OC_Start_IT
     /tmp/ccrrJVNd.s:5732   .text.HAL_TIM_OC_Start_IT:0000000c $d
     /tmp/ccrrJVNd.s:5808   .text.HAL_TIM_OC_Start_IT:00000074 $d
     /tmp/ccrrJVNd.s:5814   .text.HAL_TIM_OC_Stop_IT:00000000 $t
     /tmp/ccrrJVNd.s:5819   .text.HAL_TIM_OC_Stop_IT:00000000 HAL_TIM_OC_Stop_IT
     /tmp/ccrrJVNd.s:5837   .text.HAL_TIM_OC_Stop_IT:0000000c $d
     /tmp/ccrrJVNd.s:5934   .text.HAL_TIM_OC_Stop_IT:0000009c $d
     /tmp/ccrrJVNd.s:5940   .text.HAL_TIM_OC_Start_DMA:00000000 $t
     /tmp/ccrrJVNd.s:5945   .text.HAL_TIM_OC_Start_DMA:00000000 HAL_TIM_OC_Start_DMA
     /tmp/ccrrJVNd.s:5990   .text.HAL_TIM_OC_Start_DMA:0000003a $d
     /tmp/ccrrJVNd.s:6149   .text.HAL_TIM_OC_Start_DMA:0000010c $d
     /tmp/ccrrJVNd.s:6157   .text.HAL_TIM_OC_Stop_DMA:00000000 $t
     /tmp/ccrrJVNd.s:6162   .text.HAL_TIM_OC_Stop_DMA:00000000 HAL_TIM_OC_Stop_DMA
     /tmp/ccrrJVNd.s:6180   .text.HAL_TIM_OC_Stop_DMA:0000000c $d
     /tmp/ccrrJVNd.s:6280   .text.HAL_TIM_OC_Stop_DMA:000000a4 $d
     /tmp/ccrrJVNd.s:6286   .text.HAL_TIM_PWM_Start:00000000 $t
     /tmp/ccrrJVNd.s:6291   .text.HAL_TIM_PWM_Start:00000000 HAL_TIM_PWM_Start
     /tmp/ccrrJVNd.s:6335   .text.HAL_TIM_PWM_Start:00000030 $d
     /tmp/ccrrJVNd.s:6341   .text.HAL_TIM_PWM_Stop:00000000 $t
     /tmp/ccrrJVNd.s:6346   .text.HAL_TIM_PWM_Stop:00000000 HAL_TIM_PWM_Stop
     /tmp/ccrrJVNd.s:6414   .text.HAL_TIM_PWM_Stop:00000060 $d
     /tmp/ccrrJVNd.s:6420   .text.HAL_TIM_PWM_Start_IT:00000000 $t
     /tmp/ccrrJVNd.s:6425   .text.HAL_TIM_PWM_Start_IT:00000000 HAL_TIM_PWM_Start_IT
     /tmp/ccrrJVNd.s:6443   .text.HAL_TIM_PWM_Start_IT:0000000c $d
     /tmp/ccrrJVNd.s:6519   .text.HAL_TIM_PWM_Start_IT:00000074 $d
     /tmp/ccrrJVNd.s:6525   .text.HAL_TIM_PWM_Stop_IT:00000000 $t
     /tmp/ccrrJVNd.s:6530   .text.HAL_TIM_PWM_Stop_IT:00000000 HAL_TIM_PWM_Stop_IT
     /tmp/ccrrJVNd.s:6548   .text.HAL_TIM_PWM_Stop_IT:0000000c $d
     /tmp/ccrrJVNd.s:6645   .text.HAL_TIM_PWM_Stop_IT:0000009c $d
     /tmp/ccrrJVNd.s:6651   .text.HAL_TIM_PWM_Start_DMA:00000000 $t
     /tmp/ccrrJVNd.s:6656   .text.HAL_TIM_PWM_Start_DMA:00000000 HAL_TIM_PWM_Start_DMA
     /tmp/ccrrJVNd.s:6701   .text.HAL_TIM_PWM_Start_DMA:0000003a $d
     /tmp/ccrrJVNd.s:6860   .text.HAL_TIM_PWM_Start_DMA:0000010c $d
     /tmp/ccrrJVNd.s:6868   .text.HAL_TIM_PWM_Stop_DMA:00000000 $t
     /tmp/ccrrJVNd.s:6873   .text.HAL_TIM_PWM_Stop_DMA:00000000 HAL_TIM_PWM_Stop_DMA
     /tmp/ccrrJVNd.s:6891   .text.HAL_TIM_PWM_Stop_DMA:0000000c $d
     /tmp/ccrrJVNd.s:6991   .text.HAL_TIM_PWM_Stop_DMA:000000a4 $d
     /tmp/ccrrJVNd.s:6997   .text.HAL_TIM_IC_Start:00000000 $t
     /tmp/ccrrJVNd.s:7002   .text.HAL_TIM_IC_Start:00000000 HAL_TIM_IC_Start
     /tmp/ccrrJVNd.s:7033   .text.HAL_TIM_IC_Stop:00000000 $t
     /tmp/ccrrJVNd.s:7038   .text.HAL_TIM_IC_Stop:00000000 HAL_TIM_IC_Stop
     /tmp/ccrrJVNd.s:7080   .text.HAL_TIM_IC_Start_IT:00000000 $t
     /tmp/ccrrJVNd.s:7085   .text.HAL_TIM_IC_Start_IT:00000000 HAL_TIM_IC_Start_IT
     /tmp/ccrrJVNd.s:7103   .text.HAL_TIM_IC_Start_IT:0000000c $d
     /tmp/ccrrJVNd.s:7166   .text.HAL_TIM_IC_Stop_IT:00000000 $t
ARM GAS  /tmp/ccrrJVNd.s 			page 283


     /tmp/ccrrJVNd.s:7171   .text.HAL_TIM_IC_Stop_IT:00000000 HAL_TIM_IC_Stop_IT
     /tmp/ccrrJVNd.s:7189   .text.HAL_TIM_IC_Stop_IT:0000000c $d
     /tmp/ccrrJVNd.s:7263   .text.HAL_TIM_IC_Start_DMA:00000000 $t
     /tmp/ccrrJVNd.s:7268   .text.HAL_TIM_IC_Start_DMA:00000000 HAL_TIM_IC_Start_DMA
     /tmp/ccrrJVNd.s:7312   .text.HAL_TIM_IC_Start_DMA:00000038 $d
     /tmp/ccrrJVNd.s:7451   .text.HAL_TIM_IC_Start_DMA:000000ec $d
     /tmp/ccrrJVNd.s:7457   .text.HAL_TIM_IC_Stop_DMA:00000000 $t
     /tmp/ccrrJVNd.s:7462   .text.HAL_TIM_IC_Stop_DMA:00000000 HAL_TIM_IC_Stop_DMA
     /tmp/ccrrJVNd.s:7480   .text.HAL_TIM_IC_Stop_DMA:0000000c $d
     /tmp/ccrrJVNd.s:7557   .text.HAL_TIM_OnePulse_Start:00000000 $t
     /tmp/ccrrJVNd.s:7562   .text.HAL_TIM_OnePulse_Start:00000000 HAL_TIM_OnePulse_Start
     /tmp/ccrrJVNd.s:7609   .text.HAL_TIM_OnePulse_Start:00000034 $d
     /tmp/ccrrJVNd.s:7615   .text.HAL_TIM_OnePulse_Stop:00000000 $t
     /tmp/ccrrJVNd.s:7620   .text.HAL_TIM_OnePulse_Stop:00000000 HAL_TIM_OnePulse_Stop
     /tmp/ccrrJVNd.s:7693   .text.HAL_TIM_OnePulse_Stop:00000064 $d
     /tmp/ccrrJVNd.s:7699   .text.HAL_TIM_OnePulse_Start_IT:00000000 $t
     /tmp/ccrrJVNd.s:7704   .text.HAL_TIM_OnePulse_Start_IT:00000000 HAL_TIM_OnePulse_Start_IT
     /tmp/ccrrJVNd.s:7761   .text.HAL_TIM_OnePulse_Start_IT:00000048 $d
     /tmp/ccrrJVNd.s:7767   .text.HAL_TIM_OnePulse_Stop_IT:00000000 $t
     /tmp/ccrrJVNd.s:7772   .text.HAL_TIM_OnePulse_Stop_IT:00000000 HAL_TIM_OnePulse_Stop_IT
     /tmp/ccrrJVNd.s:7855   .text.HAL_TIM_OnePulse_Stop_IT:00000078 $d
     /tmp/ccrrJVNd.s:7861   .text.HAL_TIM_Encoder_Start:00000000 $t
     /tmp/ccrrJVNd.s:7866   .text.HAL_TIM_Encoder_Start:00000000 HAL_TIM_Encoder_Start
     /tmp/ccrrJVNd.s:7936   .text.HAL_TIM_Encoder_Stop:00000000 $t
     /tmp/ccrrJVNd.s:7941   .text.HAL_TIM_Encoder_Stop:00000000 HAL_TIM_Encoder_Stop
     /tmp/ccrrJVNd.s:8022   .text.HAL_TIM_Encoder_Start_IT:00000000 $t
     /tmp/ccrrJVNd.s:8027   .text.HAL_TIM_Encoder_Start_IT:00000000 HAL_TIM_Encoder_Start_IT
     /tmp/ccrrJVNd.s:8117   .text.HAL_TIM_Encoder_Stop_IT:00000000 $t
     /tmp/ccrrJVNd.s:8122   .text.HAL_TIM_Encoder_Stop_IT:00000000 HAL_TIM_Encoder_Stop_IT
     /tmp/ccrrJVNd.s:8223   .text.HAL_TIM_Encoder_Start_DMA:00000000 $t
     /tmp/ccrrJVNd.s:8228   .text.HAL_TIM_Encoder_Start_DMA:00000000 HAL_TIM_Encoder_Start_DMA
     /tmp/ccrrJVNd.s:8445   .text.HAL_TIM_Encoder_Start_DMA:0000013c $d
     /tmp/ccrrJVNd.s:8451   .text.HAL_TIM_Encoder_Stop_DMA:00000000 $t
     /tmp/ccrrJVNd.s:8456   .text.HAL_TIM_Encoder_Stop_DMA:00000000 HAL_TIM_Encoder_Stop_DMA
                     .debug_frame:00000010 $d
     /tmp/ccrrJVNd.s:2090   .text.HAL_TIM_ReadCapturedValue:00000023 $d
     /tmp/ccrrJVNd.s:2090   .text.HAL_TIM_ReadCapturedValue:00000024 $t
     /tmp/ccrrJVNd.s:4018   .text.HAL_TIM_OC_ConfigChannel:0000002d $d
     /tmp/ccrrJVNd.s:4018   .text.HAL_TIM_OC_ConfigChannel:0000002e $t
     /tmp/ccrrJVNd.s:4124   .text.HAL_TIM_PWM_ConfigChannel:0000002f $d
     /tmp/ccrrJVNd.s:4124   .text.HAL_TIM_PWM_ConfigChannel:00000030 $t
     /tmp/ccrrJVNd.s:4848   .text.HAL_TIM_ConfigOCrefClear:00000043 $d
     /tmp/ccrrJVNd.s:4848   .text.HAL_TIM_ConfigOCrefClear:00000044 $t
     /tmp/ccrrJVNd.s:5745   .text.HAL_TIM_OC_Start_IT:00000019 $d
     /tmp/ccrrJVNd.s:5745   .text.HAL_TIM_OC_Start_IT:0000001a $t
     /tmp/ccrrJVNd.s:5850   .text.HAL_TIM_OC_Stop_IT:00000019 $d
     /tmp/ccrrJVNd.s:5850   .text.HAL_TIM_OC_Stop_IT:0000001a $t
     /tmp/ccrrJVNd.s:6003   .text.HAL_TIM_OC_Start_DMA:00000047 $d
     /tmp/ccrrJVNd.s:6003   .text.HAL_TIM_OC_Start_DMA:00000048 $t
     /tmp/ccrrJVNd.s:6193   .text.HAL_TIM_OC_Stop_DMA:00000019 $d
     /tmp/ccrrJVNd.s:6193   .text.HAL_TIM_OC_Stop_DMA:0000001a $t
     /tmp/ccrrJVNd.s:6456   .text.HAL_TIM_PWM_Start_IT:00000019 $d
     /tmp/ccrrJVNd.s:6456   .text.HAL_TIM_PWM_Start_IT:0000001a $t
     /tmp/ccrrJVNd.s:6561   .text.HAL_TIM_PWM_Stop_IT:00000019 $d
     /tmp/ccrrJVNd.s:6561   .text.HAL_TIM_PWM_Stop_IT:0000001a $t
     /tmp/ccrrJVNd.s:6714   .text.HAL_TIM_PWM_Start_DMA:00000047 $d
     /tmp/ccrrJVNd.s:6714   .text.HAL_TIM_PWM_Start_DMA:00000048 $t
ARM GAS  /tmp/ccrrJVNd.s 			page 284


     /tmp/ccrrJVNd.s:6904   .text.HAL_TIM_PWM_Stop_DMA:00000019 $d
     /tmp/ccrrJVNd.s:6904   .text.HAL_TIM_PWM_Stop_DMA:0000001a $t
     /tmp/ccrrJVNd.s:7116   .text.HAL_TIM_IC_Start_IT:00000019 $d
     /tmp/ccrrJVNd.s:7116   .text.HAL_TIM_IC_Start_IT:0000001a $t
     /tmp/ccrrJVNd.s:7202   .text.HAL_TIM_IC_Stop_IT:00000019 $d
     /tmp/ccrrJVNd.s:7202   .text.HAL_TIM_IC_Stop_IT:0000001a $t
     /tmp/ccrrJVNd.s:7325   .text.HAL_TIM_IC_Start_DMA:00000045 $d
     /tmp/ccrrJVNd.s:7325   .text.HAL_TIM_IC_Start_DMA:00000046 $t
     /tmp/ccrrJVNd.s:7493   .text.HAL_TIM_IC_Stop_DMA:00000019 $d
     /tmp/ccrrJVNd.s:7493   .text.HAL_TIM_IC_Stop_DMA:0000001a $t

UNDEFINED SYMBOLS
HAL_DMA_Start_IT
TIMEx_DMACommutationCplt
HAL_DMA_Abort
HAL_TIMEx_BreakCallback
HAL_TIMEx_CommutationCallback
