ARM GAS  /tmp/ccpSkdMc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_MspInit,"ax",%progbits
  21              		.align	2
  22              		.weak	HAL_MspInit
  23              		.thumb
  24              		.thumb_func
  26              	HAL_MspInit:
  27              	.LFB138:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal.c"
   1:HALLIB/Src/stm32f7xx_hal.c **** /**
   2:HALLIB/Src/stm32f7xx_hal.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal.c ****   * @file    stm32f7xx_hal.c
   4:HALLIB/Src/stm32f7xx_hal.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal.c ****   * @brief   HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal.c ****   *          This is the common part of the HAL initialization
   7:HALLIB/Src/stm32f7xx_hal.c ****   *
   8:HALLIB/Src/stm32f7xx_hal.c ****   @verbatim
   9:HALLIB/Src/stm32f7xx_hal.c ****   ==============================================================================
  10:HALLIB/Src/stm32f7xx_hal.c ****                      ##### How to use this driver #####
  11:HALLIB/Src/stm32f7xx_hal.c ****   ==============================================================================
  12:HALLIB/Src/stm32f7xx_hal.c ****     [..]
  13:HALLIB/Src/stm32f7xx_hal.c ****     The common HAL driver contains a set of generic and common APIs that can be
  14:HALLIB/Src/stm32f7xx_hal.c ****     used by the PPP peripheral drivers and the user to start using the HAL. 
  15:HALLIB/Src/stm32f7xx_hal.c ****     [..]
  16:HALLIB/Src/stm32f7xx_hal.c ****     The HAL contains two APIs' categories: 
  17:HALLIB/Src/stm32f7xx_hal.c ****          (+) Common HAL APIs
  18:HALLIB/Src/stm32f7xx_hal.c ****          (+) Services HAL APIs
  19:HALLIB/Src/stm32f7xx_hal.c **** 
  20:HALLIB/Src/stm32f7xx_hal.c ****   @endverbatim
  21:HALLIB/Src/stm32f7xx_hal.c ****   ******************************************************************************
  22:HALLIB/Src/stm32f7xx_hal.c ****   * @attention
  23:HALLIB/Src/stm32f7xx_hal.c ****   *
  24:HALLIB/Src/stm32f7xx_hal.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  25:HALLIB/Src/stm32f7xx_hal.c ****   *
  26:HALLIB/Src/stm32f7xx_hal.c ****   * Redistribution and use in source and binary forms, with or without modification,
  27:HALLIB/Src/stm32f7xx_hal.c ****   * are permitted provided that the following conditions are met:
  28:HALLIB/Src/stm32f7xx_hal.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  29:HALLIB/Src/stm32f7xx_hal.c ****   *      this list of conditions and the following disclaimer.
  30:HALLIB/Src/stm32f7xx_hal.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
ARM GAS  /tmp/ccpSkdMc.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal.c ****   *      this list of conditions and the following disclaimer in the documentation
  32:HALLIB/Src/stm32f7xx_hal.c ****   *      and/or other materials provided with the distribution.
  33:HALLIB/Src/stm32f7xx_hal.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  34:HALLIB/Src/stm32f7xx_hal.c ****   *      may be used to endorse or promote products derived from this software
  35:HALLIB/Src/stm32f7xx_hal.c ****   *      without specific prior written permission.
  36:HALLIB/Src/stm32f7xx_hal.c ****   *
  37:HALLIB/Src/stm32f7xx_hal.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  38:HALLIB/Src/stm32f7xx_hal.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  39:HALLIB/Src/stm32f7xx_hal.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  40:HALLIB/Src/stm32f7xx_hal.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  41:HALLIB/Src/stm32f7xx_hal.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  42:HALLIB/Src/stm32f7xx_hal.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  43:HALLIB/Src/stm32f7xx_hal.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  44:HALLIB/Src/stm32f7xx_hal.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  45:HALLIB/Src/stm32f7xx_hal.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  46:HALLIB/Src/stm32f7xx_hal.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  47:HALLIB/Src/stm32f7xx_hal.c ****   *
  48:HALLIB/Src/stm32f7xx_hal.c ****   ******************************************************************************
  49:HALLIB/Src/stm32f7xx_hal.c ****   */ 
  50:HALLIB/Src/stm32f7xx_hal.c **** 
  51:HALLIB/Src/stm32f7xx_hal.c **** /* Includes ------------------------------------------------------------------*/
  52:HALLIB/Src/stm32f7xx_hal.c **** #include "stm32f7xx_hal.h"
  53:HALLIB/Src/stm32f7xx_hal.c **** 
  54:HALLIB/Src/stm32f7xx_hal.c **** /** @addtogroup STM32F7xx_HAL_Driver
  55:HALLIB/Src/stm32f7xx_hal.c ****   * @{
  56:HALLIB/Src/stm32f7xx_hal.c ****   */
  57:HALLIB/Src/stm32f7xx_hal.c **** 
  58:HALLIB/Src/stm32f7xx_hal.c **** /** @defgroup HAL HAL
  59:HALLIB/Src/stm32f7xx_hal.c ****   * @brief HAL module driver.
  60:HALLIB/Src/stm32f7xx_hal.c ****   * @{
  61:HALLIB/Src/stm32f7xx_hal.c ****   */
  62:HALLIB/Src/stm32f7xx_hal.c **** 
  63:HALLIB/Src/stm32f7xx_hal.c **** /* Private typedef -----------------------------------------------------------*/
  64:HALLIB/Src/stm32f7xx_hal.c **** /* Private define ------------------------------------------------------------*/
  65:HALLIB/Src/stm32f7xx_hal.c **** /** @addtogroup HAL_Private_Constants
  66:HALLIB/Src/stm32f7xx_hal.c ****   * @{
  67:HALLIB/Src/stm32f7xx_hal.c ****   */
  68:HALLIB/Src/stm32f7xx_hal.c **** /**
  69:HALLIB/Src/stm32f7xx_hal.c ****  * @brief STM32F7xx HAL Driver version number V1.2.4
  70:HALLIB/Src/stm32f7xx_hal.c ****    */
  71:HALLIB/Src/stm32f7xx_hal.c **** #define __STM32F7xx_HAL_VERSION_MAIN   (0x01) /*!< [31:24] main version */
  72:HALLIB/Src/stm32f7xx_hal.c **** #define __STM32F7xx_HAL_VERSION_SUB1   (0x02) /*!< [23:16] sub1 version */
  73:HALLIB/Src/stm32f7xx_hal.c **** #define __STM32F7xx_HAL_VERSION_SUB2   (0x04) /*!< [15:8]  sub2 version */
  74:HALLIB/Src/stm32f7xx_hal.c **** #define __STM32F7xx_HAL_VERSION_RC     (0x00) /*!< [7:0]  release candidate */ 
  75:HALLIB/Src/stm32f7xx_hal.c **** #define __STM32F7xx_HAL_VERSION         ((__STM32F7xx_HAL_VERSION_MAIN << 24)\
  76:HALLIB/Src/stm32f7xx_hal.c ****                                         |(__STM32F7xx_HAL_VERSION_SUB1 << 16)\
  77:HALLIB/Src/stm32f7xx_hal.c ****                                         |(__STM32F7xx_HAL_VERSION_SUB2 << 8 )\
  78:HALLIB/Src/stm32f7xx_hal.c ****                                         |(__STM32F7xx_HAL_VERSION_RC))
  79:HALLIB/Src/stm32f7xx_hal.c ****                                         
  80:HALLIB/Src/stm32f7xx_hal.c **** #define IDCODE_DEVID_MASK    ((uint32_t)0x00000FFF)
  81:HALLIB/Src/stm32f7xx_hal.c **** /**
  82:HALLIB/Src/stm32f7xx_hal.c ****   * @}
  83:HALLIB/Src/stm32f7xx_hal.c ****   */
  84:HALLIB/Src/stm32f7xx_hal.c **** 
  85:HALLIB/Src/stm32f7xx_hal.c **** /* Private macro -------------------------------------------------------------*/
  86:HALLIB/Src/stm32f7xx_hal.c **** /* Private variables ---------------------------------------------------------*/
  87:HALLIB/Src/stm32f7xx_hal.c **** /** @addtogroup HAL_Private_Variables
ARM GAS  /tmp/ccpSkdMc.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal.c ****   * @{
  89:HALLIB/Src/stm32f7xx_hal.c ****   */
  90:HALLIB/Src/stm32f7xx_hal.c **** __IO uint32_t uwTick;
  91:HALLIB/Src/stm32f7xx_hal.c **** uint32_t uwTickPrio   = (1UL << __NVIC_PRIO_BITS); /* Invalid PRIO */
  92:HALLIB/Src/stm32f7xx_hal.c **** HAL_TickFreqTypeDef uwTickFreq = HAL_TICK_FREQ_DEFAULT;  /* 1KHz */
  93:HALLIB/Src/stm32f7xx_hal.c **** /**
  94:HALLIB/Src/stm32f7xx_hal.c ****   * @}
  95:HALLIB/Src/stm32f7xx_hal.c ****   */
  96:HALLIB/Src/stm32f7xx_hal.c **** 
  97:HALLIB/Src/stm32f7xx_hal.c **** /* Private function prototypes -----------------------------------------------*/
  98:HALLIB/Src/stm32f7xx_hal.c **** /* Private functions ---------------------------------------------------------*/
  99:HALLIB/Src/stm32f7xx_hal.c **** 
 100:HALLIB/Src/stm32f7xx_hal.c **** /** @defgroup HAL_Exported_Functions HAL Exported Functions
 101:HALLIB/Src/stm32f7xx_hal.c ****   * @{
 102:HALLIB/Src/stm32f7xx_hal.c ****   */
 103:HALLIB/Src/stm32f7xx_hal.c **** 
 104:HALLIB/Src/stm32f7xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization Functions 
 105:HALLIB/Src/stm32f7xx_hal.c ****  *  @brief    Initialization and de-initialization functions
 106:HALLIB/Src/stm32f7xx_hal.c ****  *
 107:HALLIB/Src/stm32f7xx_hal.c **** @verbatim    
 108:HALLIB/Src/stm32f7xx_hal.c ****  ===============================================================================
 109:HALLIB/Src/stm32f7xx_hal.c ****               ##### Initialization and Configuration functions #####
 110:HALLIB/Src/stm32f7xx_hal.c ****  ===============================================================================
 111:HALLIB/Src/stm32f7xx_hal.c ****     [..]  This section provides functions allowing to:
 112:HALLIB/Src/stm32f7xx_hal.c ****       (+) Initializes the Flash interface the NVIC allocation and initial clock 
 113:HALLIB/Src/stm32f7xx_hal.c ****           configuration. It initializes the systick also when timeout is needed 
 114:HALLIB/Src/stm32f7xx_hal.c ****           and the backup domain when enabled.
 115:HALLIB/Src/stm32f7xx_hal.c ****       (+) De-Initializes common part of the HAL.
 116:HALLIB/Src/stm32f7xx_hal.c ****       (+) Configure the time base source to have 1ms time base with a dedicated 
 117:HALLIB/Src/stm32f7xx_hal.c ****           Tick interrupt priority. 
 118:HALLIB/Src/stm32f7xx_hal.c ****         (++) SysTick timer is used by default as source of time base, but user
 119:HALLIB/Src/stm32f7xx_hal.c ****              can eventually implement his proper time base source (a general purpose 
 120:HALLIB/Src/stm32f7xx_hal.c ****              timer for example or other time source), keeping in mind that Time base 
 121:HALLIB/Src/stm32f7xx_hal.c ****              duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
 122:HALLIB/Src/stm32f7xx_hal.c ****              handled in milliseconds basis.
 123:HALLIB/Src/stm32f7xx_hal.c ****         (++) Time base configuration function (HAL_InitTick ()) is called automatically 
 124:HALLIB/Src/stm32f7xx_hal.c ****              at the beginning of the program after reset by HAL_Init() or at any time 
 125:HALLIB/Src/stm32f7xx_hal.c ****              when clock is configured, by HAL_RCC_ClockConfig(). 
 126:HALLIB/Src/stm32f7xx_hal.c ****         (++) Source of time base is configured  to generate interrupts at regular 
 127:HALLIB/Src/stm32f7xx_hal.c ****              time intervals. Care must be taken if HAL_Delay() is called from a 
 128:HALLIB/Src/stm32f7xx_hal.c ****              peripheral ISR process, the Tick interrupt line must have higher priority 
 129:HALLIB/Src/stm32f7xx_hal.c ****             (numerically lower) than the peripheral interrupt. Otherwise the caller 
 130:HALLIB/Src/stm32f7xx_hal.c ****             ISR process will be blocked. 
 131:HALLIB/Src/stm32f7xx_hal.c ****        (++) functions affecting time base configurations are declared as __weak  
 132:HALLIB/Src/stm32f7xx_hal.c ****              to make  override possible  in case of other  implementations in user file.
 133:HALLIB/Src/stm32f7xx_hal.c **** @endverbatim
 134:HALLIB/Src/stm32f7xx_hal.c ****   * @{
 135:HALLIB/Src/stm32f7xx_hal.c ****   */
 136:HALLIB/Src/stm32f7xx_hal.c **** 
 137:HALLIB/Src/stm32f7xx_hal.c **** /**
 138:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  This function is used to initialize the HAL Library; it must be the first 
 139:HALLIB/Src/stm32f7xx_hal.c ****   *         instruction to be executed in the main program (before to call any other
 140:HALLIB/Src/stm32f7xx_hal.c ****   *         HAL function), it performs the following:
 141:HALLIB/Src/stm32f7xx_hal.c ****   *           Configure the Flash prefetch, and instruction cache through ART accelerator.
 142:HALLIB/Src/stm32f7xx_hal.c ****   *           Configures the SysTick to generate an interrupt each 1 millisecond,
 143:HALLIB/Src/stm32f7xx_hal.c ****   *           which is clocked by the HSI (at this stage, the clock is not yet
 144:HALLIB/Src/stm32f7xx_hal.c ****   *           configured and thus the system is running from the internal HSI at 16 MHz).
ARM GAS  /tmp/ccpSkdMc.s 			page 4


 145:HALLIB/Src/stm32f7xx_hal.c ****   *           Set NVIC Group Priority to 4.
 146:HALLIB/Src/stm32f7xx_hal.c ****   *           Calls the HAL_MspInit() callback function defined in user file 
 147:HALLIB/Src/stm32f7xx_hal.c ****   *           "stm32f7xx_hal_msp.c" to do the global low level hardware initialization 
 148:HALLIB/Src/stm32f7xx_hal.c ****   *            
 149:HALLIB/Src/stm32f7xx_hal.c ****   * @note   SysTick is used as time base for the HAL_Delay() function, the application
 150:HALLIB/Src/stm32f7xx_hal.c ****   *         need to ensure that the SysTick time base is always set to 1 millisecond
 151:HALLIB/Src/stm32f7xx_hal.c ****   *         to have correct HAL operation.
 152:HALLIB/Src/stm32f7xx_hal.c ****   * @retval HAL status
 153:HALLIB/Src/stm32f7xx_hal.c ****   */
 154:HALLIB/Src/stm32f7xx_hal.c **** HAL_StatusTypeDef HAL_Init(void)
 155:HALLIB/Src/stm32f7xx_hal.c **** {
 156:HALLIB/Src/stm32f7xx_hal.c ****   /* Configure Instruction cache through ART accelerator */ 
 157:HALLIB/Src/stm32f7xx_hal.c **** #if (ART_ACCLERATOR_ENABLE != 0)
 158:HALLIB/Src/stm32f7xx_hal.c ****    __HAL_FLASH_ART_ENABLE();
 159:HALLIB/Src/stm32f7xx_hal.c **** #endif /* ART_ACCLERATOR_ENABLE */
 160:HALLIB/Src/stm32f7xx_hal.c **** 
 161:HALLIB/Src/stm32f7xx_hal.c ****   /* Configure Flash prefetch */
 162:HALLIB/Src/stm32f7xx_hal.c **** #if (PREFETCH_ENABLE != 0U)
 163:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 164:HALLIB/Src/stm32f7xx_hal.c **** #endif /* PREFETCH_ENABLE */
 165:HALLIB/Src/stm32f7xx_hal.c **** 
 166:HALLIB/Src/stm32f7xx_hal.c ****   /* Set Interrupt Group Priority */
 167:HALLIB/Src/stm32f7xx_hal.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 168:HALLIB/Src/stm32f7xx_hal.c **** 
 169:HALLIB/Src/stm32f7xx_hal.c ****   /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
 170:HALLIB/Src/stm32f7xx_hal.c ****   HAL_InitTick(TICK_INT_PRIORITY);
 171:HALLIB/Src/stm32f7xx_hal.c ****   
 172:HALLIB/Src/stm32f7xx_hal.c ****   /* Init the low level hardware */
 173:HALLIB/Src/stm32f7xx_hal.c ****   HAL_MspInit();
 174:HALLIB/Src/stm32f7xx_hal.c ****   
 175:HALLIB/Src/stm32f7xx_hal.c ****   /* Return function status */
 176:HALLIB/Src/stm32f7xx_hal.c ****   return HAL_OK;
 177:HALLIB/Src/stm32f7xx_hal.c **** }
 178:HALLIB/Src/stm32f7xx_hal.c **** 
 179:HALLIB/Src/stm32f7xx_hal.c **** /**
 180:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  This function de-Initializes common part of the HAL and stops the systick.
 181:HALLIB/Src/stm32f7xx_hal.c ****   *         This function is optional.   
 182:HALLIB/Src/stm32f7xx_hal.c ****   * @retval HAL status
 183:HALLIB/Src/stm32f7xx_hal.c ****   */
 184:HALLIB/Src/stm32f7xx_hal.c **** HAL_StatusTypeDef HAL_DeInit(void)
 185:HALLIB/Src/stm32f7xx_hal.c **** {
 186:HALLIB/Src/stm32f7xx_hal.c ****   /* Reset of all peripherals */
 187:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_APB1_FORCE_RESET();
 188:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
 189:HALLIB/Src/stm32f7xx_hal.c **** 
 190:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_APB2_FORCE_RESET();
 191:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
 192:HALLIB/Src/stm32f7xx_hal.c **** 
 193:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_AHB1_FORCE_RESET();
 194:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
 195:HALLIB/Src/stm32f7xx_hal.c **** 
 196:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_AHB2_FORCE_RESET();
 197:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
 198:HALLIB/Src/stm32f7xx_hal.c **** 
 199:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_AHB3_FORCE_RESET();
 200:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
 201:HALLIB/Src/stm32f7xx_hal.c **** 
ARM GAS  /tmp/ccpSkdMc.s 			page 5


 202:HALLIB/Src/stm32f7xx_hal.c ****   /* De-Init the low level hardware */
 203:HALLIB/Src/stm32f7xx_hal.c ****   HAL_MspDeInit();
 204:HALLIB/Src/stm32f7xx_hal.c ****     
 205:HALLIB/Src/stm32f7xx_hal.c ****   /* Return function status */
 206:HALLIB/Src/stm32f7xx_hal.c ****   return HAL_OK;
 207:HALLIB/Src/stm32f7xx_hal.c **** }
 208:HALLIB/Src/stm32f7xx_hal.c **** 
 209:HALLIB/Src/stm32f7xx_hal.c **** /**
 210:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Initialize the MSP.
 211:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 212:HALLIB/Src/stm32f7xx_hal.c ****   */
 213:HALLIB/Src/stm32f7xx_hal.c **** __weak void HAL_MspInit(void)
 214:HALLIB/Src/stm32f7xx_hal.c **** {
  29              		.loc 1 214 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE138:
  38 0002 00BF     		.section	.text.HAL_MspDeInit,"ax",%progbits
  39              		.align	2
  40              		.weak	HAL_MspDeInit
  41              		.thumb
  42              		.thumb_func
  44              	HAL_MspDeInit:
  45              	.LFB139:
 215:HALLIB/Src/stm32f7xx_hal.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 216:HALLIB/Src/stm32f7xx_hal.c ****             the HAL_MspInit could be implemented in the user file
 217:HALLIB/Src/stm32f7xx_hal.c ****    */
 218:HALLIB/Src/stm32f7xx_hal.c **** }
 219:HALLIB/Src/stm32f7xx_hal.c **** 
 220:HALLIB/Src/stm32f7xx_hal.c **** /**
 221:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  DeInitializes the MSP.
 222:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 223:HALLIB/Src/stm32f7xx_hal.c ****   */
 224:HALLIB/Src/stm32f7xx_hal.c **** __weak void HAL_MspDeInit(void)
 225:HALLIB/Src/stm32f7xx_hal.c **** {
  46              		.loc 1 225 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51 0000 7047     		bx	lr
  52              		.cfi_endproc
  53              	.LFE139:
  55 0002 00BF     		.section	.text.HAL_DeInit,"ax",%progbits
  56              		.align	2
  57              		.global	HAL_DeInit
  58              		.thumb
  59              		.thumb_func
  61              	HAL_DeInit:
  62              	.LFB137:
 185:HALLIB/Src/stm32f7xx_hal.c ****   /* Reset of all peripherals */
  63              		.loc 1 185 0
  64              		.cfi_startproc
ARM GAS  /tmp/ccpSkdMc.s 			page 6


  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
 185:HALLIB/Src/stm32f7xx_hal.c ****   /* Reset of all peripherals */
  67              		.loc 1 185 0
  68 0000 10B5     		push	{r4, lr}
  69              	.LCFI0:
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 4, -8
  72              		.cfi_offset 14, -4
 187:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
  73              		.loc 1 187 0
  74 0002 094B     		ldr	r3, .L5
  75 0004 4FF0FF32 		mov	r2, #-1
  76 0008 1A62     		str	r2, [r3, #32]
 188:HALLIB/Src/stm32f7xx_hal.c **** 
  77              		.loc 1 188 0
  78 000a 0024     		movs	r4, #0
  79 000c 1C62     		str	r4, [r3, #32]
 190:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
  80              		.loc 1 190 0
  81 000e 5A62     		str	r2, [r3, #36]
 191:HALLIB/Src/stm32f7xx_hal.c **** 
  82              		.loc 1 191 0
  83 0010 5C62     		str	r4, [r3, #36]
 193:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
  84              		.loc 1 193 0
  85 0012 1A61     		str	r2, [r3, #16]
 194:HALLIB/Src/stm32f7xx_hal.c **** 
  86              		.loc 1 194 0
  87 0014 1C61     		str	r4, [r3, #16]
 196:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
  88              		.loc 1 196 0
  89 0016 5A61     		str	r2, [r3, #20]
 197:HALLIB/Src/stm32f7xx_hal.c **** 
  90              		.loc 1 197 0
  91 0018 5C61     		str	r4, [r3, #20]
 199:HALLIB/Src/stm32f7xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
  92              		.loc 1 199 0
  93 001a 9A61     		str	r2, [r3, #24]
 200:HALLIB/Src/stm32f7xx_hal.c **** 
  94              		.loc 1 200 0
  95 001c 9C61     		str	r4, [r3, #24]
 203:HALLIB/Src/stm32f7xx_hal.c ****     
  96              		.loc 1 203 0
  97 001e FFF7FEFF 		bl	HAL_MspDeInit
  98              	.LVL0:
 207:HALLIB/Src/stm32f7xx_hal.c **** 
  99              		.loc 1 207 0
 100 0022 2046     		mov	r0, r4
 101 0024 10BD     		pop	{r4, pc}
 102              	.L6:
 103 0026 00BF     		.align	2
 104              	.L5:
 105 0028 00380240 		.word	1073887232
 106              		.cfi_endproc
 107              	.LFE137:
 109              		.section	.text.HAL_InitTick,"ax",%progbits
ARM GAS  /tmp/ccpSkdMc.s 			page 7


 110              		.align	2
 111              		.weak	HAL_InitTick
 112              		.thumb
 113              		.thumb_func
 115              	HAL_InitTick:
 116              	.LFB140:
 226:HALLIB/Src/stm32f7xx_hal.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 227:HALLIB/Src/stm32f7xx_hal.c ****             the HAL_MspDeInit could be implemented in the user file
 228:HALLIB/Src/stm32f7xx_hal.c ****    */ 
 229:HALLIB/Src/stm32f7xx_hal.c **** }
 230:HALLIB/Src/stm32f7xx_hal.c **** 
 231:HALLIB/Src/stm32f7xx_hal.c **** /**
 232:HALLIB/Src/stm32f7xx_hal.c ****   * @brief This function configures the source of the time base.
 233:HALLIB/Src/stm32f7xx_hal.c ****   *        The time source is configured  to have 1ms time base with a dedicated 
 234:HALLIB/Src/stm32f7xx_hal.c ****   *        Tick interrupt priority.
 235:HALLIB/Src/stm32f7xx_hal.c ****   * @note This function is called  automatically at the beginning of program after
 236:HALLIB/Src/stm32f7xx_hal.c ****   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig().
 237:HALLIB/Src/stm32f7xx_hal.c ****   * @note In the default implementation, SysTick timer is the source of time base. 
 238:HALLIB/Src/stm32f7xx_hal.c ****   *       It is used to generate interrupts at regular time intervals. 
 239:HALLIB/Src/stm32f7xx_hal.c ****   *       Care must be taken if HAL_Delay() is called from a peripheral ISR process, 
 240:HALLIB/Src/stm32f7xx_hal.c ****   *       The SysTick interrupt must have higher priority (numerically lower)
 241:HALLIB/Src/stm32f7xx_hal.c ****   *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
 242:HALLIB/Src/stm32f7xx_hal.c ****   *       The function is declared as __weak  to be overwritten  in case of other
 243:HALLIB/Src/stm32f7xx_hal.c ****   *       implementation  in user file.
 244:HALLIB/Src/stm32f7xx_hal.c ****   * @param TickPriority Tick interrupt priority.
 245:HALLIB/Src/stm32f7xx_hal.c ****   * @retval HAL status
 246:HALLIB/Src/stm32f7xx_hal.c ****   */
 247:HALLIB/Src/stm32f7xx_hal.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 248:HALLIB/Src/stm32f7xx_hal.c **** {
 117              		.loc 1 248 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL1:
 122 0000 10B5     		push	{r4, lr}
 123              	.LCFI1:
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 4, -8
 126              		.cfi_offset 14, -4
 127 0002 0446     		mov	r4, r0
 249:HALLIB/Src/stm32f7xx_hal.c ****   /* Configure the SysTick to have interrupt in 1ms time basis*/
 250:HALLIB/Src/stm32f7xx_hal.c ****   if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 128              		.loc 1 250 0
 129 0004 0E4B     		ldr	r3, .L12
 130 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 131              	.LVL2:
 132 0008 4FF47A73 		mov	r3, #1000
 133 000c B3FBF0F3 		udiv	r3, r3, r0
 134 0010 0C4A     		ldr	r2, .L12+4
 135 0012 1068     		ldr	r0, [r2]
 136 0014 B0FBF3F0 		udiv	r0, r0, r3
 137 0018 FFF7FEFF 		bl	HAL_SYSTICK_Config
 138              	.LVL3:
 139 001c 58B9     		cbnz	r0, .L9
 251:HALLIB/Src/stm32f7xx_hal.c ****   {
 252:HALLIB/Src/stm32f7xx_hal.c ****     return HAL_ERROR;
 253:HALLIB/Src/stm32f7xx_hal.c ****   }
ARM GAS  /tmp/ccpSkdMc.s 			page 8


 254:HALLIB/Src/stm32f7xx_hal.c **** 
 255:HALLIB/Src/stm32f7xx_hal.c ****   /* Configure the SysTick IRQ priority */
 256:HALLIB/Src/stm32f7xx_hal.c ****   if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 140              		.loc 1 256 0
 141 001e 0F2C     		cmp	r4, #15
 142 0020 0BD8     		bhi	.L10
 257:HALLIB/Src/stm32f7xx_hal.c ****   {
 258:HALLIB/Src/stm32f7xx_hal.c ****     HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 143              		.loc 1 258 0
 144 0022 0022     		movs	r2, #0
 145 0024 2146     		mov	r1, r4
 146 0026 4FF0FF30 		mov	r0, #-1
 147 002a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 148              	.LVL4:
 259:HALLIB/Src/stm32f7xx_hal.c ****     uwTickPrio = TickPriority;
 149              		.loc 1 259 0
 150 002e 064B     		ldr	r3, .L12+8
 151 0030 1C60     		str	r4, [r3]
 260:HALLIB/Src/stm32f7xx_hal.c ****   }
 261:HALLIB/Src/stm32f7xx_hal.c ****   else
 262:HALLIB/Src/stm32f7xx_hal.c ****   {
 263:HALLIB/Src/stm32f7xx_hal.c ****     return HAL_ERROR;
 264:HALLIB/Src/stm32f7xx_hal.c ****   }
 265:HALLIB/Src/stm32f7xx_hal.c **** 
 266:HALLIB/Src/stm32f7xx_hal.c ****   /* Return function status */
 267:HALLIB/Src/stm32f7xx_hal.c ****   return HAL_OK;
 152              		.loc 1 267 0
 153 0032 0020     		movs	r0, #0
 154 0034 10BD     		pop	{r4, pc}
 155              	.LVL5:
 156              	.L9:
 252:HALLIB/Src/stm32f7xx_hal.c ****   }
 157              		.loc 1 252 0
 158 0036 0120     		movs	r0, #1
 159 0038 10BD     		pop	{r4, pc}
 160              	.LVL6:
 161              	.L10:
 263:HALLIB/Src/stm32f7xx_hal.c ****   }
 162              		.loc 1 263 0
 163 003a 0120     		movs	r0, #1
 268:HALLIB/Src/stm32f7xx_hal.c **** }
 164              		.loc 1 268 0
 165 003c 10BD     		pop	{r4, pc}
 166              	.LVL7:
 167              	.L13:
 168 003e 00BF     		.align	2
 169              	.L12:
 170 0040 00000000 		.word	.LANCHOR0
 171 0044 00000000 		.word	SystemCoreClock
 172 0048 00000000 		.word	.LANCHOR1
 173              		.cfi_endproc
 174              	.LFE140:
 176              		.section	.text.HAL_Init,"ax",%progbits
 177              		.align	2
 178              		.global	HAL_Init
 179              		.thumb
 180              		.thumb_func
ARM GAS  /tmp/ccpSkdMc.s 			page 9


 182              	HAL_Init:
 183              	.LFB136:
 155:HALLIB/Src/stm32f7xx_hal.c ****   /* Configure Instruction cache through ART accelerator */ 
 184              		.loc 1 155 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188 0000 08B5     		push	{r3, lr}
 189              	.LCFI2:
 190              		.cfi_def_cfa_offset 8
 191              		.cfi_offset 3, -8
 192              		.cfi_offset 14, -4
 158:HALLIB/Src/stm32f7xx_hal.c **** #endif /* ART_ACCLERATOR_ENABLE */
 193              		.loc 1 158 0
 194 0002 094B     		ldr	r3, .L16
 195 0004 1A68     		ldr	r2, [r3]
 196 0006 42F40072 		orr	r2, r2, #512
 197 000a 1A60     		str	r2, [r3]
 163:HALLIB/Src/stm32f7xx_hal.c **** #endif /* PREFETCH_ENABLE */
 198              		.loc 1 163 0
 199 000c 1A68     		ldr	r2, [r3]
 200 000e 42F48072 		orr	r2, r2, #256
 201 0012 1A60     		str	r2, [r3]
 167:HALLIB/Src/stm32f7xx_hal.c **** 
 202              		.loc 1 167 0
 203 0014 0320     		movs	r0, #3
 204 0016 FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 205              	.LVL8:
 170:HALLIB/Src/stm32f7xx_hal.c ****   
 206              		.loc 1 170 0
 207 001a 0F20     		movs	r0, #15
 208 001c FFF7FEFF 		bl	HAL_InitTick
 209              	.LVL9:
 173:HALLIB/Src/stm32f7xx_hal.c ****   
 210              		.loc 1 173 0
 211 0020 FFF7FEFF 		bl	HAL_MspInit
 212              	.LVL10:
 177:HALLIB/Src/stm32f7xx_hal.c **** 
 213              		.loc 1 177 0
 214 0024 0020     		movs	r0, #0
 215 0026 08BD     		pop	{r3, pc}
 216              	.L17:
 217              		.align	2
 218              	.L16:
 219 0028 003C0240 		.word	1073888256
 220              		.cfi_endproc
 221              	.LFE136:
 223              		.section	.text.HAL_IncTick,"ax",%progbits
 224              		.align	2
 225              		.weak	HAL_IncTick
 226              		.thumb
 227              		.thumb_func
 229              	HAL_IncTick:
 230              	.LFB141:
 269:HALLIB/Src/stm32f7xx_hal.c **** 
 270:HALLIB/Src/stm32f7xx_hal.c **** /**
 271:HALLIB/Src/stm32f7xx_hal.c ****   * @}
ARM GAS  /tmp/ccpSkdMc.s 			page 10


 272:HALLIB/Src/stm32f7xx_hal.c ****   */
 273:HALLIB/Src/stm32f7xx_hal.c **** 
 274:HALLIB/Src/stm32f7xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group2 HAL Control functions 
 275:HALLIB/Src/stm32f7xx_hal.c ****  *  @brief    HAL Control functions
 276:HALLIB/Src/stm32f7xx_hal.c ****  *
 277:HALLIB/Src/stm32f7xx_hal.c **** @verbatim
 278:HALLIB/Src/stm32f7xx_hal.c ****  ===============================================================================
 279:HALLIB/Src/stm32f7xx_hal.c ****                       ##### HAL Control functions #####
 280:HALLIB/Src/stm32f7xx_hal.c ****  ===============================================================================
 281:HALLIB/Src/stm32f7xx_hal.c ****     [..]  This section provides functions allowing to:
 282:HALLIB/Src/stm32f7xx_hal.c ****       (+) Provide a tick value in millisecond
 283:HALLIB/Src/stm32f7xx_hal.c ****       (+) Provide a blocking delay in millisecond
 284:HALLIB/Src/stm32f7xx_hal.c ****       (+) Suspend the time base source interrupt
 285:HALLIB/Src/stm32f7xx_hal.c ****       (+) Resume the time base source interrupt
 286:HALLIB/Src/stm32f7xx_hal.c ****       (+) Get the HAL API driver version
 287:HALLIB/Src/stm32f7xx_hal.c ****       (+) Get the device identifier
 288:HALLIB/Src/stm32f7xx_hal.c ****       (+) Get the device revision identifier
 289:HALLIB/Src/stm32f7xx_hal.c ****       (+) Enable/Disable Debug module during SLEEP mode
 290:HALLIB/Src/stm32f7xx_hal.c ****       (+) Enable/Disable Debug module during STOP mode
 291:HALLIB/Src/stm32f7xx_hal.c ****       (+) Enable/Disable Debug module during STANDBY mode
 292:HALLIB/Src/stm32f7xx_hal.c **** 
 293:HALLIB/Src/stm32f7xx_hal.c **** @endverbatim
 294:HALLIB/Src/stm32f7xx_hal.c ****   * @{
 295:HALLIB/Src/stm32f7xx_hal.c ****   */
 296:HALLIB/Src/stm32f7xx_hal.c **** 
 297:HALLIB/Src/stm32f7xx_hal.c **** /**
 298:HALLIB/Src/stm32f7xx_hal.c ****   * @brief This function is called to increment  a global variable "uwTick"
 299:HALLIB/Src/stm32f7xx_hal.c ****   *        used as application time base.
 300:HALLIB/Src/stm32f7xx_hal.c ****   * @note In the default implementation, this variable is incremented each 1ms
 301:HALLIB/Src/stm32f7xx_hal.c ****   *       in SysTick ISR.
 302:HALLIB/Src/stm32f7xx_hal.c ****  * @note This function is declared as __weak to be overwritten in case of other 
 303:HALLIB/Src/stm32f7xx_hal.c ****   *      implementations in user file.
 304:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 305:HALLIB/Src/stm32f7xx_hal.c ****   */
 306:HALLIB/Src/stm32f7xx_hal.c **** __weak void HAL_IncTick(void)
 307:HALLIB/Src/stm32f7xx_hal.c **** {
 231              		.loc 1 307 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
 308:HALLIB/Src/stm32f7xx_hal.c ****   uwTick += uwTickFreq;
 236              		.loc 1 308 0
 237 0000 034A     		ldr	r2, .L19
 238 0002 1368     		ldr	r3, [r2]
 239 0004 0349     		ldr	r1, .L19+4
 240 0006 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 241 0008 0B44     		add	r3, r3, r1
 242 000a 1360     		str	r3, [r2]
 243 000c 7047     		bx	lr
 244              	.L20:
 245 000e 00BF     		.align	2
 246              	.L19:
 247 0010 00000000 		.word	uwTick
 248 0014 00000000 		.word	.LANCHOR0
 249              		.cfi_endproc
 250              	.LFE141:
ARM GAS  /tmp/ccpSkdMc.s 			page 11


 252              		.section	.text.HAL_GetTick,"ax",%progbits
 253              		.align	2
 254              		.weak	HAL_GetTick
 255              		.thumb
 256              		.thumb_func
 258              	HAL_GetTick:
 259              	.LFB142:
 309:HALLIB/Src/stm32f7xx_hal.c **** }
 310:HALLIB/Src/stm32f7xx_hal.c **** 
 311:HALLIB/Src/stm32f7xx_hal.c **** /**
 312:HALLIB/Src/stm32f7xx_hal.c ****   * @brief Provides a tick value in millisecond.
 313:HALLIB/Src/stm32f7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other 
 314:HALLIB/Src/stm32f7xx_hal.c ****   *       implementations in user file.
 315:HALLIB/Src/stm32f7xx_hal.c ****   * @retval tick value
 316:HALLIB/Src/stm32f7xx_hal.c ****   */
 317:HALLIB/Src/stm32f7xx_hal.c **** __weak uint32_t HAL_GetTick(void)
 318:HALLIB/Src/stm32f7xx_hal.c **** {
 260              		.loc 1 318 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 319:HALLIB/Src/stm32f7xx_hal.c ****   return uwTick;
 265              		.loc 1 319 0
 266 0000 014B     		ldr	r3, .L22
 267 0002 1868     		ldr	r0, [r3]
 320:HALLIB/Src/stm32f7xx_hal.c **** }
 268              		.loc 1 320 0
 269 0004 7047     		bx	lr
 270              	.L23:
 271 0006 00BF     		.align	2
 272              	.L22:
 273 0008 00000000 		.word	uwTick
 274              		.cfi_endproc
 275              	.LFE142:
 277              		.section	.text.HAL_GetTickPrio,"ax",%progbits
 278              		.align	2
 279              		.global	HAL_GetTickPrio
 280              		.thumb
 281              		.thumb_func
 283              	HAL_GetTickPrio:
 284              	.LFB143:
 321:HALLIB/Src/stm32f7xx_hal.c **** 
 322:HALLIB/Src/stm32f7xx_hal.c **** /**
 323:HALLIB/Src/stm32f7xx_hal.c ****   * @brief This function returns a tick priority.
 324:HALLIB/Src/stm32f7xx_hal.c ****   * @retval tick priority
 325:HALLIB/Src/stm32f7xx_hal.c ****   */
 326:HALLIB/Src/stm32f7xx_hal.c **** uint32_t HAL_GetTickPrio(void)
 327:HALLIB/Src/stm32f7xx_hal.c **** {
 285              		.loc 1 327 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 328:HALLIB/Src/stm32f7xx_hal.c ****   return uwTickPrio;
 329:HALLIB/Src/stm32f7xx_hal.c **** }
 290              		.loc 1 329 0
ARM GAS  /tmp/ccpSkdMc.s 			page 12


 291 0000 014B     		ldr	r3, .L25
 292 0002 1868     		ldr	r0, [r3]
 293 0004 7047     		bx	lr
 294              	.L26:
 295 0006 00BF     		.align	2
 296              	.L25:
 297 0008 00000000 		.word	.LANCHOR1
 298              		.cfi_endproc
 299              	.LFE143:
 301              		.section	.text.HAL_SetTickFreq,"ax",%progbits
 302              		.align	2
 303              		.global	HAL_SetTickFreq
 304              		.thumb
 305              		.thumb_func
 307              	HAL_SetTickFreq:
 308              	.LFB144:
 330:HALLIB/Src/stm32f7xx_hal.c **** 
 331:HALLIB/Src/stm32f7xx_hal.c **** /**
 332:HALLIB/Src/stm32f7xx_hal.c ****   * @brief Set new tick Freq.
 333:HALLIB/Src/stm32f7xx_hal.c ****   * @retval Status
 334:HALLIB/Src/stm32f7xx_hal.c ****   */
 335:HALLIB/Src/stm32f7xx_hal.c **** HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
 336:HALLIB/Src/stm32f7xx_hal.c **** {
 309              		.loc 1 336 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              	.LVL11:
 314 0000 08B5     		push	{r3, lr}
 315              	.LCFI3:
 316              		.cfi_def_cfa_offset 8
 317              		.cfi_offset 3, -8
 318              		.cfi_offset 14, -4
 319              	.LVL12:
 337:HALLIB/Src/stm32f7xx_hal.c ****   HAL_StatusTypeDef status  = HAL_OK;
 338:HALLIB/Src/stm32f7xx_hal.c ****   assert_param(IS_TICKFREQ(Freq));
 339:HALLIB/Src/stm32f7xx_hal.c **** 
 340:HALLIB/Src/stm32f7xx_hal.c ****   if (uwTickFreq != Freq)
 320              		.loc 1 340 0
 321 0002 064B     		ldr	r3, .L31
 322 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 323 0006 8342     		cmp	r3, r0
 324 0008 06D0     		beq	.L29
 341:HALLIB/Src/stm32f7xx_hal.c ****   {
 342:HALLIB/Src/stm32f7xx_hal.c ****     uwTickFreq = Freq;
 325              		.loc 1 342 0
 326 000a 044B     		ldr	r3, .L31
 327 000c 1870     		strb	r0, [r3]
 343:HALLIB/Src/stm32f7xx_hal.c **** 
 344:HALLIB/Src/stm32f7xx_hal.c ****     /* Apply the new tick Freq  */
 345:HALLIB/Src/stm32f7xx_hal.c ****     status = HAL_InitTick(uwTickPrio);
 328              		.loc 1 345 0
 329 000e 044B     		ldr	r3, .L31+4
 330 0010 1868     		ldr	r0, [r3]
 331              	.LVL13:
 332 0012 FFF7FEFF 		bl	HAL_InitTick
 333              	.LVL14:
ARM GAS  /tmp/ccpSkdMc.s 			page 13


 334 0016 08BD     		pop	{r3, pc}
 335              	.LVL15:
 336              	.L29:
 337:HALLIB/Src/stm32f7xx_hal.c ****   assert_param(IS_TICKFREQ(Freq));
 337              		.loc 1 337 0
 338 0018 0020     		movs	r0, #0
 339              	.LVL16:
 346:HALLIB/Src/stm32f7xx_hal.c ****   }
 347:HALLIB/Src/stm32f7xx_hal.c **** 
 348:HALLIB/Src/stm32f7xx_hal.c ****   return status;
 349:HALLIB/Src/stm32f7xx_hal.c **** }
 340              		.loc 1 349 0
 341 001a 08BD     		pop	{r3, pc}
 342              	.L32:
 343              		.align	2
 344              	.L31:
 345 001c 00000000 		.word	.LANCHOR0
 346 0020 00000000 		.word	.LANCHOR1
 347              		.cfi_endproc
 348              	.LFE144:
 350              		.section	.text.HAL_GetTickFreq,"ax",%progbits
 351              		.align	2
 352              		.global	HAL_GetTickFreq
 353              		.thumb
 354              		.thumb_func
 356              	HAL_GetTickFreq:
 357              	.LFB145:
 350:HALLIB/Src/stm32f7xx_hal.c **** 
 351:HALLIB/Src/stm32f7xx_hal.c **** /**
 352:HALLIB/Src/stm32f7xx_hal.c ****   * @brief Return tick frequency.
 353:HALLIB/Src/stm32f7xx_hal.c ****   * @retval tick period in Hz
 354:HALLIB/Src/stm32f7xx_hal.c ****   */
 355:HALLIB/Src/stm32f7xx_hal.c **** HAL_TickFreqTypeDef HAL_GetTickFreq(void)
 356:HALLIB/Src/stm32f7xx_hal.c **** {
 358              		.loc 1 356 0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362              		@ link register save eliminated.
 357:HALLIB/Src/stm32f7xx_hal.c ****   return uwTickFreq;
 358:HALLIB/Src/stm32f7xx_hal.c **** }
 363              		.loc 1 358 0
 364 0000 014B     		ldr	r3, .L34
 365 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 366 0004 7047     		bx	lr
 367              	.L35:
 368 0006 00BF     		.align	2
 369              	.L34:
 370 0008 00000000 		.word	.LANCHOR0
 371              		.cfi_endproc
 372              	.LFE145:
 374              		.section	.text.HAL_Delay,"ax",%progbits
 375              		.align	2
 376              		.weak	HAL_Delay
 377              		.thumb
 378              		.thumb_func
 380              	HAL_Delay:
ARM GAS  /tmp/ccpSkdMc.s 			page 14


 381              	.LFB146:
 359:HALLIB/Src/stm32f7xx_hal.c **** 
 360:HALLIB/Src/stm32f7xx_hal.c **** /**
 361:HALLIB/Src/stm32f7xx_hal.c ****   * @brief This function provides minimum delay (in milliseconds) based
 362:HALLIB/Src/stm32f7xx_hal.c ****   *        on variable incremented.
 363:HALLIB/Src/stm32f7xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base.
 364:HALLIB/Src/stm32f7xx_hal.c ****   *       It is used to generate interrupts at regular time intervals where uwTick
 365:HALLIB/Src/stm32f7xx_hal.c ****   *       is incremented.
 366:HALLIB/Src/stm32f7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 367:HALLIB/Src/stm32f7xx_hal.c ****   *       implementations in user file.
 368:HALLIB/Src/stm32f7xx_hal.c ****   * @param Delay  specifies the delay time length, in milliseconds.
 369:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 370:HALLIB/Src/stm32f7xx_hal.c ****   */
 371:HALLIB/Src/stm32f7xx_hal.c **** __weak void HAL_Delay(uint32_t Delay)
 372:HALLIB/Src/stm32f7xx_hal.c **** {
 382              		.loc 1 372 0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 0
 385              		@ frame_needed = 0, uses_anonymous_args = 0
 386              	.LVL17:
 387 0000 38B5     		push	{r3, r4, r5, lr}
 388              	.LCFI4:
 389              		.cfi_def_cfa_offset 16
 390              		.cfi_offset 3, -16
 391              		.cfi_offset 4, -12
 392              		.cfi_offset 5, -8
 393              		.cfi_offset 14, -4
 394 0002 0446     		mov	r4, r0
 373:HALLIB/Src/stm32f7xx_hal.c ****   uint32_t tickstart = HAL_GetTick();
 395              		.loc 1 373 0
 396 0004 FFF7FEFF 		bl	HAL_GetTick
 397              	.LVL18:
 398 0008 0546     		mov	r5, r0
 399              	.LVL19:
 374:HALLIB/Src/stm32f7xx_hal.c ****   uint32_t wait = Delay;
 375:HALLIB/Src/stm32f7xx_hal.c **** 
 376:HALLIB/Src/stm32f7xx_hal.c ****   /* Add a freq to guarantee minimum wait */
 377:HALLIB/Src/stm32f7xx_hal.c ****   if (wait < HAL_MAX_DELAY)
 400              		.loc 1 377 0
 401 000a B4F1FF3F 		cmp	r4, #-1
 402 000e 02D0     		beq	.L38
 378:HALLIB/Src/stm32f7xx_hal.c ****   {
 379:HALLIB/Src/stm32f7xx_hal.c ****     wait += (uint32_t)(uwTickFreq);
 403              		.loc 1 379 0
 404 0010 044B     		ldr	r3, .L40
 405 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 406 0014 1C44     		add	r4, r4, r3
 407              	.LVL20:
 408              	.L38:
 380:HALLIB/Src/stm32f7xx_hal.c ****   }
 381:HALLIB/Src/stm32f7xx_hal.c **** 
 382:HALLIB/Src/stm32f7xx_hal.c ****   while ((HAL_GetTick() - tickstart) < wait)
 409              		.loc 1 382 0 discriminator 1
 410 0016 FFF7FEFF 		bl	HAL_GetTick
 411              	.LVL21:
 412 001a 401B     		subs	r0, r0, r5
 413 001c 8442     		cmp	r4, r0
ARM GAS  /tmp/ccpSkdMc.s 			page 15


 414 001e FAD8     		bhi	.L38
 383:HALLIB/Src/stm32f7xx_hal.c ****   {
 384:HALLIB/Src/stm32f7xx_hal.c ****   }
 385:HALLIB/Src/stm32f7xx_hal.c **** }
 415              		.loc 1 385 0
 416 0020 38BD     		pop	{r3, r4, r5, pc}
 417              	.LVL22:
 418              	.L41:
 419 0022 00BF     		.align	2
 420              	.L40:
 421 0024 00000000 		.word	.LANCHOR0
 422              		.cfi_endproc
 423              	.LFE146:
 425              		.section	.text.HAL_SuspendTick,"ax",%progbits
 426              		.align	2
 427              		.weak	HAL_SuspendTick
 428              		.thumb
 429              		.thumb_func
 431              	HAL_SuspendTick:
 432              	.LFB147:
 386:HALLIB/Src/stm32f7xx_hal.c **** 
 387:HALLIB/Src/stm32f7xx_hal.c **** /**
 388:HALLIB/Src/stm32f7xx_hal.c ****   * @brief Suspend Tick increment.
 389:HALLIB/Src/stm32f7xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 390:HALLIB/Src/stm32f7xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
 391:HALLIB/Src/stm32f7xx_hal.c ****   *       is called, the SysTick interrupt will be disabled and so Tick increment 
 392:HALLIB/Src/stm32f7xx_hal.c ****   *       is suspended.
 393:HALLIB/Src/stm32f7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 394:HALLIB/Src/stm32f7xx_hal.c ****   *       implementations in user file.
 395:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 396:HALLIB/Src/stm32f7xx_hal.c ****   */
 397:HALLIB/Src/stm32f7xx_hal.c **** __weak void HAL_SuspendTick(void)
 398:HALLIB/Src/stm32f7xx_hal.c **** {
 433              		.loc 1 398 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437              		@ link register save eliminated.
 399:HALLIB/Src/stm32f7xx_hal.c ****   /* Disable SysTick Interrupt */
 400:HALLIB/Src/stm32f7xx_hal.c ****   SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 438              		.loc 1 400 0
 439 0000 024A     		ldr	r2, .L43
 440 0002 1368     		ldr	r3, [r2]
 441 0004 23F00203 		bic	r3, r3, #2
 442 0008 1360     		str	r3, [r2]
 443 000a 7047     		bx	lr
 444              	.L44:
 445              		.align	2
 446              	.L43:
 447 000c 10E000E0 		.word	-536813552
 448              		.cfi_endproc
 449              	.LFE147:
 451              		.section	.text.HAL_ResumeTick,"ax",%progbits
 452              		.align	2
 453              		.weak	HAL_ResumeTick
 454              		.thumb
 455              		.thumb_func
ARM GAS  /tmp/ccpSkdMc.s 			page 16


 457              	HAL_ResumeTick:
 458              	.LFB148:
 401:HALLIB/Src/stm32f7xx_hal.c **** }
 402:HALLIB/Src/stm32f7xx_hal.c **** 
 403:HALLIB/Src/stm32f7xx_hal.c **** /**
 404:HALLIB/Src/stm32f7xx_hal.c ****   * @brief Resume Tick increment.
 405:HALLIB/Src/stm32f7xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 406:HALLIB/Src/stm32f7xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
 407:HALLIB/Src/stm32f7xx_hal.c ****   *       is called, the SysTick interrupt will be enabled and so Tick increment 
 408:HALLIB/Src/stm32f7xx_hal.c ****   *       is resumed.
 409:HALLIB/Src/stm32f7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 410:HALLIB/Src/stm32f7xx_hal.c ****   *       implementations in user file.
 411:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 412:HALLIB/Src/stm32f7xx_hal.c ****   */
 413:HALLIB/Src/stm32f7xx_hal.c **** __weak void HAL_ResumeTick(void)
 414:HALLIB/Src/stm32f7xx_hal.c **** {
 459              		.loc 1 414 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463              		@ link register save eliminated.
 415:HALLIB/Src/stm32f7xx_hal.c ****   /* Enable SysTick Interrupt */
 416:HALLIB/Src/stm32f7xx_hal.c ****   SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 464              		.loc 1 416 0
 465 0000 024A     		ldr	r2, .L46
 466 0002 1368     		ldr	r3, [r2]
 467 0004 43F00203 		orr	r3, r3, #2
 468 0008 1360     		str	r3, [r2]
 469 000a 7047     		bx	lr
 470              	.L47:
 471              		.align	2
 472              	.L46:
 473 000c 10E000E0 		.word	-536813552
 474              		.cfi_endproc
 475              	.LFE148:
 477              		.section	.text.HAL_GetHalVersion,"ax",%progbits
 478              		.align	2
 479              		.global	HAL_GetHalVersion
 480              		.thumb
 481              		.thumb_func
 483              	HAL_GetHalVersion:
 484              	.LFB149:
 417:HALLIB/Src/stm32f7xx_hal.c **** }
 418:HALLIB/Src/stm32f7xx_hal.c **** 
 419:HALLIB/Src/stm32f7xx_hal.c **** /**
 420:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Returns the HAL revision
 421:HALLIB/Src/stm32f7xx_hal.c ****   * @retval version : 0xXYZR (8bits for each decimal, R for RC)
 422:HALLIB/Src/stm32f7xx_hal.c ****   */
 423:HALLIB/Src/stm32f7xx_hal.c **** uint32_t HAL_GetHalVersion(void)
 424:HALLIB/Src/stm32f7xx_hal.c **** {
 485              		.loc 1 424 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 425:HALLIB/Src/stm32f7xx_hal.c ****  return __STM32F7xx_HAL_VERSION;
 426:HALLIB/Src/stm32f7xx_hal.c **** }
ARM GAS  /tmp/ccpSkdMc.s 			page 17


 490              		.loc 1 426 0
 491 0000 0048     		ldr	r0, .L49
 492 0002 7047     		bx	lr
 493              	.L50:
 494              		.align	2
 495              	.L49:
 496 0004 00040201 		.word	16909312
 497              		.cfi_endproc
 498              	.LFE149:
 500              		.section	.text.HAL_GetREVID,"ax",%progbits
 501              		.align	2
 502              		.global	HAL_GetREVID
 503              		.thumb
 504              		.thumb_func
 506              	HAL_GetREVID:
 507              	.LFB150:
 427:HALLIB/Src/stm32f7xx_hal.c **** 
 428:HALLIB/Src/stm32f7xx_hal.c **** /**
 429:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Returns the device revision identifier.
 430:HALLIB/Src/stm32f7xx_hal.c ****   * @retval Device revision identifier
 431:HALLIB/Src/stm32f7xx_hal.c ****   */
 432:HALLIB/Src/stm32f7xx_hal.c **** uint32_t HAL_GetREVID(void)
 433:HALLIB/Src/stm32f7xx_hal.c **** {
 508              		.loc 1 433 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 0
 511              		@ frame_needed = 0, uses_anonymous_args = 0
 512              		@ link register save eliminated.
 434:HALLIB/Src/stm32f7xx_hal.c ****    return((DBGMCU->IDCODE) >> 16U);
 513              		.loc 1 434 0
 514 0000 014B     		ldr	r3, .L52
 515 0002 1868     		ldr	r0, [r3]
 435:HALLIB/Src/stm32f7xx_hal.c **** }
 516              		.loc 1 435 0
 517 0004 000C     		lsrs	r0, r0, #16
 518 0006 7047     		bx	lr
 519              	.L53:
 520              		.align	2
 521              	.L52:
 522 0008 002004E0 		.word	-536600576
 523              		.cfi_endproc
 524              	.LFE150:
 526              		.section	.text.HAL_GetDEVID,"ax",%progbits
 527              		.align	2
 528              		.global	HAL_GetDEVID
 529              		.thumb
 530              		.thumb_func
 532              	HAL_GetDEVID:
 533              	.LFB151:
 436:HALLIB/Src/stm32f7xx_hal.c **** 
 437:HALLIB/Src/stm32f7xx_hal.c **** /**
 438:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Returns the device identifier.
 439:HALLIB/Src/stm32f7xx_hal.c ****   * @retval Device identifier
 440:HALLIB/Src/stm32f7xx_hal.c ****   */
 441:HALLIB/Src/stm32f7xx_hal.c **** uint32_t HAL_GetDEVID(void)
 442:HALLIB/Src/stm32f7xx_hal.c **** {
 534              		.loc 1 442 0
ARM GAS  /tmp/ccpSkdMc.s 			page 18


 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 538              		@ link register save eliminated.
 443:HALLIB/Src/stm32f7xx_hal.c ****    return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 539              		.loc 1 443 0
 540 0000 024B     		ldr	r3, .L55
 541 0002 1868     		ldr	r0, [r3]
 444:HALLIB/Src/stm32f7xx_hal.c **** }
 542              		.loc 1 444 0
 543 0004 C0F30B00 		ubfx	r0, r0, #0, #12
 544 0008 7047     		bx	lr
 545              	.L56:
 546 000a 00BF     		.align	2
 547              	.L55:
 548 000c 002004E0 		.word	-536600576
 549              		.cfi_endproc
 550              	.LFE151:
 552              		.section	.text.HAL_GetUIDw0,"ax",%progbits
 553              		.align	2
 554              		.global	HAL_GetUIDw0
 555              		.thumb
 556              		.thumb_func
 558              	HAL_GetUIDw0:
 559              	.LFB152:
 445:HALLIB/Src/stm32f7xx_hal.c **** 
 446:HALLIB/Src/stm32f7xx_hal.c **** /**
 447:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
 448:HALLIB/Src/stm32f7xx_hal.c ****   * @retval Device identifier
 449:HALLIB/Src/stm32f7xx_hal.c ****   */
 450:HALLIB/Src/stm32f7xx_hal.c **** uint32_t HAL_GetUIDw0(void)
 451:HALLIB/Src/stm32f7xx_hal.c **** {
 560              		.loc 1 451 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 452:HALLIB/Src/stm32f7xx_hal.c ****    return(READ_REG(*((uint32_t *)UID_BASE)));
 453:HALLIB/Src/stm32f7xx_hal.c **** }
 565              		.loc 1 453 0
 566 0000 014B     		ldr	r3, .L58
 567 0002 1868     		ldr	r0, [r3]
 568 0004 7047     		bx	lr
 569              	.L59:
 570 0006 00BF     		.align	2
 571              	.L58:
 572 0008 20F4F01F 		.word	535884832
 573              		.cfi_endproc
 574              	.LFE152:
 576              		.section	.text.HAL_GetUIDw1,"ax",%progbits
 577              		.align	2
 578              		.global	HAL_GetUIDw1
 579              		.thumb
 580              		.thumb_func
 582              	HAL_GetUIDw1:
 583              	.LFB153:
 454:HALLIB/Src/stm32f7xx_hal.c **** 
ARM GAS  /tmp/ccpSkdMc.s 			page 19


 455:HALLIB/Src/stm32f7xx_hal.c **** /**
 456:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
 457:HALLIB/Src/stm32f7xx_hal.c ****   * @retval Device identifier
 458:HALLIB/Src/stm32f7xx_hal.c ****   */
 459:HALLIB/Src/stm32f7xx_hal.c **** uint32_t HAL_GetUIDw1(void)
 460:HALLIB/Src/stm32f7xx_hal.c **** {
 584              		.loc 1 460 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 461:HALLIB/Src/stm32f7xx_hal.c ****    return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 462:HALLIB/Src/stm32f7xx_hal.c **** }
 589              		.loc 1 462 0
 590 0000 014B     		ldr	r3, .L61
 591 0002 1868     		ldr	r0, [r3]
 592 0004 7047     		bx	lr
 593              	.L62:
 594 0006 00BF     		.align	2
 595              	.L61:
 596 0008 24F4F01F 		.word	535884836
 597              		.cfi_endproc
 598              	.LFE153:
 600              		.section	.text.HAL_GetUIDw2,"ax",%progbits
 601              		.align	2
 602              		.global	HAL_GetUIDw2
 603              		.thumb
 604              		.thumb_func
 606              	HAL_GetUIDw2:
 607              	.LFB154:
 463:HALLIB/Src/stm32f7xx_hal.c **** 
 464:HALLIB/Src/stm32f7xx_hal.c **** /**
 465:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
 466:HALLIB/Src/stm32f7xx_hal.c ****   * @retval Device identifier
 467:HALLIB/Src/stm32f7xx_hal.c ****   */
 468:HALLIB/Src/stm32f7xx_hal.c **** uint32_t HAL_GetUIDw2(void)
 469:HALLIB/Src/stm32f7xx_hal.c **** {
 608              		.loc 1 469 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              		@ link register save eliminated.
 470:HALLIB/Src/stm32f7xx_hal.c ****    return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 471:HALLIB/Src/stm32f7xx_hal.c **** }
 613              		.loc 1 471 0
 614 0000 014B     		ldr	r3, .L64
 615 0002 1868     		ldr	r0, [r3]
 616 0004 7047     		bx	lr
 617              	.L65:
 618 0006 00BF     		.align	2
 619              	.L64:
 620 0008 28F4F01F 		.word	535884840
 621              		.cfi_endproc
 622              	.LFE154:
 624              		.section	.text.HAL_DBGMCU_EnableDBGSleepMode,"ax",%progbits
 625              		.align	2
 626              		.global	HAL_DBGMCU_EnableDBGSleepMode
ARM GAS  /tmp/ccpSkdMc.s 			page 20


 627              		.thumb
 628              		.thumb_func
 630              	HAL_DBGMCU_EnableDBGSleepMode:
 631              	.LFB155:
 472:HALLIB/Src/stm32f7xx_hal.c **** 
 473:HALLIB/Src/stm32f7xx_hal.c **** /**
 474:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Enable the Debug Module during SLEEP mode
 475:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 476:HALLIB/Src/stm32f7xx_hal.c ****   */
 477:HALLIB/Src/stm32f7xx_hal.c **** void HAL_DBGMCU_EnableDBGSleepMode(void)
 478:HALLIB/Src/stm32f7xx_hal.c **** {
 632              		.loc 1 478 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 479:HALLIB/Src/stm32f7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 637              		.loc 1 479 0
 638 0000 024A     		ldr	r2, .L67
 639 0002 5368     		ldr	r3, [r2, #4]
 640 0004 43F00103 		orr	r3, r3, #1
 641 0008 5360     		str	r3, [r2, #4]
 642 000a 7047     		bx	lr
 643              	.L68:
 644              		.align	2
 645              	.L67:
 646 000c 002004E0 		.word	-536600576
 647              		.cfi_endproc
 648              	.LFE155:
 650              		.section	.text.HAL_DBGMCU_DisableDBGSleepMode,"ax",%progbits
 651              		.align	2
 652              		.global	HAL_DBGMCU_DisableDBGSleepMode
 653              		.thumb
 654              		.thumb_func
 656              	HAL_DBGMCU_DisableDBGSleepMode:
 657              	.LFB156:
 480:HALLIB/Src/stm32f7xx_hal.c **** }
 481:HALLIB/Src/stm32f7xx_hal.c **** 
 482:HALLIB/Src/stm32f7xx_hal.c **** /**
 483:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Disable the Debug Module during SLEEP mode
 484:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 485:HALLIB/Src/stm32f7xx_hal.c ****   */
 486:HALLIB/Src/stm32f7xx_hal.c **** void HAL_DBGMCU_DisableDBGSleepMode(void)
 487:HALLIB/Src/stm32f7xx_hal.c **** {
 658              		.loc 1 487 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              		@ link register save eliminated.
 488:HALLIB/Src/stm32f7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 663              		.loc 1 488 0
 664 0000 024A     		ldr	r2, .L70
 665 0002 5368     		ldr	r3, [r2, #4]
 666 0004 23F00103 		bic	r3, r3, #1
 667 0008 5360     		str	r3, [r2, #4]
 668 000a 7047     		bx	lr
 669              	.L71:
ARM GAS  /tmp/ccpSkdMc.s 			page 21


 670              		.align	2
 671              	.L70:
 672 000c 002004E0 		.word	-536600576
 673              		.cfi_endproc
 674              	.LFE156:
 676              		.section	.text.HAL_DBGMCU_EnableDBGStopMode,"ax",%progbits
 677              		.align	2
 678              		.global	HAL_DBGMCU_EnableDBGStopMode
 679              		.thumb
 680              		.thumb_func
 682              	HAL_DBGMCU_EnableDBGStopMode:
 683              	.LFB157:
 489:HALLIB/Src/stm32f7xx_hal.c **** }
 490:HALLIB/Src/stm32f7xx_hal.c **** 
 491:HALLIB/Src/stm32f7xx_hal.c **** /**
 492:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Enable the Debug Module during STOP mode
 493:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 494:HALLIB/Src/stm32f7xx_hal.c ****   */
 495:HALLIB/Src/stm32f7xx_hal.c **** void HAL_DBGMCU_EnableDBGStopMode(void)
 496:HALLIB/Src/stm32f7xx_hal.c **** {
 684              		.loc 1 496 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688              		@ link register save eliminated.
 497:HALLIB/Src/stm32f7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 689              		.loc 1 497 0
 690 0000 024A     		ldr	r2, .L73
 691 0002 5368     		ldr	r3, [r2, #4]
 692 0004 43F00203 		orr	r3, r3, #2
 693 0008 5360     		str	r3, [r2, #4]
 694 000a 7047     		bx	lr
 695              	.L74:
 696              		.align	2
 697              	.L73:
 698 000c 002004E0 		.word	-536600576
 699              		.cfi_endproc
 700              	.LFE157:
 702              		.section	.text.HAL_DBGMCU_DisableDBGStopMode,"ax",%progbits
 703              		.align	2
 704              		.global	HAL_DBGMCU_DisableDBGStopMode
 705              		.thumb
 706              		.thumb_func
 708              	HAL_DBGMCU_DisableDBGStopMode:
 709              	.LFB158:
 498:HALLIB/Src/stm32f7xx_hal.c **** }
 499:HALLIB/Src/stm32f7xx_hal.c **** 
 500:HALLIB/Src/stm32f7xx_hal.c **** /**
 501:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Disable the Debug Module during STOP mode
 502:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 503:HALLIB/Src/stm32f7xx_hal.c ****   */
 504:HALLIB/Src/stm32f7xx_hal.c **** void HAL_DBGMCU_DisableDBGStopMode(void)
 505:HALLIB/Src/stm32f7xx_hal.c **** {
 710              		.loc 1 505 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccpSkdMc.s 			page 22


 714              		@ link register save eliminated.
 506:HALLIB/Src/stm32f7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 715              		.loc 1 506 0
 716 0000 024A     		ldr	r2, .L76
 717 0002 5368     		ldr	r3, [r2, #4]
 718 0004 23F00203 		bic	r3, r3, #2
 719 0008 5360     		str	r3, [r2, #4]
 720 000a 7047     		bx	lr
 721              	.L77:
 722              		.align	2
 723              	.L76:
 724 000c 002004E0 		.word	-536600576
 725              		.cfi_endproc
 726              	.LFE158:
 728              		.section	.text.HAL_DBGMCU_EnableDBGStandbyMode,"ax",%progbits
 729              		.align	2
 730              		.global	HAL_DBGMCU_EnableDBGStandbyMode
 731              		.thumb
 732              		.thumb_func
 734              	HAL_DBGMCU_EnableDBGStandbyMode:
 735              	.LFB159:
 507:HALLIB/Src/stm32f7xx_hal.c **** }
 508:HALLIB/Src/stm32f7xx_hal.c **** 
 509:HALLIB/Src/stm32f7xx_hal.c **** /**
 510:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Enable the Debug Module during STANDBY mode
 511:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 512:HALLIB/Src/stm32f7xx_hal.c ****   */
 513:HALLIB/Src/stm32f7xx_hal.c **** void HAL_DBGMCU_EnableDBGStandbyMode(void)
 514:HALLIB/Src/stm32f7xx_hal.c **** {
 736              		.loc 1 514 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740              		@ link register save eliminated.
 515:HALLIB/Src/stm32f7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 741              		.loc 1 515 0
 742 0000 024A     		ldr	r2, .L79
 743 0002 5368     		ldr	r3, [r2, #4]
 744 0004 43F00403 		orr	r3, r3, #4
 745 0008 5360     		str	r3, [r2, #4]
 746 000a 7047     		bx	lr
 747              	.L80:
 748              		.align	2
 749              	.L79:
 750 000c 002004E0 		.word	-536600576
 751              		.cfi_endproc
 752              	.LFE159:
 754              		.section	.text.HAL_DBGMCU_DisableDBGStandbyMode,"ax",%progbits
 755              		.align	2
 756              		.global	HAL_DBGMCU_DisableDBGStandbyMode
 757              		.thumb
 758              		.thumb_func
 760              	HAL_DBGMCU_DisableDBGStandbyMode:
 761              	.LFB160:
 516:HALLIB/Src/stm32f7xx_hal.c **** }
 517:HALLIB/Src/stm32f7xx_hal.c **** 
 518:HALLIB/Src/stm32f7xx_hal.c **** /**
ARM GAS  /tmp/ccpSkdMc.s 			page 23


 519:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Disable the Debug Module during STANDBY mode
 520:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 521:HALLIB/Src/stm32f7xx_hal.c ****   */
 522:HALLIB/Src/stm32f7xx_hal.c **** void HAL_DBGMCU_DisableDBGStandbyMode(void)
 523:HALLIB/Src/stm32f7xx_hal.c **** {
 762              		.loc 1 523 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              		@ link register save eliminated.
 524:HALLIB/Src/stm32f7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 767              		.loc 1 524 0
 768 0000 024A     		ldr	r2, .L82
 769 0002 5368     		ldr	r3, [r2, #4]
 770 0004 23F00403 		bic	r3, r3, #4
 771 0008 5360     		str	r3, [r2, #4]
 772 000a 7047     		bx	lr
 773              	.L83:
 774              		.align	2
 775              	.L82:
 776 000c 002004E0 		.word	-536600576
 777              		.cfi_endproc
 778              	.LFE160:
 780              		.section	.text.HAL_EnableCompensationCell,"ax",%progbits
 781              		.align	2
 782              		.global	HAL_EnableCompensationCell
 783              		.thumb
 784              		.thumb_func
 786              	HAL_EnableCompensationCell:
 787              	.LFB161:
 525:HALLIB/Src/stm32f7xx_hal.c **** }
 526:HALLIB/Src/stm32f7xx_hal.c **** 
 527:HALLIB/Src/stm32f7xx_hal.c **** /**
 528:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Enables the I/O Compensation Cell.
 529:HALLIB/Src/stm32f7xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 530:HALLIB/Src/stm32f7xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.  
 531:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 532:HALLIB/Src/stm32f7xx_hal.c ****   */
 533:HALLIB/Src/stm32f7xx_hal.c **** void HAL_EnableCompensationCell(void)
 534:HALLIB/Src/stm32f7xx_hal.c **** {
 788              		.loc 1 534 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792              		@ link register save eliminated.
 535:HALLIB/Src/stm32f7xx_hal.c ****   SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
 793              		.loc 1 535 0
 794 0000 024A     		ldr	r2, .L85
 795 0002 136A     		ldr	r3, [r2, #32]
 796 0004 43F00103 		orr	r3, r3, #1
 797 0008 1362     		str	r3, [r2, #32]
 798 000a 7047     		bx	lr
 799              	.L86:
 800              		.align	2
 801              	.L85:
 802 000c 00380140 		.word	1073821696
 803              		.cfi_endproc
ARM GAS  /tmp/ccpSkdMc.s 			page 24


 804              	.LFE161:
 806              		.section	.text.HAL_DisableCompensationCell,"ax",%progbits
 807              		.align	2
 808              		.global	HAL_DisableCompensationCell
 809              		.thumb
 810              		.thumb_func
 812              	HAL_DisableCompensationCell:
 813              	.LFB162:
 536:HALLIB/Src/stm32f7xx_hal.c **** }
 537:HALLIB/Src/stm32f7xx_hal.c **** 
 538:HALLIB/Src/stm32f7xx_hal.c **** /**
 539:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Power-down the I/O Compensation Cell.
 540:HALLIB/Src/stm32f7xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 541:HALLIB/Src/stm32f7xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.  
 542:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 543:HALLIB/Src/stm32f7xx_hal.c ****   */
 544:HALLIB/Src/stm32f7xx_hal.c **** void HAL_DisableCompensationCell(void)
 545:HALLIB/Src/stm32f7xx_hal.c **** {
 814              		.loc 1 545 0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 0
 817              		@ frame_needed = 0, uses_anonymous_args = 0
 818              		@ link register save eliminated.
 546:HALLIB/Src/stm32f7xx_hal.c ****   SYSCFG->CMPCR &= (uint32_t)~((uint32_t)SYSCFG_CMPCR_CMP_PD);
 819              		.loc 1 546 0
 820 0000 024A     		ldr	r2, .L88
 821 0002 136A     		ldr	r3, [r2, #32]
 822 0004 23F00103 		bic	r3, r3, #1
 823 0008 1362     		str	r3, [r2, #32]
 824 000a 7047     		bx	lr
 825              	.L89:
 826              		.align	2
 827              	.L88:
 828 000c 00380140 		.word	1073821696
 829              		.cfi_endproc
 830              	.LFE162:
 832              		.section	.text.HAL_EnableFMCMemorySwapping,"ax",%progbits
 833              		.align	2
 834              		.global	HAL_EnableFMCMemorySwapping
 835              		.thumb
 836              		.thumb_func
 838              	HAL_EnableFMCMemorySwapping:
 839              	.LFB163:
 547:HALLIB/Src/stm32f7xx_hal.c **** }
 548:HALLIB/Src/stm32f7xx_hal.c **** 
 549:HALLIB/Src/stm32f7xx_hal.c **** /**
 550:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Enables the FMC Memory Mapping Swapping.
 551:HALLIB/Src/stm32f7xx_hal.c ****   *   
 552:HALLIB/Src/stm32f7xx_hal.c ****   * @note   SDRAM is accessible at 0x60000000 
 553:HALLIB/Src/stm32f7xx_hal.c ****   *         and NOR/RAM is accessible at 0xC0000000   
 554:HALLIB/Src/stm32f7xx_hal.c ****   *
 555:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 556:HALLIB/Src/stm32f7xx_hal.c ****   */
 557:HALLIB/Src/stm32f7xx_hal.c **** void HAL_EnableFMCMemorySwapping(void)
 558:HALLIB/Src/stm32f7xx_hal.c **** {
 840              		.loc 1 558 0
 841              		.cfi_startproc
ARM GAS  /tmp/ccpSkdMc.s 			page 25


 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              		@ link register save eliminated.
 559:HALLIB/Src/stm32f7xx_hal.c ****   SYSCFG->MEMRMP |= SYSCFG_MEMRMP_SWP_FMC_0;
 845              		.loc 1 559 0
 846 0000 024A     		ldr	r2, .L91
 847 0002 1368     		ldr	r3, [r2]
 848 0004 43F48063 		orr	r3, r3, #1024
 849 0008 1360     		str	r3, [r2]
 850 000a 7047     		bx	lr
 851              	.L92:
 852              		.align	2
 853              	.L91:
 854 000c 00380140 		.word	1073821696
 855              		.cfi_endproc
 856              	.LFE163:
 858              		.section	.text.HAL_DisableFMCMemorySwapping,"ax",%progbits
 859              		.align	2
 860              		.global	HAL_DisableFMCMemorySwapping
 861              		.thumb
 862              		.thumb_func
 864              	HAL_DisableFMCMemorySwapping:
 865              	.LFB164:
 560:HALLIB/Src/stm32f7xx_hal.c **** }
 561:HALLIB/Src/stm32f7xx_hal.c **** 
 562:HALLIB/Src/stm32f7xx_hal.c **** /**
 563:HALLIB/Src/stm32f7xx_hal.c ****   * @brief  Disables the FMC Memory Mapping Swapping
 564:HALLIB/Src/stm32f7xx_hal.c ****   *   
 565:HALLIB/Src/stm32f7xx_hal.c ****   * @note   SDRAM is accessible at 0xC0000000 (default mapping)  
 566:HALLIB/Src/stm32f7xx_hal.c ****   *         and NOR/RAM is accessible at 0x60000000 (default mapping)    
 567:HALLIB/Src/stm32f7xx_hal.c ****   *           
 568:HALLIB/Src/stm32f7xx_hal.c ****   * @retval None
 569:HALLIB/Src/stm32f7xx_hal.c ****   */
 570:HALLIB/Src/stm32f7xx_hal.c **** void HAL_DisableFMCMemorySwapping(void)
 571:HALLIB/Src/stm32f7xx_hal.c **** {
 866              		.loc 1 571 0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870              		@ link register save eliminated.
 572:HALLIB/Src/stm32f7xx_hal.c **** 
 573:HALLIB/Src/stm32f7xx_hal.c ****   SYSCFG->MEMRMP &= (uint32_t)~((uint32_t)SYSCFG_MEMRMP_SWP_FMC);
 871              		.loc 1 573 0
 872 0000 024A     		ldr	r2, .L94
 873 0002 1368     		ldr	r3, [r2]
 874 0004 23F44063 		bic	r3, r3, #3072
 875 0008 1360     		str	r3, [r2]
 876 000a 7047     		bx	lr
 877              	.L95:
 878              		.align	2
 879              	.L94:
 880 000c 00380140 		.word	1073821696
 881              		.cfi_endproc
 882              	.LFE164:
 884              		.section	.text.HAL_EnableMemorySwappingBank,"ax",%progbits
 885              		.align	2
 886              		.global	HAL_EnableMemorySwappingBank
ARM GAS  /tmp/ccpSkdMc.s 			page 26


 887              		.thumb
 888              		.thumb_func
 890              	HAL_EnableMemorySwappingBank:
 891              	.LFB165:
 574:HALLIB/Src/stm32f7xx_hal.c **** }
 575:HALLIB/Src/stm32f7xx_hal.c **** 
 576:HALLIB/Src/stm32f7xx_hal.c **** #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx
 577:HALLIB/Src/stm32f7xx_hal.c **** /**
 578:HALLIB/Src/stm32f7xx_hal.c **** * @brief  Enable the Internal FLASH Bank Swapping.
 579:HALLIB/Src/stm32f7xx_hal.c **** *   
 580:HALLIB/Src/stm32f7xx_hal.c **** * @note   This function can be used only for STM32F77xx/STM32F76xx devices. 
 581:HALLIB/Src/stm32f7xx_hal.c **** *
 582:HALLIB/Src/stm32f7xx_hal.c **** * @note   Flash Bank2 mapped at 0x08000000 (AXI) (aliased at 0x00200000 (TCM)) 
 583:HALLIB/Src/stm32f7xx_hal.c **** *         and Flash Bank1 mapped at 0x08100000 (AXI) (aliased at 0x00300000 (TCM))   
 584:HALLIB/Src/stm32f7xx_hal.c **** *
 585:HALLIB/Src/stm32f7xx_hal.c **** * @retval None
 586:HALLIB/Src/stm32f7xx_hal.c **** */
 587:HALLIB/Src/stm32f7xx_hal.c **** void HAL_EnableMemorySwappingBank(void)
 588:HALLIB/Src/stm32f7xx_hal.c **** {
 892              		.loc 1 588 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 0
 895              		@ frame_needed = 0, uses_anonymous_args = 0
 896              		@ link register save eliminated.
 589:HALLIB/Src/stm32f7xx_hal.c ****   SET_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_SWP_FB);
 897              		.loc 1 589 0
 898 0000 024A     		ldr	r2, .L97
 899 0002 1368     		ldr	r3, [r2]
 900 0004 43F48073 		orr	r3, r3, #256
 901 0008 1360     		str	r3, [r2]
 902 000a 7047     		bx	lr
 903              	.L98:
 904              		.align	2
 905              	.L97:
 906 000c 00380140 		.word	1073821696
 907              		.cfi_endproc
 908              	.LFE165:
 910              		.section	.text.HAL_DisableMemorySwappingBank,"ax",%progbits
 911              		.align	2
 912              		.global	HAL_DisableMemorySwappingBank
 913              		.thumb
 914              		.thumb_func
 916              	HAL_DisableMemorySwappingBank:
 917              	.LFB166:
 590:HALLIB/Src/stm32f7xx_hal.c **** }
 591:HALLIB/Src/stm32f7xx_hal.c **** 
 592:HALLIB/Src/stm32f7xx_hal.c **** /**
 593:HALLIB/Src/stm32f7xx_hal.c **** * @brief  Disable the Internal FLASH Bank Swapping.
 594:HALLIB/Src/stm32f7xx_hal.c **** *   
 595:HALLIB/Src/stm32f7xx_hal.c **** * @note   This function can be used only for STM32F77xx/STM32F76xx devices. 
 596:HALLIB/Src/stm32f7xx_hal.c **** *
 597:HALLIB/Src/stm32f7xx_hal.c **** * @note   The default state : Flash Bank1 mapped at 0x08000000 (AXI) (aliased at 0x00200000 (TCM)) 
 598:HALLIB/Src/stm32f7xx_hal.c **** *         and Flash Bank2 mapped at 0x08100000 (AXI)( aliased at 0x00300000 (TCM)) 
 599:HALLIB/Src/stm32f7xx_hal.c **** *           
 600:HALLIB/Src/stm32f7xx_hal.c **** * @retval None
 601:HALLIB/Src/stm32f7xx_hal.c **** */
 602:HALLIB/Src/stm32f7xx_hal.c **** void HAL_DisableMemorySwappingBank(void)
ARM GAS  /tmp/ccpSkdMc.s 			page 27


 603:HALLIB/Src/stm32f7xx_hal.c **** {
 918              		.loc 1 603 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 0
 921              		@ frame_needed = 0, uses_anonymous_args = 0
 922              		@ link register save eliminated.
 604:HALLIB/Src/stm32f7xx_hal.c ****   CLEAR_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_SWP_FB);
 923              		.loc 1 604 0
 924 0000 024A     		ldr	r2, .L100
 925 0002 1368     		ldr	r3, [r2]
 926 0004 23F48073 		bic	r3, r3, #256
 927 0008 1360     		str	r3, [r2]
 928 000a 7047     		bx	lr
 929              	.L101:
 930              		.align	2
 931              	.L100:
 932 000c 00380140 		.word	1073821696
 933              		.cfi_endproc
 934              	.LFE166:
 936              		.global	uwTickFreq
 937              		.global	uwTickPrio
 938              		.comm	uwTick,4,4
 939              		.section	.data.uwTickPrio,"aw",%progbits
 940              		.align	2
 941              		.set	.LANCHOR1,. + 0
 944              	uwTickPrio:
 945 0000 10000000 		.word	16
 946              		.section	.data.uwTickFreq,"aw",%progbits
 947              		.set	.LANCHOR0,. + 0
 950              	uwTickFreq:
 951 0000 01       		.byte	1
 952              		.text
 953              	.Letext0:
 954              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 955              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 956              		.file 4 "CORE/core_cm7.h"
 957              		.file 5 "Inc/stm32f767xx.h"
 958              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 959              		.file 7 "HALLIB/Inc/stm32f7xx_hal.h"
 960              		.file 8 "Inc/system_stm32f7xx.h"
 961              		.file 9 "HALLIB/Inc/stm32f7xx_hal_cortex.h"
ARM GAS  /tmp/ccpSkdMc.s 			page 28


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal.c
     /tmp/ccpSkdMc.s:21     .text.HAL_MspInit:00000000 $t
     /tmp/ccpSkdMc.s:26     .text.HAL_MspInit:00000000 HAL_MspInit
     /tmp/ccpSkdMc.s:39     .text.HAL_MspDeInit:00000000 $t
     /tmp/ccpSkdMc.s:44     .text.HAL_MspDeInit:00000000 HAL_MspDeInit
     /tmp/ccpSkdMc.s:56     .text.HAL_DeInit:00000000 $t
     /tmp/ccpSkdMc.s:61     .text.HAL_DeInit:00000000 HAL_DeInit
     /tmp/ccpSkdMc.s:105    .text.HAL_DeInit:00000028 $d
     /tmp/ccpSkdMc.s:110    .text.HAL_InitTick:00000000 $t
     /tmp/ccpSkdMc.s:115    .text.HAL_InitTick:00000000 HAL_InitTick
     /tmp/ccpSkdMc.s:170    .text.HAL_InitTick:00000040 $d
     /tmp/ccpSkdMc.s:177    .text.HAL_Init:00000000 $t
     /tmp/ccpSkdMc.s:182    .text.HAL_Init:00000000 HAL_Init
     /tmp/ccpSkdMc.s:219    .text.HAL_Init:00000028 $d
     /tmp/ccpSkdMc.s:224    .text.HAL_IncTick:00000000 $t
     /tmp/ccpSkdMc.s:229    .text.HAL_IncTick:00000000 HAL_IncTick
     /tmp/ccpSkdMc.s:247    .text.HAL_IncTick:00000010 $d
                            *COM*:00000004 uwTick
     /tmp/ccpSkdMc.s:253    .text.HAL_GetTick:00000000 $t
     /tmp/ccpSkdMc.s:258    .text.HAL_GetTick:00000000 HAL_GetTick
     /tmp/ccpSkdMc.s:273    .text.HAL_GetTick:00000008 $d
     /tmp/ccpSkdMc.s:278    .text.HAL_GetTickPrio:00000000 $t
     /tmp/ccpSkdMc.s:283    .text.HAL_GetTickPrio:00000000 HAL_GetTickPrio
     /tmp/ccpSkdMc.s:297    .text.HAL_GetTickPrio:00000008 $d
     /tmp/ccpSkdMc.s:302    .text.HAL_SetTickFreq:00000000 $t
     /tmp/ccpSkdMc.s:307    .text.HAL_SetTickFreq:00000000 HAL_SetTickFreq
     /tmp/ccpSkdMc.s:345    .text.HAL_SetTickFreq:0000001c $d
     /tmp/ccpSkdMc.s:351    .text.HAL_GetTickFreq:00000000 $t
     /tmp/ccpSkdMc.s:356    .text.HAL_GetTickFreq:00000000 HAL_GetTickFreq
     /tmp/ccpSkdMc.s:370    .text.HAL_GetTickFreq:00000008 $d
     /tmp/ccpSkdMc.s:375    .text.HAL_Delay:00000000 $t
     /tmp/ccpSkdMc.s:380    .text.HAL_Delay:00000000 HAL_Delay
     /tmp/ccpSkdMc.s:421    .text.HAL_Delay:00000024 $d
     /tmp/ccpSkdMc.s:426    .text.HAL_SuspendTick:00000000 $t
     /tmp/ccpSkdMc.s:431    .text.HAL_SuspendTick:00000000 HAL_SuspendTick
     /tmp/ccpSkdMc.s:447    .text.HAL_SuspendTick:0000000c $d
     /tmp/ccpSkdMc.s:452    .text.HAL_ResumeTick:00000000 $t
     /tmp/ccpSkdMc.s:457    .text.HAL_ResumeTick:00000000 HAL_ResumeTick
     /tmp/ccpSkdMc.s:473    .text.HAL_ResumeTick:0000000c $d
     /tmp/ccpSkdMc.s:478    .text.HAL_GetHalVersion:00000000 $t
     /tmp/ccpSkdMc.s:483    .text.HAL_GetHalVersion:00000000 HAL_GetHalVersion
     /tmp/ccpSkdMc.s:496    .text.HAL_GetHalVersion:00000004 $d
     /tmp/ccpSkdMc.s:501    .text.HAL_GetREVID:00000000 $t
     /tmp/ccpSkdMc.s:506    .text.HAL_GetREVID:00000000 HAL_GetREVID
     /tmp/ccpSkdMc.s:522    .text.HAL_GetREVID:00000008 $d
     /tmp/ccpSkdMc.s:527    .text.HAL_GetDEVID:00000000 $t
     /tmp/ccpSkdMc.s:532    .text.HAL_GetDEVID:00000000 HAL_GetDEVID
     /tmp/ccpSkdMc.s:548    .text.HAL_GetDEVID:0000000c $d
     /tmp/ccpSkdMc.s:553    .text.HAL_GetUIDw0:00000000 $t
     /tmp/ccpSkdMc.s:558    .text.HAL_GetUIDw0:00000000 HAL_GetUIDw0
     /tmp/ccpSkdMc.s:572    .text.HAL_GetUIDw0:00000008 $d
     /tmp/ccpSkdMc.s:577    .text.HAL_GetUIDw1:00000000 $t
     /tmp/ccpSkdMc.s:582    .text.HAL_GetUIDw1:00000000 HAL_GetUIDw1
     /tmp/ccpSkdMc.s:596    .text.HAL_GetUIDw1:00000008 $d
     /tmp/ccpSkdMc.s:601    .text.HAL_GetUIDw2:00000000 $t
     /tmp/ccpSkdMc.s:606    .text.HAL_GetUIDw2:00000000 HAL_GetUIDw2
ARM GAS  /tmp/ccpSkdMc.s 			page 29


     /tmp/ccpSkdMc.s:620    .text.HAL_GetUIDw2:00000008 $d
     /tmp/ccpSkdMc.s:625    .text.HAL_DBGMCU_EnableDBGSleepMode:00000000 $t
     /tmp/ccpSkdMc.s:630    .text.HAL_DBGMCU_EnableDBGSleepMode:00000000 HAL_DBGMCU_EnableDBGSleepMode
     /tmp/ccpSkdMc.s:646    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000c $d
     /tmp/ccpSkdMc.s:651    .text.HAL_DBGMCU_DisableDBGSleepMode:00000000 $t
     /tmp/ccpSkdMc.s:656    .text.HAL_DBGMCU_DisableDBGSleepMode:00000000 HAL_DBGMCU_DisableDBGSleepMode
     /tmp/ccpSkdMc.s:672    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000c $d
     /tmp/ccpSkdMc.s:677    .text.HAL_DBGMCU_EnableDBGStopMode:00000000 $t
     /tmp/ccpSkdMc.s:682    .text.HAL_DBGMCU_EnableDBGStopMode:00000000 HAL_DBGMCU_EnableDBGStopMode
     /tmp/ccpSkdMc.s:698    .text.HAL_DBGMCU_EnableDBGStopMode:0000000c $d
     /tmp/ccpSkdMc.s:703    .text.HAL_DBGMCU_DisableDBGStopMode:00000000 $t
     /tmp/ccpSkdMc.s:708    .text.HAL_DBGMCU_DisableDBGStopMode:00000000 HAL_DBGMCU_DisableDBGStopMode
     /tmp/ccpSkdMc.s:724    .text.HAL_DBGMCU_DisableDBGStopMode:0000000c $d
     /tmp/ccpSkdMc.s:729    .text.HAL_DBGMCU_EnableDBGStandbyMode:00000000 $t
     /tmp/ccpSkdMc.s:734    .text.HAL_DBGMCU_EnableDBGStandbyMode:00000000 HAL_DBGMCU_EnableDBGStandbyMode
     /tmp/ccpSkdMc.s:750    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000c $d
     /tmp/ccpSkdMc.s:755    .text.HAL_DBGMCU_DisableDBGStandbyMode:00000000 $t
     /tmp/ccpSkdMc.s:760    .text.HAL_DBGMCU_DisableDBGStandbyMode:00000000 HAL_DBGMCU_DisableDBGStandbyMode
     /tmp/ccpSkdMc.s:776    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000c $d
     /tmp/ccpSkdMc.s:781    .text.HAL_EnableCompensationCell:00000000 $t
     /tmp/ccpSkdMc.s:786    .text.HAL_EnableCompensationCell:00000000 HAL_EnableCompensationCell
     /tmp/ccpSkdMc.s:802    .text.HAL_EnableCompensationCell:0000000c $d
     /tmp/ccpSkdMc.s:807    .text.HAL_DisableCompensationCell:00000000 $t
     /tmp/ccpSkdMc.s:812    .text.HAL_DisableCompensationCell:00000000 HAL_DisableCompensationCell
     /tmp/ccpSkdMc.s:828    .text.HAL_DisableCompensationCell:0000000c $d
     /tmp/ccpSkdMc.s:833    .text.HAL_EnableFMCMemorySwapping:00000000 $t
     /tmp/ccpSkdMc.s:838    .text.HAL_EnableFMCMemorySwapping:00000000 HAL_EnableFMCMemorySwapping
     /tmp/ccpSkdMc.s:854    .text.HAL_EnableFMCMemorySwapping:0000000c $d
     /tmp/ccpSkdMc.s:859    .text.HAL_DisableFMCMemorySwapping:00000000 $t
     /tmp/ccpSkdMc.s:864    .text.HAL_DisableFMCMemorySwapping:00000000 HAL_DisableFMCMemorySwapping
     /tmp/ccpSkdMc.s:880    .text.HAL_DisableFMCMemorySwapping:0000000c $d
     /tmp/ccpSkdMc.s:885    .text.HAL_EnableMemorySwappingBank:00000000 $t
     /tmp/ccpSkdMc.s:890    .text.HAL_EnableMemorySwappingBank:00000000 HAL_EnableMemorySwappingBank
     /tmp/ccpSkdMc.s:906    .text.HAL_EnableMemorySwappingBank:0000000c $d
     /tmp/ccpSkdMc.s:911    .text.HAL_DisableMemorySwappingBank:00000000 $t
     /tmp/ccpSkdMc.s:916    .text.HAL_DisableMemorySwappingBank:00000000 HAL_DisableMemorySwappingBank
     /tmp/ccpSkdMc.s:932    .text.HAL_DisableMemorySwappingBank:0000000c $d
     /tmp/ccpSkdMc.s:950    .data.uwTickFreq:00000000 uwTickFreq
     /tmp/ccpSkdMc.s:944    .data.uwTickPrio:00000000 uwTickPrio
     /tmp/ccpSkdMc.s:940    .data.uwTickPrio:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_SYSTICK_Config
HAL_NVIC_SetPriority
SystemCoreClock
HAL_NVIC_SetPriorityGrouping
