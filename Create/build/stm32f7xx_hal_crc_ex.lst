ARM GAS  /tmp/ccpwtKl1.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_crc_ex.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_CRCEx_Polynomial_Set,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_CRCEx_Polynomial_Set
  23              		.thumb
  24              		.thumb_func
  26              	HAL_CRCEx_Polynomial_Set:
  27              	.LFB136:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal_crc_ex.c"
   1:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @file    stm32f7xx_hal_crc_ex.c
   4:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @brief   Extended CRC HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *    
   7:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          This file provides firmware functions to manage the following 
   8:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          functionalities of the CRC peripheral:
   9:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *           + Initialization/de-initialization functions
  10:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *         
  11:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   @verbatim
  12:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   ==============================================================================
  13:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****                     ##### CRC specific features #####
  14:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   [..] 
  16:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   (#) Polynomial configuration.
  17:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   (#) Input data reverse mode.
  18:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   (#) Output data reverse mode.
  19:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
  20:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   @endverbatim
  21:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   ******************************************************************************
  22:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @attention
  23:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *
  24:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  25:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *
  26:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  27:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * are permitted provided that the following conditions are met:
  28:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  29:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *      this list of conditions and the following disclaimer.
  30:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
ARM GAS  /tmp/ccpwtKl1.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  32:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *      and/or other materials provided with the distribution.
  33:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  34:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *      may be used to endorse or promote products derived from this software
  35:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *      without specific prior written permission.
  36:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *
  37:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  38:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  39:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  40:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  41:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  42:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  43:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  44:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  45:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  46:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  47:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *
  48:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   ******************************************************************************  
  49:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   */
  50:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
  51:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /* Includes ------------------------------------------------------------------*/
  52:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** #include "stm32f7xx_hal.h"
  53:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
  54:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /** @addtogroup STM32F7xx_HAL_Driver
  55:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @{
  56:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   */
  57:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
  58:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /** @addtogroup CRCEx
  59:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @brief CRC Extended HAL module driver
  60:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @{
  61:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   */
  62:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
  63:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** #ifdef HAL_CRC_MODULE_ENABLED
  64:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
  65:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  66:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /* Private define ------------------------------------------------------------*/
  67:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /* Private macro -------------------------------------------------------------*/
  68:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /* Private variables ---------------------------------------------------------*/
  69:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /* Private function prototypes -----------------------------------------------*/
  70:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /* Private functions ---------------------------------------------------------*/
  71:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
  72:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /** @addtogroup CRCEx_Exported_Functions
  73:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @{
  74:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   */
  75:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
  76:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /** @addtogroup CRCEx_Exported_Functions_Group1
  77:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****  *  @brief    Extended CRC features functions
  78:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****  *
  79:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** @verbatim   
  80:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****  ===============================================================================
  81:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****             ##### CRC Extended features functions #####
  82:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****  ===============================================================================  
  83:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****     [..]
  84:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** This subsection provides function allowing to:
  85:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       (+) Set CRC polynomial if different from default one.
  86:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****  
  87:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** @endverbatim
ARM GAS  /tmp/ccpwtKl1.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @{
  89:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   */
  90:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
  91:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
  92:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /**
  93:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @brief  Initializes the CRC polynomial if different from default one.
  94:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @param  hcrc CRC handle
  95:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @param  Pol CRC generating polynomial (7, 8, 16 or 32-bit long)
  96:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *         This parameter is written in normal representation, e.g.
  97:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *         for a polynomial of degree 7, X^7 + X^6 + X^5 + X^2 + 1 is written 0x65 
  98:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *         for a polynomial of degree 16, X^16 + X^12 + X^5 + 1 is written 0x1021     
  99:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @param  PolyLength CRC polynomial length 
 100:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *         This parameter can be one of the following values:
 101:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          @arg CRC_POLYLENGTH_7B: 7-bit long CRC (generating polynomial of degree 7)
 102:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          @arg CRC_POLYLENGTH_8B: 8-bit long CRC (generating polynomial of degree 8)
 103:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
 104:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)         
 105:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @retval HAL status
 106:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   */                                   
 107:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLeng
 108:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** {
  29              		.loc 1 108 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35 0000 10B4     		push	{r4}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 4
  38              		.cfi_offset 4, -4
  39              	.LVL1:
 109:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
  40              		.loc 1 109 0
  41 0002 1F23     		movs	r3, #31
 110:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
 111:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* Check the parameters */
 112:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   assert_param(IS_CRC_POL_LENGTH(PolyLength));
 113:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   
 114:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* check polynomial definition vs polynomial size:
 115:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****    * polynomial length must be aligned with polynomial
 116:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****    * definition. HAL_ERROR is reported if Pol degree is 
 117:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****    * larger than that indicated by PolyLength.
 118:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****    * Look for MSB position: msb will contain the degree of
 119:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****    *  the second to the largest polynomial member. E.g., for
 120:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****    *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
 121:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
  42              		.loc 1 121 0
  43 0004 00E0     		b	.L3
  44              	.LVL2:
  45              	.L9:
  46 0006 2346     		mov	r3, r4
  47              	.LVL3:
  48              	.L3:
  49              		.loc 1 121 0 is_stmt 0 discriminator 2
  50 0008 21FA03F4 		lsr	r4, r1, r3
  51 000c 14F0010F 		tst	r4, #1
ARM GAS  /tmp/ccpwtKl1.s 			page 4


  52 0010 03D1     		bne	.L2
  53              		.loc 1 121 0 discriminator 1
  54 0012 5C1E     		subs	r4, r3, #1
  55              	.LVL4:
  56 0014 002B     		cmp	r3, #0
  57 0016 F6D1     		bne	.L9
  58              		.loc 1 121 0
  59 0018 2346     		mov	r3, r4
  60              	.LVL5:
  61              	.L2:
 122:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   {
 123:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   }
 124:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
 125:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   switch (PolyLength)
  62              		.loc 1 125 0 is_stmt 1
  63 001a 102A     		cmp	r2, #16
  64 001c 07D0     		beq	.L5
  65 001e 182A     		cmp	r2, #24
  66 0020 02D0     		beq	.L6
  67 0022 082A     		cmp	r2, #8
  68 0024 08D1     		bne	.L4
  69 0026 05E0     		b	.L7
  70              	.L6:
 126:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   {
 127:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****     case CRC_POLYLENGTH_7B:
 128:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       if (msb >= HAL_CRC_LENGTH_7B)
  71              		.loc 1 128 0
  72 0028 062B     		cmp	r3, #6
  73 002a 05D9     		bls	.L4
  74 002c 0EE0     		b	.L10
  75              	.L5:
 129:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       { 
 130:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****         return  HAL_ERROR;
 131:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       }
 132:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       break;
 133:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****     case CRC_POLYLENGTH_8B:
 134:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       if (msb >= HAL_CRC_LENGTH_8B)
  76              		.loc 1 134 0
  77 002e 072B     		cmp	r3, #7
  78 0030 02D9     		bls	.L4
  79 0032 0DE0     		b	.L11
  80              	.L7:
 135:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       {
 136:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****         return  HAL_ERROR;
 137:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       }
 138:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       break;
 139:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****     case CRC_POLYLENGTH_16B:
 140:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       if (msb >= HAL_CRC_LENGTH_16B)
  81              		.loc 1 140 0
  82 0034 0F2B     		cmp	r3, #15
  83 0036 0DD8     		bhi	.L12
  84              	.L4:
 141:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       {
 142:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****         return  HAL_ERROR;
 143:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       }
 144:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       break;
 145:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****     case CRC_POLYLENGTH_32B:
ARM GAS  /tmp/ccpwtKl1.s 			page 5


 146:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       /* no polynomial definition vs. polynomial length issue possible */
 147:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       break;
 148:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   default:
 149:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       break;
 150:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   }
 151:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
 152:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* set generating polynomial */
 153:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   WRITE_REG(hcrc->Instance->POL, Pol);
  85              		.loc 1 153 0
  86 0038 0368     		ldr	r3, [r0]
  87              	.LVL6:
  88 003a 5961     		str	r1, [r3, #20]
 154:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   
 155:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* set generating polynomial size */
 156:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
  89              		.loc 1 156 0
  90 003c 0168     		ldr	r1, [r0]
  91              	.LVL7:
  92 003e 8B68     		ldr	r3, [r1, #8]
  93              	.LVL8:
  94 0040 23F01803 		bic	r3, r3, #24
  95 0044 1A43     		orrs	r2, r2, r3
  96              	.LVL9:
  97 0046 8A60     		str	r2, [r1, #8]
 157:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   
 158:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* Return function status */
 159:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   return HAL_OK;
  98              		.loc 1 159 0
  99 0048 0020     		movs	r0, #0
 100              	.LVL10:
 101 004a 04E0     		b	.L8
 102              	.LVL11:
 103              	.L10:
 130:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       }
 104              		.loc 1 130 0
 105 004c 0120     		movs	r0, #1
 106              	.LVL12:
 107 004e 02E0     		b	.L8
 108              	.LVL13:
 109              	.L11:
 136:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       }
 110              		.loc 1 136 0
 111 0050 0120     		movs	r0, #1
 112              	.LVL14:
 113 0052 00E0     		b	.L8
 114              	.LVL15:
 115              	.L12:
 142:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       }
 116              		.loc 1 142 0
 117 0054 0120     		movs	r0, #1
 118              	.LVL16:
 119              	.L8:
 160:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** }
 120              		.loc 1 160 0
 121 0056 5DF8044B 		ldr	r4, [sp], #4
 122              	.LCFI1:
 123              		.cfi_restore 4
ARM GAS  /tmp/ccpwtKl1.s 			page 6


 124              		.cfi_def_cfa_offset 0
 125 005a 7047     		bx	lr
 126              		.cfi_endproc
 127              	.LFE136:
 129              		.section	.text.HAL_CRCEx_Input_Data_Reverse,"ax",%progbits
 130              		.align	2
 131              		.global	HAL_CRCEx_Input_Data_Reverse
 132              		.thumb
 133              		.thumb_func
 135              	HAL_CRCEx_Input_Data_Reverse:
 136              	.LFB137:
 161:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
 162:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /**
 163:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @brief  Set the Reverse Input data mode.
 164:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @param  hcrc CRC handle
 165:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @param  InputReverseMode Input Data inversion mode
 166:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *         This parameter can be one of the following values:
 167:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          @arg CRC_INPUTDATA_INVERSION_NONE: no change in bit order (default value)
 168:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          @arg CRC_INPUTDATA_INVERSION_BYTE: Byte-wise bit reversal
 169:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          @arg CRC_INPUTDATA_INVERSION_HALFWORD: HalfWord-wise bit reversal
 170:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          @arg CRC_INPUTDATA_INVERSION_WORD: Word-wise bit reversal              
 171:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @retval HAL status
 172:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   */                                   
 173:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode)
 174:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** {  
 137              		.loc 1 174 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142              	.LVL17:
 175:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* Check the parameters */
 176:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(InputReverseMode));
 177:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   
 178:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* Change CRC peripheral state */
 179:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   hcrc->State = HAL_CRC_STATE_BUSY;
 143              		.loc 1 179 0
 144 0000 0223     		movs	r3, #2
 145 0002 4377     		strb	r3, [r0, #29]
 180:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
 181:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* set input data inversion mode */
 182:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, InputReverseMode);    
 146              		.loc 1 182 0
 147 0004 0268     		ldr	r2, [r0]
 148 0006 9368     		ldr	r3, [r2, #8]
 149 0008 23F06003 		bic	r3, r3, #96
 150 000c 1943     		orrs	r1, r1, r3
 151              	.LVL18:
 152 000e 9160     		str	r1, [r2, #8]
 183:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* Change CRC peripheral state */
 184:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   hcrc->State = HAL_CRC_STATE_READY;
 153              		.loc 1 184 0
 154 0010 0123     		movs	r3, #1
 155 0012 4377     		strb	r3, [r0, #29]
 185:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   
 186:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* Return function status */
 187:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   return HAL_OK;
ARM GAS  /tmp/ccpwtKl1.s 			page 7


 188:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** }
 156              		.loc 1 188 0
 157 0014 0020     		movs	r0, #0
 158              	.LVL19:
 159 0016 7047     		bx	lr
 160              		.cfi_endproc
 161              	.LFE137:
 163              		.section	.text.HAL_CRCEx_Output_Data_Reverse,"ax",%progbits
 164              		.align	2
 165              		.global	HAL_CRCEx_Output_Data_Reverse
 166              		.thumb
 167              		.thumb_func
 169              	HAL_CRCEx_Output_Data_Reverse:
 170              	.LFB138:
 189:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
 190:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** /**
 191:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @brief  Set the Reverse Output data mode.
 192:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @param  hcrc CRC handle
 193:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @param  OutputReverseMode Output Data inversion mode
 194:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *         This parameter can be one of the following values:
 195:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          @arg CRC_OUTPUTDATA_INVERSION_DISABLE: no CRC inversion (default value)
 196:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   *          @arg CRC_OUTPUTDATA_INVERSION_ENABLE: bit-level inversion (e.g for a 8-bit CRC: 0xB5 b
 197:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   * @retval HAL status
 198:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   */                                   
 199:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode
 200:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** {
 171              		.loc 1 200 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 176              	.LVL20:
 201:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* Check the parameters */
 202:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(OutputReverseMode));
 203:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   
 204:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* Change CRC peripheral state */
 205:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   hcrc->State = HAL_CRC_STATE_BUSY;
 177              		.loc 1 205 0
 178 0000 0223     		movs	r3, #2
 179 0002 4377     		strb	r3, [r0, #29]
 206:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** 
 207:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* set output data inversion mode */
 208:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, OutputReverseMode); 
 180              		.loc 1 208 0
 181 0004 0268     		ldr	r2, [r0]
 182 0006 9368     		ldr	r3, [r2, #8]
 183 0008 23F08003 		bic	r3, r3, #128
 184 000c 1943     		orrs	r1, r1, r3
 185              	.LVL21:
 186 000e 9160     		str	r1, [r2, #8]
 209:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****       
 210:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* Change CRC peripheral state */
 211:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   hcrc->State = HAL_CRC_STATE_READY;
 187              		.loc 1 211 0
 188 0010 0123     		movs	r3, #1
 189 0012 4377     		strb	r3, [r0, #29]
 212:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   
ARM GAS  /tmp/ccpwtKl1.s 			page 8


 213:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   /* Return function status */
 214:HALLIB/Src/stm32f7xx_hal_crc_ex.c ****   return HAL_OK;
 215:HALLIB/Src/stm32f7xx_hal_crc_ex.c **** }
 190              		.loc 1 215 0
 191 0014 0020     		movs	r0, #0
 192              	.LVL22:
 193 0016 7047     		bx	lr
 194              		.cfi_endproc
 195              	.LFE138:
 197              		.text
 198              	.Letext0:
 199              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 200              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 201              		.file 4 "Inc/stm32f767xx.h"
 202              		.file 5 "HALLIB/Inc/stm32f7xx_hal_def.h"
 203              		.file 6 "HALLIB/Inc/stm32f7xx_hal_crc.h"
 204              		.file 7 "CORE/core_cm7.h"
ARM GAS  /tmp/ccpwtKl1.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_crc_ex.c
     /tmp/ccpwtKl1.s:21     .text.HAL_CRCEx_Polynomial_Set:00000000 $t
     /tmp/ccpwtKl1.s:26     .text.HAL_CRCEx_Polynomial_Set:00000000 HAL_CRCEx_Polynomial_Set
     /tmp/ccpwtKl1.s:130    .text.HAL_CRCEx_Input_Data_Reverse:00000000 $t
     /tmp/ccpwtKl1.s:135    .text.HAL_CRCEx_Input_Data_Reverse:00000000 HAL_CRCEx_Input_Data_Reverse
     /tmp/ccpwtKl1.s:164    .text.HAL_CRCEx_Output_Data_Reverse:00000000 $t
     /tmp/ccpwtKl1.s:169    .text.HAL_CRCEx_Output_Data_Reverse:00000000 HAL_CRCEx_Output_Data_Reverse
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
