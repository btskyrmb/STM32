ARM GAS  /tmp/ccSMeinc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.Error_Handler,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	Error_Handler:
  26              	.LFB138:
  27              		.file 1 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    Templates/Src/main.c 
   4:src/main.c    ****   * @author  MCD Application Team
   5:src/main.c    ****   * @brief   Main program body
   6:src/main.c    ****   ******************************************************************************
   7:src/main.c    ****   * @attention
   8:src/main.c    ****   *
   9:src/main.c    ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  10:src/main.c    ****   *
  11:src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  12:src/main.c    ****   * are permitted provided that the following conditions are met:
  13:src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  14:src/main.c    ****   *      this list of conditions and the following disclaimer.
  15:src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  16:src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  17:src/main.c    ****   *      and/or other materials provided with the distribution.
  18:src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:src/main.c    ****   *      may be used to endorse or promote products derived from this software
  20:src/main.c    ****   *      without specific prior written permission.
  21:src/main.c    ****   *
  22:src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
ARM GAS  /tmp/ccSMeinc.s 			page 2


  32:src/main.c    ****   *
  33:src/main.c    ****   ******************************************************************************
  34:src/main.c    ****   */
  35:src/main.c    **** 
  36:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  37:src/main.c    **** #include "main.h"
  38:src/main.c    **** #include "led.h"
  39:src/main.c    **** 
  40:src/main.c    **** /** @addtogroup STM32F7xx_HAL_Examples
  41:src/main.c    ****   * @{
  42:src/main.c    ****   */
  43:src/main.c    **** 
  44:src/main.c    **** /** @addtogroup Templates
  45:src/main.c    ****   * @{
  46:src/main.c    ****   */
  47:src/main.c    **** 
  48:src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  49:src/main.c    **** /* Private define ------------------------------------------------------------*/
  50:src/main.c    **** /* Private macro -------------------------------------------------------------*/
  51:src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  53:src/main.c    **** static void SystemClock_Config(void);
  54:src/main.c    **** static void Error_Handler(void);
  55:src/main.c    **** //static void MPU_Config(void);
  56:src/main.c    **** static void CPU_CACHE_Enable(void);
  57:src/main.c    **** 
  58:src/main.c    **** /* Private functions ---------------------------------------------------------*/
  59:src/main.c    **** 
  60:src/main.c    **** /**
  61:src/main.c    ****   * @brief  Main program
  62:src/main.c    ****   * @param  None
  63:src/main.c    ****   * @retval None
  64:src/main.c    ****   */
  65:src/main.c    **** int main(void)
  66:src/main.c    **** {
  67:src/main.c    ****   /* This project template calls firstly two functions in order to configure MPU feature 
  68:src/main.c    ****      and to enable the CPU Cache, respectively MPU_Config() and CPU_CACHE_Enable().
  69:src/main.c    ****      These functions are provided as template implementation that User may integrate 
  70:src/main.c    ****      in his application, to enhance the performance in case of use of AXI interface 
  71:src/main.c    ****      with several masters. */ 
  72:src/main.c    ****   
  73:src/main.c    ****   /* Configure the MPU attributes as Write Through */
  74:src/main.c    **** //  MPU_Config();
  75:src/main.c    **** 
  76:src/main.c    ****   /* Enable the CPU Cache */
  77:src/main.c    ****   CPU_CACHE_Enable();
  78:src/main.c    **** 
  79:src/main.c    ****   /* STM32F7xx HAL library initialization:
  80:src/main.c    ****        - Configure the Flash ART accelerator on ITCM interface
  81:src/main.c    ****        - Configure the Systick to generate an interrupt each 1 msec
  82:src/main.c    ****        - Set NVIC Group Priority to 4
  83:src/main.c    ****        - Low Level Initialization
  84:src/main.c    ****      */
  85:src/main.c    ****   HAL_Init();
  86:src/main.c    **** 
  87:src/main.c    ****   /* Configure the system clock to 216 MHz */
  88:src/main.c    ****   SystemClock_Config();
ARM GAS  /tmp/ccSMeinc.s 			page 3


  89:src/main.c    **** 
  90:src/main.c    ****   /* Add your application code here */
  91:src/main.c    ****   LED_Init();
  92:src/main.c    ****   
  93:src/main.c    ****   /* Infinite loop */
  94:src/main.c    ****   while (1)
  95:src/main.c    ****   {
  96:src/main.c    ****       LED0(1);
  97:src/main.c    ****       LED1(1);
  98:src/main.c    ****       HAL_Delay(500);
  99:src/main.c    ****       LED0(0);
 100:src/main.c    ****       LED1(0);
 101:src/main.c    ****       HAL_Delay(500);
 102:src/main.c    **** 
 103:src/main.c    ****   }
 104:src/main.c    **** }
 105:src/main.c    **** 
 106:src/main.c    **** /**
 107:src/main.c    ****   * @brief  System Clock Configuration
 108:src/main.c    ****   *         The system Clock is configured as follow : 
 109:src/main.c    ****   *            System Clock source            = PLL (HSE)
 110:src/main.c    ****   *            SYSCLK(Hz)                     = 216000000
 111:src/main.c    ****   *            HCLK(Hz)                       = 216000000
 112:src/main.c    ****   *            AHB Prescaler                  = 1
 113:src/main.c    ****   *            APB1 Prescaler                 = 4
 114:src/main.c    ****   *            APB2 Prescaler                 = 2
 115:src/main.c    ****   *            HSE Frequency(Hz)              = 25000000
 116:src/main.c    ****   *            PLL_M                          = 25
 117:src/main.c    ****   *            PLL_N                          = 432
 118:src/main.c    ****   *            PLL_P                          = 2
 119:src/main.c    ****   *            PLL_Q                          = 9
 120:src/main.c    ****   *            PLL_R                          = 7
 121:src/main.c    ****   *            VDD(V)                         = 3.3
 122:src/main.c    ****   *            Main regulator output voltage  = Scale1 mode
 123:src/main.c    ****   *            Flash Latency(WS)              = 7
 124:src/main.c    ****   * @param  None
 125:src/main.c    ****   * @retval None
 126:src/main.c    ****   */
 127:src/main.c    **** static void SystemClock_Config(void)
 128:src/main.c    **** {
 129:src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 130:src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 131:src/main.c    ****   HAL_StatusTypeDef ret = HAL_OK;
 132:src/main.c    ****   
 133:src/main.c    ****   /* Enable Power Control clock */
 134:src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 135:src/main.c    ****   
 136:src/main.c    ****   /* The voltage scaling allows optimizing the power consumption when the device is 
 137:src/main.c    ****      clocked below the maximum system frequency, to update the voltage scaling value 
 138:src/main.c    ****      regarding system frequency refer to product datasheet.  */
 139:src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);  
 140:src/main.c    **** 
 141:src/main.c    ****   /* Enable HSE Oscillator and activate PLL with HSE as source */
 142:src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 143:src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 144:src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 145:src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
ARM GAS  /tmp/ccSMeinc.s 			page 4


 146:src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 25;
 147:src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 432;  
 148:src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 149:src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 150:src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 7;  
 151:src/main.c    ****   
 152:src/main.c    ****   ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 153:src/main.c    ****   if(ret != HAL_OK)
 154:src/main.c    ****   {
 155:src/main.c    ****     Error_Handler();
 156:src/main.c    ****   }
 157:src/main.c    ****   
 158:src/main.c    ****   /* Activate the OverDrive to reach the 216 MHz Frequency */  
 159:src/main.c    ****   ret = HAL_PWREx_EnableOverDrive();
 160:src/main.c    ****   if(ret != HAL_OK)
 161:src/main.c    ****   {
 162:src/main.c    ****     Error_Handler();
 163:src/main.c    ****   }
 164:src/main.c    ****   
 165:src/main.c    ****   /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
 166:src/main.c    ****   RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 167:src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 168:src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 169:src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 170:src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 171:src/main.c    ****   
 172:src/main.c    ****   ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 173:src/main.c    ****   if(ret != HAL_OK)
 174:src/main.c    ****   {
 175:src/main.c    ****     Error_Handler();
 176:src/main.c    ****   }
 177:src/main.c    **** }
 178:src/main.c    **** 
 179:src/main.c    **** /**
 180:src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 181:src/main.c    ****   * @param  None
 182:src/main.c    ****   * @retval None
 183:src/main.c    ****   */
 184:src/main.c    **** static void Error_Handler(void)
 185:src/main.c    **** {
  28              		.loc 1 185 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.L2:
  35 0000 FEE7     		b	.L2
  36              		.cfi_endproc
  37              	.LFE138:
  39 0002 00BF     		.section	.text.CPU_CACHE_Enable,"ax",%progbits
  40              		.align	2
  41              		.thumb
  42              		.thumb_func
  44              	CPU_CACHE_Enable:
  45              	.LFB139:
 186:src/main.c    ****   /* User may add here some code to deal with this error */
ARM GAS  /tmp/ccSMeinc.s 			page 5


 187:src/main.c    ****   while(1)
 188:src/main.c    ****   {
 189:src/main.c    ****   }
 190:src/main.c    **** }
 191:src/main.c    **** 
 192:src/main.c    **** /**
 193:src/main.c    ****   * @brief  Configure the MPU attributes as Write Through for SRAM1/2.
 194:src/main.c    ****   * @note   The Base Address is 0x20020000 since this memory interface is the AXI.
 195:src/main.c    ****   *         The Configured Region Size is 512KB because the internal SRAM1/2 
 196:src/main.c    ****   *         memory size is 384KB.
 197:src/main.c    ****   * @param  None
 198:src/main.c    ****   * @retval None
 199:src/main.c    ****  */
 200:src/main.c    **** //
 201:src/main.c    **** //static void MPU_Config(void)
 202:src/main.c    **** //{
 203:src/main.c    **** //  MPU_Region_InitTypeDef MPU_InitStruct;
 204:src/main.c    **** //  
 205:src/main.c    **** //  /* Disable the MPU */
 206:src/main.c    **** //  HAL_MPU_Disable();
 207:src/main.c    **** //
 208:src/main.c    **** //  /* Configure the MPU attributes as WT for SRAM */
 209:src/main.c    **** //  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 210:src/main.c    **** //  MPU_InitStruct.BaseAddress = 0x20020000;
 211:src/main.c    **** //  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 212:src/main.c    **** //  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 213:src/main.c    **** //  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 214:src/main.c    **** //  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 215:src/main.c    **** //  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 216:src/main.c    **** //  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 217:src/main.c    **** //  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 218:src/main.c    **** //  MPU_InitStruct.SubRegionDisable = 0x00;
 219:src/main.c    **** //  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 220:src/main.c    **** //
 221:src/main.c    **** //  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 222:src/main.c    **** //
 223:src/main.c    **** //  /* Enable the MPU */
 224:src/main.c    **** //  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 225:src/main.c    **** //}
 226:src/main.c    **** //
 227:src/main.c    **** /**
 228:src/main.c    ****   * @brief  CPU L1-Cache enable.
 229:src/main.c    ****   * @param  None
 230:src/main.c    ****   * @retval None
 231:src/main.c    ****   */
 232:src/main.c    **** static void CPU_CACHE_Enable(void)
 233:src/main.c    **** {
  46              		.loc 1 233 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              		.loc 1 233 0
  52 0000 10B4     		push	{r4}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 4
  55              		.cfi_offset 4, -4
ARM GAS  /tmp/ccSMeinc.s 			page 6


  56              	.LBB48:
  57              	.LBB49:
  58              	.LBB50:
  59              	.LBB51:
  60              		.file 2 "CORE/cmsis_gcc.h"
   1:CORE/cmsis_gcc.h **** /**************************************************************************//**
   2:CORE/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:CORE/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:CORE/cmsis_gcc.h ****  * @version  V4.30
   5:CORE/cmsis_gcc.h ****  * @date     20. October 2015
   6:CORE/cmsis_gcc.h ****  ******************************************************************************/
   7:CORE/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:CORE/cmsis_gcc.h **** 
   9:CORE/cmsis_gcc.h ****    All rights reserved.
  10:CORE/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:CORE/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:CORE/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:CORE/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:CORE/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:CORE/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:CORE/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:CORE/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:CORE/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:CORE/cmsis_gcc.h ****      specific prior written permission.
  20:CORE/cmsis_gcc.h ****    *
  21:CORE/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:CORE/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:CORE/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:CORE/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:CORE/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:CORE/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:CORE/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:CORE/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:CORE/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:CORE/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:CORE/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:CORE/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:CORE/cmsis_gcc.h **** 
  34:CORE/cmsis_gcc.h **** 
  35:CORE/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:CORE/cmsis_gcc.h **** 
  38:CORE/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:CORE/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:CORE/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:CORE/cmsis_gcc.h **** #endif
  45:CORE/cmsis_gcc.h **** 
  46:CORE/cmsis_gcc.h **** 
  47:CORE/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:CORE/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:CORE/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:CORE/cmsis_gcc.h ****   @{
  51:CORE/cmsis_gcc.h ****  */
  52:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccSMeinc.s 			page 7


  53:CORE/cmsis_gcc.h **** /**
  54:CORE/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:CORE/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:CORE/cmsis_gcc.h ****  */
  58:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:CORE/cmsis_gcc.h **** {
  60:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:CORE/cmsis_gcc.h **** }
  62:CORE/cmsis_gcc.h **** 
  63:CORE/cmsis_gcc.h **** 
  64:CORE/cmsis_gcc.h **** /**
  65:CORE/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:CORE/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:CORE/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:CORE/cmsis_gcc.h ****  */
  69:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:CORE/cmsis_gcc.h **** {
  71:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:CORE/cmsis_gcc.h **** }
  73:CORE/cmsis_gcc.h **** 
  74:CORE/cmsis_gcc.h **** 
  75:CORE/cmsis_gcc.h **** /**
  76:CORE/cmsis_gcc.h ****   \brief   Get Control Register
  77:CORE/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:CORE/cmsis_gcc.h ****   \return               Control Register value
  79:CORE/cmsis_gcc.h ****  */
  80:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:CORE/cmsis_gcc.h **** {
  82:CORE/cmsis_gcc.h ****   uint32_t result;
  83:CORE/cmsis_gcc.h **** 
  84:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:CORE/cmsis_gcc.h ****   return(result);
  86:CORE/cmsis_gcc.h **** }
  87:CORE/cmsis_gcc.h **** 
  88:CORE/cmsis_gcc.h **** 
  89:CORE/cmsis_gcc.h **** /**
  90:CORE/cmsis_gcc.h ****   \brief   Set Control Register
  91:CORE/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:CORE/cmsis_gcc.h ****  */
  94:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:CORE/cmsis_gcc.h **** {
  96:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:CORE/cmsis_gcc.h **** }
  98:CORE/cmsis_gcc.h **** 
  99:CORE/cmsis_gcc.h **** 
 100:CORE/cmsis_gcc.h **** /**
 101:CORE/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:CORE/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:CORE/cmsis_gcc.h ****   \return               IPSR Register value
 104:CORE/cmsis_gcc.h ****  */
 105:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:CORE/cmsis_gcc.h **** {
 107:CORE/cmsis_gcc.h ****   uint32_t result;
 108:CORE/cmsis_gcc.h **** 
 109:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
ARM GAS  /tmp/ccSMeinc.s 			page 8


 110:CORE/cmsis_gcc.h ****   return(result);
 111:CORE/cmsis_gcc.h **** }
 112:CORE/cmsis_gcc.h **** 
 113:CORE/cmsis_gcc.h **** 
 114:CORE/cmsis_gcc.h **** /**
 115:CORE/cmsis_gcc.h ****   \brief   Get APSR Register
 116:CORE/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:CORE/cmsis_gcc.h ****   \return               APSR Register value
 118:CORE/cmsis_gcc.h ****  */
 119:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:CORE/cmsis_gcc.h **** {
 121:CORE/cmsis_gcc.h ****   uint32_t result;
 122:CORE/cmsis_gcc.h **** 
 123:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:CORE/cmsis_gcc.h ****   return(result);
 125:CORE/cmsis_gcc.h **** }
 126:CORE/cmsis_gcc.h **** 
 127:CORE/cmsis_gcc.h **** 
 128:CORE/cmsis_gcc.h **** /**
 129:CORE/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:CORE/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:CORE/cmsis_gcc.h **** 
 132:CORE/cmsis_gcc.h ****     \return               xPSR Register value
 133:CORE/cmsis_gcc.h ****  */
 134:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:CORE/cmsis_gcc.h **** {
 136:CORE/cmsis_gcc.h ****   uint32_t result;
 137:CORE/cmsis_gcc.h **** 
 138:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:CORE/cmsis_gcc.h ****   return(result);
 140:CORE/cmsis_gcc.h **** }
 141:CORE/cmsis_gcc.h **** 
 142:CORE/cmsis_gcc.h **** 
 143:CORE/cmsis_gcc.h **** /**
 144:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:CORE/cmsis_gcc.h ****   \return               PSP Register value
 147:CORE/cmsis_gcc.h ****  */
 148:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:CORE/cmsis_gcc.h **** {
 150:CORE/cmsis_gcc.h ****   register uint32_t result;
 151:CORE/cmsis_gcc.h **** 
 152:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:CORE/cmsis_gcc.h ****   return(result);
 154:CORE/cmsis_gcc.h **** }
 155:CORE/cmsis_gcc.h **** 
 156:CORE/cmsis_gcc.h **** 
 157:CORE/cmsis_gcc.h **** /**
 158:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:CORE/cmsis_gcc.h ****  */
 162:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:CORE/cmsis_gcc.h **** {
 164:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:CORE/cmsis_gcc.h **** }
 166:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccSMeinc.s 			page 9


 167:CORE/cmsis_gcc.h **** 
 168:CORE/cmsis_gcc.h **** /**
 169:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:CORE/cmsis_gcc.h ****   \return               MSP Register value
 172:CORE/cmsis_gcc.h ****  */
 173:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:CORE/cmsis_gcc.h **** {
 175:CORE/cmsis_gcc.h ****   register uint32_t result;
 176:CORE/cmsis_gcc.h **** 
 177:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:CORE/cmsis_gcc.h ****   return(result);
 179:CORE/cmsis_gcc.h **** }
 180:CORE/cmsis_gcc.h **** 
 181:CORE/cmsis_gcc.h **** 
 182:CORE/cmsis_gcc.h **** /**
 183:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:CORE/cmsis_gcc.h **** 
 186:CORE/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:CORE/cmsis_gcc.h ****  */
 188:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:CORE/cmsis_gcc.h **** {
 190:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:CORE/cmsis_gcc.h **** }
 192:CORE/cmsis_gcc.h **** 
 193:CORE/cmsis_gcc.h **** 
 194:CORE/cmsis_gcc.h **** /**
 195:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:CORE/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 198:CORE/cmsis_gcc.h ****  */
 199:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:CORE/cmsis_gcc.h **** {
 201:CORE/cmsis_gcc.h ****   uint32_t result;
 202:CORE/cmsis_gcc.h **** 
 203:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:CORE/cmsis_gcc.h ****   return(result);
 205:CORE/cmsis_gcc.h **** }
 206:CORE/cmsis_gcc.h **** 
 207:CORE/cmsis_gcc.h **** 
 208:CORE/cmsis_gcc.h **** /**
 209:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:CORE/cmsis_gcc.h ****  */
 213:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:CORE/cmsis_gcc.h **** {
 215:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:CORE/cmsis_gcc.h **** }
 217:CORE/cmsis_gcc.h **** 
 218:CORE/cmsis_gcc.h **** 
 219:CORE/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:CORE/cmsis_gcc.h **** 
 221:CORE/cmsis_gcc.h **** /**
 222:CORE/cmsis_gcc.h ****   \brief   Enable FIQ
 223:CORE/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
ARM GAS  /tmp/ccSMeinc.s 			page 10


 224:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:CORE/cmsis_gcc.h ****  */
 226:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:CORE/cmsis_gcc.h **** {
 228:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:CORE/cmsis_gcc.h **** }
 230:CORE/cmsis_gcc.h **** 
 231:CORE/cmsis_gcc.h **** 
 232:CORE/cmsis_gcc.h **** /**
 233:CORE/cmsis_gcc.h ****   \brief   Disable FIQ
 234:CORE/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:CORE/cmsis_gcc.h ****  */
 237:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:CORE/cmsis_gcc.h **** {
 239:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:CORE/cmsis_gcc.h **** }
 241:CORE/cmsis_gcc.h **** 
 242:CORE/cmsis_gcc.h **** 
 243:CORE/cmsis_gcc.h **** /**
 244:CORE/cmsis_gcc.h ****   \brief   Get Base Priority
 245:CORE/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 247:CORE/cmsis_gcc.h ****  */
 248:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:CORE/cmsis_gcc.h **** {
 250:CORE/cmsis_gcc.h ****   uint32_t result;
 251:CORE/cmsis_gcc.h **** 
 252:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:CORE/cmsis_gcc.h ****   return(result);
 254:CORE/cmsis_gcc.h **** }
 255:CORE/cmsis_gcc.h **** 
 256:CORE/cmsis_gcc.h **** 
 257:CORE/cmsis_gcc.h **** /**
 258:CORE/cmsis_gcc.h ****   \brief   Set Base Priority
 259:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:CORE/cmsis_gcc.h ****  */
 262:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:CORE/cmsis_gcc.h **** {
 264:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:CORE/cmsis_gcc.h **** }
 266:CORE/cmsis_gcc.h **** 
 267:CORE/cmsis_gcc.h **** 
 268:CORE/cmsis_gcc.h **** /**
 269:CORE/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:CORE/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:CORE/cmsis_gcc.h ****  */
 274:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:CORE/cmsis_gcc.h **** {
 276:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:CORE/cmsis_gcc.h **** }
 278:CORE/cmsis_gcc.h **** 
 279:CORE/cmsis_gcc.h **** 
 280:CORE/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccSMeinc.s 			page 11


 281:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:CORE/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 284:CORE/cmsis_gcc.h ****  */
 285:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:CORE/cmsis_gcc.h **** {
 287:CORE/cmsis_gcc.h ****   uint32_t result;
 288:CORE/cmsis_gcc.h **** 
 289:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:CORE/cmsis_gcc.h ****   return(result);
 291:CORE/cmsis_gcc.h **** }
 292:CORE/cmsis_gcc.h **** 
 293:CORE/cmsis_gcc.h **** 
 294:CORE/cmsis_gcc.h **** /**
 295:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:CORE/cmsis_gcc.h ****  */
 299:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:CORE/cmsis_gcc.h **** {
 301:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:CORE/cmsis_gcc.h **** }
 303:CORE/cmsis_gcc.h **** 
 304:CORE/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:CORE/cmsis_gcc.h **** 
 306:CORE/cmsis_gcc.h **** 
 307:CORE/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:CORE/cmsis_gcc.h **** 
 309:CORE/cmsis_gcc.h **** /**
 310:CORE/cmsis_gcc.h ****   \brief   Get FPSCR
 311:CORE/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:CORE/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:CORE/cmsis_gcc.h ****  */
 314:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:CORE/cmsis_gcc.h **** {
 316:CORE/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:CORE/cmsis_gcc.h ****   uint32_t result;
 318:CORE/cmsis_gcc.h **** 
 319:CORE/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 321:CORE/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 323:CORE/cmsis_gcc.h ****   return(result);
 324:CORE/cmsis_gcc.h **** #else
 325:CORE/cmsis_gcc.h ****    return(0);
 326:CORE/cmsis_gcc.h **** #endif
 327:CORE/cmsis_gcc.h **** }
 328:CORE/cmsis_gcc.h **** 
 329:CORE/cmsis_gcc.h **** 
 330:CORE/cmsis_gcc.h **** /**
 331:CORE/cmsis_gcc.h ****   \brief   Set FPSCR
 332:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:CORE/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:CORE/cmsis_gcc.h ****  */
 335:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:CORE/cmsis_gcc.h **** {
 337:CORE/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
ARM GAS  /tmp/ccSMeinc.s 			page 12


 338:CORE/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 340:CORE/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 342:CORE/cmsis_gcc.h **** #endif
 343:CORE/cmsis_gcc.h **** }
 344:CORE/cmsis_gcc.h **** 
 345:CORE/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:CORE/cmsis_gcc.h **** 
 347:CORE/cmsis_gcc.h **** 
 348:CORE/cmsis_gcc.h **** 
 349:CORE/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:CORE/cmsis_gcc.h **** 
 351:CORE/cmsis_gcc.h **** 
 352:CORE/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:CORE/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:CORE/cmsis_gcc.h ****   Access to dedicated instructions
 355:CORE/cmsis_gcc.h ****   @{
 356:CORE/cmsis_gcc.h **** */
 357:CORE/cmsis_gcc.h **** 
 358:CORE/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:CORE/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:CORE/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:CORE/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:CORE/cmsis_gcc.h **** #else
 365:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:CORE/cmsis_gcc.h **** #endif
 368:CORE/cmsis_gcc.h **** 
 369:CORE/cmsis_gcc.h **** /**
 370:CORE/cmsis_gcc.h ****   \brief   No Operation
 371:CORE/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:CORE/cmsis_gcc.h ****  */
 373:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:CORE/cmsis_gcc.h **** {
 375:CORE/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:CORE/cmsis_gcc.h **** }
 377:CORE/cmsis_gcc.h **** 
 378:CORE/cmsis_gcc.h **** 
 379:CORE/cmsis_gcc.h **** /**
 380:CORE/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:CORE/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:CORE/cmsis_gcc.h ****  */
 383:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:CORE/cmsis_gcc.h **** {
 385:CORE/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:CORE/cmsis_gcc.h **** }
 387:CORE/cmsis_gcc.h **** 
 388:CORE/cmsis_gcc.h **** 
 389:CORE/cmsis_gcc.h **** /**
 390:CORE/cmsis_gcc.h ****   \brief   Wait For Event
 391:CORE/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:CORE/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:CORE/cmsis_gcc.h ****  */
 394:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
ARM GAS  /tmp/ccSMeinc.s 			page 13


 395:CORE/cmsis_gcc.h **** {
 396:CORE/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:CORE/cmsis_gcc.h **** }
 398:CORE/cmsis_gcc.h **** 
 399:CORE/cmsis_gcc.h **** 
 400:CORE/cmsis_gcc.h **** /**
 401:CORE/cmsis_gcc.h ****   \brief   Send Event
 402:CORE/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:CORE/cmsis_gcc.h ****  */
 404:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:CORE/cmsis_gcc.h **** {
 406:CORE/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:CORE/cmsis_gcc.h **** }
 408:CORE/cmsis_gcc.h **** 
 409:CORE/cmsis_gcc.h **** 
 410:CORE/cmsis_gcc.h **** /**
 411:CORE/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:CORE/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:CORE/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:CORE/cmsis_gcc.h ****            after the instruction has been completed.
 415:CORE/cmsis_gcc.h ****  */
 416:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:CORE/cmsis_gcc.h **** {
 418:CORE/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:CORE/cmsis_gcc.h **** }
 420:CORE/cmsis_gcc.h **** 
 421:CORE/cmsis_gcc.h **** 
 422:CORE/cmsis_gcc.h **** /**
 423:CORE/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:CORE/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:CORE/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:CORE/cmsis_gcc.h ****  */
 427:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:CORE/cmsis_gcc.h **** {
 429:CORE/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  61              		.loc 2 429 0
  62              		.syntax unified
  63              	@ 429 "CORE/cmsis_gcc.h" 1
  64 0002 BFF34F8F 		dsb 0xF
  65              	@ 0 "" 2
  66              		.thumb
  67              		.syntax unified
  68              	.LBE51:
  69              	.LBE50:
  70              	.LBB52:
  71              	.LBB53:
 418:CORE/cmsis_gcc.h **** }
  72              		.loc 2 418 0
  73              		.syntax unified
  74              	@ 418 "CORE/cmsis_gcc.h" 1
  75 0006 BFF36F8F 		isb 0xF
  76              	@ 0 "" 2
  77              		.thumb
  78              		.syntax unified
  79              	.LBE53:
  80              	.LBE52:
  81              		.file 3 "CORE/core_cm7.h"
ARM GAS  /tmp/ccSMeinc.s 			page 14


   1:CORE/core_cm7.h **** /**************************************************************************//**
   2:CORE/core_cm7.h ****  * @file     core_cm7.h
   3:CORE/core_cm7.h ****  * @brief    CMSIS Cortex-M7 Core Peripheral Access Layer Header File
   4:CORE/core_cm7.h ****  * @version  V4.30
   5:CORE/core_cm7.h ****  * @date     20. October 2015
   6:CORE/core_cm7.h ****  ******************************************************************************/
   7:CORE/core_cm7.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:CORE/core_cm7.h **** 
   9:CORE/core_cm7.h ****    All rights reserved.
  10:CORE/core_cm7.h ****    Redistribution and use in source and binary forms, with or without
  11:CORE/core_cm7.h ****    modification, are permitted provided that the following conditions are met:
  12:CORE/core_cm7.h ****    - Redistributions of source code must retain the above copyright
  13:CORE/core_cm7.h ****      notice, this list of conditions and the following disclaimer.
  14:CORE/core_cm7.h ****    - Redistributions in binary form must reproduce the above copyright
  15:CORE/core_cm7.h ****      notice, this list of conditions and the following disclaimer in the
  16:CORE/core_cm7.h ****      documentation and/or other materials provided with the distribution.
  17:CORE/core_cm7.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:CORE/core_cm7.h ****      to endorse or promote products derived from this software without
  19:CORE/core_cm7.h ****      specific prior written permission.
  20:CORE/core_cm7.h ****    *
  21:CORE/core_cm7.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:CORE/core_cm7.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:CORE/core_cm7.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:CORE/core_cm7.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:CORE/core_cm7.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:CORE/core_cm7.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:CORE/core_cm7.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:CORE/core_cm7.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:CORE/core_cm7.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:CORE/core_cm7.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:CORE/core_cm7.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:CORE/core_cm7.h ****    ---------------------------------------------------------------------------*/
  33:CORE/core_cm7.h **** 
  34:CORE/core_cm7.h **** 
  35:CORE/core_cm7.h **** #if   defined ( __ICCARM__ )
  36:CORE/core_cm7.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:CORE/core_cm7.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:CORE/core_cm7.h ****   #pragma clang system_header   /* treat file as system include file */
  39:CORE/core_cm7.h **** #endif
  40:CORE/core_cm7.h **** 
  41:CORE/core_cm7.h **** #ifndef __CORE_CM7_H_GENERIC
  42:CORE/core_cm7.h **** #define __CORE_CM7_H_GENERIC
  43:CORE/core_cm7.h **** 
  44:CORE/core_cm7.h **** #include <stdint.h>
  45:CORE/core_cm7.h **** 
  46:CORE/core_cm7.h **** #ifdef __cplusplus
  47:CORE/core_cm7.h ****  extern "C" {
  48:CORE/core_cm7.h **** #endif
  49:CORE/core_cm7.h **** 
  50:CORE/core_cm7.h **** /**
  51:CORE/core_cm7.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:CORE/core_cm7.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:CORE/core_cm7.h **** 
  54:CORE/core_cm7.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:CORE/core_cm7.h ****      Function definitions in header files are used to allow 'inlining'.
  56:CORE/core_cm7.h **** 
  57:CORE/core_cm7.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
ARM GAS  /tmp/ccSMeinc.s 			page 15


  58:CORE/core_cm7.h ****      Unions are used for effective representation of core registers.
  59:CORE/core_cm7.h **** 
  60:CORE/core_cm7.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:CORE/core_cm7.h ****      Function-like macros are used to allow more efficient code.
  62:CORE/core_cm7.h ****  */
  63:CORE/core_cm7.h **** 
  64:CORE/core_cm7.h **** 
  65:CORE/core_cm7.h **** /*******************************************************************************
  66:CORE/core_cm7.h ****  *                 CMSIS definitions
  67:CORE/core_cm7.h ****  ******************************************************************************/
  68:CORE/core_cm7.h **** /**
  69:CORE/core_cm7.h ****   \ingroup Cortex_M7
  70:CORE/core_cm7.h ****   @{
  71:CORE/core_cm7.h ****  */
  72:CORE/core_cm7.h **** 
  73:CORE/core_cm7.h **** /*  CMSIS CM7 definitions */
  74:CORE/core_cm7.h **** #define __CM7_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:CORE/core_cm7.h **** #define __CM7_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:CORE/core_cm7.h **** #define __CM7_CMSIS_VERSION       ((__CM7_CMSIS_VERSION_MAIN << 16U) | \
  77:CORE/core_cm7.h ****                                     __CM7_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:CORE/core_cm7.h **** 
  79:CORE/core_cm7.h **** #define __CORTEX_M                (0x07U)                                      /*!< Cortex-M Core *
  80:CORE/core_cm7.h **** 
  81:CORE/core_cm7.h **** 
  82:CORE/core_cm7.h **** #if   defined ( __CC_ARM )
  83:CORE/core_cm7.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:CORE/core_cm7.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:CORE/core_cm7.h ****   #define __STATIC_INLINE  static __inline
  86:CORE/core_cm7.h **** 
  87:CORE/core_cm7.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:CORE/core_cm7.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:CORE/core_cm7.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:CORE/core_cm7.h ****   #define __STATIC_INLINE  static __inline
  91:CORE/core_cm7.h **** 
  92:CORE/core_cm7.h **** #elif defined ( __GNUC__ )
  93:CORE/core_cm7.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:CORE/core_cm7.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:CORE/core_cm7.h ****   #define __STATIC_INLINE  static inline
  96:CORE/core_cm7.h **** 
  97:CORE/core_cm7.h **** #elif defined ( __ICCARM__ )
  98:CORE/core_cm7.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:CORE/core_cm7.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:CORE/core_cm7.h ****   #define __STATIC_INLINE  static inline
 101:CORE/core_cm7.h **** 
 102:CORE/core_cm7.h **** #elif defined ( __TMS470__ )
 103:CORE/core_cm7.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:CORE/core_cm7.h ****   #define __STATIC_INLINE  static inline
 105:CORE/core_cm7.h **** 
 106:CORE/core_cm7.h **** #elif defined ( __TASKING__ )
 107:CORE/core_cm7.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:CORE/core_cm7.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:CORE/core_cm7.h ****   #define __STATIC_INLINE  static inline
 110:CORE/core_cm7.h **** 
 111:CORE/core_cm7.h **** #elif defined ( __CSMC__ )
 112:CORE/core_cm7.h ****   #define __packed
 113:CORE/core_cm7.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:CORE/core_cm7.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
ARM GAS  /tmp/ccSMeinc.s 			page 16


 115:CORE/core_cm7.h ****   #define __STATIC_INLINE  static inline
 116:CORE/core_cm7.h **** 
 117:CORE/core_cm7.h **** #else
 118:CORE/core_cm7.h ****   #error Unknown compiler
 119:CORE/core_cm7.h **** #endif
 120:CORE/core_cm7.h **** 
 121:CORE/core_cm7.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:CORE/core_cm7.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:CORE/core_cm7.h **** */
 124:CORE/core_cm7.h **** #if defined ( __CC_ARM )
 125:CORE/core_cm7.h ****   #if defined __TARGET_FPU_VFP
 126:CORE/core_cm7.h ****     #if (__FPU_PRESENT == 1U)
 127:CORE/core_cm7.h ****       #define __FPU_USED       1U
 128:CORE/core_cm7.h ****     #else
 129:CORE/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:CORE/core_cm7.h ****       #define __FPU_USED       0U
 131:CORE/core_cm7.h ****     #endif
 132:CORE/core_cm7.h ****   #else
 133:CORE/core_cm7.h ****     #define __FPU_USED         0U
 134:CORE/core_cm7.h ****   #endif
 135:CORE/core_cm7.h **** 
 136:CORE/core_cm7.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:CORE/core_cm7.h ****   #if defined __ARM_PCS_VFP
 138:CORE/core_cm7.h ****     #if (__FPU_PRESENT == 1)
 139:CORE/core_cm7.h ****       #define __FPU_USED       1U
 140:CORE/core_cm7.h ****     #else
 141:CORE/core_cm7.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:CORE/core_cm7.h ****       #define __FPU_USED       0U
 143:CORE/core_cm7.h ****     #endif
 144:CORE/core_cm7.h ****   #else
 145:CORE/core_cm7.h ****     #define __FPU_USED         0U
 146:CORE/core_cm7.h ****   #endif
 147:CORE/core_cm7.h **** 
 148:CORE/core_cm7.h **** #elif defined ( __GNUC__ )
 149:CORE/core_cm7.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:CORE/core_cm7.h ****     #if (__FPU_PRESENT == 1U)
 151:CORE/core_cm7.h ****       #define __FPU_USED       1U
 152:CORE/core_cm7.h ****     #else
 153:CORE/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:CORE/core_cm7.h ****       #define __FPU_USED       0U
 155:CORE/core_cm7.h ****     #endif
 156:CORE/core_cm7.h ****   #else
 157:CORE/core_cm7.h ****     #define __FPU_USED         0U
 158:CORE/core_cm7.h ****   #endif
 159:CORE/core_cm7.h **** 
 160:CORE/core_cm7.h **** #elif defined ( __ICCARM__ )
 161:CORE/core_cm7.h ****   #if defined __ARMVFP__
 162:CORE/core_cm7.h ****     #if (__FPU_PRESENT == 1U)
 163:CORE/core_cm7.h ****       #define __FPU_USED       1U
 164:CORE/core_cm7.h ****     #else
 165:CORE/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:CORE/core_cm7.h ****       #define __FPU_USED       0U
 167:CORE/core_cm7.h ****     #endif
 168:CORE/core_cm7.h ****   #else
 169:CORE/core_cm7.h ****     #define __FPU_USED         0U
 170:CORE/core_cm7.h ****   #endif
 171:CORE/core_cm7.h **** 
ARM GAS  /tmp/ccSMeinc.s 			page 17


 172:CORE/core_cm7.h **** #elif defined ( __TMS470__ )
 173:CORE/core_cm7.h ****   #if defined __TI_VFP_SUPPORT__
 174:CORE/core_cm7.h ****     #if (__FPU_PRESENT == 1U)
 175:CORE/core_cm7.h ****       #define __FPU_USED       1U
 176:CORE/core_cm7.h ****     #else
 177:CORE/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:CORE/core_cm7.h ****       #define __FPU_USED       0U
 179:CORE/core_cm7.h ****     #endif
 180:CORE/core_cm7.h ****   #else
 181:CORE/core_cm7.h ****     #define __FPU_USED         0U
 182:CORE/core_cm7.h ****   #endif
 183:CORE/core_cm7.h **** 
 184:CORE/core_cm7.h **** #elif defined ( __TASKING__ )
 185:CORE/core_cm7.h ****   #if defined __FPU_VFP__
 186:CORE/core_cm7.h ****     #if (__FPU_PRESENT == 1U)
 187:CORE/core_cm7.h ****       #define __FPU_USED       1U
 188:CORE/core_cm7.h ****     #else
 189:CORE/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:CORE/core_cm7.h ****       #define __FPU_USED       0U
 191:CORE/core_cm7.h ****     #endif
 192:CORE/core_cm7.h ****   #else
 193:CORE/core_cm7.h ****     #define __FPU_USED         0U
 194:CORE/core_cm7.h ****   #endif
 195:CORE/core_cm7.h **** 
 196:CORE/core_cm7.h **** #elif defined ( __CSMC__ )
 197:CORE/core_cm7.h ****   #if ( __CSMC__ & 0x400U)
 198:CORE/core_cm7.h ****     #if (__FPU_PRESENT == 1U)
 199:CORE/core_cm7.h ****       #define __FPU_USED       1U
 200:CORE/core_cm7.h ****     #else
 201:CORE/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:CORE/core_cm7.h ****       #define __FPU_USED       0U
 203:CORE/core_cm7.h ****     #endif
 204:CORE/core_cm7.h ****   #else
 205:CORE/core_cm7.h ****     #define __FPU_USED         0U
 206:CORE/core_cm7.h ****   #endif
 207:CORE/core_cm7.h **** 
 208:CORE/core_cm7.h **** #endif
 209:CORE/core_cm7.h **** 
 210:CORE/core_cm7.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:CORE/core_cm7.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:CORE/core_cm7.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:CORE/core_cm7.h **** 
 214:CORE/core_cm7.h **** #ifdef __cplusplus
 215:CORE/core_cm7.h **** }
 216:CORE/core_cm7.h **** #endif
 217:CORE/core_cm7.h **** 
 218:CORE/core_cm7.h **** #endif /* __CORE_CM7_H_GENERIC */
 219:CORE/core_cm7.h **** 
 220:CORE/core_cm7.h **** #ifndef __CMSIS_GENERIC
 221:CORE/core_cm7.h **** 
 222:CORE/core_cm7.h **** #ifndef __CORE_CM7_H_DEPENDANT
 223:CORE/core_cm7.h **** #define __CORE_CM7_H_DEPENDANT
 224:CORE/core_cm7.h **** 
 225:CORE/core_cm7.h **** #ifdef __cplusplus
 226:CORE/core_cm7.h ****  extern "C" {
 227:CORE/core_cm7.h **** #endif
 228:CORE/core_cm7.h **** 
ARM GAS  /tmp/ccSMeinc.s 			page 18


 229:CORE/core_cm7.h **** /* check device defines and use defaults */
 230:CORE/core_cm7.h **** #if defined __CHECK_DEVICE_DEFINES
 231:CORE/core_cm7.h ****   #ifndef __CM7_REV
 232:CORE/core_cm7.h ****     #define __CM7_REV               0x0000U
 233:CORE/core_cm7.h ****     #warning "__CM7_REV not defined in device header file; using default!"
 234:CORE/core_cm7.h ****   #endif
 235:CORE/core_cm7.h **** 
 236:CORE/core_cm7.h ****   #ifndef __FPU_PRESENT
 237:CORE/core_cm7.h ****     #define __FPU_PRESENT             0U
 238:CORE/core_cm7.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:CORE/core_cm7.h ****   #endif
 240:CORE/core_cm7.h **** 
 241:CORE/core_cm7.h ****   #ifndef __MPU_PRESENT
 242:CORE/core_cm7.h ****     #define __MPU_PRESENT             0U
 243:CORE/core_cm7.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 244:CORE/core_cm7.h ****   #endif
 245:CORE/core_cm7.h **** 
 246:CORE/core_cm7.h ****   #ifndef __ICACHE_PRESENT
 247:CORE/core_cm7.h ****     #define __ICACHE_PRESENT          0U
 248:CORE/core_cm7.h ****     #warning "__ICACHE_PRESENT not defined in device header file; using default!"
 249:CORE/core_cm7.h ****   #endif
 250:CORE/core_cm7.h **** 
 251:CORE/core_cm7.h ****   #ifndef __DCACHE_PRESENT
 252:CORE/core_cm7.h ****     #define __DCACHE_PRESENT          0U
 253:CORE/core_cm7.h ****     #warning "__DCACHE_PRESENT not defined in device header file; using default!"
 254:CORE/core_cm7.h ****   #endif
 255:CORE/core_cm7.h **** 
 256:CORE/core_cm7.h ****   #ifndef __DTCM_PRESENT
 257:CORE/core_cm7.h ****     #define __DTCM_PRESENT            0U
 258:CORE/core_cm7.h ****     #warning "__DTCM_PRESENT        not defined in device header file; using default!"
 259:CORE/core_cm7.h ****   #endif
 260:CORE/core_cm7.h **** 
 261:CORE/core_cm7.h ****   #ifndef __NVIC_PRIO_BITS
 262:CORE/core_cm7.h ****     #define __NVIC_PRIO_BITS          3U
 263:CORE/core_cm7.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 264:CORE/core_cm7.h ****   #endif
 265:CORE/core_cm7.h **** 
 266:CORE/core_cm7.h ****   #ifndef __Vendor_SysTickConfig
 267:CORE/core_cm7.h ****     #define __Vendor_SysTickConfig    0U
 268:CORE/core_cm7.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 269:CORE/core_cm7.h ****   #endif
 270:CORE/core_cm7.h **** #endif
 271:CORE/core_cm7.h **** 
 272:CORE/core_cm7.h **** /* IO definitions (access restrictions to peripheral registers) */
 273:CORE/core_cm7.h **** /**
 274:CORE/core_cm7.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 275:CORE/core_cm7.h **** 
 276:CORE/core_cm7.h ****     <strong>IO Type Qualifiers</strong> are used
 277:CORE/core_cm7.h ****     \li to specify the access to peripheral variables.
 278:CORE/core_cm7.h ****     \li for automatic generation of peripheral register debug information.
 279:CORE/core_cm7.h **** */
 280:CORE/core_cm7.h **** #ifdef __cplusplus
 281:CORE/core_cm7.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 282:CORE/core_cm7.h **** #else
 283:CORE/core_cm7.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 284:CORE/core_cm7.h **** #endif
 285:CORE/core_cm7.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
ARM GAS  /tmp/ccSMeinc.s 			page 19


 286:CORE/core_cm7.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 287:CORE/core_cm7.h **** 
 288:CORE/core_cm7.h **** /* following defines should be used for structure members */
 289:CORE/core_cm7.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 290:CORE/core_cm7.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 291:CORE/core_cm7.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 292:CORE/core_cm7.h **** 
 293:CORE/core_cm7.h **** /*@} end of group Cortex_M7 */
 294:CORE/core_cm7.h **** 
 295:CORE/core_cm7.h **** 
 296:CORE/core_cm7.h **** 
 297:CORE/core_cm7.h **** /*******************************************************************************
 298:CORE/core_cm7.h ****  *                 Register Abstraction
 299:CORE/core_cm7.h ****   Core Register contain:
 300:CORE/core_cm7.h ****   - Core Register
 301:CORE/core_cm7.h ****   - Core NVIC Register
 302:CORE/core_cm7.h ****   - Core SCB Register
 303:CORE/core_cm7.h ****   - Core SysTick Register
 304:CORE/core_cm7.h ****   - Core Debug Register
 305:CORE/core_cm7.h ****   - Core MPU Register
 306:CORE/core_cm7.h ****   - Core FPU Register
 307:CORE/core_cm7.h ****  ******************************************************************************/
 308:CORE/core_cm7.h **** /**
 309:CORE/core_cm7.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 310:CORE/core_cm7.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 311:CORE/core_cm7.h **** */
 312:CORE/core_cm7.h **** 
 313:CORE/core_cm7.h **** /**
 314:CORE/core_cm7.h ****   \ingroup    CMSIS_core_register
 315:CORE/core_cm7.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 316:CORE/core_cm7.h ****   \brief      Core Register type definitions.
 317:CORE/core_cm7.h ****   @{
 318:CORE/core_cm7.h ****  */
 319:CORE/core_cm7.h **** 
 320:CORE/core_cm7.h **** /**
 321:CORE/core_cm7.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 322:CORE/core_cm7.h ****  */
 323:CORE/core_cm7.h **** typedef union
 324:CORE/core_cm7.h **** {
 325:CORE/core_cm7.h ****   struct
 326:CORE/core_cm7.h ****   {
 327:CORE/core_cm7.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 328:CORE/core_cm7.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 329:CORE/core_cm7.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 330:CORE/core_cm7.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 331:CORE/core_cm7.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 332:CORE/core_cm7.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 333:CORE/core_cm7.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 334:CORE/core_cm7.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 335:CORE/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 336:CORE/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 337:CORE/core_cm7.h **** } APSR_Type;
 338:CORE/core_cm7.h **** 
 339:CORE/core_cm7.h **** /* APSR Register Definitions */
 340:CORE/core_cm7.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 341:CORE/core_cm7.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 342:CORE/core_cm7.h **** 
ARM GAS  /tmp/ccSMeinc.s 			page 20


 343:CORE/core_cm7.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 344:CORE/core_cm7.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 345:CORE/core_cm7.h **** 
 346:CORE/core_cm7.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 347:CORE/core_cm7.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 348:CORE/core_cm7.h **** 
 349:CORE/core_cm7.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 350:CORE/core_cm7.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 351:CORE/core_cm7.h **** 
 352:CORE/core_cm7.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 353:CORE/core_cm7.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 354:CORE/core_cm7.h **** 
 355:CORE/core_cm7.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 356:CORE/core_cm7.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 357:CORE/core_cm7.h **** 
 358:CORE/core_cm7.h **** 
 359:CORE/core_cm7.h **** /**
 360:CORE/core_cm7.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 361:CORE/core_cm7.h ****  */
 362:CORE/core_cm7.h **** typedef union
 363:CORE/core_cm7.h **** {
 364:CORE/core_cm7.h ****   struct
 365:CORE/core_cm7.h ****   {
 366:CORE/core_cm7.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 367:CORE/core_cm7.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 368:CORE/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 369:CORE/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 370:CORE/core_cm7.h **** } IPSR_Type;
 371:CORE/core_cm7.h **** 
 372:CORE/core_cm7.h **** /* IPSR Register Definitions */
 373:CORE/core_cm7.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 374:CORE/core_cm7.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 375:CORE/core_cm7.h **** 
 376:CORE/core_cm7.h **** 
 377:CORE/core_cm7.h **** /**
 378:CORE/core_cm7.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 379:CORE/core_cm7.h ****  */
 380:CORE/core_cm7.h **** typedef union
 381:CORE/core_cm7.h **** {
 382:CORE/core_cm7.h ****   struct
 383:CORE/core_cm7.h ****   {
 384:CORE/core_cm7.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 385:CORE/core_cm7.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 386:CORE/core_cm7.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 387:CORE/core_cm7.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 388:CORE/core_cm7.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 389:CORE/core_cm7.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 390:CORE/core_cm7.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 391:CORE/core_cm7.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 392:CORE/core_cm7.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 393:CORE/core_cm7.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 394:CORE/core_cm7.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 395:CORE/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 396:CORE/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 397:CORE/core_cm7.h **** } xPSR_Type;
 398:CORE/core_cm7.h **** 
 399:CORE/core_cm7.h **** /* xPSR Register Definitions */
ARM GAS  /tmp/ccSMeinc.s 			page 21


 400:CORE/core_cm7.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 401:CORE/core_cm7.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 402:CORE/core_cm7.h **** 
 403:CORE/core_cm7.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 404:CORE/core_cm7.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 405:CORE/core_cm7.h **** 
 406:CORE/core_cm7.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 407:CORE/core_cm7.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 408:CORE/core_cm7.h **** 
 409:CORE/core_cm7.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 410:CORE/core_cm7.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 411:CORE/core_cm7.h **** 
 412:CORE/core_cm7.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 413:CORE/core_cm7.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 414:CORE/core_cm7.h **** 
 415:CORE/core_cm7.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 416:CORE/core_cm7.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 417:CORE/core_cm7.h **** 
 418:CORE/core_cm7.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 419:CORE/core_cm7.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 420:CORE/core_cm7.h **** 
 421:CORE/core_cm7.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 422:CORE/core_cm7.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 423:CORE/core_cm7.h **** 
 424:CORE/core_cm7.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 425:CORE/core_cm7.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 426:CORE/core_cm7.h **** 
 427:CORE/core_cm7.h **** 
 428:CORE/core_cm7.h **** /**
 429:CORE/core_cm7.h ****   \brief  Union type to access the Control Registers (CONTROL).
 430:CORE/core_cm7.h ****  */
 431:CORE/core_cm7.h **** typedef union
 432:CORE/core_cm7.h **** {
 433:CORE/core_cm7.h ****   struct
 434:CORE/core_cm7.h ****   {
 435:CORE/core_cm7.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 436:CORE/core_cm7.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 437:CORE/core_cm7.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 438:CORE/core_cm7.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 439:CORE/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 440:CORE/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 441:CORE/core_cm7.h **** } CONTROL_Type;
 442:CORE/core_cm7.h **** 
 443:CORE/core_cm7.h **** /* CONTROL Register Definitions */
 444:CORE/core_cm7.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 445:CORE/core_cm7.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 446:CORE/core_cm7.h **** 
 447:CORE/core_cm7.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 448:CORE/core_cm7.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 449:CORE/core_cm7.h **** 
 450:CORE/core_cm7.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 451:CORE/core_cm7.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 452:CORE/core_cm7.h **** 
 453:CORE/core_cm7.h **** /*@} end of group CMSIS_CORE */
 454:CORE/core_cm7.h **** 
 455:CORE/core_cm7.h **** 
 456:CORE/core_cm7.h **** /**
ARM GAS  /tmp/ccSMeinc.s 			page 22


 457:CORE/core_cm7.h ****   \ingroup    CMSIS_core_register
 458:CORE/core_cm7.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 459:CORE/core_cm7.h ****   \brief      Type definitions for the NVIC Registers
 460:CORE/core_cm7.h ****   @{
 461:CORE/core_cm7.h ****  */
 462:CORE/core_cm7.h **** 
 463:CORE/core_cm7.h **** /**
 464:CORE/core_cm7.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 465:CORE/core_cm7.h ****  */
 466:CORE/core_cm7.h **** typedef struct
 467:CORE/core_cm7.h **** {
 468:CORE/core_cm7.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 469:CORE/core_cm7.h ****         uint32_t RESERVED0[24U];
 470:CORE/core_cm7.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 471:CORE/core_cm7.h ****         uint32_t RSERVED1[24U];
 472:CORE/core_cm7.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 473:CORE/core_cm7.h ****         uint32_t RESERVED2[24U];
 474:CORE/core_cm7.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 475:CORE/core_cm7.h ****         uint32_t RESERVED3[24U];
 476:CORE/core_cm7.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 477:CORE/core_cm7.h ****         uint32_t RESERVED4[56U];
 478:CORE/core_cm7.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 479:CORE/core_cm7.h ****         uint32_t RESERVED5[644U];
 480:CORE/core_cm7.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 481:CORE/core_cm7.h **** }  NVIC_Type;
 482:CORE/core_cm7.h **** 
 483:CORE/core_cm7.h **** /* Software Triggered Interrupt Register Definitions */
 484:CORE/core_cm7.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 485:CORE/core_cm7.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 486:CORE/core_cm7.h **** 
 487:CORE/core_cm7.h **** /*@} end of group CMSIS_NVIC */
 488:CORE/core_cm7.h **** 
 489:CORE/core_cm7.h **** 
 490:CORE/core_cm7.h **** /**
 491:CORE/core_cm7.h ****   \ingroup  CMSIS_core_register
 492:CORE/core_cm7.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 493:CORE/core_cm7.h ****   \brief    Type definitions for the System Control Block Registers
 494:CORE/core_cm7.h ****   @{
 495:CORE/core_cm7.h ****  */
 496:CORE/core_cm7.h **** 
 497:CORE/core_cm7.h **** /**
 498:CORE/core_cm7.h ****   \brief  Structure type to access the System Control Block (SCB).
 499:CORE/core_cm7.h ****  */
 500:CORE/core_cm7.h **** typedef struct
 501:CORE/core_cm7.h **** {
 502:CORE/core_cm7.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 503:CORE/core_cm7.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 504:CORE/core_cm7.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 505:CORE/core_cm7.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 506:CORE/core_cm7.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 507:CORE/core_cm7.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 508:CORE/core_cm7.h ****   __IOM uint8_t  SHPR[12U];              /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 509:CORE/core_cm7.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 510:CORE/core_cm7.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 511:CORE/core_cm7.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 512:CORE/core_cm7.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 513:CORE/core_cm7.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
ARM GAS  /tmp/ccSMeinc.s 			page 23


 514:CORE/core_cm7.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 515:CORE/core_cm7.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 516:CORE/core_cm7.h ****   __IM  uint32_t ID_PFR[2U];             /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 517:CORE/core_cm7.h ****   __IM  uint32_t ID_DFR;                 /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 518:CORE/core_cm7.h ****   __IM  uint32_t ID_AFR;                 /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 519:CORE/core_cm7.h ****   __IM  uint32_t ID_MFR[4U];             /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 520:CORE/core_cm7.h ****   __IM  uint32_t ID_ISAR[5U];            /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 521:CORE/core_cm7.h ****         uint32_t RESERVED0[1U];
 522:CORE/core_cm7.h ****   __IM  uint32_t CLIDR;                  /*!< Offset: 0x078 (R/ )  Cache Level ID register */
 523:CORE/core_cm7.h ****   __IM  uint32_t CTR;                    /*!< Offset: 0x07C (R/ )  Cache Type register */
 524:CORE/core_cm7.h ****   __IM  uint32_t CCSIDR;                 /*!< Offset: 0x080 (R/ )  Cache Size ID Register */
 525:CORE/core_cm7.h ****   __IOM uint32_t CSSELR;                 /*!< Offset: 0x084 (R/W)  Cache Size Selection Register */
 526:CORE/core_cm7.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 527:CORE/core_cm7.h ****         uint32_t RESERVED3[93U];
 528:CORE/core_cm7.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0x200 ( /W)  Software Triggered Interrupt Reg
 529:CORE/core_cm7.h ****         uint32_t RESERVED4[15U];
 530:CORE/core_cm7.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x240 (R/ )  Media and VFP Feature Register 0
 531:CORE/core_cm7.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x244 (R/ )  Media and VFP Feature Register 1
 532:CORE/core_cm7.h ****   __IM  uint32_t MVFR2;                  /*!< Offset: 0x248 (R/ )  Media and VFP Feature Register 1
 533:CORE/core_cm7.h ****         uint32_t RESERVED5[1U];
 534:CORE/core_cm7.h ****   __OM  uint32_t ICIALLU;                /*!< Offset: 0x250 ( /W)  I-Cache Invalidate All to PoU */
 535:CORE/core_cm7.h ****         uint32_t RESERVED6[1U];
 536:CORE/core_cm7.h ****   __OM  uint32_t ICIMVAU;                /*!< Offset: 0x258 ( /W)  I-Cache Invalidate by MVA to PoU
 537:CORE/core_cm7.h ****   __OM  uint32_t DCIMVAC;                /*!< Offset: 0x25C ( /W)  D-Cache Invalidate by MVA to PoC
 538:CORE/core_cm7.h ****   __OM  uint32_t DCISW;                  /*!< Offset: 0x260 ( /W)  D-Cache Invalidate by Set-way */
 539:CORE/core_cm7.h ****   __OM  uint32_t DCCMVAU;                /*!< Offset: 0x264 ( /W)  D-Cache Clean by MVA to PoU */
 540:CORE/core_cm7.h ****   __OM  uint32_t DCCMVAC;                /*!< Offset: 0x268 ( /W)  D-Cache Clean by MVA to PoC */
 541:CORE/core_cm7.h ****   __OM  uint32_t DCCSW;                  /*!< Offset: 0x26C ( /W)  D-Cache Clean by Set-way */
 542:CORE/core_cm7.h ****   __OM  uint32_t DCCIMVAC;               /*!< Offset: 0x270 ( /W)  D-Cache Clean and Invalidate by 
 543:CORE/core_cm7.h ****   __OM  uint32_t DCCISW;                 /*!< Offset: 0x274 ( /W)  D-Cache Clean and Invalidate by 
 544:CORE/core_cm7.h ****         uint32_t RESERVED7[6U];
 545:CORE/core_cm7.h ****   __IOM uint32_t ITCMCR;                 /*!< Offset: 0x290 (R/W)  Instruction Tightly-Coupled Memo
 546:CORE/core_cm7.h ****   __IOM uint32_t DTCMCR;                 /*!< Offset: 0x294 (R/W)  Data Tightly-Coupled Memory Cont
 547:CORE/core_cm7.h ****   __IOM uint32_t AHBPCR;                 /*!< Offset: 0x298 (R/W)  AHBP Control Register */
 548:CORE/core_cm7.h ****   __IOM uint32_t CACR;                   /*!< Offset: 0x29C (R/W)  L1 Cache Control Register */
 549:CORE/core_cm7.h ****   __IOM uint32_t AHBSCR;                 /*!< Offset: 0x2A0 (R/W)  AHB Slave Control Register */
 550:CORE/core_cm7.h ****         uint32_t RESERVED8[1U];
 551:CORE/core_cm7.h ****   __IOM uint32_t ABFSR;                  /*!< Offset: 0x2A8 (R/W)  Auxiliary Bus Fault Status Regis
 552:CORE/core_cm7.h **** } SCB_Type;
 553:CORE/core_cm7.h **** 
 554:CORE/core_cm7.h **** /* SCB CPUID Register Definitions */
 555:CORE/core_cm7.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 556:CORE/core_cm7.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 557:CORE/core_cm7.h **** 
 558:CORE/core_cm7.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 559:CORE/core_cm7.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 560:CORE/core_cm7.h **** 
 561:CORE/core_cm7.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 562:CORE/core_cm7.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 563:CORE/core_cm7.h **** 
 564:CORE/core_cm7.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 565:CORE/core_cm7.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 566:CORE/core_cm7.h **** 
 567:CORE/core_cm7.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 568:CORE/core_cm7.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 569:CORE/core_cm7.h **** 
 570:CORE/core_cm7.h **** /* SCB Interrupt Control State Register Definitions */
ARM GAS  /tmp/ccSMeinc.s 			page 24


 571:CORE/core_cm7.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 572:CORE/core_cm7.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 573:CORE/core_cm7.h **** 
 574:CORE/core_cm7.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 575:CORE/core_cm7.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 576:CORE/core_cm7.h **** 
 577:CORE/core_cm7.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 578:CORE/core_cm7.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 579:CORE/core_cm7.h **** 
 580:CORE/core_cm7.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 581:CORE/core_cm7.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 582:CORE/core_cm7.h **** 
 583:CORE/core_cm7.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 584:CORE/core_cm7.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 585:CORE/core_cm7.h **** 
 586:CORE/core_cm7.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 587:CORE/core_cm7.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 588:CORE/core_cm7.h **** 
 589:CORE/core_cm7.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 590:CORE/core_cm7.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 591:CORE/core_cm7.h **** 
 592:CORE/core_cm7.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 593:CORE/core_cm7.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 594:CORE/core_cm7.h **** 
 595:CORE/core_cm7.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 596:CORE/core_cm7.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 597:CORE/core_cm7.h **** 
 598:CORE/core_cm7.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 599:CORE/core_cm7.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 600:CORE/core_cm7.h **** 
 601:CORE/core_cm7.h **** /* SCB Vector Table Offset Register Definitions */
 602:CORE/core_cm7.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 603:CORE/core_cm7.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 604:CORE/core_cm7.h **** 
 605:CORE/core_cm7.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 606:CORE/core_cm7.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 607:CORE/core_cm7.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 608:CORE/core_cm7.h **** 
 609:CORE/core_cm7.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 610:CORE/core_cm7.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 611:CORE/core_cm7.h **** 
 612:CORE/core_cm7.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 613:CORE/core_cm7.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 614:CORE/core_cm7.h **** 
 615:CORE/core_cm7.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 616:CORE/core_cm7.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 617:CORE/core_cm7.h **** 
 618:CORE/core_cm7.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 619:CORE/core_cm7.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 620:CORE/core_cm7.h **** 
 621:CORE/core_cm7.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 622:CORE/core_cm7.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 623:CORE/core_cm7.h **** 
 624:CORE/core_cm7.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 625:CORE/core_cm7.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 626:CORE/core_cm7.h **** 
 627:CORE/core_cm7.h **** /* SCB System Control Register Definitions */
ARM GAS  /tmp/ccSMeinc.s 			page 25


 628:CORE/core_cm7.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 629:CORE/core_cm7.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 630:CORE/core_cm7.h **** 
 631:CORE/core_cm7.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 632:CORE/core_cm7.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 633:CORE/core_cm7.h **** 
 634:CORE/core_cm7.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 635:CORE/core_cm7.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 636:CORE/core_cm7.h **** 
 637:CORE/core_cm7.h **** /* SCB Configuration Control Register Definitions */
 638:CORE/core_cm7.h **** #define SCB_CCR_BP_Pos                      18U                                           /*!< SCB 
 639:CORE/core_cm7.h **** #define SCB_CCR_BP_Msk                     (1UL << SCB_CCR_BP_Pos)                        /*!< SCB 
 640:CORE/core_cm7.h **** 
 641:CORE/core_cm7.h **** #define SCB_CCR_IC_Pos                      17U                                           /*!< SCB 
 642:CORE/core_cm7.h **** #define SCB_CCR_IC_Msk                     (1UL << SCB_CCR_IC_Pos)                        /*!< SCB 
 643:CORE/core_cm7.h **** 
 644:CORE/core_cm7.h **** #define SCB_CCR_DC_Pos                      16U                                           /*!< SCB 
 645:CORE/core_cm7.h **** #define SCB_CCR_DC_Msk                     (1UL << SCB_CCR_DC_Pos)                        /*!< SCB 
 646:CORE/core_cm7.h **** 
 647:CORE/core_cm7.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 648:CORE/core_cm7.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 649:CORE/core_cm7.h **** 
 650:CORE/core_cm7.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 651:CORE/core_cm7.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 652:CORE/core_cm7.h **** 
 653:CORE/core_cm7.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 654:CORE/core_cm7.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 655:CORE/core_cm7.h **** 
 656:CORE/core_cm7.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 657:CORE/core_cm7.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 658:CORE/core_cm7.h **** 
 659:CORE/core_cm7.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 660:CORE/core_cm7.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 661:CORE/core_cm7.h **** 
 662:CORE/core_cm7.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 663:CORE/core_cm7.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 664:CORE/core_cm7.h **** 
 665:CORE/core_cm7.h **** /* SCB System Handler Control and State Register Definitions */
 666:CORE/core_cm7.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 667:CORE/core_cm7.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 668:CORE/core_cm7.h **** 
 669:CORE/core_cm7.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 670:CORE/core_cm7.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 671:CORE/core_cm7.h **** 
 672:CORE/core_cm7.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 673:CORE/core_cm7.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 674:CORE/core_cm7.h **** 
 675:CORE/core_cm7.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 676:CORE/core_cm7.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 677:CORE/core_cm7.h **** 
 678:CORE/core_cm7.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 679:CORE/core_cm7.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 680:CORE/core_cm7.h **** 
 681:CORE/core_cm7.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 682:CORE/core_cm7.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 683:CORE/core_cm7.h **** 
 684:CORE/core_cm7.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
ARM GAS  /tmp/ccSMeinc.s 			page 26


 685:CORE/core_cm7.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 686:CORE/core_cm7.h **** 
 687:CORE/core_cm7.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 688:CORE/core_cm7.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 689:CORE/core_cm7.h **** 
 690:CORE/core_cm7.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 691:CORE/core_cm7.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 692:CORE/core_cm7.h **** 
 693:CORE/core_cm7.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 694:CORE/core_cm7.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 695:CORE/core_cm7.h **** 
 696:CORE/core_cm7.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 697:CORE/core_cm7.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 698:CORE/core_cm7.h **** 
 699:CORE/core_cm7.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 700:CORE/core_cm7.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 701:CORE/core_cm7.h **** 
 702:CORE/core_cm7.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 703:CORE/core_cm7.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 704:CORE/core_cm7.h **** 
 705:CORE/core_cm7.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 706:CORE/core_cm7.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 707:CORE/core_cm7.h **** 
 708:CORE/core_cm7.h **** /* SCB Configurable Fault Status Register Definitions */
 709:CORE/core_cm7.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 710:CORE/core_cm7.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 711:CORE/core_cm7.h **** 
 712:CORE/core_cm7.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 713:CORE/core_cm7.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 714:CORE/core_cm7.h **** 
 715:CORE/core_cm7.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 716:CORE/core_cm7.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 717:CORE/core_cm7.h **** 
 718:CORE/core_cm7.h **** /* SCB Hard Fault Status Register Definitions */
 719:CORE/core_cm7.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 720:CORE/core_cm7.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 721:CORE/core_cm7.h **** 
 722:CORE/core_cm7.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 723:CORE/core_cm7.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 724:CORE/core_cm7.h **** 
 725:CORE/core_cm7.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 726:CORE/core_cm7.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 727:CORE/core_cm7.h **** 
 728:CORE/core_cm7.h **** /* SCB Debug Fault Status Register Definitions */
 729:CORE/core_cm7.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 730:CORE/core_cm7.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 731:CORE/core_cm7.h **** 
 732:CORE/core_cm7.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 733:CORE/core_cm7.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 734:CORE/core_cm7.h **** 
 735:CORE/core_cm7.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 736:CORE/core_cm7.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 737:CORE/core_cm7.h **** 
 738:CORE/core_cm7.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 739:CORE/core_cm7.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 740:CORE/core_cm7.h **** 
 741:CORE/core_cm7.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
ARM GAS  /tmp/ccSMeinc.s 			page 27


 742:CORE/core_cm7.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 743:CORE/core_cm7.h **** 
 744:CORE/core_cm7.h **** /* SCB Cache Level ID Register Definitions */
 745:CORE/core_cm7.h **** #define SCB_CLIDR_LOUU_Pos                 27U                                            /*!< SCB 
 746:CORE/core_cm7.h **** #define SCB_CLIDR_LOUU_Msk                 (7UL << SCB_CLIDR_LOUU_Pos)                    /*!< SCB 
 747:CORE/core_cm7.h **** 
 748:CORE/core_cm7.h **** #define SCB_CLIDR_LOC_Pos                  24U                                            /*!< SCB 
 749:CORE/core_cm7.h **** #define SCB_CLIDR_LOC_Msk                  (7UL << SCB_CLIDR_LOC_Pos)                     /*!< SCB 
 750:CORE/core_cm7.h **** 
 751:CORE/core_cm7.h **** /* SCB Cache Type Register Definitions */
 752:CORE/core_cm7.h **** #define SCB_CTR_FORMAT_Pos                 29U                                            /*!< SCB 
 753:CORE/core_cm7.h **** #define SCB_CTR_FORMAT_Msk                 (7UL << SCB_CTR_FORMAT_Pos)                    /*!< SCB 
 754:CORE/core_cm7.h **** 
 755:CORE/core_cm7.h **** #define SCB_CTR_CWG_Pos                    24U                                            /*!< SCB 
 756:CORE/core_cm7.h **** #define SCB_CTR_CWG_Msk                    (0xFUL << SCB_CTR_CWG_Pos)                     /*!< SCB 
 757:CORE/core_cm7.h **** 
 758:CORE/core_cm7.h **** #define SCB_CTR_ERG_Pos                    20U                                            /*!< SCB 
 759:CORE/core_cm7.h **** #define SCB_CTR_ERG_Msk                    (0xFUL << SCB_CTR_ERG_Pos)                     /*!< SCB 
 760:CORE/core_cm7.h **** 
 761:CORE/core_cm7.h **** #define SCB_CTR_DMINLINE_Pos               16U                                            /*!< SCB 
 762:CORE/core_cm7.h **** #define SCB_CTR_DMINLINE_Msk               (0xFUL << SCB_CTR_DMINLINE_Pos)                /*!< SCB 
 763:CORE/core_cm7.h **** 
 764:CORE/core_cm7.h **** #define SCB_CTR_IMINLINE_Pos                0U                                            /*!< SCB 
 765:CORE/core_cm7.h **** #define SCB_CTR_IMINLINE_Msk               (0xFUL /*<< SCB_CTR_IMINLINE_Pos*/)            /*!< SCB 
 766:CORE/core_cm7.h **** 
 767:CORE/core_cm7.h **** /* SCB Cache Size ID Register Definitions */
 768:CORE/core_cm7.h **** #define SCB_CCSIDR_WT_Pos                  31U                                            /*!< SCB 
 769:CORE/core_cm7.h **** #define SCB_CCSIDR_WT_Msk                  (1UL << SCB_CCSIDR_WT_Pos)                     /*!< SCB 
 770:CORE/core_cm7.h **** 
 771:CORE/core_cm7.h **** #define SCB_CCSIDR_WB_Pos                  30U                                            /*!< SCB 
 772:CORE/core_cm7.h **** #define SCB_CCSIDR_WB_Msk                  (1UL << SCB_CCSIDR_WB_Pos)                     /*!< SCB 
 773:CORE/core_cm7.h **** 
 774:CORE/core_cm7.h **** #define SCB_CCSIDR_RA_Pos                  29U                                            /*!< SCB 
 775:CORE/core_cm7.h **** #define SCB_CCSIDR_RA_Msk                  (1UL << SCB_CCSIDR_RA_Pos)                     /*!< SCB 
 776:CORE/core_cm7.h **** 
 777:CORE/core_cm7.h **** #define SCB_CCSIDR_WA_Pos                  28U                                            /*!< SCB 
 778:CORE/core_cm7.h **** #define SCB_CCSIDR_WA_Msk                  (1UL << SCB_CCSIDR_WA_Pos)                     /*!< SCB 
 779:CORE/core_cm7.h **** 
 780:CORE/core_cm7.h **** #define SCB_CCSIDR_NUMSETS_Pos             13U                                            /*!< SCB 
 781:CORE/core_cm7.h **** #define SCB_CCSIDR_NUMSETS_Msk             (0x7FFFUL << SCB_CCSIDR_NUMSETS_Pos)           /*!< SCB 
 782:CORE/core_cm7.h **** 
 783:CORE/core_cm7.h **** #define SCB_CCSIDR_ASSOCIATIVITY_Pos        3U                                            /*!< SCB 
 784:CORE/core_cm7.h **** #define SCB_CCSIDR_ASSOCIATIVITY_Msk       (0x3FFUL << SCB_CCSIDR_ASSOCIATIVITY_Pos)      /*!< SCB 
 785:CORE/core_cm7.h **** 
 786:CORE/core_cm7.h **** #define SCB_CCSIDR_LINESIZE_Pos             0U                                            /*!< SCB 
 787:CORE/core_cm7.h **** #define SCB_CCSIDR_LINESIZE_Msk            (7UL /*<< SCB_CCSIDR_LINESIZE_Pos*/)           /*!< SCB 
 788:CORE/core_cm7.h **** 
 789:CORE/core_cm7.h **** /* SCB Cache Size Selection Register Definitions */
 790:CORE/core_cm7.h **** #define SCB_CSSELR_LEVEL_Pos                1U                                            /*!< SCB 
 791:CORE/core_cm7.h **** #define SCB_CSSELR_LEVEL_Msk               (7UL << SCB_CSSELR_LEVEL_Pos)                  /*!< SCB 
 792:CORE/core_cm7.h **** 
 793:CORE/core_cm7.h **** #define SCB_CSSELR_IND_Pos                  0U                                            /*!< SCB 
 794:CORE/core_cm7.h **** #define SCB_CSSELR_IND_Msk                 (1UL /*<< SCB_CSSELR_IND_Pos*/)                /*!< SCB 
 795:CORE/core_cm7.h **** 
 796:CORE/core_cm7.h **** /* SCB Software Triggered Interrupt Register Definitions */
 797:CORE/core_cm7.h **** #define SCB_STIR_INTID_Pos                  0U                                            /*!< SCB 
 798:CORE/core_cm7.h **** #define SCB_STIR_INTID_Msk                 (0x1FFUL /*<< SCB_STIR_INTID_Pos*/)            /*!< SCB 
ARM GAS  /tmp/ccSMeinc.s 			page 28


 799:CORE/core_cm7.h **** 
 800:CORE/core_cm7.h **** /* SCB D-Cache Invalidate by Set-way Register Definitions */
 801:CORE/core_cm7.h **** #define SCB_DCISW_WAY_Pos                  30U                                            /*!< SCB 
 802:CORE/core_cm7.h **** #define SCB_DCISW_WAY_Msk                  (3UL << SCB_DCISW_WAY_Pos)                     /*!< SCB 
 803:CORE/core_cm7.h **** 
 804:CORE/core_cm7.h **** #define SCB_DCISW_SET_Pos                   5U                                            /*!< SCB 
 805:CORE/core_cm7.h **** #define SCB_DCISW_SET_Msk                  (0x1FFUL << SCB_DCISW_SET_Pos)                 /*!< SCB 
 806:CORE/core_cm7.h **** 
 807:CORE/core_cm7.h **** /* SCB D-Cache Clean by Set-way Register Definitions */
 808:CORE/core_cm7.h **** #define SCB_DCCSW_WAY_Pos                  30U                                            /*!< SCB 
 809:CORE/core_cm7.h **** #define SCB_DCCSW_WAY_Msk                  (3UL << SCB_DCCSW_WAY_Pos)                     /*!< SCB 
 810:CORE/core_cm7.h **** 
 811:CORE/core_cm7.h **** #define SCB_DCCSW_SET_Pos                   5U                                            /*!< SCB 
 812:CORE/core_cm7.h **** #define SCB_DCCSW_SET_Msk                  (0x1FFUL << SCB_DCCSW_SET_Pos)                 /*!< SCB 
 813:CORE/core_cm7.h **** 
 814:CORE/core_cm7.h **** /* SCB D-Cache Clean and Invalidate by Set-way Register Definitions */
 815:CORE/core_cm7.h **** #define SCB_DCCISW_WAY_Pos                 30U                                            /*!< SCB 
 816:CORE/core_cm7.h **** #define SCB_DCCISW_WAY_Msk                 (3UL << SCB_DCCISW_WAY_Pos)                    /*!< SCB 
 817:CORE/core_cm7.h **** 
 818:CORE/core_cm7.h **** #define SCB_DCCISW_SET_Pos                  5U                                            /*!< SCB 
 819:CORE/core_cm7.h **** #define SCB_DCCISW_SET_Msk                 (0x1FFUL << SCB_DCCISW_SET_Pos)                /*!< SCB 
 820:CORE/core_cm7.h **** 
 821:CORE/core_cm7.h **** /* Instruction Tightly-Coupled Memory Control Register Definitions */
 822:CORE/core_cm7.h **** #define SCB_ITCMCR_SZ_Pos                   3U                                            /*!< SCB 
 823:CORE/core_cm7.h **** #define SCB_ITCMCR_SZ_Msk                  (0xFUL << SCB_ITCMCR_SZ_Pos)                   /*!< SCB 
 824:CORE/core_cm7.h **** 
 825:CORE/core_cm7.h **** #define SCB_ITCMCR_RETEN_Pos                2U                                            /*!< SCB 
 826:CORE/core_cm7.h **** #define SCB_ITCMCR_RETEN_Msk               (1UL << SCB_ITCMCR_RETEN_Pos)                  /*!< SCB 
 827:CORE/core_cm7.h **** 
 828:CORE/core_cm7.h **** #define SCB_ITCMCR_RMW_Pos                  1U                                            /*!< SCB 
 829:CORE/core_cm7.h **** #define SCB_ITCMCR_RMW_Msk                 (1UL << SCB_ITCMCR_RMW_Pos)                    /*!< SCB 
 830:CORE/core_cm7.h **** 
 831:CORE/core_cm7.h **** #define SCB_ITCMCR_EN_Pos                   0U                                            /*!< SCB 
 832:CORE/core_cm7.h **** #define SCB_ITCMCR_EN_Msk                  (1UL /*<< SCB_ITCMCR_EN_Pos*/)                 /*!< SCB 
 833:CORE/core_cm7.h **** 
 834:CORE/core_cm7.h **** /* Data Tightly-Coupled Memory Control Register Definitions */
 835:CORE/core_cm7.h **** #define SCB_DTCMCR_SZ_Pos                   3U                                            /*!< SCB 
 836:CORE/core_cm7.h **** #define SCB_DTCMCR_SZ_Msk                  (0xFUL << SCB_DTCMCR_SZ_Pos)                   /*!< SCB 
 837:CORE/core_cm7.h **** 
 838:CORE/core_cm7.h **** #define SCB_DTCMCR_RETEN_Pos                2U                                            /*!< SCB 
 839:CORE/core_cm7.h **** #define SCB_DTCMCR_RETEN_Msk               (1UL << SCB_DTCMCR_RETEN_Pos)                   /*!< SCB
 840:CORE/core_cm7.h **** 
 841:CORE/core_cm7.h **** #define SCB_DTCMCR_RMW_Pos                  1U                                            /*!< SCB 
 842:CORE/core_cm7.h **** #define SCB_DTCMCR_RMW_Msk                 (1UL << SCB_DTCMCR_RMW_Pos)                    /*!< SCB 
 843:CORE/core_cm7.h **** 
 844:CORE/core_cm7.h **** #define SCB_DTCMCR_EN_Pos                   0U                                            /*!< SCB 
 845:CORE/core_cm7.h **** #define SCB_DTCMCR_EN_Msk                  (1UL /*<< SCB_DTCMCR_EN_Pos*/)                 /*!< SCB 
 846:CORE/core_cm7.h **** 
 847:CORE/core_cm7.h **** /* AHBP Control Register Definitions */
 848:CORE/core_cm7.h **** #define SCB_AHBPCR_SZ_Pos                   1U                                            /*!< SCB 
 849:CORE/core_cm7.h **** #define SCB_AHBPCR_SZ_Msk                  (7UL << SCB_AHBPCR_SZ_Pos)                     /*!< SCB 
 850:CORE/core_cm7.h **** 
 851:CORE/core_cm7.h **** #define SCB_AHBPCR_EN_Pos                   0U                                            /*!< SCB 
 852:CORE/core_cm7.h **** #define SCB_AHBPCR_EN_Msk                  (1UL /*<< SCB_AHBPCR_EN_Pos*/)                 /*!< SCB 
 853:CORE/core_cm7.h **** 
 854:CORE/core_cm7.h **** /* L1 Cache Control Register Definitions */
 855:CORE/core_cm7.h **** #define SCB_CACR_FORCEWT_Pos                2U                                            /*!< SCB 
ARM GAS  /tmp/ccSMeinc.s 			page 29


 856:CORE/core_cm7.h **** #define SCB_CACR_FORCEWT_Msk               (1UL << SCB_CACR_FORCEWT_Pos)                  /*!< SCB 
 857:CORE/core_cm7.h **** 
 858:CORE/core_cm7.h **** #define SCB_CACR_ECCEN_Pos                  1U                                            /*!< SCB 
 859:CORE/core_cm7.h **** #define SCB_CACR_ECCEN_Msk                 (1UL << SCB_CACR_ECCEN_Pos)                    /*!< SCB 
 860:CORE/core_cm7.h **** 
 861:CORE/core_cm7.h **** #define SCB_CACR_SIWT_Pos                   0U                                            /*!< SCB 
 862:CORE/core_cm7.h **** #define SCB_CACR_SIWT_Msk                  (1UL /*<< SCB_CACR_SIWT_Pos*/)                 /*!< SCB 
 863:CORE/core_cm7.h **** 
 864:CORE/core_cm7.h **** /* AHBS Control Register Definitions */
 865:CORE/core_cm7.h **** #define SCB_AHBSCR_INITCOUNT_Pos           11U                                            /*!< SCB 
 866:CORE/core_cm7.h **** #define SCB_AHBSCR_INITCOUNT_Msk           (0x1FUL << SCB_AHBPCR_INITCOUNT_Pos)           /*!< SCB 
 867:CORE/core_cm7.h **** 
 868:CORE/core_cm7.h **** #define SCB_AHBSCR_TPRI_Pos                 2U                                            /*!< SCB 
 869:CORE/core_cm7.h **** #define SCB_AHBSCR_TPRI_Msk                (0x1FFUL << SCB_AHBPCR_TPRI_Pos)               /*!< SCB 
 870:CORE/core_cm7.h **** 
 871:CORE/core_cm7.h **** #define SCB_AHBSCR_CTL_Pos                  0U                                            /*!< SCB 
 872:CORE/core_cm7.h **** #define SCB_AHBSCR_CTL_Msk                 (3UL /*<< SCB_AHBPCR_CTL_Pos*/)                /*!< SCB 
 873:CORE/core_cm7.h **** 
 874:CORE/core_cm7.h **** /* Auxiliary Bus Fault Status Register Definitions */
 875:CORE/core_cm7.h **** #define SCB_ABFSR_AXIMTYPE_Pos              8U                                            /*!< SCB 
 876:CORE/core_cm7.h **** #define SCB_ABFSR_AXIMTYPE_Msk             (3UL << SCB_ABFSR_AXIMTYPE_Pos)                /*!< SCB 
 877:CORE/core_cm7.h **** 
 878:CORE/core_cm7.h **** #define SCB_ABFSR_EPPB_Pos                  4U                                            /*!< SCB 
 879:CORE/core_cm7.h **** #define SCB_ABFSR_EPPB_Msk                 (1UL << SCB_ABFSR_EPPB_Pos)                    /*!< SCB 
 880:CORE/core_cm7.h **** 
 881:CORE/core_cm7.h **** #define SCB_ABFSR_AXIM_Pos                  3U                                            /*!< SCB 
 882:CORE/core_cm7.h **** #define SCB_ABFSR_AXIM_Msk                 (1UL << SCB_ABFSR_AXIM_Pos)                    /*!< SCB 
 883:CORE/core_cm7.h **** 
 884:CORE/core_cm7.h **** #define SCB_ABFSR_AHBP_Pos                  2U                                            /*!< SCB 
 885:CORE/core_cm7.h **** #define SCB_ABFSR_AHBP_Msk                 (1UL << SCB_ABFSR_AHBP_Pos)                    /*!< SCB 
 886:CORE/core_cm7.h **** 
 887:CORE/core_cm7.h **** #define SCB_ABFSR_DTCM_Pos                  1U                                            /*!< SCB 
 888:CORE/core_cm7.h **** #define SCB_ABFSR_DTCM_Msk                 (1UL << SCB_ABFSR_DTCM_Pos)                    /*!< SCB 
 889:CORE/core_cm7.h **** 
 890:CORE/core_cm7.h **** #define SCB_ABFSR_ITCM_Pos                  0U                                            /*!< SCB 
 891:CORE/core_cm7.h **** #define SCB_ABFSR_ITCM_Msk                 (1UL /*<< SCB_ABFSR_ITCM_Pos*/)                /*!< SCB 
 892:CORE/core_cm7.h **** 
 893:CORE/core_cm7.h **** /*@} end of group CMSIS_SCB */
 894:CORE/core_cm7.h **** 
 895:CORE/core_cm7.h **** 
 896:CORE/core_cm7.h **** /**
 897:CORE/core_cm7.h ****   \ingroup  CMSIS_core_register
 898:CORE/core_cm7.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 899:CORE/core_cm7.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 900:CORE/core_cm7.h ****   @{
 901:CORE/core_cm7.h ****  */
 902:CORE/core_cm7.h **** 
 903:CORE/core_cm7.h **** /**
 904:CORE/core_cm7.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 905:CORE/core_cm7.h ****  */
 906:CORE/core_cm7.h **** typedef struct
 907:CORE/core_cm7.h **** {
 908:CORE/core_cm7.h ****         uint32_t RESERVED0[1U];
 909:CORE/core_cm7.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 910:CORE/core_cm7.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 911:CORE/core_cm7.h **** } SCnSCB_Type;
 912:CORE/core_cm7.h **** 
ARM GAS  /tmp/ccSMeinc.s 			page 30


 913:CORE/core_cm7.h **** /* Interrupt Controller Type Register Definitions */
 914:CORE/core_cm7.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 915:CORE/core_cm7.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 916:CORE/core_cm7.h **** 
 917:CORE/core_cm7.h **** /* Auxiliary Control Register Definitions */
 918:CORE/core_cm7.h **** #define SCnSCB_ACTLR_DISITMATBFLUSH_Pos    12U                                         /*!< ACTLR: 
 919:CORE/core_cm7.h **** #define SCnSCB_ACTLR_DISITMATBFLUSH_Msk    (1UL << SCnSCB_ACTLR_DISITMATBFLUSH_Pos)    /*!< ACTLR: 
 920:CORE/core_cm7.h **** 
 921:CORE/core_cm7.h **** #define SCnSCB_ACTLR_DISRAMODE_Pos         11U                                         /*!< ACTLR: 
 922:CORE/core_cm7.h **** #define SCnSCB_ACTLR_DISRAMODE_Msk         (1UL << SCnSCB_ACTLR_DISRAMODE_Pos)         /*!< ACTLR: 
 923:CORE/core_cm7.h **** 
 924:CORE/core_cm7.h **** #define SCnSCB_ACTLR_FPEXCODIS_Pos         10U                                         /*!< ACTLR: 
 925:CORE/core_cm7.h **** #define SCnSCB_ACTLR_FPEXCODIS_Msk         (1UL << SCnSCB_ACTLR_FPEXCODIS_Pos)         /*!< ACTLR: 
 926:CORE/core_cm7.h **** 
 927:CORE/core_cm7.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 928:CORE/core_cm7.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 929:CORE/core_cm7.h **** 
 930:CORE/core_cm7.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 931:CORE/core_cm7.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 932:CORE/core_cm7.h **** 
 933:CORE/core_cm7.h **** /*@} end of group CMSIS_SCnotSCB */
 934:CORE/core_cm7.h **** 
 935:CORE/core_cm7.h **** 
 936:CORE/core_cm7.h **** /**
 937:CORE/core_cm7.h ****   \ingroup  CMSIS_core_register
 938:CORE/core_cm7.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 939:CORE/core_cm7.h ****   \brief    Type definitions for the System Timer Registers.
 940:CORE/core_cm7.h ****   @{
 941:CORE/core_cm7.h ****  */
 942:CORE/core_cm7.h **** 
 943:CORE/core_cm7.h **** /**
 944:CORE/core_cm7.h ****   \brief  Structure type to access the System Timer (SysTick).
 945:CORE/core_cm7.h ****  */
 946:CORE/core_cm7.h **** typedef struct
 947:CORE/core_cm7.h **** {
 948:CORE/core_cm7.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 949:CORE/core_cm7.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 950:CORE/core_cm7.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 951:CORE/core_cm7.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 952:CORE/core_cm7.h **** } SysTick_Type;
 953:CORE/core_cm7.h **** 
 954:CORE/core_cm7.h **** /* SysTick Control / Status Register Definitions */
 955:CORE/core_cm7.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 956:CORE/core_cm7.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 957:CORE/core_cm7.h **** 
 958:CORE/core_cm7.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 959:CORE/core_cm7.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 960:CORE/core_cm7.h **** 
 961:CORE/core_cm7.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 962:CORE/core_cm7.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 963:CORE/core_cm7.h **** 
 964:CORE/core_cm7.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 965:CORE/core_cm7.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 966:CORE/core_cm7.h **** 
 967:CORE/core_cm7.h **** /* SysTick Reload Register Definitions */
 968:CORE/core_cm7.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 969:CORE/core_cm7.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
ARM GAS  /tmp/ccSMeinc.s 			page 31


 970:CORE/core_cm7.h **** 
 971:CORE/core_cm7.h **** /* SysTick Current Register Definitions */
 972:CORE/core_cm7.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 973:CORE/core_cm7.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 974:CORE/core_cm7.h **** 
 975:CORE/core_cm7.h **** /* SysTick Calibration Register Definitions */
 976:CORE/core_cm7.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 977:CORE/core_cm7.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 978:CORE/core_cm7.h **** 
 979:CORE/core_cm7.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 980:CORE/core_cm7.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 981:CORE/core_cm7.h **** 
 982:CORE/core_cm7.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 983:CORE/core_cm7.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 984:CORE/core_cm7.h **** 
 985:CORE/core_cm7.h **** /*@} end of group CMSIS_SysTick */
 986:CORE/core_cm7.h **** 
 987:CORE/core_cm7.h **** 
 988:CORE/core_cm7.h **** /**
 989:CORE/core_cm7.h ****   \ingroup  CMSIS_core_register
 990:CORE/core_cm7.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 991:CORE/core_cm7.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 992:CORE/core_cm7.h ****   @{
 993:CORE/core_cm7.h ****  */
 994:CORE/core_cm7.h **** 
 995:CORE/core_cm7.h **** /**
 996:CORE/core_cm7.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 997:CORE/core_cm7.h ****  */
 998:CORE/core_cm7.h **** typedef struct
 999:CORE/core_cm7.h **** {
1000:CORE/core_cm7.h ****   __OM  union
1001:CORE/core_cm7.h ****   {
1002:CORE/core_cm7.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
1003:CORE/core_cm7.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
1004:CORE/core_cm7.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
1005:CORE/core_cm7.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
1006:CORE/core_cm7.h ****         uint32_t RESERVED0[864U];
1007:CORE/core_cm7.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
1008:CORE/core_cm7.h ****         uint32_t RESERVED1[15U];
1009:CORE/core_cm7.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
1010:CORE/core_cm7.h ****         uint32_t RESERVED2[15U];
1011:CORE/core_cm7.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
1012:CORE/core_cm7.h ****         uint32_t RESERVED3[29U];
1013:CORE/core_cm7.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
1014:CORE/core_cm7.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
1015:CORE/core_cm7.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
1016:CORE/core_cm7.h ****         uint32_t RESERVED4[43U];
1017:CORE/core_cm7.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
1018:CORE/core_cm7.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
1019:CORE/core_cm7.h ****         uint32_t RESERVED5[6U];
1020:CORE/core_cm7.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
1021:CORE/core_cm7.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
1022:CORE/core_cm7.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
1023:CORE/core_cm7.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
1024:CORE/core_cm7.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
1025:CORE/core_cm7.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
1026:CORE/core_cm7.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
ARM GAS  /tmp/ccSMeinc.s 			page 32


1027:CORE/core_cm7.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
1028:CORE/core_cm7.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
1029:CORE/core_cm7.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
1030:CORE/core_cm7.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
1031:CORE/core_cm7.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
1032:CORE/core_cm7.h **** } ITM_Type;
1033:CORE/core_cm7.h **** 
1034:CORE/core_cm7.h **** /* ITM Trace Privilege Register Definitions */
1035:CORE/core_cm7.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
1036:CORE/core_cm7.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
1037:CORE/core_cm7.h **** 
1038:CORE/core_cm7.h **** /* ITM Trace Control Register Definitions */
1039:CORE/core_cm7.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
1040:CORE/core_cm7.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
1041:CORE/core_cm7.h **** 
1042:CORE/core_cm7.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
1043:CORE/core_cm7.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
1044:CORE/core_cm7.h **** 
1045:CORE/core_cm7.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
1046:CORE/core_cm7.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
1047:CORE/core_cm7.h **** 
1048:CORE/core_cm7.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
1049:CORE/core_cm7.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
1050:CORE/core_cm7.h **** 
1051:CORE/core_cm7.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
1052:CORE/core_cm7.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
1053:CORE/core_cm7.h **** 
1054:CORE/core_cm7.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
1055:CORE/core_cm7.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
1056:CORE/core_cm7.h **** 
1057:CORE/core_cm7.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
1058:CORE/core_cm7.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
1059:CORE/core_cm7.h **** 
1060:CORE/core_cm7.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
1061:CORE/core_cm7.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
1062:CORE/core_cm7.h **** 
1063:CORE/core_cm7.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
1064:CORE/core_cm7.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
1065:CORE/core_cm7.h **** 
1066:CORE/core_cm7.h **** /* ITM Integration Write Register Definitions */
1067:CORE/core_cm7.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
1068:CORE/core_cm7.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
1069:CORE/core_cm7.h **** 
1070:CORE/core_cm7.h **** /* ITM Integration Read Register Definitions */
1071:CORE/core_cm7.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
1072:CORE/core_cm7.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
1073:CORE/core_cm7.h **** 
1074:CORE/core_cm7.h **** /* ITM Integration Mode Control Register Definitions */
1075:CORE/core_cm7.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
1076:CORE/core_cm7.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
1077:CORE/core_cm7.h **** 
1078:CORE/core_cm7.h **** /* ITM Lock Status Register Definitions */
1079:CORE/core_cm7.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
1080:CORE/core_cm7.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
1081:CORE/core_cm7.h **** 
1082:CORE/core_cm7.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
1083:CORE/core_cm7.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
ARM GAS  /tmp/ccSMeinc.s 			page 33


1084:CORE/core_cm7.h **** 
1085:CORE/core_cm7.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
1086:CORE/core_cm7.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
1087:CORE/core_cm7.h **** 
1088:CORE/core_cm7.h **** /*@}*/ /* end of group CMSIS_ITM */
1089:CORE/core_cm7.h **** 
1090:CORE/core_cm7.h **** 
1091:CORE/core_cm7.h **** /**
1092:CORE/core_cm7.h ****   \ingroup  CMSIS_core_register
1093:CORE/core_cm7.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
1094:CORE/core_cm7.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
1095:CORE/core_cm7.h ****   @{
1096:CORE/core_cm7.h ****  */
1097:CORE/core_cm7.h **** 
1098:CORE/core_cm7.h **** /**
1099:CORE/core_cm7.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
1100:CORE/core_cm7.h ****  */
1101:CORE/core_cm7.h **** typedef struct
1102:CORE/core_cm7.h **** {
1103:CORE/core_cm7.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
1104:CORE/core_cm7.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
1105:CORE/core_cm7.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
1106:CORE/core_cm7.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
1107:CORE/core_cm7.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
1108:CORE/core_cm7.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
1109:CORE/core_cm7.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
1110:CORE/core_cm7.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
1111:CORE/core_cm7.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
1112:CORE/core_cm7.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
1113:CORE/core_cm7.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
1114:CORE/core_cm7.h ****         uint32_t RESERVED0[1U];
1115:CORE/core_cm7.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
1116:CORE/core_cm7.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
1117:CORE/core_cm7.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
1118:CORE/core_cm7.h ****         uint32_t RESERVED1[1U];
1119:CORE/core_cm7.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
1120:CORE/core_cm7.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
1121:CORE/core_cm7.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
1122:CORE/core_cm7.h ****         uint32_t RESERVED2[1U];
1123:CORE/core_cm7.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
1124:CORE/core_cm7.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
1125:CORE/core_cm7.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
1126:CORE/core_cm7.h ****         uint32_t RESERVED3[981U];
1127:CORE/core_cm7.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 (  W)  Lock Access Register */
1128:CORE/core_cm7.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R  )  Lock Status Register */
1129:CORE/core_cm7.h **** } DWT_Type;
1130:CORE/core_cm7.h **** 
1131:CORE/core_cm7.h **** /* DWT Control Register Definitions */
1132:CORE/core_cm7.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
1133:CORE/core_cm7.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
1134:CORE/core_cm7.h **** 
1135:CORE/core_cm7.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
1136:CORE/core_cm7.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
1137:CORE/core_cm7.h **** 
1138:CORE/core_cm7.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
1139:CORE/core_cm7.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
1140:CORE/core_cm7.h **** 
ARM GAS  /tmp/ccSMeinc.s 			page 34


1141:CORE/core_cm7.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
1142:CORE/core_cm7.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
1143:CORE/core_cm7.h **** 
1144:CORE/core_cm7.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
1145:CORE/core_cm7.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
1146:CORE/core_cm7.h **** 
1147:CORE/core_cm7.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
1148:CORE/core_cm7.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
1149:CORE/core_cm7.h **** 
1150:CORE/core_cm7.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
1151:CORE/core_cm7.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
1152:CORE/core_cm7.h **** 
1153:CORE/core_cm7.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
1154:CORE/core_cm7.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
1155:CORE/core_cm7.h **** 
1156:CORE/core_cm7.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
1157:CORE/core_cm7.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
1158:CORE/core_cm7.h **** 
1159:CORE/core_cm7.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
1160:CORE/core_cm7.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
1161:CORE/core_cm7.h **** 
1162:CORE/core_cm7.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
1163:CORE/core_cm7.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
1164:CORE/core_cm7.h **** 
1165:CORE/core_cm7.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
1166:CORE/core_cm7.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
1167:CORE/core_cm7.h **** 
1168:CORE/core_cm7.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
1169:CORE/core_cm7.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
1170:CORE/core_cm7.h **** 
1171:CORE/core_cm7.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
1172:CORE/core_cm7.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
1173:CORE/core_cm7.h **** 
1174:CORE/core_cm7.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
1175:CORE/core_cm7.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
1176:CORE/core_cm7.h **** 
1177:CORE/core_cm7.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
1178:CORE/core_cm7.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
1179:CORE/core_cm7.h **** 
1180:CORE/core_cm7.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
1181:CORE/core_cm7.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
1182:CORE/core_cm7.h **** 
1183:CORE/core_cm7.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
1184:CORE/core_cm7.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
1185:CORE/core_cm7.h **** 
1186:CORE/core_cm7.h **** /* DWT CPI Count Register Definitions */
1187:CORE/core_cm7.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
1188:CORE/core_cm7.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
1189:CORE/core_cm7.h **** 
1190:CORE/core_cm7.h **** /* DWT Exception Overhead Count Register Definitions */
1191:CORE/core_cm7.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1192:CORE/core_cm7.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1193:CORE/core_cm7.h **** 
1194:CORE/core_cm7.h **** /* DWT Sleep Count Register Definitions */
1195:CORE/core_cm7.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1196:CORE/core_cm7.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1197:CORE/core_cm7.h **** 
ARM GAS  /tmp/ccSMeinc.s 			page 35


1198:CORE/core_cm7.h **** /* DWT LSU Count Register Definitions */
1199:CORE/core_cm7.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1200:CORE/core_cm7.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1201:CORE/core_cm7.h **** 
1202:CORE/core_cm7.h **** /* DWT Folded-instruction Count Register Definitions */
1203:CORE/core_cm7.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1204:CORE/core_cm7.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1205:CORE/core_cm7.h **** 
1206:CORE/core_cm7.h **** /* DWT Comparator Mask Register Definitions */
1207:CORE/core_cm7.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1208:CORE/core_cm7.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1209:CORE/core_cm7.h **** 
1210:CORE/core_cm7.h **** /* DWT Comparator Function Register Definitions */
1211:CORE/core_cm7.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1212:CORE/core_cm7.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1213:CORE/core_cm7.h **** 
1214:CORE/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1215:CORE/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1216:CORE/core_cm7.h **** 
1217:CORE/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1218:CORE/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1219:CORE/core_cm7.h **** 
1220:CORE/core_cm7.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1221:CORE/core_cm7.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1222:CORE/core_cm7.h **** 
1223:CORE/core_cm7.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1224:CORE/core_cm7.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1225:CORE/core_cm7.h **** 
1226:CORE/core_cm7.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1227:CORE/core_cm7.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1228:CORE/core_cm7.h **** 
1229:CORE/core_cm7.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1230:CORE/core_cm7.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1231:CORE/core_cm7.h **** 
1232:CORE/core_cm7.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1233:CORE/core_cm7.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1234:CORE/core_cm7.h **** 
1235:CORE/core_cm7.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1236:CORE/core_cm7.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1237:CORE/core_cm7.h **** 
1238:CORE/core_cm7.h **** /*@}*/ /* end of group CMSIS_DWT */
1239:CORE/core_cm7.h **** 
1240:CORE/core_cm7.h **** 
1241:CORE/core_cm7.h **** /**
1242:CORE/core_cm7.h ****   \ingroup  CMSIS_core_register
1243:CORE/core_cm7.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1244:CORE/core_cm7.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1245:CORE/core_cm7.h ****   @{
1246:CORE/core_cm7.h ****  */
1247:CORE/core_cm7.h **** 
1248:CORE/core_cm7.h **** /**
1249:CORE/core_cm7.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1250:CORE/core_cm7.h ****  */
1251:CORE/core_cm7.h **** typedef struct
1252:CORE/core_cm7.h **** {
1253:CORE/core_cm7.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1254:CORE/core_cm7.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
ARM GAS  /tmp/ccSMeinc.s 			page 36


1255:CORE/core_cm7.h ****         uint32_t RESERVED0[2U];
1256:CORE/core_cm7.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1257:CORE/core_cm7.h ****         uint32_t RESERVED1[55U];
1258:CORE/core_cm7.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1259:CORE/core_cm7.h ****         uint32_t RESERVED2[131U];
1260:CORE/core_cm7.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1261:CORE/core_cm7.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1262:CORE/core_cm7.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1263:CORE/core_cm7.h ****         uint32_t RESERVED3[759U];
1264:CORE/core_cm7.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1265:CORE/core_cm7.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1266:CORE/core_cm7.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1267:CORE/core_cm7.h ****         uint32_t RESERVED4[1U];
1268:CORE/core_cm7.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1269:CORE/core_cm7.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1270:CORE/core_cm7.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1271:CORE/core_cm7.h ****         uint32_t RESERVED5[39U];
1272:CORE/core_cm7.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1273:CORE/core_cm7.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1274:CORE/core_cm7.h ****         uint32_t RESERVED7[8U];
1275:CORE/core_cm7.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1276:CORE/core_cm7.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1277:CORE/core_cm7.h **** } TPI_Type;
1278:CORE/core_cm7.h **** 
1279:CORE/core_cm7.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1280:CORE/core_cm7.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1281:CORE/core_cm7.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1282:CORE/core_cm7.h **** 
1283:CORE/core_cm7.h **** /* TPI Selected Pin Protocol Register Definitions */
1284:CORE/core_cm7.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1285:CORE/core_cm7.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1286:CORE/core_cm7.h **** 
1287:CORE/core_cm7.h **** /* TPI Formatter and Flush Status Register Definitions */
1288:CORE/core_cm7.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1289:CORE/core_cm7.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1290:CORE/core_cm7.h **** 
1291:CORE/core_cm7.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1292:CORE/core_cm7.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1293:CORE/core_cm7.h **** 
1294:CORE/core_cm7.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1295:CORE/core_cm7.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1296:CORE/core_cm7.h **** 
1297:CORE/core_cm7.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1298:CORE/core_cm7.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1299:CORE/core_cm7.h **** 
1300:CORE/core_cm7.h **** /* TPI Formatter and Flush Control Register Definitions */
1301:CORE/core_cm7.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1302:CORE/core_cm7.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1303:CORE/core_cm7.h **** 
1304:CORE/core_cm7.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1305:CORE/core_cm7.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1306:CORE/core_cm7.h **** 
1307:CORE/core_cm7.h **** /* TPI TRIGGER Register Definitions */
1308:CORE/core_cm7.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1309:CORE/core_cm7.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1310:CORE/core_cm7.h **** 
1311:CORE/core_cm7.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
ARM GAS  /tmp/ccSMeinc.s 			page 37


1312:CORE/core_cm7.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1313:CORE/core_cm7.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1314:CORE/core_cm7.h **** 
1315:CORE/core_cm7.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1316:CORE/core_cm7.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1317:CORE/core_cm7.h **** 
1318:CORE/core_cm7.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1319:CORE/core_cm7.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1320:CORE/core_cm7.h **** 
1321:CORE/core_cm7.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1322:CORE/core_cm7.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1323:CORE/core_cm7.h **** 
1324:CORE/core_cm7.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1325:CORE/core_cm7.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1326:CORE/core_cm7.h **** 
1327:CORE/core_cm7.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1328:CORE/core_cm7.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1329:CORE/core_cm7.h **** 
1330:CORE/core_cm7.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1331:CORE/core_cm7.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1332:CORE/core_cm7.h **** 
1333:CORE/core_cm7.h **** /* TPI ITATBCTR2 Register Definitions */
1334:CORE/core_cm7.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1335:CORE/core_cm7.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1336:CORE/core_cm7.h **** 
1337:CORE/core_cm7.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1338:CORE/core_cm7.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1339:CORE/core_cm7.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1340:CORE/core_cm7.h **** 
1341:CORE/core_cm7.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1342:CORE/core_cm7.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1343:CORE/core_cm7.h **** 
1344:CORE/core_cm7.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1345:CORE/core_cm7.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1346:CORE/core_cm7.h **** 
1347:CORE/core_cm7.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1348:CORE/core_cm7.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1349:CORE/core_cm7.h **** 
1350:CORE/core_cm7.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1351:CORE/core_cm7.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1352:CORE/core_cm7.h **** 
1353:CORE/core_cm7.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1354:CORE/core_cm7.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1355:CORE/core_cm7.h **** 
1356:CORE/core_cm7.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1357:CORE/core_cm7.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1358:CORE/core_cm7.h **** 
1359:CORE/core_cm7.h **** /* TPI ITATBCTR0 Register Definitions */
1360:CORE/core_cm7.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1361:CORE/core_cm7.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1362:CORE/core_cm7.h **** 
1363:CORE/core_cm7.h **** /* TPI Integration Mode Control Register Definitions */
1364:CORE/core_cm7.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1365:CORE/core_cm7.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1366:CORE/core_cm7.h **** 
1367:CORE/core_cm7.h **** /* TPI DEVID Register Definitions */
1368:CORE/core_cm7.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
ARM GAS  /tmp/ccSMeinc.s 			page 38


1369:CORE/core_cm7.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1370:CORE/core_cm7.h **** 
1371:CORE/core_cm7.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1372:CORE/core_cm7.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1373:CORE/core_cm7.h **** 
1374:CORE/core_cm7.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1375:CORE/core_cm7.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1376:CORE/core_cm7.h **** 
1377:CORE/core_cm7.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1378:CORE/core_cm7.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1379:CORE/core_cm7.h **** 
1380:CORE/core_cm7.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1381:CORE/core_cm7.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1382:CORE/core_cm7.h **** 
1383:CORE/core_cm7.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1384:CORE/core_cm7.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1385:CORE/core_cm7.h **** 
1386:CORE/core_cm7.h **** /* TPI DEVTYPE Register Definitions */
1387:CORE/core_cm7.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1388:CORE/core_cm7.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1389:CORE/core_cm7.h **** 
1390:CORE/core_cm7.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1391:CORE/core_cm7.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1392:CORE/core_cm7.h **** 
1393:CORE/core_cm7.h **** /*@}*/ /* end of group CMSIS_TPI */
1394:CORE/core_cm7.h **** 
1395:CORE/core_cm7.h **** 
1396:CORE/core_cm7.h **** #if (__MPU_PRESENT == 1U)
1397:CORE/core_cm7.h **** /**
1398:CORE/core_cm7.h ****   \ingroup  CMSIS_core_register
1399:CORE/core_cm7.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1400:CORE/core_cm7.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1401:CORE/core_cm7.h ****   @{
1402:CORE/core_cm7.h ****  */
1403:CORE/core_cm7.h **** 
1404:CORE/core_cm7.h **** /**
1405:CORE/core_cm7.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1406:CORE/core_cm7.h ****  */
1407:CORE/core_cm7.h **** typedef struct
1408:CORE/core_cm7.h **** {
1409:CORE/core_cm7.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1410:CORE/core_cm7.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1411:CORE/core_cm7.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1412:CORE/core_cm7.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1413:CORE/core_cm7.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1414:CORE/core_cm7.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1415:CORE/core_cm7.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1416:CORE/core_cm7.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1417:CORE/core_cm7.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1418:CORE/core_cm7.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1419:CORE/core_cm7.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1420:CORE/core_cm7.h **** } MPU_Type;
1421:CORE/core_cm7.h **** 
1422:CORE/core_cm7.h **** /* MPU Type Register Definitions */
1423:CORE/core_cm7.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1424:CORE/core_cm7.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1425:CORE/core_cm7.h **** 
ARM GAS  /tmp/ccSMeinc.s 			page 39


1426:CORE/core_cm7.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1427:CORE/core_cm7.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1428:CORE/core_cm7.h **** 
1429:CORE/core_cm7.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1430:CORE/core_cm7.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1431:CORE/core_cm7.h **** 
1432:CORE/core_cm7.h **** /* MPU Control Register Definitions */
1433:CORE/core_cm7.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1434:CORE/core_cm7.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1435:CORE/core_cm7.h **** 
1436:CORE/core_cm7.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1437:CORE/core_cm7.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1438:CORE/core_cm7.h **** 
1439:CORE/core_cm7.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1440:CORE/core_cm7.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1441:CORE/core_cm7.h **** 
1442:CORE/core_cm7.h **** /* MPU Region Number Register Definitions */
1443:CORE/core_cm7.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1444:CORE/core_cm7.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1445:CORE/core_cm7.h **** 
1446:CORE/core_cm7.h **** /* MPU Region Base Address Register Definitions */
1447:CORE/core_cm7.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1448:CORE/core_cm7.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1449:CORE/core_cm7.h **** 
1450:CORE/core_cm7.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1451:CORE/core_cm7.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1452:CORE/core_cm7.h **** 
1453:CORE/core_cm7.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1454:CORE/core_cm7.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1455:CORE/core_cm7.h **** 
1456:CORE/core_cm7.h **** /* MPU Region Attribute and Size Register Definitions */
1457:CORE/core_cm7.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1458:CORE/core_cm7.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1459:CORE/core_cm7.h **** 
1460:CORE/core_cm7.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1461:CORE/core_cm7.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1462:CORE/core_cm7.h **** 
1463:CORE/core_cm7.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1464:CORE/core_cm7.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1465:CORE/core_cm7.h **** 
1466:CORE/core_cm7.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1467:CORE/core_cm7.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1468:CORE/core_cm7.h **** 
1469:CORE/core_cm7.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1470:CORE/core_cm7.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1471:CORE/core_cm7.h **** 
1472:CORE/core_cm7.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1473:CORE/core_cm7.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1474:CORE/core_cm7.h **** 
1475:CORE/core_cm7.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1476:CORE/core_cm7.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1477:CORE/core_cm7.h **** 
1478:CORE/core_cm7.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1479:CORE/core_cm7.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1480:CORE/core_cm7.h **** 
1481:CORE/core_cm7.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1482:CORE/core_cm7.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
ARM GAS  /tmp/ccSMeinc.s 			page 40


1483:CORE/core_cm7.h **** 
1484:CORE/core_cm7.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1485:CORE/core_cm7.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1486:CORE/core_cm7.h **** 
1487:CORE/core_cm7.h **** /*@} end of group CMSIS_MPU */
1488:CORE/core_cm7.h **** #endif
1489:CORE/core_cm7.h **** 
1490:CORE/core_cm7.h **** 
1491:CORE/core_cm7.h **** #if (__FPU_PRESENT == 1U)
1492:CORE/core_cm7.h **** /**
1493:CORE/core_cm7.h ****   \ingroup  CMSIS_core_register
1494:CORE/core_cm7.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1495:CORE/core_cm7.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1496:CORE/core_cm7.h ****   @{
1497:CORE/core_cm7.h ****  */
1498:CORE/core_cm7.h **** 
1499:CORE/core_cm7.h **** /**
1500:CORE/core_cm7.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1501:CORE/core_cm7.h ****  */
1502:CORE/core_cm7.h **** typedef struct
1503:CORE/core_cm7.h **** {
1504:CORE/core_cm7.h ****         uint32_t RESERVED0[1U];
1505:CORE/core_cm7.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1506:CORE/core_cm7.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1507:CORE/core_cm7.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1508:CORE/core_cm7.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1509:CORE/core_cm7.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1510:CORE/core_cm7.h ****   __IM  uint32_t MVFR2;                  /*!< Offset: 0x018 (R/ )  Media and FP Feature Register 2 
1511:CORE/core_cm7.h **** } FPU_Type;
1512:CORE/core_cm7.h **** 
1513:CORE/core_cm7.h **** /* Floating-Point Context Control Register Definitions */
1514:CORE/core_cm7.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1515:CORE/core_cm7.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1516:CORE/core_cm7.h **** 
1517:CORE/core_cm7.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1518:CORE/core_cm7.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1519:CORE/core_cm7.h **** 
1520:CORE/core_cm7.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1521:CORE/core_cm7.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1522:CORE/core_cm7.h **** 
1523:CORE/core_cm7.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1524:CORE/core_cm7.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1525:CORE/core_cm7.h **** 
1526:CORE/core_cm7.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1527:CORE/core_cm7.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1528:CORE/core_cm7.h **** 
1529:CORE/core_cm7.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1530:CORE/core_cm7.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1531:CORE/core_cm7.h **** 
1532:CORE/core_cm7.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1533:CORE/core_cm7.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1534:CORE/core_cm7.h **** 
1535:CORE/core_cm7.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1536:CORE/core_cm7.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1537:CORE/core_cm7.h **** 
1538:CORE/core_cm7.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1539:CORE/core_cm7.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
ARM GAS  /tmp/ccSMeinc.s 			page 41


1540:CORE/core_cm7.h **** 
1541:CORE/core_cm7.h **** /* Floating-Point Context Address Register Definitions */
1542:CORE/core_cm7.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1543:CORE/core_cm7.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1544:CORE/core_cm7.h **** 
1545:CORE/core_cm7.h **** /* Floating-Point Default Status Control Register Definitions */
1546:CORE/core_cm7.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1547:CORE/core_cm7.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1548:CORE/core_cm7.h **** 
1549:CORE/core_cm7.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1550:CORE/core_cm7.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1551:CORE/core_cm7.h **** 
1552:CORE/core_cm7.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1553:CORE/core_cm7.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1554:CORE/core_cm7.h **** 
1555:CORE/core_cm7.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1556:CORE/core_cm7.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1557:CORE/core_cm7.h **** 
1558:CORE/core_cm7.h **** /* Media and FP Feature Register 0 Definitions */
1559:CORE/core_cm7.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1560:CORE/core_cm7.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1561:CORE/core_cm7.h **** 
1562:CORE/core_cm7.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1563:CORE/core_cm7.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1564:CORE/core_cm7.h **** 
1565:CORE/core_cm7.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1566:CORE/core_cm7.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1567:CORE/core_cm7.h **** 
1568:CORE/core_cm7.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1569:CORE/core_cm7.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1570:CORE/core_cm7.h **** 
1571:CORE/core_cm7.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1572:CORE/core_cm7.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1573:CORE/core_cm7.h **** 
1574:CORE/core_cm7.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1575:CORE/core_cm7.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1576:CORE/core_cm7.h **** 
1577:CORE/core_cm7.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1578:CORE/core_cm7.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1579:CORE/core_cm7.h **** 
1580:CORE/core_cm7.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1581:CORE/core_cm7.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1582:CORE/core_cm7.h **** 
1583:CORE/core_cm7.h **** /* Media and FP Feature Register 1 Definitions */
1584:CORE/core_cm7.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1585:CORE/core_cm7.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1586:CORE/core_cm7.h **** 
1587:CORE/core_cm7.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1588:CORE/core_cm7.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1589:CORE/core_cm7.h **** 
1590:CORE/core_cm7.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1591:CORE/core_cm7.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1592:CORE/core_cm7.h **** 
1593:CORE/core_cm7.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1594:CORE/core_cm7.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1595:CORE/core_cm7.h **** 
1596:CORE/core_cm7.h **** /* Media and FP Feature Register 2 Definitions */
ARM GAS  /tmp/ccSMeinc.s 			page 42


1597:CORE/core_cm7.h **** 
1598:CORE/core_cm7.h **** /*@} end of group CMSIS_FPU */
1599:CORE/core_cm7.h **** #endif
1600:CORE/core_cm7.h **** 
1601:CORE/core_cm7.h **** 
1602:CORE/core_cm7.h **** /**
1603:CORE/core_cm7.h ****   \ingroup  CMSIS_core_register
1604:CORE/core_cm7.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1605:CORE/core_cm7.h ****   \brief    Type definitions for the Core Debug Registers
1606:CORE/core_cm7.h ****   @{
1607:CORE/core_cm7.h ****  */
1608:CORE/core_cm7.h **** 
1609:CORE/core_cm7.h **** /**
1610:CORE/core_cm7.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1611:CORE/core_cm7.h ****  */
1612:CORE/core_cm7.h **** typedef struct
1613:CORE/core_cm7.h **** {
1614:CORE/core_cm7.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1615:CORE/core_cm7.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1616:CORE/core_cm7.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1617:CORE/core_cm7.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1618:CORE/core_cm7.h **** } CoreDebug_Type;
1619:CORE/core_cm7.h **** 
1620:CORE/core_cm7.h **** /* Debug Halting Control and Status Register Definitions */
1621:CORE/core_cm7.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1622:CORE/core_cm7.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1623:CORE/core_cm7.h **** 
1624:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1625:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1626:CORE/core_cm7.h **** 
1627:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1628:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1629:CORE/core_cm7.h **** 
1630:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1631:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1632:CORE/core_cm7.h **** 
1633:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1634:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1635:CORE/core_cm7.h **** 
1636:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1637:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1638:CORE/core_cm7.h **** 
1639:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1640:CORE/core_cm7.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1641:CORE/core_cm7.h **** 
1642:CORE/core_cm7.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1643:CORE/core_cm7.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1644:CORE/core_cm7.h **** 
1645:CORE/core_cm7.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1646:CORE/core_cm7.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1647:CORE/core_cm7.h **** 
1648:CORE/core_cm7.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1649:CORE/core_cm7.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1650:CORE/core_cm7.h **** 
1651:CORE/core_cm7.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1652:CORE/core_cm7.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1653:CORE/core_cm7.h **** 
ARM GAS  /tmp/ccSMeinc.s 			page 43


1654:CORE/core_cm7.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1655:CORE/core_cm7.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1656:CORE/core_cm7.h **** 
1657:CORE/core_cm7.h **** /* Debug Core Register Selector Register Definitions */
1658:CORE/core_cm7.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1659:CORE/core_cm7.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1660:CORE/core_cm7.h **** 
1661:CORE/core_cm7.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1662:CORE/core_cm7.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1663:CORE/core_cm7.h **** 
1664:CORE/core_cm7.h **** /* Debug Exception and Monitor Control Register Definitions */
1665:CORE/core_cm7.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1666:CORE/core_cm7.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1667:CORE/core_cm7.h **** 
1668:CORE/core_cm7.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1669:CORE/core_cm7.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1670:CORE/core_cm7.h **** 
1671:CORE/core_cm7.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1672:CORE/core_cm7.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1673:CORE/core_cm7.h **** 
1674:CORE/core_cm7.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1675:CORE/core_cm7.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1676:CORE/core_cm7.h **** 
1677:CORE/core_cm7.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1678:CORE/core_cm7.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1679:CORE/core_cm7.h **** 
1680:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1681:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1682:CORE/core_cm7.h **** 
1683:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1684:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1685:CORE/core_cm7.h **** 
1686:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1687:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1688:CORE/core_cm7.h **** 
1689:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1690:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1691:CORE/core_cm7.h **** 
1692:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1693:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1694:CORE/core_cm7.h **** 
1695:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1696:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1697:CORE/core_cm7.h **** 
1698:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1699:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1700:CORE/core_cm7.h **** 
1701:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1702:CORE/core_cm7.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1703:CORE/core_cm7.h **** 
1704:CORE/core_cm7.h **** /*@} end of group CMSIS_CoreDebug */
1705:CORE/core_cm7.h **** 
1706:CORE/core_cm7.h **** 
1707:CORE/core_cm7.h **** /**
1708:CORE/core_cm7.h ****   \ingroup    CMSIS_core_register
1709:CORE/core_cm7.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1710:CORE/core_cm7.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
ARM GAS  /tmp/ccSMeinc.s 			page 44


1711:CORE/core_cm7.h ****   @{
1712:CORE/core_cm7.h ****  */
1713:CORE/core_cm7.h **** 
1714:CORE/core_cm7.h **** /**
1715:CORE/core_cm7.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1716:CORE/core_cm7.h ****   \param[in] field  Name of the register bit field.
1717:CORE/core_cm7.h ****   \param[in] value  Value of the bit field.
1718:CORE/core_cm7.h ****   \return           Masked and shifted value.
1719:CORE/core_cm7.h **** */
1720:CORE/core_cm7.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1721:CORE/core_cm7.h **** 
1722:CORE/core_cm7.h **** /**
1723:CORE/core_cm7.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1724:CORE/core_cm7.h ****   \param[in] field  Name of the register bit field.
1725:CORE/core_cm7.h ****   \param[in] value  Value of register.
1726:CORE/core_cm7.h ****   \return           Masked and shifted bit field value.
1727:CORE/core_cm7.h **** */
1728:CORE/core_cm7.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1729:CORE/core_cm7.h **** 
1730:CORE/core_cm7.h **** /*@} end of group CMSIS_core_bitfield */
1731:CORE/core_cm7.h **** 
1732:CORE/core_cm7.h **** 
1733:CORE/core_cm7.h **** /**
1734:CORE/core_cm7.h ****   \ingroup    CMSIS_core_register
1735:CORE/core_cm7.h ****   \defgroup   CMSIS_core_base     Core Definitions
1736:CORE/core_cm7.h ****   \brief      Definitions for base addresses, unions, and structures.
1737:CORE/core_cm7.h ****   @{
1738:CORE/core_cm7.h ****  */
1739:CORE/core_cm7.h **** 
1740:CORE/core_cm7.h **** /* Memory mapping of Cortex-M4 Hardware */
1741:CORE/core_cm7.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1742:CORE/core_cm7.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1743:CORE/core_cm7.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1744:CORE/core_cm7.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1745:CORE/core_cm7.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1746:CORE/core_cm7.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1747:CORE/core_cm7.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1748:CORE/core_cm7.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1749:CORE/core_cm7.h **** 
1750:CORE/core_cm7.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1751:CORE/core_cm7.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1752:CORE/core_cm7.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1753:CORE/core_cm7.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1754:CORE/core_cm7.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1755:CORE/core_cm7.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1756:CORE/core_cm7.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1757:CORE/core_cm7.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1758:CORE/core_cm7.h **** 
1759:CORE/core_cm7.h **** #if (__MPU_PRESENT == 1U)
1760:CORE/core_cm7.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1761:CORE/core_cm7.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1762:CORE/core_cm7.h **** #endif
1763:CORE/core_cm7.h **** 
1764:CORE/core_cm7.h **** #if (__FPU_PRESENT == 1U)
1765:CORE/core_cm7.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1766:CORE/core_cm7.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1767:CORE/core_cm7.h **** #endif
ARM GAS  /tmp/ccSMeinc.s 			page 45


1768:CORE/core_cm7.h **** 
1769:CORE/core_cm7.h **** /*@} */
1770:CORE/core_cm7.h **** 
1771:CORE/core_cm7.h **** 
1772:CORE/core_cm7.h **** 
1773:CORE/core_cm7.h **** /*******************************************************************************
1774:CORE/core_cm7.h ****  *                Hardware Abstraction Layer
1775:CORE/core_cm7.h ****   Core Function Interface contains:
1776:CORE/core_cm7.h ****   - Core NVIC Functions
1777:CORE/core_cm7.h ****   - Core SysTick Functions
1778:CORE/core_cm7.h ****   - Core Debug Functions
1779:CORE/core_cm7.h ****   - Core Register Access Functions
1780:CORE/core_cm7.h ****  ******************************************************************************/
1781:CORE/core_cm7.h **** /**
1782:CORE/core_cm7.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1783:CORE/core_cm7.h **** */
1784:CORE/core_cm7.h **** 
1785:CORE/core_cm7.h **** 
1786:CORE/core_cm7.h **** 
1787:CORE/core_cm7.h **** /* ##########################   NVIC functions  #################################### */
1788:CORE/core_cm7.h **** /**
1789:CORE/core_cm7.h ****   \ingroup  CMSIS_Core_FunctionInterface
1790:CORE/core_cm7.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1791:CORE/core_cm7.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1792:CORE/core_cm7.h ****   @{
1793:CORE/core_cm7.h ****  */
1794:CORE/core_cm7.h **** 
1795:CORE/core_cm7.h **** /**
1796:CORE/core_cm7.h ****   \brief   Set Priority Grouping
1797:CORE/core_cm7.h ****   \details Sets the priority grouping field using the required unlock sequence.
1798:CORE/core_cm7.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1799:CORE/core_cm7.h ****            Only values from 0..7 are used.
1800:CORE/core_cm7.h ****            In case of a conflict between priority grouping and available
1801:CORE/core_cm7.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1802:CORE/core_cm7.h ****   \param [in]      PriorityGroup  Priority grouping field.
1803:CORE/core_cm7.h ****  */
1804:CORE/core_cm7.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1805:CORE/core_cm7.h **** {
1806:CORE/core_cm7.h ****   uint32_t reg_value;
1807:CORE/core_cm7.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1808:CORE/core_cm7.h **** 
1809:CORE/core_cm7.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1810:CORE/core_cm7.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1811:CORE/core_cm7.h ****   reg_value  =  (reg_value                                   |
1812:CORE/core_cm7.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1813:CORE/core_cm7.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1814:CORE/core_cm7.h ****   SCB->AIRCR =  reg_value;
1815:CORE/core_cm7.h **** }
1816:CORE/core_cm7.h **** 
1817:CORE/core_cm7.h **** 
1818:CORE/core_cm7.h **** /**
1819:CORE/core_cm7.h ****   \brief   Get Priority Grouping
1820:CORE/core_cm7.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1821:CORE/core_cm7.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1822:CORE/core_cm7.h ****  */
1823:CORE/core_cm7.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1824:CORE/core_cm7.h **** {
ARM GAS  /tmp/ccSMeinc.s 			page 46


1825:CORE/core_cm7.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1826:CORE/core_cm7.h **** }
1827:CORE/core_cm7.h **** 
1828:CORE/core_cm7.h **** 
1829:CORE/core_cm7.h **** /**
1830:CORE/core_cm7.h ****   \brief   Enable External Interrupt
1831:CORE/core_cm7.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1832:CORE/core_cm7.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1833:CORE/core_cm7.h ****  */
1834:CORE/core_cm7.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1835:CORE/core_cm7.h **** {
1836:CORE/core_cm7.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1837:CORE/core_cm7.h **** }
1838:CORE/core_cm7.h **** 
1839:CORE/core_cm7.h **** 
1840:CORE/core_cm7.h **** /**
1841:CORE/core_cm7.h ****   \brief   Disable External Interrupt
1842:CORE/core_cm7.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1843:CORE/core_cm7.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1844:CORE/core_cm7.h ****  */
1845:CORE/core_cm7.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1846:CORE/core_cm7.h **** {
1847:CORE/core_cm7.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1848:CORE/core_cm7.h **** }
1849:CORE/core_cm7.h **** 
1850:CORE/core_cm7.h **** 
1851:CORE/core_cm7.h **** /**
1852:CORE/core_cm7.h ****   \brief   Get Pending Interrupt
1853:CORE/core_cm7.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1854:CORE/core_cm7.h ****   \param [in]      IRQn  Interrupt number.
1855:CORE/core_cm7.h ****   \return             0  Interrupt status is not pending.
1856:CORE/core_cm7.h ****   \return             1  Interrupt status is pending.
1857:CORE/core_cm7.h ****  */
1858:CORE/core_cm7.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1859:CORE/core_cm7.h **** {
1860:CORE/core_cm7.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1861:CORE/core_cm7.h **** }
1862:CORE/core_cm7.h **** 
1863:CORE/core_cm7.h **** 
1864:CORE/core_cm7.h **** /**
1865:CORE/core_cm7.h ****   \brief   Set Pending Interrupt
1866:CORE/core_cm7.h ****   \details Sets the pending bit of an external interrupt.
1867:CORE/core_cm7.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1868:CORE/core_cm7.h ****  */
1869:CORE/core_cm7.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1870:CORE/core_cm7.h **** {
1871:CORE/core_cm7.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1872:CORE/core_cm7.h **** }
1873:CORE/core_cm7.h **** 
1874:CORE/core_cm7.h **** 
1875:CORE/core_cm7.h **** /**
1876:CORE/core_cm7.h ****   \brief   Clear Pending Interrupt
1877:CORE/core_cm7.h ****   \details Clears the pending bit of an external interrupt.
1878:CORE/core_cm7.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1879:CORE/core_cm7.h ****  */
1880:CORE/core_cm7.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1881:CORE/core_cm7.h **** {
ARM GAS  /tmp/ccSMeinc.s 			page 47


1882:CORE/core_cm7.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1883:CORE/core_cm7.h **** }
1884:CORE/core_cm7.h **** 
1885:CORE/core_cm7.h **** 
1886:CORE/core_cm7.h **** /**
1887:CORE/core_cm7.h ****   \brief   Get Active Interrupt
1888:CORE/core_cm7.h ****   \details Reads the active register in NVIC and returns the active bit.
1889:CORE/core_cm7.h ****   \param [in]      IRQn  Interrupt number.
1890:CORE/core_cm7.h ****   \return             0  Interrupt status is not active.
1891:CORE/core_cm7.h ****   \return             1  Interrupt status is active.
1892:CORE/core_cm7.h ****  */
1893:CORE/core_cm7.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1894:CORE/core_cm7.h **** {
1895:CORE/core_cm7.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1896:CORE/core_cm7.h **** }
1897:CORE/core_cm7.h **** 
1898:CORE/core_cm7.h **** 
1899:CORE/core_cm7.h **** /**
1900:CORE/core_cm7.h ****   \brief   Set Interrupt Priority
1901:CORE/core_cm7.h ****   \details Sets the priority of an interrupt.
1902:CORE/core_cm7.h ****   \note    The priority cannot be set for every core interrupt.
1903:CORE/core_cm7.h ****   \param [in]      IRQn  Interrupt number.
1904:CORE/core_cm7.h ****   \param [in]  priority  Priority to set.
1905:CORE/core_cm7.h ****  */
1906:CORE/core_cm7.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1907:CORE/core_cm7.h **** {
1908:CORE/core_cm7.h ****   if ((int32_t)(IRQn) < 0)
1909:CORE/core_cm7.h ****   {
1910:CORE/core_cm7.h ****     SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_B
1911:CORE/core_cm7.h ****   }
1912:CORE/core_cm7.h ****   else
1913:CORE/core_cm7.h ****   {
1914:CORE/core_cm7.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_B
1915:CORE/core_cm7.h ****   }
1916:CORE/core_cm7.h **** }
1917:CORE/core_cm7.h **** 
1918:CORE/core_cm7.h **** 
1919:CORE/core_cm7.h **** /**
1920:CORE/core_cm7.h ****   \brief   Get Interrupt Priority
1921:CORE/core_cm7.h ****   \details Reads the priority of an interrupt.
1922:CORE/core_cm7.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
1923:CORE/core_cm7.h ****            or negative to specify an internal (core) interrupt.
1924:CORE/core_cm7.h ****   \param [in]   IRQn  Interrupt number.
1925:CORE/core_cm7.h ****   \return             Interrupt Priority.
1926:CORE/core_cm7.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1927:CORE/core_cm7.h ****  */
1928:CORE/core_cm7.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1929:CORE/core_cm7.h **** {
1930:CORE/core_cm7.h **** 
1931:CORE/core_cm7.h ****   if ((int32_t)(IRQn) < 0)
1932:CORE/core_cm7.h ****   {
1933:CORE/core_cm7.h ****     return(((uint32_t)SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)
1934:CORE/core_cm7.h ****   }
1935:CORE/core_cm7.h ****   else
1936:CORE/core_cm7.h ****   {
1937:CORE/core_cm7.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)
1938:CORE/core_cm7.h ****   }
ARM GAS  /tmp/ccSMeinc.s 			page 48


1939:CORE/core_cm7.h **** }
1940:CORE/core_cm7.h **** 
1941:CORE/core_cm7.h **** 
1942:CORE/core_cm7.h **** /**
1943:CORE/core_cm7.h ****   \brief   Encode Priority
1944:CORE/core_cm7.h ****   \details Encodes the priority for an interrupt with the given priority group,
1945:CORE/core_cm7.h ****            preemptive priority value, and subpriority value.
1946:CORE/core_cm7.h ****            In case of a conflict between priority grouping and available
1947:CORE/core_cm7.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1948:CORE/core_cm7.h ****   \param [in]     PriorityGroup  Used priority group.
1949:CORE/core_cm7.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1950:CORE/core_cm7.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1951:CORE/core_cm7.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1952:CORE/core_cm7.h ****  */
1953:CORE/core_cm7.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1954:CORE/core_cm7.h **** {
1955:CORE/core_cm7.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1956:CORE/core_cm7.h ****   uint32_t PreemptPriorityBits;
1957:CORE/core_cm7.h ****   uint32_t SubPriorityBits;
1958:CORE/core_cm7.h **** 
1959:CORE/core_cm7.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1960:CORE/core_cm7.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1961:CORE/core_cm7.h **** 
1962:CORE/core_cm7.h ****   return (
1963:CORE/core_cm7.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1964:CORE/core_cm7.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1965:CORE/core_cm7.h ****          );
1966:CORE/core_cm7.h **** }
1967:CORE/core_cm7.h **** 
1968:CORE/core_cm7.h **** 
1969:CORE/core_cm7.h **** /**
1970:CORE/core_cm7.h ****   \brief   Decode Priority
1971:CORE/core_cm7.h ****   \details Decodes an interrupt priority value with a given priority group to
1972:CORE/core_cm7.h ****            preemptive priority value and subpriority value.
1973:CORE/core_cm7.h ****            In case of a conflict between priority grouping and available
1974:CORE/core_cm7.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1975:CORE/core_cm7.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1976:CORE/core_cm7.h ****   \param [in]     PriorityGroup  Used priority group.
1977:CORE/core_cm7.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1978:CORE/core_cm7.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1979:CORE/core_cm7.h ****  */
1980:CORE/core_cm7.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1981:CORE/core_cm7.h **** {
1982:CORE/core_cm7.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1983:CORE/core_cm7.h ****   uint32_t PreemptPriorityBits;
1984:CORE/core_cm7.h ****   uint32_t SubPriorityBits;
1985:CORE/core_cm7.h **** 
1986:CORE/core_cm7.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1987:CORE/core_cm7.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1988:CORE/core_cm7.h **** 
1989:CORE/core_cm7.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1990:CORE/core_cm7.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1991:CORE/core_cm7.h **** }
1992:CORE/core_cm7.h **** 
1993:CORE/core_cm7.h **** 
1994:CORE/core_cm7.h **** /**
1995:CORE/core_cm7.h ****   \brief   System Reset
ARM GAS  /tmp/ccSMeinc.s 			page 49


1996:CORE/core_cm7.h ****   \details Initiates a system reset request to reset the MCU.
1997:CORE/core_cm7.h ****  */
1998:CORE/core_cm7.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1999:CORE/core_cm7.h **** {
2000:CORE/core_cm7.h ****   __DSB();                                                          /* Ensure all outstanding memor
2001:CORE/core_cm7.h ****                                                                        buffered write are completed
2002:CORE/core_cm7.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
2003:CORE/core_cm7.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
2004:CORE/core_cm7.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
2005:CORE/core_cm7.h ****   __DSB();                                                          /* Ensure completion of memory 
2006:CORE/core_cm7.h **** 
2007:CORE/core_cm7.h ****   for(;;)                                                           /* wait until reset */
2008:CORE/core_cm7.h ****   {
2009:CORE/core_cm7.h ****     __NOP();
2010:CORE/core_cm7.h ****   }
2011:CORE/core_cm7.h **** }
2012:CORE/core_cm7.h **** 
2013:CORE/core_cm7.h **** /*@} end of CMSIS_Core_NVICFunctions */
2014:CORE/core_cm7.h **** 
2015:CORE/core_cm7.h **** 
2016:CORE/core_cm7.h **** /* ##########################  FPU functions  #################################### */
2017:CORE/core_cm7.h **** /**
2018:CORE/core_cm7.h ****   \ingroup  CMSIS_Core_FunctionInterface
2019:CORE/core_cm7.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
2020:CORE/core_cm7.h ****   \brief    Function that provides FPU type.
2021:CORE/core_cm7.h ****   @{
2022:CORE/core_cm7.h ****  */
2023:CORE/core_cm7.h **** 
2024:CORE/core_cm7.h **** /**
2025:CORE/core_cm7.h ****   \brief   get FPU type
2026:CORE/core_cm7.h ****   \details returns the FPU type
2027:CORE/core_cm7.h ****   \returns
2028:CORE/core_cm7.h ****    - \b  0: No FPU
2029:CORE/core_cm7.h ****    - \b  1: Single precision FPU
2030:CORE/core_cm7.h ****    - \b  2: Double + Single precision FPU
2031:CORE/core_cm7.h ****  */
2032:CORE/core_cm7.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
2033:CORE/core_cm7.h **** {
2034:CORE/core_cm7.h ****   uint32_t mvfr0;
2035:CORE/core_cm7.h **** 
2036:CORE/core_cm7.h ****   mvfr0 = SCB->MVFR0;
2037:CORE/core_cm7.h ****   if        ((mvfr0 & 0x00000FF0UL) == 0x220UL)
2038:CORE/core_cm7.h ****   {
2039:CORE/core_cm7.h ****     return 2UL;           /* Double + Single precision FPU */
2040:CORE/core_cm7.h ****   }
2041:CORE/core_cm7.h ****   else if ((mvfr0 & 0x00000FF0UL) == 0x020UL)
2042:CORE/core_cm7.h ****   {
2043:CORE/core_cm7.h ****     return 1UL;           /* Single precision FPU */
2044:CORE/core_cm7.h ****   }
2045:CORE/core_cm7.h ****   else
2046:CORE/core_cm7.h ****   {
2047:CORE/core_cm7.h ****     return 0UL;           /* No FPU */
2048:CORE/core_cm7.h ****   }
2049:CORE/core_cm7.h **** }
2050:CORE/core_cm7.h **** 
2051:CORE/core_cm7.h **** 
2052:CORE/core_cm7.h **** /*@} end of CMSIS_Core_FpuFunctions */
ARM GAS  /tmp/ccSMeinc.s 			page 50


2053:CORE/core_cm7.h **** 
2054:CORE/core_cm7.h **** 
2055:CORE/core_cm7.h **** 
2056:CORE/core_cm7.h **** /* ##########################  Cache functions  #################################### */
2057:CORE/core_cm7.h **** /**
2058:CORE/core_cm7.h ****   \ingroup  CMSIS_Core_FunctionInterface
2059:CORE/core_cm7.h ****   \defgroup CMSIS_Core_CacheFunctions Cache Functions
2060:CORE/core_cm7.h ****   \brief    Functions that configure Instruction and Data cache.
2061:CORE/core_cm7.h ****   @{
2062:CORE/core_cm7.h ****  */
2063:CORE/core_cm7.h **** 
2064:CORE/core_cm7.h **** /* Cache Size ID Register Macros */
2065:CORE/core_cm7.h **** #define CCSIDR_WAYS(x)         (((x) & SCB_CCSIDR_ASSOCIATIVITY_Msk) >> SCB_CCSIDR_ASSOCIATIVITY_Po
2066:CORE/core_cm7.h **** #define CCSIDR_SETS(x)         (((x) & SCB_CCSIDR_NUMSETS_Msk      ) >> SCB_CCSIDR_NUMSETS_Pos     
2067:CORE/core_cm7.h **** 
2068:CORE/core_cm7.h **** 
2069:CORE/core_cm7.h **** /**
2070:CORE/core_cm7.h ****   \brief   Enable I-Cache
2071:CORE/core_cm7.h ****   \details Turns on I-Cache
2072:CORE/core_cm7.h ****   */
2073:CORE/core_cm7.h **** __STATIC_INLINE void SCB_EnableICache (void)
2074:CORE/core_cm7.h **** {
2075:CORE/core_cm7.h ****   #if (__ICACHE_PRESENT == 1U)
2076:CORE/core_cm7.h ****     __DSB();
2077:CORE/core_cm7.h ****     __ISB();
2078:CORE/core_cm7.h ****     SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  82              		.loc 3 2078 0
  83 000a 1B4B     		ldr	r3, .L9
  84 000c 0021     		movs	r1, #0
  85 000e C3F85012 		str	r1, [r3, #592]
2079:CORE/core_cm7.h ****     SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  86              		.loc 3 2079 0
  87 0012 5A69     		ldr	r2, [r3, #20]
  88 0014 42F40032 		orr	r2, r2, #131072
  89 0018 5A61     		str	r2, [r3, #20]
  90              	.LBB54:
  91              	.LBB55:
  92              		.loc 2 429 0
  93              		.syntax unified
  94              	@ 429 "CORE/cmsis_gcc.h" 1
  95 001a BFF34F8F 		dsb 0xF
  96              	@ 0 "" 2
  97              		.thumb
  98              		.syntax unified
  99              	.LBE55:
 100              	.LBE54:
 101              	.LBB56:
 102              	.LBB57:
 418:CORE/cmsis_gcc.h **** }
 103              		.loc 2 418 0
 104              		.syntax unified
 105              	@ 418 "CORE/cmsis_gcc.h" 1
 106 001e BFF36F8F 		isb 0xF
 107              	@ 0 "" 2
 108              		.thumb
 109              		.syntax unified
 110              	.LBE57:
ARM GAS  /tmp/ccSMeinc.s 			page 51


 111              	.LBE56:
 112              	.LBE49:
 113              	.LBE48:
 114              	.LBB58:
 115              	.LBB59:
2080:CORE/core_cm7.h ****     __DSB();
2081:CORE/core_cm7.h ****     __ISB();
2082:CORE/core_cm7.h ****   #endif
2083:CORE/core_cm7.h **** }
2084:CORE/core_cm7.h **** 
2085:CORE/core_cm7.h **** 
2086:CORE/core_cm7.h **** /**
2087:CORE/core_cm7.h ****   \brief   Disable I-Cache
2088:CORE/core_cm7.h ****   \details Turns off I-Cache
2089:CORE/core_cm7.h ****   */
2090:CORE/core_cm7.h **** __STATIC_INLINE void SCB_DisableICache (void)
2091:CORE/core_cm7.h **** {
2092:CORE/core_cm7.h ****   #if (__ICACHE_PRESENT == 1U)
2093:CORE/core_cm7.h ****     __DSB();
2094:CORE/core_cm7.h ****     __ISB();
2095:CORE/core_cm7.h ****     SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
2096:CORE/core_cm7.h ****     SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
2097:CORE/core_cm7.h ****     __DSB();
2098:CORE/core_cm7.h ****     __ISB();
2099:CORE/core_cm7.h ****   #endif
2100:CORE/core_cm7.h **** }
2101:CORE/core_cm7.h **** 
2102:CORE/core_cm7.h **** 
2103:CORE/core_cm7.h **** /**
2104:CORE/core_cm7.h ****   \brief   Invalidate I-Cache
2105:CORE/core_cm7.h ****   \details Invalidates I-Cache
2106:CORE/core_cm7.h ****   */
2107:CORE/core_cm7.h **** __STATIC_INLINE void SCB_InvalidateICache (void)
2108:CORE/core_cm7.h **** {
2109:CORE/core_cm7.h ****   #if (__ICACHE_PRESENT == 1U)
2110:CORE/core_cm7.h ****     __DSB();
2111:CORE/core_cm7.h ****     __ISB();
2112:CORE/core_cm7.h ****     SCB->ICIALLU = 0UL;
2113:CORE/core_cm7.h ****     __DSB();
2114:CORE/core_cm7.h ****     __ISB();
2115:CORE/core_cm7.h ****   #endif
2116:CORE/core_cm7.h **** }
2117:CORE/core_cm7.h **** 
2118:CORE/core_cm7.h **** 
2119:CORE/core_cm7.h **** /**
2120:CORE/core_cm7.h ****   \brief   Enable D-Cache
2121:CORE/core_cm7.h ****   \details Turns on D-Cache
2122:CORE/core_cm7.h ****   */
2123:CORE/core_cm7.h **** __STATIC_INLINE void SCB_EnableDCache (void)
2124:CORE/core_cm7.h **** {
2125:CORE/core_cm7.h ****   #if (__DCACHE_PRESENT == 1U)
2126:CORE/core_cm7.h ****     uint32_t ccsidr;
2127:CORE/core_cm7.h ****     uint32_t sets;
2128:CORE/core_cm7.h ****     uint32_t ways;
2129:CORE/core_cm7.h **** 
2130:CORE/core_cm7.h ****     SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 116              		.loc 3 2130 0
ARM GAS  /tmp/ccSMeinc.s 			page 52


 117 0022 C3F88410 		str	r1, [r3, #132]
 118              	.LBB60:
 119              	.LBB61:
 120              		.loc 2 429 0
 121              		.syntax unified
 122              	@ 429 "CORE/cmsis_gcc.h" 1
 123 0026 BFF34F8F 		dsb 0xF
 124              	@ 0 "" 2
 125              		.thumb
 126              		.syntax unified
 127              	.LBE61:
 128              	.LBE60:
2131:CORE/core_cm7.h ****     __DSB();
2132:CORE/core_cm7.h **** 
2133:CORE/core_cm7.h ****     ccsidr = SCB->CCSIDR;
 129              		.loc 3 2133 0
 130 002a D3F88040 		ldr	r4, [r3, #128]
 131              	.LVL0:
2134:CORE/core_cm7.h **** 
2135:CORE/core_cm7.h ****                                             /* invalidate D-Cache */
2136:CORE/core_cm7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 132              		.loc 3 2136 0
 133 002e C4F34E30 		ubfx	r0, r4, #13, #15
 134              	.LVL1:
 135 0032 00E0     		b	.L5
 136              	.LVL2:
 137              	.L7:
2137:CORE/core_cm7.h ****     do {
2138:CORE/core_cm7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
2139:CORE/core_cm7.h ****       do {
2140:CORE/core_cm7.h ****         SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2141:CORE/core_cm7.h ****                       ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
2142:CORE/core_cm7.h ****         #if defined ( __CC_ARM )
2143:CORE/core_cm7.h ****           __schedule_barrier();
2144:CORE/core_cm7.h ****         #endif
2145:CORE/core_cm7.h ****       } while (ways--);
2146:CORE/core_cm7.h ****     } while(sets--);
 138              		.loc 3 2146 0
 139 0034 1846     		mov	r0, r3
 140              	.LVL3:
 141              	.L5:
2138:CORE/core_cm7.h ****       do {
 142              		.loc 3 2138 0
 143 0036 C4F3C902 		ubfx	r2, r4, #3, #10
 144              	.LVL4:
 145 003a 00E0     		b	.L4
 146              	.LVL5:
 147              	.L6:
2145:CORE/core_cm7.h ****     } while(sets--);
 148              		.loc 3 2145 0
 149 003c 1A46     		mov	r2, r3
 150              	.LVL6:
 151              	.L4:
2140:CORE/core_cm7.h ****                       ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 152              		.loc 3 2140 0
 153 003e 43F6E073 		movw	r3, #16352
 154 0042 03EA4013 		and	r3, r3, r0, lsl #5
ARM GAS  /tmp/ccSMeinc.s 			page 53


 155 0046 43EA8273 		orr	r3, r3, r2, lsl #30
 156 004a 0B49     		ldr	r1, .L9
 157 004c C1F86032 		str	r3, [r1, #608]
2145:CORE/core_cm7.h ****     } while(sets--);
 158              		.loc 3 2145 0
 159 0050 531E     		subs	r3, r2, #1
 160              	.LVL7:
 161 0052 002A     		cmp	r2, #0
 162 0054 F2D1     		bne	.L6
 163              		.loc 3 2146 0
 164 0056 431E     		subs	r3, r0, #1
 165              	.LVL8:
 166 0058 0028     		cmp	r0, #0
 167 005a EBD1     		bne	.L7
 168              	.LBB62:
 169              	.LBB63:
 170              		.loc 2 429 0
 171              		.syntax unified
 172              	@ 429 "CORE/cmsis_gcc.h" 1
 173 005c BFF34F8F 		dsb 0xF
 174              	@ 0 "" 2
 175              		.thumb
 176              		.syntax unified
 177              	.LBE63:
 178              	.LBE62:
2147:CORE/core_cm7.h ****     __DSB();
2148:CORE/core_cm7.h **** 
2149:CORE/core_cm7.h ****     SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 179              		.loc 3 2149 0
 180 0060 4B69     		ldr	r3, [r1, #20]
 181              	.LVL9:
 182 0062 43F48033 		orr	r3, r3, #65536
 183 0066 4B61     		str	r3, [r1, #20]
 184              	.LBB64:
 185              	.LBB65:
 186              		.loc 2 429 0
 187              		.syntax unified
 188              	@ 429 "CORE/cmsis_gcc.h" 1
 189 0068 BFF34F8F 		dsb 0xF
 190              	@ 0 "" 2
 191              		.thumb
 192              		.syntax unified
 193              	.LBE65:
 194              	.LBE64:
 195              	.LBB66:
 196              	.LBB67:
 418:CORE/cmsis_gcc.h **** }
 197              		.loc 2 418 0
 198              		.syntax unified
 199              	@ 418 "CORE/cmsis_gcc.h" 1
 200 006c BFF36F8F 		isb 0xF
 201              	@ 0 "" 2
 202              	.LVL10:
 203              		.thumb
 204              		.syntax unified
 205              	.LBE67:
 206              	.LBE66:
ARM GAS  /tmp/ccSMeinc.s 			page 54


 207              	.LBE59:
 208              	.LBE58:
 234:src/main.c    ****   /* Enable I-Cache */
 235:src/main.c    ****   SCB_EnableICache();
 236:src/main.c    **** 
 237:src/main.c    ****   /* Enable D-Cache */
 238:src/main.c    ****   SCB_EnableDCache();
 239:src/main.c    **** }
 209              		.loc 1 239 0
 210 0070 5DF8044B 		ldr	r4, [sp], #4
 211              	.LCFI1:
 212              		.cfi_restore 4
 213              		.cfi_def_cfa_offset 0
 214 0074 7047     		bx	lr
 215              	.L10:
 216 0076 00BF     		.align	2
 217              	.L9:
 218 0078 00ED00E0 		.word	-536810240
 219              		.cfi_endproc
 220              	.LFE139:
 222              		.section	.text.SystemClock_Config,"ax",%progbits
 223              		.align	2
 224              		.thumb
 225              		.thumb_func
 227              	SystemClock_Config:
 228              	.LFB137:
 128:src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 229              		.loc 1 128 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 80
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233 0000 00B5     		push	{lr}
 234              	.LCFI2:
 235              		.cfi_def_cfa_offset 4
 236              		.cfi_offset 14, -4
 237 0002 95B0     		sub	sp, sp, #84
 238              	.LCFI3:
 239              		.cfi_def_cfa_offset 88
 240              	.LVL11:
 241              	.LBB68:
 134:src/main.c    ****   
 242              		.loc 1 134 0
 243 0004 244B     		ldr	r3, .L16
 244 0006 1A6C     		ldr	r2, [r3, #64]
 245 0008 42F08052 		orr	r2, r2, #268435456
 246 000c 1A64     		str	r2, [r3, #64]
 247 000e 1B6C     		ldr	r3, [r3, #64]
 248 0010 03F08053 		and	r3, r3, #268435456
 249 0014 0093     		str	r3, [sp]
 250 0016 009B     		ldr	r3, [sp]
 251              	.LBE68:
 252              	.LBB69:
 139:src/main.c    **** 
 253              		.loc 1 139 0
 254 0018 204B     		ldr	r3, .L16+4
 255 001a 1A68     		ldr	r2, [r3]
 256 001c 42F44042 		orr	r2, r2, #49152
ARM GAS  /tmp/ccSMeinc.s 			page 55


 257 0020 1A60     		str	r2, [r3]
 258 0022 1B68     		ldr	r3, [r3]
 259 0024 03F44043 		and	r3, r3, #49152
 260 0028 0193     		str	r3, [sp, #4]
 261 002a 019B     		ldr	r3, [sp, #4]
 262              	.LBE69:
 142:src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 263              		.loc 1 142 0
 264 002c 0123     		movs	r3, #1
 265 002e 0293     		str	r3, [sp, #8]
 143:src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 266              		.loc 1 143 0
 267 0030 4FF48033 		mov	r3, #65536
 268 0034 0393     		str	r3, [sp, #12]
 144:src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 269              		.loc 1 144 0
 270 0036 0223     		movs	r3, #2
 271 0038 0893     		str	r3, [sp, #32]
 145:src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 25;
 272              		.loc 1 145 0
 273 003a 4FF48002 		mov	r2, #4194304
 274 003e 0992     		str	r2, [sp, #36]
 146:src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 432;  
 275              		.loc 1 146 0
 276 0040 1922     		movs	r2, #25
 277 0042 0A92     		str	r2, [sp, #40]
 147:src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 278              		.loc 1 147 0
 279 0044 4FF4D872 		mov	r2, #432
 280 0048 0B92     		str	r2, [sp, #44]
 148:src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 281              		.loc 1 148 0
 282 004a 0C93     		str	r3, [sp, #48]
 149:src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 7;  
 283              		.loc 1 149 0
 284 004c 0923     		movs	r3, #9
 285 004e 0D93     		str	r3, [sp, #52]
 150:src/main.c    ****   
 286              		.loc 1 150 0
 287 0050 0723     		movs	r3, #7
 288 0052 0E93     		str	r3, [sp, #56]
 152:src/main.c    ****   if(ret != HAL_OK)
 289              		.loc 1 152 0
 290 0054 02A8     		add	r0, sp, #8
 291 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 292              	.LVL12:
 153:src/main.c    ****   {
 293              		.loc 1 153 0
 294 005a 08B1     		cbz	r0, .L12
 155:src/main.c    ****   }
 295              		.loc 1 155 0
 296 005c FFF7FEFF 		bl	Error_Handler
 297              	.LVL13:
 298              	.L12:
 159:src/main.c    ****   if(ret != HAL_OK)
 299              		.loc 1 159 0
 300 0060 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
ARM GAS  /tmp/ccSMeinc.s 			page 56


 301              	.LVL14:
 160:src/main.c    ****   {
 302              		.loc 1 160 0
 303 0064 08B1     		cbz	r0, .L13
 162:src/main.c    ****   }
 304              		.loc 1 162 0
 305 0066 FFF7FEFF 		bl	Error_Handler
 306              	.LVL15:
 307              	.L13:
 166:src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 308              		.loc 1 166 0
 309 006a 0F23     		movs	r3, #15
 310 006c 0F93     		str	r3, [sp, #60]
 167:src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 311              		.loc 1 167 0
 312 006e 0223     		movs	r3, #2
 313 0070 1093     		str	r3, [sp, #64]
 168:src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 314              		.loc 1 168 0
 315 0072 0023     		movs	r3, #0
 316 0074 1193     		str	r3, [sp, #68]
 169:src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 317              		.loc 1 169 0
 318 0076 4FF4A053 		mov	r3, #5120
 319 007a 1293     		str	r3, [sp, #72]
 170:src/main.c    ****   
 320              		.loc 1 170 0
 321 007c 4FF48053 		mov	r3, #4096
 322 0080 1393     		str	r3, [sp, #76]
 172:src/main.c    ****   if(ret != HAL_OK)
 323              		.loc 1 172 0
 324 0082 0721     		movs	r1, #7
 325 0084 0FA8     		add	r0, sp, #60
 326              	.LVL16:
 327 0086 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 328              	.LVL17:
 173:src/main.c    ****   {
 329              		.loc 1 173 0
 330 008a 08B1     		cbz	r0, .L11
 175:src/main.c    ****   }
 331              		.loc 1 175 0
 332 008c FFF7FEFF 		bl	Error_Handler
 333              	.LVL18:
 334              	.L11:
 177:src/main.c    **** 
 335              		.loc 1 177 0
 336 0090 15B0     		add	sp, sp, #84
 337              	.LCFI4:
 338              		.cfi_def_cfa_offset 4
 339              		@ sp needed
 340 0092 5DF804FB 		ldr	pc, [sp], #4
 341              	.L17:
 342 0096 00BF     		.align	2
 343              	.L16:
 344 0098 00380240 		.word	1073887232
 345 009c 00700040 		.word	1073770496
 346              		.cfi_endproc
ARM GAS  /tmp/ccSMeinc.s 			page 57


 347              	.LFE137:
 349              		.section	.text.main,"ax",%progbits
 350              		.align	2
 351              		.global	main
 352              		.thumb
 353              		.thumb_func
 355              	main:
 356              	.LFB136:
  66:src/main.c    ****   /* This project template calls firstly two functions in order to configure MPU feature 
 357              		.loc 1 66 0
 358              		.cfi_startproc
 359              		@ Volatile: function does not return.
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362 0000 08B5     		push	{r3, lr}
 363              	.LCFI5:
 364              		.cfi_def_cfa_offset 8
 365              		.cfi_offset 3, -8
 366              		.cfi_offset 14, -4
  77:src/main.c    **** 
 367              		.loc 1 77 0
 368 0002 FFF7FEFF 		bl	CPU_CACHE_Enable
 369              	.LVL19:
  85:src/main.c    **** 
 370              		.loc 1 85 0
 371 0006 FFF7FEFF 		bl	HAL_Init
 372              	.LVL20:
  88:src/main.c    **** 
 373              		.loc 1 88 0
 374 000a FFF7FEFF 		bl	SystemClock_Config
 375              	.LVL21:
  91:src/main.c    ****   
 376              		.loc 1 91 0
 377 000e FFF7FEFF 		bl	LED_Init
 378              	.LVL22:
 379              	.L19:
  96:src/main.c    ****       LED1(1);
 380              		.loc 1 96 0 discriminator 1
 381 0012 0F4C     		ldr	r4, .L21
 382 0014 0122     		movs	r2, #1
 383 0016 0221     		movs	r1, #2
 384 0018 2046     		mov	r0, r4
 385 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 386              	.LVL23:
  97:src/main.c    ****       HAL_Delay(500);
 387              		.loc 1 97 0 discriminator 1
 388 001e 0122     		movs	r2, #1
 389 0020 1146     		mov	r1, r2
 390 0022 2046     		mov	r0, r4
 391 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 392              	.LVL24:
  98:src/main.c    ****       LED0(0);
 393              		.loc 1 98 0 discriminator 1
 394 0028 4FF4FA70 		mov	r0, #500
 395 002c FFF7FEFF 		bl	HAL_Delay
 396              	.LVL25:
  99:src/main.c    ****       LED1(0);
ARM GAS  /tmp/ccSMeinc.s 			page 58


 397              		.loc 1 99 0 discriminator 1
 398 0030 0022     		movs	r2, #0
 399 0032 0221     		movs	r1, #2
 400 0034 2046     		mov	r0, r4
 401 0036 FFF7FEFF 		bl	HAL_GPIO_WritePin
 402              	.LVL26:
 100:src/main.c    ****       HAL_Delay(500);
 403              		.loc 1 100 0 discriminator 1
 404 003a 0022     		movs	r2, #0
 405 003c 0121     		movs	r1, #1
 406 003e 2046     		mov	r0, r4
 407 0040 FFF7FEFF 		bl	HAL_GPIO_WritePin
 408              	.LVL27:
 101:src/main.c    **** 
 409              		.loc 1 101 0 discriminator 1
 410 0044 4FF4FA70 		mov	r0, #500
 411 0048 FFF7FEFF 		bl	HAL_Delay
 412              	.LVL28:
 413 004c E1E7     		b	.L19
 414              	.L22:
 415 004e 00BF     		.align	2
 416              	.L21:
 417 0050 00040240 		.word	1073873920
 418              		.cfi_endproc
 419              	.LFE136:
 421              		.text
 422              	.Letext0:
 423              		.file 4 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 424              		.file 5 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 425              		.file 6 "Inc/stm32f767xx.h"
 426              		.file 7 "HALLIB/Inc/stm32f7xx_hal_def.h"
 427              		.file 8 "HALLIB/Inc/stm32f7xx_hal_rcc_ex.h"
 428              		.file 9 "HALLIB/Inc/stm32f7xx_hal_rcc.h"
 429              		.file 10 "HALLIB/Inc/stm32f7xx_hal_gpio.h"
 430              		.file 11 "HALLIB/Inc/stm32f7xx_hal_pwr_ex.h"
 431              		.file 12 "HALLIB/Inc/stm32f7xx_hal.h"
 432              		.file 13 "Inc/led.h"
ARM GAS  /tmp/ccSMeinc.s 			page 59


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccSMeinc.s:21     .text.Error_Handler:00000000 $t
     /tmp/ccSMeinc.s:25     .text.Error_Handler:00000000 Error_Handler
     /tmp/ccSMeinc.s:40     .text.CPU_CACHE_Enable:00000000 $t
     /tmp/ccSMeinc.s:44     .text.CPU_CACHE_Enable:00000000 CPU_CACHE_Enable
     /tmp/ccSMeinc.s:218    .text.CPU_CACHE_Enable:00000078 $d
     /tmp/ccSMeinc.s:223    .text.SystemClock_Config:00000000 $t
     /tmp/ccSMeinc.s:227    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccSMeinc.s:344    .text.SystemClock_Config:00000098 $d
     /tmp/ccSMeinc.s:350    .text.main:00000000 $t
     /tmp/ccSMeinc.s:355    .text.main:00000000 main
     /tmp/ccSMeinc.s:417    .text.main:00000050 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_Init
LED_Init
HAL_GPIO_WritePin
HAL_Delay
