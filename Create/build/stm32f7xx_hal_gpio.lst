ARM GAS  /tmp/ccsvxT3y.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_gpio.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_GPIO_Init,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_GPIO_Init
  23              		.thumb
  24              		.thumb_func
  26              	HAL_GPIO_Init:
  27              	.LFB136:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal_gpio.c"
   1:HALLIB/Src/stm32f7xx_hal_gpio.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_gpio.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @file    stm32f7xx_hal_gpio.c
   4:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @brief   GPIO HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *          functionalities of the General Purpose Input/Output (GPIO) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *           + IO operation functions
  10:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *
  11:HALLIB/Src/stm32f7xx_hal_gpio.c ****   @verbatim
  12:HALLIB/Src/stm32f7xx_hal_gpio.c ****   ==============================================================================
  13:HALLIB/Src/stm32f7xx_hal_gpio.c ****                     ##### GPIO Peripheral features #####
  14:HALLIB/Src/stm32f7xx_hal_gpio.c ****   ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_gpio.c ****   [..] 
  16:HALLIB/Src/stm32f7xx_hal_gpio.c ****   Subject to the specific hardware characteristics of each I/O port listed in the datasheet, each
  17:HALLIB/Src/stm32f7xx_hal_gpio.c ****   port bit of the General Purpose IO (GPIO) Ports, can be individually configured by software
  18:HALLIB/Src/stm32f7xx_hal_gpio.c ****   in several modes:
  19:HALLIB/Src/stm32f7xx_hal_gpio.c ****   (+) Input mode 
  20:HALLIB/Src/stm32f7xx_hal_gpio.c ****   (+) Analog mode
  21:HALLIB/Src/stm32f7xx_hal_gpio.c ****   (+) Output mode
  22:HALLIB/Src/stm32f7xx_hal_gpio.c ****   (+) Alternate function mode
  23:HALLIB/Src/stm32f7xx_hal_gpio.c ****   (+) External interrupt/event lines
  24:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
  25:HALLIB/Src/stm32f7xx_hal_gpio.c ****   [..]  
  26:HALLIB/Src/stm32f7xx_hal_gpio.c ****   During and just after reset, the alternate functions and external interrupt  
  27:HALLIB/Src/stm32f7xx_hal_gpio.c ****   lines are not active and the I/O ports are configured in input floating mode.
  28:HALLIB/Src/stm32f7xx_hal_gpio.c ****   
  29:HALLIB/Src/stm32f7xx_hal_gpio.c ****   [..]   
  30:HALLIB/Src/stm32f7xx_hal_gpio.c ****   All GPIO pins have weak internal pull-up and pull-down resistors, which can be 
ARM GAS  /tmp/ccsvxT3y.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal_gpio.c ****   activated or not.
  32:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
  33:HALLIB/Src/stm32f7xx_hal_gpio.c ****   [..]
  34:HALLIB/Src/stm32f7xx_hal_gpio.c ****   In Output or Alternate mode, each IO can be configured on open-drain or push-pull
  35:HALLIB/Src/stm32f7xx_hal_gpio.c ****   type and the IO speed can be selected depending on the VDD value.
  36:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
  37:HALLIB/Src/stm32f7xx_hal_gpio.c ****   [..]  
  38:HALLIB/Src/stm32f7xx_hal_gpio.c ****   All ports have external interrupt/event capability. To use external interrupt 
  39:HALLIB/Src/stm32f7xx_hal_gpio.c ****   lines, the port must be configured in input mode. All available GPIO pins are 
  40:HALLIB/Src/stm32f7xx_hal_gpio.c ****   connected to the 16 external interrupt/event lines from EXTI0 to EXTI15.
  41:HALLIB/Src/stm32f7xx_hal_gpio.c ****   
  42:HALLIB/Src/stm32f7xx_hal_gpio.c ****   [..]
  43:HALLIB/Src/stm32f7xx_hal_gpio.c ****   The external interrupt/event controller consists of up to 23 edge detectors 
  44:HALLIB/Src/stm32f7xx_hal_gpio.c ****   (16 lines are connected to GPIO) for generating event/interrupt requests (each 
  45:HALLIB/Src/stm32f7xx_hal_gpio.c ****   input line can be independently configured to select the type (interrupt or event) 
  46:HALLIB/Src/stm32f7xx_hal_gpio.c ****   and the corresponding trigger event (rising or falling or both). Each line can 
  47:HALLIB/Src/stm32f7xx_hal_gpio.c ****   also be masked independently. 
  48:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
  49:HALLIB/Src/stm32f7xx_hal_gpio.c ****                      ##### How to use this driver #####
  50:HALLIB/Src/stm32f7xx_hal_gpio.c ****   ==============================================================================  
  51:HALLIB/Src/stm32f7xx_hal_gpio.c ****   [..]
  52:HALLIB/Src/stm32f7xx_hal_gpio.c ****     (#) Enable the GPIO AHB clock using the following function: __HAL_RCC_GPIOx_CLK_ENABLE(). 
  53:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
  54:HALLIB/Src/stm32f7xx_hal_gpio.c ****     (#) Configure the GPIO pin(s) using HAL_GPIO_Init().
  55:HALLIB/Src/stm32f7xx_hal_gpio.c ****         (++) Configure the IO mode using "Mode" member from GPIO_InitTypeDef structure
  56:HALLIB/Src/stm32f7xx_hal_gpio.c ****         (++) Activate Pull-up, Pull-down resistor using "Pull" member from GPIO_InitTypeDef 
  57:HALLIB/Src/stm32f7xx_hal_gpio.c ****              structure.
  58:HALLIB/Src/stm32f7xx_hal_gpio.c ****         (++) In case of Output or alternate function mode selection: the speed is 
  59:HALLIB/Src/stm32f7xx_hal_gpio.c ****              configured through "Speed" member from GPIO_InitTypeDef structure.
  60:HALLIB/Src/stm32f7xx_hal_gpio.c ****         (++) In alternate mode is selection, the alternate function connected to the IO
  61:HALLIB/Src/stm32f7xx_hal_gpio.c ****              is configured through "Alternate" member from GPIO_InitTypeDef structure.
  62:HALLIB/Src/stm32f7xx_hal_gpio.c ****         (++) Analog mode is required when a pin is to be used as ADC channel 
  63:HALLIB/Src/stm32f7xx_hal_gpio.c ****              or DAC output.
  64:HALLIB/Src/stm32f7xx_hal_gpio.c ****         (++) In case of external interrupt/event selection the "Mode" member from 
  65:HALLIB/Src/stm32f7xx_hal_gpio.c ****              GPIO_InitTypeDef structure select the type (interrupt or event) and 
  66:HALLIB/Src/stm32f7xx_hal_gpio.c ****              the corresponding trigger event (rising or falling or both).
  67:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
  68:HALLIB/Src/stm32f7xx_hal_gpio.c ****     (#) In case of external interrupt/event mode selection, configure NVIC IRQ priority 
  69:HALLIB/Src/stm32f7xx_hal_gpio.c ****         mapped to the EXTI line using HAL_NVIC_SetPriority() and enable it using
  70:HALLIB/Src/stm32f7xx_hal_gpio.c ****         HAL_NVIC_EnableIRQ().
  71:HALLIB/Src/stm32f7xx_hal_gpio.c ****          
  72:HALLIB/Src/stm32f7xx_hal_gpio.c ****     (#) To get the level of a pin configured in input mode use HAL_GPIO_ReadPin().
  73:HALLIB/Src/stm32f7xx_hal_gpio.c ****             
  74:HALLIB/Src/stm32f7xx_hal_gpio.c ****     (#) To set/reset the level of a pin configured in output mode use 
  75:HALLIB/Src/stm32f7xx_hal_gpio.c ****         HAL_GPIO_WritePin()/HAL_GPIO_TogglePin().
  76:HALLIB/Src/stm32f7xx_hal_gpio.c ****     
  77:HALLIB/Src/stm32f7xx_hal_gpio.c ****     (#) To lock pin configuration until next reset use HAL_GPIO_LockPin().
  78:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
  79:HALLIB/Src/stm32f7xx_hal_gpio.c ****                  
  80:HALLIB/Src/stm32f7xx_hal_gpio.c ****     (#) During and just after reset, the alternate functions are not 
  81:HALLIB/Src/stm32f7xx_hal_gpio.c ****         active and the GPIO pins are configured in input floating mode (except JTAG
  82:HALLIB/Src/stm32f7xx_hal_gpio.c ****         pins).
  83:HALLIB/Src/stm32f7xx_hal_gpio.c ****   
  84:HALLIB/Src/stm32f7xx_hal_gpio.c ****     (#) The LSE oscillator pins OSC32_IN and OSC32_OUT can be used as general purpose 
  85:HALLIB/Src/stm32f7xx_hal_gpio.c ****         (PC14 and PC15, respectively) when the LSE oscillator is off. The LSE has 
  86:HALLIB/Src/stm32f7xx_hal_gpio.c ****         priority over the GPIO function.
  87:HALLIB/Src/stm32f7xx_hal_gpio.c ****   
ARM GAS  /tmp/ccsvxT3y.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal_gpio.c ****     (#) The HSE oscillator pins OSC_IN/OSC_OUT can be used as 
  89:HALLIB/Src/stm32f7xx_hal_gpio.c ****         general purpose PH0 and PH1, respectively, when the HSE oscillator is off. 
  90:HALLIB/Src/stm32f7xx_hal_gpio.c ****         The HSE has priority over the GPIO function.
  91:HALLIB/Src/stm32f7xx_hal_gpio.c ****   
  92:HALLIB/Src/stm32f7xx_hal_gpio.c ****   @endverbatim
  93:HALLIB/Src/stm32f7xx_hal_gpio.c ****   ******************************************************************************
  94:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @attention
  95:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *
  96:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  97:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *
  98:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * Redistribution and use in source and binary forms, with or without modification,
  99:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * are permitted provided that the following conditions are met:
 100:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 101:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *      this list of conditions and the following disclaimer.
 102:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 103:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *      this list of conditions and the following disclaimer in the documentation
 104:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *      and/or other materials provided with the distribution.
 105:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 106:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *      may be used to endorse or promote products derived from this software
 107:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *      without specific prior written permission.
 108:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *
 109:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 110:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 111:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 112:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 113:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 114:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 115:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 116:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 117:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 118:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 119:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *
 120:HALLIB/Src/stm32f7xx_hal_gpio.c ****   ******************************************************************************
 121:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */ 
 122:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 123:HALLIB/Src/stm32f7xx_hal_gpio.c **** /* Includes ------------------------------------------------------------------*/
 124:HALLIB/Src/stm32f7xx_hal_gpio.c **** #include "stm32f7xx_hal.h"
 125:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 126:HALLIB/Src/stm32f7xx_hal_gpio.c **** /** @addtogroup STM32F7xx_HAL_Driver
 127:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @{
 128:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 129:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 130:HALLIB/Src/stm32f7xx_hal_gpio.c **** /** @defgroup GPIO GPIO
 131:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @brief GPIO HAL module driver
 132:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @{
 133:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 134:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 135:HALLIB/Src/stm32f7xx_hal_gpio.c **** #ifdef HAL_GPIO_MODULE_ENABLED
 136:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 137:HALLIB/Src/stm32f7xx_hal_gpio.c **** /* Private typedef -----------------------------------------------------------*/
 138:HALLIB/Src/stm32f7xx_hal_gpio.c **** /* Private define ------------------------------------------------------------*/
 139:HALLIB/Src/stm32f7xx_hal_gpio.c **** /** @addtogroup GPIO_Private_Constants GPIO Private Constants
 140:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @{
 141:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 142:HALLIB/Src/stm32f7xx_hal_gpio.c **** #define GPIO_MODE             ((uint32_t)0x00000003U)
 143:HALLIB/Src/stm32f7xx_hal_gpio.c **** #define EXTI_MODE             ((uint32_t)0x10000000U)
 144:HALLIB/Src/stm32f7xx_hal_gpio.c **** #define GPIO_MODE_IT          ((uint32_t)0x00010000U)
ARM GAS  /tmp/ccsvxT3y.s 			page 4


 145:HALLIB/Src/stm32f7xx_hal_gpio.c **** #define GPIO_MODE_EVT         ((uint32_t)0x00020000U)
 146:HALLIB/Src/stm32f7xx_hal_gpio.c **** #define RISING_EDGE           ((uint32_t)0x00100000U)
 147:HALLIB/Src/stm32f7xx_hal_gpio.c **** #define FALLING_EDGE          ((uint32_t)0x00200000U)
 148:HALLIB/Src/stm32f7xx_hal_gpio.c **** #define GPIO_OUTPUT_TYPE      ((uint32_t)0x00000010U)
 149:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 150:HALLIB/Src/stm32f7xx_hal_gpio.c **** #define GPIO_NUMBER           ((uint32_t)16U)
 151:HALLIB/Src/stm32f7xx_hal_gpio.c **** /**
 152:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @}
 153:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 154:HALLIB/Src/stm32f7xx_hal_gpio.c **** /* Private macro -------------------------------------------------------------*/
 155:HALLIB/Src/stm32f7xx_hal_gpio.c **** /* Private variables ---------------------------------------------------------*/
 156:HALLIB/Src/stm32f7xx_hal_gpio.c **** /* Private function prototypes -----------------------------------------------*/
 157:HALLIB/Src/stm32f7xx_hal_gpio.c **** /* Private functions ---------------------------------------------------------*/
 158:HALLIB/Src/stm32f7xx_hal_gpio.c **** /* Exported functions --------------------------------------------------------*/
 159:HALLIB/Src/stm32f7xx_hal_gpio.c **** /** @defgroup GPIO_Exported_Functions GPIO Exported Functions
 160:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @{
 161:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 162:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 163:HALLIB/Src/stm32f7xx_hal_gpio.c **** /** @defgroup GPIO_Exported_Functions_Group1 Initialization and de-initialization functions
 164:HALLIB/Src/stm32f7xx_hal_gpio.c ****  *  @brief    Initialization and Configuration functions
 165:HALLIB/Src/stm32f7xx_hal_gpio.c ****  *
 166:HALLIB/Src/stm32f7xx_hal_gpio.c **** @verbatim
 167:HALLIB/Src/stm32f7xx_hal_gpio.c ****  ===============================================================================
 168:HALLIB/Src/stm32f7xx_hal_gpio.c ****               ##### Initialization and de-initialization functions #####
 169:HALLIB/Src/stm32f7xx_hal_gpio.c ****  ===============================================================================
 170:HALLIB/Src/stm32f7xx_hal_gpio.c ****   [..]
 171:HALLIB/Src/stm32f7xx_hal_gpio.c ****     This section provides functions allowing to initialize and de-initialize the GPIOs
 172:HALLIB/Src/stm32f7xx_hal_gpio.c ****     to be ready for use.
 173:HALLIB/Src/stm32f7xx_hal_gpio.c ****  
 174:HALLIB/Src/stm32f7xx_hal_gpio.c **** @endverbatim
 175:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @{
 176:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 177:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 178:HALLIB/Src/stm32f7xx_hal_gpio.c **** /**
 179:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @brief  Initializes the GPIOx peripheral according to the specified parameters in the GPIO_Init
 180:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIOx where x can be (A..K) to select the GPIO peripheral.
 181:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 182:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *         the configuration information for the specified GPIO peripheral.
 183:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @retval None
 184:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 185:HALLIB/Src/stm32f7xx_hal_gpio.c **** void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
 186:HALLIB/Src/stm32f7xx_hal_gpio.c **** {
  29              		.loc 1 186 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 20
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 83B0     		sub	sp, sp, #12
  43              	.LCFI1:
ARM GAS  /tmp/ccsvxT3y.s 			page 5


  44              		.cfi_def_cfa_offset 32
  45              	.LVL1:
 187:HALLIB/Src/stm32f7xx_hal_gpio.c ****   uint32_t position = 0x00;
 188:HALLIB/Src/stm32f7xx_hal_gpio.c ****   uint32_t ioposition = 0x00;
 189:HALLIB/Src/stm32f7xx_hal_gpio.c ****   uint32_t iocurrent = 0x00;
 190:HALLIB/Src/stm32f7xx_hal_gpio.c ****   uint32_t temp = 0x00;
 191:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 192:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Check the parameters */
 193:HALLIB/Src/stm32f7xx_hal_gpio.c ****   assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 194:HALLIB/Src/stm32f7xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 195:HALLIB/Src/stm32f7xx_hal_gpio.c ****   assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 196:HALLIB/Src/stm32f7xx_hal_gpio.c ****   assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 197:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 198:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Configure the port pins */
 199:HALLIB/Src/stm32f7xx_hal_gpio.c ****   for(position = 0; position < GPIO_NUMBER; position++)
  46              		.loc 1 199 0
  47 0004 0024     		movs	r4, #0
  48 0006 D8E0     		b	.L2
  49              	.LVL2:
  50              	.L12:
 200:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 201:HALLIB/Src/stm32f7xx_hal_gpio.c ****     /* Get the IO position */
 202:HALLIB/Src/stm32f7xx_hal_gpio.c ****     ioposition = ((uint32_t)0x01) << position;
  51              		.loc 1 202 0
  52 0008 0123     		movs	r3, #1
  53 000a A340     		lsls	r3, r3, r4
  54              	.LVL3:
 203:HALLIB/Src/stm32f7xx_hal_gpio.c ****     /* Get the current IO position */
 204:HALLIB/Src/stm32f7xx_hal_gpio.c ****     iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
  55              		.loc 1 204 0
  56 000c 0A68     		ldr	r2, [r1]
  57 000e 03EA0205 		and	r5, r3, r2
  58              	.LVL4:
 205:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 206:HALLIB/Src/stm32f7xx_hal_gpio.c ****     if(iocurrent == ioposition)
  59              		.loc 1 206 0
  60 0012 AB42     		cmp	r3, r5
  61 0014 40F0D080 		bne	.L3
 207:HALLIB/Src/stm32f7xx_hal_gpio.c ****     {
 208:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /*--------------------- GPIO Mode Configuration ------------------------*/
 209:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /* In case of Alternate function mode selection */
 210:HALLIB/Src/stm32f7xx_hal_gpio.c ****       if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
  62              		.loc 1 210 0
  63 0018 4A68     		ldr	r2, [r1, #4]
  64 001a 122A     		cmp	r2, #18
  65 001c 18BF     		it	ne
  66 001e 022A     		cmpne	r2, #2
  67 0020 10D1     		bne	.L4
 211:HALLIB/Src/stm32f7xx_hal_gpio.c ****       {
 212:HALLIB/Src/stm32f7xx_hal_gpio.c ****         /* Check the Alternate function parameter */
 213:HALLIB/Src/stm32f7xx_hal_gpio.c ****         assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 214:HALLIB/Src/stm32f7xx_hal_gpio.c ****         
 215:HALLIB/Src/stm32f7xx_hal_gpio.c ****         /* Configure Alternate function mapped with the current IO */
 216:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp = GPIOx->AFR[position >> 3];
  68              		.loc 1 216 0
  69 0022 E608     		lsrs	r6, r4, #3
  70 0024 0836     		adds	r6, r6, #8
ARM GAS  /tmp/ccsvxT3y.s 			page 6


  71 0026 50F826C0 		ldr	ip, [r0, r6, lsl #2]
  72              	.LVL5:
 217:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
  73              		.loc 1 217 0
  74 002a 04F00702 		and	r2, r4, #7
  75 002e 9700     		lsls	r7, r2, #2
  76 0030 0F22     		movs	r2, #15
  77 0032 BA40     		lsls	r2, r2, r7
  78 0034 2CEA020E 		bic	lr, ip, r2
  79              	.LVL6:
 218:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
  80              		.loc 1 218 0
  81 0038 0A69     		ldr	r2, [r1, #16]
  82 003a BA40     		lsls	r2, r2, r7
  83 003c 4EEA0202 		orr	r2, lr, r2
  84              	.LVL7:
 219:HALLIB/Src/stm32f7xx_hal_gpio.c ****         GPIOx->AFR[position >> 3] = temp;
  85              		.loc 1 219 0
  86 0040 40F82620 		str	r2, [r0, r6, lsl #2]
  87              	.LVL8:
  88              	.L4:
 220:HALLIB/Src/stm32f7xx_hal_gpio.c ****       }
 221:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 222:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
 223:HALLIB/Src/stm32f7xx_hal_gpio.c ****       temp = GPIOx->MODER;
  89              		.loc 1 223 0
  90 0044 0268     		ldr	r2, [r0]
  91              	.LVL9:
 224:HALLIB/Src/stm32f7xx_hal_gpio.c ****       temp &= ~(GPIO_MODER_MODER0 << (position * 2));
  92              		.loc 1 224 0
  93 0046 6700     		lsls	r7, r4, #1
  94 0048 0326     		movs	r6, #3
  95 004a BE40     		lsls	r6, r6, r7
  96 004c F643     		mvns	r6, r6
  97 004e 02EA060E 		and	lr, r2, r6
  98              	.LVL10:
 225:HALLIB/Src/stm32f7xx_hal_gpio.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
  99              		.loc 1 225 0
 100 0052 4A68     		ldr	r2, [r1, #4]
 101 0054 02F00302 		and	r2, r2, #3
 102 0058 BA40     		lsls	r2, r2, r7
 103 005a 4EEA0202 		orr	r2, lr, r2
 104              	.LVL11:
 226:HALLIB/Src/stm32f7xx_hal_gpio.c ****       GPIOx->MODER = temp;
 105              		.loc 1 226 0
 106 005e 0260     		str	r2, [r0]
 227:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 228:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /* In case of Output or Alternate function mode selection */
 229:HALLIB/Src/stm32f7xx_hal_gpio.c ****       if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 107              		.loc 1 229 0
 108 0060 4A68     		ldr	r2, [r1, #4]
 109              	.LVL12:
 110 0062 02F1FF3E 		add	lr, r2, #-1
 111 0066 112A     		cmp	r2, #17
 112 0068 18BF     		it	ne
 113 006a BEF1010F 		cmpne	lr, #1
 114 006e 01D9     		bls	.L5
ARM GAS  /tmp/ccsvxT3y.s 			page 7


 230:HALLIB/Src/stm32f7xx_hal_gpio.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 115              		.loc 1 230 0
 116 0070 122A     		cmp	r2, #18
 117 0072 10D1     		bne	.L6
 118              	.L5:
 231:HALLIB/Src/stm32f7xx_hal_gpio.c ****       {
 232:HALLIB/Src/stm32f7xx_hal_gpio.c ****         /* Check the Speed parameter */
 233:HALLIB/Src/stm32f7xx_hal_gpio.c ****         assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 234:HALLIB/Src/stm32f7xx_hal_gpio.c ****         /* Configure the IO Speed */
 235:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp = GPIOx->OSPEEDR; 
 119              		.loc 1 235 0
 120 0074 8268     		ldr	r2, [r0, #8]
 121              	.LVL13:
 236:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 122              		.loc 1 236 0
 123 0076 06EA020E 		and	lr, r6, r2
 124              	.LVL14:
 237:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp |= (GPIO_Init->Speed << (position * 2));
 125              		.loc 1 237 0
 126 007a CA68     		ldr	r2, [r1, #12]
 127 007c BA40     		lsls	r2, r2, r7
 128 007e 4EEA0202 		orr	r2, lr, r2
 129              	.LVL15:
 238:HALLIB/Src/stm32f7xx_hal_gpio.c ****         GPIOx->OSPEEDR = temp;
 130              		.loc 1 238 0
 131 0082 8260     		str	r2, [r0, #8]
 239:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 240:HALLIB/Src/stm32f7xx_hal_gpio.c ****         /* Configure the IO Output Type */
 241:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp = GPIOx->OTYPER;
 132              		.loc 1 241 0
 133 0084 4268     		ldr	r2, [r0, #4]
 134              	.LVL16:
 242:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 135              		.loc 1 242 0
 136 0086 22EA0303 		bic	r3, r2, r3
 137              	.LVL17:
 243:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 138              		.loc 1 243 0
 139 008a 4A68     		ldr	r2, [r1, #4]
 140 008c C2F30012 		ubfx	r2, r2, #4, #1
 141 0090 A240     		lsls	r2, r2, r4
 142 0092 1A43     		orrs	r2, r2, r3
 143              	.LVL18:
 244:HALLIB/Src/stm32f7xx_hal_gpio.c ****         GPIOx->OTYPER = temp;
 144              		.loc 1 244 0
 145 0094 4260     		str	r2, [r0, #4]
 146              	.LVL19:
 147              	.L6:
 245:HALLIB/Src/stm32f7xx_hal_gpio.c ****       }
 246:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 247:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /* Activate the Pull-up or Pull down resistor for the current IO */
 248:HALLIB/Src/stm32f7xx_hal_gpio.c ****       temp = GPIOx->PUPDR;
 148              		.loc 1 248 0
 149 0096 C368     		ldr	r3, [r0, #12]
 150              	.LVL20:
 249:HALLIB/Src/stm32f7xx_hal_gpio.c ****       temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 151              		.loc 1 249 0
ARM GAS  /tmp/ccsvxT3y.s 			page 8


 152 0098 1E40     		ands	r6, r6, r3
 153              	.LVL21:
 250:HALLIB/Src/stm32f7xx_hal_gpio.c ****       temp |= ((GPIO_Init->Pull) << (position * 2));
 154              		.loc 1 250 0
 155 009a 8B68     		ldr	r3, [r1, #8]
 156 009c BB40     		lsls	r3, r3, r7
 157 009e 3343     		orrs	r3, r3, r6
 158              	.LVL22:
 251:HALLIB/Src/stm32f7xx_hal_gpio.c ****       GPIOx->PUPDR = temp;
 159              		.loc 1 251 0
 160 00a0 C360     		str	r3, [r0, #12]
 252:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 253:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /*--------------------- EXTI Mode Configuration ------------------------*/
 254:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /* Configure the External Interrupt or event for the current IO */
 255:HALLIB/Src/stm32f7xx_hal_gpio.c ****       if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 161              		.loc 1 255 0
 162 00a2 4B68     		ldr	r3, [r1, #4]
 163              	.LVL23:
 164 00a4 13F0805F 		tst	r3, #268435456
 165 00a8 00F08680 		beq	.L3
 166              	.LBB2:
 256:HALLIB/Src/stm32f7xx_hal_gpio.c ****       {
 257:HALLIB/Src/stm32f7xx_hal_gpio.c ****         /* Enable SYSCFG Clock */
 258:HALLIB/Src/stm32f7xx_hal_gpio.c ****         __HAL_RCC_SYSCFG_CLK_ENABLE();
 167              		.loc 1 258 0
 168 00ac 454B     		ldr	r3, .L24
 169 00ae 5A6C     		ldr	r2, [r3, #68]
 170 00b0 42F48042 		orr	r2, r2, #16384
 171 00b4 5A64     		str	r2, [r3, #68]
 172              	.LVL24:
 173 00b6 5B6C     		ldr	r3, [r3, #68]
 174 00b8 03F48043 		and	r3, r3, #16384
 175 00bc 0193     		str	r3, [sp, #4]
 176 00be 019B     		ldr	r3, [sp, #4]
 177              	.LBE2:
 259:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 260:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp = SYSCFG->EXTICR[position >> 2];
 178              		.loc 1 260 0
 179 00c0 A608     		lsrs	r6, r4, #2
 180 00c2 B21C     		adds	r2, r6, #2
 181 00c4 404B     		ldr	r3, .L24+4
 182 00c6 53F82270 		ldr	r7, [r3, r2, lsl #2]
 183              	.LVL25:
 261:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 184              		.loc 1 261 0
 185 00ca 04F00303 		and	r3, r4, #3
 186 00ce 9B00     		lsls	r3, r3, #2
 187 00d0 0F22     		movs	r2, #15
 188 00d2 9A40     		lsls	r2, r2, r3
 189 00d4 27EA0207 		bic	r7, r7, r2
 190              	.LVL26:
 262:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 191              		.loc 1 262 0
 192 00d8 3C4A     		ldr	r2, .L24+8
 193 00da 9042     		cmp	r0, r2
 194 00dc 25D0     		beq	.L13
 195              		.loc 1 262 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccsvxT3y.s 			page 9


 196 00de 02F58062 		add	r2, r2, #1024
 197 00e2 9042     		cmp	r0, r2
 198 00e4 23D0     		beq	.L14
 199              		.loc 1 262 0 discriminator 3
 200 00e6 02F58062 		add	r2, r2, #1024
 201 00ea 9042     		cmp	r0, r2
 202 00ec 21D0     		beq	.L15
 203              		.loc 1 262 0 discriminator 5
 204 00ee 02F58062 		add	r2, r2, #1024
 205 00f2 9042     		cmp	r0, r2
 206 00f4 1FD0     		beq	.L16
 207              		.loc 1 262 0 discriminator 7
 208 00f6 02F58062 		add	r2, r2, #1024
 209 00fa 9042     		cmp	r0, r2
 210 00fc 1DD0     		beq	.L17
 211              		.loc 1 262 0 discriminator 9
 212 00fe 02F58062 		add	r2, r2, #1024
 213 0102 9042     		cmp	r0, r2
 214 0104 1BD0     		beq	.L18
 215              		.loc 1 262 0 discriminator 11
 216 0106 02F58062 		add	r2, r2, #1024
 217 010a 9042     		cmp	r0, r2
 218 010c 19D0     		beq	.L19
 219              		.loc 1 262 0 discriminator 13
 220 010e 02F58062 		add	r2, r2, #1024
 221 0112 9042     		cmp	r0, r2
 222 0114 17D0     		beq	.L20
 223              		.loc 1 262 0 discriminator 15
 224 0116 02F58062 		add	r2, r2, #1024
 225 011a 9042     		cmp	r0, r2
 226 011c 15D0     		beq	.L21
 227              		.loc 1 262 0 discriminator 17
 228 011e 02F58062 		add	r2, r2, #1024
 229 0122 9042     		cmp	r0, r2
 230 0124 13D1     		bne	.L22
 231              		.loc 1 262 0
 232 0126 0922     		movs	r2, #9
 233 0128 12E0     		b	.L7
 234              	.L13:
 235 012a 0022     		movs	r2, #0
 236 012c 10E0     		b	.L7
 237              	.L14:
 238 012e 0122     		movs	r2, #1
 239              	.LVL27:
 240 0130 0EE0     		b	.L7
 241              	.LVL28:
 242              	.L15:
 243 0132 0222     		movs	r2, #2
 244 0134 0CE0     		b	.L7
 245              	.L16:
 246 0136 0322     		movs	r2, #3
 247 0138 0AE0     		b	.L7
 248              	.L17:
 249 013a 0422     		movs	r2, #4
 250 013c 08E0     		b	.L7
 251              	.L18:
 252 013e 0522     		movs	r2, #5
ARM GAS  /tmp/ccsvxT3y.s 			page 10


 253 0140 06E0     		b	.L7
 254              	.L19:
 255 0142 0622     		movs	r2, #6
 256 0144 04E0     		b	.L7
 257              	.L20:
 258 0146 0722     		movs	r2, #7
 259 0148 02E0     		b	.L7
 260              	.L21:
 261 014a 0822     		movs	r2, #8
 262 014c 00E0     		b	.L7
 263              	.L22:
 264 014e 0A22     		movs	r2, #10
 265              	.L7:
 266              		.loc 1 262 0 discriminator 40
 267 0150 02FA03F3 		lsl	r3, r2, r3
 268 0154 3B43     		orrs	r3, r3, r7
 269              	.LVL29:
 263:HALLIB/Src/stm32f7xx_hal_gpio.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 270              		.loc 1 263 0 is_stmt 1 discriminator 40
 271 0156 0236     		adds	r6, r6, #2
 272 0158 1B4A     		ldr	r2, .L24+4
 273 015a 42F82630 		str	r3, [r2, r6, lsl #2]
 264:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 265:HALLIB/Src/stm32f7xx_hal_gpio.c ****         /* Clear EXTI line configuration */
 266:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp = EXTI->IMR;
 274              		.loc 1 266 0 discriminator 40
 275 015e 1C4B     		ldr	r3, .L24+12
 276              	.LVL30:
 277 0160 1A68     		ldr	r2, [r3]
 278              	.LVL31:
 267:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp &= ~((uint32_t)iocurrent);
 279              		.loc 1 267 0 discriminator 40
 280 0162 EB43     		mvns	r3, r5
 281 0164 02EA0306 		and	r6, r2, r3
 282              	.LVL32:
 268:HALLIB/Src/stm32f7xx_hal_gpio.c ****         if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 283              		.loc 1 268 0 discriminator 40
 284 0168 4F68     		ldr	r7, [r1, #4]
 285 016a 17F4803F 		tst	r7, #65536
 286 016e 01D0     		beq	.L8
 269:HALLIB/Src/stm32f7xx_hal_gpio.c ****         {
 270:HALLIB/Src/stm32f7xx_hal_gpio.c ****           temp |= iocurrent;
 287              		.loc 1 270 0
 288 0170 45EA0206 		orr	r6, r5, r2
 289              	.LVL33:
 290              	.L8:
 271:HALLIB/Src/stm32f7xx_hal_gpio.c ****         }
 272:HALLIB/Src/stm32f7xx_hal_gpio.c ****         EXTI->IMR = temp;
 291              		.loc 1 272 0
 292 0174 164A     		ldr	r2, .L24+12
 293 0176 1660     		str	r6, [r2]
 273:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 274:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp = EXTI->EMR;
 294              		.loc 1 274 0
 295 0178 5268     		ldr	r2, [r2, #4]
 296              	.LVL34:
 275:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp &= ~((uint32_t)iocurrent);
ARM GAS  /tmp/ccsvxT3y.s 			page 11


 297              		.loc 1 275 0
 298 017a 03EA0206 		and	r6, r3, r2
 299              	.LVL35:
 276:HALLIB/Src/stm32f7xx_hal_gpio.c ****         if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 300              		.loc 1 276 0
 301 017e 4F68     		ldr	r7, [r1, #4]
 302 0180 17F4003F 		tst	r7, #131072
 303 0184 01D0     		beq	.L9
 277:HALLIB/Src/stm32f7xx_hal_gpio.c ****         {
 278:HALLIB/Src/stm32f7xx_hal_gpio.c ****           temp |= iocurrent;
 304              		.loc 1 278 0
 305 0186 45EA0206 		orr	r6, r5, r2
 306              	.LVL36:
 307              	.L9:
 279:HALLIB/Src/stm32f7xx_hal_gpio.c ****         }
 280:HALLIB/Src/stm32f7xx_hal_gpio.c ****         EXTI->EMR = temp;
 308              		.loc 1 280 0
 309 018a 114A     		ldr	r2, .L24+12
 310 018c 5660     		str	r6, [r2, #4]
 281:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 282:HALLIB/Src/stm32f7xx_hal_gpio.c ****         /* Clear Rising Falling edge configuration */
 283:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp = EXTI->RTSR;
 311              		.loc 1 283 0
 312 018e 9268     		ldr	r2, [r2, #8]
 313              	.LVL37:
 284:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp &= ~((uint32_t)iocurrent);
 314              		.loc 1 284 0
 315 0190 03EA0206 		and	r6, r3, r2
 316              	.LVL38:
 285:HALLIB/Src/stm32f7xx_hal_gpio.c ****         if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 317              		.loc 1 285 0
 318 0194 4F68     		ldr	r7, [r1, #4]
 319 0196 17F4801F 		tst	r7, #1048576
 320 019a 01D0     		beq	.L10
 286:HALLIB/Src/stm32f7xx_hal_gpio.c ****         {
 287:HALLIB/Src/stm32f7xx_hal_gpio.c ****           temp |= iocurrent;
 321              		.loc 1 287 0
 322 019c 45EA0206 		orr	r6, r5, r2
 323              	.LVL39:
 324              	.L10:
 288:HALLIB/Src/stm32f7xx_hal_gpio.c ****         }
 289:HALLIB/Src/stm32f7xx_hal_gpio.c ****         EXTI->RTSR = temp;
 325              		.loc 1 289 0
 326 01a0 0B4A     		ldr	r2, .L24+12
 327 01a2 9660     		str	r6, [r2, #8]
 290:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 291:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp = EXTI->FTSR;
 328              		.loc 1 291 0
 329 01a4 D268     		ldr	r2, [r2, #12]
 330              	.LVL40:
 292:HALLIB/Src/stm32f7xx_hal_gpio.c ****         temp &= ~((uint32_t)iocurrent);
 331              		.loc 1 292 0
 332 01a6 1340     		ands	r3, r3, r2
 333              	.LVL41:
 293:HALLIB/Src/stm32f7xx_hal_gpio.c ****         if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 334              		.loc 1 293 0
 335 01a8 4E68     		ldr	r6, [r1, #4]
ARM GAS  /tmp/ccsvxT3y.s 			page 12


 336 01aa 16F4001F 		tst	r6, #2097152
 337 01ae 01D0     		beq	.L11
 294:HALLIB/Src/stm32f7xx_hal_gpio.c ****         {
 295:HALLIB/Src/stm32f7xx_hal_gpio.c ****           temp |= iocurrent;
 338              		.loc 1 295 0
 339 01b0 45EA0203 		orr	r3, r5, r2
 340              	.LVL42:
 341              	.L11:
 296:HALLIB/Src/stm32f7xx_hal_gpio.c ****         }
 297:HALLIB/Src/stm32f7xx_hal_gpio.c ****         EXTI->FTSR = temp;
 342              		.loc 1 297 0
 343 01b4 064A     		ldr	r2, .L24+12
 344 01b6 D360     		str	r3, [r2, #12]
 345              	.LVL43:
 346              	.L3:
 199:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 347              		.loc 1 199 0 discriminator 2
 348 01b8 0134     		adds	r4, r4, #1
 349              	.LVL44:
 350              	.L2:
 199:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 351              		.loc 1 199 0 is_stmt 0 discriminator 1
 352 01ba 0F2C     		cmp	r4, #15
 353 01bc 7FF624AF 		bls	.L12
 298:HALLIB/Src/stm32f7xx_hal_gpio.c ****       }
 299:HALLIB/Src/stm32f7xx_hal_gpio.c ****     }
 300:HALLIB/Src/stm32f7xx_hal_gpio.c ****   }
 301:HALLIB/Src/stm32f7xx_hal_gpio.c **** }
 354              		.loc 1 301 0 is_stmt 1
 355 01c0 03B0     		add	sp, sp, #12
 356              	.LCFI2:
 357              		.cfi_def_cfa_offset 20
 358              		@ sp needed
 359 01c2 F0BD     		pop	{r4, r5, r6, r7, pc}
 360              	.LVL45:
 361              	.L25:
 362              		.align	2
 363              	.L24:
 364 01c4 00380240 		.word	1073887232
 365 01c8 00380140 		.word	1073821696
 366 01cc 00000240 		.word	1073872896
 367 01d0 003C0140 		.word	1073822720
 368              		.cfi_endproc
 369              	.LFE136:
 371              		.section	.text.HAL_GPIO_DeInit,"ax",%progbits
 372              		.align	2
 373              		.global	HAL_GPIO_DeInit
 374              		.thumb
 375              		.thumb_func
 377              	HAL_GPIO_DeInit:
 378              	.LFB137:
 302:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 303:HALLIB/Src/stm32f7xx_hal_gpio.c **** /**
 304:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @brief  De-initializes the GPIOx peripheral registers to their default reset values.
 305:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIOx where x can be (A..K) to select the GPIO peripheral.
 306:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIO_Pin specifies the port bit to be written.
 307:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
ARM GAS  /tmp/ccsvxT3y.s 			page 13


 308:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @retval None
 309:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 310:HALLIB/Src/stm32f7xx_hal_gpio.c **** void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 311:HALLIB/Src/stm32f7xx_hal_gpio.c **** {
 379              		.loc 1 311 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              	.LVL46:
 384 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 385              	.LCFI3:
 386              		.cfi_def_cfa_offset 20
 387              		.cfi_offset 4, -20
 388              		.cfi_offset 5, -16
 389              		.cfi_offset 6, -12
 390              		.cfi_offset 7, -8
 391              		.cfi_offset 14, -4
 392              	.LVL47:
 312:HALLIB/Src/stm32f7xx_hal_gpio.c ****   uint32_t position;
 313:HALLIB/Src/stm32f7xx_hal_gpio.c ****   uint32_t ioposition = 0x00;
 314:HALLIB/Src/stm32f7xx_hal_gpio.c ****   uint32_t iocurrent = 0x00;
 315:HALLIB/Src/stm32f7xx_hal_gpio.c ****   uint32_t tmp = 0x00;
 316:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 317:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Check the parameters */
 318:HALLIB/Src/stm32f7xx_hal_gpio.c ****   assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 319:HALLIB/Src/stm32f7xx_hal_gpio.c ****   
 320:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Configure the port pins */
 321:HALLIB/Src/stm32f7xx_hal_gpio.c ****   for(position = 0; position < GPIO_NUMBER; position++)
 393              		.loc 1 321 0
 394 0002 0023     		movs	r3, #0
 395 0004 8CE0     		b	.L27
 396              	.LVL48:
 397              	.L30:
 322:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 323:HALLIB/Src/stm32f7xx_hal_gpio.c ****     /* Get the IO position */
 324:HALLIB/Src/stm32f7xx_hal_gpio.c ****     ioposition = ((uint32_t)0x01) << position;
 398              		.loc 1 324 0
 399 0006 0122     		movs	r2, #1
 400 0008 9A40     		lsls	r2, r2, r3
 401              	.LVL49:
 325:HALLIB/Src/stm32f7xx_hal_gpio.c ****     /* Get the current IO position */
 326:HALLIB/Src/stm32f7xx_hal_gpio.c ****     iocurrent = (GPIO_Pin) & ioposition;
 402              		.loc 1 326 0
 403 000a 02EA0104 		and	r4, r2, r1
 404              	.LVL50:
 327:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 328:HALLIB/Src/stm32f7xx_hal_gpio.c ****     if(iocurrent == ioposition)
 405              		.loc 1 328 0
 406 000e A242     		cmp	r2, r4
 407 0010 40F08580 		bne	.L28
 329:HALLIB/Src/stm32f7xx_hal_gpio.c ****     {
 330:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /*------------------------- GPIO Mode Configuration --------------------*/
 331:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /* Configure IO Direction in Input Floating Mode */
 332:HALLIB/Src/stm32f7xx_hal_gpio.c ****       GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 408              		.loc 1 332 0
 409 0014 0668     		ldr	r6, [r0]
 410 0016 5F00     		lsls	r7, r3, #1
ARM GAS  /tmp/ccsvxT3y.s 			page 14


 411 0018 0325     		movs	r5, #3
 412 001a BD40     		lsls	r5, r5, r7
 413 001c ED43     		mvns	r5, r5
 414 001e 2E40     		ands	r6, r6, r5
 415 0020 0660     		str	r6, [r0]
 333:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 334:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /* Configure the default Alternate Function in current IO */
 335:HALLIB/Src/stm32f7xx_hal_gpio.c ****       GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) 
 416              		.loc 1 335 0
 417 0022 4FEAD30E 		lsr	lr, r3, #3
 418 0026 0EF1080E 		add	lr, lr, #8
 419 002a 50F82EC0 		ldr	ip, [r0, lr, lsl #2]
 420 002e 03F00706 		and	r6, r3, #7
 421 0032 B600     		lsls	r6, r6, #2
 422 0034 0F27     		movs	r7, #15
 423 0036 07FA06F6 		lsl	r6, r7, r6
 424 003a 2CEA0606 		bic	r6, ip, r6
 425 003e 40F82E60 		str	r6, [r0, lr, lsl #2]
 336:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 337:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /* Configure the default value for IO Speed */
 338:HALLIB/Src/stm32f7xx_hal_gpio.c ****       GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 426              		.loc 1 338 0
 427 0042 8668     		ldr	r6, [r0, #8]
 428 0044 2E40     		ands	r6, r6, r5
 429 0046 8660     		str	r6, [r0, #8]
 339:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 340:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /* Configure the default value IO Output Type */
 341:HALLIB/Src/stm32f7xx_hal_gpio.c ****       GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 430              		.loc 1 341 0
 431 0048 4668     		ldr	r6, [r0, #4]
 432 004a 26EA0202 		bic	r2, r6, r2
 433              	.LVL51:
 434 004e 4260     		str	r2, [r0, #4]
 342:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 343:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /* Deactivate the Pull-up and Pull-down resistor for the current IO */
 344:HALLIB/Src/stm32f7xx_hal_gpio.c ****       GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 435              		.loc 1 344 0
 436 0050 C268     		ldr	r2, [r0, #12]
 437 0052 1540     		ands	r5, r5, r2
 438 0054 C560     		str	r5, [r0, #12]
 345:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 346:HALLIB/Src/stm32f7xx_hal_gpio.c ****       /*------------------------- EXTI Mode Configuration --------------------*/
 347:HALLIB/Src/stm32f7xx_hal_gpio.c ****       tmp = SYSCFG->EXTICR[position >> 2];
 439              		.loc 1 347 0
 440 0056 4FEA930E 		lsr	lr, r3, #2
 441 005a 0EF10205 		add	r5, lr, #2
 442 005e 324A     		ldr	r2, .L42
 443 0060 52F82550 		ldr	r5, [r2, r5, lsl #2]
 444              	.LVL52:
 348:HALLIB/Src/stm32f7xx_hal_gpio.c ****       tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 445              		.loc 1 348 0
 446 0064 03F00302 		and	r2, r3, #3
 447 0068 9200     		lsls	r2, r2, #2
 448 006a 9740     		lsls	r7, r7, r2
 449 006c 3D40     		ands	r5, r5, r7
 450              	.LVL53:
 349:HALLIB/Src/stm32f7xx_hal_gpio.c ****       if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
ARM GAS  /tmp/ccsvxT3y.s 			page 15


 451              		.loc 1 349 0
 452 006e 2F4E     		ldr	r6, .L42+4
 453 0070 B042     		cmp	r0, r6
 454 0072 25D0     		beq	.L31
 455              		.loc 1 349 0 is_stmt 0 discriminator 1
 456 0074 06F58066 		add	r6, r6, #1024
 457 0078 B042     		cmp	r0, r6
 458 007a 23D0     		beq	.L32
 459              		.loc 1 349 0 discriminator 3
 460 007c 06F58066 		add	r6, r6, #1024
 461 0080 B042     		cmp	r0, r6
 462 0082 21D0     		beq	.L33
 463              		.loc 1 349 0 discriminator 5
 464 0084 06F58066 		add	r6, r6, #1024
 465 0088 B042     		cmp	r0, r6
 466 008a 1FD0     		beq	.L34
 467              		.loc 1 349 0 discriminator 7
 468 008c 06F58066 		add	r6, r6, #1024
 469 0090 B042     		cmp	r0, r6
 470 0092 1DD0     		beq	.L35
 471              		.loc 1 349 0 discriminator 9
 472 0094 06F58066 		add	r6, r6, #1024
 473 0098 B042     		cmp	r0, r6
 474 009a 1BD0     		beq	.L36
 475              		.loc 1 349 0 discriminator 11
 476 009c 06F58066 		add	r6, r6, #1024
 477 00a0 B042     		cmp	r0, r6
 478 00a2 19D0     		beq	.L37
 479              		.loc 1 349 0 discriminator 13
 480 00a4 06F58066 		add	r6, r6, #1024
 481 00a8 B042     		cmp	r0, r6
 482 00aa 17D0     		beq	.L38
 483              		.loc 1 349 0 discriminator 15
 484 00ac 06F58066 		add	r6, r6, #1024
 485 00b0 B042     		cmp	r0, r6
 486 00b2 15D0     		beq	.L39
 487              		.loc 1 349 0 discriminator 17
 488 00b4 06F58066 		add	r6, r6, #1024
 489 00b8 B042     		cmp	r0, r6
 490 00ba 13D1     		bne	.L40
 491              		.loc 1 349 0
 492 00bc 0926     		movs	r6, #9
 493 00be 12E0     		b	.L29
 494              	.L31:
 495 00c0 0026     		movs	r6, #0
 496 00c2 10E0     		b	.L29
 497              	.L32:
 498 00c4 0126     		movs	r6, #1
 499              	.LVL54:
 500 00c6 0EE0     		b	.L29
 501              	.LVL55:
 502              	.L33:
 503 00c8 0226     		movs	r6, #2
 504 00ca 0CE0     		b	.L29
 505              	.L34:
 506 00cc 0326     		movs	r6, #3
 507 00ce 0AE0     		b	.L29
ARM GAS  /tmp/ccsvxT3y.s 			page 16


 508              	.L35:
 509 00d0 0426     		movs	r6, #4
 510 00d2 08E0     		b	.L29
 511              	.L36:
 512 00d4 0526     		movs	r6, #5
 513 00d6 06E0     		b	.L29
 514              	.L37:
 515 00d8 0626     		movs	r6, #6
 516 00da 04E0     		b	.L29
 517              	.L38:
 518 00dc 0726     		movs	r6, #7
 519 00de 02E0     		b	.L29
 520              	.L39:
 521 00e0 0826     		movs	r6, #8
 522 00e2 00E0     		b	.L29
 523              	.L40:
 524 00e4 0A26     		movs	r6, #10
 525              	.L29:
 526              		.loc 1 349 0 discriminator 40
 527 00e6 06FA02F2 		lsl	r2, r6, r2
 528 00ea 9542     		cmp	r5, r2
 529 00ec 17D1     		bne	.L28
 530              	.LVL56:
 350:HALLIB/Src/stm32f7xx_hal_gpio.c ****       {
 351:HALLIB/Src/stm32f7xx_hal_gpio.c ****         /* Configure the External Interrupt or event for the current IO */
 352:HALLIB/Src/stm32f7xx_hal_gpio.c ****         tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 353:HALLIB/Src/stm32f7xx_hal_gpio.c ****         SYSCFG->EXTICR[position >> 2] &= ~tmp;
 531              		.loc 1 353 0 is_stmt 1
 532 00ee 0E4E     		ldr	r6, .L42
 533 00f0 0EF10202 		add	r2, lr, #2
 534 00f4 56F82250 		ldr	r5, [r6, r2, lsl #2]
 535 00f8 25EA0707 		bic	r7, r5, r7
 536              	.LVL57:
 537 00fc 46F82270 		str	r7, [r6, r2, lsl #2]
 354:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 355:HALLIB/Src/stm32f7xx_hal_gpio.c ****         /* Clear EXTI line configuration */
 356:HALLIB/Src/stm32f7xx_hal_gpio.c ****         EXTI->IMR &= ~((uint32_t)iocurrent);
 538              		.loc 1 356 0
 539 0100 0B4D     		ldr	r5, .L42+8
 540 0102 2E68     		ldr	r6, [r5]
 541 0104 E243     		mvns	r2, r4
 542 0106 06EA0204 		and	r4, r6, r2
 543              	.LVL58:
 544 010a 2C60     		str	r4, [r5]
 357:HALLIB/Src/stm32f7xx_hal_gpio.c ****         EXTI->EMR &= ~((uint32_t)iocurrent);
 545              		.loc 1 357 0
 546 010c 6C68     		ldr	r4, [r5, #4]
 547 010e 1440     		ands	r4, r4, r2
 548 0110 6C60     		str	r4, [r5, #4]
 358:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 359:HALLIB/Src/stm32f7xx_hal_gpio.c ****         /* Clear Rising Falling edge configuration */
 360:HALLIB/Src/stm32f7xx_hal_gpio.c ****         EXTI->RTSR &= ~((uint32_t)iocurrent);
 549              		.loc 1 360 0
 550 0112 AC68     		ldr	r4, [r5, #8]
 551 0114 1440     		ands	r4, r4, r2
 552 0116 AC60     		str	r4, [r5, #8]
 361:HALLIB/Src/stm32f7xx_hal_gpio.c ****         EXTI->FTSR &= ~((uint32_t)iocurrent);
ARM GAS  /tmp/ccsvxT3y.s 			page 17


 553              		.loc 1 361 0
 554 0118 EC68     		ldr	r4, [r5, #12]
 555 011a 2240     		ands	r2, r2, r4
 556              	.LVL59:
 557 011c EA60     		str	r2, [r5, #12]
 558              	.LVL60:
 559              	.L28:
 321:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 560              		.loc 1 321 0 discriminator 2
 561 011e 0133     		adds	r3, r3, #1
 562              	.LVL61:
 563              	.L27:
 321:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 564              		.loc 1 321 0 is_stmt 0 discriminator 1
 565 0120 0F2B     		cmp	r3, #15
 566 0122 7FF670AF 		bls	.L30
 362:HALLIB/Src/stm32f7xx_hal_gpio.c **** 	  }
 363:HALLIB/Src/stm32f7xx_hal_gpio.c ****     }
 364:HALLIB/Src/stm32f7xx_hal_gpio.c ****   }
 365:HALLIB/Src/stm32f7xx_hal_gpio.c **** }
 567              		.loc 1 365 0 is_stmt 1
 568 0126 F0BD     		pop	{r4, r5, r6, r7, pc}
 569              	.L43:
 570              		.align	2
 571              	.L42:
 572 0128 00380140 		.word	1073821696
 573 012c 00000240 		.word	1073872896
 574 0130 003C0140 		.word	1073822720
 575              		.cfi_endproc
 576              	.LFE137:
 578              		.section	.text.HAL_GPIO_ReadPin,"ax",%progbits
 579              		.align	2
 580              		.global	HAL_GPIO_ReadPin
 581              		.thumb
 582              		.thumb_func
 584              	HAL_GPIO_ReadPin:
 585              	.LFB138:
 366:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 367:HALLIB/Src/stm32f7xx_hal_gpio.c **** /**
 368:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @}
 369:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 370:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 371:HALLIB/Src/stm32f7xx_hal_gpio.c **** /** @defgroup GPIO_Exported_Functions_Group2 IO operation functions 
 372:HALLIB/Src/stm32f7xx_hal_gpio.c ****  *  @brief   GPIO Read and Write
 373:HALLIB/Src/stm32f7xx_hal_gpio.c ****  *
 374:HALLIB/Src/stm32f7xx_hal_gpio.c **** @verbatim
 375:HALLIB/Src/stm32f7xx_hal_gpio.c ****  ===============================================================================
 376:HALLIB/Src/stm32f7xx_hal_gpio.c ****                        ##### IO operation functions #####
 377:HALLIB/Src/stm32f7xx_hal_gpio.c ****  ===============================================================================
 378:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 379:HALLIB/Src/stm32f7xx_hal_gpio.c **** @endverbatim
 380:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @{
 381:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 382:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 383:HALLIB/Src/stm32f7xx_hal_gpio.c **** /**
 384:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @brief  Reads the specified input port pin.
 385:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIOx where x can be (A..K) to select the GPIO peripheral.
ARM GAS  /tmp/ccsvxT3y.s 			page 18


 386:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIO_Pin specifies the port bit to read.
 387:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *         This parameter can be GPIO_PIN_x where x can be (0..15).
 388:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @retval The input port pin value.
 389:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 390:HALLIB/Src/stm32f7xx_hal_gpio.c **** GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 391:HALLIB/Src/stm32f7xx_hal_gpio.c **** {
 586              		.loc 1 391 0
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 0
 589              		@ frame_needed = 0, uses_anonymous_args = 0
 590              		@ link register save eliminated.
 591              	.LVL62:
 392:HALLIB/Src/stm32f7xx_hal_gpio.c ****   GPIO_PinState bitstatus;
 393:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 394:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Check the parameters */
 395:HALLIB/Src/stm32f7xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 396:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 397:HALLIB/Src/stm32f7xx_hal_gpio.c ****   if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 592              		.loc 1 397 0
 593 0000 0369     		ldr	r3, [r0, #16]
 594 0002 1942     		tst	r1, r3
 595 0004 01D0     		beq	.L46
 398:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 399:HALLIB/Src/stm32f7xx_hal_gpio.c ****     bitstatus = GPIO_PIN_SET;
 596              		.loc 1 399 0
 597 0006 0120     		movs	r0, #1
 598              	.LVL63:
 599 0008 7047     		bx	lr
 600              	.LVL64:
 601              	.L46:
 400:HALLIB/Src/stm32f7xx_hal_gpio.c ****   }
 401:HALLIB/Src/stm32f7xx_hal_gpio.c ****   else
 402:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 403:HALLIB/Src/stm32f7xx_hal_gpio.c ****     bitstatus = GPIO_PIN_RESET;
 602              		.loc 1 403 0
 603 000a 0020     		movs	r0, #0
 604              	.LVL65:
 404:HALLIB/Src/stm32f7xx_hal_gpio.c ****   }
 405:HALLIB/Src/stm32f7xx_hal_gpio.c ****   return bitstatus;
 406:HALLIB/Src/stm32f7xx_hal_gpio.c **** }
 605              		.loc 1 406 0
 606 000c 7047     		bx	lr
 607              		.cfi_endproc
 608              	.LFE138:
 610 000e 00BF     		.section	.text.HAL_GPIO_WritePin,"ax",%progbits
 611              		.align	2
 612              		.global	HAL_GPIO_WritePin
 613              		.thumb
 614              		.thumb_func
 616              	HAL_GPIO_WritePin:
 617              	.LFB139:
 407:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 408:HALLIB/Src/stm32f7xx_hal_gpio.c **** /**
 409:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @brief  Sets or clears the selected data port bit.
 410:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *
 411:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @note   This function uses GPIOx_BSRR register to allow atomic read/modify
 412:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *         accesses. In this way, there is no risk of an IRQ occurring between
ARM GAS  /tmp/ccsvxT3y.s 			page 19


 413:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *         the read and the modify access.
 414:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *
 415:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIOx where x can be (A..K) to select the GPIO peripheral.
 416:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIO_Pin specifies the port bit to be written.
 417:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
 418:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  PinState specifies the value to be written to the selected bit.
 419:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *          This parameter can be one of the GPIO_PinState enum values:
 420:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *            @arg GPIO_PIN_RESET: to clear the port pin
 421:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *            @arg GPIO_PIN_SET: to set the port pin
 422:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @retval None
 423:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 424:HALLIB/Src/stm32f7xx_hal_gpio.c **** void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
 425:HALLIB/Src/stm32f7xx_hal_gpio.c **** {
 618              		.loc 1 425 0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 0
 621              		@ frame_needed = 0, uses_anonymous_args = 0
 622              		@ link register save eliminated.
 623              	.LVL66:
 426:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Check the parameters */
 427:HALLIB/Src/stm32f7xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 428:HALLIB/Src/stm32f7xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN_ACTION(PinState));
 429:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 430:HALLIB/Src/stm32f7xx_hal_gpio.c ****   if(PinState != GPIO_PIN_RESET)
 624              		.loc 1 430 0
 625 0000 0AB1     		cbz	r2, .L48
 431:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 432:HALLIB/Src/stm32f7xx_hal_gpio.c ****     GPIOx->BSRR = GPIO_Pin;
 626              		.loc 1 432 0
 627 0002 8161     		str	r1, [r0, #24]
 628 0004 7047     		bx	lr
 629              	.L48:
 433:HALLIB/Src/stm32f7xx_hal_gpio.c ****   }
 434:HALLIB/Src/stm32f7xx_hal_gpio.c ****   else
 435:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 436:HALLIB/Src/stm32f7xx_hal_gpio.c ****     GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 630              		.loc 1 436 0
 631 0006 0904     		lsls	r1, r1, #16
 632              	.LVL67:
 633 0008 8161     		str	r1, [r0, #24]
 634 000a 7047     		bx	lr
 635              		.cfi_endproc
 636              	.LFE139:
 638              		.section	.text.HAL_GPIO_TogglePin,"ax",%progbits
 639              		.align	2
 640              		.global	HAL_GPIO_TogglePin
 641              		.thumb
 642              		.thumb_func
 644              	HAL_GPIO_TogglePin:
 645              	.LFB140:
 437:HALLIB/Src/stm32f7xx_hal_gpio.c ****   }
 438:HALLIB/Src/stm32f7xx_hal_gpio.c **** }
 439:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 440:HALLIB/Src/stm32f7xx_hal_gpio.c **** /**
 441:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @brief  Toggles the specified GPIO pins.
 442:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
 443:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIO_Pin Specifies the pins to be toggled.
ARM GAS  /tmp/ccsvxT3y.s 			page 20


 444:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @retval None
 445:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 446:HALLIB/Src/stm32f7xx_hal_gpio.c **** void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 447:HALLIB/Src/stm32f7xx_hal_gpio.c **** {
 646              		.loc 1 447 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 0
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650              		@ link register save eliminated.
 651              	.LVL68:
 448:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Check the parameters */
 449:HALLIB/Src/stm32f7xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 450:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 451:HALLIB/Src/stm32f7xx_hal_gpio.c ****   GPIOx->ODR ^= GPIO_Pin;
 652              		.loc 1 451 0
 653 0000 4369     		ldr	r3, [r0, #20]
 654 0002 5940     		eors	r1, r1, r3
 655              	.LVL69:
 656 0004 4161     		str	r1, [r0, #20]
 657 0006 7047     		bx	lr
 658              		.cfi_endproc
 659              	.LFE140:
 661              		.section	.text.HAL_GPIO_LockPin,"ax",%progbits
 662              		.align	2
 663              		.global	HAL_GPIO_LockPin
 664              		.thumb
 665              		.thumb_func
 667              	HAL_GPIO_LockPin:
 668              	.LFB141:
 452:HALLIB/Src/stm32f7xx_hal_gpio.c **** }
 453:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 454:HALLIB/Src/stm32f7xx_hal_gpio.c **** /**
 455:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @brief  Locks GPIO Pins configuration registers.
 456:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @note   The locked registers are GPIOx_MODER, GPIOx_OTYPER, GPIOx_OSPEEDR,
 457:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *         GPIOx_PUPDR, GPIOx_AFRL and GPIOx_AFRH.
 458:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @note   The configuration of the locked GPIO pins can no longer be modified
 459:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *         until the next reset.
 460:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F7 family
 461:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIO_Pin specifies the port bit to be locked.
 462:HALLIB/Src/stm32f7xx_hal_gpio.c ****   *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
 463:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @retval None
 464:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 465:HALLIB/Src/stm32f7xx_hal_gpio.c **** HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 466:HALLIB/Src/stm32f7xx_hal_gpio.c **** {
 669              		.loc 1 466 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 8
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 674              	.LVL70:
 675 0000 82B0     		sub	sp, sp, #8
 676              	.LCFI4:
 677              		.cfi_def_cfa_offset 8
 467:HALLIB/Src/stm32f7xx_hal_gpio.c ****   __IO uint32_t tmp = GPIO_LCKR_LCKK;
 678              		.loc 1 467 0
 679 0002 4FF48033 		mov	r3, #65536
 680 0006 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccsvxT3y.s 			page 21


 468:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 469:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Check the parameters */
 470:HALLIB/Src/stm32f7xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 471:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 472:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Apply lock key write sequence */
 473:HALLIB/Src/stm32f7xx_hal_gpio.c ****   tmp |= GPIO_Pin;
 681              		.loc 1 473 0
 682 0008 019B     		ldr	r3, [sp, #4]
 683 000a 0B43     		orrs	r3, r3, r1
 684 000c 0193     		str	r3, [sp, #4]
 474:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
 475:HALLIB/Src/stm32f7xx_hal_gpio.c ****   GPIOx->LCKR = tmp;
 685              		.loc 1 475 0
 686 000e 019B     		ldr	r3, [sp, #4]
 687 0010 C361     		str	r3, [r0, #28]
 476:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
 477:HALLIB/Src/stm32f7xx_hal_gpio.c ****   GPIOx->LCKR = GPIO_Pin;
 688              		.loc 1 477 0
 689 0012 C161     		str	r1, [r0, #28]
 478:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
 479:HALLIB/Src/stm32f7xx_hal_gpio.c ****   GPIOx->LCKR = tmp;
 690              		.loc 1 479 0
 691 0014 019B     		ldr	r3, [sp, #4]
 692 0016 C361     		str	r3, [r0, #28]
 480:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* Read LCKK bit*/
 481:HALLIB/Src/stm32f7xx_hal_gpio.c ****   tmp = GPIOx->LCKR;
 693              		.loc 1 481 0
 694 0018 C369     		ldr	r3, [r0, #28]
 695 001a 0193     		str	r3, [sp, #4]
 482:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 483:HALLIB/Src/stm32f7xx_hal_gpio.c ****  if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 696              		.loc 1 483 0
 697 001c C369     		ldr	r3, [r0, #28]
 698 001e 13F4803F 		tst	r3, #65536
 699 0022 01D0     		beq	.L53
 484:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 485:HALLIB/Src/stm32f7xx_hal_gpio.c ****     return HAL_OK;
 700              		.loc 1 485 0
 701 0024 0020     		movs	r0, #0
 702              	.LVL71:
 703 0026 00E0     		b	.L52
 704              	.LVL72:
 705              	.L53:
 486:HALLIB/Src/stm32f7xx_hal_gpio.c ****   }
 487:HALLIB/Src/stm32f7xx_hal_gpio.c ****   else
 488:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 489:HALLIB/Src/stm32f7xx_hal_gpio.c ****     return HAL_ERROR;
 706              		.loc 1 489 0
 707 0028 0120     		movs	r0, #1
 708              	.LVL73:
 709              	.L52:
 490:HALLIB/Src/stm32f7xx_hal_gpio.c ****   }
 491:HALLIB/Src/stm32f7xx_hal_gpio.c **** }
 710              		.loc 1 491 0
 711 002a 02B0     		add	sp, sp, #8
 712              	.LCFI5:
 713              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccsvxT3y.s 			page 22


 714              		@ sp needed
 715 002c 7047     		bx	lr
 716              		.cfi_endproc
 717              	.LFE141:
 719 002e 00BF     		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 720              		.align	2
 721              		.weak	HAL_GPIO_EXTI_Callback
 722              		.thumb
 723              		.thumb_func
 725              	HAL_GPIO_EXTI_Callback:
 726              	.LFB143:
 492:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 493:HALLIB/Src/stm32f7xx_hal_gpio.c **** /**
 494:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @brief  This function handles EXTI interrupt request.
 495:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIO_Pin Specifies the pins connected EXTI line
 496:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @retval None
 497:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 498:HALLIB/Src/stm32f7xx_hal_gpio.c **** void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
 499:HALLIB/Src/stm32f7xx_hal_gpio.c **** {
 500:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* EXTI line interrupt detected */
 501:HALLIB/Src/stm32f7xx_hal_gpio.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 502:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 503:HALLIB/Src/stm32f7xx_hal_gpio.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 504:HALLIB/Src/stm32f7xx_hal_gpio.c ****     HAL_GPIO_EXTI_Callback(GPIO_Pin);
 505:HALLIB/Src/stm32f7xx_hal_gpio.c ****   }
 506:HALLIB/Src/stm32f7xx_hal_gpio.c **** }
 507:HALLIB/Src/stm32f7xx_hal_gpio.c **** 
 508:HALLIB/Src/stm32f7xx_hal_gpio.c **** /**
 509:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @brief  EXTI line detection callbacks.
 510:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @param  GPIO_Pin Specifies the pins connected EXTI line
 511:HALLIB/Src/stm32f7xx_hal_gpio.c ****   * @retval None
 512:HALLIB/Src/stm32f7xx_hal_gpio.c ****   */
 513:HALLIB/Src/stm32f7xx_hal_gpio.c **** __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 514:HALLIB/Src/stm32f7xx_hal_gpio.c **** {
 727              		.loc 1 514 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732              	.LVL74:
 733 0000 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE143:
 737 0002 00BF     		.section	.text.HAL_GPIO_EXTI_IRQHandler,"ax",%progbits
 738              		.align	2
 739              		.global	HAL_GPIO_EXTI_IRQHandler
 740              		.thumb
 741              		.thumb_func
 743              	HAL_GPIO_EXTI_IRQHandler:
 744              	.LFB142:
 499:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* EXTI line interrupt detected */
 745              		.loc 1 499 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              	.LVL75:
 499:HALLIB/Src/stm32f7xx_hal_gpio.c ****   /* EXTI line interrupt detected */
ARM GAS  /tmp/ccsvxT3y.s 			page 23


 750              		.loc 1 499 0
 751 0000 08B5     		push	{r3, lr}
 752              	.LCFI6:
 753              		.cfi_def_cfa_offset 8
 754              		.cfi_offset 3, -8
 755              		.cfi_offset 14, -4
 501:HALLIB/Src/stm32f7xx_hal_gpio.c ****   {
 756              		.loc 1 501 0
 757 0002 044B     		ldr	r3, .L59
 758 0004 5B69     		ldr	r3, [r3, #20]
 759 0006 0342     		tst	r3, r0
 760 0008 03D0     		beq	.L56
 503:HALLIB/Src/stm32f7xx_hal_gpio.c ****     HAL_GPIO_EXTI_Callback(GPIO_Pin);
 761              		.loc 1 503 0
 762 000a 024B     		ldr	r3, .L59
 763 000c 5861     		str	r0, [r3, #20]
 504:HALLIB/Src/stm32f7xx_hal_gpio.c ****   }
 764              		.loc 1 504 0
 765 000e FFF7FEFF 		bl	HAL_GPIO_EXTI_Callback
 766              	.LVL76:
 767              	.L56:
 768 0012 08BD     		pop	{r3, pc}
 769              	.L60:
 770              		.align	2
 771              	.L59:
 772 0014 003C0140 		.word	1073822720
 773              		.cfi_endproc
 774              	.LFE142:
 776              		.text
 777              	.Letext0:
 778              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 779              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 780              		.file 4 "Inc/stm32f767xx.h"
 781              		.file 5 "Inc/stm32f7xx.h"
 782              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 783              		.file 7 "HALLIB/Inc/stm32f7xx_hal_gpio.h"
 784              		.file 8 "CORE/core_cm7.h"
ARM GAS  /tmp/ccsvxT3y.s 			page 24


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_gpio.c
     /tmp/ccsvxT3y.s:21     .text.HAL_GPIO_Init:00000000 $t
     /tmp/ccsvxT3y.s:26     .text.HAL_GPIO_Init:00000000 HAL_GPIO_Init
     /tmp/ccsvxT3y.s:364    .text.HAL_GPIO_Init:000001c4 $d
     /tmp/ccsvxT3y.s:372    .text.HAL_GPIO_DeInit:00000000 $t
     /tmp/ccsvxT3y.s:377    .text.HAL_GPIO_DeInit:00000000 HAL_GPIO_DeInit
     /tmp/ccsvxT3y.s:572    .text.HAL_GPIO_DeInit:00000128 $d
     /tmp/ccsvxT3y.s:579    .text.HAL_GPIO_ReadPin:00000000 $t
     /tmp/ccsvxT3y.s:584    .text.HAL_GPIO_ReadPin:00000000 HAL_GPIO_ReadPin
     /tmp/ccsvxT3y.s:611    .text.HAL_GPIO_WritePin:00000000 $t
     /tmp/ccsvxT3y.s:616    .text.HAL_GPIO_WritePin:00000000 HAL_GPIO_WritePin
     /tmp/ccsvxT3y.s:639    .text.HAL_GPIO_TogglePin:00000000 $t
     /tmp/ccsvxT3y.s:644    .text.HAL_GPIO_TogglePin:00000000 HAL_GPIO_TogglePin
     /tmp/ccsvxT3y.s:662    .text.HAL_GPIO_LockPin:00000000 $t
     /tmp/ccsvxT3y.s:667    .text.HAL_GPIO_LockPin:00000000 HAL_GPIO_LockPin
     /tmp/ccsvxT3y.s:720    .text.HAL_GPIO_EXTI_Callback:00000000 $t
     /tmp/ccsvxT3y.s:725    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
     /tmp/ccsvxT3y.s:738    .text.HAL_GPIO_EXTI_IRQHandler:00000000 $t
     /tmp/ccsvxT3y.s:743    .text.HAL_GPIO_EXTI_IRQHandler:00000000 HAL_GPIO_EXTI_IRQHandler
     /tmp/ccsvxT3y.s:772    .text.HAL_GPIO_EXTI_IRQHandler:00000014 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
