ARM GAS  /tmp/ccTJyLFK.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_dfsdm.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.DFSDM_GetInjChannelsNbr,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	DFSDM_GetInjChannelsNbr:
  26              	.LFB200:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_dfsdm.c"
   1:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @file    stm32f7xx_hal_dfsdm.c
   4:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief   This file provides firmware functions to manage the following 
   6:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *          functionalities of the Digital Filter for Sigma-Delta Modulators
   7:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *          (DFSDM) peripherals:
   8:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *           + Initialization and configuration of channels and filters
   9:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *           + Regular channels configuration
  10:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *           + Injected channels configuration
  11:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *           + Regular/Injected Channels DMA Configuration
  12:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *           + Interrupts and flags management
  13:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *           + Analog watchdog feature
  14:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *           + Short-circuit detector feature
  15:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *           + Extremes detector feature
  16:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *           + Clock absence detector feature
  17:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *           + Break generation on analog watchdog or short-circuit event
  18:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         
  19:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   @verbatim
  20:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
  21:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                      ##### How to use this driver #####
  22:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
  23:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   [..]
  24:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     *** Channel initialization ***
  25:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     ==============================
  26:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]
  27:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) User has first to initialize channels (before filters initialization).
  28:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) As prerequisite, fill in the HAL_DFSDM_ChannelMspInit() :
  29:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         (++) Enable DFSDMz clock interface with __HAL_RCC_DFSDMz_CLK_ENABLE().
  30:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         (++) Enable the clocks for the DFSDMz GPIOS with __HAL_RCC_GPIOx_CLK_ENABLE().
  31:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         (++) Configure these DFSDMz pins in alternate mode using HAL_GPIO_Init().
ARM GAS  /tmp/ccTJyLFK.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         (++) If interrupt mode is used, enable and configure DFSDMz_FLT0 global
  33:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             interrupt with HAL_NVIC_SetPriority() and HAL_NVIC_EnableIRQ().
  34:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Configure the output clock, input, serial interface, analog watchdog,
  35:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           offset and data right bit shift parameters for this channel using the 
  36:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_ChannelInit() function.
  37:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
  38:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     *** Channel clock absence detector ***
  39:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     ======================================
  40:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]
  41:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Start clock absence detector using HAL_DFSDM_ChannelCkabStart() or
  42:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_ChannelCkabStart_IT().
  43:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) In polling mode, use HAL_DFSDM_ChannelPollForCkab() to detect the clock
  44:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           absence.
  45:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) In interrupt mode, HAL_DFSDM_ChannelCkabCallback() will be called if
  46:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           clock absence is detected.
  47:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Stop clock absence detector using HAL_DFSDM_ChannelCkabStop() or
  48:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_ChannelCkabStop_IT().
  49:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Please note that the same mode (polling or interrupt) has to be used 
  50:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           for all channels because the channels are sharing the same interrupt.
  51:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Please note also that in interrupt mode, if clock absence detector is
  52:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           stopped for one channel, interrupt will be disabled for all channels.
  53:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
  54:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     *** Channel short circuit detector ***
  55:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     ======================================
  56:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]    
  57:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Start short circuit detector using HAL_DFSDM_ChannelScdStart() or
  58:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           or HAL_DFSDM_ChannelScdStart_IT().
  59:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) In polling mode, use HAL_DFSDM_ChannelPollForScd() to detect short
  60:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           circuit.
  61:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) In interrupt mode, HAL_DFSDM_ChannelScdCallback() will be called if 
  62:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           short circuit is detected.
  63:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Stop short circuit detector using HAL_DFSDM_ChannelScdStop() or
  64:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           or HAL_DFSDM_ChannelScdStop_IT().
  65:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Please note that the same mode (polling or interrupt) has to be used 
  66:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           for all channels because the channels are sharing the same interrupt.
  67:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Please note also that in interrupt mode, if short circuit detector is
  68:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           stopped for one channel, interrupt will be disabled for all channels.
  69:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
  70:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     *** Channel analog watchdog value ***
  71:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     =====================================
  72:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]    
  73:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Get analog watchdog filter value of a channel using
  74:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_ChannelGetAwdValue().
  75:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
  76:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     *** Channel offset value ***
  77:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     =====================================
  78:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]    
  79:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Modify offset value of a channel using HAL_DFSDM_ChannelModifyOffset().
  80:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
  81:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     *** Filter initialization ***
  82:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     =============================
  83:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]
  84:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) After channel initialization, user has to init filters.
  85:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) As prerequisite, fill in the HAL_DFSDM_FilterMspInit() :
  86:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         (++) If interrupt mode is used , enable and configure DFSDMz_FLTx global
  87:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             interrupt with HAL_NVIC_SetPriority() and HAL_NVIC_EnableIRQ().
  88:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             Please note that DFSDMz_FLT0 global interrupt could be already
ARM GAS  /tmp/ccTJyLFK.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             enabled if interrupt is used for channel.
  90:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         (++) If DMA mode is used, configure DMA with HAL_DMA_Init() and link it
  91:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             with DFSDMz filter handle using __HAL_LINKDMA().
  92:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Configure the regular conversion, injected conversion and filter
  93:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           parameters for this filter using the HAL_DFSDM_FilterInit() function.
  94:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
  95:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     *** Filter regular channel conversion ***
  96:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     =========================================
  97:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]    
  98:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Select regular channel and enable/disable continuous mode using
  99:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterConfigRegChannel().
 100:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Start regular conversion using HAL_DFSDM_FilterRegularStart(),
 101:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterRegularStart_IT(), HAL_DFSDM_FilterRegularStart_DMA() or
 102:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterRegularMsbStart_DMA().
 103:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) In polling mode, use HAL_DFSDM_FilterPollForRegConversion() to detect 
 104:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           the end of regular conversion.
 105:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) In interrupt mode, HAL_DFSDM_FilterRegConvCpltCallback() will be called
 106:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           at the end of regular conversion.
 107:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Get value of regular conversion and corresponding channel using 
 108:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterGetRegularValue().
 109:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) In DMA mode, HAL_DFSDM_FilterRegConvHalfCpltCallback() and 
 110:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterRegConvCpltCallback() will be called respectively at the
 111:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           half transfer and at the transfer complete. Please note that 
 112:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterRegConvHalfCpltCallback() will be called only in DMA
 113:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           circular mode.
 114:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Stop regular conversion using HAL_DFSDM_FilterRegularStop(),
 115:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterRegularStop_IT() or HAL_DFSDM_FilterRegularStop_DMA().
 116:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 117:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     *** Filter injected channels conversion ***
 118:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     ===========================================
 119:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]
 120:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Select injected channels using HAL_DFSDM_FilterConfigInjChannel().
 121:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Start injected conversion using HAL_DFSDM_FilterInjectedStart(),
 122:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterInjectedStart_IT(), HAL_DFSDM_FilterInjectedStart_DMA() or
 123:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterInjectedMsbStart_DMA().
 124:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) In polling mode, use HAL_DFSDM_FilterPollForInjConversion() to detect 
 125:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           the end of injected conversion.
 126:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) In interrupt mode, HAL_DFSDM_FilterInjConvCpltCallback() will be called
 127:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           at the end of injected conversion.
 128:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Get value of injected conversion and corresponding channel using 
 129:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterGetInjectedValue().
 130:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) In DMA mode, HAL_DFSDM_FilterInjConvHalfCpltCallback() and 
 131:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterInjConvCpltCallback() will be called respectively at the
 132:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           half transfer and at the transfer complete. Please note that 
 133:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterInjConvCpltCallback() will be called only in DMA
 134:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           circular mode.
 135:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Stop injected conversion using HAL_DFSDM_FilterInjectedStop(),
 136:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_FilterInjectedStop_IT() or HAL_DFSDM_FilterInjectedStop_DMA().
 137:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 138:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     *** Filter analog watchdog ***
 139:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     ==============================
 140:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]
 141:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Start filter analog watchdog using HAL_DFSDM_FilterAwdStart_IT().
 142:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) HAL_DFSDM_FilterAwdCallback() will be called if analog watchdog occurs.
 143:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Stop filter analog watchdog using HAL_DFSDM_FilterAwdStop_IT().
 144:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 145:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     *** Filter extreme detector ***
ARM GAS  /tmp/ccTJyLFK.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     ===============================
 147:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]
 148:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Start filter extreme detector using HAL_DFSDM_FilterExdStart().
 149:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Get extreme detector maximum value using HAL_DFSDM_FilterGetExdMaxValue().
 150:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Get extreme detector minimum value using HAL_DFSDM_FilterGetExdMinValue().
 151:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Start filter extreme detector using HAL_DFSDM_FilterExdStop().
 152:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 153:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     *** Filter conversion time ***
 154:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     ==============================
 155:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]
 156:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (#) Get conversion time value using HAL_DFSDM_FilterGetConvTimeValue().
 157:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 158:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     @endverbatim
 159:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ******************************************************************************
 160:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @attention
 161:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *
 162:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 163:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *
 164:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * Redistribution and use in source and binary forms, with or without modification,
 165:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * are permitted provided that the following conditions are met:
 166:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 167:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *      this list of conditions and the following disclaimer.
 168:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 169:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *      this list of conditions and the following disclaimer in the documentation
 170:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *      and/or other materials provided with the distribution.
 171:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 172:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *      may be used to endorse or promote products derived from this software
 173:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *      without specific prior written permission.
 174:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *
 175:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 176:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 177:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 178:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 179:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 180:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 181:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 182:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 183:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 184:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 185:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *
 186:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ******************************************************************************
 187:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 188:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 189:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /* Includes ------------------------------------------------------------------*/
 190:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** #include "stm32f7xx_hal.h"
 191:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 192:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @addtogroup STM32F7xx_HAL_Driver
 193:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
 194:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 195:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** #ifdef HAL_DFSDM_MODULE_ENABLED
 196:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** #if defined (STM32F765xx) || defined(STM32F767xx) || defined(STM32F769xx) || defined(STM32F777xx) |
 197:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM DFSDM
 198:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief DFSDM HAL driver module
 199:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
 200:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */ 
 201:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 202:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccTJyLFK.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /* Private define ------------------------------------------------------------*/
 204:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM_Private_Define DFSDM Private Define
 205:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  * @{
 206:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  */
 207:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 208:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** #define DFSDM_FLTCR1_MSB_RCH_OFFSET     8
 209:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 210:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** #define DFSDM_MSB_MASK               0xFFFF0000U
 211:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** #define DFSDM_LSB_MASK               0x0000FFFFU
 212:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** #define DFSDM_CKAB_TIMEOUT           5000U
 213:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** #define DFSDM1_CHANNEL_NUMBER           8U
 214:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 215:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @}
 216:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 217:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 218:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /* Private macro -------------------------------------------------------------*/
 219:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /* Private variables ---------------------------------------------------------*/
 220:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM_Private_Variables DFSDM Private Variables
 221:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
 222:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 223:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __IO uint32_t                v_dfsdm1ChannelCounter = 0;
 224:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** DFSDM_Channel_HandleTypeDef* a_dfsdm1ChannelHandle[DFSDM1_CHANNEL_NUMBER] = {NULL};
 225:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 226:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @}
 227:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 228:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 229:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /* Private function prototypes -----------------------------------------------*/
 230:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM_Private_Functions DFSDM Private Functions
 231:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
 232:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 233:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels);
 234:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance);
 235:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void     DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
 236:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void     DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter);
 237:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void     DFSDM_InjConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter);
 238:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void     DFSDM_InjConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter);
 239:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void     DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma);
 240:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void     DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma);
 241:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void     DFSDM_DMAInjectedHalfConvCplt(DMA_HandleTypeDef *hdma);
 242:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void     DFSDM_DMAInjectedConvCplt(DMA_HandleTypeDef *hdma);
 243:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void     DFSDM_DMAError(DMA_HandleTypeDef *hdma);
 244:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 245:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @}
 246:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 247:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 248:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /* Exported functions --------------------------------------------------------*/
 249:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM_Exported_Functions DFSDM Exported Functions
 250:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
 251:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 252:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 253:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM_Exported_Functions_Group1_Channel Channel initialization and de-initialization 
 254:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *  @brief    Channel initialization and de-initialization functions 
 255:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *
 256:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @verbatim
 257:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
 258:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         ##### Channel initialization and de-initialization functions #####
 259:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
ARM GAS  /tmp/ccTJyLFK.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]  This section provides functions allowing to:
 261:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Initialize the DFSDM channel.
 262:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) De-initialize the DFSDM channel.
 263:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @endverbatim
 264:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
 265:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 266:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 267:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 268:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Initialize the DFSDM channel according to the specified parameters
 269:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
 270:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 271:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status.
 272:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 273:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 274:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 275:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM Channel handle */
 276:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel == NULL)
 277:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 278:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_ERROR;
 279:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 280:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 281:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 282:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 283:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_FUNCTIONAL_STATE(hdfsdm_channel->Init.OutputClock.Activation));
 284:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_INPUT(hdfsdm_channel->Init.Input.Multiplexer));
 285:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_DATA_PACKING(hdfsdm_channel->Init.Input.DataPacking));
 286:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_INPUT_PINS(hdfsdm_channel->Init.Input.Pins));
 287:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_SERIAL_INTERFACE_TYPE(hdfsdm_channel->Init.SerialInterface.Type));
 288:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_SPI_CLOCK(hdfsdm_channel->Init.SerialInterface.SpiClock));
 289:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_FILTER_ORDER(hdfsdm_channel->Init.Awd.FilterOrder));
 290:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
 291:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
 292:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
 293:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 294:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check that channel has not been already initialized */
 295:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 296:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 297:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_ERROR;
 298:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 299:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 300:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Call MSP init function */
 301:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 302:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 303:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Update the channel counter */
 304:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   v_dfsdm1ChannelCounter++;
 305:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 306:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Configure output serial clock and enable global DFSDM interface only for first channel */
 307:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(v_dfsdm1ChannelCounter == 1)
 308:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 309:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
 310:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Set the output serial clock source */
 311:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 312:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 313:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 314:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Reset clock divider */
 315:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 316:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
ARM GAS  /tmp/ccTJyLFK.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 318:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider))
 319:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Set the output clock divider */
 320:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 321:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
 322:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 323:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 324:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* enable the DFSDM global interface */
 325:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 326:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 327:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 328:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Set channel input parameters */
 329:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 330:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          DFSDM_CHCFGR1_CHINSEL);
 331:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 332:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         hdfsdm_channel->Init.Input.DataPacking | 
 333:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         hdfsdm_channel->Init.Input.Pins);
 334:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 335:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Set serial interface parameters */
 336:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 337:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 338:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         hdfsdm_channel->Init.SerialInterface.SpiClock);
 339:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 340:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Set analog watchdog parameters */
 341:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 342:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 343:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                        ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSC
 344:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 345:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Set channel offset and right bit shift */
 346:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 347:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OF
 348:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_
 349:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 350:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Enable DFSDM channel */
 351:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 352:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 353:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Set DFSDM Channel to ready state */
 354:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 355:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 356:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Store channel handle in DFSDM channel handle table */
 357:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 358:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 359:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return HAL_OK;
 360:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 361:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 362:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 363:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  De-initialize the DFSDM channel.
 364:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 365:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status.
 366:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 367:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelDeInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 368:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 369:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM Channel handle */
 370:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel == NULL)
 371:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 372:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_ERROR;
 373:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
ARM GAS  /tmp/ccTJyLFK.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 375:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 376:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 377:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 378:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check that channel has not been already deinitialized */
 379:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] == NULL)
 380:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 381:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_ERROR;
 382:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 383:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 384:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Disable the DFSDM channel */
 385:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CHEN);
 386:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 387:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Update the channel counter */
 388:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   v_dfsdm1ChannelCounter--;
 389:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 390:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Disable global DFSDM at deinit of last channel */
 391:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(v_dfsdm1ChannelCounter == 0)
 392:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 393:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_DFSDMEN);
 394:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 395:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 396:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Call MSP deinit function */
 397:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_DFSDM_ChannelMspDeInit(hdfsdm_channel);
 398:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 399:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Set DFSDM Channel in reset state */
 400:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_RESET;
 401:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 402:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Reset channel handle in DFSDM channel handle table */
 403:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = (DFSDM_Channel_Ha
 404:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 405:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return HAL_OK;
 406:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 407:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 408:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 409:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Initialize the DFSDM channel MSP.
 410:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 411:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
 412:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 413:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 414:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 415:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 416:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_channel);
 417:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 418:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the function is needed,
 419:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_ChannelMspInit could be implemented in the user file.
 420:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
 421:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 422:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 423:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 424:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  De-initialize the DFSDM channel MSP.
 425:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 426:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
 427:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 428:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_ChannelMspDeInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 429:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 430:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/ccTJyLFK.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_channel);
 432:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 433:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the function is needed,
 434:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_ChannelMspDeInit could be implemented in the user file.
 435:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
 436:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 437:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 438:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 439:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @}
 440:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 441:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 442:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM_Exported_Functions_Group2_Channel Channel operation functions
 443:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *  @brief    Channel operation functions
 444:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *
 445:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @verbatim
 446:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
 447:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                    ##### Channel operation functions #####
 448:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
 449:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]  This section provides functions allowing to:
 450:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Manage clock absence detector feature.
 451:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Manage short circuit detector feature.
 452:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Get analog watchdog value.
 453:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Modify offset value.
 454:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @endverbatim
 455:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
 456:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 457:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 458:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 459:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start clock absence detection in polling mode.
 460:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   Same mode has to be used for all channels.
 461:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   If clock is not available on this channel during 5 seconds,
 462:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         clock absence detection will not be activated and function
 463:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         will return HAL_TIMEOUT error.
 464:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 465:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
 466:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 467:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelCkabStart(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 468:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 469:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 470:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 471:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 472:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 473:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 474:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 475:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 476:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM channel state */
 477:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel->State != HAL_DFSDM_CHANNEL_STATE_READY)
 478:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 479:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
 480:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
 481:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 482:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
 483:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 484:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get channel number from channel instance */
 485:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance);
 486:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 487:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get timeout */
ARM GAS  /tmp/ccTJyLFK.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     tickstart = HAL_GetTick();
 489:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 490:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear clock absence flag */
 491:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     while((((DFSDM1_Filter0->FLTISR & DFSDM_FLTISR_CKABF) >> (DFSDM_FLTISR_CKABF_Pos + channel)) & 
 492:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 493:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 494:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 495:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Check the Timeout */
 496:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       if((HAL_GetTick()-tickstart) > DFSDM_CKAB_TIMEOUT)
 497:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 498:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         /* Set timeout status */
 499:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         status = HAL_TIMEOUT;
 500:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         break;
 501:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       }
 502:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 503:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 504:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(status == HAL_OK)
 505:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 506:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Start clock absence detection */
 507:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CKABEN;
 508:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 509:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 510:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
 511:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
 512:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 513:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 514:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 515:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to poll for the clock absence detection.
 516:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 517:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Timeout Timeout value in milliseconds.
 518:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
 519:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 520:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelPollForCkab(DFSDM_Channel_HandleTypeDef *hdfsdm_channel, 
 521:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                uint32_t Timeout)
 522:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 523:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 524:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 525:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 526:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 527:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 528:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 529:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM channel state */
 530:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel->State != HAL_DFSDM_CHANNEL_STATE_READY)
 531:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 532:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
 533:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_ERROR;
 534:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 535:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
 536:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 537:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get channel number from channel instance */
 538:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance);
 539:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 540:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get timeout */
 541:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     tickstart = HAL_GetTick();
 542:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 543:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Wait clock absence detection */
 544:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     while((((DFSDM1_Filter0->FLTISR & DFSDM_FLTISR_CKABF) >> (DFSDM_FLTISR_CKABF_Pos + channel)) & 
ARM GAS  /tmp/ccTJyLFK.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 546:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Check the Timeout */
 547:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       if(Timeout != HAL_MAX_DELAY)
 548:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 549:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 550:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
 551:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           /* Return timeout status */
 552:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           return HAL_TIMEOUT;
 553:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         }
 554:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       }
 555:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 556:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 557:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear clock absence detection flag */
 558:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 559:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 560:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return function status */
 561:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_OK;
 562:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 563:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 564:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 565:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 566:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop clock absence detection in polling mode.
 567:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 568:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
 569:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 570:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelCkabStop(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 571:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 572:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 573:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 574:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 575:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 576:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 577:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 578:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM channel state */
 579:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel->State != HAL_DFSDM_CHANNEL_STATE_READY)
 580:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 581:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
 582:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
 583:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 584:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
 585:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 586:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Stop clock absence detection */
 587:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKABEN);
 588:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 589:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear clock absence flag */
 590:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance);
 591:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 592:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 593:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
 594:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
 595:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 596:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 597:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 598:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start clock absence detection in interrupt mode.
 599:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   Same mode has to be used for all channels.
 600:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   If clock is not available on this channel during 5 seconds,
 601:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         clock absence detection will not be activated and function
ARM GAS  /tmp/ccTJyLFK.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         will return HAL_TIMEOUT error.
 603:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 604:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
 605:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 606:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelCkabStart_IT(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 607:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 608:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 609:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 610:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 611:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 612:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 613:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 614:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 615:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM channel state */
 616:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel->State != HAL_DFSDM_CHANNEL_STATE_READY)
 617:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 618:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
 619:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
 620:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 621:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
 622:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 623:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get channel number from channel instance */
 624:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance);
 625:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 626:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get timeout */
 627:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     tickstart = HAL_GetTick();
 628:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 629:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear clock absence flag */
 630:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     while((((DFSDM1_Filter0->FLTISR & DFSDM_FLTISR_CKABF) >> (DFSDM_FLTISR_CKABF_Pos + channel)) & 
 631:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 632:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 633:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 634:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Check the Timeout */
 635:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       if((HAL_GetTick()-tickstart) > DFSDM_CKAB_TIMEOUT)
 636:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 637:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         /* Set timeout status */
 638:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         status = HAL_TIMEOUT;
 639:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         break;
 640:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       }
 641:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 642:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 643:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(status == HAL_OK)
 644:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 645:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Activate clock absence detection interrupt */
 646:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       DFSDM1_Filter0->FLTCR2 |= DFSDM_FLTCR2_CKABIE;
 647:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 648:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Start clock absence detection */
 649:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CKABEN;
 650:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 651:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 652:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
 653:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
 654:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 655:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 656:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 657:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Clock absence detection callback. 
 658:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
ARM GAS  /tmp/ccTJyLFK.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
 660:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 661:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 662:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 663:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 664:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_channel);
 665:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 666:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 667:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
 668:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
 669:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 670:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 671:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 672:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop clock absence detection in interrupt mode.
 673:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   Interrupt will be disabled for all channels
 674:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 675:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
 676:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 677:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelCkabStop_IT(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 678:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 679:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 680:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 681:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 682:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 683:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 684:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 685:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM channel state */
 686:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel->State != HAL_DFSDM_CHANNEL_STATE_READY)
 687:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 688:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
 689:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
 690:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 691:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
 692:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 693:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Stop clock absence detection */
 694:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKABEN);
 695:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 696:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear clock absence flag */
 697:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance);
 698:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 699:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 700:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Disable clock absence detection interrupt */
 701:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTCR2 &= ~(DFSDM_FLTCR2_CKABIE);
 702:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 703:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
 704:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
 705:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 706:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 707:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 708:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start short circuit detection in polling mode.
 709:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   Same mode has to be used for all channels
 710:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 711:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Threshold Short circuit detector threshold.
 712:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         This parameter must be a number between Min_Data = 0 and Max_Data = 255.
 713:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  BreakSignal Break signals assigned to short circuit event.
 714:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         This parameter can be a values combination of @ref DFSDM_BreakSignals.
 715:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
ARM GAS  /tmp/ccTJyLFK.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 717:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelScdStart(DFSDM_Channel_HandleTypeDef *hdfsdm_channel,
 718:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                             uint32_t Threshold,
 719:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                             uint32_t BreakSignal)
 720:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 721:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 722:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 723:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 724:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 725:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_SCD_THRESHOLD(Threshold));
 726:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_BREAK_SIGNALS(BreakSignal));
 727:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 728:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM channel state */
 729:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel->State != HAL_DFSDM_CHANNEL_STATE_READY)
 730:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 731:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
 732:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
 733:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 734:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
 735:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 736:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Configure threshold and break signals */
 737:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_BKSCD | DFSDM_CHAWSCDR_SCDT);
 738:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHAWSCDR |= ((BreakSignal << DFSDM_CHAWSCDR_BKSCD_Pos) | \
 739:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          Threshold);
 740:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 741:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Start short circuit detection */
 742:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_SCDEN;
 743:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 744:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
 745:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
 746:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 747:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 748:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 749:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to poll for the short circuit detection.
 750:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 751:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Timeout Timeout value in milliseconds.
 752:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
 753:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 754:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelPollForScd(DFSDM_Channel_HandleTypeDef *hdfsdm_channel, 
 755:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                               uint32_t Timeout)
 756:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 757:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 758:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 759:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 760:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 761:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 762:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 763:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM channel state */
 764:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel->State != HAL_DFSDM_CHANNEL_STATE_READY)
 765:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 766:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
 767:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_ERROR;
 768:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 769:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
 770:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 771:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get channel number from channel instance */
 772:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance);
ARM GAS  /tmp/ccTJyLFK.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 774:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get timeout */
 775:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     tickstart = HAL_GetTick();
 776:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 777:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Wait short circuit detection */
 778:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     while(((DFSDM1_Filter0->FLTISR & DFSDM_FLTISR_SCDF) >> (DFSDM_FLTISR_SCDF_Pos + channel)) == 0)
 779:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 780:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Check the Timeout */
 781:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       if(Timeout != HAL_MAX_DELAY)
 782:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 783:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 784:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
 785:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           /* Return timeout status */
 786:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           return HAL_TIMEOUT;
 787:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         }
 788:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       }
 789:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 790:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 791:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear short circuit detection flag */
 792:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRSCSDF_Pos + channel));
 793:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 794:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return function status */
 795:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_OK;
 796:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 797:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 798:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 799:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 800:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop short circuit detection in polling mode.
 801:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 802:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
 803:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 804:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelScdStop(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 805:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 806:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 807:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 808:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 809:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 810:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 811:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 812:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM channel state */
 813:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel->State != HAL_DFSDM_CHANNEL_STATE_READY)
 814:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 815:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
 816:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
 817:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 818:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
 819:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 820:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Stop short circuit detection */
 821:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SCDEN);
 822:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 823:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear short circuit detection flag */
 824:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance);
 825:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRSCSDF_Pos + channel));
 826:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 827:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
 828:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
 829:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
ARM GAS  /tmp/ccTJyLFK.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 831:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 832:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start short circuit detection in interrupt mode.
 833:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   Same mode has to be used for all channels
 834:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 835:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Threshold Short circuit detector threshold.
 836:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         This parameter must be a number between Min_Data = 0 and Max_Data = 255.
 837:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  BreakSignal Break signals assigned to short circuit event.
 838:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         This parameter can be a values combination of @ref DFSDM_BreakSignals.
 839:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
 840:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 841:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelScdStart_IT(DFSDM_Channel_HandleTypeDef *hdfsdm_channel,
 842:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                uint32_t Threshold,
 843:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                uint32_t BreakSignal)
 844:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 845:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 846:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 847:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 848:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 849:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_SCD_THRESHOLD(Threshold));
 850:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_BREAK_SIGNALS(BreakSignal));
 851:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 852:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM channel state */
 853:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel->State != HAL_DFSDM_CHANNEL_STATE_READY)
 854:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 855:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
 856:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
 857:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 858:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
 859:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 860:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Activate short circuit detection interrupt */
 861:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTCR2 |= DFSDM_FLTCR2_SCDIE;
 862:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 863:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Configure threshold and break signals */
 864:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_BKSCD | DFSDM_CHAWSCDR_SCDT);
 865:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHAWSCDR |= ((BreakSignal << DFSDM_CHAWSCDR_BKSCD_Pos) | \
 866:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          Threshold);
 867:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 868:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Start short circuit detection */
 869:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_SCDEN;
 870:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 871:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
 872:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
 873:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 874:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 875:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 876:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Short circuit detection callback. 
 877:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 878:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
 879:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 880:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 881:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 882:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 883:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_channel);
 884:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 885:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 886:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
ARM GAS  /tmp/ccTJyLFK.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
 888:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 889:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 890:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 891:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop short circuit detection in interrupt mode.
 892:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   Interrupt will be disabled for all channels
 893:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 894:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
 895:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 896:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelScdStop_IT(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 897:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 898:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 899:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 900:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 901:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 902:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 903:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 904:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM channel state */
 905:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel->State != HAL_DFSDM_CHANNEL_STATE_READY)
 906:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 907:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
 908:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
 909:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 910:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
 911:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 912:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Stop short circuit detection */
 913:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SCDEN);
 914:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 915:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear short circuit detection flag */
 916:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance);
 917:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRSCSDF_Pos + channel));
 918:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 919:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Disable short circuit detection interrupt */
 920:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTCR2 &= ~(DFSDM_FLTCR2_SCDIE);
 921:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 922:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
 923:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
 924:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 925:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 926:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 927:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to get channel analog watchdog value.
 928:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 929:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval Channel analog watchdog value.
 930:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 931:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** int16_t HAL_DFSDM_ChannelGetAwdValue(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 932:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 933:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return (int16_t) hdfsdm_channel->Instance->CHWDATAR;
 934:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 935:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 936:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 937:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to modify channel offset value.
 938:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 939:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Offset DFSDM channel offset.
 940:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         This parameter must be a number between Min_Data = -8388608 and Max_Data = 8388607.
 941:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status.
 942:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 943:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_ChannelModifyOffset(DFSDM_Channel_HandleTypeDef *hdfsdm_channel,
ARM GAS  /tmp/ccTJyLFK.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                 int32_t Offset)
 945:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 946:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 947:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 948:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
 949:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_ALL_INSTANCE(hdfsdm_channel->Instance));
 950:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CHANNEL_OFFSET(Offset));
 951:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 952:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM channel state */
 953:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_channel->State != HAL_DFSDM_CHANNEL_STATE_READY)
 954:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 955:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
 956:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
 957:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 958:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
 959:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 960:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Modify channel offset */
 961:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET);
 962:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHCFGR2 |= ((uint32_t) Offset << DFSDM_CHCFGR2_OFFSET_Pos);
 963:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 964:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
 965:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
 966:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 967:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 968:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 969:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @}
 970:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 971:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 972:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM_Exported_Functions_Group3_Channel Channel state function
 973:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *  @brief    Channel state function
 974:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *
 975:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @verbatim
 976:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
 977:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                    ##### Channel state function #####
 978:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
 979:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]  This section provides function allowing to:
 980:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Get channel handle state.
 981:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @endverbatim
 982:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
 983:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 984:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 985:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 986:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to get the current DFSDM channel handle state.
 987:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_channel DFSDM channel handle.
 988:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval DFSDM channel state.
 989:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 990:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_DFSDM_Channel_StateTypeDef HAL_DFSDM_ChannelGetState(DFSDM_Channel_HandleTypeDef *hdfsdm_channe
 991:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 992:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return DFSDM channel handle state */
 993:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return hdfsdm_channel->State;
 994:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 995:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 996:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
 997:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @}
 998:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
 999:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1000:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM_Exported_Functions_Group1_Filter Filter initialization and de-initialization fu
ARM GAS  /tmp/ccTJyLFK.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *  @brief    Filter initialization and de-initialization functions 
1002:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *
1003:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @verbatim
1004:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
1005:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         ##### Filter initialization and de-initialization functions #####
1006:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
1007:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]  This section provides functions allowing to:
1008:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Initialize the DFSDM filter.
1009:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) De-initialize the DFSDM filter.
1010:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @endverbatim
1011:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
1012:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1013:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1014:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1015:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Initialize the DFSDM filter according to the specified parameters
1016:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
1017:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1018:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status.
1019:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1020:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1021:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1022:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM Channel handle */
1023:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter == NULL)
1024:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1025:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_ERROR;
1026:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1027:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1028:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1029:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1030:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_REG_TRIGGER(hdfsdm_filter->Init.RegularParam.Trigger));
1031:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.RegularParam.FastMode));
1032:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.RegularParam.DmaMode));
1033:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_INJ_TRIGGER(hdfsdm_filter->Init.InjectedParam.Trigger));
1034:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.InjectedParam.ScanMode));
1035:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_FUNCTIONAL_STATE(hdfsdm_filter->Init.InjectedParam.DmaMode));
1036:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
1037:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
1038:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling
1039:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1040:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters compatibility */
1041:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
1042:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
1043:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
1044:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1045:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_ERROR;
1046:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1047:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1048:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Initialize DFSDM filter variables with default values */
1049:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
1050:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->InjectedChannelsNbr = 1;
1051:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->InjConvRemaining    = 1;
1052:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
1053:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1054:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Call MSP init function */
1055:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_DFSDM_FilterMspInit(hdfsdm_filter);
1056:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1057:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Set regular parameters */
ARM GAS  /tmp/ccTJyLFK.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
1059:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
1060:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1061:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
1062:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1063:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1064:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1065:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
1066:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1067:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1068:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
1069:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1070:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
1071:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1072:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1073:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1074:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
1075:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1076:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1077:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Set injected parameters */
1078:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXT
1079:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
1080:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1081:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
1082:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
1083:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
1084:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1085:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1086:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
1087:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1088:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
1089:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1090:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1091:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1092:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
1093:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1094:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1095:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
1096:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1097:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
1098:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1099:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1100:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1101:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
1102:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1103:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1104:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Set filter parameters */
1105:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
1106:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
1107:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                     ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FL
1108:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                   (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
1109:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1110:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Store regular and injected triggers and injected scan mode*/
1111:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
1112:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
1113:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
1114:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
ARM GAS  /tmp/ccTJyLFK.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1116:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Enable DFSDM filter */
1117:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
1118:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1119:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Set DFSDM filter to ready state */
1120:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
1121:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1122:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return HAL_OK;
1123:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1124:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1125:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1126:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  De-initializes the DFSDM filter.
1127:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1128:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status.
1129:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1130:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterDeInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1131:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1132:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter handle */
1133:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter == NULL)
1134:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1135:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_ERROR;
1136:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1137:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1138:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1139:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1140:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1141:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Disable the DFSDM filter */
1142:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
1143:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1144:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Call MSP deinit function */
1145:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_DFSDM_FilterMspDeInit(hdfsdm_filter);
1146:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1147:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Set DFSDM filter in reset state */
1148:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_RESET;
1149:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1150:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return HAL_OK;
1151:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1152:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1153:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1154:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Initializes the DFSDM filter MSP.
1155:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1156:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
1157:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1158:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1159:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1160:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
1161:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_filter);
1162:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1163:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the function is needed,
1164:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_FilterMspInit could be implemented in the user file.
1165:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
1166:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1167:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1168:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1169:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  De-initializes the DFSDM filter MSP.
1170:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1171:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
ARM GAS  /tmp/ccTJyLFK.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1173:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_FilterMspDeInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1174:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1175:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
1176:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_filter);
1177:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1178:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the function is needed,
1179:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_FilterMspDeInit could be implemented in the user file.
1180:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
1181:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1182:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1183:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1184:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @}
1185:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1186:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1187:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM_Exported_Functions_Group2_Filter Filter control functions
1188:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *  @brief    Filter control functions
1189:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *
1190:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @verbatim
1191:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
1192:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                     ##### Filter control functions #####
1193:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
1194:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]  This section provides functions allowing to:
1195:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Select channel and enable/disable continuous mode for regular conversion.
1196:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Select channels for injected conversion.
1197:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @endverbatim
1198:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
1199:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1200:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1201:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1202:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to select channel and to enable/disable
1203:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         continuous mode for regular conversion.
1204:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1205:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Channel Channel for regular conversion.
1206:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         This parameter can be a value of @ref DFSDM_Channel_Selection.
1207:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  ContinuousMode Enable/disable continuous mode for regular conversion.
1208:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         This parameter can be a value of @ref DFSDM_ContinuousMode.
1209:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1210:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1211:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
1212:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    uint32_t                    Channel,
1213:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    uint32_t                    ContinuousMode)
1214:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1215:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1216:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1217:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1218:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1219:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
1220:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
1221:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1222:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1223:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
1224:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
1225:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1226:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Configure channel and continuous mode for regular conversion */
1227:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
1228:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
ARM GAS  /tmp/ccTJyLFK.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1230:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MS
1231:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                      DFSDM_FLTCR1_RCONT);
1232:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1233:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     else
1234:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1235:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB
1236:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1237:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Store continuous mode information */
1238:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->RegularContMode = ContinuousMode;
1239:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }  
1240:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1241:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1242:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1243:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1244:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1245:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1246:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1247:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1248:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1249:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1250:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to select channels for injected conversion.
1251:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1252:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Channel Channels for injected conversion.
1253:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
1254:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1255:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1256:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
1257:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    uint32_t                    Channel)
1258:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1259:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1260:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1261:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1262:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1263:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));
1264:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1265:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1266:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
1267:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
1268:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1269:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Configure channel for injected conversion */
1270:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
1271:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Store number of injected channels */
1272:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
1273:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Update number of injected channels remaining */
1274:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
1275:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                       hdfsdm_filter->InjectedChannelsNbr : 1;
1276:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1277:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1278:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1279:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1280:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1281:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1282:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1283:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1284:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1285:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
ARM GAS  /tmp/ccTJyLFK.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @}
1287:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1288:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1289:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM_Exported_Functions_Group3_Filter Filter operation functions
1290:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *  @brief    Filter operation functions
1291:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *
1292:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @verbatim
1293:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
1294:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                     ##### Filter operation functions #####
1295:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
1296:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]  This section provides functions allowing to:
1297:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Start conversion of regular/injected channel.
1298:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Poll for the end of regular/injected conversion.
1299:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Stop conversion of regular/injected channel.
1300:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Start conversion of regular/injected channel and enable interrupt.
1301:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Call the callback functions at the end of regular/injected conversions.
1302:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Stop conversion of regular/injected channel and disable interrupt.
1303:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Start conversion of regular/injected channel and enable DMA transfer.
1304:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Stop conversion of regular/injected channel and disable DMA transfer.
1305:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Start analog watchdog and enable interrupt.
1306:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Call the callback function when analog watchdog occurs.
1307:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Stop analog watchdog and disable interrupt.
1308:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Start extreme detector.
1309:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Stop extreme detector.
1310:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Get result of regular channel conversion.
1311:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Get result of injected channel conversion.
1312:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Get extreme detector maximum and minimum values.
1313:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Get conversion time.
1314:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Handle DFSDM interrupt request.
1315:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @endverbatim
1316:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
1317:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1318:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1319:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1320:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start regular conversion in polling mode.
1321:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only when DFSDM filter instance is 
1322:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         in idle state or if injected conversion is ongoing.
1323:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1324:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1325:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1326:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1327:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1328:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1329:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1330:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1331:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1332:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1333:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1334:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
1335:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
1336:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1337:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Start regular conversion */
1338:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM_RegConvStart(hdfsdm_filter);
1339:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1340:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1341:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1342:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
ARM GAS  /tmp/ccTJyLFK.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1344:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1345:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1346:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1347:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1348:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1349:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to poll for the end of regular conversion.
1350:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only if regular conversion is ongoing.
1351:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1352:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Timeout Timeout value in milliseconds.
1353:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1354:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1355:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterPollForRegConversion(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
1356:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                        uint32_t                    Timeout)
1357:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1358:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
1359:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1360:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1361:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1362:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1363:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1364:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
1365:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
1366:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1367:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
1368:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_ERROR;
1369:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1370:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1371:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1372:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get timeout */
1373:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     tickstart = HAL_GetTick();  
1374:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1375:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Wait end of regular conversion */
1376:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
1377:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1378:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Check the Timeout */
1379:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       if(Timeout != HAL_MAX_DELAY)
1380:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
1381:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
1382:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
1383:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           /* Return timeout status */
1384:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           return HAL_TIMEOUT;
1385:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         }
1386:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       }
1387:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1388:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Check if overrun occurs */
1389:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
1390:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1391:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Update error code and call error callback */
1392:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
1393:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
1394:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1395:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Clear regular overrun flag */
1396:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
1397:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1398:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Update DFSDM filter state only if not continuous conversion and SW trigger */
1399:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
ARM GAS  /tmp/ccTJyLFK.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
1401:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1402:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
1403:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                              HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
1404:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1405:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return function status */
1406:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_OK;
1407:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1408:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1409:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1410:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1411:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop regular conversion in polling mode.
1412:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only if regular conversion is ongoing.
1413:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1414:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1415:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1416:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1417:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1418:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1419:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1420:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1421:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1422:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1423:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1424:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
1425:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
1426:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1427:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
1428:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1429:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1430:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1431:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1432:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Stop regular conversion */
1433:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM_RegConvStop(hdfsdm_filter);
1434:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1435:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1436:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1437:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1438:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1439:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1440:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start regular conversion in interrupt mode.
1441:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only when DFSDM filter instance is 
1442:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         in idle state or if injected conversion is ongoing.
1443:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1444:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1445:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1446:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1447:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1448:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1449:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1450:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1451:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1452:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1453:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1454:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
1455:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
1456:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
ARM GAS  /tmp/ccTJyLFK.s 			page 27


1457:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Enable interrupts for regular conversions */
1458:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 |= (DFSDM_FLTCR2_REOCIE | DFSDM_FLTCR2_ROVRIE);
1459:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
1460:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Start regular conversion */
1461:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM_RegConvStart(hdfsdm_filter);
1462:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1463:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1464:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1465:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1466:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1467:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1468:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1469:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1470:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1471:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1472:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop regular conversion in interrupt mode.
1473:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only if regular conversion is ongoing.
1474:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1475:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1476:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1477:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1478:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1479:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1480:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1481:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1482:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1483:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1484:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1485:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
1486:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
1487:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1488:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
1489:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1490:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1491:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1492:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1493:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Disable interrupts for regular conversions */
1494:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE | DFSDM_FLTCR2_ROVRIE);
1495:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
1496:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Stop regular conversion */
1497:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM_RegConvStop(hdfsdm_filter);
1498:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1499:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1500:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1501:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1502:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1503:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1504:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start regular conversion in DMA mode.
1505:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only when DFSDM filter instance is 
1506:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         in idle state or if injected conversion is ongoing.
1507:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         Please note that data on buffer will contain signed regular conversion
1508:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         value on 24 most significant bits and corresponding channel on 3 least
1509:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         significant bits.
1510:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1511:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  pData The destination buffer address.
1512:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Length The length of data to be transferred from DFSDM filter to memory.
1513:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
ARM GAS  /tmp/ccTJyLFK.s 			page 28


1514:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1515:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
1516:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    int32_t                    *pData,
1517:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    uint32_t                    Length)
1518:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1519:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1520:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1521:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1522:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1523:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1524:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check destination address and length */
1525:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((pData == NULL) || (Length == 0))
1526:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1527:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1528:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1529:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check that DMA is enabled for regular conversion */
1530:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
1531:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1532:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1533:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1534:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters compatibility */
1535:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
1536:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
1537:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
1538:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length != 1))
1539:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1540:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1541:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1542:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
1543:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
1544:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
1545:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1546:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1547:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1548:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1549:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
1550:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
1551:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1552:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Set callbacks on DMA handler */
1553:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
1554:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
1555:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCUL
1556:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMARegularHalfConvCplt : NULL;
1557:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
1558:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Start DMA in interrupt mode */
1559:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
1560:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                         (uint32_t) pData, Length) != HAL_OK)
1561:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1562:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Set DFSDM filter in error state */
1563:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
1564:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
1565:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1566:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     else
1567:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1568:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Start regular conversion */
1569:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       DFSDM_RegConvStart(hdfsdm_filter);
1570:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
ARM GAS  /tmp/ccTJyLFK.s 			page 29


1571:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1572:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1573:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1574:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1575:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1576:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1577:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1578:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1579:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1580:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1581:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start regular conversion in DMA mode and to get
1582:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         only the 16 most significant bits of conversion.
1583:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only when DFSDM filter instance is 
1584:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         in idle state or if injected conversion is ongoing.
1585:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         Please note that data on buffer will contain signed 16 most significant
1586:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         bits of regular conversion.
1587:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1588:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  pData The destination buffer address.
1589:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Length The length of data to be transferred from DFSDM filter to memory.
1590:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1591:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1592:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterRegularMsbStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
1593:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                       int16_t                    *pData,
1594:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                       uint32_t                    Length)
1595:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1596:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1597:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1598:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1599:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1600:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1601:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check destination address and length */
1602:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((pData == NULL) || (Length == 0))
1603:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1604:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1605:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1606:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check that DMA is enabled for regular conversion */
1607:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
1608:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1609:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1610:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1611:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters compatibility */
1612:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
1613:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
1614:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
1615:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length != 1))
1616:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1617:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1618:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1619:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
1620:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
1621:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
1622:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1623:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1624:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1625:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1626:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
1627:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
ARM GAS  /tmp/ccTJyLFK.s 			page 30


1628:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1629:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Set callbacks on DMA handler */
1630:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
1631:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
1632:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCUL
1633:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMARegularHalfConvCplt : NULL;
1634:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
1635:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Start DMA in interrupt mode */
1636:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)(&hdfsdm_filter->Instance->FLTRDATAR) + 2
1637:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                         (uint32_t) pData, Length) != HAL_OK)
1638:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1639:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Set DFSDM filter in error state */
1640:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
1641:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
1642:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1643:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     else
1644:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1645:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Start regular conversion */
1646:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       DFSDM_RegConvStart(hdfsdm_filter);
1647:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1648:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1649:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1650:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1651:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1652:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1653:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1654:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1655:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1656:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1657:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1658:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop regular conversion in DMA mode.
1659:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only if regular conversion is ongoing.
1660:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1661:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1662:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1663:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1664:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1665:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1666:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1667:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1668:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1669:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1670:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1671:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
1672:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
1673:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1674:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
1675:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1676:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1677:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1678:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1679:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Stop current DMA transfer */
1680:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
1681:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1682:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Set DFSDM filter in error state */
1683:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
1684:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
ARM GAS  /tmp/ccTJyLFK.s 			page 31


1685:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1686:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     else
1687:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1688:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Stop regular conversion */
1689:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       DFSDM_RegConvStop(hdfsdm_filter);
1690:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1691:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1692:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1693:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1694:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1695:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1696:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1697:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to get regular conversion value.
1698:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1699:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Channel Corresponding channel of regular conversion.
1700:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval Regular conversion value
1701:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1702:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** int32_t HAL_DFSDM_FilterGetRegularValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
1703:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         uint32_t                   *Channel)
1704:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1705:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t reg = 0;
1706:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   int32_t  value = 0;
1707:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1708:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1709:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1710:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(Channel != NULL);
1711:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1712:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get value of data register for regular channel */
1713:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   reg = hdfsdm_filter->Instance->FLTRDATAR;
1714:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
1715:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Extract channel and regular conversion value */
1716:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
1717:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   value = ((int32_t)(reg & DFSDM_FLTRDATAR_RDATA) >> DFSDM_FLTRDATAR_RDATA_Pos);
1718:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1719:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* return regular conversion value */
1720:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return value;
1721:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1722:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1723:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1724:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start injected conversion in polling mode.
1725:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only when DFSDM filter instance is 
1726:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         in idle state or if regular conversion is ongoing.
1727:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1728:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1729:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1730:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1731:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1732:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1733:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1734:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1735:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1736:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1737:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1738:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
1739:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG))
1740:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1741:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Start injected conversion */
ARM GAS  /tmp/ccTJyLFK.s 			page 32


1742:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM_InjConvStart(hdfsdm_filter);
1743:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1744:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1745:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1746:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1747:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1748:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1749:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1750:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1751:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1752:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1753:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to poll for the end of injected conversion.
1754:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only if injected conversion is ongoing.
1755:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1756:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Timeout Timeout value in milliseconds.
1757:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1758:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1759:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterPollForInjConversion(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
1760:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                        uint32_t                    Timeout)
1761:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1762:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
1763:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1764:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1765:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1766:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1767:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1768:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_INJ) && \
1769:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
1770:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1771:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
1772:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_ERROR;
1773:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1774:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1775:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1776:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get timeout */
1777:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     tickstart = HAL_GetTick();  
1778:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1779:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Wait end of injected conversions */
1780:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     while((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JEOCF) != DFSDM_FLTISR_JEOCF)
1781:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1782:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Check the Timeout */
1783:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       if(Timeout != HAL_MAX_DELAY)
1784:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
1785:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
1786:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
1787:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           /* Return timeout status */
1788:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           return HAL_TIMEOUT;
1789:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         }
1790:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       }
1791:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1792:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Check if overrun occurs */
1793:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JOVRF) == DFSDM_FLTISR_JOVRF)
1794:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1795:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Update error code and call error callback */
1796:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
1797:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
1798:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
ARM GAS  /tmp/ccTJyLFK.s 			page 33


1799:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Clear injected overrun flag */
1800:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
1801:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1802:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1803:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Update remaining injected conversions */
1804:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->InjConvRemaining--;
1805:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(hdfsdm_filter->InjConvRemaining == 0)
1806:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1807:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Update DFSDM filter state only if trigger is software */
1808:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
1809:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
1810:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
1811:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
1812:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       }
1813:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       
1814:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* end of injected sequence, reset the value */
1815:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
1816:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          hdfsdm_filter->InjectedChannelsNbr : 1;
1817:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1818:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1819:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return function status */
1820:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     return HAL_OK;
1821:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1822:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1823:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1824:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1825:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop injected conversion in polling mode.
1826:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only if injected conversion is ongoing.
1827:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1828:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1829:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1830:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1831:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1832:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1833:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1834:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1835:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1836:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1837:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1838:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_INJ) && \
1839:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
1840:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1841:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
1842:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1843:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1844:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1845:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1846:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Stop injected conversion */
1847:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM_InjConvStop(hdfsdm_filter);
1848:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1849:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1850:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1851:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1852:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1853:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1854:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start injected conversion in interrupt mode.
1855:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only when DFSDM filter instance is 
ARM GAS  /tmp/ccTJyLFK.s 			page 34


1856:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         in idle state or if regular conversion is ongoing.
1857:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1858:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1859:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1860:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStart_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1861:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1862:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1863:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1864:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1865:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1866:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1867:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1868:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
1869:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG))
1870:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1871:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Enable interrupts for injected conversions */
1872:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 |= (DFSDM_FLTCR2_JEOCIE | DFSDM_FLTCR2_JOVRIE);
1873:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
1874:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Start injected conversion */
1875:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM_InjConvStart(hdfsdm_filter);
1876:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1877:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1878:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1879:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1880:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1881:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1882:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1883:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1884:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1885:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1886:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop injected conversion in interrupt mode.
1887:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only if injected conversion is ongoing.
1888:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1889:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1890:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1891:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStop_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
1892:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1893:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1894:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1895:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1896:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1897:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1898:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1899:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_INJ) && \
1900:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
1901:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1902:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
1903:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1904:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1905:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1906:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1907:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Disable interrupts for injected conversions */
1908:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE | DFSDM_FLTCR2_JOVRIE);
1909:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
1910:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Stop injected conversion */
1911:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM_InjConvStop(hdfsdm_filter);
1912:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
ARM GAS  /tmp/ccTJyLFK.s 			page 35


1913:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1914:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1915:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1916:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1917:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1918:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start injected conversion in DMA mode.
1919:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only when DFSDM filter instance is 
1920:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         in idle state or if regular conversion is ongoing.
1921:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         Please note that data on buffer will contain signed injected conversion
1922:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         value on 24 most significant bits and corresponding channel on 3 least
1923:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         significant bits.
1924:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
1925:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  pData The destination buffer address.
1926:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Length The length of data to be transferred from DFSDM filter to memory.
1927:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
1928:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
1929:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
1930:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                     int32_t                    *pData,
1931:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                     uint32_t                    Length)
1932:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
1933:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
1934:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1935:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
1936:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
1937:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1938:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check destination address and length */
1939:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((pData == NULL) || (Length == 0))
1940:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1941:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1942:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1943:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check that DMA is enabled for injected conversion */
1944:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_JDMAEN) != DFSDM_FLTCR1_JDMAEN)
1945:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1946:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1947:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1948:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters compatibility */
1949:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER) && \
1950:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_NORMAL) && \
1951:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length > hdfsdm_filter->InjConvRemaining))
1952:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1953:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1954:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1955:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER) && \
1956:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_CIRCULAR))
1957:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1958:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1959:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1960:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
1961:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
1962:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG))
1963:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1964:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Set callbacks on DMA handler */
1965:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaInj->XferCpltCallback = DFSDM_DMAInjectedConvCplt;
1966:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaInj->XferErrorCallback = DFSDM_DMAError;
1967:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaInj->XferHalfCpltCallback = (hdfsdm_filter->hdmaInj->Init.Mode == DMA_CIRCUL
1968:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMAInjectedHalfConvCplt : NULL;
1969:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
ARM GAS  /tmp/ccTJyLFK.s 			page 36


1970:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Start DMA in interrupt mode */
1971:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaInj, (uint32_t)&hdfsdm_filter->Instance->FLTJDATAR, \
1972:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                         (uint32_t) pData, Length) != HAL_OK)
1973:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1974:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Set DFSDM filter in error state */
1975:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
1976:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
1977:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1978:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     else
1979:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
1980:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Start injected conversion */
1981:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       DFSDM_InjConvStart(hdfsdm_filter);
1982:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
1983:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1984:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
1985:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
1986:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
1987:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
1988:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
1989:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
1990:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
1991:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
1992:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
1993:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start injected conversion in DMA mode and to get
1994:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         only the 16 most significant bits of conversion.
1995:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only when DFSDM filter instance is 
1996:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         in idle state or if regular conversion is ongoing.
1997:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         Please note that data on buffer will contain signed 16 most significant
1998:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         bits of injected conversion.
1999:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2000:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  pData The destination buffer address.
2001:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Length The length of data to be transferred from DFSDM filter to memory.
2002:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
2003:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2004:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterInjectedMsbStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
2005:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                        int16_t                    *pData,
2006:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                        uint32_t                    Length)
2007:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2008:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
2009:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2010:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
2011:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
2012:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2013:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check destination address and length */
2014:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((pData == NULL) || (Length == 0))
2015:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2016:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
2017:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2018:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check that DMA is enabled for injected conversion */
2019:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_JDMAEN) != DFSDM_FLTCR1_JDMAEN)
2020:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2021:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
2022:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2023:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters compatibility */
2024:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER) && \
2025:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_NORMAL) && \
2026:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length > hdfsdm_filter->InjConvRemaining))
ARM GAS  /tmp/ccTJyLFK.s 			page 37


2027:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2028:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
2029:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2030:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER) && \
2031:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_CIRCULAR))
2032:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2033:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
2034:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2035:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
2036:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
2037:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG))
2038:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2039:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Set callbacks on DMA handler */
2040:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaInj->XferCpltCallback = DFSDM_DMAInjectedConvCplt;
2041:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaInj->XferErrorCallback = DFSDM_DMAError;
2042:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaInj->XferHalfCpltCallback = (hdfsdm_filter->hdmaInj->Init.Mode == DMA_CIRCUL
2043:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMAInjectedHalfConvCplt : NULL;
2044:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
2045:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Start DMA in interrupt mode */
2046:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaInj, (uint32_t)(&hdfsdm_filter->Instance->FLTJDATAR) + 2
2047:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                         (uint32_t) pData, Length) != HAL_OK)
2048:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2049:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Set DFSDM filter in error state */
2050:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
2051:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
2052:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2053:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     else
2054:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2055:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Start injected conversion */
2056:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       DFSDM_InjConvStart(hdfsdm_filter);
2057:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2058:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2059:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
2060:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2061:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
2062:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2063:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
2064:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
2065:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2066:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2067:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2068:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop injected conversion in DMA mode.
2069:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   This function should be called only if injected conversion is ongoing.
2070:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2071:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
2072:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2073:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2074:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2075:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
2076:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2077:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
2078:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
2079:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2080:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
2081:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_INJ) && \
2082:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
2083:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
ARM GAS  /tmp/ccTJyLFK.s 			page 38


2084:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
2085:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
2086:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2087:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
2088:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2089:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Stop current DMA transfer */
2090:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(HAL_DMA_Abort(hdfsdm_filter->hdmaInj) != HAL_OK)
2091:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2092:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Set DFSDM filter in error state */
2093:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
2094:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
2095:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2096:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     else
2097:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2098:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Stop regular conversion */
2099:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       DFSDM_InjConvStop(hdfsdm_filter);
2100:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2101:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2102:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
2103:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
2104:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2105:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2106:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2107:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to get injected conversion value.
2108:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2109:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Channel Corresponding channel of injected conversion.
2110:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval Injected conversion value
2111:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2112:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** int32_t HAL_DFSDM_FilterGetInjectedValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, 
2113:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          uint32_t                   *Channel)
2114:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2115:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t reg = 0;
2116:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   int32_t  value = 0;
2117:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2118:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
2119:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
2120:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(Channel != NULL);
2121:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2122:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get value of data register for injected channel */
2123:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   reg = hdfsdm_filter->Instance->FLTJDATAR;
2124:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2125:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Extract channel and injected conversion value */
2126:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *Channel = (reg & DFSDM_FLTJDATAR_JDATACH);
2127:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   value = ((int32_t)(reg & DFSDM_FLTJDATAR_JDATA) >> DFSDM_FLTJDATAR_JDATA_Pos);
2128:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2129:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* return regular conversion value */
2130:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return value;
2131:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2132:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2133:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2134:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start filter analog watchdog in interrupt mode.
2135:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2136:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  awdParam DFSDM filter analog watchdog parameters.
2137:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
2138:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2139:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterAwdStart_IT(DFSDM_Filter_HandleTypeDef   *hdfsdm_filter,
2140:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                               DFSDM_Filter_AwdParamTypeDef *awdParam)
ARM GAS  /tmp/ccTJyLFK.s 			page 39


2141:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2142:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
2143:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2144:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
2145:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
2146:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_AWD_DATA_SOURCE(awdParam->DataSource));
2147:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_INJECTED_CHANNEL(awdParam->Channel));
2148:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_AWD_THRESHOLD(awdParam->HighThreshold));
2149:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_AWD_THRESHOLD(awdParam->LowThreshold));
2150:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_BREAK_SIGNALS(awdParam->HighBreakSignal));
2151:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_BREAK_SIGNALS(awdParam->LowBreakSignal));
2152:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2153:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
2154:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_RESET) || \
2155:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
2156:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2157:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
2158:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
2159:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2160:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
2161:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2162:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Set analog watchdog data source */
2163:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_AWFSEL);
2164:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= awdParam->DataSource;
2165:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2166:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Set thresholds and break signals */
2167:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWHTR &= ~(DFSDM_FLTAWHTR_AWHT | DFSDM_FLTAWHTR_BKAWH);
2168:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWHTR |= (((uint32_t) awdParam->HighThreshold << DFSDM_FLTAWHTR_AWH
2169:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         awdParam->HighBreakSignal);
2170:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWLTR &= ~(DFSDM_FLTAWLTR_AWLT | DFSDM_FLTAWLTR_BKAWL);
2171:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWLTR |= (((uint32_t) awdParam->LowThreshold << DFSDM_FLTAWLTR_AWLT
2172:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         awdParam->LowBreakSignal);
2173:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2174:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Set channels and interrupt for analog watchdog */
2175:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_AWDCH);
2176:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 |= (((awdParam->Channel & DFSDM_LSB_MASK) << DFSDM_FLTCR2_AWDCH
2177:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         DFSDM_FLTCR2_AWDIE);
2178:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2179:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
2180:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
2181:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2182:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2183:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2184:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop filter analog watchdog in interrupt mode.
2185:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2186:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
2187:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2188:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterAwdStop_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2189:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2190:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
2191:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2192:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
2193:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
2194:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2195:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
2196:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_RESET) || \
2197:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
ARM GAS  /tmp/ccTJyLFK.s 			page 40


2198:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2199:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
2200:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
2201:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2202:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
2203:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2204:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Reset channels for analog watchdog and deactivate interrupt */
2205:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_AWDCH | DFSDM_FLTCR2_AWDIE);
2206:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2207:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear all analog watchdog flags */
2208:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWCFR = (DFSDM_FLTAWCFR_CLRAWHTF | DFSDM_FLTAWCFR_CLRAWLTF);
2209:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
2210:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Reset thresholds and break signals */
2211:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWHTR &= ~(DFSDM_FLTAWHTR_AWHT | DFSDM_FLTAWHTR_BKAWH);
2212:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWLTR &= ~(DFSDM_FLTAWLTR_AWLT | DFSDM_FLTAWLTR_BKAWL);
2213:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2214:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Reset analog watchdog data source */
2215:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_AWFSEL);
2216:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2217:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
2218:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
2219:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2220:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2221:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2222:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to start extreme detector feature.
2223:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2224:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Channel Channels where extreme detector is enabled.
2225:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
2226:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
2227:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2228:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterExdStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
2229:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                            uint32_t                    Channel)
2230:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2231:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
2232:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2233:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
2234:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
2235:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));
2236:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2237:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
2238:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_RESET) || \
2239:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
2240:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2241:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
2242:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
2243:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2244:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
2245:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2246:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Set channels for extreme detector */
2247:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_EXCH);
2248:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 |= ((Channel & DFSDM_LSB_MASK) << DFSDM_FLTCR2_EXCH_Pos);
2249:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2250:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
2251:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
2252:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2253:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2254:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
ARM GAS  /tmp/ccTJyLFK.s 			page 41


2255:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to stop extreme detector feature.
2256:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2257:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval HAL status
2258:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2259:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_StatusTypeDef HAL_DFSDM_FilterExdStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2260:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2261:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
2262:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   __IO uint32_t     reg1;
2263:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   __IO uint32_t     reg2;
2264:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2265:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
2266:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
2267:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2268:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter state */
2269:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_RESET) || \
2270:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
2271:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2272:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Return error status */
2273:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     status = HAL_ERROR;
2274:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2275:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else
2276:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2277:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Reset channels for extreme detector */
2278:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_EXCH);
2279:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2280:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear extreme detector values */
2281:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     reg1 = hdfsdm_filter->Instance->FLTEXMAX;
2282:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     reg2 = hdfsdm_filter->Instance->FLTEXMIN;    
2283:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     UNUSED(reg1); /* To avoid GCC warning */
2284:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     UNUSED(reg2); /* To avoid GCC warning */
2285:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2286:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return function status */
2287:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return status;
2288:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2289:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2290:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2291:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to get extreme detector maximum value.
2292:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2293:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Channel Corresponding channel.
2294:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval Extreme detector maximum value
2295:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         This value is between Min_Data = -8388608 and Max_Data = 8388607.
2296:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2297:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** int32_t HAL_DFSDM_FilterGetExdMaxValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
2298:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                        uint32_t                   *Channel)
2299:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2300:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t reg = 0;
2301:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   int32_t  value = 0;
2302:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2303:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
2304:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
2305:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(Channel != NULL);
2306:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2307:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get value of extreme detector maximum register */
2308:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   reg = hdfsdm_filter->Instance->FLTEXMAX;
2309:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2310:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Extract channel and extreme detector maximum value */
2311:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *Channel = (reg & DFSDM_FLTEXMAX_EXMAXCH);
ARM GAS  /tmp/ccTJyLFK.s 			page 42


2312:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   value = ((int32_t)(reg & DFSDM_FLTEXMAX_EXMAX) >> DFSDM_FLTEXMAX_EXMAX_Pos);
2313:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2314:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* return extreme detector maximum value */
2315:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return value;
2316:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2317:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2318:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2319:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to get extreme detector minimum value.
2320:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2321:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Channel Corresponding channel.
2322:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval Extreme detector minimum value
2323:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         This value is between Min_Data = -8388608 and Max_Data = 8388607.
2324:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2325:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** int32_t HAL_DFSDM_FilterGetExdMinValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
2326:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                        uint32_t                   *Channel)
2327:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2328:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t reg = 0;
2329:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   int32_t  value = 0;
2330:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2331:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
2332:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
2333:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(Channel != NULL);
2334:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2335:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get value of extreme detector minimum register */
2336:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   reg = hdfsdm_filter->Instance->FLTEXMIN;
2337:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2338:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Extract channel and extreme detector minimum value */
2339:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *Channel = (reg & DFSDM_FLTEXMIN_EXMINCH);
2340:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   value = ((int32_t)(reg & DFSDM_FLTEXMIN_EXMIN) >> DFSDM_FLTEXMIN_EXMIN_Pos);
2341:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2342:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* return extreme detector minimum value */
2343:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return value;
2344:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2345:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2346:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2347:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to get conversion time value.
2348:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2349:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval Conversion time value
2350:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   To get time in second, this value has to be divided by DFSDM clock frequency.
2351:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2352:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** uint32_t HAL_DFSDM_FilterGetConvTimeValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2353:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2354:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t reg = 0;
2355:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t value = 0;
2356:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2357:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check parameters */
2358:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
2359:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2360:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get value of conversion timer register */
2361:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   reg = hdfsdm_filter->Instance->FLTCNVTIMR;
2362:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2363:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Extract conversion time value */
2364:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   value = ((reg & DFSDM_FLTCNVTIMR_CNVCNT) >> DFSDM_FLTCNVTIMR_CNVCNT_Pos);
2365:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2366:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* return extreme detector minimum value */
2367:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return value;
2368:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
ARM GAS  /tmp/ccTJyLFK.s 			page 43


2369:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2370:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2371:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function handles the DFSDM interrupts.
2372:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2373:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2374:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2375:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2376:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2377:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check if overrun occurs during regular conversion */
2378:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) != 0) && \
2379:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_ROVRIE) != 0))
2380:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2381:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear regular overrun flag */
2382:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
2383:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2384:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Update error code */
2385:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
2386:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2387:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Call error callback */
2388:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
2389:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2390:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check if overrun occurs during injected conversion */
2391:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JOVRF) != 0) && \
2392:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_JOVRIE) != 0))
2393:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2394:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear injected overrun flag */
2395:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
2396:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2397:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Update error code */
2398:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
2399:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2400:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Call error callback */
2401:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
2402:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2403:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check if end of regular conversion */
2404:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != 0) && \
2405:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_REOCIE) != 0))
2406:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2407:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Call regular conversion complete callback */
2408:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
2409:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2410:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* End of conversion if mode is not continuous and software trigger */
2411:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
2412:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
2413:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2414:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Disable interrupts for regular conversions */
2415:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
2416:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2417:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Update DFSDM filter state */
2418:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
2419:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                              HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
2420:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2421:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2422:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check if end of injected conversion */
2423:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JEOCF) != 0) && \
2424:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_JEOCIE) != 0))
2425:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
ARM GAS  /tmp/ccTJyLFK.s 			page 44


2426:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Call injected conversion complete callback */
2427:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
2428:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2429:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Update remaining injected conversions */
2430:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->InjConvRemaining--;
2431:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(hdfsdm_filter->InjConvRemaining == 0)
2432:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2433:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* End of conversion if trigger is software */
2434:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
2435:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
2436:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         /* Disable interrupts for injected conversions */
2437:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
2438:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2439:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         /* Update DFSDM filter state */
2440:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
2441:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
2442:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       }
2443:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* end of injected sequence, reset the value */
2444:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
2445:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          hdfsdm_filter->InjectedChannelsNbr : 1;
2446:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2447:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2448:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check if analog watchdog occurs */
2449:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_AWDF) != 0) && \
2450:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_AWDIE) != 0))
2451:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2452:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     uint32_t reg = 0;
2453:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     uint32_t threshold = 0;
2454:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     uint32_t channel = 0;
2455:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
2456:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get channel and threshold */
2457:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     reg = hdfsdm_filter->Instance->FLTAWSR;
2458:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRES
2459:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(threshold == DFSDM_AWD_HIGH_THRESHOLD)
2460:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2461:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
2462:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2463:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     while((reg & 1) == 0)
2464:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2465:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       channel++;
2466:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       reg = reg >> 1;
2467:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2468:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear analog watchdog flag */
2469:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
2470:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         (1 << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
2471:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                      (1 << channel);
2472:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2473:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Call analog watchdog callback */
2474:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
2475:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2476:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check if clock absence occurs */
2477:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
2478:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) != 0) && \
2479:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_CKABIE) != 0))
2480:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2481:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     uint32_t reg = 0;
2482:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     uint32_t channel = 0;
ARM GAS  /tmp/ccTJyLFK.s 			page 45


2483:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
2484:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
2485:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2486:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     while(channel < DFSDM1_CHANNEL_NUMBER)
2487:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2488:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Check if flag is set and corresponding channel is enabled */
2489:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       if(((reg & 1) != 0) && (a_dfsdm1ChannelHandle[channel] != NULL))
2490:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
2491:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         /* Check clock absence has been enabled for this channel */
2492:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         if((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0)
2493:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
2494:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           /* Clear clock absence flag */
2495:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           hdfsdm_filter->Instance->FLTICR = (1 << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
2496:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2497:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           /* Call clock absence callback */
2498:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
2499:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         }
2500:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       }
2501:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       channel++;
2502:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       reg = reg >> 1;
2503:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2504:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2505:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check if short circuit detection occurs */
2506:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
2507:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) != 0) && \
2508:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_SCDIE) != 0))
2509:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2510:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     uint32_t reg = 0;
2511:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     uint32_t channel = 0;
2512:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
2513:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Get channel */
2514:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
2515:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     while((reg & 1) == 0)
2516:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2517:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       channel++;
2518:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       reg = reg >> 1;
2519:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2520:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
2521:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Clear short circuit detection flag */
2522:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTICR = (1 << (DFSDM_FLTICR_CLRSCSDF_Pos + channel));
2523:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2524:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Call short circuit detection callback */
2525:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
2526:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2527:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2528:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2529:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2530:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Regular conversion complete callback. 
2531:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   In interrupt mode, user has to read conversion value in this function
2532:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         using HAL_DFSDM_FilterGetRegularValue.
2533:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2534:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2535:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2536:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2537:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2538:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
2539:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_filter);
ARM GAS  /tmp/ccTJyLFK.s 			page 46


2540:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2541:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2542:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
2543:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
2544:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2545:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2546:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2547:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Half regular conversion complete callback. 
2548:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2549:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2550:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2551:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2552:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2553:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
2554:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_filter);
2555:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2556:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2557:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
2558:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
2559:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2560:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2561:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2562:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Injected conversion complete callback. 
2563:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @note   In interrupt mode, user has to read conversion value in this function
2564:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   *         using HAL_DFSDM_FilterGetInjectedValue.
2565:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2566:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2567:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2568:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2569:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2570:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
2571:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_filter);
2572:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2573:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2574:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
2575:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
2576:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2577:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2578:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2579:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Half injected conversion complete callback. 
2580:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2581:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2582:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2583:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_FilterInjConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2584:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2585:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
2586:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_filter);
2587:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2588:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2589:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_FilterInjConvHalfCpltCallback could be implemented in the user file.
2590:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
2591:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2592:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2593:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2594:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Filter analog watchdog callback. 
2595:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2596:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Channel Corresponding channel.
ARM GAS  /tmp/ccTJyLFK.s 			page 47


2597:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Threshold Low or high threshold has been reached.
2598:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2599:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2600:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
2601:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         uint32_t Channel, uint32_t Threshold)
2602:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2603:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
2604:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_filter);
2605:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(Channel);
2606:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(Threshold);
2607:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2608:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2609:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
2610:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
2611:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2612:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2613:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2614:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  Error callback. 
2615:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2616:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2617:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2618:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** __weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2619:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2620:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
2621:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   UNUSED(hdfsdm_filter);
2622:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2623:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2624:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****             the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
2625:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****    */
2626:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2627:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2628:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2629:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @}
2630:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2631:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2632:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @defgroup DFSDM_Exported_Functions_Group4_Filter Filter state functions
2633:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *  @brief    Filter state functions
2634:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****  *
2635:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @verbatim
2636:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
2637:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                      ##### Filter state functions #####
2638:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   ==============================================================================
2639:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     [..]  This section provides functions allowing to:
2640:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Get the DFSDM filter state.
2641:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       (+) Get the DFSDM filter error.
2642:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** @endverbatim
2643:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
2644:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2645:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2646:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2647:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to get the current DFSDM filter handle state.
2648:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2649:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval DFSDM filter state.
2650:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2651:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** HAL_DFSDM_Filter_StateTypeDef HAL_DFSDM_FilterGetState(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2652:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2653:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return DFSDM filter handle state */
ARM GAS  /tmp/ccTJyLFK.s 			page 48


2654:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return hdfsdm_filter->State;
2655:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2656:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2657:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2658:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to get the current DFSDM filter error.
2659:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2660:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval DFSDM filter error code.
2661:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2662:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** uint32_t HAL_DFSDM_FilterGetError(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
2663:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2664:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return hdfsdm_filter->ErrorCode;
2665:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2666:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2667:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2668:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @}
2669:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2670:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2671:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2672:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @}
2673:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2674:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /* End of exported functions -------------------------------------------------*/
2675:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2676:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /* Private functions ---------------------------------------------------------*/
2677:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /** @addtogroup DFSDM_Private_Functions DFSDM Private Functions
2678:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @{
2679:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2680:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2681:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2682:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  DMA half transfer complete callback for regular conversion. 
2683:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdma DMA handle.
2684:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2685:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2686:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
2687:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2688:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
2689:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hd
2690:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2691:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Call regular half conversion complete callback */
2692:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
2693:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2694:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2695:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2696:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  DMA transfer complete callback for regular conversion. 
2697:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdma DMA handle.
2698:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2699:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2700:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
2701:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2702:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
2703:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hd
2704:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2705:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Call regular conversion complete callback */
2706:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
2707:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2708:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2709:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2710:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  DMA half transfer complete callback for injected conversion. 
ARM GAS  /tmp/ccTJyLFK.s 			page 49


2711:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdma DMA handle.
2712:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2713:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2714:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void DFSDM_DMAInjectedHalfConvCplt(DMA_HandleTypeDef *hdma)   
2715:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2716:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
2717:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hd
2718:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2719:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Call injected half conversion complete callback */
2720:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_DFSDM_FilterInjConvHalfCpltCallback(hdfsdm_filter);
2721:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2722:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2723:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2724:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  DMA transfer complete callback for injected conversion. 
2725:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdma DMA handle.
2726:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2727:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2728:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void DFSDM_DMAInjectedConvCplt(DMA_HandleTypeDef *hdma)   
2729:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2730:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
2731:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hd
2732:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2733:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Call injected conversion complete callback */
2734:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
2735:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2736:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2737:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2738:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  DMA error callback. 
2739:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdma DMA handle.
2740:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2741:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2742:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
2743:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
2744:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
2745:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hd
2746:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2747:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Update error code */
2748:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
2749:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2750:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Call error callback */
2751:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
2752:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2753:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2754:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2755:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to get the number of injected channels.
2756:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Channels bitfield of injected channels.
2757:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval Number of injected channels.
2758:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2759:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
2760:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
  28              		.loc 1 2760 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
2761:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t nbChannels = 0;
ARM GAS  /tmp/ccTJyLFK.s 			page 50


2762:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tmp;
2763:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2764:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get the number of channels from bitfield */
2765:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
  34              		.loc 1 2765 0
  35 0000 83B2     		uxth	r3, r0
  36              	.LVL1:
2761:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t nbChannels = 0;
  37              		.loc 1 2761 0
  38 0002 0020     		movs	r0, #0
  39              	.LVL2:
2766:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   while(tmp != 0)
  40              		.loc 1 2766 0
  41 0004 04E0     		b	.L2
  42              	.LVL3:
  43              	.L4:
2767:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2768:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if((tmp & 1) != 0)
  44              		.loc 1 2768 0
  45 0006 13F0010F 		tst	r3, #1
  46 000a 00D0     		beq	.L3
2769:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2770:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       nbChannels++;
  47              		.loc 1 2770 0
  48 000c 0130     		adds	r0, r0, #1
  49              	.LVL4:
  50              	.L3:
2771:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2772:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     tmp = (uint32_t) (tmp >> 1);
  51              		.loc 1 2772 0
  52 000e 5B08     		lsrs	r3, r3, #1
  53              	.LVL5:
  54              	.L2:
2766:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
  55              		.loc 1 2766 0
  56 0010 002B     		cmp	r3, #0
  57 0012 F8D1     		bne	.L4
2773:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2774:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return nbChannels;
2775:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
  58              		.loc 1 2775 0
  59 0014 7047     		bx	lr
  60              		.cfi_endproc
  61              	.LFE200:
  63 0016 00BF     		.section	.text.DFSDM_GetChannelFromInstance,"ax",%progbits
  64              		.align	2
  65              		.thumb
  66              		.thumb_func
  68              	DFSDM_GetChannelFromInstance:
  69              	.LFB201:
2776:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2777:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2778:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to get the channel number from channel instance.
2779:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  Instance DFSDM channel instance.
2780:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval Channel number.
2781:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2782:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
ARM GAS  /tmp/ccTJyLFK.s 			page 51


2783:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
  70              		.loc 1 2783 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  75              	.LVL6:
2784:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel = 0xFF;
2785:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2786:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get channel from instance */
2787:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(Instance == DFSDM1_Channel0)
  76              		.loc 1 2787 0
  77 0000 144B     		ldr	r3, .L15
  78 0002 9842     		cmp	r0, r3
  79 0004 16D0     		beq	.L7
2788:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2789:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = 0;
2790:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2791:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(Instance == DFSDM1_Channel1)
  80              		.loc 1 2791 0
  81 0006 2033     		adds	r3, r3, #32
  82 0008 9842     		cmp	r0, r3
  83 000a 15D0     		beq	.L8
2792:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2793:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = 1;
2794:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2795:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(Instance == DFSDM1_Channel2)
  84              		.loc 1 2795 0
  85 000c 2033     		adds	r3, r3, #32
  86 000e 9842     		cmp	r0, r3
  87 0010 14D0     		beq	.L9
2796:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2797:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = 2;
2798:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2799:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(Instance == DFSDM1_Channel3)
  88              		.loc 1 2799 0
  89 0012 2033     		adds	r3, r3, #32
  90 0014 9842     		cmp	r0, r3
  91 0016 13D0     		beq	.L10
2800:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2801:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = 3;
2802:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2803:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(Instance == DFSDM1_Channel4)
  92              		.loc 1 2803 0
  93 0018 2033     		adds	r3, r3, #32
  94 001a 9842     		cmp	r0, r3
  95 001c 12D0     		beq	.L11
2804:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2805:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = 4;
2806:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2807:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(Instance == DFSDM1_Channel5)
  96              		.loc 1 2807 0
  97 001e 2033     		adds	r3, r3, #32
  98 0020 9842     		cmp	r0, r3
  99 0022 11D0     		beq	.L12
2808:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2809:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = 5;
ARM GAS  /tmp/ccTJyLFK.s 			page 52


2810:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2811:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(Instance == DFSDM1_Channel6)
 100              		.loc 1 2811 0
 101 0024 2033     		adds	r3, r3, #32
 102 0026 9842     		cmp	r0, r3
 103 0028 10D0     		beq	.L13
2812:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2813:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = 6;
2814:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2815:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(Instance == DFSDM1_Channel7)
 104              		.loc 1 2815 0
 105 002a 2033     		adds	r3, r3, #32
 106 002c 9842     		cmp	r0, r3
 107 002e 0FD0     		beq	.L14
2784:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 108              		.loc 1 2784 0
 109 0030 FF20     		movs	r0, #255
 110              	.LVL7:
 111 0032 7047     		bx	lr
 112              	.LVL8:
 113              	.L7:
2789:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 114              		.loc 1 2789 0
 115 0034 0020     		movs	r0, #0
 116              	.LVL9:
 117 0036 7047     		bx	lr
 118              	.LVL10:
 119              	.L8:
2793:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 120              		.loc 1 2793 0
 121 0038 0120     		movs	r0, #1
 122              	.LVL11:
 123 003a 7047     		bx	lr
 124              	.LVL12:
 125              	.L9:
2797:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 126              		.loc 1 2797 0
 127 003c 0220     		movs	r0, #2
 128              	.LVL13:
 129 003e 7047     		bx	lr
 130              	.LVL14:
 131              	.L10:
2801:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 132              		.loc 1 2801 0
 133 0040 0320     		movs	r0, #3
 134              	.LVL15:
 135 0042 7047     		bx	lr
 136              	.LVL16:
 137              	.L11:
2805:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 138              		.loc 1 2805 0
 139 0044 0420     		movs	r0, #4
 140              	.LVL17:
 141 0046 7047     		bx	lr
 142              	.LVL18:
 143              	.L12:
2809:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
ARM GAS  /tmp/ccTJyLFK.s 			page 53


 144              		.loc 1 2809 0
 145 0048 0520     		movs	r0, #5
 146              	.LVL19:
 147 004a 7047     		bx	lr
 148              	.LVL20:
 149              	.L13:
2813:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 150              		.loc 1 2813 0
 151 004c 0620     		movs	r0, #6
 152              	.LVL21:
 153 004e 7047     		bx	lr
 154              	.LVL22:
 155              	.L14:
2816:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2817:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     channel = 7;
 156              		.loc 1 2817 0
 157 0050 0720     		movs	r0, #7
 158              	.LVL23:
2818:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2819:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2820:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return channel;
2821:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 159              		.loc 1 2821 0
 160 0052 7047     		bx	lr
 161              	.L16:
 162              		.align	2
 163              	.L15:
 164 0054 00740140 		.word	1073837056
 165              		.cfi_endproc
 166              	.LFE201:
 168              		.section	.text.DFSDM_RegConvStart,"ax",%progbits
 169              		.align	2
 170              		.thumb
 171              		.thumb_func
 173              	DFSDM_RegConvStart:
 174              	.LFB202:
2822:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2823:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2824:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to really start regular conversion.
2825:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2826:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2827:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2828:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
2829:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 175              		.loc 1 2829 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		@ link register save eliminated.
 180              	.LVL24:
2830:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check regular trigger */
2831:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 181              		.loc 1 2831 0
 182 0000 436B     		ldr	r3, [r0, #52]
 183 0002 2BB9     		cbnz	r3, .L18
2832:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2833:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Software start of regular conversion */
ARM GAS  /tmp/ccTJyLFK.s 			page 54


2834:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 184              		.loc 1 2834 0
 185 0004 0268     		ldr	r2, [r0]
 186 0006 1368     		ldr	r3, [r2]
 187 0008 43F40033 		orr	r3, r3, #131072
 188 000c 1360     		str	r3, [r2]
 189 000e 21E0     		b	.L19
 190              	.L18:
2835:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2836:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else /* synchronous trigger */
2837:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2838:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Disable DFSDM filter */
2839:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 191              		.loc 1 2839 0
 192 0010 0268     		ldr	r2, [r0]
 193 0012 1368     		ldr	r3, [r2]
 194 0014 23F00103 		bic	r3, r3, #1
 195 0018 1360     		str	r3, [r2]
2840:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
2841:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Set RSYNC bit in DFSDM_FLTCR1 register */
2842:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 196              		.loc 1 2842 0
 197 001a 0268     		ldr	r2, [r0]
 198 001c 1368     		ldr	r3, [r2]
 199 001e 43F40023 		orr	r3, r3, #524288
 200 0022 1360     		str	r3, [r2]
2843:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2844:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Enable DFSDM  filter */
2845:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 201              		.loc 1 2845 0
 202 0024 0268     		ldr	r2, [r0]
 203 0026 1368     		ldr	r3, [r2]
 204 0028 43F00103 		orr	r3, r3, #1
 205 002c 1360     		str	r3, [r2]
2846:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
2847:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* If injected conversion was in progress, restart it */
2848:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 206              		.loc 1 2848 0
 207 002e 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 208 0032 032B     		cmp	r3, #3
 209 0034 0ED1     		bne	.L19
2849:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2850:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 210              		.loc 1 2850 0
 211 0036 836B     		ldr	r3, [r0, #56]
 212 0038 23B9     		cbnz	r3, .L20
2851:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
2852:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 213              		.loc 1 2852 0
 214 003a 0268     		ldr	r2, [r0]
 215 003c 1368     		ldr	r3, [r2]
 216 003e 43F00203 		orr	r3, r3, #2
 217 0042 1360     		str	r3, [r2]
 218              	.L20:
2853:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       }
2854:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Update remaining injected conversions */
2855:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
ARM GAS  /tmp/ccTJyLFK.s 			page 55


 219              		.loc 1 2855 0
 220 0044 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
2856:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          hdfsdm_filter->InjectedChannelsNbr : 1;
 221              		.loc 1 2856 0
 222 0048 012B     		cmp	r3, #1
 223 004a 01D1     		bne	.L23
 224              		.loc 1 2856 0 is_stmt 0 discriminator 1
 225 004c 436C     		ldr	r3, [r0, #68]
 226 004e 00E0     		b	.L21
 227              	.L23:
 228              		.loc 1 2856 0
 229 0050 0123     		movs	r3, #1
 230              	.L21:
2855:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          hdfsdm_filter->InjectedChannelsNbr : 1;
 231              		.loc 1 2855 0 is_stmt 1
 232 0052 8364     		str	r3, [r0, #72]
 233              	.L19:
2857:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2858:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2859:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Update DFSDM filter state */
2860:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 234              		.loc 1 2860 0
 235 0054 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 236 0058 012B     		cmp	r3, #1
 237 005a 01D1     		bne	.L24
 238 005c 0223     		movs	r3, #2
 239 005e 00E0     		b	.L22
 240              	.L24:
 241 0060 0423     		movs	r3, #4
 242              	.L22:
 243              		.loc 1 2860 0 is_stmt 0 discriminator 4
 244 0062 80F84C30 		strb	r3, [r0, #76]
 245 0066 7047     		bx	lr
 246              		.cfi_endproc
 247              	.LFE202:
 249              		.section	.text.DFSDM_RegConvStop,"ax",%progbits
 250              		.align	2
 251              		.thumb
 252              		.thumb_func
 254              	DFSDM_RegConvStop:
 255              	.LFB203:
2861:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                           HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
2862:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2863:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2864:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2865:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to really stop regular conversion.
2866:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2867:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2868:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2869:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
2870:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 256              		.loc 1 2870 0 is_stmt 1
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 261              	.LVL25:
ARM GAS  /tmp/ccTJyLFK.s 			page 56


2871:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Disable DFSDM filter */
2872:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 262              		.loc 1 2872 0
 263 0000 0268     		ldr	r2, [r0]
 264 0002 1368     		ldr	r3, [r2]
 265 0004 23F00103 		bic	r3, r3, #1
 266 0008 1360     		str	r3, [r2]
2873:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2874:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
2875:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 267              		.loc 1 2875 0
 268 000a 436B     		ldr	r3, [r0, #52]
 269 000c 012B     		cmp	r3, #1
 270 000e 04D1     		bne	.L26
2876:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2877:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 271              		.loc 1 2877 0
 272 0010 0268     		ldr	r2, [r0]
 273 0012 1368     		ldr	r3, [r2]
 274 0014 23F40023 		bic	r3, r3, #524288
 275 0018 1360     		str	r3, [r2]
 276              	.L26:
2878:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2879:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2880:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Enable DFSDM filter */
2881:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 277              		.loc 1 2881 0
 278 001a 0268     		ldr	r2, [r0]
 279 001c 1368     		ldr	r3, [r2]
 280 001e 43F00103 		orr	r3, r3, #1
 281 0022 1360     		str	r3, [r2]
2882:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2883:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* If injected conversion was in progress, restart it */
2884:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 282              		.loc 1 2884 0
 283 0024 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 284 0028 042B     		cmp	r3, #4
 285 002a 0ED1     		bne	.L27
2885:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2886:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 286              		.loc 1 2886 0
 287 002c 836B     		ldr	r3, [r0, #56]
 288 002e 23B9     		cbnz	r3, .L28
2887:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2888:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 289              		.loc 1 2888 0
 290 0030 0268     		ldr	r2, [r0]
 291 0032 1368     		ldr	r3, [r2]
 292 0034 43F00203 		orr	r3, r3, #2
 293 0038 1360     		str	r3, [r2]
 294              	.L28:
2889:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2890:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Update remaining injected conversions */
2891:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 295              		.loc 1 2891 0
 296 003a 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
2892:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                        hdfsdm_filter->InjectedChannelsNbr : 1;
ARM GAS  /tmp/ccTJyLFK.s 			page 57


 297              		.loc 1 2892 0
 298 003e 012B     		cmp	r3, #1
 299 0040 01D1     		bne	.L31
 300              		.loc 1 2892 0 is_stmt 0 discriminator 1
 301 0042 436C     		ldr	r3, [r0, #68]
 302 0044 00E0     		b	.L29
 303              	.L31:
 304              		.loc 1 2892 0
 305 0046 0123     		movs	r3, #1
 306              	.L29:
2891:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                        hdfsdm_filter->InjectedChannelsNbr : 1;
 307              		.loc 1 2891 0 is_stmt 1
 308 0048 8364     		str	r3, [r0, #72]
 309              	.L27:
2893:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2894:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2895:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Update DFSDM filter state */
2896:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 310              		.loc 1 2896 0
 311 004a 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 312 004e 022B     		cmp	r3, #2
 313 0050 01D1     		bne	.L32
 314 0052 0123     		movs	r3, #1
 315 0054 00E0     		b	.L30
 316              	.L32:
 317 0056 0323     		movs	r3, #3
 318              	.L30:
 319              		.loc 1 2896 0 is_stmt 0 discriminator 4
 320 0058 80F84C30 		strb	r3, [r0, #76]
 321 005c 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE203:
 325 005e 00BF     		.section	.text.DFSDM_InjConvStart,"ax",%progbits
 326              		.align	2
 327              		.thumb
 328              		.thumb_func
 330              	DFSDM_InjConvStart:
 331              	.LFB204:
2897:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                           HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
2898:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2899:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2900:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2901:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to really start injected conversion.
2902:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2903:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2904:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2905:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void DFSDM_InjConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
2906:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
 332              		.loc 1 2906 0 is_stmt 1
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 337              	.LVL26:
2907:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check injected trigger */
2908:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 338              		.loc 1 2908 0
ARM GAS  /tmp/ccTJyLFK.s 			page 58


 339 0000 836B     		ldr	r3, [r0, #56]
 340 0002 2BB9     		cbnz	r3, .L34
2909:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2910:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Software start of injected conversion */
2911:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 341              		.loc 1 2911 0
 342 0004 0268     		ldr	r2, [r0]
 343 0006 1368     		ldr	r3, [r2]
 344 0008 43F00203 		orr	r3, r3, #2
 345 000c 1360     		str	r3, [r2]
 346 000e 22E0     		b	.L35
 347              	.L34:
2912:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2913:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else /* external or synchronous trigger */
2914:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2915:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Disable DFSDM filter */
2916:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 348              		.loc 1 2916 0
 349 0010 0268     		ldr	r2, [r0]
 350 0012 1368     		ldr	r3, [r2]
 351 0014 23F00103 		bic	r3, r3, #1
 352 0018 1360     		str	r3, [r2]
2917:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       
2918:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 353              		.loc 1 2918 0
 354 001a 836B     		ldr	r3, [r0, #56]
 355 001c 012B     		cmp	r3, #1
 356 001e 05D1     		bne	.L36
2919:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2920:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Set JSYNC bit in DFSDM_FLTCR1 register */
2921:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSYNC;
 357              		.loc 1 2921 0
 358 0020 0268     		ldr	r2, [r0]
 359 0022 1368     		ldr	r3, [r2]
 360 0024 43F00803 		orr	r3, r3, #8
 361 0028 1360     		str	r3, [r2]
 362 002a 04E0     		b	.L37
 363              	.L36:
2922:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2923:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     else /* external trigger */
2924:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2925:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       /* Set JEXTEN[1:0] bits in DFSDM_FLTCR1 register */
2926:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->Instance->FLTCR1 |= hdfsdm_filter->ExtTriggerEdge;
 364              		.loc 1 2926 0
 365 002c 0268     		ldr	r2, [r0]
 366 002e 1168     		ldr	r1, [r2]
 367 0030 C36B     		ldr	r3, [r0, #60]
 368 0032 0B43     		orrs	r3, r3, r1
 369 0034 1360     		str	r3, [r2]
 370              	.L37:
2927:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2928:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
2929:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Enable DFSDM filter */
2930:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 371              		.loc 1 2930 0
 372 0036 0268     		ldr	r2, [r0]
 373 0038 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccTJyLFK.s 			page 59


 374 003a 43F00103 		orr	r3, r3, #1
 375 003e 1360     		str	r3, [r2]
2931:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2932:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* If regular conversion was in progress, restart it */
2933:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) && \
 376              		.loc 1 2933 0
 377 0040 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 378 0044 022B     		cmp	r3, #2
 379 0046 06D1     		bne	.L35
2934:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 380              		.loc 1 2934 0 discriminator 1
 381 0048 436B     		ldr	r3, [r0, #52]
2933:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 382              		.loc 1 2933 0 discriminator 1
 383 004a 23B9     		cbnz	r3, .L35
2935:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
2936:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 384              		.loc 1 2936 0
 385 004c 0268     		ldr	r2, [r0]
 386 004e 1368     		ldr	r3, [r2]
 387 0050 43F40033 		orr	r3, r3, #131072
 388 0054 1360     		str	r3, [r2]
 389              	.L35:
2937:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
2938:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2939:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Update DFSDM filter state */
2940:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 390              		.loc 1 2940 0
 391 0056 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 392 005a 012B     		cmp	r3, #1
 393 005c 01D1     		bne	.L39
 394 005e 0323     		movs	r3, #3
 395 0060 00E0     		b	.L38
 396              	.L39:
 397 0062 0423     		movs	r3, #4
 398              	.L38:
 399              		.loc 1 2940 0 is_stmt 0 discriminator 4
 400 0064 80F84C30 		strb	r3, [r0, #76]
 401 0068 7047     		bx	lr
 402              		.cfi_endproc
 403              	.LFE204:
 405 006a 00BF     		.section	.text.DFSDM_InjConvStop,"ax",%progbits
 406              		.align	2
 407              		.thumb
 408              		.thumb_func
 410              	DFSDM_InjConvStop:
 411              	.LFB205:
2941:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                          HAL_DFSDM_FILTER_STATE_INJ : HAL_DFSDM_FILTER_STATE_REG_INJ;
2942:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
2943:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2944:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** /**
2945:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @brief  This function allows to really stop injected conversion.
2946:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @param  hdfsdm_filter DFSDM filter handle.
2947:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   * @retval None
2948:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   */
2949:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** static void DFSDM_InjConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
2950:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** {
ARM GAS  /tmp/ccTJyLFK.s 			page 60


 412              		.loc 1 2950 0 is_stmt 1
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 417              	.LVL27:
2951:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Disable DFSDM filter */
2952:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 418              		.loc 1 2952 0
 419 0000 0268     		ldr	r2, [r0]
 420 0002 1368     		ldr	r3, [r2]
 421 0004 23F00103 		bic	r3, r3, #1
 422 0008 1360     		str	r3, [r2]
2953:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2954:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* If injected trigger was synchronous, reset JSYNC bit in DFSDM_FLTCR1 register */
2955:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 423              		.loc 1 2955 0
 424 000a 836B     		ldr	r3, [r0, #56]
 425 000c 012B     		cmp	r3, #1
 426 000e 05D1     		bne	.L41
2956:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2957:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC);
 427              		.loc 1 2957 0
 428 0010 0268     		ldr	r2, [r0]
 429 0012 1368     		ldr	r3, [r2]
 430 0014 23F00803 		bic	r3, r3, #8
 431 0018 1360     		str	r3, [r2]
 432 001a 06E0     		b	.L42
 433              	.L41:
2958:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2959:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   else if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_EXT_TRIGGER)
 434              		.loc 1 2959 0
 435 001c 022B     		cmp	r3, #2
 436 001e 04D1     		bne	.L42
2960:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2961:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Reset JEXTEN[1:0] bits in DFSDM_FLTCR1 register */
2962:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JEXTEN);
 437              		.loc 1 2962 0
 438 0020 0268     		ldr	r2, [r0]
 439 0022 1368     		ldr	r3, [r2]
 440 0024 23F4C043 		bic	r3, r3, #24576
 441 0028 1360     		str	r3, [r2]
 442              	.L42:
2963:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2964:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2965:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Enable DFSDM filter */
2966:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 443              		.loc 1 2966 0
 444 002a 0268     		ldr	r2, [r0]
 445 002c 1368     		ldr	r3, [r2]
 446 002e 43F00103 		orr	r3, r3, #1
 447 0032 1360     		str	r3, [r2]
2967:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
2968:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* If regular conversion was in progress, restart it */
2969:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ) && \
 448              		.loc 1 2969 0
 449 0034 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
ARM GAS  /tmp/ccTJyLFK.s 			page 61


 450 0038 042B     		cmp	r3, #4
 451 003a 06D1     		bne	.L43
2970:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 452              		.loc 1 2970 0 discriminator 1
 453 003c 436B     		ldr	r3, [r0, #52]
2969:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 454              		.loc 1 2969 0 discriminator 1
 455 003e 23B9     		cbnz	r3, .L43
2971:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
2972:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 456              		.loc 1 2972 0
 457 0040 0268     		ldr	r2, [r0]
 458 0042 1368     		ldr	r3, [r2]
 459 0044 43F40033 		orr	r3, r3, #131072
 460 0048 1360     		str	r3, [r2]
 461              	.L43:
2973:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
2974:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2975:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Update remaining injected conversions */
2976:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 462              		.loc 1 2976 0
 463 004a 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
2977:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 464              		.loc 1 2977 0
 465 004e 012B     		cmp	r3, #1
 466 0050 01D1     		bne	.L46
 467              		.loc 1 2977 0 is_stmt 0 discriminator 1
 468 0052 436C     		ldr	r3, [r0, #68]
 469 0054 00E0     		b	.L44
 470              	.L46:
 471              		.loc 1 2977 0
 472 0056 0123     		movs	r3, #1
 473              	.L44:
2976:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 474              		.loc 1 2976 0 is_stmt 1
 475 0058 8364     		str	r3, [r0, #72]
2978:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
2979:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Update DFSDM filter state */
2980:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 476              		.loc 1 2980 0
 477 005a 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 478 005e 032B     		cmp	r3, #3
 479 0060 01D1     		bne	.L47
 480 0062 0123     		movs	r3, #1
 481 0064 00E0     		b	.L45
 482              	.L47:
 483 0066 0223     		movs	r3, #2
 484              	.L45:
 485              		.loc 1 2980 0 is_stmt 0 discriminator 4
 486 0068 80F84C30 		strb	r3, [r0, #76]
 487 006c 7047     		bx	lr
 488              		.cfi_endproc
 489              	.LFE205:
 491 006e 00BF     		.section	.text.HAL_DFSDM_ChannelMspInit,"ax",%progbits
 492              		.align	2
 493              		.weak	HAL_DFSDM_ChannelMspInit
 494              		.thumb
ARM GAS  /tmp/ccTJyLFK.s 			page 62


 495              		.thumb_func
 497              	HAL_DFSDM_ChannelMspInit:
 498              	.LFB138:
 414:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 499              		.loc 1 414 0 is_stmt 1
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 0
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 503              		@ link register save eliminated.
 504              	.LVL28:
 505 0000 7047     		bx	lr
 506              		.cfi_endproc
 507              	.LFE138:
 509 0002 00BF     		.section	.text.HAL_DFSDM_ChannelInit,"ax",%progbits
 510              		.align	2
 511              		.global	HAL_DFSDM_ChannelInit
 512              		.thumb
 513              		.thumb_func
 515              	HAL_DFSDM_ChannelInit:
 516              	.LFB136:
 274:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM Channel handle */
 517              		.loc 1 274 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              	.LVL29:
 276:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 522              		.loc 1 276 0
 523 0000 0028     		cmp	r0, #0
 524 0002 75D0     		beq	.L53
 274:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM Channel handle */
 525              		.loc 1 274 0
 526 0004 38B5     		push	{r3, r4, r5, lr}
 527              	.LCFI0:
 528              		.cfi_def_cfa_offset 16
 529              		.cfi_offset 3, -16
 530              		.cfi_offset 4, -12
 531              		.cfi_offset 5, -8
 532              		.cfi_offset 14, -4
 533 0006 0446     		mov	r4, r0
 295:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 534              		.loc 1 295 0
 535 0008 0068     		ldr	r0, [r0]
 536              	.LVL30:
 537 000a FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 538              	.LVL31:
 539 000e 3A4B     		ldr	r3, .L56
 540 0010 53F82030 		ldr	r3, [r3, r0, lsl #2]
 541 0014 002B     		cmp	r3, #0
 542 0016 6DD1     		bne	.L54
 301:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 543              		.loc 1 301 0
 544 0018 2046     		mov	r0, r4
 545 001a FFF7FEFF 		bl	HAL_DFSDM_ChannelMspInit
 546              	.LVL32:
 304:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 547              		.loc 1 304 0
ARM GAS  /tmp/ccTJyLFK.s 			page 63


 548 001e 374B     		ldr	r3, .L56+4
 549 0020 1A68     		ldr	r2, [r3]
 550 0022 0132     		adds	r2, r2, #1
 551 0024 1A60     		str	r2, [r3]
 307:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 552              		.loc 1 307 0
 553 0026 1B68     		ldr	r3, [r3]
 554 0028 012B     		cmp	r3, #1
 555 002a 1BD1     		bne	.L51
 311:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 556              		.loc 1 311 0
 557 002c 344B     		ldr	r3, .L56+8
 558 002e 1A68     		ldr	r2, [r3]
 559 0030 22F08042 		bic	r2, r2, #1073741824
 560 0034 1A60     		str	r2, [r3]
 312:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 561              		.loc 1 312 0
 562 0036 1968     		ldr	r1, [r3]
 563 0038 A268     		ldr	r2, [r4, #8]
 564 003a 0A43     		orrs	r2, r2, r1
 565 003c 1A60     		str	r2, [r3]
 315:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 566              		.loc 1 315 0
 567 003e 1A68     		ldr	r2, [r3]
 568 0040 22F47F02 		bic	r2, r2, #16711680
 569 0044 1A60     		str	r2, [r3]
 316:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 570              		.loc 1 316 0
 571 0046 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 572 0048 012B     		cmp	r3, #1
 573 004a 06D1     		bne	.L52
 320:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
 574              		.loc 1 320 0
 575 004c 2C49     		ldr	r1, .L56+8
 576 004e 0B68     		ldr	r3, [r1]
 577 0050 E268     		ldr	r2, [r4, #12]
 578 0052 013A     		subs	r2, r2, #1
 579 0054 43EA0243 		orr	r3, r3, r2, lsl #16
 580 0058 0B60     		str	r3, [r1]
 581              	.L52:
 325:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 582              		.loc 1 325 0
 583 005a 294A     		ldr	r2, .L56+8
 584 005c 1368     		ldr	r3, [r2]
 585 005e 43F00043 		orr	r3, r3, #-2147483648
 586 0062 1360     		str	r3, [r2]
 587              	.L51:
 329:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          DFSDM_CHCFGR1_CHINSEL);
 588              		.loc 1 329 0
 589 0064 2268     		ldr	r2, [r4]
 590 0066 1368     		ldr	r3, [r2]
 591 0068 23F47143 		bic	r3, r3, #61696
 592 006c 1360     		str	r3, [r2]
 331:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         hdfsdm_channel->Init.Input.DataPacking | 
 593              		.loc 1 331 0
 594 006e 2168     		ldr	r1, [r4]
 595 0070 0868     		ldr	r0, [r1]
ARM GAS  /tmp/ccTJyLFK.s 			page 64


 596 0072 2369     		ldr	r3, [r4, #16]
 332:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         hdfsdm_channel->Init.Input.Pins);
 597              		.loc 1 332 0
 598 0074 6269     		ldr	r2, [r4, #20]
 331:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         hdfsdm_channel->Init.Input.DataPacking | 
 599              		.loc 1 331 0
 600 0076 1A43     		orrs	r2, r2, r3
 333:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 601              		.loc 1 333 0
 602 0078 A369     		ldr	r3, [r4, #24]
 332:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         hdfsdm_channel->Init.Input.Pins);
 603              		.loc 1 332 0
 604 007a 1343     		orrs	r3, r3, r2
 331:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         hdfsdm_channel->Init.Input.DataPacking | 
 605              		.loc 1 331 0
 606 007c 0343     		orrs	r3, r3, r0
 607 007e 0B60     		str	r3, [r1]
 336:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 608              		.loc 1 336 0
 609 0080 2268     		ldr	r2, [r4]
 610 0082 1368     		ldr	r3, [r2]
 611 0084 23F00F03 		bic	r3, r3, #15
 612 0088 1360     		str	r3, [r2]
 337:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         hdfsdm_channel->Init.SerialInterface.SpiClock);
 613              		.loc 1 337 0
 614 008a 2268     		ldr	r2, [r4]
 615 008c 1168     		ldr	r1, [r2]
 616 008e E069     		ldr	r0, [r4, #28]
 338:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 617              		.loc 1 338 0
 618 0090 236A     		ldr	r3, [r4, #32]
 337:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         hdfsdm_channel->Init.SerialInterface.SpiClock);
 619              		.loc 1 337 0
 620 0092 0343     		orrs	r3, r3, r0
 621 0094 0B43     		orrs	r3, r3, r1
 622 0096 1360     		str	r3, [r2]
 341:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 623              		.loc 1 341 0
 624 0098 2268     		ldr	r2, [r4]
 625 009a 9368     		ldr	r3, [r2, #8]
 626 009c 23F45F03 		bic	r3, r3, #14614528
 627 00a0 9360     		str	r3, [r2, #8]
 342:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                        ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSC
 628              		.loc 1 342 0
 629 00a2 2168     		ldr	r1, [r4]
 630 00a4 8868     		ldr	r0, [r1, #8]
 631 00a6 636A     		ldr	r3, [r4, #36]
 343:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 632              		.loc 1 343 0
 633 00a8 A26A     		ldr	r2, [r4, #40]
 634 00aa 013A     		subs	r2, r2, #1
 342:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                        ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSC
 635              		.loc 1 342 0
 636 00ac 43EA0243 		orr	r3, r3, r2, lsl #16
 637 00b0 0343     		orrs	r3, r3, r0
 638 00b2 8B60     		str	r3, [r1, #8]
 346:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OF
ARM GAS  /tmp/ccTJyLFK.s 			page 65


 639              		.loc 1 346 0
 640 00b4 2268     		ldr	r2, [r4]
 641 00b6 5368     		ldr	r3, [r2, #4]
 642 00b8 03F00703 		and	r3, r3, #7
 643 00bc 5360     		str	r3, [r2, #4]
 347:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_
 644              		.loc 1 347 0
 645 00be 2168     		ldr	r1, [r4]
 646 00c0 4868     		ldr	r0, [r1, #4]
 647 00c2 E56A     		ldr	r5, [r4, #44]
 348:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 648              		.loc 1 348 0
 649 00c4 236B     		ldr	r3, [r4, #48]
 650 00c6 DA00     		lsls	r2, r3, #3
 347:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_
 651              		.loc 1 347 0
 652 00c8 42EA0523 		orr	r3, r2, r5, lsl #8
 653 00cc 0343     		orrs	r3, r3, r0
 654 00ce 4B60     		str	r3, [r1, #4]
 351:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 655              		.loc 1 351 0
 656 00d0 2268     		ldr	r2, [r4]
 657 00d2 1368     		ldr	r3, [r2]
 658 00d4 43F08003 		orr	r3, r3, #128
 659 00d8 1360     		str	r3, [r2]
 354:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 660              		.loc 1 354 0
 661 00da 0123     		movs	r3, #1
 662 00dc 84F83430 		strb	r3, [r4, #52]
 357:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 663              		.loc 1 357 0
 664 00e0 2068     		ldr	r0, [r4]
 665 00e2 FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 666              	.LVL33:
 667 00e6 044B     		ldr	r3, .L56
 668 00e8 43F82040 		str	r4, [r3, r0, lsl #2]
 359:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 669              		.loc 1 359 0
 670 00ec 0020     		movs	r0, #0
 671 00ee 38BD     		pop	{r3, r4, r5, pc}
 672              	.LVL34:
 673              	.L53:
 674              	.LCFI1:
 675              		.cfi_def_cfa_offset 0
 676              		.cfi_restore 3
 677              		.cfi_restore 4
 678              		.cfi_restore 5
 679              		.cfi_restore 14
 278:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 680              		.loc 1 278 0
 681 00f0 0120     		movs	r0, #1
 682              	.LVL35:
 360:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 683              		.loc 1 360 0
 684 00f2 7047     		bx	lr
 685              	.LVL36:
 686              	.L54:
ARM GAS  /tmp/ccTJyLFK.s 			page 66


 687              	.LCFI2:
 688              		.cfi_def_cfa_offset 16
 689              		.cfi_offset 3, -16
 690              		.cfi_offset 4, -12
 691              		.cfi_offset 5, -8
 692              		.cfi_offset 14, -4
 297:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 693              		.loc 1 297 0
 694 00f4 0120     		movs	r0, #1
 360:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 695              		.loc 1 360 0
 696 00f6 38BD     		pop	{r3, r4, r5, pc}
 697              	.LVL37:
 698              	.L57:
 699              		.align	2
 700              	.L56:
 701 00f8 00000000 		.word	.LANCHOR0
 702 00fc 00000000 		.word	.LANCHOR1
 703 0100 00740140 		.word	1073837056
 704              		.cfi_endproc
 705              	.LFE136:
 707              		.section	.text.HAL_DFSDM_ChannelMspDeInit,"ax",%progbits
 708              		.align	2
 709              		.weak	HAL_DFSDM_ChannelMspDeInit
 710              		.thumb
 711              		.thumb_func
 713              	HAL_DFSDM_ChannelMspDeInit:
 714              	.LFB139:
 429:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 715              		.loc 1 429 0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              		@ link register save eliminated.
 720              	.LVL38:
 721 0000 7047     		bx	lr
 722              		.cfi_endproc
 723              	.LFE139:
 725 0002 00BF     		.section	.text.HAL_DFSDM_ChannelDeInit,"ax",%progbits
 726              		.align	2
 727              		.global	HAL_DFSDM_ChannelDeInit
 728              		.thumb
 729              		.thumb_func
 731              	HAL_DFSDM_ChannelDeInit:
 732              	.LFB137:
 368:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM Channel handle */
 733              		.loc 1 368 0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737              	.LVL39:
 370:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 738              		.loc 1 370 0
 739 0000 30B3     		cbz	r0, .L62
 368:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM Channel handle */
 740              		.loc 1 368 0
 741 0002 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccTJyLFK.s 			page 67


 742              	.LCFI3:
 743              		.cfi_def_cfa_offset 16
 744              		.cfi_offset 3, -16
 745              		.cfi_offset 4, -12
 746              		.cfi_offset 5, -8
 747              		.cfi_offset 14, -4
 748 0004 0446     		mov	r4, r0
 379:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 749              		.loc 1 379 0
 750 0006 0568     		ldr	r5, [r0]
 751 0008 2846     		mov	r0, r5
 752              	.LVL40:
 753 000a FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 754              	.LVL41:
 755 000e 124B     		ldr	r3, .L65
 756 0010 53F82030 		ldr	r3, [r3, r0, lsl #2]
 757 0014 F3B1     		cbz	r3, .L63
 385:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 758              		.loc 1 385 0
 759 0016 2B68     		ldr	r3, [r5]
 760 0018 23F08003 		bic	r3, r3, #128
 761 001c 2B60     		str	r3, [r5]
 388:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 762              		.loc 1 388 0
 763 001e 0F4B     		ldr	r3, .L65+4
 764 0020 1A68     		ldr	r2, [r3]
 765 0022 013A     		subs	r2, r2, #1
 766 0024 1A60     		str	r2, [r3]
 391:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 767              		.loc 1 391 0
 768 0026 1B68     		ldr	r3, [r3]
 769 0028 23B9     		cbnz	r3, .L61
 393:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 770              		.loc 1 393 0
 771 002a 0D4A     		ldr	r2, .L65+8
 772 002c 1368     		ldr	r3, [r2]
 773 002e 23F00043 		bic	r3, r3, #-2147483648
 774 0032 1360     		str	r3, [r2]
 775              	.L61:
 397:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 776              		.loc 1 397 0
 777 0034 2046     		mov	r0, r4
 778 0036 FFF7FEFF 		bl	HAL_DFSDM_ChannelMspDeInit
 779              	.LVL42:
 400:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 780              		.loc 1 400 0
 781 003a 0025     		movs	r5, #0
 782 003c 84F83450 		strb	r5, [r4, #52]
 403:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 783              		.loc 1 403 0
 784 0040 2068     		ldr	r0, [r4]
 785 0042 FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 786              	.LVL43:
 787 0046 044B     		ldr	r3, .L65
 788 0048 43F82050 		str	r5, [r3, r0, lsl #2]
 405:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 789              		.loc 1 405 0
ARM GAS  /tmp/ccTJyLFK.s 			page 68


 790 004c 2846     		mov	r0, r5
 791 004e 38BD     		pop	{r3, r4, r5, pc}
 792              	.LVL44:
 793              	.L62:
 794              	.LCFI4:
 795              		.cfi_def_cfa_offset 0
 796              		.cfi_restore 3
 797              		.cfi_restore 4
 798              		.cfi_restore 5
 799              		.cfi_restore 14
 372:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 800              		.loc 1 372 0
 801 0050 0120     		movs	r0, #1
 802              	.LVL45:
 406:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 803              		.loc 1 406 0
 804 0052 7047     		bx	lr
 805              	.LVL46:
 806              	.L63:
 807              	.LCFI5:
 808              		.cfi_def_cfa_offset 16
 809              		.cfi_offset 3, -16
 810              		.cfi_offset 4, -12
 811              		.cfi_offset 5, -8
 812              		.cfi_offset 14, -4
 381:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 813              		.loc 1 381 0
 814 0054 0120     		movs	r0, #1
 406:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 815              		.loc 1 406 0
 816 0056 38BD     		pop	{r3, r4, r5, pc}
 817              	.LVL47:
 818              	.L66:
 819              		.align	2
 820              	.L65:
 821 0058 00000000 		.word	.LANCHOR0
 822 005c 00000000 		.word	.LANCHOR1
 823 0060 00740140 		.word	1073837056
 824              		.cfi_endproc
 825              	.LFE137:
 827              		.section	.text.HAL_DFSDM_ChannelCkabStart,"ax",%progbits
 828              		.align	2
 829              		.global	HAL_DFSDM_ChannelCkabStart
 830              		.thumb
 831              		.thumb_func
 833              	HAL_DFSDM_ChannelCkabStart:
 834              	.LFB140:
 468:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 835              		.loc 1 468 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              	.LVL48:
 477:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 840              		.loc 1 477 0
 841 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 842 0004 012B     		cmp	r3, #1
ARM GAS  /tmp/ccTJyLFK.s 			page 69


 843 0006 28D1     		bne	.L72
 468:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 844              		.loc 1 468 0
 845 0008 70B5     		push	{r4, r5, r6, lr}
 846              	.LCFI6:
 847              		.cfi_def_cfa_offset 16
 848              		.cfi_offset 4, -16
 849              		.cfi_offset 5, -12
 850              		.cfi_offset 6, -8
 851              		.cfi_offset 14, -4
 852 000a 0446     		mov	r4, r0
 485:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 853              		.loc 1 485 0
 854 000c 0068     		ldr	r0, [r0]
 855              	.LVL49:
 856 000e FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 857              	.LVL50:
 858 0012 0546     		mov	r5, r0
 859              	.LVL51:
 488:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 860              		.loc 1 488 0
 861 0014 FFF7FEFF 		bl	HAL_GetTick
 862              	.LVL52:
 863 0018 0646     		mov	r6, r0
 864              	.LVL53:
 491:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 865              		.loc 1 491 0
 866 001a 0AE0     		b	.L69
 867              	.LVL54:
 868              	.L71:
 493:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 869              		.loc 1 493 0
 870 001c 0123     		movs	r3, #1
 871 001e 9340     		lsls	r3, r3, r2
 872 0020 0F4A     		ldr	r2, .L76
 873 0022 D360     		str	r3, [r2, #12]
 496:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 874              		.loc 1 496 0
 875 0024 FFF7FEFF 		bl	HAL_GetTick
 876              	.LVL55:
 877 0028 801B     		subs	r0, r0, r6
 878 002a 41F28833 		movw	r3, #5000
 879 002e 9842     		cmp	r0, r3
 880 0030 0BD8     		bhi	.L73
 881              	.L69:
 491:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 882              		.loc 1 491 0
 883 0032 0B4B     		ldr	r3, .L76
 884 0034 9B68     		ldr	r3, [r3, #8]
 885 0036 03F47F03 		and	r3, r3, #16711680
 886 003a 05F11002 		add	r2, r5, #16
 887 003e D340     		lsrs	r3, r3, r2
 888 0040 13F0010F 		tst	r3, #1
 889 0044 EAD1     		bne	.L71
 469:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 890              		.loc 1 469 0
 891 0046 0020     		movs	r0, #0
ARM GAS  /tmp/ccTJyLFK.s 			page 70


 892 0048 00E0     		b	.L70
 893              	.L73:
 499:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         break;
 894              		.loc 1 499 0
 895 004a 0320     		movs	r0, #3
 896              	.L70:
 897              	.LVL56:
 504:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 898              		.loc 1 504 0
 899 004c 38B9     		cbnz	r0, .L68
 507:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 900              		.loc 1 507 0
 901 004e 2268     		ldr	r2, [r4]
 902 0050 1368     		ldr	r3, [r2]
 903 0052 43F04003 		orr	r3, r3, #64
 904 0056 1360     		str	r3, [r2]
 905 0058 70BD     		pop	{r4, r5, r6, pc}
 906              	.LVL57:
 907              	.L72:
 908              	.LCFI7:
 909              		.cfi_def_cfa_offset 0
 910              		.cfi_restore 4
 911              		.cfi_restore 5
 912              		.cfi_restore 6
 913              		.cfi_restore 14
 480:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 914              		.loc 1 480 0
 915 005a 0120     		movs	r0, #1
 916              	.LVL58:
 917 005c 7047     		bx	lr
 918              	.LVL59:
 919              	.L68:
 920              	.LCFI8:
 921              		.cfi_def_cfa_offset 16
 922              		.cfi_offset 4, -16
 923              		.cfi_offset 5, -12
 924              		.cfi_offset 6, -8
 925              		.cfi_offset 14, -4
 512:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 926              		.loc 1 512 0
 927 005e 70BD     		pop	{r4, r5, r6, pc}
 928              	.LVL60:
 929              	.L77:
 930              		.align	2
 931              	.L76:
 932 0060 00750140 		.word	1073837312
 933              		.cfi_endproc
 934              	.LFE140:
 936              		.section	.text.HAL_DFSDM_ChannelPollForCkab,"ax",%progbits
 937              		.align	2
 938              		.global	HAL_DFSDM_ChannelPollForCkab
 939              		.thumb
 940              		.thumb_func
 942              	HAL_DFSDM_ChannelPollForCkab:
 943              	.LFB141:
 522:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 944              		.loc 1 522 0
ARM GAS  /tmp/ccTJyLFK.s 			page 71


 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 0
 947              		@ frame_needed = 0, uses_anonymous_args = 0
 948              	.LVL61:
 530:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 949              		.loc 1 530 0
 950 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 951 0004 012B     		cmp	r3, #1
 952 0006 23D1     		bne	.L83
 522:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 953              		.loc 1 522 0
 954 0008 70B5     		push	{r4, r5, r6, lr}
 955              	.LCFI9:
 956              		.cfi_def_cfa_offset 16
 957              		.cfi_offset 4, -16
 958              		.cfi_offset 5, -12
 959              		.cfi_offset 6, -8
 960              		.cfi_offset 14, -4
 961 000a 0C46     		mov	r4, r1
 538:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 962              		.loc 1 538 0
 963 000c 0068     		ldr	r0, [r0]
 964              	.LVL62:
 965 000e FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 966              	.LVL63:
 967 0012 0546     		mov	r5, r0
 968              	.LVL64:
 541:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 969              		.loc 1 541 0
 970 0014 FFF7FEFF 		bl	HAL_GetTick
 971              	.LVL65:
 972 0018 0646     		mov	r6, r0
 973              	.LVL66:
 544:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 974              		.loc 1 544 0
 975 001a 08E0     		b	.L81
 976              	.LVL67:
 977              	.L82:
 547:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 978              		.loc 1 547 0
 979 001c B4F1FF3F 		cmp	r4, #-1
 980 0020 05D0     		beq	.L81
 549:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
 981              		.loc 1 549 0
 982 0022 BCB1     		cbz	r4, .L84
 549:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
 983              		.loc 1 549 0 is_stmt 0 discriminator 1
 984 0024 FFF7FEFF 		bl	HAL_GetTick
 985              	.LVL68:
 986 0028 801B     		subs	r0, r0, r6
 987 002a 8442     		cmp	r4, r0
 988 002c 14D3     		bcc	.L85
 989              	.L81:
 544:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 990              		.loc 1 544 0 is_stmt 1
 991 002e 0B4B     		ldr	r3, .L87
 992 0030 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccTJyLFK.s 			page 72


 993 0032 03F47F03 		and	r3, r3, #16711680
 994 0036 05F11002 		add	r2, r5, #16
 995 003a D340     		lsrs	r3, r3, r2
 996 003c 13F0010F 		tst	r3, #1
 997 0040 ECD0     		beq	.L82
 558:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 998              		.loc 1 558 0
 999 0042 0123     		movs	r3, #1
 1000 0044 03FA02F2 		lsl	r2, r3, r2
 1001 0048 044B     		ldr	r3, .L87
 1002 004a DA60     		str	r2, [r3, #12]
 561:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1003              		.loc 1 561 0
 1004 004c 0020     		movs	r0, #0
 1005 004e 70BD     		pop	{r4, r5, r6, pc}
 1006              	.LVL69:
 1007              	.L83:
 1008              	.LCFI10:
 1009              		.cfi_def_cfa_offset 0
 1010              		.cfi_restore 4
 1011              		.cfi_restore 5
 1012              		.cfi_restore 6
 1013              		.cfi_restore 14
 533:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1014              		.loc 1 533 0
 1015 0050 0120     		movs	r0, #1
 1016              	.LVL70:
 563:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1017              		.loc 1 563 0
 1018 0052 7047     		bx	lr
 1019              	.LVL71:
 1020              	.L84:
 1021              	.LCFI11:
 1022              		.cfi_def_cfa_offset 16
 1023              		.cfi_offset 4, -16
 1024              		.cfi_offset 5, -12
 1025              		.cfi_offset 6, -8
 1026              		.cfi_offset 14, -4
 552:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         }
 1027              		.loc 1 552 0
 1028 0054 0320     		movs	r0, #3
 1029 0056 70BD     		pop	{r4, r5, r6, pc}
 1030              	.LVL72:
 1031              	.L85:
 1032 0058 0320     		movs	r0, #3
 563:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1033              		.loc 1 563 0
 1034 005a 70BD     		pop	{r4, r5, r6, pc}
 1035              	.LVL73:
 1036              	.L88:
 1037              		.align	2
 1038              	.L87:
 1039 005c 00750140 		.word	1073837312
 1040              		.cfi_endproc
 1041              	.LFE141:
 1043              		.section	.text.HAL_DFSDM_ChannelCkabStop,"ax",%progbits
 1044              		.align	2
ARM GAS  /tmp/ccTJyLFK.s 			page 73


 1045              		.global	HAL_DFSDM_ChannelCkabStop
 1046              		.thumb
 1047              		.thumb_func
 1049              	HAL_DFSDM_ChannelCkabStop:
 1050              	.LFB142:
 571:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1051              		.loc 1 571 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 0, uses_anonymous_args = 0
 1055              	.LVL74:
 1056 0000 08B5     		push	{r3, lr}
 1057              	.LCFI12:
 1058              		.cfi_def_cfa_offset 8
 1059              		.cfi_offset 3, -8
 1060              		.cfi_offset 14, -4
 1061              	.LVL75:
 579:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1062              		.loc 1 579 0
 1063 0002 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1064 0006 012B     		cmp	r3, #1
 1065 0008 0FD1     		bne	.L91
 587:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 1066              		.loc 1 587 0
 1067 000a 0268     		ldr	r2, [r0]
 1068 000c 1368     		ldr	r3, [r2]
 1069 000e 23F04003 		bic	r3, r3, #64
 1070 0012 1360     		str	r3, [r2]
 590:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 1071              		.loc 1 590 0
 1072 0014 0068     		ldr	r0, [r0]
 1073              	.LVL76:
 1074 0016 FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 1075              	.LVL77:
 591:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1076              		.loc 1 591 0
 1077 001a 1030     		adds	r0, r0, #16
 1078              	.LVL78:
 1079 001c 0123     		movs	r3, #1
 1080 001e 03FA00F0 		lsl	r0, r3, r0
 1081              	.LVL79:
 1082 0022 034B     		ldr	r3, .L93
 1083 0024 D860     		str	r0, [r3, #12]
 572:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 1084              		.loc 1 572 0
 1085 0026 0020     		movs	r0, #0
 1086 0028 08BD     		pop	{r3, pc}
 1087              	.LVL80:
 1088              	.L91:
 582:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1089              		.loc 1 582 0
 1090 002a 0120     		movs	r0, #1
 1091              	.LVL81:
 595:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1092              		.loc 1 595 0
 1093 002c 08BD     		pop	{r3, pc}
 1094              	.L94:
ARM GAS  /tmp/ccTJyLFK.s 			page 74


 1095 002e 00BF     		.align	2
 1096              	.L93:
 1097 0030 00750140 		.word	1073837312
 1098              		.cfi_endproc
 1099              	.LFE142:
 1101              		.section	.text.HAL_DFSDM_ChannelCkabStart_IT,"ax",%progbits
 1102              		.align	2
 1103              		.global	HAL_DFSDM_ChannelCkabStart_IT
 1104              		.thumb
 1105              		.thumb_func
 1107              	HAL_DFSDM_ChannelCkabStart_IT:
 1108              	.LFB143:
 607:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1109              		.loc 1 607 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 1113              	.LVL82:
 616:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1114              		.loc 1 616 0
 1115 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1116 0004 012B     		cmp	r3, #1
 1117 0006 2DD1     		bne	.L100
 607:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1118              		.loc 1 607 0
 1119 0008 70B5     		push	{r4, r5, r6, lr}
 1120              	.LCFI13:
 1121              		.cfi_def_cfa_offset 16
 1122              		.cfi_offset 4, -16
 1123              		.cfi_offset 5, -12
 1124              		.cfi_offset 6, -8
 1125              		.cfi_offset 14, -4
 1126 000a 0446     		mov	r4, r0
 624:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1127              		.loc 1 624 0
 1128 000c 0068     		ldr	r0, [r0]
 1129              	.LVL83:
 1130 000e FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 1131              	.LVL84:
 1132 0012 0546     		mov	r5, r0
 1133              	.LVL85:
 627:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1134              		.loc 1 627 0
 1135 0014 FFF7FEFF 		bl	HAL_GetTick
 1136              	.LVL86:
 1137 0018 0646     		mov	r6, r0
 1138              	.LVL87:
 630:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 1139              		.loc 1 630 0
 1140 001a 0AE0     		b	.L97
 1141              	.LVL88:
 1142              	.L99:
 632:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1143              		.loc 1 632 0
 1144 001c 0123     		movs	r3, #1
 1145 001e 9340     		lsls	r3, r3, r2
 1146 0020 124A     		ldr	r2, .L104
ARM GAS  /tmp/ccTJyLFK.s 			page 75


 1147 0022 D360     		str	r3, [r2, #12]
 635:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 1148              		.loc 1 635 0
 1149 0024 FFF7FEFF 		bl	HAL_GetTick
 1150              	.LVL89:
 1151 0028 801B     		subs	r0, r0, r6
 1152 002a 41F28833 		movw	r3, #5000
 1153 002e 9842     		cmp	r0, r3
 1154 0030 0BD8     		bhi	.L101
 1155              	.L97:
 630:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 1156              		.loc 1 630 0
 1157 0032 0E4B     		ldr	r3, .L104
 1158 0034 9B68     		ldr	r3, [r3, #8]
 1159 0036 03F47F03 		and	r3, r3, #16711680
 1160 003a 05F11002 		add	r2, r5, #16
 1161 003e D340     		lsrs	r3, r3, r2
 1162 0040 13F0010F 		tst	r3, #1
 1163 0044 EAD1     		bne	.L99
 608:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 1164              		.loc 1 608 0
 1165 0046 0020     		movs	r0, #0
 1166 0048 00E0     		b	.L98
 1167              	.L101:
 638:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         break;
 1168              		.loc 1 638 0
 1169 004a 0320     		movs	r0, #3
 1170              	.L98:
 1171              	.LVL90:
 643:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 1172              		.loc 1 643 0
 1173 004c 60B9     		cbnz	r0, .L96
 646:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1174              		.loc 1 646 0
 1175 004e 074A     		ldr	r2, .L104
 1176 0050 5368     		ldr	r3, [r2, #4]
 1177 0052 43F04003 		orr	r3, r3, #64
 1178 0056 5360     		str	r3, [r2, #4]
 649:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 1179              		.loc 1 649 0
 1180 0058 2268     		ldr	r2, [r4]
 1181 005a 1368     		ldr	r3, [r2]
 1182 005c 43F04003 		orr	r3, r3, #64
 1183 0060 1360     		str	r3, [r2]
 1184 0062 70BD     		pop	{r4, r5, r6, pc}
 1185              	.LVL91:
 1186              	.L100:
 1187              	.LCFI14:
 1188              		.cfi_def_cfa_offset 0
 1189              		.cfi_restore 4
 1190              		.cfi_restore 5
 1191              		.cfi_restore 6
 1192              		.cfi_restore 14
 619:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1193              		.loc 1 619 0
 1194 0064 0120     		movs	r0, #1
 1195              	.LVL92:
ARM GAS  /tmp/ccTJyLFK.s 			page 76


 1196 0066 7047     		bx	lr
 1197              	.LVL93:
 1198              	.L96:
 1199              	.LCFI15:
 1200              		.cfi_def_cfa_offset 16
 1201              		.cfi_offset 4, -16
 1202              		.cfi_offset 5, -12
 1203              		.cfi_offset 6, -8
 1204              		.cfi_offset 14, -4
 654:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1205              		.loc 1 654 0
 1206 0068 70BD     		pop	{r4, r5, r6, pc}
 1207              	.LVL94:
 1208              	.L105:
 1209 006a 00BF     		.align	2
 1210              	.L104:
 1211 006c 00750140 		.word	1073837312
 1212              		.cfi_endproc
 1213              	.LFE143:
 1215              		.section	.text.HAL_DFSDM_ChannelCkabCallback,"ax",%progbits
 1216              		.align	2
 1217              		.weak	HAL_DFSDM_ChannelCkabCallback
 1218              		.thumb
 1219              		.thumb_func
 1221              	HAL_DFSDM_ChannelCkabCallback:
 1222              	.LFB144:
 662:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 1223              		.loc 1 662 0
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 0
 1226              		@ frame_needed = 0, uses_anonymous_args = 0
 1227              		@ link register save eliminated.
 1228              	.LVL95:
 1229 0000 7047     		bx	lr
 1230              		.cfi_endproc
 1231              	.LFE144:
 1233 0002 00BF     		.section	.text.HAL_DFSDM_ChannelCkabStop_IT,"ax",%progbits
 1234              		.align	2
 1235              		.global	HAL_DFSDM_ChannelCkabStop_IT
 1236              		.thumb
 1237              		.thumb_func
 1239              	HAL_DFSDM_ChannelCkabStop_IT:
 1240              	.LFB145:
 678:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1241              		.loc 1 678 0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 0
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245              	.LVL96:
 678:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1246              		.loc 1 678 0
 1247 0000 08B5     		push	{r3, lr}
 1248              	.LCFI16:
 1249              		.cfi_def_cfa_offset 8
 1250              		.cfi_offset 3, -8
 1251              		.cfi_offset 14, -4
 1252              	.LVL97:
ARM GAS  /tmp/ccTJyLFK.s 			page 77


 686:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1253              		.loc 1 686 0
 1254 0002 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1255 0006 012B     		cmp	r3, #1
 1256 0008 13D1     		bne	.L109
 694:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 1257              		.loc 1 694 0
 1258 000a 0268     		ldr	r2, [r0]
 1259 000c 1368     		ldr	r3, [r2]
 1260 000e 23F04003 		bic	r3, r3, #64
 1261 0012 1360     		str	r3, [r2]
 697:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 1262              		.loc 1 697 0
 1263 0014 0068     		ldr	r0, [r0]
 1264              	.LVL98:
 1265 0016 FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 1266              	.LVL99:
 698:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1267              		.loc 1 698 0
 1268 001a 1030     		adds	r0, r0, #16
 1269              	.LVL100:
 1270 001c 0123     		movs	r3, #1
 1271 001e 03FA00F0 		lsl	r0, r3, r0
 1272              	.LVL101:
 1273 0022 054B     		ldr	r3, .L111
 1274 0024 D860     		str	r0, [r3, #12]
 701:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1275              		.loc 1 701 0
 1276 0026 5A68     		ldr	r2, [r3, #4]
 1277 0028 22F04002 		bic	r2, r2, #64
 1278 002c 5A60     		str	r2, [r3, #4]
 679:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 1279              		.loc 1 679 0
 1280 002e 0020     		movs	r0, #0
 1281 0030 08BD     		pop	{r3, pc}
 1282              	.LVL102:
 1283              	.L109:
 689:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1284              		.loc 1 689 0
 1285 0032 0120     		movs	r0, #1
 1286              	.LVL103:
 705:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1287              		.loc 1 705 0
 1288 0034 08BD     		pop	{r3, pc}
 1289              	.L112:
 1290 0036 00BF     		.align	2
 1291              	.L111:
 1292 0038 00750140 		.word	1073837312
 1293              		.cfi_endproc
 1294              	.LFE145:
 1296              		.section	.text.HAL_DFSDM_ChannelScdStart,"ax",%progbits
 1297              		.align	2
 1298              		.global	HAL_DFSDM_ChannelScdStart
 1299              		.thumb
 1300              		.thumb_func
 1302              	HAL_DFSDM_ChannelScdStart:
 1303              	.LFB146:
ARM GAS  /tmp/ccTJyLFK.s 			page 78


 720:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1304              		.loc 1 720 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308              		@ link register save eliminated.
 1309              	.LVL104:
 729:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1310              		.loc 1 729 0
 1311 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1312 0004 012B     		cmp	r3, #1
 1313 0006 12D1     		bne	.L115
 720:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1314              		.loc 1 720 0
 1315 0008 30B4     		push	{r4, r5}
 1316              	.LCFI17:
 1317              		.cfi_def_cfa_offset 8
 1318              		.cfi_offset 4, -8
 1319              		.cfi_offset 5, -4
 737:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHAWSCDR |= ((BreakSignal << DFSDM_CHAWSCDR_BKSCD_Pos) | \
 1320              		.loc 1 737 0
 1321 000a 0468     		ldr	r4, [r0]
 1322 000c A568     		ldr	r5, [r4, #8]
 1323 000e 0A4B     		ldr	r3, .L118
 1324 0010 2B40     		ands	r3, r3, r5
 1325 0012 A360     		str	r3, [r4, #8]
 738:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          Threshold);
 1326              		.loc 1 738 0
 1327 0014 0368     		ldr	r3, [r0]
 1328 0016 9C68     		ldr	r4, [r3, #8]
 1329 0018 41EA0231 		orr	r1, r1, r2, lsl #12
 1330              	.LVL105:
 1331 001c 2143     		orrs	r1, r1, r4
 1332 001e 9960     		str	r1, [r3, #8]
 742:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1333              		.loc 1 742 0
 1334 0020 0268     		ldr	r2, [r0]
 1335              	.LVL106:
 1336 0022 1368     		ldr	r3, [r2]
 1337 0024 43F02003 		orr	r3, r3, #32
 1338 0028 1360     		str	r3, [r2]
 721:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1339              		.loc 1 721 0
 1340 002a 0020     		movs	r0, #0
 1341              	.LVL107:
 1342 002c 01E0     		b	.L114
 1343              	.LVL108:
 1344              	.L115:
 1345              	.LCFI18:
 1346              		.cfi_def_cfa_offset 0
 1347              		.cfi_restore 4
 1348              		.cfi_restore 5
 732:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1349              		.loc 1 732 0
 1350 002e 0120     		movs	r0, #1
 1351              	.LVL109:
 1352 0030 7047     		bx	lr
ARM GAS  /tmp/ccTJyLFK.s 			page 79


 1353              	.LVL110:
 1354              	.L114:
 1355              	.LCFI19:
 1356              		.cfi_def_cfa_offset 8
 1357              		.cfi_offset 4, -8
 1358              		.cfi_offset 5, -4
 746:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1359              		.loc 1 746 0
 1360 0032 30BC     		pop	{r4, r5}
 1361              	.LCFI20:
 1362              		.cfi_restore 5
 1363              		.cfi_restore 4
 1364              		.cfi_def_cfa_offset 0
 1365 0034 7047     		bx	lr
 1366              	.L119:
 1367 0036 00BF     		.align	2
 1368              	.L118:
 1369 0038 000FFFFF 		.word	-61696
 1370              		.cfi_endproc
 1371              	.LFE146:
 1373              		.section	.text.HAL_DFSDM_ChannelPollForScd,"ax",%progbits
 1374              		.align	2
 1375              		.global	HAL_DFSDM_ChannelPollForScd
 1376              		.thumb
 1377              		.thumb_func
 1379              	HAL_DFSDM_ChannelPollForScd:
 1380              	.LFB147:
 756:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 1381              		.loc 1 756 0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 0
 1384              		@ frame_needed = 0, uses_anonymous_args = 0
 1385              	.LVL111:
 764:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1386              		.loc 1 764 0
 1387 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1388 0004 012B     		cmp	r3, #1
 1389 0006 21D1     		bne	.L125
 756:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 1390              		.loc 1 756 0
 1391 0008 70B5     		push	{r4, r5, r6, lr}
 1392              	.LCFI21:
 1393              		.cfi_def_cfa_offset 16
 1394              		.cfi_offset 4, -16
 1395              		.cfi_offset 5, -12
 1396              		.cfi_offset 6, -8
 1397              		.cfi_offset 14, -4
 1398 000a 0C46     		mov	r4, r1
 772:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 1399              		.loc 1 772 0
 1400 000c 0068     		ldr	r0, [r0]
 1401              	.LVL112:
 1402 000e FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 1403              	.LVL113:
 1404 0012 0546     		mov	r5, r0
 1405              	.LVL114:
 775:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
ARM GAS  /tmp/ccTJyLFK.s 			page 80


 1406              		.loc 1 775 0
 1407 0014 FFF7FEFF 		bl	HAL_GetTick
 1408              	.LVL115:
 1409 0018 0646     		mov	r6, r0
 1410              	.LVL116:
 778:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 1411              		.loc 1 778 0
 1412 001a 08E0     		b	.L123
 1413              	.LVL117:
 1414              	.L124:
 781:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 1415              		.loc 1 781 0
 1416 001c B4F1FF3F 		cmp	r4, #-1
 1417 0020 05D0     		beq	.L123
 783:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
 1418              		.loc 1 783 0
 1419 0022 ACB1     		cbz	r4, .L126
 783:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
 1420              		.loc 1 783 0 is_stmt 0 discriminator 1
 1421 0024 FFF7FEFF 		bl	HAL_GetTick
 1422              	.LVL118:
 1423 0028 801B     		subs	r0, r0, r6
 1424 002a 8442     		cmp	r4, r0
 1425 002c 12D3     		bcc	.L127
 1426              	.L123:
 778:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 1427              		.loc 1 778 0 is_stmt 1
 1428 002e 0A4B     		ldr	r3, .L129
 1429 0030 9B68     		ldr	r3, [r3, #8]
 1430 0032 03F07F43 		and	r3, r3, #-16777216
 1431 0036 05F11802 		add	r2, r5, #24
 1432 003a D340     		lsrs	r3, r3, r2
 1433 003c EED0     		beq	.L124
 792:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 1434              		.loc 1 792 0
 1435 003e 0123     		movs	r3, #1
 1436 0040 03FA02F2 		lsl	r2, r3, r2
 1437 0044 044B     		ldr	r3, .L129
 1438 0046 DA60     		str	r2, [r3, #12]
 795:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1439              		.loc 1 795 0
 1440 0048 0020     		movs	r0, #0
 1441 004a 70BD     		pop	{r4, r5, r6, pc}
 1442              	.LVL119:
 1443              	.L125:
 1444              	.LCFI22:
 1445              		.cfi_def_cfa_offset 0
 1446              		.cfi_restore 4
 1447              		.cfi_restore 5
 1448              		.cfi_restore 6
 1449              		.cfi_restore 14
 767:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1450              		.loc 1 767 0
 1451 004c 0120     		movs	r0, #1
 1452              	.LVL120:
 797:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1453              		.loc 1 797 0
ARM GAS  /tmp/ccTJyLFK.s 			page 81


 1454 004e 7047     		bx	lr
 1455              	.LVL121:
 1456              	.L126:
 1457              	.LCFI23:
 1458              		.cfi_def_cfa_offset 16
 1459              		.cfi_offset 4, -16
 1460              		.cfi_offset 5, -12
 1461              		.cfi_offset 6, -8
 1462              		.cfi_offset 14, -4
 786:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         }
 1463              		.loc 1 786 0
 1464 0050 0320     		movs	r0, #3
 1465 0052 70BD     		pop	{r4, r5, r6, pc}
 1466              	.LVL122:
 1467              	.L127:
 1468 0054 0320     		movs	r0, #3
 797:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1469              		.loc 1 797 0
 1470 0056 70BD     		pop	{r4, r5, r6, pc}
 1471              	.LVL123:
 1472              	.L130:
 1473              		.align	2
 1474              	.L129:
 1475 0058 00750140 		.word	1073837312
 1476              		.cfi_endproc
 1477              	.LFE147:
 1479              		.section	.text.HAL_DFSDM_ChannelScdStop,"ax",%progbits
 1480              		.align	2
 1481              		.global	HAL_DFSDM_ChannelScdStop
 1482              		.thumb
 1483              		.thumb_func
 1485              	HAL_DFSDM_ChannelScdStop:
 1486              	.LFB148:
 805:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1487              		.loc 1 805 0
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 0
 1490              		@ frame_needed = 0, uses_anonymous_args = 0
 1491              	.LVL124:
 1492 0000 08B5     		push	{r3, lr}
 1493              	.LCFI24:
 1494              		.cfi_def_cfa_offset 8
 1495              		.cfi_offset 3, -8
 1496              		.cfi_offset 14, -4
 1497              	.LVL125:
 813:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1498              		.loc 1 813 0
 1499 0002 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1500 0006 012B     		cmp	r3, #1
 1501 0008 0FD1     		bne	.L133
 821:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 1502              		.loc 1 821 0
 1503 000a 0268     		ldr	r2, [r0]
 1504 000c 1368     		ldr	r3, [r2]
 1505 000e 23F02003 		bic	r3, r3, #32
 1506 0012 1360     		str	r3, [r2]
 824:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRSCSDF_Pos + channel));
ARM GAS  /tmp/ccTJyLFK.s 			page 82


 1507              		.loc 1 824 0
 1508 0014 0068     		ldr	r0, [r0]
 1509              	.LVL126:
 1510 0016 FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 1511              	.LVL127:
 825:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1512              		.loc 1 825 0
 1513 001a 1830     		adds	r0, r0, #24
 1514              	.LVL128:
 1515 001c 0123     		movs	r3, #1
 1516 001e 03FA00F0 		lsl	r0, r3, r0
 1517              	.LVL129:
 1518 0022 034B     		ldr	r3, .L135
 1519 0024 D860     		str	r0, [r3, #12]
 806:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 1520              		.loc 1 806 0
 1521 0026 0020     		movs	r0, #0
 1522 0028 08BD     		pop	{r3, pc}
 1523              	.LVL130:
 1524              	.L133:
 816:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1525              		.loc 1 816 0
 1526 002a 0120     		movs	r0, #1
 1527              	.LVL131:
 829:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1528              		.loc 1 829 0
 1529 002c 08BD     		pop	{r3, pc}
 1530              	.L136:
 1531 002e 00BF     		.align	2
 1532              	.L135:
 1533 0030 00750140 		.word	1073837312
 1534              		.cfi_endproc
 1535              	.LFE148:
 1537              		.section	.text.HAL_DFSDM_ChannelScdStart_IT,"ax",%progbits
 1538              		.align	2
 1539              		.global	HAL_DFSDM_ChannelScdStart_IT
 1540              		.thumb
 1541              		.thumb_func
 1543              	HAL_DFSDM_ChannelScdStart_IT:
 1544              	.LFB149:
 844:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1545              		.loc 1 844 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 0
 1548              		@ frame_needed = 0, uses_anonymous_args = 0
 1549              		@ link register save eliminated.
 1550              	.LVL132:
 853:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1551              		.loc 1 853 0
 1552 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1553 0004 012B     		cmp	r3, #1
 1554 0006 17D1     		bne	.L139
 844:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1555              		.loc 1 844 0
 1556 0008 30B4     		push	{r4, r5}
 1557              	.LCFI25:
 1558              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccTJyLFK.s 			page 83


 1559              		.cfi_offset 4, -8
 1560              		.cfi_offset 5, -4
 861:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1561              		.loc 1 861 0
 1562 000a 0D4C     		ldr	r4, .L142
 1563 000c 6368     		ldr	r3, [r4, #4]
 1564 000e 43F02003 		orr	r3, r3, #32
 1565 0012 6360     		str	r3, [r4, #4]
 864:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHAWSCDR |= ((BreakSignal << DFSDM_CHAWSCDR_BKSCD_Pos) | \
 1566              		.loc 1 864 0
 1567 0014 0468     		ldr	r4, [r0]
 1568 0016 A568     		ldr	r5, [r4, #8]
 1569 0018 0A4B     		ldr	r3, .L142+4
 1570 001a 2B40     		ands	r3, r3, r5
 1571 001c A360     		str	r3, [r4, #8]
 865:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          Threshold);
 1572              		.loc 1 865 0
 1573 001e 0368     		ldr	r3, [r0]
 1574 0020 9C68     		ldr	r4, [r3, #8]
 1575 0022 41EA0231 		orr	r1, r1, r2, lsl #12
 1576              	.LVL133:
 1577 0026 2143     		orrs	r1, r1, r4
 1578 0028 9960     		str	r1, [r3, #8]
 869:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1579              		.loc 1 869 0
 1580 002a 0268     		ldr	r2, [r0]
 1581              	.LVL134:
 1582 002c 1368     		ldr	r3, [r2]
 1583 002e 43F02003 		orr	r3, r3, #32
 1584 0032 1360     		str	r3, [r2]
 845:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1585              		.loc 1 845 0
 1586 0034 0020     		movs	r0, #0
 1587              	.LVL135:
 1588 0036 01E0     		b	.L138
 1589              	.LVL136:
 1590              	.L139:
 1591              	.LCFI26:
 1592              		.cfi_def_cfa_offset 0
 1593              		.cfi_restore 4
 1594              		.cfi_restore 5
 856:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1595              		.loc 1 856 0
 1596 0038 0120     		movs	r0, #1
 1597              	.LVL137:
 1598 003a 7047     		bx	lr
 1599              	.LVL138:
 1600              	.L138:
 1601              	.LCFI27:
 1602              		.cfi_def_cfa_offset 8
 1603              		.cfi_offset 4, -8
 1604              		.cfi_offset 5, -4
 873:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1605              		.loc 1 873 0
 1606 003c 30BC     		pop	{r4, r5}
 1607              	.LCFI28:
 1608              		.cfi_restore 5
ARM GAS  /tmp/ccTJyLFK.s 			page 84


 1609              		.cfi_restore 4
 1610              		.cfi_def_cfa_offset 0
 1611 003e 7047     		bx	lr
 1612              	.L143:
 1613              		.align	2
 1614              	.L142:
 1615 0040 00750140 		.word	1073837312
 1616 0044 000FFFFF 		.word	-61696
 1617              		.cfi_endproc
 1618              	.LFE149:
 1620              		.section	.text.HAL_DFSDM_ChannelScdCallback,"ax",%progbits
 1621              		.align	2
 1622              		.weak	HAL_DFSDM_ChannelScdCallback
 1623              		.thumb
 1624              		.thumb_func
 1626              	HAL_DFSDM_ChannelScdCallback:
 1627              	.LFB150:
 881:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 1628              		.loc 1 881 0
 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 0
 1631              		@ frame_needed = 0, uses_anonymous_args = 0
 1632              		@ link register save eliminated.
 1633              	.LVL139:
 1634 0000 7047     		bx	lr
 1635              		.cfi_endproc
 1636              	.LFE150:
 1638 0002 00BF     		.section	.text.HAL_DFSDM_ChannelScdStop_IT,"ax",%progbits
 1639              		.align	2
 1640              		.global	HAL_DFSDM_ChannelScdStop_IT
 1641              		.thumb
 1642              		.thumb_func
 1644              	HAL_DFSDM_ChannelScdStop_IT:
 1645              	.LFB151:
 897:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1646              		.loc 1 897 0
 1647              		.cfi_startproc
 1648              		@ args = 0, pretend = 0, frame = 0
 1649              		@ frame_needed = 0, uses_anonymous_args = 0
 1650              	.LVL140:
 897:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1651              		.loc 1 897 0
 1652 0000 08B5     		push	{r3, lr}
 1653              	.LCFI29:
 1654              		.cfi_def_cfa_offset 8
 1655              		.cfi_offset 3, -8
 1656              		.cfi_offset 14, -4
 1657              	.LVL141:
 905:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1658              		.loc 1 905 0
 1659 0002 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1660 0006 012B     		cmp	r3, #1
 1661 0008 13D1     		bne	.L147
 913:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 1662              		.loc 1 913 0
 1663 000a 0268     		ldr	r2, [r0]
 1664 000c 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccTJyLFK.s 			page 85


 1665 000e 23F02003 		bic	r3, r3, #32
 1666 0012 1360     		str	r3, [r2]
 916:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     DFSDM1_Filter0->FLTICR = (1 << (DFSDM_FLTICR_CLRSCSDF_Pos + channel));
 1667              		.loc 1 916 0
 1668 0014 0068     		ldr	r0, [r0]
 1669              	.LVL142:
 1670 0016 FFF7FEFF 		bl	DFSDM_GetChannelFromInstance
 1671              	.LVL143:
 917:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1672              		.loc 1 917 0
 1673 001a 1830     		adds	r0, r0, #24
 1674              	.LVL144:
 1675 001c 0123     		movs	r3, #1
 1676 001e 03FA00F0 		lsl	r0, r3, r0
 1677              	.LVL145:
 1678 0022 054B     		ldr	r3, .L149
 1679 0024 D860     		str	r0, [r3, #12]
 920:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1680              		.loc 1 920 0
 1681 0026 5A68     		ldr	r2, [r3, #4]
 1682 0028 22F02002 		bic	r2, r2, #32
 1683 002c 5A60     		str	r2, [r3, #4]
 898:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t channel;
 1684              		.loc 1 898 0
 1685 002e 0020     		movs	r0, #0
 1686 0030 08BD     		pop	{r3, pc}
 1687              	.LVL146:
 1688              	.L147:
 908:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1689              		.loc 1 908 0
 1690 0032 0120     		movs	r0, #1
 1691              	.LVL147:
 924:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1692              		.loc 1 924 0
 1693 0034 08BD     		pop	{r3, pc}
 1694              	.L150:
 1695 0036 00BF     		.align	2
 1696              	.L149:
 1697 0038 00750140 		.word	1073837312
 1698              		.cfi_endproc
 1699              	.LFE151:
 1701              		.section	.text.HAL_DFSDM_ChannelGetAwdValue,"ax",%progbits
 1702              		.align	2
 1703              		.global	HAL_DFSDM_ChannelGetAwdValue
 1704              		.thumb
 1705              		.thumb_func
 1707              	HAL_DFSDM_ChannelGetAwdValue:
 1708              	.LFB152:
 932:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return (int16_t) hdfsdm_channel->Instance->CHWDATAR;
 1709              		.loc 1 932 0
 1710              		.cfi_startproc
 1711              		@ args = 0, pretend = 0, frame = 0
 1712              		@ frame_needed = 0, uses_anonymous_args = 0
 1713              		@ link register save eliminated.
 1714              	.LVL148:
 933:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 1715              		.loc 1 933 0
ARM GAS  /tmp/ccTJyLFK.s 			page 86


 1716 0000 0368     		ldr	r3, [r0]
 1717 0002 D868     		ldr	r0, [r3, #12]
 1718              	.LVL149:
 934:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1719              		.loc 1 934 0
 1720 0004 00B2     		sxth	r0, r0
 1721 0006 7047     		bx	lr
 1722              		.cfi_endproc
 1723              	.LFE152:
 1725              		.section	.text.HAL_DFSDM_ChannelModifyOffset,"ax",%progbits
 1726              		.align	2
 1727              		.global	HAL_DFSDM_ChannelModifyOffset
 1728              		.thumb
 1729              		.thumb_func
 1731              	HAL_DFSDM_ChannelModifyOffset:
 1732              	.LFB153:
 945:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 1733              		.loc 1 945 0
 1734              		.cfi_startproc
 1735              		@ args = 0, pretend = 0, frame = 0
 1736              		@ frame_needed = 0, uses_anonymous_args = 0
 1737              		@ link register save eliminated.
 1738              	.LVL150:
 953:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1739              		.loc 1 953 0
 1740 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1741 0004 012B     		cmp	r3, #1
 1742 0006 0AD1     		bne	.L154
 961:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_channel->Instance->CHCFGR2 |= ((uint32_t) Offset << DFSDM_CHCFGR2_OFFSET_Pos);
 1743              		.loc 1 961 0
 1744 0008 0268     		ldr	r2, [r0]
 1745 000a 5368     		ldr	r3, [r2, #4]
 1746 000c DBB2     		uxtb	r3, r3
 1747 000e 5360     		str	r3, [r2, #4]
 962:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1748              		.loc 1 962 0
 1749 0010 0268     		ldr	r2, [r0]
 1750 0012 5368     		ldr	r3, [r2, #4]
 1751 0014 43EA0121 		orr	r1, r3, r1, lsl #8
 1752              	.LVL151:
 1753 0018 5160     		str	r1, [r2, #4]
 946:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1754              		.loc 1 946 0
 1755 001a 0020     		movs	r0, #0
 1756              	.LVL152:
 1757 001c 7047     		bx	lr
 1758              	.LVL153:
 1759              	.L154:
 956:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1760              		.loc 1 956 0
 1761 001e 0120     		movs	r0, #1
 1762              	.LVL154:
 966:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1763              		.loc 1 966 0
 1764 0020 7047     		bx	lr
 1765              		.cfi_endproc
 1766              	.LFE153:
ARM GAS  /tmp/ccTJyLFK.s 			page 87


 1768 0022 00BF     		.section	.text.HAL_DFSDM_ChannelGetState,"ax",%progbits
 1769              		.align	2
 1770              		.global	HAL_DFSDM_ChannelGetState
 1771              		.thumb
 1772              		.thumb_func
 1774              	HAL_DFSDM_ChannelGetState:
 1775              	.LFB154:
 991:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return DFSDM channel handle state */
 1776              		.loc 1 991 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 0
 1779              		@ frame_needed = 0, uses_anonymous_args = 0
 1780              		@ link register save eliminated.
 1781              	.LVL155:
 994:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1782              		.loc 1 994 0
 1783 0000 90F83400 		ldrb	r0, [r0, #52]	@ zero_extendqisi2
 1784              	.LVL156:
 1785 0004 7047     		bx	lr
 1786              		.cfi_endproc
 1787              	.LFE154:
 1789 0006 00BF     		.section	.text.HAL_DFSDM_FilterMspInit,"ax",%progbits
 1790              		.align	2
 1791              		.weak	HAL_DFSDM_FilterMspInit
 1792              		.thumb
 1793              		.thumb_func
 1795              	HAL_DFSDM_FilterMspInit:
 1796              	.LFB157:
1159:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 1797              		.loc 1 1159 0
 1798              		.cfi_startproc
 1799              		@ args = 0, pretend = 0, frame = 0
 1800              		@ frame_needed = 0, uses_anonymous_args = 0
 1801              		@ link register save eliminated.
 1802              	.LVL157:
 1803 0000 7047     		bx	lr
 1804              		.cfi_endproc
 1805              	.LFE157:
 1807 0002 00BF     		.section	.text.HAL_DFSDM_FilterInit,"ax",%progbits
 1808              		.align	2
 1809              		.global	HAL_DFSDM_FilterInit
 1810              		.thumb
 1811              		.thumb_func
 1813              	HAL_DFSDM_FilterInit:
 1814              	.LFB155:
1021:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM Channel handle */
 1815              		.loc 1 1021 0
 1816              		.cfi_startproc
 1817              		@ args = 0, pretend = 0, frame = 0
 1818              		@ frame_needed = 0, uses_anonymous_args = 0
 1819              	.LVL158:
1023:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1820              		.loc 1 1023 0
 1821 0000 0028     		cmp	r0, #0
 1822 0002 00F08480 		beq	.L169
1021:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM Channel handle */
 1823              		.loc 1 1021 0
ARM GAS  /tmp/ccTJyLFK.s 			page 88


 1824 0006 38B5     		push	{r3, r4, r5, lr}
 1825              	.LCFI30:
 1826              		.cfi_def_cfa_offset 16
 1827              		.cfi_offset 3, -16
 1828              		.cfi_offset 4, -12
 1829              		.cfi_offset 5, -8
 1830              		.cfi_offset 14, -4
 1831 0008 0446     		mov	r4, r0
1041:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 1832              		.loc 1 1041 0
 1833 000a 0268     		ldr	r2, [r0]
 1834 000c 434B     		ldr	r3, .L173
 1835 000e 9A42     		cmp	r2, r3
 1836 0010 05D1     		bne	.L159
1042:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 1837              		.loc 1 1042 0 discriminator 1
 1838 0012 4368     		ldr	r3, [r0, #4]
1041:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 1839              		.loc 1 1041 0 discriminator 1
 1840 0014 012B     		cmp	r3, #1
 1841 0016 7CD0     		beq	.L170
1043:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1842              		.loc 1 1043 0
 1843 0018 C368     		ldr	r3, [r0, #12]
1042:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 1844              		.loc 1 1042 0
 1845 001a 012B     		cmp	r3, #1
 1846 001c 7BD0     		beq	.L171
 1847              	.L159:
1049:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->InjectedChannelsNbr = 1;
 1848              		.loc 1 1049 0
 1849 001e 0023     		movs	r3, #0
 1850 0020 2363     		str	r3, [r4, #48]
1050:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->InjConvRemaining    = 1;
 1851              		.loc 1 1050 0
 1852 0022 0122     		movs	r2, #1
 1853 0024 6264     		str	r2, [r4, #68]
1051:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 1854              		.loc 1 1051 0
 1855 0026 A264     		str	r2, [r4, #72]
1052:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 1856              		.loc 1 1052 0
 1857 0028 2365     		str	r3, [r4, #80]
1055:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1858              		.loc 1 1055 0
 1859 002a 2046     		mov	r0, r4
 1860              	.LVL159:
 1861 002c FFF7FEFF 		bl	HAL_DFSDM_FilterMspInit
 1862              	.LVL160:
1058:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 1863              		.loc 1 1058 0
 1864 0030 2268     		ldr	r2, [r4]
 1865 0032 1368     		ldr	r3, [r2]
 1866 0034 23F40023 		bic	r3, r3, #524288
 1867 0038 1360     		str	r3, [r2]
1059:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1868              		.loc 1 1059 0
ARM GAS  /tmp/ccTJyLFK.s 			page 89


 1869 003a 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1870 003c 012B     		cmp	r3, #1
 1871 003e 05D1     		bne	.L160
1061:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1872              		.loc 1 1061 0
 1873 0040 2268     		ldr	r2, [r4]
 1874 0042 1368     		ldr	r3, [r2]
 1875 0044 43F00053 		orr	r3, r3, #536870912
 1876 0048 1360     		str	r3, [r2]
 1877 004a 04E0     		b	.L161
 1878              	.L160:
1065:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1879              		.loc 1 1065 0
 1880 004c 2268     		ldr	r2, [r4]
 1881 004e 1368     		ldr	r3, [r2]
 1882 0050 23F00053 		bic	r3, r3, #536870912
 1883 0054 1360     		str	r3, [r2]
 1884              	.L161:
1068:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1885              		.loc 1 1068 0
 1886 0056 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 1887 0058 012B     		cmp	r3, #1
 1888 005a 05D1     		bne	.L162
1070:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1889              		.loc 1 1070 0
 1890 005c 2268     		ldr	r2, [r4]
 1891 005e 1368     		ldr	r3, [r2]
 1892 0060 43F40013 		orr	r3, r3, #2097152
 1893 0064 1360     		str	r3, [r2]
 1894 0066 04E0     		b	.L163
 1895              	.L162:
1074:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1896              		.loc 1 1074 0
 1897 0068 2268     		ldr	r2, [r4]
 1898 006a 1368     		ldr	r3, [r2]
 1899 006c 23F40013 		bic	r3, r3, #2097152
 1900 0070 1360     		str	r3, [r2]
 1901              	.L163:
1078:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 1902              		.loc 1 1078 0
 1903 0072 2268     		ldr	r2, [r4]
 1904 0074 1168     		ldr	r1, [r2]
 1905 0076 2A4B     		ldr	r3, .L173+4
 1906 0078 0B40     		ands	r3, r3, r1
 1907 007a 1360     		str	r3, [r2]
1079:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1908              		.loc 1 1079 0
 1909 007c E368     		ldr	r3, [r4, #12]
 1910 007e 022B     		cmp	r3, #2
 1911 0080 04D1     		bne	.L164
1083:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1912              		.loc 1 1083 0
 1913 0082 2268     		ldr	r2, [r4]
 1914 0084 1168     		ldr	r1, [r2]
 1915 0086 6369     		ldr	r3, [r4, #20]
 1916 0088 0B43     		orrs	r3, r3, r1
 1917 008a 1360     		str	r3, [r2]
ARM GAS  /tmp/ccTJyLFK.s 			page 90


 1918              	.L164:
1086:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1919              		.loc 1 1086 0
 1920 008c 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 1921 008e 012B     		cmp	r3, #1
 1922 0090 05D1     		bne	.L165
1088:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1923              		.loc 1 1088 0
 1924 0092 2268     		ldr	r2, [r4]
 1925 0094 1368     		ldr	r3, [r2]
 1926 0096 43F01003 		orr	r3, r3, #16
 1927 009a 1360     		str	r3, [r2]
 1928 009c 04E0     		b	.L166
 1929              	.L165:
1092:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1930              		.loc 1 1092 0
 1931 009e 2268     		ldr	r2, [r4]
 1932 00a0 1368     		ldr	r3, [r2]
 1933 00a2 23F01003 		bic	r3, r3, #16
 1934 00a6 1360     		str	r3, [r2]
 1935              	.L166:
1095:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 1936              		.loc 1 1095 0
 1937 00a8 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 1938 00aa 012B     		cmp	r3, #1
 1939 00ac 05D1     		bne	.L167
1097:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1940              		.loc 1 1097 0
 1941 00ae 2268     		ldr	r2, [r4]
 1942 00b0 1368     		ldr	r3, [r2]
 1943 00b2 43F02003 		orr	r3, r3, #32
 1944 00b6 1360     		str	r3, [r2]
 1945 00b8 04E0     		b	.L168
 1946              	.L167:
1101:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 1947              		.loc 1 1101 0
 1948 00ba 2268     		ldr	r2, [r4]
 1949 00bc 1368     		ldr	r3, [r2]
 1950 00be 23F02003 		bic	r3, r3, #32
 1951 00c2 1360     		str	r3, [r2]
 1952              	.L168:
1105:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 1953              		.loc 1 1105 0
 1954 00c4 2268     		ldr	r2, [r4]
 1955 00c6 5169     		ldr	r1, [r2, #20]
 1956 00c8 164B     		ldr	r3, .L173+8
 1957 00ca 0B40     		ands	r3, r3, r1
 1958 00cc 5361     		str	r3, [r2, #20]
1106:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                     ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FL
 1959              		.loc 1 1106 0
 1960 00ce 2068     		ldr	r0, [r4]
 1961 00d0 4569     		ldr	r5, [r0, #20]
 1962 00d2 E269     		ldr	r2, [r4, #28]
1107:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                   (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 1963              		.loc 1 1107 0
 1964 00d4 216A     		ldr	r1, [r4, #32]
 1965 00d6 0139     		subs	r1, r1, #1
ARM GAS  /tmp/ccTJyLFK.s 			page 91


1106:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                     ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FL
 1966              		.loc 1 1106 0
 1967 00d8 42EA0141 		orr	r1, r2, r1, lsl #16
1108:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1968              		.loc 1 1108 0
 1969 00dc 636A     		ldr	r3, [r4, #36]
 1970 00de 5A1E     		subs	r2, r3, #1
1107:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                   (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 1971              		.loc 1 1107 0
 1972 00e0 41EA0203 		orr	r3, r1, r2
1106:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                     ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FL
 1973              		.loc 1 1106 0
 1974 00e4 2B43     		orrs	r3, r3, r5
 1975 00e6 4361     		str	r3, [r0, #20]
1111:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 1976              		.loc 1 1111 0
 1977 00e8 6368     		ldr	r3, [r4, #4]
 1978 00ea 6363     		str	r3, [r4, #52]
1112:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 1979              		.loc 1 1112 0
 1980 00ec E368     		ldr	r3, [r4, #12]
 1981 00ee A363     		str	r3, [r4, #56]
1113:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 1982              		.loc 1 1113 0
 1983 00f0 A369     		ldr	r3, [r4, #24]
 1984 00f2 E363     		str	r3, [r4, #60]
1114:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 1985              		.loc 1 1114 0
 1986 00f4 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 1987 00f6 84F84030 		strb	r3, [r4, #64]
1117:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 1988              		.loc 1 1117 0
 1989 00fa 2268     		ldr	r2, [r4]
 1990 00fc 1368     		ldr	r3, [r2]
 1991 00fe 43F00103 		orr	r3, r3, #1
 1992 0102 1360     		str	r3, [r2]
1120:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 1993              		.loc 1 1120 0
 1994 0104 0123     		movs	r3, #1
 1995 0106 84F84C30 		strb	r3, [r4, #76]
1122:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 1996              		.loc 1 1122 0
 1997 010a 0020     		movs	r0, #0
 1998 010c 38BD     		pop	{r3, r4, r5, pc}
 1999              	.LVL161:
 2000              	.L169:
 2001              	.LCFI31:
 2002              		.cfi_def_cfa_offset 0
 2003              		.cfi_restore 3
 2004              		.cfi_restore 4
 2005              		.cfi_restore 5
 2006              		.cfi_restore 14
1025:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2007              		.loc 1 1025 0
 2008 010e 0120     		movs	r0, #1
 2009              	.LVL162:
1123:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
ARM GAS  /tmp/ccTJyLFK.s 			page 92


 2010              		.loc 1 1123 0
 2011 0110 7047     		bx	lr
 2012              	.LVL163:
 2013              	.L170:
 2014              	.LCFI32:
 2015              		.cfi_def_cfa_offset 16
 2016              		.cfi_offset 3, -16
 2017              		.cfi_offset 4, -12
 2018              		.cfi_offset 5, -8
 2019              		.cfi_offset 14, -4
1045:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2020              		.loc 1 1045 0
 2021 0112 0120     		movs	r0, #1
 2022              	.LVL164:
 2023 0114 38BD     		pop	{r3, r4, r5, pc}
 2024              	.LVL165:
 2025              	.L171:
 2026 0116 0120     		movs	r0, #1
 2027              	.LVL166:
1123:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2028              		.loc 1 1123 0
 2029 0118 38BD     		pop	{r3, r4, r5, pc}
 2030              	.LVL167:
 2031              	.L174:
 2032 011a 00BF     		.align	2
 2033              	.L173:
 2034 011c 00750140 		.word	1073837312
 2035 0120 F780FFFF 		.word	-32521
 2036 0124 00FF001C 		.word	469827328
 2037              		.cfi_endproc
 2038              	.LFE155:
 2040              		.section	.text.HAL_DFSDM_FilterMspDeInit,"ax",%progbits
 2041              		.align	2
 2042              		.weak	HAL_DFSDM_FilterMspDeInit
 2043              		.thumb
 2044              		.thumb_func
 2046              	HAL_DFSDM_FilterMspDeInit:
 2047              	.LFB158:
1174:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 2048              		.loc 1 1174 0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              		@ link register save eliminated.
 2053              	.LVL168:
 2054 0000 7047     		bx	lr
 2055              		.cfi_endproc
 2056              	.LFE158:
 2058 0002 00BF     		.section	.text.HAL_DFSDM_FilterDeInit,"ax",%progbits
 2059              		.align	2
 2060              		.global	HAL_DFSDM_FilterDeInit
 2061              		.thumb
 2062              		.thumb_func
 2064              	HAL_DFSDM_FilterDeInit:
 2065              	.LFB156:
1131:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter handle */
 2066              		.loc 1 1131 0
ARM GAS  /tmp/ccTJyLFK.s 			page 93


 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 0
 2069              		@ frame_needed = 0, uses_anonymous_args = 0
 2070              	.LVL169:
1133:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 2071              		.loc 1 1133 0
 2072 0000 60B1     		cbz	r0, .L178
1131:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check DFSDM filter handle */
 2073              		.loc 1 1131 0
 2074 0002 10B5     		push	{r4, lr}
 2075              	.LCFI33:
 2076              		.cfi_def_cfa_offset 8
 2077              		.cfi_offset 4, -8
 2078              		.cfi_offset 14, -4
 2079 0004 0446     		mov	r4, r0
1142:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 2080              		.loc 1 1142 0
 2081 0006 0268     		ldr	r2, [r0]
 2082 0008 1368     		ldr	r3, [r2]
 2083 000a 23F00103 		bic	r3, r3, #1
 2084 000e 1360     		str	r3, [r2]
1145:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2085              		.loc 1 1145 0
 2086 0010 FFF7FEFF 		bl	HAL_DFSDM_FilterMspDeInit
 2087              	.LVL170:
1148:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2088              		.loc 1 1148 0
 2089 0014 0020     		movs	r0, #0
 2090 0016 84F84C00 		strb	r0, [r4, #76]
1150:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 2091              		.loc 1 1150 0
 2092 001a 10BD     		pop	{r4, pc}
 2093              	.LVL171:
 2094              	.L178:
 2095              	.LCFI34:
 2096              		.cfi_def_cfa_offset 0
 2097              		.cfi_restore 4
 2098              		.cfi_restore 14
1135:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2099              		.loc 1 1135 0
 2100 001c 0120     		movs	r0, #1
 2101              	.LVL172:
 2102 001e 7047     		bx	lr
 2103              		.cfi_endproc
 2104              	.LFE156:
 2106              		.section	.text.HAL_DFSDM_FilterConfigRegChannel,"ax",%progbits
 2107              		.align	2
 2108              		.global	HAL_DFSDM_FilterConfigRegChannel
 2109              		.thumb
 2110              		.thumb_func
 2112              	HAL_DFSDM_FilterConfigRegChannel:
 2113              	.LFB159:
1214:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2114              		.loc 1 1214 0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccTJyLFK.s 			page 94


 2118              		@ link register save eliminated.
 2119              	.LVL173:
1223:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 2120              		.loc 1 1223 0
 2121 0000 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 2122 0004 013B     		subs	r3, r3, #1
 2123 0006 DBB2     		uxtb	r3, r3
 2124 0008 FD2B     		cmp	r3, #253
 2125 000a 1BD8     		bhi	.L185
1214:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2126              		.loc 1 1214 0
 2127 000c 30B4     		push	{r4, r5}
 2128              	.LCFI35:
 2129              		.cfi_def_cfa_offset 8
 2130              		.cfi_offset 4, -8
 2131              		.cfi_offset 5, -4
1227:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 2132              		.loc 1 1227 0
 2133 000e 0468     		ldr	r4, [r0]
 2134 0010 2568     		ldr	r5, [r4]
 2135 0012 0E4B     		ldr	r3, .L188
 2136 0014 2B40     		ands	r3, r3, r5
 2137 0016 2360     		str	r3, [r4]
1228:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 2138              		.loc 1 1228 0
 2139 0018 012A     		cmp	r2, #1
 2140 001a 09D1     		bne	.L183
1230:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                      DFSDM_FLTCR1_RCONT);
 2141              		.loc 1 1230 0
 2142 001c 0468     		ldr	r4, [r0]
 2143 001e 2368     		ldr	r3, [r4]
 2144 0020 0902     		lsls	r1, r1, #8
 2145              	.LVL174:
 2146 0022 01F07F41 		and	r1, r1, #-16777216
 2147 0026 0B43     		orrs	r3, r3, r1
 2148 0028 43F48023 		orr	r3, r3, #262144
 2149 002c 2360     		str	r3, [r4]
 2150 002e 06E0     		b	.L184
 2151              	.LVL175:
 2152              	.L183:
1235:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 2153              		.loc 1 1235 0
 2154 0030 0368     		ldr	r3, [r0]
 2155 0032 1C68     		ldr	r4, [r3]
 2156 0034 0902     		lsls	r1, r1, #8
 2157              	.LVL176:
 2158 0036 01F07F41 		and	r1, r1, #-16777216
 2159 003a 2143     		orrs	r1, r1, r4
 2160 003c 1960     		str	r1, [r3]
 2161              	.L184:
1238:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }  
 2162              		.loc 1 1238 0
 2163 003e 0263     		str	r2, [r0, #48]
1215:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 2164              		.loc 1 1215 0
 2165 0040 0020     		movs	r0, #0
 2166              	.LVL177:
ARM GAS  /tmp/ccTJyLFK.s 			page 95


 2167 0042 01E0     		b	.L182
 2168              	.LVL178:
 2169              	.L185:
 2170              	.LCFI36:
 2171              		.cfi_def_cfa_offset 0
 2172              		.cfi_restore 4
 2173              		.cfi_restore 5
1242:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2174              		.loc 1 1242 0
 2175 0044 0120     		movs	r0, #1
 2176              	.LVL179:
 2177 0046 7047     		bx	lr
 2178              	.LVL180:
 2179              	.L182:
 2180              	.LCFI37:
 2181              		.cfi_def_cfa_offset 8
 2182              		.cfi_offset 4, -8
 2183              		.cfi_offset 5, -4
1247:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2184              		.loc 1 1247 0
 2185 0048 30BC     		pop	{r4, r5}
 2186              	.LCFI38:
 2187              		.cfi_restore 5
 2188              		.cfi_restore 4
 2189              		.cfi_def_cfa_offset 0
 2190 004a 7047     		bx	lr
 2191              	.L189:
 2192              		.align	2
 2193              	.L188:
 2194 004c FFFFFBF8 		.word	-117702657
 2195              		.cfi_endproc
 2196              	.LFE159:
 2198              		.section	.text.HAL_DFSDM_FilterConfigInjChannel,"ax",%progbits
 2199              		.align	2
 2200              		.global	HAL_DFSDM_FilterConfigInjChannel
 2201              		.thumb
 2202              		.thumb_func
 2204              	HAL_DFSDM_FilterConfigInjChannel:
 2205              	.LFB160:
1258:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2206              		.loc 1 1258 0
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 0
 2209              		@ frame_needed = 0, uses_anonymous_args = 0
 2210              	.LVL181:
1266:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 2211              		.loc 1 1266 0
 2212 0000 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 2213 0004 013B     		subs	r3, r3, #1
 2214 0006 DBB2     		uxtb	r3, r3
 2215 0008 FD2B     		cmp	r3, #253
 2216 000a 10D8     		bhi	.L193
1258:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2217              		.loc 1 1258 0
 2218 000c 10B5     		push	{r4, lr}
 2219              	.LCFI39:
 2220              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccTJyLFK.s 			page 96


 2221              		.cfi_offset 4, -8
 2222              		.cfi_offset 14, -4
 2223 000e 0446     		mov	r4, r0
1270:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Store number of injected channels */
 2224              		.loc 1 1270 0
 2225 0010 0368     		ldr	r3, [r0]
 2226 0012 8AB2     		uxth	r2, r1
 2227 0014 1A61     		str	r2, [r3, #16]
1272:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     /* Update number of injected channels remaining */
 2228              		.loc 1 1272 0
 2229 0016 0846     		mov	r0, r1
 2230              	.LVL182:
 2231 0018 FFF7FEFF 		bl	DFSDM_GetInjChannelsNbr
 2232              	.LVL183:
 2233 001c 6064     		str	r0, [r4, #68]
1274:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 2234              		.loc 1 1274 0
 2235 001e 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
1275:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2236              		.loc 1 1275 0
 2237 0022 012B     		cmp	r3, #1
 2238 0024 00D0     		beq	.L192
 2239 0026 0120     		movs	r0, #1
 2240              	.L192:
1274:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 2241              		.loc 1 1274 0
 2242 0028 A064     		str	r0, [r4, #72]
1259:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2243              		.loc 1 1259 0
 2244 002a 0020     		movs	r0, #0
 2245 002c 10BD     		pop	{r4, pc}
 2246              	.LVL184:
 2247              	.L193:
 2248              	.LCFI40:
 2249              		.cfi_def_cfa_offset 0
 2250              		.cfi_restore 4
 2251              		.cfi_restore 14
1279:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2252              		.loc 1 1279 0
 2253 002e 0120     		movs	r0, #1
 2254              	.LVL185:
 2255 0030 7047     		bx	lr
 2256              		.cfi_endproc
 2257              	.LFE160:
 2259 0032 00BF     		.section	.text.HAL_DFSDM_FilterRegularStart,"ax",%progbits
 2260              		.align	2
 2261              		.global	HAL_DFSDM_FilterRegularStart
 2262              		.thumb
 2263              		.thumb_func
 2265              	HAL_DFSDM_FilterRegularStart:
 2266              	.LFB161:
1327:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2267              		.loc 1 1327 0
 2268              		.cfi_startproc
 2269              		@ args = 0, pretend = 0, frame = 0
 2270              		@ frame_needed = 0, uses_anonymous_args = 0
 2271              	.LVL186:
ARM GAS  /tmp/ccTJyLFK.s 			page 97


 2272 0000 08B5     		push	{r3, lr}
 2273              	.LCFI41:
 2274              		.cfi_def_cfa_offset 8
 2275              		.cfi_offset 3, -8
 2276              		.cfi_offset 14, -4
 2277              	.LVL187:
1334:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 2278              		.loc 1 1334 0
 2279 0002 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 2280 0006 032B     		cmp	r3, #3
 2281 0008 18BF     		it	ne
 2282 000a 012B     		cmpne	r3, #1
 2283 000c 03D1     		bne	.L198
1338:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2284              		.loc 1 1338 0
 2285 000e FFF7FEFF 		bl	DFSDM_RegConvStart
 2286              	.LVL188:
1328:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2287              		.loc 1 1328 0
 2288 0012 0020     		movs	r0, #0
 2289 0014 08BD     		pop	{r3, pc}
 2290              	.LVL189:
 2291              	.L198:
1342:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2292              		.loc 1 1342 0
 2293 0016 0120     		movs	r0, #1
 2294              	.LVL190:
1346:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2295              		.loc 1 1346 0
 2296 0018 08BD     		pop	{r3, pc}
 2297              		.cfi_endproc
 2298              	.LFE161:
 2300 001a 00BF     		.section	.text.HAL_DFSDM_FilterRegularStop,"ax",%progbits
 2301              		.align	2
 2302              		.global	HAL_DFSDM_FilterRegularStop
 2303              		.thumb
 2304              		.thumb_func
 2306              	HAL_DFSDM_FilterRegularStop:
 2307              	.LFB163:
1417:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2308              		.loc 1 1417 0
 2309              		.cfi_startproc
 2310              		@ args = 0, pretend = 0, frame = 0
 2311              		@ frame_needed = 0, uses_anonymous_args = 0
 2312              	.LVL191:
 2313 0000 08B5     		push	{r3, lr}
 2314              	.LCFI42:
 2315              		.cfi_def_cfa_offset 8
 2316              		.cfi_offset 3, -8
 2317              		.cfi_offset 14, -4
 2318              	.LVL192:
1424:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 2319              		.loc 1 1424 0
 2320 0002 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 2321 0006 022B     		cmp	r3, #2
 2322 0008 18BF     		it	ne
 2323 000a 042B     		cmpne	r3, #4
ARM GAS  /tmp/ccTJyLFK.s 			page 98


 2324 000c 03D1     		bne	.L202
1433:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2325              		.loc 1 1433 0
 2326 000e FFF7FEFF 		bl	DFSDM_RegConvStop
 2327              	.LVL193:
1418:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2328              		.loc 1 1418 0
 2329 0012 0020     		movs	r0, #0
 2330 0014 08BD     		pop	{r3, pc}
 2331              	.LVL194:
 2332              	.L202:
1428:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2333              		.loc 1 1428 0
 2334 0016 0120     		movs	r0, #1
 2335              	.LVL195:
1437:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2336              		.loc 1 1437 0
 2337 0018 08BD     		pop	{r3, pc}
 2338              		.cfi_endproc
 2339              	.LFE163:
 2341 001a 00BF     		.section	.text.HAL_DFSDM_FilterRegularStart_IT,"ax",%progbits
 2342              		.align	2
 2343              		.global	HAL_DFSDM_FilterRegularStart_IT
 2344              		.thumb
 2345              		.thumb_func
 2347              	HAL_DFSDM_FilterRegularStart_IT:
 2348              	.LFB164:
1447:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2349              		.loc 1 1447 0
 2350              		.cfi_startproc
 2351              		@ args = 0, pretend = 0, frame = 0
 2352              		@ frame_needed = 0, uses_anonymous_args = 0
 2353              	.LVL196:
 2354 0000 08B5     		push	{r3, lr}
 2355              	.LCFI43:
 2356              		.cfi_def_cfa_offset 8
 2357              		.cfi_offset 3, -8
 2358              		.cfi_offset 14, -4
 2359              	.LVL197:
1454:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 2360              		.loc 1 1454 0
 2361 0002 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 2362 0006 032B     		cmp	r3, #3
 2363 0008 18BF     		it	ne
 2364 000a 012B     		cmpne	r3, #1
 2365 000c 08D1     		bne	.L206
1458:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 2366              		.loc 1 1458 0
 2367 000e 0268     		ldr	r2, [r0]
 2368 0010 5368     		ldr	r3, [r2, #4]
 2369 0012 43F00A03 		orr	r3, r3, #10
 2370 0016 5360     		str	r3, [r2, #4]
1461:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2371              		.loc 1 1461 0
 2372 0018 FFF7FEFF 		bl	DFSDM_RegConvStart
 2373              	.LVL198:
1448:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
ARM GAS  /tmp/ccTJyLFK.s 			page 99


 2374              		.loc 1 1448 0
 2375 001c 0020     		movs	r0, #0
 2376 001e 08BD     		pop	{r3, pc}
 2377              	.LVL199:
 2378              	.L206:
1465:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2379              		.loc 1 1465 0
 2380 0020 0120     		movs	r0, #1
 2381              	.LVL200:
1469:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2382              		.loc 1 1469 0
 2383 0022 08BD     		pop	{r3, pc}
 2384              		.cfi_endproc
 2385              	.LFE164:
 2387              		.section	.text.HAL_DFSDM_FilterRegularStop_IT,"ax",%progbits
 2388              		.align	2
 2389              		.global	HAL_DFSDM_FilterRegularStop_IT
 2390              		.thumb
 2391              		.thumb_func
 2393              	HAL_DFSDM_FilterRegularStop_IT:
 2394              	.LFB165:
1478:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2395              		.loc 1 1478 0
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 0
 2398              		@ frame_needed = 0, uses_anonymous_args = 0
 2399              	.LVL201:
 2400 0000 08B5     		push	{r3, lr}
 2401              	.LCFI44:
 2402              		.cfi_def_cfa_offset 8
 2403              		.cfi_offset 3, -8
 2404              		.cfi_offset 14, -4
 2405              	.LVL202:
1485:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 2406              		.loc 1 1485 0
 2407 0002 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 2408 0006 022B     		cmp	r3, #2
 2409 0008 18BF     		it	ne
 2410 000a 042B     		cmpne	r3, #4
 2411 000c 08D1     		bne	.L210
1494:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 2412              		.loc 1 1494 0
 2413 000e 0268     		ldr	r2, [r0]
 2414 0010 5368     		ldr	r3, [r2, #4]
 2415 0012 23F00A03 		bic	r3, r3, #10
 2416 0016 5360     		str	r3, [r2, #4]
1497:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2417              		.loc 1 1497 0
 2418 0018 FFF7FEFF 		bl	DFSDM_RegConvStop
 2419              	.LVL203:
1479:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2420              		.loc 1 1479 0
 2421 001c 0020     		movs	r0, #0
 2422 001e 08BD     		pop	{r3, pc}
 2423              	.LVL204:
 2424              	.L210:
1489:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
ARM GAS  /tmp/ccTJyLFK.s 			page 100


 2425              		.loc 1 1489 0
 2426 0020 0120     		movs	r0, #1
 2427              	.LVL205:
1501:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2428              		.loc 1 1501 0
 2429 0022 08BD     		pop	{r3, pc}
 2430              		.cfi_endproc
 2431              	.LFE165:
 2433              		.section	.text.HAL_DFSDM_FilterRegularStart_DMA,"ax",%progbits
 2434              		.align	2
 2435              		.global	HAL_DFSDM_FilterRegularStart_DMA
 2436              		.thumb
 2437              		.thumb_func
 2439              	HAL_DFSDM_FilterRegularStart_DMA:
 2440              	.LFB166:
1518:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2441              		.loc 1 1518 0
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 0
 2444              		@ frame_needed = 0, uses_anonymous_args = 0
 2445              	.LVL206:
1525:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 2446              		.loc 1 1525 0
 2447 0000 002A     		cmp	r2, #0
 2448 0002 18BF     		it	ne
 2449 0004 0029     		cmpne	r1, #0
 2450 0006 3FD0     		beq	.L218
1518:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2451              		.loc 1 1518 0
 2452 0008 38B5     		push	{r3, r4, r5, lr}
 2453              	.LCFI45:
 2454              		.cfi_def_cfa_offset 16
 2455              		.cfi_offset 3, -16
 2456              		.cfi_offset 4, -12
 2457              		.cfi_offset 5, -8
 2458              		.cfi_offset 14, -4
 2459 000a 0C46     		mov	r4, r1
 2460 000c 1346     		mov	r3, r2
1530:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 2461              		.loc 1 1530 0
 2462 000e 0268     		ldr	r2, [r0]
 2463              	.LVL207:
 2464 0010 1268     		ldr	r2, [r2]
 2465 0012 12F4001F 		tst	r2, #2097152
 2466 0016 39D0     		beq	.L219
1535:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 2467              		.loc 1 1535 0
 2468 0018 426B     		ldr	r2, [r0, #52]
 2469 001a 32B9     		cbnz	r2, .L214
1536:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 2470              		.loc 1 1536 0 discriminator 1
 2471 001c 016B     		ldr	r1, [r0, #48]
 2472              	.LVL208:
1535:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 2473              		.loc 1 1535 0 discriminator 1
 2474 001e 21B9     		cbnz	r1, .L214
1537:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length != 1))
ARM GAS  /tmp/ccTJyLFK.s 			page 101


 2475              		.loc 1 1537 0
 2476 0020 816A     		ldr	r1, [r0, #40]
 2477 0022 C969     		ldr	r1, [r1, #28]
1536:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 2478              		.loc 1 1536 0
 2479 0024 09B9     		cbnz	r1, .L214
1537:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length != 1))
 2480              		.loc 1 1537 0
 2481 0026 012B     		cmp	r3, #1
 2482 0028 32D1     		bne	.L220
 2483              	.L214:
1542:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 2484              		.loc 1 1542 0
 2485 002a 32B9     		cbnz	r2, .L215
1543:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 2486              		.loc 1 1543 0 discriminator 1
 2487 002c 026B     		ldr	r2, [r0, #48]
1542:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 2488              		.loc 1 1542 0 discriminator 1
 2489 002e 22B9     		cbnz	r2, .L215
1544:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 2490              		.loc 1 1544 0
 2491 0030 826A     		ldr	r2, [r0, #40]
 2492 0032 D269     		ldr	r2, [r2, #28]
1543:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 2493              		.loc 1 1543 0
 2494 0034 B2F5807F 		cmp	r2, #256
 2495 0038 2CD0     		beq	.L221
 2496              	.L215:
1549:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 2497              		.loc 1 1549 0
 2498 003a 90F84C20 		ldrb	r2, [r0, #76]	@ zero_extendqisi2
 2499 003e 032A     		cmp	r2, #3
 2500 0040 18BF     		it	ne
 2501 0042 012A     		cmpne	r2, #1
 2502 0044 28D1     		bne	.L222
1553:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 2503              		.loc 1 1553 0
 2504 0046 826A     		ldr	r2, [r0, #40]
 2505 0048 1449     		ldr	r1, .L225
 2506 004a D163     		str	r1, [r2, #60]
1554:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCUL
 2507              		.loc 1 1554 0
 2508 004c 826A     		ldr	r2, [r0, #40]
 2509 004e 1449     		ldr	r1, .L225+4
 2510 0050 D164     		str	r1, [r2, #76]
1555:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMARegularHalfConvCplt : NULL;
 2511              		.loc 1 1555 0
 2512 0052 816A     		ldr	r1, [r0, #40]
 2513 0054 CA69     		ldr	r2, [r1, #28]
1556:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 2514              		.loc 1 1556 0
 2515 0056 B2F5807F 		cmp	r2, #256
 2516 005a 01D1     		bne	.L223
 2517 005c 114D     		ldr	r5, .L225+8
 2518 005e 00E0     		b	.L216
 2519              	.L223:
ARM GAS  /tmp/ccTJyLFK.s 			page 102


 2520 0060 0025     		movs	r5, #0
 2521              	.L216:
 2522 0062 2246     		mov	r2, r4
 2523 0064 0446     		mov	r4, r0
 2524              	.LVL209:
1555:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMARegularHalfConvCplt : NULL;
 2525              		.loc 1 1555 0
 2526 0066 0D64     		str	r5, [r1, #64]
1559:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                         (uint32_t) pData, Length) != HAL_OK)
 2527              		.loc 1 1559 0
 2528 0068 0168     		ldr	r1, [r0]
 2529 006a 1C31     		adds	r1, r1, #28
 2530 006c 806A     		ldr	r0, [r0, #40]
 2531              	.LVL210:
 2532 006e FFF7FEFF 		bl	HAL_DMA_Start_IT
 2533              	.LVL211:
 2534 0072 20B1     		cbz	r0, .L217
1563:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
 2535              		.loc 1 1563 0
 2536 0074 FF23     		movs	r3, #255
 2537 0076 84F84C30 		strb	r3, [r4, #76]
 2538              	.LVL212:
1564:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 2539              		.loc 1 1564 0
 2540 007a 0120     		movs	r0, #1
 2541 007c 38BD     		pop	{r3, r4, r5, pc}
 2542              	.LVL213:
 2543              	.L217:
1569:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 2544              		.loc 1 1569 0
 2545 007e 2046     		mov	r0, r4
 2546 0080 FFF7FEFF 		bl	DFSDM_RegConvStart
 2547              	.LVL214:
1519:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2548              		.loc 1 1519 0
 2549 0084 0020     		movs	r0, #0
 2550 0086 38BD     		pop	{r3, r4, r5, pc}
 2551              	.LVL215:
 2552              	.L218:
 2553              	.LCFI46:
 2554              		.cfi_def_cfa_offset 0
 2555              		.cfi_restore 3
 2556              		.cfi_restore 4
 2557              		.cfi_restore 5
 2558              		.cfi_restore 14
1527:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2559              		.loc 1 1527 0
 2560 0088 0120     		movs	r0, #1
 2561              	.LVL216:
1578:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2562              		.loc 1 1578 0
 2563 008a 7047     		bx	lr
 2564              	.LVL217:
 2565              	.L219:
 2566              	.LCFI47:
 2567              		.cfi_def_cfa_offset 16
 2568              		.cfi_offset 3, -16
ARM GAS  /tmp/ccTJyLFK.s 			page 103


 2569              		.cfi_offset 4, -12
 2570              		.cfi_offset 5, -8
 2571              		.cfi_offset 14, -4
1532:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2572              		.loc 1 1532 0
 2573 008c 0120     		movs	r0, #1
 2574              	.LVL218:
 2575 008e 38BD     		pop	{r3, r4, r5, pc}
 2576              	.LVL219:
 2577              	.L220:
1540:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2578              		.loc 1 1540 0
 2579 0090 0120     		movs	r0, #1
 2580              	.LVL220:
 2581 0092 38BD     		pop	{r3, r4, r5, pc}
 2582              	.LVL221:
 2583              	.L221:
1546:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2584              		.loc 1 1546 0
 2585 0094 0120     		movs	r0, #1
 2586              	.LVL222:
 2587 0096 38BD     		pop	{r3, r4, r5, pc}
 2588              	.LVL223:
 2589              	.L222:
1574:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2590              		.loc 1 1574 0
 2591 0098 0120     		movs	r0, #1
 2592              	.LVL224:
1578:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2593              		.loc 1 1578 0
 2594 009a 38BD     		pop	{r3, r4, r5, pc}
 2595              	.LVL225:
 2596              	.L226:
 2597              		.align	2
 2598              	.L225:
 2599 009c 00000000 		.word	DFSDM_DMARegularConvCplt
 2600 00a0 00000000 		.word	DFSDM_DMAError
 2601 00a4 00000000 		.word	DFSDM_DMARegularHalfConvCplt
 2602              		.cfi_endproc
 2603              	.LFE166:
 2605              		.section	.text.HAL_DFSDM_FilterRegularMsbStart_DMA,"ax",%progbits
 2606              		.align	2
 2607              		.global	HAL_DFSDM_FilterRegularMsbStart_DMA
 2608              		.thumb
 2609              		.thumb_func
 2611              	HAL_DFSDM_FilterRegularMsbStart_DMA:
 2612              	.LFB167:
1595:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2613              		.loc 1 1595 0
 2614              		.cfi_startproc
 2615              		@ args = 0, pretend = 0, frame = 0
 2616              		@ frame_needed = 0, uses_anonymous_args = 0
 2617              	.LVL226:
1602:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 2618              		.loc 1 1602 0
 2619 0000 002A     		cmp	r2, #0
 2620 0002 18BF     		it	ne
ARM GAS  /tmp/ccTJyLFK.s 			page 104


 2621 0004 0029     		cmpne	r1, #0
 2622 0006 3FD0     		beq	.L233
1595:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2623              		.loc 1 1595 0
 2624 0008 38B5     		push	{r3, r4, r5, lr}
 2625              	.LCFI48:
 2626              		.cfi_def_cfa_offset 16
 2627              		.cfi_offset 3, -16
 2628              		.cfi_offset 4, -12
 2629              		.cfi_offset 5, -8
 2630              		.cfi_offset 14, -4
 2631 000a 0C46     		mov	r4, r1
 2632 000c 1346     		mov	r3, r2
1607:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 2633              		.loc 1 1607 0
 2634 000e 0268     		ldr	r2, [r0]
 2635              	.LVL227:
 2636 0010 1268     		ldr	r2, [r2]
 2637 0012 12F4001F 		tst	r2, #2097152
 2638 0016 39D0     		beq	.L234
1612:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 2639              		.loc 1 1612 0
 2640 0018 426B     		ldr	r2, [r0, #52]
 2641 001a 32B9     		cbnz	r2, .L229
1613:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 2642              		.loc 1 1613 0 discriminator 1
 2643 001c 016B     		ldr	r1, [r0, #48]
 2644              	.LVL228:
1612:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 2645              		.loc 1 1612 0 discriminator 1
 2646 001e 21B9     		cbnz	r1, .L229
1614:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length != 1))
 2647              		.loc 1 1614 0
 2648 0020 816A     		ldr	r1, [r0, #40]
 2649 0022 C969     		ldr	r1, [r1, #28]
1613:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 2650              		.loc 1 1613 0
 2651 0024 09B9     		cbnz	r1, .L229
1614:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length != 1))
 2652              		.loc 1 1614 0
 2653 0026 012B     		cmp	r3, #1
 2654 0028 32D1     		bne	.L235
 2655              	.L229:
1619:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 2656              		.loc 1 1619 0
 2657 002a 32B9     		cbnz	r2, .L230
1620:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 2658              		.loc 1 1620 0 discriminator 1
 2659 002c 026B     		ldr	r2, [r0, #48]
1619:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 2660              		.loc 1 1619 0 discriminator 1
 2661 002e 22B9     		cbnz	r2, .L230
1621:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 2662              		.loc 1 1621 0
 2663 0030 826A     		ldr	r2, [r0, #40]
 2664 0032 D269     		ldr	r2, [r2, #28]
1620:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
ARM GAS  /tmp/ccTJyLFK.s 			page 105


 2665              		.loc 1 1620 0
 2666 0034 B2F5807F 		cmp	r2, #256
 2667 0038 2CD0     		beq	.L236
 2668              	.L230:
1626:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 2669              		.loc 1 1626 0
 2670 003a 90F84C20 		ldrb	r2, [r0, #76]	@ zero_extendqisi2
 2671 003e 032A     		cmp	r2, #3
 2672 0040 18BF     		it	ne
 2673 0042 012A     		cmpne	r2, #1
 2674 0044 28D1     		bne	.L237
1630:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 2675              		.loc 1 1630 0
 2676 0046 826A     		ldr	r2, [r0, #40]
 2677 0048 1449     		ldr	r1, .L240
 2678 004a D163     		str	r1, [r2, #60]
1631:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCUL
 2679              		.loc 1 1631 0
 2680 004c 826A     		ldr	r2, [r0, #40]
 2681 004e 1449     		ldr	r1, .L240+4
 2682 0050 D164     		str	r1, [r2, #76]
1632:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMARegularHalfConvCplt : NULL;
 2683              		.loc 1 1632 0
 2684 0052 816A     		ldr	r1, [r0, #40]
 2685 0054 CA69     		ldr	r2, [r1, #28]
1633:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 2686              		.loc 1 1633 0
 2687 0056 B2F5807F 		cmp	r2, #256
 2688 005a 01D1     		bne	.L238
 2689 005c 114D     		ldr	r5, .L240+8
 2690 005e 00E0     		b	.L231
 2691              	.L238:
 2692 0060 0025     		movs	r5, #0
 2693              	.L231:
 2694 0062 2246     		mov	r2, r4
 2695 0064 0446     		mov	r4, r0
 2696              	.LVL229:
1632:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMARegularHalfConvCplt : NULL;
 2697              		.loc 1 1632 0
 2698 0066 0D64     		str	r5, [r1, #64]
1636:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                         (uint32_t) pData, Length) != HAL_OK)
 2699              		.loc 1 1636 0
 2700 0068 0168     		ldr	r1, [r0]
 2701 006a 1E31     		adds	r1, r1, #30
 2702 006c 806A     		ldr	r0, [r0, #40]
 2703              	.LVL230:
 2704 006e FFF7FEFF 		bl	HAL_DMA_Start_IT
 2705              	.LVL231:
 2706 0072 20B1     		cbz	r0, .L232
1640:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
 2707              		.loc 1 1640 0
 2708 0074 FF23     		movs	r3, #255
 2709 0076 84F84C30 		strb	r3, [r4, #76]
 2710              	.LVL232:
1641:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 2711              		.loc 1 1641 0
 2712 007a 0120     		movs	r0, #1
ARM GAS  /tmp/ccTJyLFK.s 			page 106


 2713 007c 38BD     		pop	{r3, r4, r5, pc}
 2714              	.LVL233:
 2715              	.L232:
1646:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 2716              		.loc 1 1646 0
 2717 007e 2046     		mov	r0, r4
 2718 0080 FFF7FEFF 		bl	DFSDM_RegConvStart
 2719              	.LVL234:
1596:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2720              		.loc 1 1596 0
 2721 0084 0020     		movs	r0, #0
 2722 0086 38BD     		pop	{r3, r4, r5, pc}
 2723              	.LVL235:
 2724              	.L233:
 2725              	.LCFI49:
 2726              		.cfi_def_cfa_offset 0
 2727              		.cfi_restore 3
 2728              		.cfi_restore 4
 2729              		.cfi_restore 5
 2730              		.cfi_restore 14
1604:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2731              		.loc 1 1604 0
 2732 0088 0120     		movs	r0, #1
 2733              	.LVL236:
1655:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2734              		.loc 1 1655 0
 2735 008a 7047     		bx	lr
 2736              	.LVL237:
 2737              	.L234:
 2738              	.LCFI50:
 2739              		.cfi_def_cfa_offset 16
 2740              		.cfi_offset 3, -16
 2741              		.cfi_offset 4, -12
 2742              		.cfi_offset 5, -8
 2743              		.cfi_offset 14, -4
1609:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2744              		.loc 1 1609 0
 2745 008c 0120     		movs	r0, #1
 2746              	.LVL238:
 2747 008e 38BD     		pop	{r3, r4, r5, pc}
 2748              	.LVL239:
 2749              	.L235:
1617:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2750              		.loc 1 1617 0
 2751 0090 0120     		movs	r0, #1
 2752              	.LVL240:
 2753 0092 38BD     		pop	{r3, r4, r5, pc}
 2754              	.LVL241:
 2755              	.L236:
1623:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2756              		.loc 1 1623 0
 2757 0094 0120     		movs	r0, #1
 2758              	.LVL242:
 2759 0096 38BD     		pop	{r3, r4, r5, pc}
 2760              	.LVL243:
 2761              	.L237:
1651:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
ARM GAS  /tmp/ccTJyLFK.s 			page 107


 2762              		.loc 1 1651 0
 2763 0098 0120     		movs	r0, #1
 2764              	.LVL244:
1655:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2765              		.loc 1 1655 0
 2766 009a 38BD     		pop	{r3, r4, r5, pc}
 2767              	.LVL245:
 2768              	.L241:
 2769              		.align	2
 2770              	.L240:
 2771 009c 00000000 		.word	DFSDM_DMARegularConvCplt
 2772 00a0 00000000 		.word	DFSDM_DMAError
 2773 00a4 00000000 		.word	DFSDM_DMARegularHalfConvCplt
 2774              		.cfi_endproc
 2775              	.LFE167:
 2777              		.section	.text.HAL_DFSDM_FilterRegularStop_DMA,"ax",%progbits
 2778              		.align	2
 2779              		.global	HAL_DFSDM_FilterRegularStop_DMA
 2780              		.thumb
 2781              		.thumb_func
 2783              	HAL_DFSDM_FilterRegularStop_DMA:
 2784              	.LFB168:
1664:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2785              		.loc 1 1664 0
 2786              		.cfi_startproc
 2787              		@ args = 0, pretend = 0, frame = 0
 2788              		@ frame_needed = 0, uses_anonymous_args = 0
 2789              	.LVL246:
1671:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 2790              		.loc 1 1671 0
 2791 0000 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 2792 0004 022B     		cmp	r3, #2
 2793 0006 18BF     		it	ne
 2794 0008 042B     		cmpne	r3, #4
 2795 000a 0FD1     		bne	.L245
1664:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2796              		.loc 1 1664 0
 2797 000c 10B5     		push	{r4, lr}
 2798              	.LCFI51:
 2799              		.cfi_def_cfa_offset 8
 2800              		.cfi_offset 4, -8
 2801              		.cfi_offset 14, -4
 2802 000e 0446     		mov	r4, r0
1680:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 2803              		.loc 1 1680 0
 2804 0010 806A     		ldr	r0, [r0, #40]
 2805              	.LVL247:
 2806 0012 FFF7FEFF 		bl	HAL_DMA_Abort
 2807              	.LVL248:
 2808 0016 20B1     		cbz	r0, .L244
1683:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
 2809              		.loc 1 1683 0
 2810 0018 FF23     		movs	r3, #255
 2811 001a 84F84C30 		strb	r3, [r4, #76]
 2812              	.LVL249:
1684:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 2813              		.loc 1 1684 0
ARM GAS  /tmp/ccTJyLFK.s 			page 108


 2814 001e 0120     		movs	r0, #1
 2815 0020 10BD     		pop	{r4, pc}
 2816              	.LVL250:
 2817              	.L244:
1689:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 2818              		.loc 1 1689 0
 2819 0022 2046     		mov	r0, r4
 2820 0024 FFF7FEFF 		bl	DFSDM_RegConvStop
 2821              	.LVL251:
1665:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2822              		.loc 1 1665 0
 2823 0028 0020     		movs	r0, #0
 2824 002a 10BD     		pop	{r4, pc}
 2825              	.LVL252:
 2826              	.L245:
 2827              	.LCFI52:
 2828              		.cfi_def_cfa_offset 0
 2829              		.cfi_restore 4
 2830              		.cfi_restore 14
1675:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2831              		.loc 1 1675 0
 2832 002c 0120     		movs	r0, #1
 2833              	.LVL253:
 2834 002e 7047     		bx	lr
 2835              		.cfi_endproc
 2836              	.LFE168:
 2838              		.section	.text.HAL_DFSDM_FilterGetRegularValue,"ax",%progbits
 2839              		.align	2
 2840              		.global	HAL_DFSDM_FilterGetRegularValue
 2841              		.thumb
 2842              		.thumb_func
 2844              	HAL_DFSDM_FilterGetRegularValue:
 2845              	.LFB169:
1704:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t reg = 0;
 2846              		.loc 1 1704 0
 2847              		.cfi_startproc
 2848              		@ args = 0, pretend = 0, frame = 0
 2849              		@ frame_needed = 0, uses_anonymous_args = 0
 2850              		@ link register save eliminated.
 2851              	.LVL254:
1713:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 2852              		.loc 1 1713 0
 2853 0000 0368     		ldr	r3, [r0]
 2854 0002 D869     		ldr	r0, [r3, #28]
 2855              	.LVL255:
1716:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   value = ((int32_t)(reg & DFSDM_FLTRDATAR_RDATA) >> DFSDM_FLTRDATAR_RDATA_Pos);
 2856              		.loc 1 1716 0
 2857 0004 00F00703 		and	r3, r0, #7
 2858 0008 0B60     		str	r3, [r1]
 2859              	.LVL256:
1721:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2860              		.loc 1 1721 0
 2861 000a 0012     		asrs	r0, r0, #8
 2862              	.LVL257:
 2863 000c 7047     		bx	lr
 2864              		.cfi_endproc
 2865              	.LFE169:
ARM GAS  /tmp/ccTJyLFK.s 			page 109


 2867 000e 00BF     		.section	.text.HAL_DFSDM_FilterInjectedStart,"ax",%progbits
 2868              		.align	2
 2869              		.global	HAL_DFSDM_FilterInjectedStart
 2870              		.thumb
 2871              		.thumb_func
 2873              	HAL_DFSDM_FilterInjectedStart:
 2874              	.LFB170:
1731:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2875              		.loc 1 1731 0
 2876              		.cfi_startproc
 2877              		@ args = 0, pretend = 0, frame = 0
 2878              		@ frame_needed = 0, uses_anonymous_args = 0
 2879              	.LVL258:
 2880 0000 08B5     		push	{r3, lr}
 2881              	.LCFI53:
 2882              		.cfi_def_cfa_offset 8
 2883              		.cfi_offset 3, -8
 2884              		.cfi_offset 14, -4
 2885              	.LVL259:
1738:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG))
 2886              		.loc 1 1738 0
 2887 0002 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 2888 0006 013B     		subs	r3, r3, #1
 2889 0008 DBB2     		uxtb	r3, r3
 2890 000a 012B     		cmp	r3, #1
 2891 000c 03D8     		bhi	.L251
1742:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2892              		.loc 1 1742 0
 2893 000e FFF7FEFF 		bl	DFSDM_InjConvStart
 2894              	.LVL260:
1732:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2895              		.loc 1 1732 0
 2896 0012 0020     		movs	r0, #0
 2897 0014 08BD     		pop	{r3, pc}
 2898              	.LVL261:
 2899              	.L251:
1746:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2900              		.loc 1 1746 0
 2901 0016 0120     		movs	r0, #1
 2902              	.LVL262:
1750:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2903              		.loc 1 1750 0
 2904 0018 08BD     		pop	{r3, pc}
 2905              		.cfi_endproc
 2906              	.LFE170:
 2908 001a 00BF     		.section	.text.HAL_DFSDM_FilterInjectedStop,"ax",%progbits
 2909              		.align	2
 2910              		.global	HAL_DFSDM_FilterInjectedStop
 2911              		.thumb
 2912              		.thumb_func
 2914              	HAL_DFSDM_FilterInjectedStop:
 2915              	.LFB172:
1831:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2916              		.loc 1 1831 0
 2917              		.cfi_startproc
 2918              		@ args = 0, pretend = 0, frame = 0
 2919              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccTJyLFK.s 			page 110


 2920              	.LVL263:
 2921 0000 08B5     		push	{r3, lr}
 2922              	.LCFI54:
 2923              		.cfi_def_cfa_offset 8
 2924              		.cfi_offset 3, -8
 2925              		.cfi_offset 14, -4
 2926              	.LVL264:
1838:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 2927              		.loc 1 1838 0
 2928 0002 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 2929 0006 033B     		subs	r3, r3, #3
 2930 0008 DBB2     		uxtb	r3, r3
 2931 000a 012B     		cmp	r3, #1
 2932 000c 03D8     		bhi	.L255
1847:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2933              		.loc 1 1847 0
 2934 000e FFF7FEFF 		bl	DFSDM_InjConvStop
 2935              	.LVL265:
1832:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2936              		.loc 1 1832 0
 2937 0012 0020     		movs	r0, #0
 2938 0014 08BD     		pop	{r3, pc}
 2939              	.LVL266:
 2940              	.L255:
1842:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2941              		.loc 1 1842 0
 2942 0016 0120     		movs	r0, #1
 2943              	.LVL267:
1851:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2944              		.loc 1 1851 0
 2945 0018 08BD     		pop	{r3, pc}
 2946              		.cfi_endproc
 2947              	.LFE172:
 2949 001a 00BF     		.section	.text.HAL_DFSDM_FilterInjectedStart_IT,"ax",%progbits
 2950              		.align	2
 2951              		.global	HAL_DFSDM_FilterInjectedStart_IT
 2952              		.thumb
 2953              		.thumb_func
 2955              	HAL_DFSDM_FilterInjectedStart_IT:
 2956              	.LFB173:
1861:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 2957              		.loc 1 1861 0
 2958              		.cfi_startproc
 2959              		@ args = 0, pretend = 0, frame = 0
 2960              		@ frame_needed = 0, uses_anonymous_args = 0
 2961              	.LVL268:
 2962 0000 08B5     		push	{r3, lr}
 2963              	.LCFI55:
 2964              		.cfi_def_cfa_offset 8
 2965              		.cfi_offset 3, -8
 2966              		.cfi_offset 14, -4
 2967              	.LVL269:
1868:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG))
 2968              		.loc 1 1868 0
 2969 0002 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 2970 0006 013B     		subs	r3, r3, #1
 2971 0008 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccTJyLFK.s 			page 111


 2972 000a 012B     		cmp	r3, #1
 2973 000c 08D8     		bhi	.L259
1872:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 2974              		.loc 1 1872 0
 2975 000e 0268     		ldr	r2, [r0]
 2976 0010 5368     		ldr	r3, [r2, #4]
 2977 0012 43F00503 		orr	r3, r3, #5
 2978 0016 5360     		str	r3, [r2, #4]
1875:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2979              		.loc 1 1875 0
 2980 0018 FFF7FEFF 		bl	DFSDM_InjConvStart
 2981              	.LVL270:
1862:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2982              		.loc 1 1862 0
 2983 001c 0020     		movs	r0, #0
 2984 001e 08BD     		pop	{r3, pc}
 2985              	.LVL271:
 2986              	.L259:
1879:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 2987              		.loc 1 1879 0
 2988 0020 0120     		movs	r0, #1
 2989              	.LVL272:
1883:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 2990              		.loc 1 1883 0
 2991 0022 08BD     		pop	{r3, pc}
 2992              		.cfi_endproc
 2993              	.LFE173:
 2995              		.section	.text.HAL_DFSDM_FilterInjectedStop_IT,"ax",%progbits
 2996              		.align	2
 2997              		.global	HAL_DFSDM_FilterInjectedStop_IT
 2998              		.thumb
 2999              		.thumb_func
 3001              	HAL_DFSDM_FilterInjectedStop_IT:
 3002              	.LFB174:
1892:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3003              		.loc 1 1892 0
 3004              		.cfi_startproc
 3005              		@ args = 0, pretend = 0, frame = 0
 3006              		@ frame_needed = 0, uses_anonymous_args = 0
 3007              	.LVL273:
 3008 0000 08B5     		push	{r3, lr}
 3009              	.LCFI56:
 3010              		.cfi_def_cfa_offset 8
 3011              		.cfi_offset 3, -8
 3012              		.cfi_offset 14, -4
 3013              	.LVL274:
1899:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 3014              		.loc 1 1899 0
 3015 0002 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 3016 0006 033B     		subs	r3, r3, #3
 3017 0008 DBB2     		uxtb	r3, r3
 3018 000a 012B     		cmp	r3, #1
 3019 000c 08D8     		bhi	.L263
1908:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 3020              		.loc 1 1908 0
 3021 000e 0268     		ldr	r2, [r0]
 3022 0010 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/ccTJyLFK.s 			page 112


 3023 0012 23F00503 		bic	r3, r3, #5
 3024 0016 5360     		str	r3, [r2, #4]
1911:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3025              		.loc 1 1911 0
 3026 0018 FFF7FEFF 		bl	DFSDM_InjConvStop
 3027              	.LVL275:
1893:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3028              		.loc 1 1893 0
 3029 001c 0020     		movs	r0, #0
 3030 001e 08BD     		pop	{r3, pc}
 3031              	.LVL276:
 3032              	.L263:
1903:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3033              		.loc 1 1903 0
 3034 0020 0120     		movs	r0, #1
 3035              	.LVL277:
1915:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3036              		.loc 1 1915 0
 3037 0022 08BD     		pop	{r3, pc}
 3038              		.cfi_endproc
 3039              	.LFE174:
 3041              		.section	.text.HAL_DFSDM_FilterInjectedStart_DMA,"ax",%progbits
 3042              		.align	2
 3043              		.global	HAL_DFSDM_FilterInjectedStart_DMA
 3044              		.thumb
 3045              		.thumb_func
 3047              	HAL_DFSDM_FilterInjectedStart_DMA:
 3048              	.LFB175:
1932:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3049              		.loc 1 1932 0
 3050              		.cfi_startproc
 3051              		@ args = 0, pretend = 0, frame = 0
 3052              		@ frame_needed = 0, uses_anonymous_args = 0
 3053              	.LVL278:
1939:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 3054              		.loc 1 1939 0
 3055 0000 002A     		cmp	r2, #0
 3056 0002 18BF     		it	ne
 3057 0004 0029     		cmpne	r1, #0
 3058 0006 3CD0     		beq	.L271
1932:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3059              		.loc 1 1932 0
 3060 0008 38B5     		push	{r3, r4, r5, lr}
 3061              	.LCFI57:
 3062              		.cfi_def_cfa_offset 16
 3063              		.cfi_offset 3, -16
 3064              		.cfi_offset 4, -12
 3065              		.cfi_offset 5, -8
 3066              		.cfi_offset 14, -4
 3067 000a 0C46     		mov	r4, r1
 3068 000c 1346     		mov	r3, r2
1944:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 3069              		.loc 1 1944 0
 3070 000e 0268     		ldr	r2, [r0]
 3071              	.LVL279:
 3072 0010 1268     		ldr	r2, [r2]
 3073 0012 12F0200F 		tst	r2, #32
ARM GAS  /tmp/ccTJyLFK.s 			page 113


 3074 0016 36D0     		beq	.L272
1949:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_NORMAL) && \
 3075              		.loc 1 1949 0
 3076 0018 826B     		ldr	r2, [r0, #56]
 3077 001a 2AB9     		cbnz	r2, .L267
1950:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length > hdfsdm_filter->InjConvRemaining))
 3078              		.loc 1 1950 0 discriminator 1
 3079 001c C16A     		ldr	r1, [r0, #44]
 3080              	.LVL280:
 3081 001e C969     		ldr	r1, [r1, #28]
1949:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_NORMAL) && \
 3082              		.loc 1 1949 0 discriminator 1
 3083 0020 11B9     		cbnz	r1, .L267
1951:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 3084              		.loc 1 1951 0
 3085 0022 816C     		ldr	r1, [r0, #72]
1950:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length > hdfsdm_filter->InjConvRemaining))
 3086              		.loc 1 1950 0
 3087 0024 8B42     		cmp	r3, r1
 3088 0026 30D8     		bhi	.L273
 3089              	.L267:
1955:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_CIRCULAR))
 3090              		.loc 1 1955 0
 3091 0028 22B9     		cbnz	r2, .L268
1956:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 3092              		.loc 1 1956 0 discriminator 1
 3093 002a C26A     		ldr	r2, [r0, #44]
 3094 002c D269     		ldr	r2, [r2, #28]
1955:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_CIRCULAR))
 3095              		.loc 1 1955 0 discriminator 1
 3096 002e B2F5807F 		cmp	r2, #256
 3097 0032 2CD0     		beq	.L274
 3098              	.L268:
1961:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG))
 3099              		.loc 1 1961 0
 3100 0034 90F84C10 		ldrb	r1, [r0, #76]	@ zero_extendqisi2
 3101 0038 0139     		subs	r1, r1, #1
 3102 003a C9B2     		uxtb	r1, r1
 3103 003c 0129     		cmp	r1, #1
 3104 003e 28D8     		bhi	.L275
1965:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaInj->XferErrorCallback = DFSDM_DMAError;
 3105              		.loc 1 1965 0
 3106 0040 C26A     		ldr	r2, [r0, #44]
 3107 0042 1549     		ldr	r1, .L278
 3108 0044 D163     		str	r1, [r2, #60]
1966:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaInj->XferHalfCpltCallback = (hdfsdm_filter->hdmaInj->Init.Mode == DMA_CIRCUL
 3109              		.loc 1 1966 0
 3110 0046 C26A     		ldr	r2, [r0, #44]
 3111 0048 1449     		ldr	r1, .L278+4
 3112 004a D164     		str	r1, [r2, #76]
1967:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMAInjectedHalfConvCplt : NULL;
 3113              		.loc 1 1967 0
 3114 004c C16A     		ldr	r1, [r0, #44]
 3115 004e CA69     		ldr	r2, [r1, #28]
1968:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 3116              		.loc 1 1968 0
 3117 0050 B2F5807F 		cmp	r2, #256
ARM GAS  /tmp/ccTJyLFK.s 			page 114


 3118 0054 01D1     		bne	.L276
 3119 0056 124D     		ldr	r5, .L278+8
 3120 0058 00E0     		b	.L269
 3121              	.L276:
 3122 005a 0025     		movs	r5, #0
 3123              	.L269:
 3124 005c 2246     		mov	r2, r4
 3125 005e 0446     		mov	r4, r0
 3126              	.LVL281:
1967:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMAInjectedHalfConvCplt : NULL;
 3127              		.loc 1 1967 0
 3128 0060 0D64     		str	r5, [r1, #64]
1971:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                         (uint32_t) pData, Length) != HAL_OK)
 3129              		.loc 1 1971 0
 3130 0062 0168     		ldr	r1, [r0]
 3131 0064 1831     		adds	r1, r1, #24
 3132 0066 C06A     		ldr	r0, [r0, #44]
 3133              	.LVL282:
 3134 0068 FFF7FEFF 		bl	HAL_DMA_Start_IT
 3135              	.LVL283:
 3136 006c 20B1     		cbz	r0, .L270
1975:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
 3137              		.loc 1 1975 0
 3138 006e FF23     		movs	r3, #255
 3139 0070 84F84C30 		strb	r3, [r4, #76]
 3140              	.LVL284:
1976:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 3141              		.loc 1 1976 0
 3142 0074 0120     		movs	r0, #1
 3143 0076 38BD     		pop	{r3, r4, r5, pc}
 3144              	.LVL285:
 3145              	.L270:
1981:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 3146              		.loc 1 1981 0
 3147 0078 2046     		mov	r0, r4
 3148 007a FFF7FEFF 		bl	DFSDM_InjConvStart
 3149              	.LVL286:
1933:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3150              		.loc 1 1933 0
 3151 007e 0020     		movs	r0, #0
 3152 0080 38BD     		pop	{r3, r4, r5, pc}
 3153              	.LVL287:
 3154              	.L271:
 3155              	.LCFI58:
 3156              		.cfi_def_cfa_offset 0
 3157              		.cfi_restore 3
 3158              		.cfi_restore 4
 3159              		.cfi_restore 5
 3160              		.cfi_restore 14
1941:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3161              		.loc 1 1941 0
 3162 0082 0120     		movs	r0, #1
 3163              	.LVL288:
1990:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3164              		.loc 1 1990 0
 3165 0084 7047     		bx	lr
 3166              	.LVL289:
ARM GAS  /tmp/ccTJyLFK.s 			page 115


 3167              	.L272:
 3168              	.LCFI59:
 3169              		.cfi_def_cfa_offset 16
 3170              		.cfi_offset 3, -16
 3171              		.cfi_offset 4, -12
 3172              		.cfi_offset 5, -8
 3173              		.cfi_offset 14, -4
1946:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3174              		.loc 1 1946 0
 3175 0086 0120     		movs	r0, #1
 3176              	.LVL290:
 3177 0088 38BD     		pop	{r3, r4, r5, pc}
 3178              	.LVL291:
 3179              	.L273:
1953:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3180              		.loc 1 1953 0
 3181 008a 0120     		movs	r0, #1
 3182              	.LVL292:
 3183 008c 38BD     		pop	{r3, r4, r5, pc}
 3184              	.LVL293:
 3185              	.L274:
1958:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3186              		.loc 1 1958 0
 3187 008e 0120     		movs	r0, #1
 3188              	.LVL294:
 3189 0090 38BD     		pop	{r3, r4, r5, pc}
 3190              	.LVL295:
 3191              	.L275:
1986:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3192              		.loc 1 1986 0
 3193 0092 0120     		movs	r0, #1
 3194              	.LVL296:
1990:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3195              		.loc 1 1990 0
 3196 0094 38BD     		pop	{r3, r4, r5, pc}
 3197              	.LVL297:
 3198              	.L279:
 3199 0096 00BF     		.align	2
 3200              	.L278:
 3201 0098 00000000 		.word	DFSDM_DMAInjectedConvCplt
 3202 009c 00000000 		.word	DFSDM_DMAError
 3203 00a0 00000000 		.word	DFSDM_DMAInjectedHalfConvCplt
 3204              		.cfi_endproc
 3205              	.LFE175:
 3207              		.section	.text.HAL_DFSDM_FilterInjectedMsbStart_DMA,"ax",%progbits
 3208              		.align	2
 3209              		.global	HAL_DFSDM_FilterInjectedMsbStart_DMA
 3210              		.thumb
 3211              		.thumb_func
 3213              	HAL_DFSDM_FilterInjectedMsbStart_DMA:
 3214              	.LFB176:
2007:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3215              		.loc 1 2007 0
 3216              		.cfi_startproc
 3217              		@ args = 0, pretend = 0, frame = 0
 3218              		@ frame_needed = 0, uses_anonymous_args = 0
 3219              	.LVL298:
ARM GAS  /tmp/ccTJyLFK.s 			page 116


2014:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 3220              		.loc 1 2014 0
 3221 0000 002A     		cmp	r2, #0
 3222 0002 18BF     		it	ne
 3223 0004 0029     		cmpne	r1, #0
 3224 0006 3CD0     		beq	.L286
2007:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3225              		.loc 1 2007 0
 3226 0008 38B5     		push	{r3, r4, r5, lr}
 3227              	.LCFI60:
 3228              		.cfi_def_cfa_offset 16
 3229              		.cfi_offset 3, -16
 3230              		.cfi_offset 4, -12
 3231              		.cfi_offset 5, -8
 3232              		.cfi_offset 14, -4
 3233 000a 0C46     		mov	r4, r1
 3234 000c 1346     		mov	r3, r2
2019:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 3235              		.loc 1 2019 0
 3236 000e 0268     		ldr	r2, [r0]
 3237              	.LVL299:
 3238 0010 1268     		ldr	r2, [r2]
 3239 0012 12F0200F 		tst	r2, #32
 3240 0016 36D0     		beq	.L287
2024:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_NORMAL) && \
 3241              		.loc 1 2024 0
 3242 0018 826B     		ldr	r2, [r0, #56]
 3243 001a 2AB9     		cbnz	r2, .L282
2025:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length > hdfsdm_filter->InjConvRemaining))
 3244              		.loc 1 2025 0 discriminator 1
 3245 001c C16A     		ldr	r1, [r0, #44]
 3246              	.LVL300:
 3247 001e C969     		ldr	r1, [r1, #28]
2024:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_NORMAL) && \
 3248              		.loc 1 2024 0 discriminator 1
 3249 0020 11B9     		cbnz	r1, .L282
2026:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 3250              		.loc 1 2026 0
 3251 0022 816C     		ldr	r1, [r0, #72]
2025:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (Length > hdfsdm_filter->InjConvRemaining))
 3252              		.loc 1 2025 0
 3253 0024 8B42     		cmp	r3, r1
 3254 0026 30D8     		bhi	.L288
 3255              	.L282:
2030:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_CIRCULAR))
 3256              		.loc 1 2030 0
 3257 0028 22B9     		cbnz	r2, .L283
2031:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 3258              		.loc 1 2031 0 discriminator 1
 3259 002a C26A     		ldr	r2, [r0, #44]
 3260 002c D269     		ldr	r2, [r2, #28]
2030:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->hdmaInj->Init.Mode == DMA_CIRCULAR))
 3261              		.loc 1 2030 0 discriminator 1
 3262 002e B2F5807F 		cmp	r2, #256
 3263 0032 2CD0     		beq	.L289
 3264              	.L283:
2036:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG))
ARM GAS  /tmp/ccTJyLFK.s 			page 117


 3265              		.loc 1 2036 0
 3266 0034 90F84C10 		ldrb	r1, [r0, #76]	@ zero_extendqisi2
 3267 0038 0139     		subs	r1, r1, #1
 3268 003a C9B2     		uxtb	r1, r1
 3269 003c 0129     		cmp	r1, #1
 3270 003e 28D8     		bhi	.L290
2040:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaInj->XferErrorCallback = DFSDM_DMAError;
 3271              		.loc 1 2040 0
 3272 0040 C26A     		ldr	r2, [r0, #44]
 3273 0042 1549     		ldr	r1, .L293
 3274 0044 D163     		str	r1, [r2, #60]
2041:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->hdmaInj->XferHalfCpltCallback = (hdfsdm_filter->hdmaInj->Init.Mode == DMA_CIRCUL
 3275              		.loc 1 2041 0
 3276 0046 C26A     		ldr	r2, [r0, #44]
 3277 0048 1449     		ldr	r1, .L293+4
 3278 004a D164     		str	r1, [r2, #76]
2042:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMAInjectedHalfConvCplt : NULL;
 3279              		.loc 1 2042 0
 3280 004c C16A     		ldr	r1, [r0, #44]
 3281 004e CA69     		ldr	r2, [r1, #28]
2043:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 3282              		.loc 1 2043 0
 3283 0050 B2F5807F 		cmp	r2, #256
 3284 0054 01D1     		bne	.L291
 3285 0056 124D     		ldr	r5, .L293+8
 3286 0058 00E0     		b	.L284
 3287              	.L291:
 3288 005a 0025     		movs	r5, #0
 3289              	.L284:
 3290 005c 2246     		mov	r2, r4
 3291 005e 0446     		mov	r4, r0
 3292              	.LVL301:
2042:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                                    DFSDM_DMAInjectedHalfConvCplt : NULL;
 3293              		.loc 1 2042 0
 3294 0060 0D64     		str	r5, [r1, #64]
2046:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                         (uint32_t) pData, Length) != HAL_OK)
 3295              		.loc 1 2046 0
 3296 0062 0168     		ldr	r1, [r0]
 3297 0064 1A31     		adds	r1, r1, #26
 3298 0066 C06A     		ldr	r0, [r0, #44]
 3299              	.LVL302:
 3300 0068 FFF7FEFF 		bl	HAL_DMA_Start_IT
 3301              	.LVL303:
 3302 006c 20B1     		cbz	r0, .L285
2050:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
 3303              		.loc 1 2050 0
 3304 006e FF23     		movs	r3, #255
 3305 0070 84F84C30 		strb	r3, [r4, #76]
 3306              	.LVL304:
2051:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 3307              		.loc 1 2051 0
 3308 0074 0120     		movs	r0, #1
 3309 0076 38BD     		pop	{r3, r4, r5, pc}
 3310              	.LVL305:
 3311              	.L285:
2056:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 3312              		.loc 1 2056 0
ARM GAS  /tmp/ccTJyLFK.s 			page 118


 3313 0078 2046     		mov	r0, r4
 3314 007a FFF7FEFF 		bl	DFSDM_InjConvStart
 3315              	.LVL306:
2008:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3316              		.loc 1 2008 0
 3317 007e 0020     		movs	r0, #0
 3318 0080 38BD     		pop	{r3, r4, r5, pc}
 3319              	.LVL307:
 3320              	.L286:
 3321              	.LCFI61:
 3322              		.cfi_def_cfa_offset 0
 3323              		.cfi_restore 3
 3324              		.cfi_restore 4
 3325              		.cfi_restore 5
 3326              		.cfi_restore 14
2016:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3327              		.loc 1 2016 0
 3328 0082 0120     		movs	r0, #1
 3329              	.LVL308:
2065:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3330              		.loc 1 2065 0
 3331 0084 7047     		bx	lr
 3332              	.LVL309:
 3333              	.L287:
 3334              	.LCFI62:
 3335              		.cfi_def_cfa_offset 16
 3336              		.cfi_offset 3, -16
 3337              		.cfi_offset 4, -12
 3338              		.cfi_offset 5, -8
 3339              		.cfi_offset 14, -4
2021:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3340              		.loc 1 2021 0
 3341 0086 0120     		movs	r0, #1
 3342              	.LVL310:
 3343 0088 38BD     		pop	{r3, r4, r5, pc}
 3344              	.LVL311:
 3345              	.L288:
2028:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3346              		.loc 1 2028 0
 3347 008a 0120     		movs	r0, #1
 3348              	.LVL312:
 3349 008c 38BD     		pop	{r3, r4, r5, pc}
 3350              	.LVL313:
 3351              	.L289:
2033:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3352              		.loc 1 2033 0
 3353 008e 0120     		movs	r0, #1
 3354              	.LVL314:
 3355 0090 38BD     		pop	{r3, r4, r5, pc}
 3356              	.LVL315:
 3357              	.L290:
2061:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3358              		.loc 1 2061 0
 3359 0092 0120     		movs	r0, #1
 3360              	.LVL316:
2065:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3361              		.loc 1 2065 0
ARM GAS  /tmp/ccTJyLFK.s 			page 119


 3362 0094 38BD     		pop	{r3, r4, r5, pc}
 3363              	.LVL317:
 3364              	.L294:
 3365 0096 00BF     		.align	2
 3366              	.L293:
 3367 0098 00000000 		.word	DFSDM_DMAInjectedConvCplt
 3368 009c 00000000 		.word	DFSDM_DMAError
 3369 00a0 00000000 		.word	DFSDM_DMAInjectedHalfConvCplt
 3370              		.cfi_endproc
 3371              	.LFE176:
 3373              		.section	.text.HAL_DFSDM_FilterInjectedStop_DMA,"ax",%progbits
 3374              		.align	2
 3375              		.global	HAL_DFSDM_FilterInjectedStop_DMA
 3376              		.thumb
 3377              		.thumb_func
 3379              	HAL_DFSDM_FilterInjectedStop_DMA:
 3380              	.LFB177:
2074:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3381              		.loc 1 2074 0
 3382              		.cfi_startproc
 3383              		@ args = 0, pretend = 0, frame = 0
 3384              		@ frame_needed = 0, uses_anonymous_args = 0
 3385              	.LVL318:
2081:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 3386              		.loc 1 2081 0
 3387 0000 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 3388 0004 033B     		subs	r3, r3, #3
 3389 0006 DBB2     		uxtb	r3, r3
 3390 0008 012B     		cmp	r3, #1
 3391 000a 0FD8     		bhi	.L298
2074:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3392              		.loc 1 2074 0
 3393 000c 10B5     		push	{r4, lr}
 3394              	.LCFI63:
 3395              		.cfi_def_cfa_offset 8
 3396              		.cfi_offset 4, -8
 3397              		.cfi_offset 14, -4
 3398 000e 0446     		mov	r4, r0
2090:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 3399              		.loc 1 2090 0
 3400 0010 C06A     		ldr	r0, [r0, #44]
 3401              	.LVL319:
 3402 0012 FFF7FEFF 		bl	HAL_DMA_Abort
 3403              	.LVL320:
 3404 0016 20B1     		cbz	r0, .L297
2093:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       status = HAL_ERROR;
 3405              		.loc 1 2093 0
 3406 0018 FF23     		movs	r3, #255
 3407 001a 84F84C30 		strb	r3, [r4, #76]
 3408              	.LVL321:
2094:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 3409              		.loc 1 2094 0
 3410 001e 0120     		movs	r0, #1
 3411 0020 10BD     		pop	{r4, pc}
 3412              	.LVL322:
 3413              	.L297:
2099:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
ARM GAS  /tmp/ccTJyLFK.s 			page 120


 3414              		.loc 1 2099 0
 3415 0022 2046     		mov	r0, r4
 3416 0024 FFF7FEFF 		bl	DFSDM_InjConvStop
 3417              	.LVL323:
2075:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3418              		.loc 1 2075 0
 3419 0028 0020     		movs	r0, #0
 3420 002a 10BD     		pop	{r4, pc}
 3421              	.LVL324:
 3422              	.L298:
 3423              	.LCFI64:
 3424              		.cfi_def_cfa_offset 0
 3425              		.cfi_restore 4
 3426              		.cfi_restore 14
2085:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3427              		.loc 1 2085 0
 3428 002c 0120     		movs	r0, #1
 3429              	.LVL325:
 3430 002e 7047     		bx	lr
 3431              		.cfi_endproc
 3432              	.LFE177:
 3434              		.section	.text.HAL_DFSDM_FilterGetInjectedValue,"ax",%progbits
 3435              		.align	2
 3436              		.global	HAL_DFSDM_FilterGetInjectedValue
 3437              		.thumb
 3438              		.thumb_func
 3440              	HAL_DFSDM_FilterGetInjectedValue:
 3441              	.LFB178:
2114:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t reg = 0;
 3442              		.loc 1 2114 0
 3443              		.cfi_startproc
 3444              		@ args = 0, pretend = 0, frame = 0
 3445              		@ frame_needed = 0, uses_anonymous_args = 0
 3446              		@ link register save eliminated.
 3447              	.LVL326:
2123:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 3448              		.loc 1 2123 0
 3449 0000 0368     		ldr	r3, [r0]
 3450 0002 9869     		ldr	r0, [r3, #24]
 3451              	.LVL327:
2126:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   value = ((int32_t)(reg & DFSDM_FLTJDATAR_JDATA) >> DFSDM_FLTJDATAR_JDATA_Pos);
 3452              		.loc 1 2126 0
 3453 0004 00F00703 		and	r3, r0, #7
 3454 0008 0B60     		str	r3, [r1]
 3455              	.LVL328:
2131:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3456              		.loc 1 2131 0
 3457 000a 0012     		asrs	r0, r0, #8
 3458              	.LVL329:
 3459 000c 7047     		bx	lr
 3460              		.cfi_endproc
 3461              	.LFE178:
 3463 000e 00BF     		.section	.text.HAL_DFSDM_FilterAwdStart_IT,"ax",%progbits
 3464              		.align	2
 3465              		.global	HAL_DFSDM_FilterAwdStart_IT
 3466              		.thumb
 3467              		.thumb_func
ARM GAS  /tmp/ccTJyLFK.s 			page 121


 3469              	HAL_DFSDM_FilterAwdStart_IT:
 3470              	.LFB179:
2141:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3471              		.loc 1 2141 0
 3472              		.cfi_startproc
 3473              		@ args = 0, pretend = 0, frame = 0
 3474              		@ frame_needed = 0, uses_anonymous_args = 0
 3475              		@ link register save eliminated.
 3476              	.LVL330:
2154:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
 3477              		.loc 1 2154 0
 3478 0000 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 3479 0004 013B     		subs	r3, r3, #1
 3480 0006 DBB2     		uxtb	r3, r3
 3481 0008 FD2B     		cmp	r3, #253
 3482 000a 33D8     		bhi	.L304
2141:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3483              		.loc 1 2141 0
 3484 000c 30B4     		push	{r4, r5}
 3485              	.LCFI65:
 3486              		.cfi_def_cfa_offset 8
 3487              		.cfi_offset 4, -8
 3488              		.cfi_offset 5, -4
2163:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR1 |= awdParam->DataSource;
 3489              		.loc 1 2163 0
 3490 000e 0268     		ldr	r2, [r0]
 3491 0010 1368     		ldr	r3, [r2]
 3492 0012 23F08043 		bic	r3, r3, #1073741824
 3493 0016 1360     		str	r3, [r2]
2164:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3494              		.loc 1 2164 0
 3495 0018 0268     		ldr	r2, [r0]
 3496 001a 1468     		ldr	r4, [r2]
 3497 001c 0B68     		ldr	r3, [r1]
 3498 001e 2343     		orrs	r3, r3, r4
 3499 0020 1360     		str	r3, [r2]
2167:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWHTR |= (((uint32_t) awdParam->HighThreshold << DFSDM_FLTAWHTR_AWH
 3500              		.loc 1 2167 0
 3501 0022 0268     		ldr	r2, [r0]
 3502 0024 136A     		ldr	r3, [r2, #32]
 3503 0026 03F0F003 		and	r3, r3, #240
 3504 002a 1362     		str	r3, [r2, #32]
2168:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         awdParam->HighBreakSignal);
 3505              		.loc 1 2168 0
 3506 002c 0268     		ldr	r2, [r0]
 3507 002e 146A     		ldr	r4, [r2, #32]
 3508 0030 8D68     		ldr	r5, [r1, #8]
2169:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWLTR &= ~(DFSDM_FLTAWLTR_AWLT | DFSDM_FLTAWLTR_BKAWL);
 3509              		.loc 1 2169 0
 3510 0032 0B69     		ldr	r3, [r1, #16]
2168:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         awdParam->HighBreakSignal);
 3511              		.loc 1 2168 0
 3512 0034 43EA0523 		orr	r3, r3, r5, lsl #8
 3513 0038 2343     		orrs	r3, r3, r4
 3514 003a 1362     		str	r3, [r2, #32]
2170:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWLTR |= (((uint32_t) awdParam->LowThreshold << DFSDM_FLTAWLTR_AWLT
 3515              		.loc 1 2170 0
ARM GAS  /tmp/ccTJyLFK.s 			page 122


 3516 003c 0268     		ldr	r2, [r0]
 3517 003e 536A     		ldr	r3, [r2, #36]
 3518 0040 03F0F003 		and	r3, r3, #240
 3519 0044 5362     		str	r3, [r2, #36]
2171:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         awdParam->LowBreakSignal);
 3520              		.loc 1 2171 0
 3521 0046 0268     		ldr	r2, [r0]
 3522 0048 546A     		ldr	r4, [r2, #36]
 3523 004a CD68     		ldr	r5, [r1, #12]
2172:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3524              		.loc 1 2172 0
 3525 004c 4B69     		ldr	r3, [r1, #20]
2171:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         awdParam->LowBreakSignal);
 3526              		.loc 1 2171 0
 3527 004e 43EA0523 		orr	r3, r3, r5, lsl #8
 3528 0052 2343     		orrs	r3, r3, r4
 3529 0054 5362     		str	r3, [r2, #36]
2175:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 |= (((awdParam->Channel & DFSDM_LSB_MASK) << DFSDM_FLTCR2_AWDCH
 3530              		.loc 1 2175 0
 3531 0056 0268     		ldr	r2, [r0]
 3532 0058 5368     		ldr	r3, [r2, #4]
 3533 005a 23F47F03 		bic	r3, r3, #16711680
 3534 005e 5360     		str	r3, [r2, #4]
2176:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         DFSDM_FLTCR2_AWDIE);
 3535              		.loc 1 2176 0
 3536 0060 0268     		ldr	r2, [r0]
 3537 0062 5368     		ldr	r3, [r2, #4]
 3538 0064 4968     		ldr	r1, [r1, #4]
 3539              	.LVL331:
 3540 0066 43EA0143 		orr	r3, r3, r1, lsl #16
 3541 006a 43F01003 		orr	r3, r3, #16
 3542 006e 5360     		str	r3, [r2, #4]
2142:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3543              		.loc 1 2142 0
 3544 0070 0020     		movs	r0, #0
 3545              	.LVL332:
 3546 0072 01E0     		b	.L303
 3547              	.LVL333:
 3548              	.L304:
 3549              	.LCFI66:
 3550              		.cfi_def_cfa_offset 0
 3551              		.cfi_restore 4
 3552              		.cfi_restore 5
2158:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3553              		.loc 1 2158 0
 3554 0074 0120     		movs	r0, #1
 3555              	.LVL334:
 3556 0076 7047     		bx	lr
 3557              	.LVL335:
 3558              	.L303:
 3559              	.LCFI67:
 3560              		.cfi_def_cfa_offset 8
 3561              		.cfi_offset 4, -8
 3562              		.cfi_offset 5, -4
2181:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3563              		.loc 1 2181 0
 3564 0078 30BC     		pop	{r4, r5}
ARM GAS  /tmp/ccTJyLFK.s 			page 123


 3565              	.LCFI68:
 3566              		.cfi_restore 5
 3567              		.cfi_restore 4
 3568              		.cfi_def_cfa_offset 0
 3569 007a 7047     		bx	lr
 3570              		.cfi_endproc
 3571              	.LFE179:
 3573              		.section	.text.HAL_DFSDM_FilterAwdStop_IT,"ax",%progbits
 3574              		.align	2
 3575              		.global	HAL_DFSDM_FilterAwdStop_IT
 3576              		.thumb
 3577              		.thumb_func
 3579              	HAL_DFSDM_FilterAwdStop_IT:
 3580              	.LFB180:
2189:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3581              		.loc 1 2189 0
 3582              		.cfi_startproc
 3583              		@ args = 0, pretend = 0, frame = 0
 3584              		@ frame_needed = 0, uses_anonymous_args = 0
 3585              		@ link register save eliminated.
 3586              	.LVL336:
2196:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
 3587              		.loc 1 2196 0
 3588 0000 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 3589 0004 013B     		subs	r3, r3, #1
 3590 0006 DBB2     		uxtb	r3, r3
 3591 0008 FD2B     		cmp	r3, #253
 3592 000a 19D8     		bhi	.L309
2205:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3593              		.loc 1 2205 0
 3594 000c 0268     		ldr	r2, [r0]
 3595 000e 5168     		ldr	r1, [r2, #4]
 3596 0010 0C4B     		ldr	r3, .L310
 3597 0012 0B40     		ands	r3, r3, r1
 3598 0014 5360     		str	r3, [r2, #4]
2208:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 3599              		.loc 1 2208 0
 3600 0016 0368     		ldr	r3, [r0]
 3601 0018 4FF6FF72 		movw	r2, #65535
 3602 001c DA62     		str	r2, [r3, #44]
2211:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTAWLTR &= ~(DFSDM_FLTAWLTR_AWLT | DFSDM_FLTAWLTR_BKAWL);
 3603              		.loc 1 2211 0
 3604 001e 0268     		ldr	r2, [r0]
 3605 0020 136A     		ldr	r3, [r2, #32]
 3606 0022 03F0F003 		and	r3, r3, #240
 3607 0026 1362     		str	r3, [r2, #32]
2212:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3608              		.loc 1 2212 0
 3609 0028 0268     		ldr	r2, [r0]
 3610 002a 536A     		ldr	r3, [r2, #36]
 3611 002c 03F0F003 		and	r3, r3, #240
 3612 0030 5362     		str	r3, [r2, #36]
2215:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3613              		.loc 1 2215 0
 3614 0032 0268     		ldr	r2, [r0]
 3615 0034 1368     		ldr	r3, [r2]
 3616 0036 23F08043 		bic	r3, r3, #1073741824
ARM GAS  /tmp/ccTJyLFK.s 			page 124


 3617 003a 1360     		str	r3, [r2]
2190:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3618              		.loc 1 2190 0
 3619 003c 0020     		movs	r0, #0
 3620              	.LVL337:
 3621 003e 7047     		bx	lr
 3622              	.LVL338:
 3623              	.L309:
2200:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3624              		.loc 1 2200 0
 3625 0040 0120     		movs	r0, #1
 3626              	.LVL339:
2219:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3627              		.loc 1 2219 0
 3628 0042 7047     		bx	lr
 3629              	.L311:
 3630              		.align	2
 3631              	.L310:
 3632 0044 EFFF00FF 		.word	-16711697
 3633              		.cfi_endproc
 3634              	.LFE180:
 3636              		.section	.text.HAL_DFSDM_FilterExdStart,"ax",%progbits
 3637              		.align	2
 3638              		.global	HAL_DFSDM_FilterExdStart
 3639              		.thumb
 3640              		.thumb_func
 3642              	HAL_DFSDM_FilterExdStart:
 3643              	.LFB181:
2230:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3644              		.loc 1 2230 0
 3645              		.cfi_startproc
 3646              		@ args = 0, pretend = 0, frame = 0
 3647              		@ frame_needed = 0, uses_anonymous_args = 0
 3648              		@ link register save eliminated.
 3649              	.LVL340:
2238:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
 3650              		.loc 1 2238 0
 3651 0000 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 3652 0004 013B     		subs	r3, r3, #1
 3653 0006 DBB2     		uxtb	r3, r3
 3654 0008 FD2B     		cmp	r3, #253
 3655 000a 0DD8     		bhi	.L314
2247:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     hdfsdm_filter->Instance->FLTCR2 |= ((Channel & DFSDM_LSB_MASK) << DFSDM_FLTCR2_EXCH_Pos);
 3656              		.loc 1 2247 0
 3657 000c 0268     		ldr	r2, [r0]
 3658 000e 5368     		ldr	r3, [r2, #4]
 3659 0010 23F47F43 		bic	r3, r3, #65280
 3660 0014 5360     		str	r3, [r2, #4]
2248:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3661              		.loc 1 2248 0
 3662 0016 0268     		ldr	r2, [r0]
 3663 0018 5068     		ldr	r0, [r2, #4]
 3664              	.LVL341:
 3665 001a 044B     		ldr	r3, .L315
 3666 001c 03EA0121 		and	r1, r3, r1, lsl #8
 3667              	.LVL342:
 3668 0020 0143     		orrs	r1, r1, r0
ARM GAS  /tmp/ccTJyLFK.s 			page 125


 3669 0022 5160     		str	r1, [r2, #4]
2231:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3670              		.loc 1 2231 0
 3671 0024 0020     		movs	r0, #0
 3672 0026 7047     		bx	lr
 3673              	.LVL343:
 3674              	.L314:
2242:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3675              		.loc 1 2242 0
 3676 0028 0120     		movs	r0, #1
 3677              	.LVL344:
2252:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3678              		.loc 1 2252 0
 3679 002a 7047     		bx	lr
 3680              	.L316:
 3681              		.align	2
 3682              	.L315:
 3683 002c 00FFFF00 		.word	16776960
 3684              		.cfi_endproc
 3685              	.LFE181:
 3687              		.section	.text.HAL_DFSDM_FilterExdStop,"ax",%progbits
 3688              		.align	2
 3689              		.global	HAL_DFSDM_FilterExdStop
 3690              		.thumb
 3691              		.thumb_func
 3693              	HAL_DFSDM_FilterExdStop:
 3694              	.LFB182:
2260:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3695              		.loc 1 2260 0
 3696              		.cfi_startproc
 3697              		@ args = 0, pretend = 0, frame = 8
 3698              		@ frame_needed = 0, uses_anonymous_args = 0
 3699              		@ link register save eliminated.
 3700              	.LVL345:
2269:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_ERROR))
 3701              		.loc 1 2269 0
 3702 0000 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 3703 0004 013B     		subs	r3, r3, #1
 3704 0006 DBB2     		uxtb	r3, r3
 3705 0008 FD2B     		cmp	r3, #253
 3706 000a 0ED8     		bhi	.L319
2260:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   HAL_StatusTypeDef status = HAL_OK;
 3707              		.loc 1 2260 0
 3708 000c 82B0     		sub	sp, sp, #8
 3709              	.LCFI69:
 3710              		.cfi_def_cfa_offset 8
2278:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3711              		.loc 1 2278 0
 3712 000e 0268     		ldr	r2, [r0]
 3713 0010 5368     		ldr	r3, [r2, #4]
 3714 0012 23F47F43 		bic	r3, r3, #65280
 3715 0016 5360     		str	r3, [r2, #4]
2281:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     reg2 = hdfsdm_filter->Instance->FLTEXMIN;    
 3716              		.loc 1 2281 0
 3717 0018 0368     		ldr	r3, [r0]
 3718 001a 1A6B     		ldr	r2, [r3, #48]
 3719 001c 0192     		str	r2, [sp, #4]
ARM GAS  /tmp/ccTJyLFK.s 			page 126


2282:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     UNUSED(reg1); /* To avoid GCC warning */
 3720              		.loc 1 2282 0
 3721 001e 5B6B     		ldr	r3, [r3, #52]
 3722 0020 0093     		str	r3, [sp]
2283:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     UNUSED(reg2); /* To avoid GCC warning */
 3723              		.loc 1 2283 0
 3724 0022 019B     		ldr	r3, [sp, #4]
2284:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3725              		.loc 1 2284 0
 3726 0024 009B     		ldr	r3, [sp]
2261:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   __IO uint32_t     reg1;
 3727              		.loc 1 2261 0
 3728 0026 0020     		movs	r0, #0
 3729              	.LVL346:
 3730 0028 01E0     		b	.L318
 3731              	.LVL347:
 3732              	.L319:
 3733              	.LCFI70:
 3734              		.cfi_def_cfa_offset 0
2273:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 3735              		.loc 1 2273 0
 3736 002a 0120     		movs	r0, #1
 3737              	.LVL348:
 3738 002c 7047     		bx	lr
 3739              	.L318:
 3740              	.LCFI71:
 3741              		.cfi_def_cfa_offset 8
 3742              	.LVL349:
2288:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3743              		.loc 1 2288 0
 3744 002e 02B0     		add	sp, sp, #8
 3745              	.LCFI72:
 3746              		.cfi_def_cfa_offset 0
 3747              		@ sp needed
 3748 0030 7047     		bx	lr
 3749              		.cfi_endproc
 3750              	.LFE182:
 3752 0032 00BF     		.section	.text.HAL_DFSDM_FilterGetExdMaxValue,"ax",%progbits
 3753              		.align	2
 3754              		.global	HAL_DFSDM_FilterGetExdMaxValue
 3755              		.thumb
 3756              		.thumb_func
 3758              	HAL_DFSDM_FilterGetExdMaxValue:
 3759              	.LFB183:
2299:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t reg = 0;
 3760              		.loc 1 2299 0
 3761              		.cfi_startproc
 3762              		@ args = 0, pretend = 0, frame = 0
 3763              		@ frame_needed = 0, uses_anonymous_args = 0
 3764              		@ link register save eliminated.
 3765              	.LVL350:
2308:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 3766              		.loc 1 2308 0
 3767 0000 0368     		ldr	r3, [r0]
 3768 0002 186B     		ldr	r0, [r3, #48]
 3769              	.LVL351:
2311:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   value = ((int32_t)(reg & DFSDM_FLTEXMAX_EXMAX) >> DFSDM_FLTEXMAX_EXMAX_Pos);
ARM GAS  /tmp/ccTJyLFK.s 			page 127


 3770              		.loc 1 2311 0
 3771 0004 00F00703 		and	r3, r0, #7
 3772 0008 0B60     		str	r3, [r1]
 3773              	.LVL352:
2316:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3774              		.loc 1 2316 0
 3775 000a 0012     		asrs	r0, r0, #8
 3776              	.LVL353:
 3777 000c 7047     		bx	lr
 3778              		.cfi_endproc
 3779              	.LFE183:
 3781 000e 00BF     		.section	.text.HAL_DFSDM_FilterGetExdMinValue,"ax",%progbits
 3782              		.align	2
 3783              		.global	HAL_DFSDM_FilterGetExdMinValue
 3784              		.thumb
 3785              		.thumb_func
 3787              	HAL_DFSDM_FilterGetExdMinValue:
 3788              	.LFB184:
2327:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t reg = 0;
 3789              		.loc 1 2327 0
 3790              		.cfi_startproc
 3791              		@ args = 0, pretend = 0, frame = 0
 3792              		@ frame_needed = 0, uses_anonymous_args = 0
 3793              		@ link register save eliminated.
 3794              	.LVL354:
2336:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
 3795              		.loc 1 2336 0
 3796 0000 0368     		ldr	r3, [r0]
 3797 0002 586B     		ldr	r0, [r3, #52]
 3798              	.LVL355:
2339:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   value = ((int32_t)(reg & DFSDM_FLTEXMIN_EXMIN) >> DFSDM_FLTEXMIN_EXMIN_Pos);
 3799              		.loc 1 2339 0
 3800 0004 00F00703 		and	r3, r0, #7
 3801 0008 0B60     		str	r3, [r1]
 3802              	.LVL356:
2344:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3803              		.loc 1 2344 0
 3804 000a 0012     		asrs	r0, r0, #8
 3805              	.LVL357:
 3806 000c 7047     		bx	lr
 3807              		.cfi_endproc
 3808              	.LFE184:
 3810 000e 00BF     		.section	.text.HAL_DFSDM_FilterGetConvTimeValue,"ax",%progbits
 3811              		.align	2
 3812              		.global	HAL_DFSDM_FilterGetConvTimeValue
 3813              		.thumb
 3814              		.thumb_func
 3816              	HAL_DFSDM_FilterGetConvTimeValue:
 3817              	.LFB185:
2353:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t reg = 0;
 3818              		.loc 1 2353 0
 3819              		.cfi_startproc
 3820              		@ args = 0, pretend = 0, frame = 0
 3821              		@ frame_needed = 0, uses_anonymous_args = 0
 3822              		@ link register save eliminated.
 3823              	.LVL358:
2361:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   
ARM GAS  /tmp/ccTJyLFK.s 			page 128


 3824              		.loc 1 2361 0
 3825 0000 0368     		ldr	r3, [r0]
 3826 0002 986B     		ldr	r0, [r3, #56]
 3827              	.LVL359:
2368:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 3828              		.loc 1 2368 0
 3829 0004 0009     		lsrs	r0, r0, #4
 3830              	.LVL360:
 3831 0006 7047     		bx	lr
 3832              		.cfi_endproc
 3833              	.LFE185:
 3835              		.section	.text.HAL_DFSDM_FilterRegConvCpltCallback,"ax",%progbits
 3836              		.align	2
 3837              		.weak	HAL_DFSDM_FilterRegConvCpltCallback
 3838              		.thumb
 3839              		.thumb_func
 3841              	HAL_DFSDM_FilterRegConvCpltCallback:
 3842              	.LFB187:
2537:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 3843              		.loc 1 2537 0
 3844              		.cfi_startproc
 3845              		@ args = 0, pretend = 0, frame = 0
 3846              		@ frame_needed = 0, uses_anonymous_args = 0
 3847              		@ link register save eliminated.
 3848              	.LVL361:
 3849 0000 7047     		bx	lr
 3850              		.cfi_endproc
 3851              	.LFE187:
 3853 0002 00BF     		.section	.text.DFSDM_DMARegularConvCplt,"ax",%progbits
 3854              		.align	2
 3855              		.thumb
 3856              		.thumb_func
 3858              	DFSDM_DMARegularConvCplt:
 3859              	.LFB196:
2701:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
 3860              		.loc 1 2701 0
 3861              		.cfi_startproc
 3862              		@ args = 0, pretend = 0, frame = 0
 3863              		@ frame_needed = 0, uses_anonymous_args = 0
 3864              	.LVL362:
2701:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
 3865              		.loc 1 2701 0
 3866 0000 08B5     		push	{r3, lr}
 3867              	.LCFI73:
 3868              		.cfi_def_cfa_offset 8
 3869              		.cfi_offset 3, -8
 3870              		.cfi_offset 14, -4
 3871              	.LVL363:
2706:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 3872              		.loc 1 2706 0
 3873 0002 806B     		ldr	r0, [r0, #56]
 3874              	.LVL364:
 3875 0004 FFF7FEFF 		bl	HAL_DFSDM_FilterRegConvCpltCallback
 3876              	.LVL365:
 3877 0008 08BD     		pop	{r3, pc}
 3878              		.cfi_endproc
 3879              	.LFE196:
ARM GAS  /tmp/ccTJyLFK.s 			page 129


 3881 000a 00BF     		.section	.text.HAL_DFSDM_FilterRegConvHalfCpltCallback,"ax",%progbits
 3882              		.align	2
 3883              		.weak	HAL_DFSDM_FilterRegConvHalfCpltCallback
 3884              		.thumb
 3885              		.thumb_func
 3887              	HAL_DFSDM_FilterRegConvHalfCpltCallback:
 3888              	.LFB188:
2552:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 3889              		.loc 1 2552 0
 3890              		.cfi_startproc
 3891              		@ args = 0, pretend = 0, frame = 0
 3892              		@ frame_needed = 0, uses_anonymous_args = 0
 3893              		@ link register save eliminated.
 3894              	.LVL366:
 3895 0000 7047     		bx	lr
 3896              		.cfi_endproc
 3897              	.LFE188:
 3899 0002 00BF     		.section	.text.DFSDM_DMARegularHalfConvCplt,"ax",%progbits
 3900              		.align	2
 3901              		.thumb
 3902              		.thumb_func
 3904              	DFSDM_DMARegularHalfConvCplt:
 3905              	.LFB195:
2687:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
 3906              		.loc 1 2687 0
 3907              		.cfi_startproc
 3908              		@ args = 0, pretend = 0, frame = 0
 3909              		@ frame_needed = 0, uses_anonymous_args = 0
 3910              	.LVL367:
2687:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
 3911              		.loc 1 2687 0
 3912 0000 08B5     		push	{r3, lr}
 3913              	.LCFI74:
 3914              		.cfi_def_cfa_offset 8
 3915              		.cfi_offset 3, -8
 3916              		.cfi_offset 14, -4
 3917              	.LVL368:
2692:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 3918              		.loc 1 2692 0
 3919 0002 806B     		ldr	r0, [r0, #56]
 3920              	.LVL369:
 3921 0004 FFF7FEFF 		bl	HAL_DFSDM_FilterRegConvHalfCpltCallback
 3922              	.LVL370:
 3923 0008 08BD     		pop	{r3, pc}
 3924              		.cfi_endproc
 3925              	.LFE195:
 3927 000a 00BF     		.section	.text.HAL_DFSDM_FilterInjConvCpltCallback,"ax",%progbits
 3928              		.align	2
 3929              		.weak	HAL_DFSDM_FilterInjConvCpltCallback
 3930              		.thumb
 3931              		.thumb_func
 3933              	HAL_DFSDM_FilterInjConvCpltCallback:
 3934              	.LFB189:
2569:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 3935              		.loc 1 2569 0
 3936              		.cfi_startproc
 3937              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccTJyLFK.s 			page 130


 3938              		@ frame_needed = 0, uses_anonymous_args = 0
 3939              		@ link register save eliminated.
 3940              	.LVL371:
 3941 0000 7047     		bx	lr
 3942              		.cfi_endproc
 3943              	.LFE189:
 3945 0002 00BF     		.section	.text.DFSDM_DMAInjectedConvCplt,"ax",%progbits
 3946              		.align	2
 3947              		.thumb
 3948              		.thumb_func
 3950              	DFSDM_DMAInjectedConvCplt:
 3951              	.LFB198:
2729:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
 3952              		.loc 1 2729 0
 3953              		.cfi_startproc
 3954              		@ args = 0, pretend = 0, frame = 0
 3955              		@ frame_needed = 0, uses_anonymous_args = 0
 3956              	.LVL372:
2729:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
 3957              		.loc 1 2729 0
 3958 0000 08B5     		push	{r3, lr}
 3959              	.LCFI75:
 3960              		.cfi_def_cfa_offset 8
 3961              		.cfi_offset 3, -8
 3962              		.cfi_offset 14, -4
 3963              	.LVL373:
2734:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 3964              		.loc 1 2734 0
 3965 0002 806B     		ldr	r0, [r0, #56]
 3966              	.LVL374:
 3967 0004 FFF7FEFF 		bl	HAL_DFSDM_FilterInjConvCpltCallback
 3968              	.LVL375:
 3969 0008 08BD     		pop	{r3, pc}
 3970              		.cfi_endproc
 3971              	.LFE198:
 3973 000a 00BF     		.section	.text.HAL_DFSDM_FilterInjConvHalfCpltCallback,"ax",%progbits
 3974              		.align	2
 3975              		.weak	HAL_DFSDM_FilterInjConvHalfCpltCallback
 3976              		.thumb
 3977              		.thumb_func
 3979              	HAL_DFSDM_FilterInjConvHalfCpltCallback:
 3980              	.LFB190:
2584:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 3981              		.loc 1 2584 0
 3982              		.cfi_startproc
 3983              		@ args = 0, pretend = 0, frame = 0
 3984              		@ frame_needed = 0, uses_anonymous_args = 0
 3985              		@ link register save eliminated.
 3986              	.LVL376:
 3987 0000 7047     		bx	lr
 3988              		.cfi_endproc
 3989              	.LFE190:
 3991 0002 00BF     		.section	.text.DFSDM_DMAInjectedHalfConvCplt,"ax",%progbits
 3992              		.align	2
 3993              		.thumb
 3994              		.thumb_func
 3996              	DFSDM_DMAInjectedHalfConvCplt:
ARM GAS  /tmp/ccTJyLFK.s 			page 131


 3997              	.LFB197:
2715:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
 3998              		.loc 1 2715 0
 3999              		.cfi_startproc
 4000              		@ args = 0, pretend = 0, frame = 0
 4001              		@ frame_needed = 0, uses_anonymous_args = 0
 4002              	.LVL377:
2715:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
 4003              		.loc 1 2715 0
 4004 0000 08B5     		push	{r3, lr}
 4005              	.LCFI76:
 4006              		.cfi_def_cfa_offset 8
 4007              		.cfi_offset 3, -8
 4008              		.cfi_offset 14, -4
 4009              	.LVL378:
2720:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 4010              		.loc 1 2720 0
 4011 0002 806B     		ldr	r0, [r0, #56]
 4012              	.LVL379:
 4013 0004 FFF7FEFF 		bl	HAL_DFSDM_FilterInjConvHalfCpltCallback
 4014              	.LVL380:
 4015 0008 08BD     		pop	{r3, pc}
 4016              		.cfi_endproc
 4017              	.LFE197:
 4019 000a 00BF     		.section	.text.HAL_DFSDM_FilterAwdCallback,"ax",%progbits
 4020              		.align	2
 4021              		.weak	HAL_DFSDM_FilterAwdCallback
 4022              		.thumb
 4023              		.thumb_func
 4025              	HAL_DFSDM_FilterAwdCallback:
 4026              	.LFB191:
2602:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 4027              		.loc 1 2602 0
 4028              		.cfi_startproc
 4029              		@ args = 0, pretend = 0, frame = 0
 4030              		@ frame_needed = 0, uses_anonymous_args = 0
 4031              		@ link register save eliminated.
 4032              	.LVL381:
 4033 0000 7047     		bx	lr
 4034              		.cfi_endproc
 4035              	.LFE191:
 4037 0002 00BF     		.section	.text.HAL_DFSDM_FilterErrorCallback,"ax",%progbits
 4038              		.align	2
 4039              		.weak	HAL_DFSDM_FilterErrorCallback
 4040              		.thumb
 4041              		.thumb_func
 4043              	HAL_DFSDM_FilterErrorCallback:
 4044              	.LFB192:
2619:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Prevent unused argument(s) compilation warning */
 4045              		.loc 1 2619 0
 4046              		.cfi_startproc
 4047              		@ args = 0, pretend = 0, frame = 0
 4048              		@ frame_needed = 0, uses_anonymous_args = 0
 4049              		@ link register save eliminated.
 4050              	.LVL382:
 4051 0000 7047     		bx	lr
 4052              		.cfi_endproc
ARM GAS  /tmp/ccTJyLFK.s 			page 132


 4053              	.LFE192:
 4055 0002 00BF     		.section	.text.HAL_DFSDM_FilterPollForRegConversion,"ax",%progbits
 4056              		.align	2
 4057              		.global	HAL_DFSDM_FilterPollForRegConversion
 4058              		.thumb
 4059              		.thumb_func
 4061              	HAL_DFSDM_FilterPollForRegConversion:
 4062              	.LFB162:
1357:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 4063              		.loc 1 1357 0
 4064              		.cfi_startproc
 4065              		@ args = 0, pretend = 0, frame = 0
 4066              		@ frame_needed = 0, uses_anonymous_args = 0
 4067              	.LVL383:
1364:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 4068              		.loc 1 1364 0
 4069 0000 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 4070 0004 022B     		cmp	r3, #2
 4071 0006 18BF     		it	ne
 4072 0008 042B     		cmpne	r3, #4
 4073 000a 2FD1     		bne	.L346
1357:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 4074              		.loc 1 1357 0
 4075 000c 70B5     		push	{r4, r5, r6, lr}
 4076              	.LCFI77:
 4077              		.cfi_def_cfa_offset 16
 4078              		.cfi_offset 4, -16
 4079              		.cfi_offset 5, -12
 4080              		.cfi_offset 6, -8
 4081              		.cfi_offset 14, -4
 4082 000e 0D46     		mov	r5, r1
 4083 0010 0446     		mov	r4, r0
1373:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4084              		.loc 1 1373 0
 4085 0012 FFF7FEFF 		bl	HAL_GetTick
 4086              	.LVL384:
 4087 0016 0646     		mov	r6, r0
 4088              	.LVL385:
1376:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4089              		.loc 1 1376 0
 4090 0018 08E0     		b	.L342
 4091              	.LVL386:
 4092              	.L343:
1379:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 4093              		.loc 1 1379 0
 4094 001a B5F1FF3F 		cmp	r5, #-1
 4095 001e 05D0     		beq	.L342
1381:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
 4096              		.loc 1 1381 0
 4097 0020 35B3     		cbz	r5, .L347
1381:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
 4098              		.loc 1 1381 0 is_stmt 0 discriminator 1
 4099 0022 FFF7FEFF 		bl	HAL_GetTick
 4100              	.LVL387:
 4101 0026 801B     		subs	r0, r0, r6
 4102 0028 8542     		cmp	r5, r0
 4103 002a 23D3     		bcc	.L348
ARM GAS  /tmp/ccTJyLFK.s 			page 133


 4104              	.L342:
1376:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4105              		.loc 1 1376 0 is_stmt 1
 4106 002c 2368     		ldr	r3, [r4]
 4107 002e 9A68     		ldr	r2, [r3, #8]
 4108 0030 12F0020F 		tst	r2, #2
 4109 0034 F1D0     		beq	.L343
1389:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4110              		.loc 1 1389 0
 4111 0036 9B68     		ldr	r3, [r3, #8]
 4112 0038 13F0080F 		tst	r3, #8
 4113 003c 07D0     		beq	.L344
1392:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 4114              		.loc 1 1392 0
 4115 003e 0123     		movs	r3, #1
 4116 0040 2365     		str	r3, [r4, #80]
1393:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4117              		.loc 1 1393 0
 4118 0042 2046     		mov	r0, r4
 4119 0044 FFF7FEFF 		bl	HAL_DFSDM_FilterErrorCallback
 4120              	.LVL388:
1396:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4121              		.loc 1 1396 0
 4122 0048 2368     		ldr	r3, [r4]
 4123 004a 0822     		movs	r2, #8
 4124 004c DA60     		str	r2, [r3, #12]
 4125              	.L344:
1399:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 4126              		.loc 1 1399 0
 4127 004e 236B     		ldr	r3, [r4, #48]
 4128 0050 93B9     		cbnz	r3, .L349
1400:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4129              		.loc 1 1400 0 discriminator 1
 4130 0052 636B     		ldr	r3, [r4, #52]
1399:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 4131              		.loc 1 1399 0 discriminator 1
 4132 0054 93B9     		cbnz	r3, .L350
1402:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                              HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 4133              		.loc 1 1402 0
 4134 0056 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 4135 005a 022B     		cmp	r3, #2
 4136 005c 01D1     		bne	.L351
 4137 005e 0123     		movs	r3, #1
 4138 0060 00E0     		b	.L345
 4139              	.L351:
 4140 0062 0323     		movs	r3, #3
 4141              	.L345:
1402:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                              HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 4142              		.loc 1 1402 0 is_stmt 0 discriminator 4
 4143 0064 84F84C30 		strb	r3, [r4, #76]
1406:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 4144              		.loc 1 1406 0 is_stmt 1 discriminator 4
 4145 0068 0020     		movs	r0, #0
 4146 006a 70BD     		pop	{r4, r5, r6, pc}
 4147              	.LVL389:
 4148              	.L346:
 4149              	.LCFI78:
ARM GAS  /tmp/ccTJyLFK.s 			page 134


 4150              		.cfi_def_cfa_offset 0
 4151              		.cfi_restore 4
 4152              		.cfi_restore 5
 4153              		.cfi_restore 6
 4154              		.cfi_restore 14
1368:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 4155              		.loc 1 1368 0
 4156 006c 0120     		movs	r0, #1
 4157              	.LVL390:
1408:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4158              		.loc 1 1408 0
 4159 006e 7047     		bx	lr
 4160              	.LVL391:
 4161              	.L347:
 4162              	.LCFI79:
 4163              		.cfi_def_cfa_offset 16
 4164              		.cfi_offset 4, -16
 4165              		.cfi_offset 5, -12
 4166              		.cfi_offset 6, -8
 4167              		.cfi_offset 14, -4
1384:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         }
 4168              		.loc 1 1384 0
 4169 0070 0320     		movs	r0, #3
 4170 0072 70BD     		pop	{r4, r5, r6, pc}
 4171              	.LVL392:
 4172              	.L348:
 4173 0074 0320     		movs	r0, #3
 4174 0076 70BD     		pop	{r4, r5, r6, pc}
 4175              	.LVL393:
 4176              	.L349:
1406:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 4177              		.loc 1 1406 0
 4178 0078 0020     		movs	r0, #0
 4179 007a 70BD     		pop	{r4, r5, r6, pc}
 4180              	.LVL394:
 4181              	.L350:
 4182 007c 0020     		movs	r0, #0
1408:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4183              		.loc 1 1408 0
 4184 007e 70BD     		pop	{r4, r5, r6, pc}
 4185              		.cfi_endproc
 4186              	.LFE162:
 4188              		.section	.text.DFSDM_DMAError,"ax",%progbits
 4189              		.align	2
 4190              		.thumb
 4191              		.thumb_func
 4193              	DFSDM_DMAError:
 4194              	.LFB199:
2743:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Get DFSDM filter handle */
 4195              		.loc 1 2743 0
 4196              		.cfi_startproc
 4197              		@ args = 0, pretend = 0, frame = 0
 4198              		@ frame_needed = 0, uses_anonymous_args = 0
 4199              	.LVL395:
 4200 0000 08B5     		push	{r3, lr}
 4201              	.LCFI80:
 4202              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccTJyLFK.s 			page 135


 4203              		.cfi_offset 3, -8
 4204              		.cfi_offset 14, -4
2745:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4205              		.loc 1 2745 0
 4206 0002 806B     		ldr	r0, [r0, #56]
 4207              	.LVL396:
2748:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4208              		.loc 1 2748 0
 4209 0004 0323     		movs	r3, #3
 4210 0006 0365     		str	r3, [r0, #80]
2751:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** }
 4211              		.loc 1 2751 0
 4212 0008 FFF7FEFF 		bl	HAL_DFSDM_FilterErrorCallback
 4213              	.LVL397:
 4214 000c 08BD     		pop	{r3, pc}
 4215              		.cfi_endproc
 4216              	.LFE199:
 4218 000e 00BF     		.section	.text.HAL_DFSDM_FilterPollForInjConversion,"ax",%progbits
 4219              		.align	2
 4220              		.global	HAL_DFSDM_FilterPollForInjConversion
 4221              		.thumb
 4222              		.thumb_func
 4224              	HAL_DFSDM_FilterPollForInjConversion:
 4225              	.LFB171:
1761:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 4226              		.loc 1 1761 0
 4227              		.cfi_startproc
 4228              		@ args = 0, pretend = 0, frame = 0
 4229              		@ frame_needed = 0, uses_anonymous_args = 0
 4230              	.LVL398:
1768:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 4231              		.loc 1 1768 0
 4232 0000 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 4233 0004 033B     		subs	r3, r3, #3
 4234 0006 DBB2     		uxtb	r3, r3
 4235 0008 012B     		cmp	r3, #1
 4236 000a 39D8     		bhi	.L364
1761:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   uint32_t tickstart;
 4237              		.loc 1 1761 0
 4238 000c 70B5     		push	{r4, r5, r6, lr}
 4239              	.LCFI81:
 4240              		.cfi_def_cfa_offset 16
 4241              		.cfi_offset 4, -16
 4242              		.cfi_offset 5, -12
 4243              		.cfi_offset 6, -8
 4244              		.cfi_offset 14, -4
 4245 000e 0D46     		mov	r5, r1
 4246 0010 0446     		mov	r4, r0
1777:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4247              		.loc 1 1777 0
 4248 0012 FFF7FEFF 		bl	HAL_GetTick
 4249              	.LVL399:
 4250 0016 0646     		mov	r6, r0
 4251              	.LVL400:
1780:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4252              		.loc 1 1780 0
 4253 0018 08E0     		b	.L358
ARM GAS  /tmp/ccTJyLFK.s 			page 136


 4254              	.LVL401:
 4255              	.L359:
1783:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 4256              		.loc 1 1783 0
 4257 001a B5F1FF3F 		cmp	r5, #-1
 4258 001e 05D0     		beq	.L358
1785:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
 4259              		.loc 1 1785 0
 4260 0020 85B3     		cbz	r5, .L365
1785:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
 4261              		.loc 1 1785 0 is_stmt 0 discriminator 1
 4262 0022 FFF7FEFF 		bl	HAL_GetTick
 4263              	.LVL402:
 4264 0026 801B     		subs	r0, r0, r6
 4265 0028 8542     		cmp	r5, r0
 4266 002a 2DD3     		bcc	.L366
 4267              	.L358:
1780:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4268              		.loc 1 1780 0 is_stmt 1
 4269 002c 2368     		ldr	r3, [r4]
 4270 002e 9A68     		ldr	r2, [r3, #8]
 4271 0030 12F0010F 		tst	r2, #1
 4272 0034 F1D0     		beq	.L359
1793:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4273              		.loc 1 1793 0
 4274 0036 9B68     		ldr	r3, [r3, #8]
 4275 0038 13F0040F 		tst	r3, #4
 4276 003c 07D0     		beq	.L360
1796:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 4277              		.loc 1 1796 0
 4278 003e 0223     		movs	r3, #2
 4279 0040 2365     		str	r3, [r4, #80]
1797:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4280              		.loc 1 1797 0
 4281 0042 2046     		mov	r0, r4
 4282 0044 FFF7FEFF 		bl	HAL_DFSDM_FilterErrorCallback
 4283              	.LVL403:
1800:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4284              		.loc 1 1800 0
 4285 0048 2368     		ldr	r3, [r4]
 4286 004a 0422     		movs	r2, #4
 4287 004c DA60     		str	r2, [r3, #12]
 4288              	.L360:
1804:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(hdfsdm_filter->InjConvRemaining == 0)
 4289              		.loc 1 1804 0
 4290 004e A36C     		ldr	r3, [r4, #72]
 4291 0050 013B     		subs	r3, r3, #1
 4292 0052 A364     		str	r3, [r4, #72]
1805:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4293              		.loc 1 1805 0
 4294 0054 D3B9     		cbnz	r3, .L367
1808:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 4295              		.loc 1 1808 0
 4296 0056 A36B     		ldr	r3, [r4, #56]
 4297 0058 43B9     		cbnz	r3, .L361
1810:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 4298              		.loc 1 1810 0
ARM GAS  /tmp/ccTJyLFK.s 			page 137


 4299 005a 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 4300 005e 032B     		cmp	r3, #3
 4301 0060 01D1     		bne	.L368
 4302 0062 0123     		movs	r3, #1
 4303 0064 00E0     		b	.L362
 4304              	.L368:
 4305 0066 0223     		movs	r3, #2
 4306              	.L362:
1810:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 4307              		.loc 1 1810 0 is_stmt 0 discriminator 4
 4308 0068 84F84C30 		strb	r3, [r4, #76]
 4309              	.L361:
1815:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          hdfsdm_filter->InjectedChannelsNbr : 1;
 4310              		.loc 1 1815 0 is_stmt 1
 4311 006c 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
1816:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4312              		.loc 1 1816 0
 4313 0070 012B     		cmp	r3, #1
 4314 0072 01D1     		bne	.L369
1816:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4315              		.loc 1 1816 0 is_stmt 0 discriminator 1
 4316 0074 636C     		ldr	r3, [r4, #68]
 4317 0076 00E0     		b	.L363
 4318              	.L369:
1816:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4319              		.loc 1 1816 0
 4320 0078 0123     		movs	r3, #1
 4321              	.L363:
1815:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          hdfsdm_filter->InjectedChannelsNbr : 1;
 4322              		.loc 1 1815 0 is_stmt 1
 4323 007a A364     		str	r3, [r4, #72]
1820:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 4324              		.loc 1 1820 0
 4325 007c 0020     		movs	r0, #0
 4326 007e 70BD     		pop	{r4, r5, r6, pc}
 4327              	.LVL404:
 4328              	.L364:
 4329              	.LCFI82:
 4330              		.cfi_def_cfa_offset 0
 4331              		.cfi_restore 4
 4332              		.cfi_restore 5
 4333              		.cfi_restore 6
 4334              		.cfi_restore 14
1772:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 4335              		.loc 1 1772 0
 4336 0080 0120     		movs	r0, #1
 4337              	.LVL405:
1822:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4338              		.loc 1 1822 0
 4339 0082 7047     		bx	lr
 4340              	.LVL406:
 4341              	.L365:
 4342              	.LCFI83:
 4343              		.cfi_def_cfa_offset 16
 4344              		.cfi_offset 4, -16
 4345              		.cfi_offset 5, -12
 4346              		.cfi_offset 6, -8
ARM GAS  /tmp/ccTJyLFK.s 			page 138


 4347              		.cfi_offset 14, -4
1788:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         }
 4348              		.loc 1 1788 0
 4349 0084 0320     		movs	r0, #3
 4350 0086 70BD     		pop	{r4, r5, r6, pc}
 4351              	.LVL407:
 4352              	.L366:
 4353 0088 0320     		movs	r0, #3
 4354 008a 70BD     		pop	{r4, r5, r6, pc}
 4355              	.LVL408:
 4356              	.L367:
1820:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 4357              		.loc 1 1820 0
 4358 008c 0020     		movs	r0, #0
1822:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4359              		.loc 1 1822 0
 4360 008e 70BD     		pop	{r4, r5, r6, pc}
 4361              		.cfi_endproc
 4362              	.LFE171:
 4364              		.section	.text.HAL_DFSDM_IRQHandler,"ax",%progbits
 4365              		.align	2
 4366              		.global	HAL_DFSDM_IRQHandler
 4367              		.thumb
 4368              		.thumb_func
 4370              	HAL_DFSDM_IRQHandler:
 4371              	.LFB186:
2376:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Check if overrun occurs during regular conversion */
 4372              		.loc 1 2376 0
 4373              		.cfi_startproc
 4374              		@ args = 0, pretend = 0, frame = 0
 4375              		@ frame_needed = 0, uses_anonymous_args = 0
 4376              	.LVL409:
 4377 0000 70B5     		push	{r4, r5, r6, lr}
 4378              	.LCFI84:
 4379              		.cfi_def_cfa_offset 16
 4380              		.cfi_offset 4, -16
 4381              		.cfi_offset 5, -12
 4382              		.cfi_offset 6, -8
 4383              		.cfi_offset 14, -4
 4384 0002 0446     		mov	r4, r0
2378:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_ROVRIE) != 0))
 4385              		.loc 1 2378 0
 4386 0004 0368     		ldr	r3, [r0]
 4387 0006 9A68     		ldr	r2, [r3, #8]
 4388 0008 12F0080F 		tst	r2, #8
 4389 000c 0AD0     		beq	.L372
2379:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 4390              		.loc 1 2379 0 discriminator 1
 4391 000e 5A68     		ldr	r2, [r3, #4]
2378:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****      ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_ROVRIE) != 0))
 4392              		.loc 1 2378 0 discriminator 1
 4393 0010 12F0080F 		tst	r2, #8
 4394 0014 06D0     		beq	.L372
2382:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4395              		.loc 1 2382 0
 4396 0016 0822     		movs	r2, #8
 4397 0018 DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccTJyLFK.s 			page 139


2385:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4398              		.loc 1 2385 0
 4399 001a 0123     		movs	r3, #1
 4400 001c 0365     		str	r3, [r0, #80]
2388:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 4401              		.loc 1 2388 0
 4402 001e FFF7FEFF 		bl	HAL_DFSDM_FilterErrorCallback
 4403              	.LVL410:
 4404 0022 70BD     		pop	{r4, r5, r6, pc}
 4405              	.LVL411:
 4406              	.L372:
2391:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_JOVRIE) != 0))
 4407              		.loc 1 2391 0
 4408 0024 9A68     		ldr	r2, [r3, #8]
 4409 0026 12F0040F 		tst	r2, #4
 4410 002a 0BD0     		beq	.L374
2392:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 4411              		.loc 1 2392 0 discriminator 1
 4412 002c 5A68     		ldr	r2, [r3, #4]
2391:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_JOVRIE) != 0))
 4413              		.loc 1 2391 0 discriminator 1
 4414 002e 12F0040F 		tst	r2, #4
 4415 0032 07D0     		beq	.L374
2395:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4416              		.loc 1 2395 0
 4417 0034 0422     		movs	r2, #4
 4418 0036 DA60     		str	r2, [r3, #12]
2398:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4419              		.loc 1 2398 0
 4420 0038 0223     		movs	r3, #2
 4421 003a 2365     		str	r3, [r4, #80]
2401:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 4422              		.loc 1 2401 0
 4423 003c 2046     		mov	r0, r4
 4424              	.LVL412:
 4425 003e FFF7FEFF 		bl	HAL_DFSDM_FilterErrorCallback
 4426              	.LVL413:
 4427 0042 70BD     		pop	{r4, r5, r6, pc}
 4428              	.LVL414:
 4429              	.L374:
2404:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_REOCIE) != 0))
 4430              		.loc 1 2404 0
 4431 0044 9A68     		ldr	r2, [r3, #8]
 4432 0046 12F0020F 		tst	r2, #2
 4433 004a 1DD0     		beq	.L375
2405:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 4434              		.loc 1 2405 0 discriminator 1
 4435 004c 5A68     		ldr	r2, [r3, #4]
2404:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_REOCIE) != 0))
 4436              		.loc 1 2404 0 discriminator 1
 4437 004e 12F0020F 		tst	r2, #2
 4438 0052 19D0     		beq	.L375
2408:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4439              		.loc 1 2408 0
 4440 0054 2046     		mov	r0, r4
 4441              	.LVL415:
 4442 0056 FFF7FEFF 		bl	HAL_DFSDM_FilterRegConvCpltCallback
ARM GAS  /tmp/ccTJyLFK.s 			page 140


 4443              	.LVL416:
2411:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 4444              		.loc 1 2411 0
 4445 005a 236B     		ldr	r3, [r4, #48]
 4446 005c 002B     		cmp	r3, #0
 4447 005e 40F0AC80 		bne	.L371
2412:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4448              		.loc 1 2412 0 discriminator 1
 4449 0062 636B     		ldr	r3, [r4, #52]
2411:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 4450              		.loc 1 2411 0 discriminator 1
 4451 0064 002B     		cmp	r3, #0
 4452 0066 40F0A880 		bne	.L371
2415:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4453              		.loc 1 2415 0
 4454 006a 2268     		ldr	r2, [r4]
 4455 006c 5368     		ldr	r3, [r2, #4]
 4456 006e 23F00203 		bic	r3, r3, #2
 4457 0072 5360     		str	r3, [r2, #4]
2418:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                              HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 4458              		.loc 1 2418 0
 4459 0074 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 4460 0078 022B     		cmp	r3, #2
 4461 007a 01D1     		bne	.L394
 4462 007c 0123     		movs	r3, #1
 4463 007e 00E0     		b	.L376
 4464              	.L394:
 4465 0080 0323     		movs	r3, #3
 4466              	.L376:
2418:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                              HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 4467              		.loc 1 2418 0 is_stmt 0 discriminator 4
 4468 0082 84F84C30 		strb	r3, [r4, #76]
 4469 0086 70BD     		pop	{r4, r5, r6, pc}
 4470              	.LVL417:
 4471              	.L375:
2423:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_JEOCIE) != 0))
 4472              		.loc 1 2423 0 is_stmt 1
 4473 0088 9A68     		ldr	r2, [r3, #8]
 4474 008a 12F0010F 		tst	r2, #1
 4475 008e 25D0     		beq	.L377
2424:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 4476              		.loc 1 2424 0 discriminator 1
 4477 0090 5A68     		ldr	r2, [r3, #4]
2423:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_JEOCIE) != 0))
 4478              		.loc 1 2423 0 discriminator 1
 4479 0092 12F0010F 		tst	r2, #1
 4480 0096 21D0     		beq	.L377
2427:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4481              		.loc 1 2427 0
 4482 0098 2046     		mov	r0, r4
 4483              	.LVL418:
 4484 009a FFF7FEFF 		bl	HAL_DFSDM_FilterInjConvCpltCallback
 4485              	.LVL419:
2430:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(hdfsdm_filter->InjConvRemaining == 0)
 4486              		.loc 1 2430 0
 4487 009e A36C     		ldr	r3, [r4, #72]
 4488 00a0 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccTJyLFK.s 			page 141


 4489 00a2 A364     		str	r3, [r4, #72]
2431:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4490              		.loc 1 2431 0
 4491 00a4 002B     		cmp	r3, #0
 4492 00a6 40F08880 		bne	.L371
2434:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 4493              		.loc 1 2434 0
 4494 00aa A36B     		ldr	r3, [r4, #56]
 4495 00ac 6BB9     		cbnz	r3, .L378
2437:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4496              		.loc 1 2437 0
 4497 00ae 2268     		ldr	r2, [r4]
 4498 00b0 5368     		ldr	r3, [r2, #4]
 4499 00b2 23F00103 		bic	r3, r3, #1
 4500 00b6 5360     		str	r3, [r2, #4]
2440:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 4501              		.loc 1 2440 0
 4502 00b8 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 4503 00bc 032B     		cmp	r3, #3
 4504 00be 01D1     		bne	.L395
 4505 00c0 0123     		movs	r3, #1
 4506 00c2 00E0     		b	.L379
 4507              	.L395:
 4508 00c4 0223     		movs	r3, #2
 4509              	.L379:
2440:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 4510              		.loc 1 2440 0 is_stmt 0 discriminator 4
 4511 00c6 84F84C30 		strb	r3, [r4, #76]
 4512              	.L378:
2444:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          hdfsdm_filter->InjectedChannelsNbr : 1;
 4513              		.loc 1 2444 0 is_stmt 1
 4514 00ca 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
2445:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4515              		.loc 1 2445 0
 4516 00ce 012B     		cmp	r3, #1
 4517 00d0 01D1     		bne	.L396
2445:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4518              		.loc 1 2445 0 is_stmt 0 discriminator 1
 4519 00d2 636C     		ldr	r3, [r4, #68]
 4520 00d4 00E0     		b	.L380
 4521              	.L396:
2445:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4522              		.loc 1 2445 0
 4523 00d6 0123     		movs	r3, #1
 4524              	.L380:
2444:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                          hdfsdm_filter->InjectedChannelsNbr : 1;
 4525              		.loc 1 2444 0 is_stmt 1
 4526 00d8 A364     		str	r3, [r4, #72]
 4527 00da 70BD     		pop	{r4, r5, r6, pc}
 4528              	.LVL420:
 4529              	.L377:
2449:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_AWDIE) != 0))
 4530              		.loc 1 2449 0
 4531 00dc 9A68     		ldr	r2, [r3, #8]
 4532 00de 12F0100F 		tst	r2, #16
 4533 00e2 20D0     		beq	.L381
2450:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
ARM GAS  /tmp/ccTJyLFK.s 			page 142


 4534              		.loc 1 2450 0 discriminator 1
 4535 00e4 5A68     		ldr	r2, [r3, #4]
2449:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****           ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_AWDIE) != 0))
 4536              		.loc 1 2449 0 discriminator 1
 4537 00e6 12F0100F 		tst	r2, #16
 4538 00ea 1CD0     		beq	.L381
 4539              	.LVL421:
 4540              	.LBB2:
2457:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRES
 4541              		.loc 1 2457 0
 4542 00ec 986A     		ldr	r0, [r3, #40]
 4543              	.LVL422:
2458:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(threshold == DFSDM_AWD_HIGH_THRESHOLD)
 4544              		.loc 1 2458 0
 4545 00ee 10F0FF0F 		tst	r0, #255
 4546 00f2 01D0     		beq	.L397
 4547 00f4 0122     		movs	r2, #1
 4548 00f6 00E0     		b	.L382
 4549              	.L397:
 4550 00f8 0022     		movs	r2, #0
 4551              	.L382:
 4552              	.LVL423:
2459:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4553              		.loc 1 2459 0 discriminator 4
 4554 00fa 02B9     		cbnz	r2, .L383
2461:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4555              		.loc 1 2461 0
 4556 00fc 000A     		lsrs	r0, r0, #8
 4557              	.LVL424:
 4558              	.L383:
2458:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     if(threshold == DFSDM_AWD_HIGH_THRESHOLD)
 4559              		.loc 1 2458 0
 4560 00fe 0021     		movs	r1, #0
 4561 0100 01E0     		b	.L384
 4562              	.LVL425:
 4563              	.L385:
2465:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       reg = reg >> 1;
 4564              		.loc 1 2465 0
 4565 0102 0131     		adds	r1, r1, #1
 4566              	.LVL426:
2466:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4567              		.loc 1 2466 0
 4568 0104 4008     		lsrs	r0, r0, #1
 4569              	.LVL427:
 4570              	.L384:
2463:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4571              		.loc 1 2463 0
 4572 0106 10F0010F 		tst	r0, #1
 4573 010a FAD0     		beq	.L385
2469:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         (1 << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 4574              		.loc 1 2469 0
 4575 010c 22B9     		cbnz	r2, .L386
2470:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                      (1 << channel);
 4576              		.loc 1 2470 0 discriminator 1
 4577 010e 01F10805 		add	r5, r1, #8
 4578 0112 0120     		movs	r0, #1
 4579              	.LVL428:
ARM GAS  /tmp/ccTJyLFK.s 			page 143


 4580 0114 A840     		lsls	r0, r0, r5
 4581 0116 01E0     		b	.L387
 4582              	.LVL429:
 4583              	.L386:
2471:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4584              		.loc 1 2471 0 discriminator 2
 4585 0118 0120     		movs	r0, #1
 4586              	.LVL430:
 4587 011a 8840     		lsls	r0, r0, r1
 4588              	.L387:
2469:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****                                         (1 << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 4589              		.loc 1 2469 0 discriminator 4
 4590 011c D862     		str	r0, [r3, #44]
2474:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 4591              		.loc 1 2474 0 discriminator 4
 4592 011e 2046     		mov	r0, r4
 4593 0120 FFF7FEFF 		bl	HAL_DFSDM_FilterAwdCallback
 4594              	.LVL431:
 4595              	.LBE2:
2451:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     uint32_t reg = 0;
 4596              		.loc 1 2451 0 discriminator 4
 4597 0124 70BD     		pop	{r4, r5, r6, pc}
 4598              	.LVL432:
 4599              	.L381:
2477:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) != 0) && \
 4600              		.loc 1 2477 0
 4601 0126 254A     		ldr	r2, .L399
 4602 0128 9342     		cmp	r3, r2
 4603 012a 28D1     		bne	.L388
2478:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_CKABIE) != 0))
 4604              		.loc 1 2478 0 discriminator 1
 4605 012c 9A68     		ldr	r2, [r3, #8]
2477:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) != 0) && \
 4606              		.loc 1 2477 0 discriminator 1
 4607 012e 12F47F0F 		tst	r2, #16711680
 4608 0132 24D0     		beq	.L388
2479:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 4609              		.loc 1 2479 0
 4610 0134 5A68     		ldr	r2, [r3, #4]
2478:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_CKABIE) != 0))
 4611              		.loc 1 2478 0
 4612 0136 12F0400F 		tst	r2, #64
 4613 013a 20D0     		beq	.L388
 4614              	.LVL433:
 4615              	.LBB3:
2484:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4616              		.loc 1 2484 0
 4617 013c 9E68     		ldr	r6, [r3, #8]
 4618 013e C6F30746 		ubfx	r6, r6, #16, #8
 4619              	.LVL434:
2482:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 4620              		.loc 1 2482 0
 4621 0142 0025     		movs	r5, #0
2486:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4622              		.loc 1 2486 0
 4623 0144 18E0     		b	.L389
 4624              	.LVL435:
ARM GAS  /tmp/ccTJyLFK.s 			page 144


 4625              	.L391:
2489:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 4626              		.loc 1 2489 0
 4627 0146 16F0010F 		tst	r6, #1
 4628 014a 13D0     		beq	.L390
2489:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       {
 4629              		.loc 1 2489 0 is_stmt 0 discriminator 1
 4630 014c 1C4B     		ldr	r3, .L399+4
 4631 014e 53F82530 		ldr	r3, [r3, r5, lsl #2]
 4632 0152 7BB1     		cbz	r3, .L390
2492:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         {
 4633              		.loc 1 2492 0 is_stmt 1
 4634 0154 1B68     		ldr	r3, [r3]
 4635 0156 1B68     		ldr	r3, [r3]
 4636 0158 13F0400F 		tst	r3, #64
 4637 015c 0AD0     		beq	.L390
2495:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4638              		.loc 1 2495 0
 4639 015e 2268     		ldr	r2, [r4]
 4640 0160 05F11001 		add	r1, r5, #16
 4641 0164 0123     		movs	r3, #1
 4642 0166 8B40     		lsls	r3, r3, r1
 4643 0168 D360     		str	r3, [r2, #12]
2498:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****         }
 4644              		.loc 1 2498 0
 4645 016a 154B     		ldr	r3, .L399+4
 4646 016c 53F82500 		ldr	r0, [r3, r5, lsl #2]
 4647 0170 FFF7FEFF 		bl	HAL_DFSDM_ChannelCkabCallback
 4648              	.LVL436:
 4649              	.L390:
2501:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       reg = reg >> 1;
 4650              		.loc 1 2501 0
 4651 0174 0135     		adds	r5, r5, #1
 4652              	.LVL437:
2502:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4653              		.loc 1 2502 0
 4654 0176 7608     		lsrs	r6, r6, #1
 4655              	.LVL438:
 4656              	.L389:
2486:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4657              		.loc 1 2486 0
 4658 0178 072D     		cmp	r5, #7
 4659 017a E4D9     		bls	.L391
 4660 017c 70BD     		pop	{r4, r5, r6, pc}
 4661              	.LVL439:
 4662              	.L388:
 4663              	.LBE3:
2506:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) != 0) && \
 4664              		.loc 1 2506 0
 4665 017e 0F4A     		ldr	r2, .L399
 4666 0180 9342     		cmp	r3, r2
 4667 0182 1AD1     		bne	.L371
2507:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_SCDIE) != 0))
 4668              		.loc 1 2507 0 discriminator 1
 4669 0184 9A68     		ldr	r2, [r3, #8]
2506:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) != 0) && \
 4670              		.loc 1 2506 0 discriminator 1
ARM GAS  /tmp/ccTJyLFK.s 			page 145


 4671 0186 12F07F4F 		tst	r2, #-16777216
 4672 018a 16D0     		beq	.L371
2508:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   {
 4673              		.loc 1 2508 0
 4674 018c 5A68     		ldr	r2, [r3, #4]
2507:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_SCDIE) != 0))
 4675              		.loc 1 2507 0
 4676 018e 12F0200F 		tst	r2, #32
 4677 0192 12D0     		beq	.L371
 4678              	.LVL440:
 4679              	.LBB4:
2514:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     while((reg & 1) == 0)
 4680              		.loc 1 2514 0
 4681 0194 9A68     		ldr	r2, [r3, #8]
 4682 0196 120E     		lsrs	r2, r2, #24
 4683              	.LVL441:
2511:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     
 4684              		.loc 1 2511 0
 4685 0198 0021     		movs	r1, #0
2515:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4686              		.loc 1 2515 0
 4687 019a 01E0     		b	.L392
 4688              	.LVL442:
 4689              	.L393:
2517:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****       reg = reg >> 1;
 4690              		.loc 1 2517 0
 4691 019c 0131     		adds	r1, r1, #1
 4692              	.LVL443:
2518:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     }
 4693              		.loc 1 2518 0
 4694 019e 5208     		lsrs	r2, r2, #1
 4695              	.LVL444:
 4696              	.L392:
2515:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****     {
 4697              		.loc 1 2515 0
 4698 01a0 12F0010F 		tst	r2, #1
 4699 01a4 FAD0     		beq	.L393
2522:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4700              		.loc 1 2522 0
 4701 01a6 01F11800 		add	r0, r1, #24
 4702              	.LVL445:
 4703 01aa 0122     		movs	r2, #1
 4704              	.LVL446:
 4705 01ac 8240     		lsls	r2, r2, r0
 4706 01ae DA60     		str	r2, [r3, #12]
2525:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   }
 4707              		.loc 1 2525 0
 4708 01b0 034B     		ldr	r3, .L399+4
 4709 01b2 53F82100 		ldr	r0, [r3, r1, lsl #2]
 4710 01b6 FFF7FEFF 		bl	HAL_DFSDM_ChannelScdCallback
 4711              	.LVL447:
 4712              	.L371:
 4713 01ba 70BD     		pop	{r4, r5, r6, pc}
 4714              	.LVL448:
 4715              	.L400:
 4716              		.align	2
 4717              	.L399:
ARM GAS  /tmp/ccTJyLFK.s 			page 146


 4718 01bc 00750140 		.word	1073837312
 4719 01c0 00000000 		.word	.LANCHOR0
 4720              	.LBE4:
 4721              		.cfi_endproc
 4722              	.LFE186:
 4724              		.section	.text.HAL_DFSDM_FilterGetState,"ax",%progbits
 4725              		.align	2
 4726              		.global	HAL_DFSDM_FilterGetState
 4727              		.thumb
 4728              		.thumb_func
 4730              	HAL_DFSDM_FilterGetState:
 4731              	.LFB193:
2652:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   /* Return DFSDM filter handle state */
 4732              		.loc 1 2652 0
 4733              		.cfi_startproc
 4734              		@ args = 0, pretend = 0, frame = 0
 4735              		@ frame_needed = 0, uses_anonymous_args = 0
 4736              		@ link register save eliminated.
 4737              	.LVL449:
2655:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4738              		.loc 1 2655 0
 4739 0000 90F84C00 		ldrb	r0, [r0, #76]	@ zero_extendqisi2
 4740              	.LVL450:
 4741 0004 7047     		bx	lr
 4742              		.cfi_endproc
 4743              	.LFE193:
 4745 0006 00BF     		.section	.text.HAL_DFSDM_FilterGetError,"ax",%progbits
 4746              		.align	2
 4747              		.global	HAL_DFSDM_FilterGetError
 4748              		.thumb
 4749              		.thumb_func
 4751              	HAL_DFSDM_FilterGetError:
 4752              	.LFB194:
2663:HALLIB/Src/stm32f7xx_hal_dfsdm.c ****   return hdfsdm_filter->ErrorCode;
 4753              		.loc 1 2663 0
 4754              		.cfi_startproc
 4755              		@ args = 0, pretend = 0, frame = 0
 4756              		@ frame_needed = 0, uses_anonymous_args = 0
 4757              		@ link register save eliminated.
 4758              	.LVL451:
2665:HALLIB/Src/stm32f7xx_hal_dfsdm.c **** 
 4759              		.loc 1 2665 0
 4760 0000 006D     		ldr	r0, [r0, #80]
 4761              	.LVL452:
 4762 0002 7047     		bx	lr
 4763              		.cfi_endproc
 4764              	.LFE194:
 4766              		.global	a_dfsdm1ChannelHandle
 4767              		.global	v_dfsdm1ChannelCounter
 4768              		.section	.bss.v_dfsdm1ChannelCounter,"aw",%nobits
 4769              		.align	2
 4770              		.set	.LANCHOR1,. + 0
 4773              	v_dfsdm1ChannelCounter:
 4774 0000 00000000 		.space	4
 4775              		.section	.bss.a_dfsdm1ChannelHandle,"aw",%nobits
 4776              		.align	2
 4777              		.set	.LANCHOR0,. + 0
ARM GAS  /tmp/ccTJyLFK.s 			page 147


 4780              	a_dfsdm1ChannelHandle:
 4781 0000 00000000 		.space	32
 4781      00000000 
 4781      00000000 
 4781      00000000 
 4781      00000000 
 4782              		.text
 4783              	.Letext0:
 4784              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 4785              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 4786              		.file 4 "Inc/stm32f767xx.h"
 4787              		.file 5 "Inc/stm32f7xx.h"
 4788              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 4789              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 4790              		.file 8 "HALLIB/Inc/stm32f7xx_hal_dfsdm.h"
 4791              		.file 9 "CORE/core_cm7.h"
 4792              		.file 10 "HALLIB/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccTJyLFK.s 			page 148


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_dfsdm.c
     /tmp/ccTJyLFK.s:21     .text.DFSDM_GetInjChannelsNbr:00000000 $t
     /tmp/ccTJyLFK.s:25     .text.DFSDM_GetInjChannelsNbr:00000000 DFSDM_GetInjChannelsNbr
     /tmp/ccTJyLFK.s:64     .text.DFSDM_GetChannelFromInstance:00000000 $t
     /tmp/ccTJyLFK.s:68     .text.DFSDM_GetChannelFromInstance:00000000 DFSDM_GetChannelFromInstance
     /tmp/ccTJyLFK.s:164    .text.DFSDM_GetChannelFromInstance:00000054 $d
     /tmp/ccTJyLFK.s:169    .text.DFSDM_RegConvStart:00000000 $t
     /tmp/ccTJyLFK.s:173    .text.DFSDM_RegConvStart:00000000 DFSDM_RegConvStart
     /tmp/ccTJyLFK.s:250    .text.DFSDM_RegConvStop:00000000 $t
     /tmp/ccTJyLFK.s:254    .text.DFSDM_RegConvStop:00000000 DFSDM_RegConvStop
     /tmp/ccTJyLFK.s:326    .text.DFSDM_InjConvStart:00000000 $t
     /tmp/ccTJyLFK.s:330    .text.DFSDM_InjConvStart:00000000 DFSDM_InjConvStart
     /tmp/ccTJyLFK.s:406    .text.DFSDM_InjConvStop:00000000 $t
     /tmp/ccTJyLFK.s:410    .text.DFSDM_InjConvStop:00000000 DFSDM_InjConvStop
     /tmp/ccTJyLFK.s:492    .text.HAL_DFSDM_ChannelMspInit:00000000 $t
     /tmp/ccTJyLFK.s:497    .text.HAL_DFSDM_ChannelMspInit:00000000 HAL_DFSDM_ChannelMspInit
     /tmp/ccTJyLFK.s:510    .text.HAL_DFSDM_ChannelInit:00000000 $t
     /tmp/ccTJyLFK.s:515    .text.HAL_DFSDM_ChannelInit:00000000 HAL_DFSDM_ChannelInit
     /tmp/ccTJyLFK.s:701    .text.HAL_DFSDM_ChannelInit:000000f8 $d
     /tmp/ccTJyLFK.s:708    .text.HAL_DFSDM_ChannelMspDeInit:00000000 $t
     /tmp/ccTJyLFK.s:713    .text.HAL_DFSDM_ChannelMspDeInit:00000000 HAL_DFSDM_ChannelMspDeInit
     /tmp/ccTJyLFK.s:726    .text.HAL_DFSDM_ChannelDeInit:00000000 $t
     /tmp/ccTJyLFK.s:731    .text.HAL_DFSDM_ChannelDeInit:00000000 HAL_DFSDM_ChannelDeInit
     /tmp/ccTJyLFK.s:821    .text.HAL_DFSDM_ChannelDeInit:00000058 $d
     /tmp/ccTJyLFK.s:828    .text.HAL_DFSDM_ChannelCkabStart:00000000 $t
     /tmp/ccTJyLFK.s:833    .text.HAL_DFSDM_ChannelCkabStart:00000000 HAL_DFSDM_ChannelCkabStart
     /tmp/ccTJyLFK.s:932    .text.HAL_DFSDM_ChannelCkabStart:00000060 $d
     /tmp/ccTJyLFK.s:937    .text.HAL_DFSDM_ChannelPollForCkab:00000000 $t
     /tmp/ccTJyLFK.s:942    .text.HAL_DFSDM_ChannelPollForCkab:00000000 HAL_DFSDM_ChannelPollForCkab
     /tmp/ccTJyLFK.s:1039   .text.HAL_DFSDM_ChannelPollForCkab:0000005c $d
     /tmp/ccTJyLFK.s:1044   .text.HAL_DFSDM_ChannelCkabStop:00000000 $t
     /tmp/ccTJyLFK.s:1049   .text.HAL_DFSDM_ChannelCkabStop:00000000 HAL_DFSDM_ChannelCkabStop
     /tmp/ccTJyLFK.s:1097   .text.HAL_DFSDM_ChannelCkabStop:00000030 $d
     /tmp/ccTJyLFK.s:1102   .text.HAL_DFSDM_ChannelCkabStart_IT:00000000 $t
     /tmp/ccTJyLFK.s:1107   .text.HAL_DFSDM_ChannelCkabStart_IT:00000000 HAL_DFSDM_ChannelCkabStart_IT
     /tmp/ccTJyLFK.s:1211   .text.HAL_DFSDM_ChannelCkabStart_IT:0000006c $d
     /tmp/ccTJyLFK.s:1216   .text.HAL_DFSDM_ChannelCkabCallback:00000000 $t
     /tmp/ccTJyLFK.s:1221   .text.HAL_DFSDM_ChannelCkabCallback:00000000 HAL_DFSDM_ChannelCkabCallback
     /tmp/ccTJyLFK.s:1234   .text.HAL_DFSDM_ChannelCkabStop_IT:00000000 $t
     /tmp/ccTJyLFK.s:1239   .text.HAL_DFSDM_ChannelCkabStop_IT:00000000 HAL_DFSDM_ChannelCkabStop_IT
     /tmp/ccTJyLFK.s:1292   .text.HAL_DFSDM_ChannelCkabStop_IT:00000038 $d
     /tmp/ccTJyLFK.s:1297   .text.HAL_DFSDM_ChannelScdStart:00000000 $t
     /tmp/ccTJyLFK.s:1302   .text.HAL_DFSDM_ChannelScdStart:00000000 HAL_DFSDM_ChannelScdStart
     /tmp/ccTJyLFK.s:1369   .text.HAL_DFSDM_ChannelScdStart:00000038 $d
     /tmp/ccTJyLFK.s:1374   .text.HAL_DFSDM_ChannelPollForScd:00000000 $t
     /tmp/ccTJyLFK.s:1379   .text.HAL_DFSDM_ChannelPollForScd:00000000 HAL_DFSDM_ChannelPollForScd
     /tmp/ccTJyLFK.s:1475   .text.HAL_DFSDM_ChannelPollForScd:00000058 $d
     /tmp/ccTJyLFK.s:1480   .text.HAL_DFSDM_ChannelScdStop:00000000 $t
     /tmp/ccTJyLFK.s:1485   .text.HAL_DFSDM_ChannelScdStop:00000000 HAL_DFSDM_ChannelScdStop
     /tmp/ccTJyLFK.s:1533   .text.HAL_DFSDM_ChannelScdStop:00000030 $d
     /tmp/ccTJyLFK.s:1538   .text.HAL_DFSDM_ChannelScdStart_IT:00000000 $t
     /tmp/ccTJyLFK.s:1543   .text.HAL_DFSDM_ChannelScdStart_IT:00000000 HAL_DFSDM_ChannelScdStart_IT
     /tmp/ccTJyLFK.s:1615   .text.HAL_DFSDM_ChannelScdStart_IT:00000040 $d
     /tmp/ccTJyLFK.s:1621   .text.HAL_DFSDM_ChannelScdCallback:00000000 $t
     /tmp/ccTJyLFK.s:1626   .text.HAL_DFSDM_ChannelScdCallback:00000000 HAL_DFSDM_ChannelScdCallback
     /tmp/ccTJyLFK.s:1639   .text.HAL_DFSDM_ChannelScdStop_IT:00000000 $t
ARM GAS  /tmp/ccTJyLFK.s 			page 149


     /tmp/ccTJyLFK.s:1644   .text.HAL_DFSDM_ChannelScdStop_IT:00000000 HAL_DFSDM_ChannelScdStop_IT
     /tmp/ccTJyLFK.s:1697   .text.HAL_DFSDM_ChannelScdStop_IT:00000038 $d
     /tmp/ccTJyLFK.s:1702   .text.HAL_DFSDM_ChannelGetAwdValue:00000000 $t
     /tmp/ccTJyLFK.s:1707   .text.HAL_DFSDM_ChannelGetAwdValue:00000000 HAL_DFSDM_ChannelGetAwdValue
     /tmp/ccTJyLFK.s:1726   .text.HAL_DFSDM_ChannelModifyOffset:00000000 $t
     /tmp/ccTJyLFK.s:1731   .text.HAL_DFSDM_ChannelModifyOffset:00000000 HAL_DFSDM_ChannelModifyOffset
     /tmp/ccTJyLFK.s:1769   .text.HAL_DFSDM_ChannelGetState:00000000 $t
     /tmp/ccTJyLFK.s:1774   .text.HAL_DFSDM_ChannelGetState:00000000 HAL_DFSDM_ChannelGetState
     /tmp/ccTJyLFK.s:1790   .text.HAL_DFSDM_FilterMspInit:00000000 $t
     /tmp/ccTJyLFK.s:1795   .text.HAL_DFSDM_FilterMspInit:00000000 HAL_DFSDM_FilterMspInit
     /tmp/ccTJyLFK.s:1808   .text.HAL_DFSDM_FilterInit:00000000 $t
     /tmp/ccTJyLFK.s:1813   .text.HAL_DFSDM_FilterInit:00000000 HAL_DFSDM_FilterInit
     /tmp/ccTJyLFK.s:2034   .text.HAL_DFSDM_FilterInit:0000011c $d
     /tmp/ccTJyLFK.s:2041   .text.HAL_DFSDM_FilterMspDeInit:00000000 $t
     /tmp/ccTJyLFK.s:2046   .text.HAL_DFSDM_FilterMspDeInit:00000000 HAL_DFSDM_FilterMspDeInit
     /tmp/ccTJyLFK.s:2059   .text.HAL_DFSDM_FilterDeInit:00000000 $t
     /tmp/ccTJyLFK.s:2064   .text.HAL_DFSDM_FilterDeInit:00000000 HAL_DFSDM_FilterDeInit
     /tmp/ccTJyLFK.s:2107   .text.HAL_DFSDM_FilterConfigRegChannel:00000000 $t
     /tmp/ccTJyLFK.s:2112   .text.HAL_DFSDM_FilterConfigRegChannel:00000000 HAL_DFSDM_FilterConfigRegChannel
     /tmp/ccTJyLFK.s:2194   .text.HAL_DFSDM_FilterConfigRegChannel:0000004c $d
     /tmp/ccTJyLFK.s:2199   .text.HAL_DFSDM_FilterConfigInjChannel:00000000 $t
     /tmp/ccTJyLFK.s:2204   .text.HAL_DFSDM_FilterConfigInjChannel:00000000 HAL_DFSDM_FilterConfigInjChannel
     /tmp/ccTJyLFK.s:2260   .text.HAL_DFSDM_FilterRegularStart:00000000 $t
     /tmp/ccTJyLFK.s:2265   .text.HAL_DFSDM_FilterRegularStart:00000000 HAL_DFSDM_FilterRegularStart
     /tmp/ccTJyLFK.s:2301   .text.HAL_DFSDM_FilterRegularStop:00000000 $t
     /tmp/ccTJyLFK.s:2306   .text.HAL_DFSDM_FilterRegularStop:00000000 HAL_DFSDM_FilterRegularStop
     /tmp/ccTJyLFK.s:2342   .text.HAL_DFSDM_FilterRegularStart_IT:00000000 $t
     /tmp/ccTJyLFK.s:2347   .text.HAL_DFSDM_FilterRegularStart_IT:00000000 HAL_DFSDM_FilterRegularStart_IT
     /tmp/ccTJyLFK.s:2388   .text.HAL_DFSDM_FilterRegularStop_IT:00000000 $t
     /tmp/ccTJyLFK.s:2393   .text.HAL_DFSDM_FilterRegularStop_IT:00000000 HAL_DFSDM_FilterRegularStop_IT
     /tmp/ccTJyLFK.s:2434   .text.HAL_DFSDM_FilterRegularStart_DMA:00000000 $t
     /tmp/ccTJyLFK.s:2439   .text.HAL_DFSDM_FilterRegularStart_DMA:00000000 HAL_DFSDM_FilterRegularStart_DMA
     /tmp/ccTJyLFK.s:2599   .text.HAL_DFSDM_FilterRegularStart_DMA:0000009c $d
     /tmp/ccTJyLFK.s:3858   .text.DFSDM_DMARegularConvCplt:00000000 DFSDM_DMARegularConvCplt
     /tmp/ccTJyLFK.s:4193   .text.DFSDM_DMAError:00000000 DFSDM_DMAError
     /tmp/ccTJyLFK.s:3904   .text.DFSDM_DMARegularHalfConvCplt:00000000 DFSDM_DMARegularHalfConvCplt
     /tmp/ccTJyLFK.s:2606   .text.HAL_DFSDM_FilterRegularMsbStart_DMA:00000000 $t
     /tmp/ccTJyLFK.s:2611   .text.HAL_DFSDM_FilterRegularMsbStart_DMA:00000000 HAL_DFSDM_FilterRegularMsbStart_DMA
     /tmp/ccTJyLFK.s:2771   .text.HAL_DFSDM_FilterRegularMsbStart_DMA:0000009c $d
     /tmp/ccTJyLFK.s:2778   .text.HAL_DFSDM_FilterRegularStop_DMA:00000000 $t
     /tmp/ccTJyLFK.s:2783   .text.HAL_DFSDM_FilterRegularStop_DMA:00000000 HAL_DFSDM_FilterRegularStop_DMA
     /tmp/ccTJyLFK.s:2839   .text.HAL_DFSDM_FilterGetRegularValue:00000000 $t
     /tmp/ccTJyLFK.s:2844   .text.HAL_DFSDM_FilterGetRegularValue:00000000 HAL_DFSDM_FilterGetRegularValue
     /tmp/ccTJyLFK.s:2868   .text.HAL_DFSDM_FilterInjectedStart:00000000 $t
     /tmp/ccTJyLFK.s:2873   .text.HAL_DFSDM_FilterInjectedStart:00000000 HAL_DFSDM_FilterInjectedStart
     /tmp/ccTJyLFK.s:2909   .text.HAL_DFSDM_FilterInjectedStop:00000000 $t
     /tmp/ccTJyLFK.s:2914   .text.HAL_DFSDM_FilterInjectedStop:00000000 HAL_DFSDM_FilterInjectedStop
     /tmp/ccTJyLFK.s:2950   .text.HAL_DFSDM_FilterInjectedStart_IT:00000000 $t
     /tmp/ccTJyLFK.s:2955   .text.HAL_DFSDM_FilterInjectedStart_IT:00000000 HAL_DFSDM_FilterInjectedStart_IT
     /tmp/ccTJyLFK.s:2996   .text.HAL_DFSDM_FilterInjectedStop_IT:00000000 $t
     /tmp/ccTJyLFK.s:3001   .text.HAL_DFSDM_FilterInjectedStop_IT:00000000 HAL_DFSDM_FilterInjectedStop_IT
     /tmp/ccTJyLFK.s:3042   .text.HAL_DFSDM_FilterInjectedStart_DMA:00000000 $t
     /tmp/ccTJyLFK.s:3047   .text.HAL_DFSDM_FilterInjectedStart_DMA:00000000 HAL_DFSDM_FilterInjectedStart_DMA
     /tmp/ccTJyLFK.s:3201   .text.HAL_DFSDM_FilterInjectedStart_DMA:00000098 $d
     /tmp/ccTJyLFK.s:3950   .text.DFSDM_DMAInjectedConvCplt:00000000 DFSDM_DMAInjectedConvCplt
     /tmp/ccTJyLFK.s:3996   .text.DFSDM_DMAInjectedHalfConvCplt:00000000 DFSDM_DMAInjectedHalfConvCplt
     /tmp/ccTJyLFK.s:3208   .text.HAL_DFSDM_FilterInjectedMsbStart_DMA:00000000 $t
ARM GAS  /tmp/ccTJyLFK.s 			page 150


     /tmp/ccTJyLFK.s:3213   .text.HAL_DFSDM_FilterInjectedMsbStart_DMA:00000000 HAL_DFSDM_FilterInjectedMsbStart_DMA
     /tmp/ccTJyLFK.s:3367   .text.HAL_DFSDM_FilterInjectedMsbStart_DMA:00000098 $d
     /tmp/ccTJyLFK.s:3374   .text.HAL_DFSDM_FilterInjectedStop_DMA:00000000 $t
     /tmp/ccTJyLFK.s:3379   .text.HAL_DFSDM_FilterInjectedStop_DMA:00000000 HAL_DFSDM_FilterInjectedStop_DMA
     /tmp/ccTJyLFK.s:3435   .text.HAL_DFSDM_FilterGetInjectedValue:00000000 $t
     /tmp/ccTJyLFK.s:3440   .text.HAL_DFSDM_FilterGetInjectedValue:00000000 HAL_DFSDM_FilterGetInjectedValue
     /tmp/ccTJyLFK.s:3464   .text.HAL_DFSDM_FilterAwdStart_IT:00000000 $t
     /tmp/ccTJyLFK.s:3469   .text.HAL_DFSDM_FilterAwdStart_IT:00000000 HAL_DFSDM_FilterAwdStart_IT
     /tmp/ccTJyLFK.s:3574   .text.HAL_DFSDM_FilterAwdStop_IT:00000000 $t
     /tmp/ccTJyLFK.s:3579   .text.HAL_DFSDM_FilterAwdStop_IT:00000000 HAL_DFSDM_FilterAwdStop_IT
     /tmp/ccTJyLFK.s:3632   .text.HAL_DFSDM_FilterAwdStop_IT:00000044 $d
     /tmp/ccTJyLFK.s:3637   .text.HAL_DFSDM_FilterExdStart:00000000 $t
     /tmp/ccTJyLFK.s:3642   .text.HAL_DFSDM_FilterExdStart:00000000 HAL_DFSDM_FilterExdStart
     /tmp/ccTJyLFK.s:3683   .text.HAL_DFSDM_FilterExdStart:0000002c $d
     /tmp/ccTJyLFK.s:3688   .text.HAL_DFSDM_FilterExdStop:00000000 $t
     /tmp/ccTJyLFK.s:3693   .text.HAL_DFSDM_FilterExdStop:00000000 HAL_DFSDM_FilterExdStop
     /tmp/ccTJyLFK.s:3753   .text.HAL_DFSDM_FilterGetExdMaxValue:00000000 $t
     /tmp/ccTJyLFK.s:3758   .text.HAL_DFSDM_FilterGetExdMaxValue:00000000 HAL_DFSDM_FilterGetExdMaxValue
     /tmp/ccTJyLFK.s:3782   .text.HAL_DFSDM_FilterGetExdMinValue:00000000 $t
     /tmp/ccTJyLFK.s:3787   .text.HAL_DFSDM_FilterGetExdMinValue:00000000 HAL_DFSDM_FilterGetExdMinValue
     /tmp/ccTJyLFK.s:3811   .text.HAL_DFSDM_FilterGetConvTimeValue:00000000 $t
     /tmp/ccTJyLFK.s:3816   .text.HAL_DFSDM_FilterGetConvTimeValue:00000000 HAL_DFSDM_FilterGetConvTimeValue
     /tmp/ccTJyLFK.s:3836   .text.HAL_DFSDM_FilterRegConvCpltCallback:00000000 $t
     /tmp/ccTJyLFK.s:3841   .text.HAL_DFSDM_FilterRegConvCpltCallback:00000000 HAL_DFSDM_FilterRegConvCpltCallback
     /tmp/ccTJyLFK.s:3854   .text.DFSDM_DMARegularConvCplt:00000000 $t
     /tmp/ccTJyLFK.s:3882   .text.HAL_DFSDM_FilterRegConvHalfCpltCallback:00000000 $t
     /tmp/ccTJyLFK.s:3887   .text.HAL_DFSDM_FilterRegConvHalfCpltCallback:00000000 HAL_DFSDM_FilterRegConvHalfCpltCallback
     /tmp/ccTJyLFK.s:3900   .text.DFSDM_DMARegularHalfConvCplt:00000000 $t
     /tmp/ccTJyLFK.s:3928   .text.HAL_DFSDM_FilterInjConvCpltCallback:00000000 $t
     /tmp/ccTJyLFK.s:3933   .text.HAL_DFSDM_FilterInjConvCpltCallback:00000000 HAL_DFSDM_FilterInjConvCpltCallback
     /tmp/ccTJyLFK.s:3946   .text.DFSDM_DMAInjectedConvCplt:00000000 $t
     /tmp/ccTJyLFK.s:3974   .text.HAL_DFSDM_FilterInjConvHalfCpltCallback:00000000 $t
     /tmp/ccTJyLFK.s:3979   .text.HAL_DFSDM_FilterInjConvHalfCpltCallback:00000000 HAL_DFSDM_FilterInjConvHalfCpltCallback
     /tmp/ccTJyLFK.s:3992   .text.DFSDM_DMAInjectedHalfConvCplt:00000000 $t
     /tmp/ccTJyLFK.s:4020   .text.HAL_DFSDM_FilterAwdCallback:00000000 $t
     /tmp/ccTJyLFK.s:4025   .text.HAL_DFSDM_FilterAwdCallback:00000000 HAL_DFSDM_FilterAwdCallback
     /tmp/ccTJyLFK.s:4038   .text.HAL_DFSDM_FilterErrorCallback:00000000 $t
     /tmp/ccTJyLFK.s:4043   .text.HAL_DFSDM_FilterErrorCallback:00000000 HAL_DFSDM_FilterErrorCallback
     /tmp/ccTJyLFK.s:4056   .text.HAL_DFSDM_FilterPollForRegConversion:00000000 $t
     /tmp/ccTJyLFK.s:4061   .text.HAL_DFSDM_FilterPollForRegConversion:00000000 HAL_DFSDM_FilterPollForRegConversion
     /tmp/ccTJyLFK.s:4189   .text.DFSDM_DMAError:00000000 $t
     /tmp/ccTJyLFK.s:4219   .text.HAL_DFSDM_FilterPollForInjConversion:00000000 $t
     /tmp/ccTJyLFK.s:4224   .text.HAL_DFSDM_FilterPollForInjConversion:00000000 HAL_DFSDM_FilterPollForInjConversion
     /tmp/ccTJyLFK.s:4365   .text.HAL_DFSDM_IRQHandler:00000000 $t
     /tmp/ccTJyLFK.s:4370   .text.HAL_DFSDM_IRQHandler:00000000 HAL_DFSDM_IRQHandler
     /tmp/ccTJyLFK.s:4718   .text.HAL_DFSDM_IRQHandler:000001bc $d
     /tmp/ccTJyLFK.s:4725   .text.HAL_DFSDM_FilterGetState:00000000 $t
     /tmp/ccTJyLFK.s:4730   .text.HAL_DFSDM_FilterGetState:00000000 HAL_DFSDM_FilterGetState
     /tmp/ccTJyLFK.s:4746   .text.HAL_DFSDM_FilterGetError:00000000 $t
     /tmp/ccTJyLFK.s:4751   .text.HAL_DFSDM_FilterGetError:00000000 HAL_DFSDM_FilterGetError
     /tmp/ccTJyLFK.s:4780   .bss.a_dfsdm1ChannelHandle:00000000 a_dfsdm1ChannelHandle
     /tmp/ccTJyLFK.s:4773   .bss.v_dfsdm1ChannelCounter:00000000 v_dfsdm1ChannelCounter
     /tmp/ccTJyLFK.s:4769   .bss.v_dfsdm1ChannelCounter:00000000 $d
     /tmp/ccTJyLFK.s:4776   .bss.a_dfsdm1ChannelHandle:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccTJyLFK.s 			page 151


HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
