ARM GAS  /tmp/cceEaETB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_rcc_ex.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_RCCEx_PeriphCLKConfig,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_RCCEx_PeriphCLKConfig
  23              		.thumb
  24              		.thumb_func
  26              	HAL_RCCEx_PeriphCLKConfig:
  27              	.LFB136:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal_rcc_ex.c"
   1:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @file    stm32f7xx_hal_rcc_ex.c
   4:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @brief   Extension RCC HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *          functionalities RCC extension peripheral:
   8:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *           + Extended Peripheral Control functions
   9:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *  
  10:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   ******************************************************************************
  11:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @attention
  12:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *
  13:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  14:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *
  15:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  16:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * are permitted provided that the following conditions are met:
  17:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *      this list of conditions and the following disclaimer.
  19:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  21:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *      and/or other materials provided with the distribution.
  22:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *      may be used to endorse or promote products derived from this software
  24:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *      without specific prior written permission.
  25:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *
  26:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /tmp/cceEaETB.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *
  37:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   ******************************************************************************
  38:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */ 
  39:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
  40:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /* Includes ------------------------------------------------------------------*/
  41:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #include "stm32f7xx_hal.h"
  42:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
  43:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /** @addtogroup STM32F7xx_HAL_Driver
  44:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @{
  45:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
  46:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
  47:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /** @defgroup RCCEx RCCEx
  48:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @brief RCCEx HAL module driver
  49:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @{
  50:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
  51:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
  52:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #ifdef HAL_RCC_MODULE_ENABLED
  53:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
  54:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  55:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /* Private define ------------------------------------------------------------*/
  56:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Private_Defines RCCEx Private Defines
  57:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @{
  58:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
  59:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
  60:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @}
  61:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
  62:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /* Private macro -------------------------------------------------------------*/
  63:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Private_Macros RCCEx Private Macros
  64:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  * @{
  65:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  */
  66:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
  67:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @}
  68:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
  69:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
  70:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Private_Macros RCCEx Private Macros
  71:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  * @{
  72:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  */
  73:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
  74:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
  75:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @}
  76:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
  77:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
  78:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
  79:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /* Private variables ---------------------------------------------------------*/
  80:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /* Private function prototypes -----------------------------------------------*/
  81:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /* Private functions ---------------------------------------------------------*/
  82:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
  83:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Exported_Functions RCCEx Exported Functions
  84:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @{
  85:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
  86:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
  87:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Exported_Functions_Group1 Extended Peripheral Control functions 
ARM GAS  /tmp/cceEaETB.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  *  @brief  Extended Peripheral Control functions  
  89:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  *
  90:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** @verbatim   
  91:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  ===============================================================================
  92:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                 ##### Extended Peripheral Control functions  #####
  93:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  ===============================================================================  
  94:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     [..]
  95:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
  96:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     frequencies.
  97:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     [..] 
  98:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     (@) Important note: Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to
  99:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         select the RTC clock source; in this case the Backup domain will be reset in  
 100:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         order to modify the RTC Clock source, as consequence RTC registers (including 
 101:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         the backup registers) and RCC_BDCR register will be set to their reset values.
 102:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       
 103:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** @endverbatim
 104:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @{
 105:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
 106:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined (STM32F745xx) || defined (STM32F746xx) || defined (STM32F756xx) || defined (STM32F765xx
 107:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx
 108:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
 109:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified
 110:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         parameters in the RCC_PeriphCLKInitTypeDef.
 111:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
 112:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals
 113:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         clocks(I2S, SAI, LTDC, RTC, TIM, UARTs, USARTs, LTPIM, SDMMC...).
 114:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         
 115:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select 
 116:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         the RTC clock source; in this case the Backup domain will be reset in  
 117:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         order to modify the RTC Clock source, as consequence RTC registers (including 
 118:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         the backup registers) are set to their reset values.
 119:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *
 120:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @retval HAL status
 121:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
 122:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
 123:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** {
  29              		.loc 1 123 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 20
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 83B0     		sub	sp, sp, #12
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 32
  45 0004 0446     		mov	r4, r0
  46              	.LVL1:
 124:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tickstart = 0;
 125:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tmpreg0 = 0;
 126:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0;
ARM GAS  /tmp/cceEaETB.s 			page 4


 127:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t plli2sused = 0;
 128:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t pllsaiused = 0;
 129:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 130:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Check the parameters */
 131:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 132:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 133:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*----------------------------------- I2S configuration ----------------------------------*/
 134:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
  47              		.loc 1 134 0
  48 0006 0368     		ldr	r3, [r0]
  49 0008 13F0010F 		tst	r3, #1
  50 000c 0CD0     		beq	.L59
 135:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 136:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 137:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 138:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 139:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure I2S Clock source */
 140:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
  51              		.loc 1 140 0
  52 000e 4E4B     		ldr	r3, .L77
  53 0010 9A68     		ldr	r2, [r3, #8]
  54 0012 22F40002 		bic	r2, r2, #8388608
  55 0016 9A60     		str	r2, [r3, #8]
  56 0018 9968     		ldr	r1, [r3, #8]
  57 001a 426B     		ldr	r2, [r0, #52]
  58 001c 0A43     		orrs	r2, r2, r1
  59 001e 9A60     		str	r2, [r3, #8]
 141:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 142:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for I2S */
 143:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
  60              		.loc 1 143 0
  61 0020 436B     		ldr	r3, [r0, #52]
  62 0022 1BB1     		cbz	r3, .L60
 127:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t pllsaiused = 0;
  63              		.loc 1 127 0
  64 0024 0027     		movs	r7, #0
  65 0026 02E0     		b	.L2
  66              	.L59:
  67 0028 0027     		movs	r7, #0
  68 002a 00E0     		b	.L2
  69              	.L60:
 144:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 145:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       plli2sused = 1; 
  70              		.loc 1 145 0
  71 002c 0127     		movs	r7, #1
  72              	.L2:
  73              	.LVL2:
 146:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 147:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 148:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 149:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------ SAI1 configuration --------------------------------------*
 150:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
  74              		.loc 1 150 0
  75 002e 2368     		ldr	r3, [r4]
  76 0030 13F4002F 		tst	r3, #524288
  77 0034 10D0     		beq	.L61
 151:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
ARM GAS  /tmp/cceEaETB.s 			page 5


 152:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 153:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 154:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 155:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure SAI1 Clock source */
 156:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
  78              		.loc 1 156 0
  79 0036 4449     		ldr	r1, .L77
  80 0038 D1F88C30 		ldr	r3, [r1, #140]
  81 003c 23F44012 		bic	r2, r3, #3145728
  82 0040 E36B     		ldr	r3, [r4, #60]
  83 0042 1343     		orrs	r3, r3, r2
  84 0044 C1F88C30 		str	r3, [r1, #140]
 157:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
 158:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
  85              		.loc 1 158 0
  86 0048 E36B     		ldr	r3, [r4, #60]
  87 004a B3F5801F 		cmp	r3, #1048576
  88 004e 00D1     		bne	.L4
 159:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 160:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       plli2sused = 1; 
  89              		.loc 1 160 0
  90 0050 0127     		movs	r7, #1
  91              	.LVL3:
  92              	.L4:
 161:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 162:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
 163:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
  93              		.loc 1 163 0
  94 0052 1BB1     		cbz	r3, .L63
 128:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
  95              		.loc 1 128 0
  96 0054 0025     		movs	r5, #0
  97 0056 02E0     		b	.L3
  98              	.L61:
  99 0058 0025     		movs	r5, #0
 100 005a 00E0     		b	.L3
 101              	.L63:
 164:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 165:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       pllsaiused = 1; 
 102              		.loc 1 165 0
 103 005c 0125     		movs	r5, #1
 104              	.L3:
 105              	.LVL4:
 166:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 167:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 168:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 169:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------ SAI2 configuration --------------------------------------*
 170:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 106              		.loc 1 170 0
 107 005e 2368     		ldr	r3, [r4]
 108 0060 13F4801F 		tst	r3, #1048576
 109 0064 0FD0     		beq	.L5
 171:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 172:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 173:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 174:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 175:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure SAI2 Clock source */
ARM GAS  /tmp/cceEaETB.s 			page 6


 176:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 110              		.loc 1 176 0
 111 0066 3849     		ldr	r1, .L77
 112 0068 D1F88C30 		ldr	r3, [r1, #140]
 113 006c 23F44002 		bic	r2, r3, #12582912
 114 0070 236C     		ldr	r3, [r4, #64]
 115 0072 1343     		orrs	r3, r3, r2
 116 0074 C1F88C30 		str	r3, [r1, #140]
 177:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 178:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
 179:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 117              		.loc 1 179 0
 118 0078 236C     		ldr	r3, [r4, #64]
 119 007a B3F5800F 		cmp	r3, #4194304
 120 007e 00D1     		bne	.L6
 180:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 181:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       plli2sused = 1; 
 121              		.loc 1 181 0
 122 0080 0127     		movs	r7, #1
 123              	.LVL5:
 124              	.L6:
 182:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 183:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
 184:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 125              		.loc 1 184 0
 126 0082 03B9     		cbnz	r3, .L5
 185:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 186:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       pllsaiused = 1; 
 127              		.loc 1 186 0
 128 0084 0125     		movs	r5, #1
 129              	.LVL6:
 130              	.L5:
 187:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 188:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 189:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 190:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- SPDIF-RX Configuration ---------------------------------
 191:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 131              		.loc 1 191 0
 132 0086 2368     		ldr	r3, [r4]
 133 0088 13F0807F 		tst	r3, #16777216
 134 008c 00D0     		beq	.L7
 192:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {    
 193:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       plli2sused = 1; 
 135              		.loc 1 193 0
 136 008e 0127     		movs	r7, #1
 137              	.LVL7:
 138              	.L7:
 194:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }  
 195:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 196:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------ RTC configuration --------------------------------------*/
 197:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 139              		.loc 1 197 0
 140 0090 13F0200F 		tst	r3, #32
 141 0094 6AD0     		beq	.L8
 142              	.LBB2:
 198:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 199:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
ARM GAS  /tmp/cceEaETB.s 			page 7


 200:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 201:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 202:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
 203:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 143              		.loc 1 203 0
 144 0096 2C4B     		ldr	r3, .L77
 145 0098 1A6C     		ldr	r2, [r3, #64]
 146 009a 42F08052 		orr	r2, r2, #268435456
 147 009e 1A64     		str	r2, [r3, #64]
 148 00a0 1B6C     		ldr	r3, [r3, #64]
 149 00a2 03F08053 		and	r3, r3, #268435456
 150 00a6 0193     		str	r3, [sp, #4]
 151 00a8 019B     		ldr	r3, [sp, #4]
 152              	.LBE2:
 204:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 205:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
 206:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     PWR->CR1 |= PWR_CR1_DBP;
 153              		.loc 1 206 0
 154 00aa 284A     		ldr	r2, .L77+4
 155 00ac 1368     		ldr	r3, [r2]
 156 00ae 43F48073 		orr	r3, r3, #256
 157 00b2 1360     		str	r3, [r2]
 207:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 208:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Get Start Tick*/
 209:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 158              		.loc 1 209 0
 159 00b4 FFF7FEFF 		bl	HAL_GetTick
 160              	.LVL8:
 161 00b8 0646     		mov	r6, r0
 162              	.LVL9:
 210:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 211:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Wait for Backup domain Write protection disable */
 212:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 163              		.loc 1 212 0
 164 00ba 05E0     		b	.L9
 165              	.LVL10:
 166              	.L11:
 213:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 214:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 167              		.loc 1 214 0
 168 00bc FFF7FEFF 		bl	HAL_GetTick
 169              	.LVL11:
 170 00c0 801B     		subs	r0, r0, r6
 171 00c2 6428     		cmp	r0, #100
 172 00c4 00F28C82 		bhi	.L67
 173              	.L9:
 212:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 174              		.loc 1 212 0
 175 00c8 204B     		ldr	r3, .L77+4
 176 00ca 1B68     		ldr	r3, [r3]
 177 00cc 13F4807F 		tst	r3, #256
 178 00d0 F4D0     		beq	.L11
 215:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
 216:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 217:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 218:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 219:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/cceEaETB.s 			page 8


 220:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified */
 221:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 179              		.loc 1 221 0
 180 00d2 1D4B     		ldr	r3, .L77
 181 00d4 1B6F     		ldr	r3, [r3, #112]
 182              	.LVL12:
 222:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 223:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)
 183              		.loc 1 223 0
 184 00d6 13F44073 		ands	r3, r3, #768
 185              	.LVL13:
 186 00da 26D0     		beq	.L12
 187              		.loc 1 223 0 is_stmt 0 discriminator 1
 188 00dc 226B     		ldr	r2, [r4, #48]
 189 00de 02F44072 		and	r2, r2, #768
 190 00e2 9342     		cmp	r3, r2
 191 00e4 21D0     		beq	.L12
 224:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 225:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
 226:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 192              		.loc 1 226 0 is_stmt 1
 193 00e6 184B     		ldr	r3, .L77
 194              	.LVL14:
 195 00e8 1A6F     		ldr	r2, [r3, #112]
 196 00ea 22F44072 		bic	r2, r2, #768
 197              	.LVL15:
 227:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 228:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 229:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
 198              		.loc 1 229 0
 199 00ee 196F     		ldr	r1, [r3, #112]
 200 00f0 41F48031 		orr	r1, r1, #65536
 201 00f4 1967     		str	r1, [r3, #112]
 230:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
 202              		.loc 1 230 0
 203 00f6 196F     		ldr	r1, [r3, #112]
 204 00f8 21F48031 		bic	r1, r1, #65536
 205 00fc 1967     		str	r1, [r3, #112]
 231:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 232:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
 233:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg0;
 206              		.loc 1 233 0
 207 00fe 1A67     		str	r2, [r3, #112]
 234:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 235:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
 236:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 208              		.loc 1 236 0
 209 0100 1B6F     		ldr	r3, [r3, #112]
 210 0102 13F0010F 		tst	r3, #1
 211 0106 10D0     		beq	.L12
 237:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
 238:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* Get Start Tick*/
 239:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
 212              		.loc 1 239 0
 213 0108 FFF7FEFF 		bl	HAL_GetTick
 214              	.LVL16:
 215 010c 0646     		mov	r6, r0
ARM GAS  /tmp/cceEaETB.s 			page 9


 216              	.LVL17:
 240:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         
 241:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */  
 242:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 217              		.loc 1 242 0
 218 010e 07E0     		b	.L13
 219              	.LVL18:
 220              	.L14:
 243:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
 244:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 221              		.loc 1 244 0
 222 0110 FFF7FEFF 		bl	HAL_GetTick
 223              	.LVL19:
 224 0114 801B     		subs	r0, r0, r6
 225 0116 41F28833 		movw	r3, #5000
 226 011a 9842     		cmp	r0, r3
 227 011c 00F26282 		bhi	.L68
 228              	.L13:
 242:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
 229              		.loc 1 242 0
 230 0120 094B     		ldr	r3, .L77
 231 0122 1B6F     		ldr	r3, [r3, #112]
 232 0124 13F0020F 		tst	r3, #2
 233 0128 F2D0     		beq	.L14
 234              	.L12:
 245:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           {
 246:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
 247:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           }
 248:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
 249:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 250:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 251:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 235              		.loc 1 251 0
 236 012a 236B     		ldr	r3, [r4, #48]
 237 012c 03F44072 		and	r2, r3, #768
 238 0130 B2F5407F 		cmp	r2, #768
 239 0134 0ED1     		bne	.L15
 240              		.loc 1 251 0 is_stmt 0 discriminator 1
 241 0136 0448     		ldr	r0, .L77
 242 0138 8268     		ldr	r2, [r0, #8]
 243 013a 22F4F811 		bic	r1, r2, #2031616
 244 013e 044A     		ldr	r2, .L77+8
 245 0140 1A40     		ands	r2, r2, r3
 246 0142 0A43     		orrs	r2, r2, r1
 247 0144 8260     		str	r2, [r0, #8]
 248 0146 0AE0     		b	.L16
 249              	.L78:
 250              		.align	2
 251              	.L77:
 252 0148 00380240 		.word	1073887232
 253 014c 00700040 		.word	1073770496
 254 0150 FFFCFF0F 		.word	268434687
 255              	.L15:
 256              		.loc 1 251 0 discriminator 2
 257 0154 974A     		ldr	r2, .L79
 258 0156 9368     		ldr	r3, [r2, #8]
 259 0158 23F4F813 		bic	r3, r3, #2031616
ARM GAS  /tmp/cceEaETB.s 			page 10


 260 015c 9360     		str	r3, [r2, #8]
 261              	.L16:
 262              		.loc 1 251 0 discriminator 4
 263 015e 954A     		ldr	r2, .L79
 264 0160 116F     		ldr	r1, [r2, #112]
 265 0162 236B     		ldr	r3, [r4, #48]
 266 0164 C3F30B03 		ubfx	r3, r3, #0, #12
 267 0168 0B43     		orrs	r3, r3, r1
 268 016a 1367     		str	r3, [r2, #112]
 269              	.LVL20:
 270              	.L8:
 252:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 253:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 254:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------ TIM configuration --------------------------------------*/
 255:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 271              		.loc 1 255 0 is_stmt 1
 272 016c 2368     		ldr	r3, [r4]
 273 016e 13F0100F 		tst	r3, #16
 274 0172 0CD0     		beq	.L17
 256:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 257:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 258:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 259:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 260:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure Timer Prescaler */
 261:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 275              		.loc 1 261 0
 276 0174 8F4B     		ldr	r3, .L79
 277 0176 D3F88C20 		ldr	r2, [r3, #140]
 278 017a 22F08072 		bic	r2, r2, #16777216
 279 017e C3F88C20 		str	r2, [r3, #140]
 280 0182 D3F88C10 		ldr	r1, [r3, #140]
 281 0186 A26B     		ldr	r2, [r4, #56]
 282 0188 0A43     		orrs	r2, r2, r1
 283 018a C3F88C20 		str	r2, [r3, #140]
 284              	.L17:
 262:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 263:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 264:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- I2C1 Configuration -----------------------------------*/
 265:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 285              		.loc 1 265 0
 286 018e 2368     		ldr	r3, [r4]
 287 0190 13F4804F 		tst	r3, #16384
 288 0194 08D0     		beq	.L18
 266:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 267:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 268:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 269:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 270:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the I2C1 clock source */
 271:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 289              		.loc 1 271 0
 290 0196 8749     		ldr	r1, .L79
 291 0198 D1F89030 		ldr	r3, [r1, #144]
 292 019c 23F44032 		bic	r2, r3, #196608
 293 01a0 636E     		ldr	r3, [r4, #100]
 294 01a2 1343     		orrs	r3, r3, r2
 295 01a4 C1F89030 		str	r3, [r1, #144]
 296              	.L18:
ARM GAS  /tmp/cceEaETB.s 			page 11


 272:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 273:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 274:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- I2C2 Configuration -----------------------------------*/
 275:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 297              		.loc 1 275 0
 298 01a8 2368     		ldr	r3, [r4]
 299 01aa 13F4004F 		tst	r3, #32768
 300 01ae 08D0     		beq	.L19
 276:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 277:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 278:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 279:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 280:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the I2C2 clock source */
 281:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 301              		.loc 1 281 0
 302 01b0 8049     		ldr	r1, .L79
 303 01b2 D1F89030 		ldr	r3, [r1, #144]
 304 01b6 23F44022 		bic	r2, r3, #786432
 305 01ba A36E     		ldr	r3, [r4, #104]
 306 01bc 1343     		orrs	r3, r3, r2
 307 01be C1F89030 		str	r3, [r1, #144]
 308              	.L19:
 282:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 283:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 284:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- I2C3 Configuration -----------------------------------*/
 285:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 309              		.loc 1 285 0
 310 01c2 2368     		ldr	r3, [r4]
 311 01c4 13F4803F 		tst	r3, #65536
 312 01c8 08D0     		beq	.L20
 286:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 287:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 288:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 289:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 290:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the I2C3 clock source */
 291:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 313              		.loc 1 291 0
 314 01ca 7A49     		ldr	r1, .L79
 315 01cc D1F89030 		ldr	r3, [r1, #144]
 316 01d0 23F44012 		bic	r2, r3, #3145728
 317 01d4 E36E     		ldr	r3, [r4, #108]
 318 01d6 1343     		orrs	r3, r3, r2
 319 01d8 C1F89030 		str	r3, [r1, #144]
 320              	.L20:
 292:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 293:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 294:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- I2C4 Configuration -----------------------------------*/
 295:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 321              		.loc 1 295 0
 322 01dc 2368     		ldr	r3, [r4]
 323 01de 13F4003F 		tst	r3, #131072
 324 01e2 08D0     		beq	.L21
 296:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 297:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 298:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 299:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 300:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the I2C4 clock source */
ARM GAS  /tmp/cceEaETB.s 			page 12


 301:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 325              		.loc 1 301 0
 326 01e4 7349     		ldr	r1, .L79
 327 01e6 D1F89030 		ldr	r3, [r1, #144]
 328 01ea 23F44002 		bic	r2, r3, #12582912
 329 01ee 236F     		ldr	r3, [r4, #112]
 330 01f0 1343     		orrs	r3, r3, r2
 331 01f2 C1F89030 		str	r3, [r1, #144]
 332              	.L21:
 302:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 303:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 304:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- USART1 Configuration -----------------------------------
 305:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 333              		.loc 1 305 0
 334 01f6 2368     		ldr	r3, [r4]
 335 01f8 13F0400F 		tst	r3, #64
 336 01fc 08D0     		beq	.L22
 306:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 307:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 308:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 309:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 310:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the USART1 clock source */
 311:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 337              		.loc 1 311 0
 338 01fe 6D49     		ldr	r1, .L79
 339 0200 D1F89030 		ldr	r3, [r1, #144]
 340 0204 23F00302 		bic	r2, r3, #3
 341 0208 636C     		ldr	r3, [r4, #68]
 342 020a 1343     		orrs	r3, r3, r2
 343 020c C1F89030 		str	r3, [r1, #144]
 344              	.L22:
 312:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 313:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 314:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- USART2 Configuration -----------------------------------
 315:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 345              		.loc 1 315 0
 346 0210 2368     		ldr	r3, [r4]
 347 0212 13F0800F 		tst	r3, #128
 348 0216 08D0     		beq	.L23
 316:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 317:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 318:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 319:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 320:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the USART2 clock source */
 321:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 349              		.loc 1 321 0
 350 0218 6649     		ldr	r1, .L79
 351 021a D1F89030 		ldr	r3, [r1, #144]
 352 021e 23F00C02 		bic	r2, r3, #12
 353 0222 A36C     		ldr	r3, [r4, #72]
 354 0224 1343     		orrs	r3, r3, r2
 355 0226 C1F89030 		str	r3, [r1, #144]
 356              	.L23:
 322:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 323:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 324:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- USART3 Configuration -----------------------------------
 325:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
ARM GAS  /tmp/cceEaETB.s 			page 13


 357              		.loc 1 325 0
 358 022a 2368     		ldr	r3, [r4]
 359 022c 13F4807F 		tst	r3, #256
 360 0230 08D0     		beq	.L24
 326:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 327:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 328:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 329:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 330:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the USART3 clock source */
 331:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 361              		.loc 1 331 0
 362 0232 6049     		ldr	r1, .L79
 363 0234 D1F89030 		ldr	r3, [r1, #144]
 364 0238 23F03002 		bic	r2, r3, #48
 365 023c E36C     		ldr	r3, [r4, #76]
 366 023e 1343     		orrs	r3, r3, r2
 367 0240 C1F89030 		str	r3, [r1, #144]
 368              	.L24:
 332:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 333:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 334:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- UART4 Configuration -----------------------------------*
 335:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 369              		.loc 1 335 0
 370 0244 2368     		ldr	r3, [r4]
 371 0246 13F4007F 		tst	r3, #512
 372 024a 08D0     		beq	.L25
 336:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 337:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 338:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 339:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 340:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the UART4 clock source */
 341:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 373              		.loc 1 341 0
 374 024c 5949     		ldr	r1, .L79
 375 024e D1F89030 		ldr	r3, [r1, #144]
 376 0252 23F0C002 		bic	r2, r3, #192
 377 0256 236D     		ldr	r3, [r4, #80]
 378 0258 1343     		orrs	r3, r3, r2
 379 025a C1F89030 		str	r3, [r1, #144]
 380              	.L25:
 342:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 343:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 344:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- UART5 Configuration -----------------------------------*
 345:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 381              		.loc 1 345 0
 382 025e 2368     		ldr	r3, [r4]
 383 0260 13F4806F 		tst	r3, #1024
 384 0264 08D0     		beq	.L26
 346:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 347:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 348:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 349:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 350:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the UART5 clock source */
 351:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 385              		.loc 1 351 0
 386 0266 5349     		ldr	r1, .L79
 387 0268 D1F89030 		ldr	r3, [r1, #144]
ARM GAS  /tmp/cceEaETB.s 			page 14


 388 026c 23F44072 		bic	r2, r3, #768
 389 0270 636D     		ldr	r3, [r4, #84]
 390 0272 1343     		orrs	r3, r3, r2
 391 0274 C1F89030 		str	r3, [r1, #144]
 392              	.L26:
 352:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 353:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 354:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- USART6 Configuration -----------------------------------
 355:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 393              		.loc 1 355 0
 394 0278 2368     		ldr	r3, [r4]
 395 027a 13F4006F 		tst	r3, #2048
 396 027e 08D0     		beq	.L27
 356:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 357:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 358:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 359:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 360:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the USART6 clock source */
 361:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 397              		.loc 1 361 0
 398 0280 4C49     		ldr	r1, .L79
 399 0282 D1F89030 		ldr	r3, [r1, #144]
 400 0286 23F44062 		bic	r2, r3, #3072
 401 028a A36D     		ldr	r3, [r4, #88]
 402 028c 1343     		orrs	r3, r3, r2
 403 028e C1F89030 		str	r3, [r1, #144]
 404              	.L27:
 362:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 363:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 364:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- UART7 Configuration -----------------------------------*
 365:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 405              		.loc 1 365 0
 406 0292 2368     		ldr	r3, [r4]
 407 0294 13F4805F 		tst	r3, #4096
 408 0298 08D0     		beq	.L28
 366:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 367:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 368:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 369:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 370:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the UART7 clock source */
 371:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 409              		.loc 1 371 0
 410 029a 4649     		ldr	r1, .L79
 411 029c D1F89030 		ldr	r3, [r1, #144]
 412 02a0 23F44052 		bic	r2, r3, #12288
 413 02a4 E36D     		ldr	r3, [r4, #92]
 414 02a6 1343     		orrs	r3, r3, r2
 415 02a8 C1F89030 		str	r3, [r1, #144]
 416              	.L28:
 372:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 373:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 374:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- UART8 Configuration -----------------------------------*
 375:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 417              		.loc 1 375 0
 418 02ac 2368     		ldr	r3, [r4]
 419 02ae 13F4005F 		tst	r3, #8192
 420 02b2 08D0     		beq	.L29
ARM GAS  /tmp/cceEaETB.s 			page 15


 376:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 377:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 378:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 379:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 380:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the UART8 clock source */
 381:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 421              		.loc 1 381 0
 422 02b4 3F49     		ldr	r1, .L79
 423 02b6 D1F89030 		ldr	r3, [r1, #144]
 424 02ba 23F44042 		bic	r2, r3, #49152
 425 02be 236E     		ldr	r3, [r4, #96]
 426 02c0 1343     		orrs	r3, r3, r2
 427 02c2 C1F89030 		str	r3, [r1, #144]
 428              	.L29:
 382:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 383:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 384:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*--------------------------------------- CEC Configuration -----------------------------------*/
 385:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 429              		.loc 1 385 0
 430 02c6 2368     		ldr	r3, [r4]
 431 02c8 13F4800F 		tst	r3, #4194304
 432 02cc 08D0     		beq	.L30
 386:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 387:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 388:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 389:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 390:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the CEC clock source */
 391:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 433              		.loc 1 391 0
 434 02ce 3949     		ldr	r1, .L79
 435 02d0 D1F89030 		ldr	r3, [r1, #144]
 436 02d4 23F08062 		bic	r2, r3, #67108864
 437 02d8 A36F     		ldr	r3, [r4, #120]
 438 02da 1343     		orrs	r3, r3, r2
 439 02dc C1F89030 		str	r3, [r1, #144]
 440              	.L30:
 392:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 393:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 394:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- CK48 Configuration -----------------------------------*/
 395:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 441              		.loc 1 395 0
 442 02e0 2368     		ldr	r3, [r4]
 443 02e2 13F4001F 		tst	r3, #2097152
 444 02e6 0DD0     		beq	.L31
 396:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 397:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 398:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 399:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 400:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the CLK48 source */
 401:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 445              		.loc 1 401 0
 446 02e8 3249     		ldr	r1, .L79
 447 02ea D1F89030 		ldr	r3, [r1, #144]
 448 02ee 23F00062 		bic	r2, r3, #134217728
 449 02f2 E36F     		ldr	r3, [r4, #124]
 450 02f4 1343     		orrs	r3, r3, r2
 451 02f6 C1F89030 		str	r3, [r1, #144]
ARM GAS  /tmp/cceEaETB.s 			page 16


 402:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 403:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for CK48 */
 404:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 452              		.loc 1 404 0
 453 02fa E36F     		ldr	r3, [r4, #124]
 454 02fc B3F1006F 		cmp	r3, #134217728
 455 0300 00D1     		bne	.L31
 405:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 406:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       pllsaiused = 1; 
 456              		.loc 1 406 0
 457 0302 0125     		movs	r5, #1
 458              	.LVL21:
 459              	.L31:
 407:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 408:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 409:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 410:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- LTDC Configuration -----------------------------------*/
 411:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) 
 412:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 460              		.loc 1 412 0
 461 0304 2368     		ldr	r3, [r4]
 462 0306 13F0080F 		tst	r3, #8
 463 030a 00D0     		beq	.L32
 413:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 414:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     pllsaiused = 1; 
 464              		.loc 1 414 0
 465 030c 0125     		movs	r5, #1
 466              	.LVL22:
 467              	.L32:
 415:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 416:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
 417:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 418:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- LPTIM1 Configuration -----------------------------------
 419:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 468              		.loc 1 419 0
 469 030e 13F4802F 		tst	r3, #262144
 470 0312 08D0     		beq	.L33
 420:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 421:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 422:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 423:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 424:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the LTPIM1 clock source */
 425:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 471              		.loc 1 425 0
 472 0314 2749     		ldr	r1, .L79
 473 0316 D1F89030 		ldr	r3, [r1, #144]
 474 031a 23F04072 		bic	r2, r3, #50331648
 475 031e 636F     		ldr	r3, [r4, #116]
 476 0320 1343     		orrs	r3, r3, r2
 477 0322 C1F89030 		str	r3, [r1, #144]
 478              	.L33:
 426:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****    }
 427:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 428:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------- SDMMC1 Configuration ------------------------------------
 429:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 479              		.loc 1 429 0
 480 0326 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cceEaETB.s 			page 17


 481 0328 13F4000F 		tst	r3, #8388608
 482 032c 09D0     		beq	.L34
 430:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 431:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 432:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 433:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 434:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the SDMMC1 clock source */
 435:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 483              		.loc 1 435 0
 484 032e 2149     		ldr	r1, .L79
 485 0330 D1F89030 		ldr	r3, [r1, #144]
 486 0334 23F08052 		bic	r2, r3, #268435456
 487 0338 D4F88030 		ldr	r3, [r4, #128]
 488 033c 1343     		orrs	r3, r3, r2
 489 033e C1F89030 		str	r3, [r1, #144]
 490              	.L34:
 436:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 437:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 438:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx
 439:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------- SDMMC2 Configuration ------------------------------------
 440:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 491              		.loc 1 440 0
 492 0342 2368     		ldr	r3, [r4]
 493 0344 13F0806F 		tst	r3, #67108864
 494 0348 09D0     		beq	.L35
 441:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 442:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 443:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 444:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 445:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the SDMMC2 clock source */
 446:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 495              		.loc 1 446 0
 496 034a 1A49     		ldr	r1, .L79
 497 034c D1F89030 		ldr	r3, [r1, #144]
 498 0350 23F00052 		bic	r2, r3, #536870912
 499 0354 D4F88430 		ldr	r3, [r4, #132]
 500 0358 1343     		orrs	r3, r3, r2
 501 035a C1F89030 		str	r3, [r1, #144]
 502              	.L35:
 447:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 448:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 	
 449:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------- DFSDM1 Configuration ------------------------------------
 450:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 503              		.loc 1 450 0
 504 035e 2368     		ldr	r3, [r4]
 505 0360 13F0006F 		tst	r3, #134217728
 506 0364 09D0     		beq	.L36
 451:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 452:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 453:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 454:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 455:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the DFSDM1 interface clock source */
 456:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 507              		.loc 1 456 0
 508 0366 1349     		ldr	r1, .L79
 509 0368 D1F88C30 		ldr	r3, [r1, #140]
 510 036c 23F00072 		bic	r2, r3, #33554432
ARM GAS  /tmp/cceEaETB.s 			page 18


 511 0370 D4F88830 		ldr	r3, [r4, #136]
 512 0374 1343     		orrs	r3, r3, r2
 513 0376 C1F88C30 		str	r3, [r1, #140]
 514              	.L36:
 457:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 458:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 459:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------- DFSDM AUDIO Configuration -------------------------------
 460:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_A
 515              		.loc 1 460 0
 516 037a 2368     		ldr	r3, [r4]
 517 037c 13F0805F 		tst	r3, #268435456
 518 0380 09D0     		beq	.L37
 461:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 462:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 463:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 464:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 465:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the DFSDM interface clock source */
 466:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 519              		.loc 1 466 0
 520 0382 0C49     		ldr	r1, .L79
 521 0384 D1F88C30 		ldr	r3, [r1, #140]
 522 0388 23F08062 		bic	r2, r3, #67108864
 523 038c D4F88C30 		ldr	r3, [r4, #140]
 524 0390 1343     		orrs	r3, r3, r2
 525 0392 C1F88C30 		str	r3, [r1, #140]
 526              	.L37:
 467:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }  
 468:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
 469:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 470:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
 471:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-
 472:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 527              		.loc 1 472 0
 528 0396 27B9     		cbnz	r7, .L38
 529              		.loc 1 472 0 is_stmt 0 discriminator 1
 530 0398 2368     		ldr	r3, [r4]
 531 039a B3F1007F 		cmp	r3, #33554432
 532 039e 40F09480 		bne	.L39
 533              	.L38:
 473:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 474:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
 475:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();  
 534              		.loc 1 475 0 is_stmt 1
 535 03a2 044A     		ldr	r2, .L79
 536 03a4 1368     		ldr	r3, [r2]
 537 03a6 23F08063 		bic	r3, r3, #67108864
 538 03aa 1360     		str	r3, [r2]
 476:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 477:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Get Start Tick*/
 478:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 539              		.loc 1 478 0
 540 03ac FFF7FEFF 		bl	HAL_GetTick
 541              	.LVL23:
 542 03b0 0646     		mov	r6, r0
 543              	.LVL24:
 479:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 480:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
ARM GAS  /tmp/cceEaETB.s 			page 19


 481:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 544              		.loc 1 481 0
 545 03b2 07E0     		b	.L40
 546              	.L80:
 547              		.align	2
 548              	.L79:
 549 03b4 00380240 		.word	1073887232
 550              	.LVL25:
 551              	.L41:
 482:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 483:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 552              		.loc 1 483 0
 553 03b8 FFF7FEFF 		bl	HAL_GetTick
 554              	.LVL26:
 555 03bc 801B     		subs	r0, r0, r6
 556 03be 6428     		cmp	r0, #100
 557 03c0 00F21281 		bhi	.L71
 558              	.L40:
 481:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 559              		.loc 1 481 0
 560 03c4 8E4B     		ldr	r3, .L81
 561 03c6 1B68     		ldr	r3, [r3]
 562 03c8 13F0006F 		tst	r3, #134217728
 563 03cc F4D1     		bne	.L41
 484:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
 485:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */         
 486:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 487:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 488:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 489:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 490:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* check for common PLLI2S Parameters */
 491:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 492:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       
 493:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
 494:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (Peri
 564              		.loc 1 494 0
 565 03ce 2368     		ldr	r3, [r4]
 566 03d0 13F0010F 		tst	r3, #1
 567 03d4 13D0     		beq	.L42
 568              		.loc 1 494 0 is_stmt 0 discriminator 1
 569 03d6 636B     		ldr	r3, [r4, #52]
 570 03d8 8BB9     		cbnz	r3, .L42
 495:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 496:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* check for Parameters */
 497:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 498:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 499:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S 
 500:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 571              		.loc 1 500 0 is_stmt 1
 572 03da 8949     		ldr	r1, .L81
 573 03dc D1F88420 		ldr	r2, [r1, #132]
 574              	.LVL27:
 501:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 575              		.loc 1 501 0
 576 03e0 D1F88430 		ldr	r3, [r1, #132]
 577              	.LVL28:
 502:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
ARM GAS  /tmp/cceEaETB.s 			page 20


 503:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
 504:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
 505:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI
 578              		.loc 1 505 0
 579 03e4 6068     		ldr	r0, [r4, #4]
 580 03e6 02F44032 		and	r2, r2, #196608
 581              	.LVL29:
 582 03ea 42EA8012 		orr	r2, r2, r0, lsl #6
 583 03ee 03F07063 		and	r3, r3, #251658240
 584              	.LVL30:
 585 03f2 1343     		orrs	r3, r3, r2
 586 03f4 A268     		ldr	r2, [r4, #8]
 587 03f6 43EA0273 		orr	r3, r3, r2, lsl #28
 588 03fa C1F88430 		str	r3, [r1, #132]
 589              	.L42:
 506:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 507:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         
 508:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
 509:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (Pe
 590              		.loc 1 509 0
 591 03fe 2368     		ldr	r3, [r4]
 592 0400 13F4002F 		tst	r3, #524288
 593 0404 03D0     		beq	.L43
 594              		.loc 1 509 0 is_stmt 0 discriminator 1
 595 0406 E26B     		ldr	r2, [r4, #60]
 596 0408 B2F5801F 		cmp	r2, #1048576
 597 040c 06D0     		beq	.L44
 598              	.L43:
 599              		.loc 1 509 0 discriminator 3
 600 040e 13F4801F 		tst	r3, #1048576
 601 0412 1ED0     		beq	.L45
 510:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (Pe
 602              		.loc 1 510 0 is_stmt 1
 603 0414 236C     		ldr	r3, [r4, #64]
 604 0416 B3F5800F 		cmp	r3, #4194304
 605 041a 1AD1     		bne	.L45
 606              	.L44:
 511:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 512:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Check for PLLI2S Parameters */
 513:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 514:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Check for PLLI2S/DIVQ parameters */
 515:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 516:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****             
 517:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI
 518:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 607              		.loc 1 518 0
 608 041c 784A     		ldr	r2, .L81
 609 041e D2F88430 		ldr	r3, [r2, #132]
 610              	.LVL31:
 519:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 611              		.loc 1 519 0
 612 0422 D2F88410 		ldr	r1, [r2, #132]
 613              	.LVL32:
 520:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */      
 521:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
 522:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
 523:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
ARM GAS  /tmp/cceEaETB.s 			page 21


 524:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ
 614              		.loc 1 524 0
 615 0426 6068     		ldr	r0, [r4, #4]
 616 0428 03F44033 		and	r3, r3, #196608
 617              	.LVL33:
 618 042c 43EA8013 		orr	r3, r3, r0, lsl #6
 619 0430 E068     		ldr	r0, [r4, #12]
 620 0432 43EA0063 		orr	r3, r3, r0, lsl #24
 621 0436 01F0E041 		and	r1, r1, #1879048192
 622              	.LVL34:
 623 043a 0B43     		orrs	r3, r3, r1
 624 043c C2F88430 		str	r3, [r2, #132]
 525:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****    
 526:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
 527:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 625              		.loc 1 527 0
 626 0440 D2F88C30 		ldr	r3, [r2, #140]
 627 0444 23F01F01 		bic	r1, r3, #31
 628 0448 636A     		ldr	r3, [r4, #36]
 629 044a 013B     		subs	r3, r3, #1
 630 044c 0B43     		orrs	r3, r3, r1
 631 044e C2F88C30 		str	r3, [r2, #140]
 632              	.L45:
 528:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }          
 529:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 530:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX ----------------
 531:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 633              		.loc 1 531 0
 634 0452 2368     		ldr	r3, [r4]
 635 0454 13F0807F 		tst	r3, #16777216
 636 0458 11D0     		beq	.L46
 532:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 533:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* check for Parameters */
 534:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 535:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****      
 536:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configur
 537:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 637              		.loc 1 537 0
 638 045a 6948     		ldr	r0, .L81
 639 045c D0F88420 		ldr	r2, [r0, #132]
 640              	.LVL35:
 538:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 641              		.loc 1 538 0
 642 0460 D0F88430 		ldr	r3, [r0, #132]
 643              	.LVL36:
 539:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 540:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
 541:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
 542:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg
 644              		.loc 1 542 0
 645 0464 6668     		ldr	r6, [r4, #4]
 646              	.LVL37:
 647 0466 2169     		ldr	r1, [r4, #16]
 648 0468 0904     		lsls	r1, r1, #16
 649 046a 41EA8611 		orr	r1, r1, r6, lsl #6
 650 046e 02F07062 		and	r2, r2, #251658240
 651              	.LVL38:
ARM GAS  /tmp/cceEaETB.s 			page 22


 652 0472 0A43     		orrs	r2, r2, r1
 653 0474 03F0E043 		and	r3, r3, #1879048192
 654              	.LVL39:
 655 0478 1343     		orrs	r3, r3, r2
 656 047a C0F88430 		str	r3, [r0, #132]
 657              	.L46:
 543:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }  
 544:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****          
 545:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is just selected  -----------------*/  
 546:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 658              		.loc 1 546 0
 659 047e 2368     		ldr	r3, [r4]
 660 0480 13F0007F 		tst	r3, #33554432
 661 0484 0DD0     		beq	.L47
 547:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 548:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Check for Parameters */
 549:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 550:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 551:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 552:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 553:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 554:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
 555:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
 556:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, Periph
 662              		.loc 1 556 0
 663 0486 6268     		ldr	r2, [r4, #4]
 664 0488 2369     		ldr	r3, [r4, #16]
 665 048a 1B04     		lsls	r3, r3, #16
 666 048c 43EA8213 		orr	r3, r3, r2, lsl #6
 667 0490 E268     		ldr	r2, [r4, #12]
 668 0492 43EA0263 		orr	r3, r3, r2, lsl #24
 669 0496 A268     		ldr	r2, [r4, #8]
 670 0498 43EA0273 		orr	r3, r3, r2, lsl #28
 671 049c 584A     		ldr	r2, .L81
 672 049e C2F88430 		str	r3, [r2, #132]
 673              	.L47:
 557:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     } 
 558:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 559:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
 560:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
 674              		.loc 1 560 0
 675 04a2 574A     		ldr	r2, .L81
 676 04a4 1368     		ldr	r3, [r2]
 677 04a6 43F08063 		orr	r3, r3, #67108864
 678 04aa 1360     		str	r3, [r2]
 561:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 562:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Get Start Tick*/
 563:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 679              		.loc 1 563 0
 680 04ac FFF7FEFF 		bl	HAL_GetTick
 681              	.LVL40:
 682 04b0 0646     		mov	r6, r0
 683              	.LVL41:
 564:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 565:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
 566:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 684              		.loc 1 566 0
ARM GAS  /tmp/cceEaETB.s 			page 23


 685 04b2 05E0     		b	.L48
 686              	.LVL42:
 687              	.L49:
 567:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 568:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 688              		.loc 1 568 0
 689 04b4 FFF7FEFF 		bl	HAL_GetTick
 690              	.LVL43:
 691 04b8 801B     		subs	r0, r0, r6
 692 04ba 6428     		cmp	r0, #100
 693 04bc 00F29680 		bhi	.L72
 694              	.L48:
 566:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 695              		.loc 1 566 0
 696 04c0 4F4B     		ldr	r3, .L81
 697 04c2 1B68     		ldr	r3, [r3]
 698 04c4 13F0006F 		tst	r3, #134217728
 699 04c8 F4D0     		beq	.L49
 700              	.LVL44:
 701              	.L39:
 569:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
 570:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */                
 571:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 572:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 573:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 574:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   } 
 575:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 576:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
 577:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 
 578:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(pllsaiused == 1)
 702              		.loc 1 578 0
 703 04ca 002D     		cmp	r5, #0
 704 04cc 00F09080 		beq	.L73
 579:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 580:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Disable PLLSAI Clock */
 581:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_DISABLE(); 
 705              		.loc 1 581 0
 706 04d0 4B4A     		ldr	r2, .L81
 707 04d2 1368     		ldr	r3, [r2]
 708 04d4 23F08053 		bic	r3, r3, #268435456
 709 04d8 1360     		str	r3, [r2]
 582:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 583:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Get Start Tick*/
 584:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 710              		.loc 1 584 0
 711 04da FFF7FEFF 		bl	HAL_GetTick
 712              	.LVL45:
 713 04de 0546     		mov	r5, r0
 714              	.LVL46:
 585:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 586:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is disabled */
 587:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 715              		.loc 1 587 0
 716 04e0 05E0     		b	.L50
 717              	.LVL47:
 718              	.L51:
 588:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
ARM GAS  /tmp/cceEaETB.s 			page 24


 589:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 719              		.loc 1 589 0
 720 04e2 FFF7FEFF 		bl	HAL_GetTick
 721              	.LVL48:
 722 04e6 401B     		subs	r0, r0, r5
 723 04e8 6428     		cmp	r0, #100
 724 04ea 00F28380 		bhi	.L74
 725              	.L50:
 587:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 726              		.loc 1 587 0
 727 04ee 444B     		ldr	r3, .L81
 728 04f0 1B68     		ldr	r3, [r3]
 729 04f2 13F0005F 		tst	r3, #536870912
 730 04f6 F4D1     		bne	.L51
 590:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       { 
 591:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */        
 592:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 593:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 594:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     } 
 595:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 596:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the PLLSAI division factors */
 597:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 598:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 599:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
 600:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (Pe
 731              		.loc 1 600 0
 732 04f8 2368     		ldr	r3, [r4]
 733 04fa 13F4002F 		tst	r3, #524288
 734 04fe 01D0     		beq	.L52
 735              		.loc 1 600 0 is_stmt 0 discriminator 1
 736 0500 E26B     		ldr	r2, [r4, #60]
 737 0502 22B1     		cbz	r2, .L53
 738              	.L52:
 739              		.loc 1 600 0 discriminator 3
 740 0504 13F4801F 		tst	r3, #1048576
 741 0508 1DD0     		beq	.L54
 601:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (Pe
 742              		.loc 1 601 0 is_stmt 1
 743 050a 236C     		ldr	r3, [r4, #64]
 744 050c DBB9     		cbnz	r3, .L54
 745              	.L53:
 602:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 603:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* check for PLLSAIQ Parameter */
 604:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 605:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* check for PLLSAI/DIVQ Parameter */
 606:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 607:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 608:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuratio
 609:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 746              		.loc 1 609 0
 747 050e 3C4A     		ldr	r2, .L81
 748 0510 D2F88830 		ldr	r3, [r2, #136]
 749              	.LVL49:
 610:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 750              		.loc 1 610 0
 751 0514 D2F88810 		ldr	r1, [r2, #136]
 752              	.LVL50:
ARM GAS  /tmp/cceEaETB.s 			page 25


 611:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
 612:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
 613:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
 614:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAI
 753              		.loc 1 614 0
 754 0518 6069     		ldr	r0, [r4, #20]
 755 051a 03F44033 		and	r3, r3, #196608
 756              	.LVL51:
 757 051e 43EA8013 		orr	r3, r3, r0, lsl #6
 758 0522 A069     		ldr	r0, [r4, #24]
 759 0524 43EA0063 		orr	r3, r3, r0, lsl #24
 760 0528 01F0E041 		and	r1, r1, #1879048192
 761              	.LVL52:
 762 052c 0B43     		orrs	r3, r3, r1
 763 052e C2F88830 		str	r3, [r2, #136]
 615:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       
 616:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
 617:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 764              		.loc 1 617 0
 765 0532 D2F88C30 		ldr	r3, [r2, #140]
 766 0536 23F4F853 		bic	r3, r3, #7936
 767 053a A16A     		ldr	r1, [r4, #40]
 768 053c 0139     		subs	r1, r1, #1
 769 053e 43EA0123 		orr	r3, r3, r1, lsl #8
 770 0542 C2F88C30 		str	r3, [r2, #140]
 771              	.L54:
 618:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }           
 619:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 620:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------
 621:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* In Case of PLLI2S is selected as source clock for CK48 */ 
 622:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (P
 772              		.loc 1 622 0
 773 0546 2368     		ldr	r3, [r4]
 774 0548 13F4001F 		tst	r3, #2097152
 775 054c 15D0     		beq	.L55
 776              		.loc 1 622 0 is_stmt 0 discriminator 1
 777 054e E36F     		ldr	r3, [r4, #124]
 778 0550 B3F1006F 		cmp	r3, #134217728
 779 0554 11D1     		bne	.L55
 623:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 624:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* check for Parameters */
 625:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 626:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48
 627:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 780              		.loc 1 627 0 is_stmt 1
 781 0556 2A48     		ldr	r0, .L81
 782 0558 D0F88820 		ldr	r2, [r0, #136]
 783              	.LVL53:
 628:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 784              		.loc 1 628 0
 785 055c D0F88830 		ldr	r3, [r0, #136]
 786              	.LVL54:
 629:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       
 630:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Configure the PLLSAI division factors */
 631:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
 632:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
 633:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg
ARM GAS  /tmp/cceEaETB.s 			page 26


 787              		.loc 1 633 0
 788 0560 6569     		ldr	r5, [r4, #20]
 789              	.LVL55:
 790 0562 216A     		ldr	r1, [r4, #32]
 791 0564 0904     		lsls	r1, r1, #16
 792 0566 41EA8511 		orr	r1, r1, r5, lsl #6
 793 056a 02F07062 		and	r2, r2, #251658240
 794              	.LVL56:
 795 056e 0A43     		orrs	r2, r2, r1
 796 0570 03F0E043 		and	r3, r3, #1879048192
 797              	.LVL57:
 798 0574 1343     		orrs	r3, r3, r2
 799 0576 C0F88830 		str	r3, [r0, #136]
 800              	.L55:
 634:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }        
 635:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 636:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) 
 637:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*---------------------------- LTDC configuration -------------------------------*/
 638:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801              		.loc 1 638 0
 802 057a 2368     		ldr	r3, [r4]
 803 057c 13F0080F 		tst	r3, #8
 804 0580 19D0     		beq	.L56
 639:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 640:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 641:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 642:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       
 643:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LT
 644:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 805              		.loc 1 644 0
 806 0582 1F4A     		ldr	r2, .L81
 807 0584 D2F88830 		ldr	r3, [r2, #136]
 808              	.LVL58:
 645:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 809              		.loc 1 645 0
 810 0588 D2F88810 		ldr	r1, [r2, #136]
 811              	.LVL59:
 646:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       
 647:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
 648:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
 649:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
 650:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLS
 812              		.loc 1 650 0
 813 058c 6069     		ldr	r0, [r4, #20]
 814 058e 01F44031 		and	r1, r1, #196608
 815              	.LVL60:
 816 0592 41EA8011 		orr	r1, r1, r0, lsl #6
 817 0596 03F07063 		and	r3, r3, #251658240
 818              	.LVL61:
 819 059a 0B43     		orrs	r3, r3, r1
 820 059c E169     		ldr	r1, [r4, #28]
 821 059e 43EA0173 		orr	r3, r3, r1, lsl #28
 822 05a2 C2F88830 		str	r3, [r2, #136]
 651:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       
 652:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
 653:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 823              		.loc 1 653 0
ARM GAS  /tmp/cceEaETB.s 			page 27


 824 05a6 D2F88C30 		ldr	r3, [r2, #140]
 825 05aa 23F44031 		bic	r1, r3, #196608
 826 05ae E36A     		ldr	r3, [r4, #44]
 827 05b0 0B43     		orrs	r3, r3, r1
 828 05b2 C2F88C30 		str	r3, [r2, #140]
 829              	.L56:
 654:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }    
 655:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
 656:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 657:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable PLLSAI Clock */
 658:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_ENABLE();
 830              		.loc 1 658 0
 831 05b6 124A     		ldr	r2, .L81
 832 05b8 1368     		ldr	r3, [r2]
 833 05ba 43F08053 		orr	r3, r3, #268435456
 834 05be 1360     		str	r3, [r2]
 659:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 660:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Get Start Tick*/
 661:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 835              		.loc 1 661 0
 836 05c0 FFF7FEFF 		bl	HAL_GetTick
 837              	.LVL62:
 838 05c4 0446     		mov	r4, r0
 839              	.LVL63:
 662:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 663:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is ready */
 664:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 840              		.loc 1 664 0
 841 05c6 04E0     		b	.L57
 842              	.LVL64:
 843              	.L58:
 665:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 666:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 844              		.loc 1 666 0
 845 05c8 FFF7FEFF 		bl	HAL_GetTick
 846              	.LVL65:
 847 05cc 001B     		subs	r0, r0, r4
 848 05ce 6428     		cmp	r0, #100
 849 05d0 12D8     		bhi	.L75
 850              	.L57:
 664:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 851              		.loc 1 664 0
 852 05d2 0B4B     		ldr	r3, .L81
 853 05d4 1B68     		ldr	r3, [r3]
 854 05d6 13F0005F 		tst	r3, #536870912
 855 05da F5D0     		beq	.L58
 667:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       { 
 668:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */        
 669:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 670:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 671:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 672:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 673:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   return HAL_OK;
 856              		.loc 1 673 0
 857 05dc 0020     		movs	r0, #0
 858 05de 0CE0     		b	.L10
 859              	.LVL66:
ARM GAS  /tmp/cceEaETB.s 			page 28


 860              	.L67:
 216:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 861              		.loc 1 216 0
 862 05e0 0320     		movs	r0, #3
 863 05e2 0AE0     		b	.L10
 864              	.LVL67:
 865              	.L68:
 246:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           }
 866              		.loc 1 246 0
 867 05e4 0320     		movs	r0, #3
 868 05e6 08E0     		b	.L10
 869              	.L71:
 486:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 870              		.loc 1 486 0
 871 05e8 0320     		movs	r0, #3
 872 05ea 06E0     		b	.L10
 873              	.LVL68:
 874              	.L72:
 571:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 875              		.loc 1 571 0
 876 05ec 0320     		movs	r0, #3
 877 05ee 04E0     		b	.L10
 878              	.LVL69:
 879              	.L73:
 880              		.loc 1 673 0
 881 05f0 0020     		movs	r0, #0
 882 05f2 02E0     		b	.L10
 883              	.LVL70:
 884              	.L74:
 592:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 885              		.loc 1 592 0
 886 05f4 0320     		movs	r0, #3
 887 05f6 00E0     		b	.L10
 888              	.LVL71:
 889              	.L75:
 669:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 890              		.loc 1 669 0
 891 05f8 0320     		movs	r0, #3
 892              	.LVL72:
 893              	.L10:
 674:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** }
 894              		.loc 1 674 0
 895 05fa 03B0     		add	sp, sp, #12
 896              	.LCFI2:
 897              		.cfi_def_cfa_offset 20
 898              		@ sp needed
 899 05fc F0BD     		pop	{r4, r5, r6, r7, pc}
 900              	.LVL73:
 901              	.L82:
 902 05fe 00BF     		.align	2
 903              	.L81:
 904 0600 00380240 		.word	1073887232
 905              		.cfi_endproc
 906              	.LFE136:
 908              		.section	.text.HAL_RCCEx_GetPeriphCLKConfig,"ax",%progbits
 909              		.align	2
 910              		.global	HAL_RCCEx_GetPeriphCLKConfig
ARM GAS  /tmp/cceEaETB.s 			page 29


 911              		.thumb
 912              		.thumb_func
 914              	HAL_RCCEx_GetPeriphCLKConfig:
 915              	.LFB137:
 675:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 676:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
 677:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @brief  Get the RCC_PeriphCLKInitTypeDef according to the internal
 678:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         RCC configuration registers.
 679:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
 680:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @retval None
 681:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
 682:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
 683:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** {
 916              		.loc 1 683 0
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 0
 919              		@ frame_needed = 0, uses_anonymous_args = 0
 920              		@ link register save eliminated.
 921              	.LVL74:
 684:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tempreg = 0;
 685:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 686:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
 687:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx
 688:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 922              		.loc 1 688 0
 923 0000 5F4B     		ldr	r3, .L86
 924 0002 0360     		str	r3, [r0]
 689:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     |\
 690:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
 691:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_I2C4     |\
 692:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_I2C1     | RCC_PERIPHCLK_I2C2     |\
 693:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_I2C3     | RCC_PERIPHCLK_USART1   |\
 694:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_USART2   | RCC_PERIPHCLK_USART3   |\
 695:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_UART4    | RCC_PERIPHCLK_UART5    |\
 696:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
 697:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
 698:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
 699:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
 700:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #else  
 701:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 702:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     |\
 703:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
 704:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_I2C4     |\
 705:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_I2C1     | RCC_PERIPHCLK_I2C2     |\
 706:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_I2C3     | RCC_PERIPHCLK_USART1   |\
 707:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_USART2   | RCC_PERIPHCLK_USART3   |\
 708:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_UART4    | RCC_PERIPHCLK_UART5    |\
 709:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
 710:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
 711:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_CLK48;
 712:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
 713:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 714:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration -----------------------------------------------*/
 715:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
 925              		.loc 1 715 0
 926 0004 5F4B     		ldr	r3, .L86+4
 927 0006 D3F88420 		ldr	r2, [r3, #132]
ARM GAS  /tmp/cceEaETB.s 			page 30


 928 000a C2F38812 		ubfx	r2, r2, #6, #9
 929 000e 4260     		str	r2, [r0, #4]
 716:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI
 930              		.loc 1 716 0
 931 0010 D3F88420 		ldr	r2, [r3, #132]
 932 0014 C2F30142 		ubfx	r2, r2, #16, #2
 933 0018 0261     		str	r2, [r0, #16]
 717:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI
 934              		.loc 1 717 0
 935 001a D3F88420 		ldr	r2, [r3, #132]
 936 001e C2F30362 		ubfx	r2, r2, #24, #4
 937 0022 C260     		str	r2, [r0, #12]
 718:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
 938              		.loc 1 718 0
 939 0024 D3F88420 		ldr	r2, [r3, #132]
 940 0028 C2F30272 		ubfx	r2, r2, #28, #3
 941 002c 8260     		str	r2, [r0, #8]
 719:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 720:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the PLLSAI Clock configuration -----------------------------------------------*/
 721:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLS
 942              		.loc 1 721 0
 943 002e D3F88820 		ldr	r2, [r3, #136]
 944 0032 C2F38812 		ubfx	r2, r2, #6, #9
 945 0036 4261     		str	r2, [r0, #20]
 722:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLS
 946              		.loc 1 722 0
 947 0038 D3F88820 		ldr	r2, [r3, #136]
 948 003c C2F30142 		ubfx	r2, r2, #16, #2
 949 0040 0262     		str	r2, [r0, #32]
 723:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLS
 950              		.loc 1 723 0
 951 0042 D3F88820 		ldr	r2, [r3, #136]
 952 0046 C2F30362 		ubfx	r2, r2, #24, #4
 953 004a 8261     		str	r2, [r0, #24]
 724:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLS
 954              		.loc 1 724 0
 955 004c D3F88820 		ldr	r2, [r3, #136]
 956 0050 C2F30272 		ubfx	r2, r2, #28, #3
 957 0054 C261     		str	r2, [r0, #28]
 725:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 726:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
 727:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_
 958              		.loc 1 727 0
 959 0056 D3F88C20 		ldr	r2, [r3, #140]
 960 005a 02F01F02 		and	r2, r2, #31
 961 005e 4262     		str	r2, [r0, #36]
 728:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_
 962              		.loc 1 728 0
 963 0060 D3F88C20 		ldr	r2, [r3, #140]
 964 0064 C2F30422 		ubfx	r2, r2, #8, #5
 965 0068 8262     		str	r2, [r0, #40]
 729:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_
 966              		.loc 1 729 0
 967 006a D3F88C20 		ldr	r2, [r3, #140]
 968 006e C2F30142 		ubfx	r2, r2, #16, #2
 969 0072 C262     		str	r2, [r0, #44]
 730:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/cceEaETB.s 			page 31


 731:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the SAI1 clock configuration ----------------------------------------------*/
 732:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 970              		.loc 1 732 0
 971 0074 D3F88C20 		ldr	r2, [r3, #140]
 972 0078 02F44012 		and	r2, r2, #3145728
 973 007c C263     		str	r2, [r0, #60]
 733:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 734:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the SAI2 clock configuration ----------------------------------------------*/
 735:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 974              		.loc 1 735 0
 975 007e D3F88C20 		ldr	r2, [r3, #140]
 976 0082 02F44002 		and	r2, r2, #12582912
 977 0086 0264     		str	r2, [r0, #64]
 736:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 737:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the I2S clock configuration ------------------------------------------*/
 738:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 978              		.loc 1 738 0
 979 0088 9A68     		ldr	r2, [r3, #8]
 980 008a 02F40002 		and	r2, r2, #8388608
 981 008e 4263     		str	r2, [r0, #52]
 739:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 740:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the I2C1 clock configuration ------------------------------------------*/
 741:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 982              		.loc 1 741 0
 983 0090 D3F89020 		ldr	r2, [r3, #144]
 984 0094 02F44032 		and	r2, r2, #196608
 985 0098 4266     		str	r2, [r0, #100]
 742:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 743:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the I2C2 clock configuration ------------------------------------------*/
 744:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 986              		.loc 1 744 0
 987 009a D3F89020 		ldr	r2, [r3, #144]
 988 009e 02F44022 		and	r2, r2, #786432
 989 00a2 8266     		str	r2, [r0, #104]
 745:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 746:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the I2C3 clock configuration ------------------------------------------*/
 747:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 990              		.loc 1 747 0
 991 00a4 D3F89020 		ldr	r2, [r3, #144]
 992 00a8 02F44012 		and	r2, r2, #3145728
 993 00ac C266     		str	r2, [r0, #108]
 748:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 749:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the I2C4 clock configuration ------------------------------------------*/
 750:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 994              		.loc 1 750 0
 995 00ae D3F89020 		ldr	r2, [r3, #144]
 996 00b2 02F44002 		and	r2, r2, #12582912
 997 00b6 0267     		str	r2, [r0, #112]
 751:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 752:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the USART1 clock configuration ------------------------------------------*/
 753:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 998              		.loc 1 753 0
 999 00b8 D3F89020 		ldr	r2, [r3, #144]
 1000 00bc 02F00302 		and	r2, r2, #3
 1001 00c0 4264     		str	r2, [r0, #68]
 754:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 755:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the USART2 clock configuration ------------------------------------------*/
ARM GAS  /tmp/cceEaETB.s 			page 32


 756:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 1002              		.loc 1 756 0
 1003 00c2 D3F89020 		ldr	r2, [r3, #144]
 1004 00c6 02F00C02 		and	r2, r2, #12
 1005 00ca 8264     		str	r2, [r0, #72]
 757:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 758:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the USART3 clock configuration ------------------------------------------*/
 759:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 1006              		.loc 1 759 0
 1007 00cc D3F89020 		ldr	r2, [r3, #144]
 1008 00d0 02F03002 		and	r2, r2, #48
 1009 00d4 C264     		str	r2, [r0, #76]
 760:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 761:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the UART4 clock configuration ------------------------------------------*/
 762:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 1010              		.loc 1 762 0
 1011 00d6 D3F89020 		ldr	r2, [r3, #144]
 1012 00da 02F0C002 		and	r2, r2, #192
 1013 00de 0265     		str	r2, [r0, #80]
 763:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 764:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the UART5 clock configuration ------------------------------------------*/
 765:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 1014              		.loc 1 765 0
 1015 00e0 D3F89020 		ldr	r2, [r3, #144]
 1016 00e4 02F44072 		and	r2, r2, #768
 1017 00e8 4265     		str	r2, [r0, #84]
 766:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 767:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the USART6 clock configuration ------------------------------------------*/
 768:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 1018              		.loc 1 768 0
 1019 00ea D3F89020 		ldr	r2, [r3, #144]
 1020 00ee 02F44062 		and	r2, r2, #3072
 1021 00f2 8265     		str	r2, [r0, #88]
 769:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 770:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the UART7 clock configuration ------------------------------------------*/
 771:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 1022              		.loc 1 771 0
 1023 00f4 D3F89020 		ldr	r2, [r3, #144]
 1024 00f8 02F44052 		and	r2, r2, #12288
 1025 00fc C265     		str	r2, [r0, #92]
 772:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 773:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the UART8 clock configuration ------------------------------------------*/
 774:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 1026              		.loc 1 774 0
 1027 00fe D3F89020 		ldr	r2, [r3, #144]
 1028 0102 02F44042 		and	r2, r2, #49152
 1029 0106 0266     		str	r2, [r0, #96]
 775:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 776:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the LPTIM1 clock configuration ------------------------------------------*/
 777:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 1030              		.loc 1 777 0
 1031 0108 D3F89020 		ldr	r2, [r3, #144]
 1032 010c 02F04072 		and	r2, r2, #50331648
 1033 0110 4267     		str	r2, [r0, #116]
 778:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 779:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the CEC clock configuration -----------------------------------------------*/
 780:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
ARM GAS  /tmp/cceEaETB.s 			page 33


 1034              		.loc 1 780 0
 1035 0112 D3F89020 		ldr	r2, [r3, #144]
 1036 0116 02F08062 		and	r2, r2, #67108864
 1037 011a 8267     		str	r2, [r0, #120]
 781:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 782:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the CK48 clock configuration -----------------------------------------------*/
 783:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 1038              		.loc 1 783 0
 1039 011c D3F89020 		ldr	r2, [r3, #144]
 1040 0120 02F00062 		and	r2, r2, #134217728
 1041 0124 C267     		str	r2, [r0, #124]
 784:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 785:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the SDMMC1 clock configuration -----------------------------------------------*/
 786:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 1042              		.loc 1 786 0
 1043 0126 D3F89020 		ldr	r2, [r3, #144]
 1044 012a 02F08052 		and	r2, r2, #268435456
 1045 012e C0F88020 		str	r2, [r0, #128]
 787:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 788:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx
 789:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the SDMMC2 clock configuration -----------------------------------------------*/
 790:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 1046              		.loc 1 790 0
 1047 0132 D3F89020 		ldr	r2, [r3, #144]
 1048 0136 02F00052 		and	r2, r2, #536870912
 1049 013a C0F88420 		str	r2, [r0, #132]
 791:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 	
 792:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the DFSDM clock configuration -----------------------------------------------*/
 793:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 1050              		.loc 1 793 0
 1051 013e D3F88C20 		ldr	r2, [r3, #140]
 1052 0142 02F00072 		and	r2, r2, #33554432
 1053 0146 C0F88820 		str	r2, [r0, #136]
 794:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 795:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
 796:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 1054              		.loc 1 796 0
 1055 014a D3F88C20 		ldr	r2, [r3, #140]
 1056 014e 02F08062 		and	r2, r2, #67108864
 1057 0152 C0F88C20 		str	r2, [r0, #140]
 797:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
 798:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 799:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------------*/
 800:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 1058              		.loc 1 800 0
 1059 0156 9A68     		ldr	r2, [r3, #8]
 1060 0158 02F4F811 		and	r1, r2, #2031616
 1061              	.LVL75:
 801:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 1062              		.loc 1 801 0
 1063 015c 1A6F     		ldr	r2, [r3, #112]
 1064 015e 02F44072 		and	r2, r2, #768
 1065 0162 0A43     		orrs	r2, r2, r1
 1066 0164 0263     		str	r2, [r0, #48]
 802:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 803:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the TIM Prescaler configuration --------------------------------------------*/
 804:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
ARM GAS  /tmp/cceEaETB.s 			page 34


 1067              		.loc 1 804 0
 1068 0166 D3F88C30 		ldr	r3, [r3, #140]
 1069 016a 13F0807F 		tst	r3, #16777216
 1070 016e 02D1     		bne	.L84
 805:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 806:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 1071              		.loc 1 806 0
 1072 0170 0023     		movs	r3, #0
 1073 0172 8363     		str	r3, [r0, #56]
 1074 0174 7047     		bx	lr
 1075              	.L84:
 807:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 808:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   else
 809:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 810:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 1076              		.loc 1 810 0
 1077 0176 4FF08073 		mov	r3, #16777216
 1078 017a 8363     		str	r3, [r0, #56]
 1079 017c 7047     		bx	lr
 1080              	.L87:
 1081 017e 00BF     		.align	2
 1082              	.L86:
 1083 0180 F1FFFF1C 		.word	486539249
 1084 0184 00380240 		.word	1073887232
 1085              		.cfi_endproc
 1086              	.LFE137:
 1088              		.section	.text.HAL_RCCEx_GetPeriphCLKFreq,"ax",%progbits
 1089              		.align	2
 1090              		.global	HAL_RCCEx_GetPeriphCLKFreq
 1091              		.thumb
 1092              		.thumb_func
 1094              	HAL_RCCEx_GetPeriphCLKFreq:
 1095              	.LFB138:
 811:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 812:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** }
 813:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* STM32F745xx || STM32F746xx || STM32F756xx || STM32F765xx || STM32F767xx || STM32F769xx ||
 814:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 815:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined (STM32F722xx) || defined (STM32F723xx) || defined (STM32F732xx) || defined (STM32F733xx
 816:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
 817:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified
 818:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         parameters in the RCC_PeriphCLKInitTypeDef.
 819:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
 820:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals
 821:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         clocks(I2S, SAI, RTC, TIM, UARTs, USARTs, LTPIM, SDMMC...).
 822:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         
 823:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select 
 824:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         the RTC clock source; in this case the Backup domain will be reset in  
 825:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         order to modify the RTC Clock source, as consequence RTC registers (including 
 826:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         the backup registers) are set to their reset values.
 827:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *
 828:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @retval HAL status
 829:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
 830:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
 831:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** {
 832:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tickstart = 0;
 833:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tmpreg0 = 0;
 834:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t plli2sused = 0;
ARM GAS  /tmp/cceEaETB.s 			page 35


 835:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t pllsaiused = 0;
 836:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 837:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Check the parameters */
 838:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 839:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 840:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*----------------------------------- I2S configuration ----------------------------------*/
 841:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 842:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 843:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 844:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 845:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 846:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure I2S Clock source */
 847:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 848:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 849:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for I2S */
 850:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 851:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 852:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       plli2sused = 1; 
 853:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 854:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 855:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 856:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------ SAI1 configuration --------------------------------------*
 857:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 858:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 859:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 860:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 861:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 862:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure SAI1 Clock source */
 863:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 864:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
 865:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 866:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 867:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       plli2sused = 1; 
 868:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 869:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
 870:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 871:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 872:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       pllsaiused = 1; 
 873:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 874:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 875:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 876:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------ SAI2 configuration --------------------------------------*
 877:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 878:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 879:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 880:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 881:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 882:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure SAI2 Clock source */
 883:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 884:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 885:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
 886:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 887:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 888:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       plli2sused = 1; 
 889:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 890:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
 891:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
ARM GAS  /tmp/cceEaETB.s 			page 36


 892:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 893:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       pllsaiused = 1; 
 894:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 895:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 896:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 897:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------ RTC configuration --------------------------------------*/
 898:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 899:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 900:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
 901:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 902:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 903:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
 904:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 905:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 906:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
 907:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     PWR->CR1 |= PWR_CR1_DBP;
 908:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 909:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Get Start Tick*/
 910:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 911:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 912:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Wait for Backup domain Write protection disable */
 913:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 914:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 915:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 916:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
 917:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 918:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 919:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 920:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 921:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified */
 922:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 923:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 924:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)
 925:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
 926:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
 927:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 928:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 929:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 930:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
 931:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
 932:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 933:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
 934:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg0;
 935:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 936:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
 937:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 938:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
 939:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* Get Start Tick*/
 940:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
 941:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         
 942:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */  
 943:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 944:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
 945:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 946:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           {
 947:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
 948:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           }
ARM GAS  /tmp/cceEaETB.s 			page 37


 949:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
 950:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
 951:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 952:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 953:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 954:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 955:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------ TIM configuration --------------------------------------*/
 956:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 957:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 958:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 959:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 960:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 961:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure Timer Prescaler */
 962:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 963:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 964:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 965:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- I2C1 Configuration -----------------------------------*/
 966:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 967:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 968:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 969:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 970:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 971:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the I2C1 clock source */
 972:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 973:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 974:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 975:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- I2C2 Configuration -----------------------------------*/
 976:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 977:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 978:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 979:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 980:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 981:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the I2C2 clock source */
 982:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 983:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 984:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
 985:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- I2C3 Configuration -----------------------------------*/
 986:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 987:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 988:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 989:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 990:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
 991:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the I2C3 clock source */
 992:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 993:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
 994:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
 995:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- USART1 Configuration -----------------------------------
 996:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 997:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
 998:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
 999:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
1000:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1001:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the USART1 clock source */
1002:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
1003:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1004:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1005:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- USART2 Configuration -----------------------------------
ARM GAS  /tmp/cceEaETB.s 			page 38


1006:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
1007:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1008:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
1009:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
1010:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1011:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the USART2 clock source */
1012:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
1013:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1014:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1015:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- USART3 Configuration -----------------------------------
1016:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
1017:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1018:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
1019:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
1020:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1021:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the USART3 clock source */
1022:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
1023:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1024:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1025:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- UART4 Configuration -----------------------------------*
1026:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
1027:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1028:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
1029:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
1030:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1031:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the UART4 clock source */
1032:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
1033:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1034:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1035:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- UART5 Configuration -----------------------------------*
1036:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
1037:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1038:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
1039:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
1040:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1041:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the UART5 clock source */
1042:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
1043:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1044:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1045:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- USART6 Configuration -----------------------------------
1046:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
1047:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1048:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
1049:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
1050:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1051:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the USART6 clock source */
1052:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
1053:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1054:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1055:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- UART7 Configuration -----------------------------------*
1056:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
1057:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1058:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
1059:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
1060:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1061:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the UART7 clock source */
1062:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
ARM GAS  /tmp/cceEaETB.s 			page 39


1063:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1064:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1065:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- UART8 Configuration -----------------------------------*
1066:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
1067:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1068:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
1069:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
1070:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1071:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the UART8 clock source */
1072:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
1073:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1074:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1075:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- CK48 Configuration -----------------------------------*/
1076:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
1077:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1078:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
1079:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
1080:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1081:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the CLK48 source */
1082:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
1083:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1084:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for CK48 */
1085:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
1086:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1087:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       pllsaiused = 1; 
1088:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1089:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1090:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1091:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- LPTIM1 Configuration -----------------------------------
1092:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
1093:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1094:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
1095:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
1096:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1097:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the LTPIM1 clock source */
1098:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
1099:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****    }
1100:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1101:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------- SDMMC1 Configuration ------------------------------------
1102:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
1103:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1104:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
1105:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
1106:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1107:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the SDMMC1 clock source */
1108:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
1109:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1110:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****    
1111:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*------------------------------------- SDMMC2 Configuration ------------------------------------
1112:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
1113:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1114:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the parameters */
1115:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
1116:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1117:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Configure the SDMMC2 clock source */
1118:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
1119:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
ARM GAS  /tmp/cceEaETB.s 			page 40


1120:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1121:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
1122:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
1123:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
1124:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1125:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
1126:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();  
1127:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1128:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Get Start Tick*/
1129:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1130:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1131:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
1132:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
1133:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1134:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
1135:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
1136:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */         
1137:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1138:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1139:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1140:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1141:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* check for common PLLI2S Parameters */
1142:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
1143:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       
1144:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
1145:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (Peri
1146:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1147:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* check for Parameters */
1148:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
1149:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1150:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuratio
1151:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
1152:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
1153:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
1154:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
1155:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2S
1156:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1157:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         
1158:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
1159:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (Pe
1160:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (Pe
1161:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1162:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Check for PLLI2S Parameters */
1163:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
1164:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Check for PLLI2S/DIVQ parameters */
1165:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
1166:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****             
1167:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI
1168:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
1169:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */      
1170:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
1171:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1172:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
1173:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0
1174:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****    
1175:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
1176:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
ARM GAS  /tmp/cceEaETB.s 			page 41


1177:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     } 
1178:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****          
1179:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is just selected  -----------------*/  
1180:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
1181:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1182:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Check for Parameters */
1183:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
1184:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
1185:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1186:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
1187:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
1188:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, Periph
1189:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     } 
1190:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1191:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
1192:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
1193:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1194:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Get Start Tick*/
1195:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1196:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1197:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
1198:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
1199:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1200:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
1201:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
1202:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */                
1203:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1204:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1205:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1206:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   } 
1207:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1208:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
1209:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 
1210:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if(pllsaiused == 1)
1211:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1212:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Disable PLLSAI Clock */
1213:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_DISABLE(); 
1214:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1215:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Get Start Tick*/
1216:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1217:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1218:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is disabled */
1219:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
1220:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1221:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
1222:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       { 
1223:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */        
1224:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1225:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1226:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     } 
1227:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1228:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Check the PLLSAI division factors */
1229:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
1230:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1231:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
1232:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (Pe
1233:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (Pe
ARM GAS  /tmp/cceEaETB.s 			page 42


1234:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1235:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* check for PLLSAIQ Parameter */
1236:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
1237:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* check for PLLSAI/DIVQ Parameter */
1238:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
1239:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1240:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuratio
1241:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
1242:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
1243:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
1244:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
1245:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAI
1246:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       
1247:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
1248:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
1249:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }           
1250:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1251:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------
1252:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* In Case of PLLI2S is selected as source clock for CK48 */ 
1253:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (P
1254:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1255:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* check for Parameters */
1256:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
1257:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48
1258:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
1259:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       
1260:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* Configure the PLLSAI division factors */
1261:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
1262:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
1263:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg
1264:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1265:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1266:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Enable PLLSAI Clock */
1267:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_ENABLE();
1268:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     
1269:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Get Start Tick*/
1270:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1271:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1272:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is ready */
1273:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
1274:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1275:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
1276:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       { 
1277:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */        
1278:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1279:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1280:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1281:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1282:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   return HAL_OK;
1283:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** }
1284:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1285:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
1286:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @brief  Get the RCC_PeriphCLKInitTypeDef according to the internal
1287:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         RCC configuration registers.
1288:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
1289:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @retval None
1290:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
ARM GAS  /tmp/cceEaETB.s 			page 43


1291:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
1292:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** {
1293:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tempreg = 0;
1294:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1295:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
1296:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
1297:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     |\
1298:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
1299:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_I2C1     | RCC_PERIPHCLK_I2C2     |\
1300:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_I2C3     | RCC_PERIPHCLK_USART1   |\
1301:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_USART2   | RCC_PERIPHCLK_USART3   |\
1302:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_UART4    | RCC_PERIPHCLK_UART5    |\
1303:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
1304:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
1305:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2;
1306:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1307:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration -----------------------------------------------*/
1308:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
1309:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI
1310:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
1311:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1312:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the PLLSAI Clock configuration -----------------------------------------------*/
1313:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLS
1314:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLS
1315:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLS
1316:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1317:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
1318:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_
1319:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_
1320:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1321:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the SAI1 clock configuration ----------------------------------------------*/
1322:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
1323:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1324:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the SAI2 clock configuration ----------------------------------------------*/
1325:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
1326:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1327:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the I2S clock configuration ------------------------------------------*/
1328:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
1329:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1330:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the I2C1 clock configuration ------------------------------------------*/
1331:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
1332:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1333:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the I2C2 clock configuration ------------------------------------------*/
1334:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
1335:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1336:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the I2C3 clock configuration ------------------------------------------*/
1337:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
1338:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1339:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the USART1 clock configuration ------------------------------------------*/
1340:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
1341:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1342:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the USART2 clock configuration ------------------------------------------*/
1343:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
1344:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1345:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the USART3 clock configuration ------------------------------------------*/
1346:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
1347:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
ARM GAS  /tmp/cceEaETB.s 			page 44


1348:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the UART4 clock configuration ------------------------------------------*/
1349:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
1350:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1351:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the UART5 clock configuration ------------------------------------------*/
1352:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
1353:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1354:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the USART6 clock configuration ------------------------------------------*/
1355:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
1356:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1357:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the UART7 clock configuration ------------------------------------------*/
1358:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
1359:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1360:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the UART8 clock configuration ------------------------------------------*/
1361:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
1362:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1363:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the LPTIM1 clock configuration ------------------------------------------*/
1364:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
1365:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1366:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the CK48 clock configuration -----------------------------------------------*/
1367:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
1368:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1369:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the SDMMC1 clock configuration -----------------------------------------------*/
1370:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
1371:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1372:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the SDMMC2 clock configuration -----------------------------------------------*/
1373:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
1374:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1375:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------------*/
1376:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
1377:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
1378:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1379:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Get the TIM Prescaler configuration --------------------------------------------*/
1380:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
1381:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1382:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
1383:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1384:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   else
1385:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1386:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
1387:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1388:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** }
1389:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* STM32F722xx || STM32F723xx || STM32F732xx || STM32F733xx */
1390:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1391:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
1392:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(SAI..) 
1393:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
1394:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
1395:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
1396:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
1397:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
1398:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
1399:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
1400:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
1401:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** {
 1096              		.loc 1 1401 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cceEaETB.s 			page 45


 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              		@ link register save eliminated.
 1101              	.LVL76:
 1102 0000 30B4     		push	{r4, r5}
 1103              	.LCFI3:
 1104              		.cfi_def_cfa_offset 8
 1105              		.cfi_offset 4, -8
 1106              		.cfi_offset 5, -4
 1107              	.LVL77:
1402:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tmpreg = 0;
1403:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* This variable is used to store the SAI clock frequency (value in Hz) */
1404:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t frequency = 0;
1405:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* This variable is used to store the VCO Input (value in Hz) */
1406:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0;
1407:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* This variable is used to store the SAI clock source */
1408:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t saiclocksource = 0;
1409:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1410:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if (PeriphClk == RCC_PERIPHCLK_SAI1)
 1108              		.loc 1 1410 0
 1109 0002 B0F5002F 		cmp	r0, #524288
 1110 0006 6BD1     		bne	.L109
1411:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1412:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     saiclocksource = RCC->DCKCFGR1;   
 1111              		.loc 1 1412 0
 1112 0008 724B     		ldr	r3, .L115
 1113 000a D3F88C30 		ldr	r3, [r3, #140]
 1114              	.LVL78:
1413:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 1115              		.loc 1 1413 0
 1116 000e 03F44013 		and	r3, r3, #3145728
 1117              	.LVL79:
1414:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     switch (saiclocksource)
 1118              		.loc 1 1414 0
 1119 0012 B3F5801F 		cmp	r3, #1048576
 1120 0016 33D0     		beq	.L91
 1121 0018 01D8     		bhi	.L92
 1122 001a 43B1     		cbz	r3, .L93
 1123 001c 05E0     		b	.L90
 1124              	.L92:
 1125 001e B3F5001F 		cmp	r3, #2097152
 1126 0022 5FD0     		beq	.L110
 1127 0024 B3F5401F 		cmp	r3, #3145728
 1128 0028 53D0     		beq	.L94
 1129              	.L90:
1404:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* This variable is used to store the VCO Input (value in Hz) */
 1130              		.loc 1 1404 0
 1131 002a 0023     		movs	r3, #0
 1132              	.LVL80:
 1133 002c 5DE0     		b	.L89
 1134              	.LVL81:
 1135              	.L93:
1415:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1416:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     case 0: /* PLLSAI is the clock source for SAI1 */ 
1417:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
1418:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* Configure the PLLSAI division factor */
1419:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
1420:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
ARM GAS  /tmp/cceEaETB.s 			page 46


 1136              		.loc 1 1420 0
 1137 002e 694B     		ldr	r3, .L115
 1138              	.LVL82:
 1139 0030 5B68     		ldr	r3, [r3, #4]
 1140 0032 13F4800F 		tst	r3, #4194304
 1141 0036 07D1     		bne	.L95
1421:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1422:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the PLL Source is HSI (Internal Clock) */
1423:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 1142              		.loc 1 1423 0
 1143 0038 664B     		ldr	r3, .L115
 1144 003a 5B68     		ldr	r3, [r3, #4]
 1145 003c 03F03F02 		and	r2, r3, #63
 1146 0040 654B     		ldr	r3, .L115+4
 1147 0042 B3FBF2F3 		udiv	r3, r3, r2
 1148              	.LVL83:
 1149 0046 06E0     		b	.L96
 1150              	.LVL84:
 1151              	.L95:
1424:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
1425:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         else
1426:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1427:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the PLL Source is HSE (External Clock) */
1428:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 1152              		.loc 1 1428 0
 1153 0048 624B     		ldr	r3, .L115
 1154 004a 5B68     		ldr	r3, [r3, #4]
 1155 004c 03F03F02 		and	r2, r3, #63
 1156 0050 624B     		ldr	r3, .L115+8
 1157 0052 B3FBF2F3 		udiv	r3, r3, r2
 1158              	.LVL85:
 1159              	.L96:
1429:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }   
1430:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
1431:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
1432:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 1160              		.loc 1 1432 0
 1161 0056 5F4C     		ldr	r4, .L115
 1162 0058 D4F88850 		ldr	r5, [r4, #136]
 1163 005c C5F30365 		ubfx	r5, r5, #24, #4
 1164              	.LVL86:
1433:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 1165              		.loc 1 1433 0
 1166 0060 D4F88810 		ldr	r1, [r4, #136]
 1167 0064 C1F38811 		ubfx	r1, r1, #6, #9
 1168 0068 01FB03F3 		mul	r3, r1, r3
 1169              	.LVL87:
 1170 006c B3FBF5F2 		udiv	r2, r3, r5
 1171              	.LVL88:
1434:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         
1435:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
1436:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 1172              		.loc 1 1436 0
 1173 0070 D4F88C30 		ldr	r3, [r4, #140]
 1174 0074 C3F30423 		ubfx	r3, r3, #8, #5
 1175 0078 0133     		adds	r3, r3, #1
 1176              	.LVL89:
ARM GAS  /tmp/cceEaETB.s 			page 47


1437:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         frequency = frequency/(tmpreg); 
 1177              		.loc 1 1437 0
 1178 007a B2FBF3F3 		udiv	r3, r2, r3
 1179              	.LVL90:
1438:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;       
 1180              		.loc 1 1438 0
 1181 007e 34E0     		b	.L89
 1182              	.LVL91:
 1183              	.L91:
1439:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1440:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     case RCC_DCKCFGR1_SAI1SEL_0: /* PLLI2S is the clock source for SAI1 */
1441:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {  
1442:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* Configure the PLLI2S division factor */
1443:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
1444:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 1184              		.loc 1 1444 0
 1185 0080 544B     		ldr	r3, .L115
 1186              	.LVL92:
 1187 0082 5B68     		ldr	r3, [r3, #4]
 1188 0084 13F4800F 		tst	r3, #4194304
 1189 0088 07D1     		bne	.L97
1445:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1446:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the PLL Source is HSI (Internal Clock) */
1447:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 1190              		.loc 1 1447 0
 1191 008a 524B     		ldr	r3, .L115
 1192 008c 5B68     		ldr	r3, [r3, #4]
 1193 008e 03F03F02 		and	r2, r3, #63
 1194 0092 514B     		ldr	r3, .L115+4
 1195 0094 B3FBF2F3 		udiv	r3, r3, r2
 1196              	.LVL93:
 1197 0098 06E0     		b	.L98
 1198              	.LVL94:
 1199              	.L97:
1448:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
1449:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         else
1450:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1451:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the PLL Source is HSE (External Clock) */
1452:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 1200              		.loc 1 1452 0
 1201 009a 4E4B     		ldr	r3, .L115
 1202 009c 5B68     		ldr	r3, [r3, #4]
 1203 009e 03F03F02 		and	r2, r3, #63
 1204 00a2 4E4B     		ldr	r3, .L115+8
 1205 00a4 B3FBF2F3 		udiv	r3, r3, r2
 1206              	.LVL95:
 1207              	.L98:
1453:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
1454:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         
1455:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1456:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
1457:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 1208              		.loc 1 1457 0
 1209 00a8 4A4C     		ldr	r4, .L115
 1210 00aa D4F88450 		ldr	r5, [r4, #132]
 1211 00ae C5F30365 		ubfx	r5, r5, #24, #4
 1212              	.LVL96:
ARM GAS  /tmp/cceEaETB.s 			page 48


1458:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 1213              		.loc 1 1458 0
 1214 00b2 D4F88410 		ldr	r1, [r4, #132]
 1215 00b6 C1F38811 		ubfx	r1, r1, #6, #9
 1216 00ba 01FB03F3 		mul	r3, r1, r3
 1217              	.LVL97:
 1218 00be B3FBF5F2 		udiv	r2, r3, r5
 1219              	.LVL98:
1459:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         
1460:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
1461:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 1220              		.loc 1 1461 0
 1221 00c2 D4F88C30 		ldr	r3, [r4, #140]
 1222 00c6 03F01F03 		and	r3, r3, #31
 1223 00ca 0133     		adds	r3, r3, #1
 1224              	.LVL99:
1462:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         frequency = frequency/(tmpreg);
 1225              		.loc 1 1462 0
 1226 00cc B2FBF3F3 		udiv	r3, r2, r3
 1227              	.LVL100:
1463:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;
 1228              		.loc 1 1463 0
 1229 00d0 0BE0     		b	.L89
 1230              	.LVL101:
 1231              	.L94:
1464:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1465:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     case RCC_DCKCFGR1_SAI1SEL_1: /* External clock is the clock source for SAI1 */
1466:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
1467:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         frequency = EXTERNAL_CLOCK_VALUE;
1468:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;       
1469:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1470:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx
1471:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     case RCC_DCKCFGR1_SAI1SEL: /* HSI or HSE is the clock source for SAI*/
1472:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
1473:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 1232              		.loc 1 1473 0
 1233 00d2 404B     		ldr	r3, .L115
 1234              	.LVL102:
 1235 00d4 5B68     		ldr	r3, [r3, #4]
 1236 00d6 13F4800F 		tst	r3, #4194304
 1237 00da 05D1     		bne	.L111
1474:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1475:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the main PLL Source is HSI */
1476:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           frequency = HSI_VALUE;
 1238              		.loc 1 1476 0
 1239 00dc 3E4B     		ldr	r3, .L115+4
 1240 00de 04E0     		b	.L89
 1241              	.LVL103:
 1242              	.L109:
1404:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* This variable is used to store the VCO Input (value in Hz) */
 1243              		.loc 1 1404 0
 1244 00e0 0023     		movs	r3, #0
 1245 00e2 02E0     		b	.L89
 1246              	.LVL104:
 1247              	.L110:
1467:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;       
 1248              		.loc 1 1467 0
ARM GAS  /tmp/cceEaETB.s 			page 49


 1249 00e4 3E4B     		ldr	r3, .L115+12
 1250              	.LVL105:
 1251 00e6 00E0     		b	.L89
 1252              	.L111:
1477:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
1478:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         else
1479:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1480:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the main PLL Source is HSE */
1481:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           frequency = HSE_VALUE;
 1253              		.loc 1 1481 0
 1254 00e8 3C4B     		ldr	r3, .L115+8
 1255              	.LVL106:
 1256              	.L89:
1482:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
1483:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;       
1484:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1485:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
1486:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     default :
1487:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
1488:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;
1489:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1490:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1491:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1492:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1493:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   if (PeriphClk == RCC_PERIPHCLK_SAI2)
 1257              		.loc 1 1493 0
 1258 00ea B0F5801F 		cmp	r0, #1048576
 1259 00ee 6DD1     		bne	.L99
1494:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1495:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     saiclocksource = RCC->DCKCFGR1;   
 1260              		.loc 1 1495 0
 1261 00f0 384A     		ldr	r2, .L115
 1262 00f2 D2F88C20 		ldr	r2, [r2, #140]
 1263              	.LVL107:
1496:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 1264              		.loc 1 1496 0
 1265 00f6 02F44002 		and	r2, r2, #12582912
 1266              	.LVL108:
1497:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     switch (saiclocksource)
 1267              		.loc 1 1497 0
 1268 00fa B2F5800F 		cmp	r2, #4194304
 1269 00fe 32D0     		beq	.L101
 1270 0100 01D8     		bhi	.L102
 1271 0102 3AB1     		cbz	r2, .L103
 1272 0104 62E0     		b	.L99
 1273              	.L102:
 1274 0106 B2F5000F 		cmp	r2, #8388608
 1275 010a 5CD0     		beq	.L112
 1276 010c B2F5400F 		cmp	r2, #12582912
 1277 0110 52D0     		beq	.L104
 1278 0112 5BE0     		b	.L99
 1279              	.L103:
1498:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1499:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     case 0: /* PLLSAI is the clock source for SAI*/ 
1500:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
1501:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* Configure the PLLSAI division factor */
1502:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
ARM GAS  /tmp/cceEaETB.s 			page 50


1503:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 1280              		.loc 1 1503 0
 1281 0114 2F4B     		ldr	r3, .L115
 1282              	.LVL109:
 1283 0116 5B68     		ldr	r3, [r3, #4]
 1284 0118 13F4800F 		tst	r3, #4194304
 1285 011c 07D1     		bne	.L105
1504:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1505:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the PLL Source is HSI (Internal Clock) */
1506:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 1286              		.loc 1 1506 0
 1287 011e 2D4B     		ldr	r3, .L115
 1288 0120 5B68     		ldr	r3, [r3, #4]
 1289 0122 03F03F02 		and	r2, r3, #63
 1290              	.LVL110:
 1291 0126 2C4B     		ldr	r3, .L115+4
 1292 0128 B3FBF2F3 		udiv	r3, r3, r2
 1293              	.LVL111:
 1294 012c 06E0     		b	.L106
 1295              	.LVL112:
 1296              	.L105:
1507:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
1508:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         else
1509:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1510:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the PLL Source is HSE (External Clock) */
1511:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 1297              		.loc 1 1511 0
 1298 012e 294B     		ldr	r3, .L115
 1299 0130 5B68     		ldr	r3, [r3, #4]
 1300 0132 03F03F02 		and	r2, r3, #63
 1301              	.LVL113:
 1302 0136 294B     		ldr	r3, .L115+8
 1303 0138 B3FBF2F3 		udiv	r3, r3, r2
 1304              	.LVL114:
 1305              	.L106:
1512:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }   
1513:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
1514:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
1515:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 1306              		.loc 1 1515 0
 1307 013c 254C     		ldr	r4, .L115
 1308 013e D4F88800 		ldr	r0, [r4, #136]
 1309              	.LVL115:
 1310 0142 C0F30360 		ubfx	r0, r0, #24, #4
 1311              	.LVL116:
1516:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 1312              		.loc 1 1516 0
 1313 0146 D4F88810 		ldr	r1, [r4, #136]
 1314 014a C1F38811 		ubfx	r1, r1, #6, #9
 1315 014e 01FB03F3 		mul	r3, r1, r3
 1316              	.LVL117:
 1317 0152 B3FBF0F2 		udiv	r2, r3, r0
 1318              	.LVL118:
1517:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         
1518:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
1519:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 1319              		.loc 1 1519 0
ARM GAS  /tmp/cceEaETB.s 			page 51


 1320 0156 D4F88C30 		ldr	r3, [r4, #140]
 1321 015a C3F30423 		ubfx	r3, r3, #8, #5
 1322 015e 0133     		adds	r3, r3, #1
 1323              	.LVL119:
1520:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         frequency = frequency/(tmpreg); 
 1324              		.loc 1 1520 0
 1325 0160 B2FBF3F3 		udiv	r3, r2, r3
 1326              	.LVL120:
1521:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;       
 1327              		.loc 1 1521 0
 1328 0164 32E0     		b	.L99
 1329              	.LVL121:
 1330              	.L101:
1522:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1523:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
1524:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {  
1525:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* Configure the PLLI2S division factor */
1526:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
1527:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 1331              		.loc 1 1527 0
 1332 0166 1B4B     		ldr	r3, .L115
 1333              	.LVL122:
 1334 0168 5B68     		ldr	r3, [r3, #4]
 1335 016a 13F4800F 		tst	r3, #4194304
 1336 016e 07D1     		bne	.L107
1528:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1529:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the PLL Source is HSI (Internal Clock) */
1530:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 1337              		.loc 1 1530 0
 1338 0170 184B     		ldr	r3, .L115
 1339 0172 5B68     		ldr	r3, [r3, #4]
 1340 0174 03F03F02 		and	r2, r3, #63
 1341              	.LVL123:
 1342 0178 174B     		ldr	r3, .L115+4
 1343 017a B3FBF2F3 		udiv	r3, r3, r2
 1344              	.LVL124:
 1345 017e 06E0     		b	.L108
 1346              	.LVL125:
 1347              	.L107:
1531:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
1532:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         else
1533:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1534:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the PLL Source is HSE (External Clock) */
1535:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 1348              		.loc 1 1535 0
 1349 0180 144B     		ldr	r3, .L115
 1350 0182 5B68     		ldr	r3, [r3, #4]
 1351 0184 03F03F02 		and	r2, r3, #63
 1352              	.LVL126:
 1353 0188 144B     		ldr	r3, .L115+8
 1354 018a B3FBF2F3 		udiv	r3, r3, r2
 1355              	.LVL127:
 1356              	.L108:
1536:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
1537:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         
1538:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1539:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
ARM GAS  /tmp/cceEaETB.s 			page 52


1540:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 1357              		.loc 1 1540 0
 1358 018e 114C     		ldr	r4, .L115
 1359 0190 D4F88400 		ldr	r0, [r4, #132]
 1360              	.LVL128:
 1361 0194 C0F30360 		ubfx	r0, r0, #24, #4
 1362              	.LVL129:
1541:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 1363              		.loc 1 1541 0
 1364 0198 D4F88410 		ldr	r1, [r4, #132]
 1365 019c C1F38811 		ubfx	r1, r1, #6, #9
 1366 01a0 01FB03F3 		mul	r3, r1, r3
 1367              	.LVL130:
 1368 01a4 B3FBF0F2 		udiv	r2, r3, r0
 1369              	.LVL131:
1542:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         
1543:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
1544:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 1370              		.loc 1 1544 0
 1371 01a8 D4F88C30 		ldr	r3, [r4, #140]
 1372 01ac 03F01F03 		and	r3, r3, #31
 1373 01b0 0133     		adds	r3, r3, #1
 1374              	.LVL132:
1545:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         frequency = frequency/(tmpreg);
 1375              		.loc 1 1545 0
 1376 01b2 B2FBF3F3 		udiv	r3, r2, r3
 1377              	.LVL133:
1546:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;
 1378              		.loc 1 1546 0
 1379 01b6 09E0     		b	.L99
 1380              	.LVL134:
 1381              	.L104:
1547:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1548:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
1549:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
1550:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         frequency = EXTERNAL_CLOCK_VALUE;
1551:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;       
1552:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1553:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx
1554:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     case RCC_DCKCFGR1_SAI2SEL: /* HSI or HSE is the clock source for SAI2 */
1555:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
1556:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 1382              		.loc 1 1556 0
 1383 01b8 064B     		ldr	r3, .L115
 1384              	.LVL135:
 1385 01ba 5B68     		ldr	r3, [r3, #4]
 1386 01bc 13F4800F 		tst	r3, #4194304
 1387 01c0 03D1     		bne	.L113
1557:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1558:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the main PLL Source is HSI */
1559:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           frequency = HSI_VALUE;
 1388              		.loc 1 1559 0
 1389 01c2 054B     		ldr	r3, .L115+4
 1390 01c4 02E0     		b	.L99
 1391              	.LVL136:
 1392              	.L112:
1550:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;       
ARM GAS  /tmp/cceEaETB.s 			page 53


 1393              		.loc 1 1550 0
 1394 01c6 064B     		ldr	r3, .L115+12
 1395              	.LVL137:
 1396 01c8 00E0     		b	.L99
 1397              	.L113:
1560:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
1561:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         else
1562:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         {
1563:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           /* In Case the main PLL Source is HSE */
1564:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****           frequency = HSE_VALUE;
 1398              		.loc 1 1564 0
 1399 01ca 044B     		ldr	r3, .L115+8
 1400              	.LVL138:
 1401              	.L99:
1565:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         }
1566:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;       
1567:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1568:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
1569:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     default :
1570:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       {
1571:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****         break;
1572:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       }
1573:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1574:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1575:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   
1576:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   return frequency;
1577:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** }
 1402              		.loc 1 1577 0
 1403 01cc 1846     		mov	r0, r3
 1404 01ce 30BC     		pop	{r4, r5}
 1405              	.LCFI4:
 1406              		.cfi_restore 5
 1407              		.cfi_restore 4
 1408              		.cfi_def_cfa_offset 0
 1409 01d0 7047     		bx	lr
 1410              	.L116:
 1411 01d2 00BF     		.align	2
 1412              	.L115:
 1413 01d4 00380240 		.word	1073887232
 1414 01d8 0024F400 		.word	16000000
 1415 01dc 00127A00 		.word	8000000
 1416 01e0 0080BB00 		.word	12288000
 1417              		.cfi_endproc
 1418              	.LFE138:
 1420              		.section	.text.HAL_RCCEx_EnablePLLI2S,"ax",%progbits
 1421              		.align	2
 1422              		.global	HAL_RCCEx_EnablePLLI2S
 1423              		.thumb
 1424              		.thumb_func
 1426              	HAL_RCCEx_EnablePLLI2S:
 1427              	.LFB139:
1578:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1579:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
1580:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @}
1581:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
1582:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1583:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Exported_Functions_Group2 Extended Clock management functions
ARM GAS  /tmp/cceEaETB.s 			page 54


1584:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  *  @brief  Extended Clock management functions
1585:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  *
1586:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** @verbatim   
1587:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  ===============================================================================
1588:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                 ##### Extended clock management functions  #####
1589:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  ===============================================================================
1590:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     [..]
1591:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     This subsection provides a set of functions allowing to control the 
1592:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     activation or deactivation of PLLI2S, PLLSAI.
1593:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** @endverbatim
1594:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @{
1595:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
1596:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1597:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
1598:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @brief  Enable PLLI2S.
1599:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
1600:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         contains the configuration information for the PLLI2S
1601:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @retval HAL status
1602:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
1603:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
1604:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** {
 1428              		.loc 1 1604 0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              	.LVL139:
 1433 0000 38B5     		push	{r3, r4, r5, lr}
 1434              	.LCFI5:
 1435              		.cfi_def_cfa_offset 16
 1436              		.cfi_offset 3, -16
 1437              		.cfi_offset 4, -12
 1438              		.cfi_offset 5, -8
 1439              		.cfi_offset 14, -4
 1440 0002 0546     		mov	r5, r0
1605:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tickstart;
1606:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1607:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Check for parameters */
1608:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SInit->PLLI2SN));
1609:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SInit->PLLI2SR));
1610:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
1611:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined(RCC_PLLI2SCFGR_PLLI2SP)
1612:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SInit->PLLI2SP));
1613:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* RCC_PLLI2SCFGR_PLLI2SP */
1614:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1615:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Disable the PLLI2S */
1616:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_DISABLE();
 1441              		.loc 1 1616 0
 1442 0004 1C4A     		ldr	r2, .L126
 1443 0006 1368     		ldr	r3, [r2]
 1444 0008 23F08063 		bic	r3, r3, #67108864
 1445 000c 1360     		str	r3, [r2]
1617:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1618:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Wait till PLLI2S is disabled */
1619:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 1446              		.loc 1 1619 0
 1447 000e FFF7FEFF 		bl	HAL_GetTick
 1448              	.LVL140:
ARM GAS  /tmp/cceEaETB.s 			page 55


 1449 0012 0446     		mov	r4, r0
 1450              	.LVL141:
1620:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 1451              		.loc 1 1620 0
 1452 0014 04E0     		b	.L118
 1453              	.LVL142:
 1454              	.L120:
1621:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1622:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 1455              		.loc 1 1622 0
 1456 0016 FFF7FEFF 		bl	HAL_GetTick
 1457              	.LVL143:
 1458 001a 001B     		subs	r0, r0, r4
 1459 001c 6428     		cmp	r0, #100
 1460 001e 26D8     		bhi	.L123
 1461              	.L118:
1620:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 1462              		.loc 1 1620 0
 1463 0020 154B     		ldr	r3, .L126
 1464 0022 1B68     		ldr	r3, [r3]
 1465 0024 13F0006F 		tst	r3, #134217728
 1466 0028 F5D1     		bne	.L120
1623:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1624:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
1625:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
1626:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1627:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1628:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1629:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Configure the PLLI2S division factors */
1630:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined (STM32F722xx) || defined (STM32F723xx) || defined (STM32F732xx) || defined (STM32F733xx
1631:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
1632:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
1633:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
1634:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
1635:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #else
1636:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
1637:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
1638:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
1639:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
1640:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit
 1467              		.loc 1 1640 0
 1468 002a 2A68     		ldr	r2, [r5]
 1469 002c EB68     		ldr	r3, [r5, #12]
 1470 002e 1B04     		lsls	r3, r3, #16
 1471 0030 43EA8213 		orr	r3, r3, r2, lsl #6
 1472 0034 AA68     		ldr	r2, [r5, #8]
 1473 0036 43EA0263 		orr	r3, r3, r2, lsl #24
 1474 003a 6A68     		ldr	r2, [r5, #4]
 1475 003c 43EA0273 		orr	r3, r3, r2, lsl #28
 1476 0040 0D4A     		ldr	r2, .L126
 1477 0042 C2F88430 		str	r3, [r2, #132]
1641:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* STM32F722xx || STM32F723xx || STM32F732xx || STM32F733xx */
1642:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1643:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Enable the PLLI2S */
1644:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_ENABLE();
 1478              		.loc 1 1644 0
 1479 0046 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cceEaETB.s 			page 56


 1480 0048 43F08063 		orr	r3, r3, #67108864
 1481 004c 1360     		str	r3, [r2]
1645:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1646:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Wait till PLLI2S is ready */
1647:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 1482              		.loc 1 1647 0
 1483 004e FFF7FEFF 		bl	HAL_GetTick
 1484              	.LVL144:
 1485 0052 0446     		mov	r4, r0
 1486              	.LVL145:
1648:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 1487              		.loc 1 1648 0
 1488 0054 04E0     		b	.L121
 1489              	.LVL146:
 1490              	.L122:
1649:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1650:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 1491              		.loc 1 1650 0
 1492 0056 FFF7FEFF 		bl	HAL_GetTick
 1493              	.LVL147:
 1494 005a 001B     		subs	r0, r0, r4
 1495 005c 6428     		cmp	r0, #100
 1496 005e 08D8     		bhi	.L124
 1497              	.L121:
1648:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 1498              		.loc 1 1648 0
 1499 0060 054B     		ldr	r3, .L126
 1500 0062 1B68     		ldr	r3, [r3]
 1501 0064 13F0006F 		tst	r3, #134217728
 1502 0068 F5D0     		beq	.L122
1651:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1652:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
1653:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
1654:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1655:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1656:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1657:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  return HAL_OK;
 1503              		.loc 1 1657 0
 1504 006a 0020     		movs	r0, #0
 1505 006c 38BD     		pop	{r3, r4, r5, pc}
 1506              	.LVL148:
 1507              	.L123:
1625:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 1508              		.loc 1 1625 0
 1509 006e 0320     		movs	r0, #3
 1510 0070 38BD     		pop	{r3, r4, r5, pc}
 1511              	.LVL149:
 1512              	.L124:
1653:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 1513              		.loc 1 1653 0
 1514 0072 0320     		movs	r0, #3
1658:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** }
 1515              		.loc 1 1658 0
 1516 0074 38BD     		pop	{r3, r4, r5, pc}
 1517              	.LVL150:
 1518              	.L127:
 1519 0076 00BF     		.align	2
ARM GAS  /tmp/cceEaETB.s 			page 57


 1520              	.L126:
 1521 0078 00380240 		.word	1073887232
 1522              		.cfi_endproc
 1523              	.LFE139:
 1525              		.section	.text.HAL_RCCEx_DisablePLLI2S,"ax",%progbits
 1526              		.align	2
 1527              		.global	HAL_RCCEx_DisablePLLI2S
 1528              		.thumb
 1529              		.thumb_func
 1531              	HAL_RCCEx_DisablePLLI2S:
 1532              	.LFB140:
1659:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1660:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
1661:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @brief  Disable PLLI2S.
1662:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @retval HAL status
1663:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
1664:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
1665:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** {
 1533              		.loc 1 1665 0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 0
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 1537 0000 10B5     		push	{r4, lr}
 1538              	.LCFI6:
 1539              		.cfi_def_cfa_offset 8
 1540              		.cfi_offset 4, -8
 1541              		.cfi_offset 14, -4
1666:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tickstart;
1667:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1668:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Disable the PLLI2S */
1669:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_DISABLE();
 1542              		.loc 1 1669 0
 1543 0002 0B4A     		ldr	r2, .L134
 1544 0004 1368     		ldr	r3, [r2]
 1545 0006 23F08063 		bic	r3, r3, #67108864
 1546 000a 1360     		str	r3, [r2]
1670:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1671:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Wait till PLLI2S is disabled */
1672:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 1547              		.loc 1 1672 0
 1548 000c FFF7FEFF 		bl	HAL_GetTick
 1549              	.LVL151:
 1550 0010 0446     		mov	r4, r0
 1551              	.LVL152:
1673:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 1552              		.loc 1 1673 0
 1553 0012 04E0     		b	.L129
 1554              	.LVL153:
 1555              	.L131:
1674:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1675:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 1556              		.loc 1 1675 0
 1557 0014 FFF7FEFF 		bl	HAL_GetTick
 1558              	.LVL154:
 1559 0018 001B     		subs	r0, r0, r4
 1560 001a 6428     		cmp	r0, #100
 1561 001c 06D8     		bhi	.L132
ARM GAS  /tmp/cceEaETB.s 			page 58


 1562              	.L129:
1673:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 1563              		.loc 1 1673 0
 1564 001e 044B     		ldr	r3, .L134
 1565 0020 1B68     		ldr	r3, [r3]
 1566 0022 13F0006F 		tst	r3, #134217728
 1567 0026 F5D1     		bne	.L131
1676:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1677:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
1678:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
1679:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1680:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1681:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1682:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   return HAL_OK;
 1568              		.loc 1 1682 0
 1569 0028 0020     		movs	r0, #0
 1570 002a 10BD     		pop	{r4, pc}
 1571              	.LVL155:
 1572              	.L132:
1678:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 1573              		.loc 1 1678 0
 1574 002c 0320     		movs	r0, #3
1683:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** }
 1575              		.loc 1 1683 0
 1576 002e 10BD     		pop	{r4, pc}
 1577              	.LVL156:
 1578              	.L135:
 1579              		.align	2
 1580              	.L134:
 1581 0030 00380240 		.word	1073887232
 1582              		.cfi_endproc
 1583              	.LFE140:
 1585              		.section	.text.HAL_RCCEx_EnablePLLSAI,"ax",%progbits
 1586              		.align	2
 1587              		.global	HAL_RCCEx_EnablePLLSAI
 1588              		.thumb
 1589              		.thumb_func
 1591              	HAL_RCCEx_EnablePLLSAI:
 1592              	.LFB141:
1684:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1685:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
1686:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @brief  Enable PLLSAI.
1687:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @param  PLLSAIInit  pointer to an RCC_PLLSAIInitTypeDef structure that
1688:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   *         contains the configuration information for the PLLSAI
1689:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @retval HAL status
1690:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
1691:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI(RCC_PLLSAIInitTypeDef  *PLLSAIInit)
1692:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** {
 1593              		.loc 1 1692 0
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 0
 1596              		@ frame_needed = 0, uses_anonymous_args = 0
 1597              	.LVL157:
 1598 0000 38B5     		push	{r3, r4, r5, lr}
 1599              	.LCFI7:
 1600              		.cfi_def_cfa_offset 16
 1601              		.cfi_offset 3, -16
ARM GAS  /tmp/cceEaETB.s 			page 59


 1602              		.cfi_offset 4, -12
 1603              		.cfi_offset 5, -8
 1604              		.cfi_offset 14, -4
 1605 0002 0546     		mov	r5, r0
1693:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tickstart;
1694:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1695:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Check for parameters */
1696:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIInit->PLLSAIN));
1697:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIInit->PLLSAIQ));
1698:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIInit->PLLSAIP));
1699:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined(RCC_PLLSAICFGR_PLLSAIR)
1700:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
1701:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* RCC_PLLSAICFGR_PLLSAIR */
1702:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1703:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Disable the PLLSAI */
1704:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_DISABLE();
 1606              		.loc 1 1704 0
 1607 0004 1C4A     		ldr	r2, .L145
 1608 0006 1368     		ldr	r3, [r2]
 1609 0008 23F08053 		bic	r3, r3, #268435456
 1610 000c 1360     		str	r3, [r2]
1705:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1706:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Wait till PLLSAI is disabled */
1707:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 1611              		.loc 1 1707 0
 1612 000e FFF7FEFF 		bl	HAL_GetTick
 1613              	.LVL158:
 1614 0012 0446     		mov	r4, r0
 1615              	.LVL159:
1708:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 1616              		.loc 1 1708 0
 1617 0014 04E0     		b	.L137
 1618              	.LVL160:
 1619              	.L139:
1709:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1710:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 1620              		.loc 1 1710 0
 1621 0016 FFF7FEFF 		bl	HAL_GetTick
 1622              	.LVL161:
 1623 001a 001B     		subs	r0, r0, r4
 1624 001c 6428     		cmp	r0, #100
 1625 001e 26D8     		bhi	.L142
 1626              	.L137:
1708:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 1627              		.loc 1 1708 0
 1628 0020 154B     		ldr	r3, .L145
 1629 0022 1B68     		ldr	r3, [r3]
 1630 0024 13F0005F 		tst	r3, #536870912
 1631 0028 F5D1     		bne	.L139
1711:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1712:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
1713:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
1714:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1715:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1716:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1717:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Configure the PLLSAI division factors */
1718:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #if defined (STM32F722xx) || defined (STM32F723xx) || defined (STM32F732xx) || defined (STM32F733xx
ARM GAS  /tmp/cceEaETB.s 			page 60


1719:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */
1720:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
1721:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
1722:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, PLLSAIInit->PLLSAIQ);
1723:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #else
1724:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */
1725:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
1726:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
1727:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
1728:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, \
 1632              		.loc 1 1728 0
 1633 002a 2A68     		ldr	r2, [r5]
 1634 002c EB68     		ldr	r3, [r5, #12]
 1635 002e 1B04     		lsls	r3, r3, #16
 1636 0030 43EA8213 		orr	r3, r3, r2, lsl #6
 1637 0034 6A68     		ldr	r2, [r5, #4]
 1638 0036 43EA0263 		orr	r3, r3, r2, lsl #24
 1639 003a AA68     		ldr	r2, [r5, #8]
 1640 003c 43EA0273 		orr	r3, r3, r2, lsl #28
 1641 0040 0D4A     		ldr	r2, .L145
 1642 0042 C2F88830 		str	r3, [r2, #136]
1729:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****                           PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
1730:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** #endif /* STM32F722xx || STM32F723xx || STM32F732xx || STM32F733xx */
1731:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1732:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Enable the PLLSAI */
1733:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_ENABLE();
 1643              		.loc 1 1733 0
 1644 0046 1368     		ldr	r3, [r2]
 1645 0048 43F08053 		orr	r3, r3, #268435456
 1646 004c 1360     		str	r3, [r2]
1734:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1735:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Wait till PLLSAI is ready */
1736:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 1647              		.loc 1 1736 0
 1648 004e FFF7FEFF 		bl	HAL_GetTick
 1649              	.LVL162:
 1650 0052 0446     		mov	r4, r0
 1651              	.LVL163:
1737:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 1652              		.loc 1 1737 0
 1653 0054 04E0     		b	.L140
 1654              	.LVL164:
 1655              	.L141:
1738:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1739:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 1656              		.loc 1 1739 0
 1657 0056 FFF7FEFF 		bl	HAL_GetTick
 1658              	.LVL165:
 1659 005a 001B     		subs	r0, r0, r4
 1660 005c 6428     		cmp	r0, #100
 1661 005e 08D8     		bhi	.L143
 1662              	.L140:
1737:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 1663              		.loc 1 1737 0
 1664 0060 054B     		ldr	r3, .L145
 1665 0062 1B68     		ldr	r3, [r3]
 1666 0064 13F0005F 		tst	r3, #536870912
ARM GAS  /tmp/cceEaETB.s 			page 61


 1667 0068 F5D0     		beq	.L141
1740:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1741:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
1742:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
1743:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1744:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1745:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1746:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****  return HAL_OK;
 1668              		.loc 1 1746 0
 1669 006a 0020     		movs	r0, #0
 1670 006c 38BD     		pop	{r3, r4, r5, pc}
 1671              	.LVL166:
 1672              	.L142:
1713:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 1673              		.loc 1 1713 0
 1674 006e 0320     		movs	r0, #3
 1675 0070 38BD     		pop	{r3, r4, r5, pc}
 1676              	.LVL167:
 1677              	.L143:
1742:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 1678              		.loc 1 1742 0
 1679 0072 0320     		movs	r0, #3
1747:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** }
 1680              		.loc 1 1747 0
 1681 0074 38BD     		pop	{r3, r4, r5, pc}
 1682              	.LVL168:
 1683              	.L146:
 1684 0076 00BF     		.align	2
 1685              	.L145:
 1686 0078 00380240 		.word	1073887232
 1687              		.cfi_endproc
 1688              	.LFE141:
 1690              		.section	.text.HAL_RCCEx_DisablePLLSAI,"ax",%progbits
 1691              		.align	2
 1692              		.global	HAL_RCCEx_DisablePLLSAI
 1693              		.thumb
 1694              		.thumb_func
 1696              	HAL_RCCEx_DisablePLLSAI:
 1697              	.LFB142:
1748:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1749:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** /**
1750:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @brief  Disable PLLSAI.
1751:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   * @retval HAL status
1752:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   */
1753:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
1754:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** {
 1698              		.loc 1 1754 0
 1699              		.cfi_startproc
 1700              		@ args = 0, pretend = 0, frame = 0
 1701              		@ frame_needed = 0, uses_anonymous_args = 0
 1702 0000 10B5     		push	{r4, lr}
 1703              	.LCFI8:
 1704              		.cfi_def_cfa_offset 8
 1705              		.cfi_offset 4, -8
 1706              		.cfi_offset 14, -4
1755:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   uint32_t tickstart;
1756:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/cceEaETB.s 			page 62


1757:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Disable the PLLSAI */
1758:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_DISABLE();
 1707              		.loc 1 1758 0
 1708 0002 0B4A     		ldr	r2, .L153
 1709 0004 1368     		ldr	r3, [r2]
 1710 0006 23F08053 		bic	r3, r3, #268435456
 1711 000a 1360     		str	r3, [r2]
1759:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1760:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   /* Wait till PLLSAI is disabled */
1761:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 1712              		.loc 1 1761 0
 1713 000c FFF7FEFF 		bl	HAL_GetTick
 1714              	.LVL169:
 1715 0010 0446     		mov	r4, r0
 1716              	.LVL170:
1762:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 1717              		.loc 1 1762 0
 1718 0012 04E0     		b	.L148
 1719              	.LVL171:
 1720              	.L150:
1763:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   {
1764:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 1721              		.loc 1 1764 0
 1722 0014 FFF7FEFF 		bl	HAL_GetTick
 1723              	.LVL172:
 1724 0018 001B     		subs	r0, r0, r4
 1725 001a 6428     		cmp	r0, #100
 1726 001c 06D8     		bhi	.L151
 1727              	.L148:
1762:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 1728              		.loc 1 1762 0
 1729 001e 044B     		ldr	r3, .L153
 1730 0020 1B68     		ldr	r3, [r3]
 1731 0022 13F0005F 		tst	r3, #536870912
 1732 0026 F5D1     		bne	.L150
1765:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     {
1766:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
1767:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
1768:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
1769:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   }
1770:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** 
1771:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****   return HAL_OK;
 1733              		.loc 1 1771 0
 1734 0028 0020     		movs	r0, #0
 1735 002a 10BD     		pop	{r4, pc}
 1736              	.LVL173:
 1737              	.L151:
1767:HALLIB/Src/stm32f7xx_hal_rcc_ex.c ****     }
 1738              		.loc 1 1767 0
 1739 002c 0320     		movs	r0, #3
1772:HALLIB/Src/stm32f7xx_hal_rcc_ex.c **** }
 1740              		.loc 1 1772 0
 1741 002e 10BD     		pop	{r4, pc}
 1742              	.LVL174:
 1743              	.L154:
 1744              		.align	2
 1745              	.L153:
ARM GAS  /tmp/cceEaETB.s 			page 63


 1746 0030 00380240 		.word	1073887232
 1747              		.cfi_endproc
 1748              	.LFE142:
 1750              		.text
 1751              	.Letext0:
 1752              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 1753              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 1754              		.file 4 "Inc/stm32f767xx.h"
 1755              		.file 5 "Inc/stm32f7xx.h"
 1756              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 1757              		.file 7 "HALLIB/Inc/stm32f7xx_hal_rcc_ex.h"
 1758              		.file 8 "CORE/core_cm7.h"
 1759              		.file 9 "HALLIB/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/cceEaETB.s 			page 64


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_rcc_ex.c
     /tmp/cceEaETB.s:21     .text.HAL_RCCEx_PeriphCLKConfig:00000000 $t
     /tmp/cceEaETB.s:26     .text.HAL_RCCEx_PeriphCLKConfig:00000000 HAL_RCCEx_PeriphCLKConfig
     /tmp/cceEaETB.s:252    .text.HAL_RCCEx_PeriphCLKConfig:00000148 $d
     /tmp/cceEaETB.s:257    .text.HAL_RCCEx_PeriphCLKConfig:00000154 $t
     /tmp/cceEaETB.s:549    .text.HAL_RCCEx_PeriphCLKConfig:000003b4 $d
     /tmp/cceEaETB.s:553    .text.HAL_RCCEx_PeriphCLKConfig:000003b8 $t
     /tmp/cceEaETB.s:904    .text.HAL_RCCEx_PeriphCLKConfig:00000600 $d
     /tmp/cceEaETB.s:909    .text.HAL_RCCEx_GetPeriphCLKConfig:00000000 $t
     /tmp/cceEaETB.s:914    .text.HAL_RCCEx_GetPeriphCLKConfig:00000000 HAL_RCCEx_GetPeriphCLKConfig
     /tmp/cceEaETB.s:1083   .text.HAL_RCCEx_GetPeriphCLKConfig:00000180 $d
     /tmp/cceEaETB.s:1089   .text.HAL_RCCEx_GetPeriphCLKFreq:00000000 $t
     /tmp/cceEaETB.s:1094   .text.HAL_RCCEx_GetPeriphCLKFreq:00000000 HAL_RCCEx_GetPeriphCLKFreq
     /tmp/cceEaETB.s:1413   .text.HAL_RCCEx_GetPeriphCLKFreq:000001d4 $d
     /tmp/cceEaETB.s:1421   .text.HAL_RCCEx_EnablePLLI2S:00000000 $t
     /tmp/cceEaETB.s:1426   .text.HAL_RCCEx_EnablePLLI2S:00000000 HAL_RCCEx_EnablePLLI2S
     /tmp/cceEaETB.s:1521   .text.HAL_RCCEx_EnablePLLI2S:00000078 $d
     /tmp/cceEaETB.s:1526   .text.HAL_RCCEx_DisablePLLI2S:00000000 $t
     /tmp/cceEaETB.s:1531   .text.HAL_RCCEx_DisablePLLI2S:00000000 HAL_RCCEx_DisablePLLI2S
     /tmp/cceEaETB.s:1581   .text.HAL_RCCEx_DisablePLLI2S:00000030 $d
     /tmp/cceEaETB.s:1586   .text.HAL_RCCEx_EnablePLLSAI:00000000 $t
     /tmp/cceEaETB.s:1591   .text.HAL_RCCEx_EnablePLLSAI:00000000 HAL_RCCEx_EnablePLLSAI
     /tmp/cceEaETB.s:1686   .text.HAL_RCCEx_EnablePLLSAI:00000078 $d
     /tmp/cceEaETB.s:1691   .text.HAL_RCCEx_DisablePLLSAI:00000000 $t
     /tmp/cceEaETB.s:1696   .text.HAL_RCCEx_DisablePLLSAI:00000000 HAL_RCCEx_DisablePLLSAI
     /tmp/cceEaETB.s:1746   .text.HAL_RCCEx_DisablePLLSAI:00000030 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
