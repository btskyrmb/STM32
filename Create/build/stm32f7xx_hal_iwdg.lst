ARM GAS  /tmp/ccwtVZNK.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_iwdg.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_IWDG_Init,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_IWDG_Init
  23              		.thumb
  24              		.thumb_func
  26              	HAL_IWDG_Init:
  27              	.LFB136:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal_iwdg.c"
   1:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @file    stm32f7xx_hal_iwdg.c
   4:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @brief   IWDG HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *          functionalities of the Independent Watchdog (IWDG) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *           + Initialization and Start functions
   9:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *           + IO operation functions
  10:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *
  11:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   @verbatim
  12:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   ==============================================================================
  13:HALLIB/Src/stm32f7xx_hal_iwdg.c ****                     ##### IWDG Generic features #####
  14:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   [..]
  16:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     (+) The IWDG can be started by either software or hardware (configurable
  17:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         through option byte).
  18:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
  19:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     (+) The IWDG is clocked by Low-Speed clock (LSI) and thus stays active even
  20:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         if the main clock fails.
  21:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
  22:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     (+) Once the IWDG is started, the LSI is forced ON and both can not be 
  23:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         disabled. The counter starts counting down from the reset value (0xFFF).
  24:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         When it reaches the end of count value (0x000) a reset signal is 
  25:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         generated (IWDG reset).
  26:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
  27:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     (+) Whenever the key value 0x0000 AAAA is written in the IWDG_KR register, 
  28:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         the IWDG_RLR value is reloaded in the counter and the watchdog reset is
  29:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         prevented.
  30:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
ARM GAS  /tmp/ccwtVZNK.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     (+) The IWDG is implemented in the VDD voltage domain that is still functional
  32:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         in STOP and STANDBY mode (IWDG reset can wake-up from STANDBY).
  33:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         IWDGRST flag in RCC_CSR register can be used to inform when an IWDG
  34:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         reset occurs.
  35:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
  36:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     (+) Debug mode : When the microcontroller enters debug mode (core halted),
  37:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         the IWDG counter either continues to work normally or stops, depending 
  38:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         on DBG_IWDG_STOP configuration bit in DBG module, accessible through
  39:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         __HAL_DBGMCU_FREEZE_IWDG() and __HAL_DBGMCU_UNFREEZE_IWDG() macros
  40:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
  41:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     [..] Min-max timeout value @32KHz (LSI): ~125us / ~32.7s
  42:HALLIB/Src/stm32f7xx_hal_iwdg.c ****          The IWDG timeout may vary due to LSI frequency dispersion. STM32F7xx
  43:HALLIB/Src/stm32f7xx_hal_iwdg.c ****          devices provide the capability to measure the LSI frequency (LSI clock
  44:HALLIB/Src/stm32f7xx_hal_iwdg.c ****          connected internally to TIM16 CH1 input capture). The measured value
  45:HALLIB/Src/stm32f7xx_hal_iwdg.c ****          can be used to have an IWDG timeout with an acceptable accuracy.
  46:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
  47:HALLIB/Src/stm32f7xx_hal_iwdg.c ****                      ##### How to use this driver #####
  48:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   ==============================================================================
  49:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   [..]
  50:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     (#) Use IWDG using HAL_IWDG_Init() function to :
  51:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       (++) Enable instance by writing Start keyword in IWDG_KEY register. LSI 
  52:HALLIB/Src/stm32f7xx_hal_iwdg.c ****            clock is forced ON and IWDG counter starts downcounting.
  53:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       (++) Enable write access to configuration register: IWDG_PR, IWDG_RLR & 
  54:HALLIB/Src/stm32f7xx_hal_iwdg.c ****            IWDG_WINR.
  55:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       (++) Configure the IWDG prescaler and counter reload value. This reload 
  56:HALLIB/Src/stm32f7xx_hal_iwdg.c ****            value will be loaded in the IWDG counter each time the watchdog is 
  57:HALLIB/Src/stm32f7xx_hal_iwdg.c ****            reloaded, then the IWDG will start counting down from this value.
  58:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       (++) wait for status flags to be reset
  59:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       (++) Depending on window parameter:
  60:HALLIB/Src/stm32f7xx_hal_iwdg.c ****          (+++) If Window Init parameter is same as Window register value, 
  61:HALLIB/Src/stm32f7xx_hal_iwdg.c ****                nothing more is done but reload counter value in order to exit 
  62:HALLIB/Src/stm32f7xx_hal_iwdg.c ****                function withy exact time base.
  63:HALLIB/Src/stm32f7xx_hal_iwdg.c ****          (+++) Else modify Window register. This will automatically reload
  64:HALLIB/Src/stm32f7xx_hal_iwdg.c ****                watchdog counter.
  65:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
  66:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     (#) Then the application program must refresh the IWDG counter at regular
  67:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         intervals during normal operation to prevent an MCU reset, using
  68:HALLIB/Src/stm32f7xx_hal_iwdg.c ****         HAL_IWDG_Refresh() function.
  69:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
  70:HALLIB/Src/stm32f7xx_hal_iwdg.c ****      *** IWDG HAL driver macros list ***
  71:HALLIB/Src/stm32f7xx_hal_iwdg.c ****      ====================================
  72:HALLIB/Src/stm32f7xx_hal_iwdg.c ****      [..]
  73:HALLIB/Src/stm32f7xx_hal_iwdg.c ****        Below the list of most used macros in IWDG HAL driver:
  74:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       (+) __HAL_IWDG_START: Enable the IWDG peripheral
  75:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       (+) __HAL_IWDG_RELOAD_COUNTER: Reloads IWDG counter with value defined in
  76:HALLIB/Src/stm32f7xx_hal_iwdg.c ****           the reload register
  77:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
  78:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   @endverbatim
  79:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   ******************************************************************************
  80:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @attention
  81:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *
  82:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  83:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *
  84:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * Redistribution and use in source and binary forms, with or without modification,
  85:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * are permitted provided that the following conditions are met:
  86:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  87:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *      this list of conditions and the following disclaimer.
ARM GAS  /tmp/ccwtVZNK.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  89:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *      this list of conditions and the following disclaimer in the documentation
  90:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *      and/or other materials provided with the distribution.
  91:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  92:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *      may be used to endorse or promote products derived from this software
  93:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *      without specific prior written permission.
  94:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *
  95:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  96:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  97:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  98:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  99:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 100:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 101:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 102:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 103:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 104:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 105:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *
 106:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   ******************************************************************************
 107:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   */
 108:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 109:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /* Includes ------------------------------------------------------------------*/
 110:HALLIB/Src/stm32f7xx_hal_iwdg.c **** #include "stm32f7xx_hal.h"
 111:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 112:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /** @addtogroup STM32F7xx_HAL_Driver
 113:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @{
 114:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   */
 115:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 116:HALLIB/Src/stm32f7xx_hal_iwdg.c **** #ifdef HAL_IWDG_MODULE_ENABLED
 117:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /** @addtogroup IWDG
 118:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @brief IWDG HAL module driver.
 119:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @{
 120:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   */
 121:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 122:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /* Private typedef -----------------------------------------------------------*/
 123:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /* Private define ------------------------------------------------------------*/
 124:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /** @defgroup IWDG_Private_Defines IWDG Private Defines
 125:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @{
 126:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   */
 127:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /* Status register need 5 RC LSI divided by prescaler clock to be updated. With 
 128:HALLIB/Src/stm32f7xx_hal_iwdg.c ****    higher prescaler (256), and according to LSI variation, we need to wait at 
 129:HALLIB/Src/stm32f7xx_hal_iwdg.c ****    least 6 cycles so 48 ms. */
 130:HALLIB/Src/stm32f7xx_hal_iwdg.c **** #define HAL_IWDG_DEFAULT_TIMEOUT            48u
 131:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /**
 132:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @}
 133:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   */
 134:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 135:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /* Private macro -------------------------------------------------------------*/
 136:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /* Private variables ---------------------------------------------------------*/
 137:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /* Private function prototypes -----------------------------------------------*/
 138:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /* Exported functions --------------------------------------------------------*/
 139:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 140:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions
 141:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @{
 142:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   */
 143:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 144:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions_Group1
ARM GAS  /tmp/ccwtVZNK.s 			page 4


 145:HALLIB/Src/stm32f7xx_hal_iwdg.c ****  *  @brief    Initialization and Start functions.
 146:HALLIB/Src/stm32f7xx_hal_iwdg.c ****  *
 147:HALLIB/Src/stm32f7xx_hal_iwdg.c **** @verbatim
 148:HALLIB/Src/stm32f7xx_hal_iwdg.c ****  ===============================================================================
 149:HALLIB/Src/stm32f7xx_hal_iwdg.c ****           ##### Initialization and Start functions #####
 150:HALLIB/Src/stm32f7xx_hal_iwdg.c ****  ===============================================================================
 151:HALLIB/Src/stm32f7xx_hal_iwdg.c ****  [..]  This section provides functions allowing to:
 152:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       (+) Initialize the IWDG according to the specified parameters in the 
 153:HALLIB/Src/stm32f7xx_hal_iwdg.c ****           IWDG_InitTypeDef of associated handle.
 154:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       (+) Manage Window option.
 155:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       (+) Once initialization is performed in HAL_IWDG_Init function, Watchdog 
 156:HALLIB/Src/stm32f7xx_hal_iwdg.c ****           is reloaded in order to exit function with correct time base.
 157:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 158:HALLIB/Src/stm32f7xx_hal_iwdg.c **** @endverbatim
 159:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @{
 160:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   */
 161:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 162:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /**
 163:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @brief  Initialize the IWDG according to the specified parameters in the 
 164:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *         IWDG_InitTypeDef and start watchdog. Before exiting function, 
 165:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *         watchdog is refreshed in order to have correct time base.
 166:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
 167:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *                the configuration information for the specified IWDG module.
 168:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @retval HAL status
 169:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   */
 170:HALLIB/Src/stm32f7xx_hal_iwdg.c **** HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
 171:HALLIB/Src/stm32f7xx_hal_iwdg.c **** {
  29              		.loc 1 171 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
 172:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   uint32_t tickstart;
 173:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 174:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   /* Check the IWDG handle allocation */
 175:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   if(hiwdg == NULL)
  34              		.loc 1 175 0
  35 0000 40B3     		cbz	r0, .L6
 171:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   uint32_t tickstart;
  36              		.loc 1 171 0
  37 0002 38B5     		push	{r3, r4, r5, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 16
  40              		.cfi_offset 3, -16
  41              		.cfi_offset 4, -12
  42              		.cfi_offset 5, -8
  43              		.cfi_offset 14, -4
  44 0004 0446     		mov	r4, r0
 176:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   {
 177:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     return HAL_ERROR;
 178:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   }
 179:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 180:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   /* Check the parameters */
 181:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 182:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 183:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 184:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
ARM GAS  /tmp/ccwtVZNK.s 			page 5


 185:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 186:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   /* Enable IWDG. LSI is turned on automaticaly */
 187:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   __HAL_IWDG_START(hiwdg);
  45              		.loc 1 187 0
  46 0006 0368     		ldr	r3, [r0]
  47 0008 4CF6CC42 		movw	r2, #52428
  48 000c 1A60     		str	r2, [r3]
 188:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 189:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
 190:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   0x5555 in KR */
 191:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   IWDG_ENABLE_WRITE_ACCESS(hiwdg);
  49              		.loc 1 191 0
  50 000e 0368     		ldr	r3, [r0]
  51 0010 45F25552 		movw	r2, #21845
  52 0014 1A60     		str	r2, [r3]
 192:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 193:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   /* Write to IWDG registers the Prescaler & Reload values to work with */
 194:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  53              		.loc 1 194 0
  54 0016 0368     		ldr	r3, [r0]
  55 0018 4268     		ldr	r2, [r0, #4]
  56 001a 5A60     		str	r2, [r3, #4]
 195:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   hiwdg->Instance->RLR = hiwdg->Init.Reload;
  57              		.loc 1 195 0
  58 001c 0368     		ldr	r3, [r0]
  59 001e 8268     		ldr	r2, [r0, #8]
  60 0020 9A60     		str	r2, [r3, #8]
 196:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 197:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   /* Check pending flag, if previous update not done, return timeout */
 198:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   tickstart = HAL_GetTick();
  61              		.loc 1 198 0
  62 0022 FFF7FEFF 		bl	HAL_GetTick
  63              	.LVL1:
  64 0026 0546     		mov	r5, r0
  65              	.LVL2:
 199:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 200:HALLIB/Src/stm32f7xx_hal_iwdg.c ****    /* Wait for register to be updated */
 201:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   while(hiwdg->Instance->SR != RESET)
  66              		.loc 1 201 0
  67 0028 04E0     		b	.L3
  68              	.LVL3:
  69              	.L4:
 202:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   {
 203:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
  70              		.loc 1 203 0
  71 002a FFF7FEFF 		bl	HAL_GetTick
  72              	.LVL4:
  73 002e 401B     		subs	r0, r0, r5
  74 0030 3028     		cmp	r0, #48
  75 0032 11D8     		bhi	.L7
  76              	.L3:
 201:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   {
  77              		.loc 1 201 0
  78 0034 2368     		ldr	r3, [r4]
  79 0036 DA68     		ldr	r2, [r3, #12]
  80 0038 002A     		cmp	r2, #0
  81 003a F6D1     		bne	.L4
ARM GAS  /tmp/ccwtVZNK.s 			page 6


 204:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     {
 205:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       return HAL_TIMEOUT;
 206:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     }
 207:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   }
 208:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 209:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   /* If window parameter is different than current value, modify window 
 210:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   register */
 211:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   if(hiwdg->Instance->WINR != hiwdg->Init.Window)
  82              		.loc 1 211 0
  83 003c 1969     		ldr	r1, [r3, #16]
  84 003e E268     		ldr	r2, [r4, #12]
  85 0040 9142     		cmp	r1, r2
  86 0042 02D0     		beq	.L5
 212:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   {
 213:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
 214:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     even if window feature is disabled, Watchdog will be reloaded by writing 
 215:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     windows register */
 216:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     hiwdg->Instance->WINR = hiwdg->Init.Window;
  87              		.loc 1 216 0
  88 0044 1A61     		str	r2, [r3, #16]
 217:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   }
 218:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   else
 219:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   {
 220:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     /* Reload IWDG counter with value defined in the reload register */
 221:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 222:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   }
 223:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 224:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   /* Return function status */
 225:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   return HAL_OK;
  89              		.loc 1 225 0
  90 0046 0020     		movs	r0, #0
  91 0048 38BD     		pop	{r3, r4, r5, pc}
  92              	.LVL5:
  93              	.L5:
 221:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   }
  94              		.loc 1 221 0
  95 004a 4AF6AA22 		movw	r2, #43690
  96 004e 1A60     		str	r2, [r3]
  97              		.loc 1 225 0
  98 0050 0020     		movs	r0, #0
  99 0052 38BD     		pop	{r3, r4, r5, pc}
 100              	.LVL6:
 101              	.L6:
 102              	.LCFI1:
 103              		.cfi_def_cfa_offset 0
 104              		.cfi_restore 3
 105              		.cfi_restore 4
 106              		.cfi_restore 5
 107              		.cfi_restore 14
 177:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   }
 108              		.loc 1 177 0
 109 0054 0120     		movs	r0, #1
 110              	.LVL7:
 226:HALLIB/Src/stm32f7xx_hal_iwdg.c **** }
 111              		.loc 1 226 0
 112 0056 7047     		bx	lr
 113              	.LVL8:
ARM GAS  /tmp/ccwtVZNK.s 			page 7


 114              	.L7:
 115              	.LCFI2:
 116              		.cfi_def_cfa_offset 16
 117              		.cfi_offset 3, -16
 118              		.cfi_offset 4, -12
 119              		.cfi_offset 5, -8
 120              		.cfi_offset 14, -4
 205:HALLIB/Src/stm32f7xx_hal_iwdg.c ****     }
 121              		.loc 1 205 0
 122 0058 0320     		movs	r0, #3
 123              		.loc 1 226 0
 124 005a 38BD     		pop	{r3, r4, r5, pc}
 125              		.cfi_endproc
 126              	.LFE136:
 128              		.section	.text.HAL_IWDG_Refresh,"ax",%progbits
 129              		.align	2
 130              		.global	HAL_IWDG_Refresh
 131              		.thumb
 132              		.thumb_func
 134              	HAL_IWDG_Refresh:
 135              	.LFB137:
 227:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 228:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /**
 229:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @}
 230:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   */
 231:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 232:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 233:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions_Group2
 234:HALLIB/Src/stm32f7xx_hal_iwdg.c ****  *  @brief   IO operation functions
 235:HALLIB/Src/stm32f7xx_hal_iwdg.c ****  *
 236:HALLIB/Src/stm32f7xx_hal_iwdg.c **** @verbatim
 237:HALLIB/Src/stm32f7xx_hal_iwdg.c ****  ===============================================================================
 238:HALLIB/Src/stm32f7xx_hal_iwdg.c ****                       ##### IO operation functions #####
 239:HALLIB/Src/stm32f7xx_hal_iwdg.c ****  ===============================================================================
 240:HALLIB/Src/stm32f7xx_hal_iwdg.c ****  [..]  This section provides functions allowing to:
 241:HALLIB/Src/stm32f7xx_hal_iwdg.c ****       (+) Refresh the IWDG.
 242:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 243:HALLIB/Src/stm32f7xx_hal_iwdg.c **** @endverbatim
 244:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @{
 245:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   */
 246:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 247:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 248:HALLIB/Src/stm32f7xx_hal_iwdg.c **** /**
 249:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @brief  Refresh the IWDG.
 250:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
 251:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   *                the configuration information for the specified IWDG module.
 252:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   * @retval HAL status
 253:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   */
 254:HALLIB/Src/stm32f7xx_hal_iwdg.c **** HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
 255:HALLIB/Src/stm32f7xx_hal_iwdg.c **** {
 136              		.loc 1 255 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141              	.LVL9:
 256:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   /* Reload IWDG counter with value defined in the reload register */
ARM GAS  /tmp/ccwtVZNK.s 			page 8


 257:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 142              		.loc 1 257 0
 143 0000 0368     		ldr	r3, [r0]
 144 0002 4AF6AA22 		movw	r2, #43690
 145 0006 1A60     		str	r2, [r3]
 258:HALLIB/Src/stm32f7xx_hal_iwdg.c **** 
 259:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   /* Return function status */
 260:HALLIB/Src/stm32f7xx_hal_iwdg.c ****   return HAL_OK;
 261:HALLIB/Src/stm32f7xx_hal_iwdg.c **** }
 146              		.loc 1 261 0
 147 0008 0020     		movs	r0, #0
 148              	.LVL10:
 149 000a 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE137:
 153              		.text
 154              	.Letext0:
 155              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 156              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 157              		.file 4 "Inc/stm32f767xx.h"
 158              		.file 5 "Inc/stm32f7xx.h"
 159              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 160              		.file 7 "HALLIB/Inc/stm32f7xx_hal_iwdg.h"
 161              		.file 8 "CORE/core_cm7.h"
 162              		.file 9 "HALLIB/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccwtVZNK.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_iwdg.c
     /tmp/ccwtVZNK.s:21     .text.HAL_IWDG_Init:00000000 $t
     /tmp/ccwtVZNK.s:26     .text.HAL_IWDG_Init:00000000 HAL_IWDG_Init
     /tmp/ccwtVZNK.s:129    .text.HAL_IWDG_Refresh:00000000 $t
     /tmp/ccwtVZNK.s:134    .text.HAL_IWDG_Refresh:00000000 HAL_IWDG_Refresh
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
