ARM GAS  /tmp/ccttIzZG.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_flash.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.FLASH_Program_DoubleWord,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	FLASH_Program_DoubleWord:
  26              	.LFB148:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_flash.c"
   1:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_flash.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @file    stm32f7xx_hal_flash.c
   4:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief   FLASH HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_flash.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_flash.c ****   *          functionalities of the internal FLASH memory:
   8:HALLIB/Src/stm32f7xx_hal_flash.c ****   *           + Program operations functions
   9:HALLIB/Src/stm32f7xx_hal_flash.c ****   *           + Memory Control functions 
  10:HALLIB/Src/stm32f7xx_hal_flash.c ****   *           + Peripheral Errors functions
  11:HALLIB/Src/stm32f7xx_hal_flash.c ****   *         
  12:HALLIB/Src/stm32f7xx_hal_flash.c ****   @verbatim
  13:HALLIB/Src/stm32f7xx_hal_flash.c ****   ==============================================================================
  14:HALLIB/Src/stm32f7xx_hal_flash.c ****                         ##### FLASH peripheral features #####
  15:HALLIB/Src/stm32f7xx_hal_flash.c ****   ==============================================================================
  16:HALLIB/Src/stm32f7xx_hal_flash.c ****            
  17:HALLIB/Src/stm32f7xx_hal_flash.c ****   [..] The Flash memory interface manages CPU AHB I-Code and D-Code accesses 
  18:HALLIB/Src/stm32f7xx_hal_flash.c ****        to the Flash memory. It implements the erase and program Flash memory operations 
  19:HALLIB/Src/stm32f7xx_hal_flash.c ****        and the read and write protection mechanisms.
  20:HALLIB/Src/stm32f7xx_hal_flash.c ****       
  21:HALLIB/Src/stm32f7xx_hal_flash.c ****   [..] The Flash memory interface accelerates code execution with a system of instruction
  22:HALLIB/Src/stm32f7xx_hal_flash.c ****        prefetch and cache lines. 
  23:HALLIB/Src/stm32f7xx_hal_flash.c **** 
  24:HALLIB/Src/stm32f7xx_hal_flash.c ****   [..] The FLASH main features are:
  25:HALLIB/Src/stm32f7xx_hal_flash.c ****       (+) Flash memory read operations
  26:HALLIB/Src/stm32f7xx_hal_flash.c ****       (+) Flash memory program/erase operations
  27:HALLIB/Src/stm32f7xx_hal_flash.c ****       (+) Read / write protections
  28:HALLIB/Src/stm32f7xx_hal_flash.c ****       (+) Prefetch on I-Code
  29:HALLIB/Src/stm32f7xx_hal_flash.c ****       (+) 64 cache lines of 128 bits on I-Code
  30:HALLIB/Src/stm32f7xx_hal_flash.c ****       (+) 8 cache lines of 128 bits on D-Code
  31:HALLIB/Src/stm32f7xx_hal_flash.c ****       
ARM GAS  /tmp/ccttIzZG.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_flash.c ****                      ##### How to use this driver #####
  33:HALLIB/Src/stm32f7xx_hal_flash.c ****   ==============================================================================
  34:HALLIB/Src/stm32f7xx_hal_flash.c ****     [..]                             
  35:HALLIB/Src/stm32f7xx_hal_flash.c ****       This driver provides functions and macros to configure and program the FLASH 
  36:HALLIB/Src/stm32f7xx_hal_flash.c ****       memory of all STM32F7xx devices.
  37:HALLIB/Src/stm32f7xx_hal_flash.c ****     
  38:HALLIB/Src/stm32f7xx_hal_flash.c ****       (#) FLASH Memory IO Programming functions: 
  39:HALLIB/Src/stm32f7xx_hal_flash.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and 
  40:HALLIB/Src/stm32f7xx_hal_flash.c ****                 HAL_FLASH_Lock() functions
  41:HALLIB/Src/stm32f7xx_hal_flash.c ****            (++) Program functions: byte, half word, word and double word
  42:HALLIB/Src/stm32f7xx_hal_flash.c ****            (++) There Two modes of programming :
  43:HALLIB/Src/stm32f7xx_hal_flash.c ****             (+++) Polling mode using HAL_FLASH_Program() function
  44:HALLIB/Src/stm32f7xx_hal_flash.c ****             (+++) Interrupt mode using HAL_FLASH_Program_IT() function
  45:HALLIB/Src/stm32f7xx_hal_flash.c ****     
  46:HALLIB/Src/stm32f7xx_hal_flash.c ****       (#) Interrupts and flags management functions : 
  47:HALLIB/Src/stm32f7xx_hal_flash.c ****            (++) Handle FLASH interrupts by calling HAL_FLASH_IRQHandler()
  48:HALLIB/Src/stm32f7xx_hal_flash.c ****            (++) Wait for last FLASH operation according to its status
  49:HALLIB/Src/stm32f7xx_hal_flash.c ****            (++) Get error flag status by calling HAL_SetErrorCode()          
  50:HALLIB/Src/stm32f7xx_hal_flash.c ****     [..] 
  51:HALLIB/Src/stm32f7xx_hal_flash.c ****       In addition to these functions, this driver includes a set of macros allowing
  52:HALLIB/Src/stm32f7xx_hal_flash.c ****       to handle the following operations:
  53:HALLIB/Src/stm32f7xx_hal_flash.c ****        (+) Set the latency
  54:HALLIB/Src/stm32f7xx_hal_flash.c ****        (+) Enable/Disable the prefetch buffer
  55:HALLIB/Src/stm32f7xx_hal_flash.c ****        (+) Enable/Disable the Instruction cache and the Data cache
  56:HALLIB/Src/stm32f7xx_hal_flash.c ****        (+) Reset the Instruction cache and the Data cache
  57:HALLIB/Src/stm32f7xx_hal_flash.c ****        (+) Enable/Disable the FLASH interrupts
  58:HALLIB/Src/stm32f7xx_hal_flash.c ****        (+) Monitor the FLASH flags status
  59:HALLIB/Src/stm32f7xx_hal_flash.c ****     [..]	   
  60:HALLIB/Src/stm32f7xx_hal_flash.c **** 	(@) For any Flash memory program operation (erase or program), the CPU clock frequency
  61:HALLIB/Src/stm32f7xx_hal_flash.c ****         (HCLK) must be at least 1MHz. 
  62:HALLIB/Src/stm32f7xx_hal_flash.c **** 	(@) The contents of the Flash memory are not guaranteed if a device reset occurs during 
  63:HALLIB/Src/stm32f7xx_hal_flash.c **** 	    a Flash memory operation.
  64:HALLIB/Src/stm32f7xx_hal_flash.c ****     (@) Any attempt to read the Flash memory while it is being written or erased, causes the 
  65:HALLIB/Src/stm32f7xx_hal_flash.c **** 	    bus to stall. Read operations are processed correctly once the program operation has 
  66:HALLIB/Src/stm32f7xx_hal_flash.c **** 		completed. This means that code or data fetches cannot be performed while a write/erase 
  67:HALLIB/Src/stm32f7xx_hal_flash.c **** 		operation is ongoing.
  68:HALLIB/Src/stm32f7xx_hal_flash.c ****           
  69:HALLIB/Src/stm32f7xx_hal_flash.c ****   @endverbatim
  70:HALLIB/Src/stm32f7xx_hal_flash.c ****   ******************************************************************************
  71:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @attention
  72:HALLIB/Src/stm32f7xx_hal_flash.c ****   *
  73:HALLIB/Src/stm32f7xx_hal_flash.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  74:HALLIB/Src/stm32f7xx_hal_flash.c ****   *
  75:HALLIB/Src/stm32f7xx_hal_flash.c ****   * Redistribution and use in source and binary forms, with or without modification,
  76:HALLIB/Src/stm32f7xx_hal_flash.c ****   * are permitted provided that the following conditions are met:
  77:HALLIB/Src/stm32f7xx_hal_flash.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  78:HALLIB/Src/stm32f7xx_hal_flash.c ****   *      this list of conditions and the following disclaimer.
  79:HALLIB/Src/stm32f7xx_hal_flash.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  80:HALLIB/Src/stm32f7xx_hal_flash.c ****   *      this list of conditions and the following disclaimer in the documentation
  81:HALLIB/Src/stm32f7xx_hal_flash.c ****   *      and/or other materials provided with the distribution.
  82:HALLIB/Src/stm32f7xx_hal_flash.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  83:HALLIB/Src/stm32f7xx_hal_flash.c ****   *      may be used to endorse or promote products derived from this software
  84:HALLIB/Src/stm32f7xx_hal_flash.c ****   *      without specific prior written permission.
  85:HALLIB/Src/stm32f7xx_hal_flash.c ****   *
  86:HALLIB/Src/stm32f7xx_hal_flash.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  87:HALLIB/Src/stm32f7xx_hal_flash.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  88:HALLIB/Src/stm32f7xx_hal_flash.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
ARM GAS  /tmp/ccttIzZG.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_flash.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  90:HALLIB/Src/stm32f7xx_hal_flash.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  91:HALLIB/Src/stm32f7xx_hal_flash.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  92:HALLIB/Src/stm32f7xx_hal_flash.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  93:HALLIB/Src/stm32f7xx_hal_flash.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  94:HALLIB/Src/stm32f7xx_hal_flash.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  95:HALLIB/Src/stm32f7xx_hal_flash.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  96:HALLIB/Src/stm32f7xx_hal_flash.c ****   *
  97:HALLIB/Src/stm32f7xx_hal_flash.c ****   ******************************************************************************
  98:HALLIB/Src/stm32f7xx_hal_flash.c ****   */ 
  99:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 100:HALLIB/Src/stm32f7xx_hal_flash.c **** /* Includes ------------------------------------------------------------------*/
 101:HALLIB/Src/stm32f7xx_hal_flash.c **** #include "stm32f7xx_hal.h"
 102:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 103:HALLIB/Src/stm32f7xx_hal_flash.c **** /** @addtogroup STM32F7xx_HAL_Driver
 104:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @{
 105:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 106:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 107:HALLIB/Src/stm32f7xx_hal_flash.c **** /** @defgroup FLASH FLASH
 108:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief FLASH HAL module driver
 109:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @{
 110:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 111:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 112:HALLIB/Src/stm32f7xx_hal_flash.c **** #ifdef HAL_FLASH_MODULE_ENABLED
 113:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 114:HALLIB/Src/stm32f7xx_hal_flash.c **** /* Private typedef -----------------------------------------------------------*/
 115:HALLIB/Src/stm32f7xx_hal_flash.c **** /* Private define ------------------------------------------------------------*/
 116:HALLIB/Src/stm32f7xx_hal_flash.c **** /** @addtogroup FLASH_Private_Constants
 117:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @{
 118:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 119:HALLIB/Src/stm32f7xx_hal_flash.c **** #define SECTOR_MASK               ((uint32_t)0xFFFFFF07U)
 120:HALLIB/Src/stm32f7xx_hal_flash.c **** #define FLASH_TIMEOUT_VALUE       ((uint32_t)50000U)/* 50 s */
 121:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 122:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @}
 123:HALLIB/Src/stm32f7xx_hal_flash.c ****   */         
 124:HALLIB/Src/stm32f7xx_hal_flash.c **** /* Private macro -------------------------------------------------------------*/
 125:HALLIB/Src/stm32f7xx_hal_flash.c **** /* Private variables ---------------------------------------------------------*/
 126:HALLIB/Src/stm32f7xx_hal_flash.c **** /** @addtogroup FLASH_Private_Variables
 127:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @{
 128:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 129:HALLIB/Src/stm32f7xx_hal_flash.c **** /* Variable used for Erase sectors under interruption */
 130:HALLIB/Src/stm32f7xx_hal_flash.c **** FLASH_ProcessTypeDef pFlash;
 131:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 132:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @}
 133:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 134:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 135:HALLIB/Src/stm32f7xx_hal_flash.c **** /* Private function prototypes -----------------------------------------------*/
 136:HALLIB/Src/stm32f7xx_hal_flash.c **** /** @addtogroup FLASH_Private_Functions
 137:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @{
 138:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 139:HALLIB/Src/stm32f7xx_hal_flash.c **** /* Program operations */
 140:HALLIB/Src/stm32f7xx_hal_flash.c **** static void   FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data);
 141:HALLIB/Src/stm32f7xx_hal_flash.c **** static void   FLASH_Program_Word(uint32_t Address, uint32_t Data);
 142:HALLIB/Src/stm32f7xx_hal_flash.c **** static void   FLASH_Program_HalfWord(uint32_t Address, uint16_t Data);
 143:HALLIB/Src/stm32f7xx_hal_flash.c **** static void   FLASH_Program_Byte(uint32_t Address, uint8_t Data);
 144:HALLIB/Src/stm32f7xx_hal_flash.c **** static void   FLASH_SetErrorCode(void);
 145:HALLIB/Src/stm32f7xx_hal_flash.c **** 
ARM GAS  /tmp/ccttIzZG.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout);
 147:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 148:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @}
 149:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 150:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 151:HALLIB/Src/stm32f7xx_hal_flash.c **** /* Exported functions --------------------------------------------------------*/
 152:HALLIB/Src/stm32f7xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions FLASH Exported Functions
 153:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @{
 154:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 155:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 156:HALLIB/Src/stm32f7xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group1 Programming operation functions 
 157:HALLIB/Src/stm32f7xx_hal_flash.c ****  *  @brief   Programming operation functions 
 158:HALLIB/Src/stm32f7xx_hal_flash.c ****  *
 159:HALLIB/Src/stm32f7xx_hal_flash.c **** @verbatim   
 160:HALLIB/Src/stm32f7xx_hal_flash.c ****  ===============================================================================
 161:HALLIB/Src/stm32f7xx_hal_flash.c ****                   ##### Programming operation functions #####
 162:HALLIB/Src/stm32f7xx_hal_flash.c ****  ===============================================================================  
 163:HALLIB/Src/stm32f7xx_hal_flash.c ****     [..]
 164:HALLIB/Src/stm32f7xx_hal_flash.c ****     This subsection provides a set of functions allowing to manage the FLASH 
 165:HALLIB/Src/stm32f7xx_hal_flash.c ****     program operations.
 166:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 167:HALLIB/Src/stm32f7xx_hal_flash.c **** @endverbatim
 168:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @{
 169:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 170:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 171:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 172:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Program byte, halfword, word or double word at a specified address
 173:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  TypeProgram  Indicate the way to program at a specified address.
 174:HALLIB/Src/stm32f7xx_hal_flash.c ****   *                           This parameter can be a value of @ref FLASH_Type_Program
 175:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Address  specifies the address to be programmed.
 176:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Data specifies the data to be programmed
 177:HALLIB/Src/stm32f7xx_hal_flash.c ****   * 
 178:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 179:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 180:HALLIB/Src/stm32f7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 181:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 182:HALLIB/Src/stm32f7xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 183:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 184:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Process Locked */
 185:HALLIB/Src/stm32f7xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 186:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 187:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Check the parameters */
 188:HALLIB/Src/stm32f7xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 189:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 190:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Wait for last operation to be completed */
 191:HALLIB/Src/stm32f7xx_hal_flash.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 192:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 193:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(status == HAL_OK)
 194:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 195:HALLIB/Src/stm32f7xx_hal_flash.c ****     switch(TypeProgram)
 196:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 197:HALLIB/Src/stm32f7xx_hal_flash.c ****       case FLASH_TYPEPROGRAM_BYTE :
 198:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 199:HALLIB/Src/stm32f7xx_hal_flash.c ****         /*Program byte (8-bit) at a specified address.*/
 200:HALLIB/Src/stm32f7xx_hal_flash.c ****         FLASH_Program_Byte(Address, (uint8_t) Data);
 201:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 202:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
ARM GAS  /tmp/ccttIzZG.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_flash.c ****       
 204:HALLIB/Src/stm32f7xx_hal_flash.c ****       case FLASH_TYPEPROGRAM_HALFWORD :
 205:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 206:HALLIB/Src/stm32f7xx_hal_flash.c ****         /*Program halfword (16-bit) at a specified address.*/
 207:HALLIB/Src/stm32f7xx_hal_flash.c ****         FLASH_Program_HalfWord(Address, (uint16_t) Data);
 208:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 209:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 210:HALLIB/Src/stm32f7xx_hal_flash.c ****       
 211:HALLIB/Src/stm32f7xx_hal_flash.c ****       case FLASH_TYPEPROGRAM_WORD :
 212:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 213:HALLIB/Src/stm32f7xx_hal_flash.c ****         /*Program word (32-bit) at a specified address.*/
 214:HALLIB/Src/stm32f7xx_hal_flash.c ****         FLASH_Program_Word(Address, (uint32_t) Data);
 215:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 216:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 217:HALLIB/Src/stm32f7xx_hal_flash.c ****       
 218:HALLIB/Src/stm32f7xx_hal_flash.c ****       case FLASH_TYPEPROGRAM_DOUBLEWORD :
 219:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 220:HALLIB/Src/stm32f7xx_hal_flash.c ****         /*Program double word (64-bit) at a specified address.*/
 221:HALLIB/Src/stm32f7xx_hal_flash.c ****         FLASH_Program_DoubleWord(Address, Data);
 222:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 223:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 224:HALLIB/Src/stm32f7xx_hal_flash.c ****       default :
 225:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 226:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 227:HALLIB/Src/stm32f7xx_hal_flash.c ****     /* Wait for last operation to be completed */
 228:HALLIB/Src/stm32f7xx_hal_flash.c ****     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 229:HALLIB/Src/stm32f7xx_hal_flash.c ****     
 230:HALLIB/Src/stm32f7xx_hal_flash.c ****     /* If the program operation is completed, disable the PG Bit */
 231:HALLIB/Src/stm32f7xx_hal_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 232:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 233:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 234:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Process Unlocked */
 235:HALLIB/Src/stm32f7xx_hal_flash.c ****   __HAL_UNLOCK(&pFlash);
 236:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 237:HALLIB/Src/stm32f7xx_hal_flash.c ****   return status;
 238:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 239:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 240:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 241:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief   Program byte, halfword, word or double word at a specified address  with interrupt ena
 242:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  TypeProgram  Indicate the way to program at a specified address.
 243:HALLIB/Src/stm32f7xx_hal_flash.c ****   *                           This parameter can be a value of @ref FLASH_Type_Program
 244:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Address  specifies the address to be programmed.
 245:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Data specifies the data to be programmed
 246:HALLIB/Src/stm32f7xx_hal_flash.c ****   * 
 247:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval HAL Status
 248:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 249:HALLIB/Src/stm32f7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 250:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 251:HALLIB/Src/stm32f7xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 252:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 253:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Process Locked */
 254:HALLIB/Src/stm32f7xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 255:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 256:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Check the parameters */
 257:HALLIB/Src/stm32f7xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 258:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 259:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Enable End of FLASH Operation interrupt */
ARM GAS  /tmp/ccttIzZG.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_flash.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 261:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 262:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Enable Error source interrupt */
 263:HALLIB/Src/stm32f7xx_hal_flash.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 264:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 265:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Clear pending flags (if any) */  
 266:HALLIB/Src/stm32f7xx_hal_flash.c ****   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
 267:HALLIB/Src/stm32f7xx_hal_flash.c ****                          FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_ERSERR);  
 268:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 269:HALLIB/Src/stm32f7xx_hal_flash.c ****   pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 270:HALLIB/Src/stm32f7xx_hal_flash.c ****   pFlash.Address = Address;
 271:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 272:HALLIB/Src/stm32f7xx_hal_flash.c ****   switch(TypeProgram)
 273:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 274:HALLIB/Src/stm32f7xx_hal_flash.c ****     case FLASH_TYPEPROGRAM_BYTE :
 275:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 276:HALLIB/Src/stm32f7xx_hal_flash.c ****       /*Program byte (8-bit) at a specified address.*/
 277:HALLIB/Src/stm32f7xx_hal_flash.c ****       FLASH_Program_Byte(Address, (uint8_t) Data);
 278:HALLIB/Src/stm32f7xx_hal_flash.c ****       break;
 279:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 280:HALLIB/Src/stm32f7xx_hal_flash.c ****     
 281:HALLIB/Src/stm32f7xx_hal_flash.c ****     case FLASH_TYPEPROGRAM_HALFWORD :
 282:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 283:HALLIB/Src/stm32f7xx_hal_flash.c ****       /*Program halfword (16-bit) at a specified address.*/
 284:HALLIB/Src/stm32f7xx_hal_flash.c ****       FLASH_Program_HalfWord(Address, (uint16_t) Data);
 285:HALLIB/Src/stm32f7xx_hal_flash.c ****       break;
 286:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 287:HALLIB/Src/stm32f7xx_hal_flash.c ****     
 288:HALLIB/Src/stm32f7xx_hal_flash.c ****     case FLASH_TYPEPROGRAM_WORD :
 289:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 290:HALLIB/Src/stm32f7xx_hal_flash.c ****       /*Program word (32-bit) at a specified address.*/
 291:HALLIB/Src/stm32f7xx_hal_flash.c ****       FLASH_Program_Word(Address, (uint32_t) Data);
 292:HALLIB/Src/stm32f7xx_hal_flash.c ****       break;
 293:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 294:HALLIB/Src/stm32f7xx_hal_flash.c ****     
 295:HALLIB/Src/stm32f7xx_hal_flash.c ****     case FLASH_TYPEPROGRAM_DOUBLEWORD :
 296:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 297:HALLIB/Src/stm32f7xx_hal_flash.c ****       /*Program double word (64-bit) at a specified address.*/
 298:HALLIB/Src/stm32f7xx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
 299:HALLIB/Src/stm32f7xx_hal_flash.c ****       break;
 300:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 301:HALLIB/Src/stm32f7xx_hal_flash.c ****     default :
 302:HALLIB/Src/stm32f7xx_hal_flash.c ****       break;
 303:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 304:HALLIB/Src/stm32f7xx_hal_flash.c ****   return status;
 305:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 306:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 307:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 308:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief This function handles FLASH interrupt request.
 309:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval None
 310:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 311:HALLIB/Src/stm32f7xx_hal_flash.c **** void HAL_FLASH_IRQHandler(void)
 312:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 313:HALLIB/Src/stm32f7xx_hal_flash.c ****   uint32_t temp = 0;
 314:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 315:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* If the program operation is completed, disable the PG Bit */
 316:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR &= (~FLASH_CR_PG);
ARM GAS  /tmp/ccttIzZG.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 318:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* If the erase operation is completed, disable the SER Bit */
 319:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR &= (~FLASH_CR_SER);
 320:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR &= SECTOR_MASK; 
 321:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 322:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* if the erase operation is completed, disable the MER Bit */
 323:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR &= (~FLASH_MER_BIT);
 324:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 325:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 326:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 327:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 328:HALLIB/Src/stm32f7xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 329:HALLIB/Src/stm32f7xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 330:HALLIB/Src/stm32f7xx_hal_flash.c ****     
 331:HALLIB/Src/stm32f7xx_hal_flash.c ****     switch (pFlash.ProcedureOnGoing)
 332:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 333:HALLIB/Src/stm32f7xx_hal_flash.c ****       case FLASH_PROC_SECTERASE :
 334:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 335:HALLIB/Src/stm32f7xx_hal_flash.c ****         /* Nb of sector to erased can be decreased */
 336:HALLIB/Src/stm32f7xx_hal_flash.c ****         pFlash.NbSectorsToErase--;
 337:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 338:HALLIB/Src/stm32f7xx_hal_flash.c ****         /* Check if there are still sectors to erase */
 339:HALLIB/Src/stm32f7xx_hal_flash.c ****         if(pFlash.NbSectorsToErase != 0)
 340:HALLIB/Src/stm32f7xx_hal_flash.c ****         {
 341:HALLIB/Src/stm32f7xx_hal_flash.c ****           temp = pFlash.Sector;
 342:HALLIB/Src/stm32f7xx_hal_flash.c ****           /* Indicate user which sector has been erased */
 343:HALLIB/Src/stm32f7xx_hal_flash.c ****           HAL_FLASH_EndOfOperationCallback(temp);
 344:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 345:HALLIB/Src/stm32f7xx_hal_flash.c ****           /* Increment sector number */
 346:HALLIB/Src/stm32f7xx_hal_flash.c ****           temp = ++pFlash.Sector;
 347:HALLIB/Src/stm32f7xx_hal_flash.c ****           FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 348:HALLIB/Src/stm32f7xx_hal_flash.c ****         }
 349:HALLIB/Src/stm32f7xx_hal_flash.c ****         else
 350:HALLIB/Src/stm32f7xx_hal_flash.c ****         {
 351:HALLIB/Src/stm32f7xx_hal_flash.c ****           /* No more sectors to Erase, user callback can be called.*/
 352:HALLIB/Src/stm32f7xx_hal_flash.c ****           /* Reset Sector and stop Erase sectors procedure */
 353:HALLIB/Src/stm32f7xx_hal_flash.c ****           pFlash.Sector = temp = 0xFFFFFFFFU;
 354:HALLIB/Src/stm32f7xx_hal_flash.c ****           /* FLASH EOP interrupt user callback */
 355:HALLIB/Src/stm32f7xx_hal_flash.c ****           HAL_FLASH_EndOfOperationCallback(temp);
 356:HALLIB/Src/stm32f7xx_hal_flash.c ****           /* Sector Erase procedure is completed */
 357:HALLIB/Src/stm32f7xx_hal_flash.c ****           pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 358:HALLIB/Src/stm32f7xx_hal_flash.c ****         }
 359:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 360:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 361:HALLIB/Src/stm32f7xx_hal_flash.c ****     
 362:HALLIB/Src/stm32f7xx_hal_flash.c ****       case FLASH_PROC_MASSERASE :
 363:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 364:HALLIB/Src/stm32f7xx_hal_flash.c ****         /* MassErase ended. Return the selected bank : in this product we don't have Banks */
 365:HALLIB/Src/stm32f7xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 366:HALLIB/Src/stm32f7xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(0);
 367:HALLIB/Src/stm32f7xx_hal_flash.c ****         /* MAss Erase procedure is completed */
 368:HALLIB/Src/stm32f7xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 369:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 370:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 371:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 372:HALLIB/Src/stm32f7xx_hal_flash.c ****       case FLASH_PROC_PROGRAM :
 373:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
ARM GAS  /tmp/ccttIzZG.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_flash.c ****         /*Program ended. Return the selected address*/
 375:HALLIB/Src/stm32f7xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 376:HALLIB/Src/stm32f7xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 377:HALLIB/Src/stm32f7xx_hal_flash.c ****         /* Programming procedure is completed */
 378:HALLIB/Src/stm32f7xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 379:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 380:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 381:HALLIB/Src/stm32f7xx_hal_flash.c ****       default :
 382:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 383:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 384:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 385:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 386:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Check FLASH operation error flags */
 387:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 388:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 389:HALLIB/Src/stm32f7xx_hal_flash.c ****     switch (pFlash.ProcedureOnGoing)
 390:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 391:HALLIB/Src/stm32f7xx_hal_flash.c ****       case FLASH_PROC_SECTERASE :
 392:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 393:HALLIB/Src/stm32f7xx_hal_flash.c ****         /* return the faulty sector */
 394:HALLIB/Src/stm32f7xx_hal_flash.c ****         temp = pFlash.Sector;
 395:HALLIB/Src/stm32f7xx_hal_flash.c ****         pFlash.Sector = 0xFFFFFFFFU;
 396:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 397:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 398:HALLIB/Src/stm32f7xx_hal_flash.c ****       case FLASH_PROC_MASSERASE :
 399:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 400:HALLIB/Src/stm32f7xx_hal_flash.c ****         /* No return in case of Mass Erase */
 401:HALLIB/Src/stm32f7xx_hal_flash.c ****         temp = 0;
 402:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 403:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 404:HALLIB/Src/stm32f7xx_hal_flash.c ****       case FLASH_PROC_PROGRAM :
 405:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 406:HALLIB/Src/stm32f7xx_hal_flash.c ****         /*return the faulty address*/
 407:HALLIB/Src/stm32f7xx_hal_flash.c ****         temp = pFlash.Address;
 408:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 409:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 410:HALLIB/Src/stm32f7xx_hal_flash.c ****     default :
 411:HALLIB/Src/stm32f7xx_hal_flash.c ****       break;
 412:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 413:HALLIB/Src/stm32f7xx_hal_flash.c ****     /*Save the Error code*/
 414:HALLIB/Src/stm32f7xx_hal_flash.c ****     FLASH_SetErrorCode();
 415:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 416:HALLIB/Src/stm32f7xx_hal_flash.c ****     /* FLASH error interrupt user callback */
 417:HALLIB/Src/stm32f7xx_hal_flash.c ****     HAL_FLASH_OperationErrorCallback(temp);
 418:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 419:HALLIB/Src/stm32f7xx_hal_flash.c ****     /*Stop the procedure ongoing */
 420:HALLIB/Src/stm32f7xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 421:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 422:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 423:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 424:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 425:HALLIB/Src/stm32f7xx_hal_flash.c ****     /* Disable End of FLASH Operation interrupt */
 426:HALLIB/Src/stm32f7xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 427:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 428:HALLIB/Src/stm32f7xx_hal_flash.c ****     /* Disable Error source interrupt */
 429:HALLIB/Src/stm32f7xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 430:HALLIB/Src/stm32f7xx_hal_flash.c **** 
ARM GAS  /tmp/ccttIzZG.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_flash.c ****     /* Process Unlocked */
 432:HALLIB/Src/stm32f7xx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 433:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 434:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 435:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 436:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 437:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 438:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  FLASH end of operation interrupt callback
 439:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 440:HALLIB/Src/stm32f7xx_hal_flash.c ****   *                 - Sectors Erase: Sector which has been erased (if 0xFFFFFFFF, it means that 
 441:HALLIB/Src/stm32f7xx_hal_flash.c ****   *                                  all the selected sectors have been erased)
 442:HALLIB/Src/stm32f7xx_hal_flash.c ****   *                 - Program      : Address which was selected for data program
 443:HALLIB/Src/stm32f7xx_hal_flash.c ****   *                 - Mass Erase   : No return value expected
 444:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval None
 445:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 446:HALLIB/Src/stm32f7xx_hal_flash.c **** __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
 447:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 448:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 449:HALLIB/Src/stm32f7xx_hal_flash.c ****   UNUSED(ReturnValue);
 450:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 451:HALLIB/Src/stm32f7xx_hal_flash.c ****   the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
 452:HALLIB/Src/stm32f7xx_hal_flash.c ****   */ 
 453:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 454:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 455:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 456:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  FLASH operation error interrupt callback
 457:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 458:HALLIB/Src/stm32f7xx_hal_flash.c ****   *                 - Sectors Erase: Sector which has been erased (if 0xFFFFFFFF, it means that 
 459:HALLIB/Src/stm32f7xx_hal_flash.c ****   *                                  all the selected sectors have been erased)
 460:HALLIB/Src/stm32f7xx_hal_flash.c ****   *                 - Program      : Address which was selected for data program
 461:HALLIB/Src/stm32f7xx_hal_flash.c ****   *                 - Mass Erase   : No return value expected
 462:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval None
 463:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 464:HALLIB/Src/stm32f7xx_hal_flash.c **** __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 465:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 466:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 467:HALLIB/Src/stm32f7xx_hal_flash.c ****   UNUSED(ReturnValue);
 468:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 469:HALLIB/Src/stm32f7xx_hal_flash.c ****   the HAL_FLASH_OperationErrorCallback could be implemented in the user file
 470:HALLIB/Src/stm32f7xx_hal_flash.c ****    */ 
 471:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 472:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 473:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 474:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @}
 475:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 476:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 477:HALLIB/Src/stm32f7xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group2 Peripheral Control functions 
 478:HALLIB/Src/stm32f7xx_hal_flash.c ****  *  @brief   management functions 
 479:HALLIB/Src/stm32f7xx_hal_flash.c ****  *
 480:HALLIB/Src/stm32f7xx_hal_flash.c **** @verbatim   
 481:HALLIB/Src/stm32f7xx_hal_flash.c ****  ===============================================================================
 482:HALLIB/Src/stm32f7xx_hal_flash.c ****                       ##### Peripheral Control functions #####
 483:HALLIB/Src/stm32f7xx_hal_flash.c ****  ===============================================================================  
 484:HALLIB/Src/stm32f7xx_hal_flash.c ****     [..]
 485:HALLIB/Src/stm32f7xx_hal_flash.c ****     This subsection provides a set of functions allowing to control the FLASH 
 486:HALLIB/Src/stm32f7xx_hal_flash.c ****     memory operations.
 487:HALLIB/Src/stm32f7xx_hal_flash.c **** 
ARM GAS  /tmp/ccttIzZG.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_flash.c **** @endverbatim
 489:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @{
 490:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 491:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 492:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 493:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Unlock the FLASH control register access
 494:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval HAL Status
 495:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 496:HALLIB/Src/stm32f7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Unlock(void)
 497:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 498:HALLIB/Src/stm32f7xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 499:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 500:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 501:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 502:HALLIB/Src/stm32f7xx_hal_flash.c ****     /* Authorize the FLASH Registers access */
 503:HALLIB/Src/stm32f7xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 504:HALLIB/Src/stm32f7xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 505:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 506:HALLIB/Src/stm32f7xx_hal_flash.c ****     /* Verify Flash is unlocked */
 507:HALLIB/Src/stm32f7xx_hal_flash.c ****     if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 508:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 509:HALLIB/Src/stm32f7xx_hal_flash.c ****       status = HAL_ERROR;
 510:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 511:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 512:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 513:HALLIB/Src/stm32f7xx_hal_flash.c ****   return status;
 514:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 515:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 516:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 517:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Locks the FLASH control register access
 518:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval HAL Status
 519:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 520:HALLIB/Src/stm32f7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Lock(void)
 521:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 522:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 523:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 524:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 525:HALLIB/Src/stm32f7xx_hal_flash.c ****   return HAL_OK;  
 526:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 527:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 528:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 529:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Unlock the FLASH Option Control Registers access.
 530:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval HAL Status
 531:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 532:HALLIB/Src/stm32f7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
 533:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 534:HALLIB/Src/stm32f7xx_hal_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 535:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 536:HALLIB/Src/stm32f7xx_hal_flash.c ****     /* Authorizes the Option Byte register programming */
 537:HALLIB/Src/stm32f7xx_hal_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY1;
 538:HALLIB/Src/stm32f7xx_hal_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 539:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 540:HALLIB/Src/stm32f7xx_hal_flash.c ****   else
 541:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 542:HALLIB/Src/stm32f7xx_hal_flash.c ****     return HAL_ERROR;
 543:HALLIB/Src/stm32f7xx_hal_flash.c ****   }  
 544:HALLIB/Src/stm32f7xx_hal_flash.c ****   
ARM GAS  /tmp/ccttIzZG.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_flash.c ****   return HAL_OK;  
 546:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 547:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 548:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 549:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Lock the FLASH Option Control Registers access.
 550:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval HAL Status 
 551:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 552:HALLIB/Src/stm32f7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
 553:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 554:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 555:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 556:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 557:HALLIB/Src/stm32f7xx_hal_flash.c ****   return HAL_OK;  
 558:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 559:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 560:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 561:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Launch the option byte loading.
 562:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval HAL Status
 563:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 564:HALLIB/Src/stm32f7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
 565:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 566:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
 567:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 568:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 569:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Wait for last operation to be completed */
 570:HALLIB/Src/stm32f7xx_hal_flash.c ****   return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 571:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 572:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 573:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 574:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @}
 575:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 576:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 577:HALLIB/Src/stm32f7xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group3 Peripheral State and Errors functions 
 578:HALLIB/Src/stm32f7xx_hal_flash.c ****  *  @brief   Peripheral Errors functions 
 579:HALLIB/Src/stm32f7xx_hal_flash.c ****  *
 580:HALLIB/Src/stm32f7xx_hal_flash.c **** @verbatim   
 581:HALLIB/Src/stm32f7xx_hal_flash.c ****  ===============================================================================
 582:HALLIB/Src/stm32f7xx_hal_flash.c ****                 ##### Peripheral Errors functions #####
 583:HALLIB/Src/stm32f7xx_hal_flash.c ****  ===============================================================================  
 584:HALLIB/Src/stm32f7xx_hal_flash.c ****     [..]
 585:HALLIB/Src/stm32f7xx_hal_flash.c ****     This subsection permits to get in run-time Errors of the FLASH peripheral.
 586:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 587:HALLIB/Src/stm32f7xx_hal_flash.c **** @endverbatim
 588:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @{
 589:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 590:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 591:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 592:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Get the specific FLASH error flag.
 593:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval FLASH_ErrorCode: The returned value can be:
 594:HALLIB/Src/stm32f7xx_hal_flash.c ****   *            @arg FLASH_ERROR_ERS: FLASH Erasing Sequence error flag 
 595:HALLIB/Src/stm32f7xx_hal_flash.c ****   *            @arg FLASH_ERROR_PGP: FLASH Programming Parallelism error flag  
 596:HALLIB/Src/stm32f7xx_hal_flash.c ****   *            @arg FLASH_ERROR_PGA: FLASH Programming Alignment error flag
 597:HALLIB/Src/stm32f7xx_hal_flash.c ****   *            @arg FLASH_ERROR_WRP: FLASH Write protected error flag
 598:HALLIB/Src/stm32f7xx_hal_flash.c ****   *            @arg FLASH_ERROR_OPERATION: FLASH operation Error flag 
 599:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 600:HALLIB/Src/stm32f7xx_hal_flash.c **** uint32_t HAL_FLASH_GetError(void)
 601:HALLIB/Src/stm32f7xx_hal_flash.c **** { 
ARM GAS  /tmp/ccttIzZG.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_flash.c ****    return pFlash.ErrorCode;
 603:HALLIB/Src/stm32f7xx_hal_flash.c **** }  
 604:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 605:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 606:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @}
 607:HALLIB/Src/stm32f7xx_hal_flash.c ****   */    
 608:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 609:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 610:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Wait for a FLASH operation to complete.
 611:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Timeout maximum flash operationtimeout
 612:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval HAL Status
 613:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 614:HALLIB/Src/stm32f7xx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 615:HALLIB/Src/stm32f7xx_hal_flash.c **** { 
 616:HALLIB/Src/stm32f7xx_hal_flash.c ****   uint32_t tickstart = 0;
 617:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 618:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Clear Error Code */
 619:HALLIB/Src/stm32f7xx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 620:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 621:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 622:HALLIB/Src/stm32f7xx_hal_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
 623:HALLIB/Src/stm32f7xx_hal_flash.c ****      flag will be set */
 624:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Get tick */
 625:HALLIB/Src/stm32f7xx_hal_flash.c ****   tickstart = HAL_GetTick();
 626:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 627:HALLIB/Src/stm32f7xx_hal_flash.c ****   while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 628:HALLIB/Src/stm32f7xx_hal_flash.c ****   { 
 629:HALLIB/Src/stm32f7xx_hal_flash.c ****     if(Timeout != HAL_MAX_DELAY)
 630:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 631:HALLIB/Src/stm32f7xx_hal_flash.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 632:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 633:HALLIB/Src/stm32f7xx_hal_flash.c ****         return HAL_TIMEOUT;
 634:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 635:HALLIB/Src/stm32f7xx_hal_flash.c ****     } 
 636:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 637:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 638:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 639:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 640:HALLIB/Src/stm32f7xx_hal_flash.c ****     /*Save the error code*/
 641:HALLIB/Src/stm32f7xx_hal_flash.c ****     FLASH_SetErrorCode();
 642:HALLIB/Src/stm32f7xx_hal_flash.c ****     return HAL_ERROR;
 643:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 644:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 645:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 646:HALLIB/Src/stm32f7xx_hal_flash.c ****   if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 647:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 648:HALLIB/Src/stm32f7xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 649:HALLIB/Src/stm32f7xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 650:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 651:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 652:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* If there is an error flag set */
 653:HALLIB/Src/stm32f7xx_hal_flash.c ****   return HAL_OK;
 654:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 655:HALLIB/Src/stm32f7xx_hal_flash.c **** }  
 656:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 657:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 658:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Program a double word (64-bit) at a specified address.
ARM GAS  /tmp/ccttIzZG.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
 660:HALLIB/Src/stm32f7xx_hal_flash.c ****   *         2.7V to 3.6V and an External Vpp is present.
 661:HALLIB/Src/stm32f7xx_hal_flash.c ****   *
 662:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 663:HALLIB/Src/stm32f7xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 664:HALLIB/Src/stm32f7xx_hal_flash.c ****   *  
 665:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 666:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 667:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval None
 668:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 669:HALLIB/Src/stm32f7xx_hal_flash.c **** static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
 670:HALLIB/Src/stm32f7xx_hal_flash.c **** {
  28              		.loc 1 670 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 10B4     		push	{r4}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 4, -4
 671:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Check the parameters */
 672:HALLIB/Src/stm32f7xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 673:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 674:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 675:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR &= CR_PSIZE_MASK;
  38              		.loc 1 675 0
  39 0002 0A49     		ldr	r1, .L3
  40 0004 0C69     		ldr	r4, [r1, #16]
  41 0006 24F44074 		bic	r4, r4, #768
  42 000a 0C61     		str	r4, [r1, #16]
 676:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
  43              		.loc 1 676 0
  44 000c 0C69     		ldr	r4, [r1, #16]
  45 000e 44F44074 		orr	r4, r4, #768
  46 0012 0C61     		str	r4, [r1, #16]
 677:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
  47              		.loc 1 677 0
  48 0014 0C69     		ldr	r4, [r1, #16]
  49 0016 44F00104 		orr	r4, r4, #1
  50 001a 0C61     		str	r4, [r1, #16]
 678:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 679:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Program the double-word */
 680:HALLIB/Src/stm32f7xx_hal_flash.c ****   *(__IO uint32_t*)Address = (uint32_t)Data;
  51              		.loc 1 680 0
  52 001c 0260     		str	r2, [r0]
 681:HALLIB/Src/stm32f7xx_hal_flash.c ****   *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
  53              		.loc 1 681 0
  54 001e 4360     		str	r3, [r0, #4]
  55              	.LBB10:
  56              	.LBB11:
  57              		.file 2 "CORE/cmsis_gcc.h"
   1:CORE/cmsis_gcc.h **** /**************************************************************************//**
   2:CORE/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:CORE/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:CORE/cmsis_gcc.h ****  * @version  V4.30
ARM GAS  /tmp/ccttIzZG.s 			page 14


   5:CORE/cmsis_gcc.h ****  * @date     20. October 2015
   6:CORE/cmsis_gcc.h ****  ******************************************************************************/
   7:CORE/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:CORE/cmsis_gcc.h **** 
   9:CORE/cmsis_gcc.h ****    All rights reserved.
  10:CORE/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:CORE/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:CORE/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:CORE/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:CORE/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:CORE/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:CORE/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:CORE/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:CORE/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:CORE/cmsis_gcc.h ****      specific prior written permission.
  20:CORE/cmsis_gcc.h ****    *
  21:CORE/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:CORE/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:CORE/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:CORE/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:CORE/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:CORE/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:CORE/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:CORE/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:CORE/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:CORE/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:CORE/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:CORE/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:CORE/cmsis_gcc.h **** 
  34:CORE/cmsis_gcc.h **** 
  35:CORE/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:CORE/cmsis_gcc.h **** 
  38:CORE/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:CORE/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:CORE/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:CORE/cmsis_gcc.h **** #endif
  45:CORE/cmsis_gcc.h **** 
  46:CORE/cmsis_gcc.h **** 
  47:CORE/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:CORE/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:CORE/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:CORE/cmsis_gcc.h ****   @{
  51:CORE/cmsis_gcc.h ****  */
  52:CORE/cmsis_gcc.h **** 
  53:CORE/cmsis_gcc.h **** /**
  54:CORE/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:CORE/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:CORE/cmsis_gcc.h ****  */
  58:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:CORE/cmsis_gcc.h **** {
  60:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:CORE/cmsis_gcc.h **** }
ARM GAS  /tmp/ccttIzZG.s 			page 15


  62:CORE/cmsis_gcc.h **** 
  63:CORE/cmsis_gcc.h **** 
  64:CORE/cmsis_gcc.h **** /**
  65:CORE/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:CORE/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:CORE/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:CORE/cmsis_gcc.h ****  */
  69:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:CORE/cmsis_gcc.h **** {
  71:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:CORE/cmsis_gcc.h **** }
  73:CORE/cmsis_gcc.h **** 
  74:CORE/cmsis_gcc.h **** 
  75:CORE/cmsis_gcc.h **** /**
  76:CORE/cmsis_gcc.h ****   \brief   Get Control Register
  77:CORE/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:CORE/cmsis_gcc.h ****   \return               Control Register value
  79:CORE/cmsis_gcc.h ****  */
  80:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:CORE/cmsis_gcc.h **** {
  82:CORE/cmsis_gcc.h ****   uint32_t result;
  83:CORE/cmsis_gcc.h **** 
  84:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:CORE/cmsis_gcc.h ****   return(result);
  86:CORE/cmsis_gcc.h **** }
  87:CORE/cmsis_gcc.h **** 
  88:CORE/cmsis_gcc.h **** 
  89:CORE/cmsis_gcc.h **** /**
  90:CORE/cmsis_gcc.h ****   \brief   Set Control Register
  91:CORE/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:CORE/cmsis_gcc.h ****  */
  94:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:CORE/cmsis_gcc.h **** {
  96:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:CORE/cmsis_gcc.h **** }
  98:CORE/cmsis_gcc.h **** 
  99:CORE/cmsis_gcc.h **** 
 100:CORE/cmsis_gcc.h **** /**
 101:CORE/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:CORE/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:CORE/cmsis_gcc.h ****   \return               IPSR Register value
 104:CORE/cmsis_gcc.h ****  */
 105:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:CORE/cmsis_gcc.h **** {
 107:CORE/cmsis_gcc.h ****   uint32_t result;
 108:CORE/cmsis_gcc.h **** 
 109:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:CORE/cmsis_gcc.h ****   return(result);
 111:CORE/cmsis_gcc.h **** }
 112:CORE/cmsis_gcc.h **** 
 113:CORE/cmsis_gcc.h **** 
 114:CORE/cmsis_gcc.h **** /**
 115:CORE/cmsis_gcc.h ****   \brief   Get APSR Register
 116:CORE/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:CORE/cmsis_gcc.h ****   \return               APSR Register value
 118:CORE/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccttIzZG.s 			page 16


 119:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:CORE/cmsis_gcc.h **** {
 121:CORE/cmsis_gcc.h ****   uint32_t result;
 122:CORE/cmsis_gcc.h **** 
 123:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:CORE/cmsis_gcc.h ****   return(result);
 125:CORE/cmsis_gcc.h **** }
 126:CORE/cmsis_gcc.h **** 
 127:CORE/cmsis_gcc.h **** 
 128:CORE/cmsis_gcc.h **** /**
 129:CORE/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:CORE/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:CORE/cmsis_gcc.h **** 
 132:CORE/cmsis_gcc.h ****     \return               xPSR Register value
 133:CORE/cmsis_gcc.h ****  */
 134:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:CORE/cmsis_gcc.h **** {
 136:CORE/cmsis_gcc.h ****   uint32_t result;
 137:CORE/cmsis_gcc.h **** 
 138:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:CORE/cmsis_gcc.h ****   return(result);
 140:CORE/cmsis_gcc.h **** }
 141:CORE/cmsis_gcc.h **** 
 142:CORE/cmsis_gcc.h **** 
 143:CORE/cmsis_gcc.h **** /**
 144:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:CORE/cmsis_gcc.h ****   \return               PSP Register value
 147:CORE/cmsis_gcc.h ****  */
 148:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:CORE/cmsis_gcc.h **** {
 150:CORE/cmsis_gcc.h ****   register uint32_t result;
 151:CORE/cmsis_gcc.h **** 
 152:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:CORE/cmsis_gcc.h ****   return(result);
 154:CORE/cmsis_gcc.h **** }
 155:CORE/cmsis_gcc.h **** 
 156:CORE/cmsis_gcc.h **** 
 157:CORE/cmsis_gcc.h **** /**
 158:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:CORE/cmsis_gcc.h ****  */
 162:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:CORE/cmsis_gcc.h **** {
 164:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:CORE/cmsis_gcc.h **** }
 166:CORE/cmsis_gcc.h **** 
 167:CORE/cmsis_gcc.h **** 
 168:CORE/cmsis_gcc.h **** /**
 169:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:CORE/cmsis_gcc.h ****   \return               MSP Register value
 172:CORE/cmsis_gcc.h ****  */
 173:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:CORE/cmsis_gcc.h **** {
 175:CORE/cmsis_gcc.h ****   register uint32_t result;
ARM GAS  /tmp/ccttIzZG.s 			page 17


 176:CORE/cmsis_gcc.h **** 
 177:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:CORE/cmsis_gcc.h ****   return(result);
 179:CORE/cmsis_gcc.h **** }
 180:CORE/cmsis_gcc.h **** 
 181:CORE/cmsis_gcc.h **** 
 182:CORE/cmsis_gcc.h **** /**
 183:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:CORE/cmsis_gcc.h **** 
 186:CORE/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:CORE/cmsis_gcc.h ****  */
 188:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:CORE/cmsis_gcc.h **** {
 190:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:CORE/cmsis_gcc.h **** }
 192:CORE/cmsis_gcc.h **** 
 193:CORE/cmsis_gcc.h **** 
 194:CORE/cmsis_gcc.h **** /**
 195:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:CORE/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 198:CORE/cmsis_gcc.h ****  */
 199:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:CORE/cmsis_gcc.h **** {
 201:CORE/cmsis_gcc.h ****   uint32_t result;
 202:CORE/cmsis_gcc.h **** 
 203:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:CORE/cmsis_gcc.h ****   return(result);
 205:CORE/cmsis_gcc.h **** }
 206:CORE/cmsis_gcc.h **** 
 207:CORE/cmsis_gcc.h **** 
 208:CORE/cmsis_gcc.h **** /**
 209:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:CORE/cmsis_gcc.h ****  */
 213:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:CORE/cmsis_gcc.h **** {
 215:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:CORE/cmsis_gcc.h **** }
 217:CORE/cmsis_gcc.h **** 
 218:CORE/cmsis_gcc.h **** 
 219:CORE/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:CORE/cmsis_gcc.h **** 
 221:CORE/cmsis_gcc.h **** /**
 222:CORE/cmsis_gcc.h ****   \brief   Enable FIQ
 223:CORE/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:CORE/cmsis_gcc.h ****  */
 226:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:CORE/cmsis_gcc.h **** {
 228:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:CORE/cmsis_gcc.h **** }
 230:CORE/cmsis_gcc.h **** 
 231:CORE/cmsis_gcc.h **** 
 232:CORE/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccttIzZG.s 			page 18


 233:CORE/cmsis_gcc.h ****   \brief   Disable FIQ
 234:CORE/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:CORE/cmsis_gcc.h ****  */
 237:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:CORE/cmsis_gcc.h **** {
 239:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:CORE/cmsis_gcc.h **** }
 241:CORE/cmsis_gcc.h **** 
 242:CORE/cmsis_gcc.h **** 
 243:CORE/cmsis_gcc.h **** /**
 244:CORE/cmsis_gcc.h ****   \brief   Get Base Priority
 245:CORE/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 247:CORE/cmsis_gcc.h ****  */
 248:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:CORE/cmsis_gcc.h **** {
 250:CORE/cmsis_gcc.h ****   uint32_t result;
 251:CORE/cmsis_gcc.h **** 
 252:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:CORE/cmsis_gcc.h ****   return(result);
 254:CORE/cmsis_gcc.h **** }
 255:CORE/cmsis_gcc.h **** 
 256:CORE/cmsis_gcc.h **** 
 257:CORE/cmsis_gcc.h **** /**
 258:CORE/cmsis_gcc.h ****   \brief   Set Base Priority
 259:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:CORE/cmsis_gcc.h ****  */
 262:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:CORE/cmsis_gcc.h **** {
 264:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:CORE/cmsis_gcc.h **** }
 266:CORE/cmsis_gcc.h **** 
 267:CORE/cmsis_gcc.h **** 
 268:CORE/cmsis_gcc.h **** /**
 269:CORE/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:CORE/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:CORE/cmsis_gcc.h ****  */
 274:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:CORE/cmsis_gcc.h **** {
 276:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:CORE/cmsis_gcc.h **** }
 278:CORE/cmsis_gcc.h **** 
 279:CORE/cmsis_gcc.h **** 
 280:CORE/cmsis_gcc.h **** /**
 281:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:CORE/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 284:CORE/cmsis_gcc.h ****  */
 285:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:CORE/cmsis_gcc.h **** {
 287:CORE/cmsis_gcc.h ****   uint32_t result;
 288:CORE/cmsis_gcc.h **** 
 289:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
ARM GAS  /tmp/ccttIzZG.s 			page 19


 290:CORE/cmsis_gcc.h ****   return(result);
 291:CORE/cmsis_gcc.h **** }
 292:CORE/cmsis_gcc.h **** 
 293:CORE/cmsis_gcc.h **** 
 294:CORE/cmsis_gcc.h **** /**
 295:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:CORE/cmsis_gcc.h ****  */
 299:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:CORE/cmsis_gcc.h **** {
 301:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:CORE/cmsis_gcc.h **** }
 303:CORE/cmsis_gcc.h **** 
 304:CORE/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:CORE/cmsis_gcc.h **** 
 306:CORE/cmsis_gcc.h **** 
 307:CORE/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:CORE/cmsis_gcc.h **** 
 309:CORE/cmsis_gcc.h **** /**
 310:CORE/cmsis_gcc.h ****   \brief   Get FPSCR
 311:CORE/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:CORE/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:CORE/cmsis_gcc.h ****  */
 314:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:CORE/cmsis_gcc.h **** {
 316:CORE/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:CORE/cmsis_gcc.h ****   uint32_t result;
 318:CORE/cmsis_gcc.h **** 
 319:CORE/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 321:CORE/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 323:CORE/cmsis_gcc.h ****   return(result);
 324:CORE/cmsis_gcc.h **** #else
 325:CORE/cmsis_gcc.h ****    return(0);
 326:CORE/cmsis_gcc.h **** #endif
 327:CORE/cmsis_gcc.h **** }
 328:CORE/cmsis_gcc.h **** 
 329:CORE/cmsis_gcc.h **** 
 330:CORE/cmsis_gcc.h **** /**
 331:CORE/cmsis_gcc.h ****   \brief   Set FPSCR
 332:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:CORE/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:CORE/cmsis_gcc.h ****  */
 335:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:CORE/cmsis_gcc.h **** {
 337:CORE/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:CORE/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 340:CORE/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 342:CORE/cmsis_gcc.h **** #endif
 343:CORE/cmsis_gcc.h **** }
 344:CORE/cmsis_gcc.h **** 
 345:CORE/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccttIzZG.s 			page 20


 347:CORE/cmsis_gcc.h **** 
 348:CORE/cmsis_gcc.h **** 
 349:CORE/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:CORE/cmsis_gcc.h **** 
 351:CORE/cmsis_gcc.h **** 
 352:CORE/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:CORE/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:CORE/cmsis_gcc.h ****   Access to dedicated instructions
 355:CORE/cmsis_gcc.h ****   @{
 356:CORE/cmsis_gcc.h **** */
 357:CORE/cmsis_gcc.h **** 
 358:CORE/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:CORE/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:CORE/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:CORE/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:CORE/cmsis_gcc.h **** #else
 365:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:CORE/cmsis_gcc.h **** #endif
 368:CORE/cmsis_gcc.h **** 
 369:CORE/cmsis_gcc.h **** /**
 370:CORE/cmsis_gcc.h ****   \brief   No Operation
 371:CORE/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:CORE/cmsis_gcc.h ****  */
 373:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:CORE/cmsis_gcc.h **** {
 375:CORE/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:CORE/cmsis_gcc.h **** }
 377:CORE/cmsis_gcc.h **** 
 378:CORE/cmsis_gcc.h **** 
 379:CORE/cmsis_gcc.h **** /**
 380:CORE/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:CORE/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:CORE/cmsis_gcc.h ****  */
 383:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:CORE/cmsis_gcc.h **** {
 385:CORE/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:CORE/cmsis_gcc.h **** }
 387:CORE/cmsis_gcc.h **** 
 388:CORE/cmsis_gcc.h **** 
 389:CORE/cmsis_gcc.h **** /**
 390:CORE/cmsis_gcc.h ****   \brief   Wait For Event
 391:CORE/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:CORE/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:CORE/cmsis_gcc.h ****  */
 394:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:CORE/cmsis_gcc.h **** {
 396:CORE/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:CORE/cmsis_gcc.h **** }
 398:CORE/cmsis_gcc.h **** 
 399:CORE/cmsis_gcc.h **** 
 400:CORE/cmsis_gcc.h **** /**
 401:CORE/cmsis_gcc.h ****   \brief   Send Event
 402:CORE/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:CORE/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccttIzZG.s 			page 21


 404:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:CORE/cmsis_gcc.h **** {
 406:CORE/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:CORE/cmsis_gcc.h **** }
 408:CORE/cmsis_gcc.h **** 
 409:CORE/cmsis_gcc.h **** 
 410:CORE/cmsis_gcc.h **** /**
 411:CORE/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:CORE/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:CORE/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:CORE/cmsis_gcc.h ****            after the instruction has been completed.
 415:CORE/cmsis_gcc.h ****  */
 416:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:CORE/cmsis_gcc.h **** {
 418:CORE/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:CORE/cmsis_gcc.h **** }
 420:CORE/cmsis_gcc.h **** 
 421:CORE/cmsis_gcc.h **** 
 422:CORE/cmsis_gcc.h **** /**
 423:CORE/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:CORE/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:CORE/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:CORE/cmsis_gcc.h ****  */
 427:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:CORE/cmsis_gcc.h **** {
 429:CORE/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  58              		.loc 2 429 0
  59              		.syntax unified
  60              	@ 429 "CORE/cmsis_gcc.h" 1
  61 0020 BFF34F8F 		dsb 0xF
  62              	@ 0 "" 2
  63              		.thumb
  64              		.syntax unified
  65              	.LBE11:
  66              	.LBE10:
 682:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 683:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
 684:HALLIB/Src/stm32f7xx_hal_flash.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 685:HALLIB/Src/stm32f7xx_hal_flash.c ****   __DSB();
 686:HALLIB/Src/stm32f7xx_hal_flash.c **** }
  67              		.loc 1 686 0
  68 0024 5DF8044B 		ldr	r4, [sp], #4
  69              	.LCFI1:
  70              		.cfi_restore 4
  71              		.cfi_def_cfa_offset 0
  72 0028 7047     		bx	lr
  73              	.L4:
  74 002a 00BF     		.align	2
  75              	.L3:
  76 002c 003C0240 		.word	1073888256
  77              		.cfi_endproc
  78              	.LFE148:
  80              		.section	.text.FLASH_Program_Word,"ax",%progbits
  81              		.align	2
  82              		.thumb
  83              		.thumb_func
  85              	FLASH_Program_Word:
ARM GAS  /tmp/ccttIzZG.s 			page 22


  86              	.LFB149:
 687:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 688:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 689:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 690:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Program word (32-bit) at a specified address.
 691:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
 692:HALLIB/Src/stm32f7xx_hal_flash.c ****   *         2.7V to 3.6V.
 693:HALLIB/Src/stm32f7xx_hal_flash.c ****   *
 694:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 695:HALLIB/Src/stm32f7xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 696:HALLIB/Src/stm32f7xx_hal_flash.c ****   *  
 697:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 698:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 699:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval None
 700:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 701:HALLIB/Src/stm32f7xx_hal_flash.c **** static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
 702:HALLIB/Src/stm32f7xx_hal_flash.c **** {
  87              		.loc 1 702 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  92              	.LVL1:
 703:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Check the parameters */
 704:HALLIB/Src/stm32f7xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 705:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 706:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 707:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR &= CR_PSIZE_MASK;
  93              		.loc 1 707 0
  94 0000 084B     		ldr	r3, .L6
  95 0002 1A69     		ldr	r2, [r3, #16]
  96 0004 22F44072 		bic	r2, r2, #768
  97 0008 1A61     		str	r2, [r3, #16]
 708:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_WORD;
  98              		.loc 1 708 0
  99 000a 1A69     		ldr	r2, [r3, #16]
 100 000c 42F40072 		orr	r2, r2, #512
 101 0010 1A61     		str	r2, [r3, #16]
 709:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
 102              		.loc 1 709 0
 103 0012 1A69     		ldr	r2, [r3, #16]
 104 0014 42F00102 		orr	r2, r2, #1
 105 0018 1A61     		str	r2, [r3, #16]
 710:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 711:HALLIB/Src/stm32f7xx_hal_flash.c ****   *(__IO uint32_t*)Address = Data;
 106              		.loc 1 711 0
 107 001a 0160     		str	r1, [r0]
 108              	.LBB12:
 109              	.LBB13:
 110              		.loc 2 429 0
 111              		.syntax unified
 112              	@ 429 "CORE/cmsis_gcc.h" 1
 113 001c BFF34F8F 		dsb 0xF
 114              	@ 0 "" 2
 115              		.thumb
 116              		.syntax unified
 117 0020 7047     		bx	lr
ARM GAS  /tmp/ccttIzZG.s 			page 23


 118              	.L7:
 119 0022 00BF     		.align	2
 120              	.L6:
 121 0024 003C0240 		.word	1073888256
 122              	.LBE13:
 123              	.LBE12:
 124              		.cfi_endproc
 125              	.LFE149:
 127              		.section	.text.FLASH_Program_HalfWord,"ax",%progbits
 128              		.align	2
 129              		.thumb
 130              		.thumb_func
 132              	FLASH_Program_HalfWord:
 133              	.LFB150:
 712:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 713:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
 714:HALLIB/Src/stm32f7xx_hal_flash.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 715:HALLIB/Src/stm32f7xx_hal_flash.c ****   __DSB();
 716:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 717:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 718:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 719:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Program a half-word (16-bit) at a specified address.
 720:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
 721:HALLIB/Src/stm32f7xx_hal_flash.c ****   *         2.7V to 3.6V.
 722:HALLIB/Src/stm32f7xx_hal_flash.c ****   *
 723:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 724:HALLIB/Src/stm32f7xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 725:HALLIB/Src/stm32f7xx_hal_flash.c ****   *  
 726:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 727:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 728:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval None
 729:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 730:HALLIB/Src/stm32f7xx_hal_flash.c **** static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
 731:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 134              		.loc 1 731 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 139              	.LVL2:
 732:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Check the parameters */
 733:HALLIB/Src/stm32f7xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 734:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 735:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 736:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR &= CR_PSIZE_MASK;
 140              		.loc 1 736 0
 141 0000 084B     		ldr	r3, .L9
 142 0002 1A69     		ldr	r2, [r3, #16]
 143 0004 22F44072 		bic	r2, r2, #768
 144 0008 1A61     		str	r2, [r3, #16]
 737:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 145              		.loc 1 737 0
 146 000a 1A69     		ldr	r2, [r3, #16]
 147 000c 42F48072 		orr	r2, r2, #256
 148 0010 1A61     		str	r2, [r3, #16]
 738:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
 149              		.loc 1 738 0
ARM GAS  /tmp/ccttIzZG.s 			page 24


 150 0012 1A69     		ldr	r2, [r3, #16]
 151 0014 42F00102 		orr	r2, r2, #1
 152 0018 1A61     		str	r2, [r3, #16]
 739:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 740:HALLIB/Src/stm32f7xx_hal_flash.c ****   *(__IO uint16_t*)Address = Data;
 153              		.loc 1 740 0
 154 001a 0180     		strh	r1, [r0]	@ movhi
 155              	.LBB14:
 156              	.LBB15:
 157              		.loc 2 429 0
 158              		.syntax unified
 159              	@ 429 "CORE/cmsis_gcc.h" 1
 160 001c BFF34F8F 		dsb 0xF
 161              	@ 0 "" 2
 162              		.thumb
 163              		.syntax unified
 164 0020 7047     		bx	lr
 165              	.L10:
 166 0022 00BF     		.align	2
 167              	.L9:
 168 0024 003C0240 		.word	1073888256
 169              	.LBE15:
 170              	.LBE14:
 171              		.cfi_endproc
 172              	.LFE150:
 174              		.section	.text.FLASH_Program_Byte,"ax",%progbits
 175              		.align	2
 176              		.thumb
 177              		.thumb_func
 179              	FLASH_Program_Byte:
 180              	.LFB151:
 741:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 742:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
 743:HALLIB/Src/stm32f7xx_hal_flash.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 744:HALLIB/Src/stm32f7xx_hal_flash.c ****   __DSB();
 745:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 746:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 747:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 748:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 749:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Program byte (8-bit) at a specified address.
 750:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
 751:HALLIB/Src/stm32f7xx_hal_flash.c ****   *         2.7V to 3.6V.
 752:HALLIB/Src/stm32f7xx_hal_flash.c ****   *
 753:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 754:HALLIB/Src/stm32f7xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 755:HALLIB/Src/stm32f7xx_hal_flash.c ****   *  
 756:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 757:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 758:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval None
 759:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 760:HALLIB/Src/stm32f7xx_hal_flash.c **** static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
 761:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 181              		.loc 1 761 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		@ link register save eliminated.
ARM GAS  /tmp/ccttIzZG.s 			page 25


 186              	.LVL3:
 762:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Check the parameters */
 763:HALLIB/Src/stm32f7xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 764:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 765:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 766:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR &= CR_PSIZE_MASK;
 187              		.loc 1 766 0
 188 0000 074B     		ldr	r3, .L12
 189 0002 1A69     		ldr	r2, [r3, #16]
 190 0004 22F44072 		bic	r2, r2, #768
 191 0008 1A61     		str	r2, [r3, #16]
 767:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_BYTE;
 192              		.loc 1 767 0
 193 000a 1A69     		ldr	r2, [r3, #16]
 194 000c 1A61     		str	r2, [r3, #16]
 768:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
 195              		.loc 1 768 0
 196 000e 1A69     		ldr	r2, [r3, #16]
 197 0010 42F00102 		orr	r2, r2, #1
 198 0014 1A61     		str	r2, [r3, #16]
 769:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 770:HALLIB/Src/stm32f7xx_hal_flash.c ****   *(__IO uint8_t*)Address = Data;
 199              		.loc 1 770 0
 200 0016 0170     		strb	r1, [r0]
 201              	.LBB16:
 202              	.LBB17:
 203              		.loc 2 429 0
 204              		.syntax unified
 205              	@ 429 "CORE/cmsis_gcc.h" 1
 206 0018 BFF34F8F 		dsb 0xF
 207              	@ 0 "" 2
 208              		.thumb
 209              		.syntax unified
 210 001c 7047     		bx	lr
 211              	.L13:
 212 001e 00BF     		.align	2
 213              	.L12:
 214 0020 003C0240 		.word	1073888256
 215              	.LBE17:
 216              	.LBE16:
 217              		.cfi_endproc
 218              	.LFE151:
 220              		.section	.text.FLASH_SetErrorCode,"ax",%progbits
 221              		.align	2
 222              		.thumb
 223              		.thumb_func
 225              	FLASH_SetErrorCode:
 226              	.LFB152:
 771:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 772:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
 773:HALLIB/Src/stm32f7xx_hal_flash.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 774:HALLIB/Src/stm32f7xx_hal_flash.c ****   __DSB();
 775:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 776:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 777:HALLIB/Src/stm32f7xx_hal_flash.c **** /**
 778:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @brief  Set the specific FLASH error flag.
 779:HALLIB/Src/stm32f7xx_hal_flash.c ****   * @retval None
ARM GAS  /tmp/ccttIzZG.s 			page 26


 780:HALLIB/Src/stm32f7xx_hal_flash.c ****   */
 781:HALLIB/Src/stm32f7xx_hal_flash.c **** static void FLASH_SetErrorCode(void)
 782:HALLIB/Src/stm32f7xx_hal_flash.c **** {
 227              		.loc 1 782 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 783:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 232              		.loc 1 783 0
 233 0000 1A4B     		ldr	r3, .L20
 234 0002 DB68     		ldr	r3, [r3, #12]
 235 0004 13F0020F 		tst	r3, #2
 236 0008 04D0     		beq	.L15
 784:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 785:HALLIB/Src/stm32f7xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 237              		.loc 1 785 0
 238 000a 194A     		ldr	r2, .L20+4
 239 000c 9369     		ldr	r3, [r2, #24]
 240 000e 43F02003 		orr	r3, r3, #32
 241 0012 9361     		str	r3, [r2, #24]
 242              	.L15:
 786:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 787:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 788:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 243              		.loc 1 788 0
 244 0014 154B     		ldr	r3, .L20
 245 0016 DB68     		ldr	r3, [r3, #12]
 246 0018 13F0100F 		tst	r3, #16
 247 001c 04D0     		beq	.L16
 789:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 790:HALLIB/Src/stm32f7xx_hal_flash.c ****    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 248              		.loc 1 790 0
 249 001e 144A     		ldr	r2, .L20+4
 250 0020 9369     		ldr	r3, [r2, #24]
 251 0022 43F01003 		orr	r3, r3, #16
 252 0026 9361     		str	r3, [r2, #24]
 253              	.L16:
 791:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 792:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 793:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 254              		.loc 1 793 0
 255 0028 104B     		ldr	r3, .L20
 256 002a DB68     		ldr	r3, [r3, #12]
 257 002c 13F0200F 		tst	r3, #32
 258 0030 04D0     		beq	.L17
 794:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 795:HALLIB/Src/stm32f7xx_hal_flash.c ****    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 259              		.loc 1 795 0
 260 0032 0F4A     		ldr	r2, .L20+4
 261 0034 9369     		ldr	r3, [r2, #24]
 262 0036 43F00803 		orr	r3, r3, #8
 263 003a 9361     		str	r3, [r2, #24]
 264              	.L17:
 796:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 797:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 798:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
ARM GAS  /tmp/ccttIzZG.s 			page 27


 265              		.loc 1 798 0
 266 003c 0B4B     		ldr	r3, .L20
 267 003e DB68     		ldr	r3, [r3, #12]
 268 0040 13F0400F 		tst	r3, #64
 269 0044 04D0     		beq	.L18
 799:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 800:HALLIB/Src/stm32f7xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 270              		.loc 1 800 0
 271 0046 0A4A     		ldr	r2, .L20+4
 272 0048 9369     		ldr	r3, [r2, #24]
 273 004a 43F00403 		orr	r3, r3, #4
 274 004e 9361     		str	r3, [r2, #24]
 275              	.L18:
 801:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 802:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 803:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 276              		.loc 1 803 0
 277 0050 064B     		ldr	r3, .L20
 278 0052 DB68     		ldr	r3, [r3, #12]
 279 0054 13F0800F 		tst	r3, #128
 280 0058 04D0     		beq	.L19
 804:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 805:HALLIB/Src/stm32f7xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 281              		.loc 1 805 0
 282 005a 054A     		ldr	r2, .L20+4
 283 005c 9369     		ldr	r3, [r2, #24]
 284 005e 43F00203 		orr	r3, r3, #2
 285 0062 9361     		str	r3, [r2, #24]
 286              	.L19:
 806:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 807:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 808:HALLIB/Src/stm32f7xx_hal_flash.c **** #if defined (FLASH_OPTCR2_PCROP)
 809:HALLIB/Src/stm32f7xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 810:HALLIB/Src/stm32f7xx_hal_flash.c ****   { 
 811:HALLIB/Src/stm32f7xx_hal_flash.c ****    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 812:HALLIB/Src/stm32f7xx_hal_flash.c ****   }  
 813:HALLIB/Src/stm32f7xx_hal_flash.c **** #endif /* FLASH_OPTCR2_PCROP */
 814:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 815:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Clear error programming flags */
 816:HALLIB/Src/stm32f7xx_hal_flash.c ****   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 287              		.loc 1 816 0
 288 0064 F222     		movs	r2, #242
 289 0066 014B     		ldr	r3, .L20
 290 0068 DA60     		str	r2, [r3, #12]
 291 006a 7047     		bx	lr
 292              	.L21:
 293              		.align	2
 294              	.L20:
 295 006c 003C0240 		.word	1073888256
 296 0070 00000000 		.word	pFlash
 297              		.cfi_endproc
 298              	.LFE152:
 300              		.section	.text.HAL_FLASH_Program_IT,"ax",%progbits
 301              		.align	2
 302              		.global	HAL_FLASH_Program_IT
 303              		.thumb
 304              		.thumb_func
ARM GAS  /tmp/ccttIzZG.s 			page 28


 306              	HAL_FLASH_Program_IT:
 307              	.LFB137:
 250:HALLIB/Src/stm32f7xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 308              		.loc 1 250 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              	.LVL4:
 313 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 314              	.LCFI2:
 315              		.cfi_def_cfa_offset 24
 316              		.cfi_offset 3, -24
 317              		.cfi_offset 4, -20
 318              		.cfi_offset 5, -16
 319              		.cfi_offset 6, -12
 320              		.cfi_offset 7, -8
 321              		.cfi_offset 14, -4
 322              	.LVL5:
 254:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 323              		.loc 1 254 0
 324 0002 1C4C     		ldr	r4, .L32
 325 0004 247D     		ldrb	r4, [r4, #20]	@ zero_extendqisi2
 326 0006 012C     		cmp	r4, #1
 327 0008 2FD0     		beq	.L29
 328 000a 0E46     		mov	r6, r1
 329 000c 0546     		mov	r5, r0
 254:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 330              		.loc 1 254 0 is_stmt 0 discriminator 2
 331 000e 1948     		ldr	r0, .L32
 332              	.LVL6:
 333 0010 0121     		movs	r1, #1
 334              	.LVL7:
 335 0012 0175     		strb	r1, [r0, #20]
 260:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 336              		.loc 1 260 0 is_stmt 1 discriminator 2
 337 0014 184C     		ldr	r4, .L32+4
 338 0016 2769     		ldr	r7, [r4, #16]
 339 0018 47F08077 		orr	r7, r7, #16777216
 340 001c 2761     		str	r7, [r4, #16]
 263:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 341              		.loc 1 263 0 discriminator 2
 342 001e 2769     		ldr	r7, [r4, #16]
 343 0020 47F00077 		orr	r7, r7, #33554432
 344 0024 2761     		str	r7, [r4, #16]
 266:HALLIB/Src/stm32f7xx_hal_flash.c ****                          FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_ERSERR);  
 345              		.loc 1 266 0 discriminator 2
 346 0026 F321     		movs	r1, #243
 347 0028 E160     		str	r1, [r4, #12]
 269:HALLIB/Src/stm32f7xx_hal_flash.c ****   pFlash.Address = Address;
 348              		.loc 1 269 0 discriminator 2
 349 002a 0321     		movs	r1, #3
 350 002c 0170     		strb	r1, [r0]
 270:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 351              		.loc 1 270 0 discriminator 2
 352 002e 0661     		str	r6, [r0, #16]
 272:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 353              		.loc 1 272 0 discriminator 2
ARM GAS  /tmp/ccttIzZG.s 			page 29


 354 0030 032D     		cmp	r5, #3
 355 0032 1CD8     		bhi	.L30
 356 0034 DFE805F0 		tbb	[pc, r5]
 357              	.L25:
 358 0038 02       		.byte	(.L24-.L25)/2
 359 0039 08       		.byte	(.L26-.L25)/2
 360 003a 0E       		.byte	(.L27-.L25)/2
 361 003b 14       		.byte	(.L28-.L25)/2
 362              		.p2align 1
 363              	.L24:
 277:HALLIB/Src/stm32f7xx_hal_flash.c ****       break;
 364              		.loc 1 277 0
 365 003c D1B2     		uxtb	r1, r2
 366 003e 3046     		mov	r0, r6
 367 0040 FFF7FEFF 		bl	FLASH_Program_Byte
 368              	.LVL8:
 304:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 369              		.loc 1 304 0
 370 0044 0020     		movs	r0, #0
 278:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 371              		.loc 1 278 0
 372 0046 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 373              	.LVL9:
 374              	.L26:
 284:HALLIB/Src/stm32f7xx_hal_flash.c ****       break;
 375              		.loc 1 284 0
 376 0048 91B2     		uxth	r1, r2
 377 004a 3046     		mov	r0, r6
 378 004c FFF7FEFF 		bl	FLASH_Program_HalfWord
 379              	.LVL10:
 304:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 380              		.loc 1 304 0
 381 0050 0020     		movs	r0, #0
 285:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 382              		.loc 1 285 0
 383 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 384              	.LVL11:
 385              	.L27:
 291:HALLIB/Src/stm32f7xx_hal_flash.c ****       break;
 386              		.loc 1 291 0
 387 0054 1146     		mov	r1, r2
 388 0056 3046     		mov	r0, r6
 389 0058 FFF7FEFF 		bl	FLASH_Program_Word
 390              	.LVL12:
 304:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 391              		.loc 1 304 0
 392 005c 0020     		movs	r0, #0
 292:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 393              		.loc 1 292 0
 394 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 395              	.LVL13:
 396              	.L28:
 298:HALLIB/Src/stm32f7xx_hal_flash.c ****       break;
 397              		.loc 1 298 0
 398 0060 3046     		mov	r0, r6
 399 0062 FFF7FEFF 		bl	FLASH_Program_DoubleWord
 400              	.LVL14:
ARM GAS  /tmp/ccttIzZG.s 			page 30


 304:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 401              		.loc 1 304 0
 402 0066 0020     		movs	r0, #0
 299:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 403              		.loc 1 299 0
 404 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 405              	.LVL15:
 406              	.L29:
 254:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 407              		.loc 1 254 0
 408 006a 0220     		movs	r0, #2
 409              	.LVL16:
 410 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 411              	.LVL17:
 412              	.L30:
 304:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 413              		.loc 1 304 0
 414 006e 0020     		movs	r0, #0
 305:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 415              		.loc 1 305 0
 416 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 417              	.LVL18:
 418              	.L33:
 419 0072 00BF     		.align	2
 420              	.L32:
 421 0074 00000000 		.word	pFlash
 422 0078 003C0240 		.word	1073888256
 423              		.cfi_endproc
 424              	.LFE137:
 426              		.section	.text.HAL_FLASH_EndOfOperationCallback,"ax",%progbits
 427              		.align	2
 428              		.weak	HAL_FLASH_EndOfOperationCallback
 429              		.thumb
 430              		.thumb_func
 432              	HAL_FLASH_EndOfOperationCallback:
 433              	.LFB139:
 447:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 434              		.loc 1 447 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439              	.LVL19:
 440 0000 7047     		bx	lr
 441              		.cfi_endproc
 442              	.LFE139:
 444 0002 00BF     		.section	.text.HAL_FLASH_OperationErrorCallback,"ax",%progbits
 445              		.align	2
 446              		.weak	HAL_FLASH_OperationErrorCallback
 447              		.thumb
 448              		.thumb_func
 450              	HAL_FLASH_OperationErrorCallback:
 451              	.LFB140:
 465:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 452              		.loc 1 465 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccttIzZG.s 			page 31


 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457              	.LVL20:
 458 0000 7047     		bx	lr
 459              		.cfi_endproc
 460              	.LFE140:
 462 0002 00BF     		.section	.text.HAL_FLASH_IRQHandler,"ax",%progbits
 463              		.align	2
 464              		.global	HAL_FLASH_IRQHandler
 465              		.thumb
 466              		.thumb_func
 468              	HAL_FLASH_IRQHandler:
 469              	.LFB138:
 312:HALLIB/Src/stm32f7xx_hal_flash.c ****   uint32_t temp = 0;
 470              		.loc 1 312 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 312:HALLIB/Src/stm32f7xx_hal_flash.c ****   uint32_t temp = 0;
 474              		.loc 1 312 0
 475 0000 38B5     		push	{r3, r4, r5, lr}
 476              	.LCFI3:
 477              		.cfi_def_cfa_offset 16
 478              		.cfi_offset 3, -16
 479              		.cfi_offset 4, -12
 480              		.cfi_offset 5, -8
 481              		.cfi_offset 14, -4
 482              	.LVL21:
 316:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 483              		.loc 1 316 0
 484 0002 404B     		ldr	r3, .L53
 485 0004 1A69     		ldr	r2, [r3, #16]
 486 0006 22F00102 		bic	r2, r2, #1
 487 000a 1A61     		str	r2, [r3, #16]
 319:HALLIB/Src/stm32f7xx_hal_flash.c ****   FLASH->CR &= SECTOR_MASK; 
 488              		.loc 1 319 0
 489 000c 1A69     		ldr	r2, [r3, #16]
 490 000e 22F00202 		bic	r2, r2, #2
 491 0012 1A61     		str	r2, [r3, #16]
 320:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 492              		.loc 1 320 0
 493 0014 1A69     		ldr	r2, [r3, #16]
 494 0016 22F0F802 		bic	r2, r2, #248
 495 001a 1A61     		str	r2, [r3, #16]
 323:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 496              		.loc 1 323 0
 497 001c 1969     		ldr	r1, [r3, #16]
 498 001e 3A4A     		ldr	r2, .L53+4
 499 0020 0A40     		ands	r2, r2, r1
 500 0022 1A61     		str	r2, [r3, #16]
 326:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 501              		.loc 1 326 0
 502 0024 DB68     		ldr	r3, [r3, #12]
 503 0026 13F0010F 		tst	r3, #1
 504 002a 35D0     		beq	.L48
 329:HALLIB/Src/stm32f7xx_hal_flash.c ****     
 505              		.loc 1 329 0
ARM GAS  /tmp/ccttIzZG.s 			page 32


 506 002c 0122     		movs	r2, #1
 507 002e 354B     		ldr	r3, .L53
 508 0030 DA60     		str	r2, [r3, #12]
 331:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 509              		.loc 1 331 0
 510 0032 364B     		ldr	r3, .L53+8
 511 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 512 0036 DBB2     		uxtb	r3, r3
 513 0038 022B     		cmp	r3, #2
 514 003a 1FD0     		beq	.L38
 515 003c 032B     		cmp	r3, #3
 516 003e 24D0     		beq	.L39
 517 0040 9342     		cmp	r3, r2
 518 0042 2BD1     		bne	.L51
 336:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 519              		.loc 1 336 0
 520 0044 314B     		ldr	r3, .L53+8
 521 0046 5A68     		ldr	r2, [r3, #4]
 522 0048 013A     		subs	r2, r2, #1
 523 004a 5A60     		str	r2, [r3, #4]
 339:HALLIB/Src/stm32f7xx_hal_flash.c ****         {
 524              		.loc 1 339 0
 525 004c 5B68     		ldr	r3, [r3, #4]
 526 004e 5BB1     		cbz	r3, .L41
 341:HALLIB/Src/stm32f7xx_hal_flash.c ****           /* Indicate user which sector has been erased */
 527              		.loc 1 341 0
 528 0050 2E4D     		ldr	r5, .L53+8
 529 0052 E868     		ldr	r0, [r5, #12]
 530              	.LVL22:
 343:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 531              		.loc 1 343 0
 532 0054 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 533              	.LVL23:
 346:HALLIB/Src/stm32f7xx_hal_flash.c ****           FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 534              		.loc 1 346 0
 535 0058 EC68     		ldr	r4, [r5, #12]
 536 005a 0134     		adds	r4, r4, #1
 537 005c EC60     		str	r4, [r5, #12]
 538              	.LVL24:
 347:HALLIB/Src/stm32f7xx_hal_flash.c ****         }
 539              		.loc 1 347 0
 540 005e 297A     		ldrb	r1, [r5, #8]	@ zero_extendqisi2
 541 0060 2046     		mov	r0, r4
 542 0062 FFF7FEFF 		bl	FLASH_Erase_Sector
 543              	.LVL25:
 544 0066 1AE0     		b	.L37
 545              	.LVL26:
 546              	.L41:
 353:HALLIB/Src/stm32f7xx_hal_flash.c ****           /* FLASH EOP interrupt user callback */
 547              		.loc 1 353 0
 548 0068 284D     		ldr	r5, .L53+8
 549 006a 4FF0FF34 		mov	r4, #-1
 550 006e EC60     		str	r4, [r5, #12]
 355:HALLIB/Src/stm32f7xx_hal_flash.c ****           /* Sector Erase procedure is completed */
 551              		.loc 1 355 0
 552 0070 2046     		mov	r0, r4
 553 0072 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
ARM GAS  /tmp/ccttIzZG.s 			page 33


 554              	.LVL27:
 357:HALLIB/Src/stm32f7xx_hal_flash.c ****         }
 555              		.loc 1 357 0
 556 0076 0023     		movs	r3, #0
 557 0078 2B70     		strb	r3, [r5]
 558 007a 10E0     		b	.L37
 559              	.LVL28:
 560              	.L38:
 366:HALLIB/Src/stm32f7xx_hal_flash.c ****         /* MAss Erase procedure is completed */
 561              		.loc 1 366 0
 562 007c 0020     		movs	r0, #0
 563 007e FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 564              	.LVL29:
 368:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 565              		.loc 1 368 0
 566 0082 0024     		movs	r4, #0
 567 0084 214B     		ldr	r3, .L53+8
 568 0086 1C70     		strb	r4, [r3]
 369:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 569              		.loc 1 369 0
 570 0088 09E0     		b	.L37
 571              	.L39:
 376:HALLIB/Src/stm32f7xx_hal_flash.c ****         /* Programming procedure is completed */
 572              		.loc 1 376 0
 573 008a 204D     		ldr	r5, .L53+8
 574 008c 2869     		ldr	r0, [r5, #16]
 575 008e FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 576              	.LVL30:
 378:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 577              		.loc 1 378 0
 578 0092 0024     		movs	r4, #0
 579 0094 2C70     		strb	r4, [r5]
 379:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 580              		.loc 1 379 0
 581 0096 02E0     		b	.L37
 582              	.L48:
 313:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 583              		.loc 1 313 0
 584 0098 0024     		movs	r4, #0
 585 009a 00E0     		b	.L37
 586              	.L51:
 587 009c 0024     		movs	r4, #0
 588              	.LVL31:
 589              	.L37:
 387:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 590              		.loc 1 387 0
 591 009e 194B     		ldr	r3, .L53
 592 00a0 DB68     		ldr	r3, [r3, #12]
 593 00a2 13F0F20F 		tst	r3, #242
 594 00a6 1AD0     		beq	.L42
 389:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 595              		.loc 1 389 0
 596 00a8 184B     		ldr	r3, .L53+8
 597 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 598 00ac DBB2     		uxtb	r3, r3
 599 00ae 022B     		cmp	r3, #2
 600 00b0 0CD0     		beq	.L50
ARM GAS  /tmp/ccttIzZG.s 			page 34


 601 00b2 032B     		cmp	r3, #3
 602 00b4 07D0     		beq	.L45
 603 00b6 012B     		cmp	r3, #1
 604 00b8 09D1     		bne	.L44
 394:HALLIB/Src/stm32f7xx_hal_flash.c ****         pFlash.Sector = 0xFFFFFFFFU;
 605              		.loc 1 394 0
 606 00ba 144B     		ldr	r3, .L53+8
 607 00bc DC68     		ldr	r4, [r3, #12]
 608              	.LVL32:
 395:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 609              		.loc 1 395 0
 610 00be 4FF0FF32 		mov	r2, #-1
 611 00c2 DA60     		str	r2, [r3, #12]
 396:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 612              		.loc 1 396 0
 613 00c4 03E0     		b	.L44
 614              	.L45:
 407:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 615              		.loc 1 407 0
 616 00c6 114B     		ldr	r3, .L53+8
 617 00c8 1C69     		ldr	r4, [r3, #16]
 618              	.LVL33:
 408:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 619              		.loc 1 408 0
 620 00ca 00E0     		b	.L44
 621              	.L50:
 401:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 622              		.loc 1 401 0
 623 00cc 0024     		movs	r4, #0
 624              	.LVL34:
 625              	.L44:
 414:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 626              		.loc 1 414 0
 627 00ce FFF7FEFF 		bl	FLASH_SetErrorCode
 628              	.LVL35:
 417:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 629              		.loc 1 417 0
 630 00d2 2046     		mov	r0, r4
 631 00d4 FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 632              	.LVL36:
 420:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 633              		.loc 1 420 0
 634 00d8 0022     		movs	r2, #0
 635 00da 0C4B     		ldr	r3, .L53+8
 636 00dc 1A70     		strb	r2, [r3]
 637              	.L42:
 423:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 638              		.loc 1 423 0
 639 00de 0B4B     		ldr	r3, .L53+8
 640 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 641 00e2 13F0FF0F 		tst	r3, #255
 642 00e6 0BD1     		bne	.L36
 426:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 643              		.loc 1 426 0
 644 00e8 064B     		ldr	r3, .L53
 645 00ea 1A69     		ldr	r2, [r3, #16]
 646 00ec 22F08072 		bic	r2, r2, #16777216
ARM GAS  /tmp/ccttIzZG.s 			page 35


 647 00f0 1A61     		str	r2, [r3, #16]
 429:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 648              		.loc 1 429 0
 649 00f2 1A69     		ldr	r2, [r3, #16]
 650 00f4 22F00072 		bic	r2, r2, #33554432
 651 00f8 1A61     		str	r2, [r3, #16]
 432:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 652              		.loc 1 432 0
 653 00fa 0022     		movs	r2, #0
 654 00fc 034B     		ldr	r3, .L53+8
 655 00fe 1A75     		strb	r2, [r3, #20]
 656              	.L36:
 657 0100 38BD     		pop	{r3, r4, r5, pc}
 658              	.LVL37:
 659              	.L54:
 660 0102 00BF     		.align	2
 661              	.L53:
 662 0104 003C0240 		.word	1073888256
 663 0108 FB7FFFFF 		.word	-32773
 664 010c 00000000 		.word	pFlash
 665              		.cfi_endproc
 666              	.LFE138:
 668              		.section	.text.HAL_FLASH_Unlock,"ax",%progbits
 669              		.align	2
 670              		.global	HAL_FLASH_Unlock
 671              		.thumb
 672              		.thumb_func
 674              	HAL_FLASH_Unlock:
 675              	.LFB141:
 497:HALLIB/Src/stm32f7xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 676              		.loc 1 497 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 0
 679              		@ frame_needed = 0, uses_anonymous_args = 0
 680              		@ link register save eliminated.
 681              	.LVL38:
 500:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 682              		.loc 1 500 0
 683 0000 094B     		ldr	r3, .L59
 684 0002 1B69     		ldr	r3, [r3, #16]
 685 0004 002B     		cmp	r3, #0
 686 0006 0ADA     		bge	.L57
 503:HALLIB/Src/stm32f7xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 687              		.loc 1 503 0
 688 0008 074B     		ldr	r3, .L59
 689 000a 084A     		ldr	r2, .L59+4
 690 000c 5A60     		str	r2, [r3, #4]
 504:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 691              		.loc 1 504 0
 692 000e 02F18832 		add	r2, r2, #-2004318072
 693 0012 5A60     		str	r2, [r3, #4]
 507:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 694              		.loc 1 507 0
 695 0014 1B69     		ldr	r3, [r3, #16]
 696 0016 002B     		cmp	r3, #0
 697 0018 03DB     		blt	.L58
 498:HALLIB/Src/stm32f7xx_hal_flash.c **** 
ARM GAS  /tmp/ccttIzZG.s 			page 36


 698              		.loc 1 498 0
 699 001a 0020     		movs	r0, #0
 700 001c 7047     		bx	lr
 701              	.L57:
 702 001e 0020     		movs	r0, #0
 703 0020 7047     		bx	lr
 704              	.L58:
 509:HALLIB/Src/stm32f7xx_hal_flash.c ****     }
 705              		.loc 1 509 0
 706 0022 0120     		movs	r0, #1
 707              	.LVL39:
 514:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 708              		.loc 1 514 0
 709 0024 7047     		bx	lr
 710              	.L60:
 711 0026 00BF     		.align	2
 712              	.L59:
 713 0028 003C0240 		.word	1073888256
 714 002c 23016745 		.word	1164378403
 715              		.cfi_endproc
 716              	.LFE141:
 718              		.section	.text.HAL_FLASH_Lock,"ax",%progbits
 719              		.align	2
 720              		.global	HAL_FLASH_Lock
 721              		.thumb
 722              		.thumb_func
 724              	HAL_FLASH_Lock:
 725              	.LFB142:
 521:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 726              		.loc 1 521 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730              		@ link register save eliminated.
 523:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 731              		.loc 1 523 0
 732 0000 034A     		ldr	r2, .L62
 733 0002 1369     		ldr	r3, [r2, #16]
 734 0004 43F00043 		orr	r3, r3, #-2147483648
 735 0008 1361     		str	r3, [r2, #16]
 526:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 736              		.loc 1 526 0
 737 000a 0020     		movs	r0, #0
 738 000c 7047     		bx	lr
 739              	.L63:
 740 000e 00BF     		.align	2
 741              	.L62:
 742 0010 003C0240 		.word	1073888256
 743              		.cfi_endproc
 744              	.LFE142:
 746              		.section	.text.HAL_FLASH_OB_Unlock,"ax",%progbits
 747              		.align	2
 748              		.global	HAL_FLASH_OB_Unlock
 749              		.thumb
 750              		.thumb_func
 752              	HAL_FLASH_OB_Unlock:
 753              	.LFB143:
ARM GAS  /tmp/ccttIzZG.s 			page 37


 533:HALLIB/Src/stm32f7xx_hal_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 754              		.loc 1 533 0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 0
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758              		@ link register save eliminated.
 534:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 759              		.loc 1 534 0
 760 0000 074B     		ldr	r3, .L67
 761 0002 5B69     		ldr	r3, [r3, #20]
 762 0004 13F0010F 		tst	r3, #1
 763 0008 07D0     		beq	.L66
 537:HALLIB/Src/stm32f7xx_hal_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 764              		.loc 1 537 0
 765 000a 054B     		ldr	r3, .L67
 766 000c 054A     		ldr	r2, .L67+4
 767 000e 9A60     		str	r2, [r3, #8]
 538:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 768              		.loc 1 538 0
 769 0010 02F14432 		add	r2, r2, #1145324612
 770 0014 9A60     		str	r2, [r3, #8]
 545:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 771              		.loc 1 545 0
 772 0016 0020     		movs	r0, #0
 773 0018 7047     		bx	lr
 774              	.L66:
 542:HALLIB/Src/stm32f7xx_hal_flash.c ****   }  
 775              		.loc 1 542 0
 776 001a 0120     		movs	r0, #1
 546:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 777              		.loc 1 546 0
 778 001c 7047     		bx	lr
 779              	.L68:
 780 001e 00BF     		.align	2
 781              	.L67:
 782 0020 003C0240 		.word	1073888256
 783 0024 3B2A1908 		.word	135866939
 784              		.cfi_endproc
 785              	.LFE143:
 787              		.section	.text.HAL_FLASH_OB_Lock,"ax",%progbits
 788              		.align	2
 789              		.global	HAL_FLASH_OB_Lock
 790              		.thumb
 791              		.thumb_func
 793              	HAL_FLASH_OB_Lock:
 794              	.LFB144:
 553:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 795              		.loc 1 553 0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 0
 798              		@ frame_needed = 0, uses_anonymous_args = 0
 799              		@ link register save eliminated.
 555:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 800              		.loc 1 555 0
 801 0000 034A     		ldr	r2, .L70
 802 0002 5369     		ldr	r3, [r2, #20]
 803 0004 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/ccttIzZG.s 			page 38


 804 0008 5361     		str	r3, [r2, #20]
 558:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 805              		.loc 1 558 0
 806 000a 0020     		movs	r0, #0
 807 000c 7047     		bx	lr
 808              	.L71:
 809 000e 00BF     		.align	2
 810              	.L70:
 811 0010 003C0240 		.word	1073888256
 812              		.cfi_endproc
 813              	.LFE144:
 815              		.section	.text.HAL_FLASH_GetError,"ax",%progbits
 816              		.align	2
 817              		.global	HAL_FLASH_GetError
 818              		.thumb
 819              		.thumb_func
 821              	HAL_FLASH_GetError:
 822              	.LFB146:
 601:HALLIB/Src/stm32f7xx_hal_flash.c ****    return pFlash.ErrorCode;
 823              		.loc 1 601 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827              		@ link register save eliminated.
 602:HALLIB/Src/stm32f7xx_hal_flash.c **** }  
 828              		.loc 1 602 0
 829 0000 014B     		ldr	r3, .L73
 830 0002 9869     		ldr	r0, [r3, #24]
 603:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 831              		.loc 1 603 0
 832 0004 7047     		bx	lr
 833              	.L74:
 834 0006 00BF     		.align	2
 835              	.L73:
 836 0008 00000000 		.word	pFlash
 837              		.cfi_endproc
 838              	.LFE146:
 840              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 841              		.align	2
 842              		.global	FLASH_WaitForLastOperation
 843              		.thumb
 844              		.thumb_func
 846              	FLASH_WaitForLastOperation:
 847              	.LFB147:
 615:HALLIB/Src/stm32f7xx_hal_flash.c ****   uint32_t tickstart = 0;
 848              		.loc 1 615 0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852              	.LVL40:
 853 0000 38B5     		push	{r3, r4, r5, lr}
 854              	.LCFI4:
 855              		.cfi_def_cfa_offset 16
 856              		.cfi_offset 3, -16
 857              		.cfi_offset 4, -12
 858              		.cfi_offset 5, -8
 859              		.cfi_offset 14, -4
ARM GAS  /tmp/ccttIzZG.s 			page 39


 860 0002 0446     		mov	r4, r0
 861              	.LVL41:
 619:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 862              		.loc 1 619 0
 863 0004 0022     		movs	r2, #0
 864 0006 164B     		ldr	r3, .L85
 865 0008 9A61     		str	r2, [r3, #24]
 625:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 866              		.loc 1 625 0
 867 000a FFF7FEFF 		bl	HAL_GetTick
 868              	.LVL42:
 869 000e 0546     		mov	r5, r0
 870              	.LVL43:
 627:HALLIB/Src/stm32f7xx_hal_flash.c ****   { 
 871              		.loc 1 627 0
 872 0010 08E0     		b	.L77
 873              	.LVL44:
 874              	.L79:
 629:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 875              		.loc 1 629 0
 876 0012 B4F1FF3F 		cmp	r4, #-1
 877 0016 05D0     		beq	.L77
 631:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 878              		.loc 1 631 0
 879 0018 E4B1     		cbz	r4, .L81
 631:HALLIB/Src/stm32f7xx_hal_flash.c ****       {
 880              		.loc 1 631 0 is_stmt 0 discriminator 1
 881 001a FFF7FEFF 		bl	HAL_GetTick
 882              	.LVL45:
 883 001e 401B     		subs	r0, r0, r5
 884 0020 8442     		cmp	r4, r0
 885 0022 19D3     		bcc	.L82
 886              	.L77:
 627:HALLIB/Src/stm32f7xx_hal_flash.c ****   { 
 887              		.loc 1 627 0 is_stmt 1
 888 0024 0F4B     		ldr	r3, .L85+4
 889 0026 DB68     		ldr	r3, [r3, #12]
 890 0028 13F4803F 		tst	r3, #65536
 891 002c F1D1     		bne	.L79
 638:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 892              		.loc 1 638 0
 893 002e 0D4B     		ldr	r3, .L85+4
 894 0030 DB68     		ldr	r3, [r3, #12]
 895 0032 13F0F20F 		tst	r3, #242
 896 0036 03D0     		beq	.L80
 641:HALLIB/Src/stm32f7xx_hal_flash.c ****     return HAL_ERROR;
 897              		.loc 1 641 0
 898 0038 FFF7FEFF 		bl	FLASH_SetErrorCode
 899              	.LVL46:
 642:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 900              		.loc 1 642 0
 901 003c 0120     		movs	r0, #1
 902 003e 38BD     		pop	{r3, r4, r5, pc}
 903              	.LVL47:
 904              	.L80:
 646:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 905              		.loc 1 646 0
ARM GAS  /tmp/ccttIzZG.s 			page 40


 906 0040 084B     		ldr	r3, .L85+4
 907 0042 DB68     		ldr	r3, [r3, #12]
 908 0044 13F0010F 		tst	r3, #1
 909 0048 08D0     		beq	.L83
 649:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 910              		.loc 1 649 0
 911 004a 0122     		movs	r2, #1
 912 004c 054B     		ldr	r3, .L85+4
 913 004e DA60     		str	r2, [r3, #12]
 653:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 914              		.loc 1 653 0
 915 0050 0020     		movs	r0, #0
 916 0052 38BD     		pop	{r3, r4, r5, pc}
 917              	.LVL48:
 918              	.L81:
 633:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 919              		.loc 1 633 0
 920 0054 0320     		movs	r0, #3
 921 0056 38BD     		pop	{r3, r4, r5, pc}
 922              	.LVL49:
 923              	.L82:
 924 0058 0320     		movs	r0, #3
 925 005a 38BD     		pop	{r3, r4, r5, pc}
 926              	.LVL50:
 927              	.L83:
 653:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 928              		.loc 1 653 0
 929 005c 0020     		movs	r0, #0
 655:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 930              		.loc 1 655 0
 931 005e 38BD     		pop	{r3, r4, r5, pc}
 932              	.LVL51:
 933              	.L86:
 934              		.align	2
 935              	.L85:
 936 0060 00000000 		.word	pFlash
 937 0064 003C0240 		.word	1073888256
 938              		.cfi_endproc
 939              	.LFE147:
 941              		.section	.text.HAL_FLASH_Program,"ax",%progbits
 942              		.align	2
 943              		.global	HAL_FLASH_Program
 944              		.thumb
 945              		.thumb_func
 947              	HAL_FLASH_Program:
 948              	.LFB136:
 181:HALLIB/Src/stm32f7xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 949              		.loc 1 181 0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 0
 952              		@ frame_needed = 0, uses_anonymous_args = 0
 953              	.LVL52:
 954 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 955              	.LCFI5:
 956              		.cfi_def_cfa_offset 24
 957              		.cfi_offset 4, -24
 958              		.cfi_offset 5, -20
ARM GAS  /tmp/ccttIzZG.s 			page 41


 959              		.cfi_offset 6, -16
 960              		.cfi_offset 7, -12
 961              		.cfi_offset 8, -8
 962              		.cfi_offset 14, -4
 963              	.LVL53:
 185:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 964              		.loc 1 185 0
 965 0004 1E4C     		ldr	r4, .L98
 966 0006 247D     		ldrb	r4, [r4, #20]	@ zero_extendqisi2
 967 0008 012C     		cmp	r4, #1
 968 000a 36D0     		beq	.L96
 969 000c 9846     		mov	r8, r3
 970 000e 1746     		mov	r7, r2
 971 0010 0E46     		mov	r6, r1
 972 0012 0546     		mov	r5, r0
 185:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 973              		.loc 1 185 0 is_stmt 0 discriminator 2
 974 0014 0122     		movs	r2, #1
 975              	.LVL54:
 976 0016 1A4B     		ldr	r3, .L98
 977 0018 1A75     		strb	r2, [r3, #20]
 191:HALLIB/Src/stm32f7xx_hal_flash.c ****   
 978              		.loc 1 191 0 is_stmt 1 discriminator 2
 979 001a 4CF25030 		movw	r0, #50000
 980              	.LVL55:
 981 001e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 982              	.LVL56:
 193:HALLIB/Src/stm32f7xx_hal_flash.c ****   {
 983              		.loc 1 193 0 discriminator 2
 984 0022 0446     		mov	r4, r0
 985 0024 18BB     		cbnz	r0, .L89
 195:HALLIB/Src/stm32f7xx_hal_flash.c ****     {
 986              		.loc 1 195 0
 987 0026 032D     		cmp	r5, #3
 988 0028 17D8     		bhi	.L90
 989 002a DFE805F0 		tbb	[pc, r5]
 990              	.L92:
 991 002e 02       		.byte	(.L91-.L92)/2
 992 002f 07       		.byte	(.L93-.L92)/2
 993 0030 0C       		.byte	(.L94-.L92)/2
 994 0031 11       		.byte	(.L95-.L92)/2
 995              		.p2align 1
 996              	.L91:
 200:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 997              		.loc 1 200 0
 998 0032 F9B2     		uxtb	r1, r7
 999 0034 3046     		mov	r0, r6
 1000              	.LVL57:
 1001 0036 FFF7FEFF 		bl	FLASH_Program_Byte
 1002              	.LVL58:
 201:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 1003              		.loc 1 201 0
 1004 003a 0EE0     		b	.L90
 1005              	.LVL59:
 1006              	.L93:
 207:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 1007              		.loc 1 207 0
ARM GAS  /tmp/ccttIzZG.s 			page 42


 1008 003c B9B2     		uxth	r1, r7
 1009 003e 3046     		mov	r0, r6
 1010              	.LVL60:
 1011 0040 FFF7FEFF 		bl	FLASH_Program_HalfWord
 1012              	.LVL61:
 208:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 1013              		.loc 1 208 0
 1014 0044 09E0     		b	.L90
 1015              	.LVL62:
 1016              	.L94:
 214:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 1017              		.loc 1 214 0
 1018 0046 3946     		mov	r1, r7
 1019 0048 3046     		mov	r0, r6
 1020              	.LVL63:
 1021 004a FFF7FEFF 		bl	FLASH_Program_Word
 1022              	.LVL64:
 215:HALLIB/Src/stm32f7xx_hal_flash.c ****       }
 1023              		.loc 1 215 0
 1024 004e 04E0     		b	.L90
 1025              	.LVL65:
 1026              	.L95:
 221:HALLIB/Src/stm32f7xx_hal_flash.c ****         break;
 1027              		.loc 1 221 0
 1028 0050 3A46     		mov	r2, r7
 1029 0052 4346     		mov	r3, r8
 1030 0054 3046     		mov	r0, r6
 1031              	.LVL66:
 1032 0056 FFF7FEFF 		bl	FLASH_Program_DoubleWord
 1033              	.LVL67:
 1034              	.L90:
 228:HALLIB/Src/stm32f7xx_hal_flash.c ****     
 1035              		.loc 1 228 0
 1036 005a 4CF25030 		movw	r0, #50000
 1037 005e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1038              	.LVL68:
 1039 0062 0446     		mov	r4, r0
 1040              	.LVL69:
 231:HALLIB/Src/stm32f7xx_hal_flash.c ****   }
 1041              		.loc 1 231 0
 1042 0064 074A     		ldr	r2, .L98+4
 1043 0066 1369     		ldr	r3, [r2, #16]
 1044 0068 23F00103 		bic	r3, r3, #1
 1045 006c 1361     		str	r3, [r2, #16]
 1046              	.LVL70:
 1047              	.L89:
 235:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 1048              		.loc 1 235 0
 1049 006e 0022     		movs	r2, #0
 1050 0070 034B     		ldr	r3, .L98
 1051 0072 1A75     		strb	r2, [r3, #20]
 237:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 1052              		.loc 1 237 0
 1053 0074 2046     		mov	r0, r4
 1054 0076 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1055              	.LVL71:
 1056              	.L96:
ARM GAS  /tmp/ccttIzZG.s 			page 43


 185:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 1057              		.loc 1 185 0
 1058 007a 0220     		movs	r0, #2
 1059              	.LVL72:
 238:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 1060              		.loc 1 238 0
 1061 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1062              	.L99:
 1063              		.align	2
 1064              	.L98:
 1065 0080 00000000 		.word	pFlash
 1066 0084 003C0240 		.word	1073888256
 1067              		.cfi_endproc
 1068              	.LFE136:
 1070              		.section	.text.HAL_FLASH_OB_Launch,"ax",%progbits
 1071              		.align	2
 1072              		.global	HAL_FLASH_OB_Launch
 1073              		.thumb
 1074              		.thumb_func
 1076              	HAL_FLASH_OB_Launch:
 1077              	.LFB145:
 565:HALLIB/Src/stm32f7xx_hal_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
 1078              		.loc 1 565 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082 0000 08B5     		push	{r3, lr}
 1083              	.LCFI6:
 1084              		.cfi_def_cfa_offset 8
 1085              		.cfi_offset 3, -8
 1086              		.cfi_offset 14, -4
 567:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 1087              		.loc 1 567 0
 1088 0002 054A     		ldr	r2, .L102
 1089 0004 5369     		ldr	r3, [r2, #20]
 1090 0006 43F00203 		orr	r3, r3, #2
 1091 000a 5361     		str	r3, [r2, #20]
 570:HALLIB/Src/stm32f7xx_hal_flash.c **** }
 1092              		.loc 1 570 0
 1093 000c 4CF25030 		movw	r0, #50000
 1094 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1095              	.LVL73:
 571:HALLIB/Src/stm32f7xx_hal_flash.c **** 
 1096              		.loc 1 571 0
 1097 0014 08BD     		pop	{r3, pc}
 1098              	.L103:
 1099 0016 00BF     		.align	2
 1100              	.L102:
 1101 0018 003C0240 		.word	1073888256
 1102              		.cfi_endproc
 1103              	.LFE145:
 1105              		.comm	pFlash,28,4
 1106              		.text
 1107              	.Letext0:
 1108              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 1109              		.file 4 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 1110              		.file 5 "Inc/stm32f767xx.h"
ARM GAS  /tmp/ccttIzZG.s 			page 44


 1111              		.file 6 "Inc/stm32f7xx.h"
 1112              		.file 7 "HALLIB/Inc/stm32f7xx_hal_def.h"
 1113              		.file 8 "HALLIB/Inc/stm32f7xx_hal_flash.h"
 1114              		.file 9 "CORE/core_cm7.h"
 1115              		.file 10 "HALLIB/Inc/stm32f7xx_hal_flash_ex.h"
 1116              		.file 11 "HALLIB/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccttIzZG.s 			page 45


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_flash.c
     /tmp/ccttIzZG.s:21     .text.FLASH_Program_DoubleWord:00000000 $t
     /tmp/ccttIzZG.s:25     .text.FLASH_Program_DoubleWord:00000000 FLASH_Program_DoubleWord
     /tmp/ccttIzZG.s:76     .text.FLASH_Program_DoubleWord:0000002c $d
     /tmp/ccttIzZG.s:81     .text.FLASH_Program_Word:00000000 $t
     /tmp/ccttIzZG.s:85     .text.FLASH_Program_Word:00000000 FLASH_Program_Word
     /tmp/ccttIzZG.s:121    .text.FLASH_Program_Word:00000024 $d
     /tmp/ccttIzZG.s:128    .text.FLASH_Program_HalfWord:00000000 $t
     /tmp/ccttIzZG.s:132    .text.FLASH_Program_HalfWord:00000000 FLASH_Program_HalfWord
     /tmp/ccttIzZG.s:168    .text.FLASH_Program_HalfWord:00000024 $d
     /tmp/ccttIzZG.s:175    .text.FLASH_Program_Byte:00000000 $t
     /tmp/ccttIzZG.s:179    .text.FLASH_Program_Byte:00000000 FLASH_Program_Byte
     /tmp/ccttIzZG.s:214    .text.FLASH_Program_Byte:00000020 $d
     /tmp/ccttIzZG.s:221    .text.FLASH_SetErrorCode:00000000 $t
     /tmp/ccttIzZG.s:225    .text.FLASH_SetErrorCode:00000000 FLASH_SetErrorCode
     /tmp/ccttIzZG.s:295    .text.FLASH_SetErrorCode:0000006c $d
                            *COM*:0000001c pFlash
     /tmp/ccttIzZG.s:301    .text.HAL_FLASH_Program_IT:00000000 $t
     /tmp/ccttIzZG.s:306    .text.HAL_FLASH_Program_IT:00000000 HAL_FLASH_Program_IT
     /tmp/ccttIzZG.s:358    .text.HAL_FLASH_Program_IT:00000038 $d
     /tmp/ccttIzZG.s:362    .text.HAL_FLASH_Program_IT:0000003c $t
     /tmp/ccttIzZG.s:421    .text.HAL_FLASH_Program_IT:00000074 $d
     /tmp/ccttIzZG.s:427    .text.HAL_FLASH_EndOfOperationCallback:00000000 $t
     /tmp/ccttIzZG.s:432    .text.HAL_FLASH_EndOfOperationCallback:00000000 HAL_FLASH_EndOfOperationCallback
     /tmp/ccttIzZG.s:445    .text.HAL_FLASH_OperationErrorCallback:00000000 $t
     /tmp/ccttIzZG.s:450    .text.HAL_FLASH_OperationErrorCallback:00000000 HAL_FLASH_OperationErrorCallback
     /tmp/ccttIzZG.s:463    .text.HAL_FLASH_IRQHandler:00000000 $t
     /tmp/ccttIzZG.s:468    .text.HAL_FLASH_IRQHandler:00000000 HAL_FLASH_IRQHandler
     /tmp/ccttIzZG.s:662    .text.HAL_FLASH_IRQHandler:00000104 $d
     /tmp/ccttIzZG.s:669    .text.HAL_FLASH_Unlock:00000000 $t
     /tmp/ccttIzZG.s:674    .text.HAL_FLASH_Unlock:00000000 HAL_FLASH_Unlock
     /tmp/ccttIzZG.s:713    .text.HAL_FLASH_Unlock:00000028 $d
     /tmp/ccttIzZG.s:719    .text.HAL_FLASH_Lock:00000000 $t
     /tmp/ccttIzZG.s:724    .text.HAL_FLASH_Lock:00000000 HAL_FLASH_Lock
     /tmp/ccttIzZG.s:742    .text.HAL_FLASH_Lock:00000010 $d
     /tmp/ccttIzZG.s:747    .text.HAL_FLASH_OB_Unlock:00000000 $t
     /tmp/ccttIzZG.s:752    .text.HAL_FLASH_OB_Unlock:00000000 HAL_FLASH_OB_Unlock
     /tmp/ccttIzZG.s:782    .text.HAL_FLASH_OB_Unlock:00000020 $d
     /tmp/ccttIzZG.s:788    .text.HAL_FLASH_OB_Lock:00000000 $t
     /tmp/ccttIzZG.s:793    .text.HAL_FLASH_OB_Lock:00000000 HAL_FLASH_OB_Lock
     /tmp/ccttIzZG.s:811    .text.HAL_FLASH_OB_Lock:00000010 $d
     /tmp/ccttIzZG.s:816    .text.HAL_FLASH_GetError:00000000 $t
     /tmp/ccttIzZG.s:821    .text.HAL_FLASH_GetError:00000000 HAL_FLASH_GetError
     /tmp/ccttIzZG.s:836    .text.HAL_FLASH_GetError:00000008 $d
     /tmp/ccttIzZG.s:841    .text.FLASH_WaitForLastOperation:00000000 $t
     /tmp/ccttIzZG.s:846    .text.FLASH_WaitForLastOperation:00000000 FLASH_WaitForLastOperation
     /tmp/ccttIzZG.s:936    .text.FLASH_WaitForLastOperation:00000060 $d
     /tmp/ccttIzZG.s:942    .text.HAL_FLASH_Program:00000000 $t
     /tmp/ccttIzZG.s:947    .text.HAL_FLASH_Program:00000000 HAL_FLASH_Program
     /tmp/ccttIzZG.s:991    .text.HAL_FLASH_Program:0000002e $d
     /tmp/ccttIzZG.s:995    .text.HAL_FLASH_Program:00000032 $t
     /tmp/ccttIzZG.s:1065   .text.HAL_FLASH_Program:00000080 $d
     /tmp/ccttIzZG.s:1071   .text.HAL_FLASH_OB_Launch:00000000 $t
     /tmp/ccttIzZG.s:1076   .text.HAL_FLASH_OB_Launch:00000000 HAL_FLASH_OB_Launch
     /tmp/ccttIzZG.s:1101   .text.HAL_FLASH_OB_Launch:00000018 $d
                     .debug_frame:00000010 $d
ARM GAS  /tmp/ccttIzZG.s 			page 46



UNDEFINED SYMBOLS
FLASH_Erase_Sector
HAL_GetTick
