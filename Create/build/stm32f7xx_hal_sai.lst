ARM GAS  /tmp/cc0s4dWM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_sai.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.SAI_InitI2S,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	SAI_InitI2S:
  26              	.LFB163:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_sai.c"
   1:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_sai.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @file    stm32f7xx_hal_sai.c
   4:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief   SAI HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_sai.c ****   *          This file provides firmware functions to manage the following
   7:HALLIB/Src/stm32f7xx_hal_sai.c ****   *          functionalities of the Serial Audio Interface (SAI) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_sai.c ****   *           + Initialization/de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_sai.c ****   *           + I/O operation functions
  10:HALLIB/Src/stm32f7xx_hal_sai.c ****   *           + Peripheral Control functions
  11:HALLIB/Src/stm32f7xx_hal_sai.c ****   *           + Peripheral State functions
  12:HALLIB/Src/stm32f7xx_hal_sai.c ****   *
  13:HALLIB/Src/stm32f7xx_hal_sai.c ****   @verbatim
  14:HALLIB/Src/stm32f7xx_hal_sai.c ****  ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_sai.c ****                   ##### How to use this driver #####
  16:HALLIB/Src/stm32f7xx_hal_sai.c ****   ==============================================================================
  17:HALLIB/Src/stm32f7xx_hal_sai.c **** 
  18:HALLIB/Src/stm32f7xx_hal_sai.c ****   [..]
  19:HALLIB/Src/stm32f7xx_hal_sai.c ****     The SAI HAL driver can be used as follows:
  20:HALLIB/Src/stm32f7xx_hal_sai.c **** 
  21:HALLIB/Src/stm32f7xx_hal_sai.c ****     (#) Declare a SAI_HandleTypeDef handle structure (eg. SAI_HandleTypeDef hsai).
  22:HALLIB/Src/stm32f7xx_hal_sai.c ****     (#) Initialize the SAI low level resources by implementing the HAL_SAI_MspInit() API:
  23:HALLIB/Src/stm32f7xx_hal_sai.c ****         (##) Enable the SAI interface clock.
  24:HALLIB/Src/stm32f7xx_hal_sai.c ****         (##) SAI pins configuration:
  25:HALLIB/Src/stm32f7xx_hal_sai.c ****             (+++) Enable the clock for the SAI GPIOs.
  26:HALLIB/Src/stm32f7xx_hal_sai.c ****             (+++) Configure these SAI pins as alternate function pull-up.
  27:HALLIB/Src/stm32f7xx_hal_sai.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_SAI_Transmit_IT()
  28:HALLIB/Src/stm32f7xx_hal_sai.c ****              and HAL_SAI_Receive_IT() APIs):
  29:HALLIB/Src/stm32f7xx_hal_sai.c ****             (+++) Configure the SAI interrupt priority.
  30:HALLIB/Src/stm32f7xx_hal_sai.c ****             (+++) Enable the NVIC SAI IRQ handle.
  31:HALLIB/Src/stm32f7xx_hal_sai.c **** 
ARM GAS  /tmp/cc0s4dWM.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_sai.c ****         (##) DMA Configuration if you need to use DMA process (HAL_SAI_Transmit_DMA()
  33:HALLIB/Src/stm32f7xx_hal_sai.c ****              and HAL_SAI_Receive_DMA() APIs):
  34:HALLIB/Src/stm32f7xx_hal_sai.c ****             (+++) Declare a DMA handle structure for the Tx/Rx stream.
  35:HALLIB/Src/stm32f7xx_hal_sai.c ****             (+++) Enable the DMAx interface clock.
  36:HALLIB/Src/stm32f7xx_hal_sai.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  37:HALLIB/Src/stm32f7xx_hal_sai.c ****             (+++) Configure the DMA Tx/Rx Stream.
  38:HALLIB/Src/stm32f7xx_hal_sai.c ****             (+++) Associate the initialized DMA handle to the SAI DMA Tx/Rx handle.
  39:HALLIB/Src/stm32f7xx_hal_sai.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  40:HALLIB/Src/stm32f7xx_hal_sai.c ****                 DMA Tx/Rx Stream.
  41:HALLIB/Src/stm32f7xx_hal_sai.c **** 
  42:HALLIB/Src/stm32f7xx_hal_sai.c ****     (#) The initialization can be done by two ways
  43:HALLIB/Src/stm32f7xx_hal_sai.c ****         (##) Expert mode : Initialize the structures Init, FrameInit and SlotInit and call HAL_SAI_
  44:HALLIB/Src/stm32f7xx_hal_sai.c ****         (##) Simplified mode : Initialize the high part of Init Structure and call HAL_SAI_InitProt
  45:HALLIB/Src/stm32f7xx_hal_sai.c **** 
  46:HALLIB/Src/stm32f7xx_hal_sai.c ****   [..]
  47:HALLIB/Src/stm32f7xx_hal_sai.c ****     (@) The specific SAI interrupts (FIFO request and Overrun underrun interrupt)
  48:HALLIB/Src/stm32f7xx_hal_sai.c ****         will be managed using the macros __HAL_SAI_ENABLE_IT() and __HAL_SAI_DISABLE_IT()
  49:HALLIB/Src/stm32f7xx_hal_sai.c ****         inside the transmit and receive process.
  50:HALLIB/Src/stm32f7xx_hal_sai.c ****   [..]
  51:HALLIB/Src/stm32f7xx_hal_sai.c ****    (@) Make sure that either:
  52:HALLIB/Src/stm32f7xx_hal_sai.c ****        (+@) I2S PLL is configured or
  53:HALLIB/Src/stm32f7xx_hal_sai.c ****        (+@) SAI PLL is configured or
  54:HALLIB/Src/stm32f7xx_hal_sai.c ****        (+@) External clock source is configured after setting correctly
  55:HALLIB/Src/stm32f7xx_hal_sai.c ****             the define constant EXTERNAL_CLOCK_VALUE in the stm32f7xx_hal_conf.h file.
  56:HALLIB/Src/stm32f7xx_hal_sai.c ****   [..]
  57:HALLIB/Src/stm32f7xx_hal_sai.c ****     (@) In master Tx mode: enabling the audio block immediately generates the bit clock
  58:HALLIB/Src/stm32f7xx_hal_sai.c ****         for the external slaves even if there is no data in the FIFO, However FS signal
  59:HALLIB/Src/stm32f7xx_hal_sai.c ****         generation is conditioned by the presence of data in the FIFO.
  60:HALLIB/Src/stm32f7xx_hal_sai.c **** 
  61:HALLIB/Src/stm32f7xx_hal_sai.c ****   [..]
  62:HALLIB/Src/stm32f7xx_hal_sai.c ****     (@) In master Rx mode: enabling the audio block immediately generates the bit clock
  63:HALLIB/Src/stm32f7xx_hal_sai.c ****         and FS signal for the external slaves.
  64:HALLIB/Src/stm32f7xx_hal_sai.c **** 
  65:HALLIB/Src/stm32f7xx_hal_sai.c ****   [..]
  66:HALLIB/Src/stm32f7xx_hal_sai.c ****     (@) It is mandatory to respect the following conditions in order to avoid bad SAI behavior:
  67:HALLIB/Src/stm32f7xx_hal_sai.c ****         (+@) First bit Offset <= (SLOT size - Data size)
  68:HALLIB/Src/stm32f7xx_hal_sai.c ****         (+@) Data size <= SLOT size
  69:HALLIB/Src/stm32f7xx_hal_sai.c ****         (+@) Number of SLOT x SLOT size = Frame length
  70:HALLIB/Src/stm32f7xx_hal_sai.c ****         (+@) The number of slots should be even when SAI_FS_CHANNEL_IDENTIFICATION is selected.
  71:HALLIB/Src/stm32f7xx_hal_sai.c **** 
  72:HALLIB/Src/stm32f7xx_hal_sai.c ****   [..]
  73:HALLIB/Src/stm32f7xx_hal_sai.c ****     Three operation modes are available within this driver :
  74:HALLIB/Src/stm32f7xx_hal_sai.c **** 
  75:HALLIB/Src/stm32f7xx_hal_sai.c ****     *** Polling mode IO operation ***
  76:HALLIB/Src/stm32f7xx_hal_sai.c ****     =================================
  77:HALLIB/Src/stm32f7xx_hal_sai.c ****     [..]
  78:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) Send an amount of data in blocking mode using HAL_SAI_Transmit()
  79:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) Receive an amount of data in blocking mode using HAL_SAI_Receive()
  80:HALLIB/Src/stm32f7xx_hal_sai.c **** 
  81:HALLIB/Src/stm32f7xx_hal_sai.c ****     *** Interrupt mode IO operation ***
  82:HALLIB/Src/stm32f7xx_hal_sai.c ****     ===================================
  83:HALLIB/Src/stm32f7xx_hal_sai.c ****     [..]
  84:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) Send an amount of data in non-blocking mode using HAL_SAI_Transmit_IT()
  85:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) At transmission end of transfer HAL_SAI_TxCpltCallback() is executed and user can
  86:HALLIB/Src/stm32f7xx_hal_sai.c ****           add his own code by customization of function pointer HAL_SAI_TxCpltCallback()
  87:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) Receive an amount of data in non-blocking mode using HAL_SAI_Receive_IT()
  88:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) At reception end of transfer HAL_SAI_RxCpltCallback() is executed and user can
ARM GAS  /tmp/cc0s4dWM.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_sai.c ****           add his own code by customization of function pointer HAL_SAI_RxCpltCallback()
  90:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) In case of flag error, HAL_SAI_ErrorCallback() function is executed and user can 
  91:HALLIB/Src/stm32f7xx_hal_sai.c ****           add his own code by customization of function pointer HAL_SAI_ErrorCallback()
  92:HALLIB/Src/stm32f7xx_hal_sai.c **** 
  93:HALLIB/Src/stm32f7xx_hal_sai.c ****     *** DMA mode IO operation ***
  94:HALLIB/Src/stm32f7xx_hal_sai.c ****     =============================
  95:HALLIB/Src/stm32f7xx_hal_sai.c ****     [..]
  96:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) Send an amount of data in non-blocking mode (DMA) using HAL_SAI_Transmit_DMA()
  97:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) At transmission end of transfer HAL_SAI_TxCpltCallback() is executed and user can
  98:HALLIB/Src/stm32f7xx_hal_sai.c ****           add his own code by customization of function pointer HAL_SAI_TxCpltCallback()
  99:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) Receive an amount of data in non-blocking mode (DMA) using HAL_SAI_Receive_DMA()
 100:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) At reception end of transfer HAL_SAI_RxCpltCallback() is executed and user can
 101:HALLIB/Src/stm32f7xx_hal_sai.c ****           add his own code by customization of function pointer HAL_SAI_RxCpltCallback()
 102:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) In case of flag error, HAL_SAI_ErrorCallback() function is executed and user can
 103:HALLIB/Src/stm32f7xx_hal_sai.c ****           add his own code by customization of function pointer HAL_SAI_ErrorCallback()
 104:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) Pause the DMA Transfer using HAL_SAI_DMAPause()
 105:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) Resume the DMA Transfer using HAL_SAI_DMAResume()
 106:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) Stop the DMA Transfer using HAL_SAI_DMAStop()
 107:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 108:HALLIB/Src/stm32f7xx_hal_sai.c ****     *** SAI HAL driver additional function list ***
 109:HALLIB/Src/stm32f7xx_hal_sai.c ****     ===============================================
 110:HALLIB/Src/stm32f7xx_hal_sai.c ****     [..]
 111:HALLIB/Src/stm32f7xx_hal_sai.c ****       Below the list the others API available SAI HAL driver :
 112:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 113:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) HAL_SAI_EnableTxMuteMode(): Enable the mute in tx mode
 114:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) HAL_SAI_DisableTxMuteMode(): Disable the mute in tx mode
 115:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) HAL_SAI_EnableRxMuteMode(): Enable the mute in Rx mode
 116:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) HAL_SAI_DisableRxMuteMode(): Disable the mute in Rx mode
 117:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) HAL_SAI_FlushRxFifo(): Flush the rx fifo.
 118:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) HAL_SAI_Abort(): Abort the current transfer
 119:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 120:HALLIB/Src/stm32f7xx_hal_sai.c ****     *** SAI HAL driver macros list ***
 121:HALLIB/Src/stm32f7xx_hal_sai.c ****     ==================================
 122:HALLIB/Src/stm32f7xx_hal_sai.c ****     [..]
 123:HALLIB/Src/stm32f7xx_hal_sai.c ****       Below the list of most used macros in SAI HAL driver :
 124:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 125:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) __HAL_SAI_ENABLE(): Enable the SAI peripheral
 126:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) __HAL_SAI_DISABLE(): Disable the SAI peripheral
 127:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) __HAL_SAI_ENABLE_IT(): Enable the specified SAI interrupts
 128:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) __HAL_SAI_DISABLE_IT(): Disable the specified SAI interrupts
 129:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) __HAL_SAI_GET_IT_SOURCE(): Check if the specified SAI interrupt source is
 130:HALLIB/Src/stm32f7xx_hal_sai.c ****           enabled or disabled
 131:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) __HAL_SAI_GET_FLAG(): Check whether the specified SAI flag is set or not
 132:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 133:HALLIB/Src/stm32f7xx_hal_sai.c ****   @endverbatim
 134:HALLIB/Src/stm32f7xx_hal_sai.c ****   ******************************************************************************
 135:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @attention
 136:HALLIB/Src/stm32f7xx_hal_sai.c ****   *
 137:HALLIB/Src/stm32f7xx_hal_sai.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 138:HALLIB/Src/stm32f7xx_hal_sai.c ****   *
 139:HALLIB/Src/stm32f7xx_hal_sai.c ****   * Redistribution and use in source and binary forms, with or without modification,
 140:HALLIB/Src/stm32f7xx_hal_sai.c ****   * are permitted provided that the following conditions are met:
 141:HALLIB/Src/stm32f7xx_hal_sai.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 142:HALLIB/Src/stm32f7xx_hal_sai.c ****   *      this list of conditions and the following disclaimer.
 143:HALLIB/Src/stm32f7xx_hal_sai.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 144:HALLIB/Src/stm32f7xx_hal_sai.c ****   *      this list of conditions and the following disclaimer in the documentation
 145:HALLIB/Src/stm32f7xx_hal_sai.c ****   *      and/or other materials provided with the distribution.
ARM GAS  /tmp/cc0s4dWM.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_sai.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 147:HALLIB/Src/stm32f7xx_hal_sai.c ****   *      may be used to endorse or promote products derived from this software
 148:HALLIB/Src/stm32f7xx_hal_sai.c ****   *      without specific prior written permission.
 149:HALLIB/Src/stm32f7xx_hal_sai.c ****   *
 150:HALLIB/Src/stm32f7xx_hal_sai.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 151:HALLIB/Src/stm32f7xx_hal_sai.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 152:HALLIB/Src/stm32f7xx_hal_sai.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 153:HALLIB/Src/stm32f7xx_hal_sai.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 154:HALLIB/Src/stm32f7xx_hal_sai.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 155:HALLIB/Src/stm32f7xx_hal_sai.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 156:HALLIB/Src/stm32f7xx_hal_sai.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 157:HALLIB/Src/stm32f7xx_hal_sai.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 158:HALLIB/Src/stm32f7xx_hal_sai.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 159:HALLIB/Src/stm32f7xx_hal_sai.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 160:HALLIB/Src/stm32f7xx_hal_sai.c ****   *
 161:HALLIB/Src/stm32f7xx_hal_sai.c ****   ******************************************************************************
 162:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 163:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 164:HALLIB/Src/stm32f7xx_hal_sai.c **** /* Includes ------------------------------------------------------------------*/
 165:HALLIB/Src/stm32f7xx_hal_sai.c **** #include "stm32f7xx_hal.h"
 166:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 167:HALLIB/Src/stm32f7xx_hal_sai.c **** /** @addtogroup STM32F7xx_HAL_Driver
 168:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @{
 169:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 170:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 171:HALLIB/Src/stm32f7xx_hal_sai.c **** /** @defgroup SAI SAI
 172:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief SAI HAL module driver
 173:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @{
 174:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 175:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 176:HALLIB/Src/stm32f7xx_hal_sai.c **** #ifdef HAL_SAI_MODULE_ENABLED
 177:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 178:HALLIB/Src/stm32f7xx_hal_sai.c **** /* Private typedef -----------------------------------------------------------*/
 179:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 180:HALLIB/Src/stm32f7xx_hal_sai.c **** /** @defgroup SAI_Private_Typedefs  SAI Private Typedefs
 181:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @{
 182:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 183:HALLIB/Src/stm32f7xx_hal_sai.c **** typedef enum {
 184:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_MODE_DMA,
 185:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_MODE_IT
 186:HALLIB/Src/stm32f7xx_hal_sai.c **** }SAI_ModeTypedef;
 187:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 188:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @}
 189:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 190:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 191:HALLIB/Src/stm32f7xx_hal_sai.c **** /* Private define ------------------------------------------------------------*/
 192:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 193:HALLIB/Src/stm32f7xx_hal_sai.c **** /** @defgroup SAI_Private_Constants  SAI Private Constants
 194:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @{
 195:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 196:HALLIB/Src/stm32f7xx_hal_sai.c **** #define SAI_FIFO_SIZE         8
 197:HALLIB/Src/stm32f7xx_hal_sai.c **** #define SAI_DEFAULT_TIMEOUT   4 /* 4ms */
 198:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 199:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @}
 200:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 201:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 202:HALLIB/Src/stm32f7xx_hal_sai.c **** /* Private macro -------------------------------------------------------------*/
ARM GAS  /tmp/cc0s4dWM.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_sai.c **** /* Private variables ---------------------------------------------------------*/
 204:HALLIB/Src/stm32f7xx_hal_sai.c **** /* Private function prototypes -----------------------------------------------*/
 205:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 206:HALLIB/Src/stm32f7xx_hal_sai.c **** /** @defgroup SAI_Private_Functions  SAI Private Functions
 207:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @{
 208:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 209:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_FillFifo(SAI_HandleTypeDef *hsai);
 210:HALLIB/Src/stm32f7xx_hal_sai.c **** static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode);
 211:HALLIB/Src/stm32f7xx_hal_sai.c **** static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize,
 212:HALLIB/Src/stm32f7xx_hal_sai.c **** static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize,
 213:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 214:HALLIB/Src/stm32f7xx_hal_sai.c **** static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai);
 215:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Transmit_IT8Bit(SAI_HandleTypeDef *hsai);
 216:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Transmit_IT16Bit(SAI_HandleTypeDef *hsai);
 217:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Transmit_IT32Bit(SAI_HandleTypeDef *hsai);
 218:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Receive_IT8Bit(SAI_HandleTypeDef *hsai);
 219:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Receive_IT16Bit(SAI_HandleTypeDef *hsai);
 220:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Receive_IT32Bit(SAI_HandleTypeDef *hsai);
 221:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 222:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma);
 223:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 224:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma);
 225:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 226:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMAError(DMA_HandleTypeDef *hdma);
 227:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMAAbort(DMA_HandleTypeDef *hdma);
 228:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 229:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @}
 230:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 231:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 232:HALLIB/Src/stm32f7xx_hal_sai.c **** /* Exported functions ---------------------------------------------------------*/
 233:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 234:HALLIB/Src/stm32f7xx_hal_sai.c **** /** @defgroup SAI_Exported_Functions SAI Exported Functions
 235:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @{
 236:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 237:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 238:HALLIB/Src/stm32f7xx_hal_sai.c **** /** @defgroup SAI_Exported_Functions_Group1 Initialization and de-initialization functions
 239:HALLIB/Src/stm32f7xx_hal_sai.c ****  *  @brief    Initialization and Configuration functions
 240:HALLIB/Src/stm32f7xx_hal_sai.c ****  *
 241:HALLIB/Src/stm32f7xx_hal_sai.c **** @verbatim
 242:HALLIB/Src/stm32f7xx_hal_sai.c ****  ===============================================================================
 243:HALLIB/Src/stm32f7xx_hal_sai.c ****             ##### Initialization and de-initialization functions #####
 244:HALLIB/Src/stm32f7xx_hal_sai.c ****  ===============================================================================
 245:HALLIB/Src/stm32f7xx_hal_sai.c ****   [..]  This subsection provides a set of functions allowing to initialize and
 246:HALLIB/Src/stm32f7xx_hal_sai.c ****         de-initialize the SAIx peripheral:
 247:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 248:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) User must implement HAL_SAI_MspInit() function in which he configures
 249:HALLIB/Src/stm32f7xx_hal_sai.c ****           all related peripherals resources (CLOCK, GPIO, DMA, IT and NVIC ).
 250:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 251:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) Call the function HAL_SAI_Init() to configure the selected device with
 252:HALLIB/Src/stm32f7xx_hal_sai.c ****           the selected configuration:
 253:HALLIB/Src/stm32f7xx_hal_sai.c ****         (++) Mode (Master/slave TX/RX)
 254:HALLIB/Src/stm32f7xx_hal_sai.c ****         (++) Protocol
 255:HALLIB/Src/stm32f7xx_hal_sai.c ****         (++) Data Size
 256:HALLIB/Src/stm32f7xx_hal_sai.c ****         (++) MCLK Output
 257:HALLIB/Src/stm32f7xx_hal_sai.c ****         (++) Audio frequency
 258:HALLIB/Src/stm32f7xx_hal_sai.c ****         (++) FIFO Threshold
 259:HALLIB/Src/stm32f7xx_hal_sai.c ****         (++) Frame Config
ARM GAS  /tmp/cc0s4dWM.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_sai.c ****         (++) Slot Config
 261:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 262:HALLIB/Src/stm32f7xx_hal_sai.c ****       (+) Call the function HAL_SAI_DeInit() to restore the default configuration
 263:HALLIB/Src/stm32f7xx_hal_sai.c ****           of the selected SAI peripheral.
 264:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 265:HALLIB/Src/stm32f7xx_hal_sai.c **** @endverbatim
 266:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @{
 267:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 268:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 269:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 270:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Initialize the structure FrameInit, SlotInit and the low part of
 271:HALLIB/Src/stm32f7xx_hal_sai.c ****   *         Init according to the specified parameters and call the function
 272:HALLIB/Src/stm32f7xx_hal_sai.c ****   *         HAL_SAI_Init to initialize the SAI block.
 273:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 274:HALLIB/Src/stm32f7xx_hal_sai.c ****   *               the configuration information for SAI module.
 275:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  protocol one of the supported protocol @ref SAI_Protocol
 276:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
 277:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                   the configuration information for SAI module.
 278:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  nbslot Number of slot.
 279:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
 280:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 281:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasiz
 282:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 283:HALLIB/Src/stm32f7xx_hal_sai.c ****   HAL_StatusTypeDef status = HAL_OK;
 284:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 285:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check the parameters */
 286:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
 287:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));
 288:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 289:HALLIB/Src/stm32f7xx_hal_sai.c ****   switch(protocol)
 290:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 291:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_I2S_STANDARD :
 292:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_I2S_MSBJUSTIFIED :
 293:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_I2S_LSBJUSTIFIED :
 294:HALLIB/Src/stm32f7xx_hal_sai.c ****     status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 295:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 296:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PCM_LONG :
 297:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PCM_SHORT :
 298:HALLIB/Src/stm32f7xx_hal_sai.c ****     status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 299:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 300:HALLIB/Src/stm32f7xx_hal_sai.c ****   default :
 301:HALLIB/Src/stm32f7xx_hal_sai.c ****     status = HAL_ERROR;
 302:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 303:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 304:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 305:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(status == HAL_OK)
 306:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 307:HALLIB/Src/stm32f7xx_hal_sai.c ****     status = HAL_SAI_Init(hsai);
 308:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 309:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 310:HALLIB/Src/stm32f7xx_hal_sai.c ****   return status;
 311:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 312:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 313:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 314:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Initialize the SAI according to the specified parameters.
 315:HALLIB/Src/stm32f7xx_hal_sai.c ****   *         in the SAI_InitTypeDef structure and initialize the associated handle.
 316:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
ARM GAS  /tmp/cc0s4dWM.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
 318:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
 319:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 320:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 321:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 322:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t tmpregisterGCR = 0;
 323:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t ckstr_bits = 0;
 324:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t syncen_bits = 0;
 325:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 326:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check the SAI handle allocation */
 327:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai == NULL)
 328:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 329:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_ERROR;
 330:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 331:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 332:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* check the instance */
 333:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 334:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 335:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check the SAI Block parameters */
 336:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 337:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 338:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 339:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 340:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 341:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 342:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 343:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 344:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 345:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 346:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 347:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 348:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 349:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 350:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 351:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check the SAI Block Frame parameters */
 352:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 353:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 354:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 355:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 356:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 357:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 358:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check the SAI Block Slot parameters */
 359:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 360:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 361:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 362:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 363:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 364:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State == HAL_SAI_STATE_RESET)
 365:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 366:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Allocate lock resource and initialize it */
 367:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Lock = HAL_UNLOCKED;
 368:HALLIB/Src/stm32f7xx_hal_sai.c ****     
 369:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
 370:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_MspInit(hsai);
 371:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 372:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 373:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->State = HAL_SAI_STATE_BUSY;
ARM GAS  /tmp/cc0s4dWM.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 375:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Disable the selected SAI peripheral */
 376:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_Disable(hsai);
 377:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 378:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* SAI Block Synchro Configuration -----------------------------------------*/
 379:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* This setting must be done with both audio block (A & B) disabled         */
 380:HALLIB/Src/stm32f7xx_hal_sai.c ****   switch(hsai->Init.SynchroExt)
 381:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 382:HALLIB/Src/stm32f7xx_hal_sai.c ****     case SAI_SYNCEXT_DISABLE :
 383:HALLIB/Src/stm32f7xx_hal_sai.c ****       tmpregisterGCR = 0;
 384:HALLIB/Src/stm32f7xx_hal_sai.c ****       break;
 385:HALLIB/Src/stm32f7xx_hal_sai.c ****     case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
 386:HALLIB/Src/stm32f7xx_hal_sai.c ****       tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 387:HALLIB/Src/stm32f7xx_hal_sai.c ****       break;
 388:HALLIB/Src/stm32f7xx_hal_sai.c ****     case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
 389:HALLIB/Src/stm32f7xx_hal_sai.c ****       tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 390:HALLIB/Src/stm32f7xx_hal_sai.c ****       break;
 391:HALLIB/Src/stm32f7xx_hal_sai.c ****   default:
 392:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 393:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 394:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 395:HALLIB/Src/stm32f7xx_hal_sai.c ****   switch(hsai->Init.Synchro)
 396:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 397:HALLIB/Src/stm32f7xx_hal_sai.c ****     case SAI_ASYNCHRONOUS :
 398:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 399:HALLIB/Src/stm32f7xx_hal_sai.c ****         syncen_bits = 0;
 400:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 401:HALLIB/Src/stm32f7xx_hal_sai.c ****       break;
 402:HALLIB/Src/stm32f7xx_hal_sai.c ****     case SAI_SYNCHRONOUS :
 403:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 404:HALLIB/Src/stm32f7xx_hal_sai.c ****         syncen_bits = SAI_xCR1_SYNCEN_0;
 405:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 406:HALLIB/Src/stm32f7xx_hal_sai.c ****       break;
 407:HALLIB/Src/stm32f7xx_hal_sai.c ****     case SAI_SYNCHRONOUS_EXT_SAI1 :
 408:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 409:HALLIB/Src/stm32f7xx_hal_sai.c ****         syncen_bits = SAI_xCR1_SYNCEN_1;
 410:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 411:HALLIB/Src/stm32f7xx_hal_sai.c ****       break;
 412:HALLIB/Src/stm32f7xx_hal_sai.c ****     case SAI_SYNCHRONOUS_EXT_SAI2 :
 413:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 414:HALLIB/Src/stm32f7xx_hal_sai.c ****         syncen_bits = SAI_xCR1_SYNCEN_1;
 415:HALLIB/Src/stm32f7xx_hal_sai.c ****         tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 416:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 417:HALLIB/Src/stm32f7xx_hal_sai.c ****       break;
 418:HALLIB/Src/stm32f7xx_hal_sai.c ****   default:
 419:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;      
 420:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 421:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 422:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 423:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 424:HALLIB/Src/stm32f7xx_hal_sai.c ****     SAI1->GCR = tmpregisterGCR;
 425:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 426:HALLIB/Src/stm32f7xx_hal_sai.c ****   else 
 427:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 428:HALLIB/Src/stm32f7xx_hal_sai.c ****     SAI2->GCR = tmpregisterGCR;
 429:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 430:HALLIB/Src/stm32f7xx_hal_sai.c **** 
ARM GAS  /tmp/cc0s4dWM.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 432:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 433:HALLIB/Src/stm32f7xx_hal_sai.c ****     uint32_t freq = 0;
 434:HALLIB/Src/stm32f7xx_hal_sai.c ****     uint32_t tmpval;
 435:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 436:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 437:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 438:HALLIB/Src/stm32f7xx_hal_sai.c ****       freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 439:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 440:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 441:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 442:HALLIB/Src/stm32f7xx_hal_sai.c ****       freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 443:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 444:HALLIB/Src/stm32f7xx_hal_sai.c ****     
 445:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Configure Master Clock using the following formula :
 446:HALLIB/Src/stm32f7xx_hal_sai.c ****        MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
 447:HALLIB/Src/stm32f7xx_hal_sai.c ****        FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
 448:HALLIB/Src/stm32f7xx_hal_sai.c ****        MCKDIV[3:0] = SAI_CK_x / FS * 512 */
 449:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* (freq x 10) to keep Significant digits */
 450:HALLIB/Src/stm32f7xx_hal_sai.c ****     tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 451:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.Mckdiv = tmpval / 10;
 452:HALLIB/Src/stm32f7xx_hal_sai.c ****     
 453:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Round result to the nearest integer */
 454:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((tmpval % 10) > 8)
 455:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 456:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->Init.Mckdiv+= 1;
 457:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 458:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 459:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 460:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
 461:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 462:HALLIB/Src/stm32f7xx_hal_sai.c ****   { /* Transmit */
 463:HALLIB/Src/stm32f7xx_hal_sai.c ****     ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 464:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 465:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
 466:HALLIB/Src/stm32f7xx_hal_sai.c ****   { /* Receive */
 467:HALLIB/Src/stm32f7xx_hal_sai.c ****     ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 468:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 469:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 470:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* SAI Block Configuration -------------------------------------------------*/
 471:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* SAI CR1 Configuration */
 472:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 473:HALLIB/Src/stm32f7xx_hal_sai.c ****                          SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
 474:HALLIB/Src/stm32f7xx_hal_sai.c ****                          SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
 475:HALLIB/Src/stm32f7xx_hal_sai.c ****                          SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
 476:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 477:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 478:HALLIB/Src/stm32f7xx_hal_sai.c ****                         hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 479:HALLIB/Src/stm32f7xx_hal_sai.c ****                         ckstr_bits | syncen_bits |                               \
 480:HALLIB/Src/stm32f7xx_hal_sai.c ****                         hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 481:HALLIB/Src/stm32f7xx_hal_sai.c ****                         hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 482:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 483:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* SAI CR2 Configuration */
 484:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 485:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriStat
 486:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 487:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* SAI Frame Configuration -----------------------------------------*/
ARM GAS  /tmp/cc0s4dWM.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 489:HALLIB/Src/stm32f7xx_hal_sai.c ****                            SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
 490:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 491:HALLIB/Src/stm32f7xx_hal_sai.c ****                           hsai->FrameInit.FSOffset |
 492:HALLIB/Src/stm32f7xx_hal_sai.c ****                           hsai->FrameInit.FSDefinition |
 493:HALLIB/Src/stm32f7xx_hal_sai.c ****                           hsai->FrameInit.FSPolarity   |
 494:HALLIB/Src/stm32f7xx_hal_sai.c ****                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 495:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 496:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* SAI Block_x SLOT Configuration ------------------------------------------*/
 497:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* This register has no meaning in AC 97 and SPDIF audio protocol */
 498:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 499:HALLIB/Src/stm32f7xx_hal_sai.c ****                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
 500:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 501:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 502:HALLIB/Src/stm32f7xx_hal_sai.c ****                           | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<
 503:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 504:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Initialize the error code */
 505:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 506:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 507:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Initialize the SAI state */
 508:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->State= HAL_SAI_STATE_READY;
 509:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 510:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Release Lock */
 511:HALLIB/Src/stm32f7xx_hal_sai.c ****   __HAL_UNLOCK(hsai);
 512:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 513:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_OK;
 514:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 515:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 516:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 517:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  DeInitialize the SAI peripheral.
 518:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 519:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
 520:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
 521:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 522:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
 523:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 524:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check the SAI handle allocation */
 525:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai == NULL)
 526:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 527:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_ERROR;
 528:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 529:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 530:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->State = HAL_SAI_STATE_BUSY;
 531:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 532:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Disabled All interrupt and clear all the flag */
 533:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->IMR = 0;
 534:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CLRFR = 0xFFFFFFFFU;
 535:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 536:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Disable the SAI */
 537:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_Disable(hsai);
 538:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 539:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Flush the fifo */
 540:HALLIB/Src/stm32f7xx_hal_sai.c ****   SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 541:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 542:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
 543:HALLIB/Src/stm32f7xx_hal_sai.c ****   HAL_SAI_MspDeInit(hsai);
 544:HALLIB/Src/stm32f7xx_hal_sai.c **** 
ARM GAS  /tmp/cc0s4dWM.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Initialize the error code */
 546:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 547:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 548:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Initialize the SAI state */
 549:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->State = HAL_SAI_STATE_RESET;
 550:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 551:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Release Lock */
 552:HALLIB/Src/stm32f7xx_hal_sai.c ****   __HAL_UNLOCK(hsai);
 553:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 554:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_OK;
 555:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 556:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 557:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 558:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief Initialize the SAI MSP.
 559:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 560:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
 561:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
 562:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 563:HALLIB/Src/stm32f7xx_hal_sai.c **** __weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
 564:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 565:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
 566:HALLIB/Src/stm32f7xx_hal_sai.c ****   UNUSED(hsai);
 567:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 568:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 569:HALLIB/Src/stm32f7xx_hal_sai.c ****             the HAL_SAI_MspInit could be implemented in the user file
 570:HALLIB/Src/stm32f7xx_hal_sai.c ****    */
 571:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 572:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 573:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 574:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief DeInitialize the SAI MSP.
 575:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 576:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
 577:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
 578:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 579:HALLIB/Src/stm32f7xx_hal_sai.c **** __weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
 580:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 581:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
 582:HALLIB/Src/stm32f7xx_hal_sai.c ****   UNUSED(hsai);
 583:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 584:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 585:HALLIB/Src/stm32f7xx_hal_sai.c ****             the HAL_SAI_MspDeInit could be implemented in the user file
 586:HALLIB/Src/stm32f7xx_hal_sai.c ****    */
 587:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 588:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 589:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 590:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @}
 591:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 592:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 593:HALLIB/Src/stm32f7xx_hal_sai.c **** /** @defgroup SAI_Exported_Functions_Group2 IO operation functions
 594:HALLIB/Src/stm32f7xx_hal_sai.c ****  *  @brief    Data transfers functions
 595:HALLIB/Src/stm32f7xx_hal_sai.c ****  *
 596:HALLIB/Src/stm32f7xx_hal_sai.c **** @verbatim
 597:HALLIB/Src/stm32f7xx_hal_sai.c ****   ==============================================================================
 598:HALLIB/Src/stm32f7xx_hal_sai.c ****                       ##### IO operation functions #####
 599:HALLIB/Src/stm32f7xx_hal_sai.c ****   ==============================================================================
 600:HALLIB/Src/stm32f7xx_hal_sai.c ****   [..]
 601:HALLIB/Src/stm32f7xx_hal_sai.c ****     This subsection provides a set of functions allowing to manage the SAI data
ARM GAS  /tmp/cc0s4dWM.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_sai.c ****     transfers.
 603:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 604:HALLIB/Src/stm32f7xx_hal_sai.c ****     (+) There are two modes of transfer:
 605:HALLIB/Src/stm32f7xx_hal_sai.c ****       (++) Blocking mode : The communication is performed in the polling mode.
 606:HALLIB/Src/stm32f7xx_hal_sai.c ****            The status of all data processing is returned by the same function
 607:HALLIB/Src/stm32f7xx_hal_sai.c ****            after finishing transfer.
 608:HALLIB/Src/stm32f7xx_hal_sai.c ****       (++) No-Blocking mode : The communication is performed using Interrupts
 609:HALLIB/Src/stm32f7xx_hal_sai.c ****            or DMA. These functions return the status of the transfer startup.
 610:HALLIB/Src/stm32f7xx_hal_sai.c ****            The end of the data processing will be indicated through the
 611:HALLIB/Src/stm32f7xx_hal_sai.c ****            dedicated SAI IRQ when using Interrupt mode or the DMA IRQ when
 612:HALLIB/Src/stm32f7xx_hal_sai.c ****            using DMA mode.
 613:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 614:HALLIB/Src/stm32f7xx_hal_sai.c ****     (+) Blocking mode functions are :
 615:HALLIB/Src/stm32f7xx_hal_sai.c ****       (++) HAL_SAI_Transmit()
 616:HALLIB/Src/stm32f7xx_hal_sai.c ****       (++) HAL_SAI_Receive()
 617:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 618:HALLIB/Src/stm32f7xx_hal_sai.c ****     (+) Non Blocking mode functions with Interrupt are :
 619:HALLIB/Src/stm32f7xx_hal_sai.c ****       (++) HAL_SAI_Transmit_IT()
 620:HALLIB/Src/stm32f7xx_hal_sai.c ****       (++) HAL_SAI_Receive_IT()
 621:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 622:HALLIB/Src/stm32f7xx_hal_sai.c ****     (+) Non Blocking mode functions with DMA are :
 623:HALLIB/Src/stm32f7xx_hal_sai.c ****       (++) HAL_SAI_Transmit_DMA()
 624:HALLIB/Src/stm32f7xx_hal_sai.c ****       (++) HAL_SAI_Receive_DMA()
 625:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 626:HALLIB/Src/stm32f7xx_hal_sai.c ****     (+) A set of Transfer Complete Callbacks are provided in non Blocking mode:
 627:HALLIB/Src/stm32f7xx_hal_sai.c ****       (++) HAL_SAI_TxCpltCallback()
 628:HALLIB/Src/stm32f7xx_hal_sai.c ****       (++) HAL_SAI_RxCpltCallback()
 629:HALLIB/Src/stm32f7xx_hal_sai.c ****       (++) HAL_SAI_ErrorCallback()
 630:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 631:HALLIB/Src/stm32f7xx_hal_sai.c **** @endverbatim
 632:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @{
 633:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 634:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 635:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 636:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Transmit an amount of data in blocking mode.
 637:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 638:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
 639:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  pData Pointer to data buffer
 640:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  Size Amount of data to be sent
 641:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  Timeout Timeout duration
 642:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
 643:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 644:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t* pData, uint16_t Size, uint32_t
 645:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 646:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t tickstart = HAL_GetTick();
 647:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 648:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((pData == NULL ) || (Size == 0))
 649:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 650:HALLIB/Src/stm32f7xx_hal_sai.c ****     return  HAL_ERROR;
 651:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 652:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 653:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State == HAL_SAI_STATE_READY)
 654:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 655:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Locked */
 656:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_LOCK(hsai);
 657:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 658:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferSize = Size;
ARM GAS  /tmp/cc0s4dWM.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
 660:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->pBuffPtr = pData;
 661:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_TX;
 662:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 663:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 664:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Check if the SAI is already enabled */
 665:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 666:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 667:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* fill the fifo with data before to enabled the SAI */
 668:HALLIB/Src/stm32f7xx_hal_sai.c ****       SAI_FillFifo(hsai);
 669:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Enable SAI peripheral */
 670:HALLIB/Src/stm32f7xx_hal_sai.c ****       __HAL_SAI_ENABLE(hsai);
 671:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 672:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 673:HALLIB/Src/stm32f7xx_hal_sai.c ****     while(hsai->XferCount > 0)
 674:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 675:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Write data if the FIFO is not full */
 676:HALLIB/Src/stm32f7xx_hal_sai.c ****       if((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 677:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 678:HALLIB/Src/stm32f7xx_hal_sai.c ****         if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDIN
 679:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 680:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->Instance->DR = (*hsai->pBuffPtr++);
 681:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 682:HALLIB/Src/stm32f7xx_hal_sai.c ****         else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 683:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 684:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 685:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->pBuffPtr+= 2;
 686:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 687:HALLIB/Src/stm32f7xx_hal_sai.c ****         else
 688:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 689:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 690:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->pBuffPtr+= 4;
 691:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 692:HALLIB/Src/stm32f7xx_hal_sai.c ****         hsai->XferCount--;
 693:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 694:HALLIB/Src/stm32f7xx_hal_sai.c ****       else
 695:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 696:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Check for the Timeout */
 697:HALLIB/Src/stm32f7xx_hal_sai.c ****         if((Timeout != HAL_MAX_DELAY) && ((Timeout == 0)||((HAL_GetTick() - tickstart) > Timeout)))
 698:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 699:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Update error code */
 700:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 701:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 702:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Clear all the flags */
 703:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->Instance->CLRFR = 0xFFFFFFFFU;
 704:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 705:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Disable SAI peripheral */
 706:HALLIB/Src/stm32f7xx_hal_sai.c ****           SAI_Disable(hsai);
 707:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 708:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Flush the fifo */
 709:HALLIB/Src/stm32f7xx_hal_sai.c ****           SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 710:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 711:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Change the SAI state */
 712:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->State = HAL_SAI_STATE_READY;
 713:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 714:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Process Unlocked */
 715:HALLIB/Src/stm32f7xx_hal_sai.c ****           __HAL_UNLOCK(hsai);
ARM GAS  /tmp/cc0s4dWM.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 717:HALLIB/Src/stm32f7xx_hal_sai.c ****           return HAL_ERROR;
 718:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 719:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 720:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 721:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 722:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
 723:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 724:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Unlocked */
 725:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_UNLOCK(hsai);
 726:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 727:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
 728:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 729:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
 730:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 731:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_BUSY;
 732:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 733:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 734:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 735:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 736:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Receive an amount of data in blocking mode.
 737:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 738:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
 739:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  pData Pointer to data buffer
 740:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  Size Amount of data to be received
 741:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  Timeout Timeout duration
 742:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
 743:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 744:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t 
 745:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 746:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t tickstart = HAL_GetTick();
 747:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 748:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((pData == NULL ) || (Size == 0))
 749:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 750:HALLIB/Src/stm32f7xx_hal_sai.c ****     return  HAL_ERROR;
 751:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 752:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 753:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State == HAL_SAI_STATE_READY)
 754:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 755:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Locked */
 756:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_LOCK(hsai);
 757:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 758:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->pBuffPtr = pData;
 759:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferSize = Size;
 760:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
 761:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_RX;
 762:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 763:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 764:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Check if the SAI is already enabled */
 765:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 766:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 767:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Enable SAI peripheral */
 768:HALLIB/Src/stm32f7xx_hal_sai.c ****       __HAL_SAI_ENABLE(hsai);
 769:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 770:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 771:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Receive data */
 772:HALLIB/Src/stm32f7xx_hal_sai.c ****     while(hsai->XferCount > 0)
ARM GAS  /tmp/cc0s4dWM.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 774:HALLIB/Src/stm32f7xx_hal_sai.c ****       if((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 775:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 776:HALLIB/Src/stm32f7xx_hal_sai.c ****         if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDIN
 777:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 778:HALLIB/Src/stm32f7xx_hal_sai.c ****           (*hsai->pBuffPtr++) = hsai->Instance->DR;
 779:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 780:HALLIB/Src/stm32f7xx_hal_sai.c ****         else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 781:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 782:HALLIB/Src/stm32f7xx_hal_sai.c ****           *((uint16_t*)hsai->pBuffPtr) = hsai->Instance->DR;
 783:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->pBuffPtr+= 2;
 784:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 785:HALLIB/Src/stm32f7xx_hal_sai.c ****         else
 786:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 787:HALLIB/Src/stm32f7xx_hal_sai.c ****           *((uint32_t*)hsai->pBuffPtr) = hsai->Instance->DR;
 788:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->pBuffPtr+= 4;
 789:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 790:HALLIB/Src/stm32f7xx_hal_sai.c ****         hsai->XferCount--;
 791:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 792:HALLIB/Src/stm32f7xx_hal_sai.c ****       else
 793:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 794:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Check for the Timeout */
 795:HALLIB/Src/stm32f7xx_hal_sai.c ****         if((Timeout != HAL_MAX_DELAY) && ((Timeout == 0)||((HAL_GetTick() - tickstart) > Timeout)))
 796:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 797:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Update error code */
 798:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 799:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 800:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Clear all the flags */
 801:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->Instance->CLRFR = 0xFFFFFFFFU;
 802:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 803:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Disable SAI peripheral */
 804:HALLIB/Src/stm32f7xx_hal_sai.c ****           SAI_Disable(hsai);
 805:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 806:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Flush the fifo */
 807:HALLIB/Src/stm32f7xx_hal_sai.c ****           SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 808:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 809:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Change the SAI state */
 810:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->State = HAL_SAI_STATE_READY;
 811:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 812:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Process Unlocked */
 813:HALLIB/Src/stm32f7xx_hal_sai.c ****           __HAL_UNLOCK(hsai);
 814:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 815:HALLIB/Src/stm32f7xx_hal_sai.c ****           return HAL_ERROR;
 816:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 817:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 818:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 819:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 820:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
 821:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 822:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Unlocked */
 823:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_UNLOCK(hsai);
 824:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 825:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
 826:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 827:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
 828:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 829:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_BUSY;
ARM GAS  /tmp/cc0s4dWM.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 831:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 832:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 833:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 834:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Transmit an amount of data in non-blocking mode with Interrupt.
 835:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 836:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
 837:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  pData Pointer to data buffer
 838:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  Size Amount of data to be sent
 839:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
 840:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 841:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_Transmit_IT(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
 842:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 843:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((pData == NULL) || (Size == 0))
 844:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 845:HALLIB/Src/stm32f7xx_hal_sai.c ****     return  HAL_ERROR;
 846:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 847:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 848:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State == HAL_SAI_STATE_READY)
 849:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 850:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Locked */
 851:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_LOCK(hsai);
 852:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 853:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->pBuffPtr = pData;
 854:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferSize = Size;
 855:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
 856:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 857:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_TX;
 858:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 859:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 860:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 861:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->InterruptServiceRoutine = SAI_Transmit_IT8Bit;
 862:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 863:HALLIB/Src/stm32f7xx_hal_sai.c ****     else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 864:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 865:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->InterruptServiceRoutine = SAI_Transmit_IT16Bit;
 866:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 867:HALLIB/Src/stm32f7xx_hal_sai.c ****     else
 868:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 869:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->InterruptServiceRoutine = SAI_Transmit_IT32Bit;
 870:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 871:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 872:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Fill the fifo before starting the communication */
 873:HALLIB/Src/stm32f7xx_hal_sai.c ****     SAI_FillFifo(hsai);
 874:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 875:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Enable FRQ and OVRUDR interrupts */
 876:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_IT));
 877:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 878:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Check if the SAI is already enabled */
 879:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 880:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 881:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Enable SAI peripheral */
 882:HALLIB/Src/stm32f7xx_hal_sai.c ****       __HAL_SAI_ENABLE(hsai);
 883:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 884:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Unlocked */
 885:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_UNLOCK(hsai);
 886:HALLIB/Src/stm32f7xx_hal_sai.c **** 
ARM GAS  /tmp/cc0s4dWM.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
 888:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 889:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
 890:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 891:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_BUSY;
 892:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 893:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 894:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 895:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 896:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Receive an amount of data in non-blocking mode with Interrupt.
 897:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 898:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
 899:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  pData Pointer to data buffer
 900:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  Size Amount of data to be received
 901:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
 902:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 903:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_Receive_IT(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
 904:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 905:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((pData == NULL) || (Size == 0))
 906:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 907:HALLIB/Src/stm32f7xx_hal_sai.c ****     return  HAL_ERROR;
 908:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 909:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 910:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State == HAL_SAI_STATE_READY)
 911:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 912:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Locked */
 913:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_LOCK(hsai);
 914:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 915:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->pBuffPtr = pData;
 916:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferSize = Size;
 917:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
 918:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 919:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_RX;
 920:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 921:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 922:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 923:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->InterruptServiceRoutine = SAI_Receive_IT8Bit;
 924:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 925:HALLIB/Src/stm32f7xx_hal_sai.c ****     else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 926:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 927:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->InterruptServiceRoutine = SAI_Receive_IT16Bit;
 928:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 929:HALLIB/Src/stm32f7xx_hal_sai.c ****     else
 930:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 931:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->InterruptServiceRoutine = SAI_Receive_IT32Bit;
 932:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 933:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 934:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Enable TXE and OVRUDR interrupts */
 935:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_IT));
 936:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 937:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Check if the SAI is already enabled */
 938:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 939:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 940:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Enable SAI peripheral */
 941:HALLIB/Src/stm32f7xx_hal_sai.c ****       __HAL_SAI_ENABLE(hsai);
 942:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 943:HALLIB/Src/stm32f7xx_hal_sai.c **** 
ARM GAS  /tmp/cc0s4dWM.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Unlocked */
 945:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_UNLOCK(hsai);
 946:HALLIB/Src/stm32f7xx_hal_sai.c ****     
 947:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
 948:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 949:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
 950:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 951:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_BUSY;
 952:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 953:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 954:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 955:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 956:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief Pause the audio stream playing from the Media.
 957:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 958:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
 959:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
 960:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 961:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
 962:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 963:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Locked */
 964:HALLIB/Src/stm32f7xx_hal_sai.c ****   __HAL_LOCK(hsai);
 965:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 966:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Pause the audio file playing by disabling the SAI DMA requests */
 967:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 968:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 969:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Unlocked */
 970:HALLIB/Src/stm32f7xx_hal_sai.c ****   __HAL_UNLOCK(hsai);
 971:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 972:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_OK;
 973:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 974:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 975:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 976:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief Resume the audio stream playing from the Media.
 977:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
 978:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
 979:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
 980:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
 981:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_DMAResume(SAI_HandleTypeDef *hsai)
 982:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 983:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Locked */
 984:HALLIB/Src/stm32f7xx_hal_sai.c ****   __HAL_LOCK(hsai);
 985:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 986:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Enable the SAI DMA requests */
 987:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 988:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 989:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* If the SAI peripheral is still not enabled, enable it */
 990:HALLIB/Src/stm32f7xx_hal_sai.c ****   if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 991:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 992:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Enable SAI peripheral */
 993:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_ENABLE(hsai);
 994:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 995:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 996:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Unlocked */
 997:HALLIB/Src/stm32f7xx_hal_sai.c ****   __HAL_UNLOCK(hsai);
 998:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 999:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_OK;
1000:HALLIB/Src/stm32f7xx_hal_sai.c **** }
ARM GAS  /tmp/cc0s4dWM.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1002:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1003:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief Stop the audio stream playing from the Media.
1004:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1005:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1006:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
1007:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1008:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
1009:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1010:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Locked */
1011:HALLIB/Src/stm32f7xx_hal_sai.c ****   __HAL_LOCK(hsai);
1012:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1013:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Disable the SAI DMA request */
1014:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
1015:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1016:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Abort the SAI DMA Streams */
1017:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->hdmatx != NULL)
1018:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1019:HALLIB/Src/stm32f7xx_hal_sai.c ****     if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
1020:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1021:HALLIB/Src/stm32f7xx_hal_sai.c ****       return HAL_ERROR;
1022:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1023:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1024:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1025:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->hdmarx != NULL)
1026:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1027:HALLIB/Src/stm32f7xx_hal_sai.c ****     if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
1028:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1029:HALLIB/Src/stm32f7xx_hal_sai.c ****       return HAL_ERROR;
1030:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1031:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1032:HALLIB/Src/stm32f7xx_hal_sai.c ****   
1033:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Disable SAI peripheral */
1034:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_Disable(hsai);
1035:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1036:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Flush the fifo */
1037:HALLIB/Src/stm32f7xx_hal_sai.c ****   SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
1038:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1039:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->State = HAL_SAI_STATE_READY;
1040:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1041:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Unlocked */
1042:HALLIB/Src/stm32f7xx_hal_sai.c ****   __HAL_UNLOCK(hsai);
1043:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1044:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_OK;
1045:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1046:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1047:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1048:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief Abort the current transfer and disable the SAI.
1049:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1050:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1051:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
1052:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1053:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
1054:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1055:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Locked */
1056:HALLIB/Src/stm32f7xx_hal_sai.c ****   __HAL_LOCK(hsai);
1057:HALLIB/Src/stm32f7xx_hal_sai.c **** 
ARM GAS  /tmp/cc0s4dWM.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check SAI DMA is enabled or not */
1059:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
1060:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1061:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable the SAI DMA request */
1062:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
1063:HALLIB/Src/stm32f7xx_hal_sai.c ****     
1064:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Abort the SAI DMA Streams */
1065:HALLIB/Src/stm32f7xx_hal_sai.c ****     if(hsai->hdmatx != NULL)
1066:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1067:HALLIB/Src/stm32f7xx_hal_sai.c ****       if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
1068:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
1069:HALLIB/Src/stm32f7xx_hal_sai.c ****         return HAL_ERROR;
1070:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
1071:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1072:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1073:HALLIB/Src/stm32f7xx_hal_sai.c ****     if(hsai->hdmarx != NULL)
1074:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1075:HALLIB/Src/stm32f7xx_hal_sai.c ****       if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
1076:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
1077:HALLIB/Src/stm32f7xx_hal_sai.c ****         return HAL_ERROR;
1078:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
1079:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1080:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1081:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Disabled All interrupt and clear all the flag */
1082:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->IMR = 0;
1083:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CLRFR = 0xFFFFFFFFU;
1084:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1085:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Disable SAI peripheral */
1086:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_Disable(hsai);
1087:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1088:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Flush the fifo */
1089:HALLIB/Src/stm32f7xx_hal_sai.c ****   SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
1090:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1091:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->State = HAL_SAI_STATE_READY;
1092:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1093:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Unlocked */
1094:HALLIB/Src/stm32f7xx_hal_sai.c ****   __HAL_UNLOCK(hsai);
1095:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1096:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_OK;
1097:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1098:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1099:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1100:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Transmit an amount of data in non-blocking mode with DMA.
1101:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1102:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1103:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  pData Pointer to data buffer
1104:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  Size Amount of data to be sent
1105:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
1106:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1107:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
1108:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1109:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((pData == NULL) || (Size == 0))
1110:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1111:HALLIB/Src/stm32f7xx_hal_sai.c ****     return  HAL_ERROR;
1112:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1113:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1114:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State == HAL_SAI_STATE_READY)
ARM GAS  /tmp/cc0s4dWM.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1116:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Locked */
1117:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_LOCK(hsai);
1118:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1119:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->pBuffPtr = pData;
1120:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferSize = Size;
1121:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
1122:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
1123:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_TX;
1124:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1125:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Set the SAI Tx DMA Half transfer complete callback */
1126:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
1127:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1128:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Set the SAI TxDMA transfer complete callback */
1129:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
1130:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1131:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Set the DMA error callback */
1132:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->hdmatx->XferErrorCallback = SAI_DMAError;
1133:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1134:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Set the DMA Tx abort callback */
1135:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->hdmatx->XferAbortCallback = NULL;
1136:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1137:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Enable the Tx DMA Stream */
1138:HALLIB/Src/stm32f7xx_hal_sai.c ****     if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai
1139:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1140:HALLIB/Src/stm32f7xx_hal_sai.c ****       __HAL_UNLOCK(hsai);
1141:HALLIB/Src/stm32f7xx_hal_sai.c ****       return  HAL_ERROR;
1142:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1143:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1144:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Check if the SAI is already enabled */
1145:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
1146:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1147:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Enable SAI peripheral */
1148:HALLIB/Src/stm32f7xx_hal_sai.c ****       __HAL_SAI_ENABLE(hsai);
1149:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1150:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1151:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Enable the interrupts for error handling */
1152:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
1153:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1154:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Enable SAI Tx DMA Request */
1155:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
1156:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1157:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Unlocked */
1158:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_UNLOCK(hsai);
1159:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1160:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
1161:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1162:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
1163:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1164:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_BUSY;
1165:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1166:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1167:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1168:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1169:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Receive an amount of data in non-blocking mode with DMA.
1170:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1171:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
ARM GAS  /tmp/cc0s4dWM.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  pData Pointer to data buffer
1173:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  Size Amount of data to be received
1174:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
1175:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1176:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
1177:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1178:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1179:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((pData == NULL) || (Size == 0))
1180:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1181:HALLIB/Src/stm32f7xx_hal_sai.c ****     return  HAL_ERROR;
1182:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1183:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1184:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State == HAL_SAI_STATE_READY)
1185:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1186:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Locked */
1187:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_LOCK(hsai);
1188:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1189:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->pBuffPtr = pData;
1190:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferSize = Size;
1191:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
1192:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
1193:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_RX;
1194:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1195:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Set the SAI Rx DMA Half transfer complete callback */
1196:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
1197:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1198:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Set the SAI Rx DMA transfer complete callback */
1199:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
1200:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1201:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Set the DMA error callback */
1202:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->hdmarx->XferErrorCallback = SAI_DMAError;
1203:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1204:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Set the DMA Rx abort callback */
1205:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->hdmarx->XferAbortCallback = NULL;
1206:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1207:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Enable the Rx DMA Stream */
1208:HALLIB/Src/stm32f7xx_hal_sai.c ****     if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai
1209:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1210:HALLIB/Src/stm32f7xx_hal_sai.c ****       __HAL_UNLOCK(hsai);
1211:HALLIB/Src/stm32f7xx_hal_sai.c ****       return  HAL_ERROR;
1212:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1213:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1214:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Check if the SAI is already enabled */
1215:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
1216:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1217:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Enable SAI peripheral */
1218:HALLIB/Src/stm32f7xx_hal_sai.c ****       __HAL_SAI_ENABLE(hsai);
1219:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1220:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1221:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Enable the interrupts for error handling */
1222:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
1223:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1224:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Enable SAI Rx DMA Request */
1225:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
1226:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1227:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Process Unlocked */
1228:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_UNLOCK(hsai);
ARM GAS  /tmp/cc0s4dWM.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1230:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
1231:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1232:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
1233:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1234:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_BUSY;
1235:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1236:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1237:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1238:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1239:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Enable the Tx mute mode.
1240:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1241:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1242:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  val  value sent during the mute @ref SAI_Block_Mute_Value
1243:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
1244:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1245:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_EnableTxMuteMode(SAI_HandleTypeDef *hsai, uint16_t val)
1246:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1247:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_MUTE_VALUE(val));
1248:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1249:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State != HAL_SAI_STATE_RESET)
1250:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1251:HALLIB/Src/stm32f7xx_hal_sai.c ****     CLEAR_BIT(hsai->Instance->CR2, SAI_xCR2_MUTEVAL | SAI_xCR2_MUTE);
1252:HALLIB/Src/stm32f7xx_hal_sai.c ****     SET_BIT(hsai->Instance->CR2, SAI_xCR2_MUTE | val);
1253:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
1254:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1255:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_ERROR;
1256:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1257:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1258:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1259:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Disable the Tx mute mode.
1260:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1261:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1262:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
1263:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1264:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_DisableTxMuteMode(SAI_HandleTypeDef *hsai)
1265:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1266:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State != HAL_SAI_STATE_RESET)
1267:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1268:HALLIB/Src/stm32f7xx_hal_sai.c ****     CLEAR_BIT(hsai->Instance->CR2, SAI_xCR2_MUTEVAL | SAI_xCR2_MUTE);
1269:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
1270:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1271:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_ERROR;
1272:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1273:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1274:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1275:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Enable the Rx mute detection.
1276:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1277:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1278:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  callback function called when the mute is detected.
1279:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  counter number a data before mute detection max 63.
1280:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
1281:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1282:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_EnableRxMuteMode(SAI_HandleTypeDef *hsai, SAIcallback callback, uint16_t 
1283:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1284:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_MUTE_COUNTER(counter));
1285:HALLIB/Src/stm32f7xx_hal_sai.c **** 
ARM GAS  /tmp/cc0s4dWM.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State != HAL_SAI_STATE_RESET)
1287:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1288:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* set the mute counter */
1289:HALLIB/Src/stm32f7xx_hal_sai.c ****     CLEAR_BIT(hsai->Instance->CR2, SAI_xCR2_MUTECNT);
1290:HALLIB/Src/stm32f7xx_hal_sai.c ****     SET_BIT(hsai->Instance->CR2, (uint32_t)((uint32_t)counter << SAI_xCR2_MUTECNT_Pos));
1291:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->mutecallback = callback;
1292:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* enable the IT interrupt */
1293:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_ENABLE_IT(hsai, SAI_IT_MUTEDET);
1294:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
1295:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1296:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_ERROR;
1297:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1298:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1299:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1300:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Disable the Rx mute detection.
1301:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1302:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1303:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
1304:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1305:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_StatusTypeDef HAL_SAI_DisableRxMuteMode(SAI_HandleTypeDef *hsai)
1306:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1307:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State != HAL_SAI_STATE_RESET)
1308:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1309:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* set the mutecallback to NULL */
1310:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->mutecallback = (SAIcallback)NULL;
1311:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* enable the IT interrupt */
1312:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_DISABLE_IT(hsai, SAI_IT_MUTEDET);
1313:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
1314:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1315:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_ERROR;
1316:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1317:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1318:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1319:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Handle SAI interrupt request.
1320:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1321:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1322:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1323:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1324:HALLIB/Src/stm32f7xx_hal_sai.c **** void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
1325:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1326:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State != HAL_SAI_STATE_RESET)
1327:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1328:HALLIB/Src/stm32f7xx_hal_sai.c ****     uint32_t itflags = hsai->Instance->SR;
1329:HALLIB/Src/stm32f7xx_hal_sai.c ****     uint32_t itsources = hsai->Instance->IMR;
1330:HALLIB/Src/stm32f7xx_hal_sai.c ****     uint32_t cr1config = hsai->Instance->CR1;    
1331:HALLIB/Src/stm32f7xx_hal_sai.c ****     uint32_t tmperror;
1332:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1333:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* SAI Fifo request interrupt occured ------------------------------------*/
1334:HALLIB/Src/stm32f7xx_hal_sai.c ****     if(((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
1335:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1336:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->InterruptServiceRoutine(hsai);
1337:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1338:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* SAI Overrun error interrupt occurred ----------------------------------*/
1339:HALLIB/Src/stm32f7xx_hal_sai.c ****     else if(((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI
1340:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1341:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Clear the SAI Overrun flag */
1342:HALLIB/Src/stm32f7xx_hal_sai.c ****       __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
ARM GAS  /tmp/cc0s4dWM.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Get the SAI error code */
1344:HALLIB/Src/stm32f7xx_hal_sai.c ****       tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR); 
1345:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Change the SAI error code */
1346:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->ErrorCode |= tmperror;
1347:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* the transfer is not stopped, we will forward the information to the user and we let the us
1348:HALLIB/Src/stm32f7xx_hal_sai.c ****       HAL_SAI_ErrorCallback(hsai);
1349:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1350:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* SAI mutedet interrupt occurred ----------------------------------*/
1351:HALLIB/Src/stm32f7xx_hal_sai.c ****     else if(((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == 
1352:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1353:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Clear the SAI mutedet flag */
1354:HALLIB/Src/stm32f7xx_hal_sai.c ****       __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
1355:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* call the call back function */
1356:HALLIB/Src/stm32f7xx_hal_sai.c ****       if(hsai->mutecallback != (SAIcallback)NULL)
1357:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
1358:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* inform the user that an RX mute event has been detected */
1359:HALLIB/Src/stm32f7xx_hal_sai.c ****         hsai->mutecallback();
1360:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
1361:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1362:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* SAI AFSDET interrupt occurred ----------------------------------*/
1363:HALLIB/Src/stm32f7xx_hal_sai.c ****     else if(((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI
1364:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1365:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Change the SAI error code */
1366:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
1367:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Check SAI DMA is enabled or not */
1368:HALLIB/Src/stm32f7xx_hal_sai.c ****       if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
1369:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
1370:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Abort the SAI DMA Streams */
1371:HALLIB/Src/stm32f7xx_hal_sai.c ****         if(hsai->hdmatx != NULL)
1372:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
1373:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Set the DMA Tx abort callback */
1374:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
1375:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1376:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Abort DMA in IT mode */
1377:HALLIB/Src/stm32f7xx_hal_sai.c ****           HAL_DMA_Abort_IT(hsai->hdmatx);
1378:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
1379:HALLIB/Src/stm32f7xx_hal_sai.c ****         else if(hsai->hdmarx != NULL)
1380:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
1381:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Set the DMA Rx abort callback */
1382:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
1383:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Abort DMA in IT mode */
1384:HALLIB/Src/stm32f7xx_hal_sai.c ****           HAL_DMA_Abort_IT(hsai->hdmarx);
1385:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
1386:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
1387:HALLIB/Src/stm32f7xx_hal_sai.c ****       else
1388:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
1389:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Abort SAI */ 
1390:HALLIB/Src/stm32f7xx_hal_sai.c ****         HAL_SAI_Abort(hsai);
1391:HALLIB/Src/stm32f7xx_hal_sai.c ****         
1392:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Set error callback */
1393:HALLIB/Src/stm32f7xx_hal_sai.c ****         HAL_SAI_ErrorCallback(hsai);          
1394:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
1395:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1396:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* SAI LFSDET interrupt occurred ----------------------------------*/
1397:HALLIB/Src/stm32f7xx_hal_sai.c ****     else if(((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI
1398:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1399:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Change the SAI error code */
ARM GAS  /tmp/cc0s4dWM.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
1401:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1402:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Check SAI DMA is enabled or not */
1403:HALLIB/Src/stm32f7xx_hal_sai.c ****       if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
1404:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
1405:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Abort the SAI DMA Streams */
1406:HALLIB/Src/stm32f7xx_hal_sai.c ****         if(hsai->hdmatx != NULL)
1407:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
1408:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Set the DMA Tx abort callback */
1409:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->hdmatx->XferAbortCallback = SAI_DMAAbort; 
1410:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Abort DMA in IT mode */
1411:HALLIB/Src/stm32f7xx_hal_sai.c ****           HAL_DMA_Abort_IT(hsai->hdmatx);
1412:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
1413:HALLIB/Src/stm32f7xx_hal_sai.c ****         else if(hsai->hdmarx != NULL)
1414:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
1415:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Set the DMA Rx abort callback */
1416:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->hdmarx->XferAbortCallback = SAI_DMAAbort; 
1417:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Abort DMA in IT mode */          
1418:HALLIB/Src/stm32f7xx_hal_sai.c ****           HAL_DMA_Abort_IT(hsai->hdmarx);
1419:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
1420:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
1421:HALLIB/Src/stm32f7xx_hal_sai.c ****       else
1422:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
1423:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Abort SAI */ 
1424:HALLIB/Src/stm32f7xx_hal_sai.c ****         HAL_SAI_Abort(hsai);
1425:HALLIB/Src/stm32f7xx_hal_sai.c ****         
1426:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Set error callback */
1427:HALLIB/Src/stm32f7xx_hal_sai.c ****         HAL_SAI_ErrorCallback(hsai);
1428:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
1429:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1430:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* SAI WCKCFG interrupt occurred ----------------------------------*/
1431:HALLIB/Src/stm32f7xx_hal_sai.c ****     else if(((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI
1432:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1433:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Change the SAI error code */
1434:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
1435:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1436:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Abort the SAI DMA Streams */
1437:HALLIB/Src/stm32f7xx_hal_sai.c ****       if(hsai->hdmatx != NULL)
1438:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
1439:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Set the DMA Tx abort callback */
1440:HALLIB/Src/stm32f7xx_hal_sai.c ****         hsai->hdmatx->XferAbortCallback = SAI_DMAAbort; 
1441:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Abort DMA in IT mode */
1442:HALLIB/Src/stm32f7xx_hal_sai.c ****         HAL_DMA_Abort_IT(hsai->hdmatx);
1443:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
1444:HALLIB/Src/stm32f7xx_hal_sai.c ****       else if(hsai->hdmarx != NULL)
1445:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
1446:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Set the DMA Rx abort callback */
1447:HALLIB/Src/stm32f7xx_hal_sai.c ****         hsai->hdmarx->XferAbortCallback = SAI_DMAAbort; 
1448:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Abort DMA in IT mode */          
1449:HALLIB/Src/stm32f7xx_hal_sai.c ****         HAL_DMA_Abort_IT(hsai->hdmarx);
1450:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
1451:HALLIB/Src/stm32f7xx_hal_sai.c ****       else
1452:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
1453:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* If WCKCFG occurs, SAI audio block is automatically disabled */
1454:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Disable all interrupts and clear all flags */
1455:HALLIB/Src/stm32f7xx_hal_sai.c ****         hsai->Instance->IMR = 0U;
1456:HALLIB/Src/stm32f7xx_hal_sai.c ****         hsai->Instance->CLRFR = 0xFFFFFFFFU;
ARM GAS  /tmp/cc0s4dWM.s 			page 27


1457:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Set the SAI state to ready to be able to start again the process */
1458:HALLIB/Src/stm32f7xx_hal_sai.c ****         hsai->State = HAL_SAI_STATE_READY;
1459:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1460:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Initialize XferCount */
1461:HALLIB/Src/stm32f7xx_hal_sai.c ****         hsai->XferCount = 0U;
1462:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1463:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* SAI error Callback */
1464:HALLIB/Src/stm32f7xx_hal_sai.c ****         HAL_SAI_ErrorCallback(hsai);        
1465:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
1466:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1467:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* SAI CNRDY interrupt occurred ----------------------------------*/
1468:HALLIB/Src/stm32f7xx_hal_sai.c ****     else if(((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT
1469:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1470:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Clear the SAI CNRDY flag */
1471:HALLIB/Src/stm32f7xx_hal_sai.c ****       __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
1472:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Change the SAI error code */
1473:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
1474:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* the transfer is not stopped, we will forward the information to the user and we let the us
1475:HALLIB/Src/stm32f7xx_hal_sai.c ****       HAL_SAI_ErrorCallback(hsai);
1476:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1477:HALLIB/Src/stm32f7xx_hal_sai.c ****     else
1478:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1479:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Nothing to do */
1480:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1481:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1482:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1483:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1484:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1485:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief Tx Transfer completed callback.
1486:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1487:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1488:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1489:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1490:HALLIB/Src/stm32f7xx_hal_sai.c **** __weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
1491:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1492:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
1493:HALLIB/Src/stm32f7xx_hal_sai.c ****   UNUSED(hsai);
1494:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1495:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1496:HALLIB/Src/stm32f7xx_hal_sai.c ****             the HAL_SAI_TxCpltCallback could be implemented in the user file
1497:HALLIB/Src/stm32f7xx_hal_sai.c ****    */
1498:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1499:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1500:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1501:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief Tx Transfer Half completed callback.
1502:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1503:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1504:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1505:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1506:HALLIB/Src/stm32f7xx_hal_sai.c ****  __weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
1507:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1508:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
1509:HALLIB/Src/stm32f7xx_hal_sai.c ****   UNUSED(hsai);
1510:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1511:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1512:HALLIB/Src/stm32f7xx_hal_sai.c ****             the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
1513:HALLIB/Src/stm32f7xx_hal_sai.c ****    */
ARM GAS  /tmp/cc0s4dWM.s 			page 28


1514:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1515:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1516:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1517:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief Rx Transfer completed callback.
1518:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1519:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1520:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1521:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1522:HALLIB/Src/stm32f7xx_hal_sai.c **** __weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
1523:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1524:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
1525:HALLIB/Src/stm32f7xx_hal_sai.c ****   UNUSED(hsai);
1526:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1527:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1528:HALLIB/Src/stm32f7xx_hal_sai.c ****             the HAL_SAI_RxCpltCallback could be implemented in the user file
1529:HALLIB/Src/stm32f7xx_hal_sai.c ****    */
1530:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1531:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1532:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1533:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief Rx Transfer half completed callback.
1534:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1535:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1536:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1537:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1538:HALLIB/Src/stm32f7xx_hal_sai.c **** __weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
1539:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1540:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
1541:HALLIB/Src/stm32f7xx_hal_sai.c ****   UNUSED(hsai);
1542:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1543:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1544:HALLIB/Src/stm32f7xx_hal_sai.c ****             the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
1545:HALLIB/Src/stm32f7xx_hal_sai.c ****    */
1546:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1547:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1548:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1549:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief SAI error callback.
1550:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1551:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1552:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1553:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1554:HALLIB/Src/stm32f7xx_hal_sai.c **** __weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
1555:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1556:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
1557:HALLIB/Src/stm32f7xx_hal_sai.c ****   UNUSED(hsai);
1558:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1559:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1560:HALLIB/Src/stm32f7xx_hal_sai.c ****             the HAL_SAI_ErrorCallback could be implemented in the user file
1561:HALLIB/Src/stm32f7xx_hal_sai.c ****    */
1562:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1563:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1564:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1565:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @}
1566:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1567:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1568:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1569:HALLIB/Src/stm32f7xx_hal_sai.c **** /** @defgroup SAI_Exported_Functions_Group3 Peripheral State functions
1570:HALLIB/Src/stm32f7xx_hal_sai.c ****  *  @brief   Peripheral State functions
ARM GAS  /tmp/cc0s4dWM.s 			page 29


1571:HALLIB/Src/stm32f7xx_hal_sai.c ****  *
1572:HALLIB/Src/stm32f7xx_hal_sai.c **** @verbatim
1573:HALLIB/Src/stm32f7xx_hal_sai.c ****  ===============================================================================
1574:HALLIB/Src/stm32f7xx_hal_sai.c ****                 ##### Peripheral State and Errors functions #####
1575:HALLIB/Src/stm32f7xx_hal_sai.c ****  ===============================================================================
1576:HALLIB/Src/stm32f7xx_hal_sai.c ****   [..]
1577:HALLIB/Src/stm32f7xx_hal_sai.c ****     This subsection permits to get in run-time the status of the peripheral
1578:HALLIB/Src/stm32f7xx_hal_sai.c ****     and the data flow.
1579:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1580:HALLIB/Src/stm32f7xx_hal_sai.c **** @endverbatim
1581:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @{
1582:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1583:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1584:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1585:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Return the SAI handle state.
1586:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1587:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1588:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL state
1589:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1590:HALLIB/Src/stm32f7xx_hal_sai.c **** HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
1591:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1592:HALLIB/Src/stm32f7xx_hal_sai.c ****   return hsai->State;
1593:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1594:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1595:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1596:HALLIB/Src/stm32f7xx_hal_sai.c **** * @brief  Return the SAI error code.
1597:HALLIB/Src/stm32f7xx_hal_sai.c **** * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1598:HALLIB/Src/stm32f7xx_hal_sai.c ****   *              the configuration information for the specified SAI Block.
1599:HALLIB/Src/stm32f7xx_hal_sai.c **** * @retval SAI Error Code
1600:HALLIB/Src/stm32f7xx_hal_sai.c **** */
1601:HALLIB/Src/stm32f7xx_hal_sai.c **** uint32_t HAL_SAI_GetError(SAI_HandleTypeDef *hsai)
1602:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1603:HALLIB/Src/stm32f7xx_hal_sai.c ****   return hsai->ErrorCode;
1604:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1605:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1606:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @}
1607:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1608:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1609:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1610:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @}
1611:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1612:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1613:HALLIB/Src/stm32f7xx_hal_sai.c **** /** @addtogroup SAI_Private_Functions
1614:HALLIB/Src/stm32f7xx_hal_sai.c ****  *  @brief      Private functions
1615:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @{
1616:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1617:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1618:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1619:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Initialize the SAI I2S protocol according to the specified parameters
1620:HALLIB/Src/stm32f7xx_hal_sai.c ****   *         in the SAI_InitTypeDef and create the associated handle.
1621:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1622:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1623:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  protocol one of the supported protocol.
1624:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
1625:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1626:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  nbslot number of slot minimum value is 2 and max is 16. 
1627:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                    the value must be a multiple of 2.
ARM GAS  /tmp/cc0s4dWM.s 			page 30


1628:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
1629:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1630:HALLIB/Src/stm32f7xx_hal_sai.c **** static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize,
1631:HALLIB/Src/stm32f7xx_hal_sai.c **** {
  28              		.loc 1 1631 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 30B4     		push	{r4, r5}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 5, -4
1632:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
  39              		.loc 1 1632 0
  40 0002 0024     		movs	r4, #0
  41 0004 0463     		str	r4, [r0, #48]
1633:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
  42              		.loc 1 1633 0
  43 0006 8463     		str	r4, [r0, #56]
1634:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Compute ClockStrobing according AudioMode */
1635:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
  44              		.loc 1 1635 0
  45 0008 4468     		ldr	r4, [r0, #4]
  46 000a 022C     		cmp	r4, #2
  47 000c 18BF     		it	ne
  48 000e 002C     		cmpne	r4, #0
  49 0010 02D1     		bne	.L2
1636:HALLIB/Src/stm32f7xx_hal_sai.c ****   { /* Transmit */
1637:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  50              		.loc 1 1637 0
  51 0012 0024     		movs	r4, #0
  52 0014 C463     		str	r4, [r0, #60]
  53 0016 01E0     		b	.L3
  54              	.L2:
1638:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1639:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
1640:HALLIB/Src/stm32f7xx_hal_sai.c ****   { /* Receive */
1641:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  55              		.loc 1 1641 0
  56 0018 0124     		movs	r4, #1
  57 001a C463     		str	r4, [r0, #60]
  58              	.L3:
1642:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1643:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
  59              		.loc 1 1643 0
  60 001c 4FF48034 		mov	r4, #65536
  61 0020 8464     		str	r4, [r0, #72]
1644:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
  62              		.loc 1 1644 0
  63 0022 4FF6FF74 		movw	r4, #65535
  64 0026 0466     		str	r4, [r0, #96]
1645:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->SlotInit.FirstBitOffset  = 0;
  65              		.loc 1 1645 0
  66 0028 0024     		movs	r4, #0
ARM GAS  /tmp/cc0s4dWM.s 			page 31


  67 002a 4465     		str	r4, [r0, #84]
1646:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->SlotInit.SlotNumber      = nbslot;
  68              		.loc 1 1646 0
  69 002c C365     		str	r3, [r0, #92]
1647:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1648:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* in IS2 the number of slot must be even */
1649:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((nbslot & 0x1) != 0 )
  70              		.loc 1 1649 0
  71 002e 13F0010F 		tst	r3, #1
  72 0032 46D1     		bne	.L15
1650:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1651:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_ERROR;
1652:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1653:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1654:HALLIB/Src/stm32f7xx_hal_sai.c ****   switch(protocol)
  73              		.loc 1 1654 0
  74 0034 11B1     		cbz	r1, .L5
  75 0036 0229     		cmp	r1, #2
  76 0038 45D8     		bhi	.L16
  77 003a 05E0     		b	.L20
  78              	.L5:
1655:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1656:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_I2S_STANDARD :
1657:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
  79              		.loc 1 1657 0
  80 003c 0024     		movs	r4, #0
  81 003e C464     		str	r4, [r0, #76]
1658:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
  82              		.loc 1 1658 0
  83 0040 4FF48024 		mov	r4, #262144
  84 0044 0465     		str	r4, [r0, #80]
1659:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
  85              		.loc 1 1659 0
  86 0046 04E0     		b	.L7
  87              	.L20:
1660:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_I2S_MSBJUSTIFIED :
1661:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_I2S_LSBJUSTIFIED :
1662:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
  88              		.loc 1 1662 0
  89 0048 4FF40034 		mov	r4, #131072
  90 004c C464     		str	r4, [r0, #76]
1663:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  91              		.loc 1 1663 0
  92 004e 0024     		movs	r4, #0
  93 0050 0465     		str	r4, [r0, #80]
  94              	.L7:
1664:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
1665:HALLIB/Src/stm32f7xx_hal_sai.c ****   default :
1666:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_ERROR;
1667:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1668:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1669:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Frame definition */
1670:HALLIB/Src/stm32f7xx_hal_sai.c ****   switch(datasize)
  95              		.loc 1 1670 0
  96 0052 032A     		cmp	r2, #3
  97 0054 39D8     		bhi	.L17
  98 0056 DFE802F0 		tbb	[pc, r2]
ARM GAS  /tmp/cc0s4dWM.s 			page 32


  99              	.L9:
 100 005a 02       		.byte	(.L8-.L9)/2
 101 005b 0C       		.byte	(.L10-.L9)/2
 102 005c 15       		.byte	(.L11-.L9)/2
 103 005d 1F       		.byte	(.L12-.L9)/2
 104              		.p2align 1
 105              	.L8:
1671:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1672:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PROTOCOL_DATASIZE_16BIT:
1673:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.DataSize = SAI_DATASIZE_16;
 106              		.loc 1 1673 0
 107 005e 8024     		movs	r4, #128
 108 0060 4463     		str	r4, [r0, #52]
1674:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FrameLength = 32*(nbslot/2);
 109              		.loc 1 1674 0
 110 0062 5B08     		lsrs	r3, r3, #1
 111              	.LVL1:
 112 0064 5C01     		lsls	r4, r3, #5
 113 0066 0464     		str	r4, [r0, #64]
1675:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 114              		.loc 1 1675 0
 115 0068 1B01     		lsls	r3, r3, #4
 116 006a 4364     		str	r3, [r0, #68]
1676:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 117              		.loc 1 1676 0
 118 006c 4023     		movs	r3, #64
 119 006e 8365     		str	r3, [r0, #88]
1677:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 120              		.loc 1 1677 0
 121 0070 1BE0     		b	.L13
 122              	.LVL2:
 123              	.L10:
1678:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
1679:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.DataSize = SAI_DATASIZE_16;
 124              		.loc 1 1679 0
 125 0072 8024     		movs	r4, #128
 126 0074 4463     		str	r4, [r0, #52]
1680:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FrameLength = 64*(nbslot/2);
 127              		.loc 1 1680 0
 128 0076 5B08     		lsrs	r3, r3, #1
 129              	.LVL3:
 130 0078 9D01     		lsls	r5, r3, #6
 131 007a 0564     		str	r5, [r0, #64]
1681:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 132              		.loc 1 1681 0
 133 007c 5B01     		lsls	r3, r3, #5
 134 007e 4364     		str	r3, [r0, #68]
1682:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 135              		.loc 1 1682 0
 136 0080 8465     		str	r4, [r0, #88]
1683:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 137              		.loc 1 1683 0
 138 0082 12E0     		b	.L13
 139              	.LVL4:
 140              	.L11:
1684:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PROTOCOL_DATASIZE_24BIT:
1685:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.DataSize = SAI_DATASIZE_24;
ARM GAS  /tmp/cc0s4dWM.s 			page 33


 141              		.loc 1 1685 0
 142 0084 C024     		movs	r4, #192
 143 0086 4463     		str	r4, [r0, #52]
1686:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FrameLength = 64*(nbslot/2);
 144              		.loc 1 1686 0
 145 0088 5B08     		lsrs	r3, r3, #1
 146              	.LVL5:
 147 008a 9C01     		lsls	r4, r3, #6
 148 008c 0464     		str	r4, [r0, #64]
1687:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 149              		.loc 1 1687 0
 150 008e 5B01     		lsls	r3, r3, #5
 151 0090 4364     		str	r3, [r0, #68]
1688:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 152              		.loc 1 1688 0
 153 0092 8023     		movs	r3, #128
 154 0094 8365     		str	r3, [r0, #88]
1689:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 155              		.loc 1 1689 0
 156 0096 08E0     		b	.L13
 157              	.LVL6:
 158              	.L12:
1690:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PROTOCOL_DATASIZE_32BIT:
1691:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.DataSize = SAI_DATASIZE_32;
 159              		.loc 1 1691 0
 160 0098 E024     		movs	r4, #224
 161 009a 4463     		str	r4, [r0, #52]
1692:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FrameLength = 64*(nbslot/2);
 162              		.loc 1 1692 0
 163 009c 5B08     		lsrs	r3, r3, #1
 164              	.LVL7:
 165 009e 9C01     		lsls	r4, r3, #6
 166 00a0 0464     		str	r4, [r0, #64]
1693:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 167              		.loc 1 1693 0
 168 00a2 5B01     		lsls	r3, r3, #5
 169 00a4 4364     		str	r3, [r0, #68]
1694:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 170              		.loc 1 1694 0
 171 00a6 8023     		movs	r3, #128
 172 00a8 8365     		str	r3, [r0, #88]
 173              	.L13:
1695:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
1696:HALLIB/Src/stm32f7xx_hal_sai.c ****   default :
1697:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_ERROR;
1698:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1699:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(protocol == SAI_I2S_LSBJUSTIFIED)
 174              		.loc 1 1699 0
 175 00aa 0229     		cmp	r1, #2
 176 00ac 0FD1     		bne	.L18
1700:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1701:HALLIB/Src/stm32f7xx_hal_sai.c ****     if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 177              		.loc 1 1701 0
 178 00ae 012A     		cmp	r2, #1
 179 00b0 01D1     		bne	.L14
1702:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1703:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->SlotInit.FirstBitOffset = 16;
ARM GAS  /tmp/cc0s4dWM.s 			page 34


 180              		.loc 1 1703 0
 181 00b2 1023     		movs	r3, #16
 182 00b4 4365     		str	r3, [r0, #84]
 183              	.L14:
1704:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1705:HALLIB/Src/stm32f7xx_hal_sai.c ****     if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 184              		.loc 1 1705 0
 185 00b6 022A     		cmp	r2, #2
 186 00b8 0BD1     		bne	.L19
1706:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1707:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->SlotInit.FirstBitOffset = 8;
 187              		.loc 1 1707 0
 188 00ba 0823     		movs	r3, #8
 189 00bc 4365     		str	r3, [r0, #84]
1708:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1709:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1710:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_OK;
 190              		.loc 1 1710 0
 191 00be 0020     		movs	r0, #0
 192              	.LVL8:
 193 00c0 08E0     		b	.L4
 194              	.LVL9:
 195              	.L15:
1651:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 196              		.loc 1 1651 0
 197 00c2 0120     		movs	r0, #1
 198              	.LVL10:
 199 00c4 06E0     		b	.L4
 200              	.LVL11:
 201              	.L16:
1666:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 202              		.loc 1 1666 0
 203 00c6 0120     		movs	r0, #1
 204              	.LVL12:
 205 00c8 04E0     		b	.L4
 206              	.LVL13:
 207              	.L17:
1697:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 208              		.loc 1 1697 0
 209 00ca 0120     		movs	r0, #1
 210              	.LVL14:
 211 00cc 02E0     		b	.L4
 212              	.LVL15:
 213              	.L18:
 214              		.loc 1 1710 0
 215 00ce 0020     		movs	r0, #0
 216              	.LVL16:
 217 00d0 00E0     		b	.L4
 218              	.LVL17:
 219              	.L19:
 220 00d2 0020     		movs	r0, #0
 221              	.LVL18:
 222              	.L4:
1711:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 223              		.loc 1 1711 0
 224 00d4 30BC     		pop	{r4, r5}
 225              	.LCFI1:
ARM GAS  /tmp/cc0s4dWM.s 			page 35


 226              		.cfi_restore 5
 227              		.cfi_restore 4
 228              		.cfi_def_cfa_offset 0
 229 00d6 7047     		bx	lr
 230              		.cfi_endproc
 231              	.LFE163:
 233              		.section	.text.SAI_InitPCM,"ax",%progbits
 234              		.align	2
 235              		.thumb
 236              		.thumb_func
 238              	SAI_InitPCM:
 239              	.LFB164:
1712:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1713:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1714:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Initialize the SAI PCM protocol according to the specified parameters
1715:HALLIB/Src/stm32f7xx_hal_sai.c ****   *         in the SAI_InitTypeDef and create the associated handle.
1716:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1717:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1718:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  protocol one of the supported protocol
1719:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
1720:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  nbslot number of slot minimum value is 1 and the max is 16.
1721:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval HAL status
1722:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1723:HALLIB/Src/stm32f7xx_hal_sai.c **** static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize,
1724:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 240              		.loc 1 1724 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 245              	.LVL19:
 246 0000 30B4     		push	{r4, r5}
 247              	.LCFI2:
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 4, -8
 250              		.cfi_offset 5, -4
1725:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 251              		.loc 1 1725 0
 252 0002 0024     		movs	r4, #0
 253 0004 0463     		str	r4, [r0, #48]
1726:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 254              		.loc 1 1726 0
 255 0006 8463     		str	r4, [r0, #56]
1727:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Compute ClockStrobing according AudioMode */
1728:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 256              		.loc 1 1728 0
 257 0008 4468     		ldr	r4, [r0, #4]
 258 000a 022C     		cmp	r4, #2
 259 000c 18BF     		it	ne
 260 000e 002C     		cmpne	r4, #0
 261 0010 02D1     		bne	.L23
1729:HALLIB/Src/stm32f7xx_hal_sai.c ****   { /* Transmit */
1730:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 262              		.loc 1 1730 0
 263 0012 0124     		movs	r4, #1
 264 0014 C463     		str	r4, [r0, #60]
 265 0016 01E0     		b	.L24
ARM GAS  /tmp/cc0s4dWM.s 			page 36


 266              	.L23:
1731:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1732:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
1733:HALLIB/Src/stm32f7xx_hal_sai.c ****   { /* Receive */
1734:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 267              		.loc 1 1734 0
 268 0018 0024     		movs	r4, #0
 269 001a C463     		str	r4, [r0, #60]
 270              	.L24:
1735:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1736:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 271              		.loc 1 1736 0
 272 001c 0024     		movs	r4, #0
 273 001e 8464     		str	r4, [r0, #72]
1737:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 274              		.loc 1 1737 0
 275 0020 4FF40035 		mov	r5, #131072
 276 0024 C564     		str	r5, [r0, #76]
1738:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 277              		.loc 1 1738 0
 278 0026 4FF48025 		mov	r5, #262144
 279 002a 0565     		str	r5, [r0, #80]
1739:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->SlotInit.FirstBitOffset  = 0;
 280              		.loc 1 1739 0
 281 002c 4465     		str	r4, [r0, #84]
1740:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->SlotInit.SlotNumber      = nbslot;
 282              		.loc 1 1740 0
 283 002e C365     		str	r3, [r0, #92]
1741:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 284              		.loc 1 1741 0
 285 0030 4FF6FF74 		movw	r4, #65535
 286 0034 0466     		str	r4, [r0, #96]
1742:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1743:HALLIB/Src/stm32f7xx_hal_sai.c ****   switch(protocol)
 287              		.loc 1 1743 0
 288 0036 0329     		cmp	r1, #3
 289 0038 04D0     		beq	.L26
 290 003a 0429     		cmp	r1, #4
 291 003c 29D1     		bne	.L36
1744:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1745:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PCM_SHORT :
1746:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.ActiveFrameLength = 1;
 292              		.loc 1 1746 0
 293 003e 0121     		movs	r1, #1
 294              	.LVL20:
 295 0040 4164     		str	r1, [r0, #68]
1747:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 296              		.loc 1 1747 0
 297 0042 01E0     		b	.L28
 298              	.LVL21:
 299              	.L26:
1748:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PCM_LONG :
1749:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.ActiveFrameLength = 13;
 300              		.loc 1 1749 0
 301 0044 0D21     		movs	r1, #13
 302              	.LVL22:
 303 0046 4164     		str	r1, [r0, #68]
ARM GAS  /tmp/cc0s4dWM.s 			page 37


 304              	.L28:
1750:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
1751:HALLIB/Src/stm32f7xx_hal_sai.c ****   default :
1752:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_ERROR;
1753:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1754:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1755:HALLIB/Src/stm32f7xx_hal_sai.c ****   switch(datasize)
 305              		.loc 1 1755 0
 306 0048 032A     		cmp	r2, #3
 307 004a 24D8     		bhi	.L35
 308 004c DFE802F0 		tbb	[pc, r2]
 309              	.L30:
 310 0050 02       		.byte	(.L29-.L30)/2
 311 0051 0A       		.byte	(.L31-.L30)/2
 312 0052 11       		.byte	(.L32-.L30)/2
 313 0053 19       		.byte	(.L33-.L30)/2
 314              		.p2align 1
 315              	.L29:
1756:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1757:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PROTOCOL_DATASIZE_16BIT:
1758:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.DataSize = SAI_DATASIZE_16;
 316              		.loc 1 1758 0
 317 0054 8022     		movs	r2, #128
 318              	.LVL23:
 319 0056 4263     		str	r2, [r0, #52]
1759:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FrameLength = 16 * nbslot;
 320              		.loc 1 1759 0
 321 0058 1B01     		lsls	r3, r3, #4
 322              	.LVL24:
 323 005a 0364     		str	r3, [r0, #64]
1760:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 324              		.loc 1 1760 0
 325 005c 4023     		movs	r3, #64
 326 005e 8365     		str	r3, [r0, #88]
1761:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
1762:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
1763:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.DataSize = SAI_DATASIZE_16;
1764:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FrameLength = 32 * nbslot;
1765:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
1766:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
1767:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PROTOCOL_DATASIZE_24BIT :
1768:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.DataSize = SAI_DATASIZE_24;
1769:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FrameLength = 32 * nbslot;
1770:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
1771:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
1772:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PROTOCOL_DATASIZE_32BIT:
1773:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.DataSize = SAI_DATASIZE_32;
1774:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FrameLength = 32 * nbslot;
1775:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
1776:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
1777:HALLIB/Src/stm32f7xx_hal_sai.c ****   default :
1778:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_ERROR;
1779:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1780:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1781:HALLIB/Src/stm32f7xx_hal_sai.c ****   return HAL_OK;
 327              		.loc 1 1781 0
 328 0060 0020     		movs	r0, #0
ARM GAS  /tmp/cc0s4dWM.s 			page 38


 329              	.LVL25:
1761:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 330              		.loc 1 1761 0
 331 0062 19E0     		b	.L25
 332              	.LVL26:
 333              	.L31:
1763:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FrameLength = 32 * nbslot;
 334              		.loc 1 1763 0
 335 0064 8022     		movs	r2, #128
 336              	.LVL27:
 337 0066 4263     		str	r2, [r0, #52]
1764:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 338              		.loc 1 1764 0
 339 0068 5B01     		lsls	r3, r3, #5
 340              	.LVL28:
 341 006a 0364     		str	r3, [r0, #64]
1765:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 342              		.loc 1 1765 0
 343 006c 8265     		str	r2, [r0, #88]
 344              		.loc 1 1781 0
 345 006e 0020     		movs	r0, #0
 346              	.LVL29:
1766:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PROTOCOL_DATASIZE_24BIT :
 347              		.loc 1 1766 0
 348 0070 12E0     		b	.L25
 349              	.LVL30:
 350              	.L32:
1768:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FrameLength = 32 * nbslot;
 351              		.loc 1 1768 0
 352 0072 C022     		movs	r2, #192
 353              	.LVL31:
 354 0074 4263     		str	r2, [r0, #52]
1769:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 355              		.loc 1 1769 0
 356 0076 5B01     		lsls	r3, r3, #5
 357              	.LVL32:
 358 0078 0364     		str	r3, [r0, #64]
1770:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 359              		.loc 1 1770 0
 360 007a 8023     		movs	r3, #128
 361 007c 8365     		str	r3, [r0, #88]
 362              		.loc 1 1781 0
 363 007e 0020     		movs	r0, #0
 364              	.LVL33:
1771:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PROTOCOL_DATASIZE_32BIT:
 365              		.loc 1 1771 0
 366 0080 0AE0     		b	.L25
 367              	.LVL34:
 368              	.L33:
1773:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->FrameInit.FrameLength = 32 * nbslot;
 369              		.loc 1 1773 0
 370 0082 E022     		movs	r2, #224
 371              	.LVL35:
 372 0084 4263     		str	r2, [r0, #52]
1774:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 373              		.loc 1 1774 0
 374 0086 5B01     		lsls	r3, r3, #5
ARM GAS  /tmp/cc0s4dWM.s 			page 39


 375              	.LVL36:
 376 0088 0364     		str	r3, [r0, #64]
1775:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 377              		.loc 1 1775 0
 378 008a 8023     		movs	r3, #128
 379 008c 8365     		str	r3, [r0, #88]
 380              		.loc 1 1781 0
 381 008e 0020     		movs	r0, #0
 382              	.LVL37:
1776:HALLIB/Src/stm32f7xx_hal_sai.c ****   default :
 383              		.loc 1 1776 0
 384 0090 02E0     		b	.L25
 385              	.LVL38:
 386              	.L36:
1752:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 387              		.loc 1 1752 0
 388 0092 0120     		movs	r0, #1
 389              	.LVL39:
 390 0094 00E0     		b	.L25
 391              	.LVL40:
 392              	.L35:
1778:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 393              		.loc 1 1778 0
 394 0096 0120     		movs	r0, #1
 395              	.LVL41:
 396              	.L25:
1782:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 397              		.loc 1 1782 0
 398 0098 30BC     		pop	{r4, r5}
 399              	.LCFI3:
 400              		.cfi_restore 5
 401              		.cfi_restore 4
 402              		.cfi_def_cfa_offset 0
 403 009a 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE164:
 407              		.section	.text.SAI_FillFifo,"ax",%progbits
 408              		.align	2
 409              		.thumb
 410              		.thumb_func
 412              	SAI_FillFifo:
 413              	.LFB165:
1783:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1784:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1785:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Fill the fifo.
1786:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1787:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1788:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1789:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1790:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
1791:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 414              		.loc 1 1791 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              		@ link register save eliminated.
 419              	.LVL42:
ARM GAS  /tmp/cc0s4dWM.s 			page 40


1792:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* fill the fifo with data before to enabled the SAI */
1793:HALLIB/Src/stm32f7xx_hal_sai.c ****   while(((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 420              		.loc 1 1793 0
 421 0000 1EE0     		b	.L39
 422              	.L44:
1794:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1795:HALLIB/Src/stm32f7xx_hal_sai.c ****     if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 423              		.loc 1 1795 0
 424 0002 436B     		ldr	r3, [r0, #52]
 425 0004 402B     		cmp	r3, #64
 426 0006 07D1     		bne	.L40
 427              		.loc 1 1795 0 is_stmt 0 discriminator 1
 428 0008 816A     		ldr	r1, [r0, #40]
 429 000a 29B9     		cbnz	r1, .L40
1796:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1797:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->Instance->DR = (*hsai->pBuffPtr++);
 430              		.loc 1 1797 0 is_stmt 1
 431 000c 436E     		ldr	r3, [r0, #100]
 432 000e 591C     		adds	r1, r3, #1
 433 0010 4166     		str	r1, [r0, #100]
 434 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 435 0014 D361     		str	r3, [r2, #28]
 436 0016 0EE0     		b	.L41
 437              	.L40:
1798:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1799:HALLIB/Src/stm32f7xx_hal_sai.c ****     else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 438              		.loc 1 1799 0
 439 0018 802B     		cmp	r3, #128
 440 001a 06D8     		bhi	.L42
1800:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1801:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 441              		.loc 1 1801 0
 442 001c 436E     		ldr	r3, [r0, #100]
 443 001e 1B68     		ldr	r3, [r3]
 444 0020 D361     		str	r3, [r2, #28]
1802:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->pBuffPtr+= 2;
 445              		.loc 1 1802 0
 446 0022 436E     		ldr	r3, [r0, #100]
 447 0024 0233     		adds	r3, r3, #2
 448 0026 4366     		str	r3, [r0, #100]
 449 0028 05E0     		b	.L41
 450              	.L42:
1803:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1804:HALLIB/Src/stm32f7xx_hal_sai.c ****     else
1805:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
1806:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 451              		.loc 1 1806 0
 452 002a 436E     		ldr	r3, [r0, #100]
 453 002c 1B68     		ldr	r3, [r3]
 454 002e D361     		str	r3, [r2, #28]
1807:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->pBuffPtr+= 4;
 455              		.loc 1 1807 0
 456 0030 436E     		ldr	r3, [r0, #100]
 457 0032 0433     		adds	r3, r3, #4
 458 0034 4366     		str	r3, [r0, #100]
 459              	.L41:
1808:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
ARM GAS  /tmp/cc0s4dWM.s 			page 41


1809:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount--;
 460              		.loc 1 1809 0
 461 0036 B0F86A30 		ldrh	r3, [r0, #106]
 462 003a 013B     		subs	r3, r3, #1
 463 003c A0F86A30 		strh	r3, [r0, #106]	@ movhi
 464              	.L39:
1793:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 465              		.loc 1 1793 0
 466 0040 0268     		ldr	r2, [r0]
 467 0042 5369     		ldr	r3, [r2, #20]
 468 0044 03F4E023 		and	r3, r3, #458752
 469 0048 B3F5A02F 		cmp	r3, #327680
 470 004c 03D0     		beq	.L38
1793:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 471              		.loc 1 1793 0 is_stmt 0 discriminator 1
 472 004e B0F86A30 		ldrh	r3, [r0, #106]
 473 0052 002B     		cmp	r3, #0
 474 0054 D5D1     		bne	.L44
 475              	.L38:
 476 0056 7047     		bx	lr
 477              		.cfi_endproc
 478              	.LFE165:
 480              		.section	.text.SAI_InterruptFlag,"ax",%progbits
 481              		.align	2
 482              		.thumb
 483              		.thumb_func
 485              	SAI_InterruptFlag:
 486              	.LFB166:
1810:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1811:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1812:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1813:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1814:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Return the interrupt flag to set according the SAI setup.
1815:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1816:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1817:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  mode SAI_MODE_DMA or SAI_MODE_IT
1818:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval the list of the IT flag to enable
1819:HALLIB/Src/stm32f7xx_hal_sai.c ****  */
1820:HALLIB/Src/stm32f7xx_hal_sai.c **** static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
1821:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 487              		.loc 1 1821 0 is_stmt 1
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492              	.LVL43:
1822:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t tmpIT = SAI_IT_OVRUDR;
1823:HALLIB/Src/stm32f7xx_hal_sai.c ****   
1824:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(mode == SAI_MODE_IT)
 493              		.loc 1 1824 0
 494 0000 0129     		cmp	r1, #1
 495 0002 01D0     		beq	.L50
1822:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t tmpIT = SAI_IT_OVRUDR;
 496              		.loc 1 1822 0
 497 0004 0123     		movs	r3, #1
 498 0006 00E0     		b	.L46
 499              	.L50:
ARM GAS  /tmp/cc0s4dWM.s 			page 42


1825:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1826:HALLIB/Src/stm32f7xx_hal_sai.c ****     tmpIT|= SAI_IT_FREQ;
 500              		.loc 1 1826 0
 501 0008 0923     		movs	r3, #9
 502              	.L46:
 503              	.LVL44:
1827:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1828:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1829:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 504              		.loc 1 1829 0
 505 000a 026B     		ldr	r2, [r0, #48]
 506 000c 082A     		cmp	r2, #8
 507 000e 06D1     		bne	.L47
1830:HALLIB/Src/stm32f7xx_hal_sai.c ****     ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 508              		.loc 1 1830 0 discriminator 1
 509 0010 4268     		ldr	r2, [r0, #4]
1829:HALLIB/Src/stm32f7xx_hal_sai.c ****     ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 510              		.loc 1 1829 0 discriminator 1
 511 0012 012A     		cmp	r2, #1
 512 0014 18BF     		it	ne
 513 0016 032A     		cmpne	r2, #3
 514 0018 01D1     		bne	.L47
1831:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1832:HALLIB/Src/stm32f7xx_hal_sai.c ****     tmpIT|= SAI_IT_CNRDY;
 515              		.loc 1 1832 0
 516 001a 43F01003 		orr	r3, r3, #16
 517              	.LVL45:
 518              	.L47:
1833:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1834:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1835:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 519              		.loc 1 1835 0
 520 001e 4268     		ldr	r2, [r0, #4]
 521 0020 023A     		subs	r2, r2, #2
 522 0022 012A     		cmp	r2, #1
 523 0024 02D8     		bhi	.L48
1836:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1837:HALLIB/Src/stm32f7xx_hal_sai.c ****     tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 524              		.loc 1 1837 0
 525 0026 43F06000 		orr	r0, r3, #96
 526              	.LVL46:
 527 002a 7047     		bx	lr
 528              	.LVL47:
 529              	.L48:
1838:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1839:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
1840:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1841:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* hsai has been configured in master mode */
1842:HALLIB/Src/stm32f7xx_hal_sai.c ****     tmpIT|= SAI_IT_WCKCFG;
 530              		.loc 1 1842 0
 531 002c 43F00400 		orr	r0, r3, #4
 532              	.LVL48:
1843:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1844:HALLIB/Src/stm32f7xx_hal_sai.c ****   return tmpIT;
1845:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 533              		.loc 1 1845 0
 534 0030 7047     		bx	lr
ARM GAS  /tmp/cc0s4dWM.s 			page 43


 535              		.cfi_endproc
 536              	.LFE166:
 538 0032 00BF     		.section	.text.SAI_Disable,"ax",%progbits
 539              		.align	2
 540              		.thumb
 541              		.thumb_func
 543              	SAI_Disable:
 544              	.LFB167:
1846:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1847:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1848:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Disable the SAI and wait for the disabling.
1849:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
1850:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1851:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1852:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1853:HALLIB/Src/stm32f7xx_hal_sai.c **** static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
1854:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 545              		.loc 1 1854 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549              		@ link register save eliminated.
 550              	.LVL49:
1855:HALLIB/Src/stm32f7xx_hal_sai.c ****   register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 551              		.loc 1 1855 0
 552 0000 0E4B     		ldr	r3, .L55
 553 0002 1B68     		ldr	r3, [r3]
 554 0004 0E4A     		ldr	r2, .L55+4
 555 0006 A2FB0323 		umull	r2, r3, r2, r3
 556 000a 1B0B     		lsrs	r3, r3, #12
 557 000c 9B00     		lsls	r3, r3, #2
 558              	.LVL50:
1856:HALLIB/Src/stm32f7xx_hal_sai.c ****   HAL_StatusTypeDef status = HAL_OK;
1857:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1858:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Disable the SAI instance */
1859:HALLIB/Src/stm32f7xx_hal_sai.c ****   __HAL_SAI_DISABLE(hsai);
 559              		.loc 1 1859 0
 560 000e 0168     		ldr	r1, [r0]
 561 0010 0A68     		ldr	r2, [r1]
 562 0012 22F48032 		bic	r2, r2, #65536
 563 0016 0A60     		str	r2, [r1]
 564              	.L54:
1860:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1861:HALLIB/Src/stm32f7xx_hal_sai.c ****   do 
1862:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1863:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Check for the Timeout */
1864:HALLIB/Src/stm32f7xx_hal_sai.c ****     if (count-- == 0)
 565              		.loc 1 1864 0
 566 0018 5A1E     		subs	r2, r3, #1
 567              	.LVL51:
 568 001a 3BB9     		cbnz	r3, .L52
1865:HALLIB/Src/stm32f7xx_hal_sai.c ****     {         
1866:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Update error code */
1867:HALLIB/Src/stm32f7xx_hal_sai.c ****       hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 569              		.loc 1 1867 0
 570 001c D0F88030 		ldr	r3, [r0, #128]
 571 0020 43F04003 		orr	r3, r3, #64
ARM GAS  /tmp/cc0s4dWM.s 			page 44


 572 0024 C0F88030 		str	r3, [r0, #128]
 573              	.LVL52:
1868:HALLIB/Src/stm32f7xx_hal_sai.c ****       status = HAL_TIMEOUT;
 574              		.loc 1 1868 0
 575 0028 0320     		movs	r0, #3
 576              	.LVL53:
1869:HALLIB/Src/stm32f7xx_hal_sai.c ****       break;
 577              		.loc 1 1869 0
 578 002a 7047     		bx	lr
 579              	.LVL54:
 580              	.L52:
1870:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
1871:HALLIB/Src/stm32f7xx_hal_sai.c ****   } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 581              		.loc 1 1871 0
 582 002c 0368     		ldr	r3, [r0]
 583 002e 1968     		ldr	r1, [r3]
1864:HALLIB/Src/stm32f7xx_hal_sai.c ****     {         
 584              		.loc 1 1864 0
 585 0030 1346     		mov	r3, r2
 586              		.loc 1 1871 0
 587 0032 11F4803F 		tst	r1, #65536
 588 0036 EFD1     		bne	.L54
1856:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 589              		.loc 1 1856 0
 590 0038 0020     		movs	r0, #0
 591              	.LVL55:
1872:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1873:HALLIB/Src/stm32f7xx_hal_sai.c ****   return status;
1874:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 592              		.loc 1 1874 0
 593 003a 7047     		bx	lr
 594              	.L56:
 595              		.align	2
 596              	.L55:
 597 003c 00000000 		.word	SystemCoreClock
 598 0040 1BECCB95 		.word	-1781797861
 599              		.cfi_endproc
 600              	.LFE167:
 602              		.section	.text.HAL_SAI_MspInit,"ax",%progbits
 603              		.align	2
 604              		.weak	HAL_SAI_MspInit
 605              		.thumb
 606              		.thumb_func
 608              	HAL_SAI_MspInit:
 609              	.LFB139:
 564:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
 610              		.loc 1 564 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 615              	.LVL56:
 616 0000 7047     		bx	lr
 617              		.cfi_endproc
 618              	.LFE139:
 620 0002 00BF     		.section	.text.HAL_SAI_Init,"ax",%progbits
 621              		.align	2
ARM GAS  /tmp/cc0s4dWM.s 			page 45


 622              		.global	HAL_SAI_Init
 623              		.thumb
 624              		.thumb_func
 626              	HAL_SAI_Init:
 627              	.LFB137:
 321:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t tmpregisterGCR = 0;
 628              		.loc 1 321 0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 0
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 632              	.LVL57:
 327:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 633              		.loc 1 327 0
 634 0000 0028     		cmp	r0, #0
 635 0002 00F0DB80 		beq	.L75
 321:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t tmpregisterGCR = 0;
 636              		.loc 1 321 0
 637 0006 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 638              	.LCFI4:
 639              		.cfi_def_cfa_offset 24
 640              		.cfi_offset 3, -24
 641              		.cfi_offset 4, -20
 642              		.cfi_offset 5, -16
 643              		.cfi_offset 6, -12
 644              		.cfi_offset 7, -8
 645              		.cfi_offset 14, -4
 646 0008 0446     		mov	r4, r0
 364:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 647              		.loc 1 364 0
 648 000a 90F87D30 		ldrb	r3, [r0, #125]	@ zero_extendqisi2
 649 000e 13F0FF0F 		tst	r3, #255
 650 0012 04D1     		bne	.L60
 367:HALLIB/Src/stm32f7xx_hal_sai.c ****     
 651              		.loc 1 367 0
 652 0014 0023     		movs	r3, #0
 653 0016 80F87C30 		strb	r3, [r0, #124]
 370:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 654              		.loc 1 370 0
 655 001a FFF7FEFF 		bl	HAL_SAI_MspInit
 656              	.LVL58:
 657              	.L60:
 373:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 658              		.loc 1 373 0
 659 001e 0223     		movs	r3, #2
 660 0020 84F87D30 		strb	r3, [r4, #125]
 376:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 661              		.loc 1 376 0
 662 0024 2046     		mov	r0, r4
 663 0026 FFF7FEFF 		bl	SAI_Disable
 664              	.LVL59:
 380:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 665              		.loc 1 380 0
 666 002a E368     		ldr	r3, [r4, #12]
 667 002c 012B     		cmp	r3, #1
 668 002e 05D0     		beq	.L76
 669 0030 022B     		cmp	r3, #2
 670 0032 01D0     		beq	.L63
ARM GAS  /tmp/cc0s4dWM.s 			page 46


 322:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t ckstr_bits = 0;
 671              		.loc 1 322 0
 672 0034 0022     		movs	r2, #0
 673 0036 02E0     		b	.L62
 674              	.L63:
 675              	.LVL60:
 389:HALLIB/Src/stm32f7xx_hal_sai.c ****       break;
 676              		.loc 1 389 0
 677 0038 2022     		movs	r2, #32
 390:HALLIB/Src/stm32f7xx_hal_sai.c ****   default:
 678              		.loc 1 390 0
 679 003a 00E0     		b	.L62
 680              	.LVL61:
 681              	.L76:
 386:HALLIB/Src/stm32f7xx_hal_sai.c ****       break;
 682              		.loc 1 386 0
 683 003c 1022     		movs	r2, #16
 684              	.LVL62:
 685              	.L62:
 395:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 686              		.loc 1 395 0
 687 003e A368     		ldr	r3, [r4, #8]
 688 0040 022B     		cmp	r3, #2
 689 0042 05D0     		beq	.L65
 690 0044 032B     		cmp	r3, #3
 691 0046 06D0     		beq	.L66
 692 0048 012B     		cmp	r3, #1
 693 004a 09D0     		beq	.L77
 324:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 694              		.loc 1 324 0
 695 004c 0025     		movs	r5, #0
 696 004e 09E0     		b	.L67
 697              	.L65:
 698              	.LVL63:
 409:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 699              		.loc 1 409 0
 700 0050 4FF40065 		mov	r5, #2048
 411:HALLIB/Src/stm32f7xx_hal_sai.c ****     case SAI_SYNCHRONOUS_EXT_SAI2 :
 701              		.loc 1 411 0
 702 0054 06E0     		b	.L67
 703              	.LVL64:
 704              	.L66:
 415:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 705              		.loc 1 415 0
 706 0056 42F00102 		orr	r2, r2, #1
 707              	.LVL65:
 414:HALLIB/Src/stm32f7xx_hal_sai.c ****         tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 708              		.loc 1 414 0
 709 005a 4FF40065 		mov	r5, #2048
 417:HALLIB/Src/stm32f7xx_hal_sai.c ****   default:
 710              		.loc 1 417 0
 711 005e 01E0     		b	.L67
 712              	.LVL66:
 713              	.L77:
 404:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 714              		.loc 1 404 0
 715 0060 4FF48065 		mov	r5, #1024
ARM GAS  /tmp/cc0s4dWM.s 			page 47


 716              	.LVL67:
 717              	.L67:
 422:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 718              		.loc 1 422 0
 719 0064 2368     		ldr	r3, [r4]
 720 0066 5649     		ldr	r1, .L83
 721 0068 5648     		ldr	r0, .L83+4
 722 006a 8B42     		cmp	r3, r1
 723 006c 18BF     		it	ne
 724 006e 8342     		cmpne	r3, r0
 725 0070 02D1     		bne	.L68
 424:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 726              		.loc 1 424 0
 727 0072 554B     		ldr	r3, .L83+8
 728 0074 1A60     		str	r2, [r3]
 729 0076 01E0     		b	.L69
 730              	.L68:
 428:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 731              		.loc 1 428 0
 732 0078 544B     		ldr	r3, .L83+12
 733 007a 1A60     		str	r2, [r3]
 734              	.L69:
 431:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 735              		.loc 1 431 0
 736 007c E369     		ldr	r3, [r4, #28]
 737 007e 5BB3     		cbz	r3, .L70
 738              	.LVL68:
 739              	.LBB2:
 436:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 740              		.loc 1 436 0
 741 0080 2368     		ldr	r3, [r4]
 742 0082 4F4A     		ldr	r2, .L83
 743              	.LVL69:
 744 0084 4F49     		ldr	r1, .L83+4
 745 0086 9342     		cmp	r3, r2
 746 0088 18BF     		it	ne
 747 008a 8B42     		cmpne	r3, r1
 748 008c 04D1     		bne	.L78
 438:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 749              		.loc 1 438 0
 750 008e 4FF40020 		mov	r0, #524288
 751 0092 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 752              	.LVL70:
 753 0096 00E0     		b	.L71
 754              	.LVL71:
 755              	.L78:
 433:HALLIB/Src/stm32f7xx_hal_sai.c ****     uint32_t tmpval;
 756              		.loc 1 433 0
 757 0098 0020     		movs	r0, #0
 758              	.LVL72:
 759              	.L71:
 440:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 760              		.loc 1 440 0
 761 009a 2368     		ldr	r3, [r4]
 762 009c 4C4A     		ldr	r2, .L83+16
 763 009e 4D49     		ldr	r1, .L83+20
 764 00a0 9342     		cmp	r3, r2
ARM GAS  /tmp/cc0s4dWM.s 			page 48


 765 00a2 18BF     		it	ne
 766 00a4 8B42     		cmpne	r3, r1
 767 00a6 03D1     		bne	.L72
 442:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 768              		.loc 1 442 0
 769 00a8 4FF48010 		mov	r0, #1048576
 770              	.LVL73:
 771 00ac FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 772              	.LVL74:
 773              	.L72:
 450:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Init.Mckdiv = tmpval / 10;
 774              		.loc 1 450 0
 775 00b0 00EB8000 		add	r0, r0, r0, lsl #2
 776              	.LVL75:
 777 00b4 4300     		lsls	r3, r0, #1
 778 00b6 E169     		ldr	r1, [r4, #28]
 779 00b8 4902     		lsls	r1, r1, #9
 780 00ba B3FBF1F1 		udiv	r1, r3, r1
 781              	.LVL76:
 451:HALLIB/Src/stm32f7xx_hal_sai.c ****     
 782              		.loc 1 451 0
 783 00be 464B     		ldr	r3, .L83+24
 784 00c0 A3FB0123 		umull	r2, r3, r3, r1
 785 00c4 DB08     		lsrs	r3, r3, #3
 786 00c6 2362     		str	r3, [r4, #32]
 454:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 787              		.loc 1 454 0
 788 00c8 03EB8300 		add	r0, r3, r3, lsl #2
 789 00cc 4200     		lsls	r2, r0, #1
 790 00ce 8A1A     		subs	r2, r1, r2
 791 00d0 082A     		cmp	r2, #8
 792 00d2 01D9     		bls	.L70
 456:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 793              		.loc 1 456 0
 794 00d4 0133     		adds	r3, r3, #1
 795 00d6 2362     		str	r3, [r4, #32]
 796              	.LVL77:
 797              	.L70:
 798              	.LBE2:
 461:HALLIB/Src/stm32f7xx_hal_sai.c ****   { /* Transmit */
 799              		.loc 1 461 0
 800 00d8 6368     		ldr	r3, [r4, #4]
 801 00da 022B     		cmp	r3, #2
 802 00dc 18BF     		it	ne
 803 00de 002B     		cmpne	r3, #0
 804 00e0 04D1     		bne	.L73
 463:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 805              		.loc 1 463 0
 806 00e2 E36B     		ldr	r3, [r4, #60]
 807 00e4 012B     		cmp	r3, #1
 808 00e6 07D1     		bne	.L79
 809 00e8 0027     		movs	r7, #0
 810 00ea 09E0     		b	.L74
 811              	.L73:
 467:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 812              		.loc 1 467 0
 813 00ec E36B     		ldr	r3, [r4, #60]
ARM GAS  /tmp/cc0s4dWM.s 			page 49


 814 00ee 012B     		cmp	r3, #1
 815 00f0 05D1     		bne	.L80
 816 00f2 4FF40077 		mov	r7, #512
 817 00f6 03E0     		b	.L74
 818              	.L79:
 463:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 819              		.loc 1 463 0
 820 00f8 4FF40077 		mov	r7, #512
 821 00fc 00E0     		b	.L74
 822              	.L80:
 467:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 823              		.loc 1 467 0
 824 00fe 0027     		movs	r7, #0
 825              	.L74:
 826              	.LVL78:
 472:HALLIB/Src/stm32f7xx_hal_sai.c ****                          SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
 827              		.loc 1 472 0
 828 0100 2168     		ldr	r1, [r4]
 829 0102 0A68     		ldr	r2, [r1]
 830 0104 354B     		ldr	r3, .L83+28
 831 0106 1340     		ands	r3, r3, r2
 832 0108 0B60     		str	r3, [r1]
 477:HALLIB/Src/stm32f7xx_hal_sai.c ****                         hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 833              		.loc 1 477 0
 834 010a 2068     		ldr	r0, [r4]
 835 010c 0668     		ldr	r6, [r0]
 836 010e 6168     		ldr	r1, [r4, #4]
 837 0110 236B     		ldr	r3, [r4, #48]
 838 0112 1943     		orrs	r1, r1, r3
 478:HALLIB/Src/stm32f7xx_hal_sai.c ****                         ckstr_bits | syncen_bits |                               \
 839              		.loc 1 478 0
 840 0114 636B     		ldr	r3, [r4, #52]
 477:HALLIB/Src/stm32f7xx_hal_sai.c ****                         hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 841              		.loc 1 477 0
 842 0116 0B43     		orrs	r3, r3, r1
 478:HALLIB/Src/stm32f7xx_hal_sai.c ****                         ckstr_bits | syncen_bits |                               \
 843              		.loc 1 478 0
 844 0118 A26B     		ldr	r2, [r4, #56]
 845 011a 1A43     		orrs	r2, r2, r3
 846 011c 3A43     		orrs	r2, r2, r7
 479:HALLIB/Src/stm32f7xx_hal_sai.c ****                         hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 847              		.loc 1 479 0
 848 011e 2A43     		orrs	r2, r2, r5
 480:HALLIB/Src/stm32f7xx_hal_sai.c ****                         hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 849              		.loc 1 480 0
 850 0120 616A     		ldr	r1, [r4, #36]
 479:HALLIB/Src/stm32f7xx_hal_sai.c ****                         hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 851              		.loc 1 479 0
 852 0122 0A43     		orrs	r2, r2, r1
 480:HALLIB/Src/stm32f7xx_hal_sai.c ****                         hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 853              		.loc 1 480 0
 854 0124 2169     		ldr	r1, [r4, #16]
 855 0126 0A43     		orrs	r2, r2, r1
 481:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 856              		.loc 1 481 0
 857 0128 6369     		ldr	r3, [r4, #20]
 480:HALLIB/Src/stm32f7xx_hal_sai.c ****                         hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
ARM GAS  /tmp/cc0s4dWM.s 			page 50


 858              		.loc 1 480 0
 859 012a 1A43     		orrs	r2, r2, r3
 481:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 860              		.loc 1 481 0
 861 012c 236A     		ldr	r3, [r4, #32]
 862 012e 42EA0353 		orr	r3, r2, r3, lsl #20
 477:HALLIB/Src/stm32f7xx_hal_sai.c ****                         hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 863              		.loc 1 477 0
 864 0132 3343     		orrs	r3, r3, r6
 865 0134 0360     		str	r3, [r0]
 484:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriStat
 866              		.loc 1 484 0
 867 0136 2268     		ldr	r2, [r4]
 868 0138 5168     		ldr	r1, [r2, #4]
 869 013a 294B     		ldr	r3, .L83+32
 870 013c 0B40     		ands	r3, r3, r1
 871 013e 5360     		str	r3, [r2, #4]
 485:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 872              		.loc 1 485 0
 873 0140 2168     		ldr	r1, [r4]
 874 0142 4868     		ldr	r0, [r1, #4]
 875 0144 A369     		ldr	r3, [r4, #24]
 876 0146 A26A     		ldr	r2, [r4, #40]
 877 0148 1A43     		orrs	r2, r2, r3
 878 014a E36A     		ldr	r3, [r4, #44]
 879 014c 1343     		orrs	r3, r3, r2
 880 014e 0343     		orrs	r3, r3, r0
 881 0150 4B60     		str	r3, [r1, #4]
 488:HALLIB/Src/stm32f7xx_hal_sai.c ****                            SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
 882              		.loc 1 488 0
 883 0152 2268     		ldr	r2, [r4]
 884 0154 9168     		ldr	r1, [r2, #8]
 885 0156 234B     		ldr	r3, .L83+36
 886 0158 0B40     		ands	r3, r3, r1
 887 015a 9360     		str	r3, [r2, #8]
 490:HALLIB/Src/stm32f7xx_hal_sai.c ****                           hsai->FrameInit.FSOffset |
 888              		.loc 1 490 0
 889 015c 2068     		ldr	r0, [r4]
 890 015e 8568     		ldr	r5, [r0, #8]
 891              	.LVL79:
 892 0160 226C     		ldr	r2, [r4, #64]
 893 0162 511E     		subs	r1, r2, #1
 491:HALLIB/Src/stm32f7xx_hal_sai.c ****                           hsai->FrameInit.FSDefinition |
 894              		.loc 1 491 0
 895 0164 226D     		ldr	r2, [r4, #80]
 490:HALLIB/Src/stm32f7xx_hal_sai.c ****                           hsai->FrameInit.FSOffset |
 896              		.loc 1 490 0
 897 0166 1143     		orrs	r1, r1, r2
 492:HALLIB/Src/stm32f7xx_hal_sai.c ****                           hsai->FrameInit.FSPolarity   |
 898              		.loc 1 492 0
 899 0168 A26C     		ldr	r2, [r4, #72]
 491:HALLIB/Src/stm32f7xx_hal_sai.c ****                           hsai->FrameInit.FSDefinition |
 900              		.loc 1 491 0
 901 016a 0A43     		orrs	r2, r2, r1
 493:HALLIB/Src/stm32f7xx_hal_sai.c ****                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 902              		.loc 1 493 0
 903 016c E36C     		ldr	r3, [r4, #76]
ARM GAS  /tmp/cc0s4dWM.s 			page 51


 492:HALLIB/Src/stm32f7xx_hal_sai.c ****                           hsai->FrameInit.FSPolarity   |
 904              		.loc 1 492 0
 905 016e 1A43     		orrs	r2, r2, r3
 494:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 906              		.loc 1 494 0
 907 0170 616C     		ldr	r1, [r4, #68]
 908 0172 4B1E     		subs	r3, r1, #1
 493:HALLIB/Src/stm32f7xx_hal_sai.c ****                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 909              		.loc 1 493 0
 910 0174 42EA0323 		orr	r3, r2, r3, lsl #8
 490:HALLIB/Src/stm32f7xx_hal_sai.c ****                           hsai->FrameInit.FSOffset |
 911              		.loc 1 490 0
 912 0178 2B43     		orrs	r3, r3, r5
 913 017a 8360     		str	r3, [r0, #8]
 498:HALLIB/Src/stm32f7xx_hal_sai.c ****                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
 914              		.loc 1 498 0
 915 017c 2268     		ldr	r2, [r4]
 916 017e D368     		ldr	r3, [r2, #12]
 917 0180 23F47D63 		bic	r3, r3, #4048
 918 0184 23F00F03 		bic	r3, r3, #15
 919 0188 1B04     		lsls	r3, r3, #16
 920 018a 1B0C     		lsrs	r3, r3, #16
 921 018c D360     		str	r3, [r2, #12]
 501:HALLIB/Src/stm32f7xx_hal_sai.c ****                           | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<
 922              		.loc 1 501 0
 923 018e 2068     		ldr	r0, [r4]
 924 0190 C568     		ldr	r5, [r0, #12]
 925 0192 626D     		ldr	r2, [r4, #84]
 926 0194 A36D     		ldr	r3, [r4, #88]
 927 0196 1A43     		orrs	r2, r2, r3
 502:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 928              		.loc 1 502 0
 929 0198 236E     		ldr	r3, [r4, #96]
 930 019a 42EA0342 		orr	r2, r2, r3, lsl #16
 931 019e E16D     		ldr	r1, [r4, #92]
 932 01a0 4B1E     		subs	r3, r1, #1
 933 01a2 42EA0323 		orr	r3, r2, r3, lsl #8
 501:HALLIB/Src/stm32f7xx_hal_sai.c ****                           | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<
 934              		.loc 1 501 0
 935 01a6 2B43     		orrs	r3, r3, r5
 936 01a8 C360     		str	r3, [r0, #12]
 505:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 937              		.loc 1 505 0
 938 01aa 0020     		movs	r0, #0
 939 01ac C4F88000 		str	r0, [r4, #128]
 508:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 940              		.loc 1 508 0
 941 01b0 0123     		movs	r3, #1
 942 01b2 84F87D30 		strb	r3, [r4, #125]
 511:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 943              		.loc 1 511 0
 944 01b6 84F87C00 		strb	r0, [r4, #124]
 513:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 945              		.loc 1 513 0
 946 01ba F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 947              	.LVL80:
 948              	.L75:
ARM GAS  /tmp/cc0s4dWM.s 			page 52


 949              	.LCFI5:
 950              		.cfi_def_cfa_offset 0
 951              		.cfi_restore 3
 952              		.cfi_restore 4
 953              		.cfi_restore 5
 954              		.cfi_restore 6
 955              		.cfi_restore 7
 956              		.cfi_restore 14
 329:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 957              		.loc 1 329 0
 958 01bc 0120     		movs	r0, #1
 959              	.LVL81:
 960 01be 7047     		bx	lr
 961              	.L84:
 962              		.align	2
 963              	.L83:
 964 01c0 24580140 		.word	1073829924
 965 01c4 04580140 		.word	1073829892
 966 01c8 00580140 		.word	1073829888
 967 01cc 005C0140 		.word	1073830912
 968 01d0 245C0140 		.word	1073830948
 969 01d4 045C0140 		.word	1073830916
 970 01d8 CDCCCCCC 		.word	-858993459
 971 01dc 10C005FF 		.word	-16400368
 972 01e0 F01FFFFF 		.word	-57360
 973 01e4 0080F8FF 		.word	-491520
 974              		.cfi_endproc
 975              	.LFE137:
 977              		.section	.text.HAL_SAI_InitProtocol,"ax",%progbits
 978              		.align	2
 979              		.global	HAL_SAI_InitProtocol
 980              		.thumb
 981              		.thumb_func
 983              	HAL_SAI_InitProtocol:
 984              	.LFB136:
 282:HALLIB/Src/stm32f7xx_hal_sai.c ****   HAL_StatusTypeDef status = HAL_OK;
 985              		.loc 1 282 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989              	.LVL82:
 990 0000 10B5     		push	{r4, lr}
 991              	.LCFI6:
 992              		.cfi_def_cfa_offset 8
 993              		.cfi_offset 4, -8
 994              		.cfi_offset 14, -4
 995 0002 0446     		mov	r4, r0
 996              	.LVL83:
 289:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 997              		.loc 1 289 0
 998 0004 0429     		cmp	r1, #4
 999 0006 0CD8     		bhi	.L91
 1000 0008 DFE801F0 		tbb	[pc, r1]
 1001              	.LVL84:
 1002              	.L88:
 1003 000c 03       		.byte	(.L87-.L88)/2
 1004 000d 03       		.byte	(.L87-.L88)/2
ARM GAS  /tmp/cc0s4dWM.s 			page 53


 1005 000e 03       		.byte	(.L87-.L88)/2
 1006 000f 07       		.byte	(.L89-.L88)/2
 1007 0010 07       		.byte	(.L89-.L88)/2
 1008 0011 00       		.p2align 1
 1009              	.L87:
 294:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 1010              		.loc 1 294 0
 1011 0012 2046     		mov	r0, r4
 1012 0014 FFF7FEFF 		bl	SAI_InitI2S
 1013              	.LVL85:
 295:HALLIB/Src/stm32f7xx_hal_sai.c ****   case SAI_PCM_LONG :
 1014              		.loc 1 295 0
 1015 0018 04E0     		b	.L86
 1016              	.LVL86:
 1017              	.L89:
 298:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 1018              		.loc 1 298 0
 1019 001a 2046     		mov	r0, r4
 1020 001c FFF7FEFF 		bl	SAI_InitPCM
 1021              	.LVL87:
 299:HALLIB/Src/stm32f7xx_hal_sai.c ****   default :
 1022              		.loc 1 299 0
 1023 0020 00E0     		b	.L86
 1024              	.LVL88:
 1025              	.L91:
 301:HALLIB/Src/stm32f7xx_hal_sai.c ****     break;
 1026              		.loc 1 301 0
 1027 0022 0120     		movs	r0, #1
 1028              	.LVL89:
 1029              	.L86:
 305:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1030              		.loc 1 305 0
 1031 0024 10B9     		cbnz	r0, .L90
 307:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1032              		.loc 1 307 0
 1033 0026 2046     		mov	r0, r4
 1034              	.LVL90:
 1035 0028 FFF7FEFF 		bl	HAL_SAI_Init
 1036              	.LVL91:
 1037              	.L90:
 311:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1038              		.loc 1 311 0
 1039 002c 10BD     		pop	{r4, pc}
 1040              		.cfi_endproc
 1041              	.LFE136:
 1043 002e 00BF     		.section	.text.HAL_SAI_MspDeInit,"ax",%progbits
 1044              		.align	2
 1045              		.weak	HAL_SAI_MspDeInit
 1046              		.thumb
 1047              		.thumb_func
 1049              	HAL_SAI_MspDeInit:
 1050              	.LFB140:
 580:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
 1051              		.loc 1 580 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0s4dWM.s 			page 54


 1055              		@ link register save eliminated.
 1056              	.LVL92:
 1057 0000 7047     		bx	lr
 1058              		.cfi_endproc
 1059              	.LFE140:
 1061 0002 00BF     		.section	.text.HAL_SAI_DeInit,"ax",%progbits
 1062              		.align	2
 1063              		.global	HAL_SAI_DeInit
 1064              		.thumb
 1065              		.thumb_func
 1067              	HAL_SAI_DeInit:
 1068              	.LFB138:
 523:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check the SAI handle allocation */
 1069              		.loc 1 523 0
 1070              		.cfi_startproc
 1071              		@ args = 0, pretend = 0, frame = 0
 1072              		@ frame_needed = 0, uses_anonymous_args = 0
 1073              	.LVL93:
 525:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1074              		.loc 1 525 0
 1075 0000 E8B1     		cbz	r0, .L96
 523:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check the SAI handle allocation */
 1076              		.loc 1 523 0
 1077 0002 38B5     		push	{r3, r4, r5, lr}
 1078              	.LCFI7:
 1079              		.cfi_def_cfa_offset 16
 1080              		.cfi_offset 3, -16
 1081              		.cfi_offset 4, -12
 1082              		.cfi_offset 5, -8
 1083              		.cfi_offset 14, -4
 1084 0004 0446     		mov	r4, r0
 530:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1085              		.loc 1 530 0
 1086 0006 0223     		movs	r3, #2
 1087 0008 80F87D30 		strb	r3, [r0, #125]
 533:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CLRFR = 0xFFFFFFFFU;
 1088              		.loc 1 533 0
 1089 000c 0368     		ldr	r3, [r0]
 1090 000e 0025     		movs	r5, #0
 1091 0010 1D61     		str	r5, [r3, #16]
 534:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 1092              		.loc 1 534 0
 1093 0012 0368     		ldr	r3, [r0]
 1094 0014 4FF0FF32 		mov	r2, #-1
 1095 0018 9A61     		str	r2, [r3, #24]
 537:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1096              		.loc 1 537 0
 1097 001a FFF7FEFF 		bl	SAI_Disable
 1098              	.LVL94:
 540:HALLIB/Src/stm32f7xx_hal_sai.c ****   
 1099              		.loc 1 540 0
 1100 001e 2268     		ldr	r2, [r4]
 1101 0020 5368     		ldr	r3, [r2, #4]
 1102 0022 43F00803 		orr	r3, r3, #8
 1103 0026 5360     		str	r3, [r2, #4]
 543:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1104              		.loc 1 543 0
ARM GAS  /tmp/cc0s4dWM.s 			page 55


 1105 0028 2046     		mov	r0, r4
 1106 002a FFF7FEFF 		bl	HAL_SAI_MspDeInit
 1107              	.LVL95:
 546:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1108              		.loc 1 546 0
 1109 002e C4F88050 		str	r5, [r4, #128]
 549:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1110              		.loc 1 549 0
 1111 0032 84F87D50 		strb	r5, [r4, #125]
 552:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1112              		.loc 1 552 0
 1113 0036 84F87C50 		strb	r5, [r4, #124]
 554:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 1114              		.loc 1 554 0
 1115 003a 2846     		mov	r0, r5
 1116 003c 38BD     		pop	{r3, r4, r5, pc}
 1117              	.LVL96:
 1118              	.L96:
 1119              	.LCFI8:
 1120              		.cfi_def_cfa_offset 0
 1121              		.cfi_restore 3
 1122              		.cfi_restore 4
 1123              		.cfi_restore 5
 1124              		.cfi_restore 14
 527:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1125              		.loc 1 527 0
 1126 003e 0120     		movs	r0, #1
 1127              	.LVL97:
 1128 0040 7047     		bx	lr
 1129              		.cfi_endproc
 1130              	.LFE138:
 1132 0042 00BF     		.section	.text.HAL_SAI_Transmit,"ax",%progbits
 1133              		.align	2
 1134              		.global	HAL_SAI_Transmit
 1135              		.thumb
 1136              		.thumb_func
 1138              	HAL_SAI_Transmit:
 1139              	.LFB141:
 645:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t tickstart = HAL_GetTick();
 1140              		.loc 1 645 0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 0
 1143              		@ frame_needed = 0, uses_anonymous_args = 0
 1144              	.LVL98:
 1145 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1146              	.LCFI9:
 1147              		.cfi_def_cfa_offset 24
 1148              		.cfi_offset 4, -24
 1149              		.cfi_offset 5, -20
 1150              		.cfi_offset 6, -16
 1151              		.cfi_offset 7, -12
 1152              		.cfi_offset 8, -8
 1153              		.cfi_offset 14, -4
 1154 0004 0446     		mov	r4, r0
 1155 0006 8846     		mov	r8, r1
 1156 0008 1746     		mov	r7, r2
 1157 000a 1D46     		mov	r5, r3
ARM GAS  /tmp/cc0s4dWM.s 			page 56


 646:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1158              		.loc 1 646 0
 1159 000c FFF7FEFF 		bl	HAL_GetTick
 1160              	.LVL99:
 648:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1161              		.loc 1 648 0
 1162 0010 002F     		cmp	r7, #0
 1163 0012 18BF     		it	ne
 1164 0014 B8F1000F 		cmpne	r8, #0
 1165 0018 7CD0     		beq	.L110
 1166 001a 0646     		mov	r6, r0
 653:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1167              		.loc 1 653 0
 1168 001c 94F87D30 		ldrb	r3, [r4, #125]	@ zero_extendqisi2
 1169 0020 DBB2     		uxtb	r3, r3
 1170 0022 012B     		cmp	r3, #1
 1171 0024 79D1     		bne	.L111
 656:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1172              		.loc 1 656 0
 1173 0026 94F87C30 		ldrb	r3, [r4, #124]	@ zero_extendqisi2
 1174 002a 012B     		cmp	r3, #1
 1175 002c 78D0     		beq	.L112
 656:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1176              		.loc 1 656 0 is_stmt 0 discriminator 2
 1177 002e 0123     		movs	r3, #1
 1178 0030 84F87C30 		strb	r3, [r4, #124]
 658:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
 1179              		.loc 1 658 0 is_stmt 1 discriminator 2
 1180 0034 A4F86870 		strh	r7, [r4, #104]	@ movhi
 659:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->pBuffPtr = pData;
 1181              		.loc 1 659 0 discriminator 2
 1182 0038 A4F86A70 		strh	r7, [r4, #106]	@ movhi
 660:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_TX;
 1183              		.loc 1 660 0 discriminator 2
 1184 003c C4F86480 		str	r8, [r4, #100]
 661:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 1185              		.loc 1 661 0 discriminator 2
 1186 0040 1223     		movs	r3, #18
 1187 0042 84F87D30 		strb	r3, [r4, #125]
 662:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1188              		.loc 1 662 0 discriminator 2
 1189 0046 0023     		movs	r3, #0
 1190 0048 C4F88030 		str	r3, [r4, #128]
 665:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1191              		.loc 1 665 0 discriminator 2
 1192 004c 2368     		ldr	r3, [r4]
 1193 004e 1B68     		ldr	r3, [r3]
 1194 0050 13F4803F 		tst	r3, #65536
 1195 0054 52D1     		bne	.L102
 668:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Enable SAI peripheral */
 1196              		.loc 1 668 0
 1197 0056 2046     		mov	r0, r4
 1198              	.LVL100:
 1199 0058 FFF7FEFF 		bl	SAI_FillFifo
 1200              	.LVL101:
 670:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 1201              		.loc 1 670 0
ARM GAS  /tmp/cc0s4dWM.s 			page 57


 1202 005c 2268     		ldr	r2, [r4]
 1203 005e 1368     		ldr	r3, [r2]
 1204 0060 43F48033 		orr	r3, r3, #65536
 1205 0064 1360     		str	r3, [r2]
 1206 0066 49E0     		b	.L102
 1207              	.L109:
 676:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 1208              		.loc 1 676 0
 1209 0068 2268     		ldr	r2, [r4]
 1210 006a 5369     		ldr	r3, [r2, #20]
 1211 006c 03F4E023 		and	r3, r3, #458752
 1212 0070 B3F5A02F 		cmp	r3, #327680
 1213 0074 1FD0     		beq	.L103
 678:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1214              		.loc 1 678 0
 1215 0076 636B     		ldr	r3, [r4, #52]
 1216 0078 402B     		cmp	r3, #64
 1217 007a 07D1     		bne	.L104
 678:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1218              		.loc 1 678 0 is_stmt 0 discriminator 1
 1219 007c A16A     		ldr	r1, [r4, #40]
 1220 007e 29B9     		cbnz	r1, .L104
 680:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 1221              		.loc 1 680 0 is_stmt 1
 1222 0080 636E     		ldr	r3, [r4, #100]
 1223 0082 591C     		adds	r1, r3, #1
 1224 0084 6166     		str	r1, [r4, #100]
 1225 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1226 0088 D361     		str	r3, [r2, #28]
 1227 008a 0EE0     		b	.L105
 1228              	.L104:
 682:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1229              		.loc 1 682 0
 1230 008c 802B     		cmp	r3, #128
 1231 008e 06D8     		bhi	.L106
 684:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->pBuffPtr+= 2;
 1232              		.loc 1 684 0
 1233 0090 636E     		ldr	r3, [r4, #100]
 1234 0092 1B88     		ldrh	r3, [r3]
 1235 0094 D361     		str	r3, [r2, #28]
 685:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 1236              		.loc 1 685 0
 1237 0096 636E     		ldr	r3, [r4, #100]
 1238 0098 0233     		adds	r3, r3, #2
 1239 009a 6366     		str	r3, [r4, #100]
 1240 009c 05E0     		b	.L105
 1241              	.L106:
 689:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->pBuffPtr+= 4;
 1242              		.loc 1 689 0
 1243 009e 636E     		ldr	r3, [r4, #100]
 1244 00a0 1B68     		ldr	r3, [r3]
 1245 00a2 D361     		str	r3, [r2, #28]
 690:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 1246              		.loc 1 690 0
 1247 00a4 636E     		ldr	r3, [r4, #100]
 1248 00a6 0433     		adds	r3, r3, #4
 1249 00a8 6366     		str	r3, [r4, #100]
ARM GAS  /tmp/cc0s4dWM.s 			page 58


 1250              	.L105:
 692:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 1251              		.loc 1 692 0
 1252 00aa B4F86A30 		ldrh	r3, [r4, #106]
 1253 00ae 013B     		subs	r3, r3, #1
 1254 00b0 A4F86A30 		strh	r3, [r4, #106]	@ movhi
 1255 00b4 22E0     		b	.L102
 1256              	.L103:
 697:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1257              		.loc 1 697 0
 1258 00b6 B5F1FF3F 		cmp	r5, #-1
 1259 00ba 1FD0     		beq	.L102
 697:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1260              		.loc 1 697 0 is_stmt 0 discriminator 1
 1261 00bc 25B1     		cbz	r5, .L108
 697:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1262              		.loc 1 697 0 discriminator 2
 1263 00be FFF7FEFF 		bl	HAL_GetTick
 1264              	.LVL102:
 1265 00c2 801B     		subs	r0, r0, r6
 1266 00c4 8542     		cmp	r5, r0
 1267 00c6 19D2     		bcs	.L102
 1268              	.L108:
 700:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1269              		.loc 1 700 0 is_stmt 1
 1270 00c8 D4F88030 		ldr	r3, [r4, #128]
 1271 00cc 43F04003 		orr	r3, r3, #64
 1272 00d0 C4F88030 		str	r3, [r4, #128]
 703:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1273              		.loc 1 703 0
 1274 00d4 2368     		ldr	r3, [r4]
 1275 00d6 4FF0FF32 		mov	r2, #-1
 1276 00da 9A61     		str	r2, [r3, #24]
 706:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1277              		.loc 1 706 0
 1278 00dc 2046     		mov	r0, r4
 1279 00de FFF7FEFF 		bl	SAI_Disable
 1280              	.LVL103:
 709:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1281              		.loc 1 709 0
 1282 00e2 2268     		ldr	r2, [r4]
 1283 00e4 5368     		ldr	r3, [r2, #4]
 1284 00e6 43F00803 		orr	r3, r3, #8
 1285 00ea 5360     		str	r3, [r2, #4]
 712:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1286              		.loc 1 712 0
 1287 00ec 0120     		movs	r0, #1
 1288 00ee 84F87D00 		strb	r0, [r4, #125]
 715:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1289              		.loc 1 715 0
 1290 00f2 0023     		movs	r3, #0
 1291 00f4 84F87C30 		strb	r3, [r4, #124]
 717:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 1292              		.loc 1 717 0
 1293 00f8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1294              	.LVL104:
 1295              	.L102:
ARM GAS  /tmp/cc0s4dWM.s 			page 59


 673:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1296              		.loc 1 673 0
 1297 00fc B4F86A30 		ldrh	r3, [r4, #106]
 1298 0100 002B     		cmp	r3, #0
 1299 0102 B1D1     		bne	.L109
 722:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1300              		.loc 1 722 0
 1301 0104 0123     		movs	r3, #1
 1302 0106 84F87D30 		strb	r3, [r4, #125]
 725:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1303              		.loc 1 725 0
 1304 010a 0020     		movs	r0, #0
 1305 010c 84F87C00 		strb	r0, [r4, #124]
 727:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1306              		.loc 1 727 0
 1307 0110 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1308              	.LVL105:
 1309              	.L110:
 650:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1310              		.loc 1 650 0
 1311 0114 0120     		movs	r0, #1
 1312              	.LVL106:
 1313 0116 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1314              	.LVL107:
 1315              	.L111:
 731:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1316              		.loc 1 731 0
 1317 011a 0220     		movs	r0, #2
 1318              	.LVL108:
 1319 011c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1320              	.LVL109:
 1321              	.L112:
 656:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1322              		.loc 1 656 0
 1323 0120 0220     		movs	r0, #2
 1324              	.LVL110:
 733:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1325              		.loc 1 733 0
 1326 0122 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1327              		.cfi_endproc
 1328              	.LFE141:
 1330 0126 00BF     		.section	.text.HAL_SAI_Receive,"ax",%progbits
 1331              		.align	2
 1332              		.global	HAL_SAI_Receive
 1333              		.thumb
 1334              		.thumb_func
 1336              	HAL_SAI_Receive:
 1337              	.LFB142:
 745:HALLIB/Src/stm32f7xx_hal_sai.c ****   uint32_t tickstart = HAL_GetTick();
 1338              		.loc 1 745 0
 1339              		.cfi_startproc
 1340              		@ args = 0, pretend = 0, frame = 0
 1341              		@ frame_needed = 0, uses_anonymous_args = 0
 1342              	.LVL111:
 1343 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1344              	.LCFI10:
 1345              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc0s4dWM.s 			page 60


 1346              		.cfi_offset 4, -24
 1347              		.cfi_offset 5, -20
 1348              		.cfi_offset 6, -16
 1349              		.cfi_offset 7, -12
 1350              		.cfi_offset 8, -8
 1351              		.cfi_offset 14, -4
 1352 0004 0446     		mov	r4, r0
 1353 0006 8846     		mov	r8, r1
 1354 0008 1646     		mov	r6, r2
 1355 000a 1D46     		mov	r5, r3
 746:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1356              		.loc 1 746 0
 1357 000c FFF7FEFF 		bl	HAL_GetTick
 1358              	.LVL112:
 748:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1359              		.loc 1 748 0
 1360 0010 002E     		cmp	r6, #0
 1361 0012 18BF     		it	ne
 1362 0014 B8F1000F 		cmpne	r8, #0
 1363 0018 76D0     		beq	.L125
 1364 001a 0746     		mov	r7, r0
 753:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1365              		.loc 1 753 0
 1366 001c 94F87D30 		ldrb	r3, [r4, #125]	@ zero_extendqisi2
 1367 0020 DBB2     		uxtb	r3, r3
 1368 0022 012B     		cmp	r3, #1
 1369 0024 73D1     		bne	.L126
 756:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1370              		.loc 1 756 0
 1371 0026 94F87C30 		ldrb	r3, [r4, #124]	@ zero_extendqisi2
 1372 002a 012B     		cmp	r3, #1
 1373 002c 72D0     		beq	.L127
 756:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1374              		.loc 1 756 0 is_stmt 0 discriminator 2
 1375 002e 0123     		movs	r3, #1
 1376 0030 84F87C30 		strb	r3, [r4, #124]
 758:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferSize = Size;
 1377              		.loc 1 758 0 is_stmt 1 discriminator 2
 1378 0034 C4F86480 		str	r8, [r4, #100]
 759:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
 1379              		.loc 1 759 0 discriminator 2
 1380 0038 A4F86860 		strh	r6, [r4, #104]	@ movhi
 760:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_RX;
 1381              		.loc 1 760 0 discriminator 2
 1382 003c A4F86A60 		strh	r6, [r4, #106]	@ movhi
 761:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 1383              		.loc 1 761 0 discriminator 2
 1384 0040 2223     		movs	r3, #34
 1385 0042 84F87D30 		strb	r3, [r4, #125]
 762:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1386              		.loc 1 762 0 discriminator 2
 1387 0046 0023     		movs	r3, #0
 1388 0048 C4F88030 		str	r3, [r4, #128]
 765:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1389              		.loc 1 765 0 discriminator 2
 1390 004c 2368     		ldr	r3, [r4]
 1391 004e 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cc0s4dWM.s 			page 61


 1392 0050 12F4803F 		tst	r2, #65536
 1393 0054 4CD1     		bne	.L117
 768:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 1394              		.loc 1 768 0
 1395 0056 1A68     		ldr	r2, [r3]
 1396 0058 42F48032 		orr	r2, r2, #65536
 1397 005c 1A60     		str	r2, [r3]
 1398 005e 47E0     		b	.L117
 1399              	.LVL113:
 1400              	.L124:
 774:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 1401              		.loc 1 774 0
 1402 0060 2368     		ldr	r3, [r4]
 1403 0062 5A69     		ldr	r2, [r3, #20]
 1404 0064 12F4E02F 		tst	r2, #458752
 1405 0068 1FD0     		beq	.L118
 776:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1406              		.loc 1 776 0
 1407 006a 626B     		ldr	r2, [r4, #52]
 1408 006c 402A     		cmp	r2, #64
 1409 006e 07D1     		bne	.L119
 776:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1410              		.loc 1 776 0 is_stmt 0 discriminator 1
 1411 0070 A16A     		ldr	r1, [r4, #40]
 1412 0072 29B9     		cbnz	r1, .L119
 778:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 1413              		.loc 1 778 0 is_stmt 1
 1414 0074 626E     		ldr	r2, [r4, #100]
 1415 0076 511C     		adds	r1, r2, #1
 1416 0078 6166     		str	r1, [r4, #100]
 1417 007a DB69     		ldr	r3, [r3, #28]
 1418 007c 1370     		strb	r3, [r2]
 1419 007e 0EE0     		b	.L120
 1420              	.L119:
 780:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1421              		.loc 1 780 0
 1422 0080 802A     		cmp	r2, #128
 1423 0082 06D8     		bhi	.L121
 782:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->pBuffPtr+= 2;
 1424              		.loc 1 782 0
 1425 0084 626E     		ldr	r2, [r4, #100]
 1426 0086 DB69     		ldr	r3, [r3, #28]
 1427 0088 1380     		strh	r3, [r2]	@ movhi
 783:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 1428              		.loc 1 783 0
 1429 008a 636E     		ldr	r3, [r4, #100]
 1430 008c 0233     		adds	r3, r3, #2
 1431 008e 6366     		str	r3, [r4, #100]
 1432 0090 05E0     		b	.L120
 1433              	.L121:
 787:HALLIB/Src/stm32f7xx_hal_sai.c ****           hsai->pBuffPtr+= 4;
 1434              		.loc 1 787 0
 1435 0092 626E     		ldr	r2, [r4, #100]
 1436 0094 DB69     		ldr	r3, [r3, #28]
 1437 0096 1360     		str	r3, [r2]
 788:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 1438              		.loc 1 788 0
ARM GAS  /tmp/cc0s4dWM.s 			page 62


 1439 0098 636E     		ldr	r3, [r4, #100]
 1440 009a 0433     		adds	r3, r3, #4
 1441 009c 6366     		str	r3, [r4, #100]
 1442              	.L120:
 790:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 1443              		.loc 1 790 0
 1444 009e B4F86A30 		ldrh	r3, [r4, #106]
 1445 00a2 013B     		subs	r3, r3, #1
 1446 00a4 A4F86A30 		strh	r3, [r4, #106]	@ movhi
 1447 00a8 22E0     		b	.L117
 1448              	.L118:
 795:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1449              		.loc 1 795 0
 1450 00aa B5F1FF3F 		cmp	r5, #-1
 1451 00ae 1FD0     		beq	.L117
 795:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1452              		.loc 1 795 0 is_stmt 0 discriminator 1
 1453 00b0 25B1     		cbz	r5, .L123
 795:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 1454              		.loc 1 795 0 discriminator 2
 1455 00b2 FFF7FEFF 		bl	HAL_GetTick
 1456              	.LVL114:
 1457 00b6 C01B     		subs	r0, r0, r7
 1458 00b8 8542     		cmp	r5, r0
 1459 00ba 19D2     		bcs	.L117
 1460              	.L123:
 798:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1461              		.loc 1 798 0 is_stmt 1
 1462 00bc D4F88030 		ldr	r3, [r4, #128]
 1463 00c0 43F04003 		orr	r3, r3, #64
 1464 00c4 C4F88030 		str	r3, [r4, #128]
 801:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1465              		.loc 1 801 0
 1466 00c8 2368     		ldr	r3, [r4]
 1467 00ca 4FF0FF32 		mov	r2, #-1
 1468 00ce 9A61     		str	r2, [r3, #24]
 804:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1469              		.loc 1 804 0
 1470 00d0 2046     		mov	r0, r4
 1471 00d2 FFF7FEFF 		bl	SAI_Disable
 1472              	.LVL115:
 807:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1473              		.loc 1 807 0
 1474 00d6 2268     		ldr	r2, [r4]
 1475 00d8 5368     		ldr	r3, [r2, #4]
 1476 00da 43F00803 		orr	r3, r3, #8
 1477 00de 5360     		str	r3, [r2, #4]
 810:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1478              		.loc 1 810 0
 1479 00e0 0120     		movs	r0, #1
 1480 00e2 84F87D00 		strb	r0, [r4, #125]
 813:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1481              		.loc 1 813 0
 1482 00e6 0023     		movs	r3, #0
 1483 00e8 84F87C30 		strb	r3, [r4, #124]
 815:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 1484              		.loc 1 815 0
ARM GAS  /tmp/cc0s4dWM.s 			page 63


 1485 00ec BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1486              	.LVL116:
 1487              	.L117:
 772:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1488              		.loc 1 772 0
 1489 00f0 B4F86A30 		ldrh	r3, [r4, #106]
 1490 00f4 002B     		cmp	r3, #0
 1491 00f6 B3D1     		bne	.L124
 820:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1492              		.loc 1 820 0
 1493 00f8 0123     		movs	r3, #1
 1494 00fa 84F87D30 		strb	r3, [r4, #125]
 823:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1495              		.loc 1 823 0
 1496 00fe 0020     		movs	r0, #0
 1497 0100 84F87C00 		strb	r0, [r4, #124]
 825:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1498              		.loc 1 825 0
 1499 0104 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1500              	.LVL117:
 1501              	.L125:
 750:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1502              		.loc 1 750 0
 1503 0108 0120     		movs	r0, #1
 1504              	.LVL118:
 1505 010a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1506              	.LVL119:
 1507              	.L126:
 829:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1508              		.loc 1 829 0
 1509 010e 0220     		movs	r0, #2
 1510              	.LVL120:
 1511 0110 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1512              	.LVL121:
 1513              	.L127:
 756:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1514              		.loc 1 756 0
 1515 0114 0220     		movs	r0, #2
 1516              	.LVL122:
 831:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1517              		.loc 1 831 0
 1518 0116 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1519              		.cfi_endproc
 1520              	.LFE142:
 1522 011a 00BF     		.section	.text.HAL_SAI_Transmit_IT,"ax",%progbits
 1523              		.align	2
 1524              		.global	HAL_SAI_Transmit_IT
 1525              		.thumb
 1526              		.thumb_func
 1528              	HAL_SAI_Transmit_IT:
 1529              	.LFB143:
 842:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((pData == NULL) || (Size == 0))
 1530              		.loc 1 842 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 0
 1533              		@ frame_needed = 0, uses_anonymous_args = 0
 1534              	.LVL123:
ARM GAS  /tmp/cc0s4dWM.s 			page 64


 843:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1535              		.loc 1 843 0
 1536 0000 002A     		cmp	r2, #0
 1537 0002 18BF     		it	ne
 1538 0004 0029     		cmpne	r1, #0
 1539 0006 3ED0     		beq	.L135
 842:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((pData == NULL) || (Size == 0))
 1540              		.loc 1 842 0
 1541 0008 38B5     		push	{r3, r4, r5, lr}
 1542              	.LCFI11:
 1543              		.cfi_def_cfa_offset 16
 1544              		.cfi_offset 3, -16
 1545              		.cfi_offset 4, -12
 1546              		.cfi_offset 5, -8
 1547              		.cfi_offset 14, -4
 848:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1548              		.loc 1 848 0
 1549 000a 90F87D30 		ldrb	r3, [r0, #125]	@ zero_extendqisi2
 1550 000e DBB2     		uxtb	r3, r3
 1551 0010 012B     		cmp	r3, #1
 1552 0012 3AD1     		bne	.L136
 851:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1553              		.loc 1 851 0
 1554 0014 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 1555 0018 012B     		cmp	r3, #1
 1556 001a 38D0     		beq	.L137
 851:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1557              		.loc 1 851 0 is_stmt 0 discriminator 2
 1558 001c 0123     		movs	r3, #1
 1559 001e 80F87C30 		strb	r3, [r0, #124]
 853:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferSize = Size;
 1560              		.loc 1 853 0 is_stmt 1 discriminator 2
 1561 0022 4166     		str	r1, [r0, #100]
 854:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
 1562              		.loc 1 854 0 discriminator 2
 1563 0024 A0F86820 		strh	r2, [r0, #104]	@ movhi
 855:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 1564              		.loc 1 855 0 discriminator 2
 1565 0028 A0F86A20 		strh	r2, [r0, #106]	@ movhi
 856:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_TX;
 1566              		.loc 1 856 0 discriminator 2
 1567 002c 0023     		movs	r3, #0
 1568 002e C0F88030 		str	r3, [r0, #128]
 857:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1569              		.loc 1 857 0 discriminator 2
 1570 0032 1223     		movs	r3, #18
 1571 0034 80F87D30 		strb	r3, [r0, #125]
 859:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1572              		.loc 1 859 0 discriminator 2
 1573 0038 436B     		ldr	r3, [r0, #52]
 1574 003a 402B     		cmp	r3, #64
 1575 003c 04D1     		bne	.L131
 859:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1576              		.loc 1 859 0 is_stmt 0 discriminator 1
 1577 003e 826A     		ldr	r2, [r0, #40]
 1578              	.LVL124:
 1579 0040 12B9     		cbnz	r2, .L131
ARM GAS  /tmp/cc0s4dWM.s 			page 65


 861:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 1580              		.loc 1 861 0 is_stmt 1
 1581 0042 144B     		ldr	r3, .L139
 1582 0044 8367     		str	r3, [r0, #120]
 1583 0046 06E0     		b	.L132
 1584              	.L131:
 863:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1585              		.loc 1 863 0
 1586 0048 802B     		cmp	r3, #128
 1587 004a 02D8     		bhi	.L133
 865:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 1588              		.loc 1 865 0
 1589 004c 124B     		ldr	r3, .L139+4
 1590 004e 8367     		str	r3, [r0, #120]
 1591 0050 01E0     		b	.L132
 1592              	.L133:
 869:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 1593              		.loc 1 869 0
 1594 0052 124B     		ldr	r3, .L139+8
 1595 0054 8367     		str	r3, [r0, #120]
 1596              	.L132:
 1597 0056 0446     		mov	r4, r0
 873:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1598              		.loc 1 873 0
 1599 0058 FFF7FEFF 		bl	SAI_FillFifo
 1600              	.LVL125:
 876:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1601              		.loc 1 876 0
 1602 005c 0121     		movs	r1, #1
 1603 005e 2046     		mov	r0, r4
 1604 0060 FFF7FEFF 		bl	SAI_InterruptFlag
 1605              	.LVL126:
 1606 0064 2268     		ldr	r2, [r4]
 1607 0066 1369     		ldr	r3, [r2, #16]
 1608 0068 1843     		orrs	r0, r0, r3
 1609 006a 1061     		str	r0, [r2, #16]
 879:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1610              		.loc 1 879 0
 1611 006c 2368     		ldr	r3, [r4]
 1612 006e 1A68     		ldr	r2, [r3]
 1613 0070 12F4803F 		tst	r2, #65536
 1614 0074 03D1     		bne	.L134
 882:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 1615              		.loc 1 882 0
 1616 0076 1A68     		ldr	r2, [r3]
 1617 0078 42F48032 		orr	r2, r2, #65536
 1618 007c 1A60     		str	r2, [r3]
 1619              	.L134:
 885:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1620              		.loc 1 885 0
 1621 007e 0020     		movs	r0, #0
 1622 0080 84F87C00 		strb	r0, [r4, #124]
 887:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1623              		.loc 1 887 0
 1624 0084 38BD     		pop	{r3, r4, r5, pc}
 1625              	.LVL127:
 1626              	.L135:
ARM GAS  /tmp/cc0s4dWM.s 			page 66


 1627              	.LCFI12:
 1628              		.cfi_def_cfa_offset 0
 1629              		.cfi_restore 3
 1630              		.cfi_restore 4
 1631              		.cfi_restore 5
 1632              		.cfi_restore 14
 845:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1633              		.loc 1 845 0
 1634 0086 0120     		movs	r0, #1
 1635              	.LVL128:
 893:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1636              		.loc 1 893 0
 1637 0088 7047     		bx	lr
 1638              	.LVL129:
 1639              	.L136:
 1640              	.LCFI13:
 1641              		.cfi_def_cfa_offset 16
 1642              		.cfi_offset 3, -16
 1643              		.cfi_offset 4, -12
 1644              		.cfi_offset 5, -8
 1645              		.cfi_offset 14, -4
 891:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1646              		.loc 1 891 0
 1647 008a 0220     		movs	r0, #2
 1648              	.LVL130:
 1649 008c 38BD     		pop	{r3, r4, r5, pc}
 1650              	.LVL131:
 1651              	.L137:
 851:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1652              		.loc 1 851 0
 1653 008e 0220     		movs	r0, #2
 1654              	.LVL132:
 893:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1655              		.loc 1 893 0
 1656 0090 38BD     		pop	{r3, r4, r5, pc}
 1657              	.L140:
 1658 0092 00BF     		.align	2
 1659              	.L139:
 1660 0094 00000000 		.word	SAI_Transmit_IT8Bit
 1661 0098 00000000 		.word	SAI_Transmit_IT16Bit
 1662 009c 00000000 		.word	SAI_Transmit_IT32Bit
 1663              		.cfi_endproc
 1664              	.LFE143:
 1666              		.section	.text.HAL_SAI_Receive_IT,"ax",%progbits
 1667              		.align	2
 1668              		.global	HAL_SAI_Receive_IT
 1669              		.thumb
 1670              		.thumb_func
 1672              	HAL_SAI_Receive_IT:
 1673              	.LFB144:
 904:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((pData == NULL) || (Size == 0))
 1674              		.loc 1 904 0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 0
 1677              		@ frame_needed = 0, uses_anonymous_args = 0
 1678              	.LVL133:
 905:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
ARM GAS  /tmp/cc0s4dWM.s 			page 67


 1679              		.loc 1 905 0
 1680 0000 002A     		cmp	r2, #0
 1681 0002 18BF     		it	ne
 1682 0004 0029     		cmpne	r1, #0
 1683 0006 3BD0     		beq	.L147
 904:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((pData == NULL) || (Size == 0))
 1684              		.loc 1 904 0
 1685 0008 38B5     		push	{r3, r4, r5, lr}
 1686              	.LCFI14:
 1687              		.cfi_def_cfa_offset 16
 1688              		.cfi_offset 3, -16
 1689              		.cfi_offset 4, -12
 1690              		.cfi_offset 5, -8
 1691              		.cfi_offset 14, -4
 910:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1692              		.loc 1 910 0
 1693 000a 90F87D30 		ldrb	r3, [r0, #125]	@ zero_extendqisi2
 1694 000e DBB2     		uxtb	r3, r3
 1695 0010 012B     		cmp	r3, #1
 1696 0012 37D1     		bne	.L148
 913:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1697              		.loc 1 913 0
 1698 0014 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 1699 0018 012B     		cmp	r3, #1
 1700 001a 35D0     		beq	.L149
 913:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1701              		.loc 1 913 0 is_stmt 0 discriminator 2
 1702 001c 0123     		movs	r3, #1
 1703 001e 80F87C30 		strb	r3, [r0, #124]
 915:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferSize = Size;
 1704              		.loc 1 915 0 is_stmt 1 discriminator 2
 1705 0022 4166     		str	r1, [r0, #100]
 916:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
 1706              		.loc 1 916 0 discriminator 2
 1707 0024 A0F86820 		strh	r2, [r0, #104]	@ movhi
 917:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 1708              		.loc 1 917 0 discriminator 2
 1709 0028 A0F86A20 		strh	r2, [r0, #106]	@ movhi
 918:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_RX;
 1710              		.loc 1 918 0 discriminator 2
 1711 002c 0023     		movs	r3, #0
 1712 002e C0F88030 		str	r3, [r0, #128]
 919:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1713              		.loc 1 919 0 discriminator 2
 1714 0032 2223     		movs	r3, #34
 1715 0034 80F87D30 		strb	r3, [r0, #125]
 921:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1716              		.loc 1 921 0 discriminator 2
 1717 0038 436B     		ldr	r3, [r0, #52]
 1718 003a 402B     		cmp	r3, #64
 1719 003c 04D1     		bne	.L143
 921:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1720              		.loc 1 921 0 is_stmt 0 discriminator 1
 1721 003e 826A     		ldr	r2, [r0, #40]
 1722              	.LVL134:
 1723 0040 12B9     		cbnz	r2, .L143
 923:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
ARM GAS  /tmp/cc0s4dWM.s 			page 68


 1724              		.loc 1 923 0 is_stmt 1
 1725 0042 124B     		ldr	r3, .L151
 1726 0044 8367     		str	r3, [r0, #120]
 1727 0046 06E0     		b	.L144
 1728              	.L143:
 925:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1729              		.loc 1 925 0
 1730 0048 802B     		cmp	r3, #128
 1731 004a 02D8     		bhi	.L145
 927:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 1732              		.loc 1 927 0
 1733 004c 104B     		ldr	r3, .L151+4
 1734 004e 8367     		str	r3, [r0, #120]
 1735 0050 01E0     		b	.L144
 1736              	.L145:
 931:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 1737              		.loc 1 931 0
 1738 0052 104B     		ldr	r3, .L151+8
 1739 0054 8367     		str	r3, [r0, #120]
 1740              	.L144:
 1741 0056 0446     		mov	r4, r0
 935:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1742              		.loc 1 935 0
 1743 0058 0121     		movs	r1, #1
 1744              	.LVL135:
 1745 005a FFF7FEFF 		bl	SAI_InterruptFlag
 1746              	.LVL136:
 1747 005e 2268     		ldr	r2, [r4]
 1748 0060 1369     		ldr	r3, [r2, #16]
 1749 0062 1843     		orrs	r0, r0, r3
 1750 0064 1061     		str	r0, [r2, #16]
 938:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1751              		.loc 1 938 0
 1752 0066 2368     		ldr	r3, [r4]
 1753 0068 1A68     		ldr	r2, [r3]
 1754 006a 12F4803F 		tst	r2, #65536
 1755 006e 03D1     		bne	.L146
 941:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 1756              		.loc 1 941 0
 1757 0070 1A68     		ldr	r2, [r3]
 1758 0072 42F48032 		orr	r2, r2, #65536
 1759 0076 1A60     		str	r2, [r3]
 1760              	.L146:
 945:HALLIB/Src/stm32f7xx_hal_sai.c ****     
 1761              		.loc 1 945 0
 1762 0078 0020     		movs	r0, #0
 1763 007a 84F87C00 		strb	r0, [r4, #124]
 947:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1764              		.loc 1 947 0
 1765 007e 38BD     		pop	{r3, r4, r5, pc}
 1766              	.LVL137:
 1767              	.L147:
 1768              	.LCFI15:
 1769              		.cfi_def_cfa_offset 0
 1770              		.cfi_restore 3
 1771              		.cfi_restore 4
 1772              		.cfi_restore 5
ARM GAS  /tmp/cc0s4dWM.s 			page 69


 1773              		.cfi_restore 14
 907:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1774              		.loc 1 907 0
 1775 0080 0120     		movs	r0, #1
 1776              	.LVL138:
 953:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1777              		.loc 1 953 0
 1778 0082 7047     		bx	lr
 1779              	.LVL139:
 1780              	.L148:
 1781              	.LCFI16:
 1782              		.cfi_def_cfa_offset 16
 1783              		.cfi_offset 3, -16
 1784              		.cfi_offset 4, -12
 1785              		.cfi_offset 5, -8
 1786              		.cfi_offset 14, -4
 951:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1787              		.loc 1 951 0
 1788 0084 0220     		movs	r0, #2
 1789              	.LVL140:
 1790 0086 38BD     		pop	{r3, r4, r5, pc}
 1791              	.LVL141:
 1792              	.L149:
 913:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1793              		.loc 1 913 0
 1794 0088 0220     		movs	r0, #2
 1795              	.LVL142:
 953:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1796              		.loc 1 953 0
 1797 008a 38BD     		pop	{r3, r4, r5, pc}
 1798              	.L152:
 1799              		.align	2
 1800              	.L151:
 1801 008c 00000000 		.word	SAI_Receive_IT8Bit
 1802 0090 00000000 		.word	SAI_Receive_IT16Bit
 1803 0094 00000000 		.word	SAI_Receive_IT32Bit
 1804              		.cfi_endproc
 1805              	.LFE144:
 1807              		.section	.text.HAL_SAI_DMAPause,"ax",%progbits
 1808              		.align	2
 1809              		.global	HAL_SAI_DMAPause
 1810              		.thumb
 1811              		.thumb_func
 1813              	HAL_SAI_DMAPause:
 1814              	.LFB145:
 962:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Locked */
 1815              		.loc 1 962 0
 1816              		.cfi_startproc
 1817              		@ args = 0, pretend = 0, frame = 0
 1818              		@ frame_needed = 0, uses_anonymous_args = 0
 1819              		@ link register save eliminated.
 1820              	.LVL143:
 964:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1821              		.loc 1 964 0
 1822 0000 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 1823 0004 012B     		cmp	r3, #1
 1824 0006 0CD0     		beq	.L155
ARM GAS  /tmp/cc0s4dWM.s 			page 70


 964:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1825              		.loc 1 964 0 is_stmt 0 discriminator 2
 1826 0008 0123     		movs	r3, #1
 1827 000a 80F87C30 		strb	r3, [r0, #124]
 967:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1828              		.loc 1 967 0 is_stmt 1 discriminator 2
 1829 000e 0268     		ldr	r2, [r0]
 1830 0010 1368     		ldr	r3, [r2]
 1831 0012 23F40033 		bic	r3, r3, #131072
 1832 0016 1360     		str	r3, [r2]
 970:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1833              		.loc 1 970 0 discriminator 2
 1834 0018 0023     		movs	r3, #0
 1835 001a 80F87C30 		strb	r3, [r0, #124]
 972:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 1836              		.loc 1 972 0 discriminator 2
 1837 001e 1846     		mov	r0, r3
 1838              	.LVL144:
 1839 0020 7047     		bx	lr
 1840              	.LVL145:
 1841              	.L155:
 964:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1842              		.loc 1 964 0
 1843 0022 0220     		movs	r0, #2
 1844              	.LVL146:
 973:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1845              		.loc 1 973 0
 1846 0024 7047     		bx	lr
 1847              		.cfi_endproc
 1848              	.LFE145:
 1850 0026 00BF     		.section	.text.HAL_SAI_DMAResume,"ax",%progbits
 1851              		.align	2
 1852              		.global	HAL_SAI_DMAResume
 1853              		.thumb
 1854              		.thumb_func
 1856              	HAL_SAI_DMAResume:
 1857              	.LFB146:
 982:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Locked */
 1858              		.loc 1 982 0
 1859              		.cfi_startproc
 1860              		@ args = 0, pretend = 0, frame = 0
 1861              		@ frame_needed = 0, uses_anonymous_args = 0
 1862              		@ link register save eliminated.
 1863              	.LVL147:
 984:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1864              		.loc 1 984 0
 1865 0000 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 1866 0004 012B     		cmp	r3, #1
 1867 0006 15D0     		beq	.L159
 984:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1868              		.loc 1 984 0 is_stmt 0 discriminator 2
 1869 0008 0123     		movs	r3, #1
 1870 000a 80F87C30 		strb	r3, [r0, #124]
 987:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1871              		.loc 1 987 0 is_stmt 1 discriminator 2
 1872 000e 0268     		ldr	r2, [r0]
 1873 0010 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cc0s4dWM.s 			page 71


 1874 0012 43F40033 		orr	r3, r3, #131072
 1875 0016 1360     		str	r3, [r2]
 990:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1876              		.loc 1 990 0 discriminator 2
 1877 0018 0368     		ldr	r3, [r0]
 1878 001a 1A68     		ldr	r2, [r3]
 1879 001c 12F4803F 		tst	r2, #65536
 1880 0020 03D1     		bne	.L158
 993:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 1881              		.loc 1 993 0
 1882 0022 1A68     		ldr	r2, [r3]
 1883 0024 42F48032 		orr	r2, r2, #65536
 1884 0028 1A60     		str	r2, [r3]
 1885              	.L158:
 997:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1886              		.loc 1 997 0
 1887 002a 0023     		movs	r3, #0
 1888 002c 80F87C30 		strb	r3, [r0, #124]
 999:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 1889              		.loc 1 999 0
 1890 0030 1846     		mov	r0, r3
 1891              	.LVL148:
 1892 0032 7047     		bx	lr
 1893              	.LVL149:
 1894              	.L159:
 984:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1895              		.loc 1 984 0
 1896 0034 0220     		movs	r0, #2
 1897              	.LVL150:
1000:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1898              		.loc 1 1000 0
 1899 0036 7047     		bx	lr
 1900              		.cfi_endproc
 1901              	.LFE146:
 1903              		.section	.text.HAL_SAI_DMAStop,"ax",%progbits
 1904              		.align	2
 1905              		.global	HAL_SAI_DMAStop
 1906              		.thumb
 1907              		.thumb_func
 1909              	HAL_SAI_DMAStop:
 1910              	.LFB147:
1009:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Locked */
 1911              		.loc 1 1009 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 1915              	.LVL151:
1011:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1916              		.loc 1 1011 0
 1917 0000 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 1918 0004 012B     		cmp	r3, #1
 1919 0006 22D0     		beq	.L164
1009:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Locked */
 1920              		.loc 1 1009 0 discriminator 2
 1921 0008 10B5     		push	{r4, lr}
 1922              	.LCFI17:
 1923              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc0s4dWM.s 			page 72


 1924              		.cfi_offset 4, -8
 1925              		.cfi_offset 14, -4
 1926 000a 0446     		mov	r4, r0
1011:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1927              		.loc 1 1011 0 discriminator 2
 1928 000c 0123     		movs	r3, #1
 1929 000e 80F87C30 		strb	r3, [r0, #124]
1014:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1930              		.loc 1 1014 0 discriminator 2
 1931 0012 0268     		ldr	r2, [r0]
 1932 0014 1368     		ldr	r3, [r2]
 1933 0016 23F40033 		bic	r3, r3, #131072
 1934 001a 1360     		str	r3, [r2]
1017:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1935              		.loc 1 1017 0 discriminator 2
 1936 001c C06E     		ldr	r0, [r0, #108]
 1937              	.LVL152:
 1938 001e 10B1     		cbz	r0, .L162
1019:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1939              		.loc 1 1019 0
 1940 0020 FFF7FEFF 		bl	HAL_DMA_Abort
 1941              	.LVL153:
 1942 0024 A8B9     		cbnz	r0, .L165
 1943              	.L162:
1025:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 1944              		.loc 1 1025 0
 1945 0026 206F     		ldr	r0, [r4, #112]
 1946 0028 10B1     		cbz	r0, .L163
1027:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 1947              		.loc 1 1027 0
 1948 002a FFF7FEFF 		bl	HAL_DMA_Abort
 1949              	.LVL154:
 1950 002e 90B9     		cbnz	r0, .L166
 1951              	.L163:
1034:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1952              		.loc 1 1034 0
 1953 0030 2046     		mov	r0, r4
 1954 0032 FFF7FEFF 		bl	SAI_Disable
 1955              	.LVL155:
1037:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1956              		.loc 1 1037 0
 1957 0036 2268     		ldr	r2, [r4]
 1958 0038 5368     		ldr	r3, [r2, #4]
 1959 003a 43F00803 		orr	r3, r3, #8
 1960 003e 5360     		str	r3, [r2, #4]
1039:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1961              		.loc 1 1039 0
 1962 0040 0123     		movs	r3, #1
 1963 0042 84F87D30 		strb	r3, [r4, #125]
1042:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1964              		.loc 1 1042 0
 1965 0046 0020     		movs	r0, #0
 1966 0048 84F87C00 		strb	r0, [r4, #124]
1044:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 1967              		.loc 1 1044 0
 1968 004c 10BD     		pop	{r4, pc}
 1969              	.LVL156:
ARM GAS  /tmp/cc0s4dWM.s 			page 73


 1970              	.L164:
 1971              	.LCFI18:
 1972              		.cfi_def_cfa_offset 0
 1973              		.cfi_restore 4
 1974              		.cfi_restore 14
1011:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1975              		.loc 1 1011 0
 1976 004e 0220     		movs	r0, #2
 1977              	.LVL157:
1045:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1978              		.loc 1 1045 0
 1979 0050 7047     		bx	lr
 1980              	.LVL158:
 1981              	.L165:
 1982              	.LCFI19:
 1983              		.cfi_def_cfa_offset 8
 1984              		.cfi_offset 4, -8
 1985              		.cfi_offset 14, -4
1021:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 1986              		.loc 1 1021 0
 1987 0052 0120     		movs	r0, #1
 1988 0054 10BD     		pop	{r4, pc}
 1989              	.LVL159:
 1990              	.L166:
1029:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 1991              		.loc 1 1029 0
 1992 0056 0120     		movs	r0, #1
1045:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 1993              		.loc 1 1045 0
 1994 0058 10BD     		pop	{r4, pc}
 1995              		.cfi_endproc
 1996              	.LFE147:
 1998 005a 00BF     		.section	.text.HAL_SAI_Abort,"ax",%progbits
 1999              		.align	2
 2000              		.global	HAL_SAI_Abort
 2001              		.thumb
 2002              		.thumb_func
 2004              	HAL_SAI_Abort:
 2005              	.LFB148:
1054:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Process Locked */
 2006              		.loc 1 1054 0
 2007              		.cfi_startproc
 2008              		@ args = 0, pretend = 0, frame = 0
 2009              		@ frame_needed = 0, uses_anonymous_args = 0
 2010              	.LVL160:
 2011 0000 38B5     		push	{r3, r4, r5, lr}
 2012              	.LCFI20:
 2013              		.cfi_def_cfa_offset 16
 2014              		.cfi_offset 3, -16
 2015              		.cfi_offset 4, -12
 2016              		.cfi_offset 5, -8
 2017              		.cfi_offset 14, -4
1056:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2018              		.loc 1 1056 0
 2019 0002 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 2020 0006 012B     		cmp	r3, #1
 2021 0008 2CD0     		beq	.L172
ARM GAS  /tmp/cc0s4dWM.s 			page 74


 2022 000a 0446     		mov	r4, r0
1056:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2023              		.loc 1 1056 0 is_stmt 0 discriminator 2
 2024 000c 0123     		movs	r3, #1
 2025 000e 80F87C30 		strb	r3, [r0, #124]
1059:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2026              		.loc 1 1059 0 is_stmt 1 discriminator 2
 2027 0012 0368     		ldr	r3, [r0]
 2028 0014 1A68     		ldr	r2, [r3]
 2029 0016 12F4003F 		tst	r2, #131072
 2030 001a 0DD0     		beq	.L170
1062:HALLIB/Src/stm32f7xx_hal_sai.c ****     
 2031              		.loc 1 1062 0
 2032 001c 1A68     		ldr	r2, [r3]
 2033 001e 22F40032 		bic	r2, r2, #131072
 2034 0022 1A60     		str	r2, [r3]
1065:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 2035              		.loc 1 1065 0
 2036 0024 C06E     		ldr	r0, [r0, #108]
 2037              	.LVL161:
 2038 0026 10B1     		cbz	r0, .L171
1067:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 2039              		.loc 1 1067 0
 2040 0028 FFF7FEFF 		bl	HAL_DMA_Abort
 2041              	.LVL162:
 2042 002c E0B9     		cbnz	r0, .L173
 2043              	.L171:
1073:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 2044              		.loc 1 1073 0
 2045 002e 206F     		ldr	r0, [r4, #112]
 2046 0030 10B1     		cbz	r0, .L170
1075:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 2047              		.loc 1 1075 0
 2048 0032 FFF7FEFF 		bl	HAL_DMA_Abort
 2049              	.LVL163:
 2050 0036 C8B9     		cbnz	r0, .L174
 2051              	.L170:
1082:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CLRFR = 0xFFFFFFFFU;
 2052              		.loc 1 1082 0
 2053 0038 2368     		ldr	r3, [r4]
 2054 003a 0025     		movs	r5, #0
 2055 003c 1D61     		str	r5, [r3, #16]
1083:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2056              		.loc 1 1083 0
 2057 003e 2368     		ldr	r3, [r4]
 2058 0040 4FF0FF32 		mov	r2, #-1
 2059 0044 9A61     		str	r2, [r3, #24]
1086:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2060              		.loc 1 1086 0
 2061 0046 2046     		mov	r0, r4
 2062 0048 FFF7FEFF 		bl	SAI_Disable
 2063              	.LVL164:
1089:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2064              		.loc 1 1089 0
 2065 004c 2268     		ldr	r2, [r4]
 2066 004e 5368     		ldr	r3, [r2, #4]
 2067 0050 43F00803 		orr	r3, r3, #8
ARM GAS  /tmp/cc0s4dWM.s 			page 75


 2068 0054 5360     		str	r3, [r2, #4]
1091:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2069              		.loc 1 1091 0
 2070 0056 0123     		movs	r3, #1
 2071 0058 84F87D30 		strb	r3, [r4, #125]
1094:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2072              		.loc 1 1094 0
 2073 005c 84F87C50 		strb	r5, [r4, #124]
1096:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 2074              		.loc 1 1096 0
 2075 0060 2846     		mov	r0, r5
 2076 0062 38BD     		pop	{r3, r4, r5, pc}
 2077              	.LVL165:
 2078              	.L172:
1056:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2079              		.loc 1 1056 0
 2080 0064 0220     		movs	r0, #2
 2081              	.LVL166:
 2082 0066 38BD     		pop	{r3, r4, r5, pc}
 2083              	.LVL167:
 2084              	.L173:
1069:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 2085              		.loc 1 1069 0
 2086 0068 0120     		movs	r0, #1
 2087 006a 38BD     		pop	{r3, r4, r5, pc}
 2088              	.LVL168:
 2089              	.L174:
1077:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 2090              		.loc 1 1077 0
 2091 006c 0120     		movs	r0, #1
1097:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2092              		.loc 1 1097 0
 2093 006e 38BD     		pop	{r3, r4, r5, pc}
 2094              		.cfi_endproc
 2095              	.LFE148:
 2097              		.section	.text.HAL_SAI_Transmit_DMA,"ax",%progbits
 2098              		.align	2
 2099              		.global	HAL_SAI_Transmit_DMA
 2100              		.thumb
 2101              		.thumb_func
 2103              	HAL_SAI_Transmit_DMA:
 2104              	.LFB149:
1108:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((pData == NULL) || (Size == 0))
 2105              		.loc 1 1108 0
 2106              		.cfi_startproc
 2107              		@ args = 0, pretend = 0, frame = 0
 2108              		@ frame_needed = 0, uses_anonymous_args = 0
 2109              	.LVL169:
 2110 0000 38B5     		push	{r3, r4, r5, lr}
 2111              	.LCFI21:
 2112              		.cfi_def_cfa_offset 16
 2113              		.cfi_offset 3, -16
 2114              		.cfi_offset 4, -12
 2115              		.cfi_offset 5, -8
 2116              		.cfi_offset 14, -4
1109:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2117              		.loc 1 1109 0
ARM GAS  /tmp/cc0s4dWM.s 			page 76


 2118 0002 002A     		cmp	r2, #0
 2119 0004 18BF     		it	ne
 2120 0006 0029     		cmpne	r1, #0
 2121 0008 4CD0     		beq	.L180
 2122 000a 1446     		mov	r4, r2
1114:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2123              		.loc 1 1114 0
 2124 000c 90F87D30 		ldrb	r3, [r0, #125]	@ zero_extendqisi2
 2125 0010 DBB2     		uxtb	r3, r3
 2126 0012 012B     		cmp	r3, #1
 2127 0014 48D1     		bne	.L181
1117:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2128              		.loc 1 1117 0
 2129 0016 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 2130 001a 012B     		cmp	r3, #1
 2131 001c 46D0     		beq	.L182
 2132 001e 0546     		mov	r5, r0
1117:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2133              		.loc 1 1117 0 is_stmt 0 discriminator 2
 2134 0020 0122     		movs	r2, #1
 2135              	.LVL170:
 2136 0022 80F87C20 		strb	r2, [r0, #124]
1119:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferSize = Size;
 2137              		.loc 1 1119 0 is_stmt 1 discriminator 2
 2138 0026 6966     		str	r1, [r5, #100]
1120:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
 2139              		.loc 1 1120 0 discriminator 2
 2140 0028 A0F86840 		strh	r4, [r0, #104]	@ movhi
1121:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 2141              		.loc 1 1121 0 discriminator 2
 2142 002c A0F86A40 		strh	r4, [r0, #106]	@ movhi
1122:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_TX;
 2143              		.loc 1 1122 0 discriminator 2
 2144 0030 0023     		movs	r3, #0
 2145 0032 C0F88030 		str	r3, [r0, #128]
1123:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2146              		.loc 1 1123 0 discriminator 2
 2147 0036 1222     		movs	r2, #18
 2148 0038 80F87D20 		strb	r2, [r0, #125]
1126:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2149              		.loc 1 1126 0 discriminator 2
 2150 003c C26E     		ldr	r2, [r0, #108]
 2151 003e 1D49     		ldr	r1, .L184
 2152              	.LVL171:
 2153 0040 1164     		str	r1, [r2, #64]
 2154              	.LVL172:
1129:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2155              		.loc 1 1129 0 discriminator 2
 2156 0042 C26E     		ldr	r2, [r0, #108]
 2157 0044 1C49     		ldr	r1, .L184+4
 2158 0046 D163     		str	r1, [r2, #60]
1132:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2159              		.loc 1 1132 0 discriminator 2
 2160 0048 C26E     		ldr	r2, [r0, #108]
 2161 004a 1C49     		ldr	r1, .L184+8
 2162 004c D164     		str	r1, [r2, #76]
1135:HALLIB/Src/stm32f7xx_hal_sai.c **** 
ARM GAS  /tmp/cc0s4dWM.s 			page 77


 2163              		.loc 1 1135 0 discriminator 2
 2164 004e C26E     		ldr	r2, [r0, #108]
 2165 0050 1365     		str	r3, [r2, #80]
1138:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 2166              		.loc 1 1138 0 discriminator 2
 2167 0052 0268     		ldr	r2, [r0]
 2168 0054 B0F86830 		ldrh	r3, [r0, #104]
 2169 0058 1C32     		adds	r2, r2, #28
 2170 005a 416E     		ldr	r1, [r0, #100]
 2171 005c C06E     		ldr	r0, [r0, #108]
 2172              	.LVL173:
 2173 005e FFF7FEFF 		bl	HAL_DMA_Start_IT
 2174              	.LVL174:
 2175 0062 0446     		mov	r4, r0
 2176 0064 20B1     		cbz	r0, .L178
1140:HALLIB/Src/stm32f7xx_hal_sai.c ****       return  HAL_ERROR;
 2177              		.loc 1 1140 0
 2178 0066 0023     		movs	r3, #0
 2179 0068 85F87C30 		strb	r3, [r5, #124]
1141:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 2180              		.loc 1 1141 0
 2181 006c 0124     		movs	r4, #1
 2182 006e 1EE0     		b	.L177
 2183              	.L178:
1145:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 2184              		.loc 1 1145 0
 2185 0070 2B68     		ldr	r3, [r5]
 2186 0072 1A68     		ldr	r2, [r3]
 2187 0074 12F4803F 		tst	r2, #65536
 2188 0078 03D1     		bne	.L179
1148:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 2189              		.loc 1 1148 0
 2190 007a 1A68     		ldr	r2, [r3]
 2191 007c 42F48032 		orr	r2, r2, #65536
 2192 0080 1A60     		str	r2, [r3]
 2193              	.L179:
1152:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2194              		.loc 1 1152 0
 2195 0082 0021     		movs	r1, #0
 2196 0084 2846     		mov	r0, r5
 2197 0086 FFF7FEFF 		bl	SAI_InterruptFlag
 2198              	.LVL175:
 2199 008a 2A68     		ldr	r2, [r5]
 2200 008c 1369     		ldr	r3, [r2, #16]
 2201 008e 1843     		orrs	r0, r0, r3
 2202 0090 1061     		str	r0, [r2, #16]
1155:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2203              		.loc 1 1155 0
 2204 0092 2A68     		ldr	r2, [r5]
 2205 0094 1368     		ldr	r3, [r2]
 2206 0096 43F40033 		orr	r3, r3, #131072
 2207 009a 1360     		str	r3, [r2]
1158:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2208              		.loc 1 1158 0
 2209 009c 0023     		movs	r3, #0
 2210 009e 85F87C30 		strb	r3, [r5, #124]
1160:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
ARM GAS  /tmp/cc0s4dWM.s 			page 78


 2211              		.loc 1 1160 0
 2212 00a2 04E0     		b	.L177
 2213              	.LVL176:
 2214              	.L180:
1111:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2215              		.loc 1 1111 0
 2216 00a4 0124     		movs	r4, #1
 2217 00a6 02E0     		b	.L177
 2218              	.L181:
1164:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2219              		.loc 1 1164 0
 2220 00a8 0224     		movs	r4, #2
 2221 00aa 00E0     		b	.L177
 2222              	.L182:
1117:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2223              		.loc 1 1117 0
 2224 00ac 0224     		movs	r4, #2
 2225              	.LVL177:
 2226              	.L177:
1166:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2227              		.loc 1 1166 0
 2228 00ae 2046     		mov	r0, r4
 2229 00b0 38BD     		pop	{r3, r4, r5, pc}
 2230              	.L185:
 2231 00b2 00BF     		.align	2
 2232              	.L184:
 2233 00b4 00000000 		.word	SAI_DMATxHalfCplt
 2234 00b8 00000000 		.word	SAI_DMATxCplt
 2235 00bc 00000000 		.word	SAI_DMAError
 2236              		.cfi_endproc
 2237              	.LFE149:
 2239              		.section	.text.HAL_SAI_Receive_DMA,"ax",%progbits
 2240              		.align	2
 2241              		.global	HAL_SAI_Receive_DMA
 2242              		.thumb
 2243              		.thumb_func
 2245              	HAL_SAI_Receive_DMA:
 2246              	.LFB150:
1177:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2247              		.loc 1 1177 0
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 0
 2250              		@ frame_needed = 0, uses_anonymous_args = 0
 2251              	.LVL178:
 2252 0000 38B5     		push	{r3, r4, r5, lr}
 2253              	.LCFI22:
 2254              		.cfi_def_cfa_offset 16
 2255              		.cfi_offset 3, -16
 2256              		.cfi_offset 4, -12
 2257              		.cfi_offset 5, -8
 2258              		.cfi_offset 14, -4
1179:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2259              		.loc 1 1179 0
 2260 0002 002A     		cmp	r2, #0
 2261 0004 18BF     		it	ne
 2262 0006 0029     		cmpne	r1, #0
 2263 0008 4CD0     		beq	.L190
ARM GAS  /tmp/cc0s4dWM.s 			page 79


 2264 000a 1446     		mov	r4, r2
1184:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2265              		.loc 1 1184 0
 2266 000c 90F87D30 		ldrb	r3, [r0, #125]	@ zero_extendqisi2
 2267 0010 DBB2     		uxtb	r3, r3
 2268 0012 012B     		cmp	r3, #1
 2269 0014 48D1     		bne	.L191
1187:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2270              		.loc 1 1187 0
 2271 0016 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 2272 001a 012B     		cmp	r3, #1
 2273 001c 46D0     		beq	.L192
 2274 001e 0546     		mov	r5, r0
1187:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2275              		.loc 1 1187 0 is_stmt 0 discriminator 2
 2276 0020 0122     		movs	r2, #1
 2277              	.LVL179:
 2278 0022 80F87C20 		strb	r2, [r0, #124]
1189:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferSize = Size;
 2279              		.loc 1 1189 0 is_stmt 1 discriminator 2
 2280 0026 6966     		str	r1, [r5, #100]
1190:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = Size;
 2281              		.loc 1 1190 0 discriminator 2
 2282 0028 A0F86840 		strh	r4, [r0, #104]	@ movhi
1191:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 2283              		.loc 1 1191 0 discriminator 2
 2284 002c A0F86A40 		strh	r4, [r0, #106]	@ movhi
1192:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_BUSY_RX;
 2285              		.loc 1 1192 0 discriminator 2
 2286 0030 0023     		movs	r3, #0
 2287 0032 C0F88030 		str	r3, [r0, #128]
1193:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2288              		.loc 1 1193 0 discriminator 2
 2289 0036 2222     		movs	r2, #34
 2290 0038 80F87D20 		strb	r2, [r0, #125]
1196:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2291              		.loc 1 1196 0 discriminator 2
 2292 003c 026F     		ldr	r2, [r0, #112]
 2293 003e 1D49     		ldr	r1, .L194
 2294              	.LVL180:
 2295 0040 1164     		str	r1, [r2, #64]
 2296              	.LVL181:
1199:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2297              		.loc 1 1199 0 discriminator 2
 2298 0042 026F     		ldr	r2, [r0, #112]
 2299 0044 1C49     		ldr	r1, .L194+4
 2300 0046 D163     		str	r1, [r2, #60]
1202:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2301              		.loc 1 1202 0 discriminator 2
 2302 0048 026F     		ldr	r2, [r0, #112]
 2303 004a 1C49     		ldr	r1, .L194+8
 2304 004c D164     		str	r1, [r2, #76]
1205:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2305              		.loc 1 1205 0 discriminator 2
 2306 004e 026F     		ldr	r2, [r0, #112]
 2307 0050 1365     		str	r3, [r2, #80]
1208:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
ARM GAS  /tmp/cc0s4dWM.s 			page 80


 2308              		.loc 1 1208 0 discriminator 2
 2309 0052 0168     		ldr	r1, [r0]
 2310 0054 B0F86830 		ldrh	r3, [r0, #104]
 2311 0058 426E     		ldr	r2, [r0, #100]
 2312 005a 1C31     		adds	r1, r1, #28
 2313 005c 006F     		ldr	r0, [r0, #112]
 2314              	.LVL182:
 2315 005e FFF7FEFF 		bl	HAL_DMA_Start_IT
 2316              	.LVL183:
 2317 0062 0446     		mov	r4, r0
 2318 0064 20B1     		cbz	r0, .L188
1210:HALLIB/Src/stm32f7xx_hal_sai.c ****       return  HAL_ERROR;
 2319              		.loc 1 1210 0
 2320 0066 0023     		movs	r3, #0
 2321 0068 85F87C30 		strb	r3, [r5, #124]
1211:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 2322              		.loc 1 1211 0
 2323 006c 0124     		movs	r4, #1
 2324 006e 1EE0     		b	.L187
 2325              	.L188:
1215:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 2326              		.loc 1 1215 0
 2327 0070 2B68     		ldr	r3, [r5]
 2328 0072 1A68     		ldr	r2, [r3]
 2329 0074 12F4803F 		tst	r2, #65536
 2330 0078 03D1     		bne	.L189
1218:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 2331              		.loc 1 1218 0
 2332 007a 1A68     		ldr	r2, [r3]
 2333 007c 42F48032 		orr	r2, r2, #65536
 2334 0080 1A60     		str	r2, [r3]
 2335              	.L189:
1222:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2336              		.loc 1 1222 0
 2337 0082 0021     		movs	r1, #0
 2338 0084 2846     		mov	r0, r5
 2339 0086 FFF7FEFF 		bl	SAI_InterruptFlag
 2340              	.LVL184:
 2341 008a 2A68     		ldr	r2, [r5]
 2342 008c 1369     		ldr	r3, [r2, #16]
 2343 008e 1843     		orrs	r0, r0, r3
 2344 0090 1061     		str	r0, [r2, #16]
1225:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2345              		.loc 1 1225 0
 2346 0092 2A68     		ldr	r2, [r5]
 2347 0094 1368     		ldr	r3, [r2]
 2348 0096 43F40033 		orr	r3, r3, #131072
 2349 009a 1360     		str	r3, [r2]
1228:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2350              		.loc 1 1228 0
 2351 009c 0023     		movs	r3, #0
 2352 009e 85F87C30 		strb	r3, [r5, #124]
1230:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2353              		.loc 1 1230 0
 2354 00a2 04E0     		b	.L187
 2355              	.LVL185:
 2356              	.L190:
ARM GAS  /tmp/cc0s4dWM.s 			page 81


1181:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2357              		.loc 1 1181 0
 2358 00a4 0124     		movs	r4, #1
 2359 00a6 02E0     		b	.L187
 2360              	.L191:
1234:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2361              		.loc 1 1234 0
 2362 00a8 0224     		movs	r4, #2
 2363 00aa 00E0     		b	.L187
 2364              	.L192:
1187:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2365              		.loc 1 1187 0
 2366 00ac 0224     		movs	r4, #2
 2367              	.LVL186:
 2368              	.L187:
1236:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2369              		.loc 1 1236 0
 2370 00ae 2046     		mov	r0, r4
 2371 00b0 38BD     		pop	{r3, r4, r5, pc}
 2372              	.L195:
 2373 00b2 00BF     		.align	2
 2374              	.L194:
 2375 00b4 00000000 		.word	SAI_DMARxHalfCplt
 2376 00b8 00000000 		.word	SAI_DMARxCplt
 2377 00bc 00000000 		.word	SAI_DMAError
 2378              		.cfi_endproc
 2379              	.LFE150:
 2381              		.section	.text.HAL_SAI_EnableTxMuteMode,"ax",%progbits
 2382              		.align	2
 2383              		.global	HAL_SAI_EnableTxMuteMode
 2384              		.thumb
 2385              		.thumb_func
 2387              	HAL_SAI_EnableTxMuteMode:
 2388              	.LFB151:
1246:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_MUTE_VALUE(val));
 2389              		.loc 1 1246 0
 2390              		.cfi_startproc
 2391              		@ args = 0, pretend = 0, frame = 0
 2392              		@ frame_needed = 0, uses_anonymous_args = 0
 2393              		@ link register save eliminated.
 2394              	.LVL187:
1249:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2395              		.loc 1 1249 0
 2396 0000 90F87D30 		ldrb	r3, [r0, #125]	@ zero_extendqisi2
 2397 0004 13F0FF0F 		tst	r3, #255
 2398 0008 0CD0     		beq	.L198
1251:HALLIB/Src/stm32f7xx_hal_sai.c ****     SET_BIT(hsai->Instance->CR2, SAI_xCR2_MUTE | val);
 2399              		.loc 1 1251 0
 2400 000a 0268     		ldr	r2, [r0]
 2401 000c 5368     		ldr	r3, [r2, #4]
 2402 000e 23F06003 		bic	r3, r3, #96
 2403 0012 5360     		str	r3, [r2, #4]
1252:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
 2404              		.loc 1 1252 0
 2405 0014 0268     		ldr	r2, [r0]
 2406 0016 5368     		ldr	r3, [r2, #4]
 2407 0018 41F02001 		orr	r1, r1, #32
ARM GAS  /tmp/cc0s4dWM.s 			page 82


 2408              	.LVL188:
 2409 001c 1943     		orrs	r1, r1, r3
 2410 001e 5160     		str	r1, [r2, #4]
1253:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2411              		.loc 1 1253 0
 2412 0020 0020     		movs	r0, #0
 2413              	.LVL189:
 2414 0022 7047     		bx	lr
 2415              	.LVL190:
 2416              	.L198:
1255:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 2417              		.loc 1 1255 0
 2418 0024 0120     		movs	r0, #1
 2419              	.LVL191:
1256:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2420              		.loc 1 1256 0
 2421 0026 7047     		bx	lr
 2422              		.cfi_endproc
 2423              	.LFE151:
 2425              		.section	.text.HAL_SAI_DisableTxMuteMode,"ax",%progbits
 2426              		.align	2
 2427              		.global	HAL_SAI_DisableTxMuteMode
 2428              		.thumb
 2429              		.thumb_func
 2431              	HAL_SAI_DisableTxMuteMode:
 2432              	.LFB152:
1265:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State != HAL_SAI_STATE_RESET)
 2433              		.loc 1 1265 0
 2434              		.cfi_startproc
 2435              		@ args = 0, pretend = 0, frame = 0
 2436              		@ frame_needed = 0, uses_anonymous_args = 0
 2437              		@ link register save eliminated.
 2438              	.LVL192:
1266:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2439              		.loc 1 1266 0
 2440 0000 90F87D30 		ldrb	r3, [r0, #125]	@ zero_extendqisi2
 2441 0004 13F0FF0F 		tst	r3, #255
 2442 0008 06D0     		beq	.L201
1268:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
 2443              		.loc 1 1268 0
 2444 000a 0268     		ldr	r2, [r0]
 2445 000c 5368     		ldr	r3, [r2, #4]
 2446 000e 23F06003 		bic	r3, r3, #96
 2447 0012 5360     		str	r3, [r2, #4]
1269:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2448              		.loc 1 1269 0
 2449 0014 0020     		movs	r0, #0
 2450              	.LVL193:
 2451 0016 7047     		bx	lr
 2452              	.LVL194:
 2453              	.L201:
1271:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 2454              		.loc 1 1271 0
 2455 0018 0120     		movs	r0, #1
 2456              	.LVL195:
1272:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2457              		.loc 1 1272 0
ARM GAS  /tmp/cc0s4dWM.s 			page 83


 2458 001a 7047     		bx	lr
 2459              		.cfi_endproc
 2460              	.LFE152:
 2462              		.section	.text.HAL_SAI_EnableRxMuteMode,"ax",%progbits
 2463              		.align	2
 2464              		.global	HAL_SAI_EnableRxMuteMode
 2465              		.thumb
 2466              		.thumb_func
 2468              	HAL_SAI_EnableRxMuteMode:
 2469              	.LFB153:
1283:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_MUTE_COUNTER(counter));
 2470              		.loc 1 1283 0
 2471              		.cfi_startproc
 2472              		@ args = 0, pretend = 0, frame = 0
 2473              		@ frame_needed = 0, uses_anonymous_args = 0
 2474              		@ link register save eliminated.
 2475              	.LVL196:
1286:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2476              		.loc 1 1286 0
 2477 0000 90F87D30 		ldrb	r3, [r0, #125]	@ zero_extendqisi2
 2478 0004 13F0FF0F 		tst	r3, #255
 2479 0008 12D0     		beq	.L204
1283:HALLIB/Src/stm32f7xx_hal_sai.c ****   assert_param(IS_SAI_BLOCK_MUTE_COUNTER(counter));
 2480              		.loc 1 1283 0
 2481 000a 10B4     		push	{r4}
 2482              	.LCFI23:
 2483              		.cfi_def_cfa_offset 4
 2484              		.cfi_offset 4, -4
1289:HALLIB/Src/stm32f7xx_hal_sai.c ****     SET_BIT(hsai->Instance->CR2, (uint32_t)((uint32_t)counter << SAI_xCR2_MUTECNT_Pos));
 2485              		.loc 1 1289 0
 2486 000c 0468     		ldr	r4, [r0]
 2487 000e 6368     		ldr	r3, [r4, #4]
 2488 0010 23F4FC53 		bic	r3, r3, #8064
 2489 0014 6360     		str	r3, [r4, #4]
1290:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->mutecallback = callback;
 2490              		.loc 1 1290 0
 2491 0016 0468     		ldr	r4, [r0]
 2492 0018 6368     		ldr	r3, [r4, #4]
 2493 001a 43EAC212 		orr	r2, r3, r2, lsl #7
 2494              	.LVL197:
 2495 001e 6260     		str	r2, [r4, #4]
1291:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* enable the IT interrupt */
 2496              		.loc 1 1291 0
 2497 0020 4167     		str	r1, [r0, #116]
1293:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
 2498              		.loc 1 1293 0
 2499 0022 0268     		ldr	r2, [r0]
 2500 0024 1369     		ldr	r3, [r2, #16]
 2501 0026 43F00203 		orr	r3, r3, #2
 2502 002a 1361     		str	r3, [r2, #16]
1294:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2503              		.loc 1 1294 0
 2504 002c 0020     		movs	r0, #0
 2505              	.LVL198:
 2506 002e 01E0     		b	.L203
 2507              	.LVL199:
 2508              	.L204:
ARM GAS  /tmp/cc0s4dWM.s 			page 84


 2509              	.LCFI24:
 2510              		.cfi_def_cfa_offset 0
 2511              		.cfi_restore 4
1296:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 2512              		.loc 1 1296 0
 2513 0030 0120     		movs	r0, #1
 2514              	.LVL200:
 2515 0032 7047     		bx	lr
 2516              	.LVL201:
 2517              	.L203:
 2518              	.LCFI25:
 2519              		.cfi_def_cfa_offset 4
 2520              		.cfi_offset 4, -4
1297:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2521              		.loc 1 1297 0
 2522 0034 5DF8044B 		ldr	r4, [sp], #4
 2523              	.LCFI26:
 2524              		.cfi_restore 4
 2525              		.cfi_def_cfa_offset 0
 2526 0038 7047     		bx	lr
 2527              		.cfi_endproc
 2528              	.LFE153:
 2530 003a 00BF     		.section	.text.HAL_SAI_DisableRxMuteMode,"ax",%progbits
 2531              		.align	2
 2532              		.global	HAL_SAI_DisableRxMuteMode
 2533              		.thumb
 2534              		.thumb_func
 2536              	HAL_SAI_DisableRxMuteMode:
 2537              	.LFB154:
1306:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State != HAL_SAI_STATE_RESET)
 2538              		.loc 1 1306 0
 2539              		.cfi_startproc
 2540              		@ args = 0, pretend = 0, frame = 0
 2541              		@ frame_needed = 0, uses_anonymous_args = 0
 2542              		@ link register save eliminated.
 2543              	.LVL202:
1307:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2544              		.loc 1 1307 0
 2545 0000 90F87D30 		ldrb	r3, [r0, #125]	@ zero_extendqisi2
 2546 0004 13F0FF0F 		tst	r3, #255
 2547 0008 08D0     		beq	.L209
1310:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* enable the IT interrupt */
 2548              		.loc 1 1310 0
 2549 000a 0023     		movs	r3, #0
 2550 000c 4367     		str	r3, [r0, #116]
1312:HALLIB/Src/stm32f7xx_hal_sai.c ****     return HAL_OK;
 2551              		.loc 1 1312 0
 2552 000e 0168     		ldr	r1, [r0]
 2553 0010 0A69     		ldr	r2, [r1, #16]
 2554 0012 22F00202 		bic	r2, r2, #2
 2555 0016 0A61     		str	r2, [r1, #16]
1313:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2556              		.loc 1 1313 0
 2557 0018 1846     		mov	r0, r3
 2558              	.LVL203:
 2559 001a 7047     		bx	lr
 2560              	.LVL204:
ARM GAS  /tmp/cc0s4dWM.s 			page 85


 2561              	.L209:
1315:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 2562              		.loc 1 1315 0
 2563 001c 0120     		movs	r0, #1
 2564              	.LVL205:
1316:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2565              		.loc 1 1316 0
 2566 001e 7047     		bx	lr
 2567              		.cfi_endproc
 2568              	.LFE154:
 2570              		.section	.text.HAL_SAI_TxCpltCallback,"ax",%progbits
 2571              		.align	2
 2572              		.weak	HAL_SAI_TxCpltCallback
 2573              		.thumb
 2574              		.thumb_func
 2576              	HAL_SAI_TxCpltCallback:
 2577              	.LFB156:
1491:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
 2578              		.loc 1 1491 0
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 0
 2581              		@ frame_needed = 0, uses_anonymous_args = 0
 2582              		@ link register save eliminated.
 2583              	.LVL206:
 2584 0000 7047     		bx	lr
 2585              		.cfi_endproc
 2586              	.LFE156:
 2588 0002 00BF     		.section	.text.SAI_Transmit_IT32Bit,"ax",%progbits
 2589              		.align	2
 2590              		.thumb
 2591              		.thumb_func
 2593              	SAI_Transmit_IT32Bit:
 2594              	.LFB170:
1875:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1876:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1877:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Tx Handler for Transmit in Interrupt mode 8-Bit transfer.
1878:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1879:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1880:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1881:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1882:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Transmit_IT8Bit(SAI_HandleTypeDef *hsai)
1883:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1884:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->XferCount == 0)
1885:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1886:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Handle the end of the transmission */
1887:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable FREQ and OVRUDR interrupts */
1888:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_IT));
1889:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
1890:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_TxCpltCallback(hsai);
1891:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1892:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
1893:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1894:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Write data on DR register */
1895:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Instance->DR = (*hsai->pBuffPtr++);
1896:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount--;
1897:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1898:HALLIB/Src/stm32f7xx_hal_sai.c **** }
ARM GAS  /tmp/cc0s4dWM.s 			page 86


1899:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1900:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1901:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Tx Handler for Transmit in Interrupt mode for 16-Bit transfer.
1902:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1903:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1904:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1905:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1906:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Transmit_IT16Bit(SAI_HandleTypeDef *hsai)
1907:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1908:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->XferCount == 0)
1909:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1910:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Handle the end of the transmission */
1911:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable FREQ and OVRUDR interrupts */
1912:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_IT));
1913:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
1914:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_TxCpltCallback(hsai);
1915:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1916:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
1917:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1918:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Write data on DR register */
1919:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Instance->DR = *(uint16_t *)hsai->pBuffPtr;
1920:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->pBuffPtr+=2;
1921:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount--;
1922:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1923:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1924:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1925:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1926:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Tx Handler for Transmit in Interrupt mode for 32-Bit transfer.
1927:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1928:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1929:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1930:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1931:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Transmit_IT32Bit(SAI_HandleTypeDef *hsai)
1932:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 2595              		.loc 1 1932 0
 2596              		.cfi_startproc
 2597              		@ args = 0, pretend = 0, frame = 0
 2598              		@ frame_needed = 0, uses_anonymous_args = 0
 2599              	.LVL207:
1933:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->XferCount == 0)
 2600              		.loc 1 1933 0
 2601 0000 B0F86A30 		ldrh	r3, [r0, #106]
 2602 0004 83B9     		cbnz	r3, .L212
1932:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->XferCount == 0)
 2603              		.loc 1 1932 0
 2604 0006 10B5     		push	{r4, lr}
 2605              	.LCFI27:
 2606              		.cfi_def_cfa_offset 8
 2607              		.cfi_offset 4, -8
 2608              		.cfi_offset 14, -4
 2609 0008 0446     		mov	r4, r0
1934:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1935:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Handle the end of the transmission */
1936:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable FREQ and OVRUDR interrupts */
1937:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_IT));
 2610              		.loc 1 1937 0
 2611 000a 0121     		movs	r1, #1
ARM GAS  /tmp/cc0s4dWM.s 			page 87


 2612 000c FFF7FEFF 		bl	SAI_InterruptFlag
 2613              	.LVL208:
 2614 0010 2268     		ldr	r2, [r4]
 2615 0012 1369     		ldr	r3, [r2, #16]
 2616 0014 23EA0000 		bic	r0, r3, r0
 2617 0018 1061     		str	r0, [r2, #16]
1938:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
 2618              		.loc 1 1938 0
 2619 001a 0123     		movs	r3, #1
 2620 001c 84F87D30 		strb	r3, [r4, #125]
1939:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_TxCpltCallback(hsai);
 2621              		.loc 1 1939 0
 2622 0020 2046     		mov	r0, r4
 2623 0022 FFF7FEFF 		bl	HAL_SAI_TxCpltCallback
 2624              	.LVL209:
 2625 0026 10BD     		pop	{r4, pc}
 2626              	.LVL210:
 2627              	.L212:
 2628              	.LCFI28:
 2629              		.cfi_def_cfa_offset 0
 2630              		.cfi_restore 4
 2631              		.cfi_restore 14
1940:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1941:HALLIB/Src/stm32f7xx_hal_sai.c ****   else
1942:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1943:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Write data on DR register */
1944:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Instance->DR = *(uint32_t *)hsai->pBuffPtr;
 2632              		.loc 1 1944 0
 2633 0028 0368     		ldr	r3, [r0]
 2634 002a 426E     		ldr	r2, [r0, #100]
 2635 002c 1268     		ldr	r2, [r2]
 2636 002e DA61     		str	r2, [r3, #28]
1945:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->pBuffPtr+=4;
 2637              		.loc 1 1945 0
 2638 0030 436E     		ldr	r3, [r0, #100]
 2639 0032 0433     		adds	r3, r3, #4
 2640 0034 4366     		str	r3, [r0, #100]
1946:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount--;
 2641              		.loc 1 1946 0
 2642 0036 B0F86A30 		ldrh	r3, [r0, #106]
 2643 003a 013B     		subs	r3, r3, #1
 2644 003c A0F86A30 		strh	r3, [r0, #106]	@ movhi
1947:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1948:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 2645              		.loc 1 1948 0
 2646 0040 7047     		bx	lr
 2647              		.cfi_endproc
 2648              	.LFE170:
 2650 0042 00BF     		.section	.text.SAI_Transmit_IT16Bit,"ax",%progbits
 2651              		.align	2
 2652              		.thumb
 2653              		.thumb_func
 2655              	SAI_Transmit_IT16Bit:
 2656              	.LFB169:
1907:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->XferCount == 0)
 2657              		.loc 1 1907 0
 2658              		.cfi_startproc
ARM GAS  /tmp/cc0s4dWM.s 			page 88


 2659              		@ args = 0, pretend = 0, frame = 0
 2660              		@ frame_needed = 0, uses_anonymous_args = 0
 2661              	.LVL211:
1908:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2662              		.loc 1 1908 0
 2663 0000 B0F86A30 		ldrh	r3, [r0, #106]
 2664 0004 83B9     		cbnz	r3, .L217
1907:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->XferCount == 0)
 2665              		.loc 1 1907 0
 2666 0006 10B5     		push	{r4, lr}
 2667              	.LCFI29:
 2668              		.cfi_def_cfa_offset 8
 2669              		.cfi_offset 4, -8
 2670              		.cfi_offset 14, -4
 2671 0008 0446     		mov	r4, r0
1912:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
 2672              		.loc 1 1912 0
 2673 000a 0121     		movs	r1, #1
 2674 000c FFF7FEFF 		bl	SAI_InterruptFlag
 2675              	.LVL212:
 2676 0010 2268     		ldr	r2, [r4]
 2677 0012 1369     		ldr	r3, [r2, #16]
 2678 0014 23EA0000 		bic	r0, r3, r0
 2679 0018 1061     		str	r0, [r2, #16]
1913:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_TxCpltCallback(hsai);
 2680              		.loc 1 1913 0
 2681 001a 0123     		movs	r3, #1
 2682 001c 84F87D30 		strb	r3, [r4, #125]
1914:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2683              		.loc 1 1914 0
 2684 0020 2046     		mov	r0, r4
 2685 0022 FFF7FEFF 		bl	HAL_SAI_TxCpltCallback
 2686              	.LVL213:
 2687 0026 10BD     		pop	{r4, pc}
 2688              	.LVL214:
 2689              	.L217:
 2690              	.LCFI30:
 2691              		.cfi_def_cfa_offset 0
 2692              		.cfi_restore 4
 2693              		.cfi_restore 14
1919:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->pBuffPtr+=2;
 2694              		.loc 1 1919 0
 2695 0028 0368     		ldr	r3, [r0]
 2696 002a 426E     		ldr	r2, [r0, #100]
 2697 002c 1288     		ldrh	r2, [r2]
 2698 002e DA61     		str	r2, [r3, #28]
1920:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount--;
 2699              		.loc 1 1920 0
 2700 0030 436E     		ldr	r3, [r0, #100]
 2701 0032 0233     		adds	r3, r3, #2
 2702 0034 4366     		str	r3, [r0, #100]
1921:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2703              		.loc 1 1921 0
 2704 0036 B0F86A30 		ldrh	r3, [r0, #106]
 2705 003a 013B     		subs	r3, r3, #1
 2706 003c A0F86A30 		strh	r3, [r0, #106]	@ movhi
1923:HALLIB/Src/stm32f7xx_hal_sai.c **** 
ARM GAS  /tmp/cc0s4dWM.s 			page 89


 2707              		.loc 1 1923 0
 2708 0040 7047     		bx	lr
 2709              		.cfi_endproc
 2710              	.LFE169:
 2712 0042 00BF     		.section	.text.SAI_Transmit_IT8Bit,"ax",%progbits
 2713              		.align	2
 2714              		.thumb
 2715              		.thumb_func
 2717              	SAI_Transmit_IT8Bit:
 2718              	.LFB168:
1883:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->XferCount == 0)
 2719              		.loc 1 1883 0
 2720              		.cfi_startproc
 2721              		@ args = 0, pretend = 0, frame = 0
 2722              		@ frame_needed = 0, uses_anonymous_args = 0
 2723              	.LVL215:
1884:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2724              		.loc 1 1884 0
 2725 0000 B0F86A30 		ldrh	r3, [r0, #106]
 2726 0004 83B9     		cbnz	r3, .L222
1883:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->XferCount == 0)
 2727              		.loc 1 1883 0
 2728 0006 10B5     		push	{r4, lr}
 2729              	.LCFI31:
 2730              		.cfi_def_cfa_offset 8
 2731              		.cfi_offset 4, -8
 2732              		.cfi_offset 14, -4
 2733 0008 0446     		mov	r4, r0
1888:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
 2734              		.loc 1 1888 0
 2735 000a 0121     		movs	r1, #1
 2736 000c FFF7FEFF 		bl	SAI_InterruptFlag
 2737              	.LVL216:
 2738 0010 2268     		ldr	r2, [r4]
 2739 0012 1369     		ldr	r3, [r2, #16]
 2740 0014 23EA0000 		bic	r0, r3, r0
 2741 0018 1061     		str	r0, [r2, #16]
1889:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_TxCpltCallback(hsai);
 2742              		.loc 1 1889 0
 2743 001a 0123     		movs	r3, #1
 2744 001c 84F87D30 		strb	r3, [r4, #125]
1890:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2745              		.loc 1 1890 0
 2746 0020 2046     		mov	r0, r4
 2747 0022 FFF7FEFF 		bl	HAL_SAI_TxCpltCallback
 2748              	.LVL217:
 2749 0026 10BD     		pop	{r4, pc}
 2750              	.LVL218:
 2751              	.L222:
 2752              	.LCFI32:
 2753              		.cfi_def_cfa_offset 0
 2754              		.cfi_restore 4
 2755              		.cfi_restore 14
1895:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount--;
 2756              		.loc 1 1895 0
 2757 0028 0268     		ldr	r2, [r0]
 2758 002a 436E     		ldr	r3, [r0, #100]
ARM GAS  /tmp/cc0s4dWM.s 			page 90


 2759 002c 591C     		adds	r1, r3, #1
 2760 002e 4166     		str	r1, [r0, #100]
 2761 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2762 0032 D361     		str	r3, [r2, #28]
1896:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2763              		.loc 1 1896 0
 2764 0034 B0F86A30 		ldrh	r3, [r0, #106]
 2765 0038 013B     		subs	r3, r3, #1
 2766 003a A0F86A30 		strh	r3, [r0, #106]	@ movhi
1898:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2767              		.loc 1 1898 0
 2768 003e 7047     		bx	lr
 2769              		.cfi_endproc
 2770              	.LFE168:
 2772              		.section	.text.SAI_DMATxCplt,"ax",%progbits
 2773              		.align	2
 2774              		.thumb
 2775              		.thumb_func
 2777              	SAI_DMATxCplt:
 2778              	.LFB174:
1949:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1950:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1951:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Rx Handler for Receive in Interrupt mode 8-Bit transfer.
1952:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1953:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1954:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1955:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1956:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Receive_IT8Bit(SAI_HandleTypeDef *hsai)
1957:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1958:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Receive data */
1959:HALLIB/Src/stm32f7xx_hal_sai.c ****   (*hsai->pBuffPtr++) = hsai->Instance->DR;
1960:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->XferCount--;
1961:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1962:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check end of the transfer */
1963:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->XferCount == 0)
1964:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1965:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable TXE and OVRUDR interrupts */
1966:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_IT));
1967:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1968:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Clear the SAI Overrun flag */
1969:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
1970:HALLIB/Src/stm32f7xx_hal_sai.c ****     
1971:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
1972:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_RxCpltCallback(hsai);
1973:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
1974:HALLIB/Src/stm32f7xx_hal_sai.c **** }
1975:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1976:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
1977:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Rx Handler for Receive in Interrupt mode for 16-Bit transfer.
1978:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
1979:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
1980:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
1981:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
1982:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Receive_IT16Bit(SAI_HandleTypeDef *hsai)
1983:HALLIB/Src/stm32f7xx_hal_sai.c **** {
1984:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Receive data */
1985:HALLIB/Src/stm32f7xx_hal_sai.c ****   *(uint16_t*)hsai->pBuffPtr = hsai->Instance->DR;
ARM GAS  /tmp/cc0s4dWM.s 			page 91


1986:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->pBuffPtr+=2;
1987:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->XferCount--;
1988:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1989:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check end of the transfer */
1990:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->XferCount == 0)
1991:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
1992:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable TXE and OVRUDR interrupts */
1993:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_IT));
1994:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1995:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Clear the SAI Overrun flag */
1996:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
1997:HALLIB/Src/stm32f7xx_hal_sai.c **** 
1998:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
1999:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_RxCpltCallback(hsai);
2000:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
2001:HALLIB/Src/stm32f7xx_hal_sai.c **** }
2002:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
2003:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief  Rx Handler for Receive in Interrupt mode for 32-Bit transfer.
2004:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
2005:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for SAI module.
2006:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
2007:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
2008:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_Receive_IT32Bit(SAI_HandleTypeDef *hsai)
2009:HALLIB/Src/stm32f7xx_hal_sai.c **** {
2010:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Receive data */
2011:HALLIB/Src/stm32f7xx_hal_sai.c ****   *(uint32_t*)hsai->pBuffPtr = hsai->Instance->DR;
2012:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->pBuffPtr+=4;
2013:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->XferCount--;
2014:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2015:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Check end of the transfer */
2016:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->XferCount == 0)
2017:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
2018:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable TXE and OVRUDR interrupts */
2019:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_IT));
2020:HALLIB/Src/stm32f7xx_hal_sai.c ****     
2021:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Clear the SAI Overrun flag */
2022:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
2023:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2024:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
2025:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_RxCpltCallback(hsai);
2026:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
2027:HALLIB/Src/stm32f7xx_hal_sai.c **** }
2028:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2029:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
2030:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief DMA SAI transmit process complete callback.
2031:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2032:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for the specified DMA module.
2033:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
2034:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
2035:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
2036:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 2779              		.loc 1 2036 0
 2780              		.cfi_startproc
 2781              		@ args = 0, pretend = 0, frame = 0
 2782              		@ frame_needed = 0, uses_anonymous_args = 0
 2783              	.LVL219:
 2784 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc0s4dWM.s 			page 92


 2785              	.LCFI33:
 2786              		.cfi_def_cfa_offset 8
 2787              		.cfi_offset 4, -8
 2788              		.cfi_offset 14, -4
2037:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 2789              		.loc 1 2037 0
 2790 0002 846B     		ldr	r4, [r0, #56]
 2791              	.LVL220:
2038:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2039:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 2792              		.loc 1 2039 0
 2793 0004 0368     		ldr	r3, [r0]
 2794 0006 1B68     		ldr	r3, [r3]
 2795 0008 13F4807F 		tst	r3, #256
 2796 000c 12D1     		bne	.L227
2040:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
2041:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = 0;
 2797              		.loc 1 2041 0
 2798 000e 0021     		movs	r1, #0
 2799 0010 A4F86A10 		strh	r1, [r4, #106]	@ movhi
2042:HALLIB/Src/stm32f7xx_hal_sai.c ****     
2043:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable SAI Tx DMA Request */
2044:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 2800              		.loc 1 2044 0
 2801 0014 2268     		ldr	r2, [r4]
 2802 0016 1368     		ldr	r3, [r2]
 2803 0018 23F40033 		bic	r3, r3, #131072
 2804 001c 1360     		str	r3, [r2]
2045:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2046:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Stop the interrupts error handling */
2047:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 2805              		.loc 1 2047 0
 2806 001e 2046     		mov	r0, r4
 2807              	.LVL221:
 2808 0020 FFF7FEFF 		bl	SAI_InterruptFlag
 2809              	.LVL222:
 2810 0024 2268     		ldr	r2, [r4]
 2811 0026 1369     		ldr	r3, [r2, #16]
 2812 0028 23EA0000 		bic	r0, r3, r0
 2813 002c 1061     		str	r0, [r2, #16]
2048:HALLIB/Src/stm32f7xx_hal_sai.c ****     
2049:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State= HAL_SAI_STATE_READY;
 2814              		.loc 1 2049 0
 2815 002e 0123     		movs	r3, #1
 2816 0030 84F87D30 		strb	r3, [r4, #125]
 2817              	.L227:
2050:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
2051:HALLIB/Src/stm32f7xx_hal_sai.c ****   HAL_SAI_TxCpltCallback(hsai);
 2818              		.loc 1 2051 0
 2819 0034 2046     		mov	r0, r4
 2820 0036 FFF7FEFF 		bl	HAL_SAI_TxCpltCallback
 2821              	.LVL223:
 2822 003a 10BD     		pop	{r4, pc}
 2823              		.cfi_endproc
 2824              	.LFE174:
 2826              		.section	.text.HAL_SAI_TxHalfCpltCallback,"ax",%progbits
 2827              		.align	2
ARM GAS  /tmp/cc0s4dWM.s 			page 93


 2828              		.weak	HAL_SAI_TxHalfCpltCallback
 2829              		.thumb
 2830              		.thumb_func
 2832              	HAL_SAI_TxHalfCpltCallback:
 2833              	.LFB157:
1507:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
 2834              		.loc 1 1507 0
 2835              		.cfi_startproc
 2836              		@ args = 0, pretend = 0, frame = 0
 2837              		@ frame_needed = 0, uses_anonymous_args = 0
 2838              		@ link register save eliminated.
 2839              	.LVL224:
 2840 0000 7047     		bx	lr
 2841              		.cfi_endproc
 2842              	.LFE157:
 2844 0002 00BF     		.section	.text.SAI_DMATxHalfCplt,"ax",%progbits
 2845              		.align	2
 2846              		.thumb
 2847              		.thumb_func
 2849              	SAI_DMATxHalfCplt:
 2850              	.LFB175:
2052:HALLIB/Src/stm32f7xx_hal_sai.c **** }
2053:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2054:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
2055:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief DMA SAI transmit process half complete callback.
2056:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2057:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for the specified DMA module.
2058:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
2059:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
2060:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2061:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 2851              		.loc 1 2061 0
 2852              		.cfi_startproc
 2853              		@ args = 0, pretend = 0, frame = 0
 2854              		@ frame_needed = 0, uses_anonymous_args = 0
 2855              	.LVL225:
 2856              		.loc 1 2061 0
 2857 0000 08B5     		push	{r3, lr}
 2858              	.LCFI34:
 2859              		.cfi_def_cfa_offset 8
 2860              		.cfi_offset 3, -8
 2861              		.cfi_offset 14, -4
 2862              	.LVL226:
2062:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
2063:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2064:HALLIB/Src/stm32f7xx_hal_sai.c ****   HAL_SAI_TxHalfCpltCallback(hsai);
 2863              		.loc 1 2064 0
 2864 0002 806B     		ldr	r0, [r0, #56]
 2865              	.LVL227:
 2866 0004 FFF7FEFF 		bl	HAL_SAI_TxHalfCpltCallback
 2867              	.LVL228:
 2868 0008 08BD     		pop	{r3, pc}
 2869              		.cfi_endproc
 2870              	.LFE175:
 2872 000a 00BF     		.section	.text.HAL_SAI_RxCpltCallback,"ax",%progbits
 2873              		.align	2
 2874              		.weak	HAL_SAI_RxCpltCallback
ARM GAS  /tmp/cc0s4dWM.s 			page 94


 2875              		.thumb
 2876              		.thumb_func
 2878              	HAL_SAI_RxCpltCallback:
 2879              	.LFB158:
1523:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
 2880              		.loc 1 1523 0
 2881              		.cfi_startproc
 2882              		@ args = 0, pretend = 0, frame = 0
 2883              		@ frame_needed = 0, uses_anonymous_args = 0
 2884              		@ link register save eliminated.
 2885              	.LVL229:
 2886 0000 7047     		bx	lr
 2887              		.cfi_endproc
 2888              	.LFE158:
 2890 0002 00BF     		.section	.text.SAI_Receive_IT32Bit,"ax",%progbits
 2891              		.align	2
 2892              		.thumb
 2893              		.thumb_func
 2895              	SAI_Receive_IT32Bit:
 2896              	.LFB173:
2009:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Receive data */
 2897              		.loc 1 2009 0
 2898              		.cfi_startproc
 2899              		@ args = 0, pretend = 0, frame = 0
 2900              		@ frame_needed = 0, uses_anonymous_args = 0
 2901              	.LVL230:
2011:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->pBuffPtr+=4;
 2902              		.loc 1 2011 0
 2903 0000 436E     		ldr	r3, [r0, #100]
 2904 0002 0268     		ldr	r2, [r0]
 2905 0004 D269     		ldr	r2, [r2, #28]
 2906 0006 1A60     		str	r2, [r3]
2012:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->XferCount--;
 2907              		.loc 1 2012 0
 2908 0008 436E     		ldr	r3, [r0, #100]
 2909 000a 0433     		adds	r3, r3, #4
 2910 000c 4366     		str	r3, [r0, #100]
2013:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2911              		.loc 1 2013 0
 2912 000e B0F86A30 		ldrh	r3, [r0, #106]
 2913 0012 013B     		subs	r3, r3, #1
 2914 0014 9BB2     		uxth	r3, r3
 2915 0016 A0F86A30 		strh	r3, [r0, #106]	@ movhi
2016:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2916              		.loc 1 2016 0
 2917 001a 93B9     		cbnz	r3, .L236
2009:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Receive data */
 2918              		.loc 1 2009 0
 2919 001c 10B5     		push	{r4, lr}
 2920              	.LCFI35:
 2921              		.cfi_def_cfa_offset 8
 2922              		.cfi_offset 4, -8
 2923              		.cfi_offset 14, -4
 2924 001e 0446     		mov	r4, r0
2019:HALLIB/Src/stm32f7xx_hal_sai.c ****     
 2925              		.loc 1 2019 0
 2926 0020 0121     		movs	r1, #1
ARM GAS  /tmp/cc0s4dWM.s 			page 95


 2927 0022 FFF7FEFF 		bl	SAI_InterruptFlag
 2928              	.LVL231:
 2929 0026 2268     		ldr	r2, [r4]
 2930 0028 1369     		ldr	r3, [r2, #16]
 2931 002a 23EA0000 		bic	r0, r3, r0
 2932 002e 1061     		str	r0, [r2, #16]
2022:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2933              		.loc 1 2022 0
 2934 0030 2268     		ldr	r2, [r4]
 2935 0032 0123     		movs	r3, #1
 2936 0034 9361     		str	r3, [r2, #24]
2024:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_RxCpltCallback(hsai);
 2937              		.loc 1 2024 0
 2938 0036 84F87D30 		strb	r3, [r4, #125]
2025:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 2939              		.loc 1 2025 0
 2940 003a 2046     		mov	r0, r4
 2941 003c FFF7FEFF 		bl	HAL_SAI_RxCpltCallback
 2942              	.LVL232:
 2943 0040 10BD     		pop	{r4, pc}
 2944              	.LVL233:
 2945              	.L236:
 2946              	.LCFI36:
 2947              		.cfi_def_cfa_offset 0
 2948              		.cfi_restore 4
 2949              		.cfi_restore 14
 2950 0042 7047     		bx	lr
 2951              		.cfi_endproc
 2952              	.LFE173:
 2954              		.section	.text.SAI_Receive_IT16Bit,"ax",%progbits
 2955              		.align	2
 2956              		.thumb
 2957              		.thumb_func
 2959              	SAI_Receive_IT16Bit:
 2960              	.LFB172:
1983:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Receive data */
 2961              		.loc 1 1983 0
 2962              		.cfi_startproc
 2963              		@ args = 0, pretend = 0, frame = 0
 2964              		@ frame_needed = 0, uses_anonymous_args = 0
 2965              	.LVL234:
1985:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->pBuffPtr+=2;
 2966              		.loc 1 1985 0
 2967 0000 436E     		ldr	r3, [r0, #100]
 2968 0002 0268     		ldr	r2, [r0]
 2969 0004 D269     		ldr	r2, [r2, #28]
 2970 0006 1A80     		strh	r2, [r3]	@ movhi
1986:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->XferCount--;
 2971              		.loc 1 1986 0
 2972 0008 436E     		ldr	r3, [r0, #100]
 2973 000a 0233     		adds	r3, r3, #2
 2974 000c 4366     		str	r3, [r0, #100]
1987:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2975              		.loc 1 1987 0
 2976 000e B0F86A30 		ldrh	r3, [r0, #106]
 2977 0012 013B     		subs	r3, r3, #1
 2978 0014 9BB2     		uxth	r3, r3
ARM GAS  /tmp/cc0s4dWM.s 			page 96


 2979 0016 A0F86A30 		strh	r3, [r0, #106]	@ movhi
1990:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 2980              		.loc 1 1990 0
 2981 001a 93B9     		cbnz	r3, .L240
1983:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Receive data */
 2982              		.loc 1 1983 0
 2983 001c 10B5     		push	{r4, lr}
 2984              	.LCFI37:
 2985              		.cfi_def_cfa_offset 8
 2986              		.cfi_offset 4, -8
 2987              		.cfi_offset 14, -4
 2988 001e 0446     		mov	r4, r0
1993:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2989              		.loc 1 1993 0
 2990 0020 0121     		movs	r1, #1
 2991 0022 FFF7FEFF 		bl	SAI_InterruptFlag
 2992              	.LVL235:
 2993 0026 2268     		ldr	r2, [r4]
 2994 0028 1369     		ldr	r3, [r2, #16]
 2995 002a 23EA0000 		bic	r0, r3, r0
 2996 002e 1061     		str	r0, [r2, #16]
1996:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 2997              		.loc 1 1996 0
 2998 0030 2268     		ldr	r2, [r4]
 2999 0032 0123     		movs	r3, #1
 3000 0034 9361     		str	r3, [r2, #24]
1998:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_RxCpltCallback(hsai);
 3001              		.loc 1 1998 0
 3002 0036 84F87D30 		strb	r3, [r4, #125]
1999:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 3003              		.loc 1 1999 0
 3004 003a 2046     		mov	r0, r4
 3005 003c FFF7FEFF 		bl	HAL_SAI_RxCpltCallback
 3006              	.LVL236:
 3007 0040 10BD     		pop	{r4, pc}
 3008              	.LVL237:
 3009              	.L240:
 3010              	.LCFI38:
 3011              		.cfi_def_cfa_offset 0
 3012              		.cfi_restore 4
 3013              		.cfi_restore 14
 3014 0042 7047     		bx	lr
 3015              		.cfi_endproc
 3016              	.LFE172:
 3018              		.section	.text.SAI_Receive_IT8Bit,"ax",%progbits
 3019              		.align	2
 3020              		.thumb
 3021              		.thumb_func
 3023              	SAI_Receive_IT8Bit:
 3024              	.LFB171:
1957:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Receive data */
 3025              		.loc 1 1957 0
 3026              		.cfi_startproc
 3027              		@ args = 0, pretend = 0, frame = 0
 3028              		@ frame_needed = 0, uses_anonymous_args = 0
 3029              	.LVL238:
1959:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->XferCount--;
ARM GAS  /tmp/cc0s4dWM.s 			page 97


 3030              		.loc 1 1959 0
 3031 0000 436E     		ldr	r3, [r0, #100]
 3032 0002 5A1C     		adds	r2, r3, #1
 3033 0004 4266     		str	r2, [r0, #100]
 3034 0006 0268     		ldr	r2, [r0]
 3035 0008 D269     		ldr	r2, [r2, #28]
 3036 000a 1A70     		strb	r2, [r3]
1960:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 3037              		.loc 1 1960 0
 3038 000c B0F86A30 		ldrh	r3, [r0, #106]
 3039 0010 013B     		subs	r3, r3, #1
 3040 0012 9BB2     		uxth	r3, r3
 3041 0014 A0F86A30 		strh	r3, [r0, #106]	@ movhi
1963:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 3042              		.loc 1 1963 0
 3043 0018 93B9     		cbnz	r3, .L244
1957:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Receive data */
 3044              		.loc 1 1957 0
 3045 001a 10B5     		push	{r4, lr}
 3046              	.LCFI39:
 3047              		.cfi_def_cfa_offset 8
 3048              		.cfi_offset 4, -8
 3049              		.cfi_offset 14, -4
 3050 001c 0446     		mov	r4, r0
1966:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 3051              		.loc 1 1966 0
 3052 001e 0121     		movs	r1, #1
 3053 0020 FFF7FEFF 		bl	SAI_InterruptFlag
 3054              	.LVL239:
 3055 0024 2268     		ldr	r2, [r4]
 3056 0026 1369     		ldr	r3, [r2, #16]
 3057 0028 23EA0000 		bic	r0, r3, r0
 3058 002c 1061     		str	r0, [r2, #16]
1969:HALLIB/Src/stm32f7xx_hal_sai.c ****     
 3059              		.loc 1 1969 0
 3060 002e 2268     		ldr	r2, [r4]
 3061 0030 0123     		movs	r3, #1
 3062 0032 9361     		str	r3, [r2, #24]
1971:HALLIB/Src/stm32f7xx_hal_sai.c ****     HAL_SAI_RxCpltCallback(hsai);
 3063              		.loc 1 1971 0
 3064 0034 84F87D30 		strb	r3, [r4, #125]
1972:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
 3065              		.loc 1 1972 0
 3066 0038 2046     		mov	r0, r4
 3067 003a FFF7FEFF 		bl	HAL_SAI_RxCpltCallback
 3068              	.LVL240:
 3069 003e 10BD     		pop	{r4, pc}
 3070              	.LVL241:
 3071              	.L244:
 3072              	.LCFI40:
 3073              		.cfi_def_cfa_offset 0
 3074              		.cfi_restore 4
 3075              		.cfi_restore 14
 3076 0040 7047     		bx	lr
 3077              		.cfi_endproc
 3078              	.LFE171:
 3080 0042 00BF     		.section	.text.SAI_DMARxCplt,"ax",%progbits
ARM GAS  /tmp/cc0s4dWM.s 			page 98


 3081              		.align	2
 3082              		.thumb
 3083              		.thumb_func
 3085              	SAI_DMARxCplt:
 3086              	.LFB176:
2065:HALLIB/Src/stm32f7xx_hal_sai.c **** }
2066:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2067:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
2068:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief DMA SAI receive process complete callback.
2069:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2070:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for the specified DMA module.
2071:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
2072:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
2073:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
2074:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 3087              		.loc 1 2074 0
 3088              		.cfi_startproc
 3089              		@ args = 0, pretend = 0, frame = 0
 3090              		@ frame_needed = 0, uses_anonymous_args = 0
 3091              	.LVL242:
 3092 0000 10B5     		push	{r4, lr}
 3093              	.LCFI41:
 3094              		.cfi_def_cfa_offset 8
 3095              		.cfi_offset 4, -8
 3096              		.cfi_offset 14, -4
2075:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3097              		.loc 1 2075 0
 3098 0002 846B     		ldr	r4, [r0, #56]
 3099              	.LVL243:
2076:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 3100              		.loc 1 2076 0
 3101 0004 0368     		ldr	r3, [r0]
 3102 0006 1B68     		ldr	r3, [r3]
 3103 0008 13F4807F 		tst	r3, #256
 3104 000c 12D1     		bne	.L246
2077:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
2078:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable Rx DMA Request */
2079:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 3105              		.loc 1 2079 0
 3106 000e 2268     		ldr	r2, [r4]
 3107 0010 1368     		ldr	r3, [r2]
 3108 0012 23F40033 		bic	r3, r3, #131072
 3109 0016 1360     		str	r3, [r2]
2080:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = 0;
 3110              		.loc 1 2080 0
 3111 0018 0021     		movs	r1, #0
 3112 001a A4F86A10 		strh	r1, [r4, #106]	@ movhi
2081:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2082:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Stop the interrupts error handling */
2083:HALLIB/Src/stm32f7xx_hal_sai.c ****     __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 3113              		.loc 1 2083 0
 3114 001e 2046     		mov	r0, r4
 3115              	.LVL244:
 3116 0020 FFF7FEFF 		bl	SAI_InterruptFlag
 3117              	.LVL245:
 3118 0024 2268     		ldr	r2, [r4]
 3119 0026 1369     		ldr	r3, [r2, #16]
ARM GAS  /tmp/cc0s4dWM.s 			page 99


 3120 0028 23EA0000 		bic	r0, r3, r0
 3121 002c 1061     		str	r0, [r2, #16]
2084:HALLIB/Src/stm32f7xx_hal_sai.c ****     
2085:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
 3122              		.loc 1 2085 0
 3123 002e 0123     		movs	r3, #1
 3124 0030 84F87D30 		strb	r3, [r4, #125]
 3125              	.L246:
2086:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
2087:HALLIB/Src/stm32f7xx_hal_sai.c ****   HAL_SAI_RxCpltCallback(hsai);
 3126              		.loc 1 2087 0
 3127 0034 2046     		mov	r0, r4
 3128 0036 FFF7FEFF 		bl	HAL_SAI_RxCpltCallback
 3129              	.LVL246:
 3130 003a 10BD     		pop	{r4, pc}
 3131              		.cfi_endproc
 3132              	.LFE176:
 3134              		.section	.text.HAL_SAI_RxHalfCpltCallback,"ax",%progbits
 3135              		.align	2
 3136              		.weak	HAL_SAI_RxHalfCpltCallback
 3137              		.thumb
 3138              		.thumb_func
 3140              	HAL_SAI_RxHalfCpltCallback:
 3141              	.LFB159:
1539:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
 3142              		.loc 1 1539 0
 3143              		.cfi_startproc
 3144              		@ args = 0, pretend = 0, frame = 0
 3145              		@ frame_needed = 0, uses_anonymous_args = 0
 3146              		@ link register save eliminated.
 3147              	.LVL247:
 3148 0000 7047     		bx	lr
 3149              		.cfi_endproc
 3150              	.LFE159:
 3152 0002 00BF     		.section	.text.SAI_DMARxHalfCplt,"ax",%progbits
 3153              		.align	2
 3154              		.thumb
 3155              		.thumb_func
 3157              	SAI_DMARxHalfCplt:
 3158              	.LFB177:
2088:HALLIB/Src/stm32f7xx_hal_sai.c **** }
2089:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2090:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
2091:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief DMA SAI receive process half complete callback 
2092:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2093:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for the specified DMA module.
2094:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
2095:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
2096:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
2097:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 3159              		.loc 1 2097 0
 3160              		.cfi_startproc
 3161              		@ args = 0, pretend = 0, frame = 0
 3162              		@ frame_needed = 0, uses_anonymous_args = 0
 3163              	.LVL248:
 3164              		.loc 1 2097 0
 3165 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc0s4dWM.s 			page 100


 3166              	.LCFI42:
 3167              		.cfi_def_cfa_offset 8
 3168              		.cfi_offset 3, -8
 3169              		.cfi_offset 14, -4
 3170              	.LVL249:
2098:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
2099:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2100:HALLIB/Src/stm32f7xx_hal_sai.c ****   HAL_SAI_RxHalfCpltCallback(hsai);
 3171              		.loc 1 2100 0
 3172 0002 806B     		ldr	r0, [r0, #56]
 3173              	.LVL250:
 3174 0004 FFF7FEFF 		bl	HAL_SAI_RxHalfCpltCallback
 3175              	.LVL251:
 3176 0008 08BD     		pop	{r3, pc}
 3177              		.cfi_endproc
 3178              	.LFE177:
 3180 000a 00BF     		.section	.text.HAL_SAI_ErrorCallback,"ax",%progbits
 3181              		.align	2
 3182              		.weak	HAL_SAI_ErrorCallback
 3183              		.thumb
 3184              		.thumb_func
 3186              	HAL_SAI_ErrorCallback:
 3187              	.LFB160:
1555:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Prevent unused argument(s) compilation warning */
 3188              		.loc 1 1555 0
 3189              		.cfi_startproc
 3190              		@ args = 0, pretend = 0, frame = 0
 3191              		@ frame_needed = 0, uses_anonymous_args = 0
 3192              		@ link register save eliminated.
 3193              	.LVL252:
 3194 0000 7047     		bx	lr
 3195              		.cfi_endproc
 3196              	.LFE160:
 3198 0002 00BF     		.section	.text.SAI_DMAError,"ax",%progbits
 3199              		.align	2
 3200              		.thumb
 3201              		.thumb_func
 3203              	SAI_DMAError:
 3204              	.LFB178:
2101:HALLIB/Src/stm32f7xx_hal_sai.c **** }
2102:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
2103:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief DMA SAI communication error callback.
2104:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2105:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for the specified DMA module.
2106:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
2107:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
2108:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMAError(DMA_HandleTypeDef *hdma)
2109:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 3205              		.loc 1 2109 0
 3206              		.cfi_startproc
 3207              		@ args = 0, pretend = 0, frame = 0
 3208              		@ frame_needed = 0, uses_anonymous_args = 0
 3209              	.LVL253:
 3210              		.loc 1 2109 0
 3211 0000 10B5     		push	{r4, lr}
 3212              	.LCFI43:
 3213              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc0s4dWM.s 			page 101


 3214              		.cfi_offset 4, -8
 3215              		.cfi_offset 14, -4
2110:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3216              		.loc 1 2110 0
 3217 0002 846B     		ldr	r4, [r0, #56]
 3218              	.LVL254:
2111:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2112:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Set SAI error code */
2113:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 3219              		.loc 1 2113 0
 3220 0004 D4F88030 		ldr	r3, [r4, #128]
 3221 0008 43F08003 		orr	r3, r3, #128
 3222 000c C4F88030 		str	r3, [r4, #128]
2114:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2115:HALLIB/Src/stm32f7xx_hal_sai.c ****   if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE)
 3223              		.loc 1 2115 0
 3224 0010 E36E     		ldr	r3, [r4, #108]
 3225 0012 5B6D     		ldr	r3, [r3, #84]
 3226 0014 012B     		cmp	r3, #1
 3227 0016 03D0     		beq	.L253
 3228              		.loc 1 2115 0 is_stmt 0 discriminator 1
 3229 0018 236F     		ldr	r3, [r4, #112]
 3230 001a 5B6D     		ldr	r3, [r3, #84]
 3231 001c 012B     		cmp	r3, #1
 3232 001e 0DD1     		bne	.L254
 3233              	.L253:
2116:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
2117:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable the SAI DMA request */
2118:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 3234              		.loc 1 2118 0 is_stmt 1
 3235 0020 2268     		ldr	r2, [r4]
 3236 0022 1368     		ldr	r3, [r2]
 3237 0024 23F40033 		bic	r3, r3, #131072
 3238 0028 1360     		str	r3, [r2]
2119:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2120:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable SAI peripheral */
2121:HALLIB/Src/stm32f7xx_hal_sai.c ****     SAI_Disable(hsai);
 3239              		.loc 1 2121 0
 3240 002a 2046     		mov	r0, r4
 3241              	.LVL255:
 3242 002c FFF7FEFF 		bl	SAI_Disable
 3243              	.LVL256:
2122:HALLIB/Src/stm32f7xx_hal_sai.c ****     
2123:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Set the SAI state ready to be able to start again the process */
2124:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->State = HAL_SAI_STATE_READY;
 3244              		.loc 1 2124 0
 3245 0030 0123     		movs	r3, #1
 3246 0032 84F87D30 		strb	r3, [r4, #125]
2125:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2126:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Initialize XferCount */
2127:HALLIB/Src/stm32f7xx_hal_sai.c ****     hsai->XferCount = 0U;
 3247              		.loc 1 2127 0
 3248 0036 0023     		movs	r3, #0
 3249 0038 A4F86A30 		strh	r3, [r4, #106]	@ movhi
 3250              	.L254:
2128:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
2129:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* SAI error Callback */ 
ARM GAS  /tmp/cc0s4dWM.s 			page 102


2130:HALLIB/Src/stm32f7xx_hal_sai.c ****   HAL_SAI_ErrorCallback(hsai);
 3251              		.loc 1 2130 0
 3252 003c 2046     		mov	r0, r4
 3253 003e FFF7FEFF 		bl	HAL_SAI_ErrorCallback
 3254              	.LVL257:
 3255 0042 10BD     		pop	{r4, pc}
 3256              		.cfi_endproc
 3257              	.LFE178:
 3259              		.section	.text.HAL_SAI_IRQHandler,"ax",%progbits
 3260              		.align	2
 3261              		.global	HAL_SAI_IRQHandler
 3262              		.thumb
 3263              		.thumb_func
 3265              	HAL_SAI_IRQHandler:
 3266              	.LFB155:
1325:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State != HAL_SAI_STATE_RESET)
 3267              		.loc 1 1325 0
 3268              		.cfi_startproc
 3269              		@ args = 0, pretend = 0, frame = 0
 3270              		@ frame_needed = 0, uses_anonymous_args = 0
 3271              	.LVL258:
1326:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
 3272              		.loc 1 1326 0
 3273 0000 90F87D30 		ldrb	r3, [r0, #125]	@ zero_extendqisi2
 3274 0004 13F0FF0F 		tst	r3, #255
 3275 0008 00F0C280 		beq	.L273
1325:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->State != HAL_SAI_STATE_RESET)
 3276              		.loc 1 1325 0
 3277 000c 10B5     		push	{r4, lr}
 3278              	.LCFI44:
 3279              		.cfi_def_cfa_offset 8
 3280              		.cfi_offset 4, -8
 3281              		.cfi_offset 14, -4
 3282 000e 0446     		mov	r4, r0
 3283              	.LBB3:
1328:HALLIB/Src/stm32f7xx_hal_sai.c ****     uint32_t itsources = hsai->Instance->IMR;
 3284              		.loc 1 1328 0
 3285 0010 0268     		ldr	r2, [r0]
 3286 0012 5369     		ldr	r3, [r2, #20]
 3287              	.LVL259:
1329:HALLIB/Src/stm32f7xx_hal_sai.c ****     uint32_t cr1config = hsai->Instance->CR1;    
 3288              		.loc 1 1329 0
 3289 0014 1169     		ldr	r1, [r2, #16]
 3290              	.LVL260:
1330:HALLIB/Src/stm32f7xx_hal_sai.c ****     uint32_t tmperror;
 3291              		.loc 1 1330 0
 3292 0016 1068     		ldr	r0, [r2]
 3293              	.LVL261:
1334:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3294              		.loc 1 1334 0
 3295 0018 13F0080F 		tst	r3, #8
 3296 001c 06D0     		beq	.L258
1334:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3297              		.loc 1 1334 0 is_stmt 0 discriminator 1
 3298 001e 11F0080F 		tst	r1, #8
 3299 0022 03D0     		beq	.L258
1336:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
ARM GAS  /tmp/cc0s4dWM.s 			page 103


 3300              		.loc 1 1336 0 is_stmt 1
 3301 0024 A36F     		ldr	r3, [r4, #120]
 3302              	.LVL262:
 3303 0026 2046     		mov	r0, r4
 3304              	.LVL263:
 3305 0028 9847     		blx	r3
 3306              	.LVL264:
 3307 002a 10BD     		pop	{r4, pc}
 3308              	.LVL265:
 3309              	.L258:
1339:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3310              		.loc 1 1339 0
 3311 002c 13F0010F 		tst	r3, #1
 3312 0030 15D0     		beq	.L259
1339:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3313              		.loc 1 1339 0 is_stmt 0 discriminator 1
 3314 0032 11F0010F 		tst	r1, #1
 3315 0036 12D0     		beq	.L259
1342:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Get the SAI error code */
 3316              		.loc 1 1342 0 is_stmt 1
 3317 0038 0123     		movs	r3, #1
 3318              	.LVL266:
 3319 003a 9361     		str	r3, [r2, #24]
1344:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Change the SAI error code */
 3320              		.loc 1 1344 0
 3321 003c 94F87D30 		ldrb	r3, [r4, #125]	@ zero_extendqisi2
 3322 0040 DBB2     		uxtb	r3, r3
 3323 0042 222B     		cmp	r3, #34
 3324 0044 01D1     		bne	.L271
 3325 0046 0122     		movs	r2, #1
 3326 0048 00E0     		b	.L260
 3327              	.L271:
 3328 004a 0222     		movs	r2, #2
 3329              	.L260:
 3330              	.LVL267:
1346:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* the transfer is not stopped, we will forward the information to the user and we let the us
 3331              		.loc 1 1346 0 discriminator 4
 3332 004c D4F88030 		ldr	r3, [r4, #128]
 3333 0050 1343     		orrs	r3, r3, r2
 3334 0052 C4F88030 		str	r3, [r4, #128]
1348:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 3335              		.loc 1 1348 0 discriminator 4
 3336 0056 2046     		mov	r0, r4
 3337              	.LVL268:
 3338 0058 FFF7FEFF 		bl	HAL_SAI_ErrorCallback
 3339              	.LVL269:
 3340 005c 10BD     		pop	{r4, pc}
 3341              	.LVL270:
 3342              	.L259:
1351:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3343              		.loc 1 1351 0
 3344 005e 13F0020F 		tst	r3, #2
 3345 0062 0AD0     		beq	.L261
1351:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3346              		.loc 1 1351 0 is_stmt 0 discriminator 1
 3347 0064 11F0020F 		tst	r1, #2
 3348 0068 07D0     		beq	.L261
ARM GAS  /tmp/cc0s4dWM.s 			page 104


1354:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* call the call back function */
 3349              		.loc 1 1354 0 is_stmt 1
 3350 006a 0223     		movs	r3, #2
 3351              	.LVL271:
 3352 006c 9361     		str	r3, [r2, #24]
1356:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 3353              		.loc 1 1356 0
 3354 006e 636F     		ldr	r3, [r4, #116]
 3355 0070 002B     		cmp	r3, #0
 3356 0072 00F08C80 		beq	.L256
1359:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 3357              		.loc 1 1359 0
 3358 0076 9847     		blx	r3
 3359              	.LVL272:
 3360 0078 10BD     		pop	{r4, pc}
 3361              	.LVL273:
 3362              	.L261:
1363:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3363              		.loc 1 1363 0
 3364 007a 13F0200F 		tst	r3, #32
 3365 007e 23D0     		beq	.L262
1363:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3366              		.loc 1 1363 0 is_stmt 0 discriminator 1
 3367 0080 11F0200F 		tst	r1, #32
 3368 0084 20D0     		beq	.L262
1366:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Check SAI DMA is enabled or not */
 3369              		.loc 1 1366 0 is_stmt 1
 3370 0086 D4F88030 		ldr	r3, [r4, #128]
 3371              	.LVL274:
 3372 008a 43F00403 		orr	r3, r3, #4
 3373 008e C4F88030 		str	r3, [r4, #128]
1368:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 3374              		.loc 1 1368 0
 3375 0092 10F4003F 		tst	r0, #131072
 3376 0096 10D0     		beq	.L263
1371:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 3377              		.loc 1 1371 0
 3378 0098 E36E     		ldr	r3, [r4, #108]
 3379 009a 2BB1     		cbz	r3, .L264
1374:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 3380              		.loc 1 1374 0
 3381 009c 3D4A     		ldr	r2, .L274
 3382 009e 1A65     		str	r2, [r3, #80]
1377:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 3383              		.loc 1 1377 0
 3384 00a0 E06E     		ldr	r0, [r4, #108]
 3385              	.LVL275:
 3386 00a2 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3387              	.LVL276:
 3388 00a6 10BD     		pop	{r4, pc}
 3389              	.LVL277:
 3390              	.L264:
1379:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 3391              		.loc 1 1379 0
 3392 00a8 236F     		ldr	r3, [r4, #112]
 3393 00aa 002B     		cmp	r3, #0
 3394 00ac 6FD0     		beq	.L256
ARM GAS  /tmp/cc0s4dWM.s 			page 105


1382:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Abort DMA in IT mode */
 3395              		.loc 1 1382 0
 3396 00ae 394A     		ldr	r2, .L274
 3397 00b0 1A65     		str	r2, [r3, #80]
1384:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 3398              		.loc 1 1384 0
 3399 00b2 206F     		ldr	r0, [r4, #112]
 3400              	.LVL278:
 3401 00b4 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3402              	.LVL279:
 3403 00b8 10BD     		pop	{r4, pc}
 3404              	.LVL280:
 3405              	.L263:
1390:HALLIB/Src/stm32f7xx_hal_sai.c ****         
 3406              		.loc 1 1390 0
 3407 00ba 2046     		mov	r0, r4
 3408              	.LVL281:
 3409 00bc FFF7FEFF 		bl	HAL_SAI_Abort
 3410              	.LVL282:
1393:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 3411              		.loc 1 1393 0
 3412 00c0 2046     		mov	r0, r4
 3413 00c2 FFF7FEFF 		bl	HAL_SAI_ErrorCallback
 3414              	.LVL283:
 3415 00c6 10BD     		pop	{r4, pc}
 3416              	.LVL284:
 3417              	.L262:
1397:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3418              		.loc 1 1397 0
 3419 00c8 13F0400F 		tst	r3, #64
 3420 00cc 23D0     		beq	.L265
1397:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3421              		.loc 1 1397 0 is_stmt 0 discriminator 1
 3422 00ce 11F0400F 		tst	r1, #64
 3423 00d2 20D0     		beq	.L265
1400:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 3424              		.loc 1 1400 0 is_stmt 1
 3425 00d4 D4F88030 		ldr	r3, [r4, #128]
 3426              	.LVL285:
 3427 00d8 43F00803 		orr	r3, r3, #8
 3428 00dc C4F88030 		str	r3, [r4, #128]
1403:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 3429              		.loc 1 1403 0
 3430 00e0 10F4003F 		tst	r0, #131072
 3431 00e4 10D0     		beq	.L266
1406:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 3432              		.loc 1 1406 0
 3433 00e6 E36E     		ldr	r3, [r4, #108]
 3434 00e8 2BB1     		cbz	r3, .L267
1409:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Abort DMA in IT mode */
 3435              		.loc 1 1409 0
 3436 00ea 2A4A     		ldr	r2, .L274
 3437 00ec 1A65     		str	r2, [r3, #80]
1411:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 3438              		.loc 1 1411 0
 3439 00ee E06E     		ldr	r0, [r4, #108]
 3440              	.LVL286:
ARM GAS  /tmp/cc0s4dWM.s 			page 106


 3441 00f0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3442              	.LVL287:
 3443 00f4 10BD     		pop	{r4, pc}
 3444              	.LVL288:
 3445              	.L267:
1413:HALLIB/Src/stm32f7xx_hal_sai.c ****         {
 3446              		.loc 1 1413 0
 3447 00f6 236F     		ldr	r3, [r4, #112]
 3448 00f8 002B     		cmp	r3, #0
 3449 00fa 48D0     		beq	.L256
1416:HALLIB/Src/stm32f7xx_hal_sai.c ****           /* Abort DMA in IT mode */          
 3450              		.loc 1 1416 0
 3451 00fc 254A     		ldr	r2, .L274
 3452 00fe 1A65     		str	r2, [r3, #80]
1418:HALLIB/Src/stm32f7xx_hal_sai.c ****         }
 3453              		.loc 1 1418 0
 3454 0100 206F     		ldr	r0, [r4, #112]
 3455              	.LVL289:
 3456 0102 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3457              	.LVL290:
 3458 0106 10BD     		pop	{r4, pc}
 3459              	.LVL291:
 3460              	.L266:
1424:HALLIB/Src/stm32f7xx_hal_sai.c ****         
 3461              		.loc 1 1424 0
 3462 0108 2046     		mov	r0, r4
 3463              	.LVL292:
 3464 010a FFF7FEFF 		bl	HAL_SAI_Abort
 3465              	.LVL293:
1427:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 3466              		.loc 1 1427 0
 3467 010e 2046     		mov	r0, r4
 3468 0110 FFF7FEFF 		bl	HAL_SAI_ErrorCallback
 3469              	.LVL294:
 3470 0114 10BD     		pop	{r4, pc}
 3471              	.LVL295:
 3472              	.L265:
1431:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3473              		.loc 1 1431 0
 3474 0116 13F0040F 		tst	r3, #4
 3475 011a 27D0     		beq	.L268
1431:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3476              		.loc 1 1431 0 is_stmt 0 discriminator 1
 3477 011c 11F0040F 		tst	r1, #4
 3478 0120 24D0     		beq	.L268
1434:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 3479              		.loc 1 1434 0 is_stmt 1
 3480 0122 D4F88030 		ldr	r3, [r4, #128]
 3481              	.LVL296:
 3482 0126 43F02003 		orr	r3, r3, #32
 3483 012a C4F88030 		str	r3, [r4, #128]
1437:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 3484              		.loc 1 1437 0
 3485 012e E36E     		ldr	r3, [r4, #108]
 3486 0130 2BB1     		cbz	r3, .L269
1440:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Abort DMA in IT mode */
 3487              		.loc 1 1440 0
ARM GAS  /tmp/cc0s4dWM.s 			page 107


 3488 0132 184A     		ldr	r2, .L274
 3489 0134 1A65     		str	r2, [r3, #80]
1442:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 3490              		.loc 1 1442 0
 3491 0136 E06E     		ldr	r0, [r4, #108]
 3492              	.LVL297:
 3493 0138 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3494              	.LVL298:
 3495 013c 10BD     		pop	{r4, pc}
 3496              	.LVL299:
 3497              	.L269:
1444:HALLIB/Src/stm32f7xx_hal_sai.c ****       {
 3498              		.loc 1 1444 0
 3499 013e 236F     		ldr	r3, [r4, #112]
 3500 0140 2BB1     		cbz	r3, .L270
1447:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Abort DMA in IT mode */          
 3501              		.loc 1 1447 0
 3502 0142 144A     		ldr	r2, .L274
 3503 0144 1A65     		str	r2, [r3, #80]
1449:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 3504              		.loc 1 1449 0
 3505 0146 206F     		ldr	r0, [r4, #112]
 3506              	.LVL300:
 3507 0148 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3508              	.LVL301:
 3509 014c 10BD     		pop	{r4, pc}
 3510              	.LVL302:
 3511              	.L270:
1455:HALLIB/Src/stm32f7xx_hal_sai.c ****         hsai->Instance->CLRFR = 0xFFFFFFFFU;
 3512              		.loc 1 1455 0
 3513 014e 0023     		movs	r3, #0
 3514 0150 1361     		str	r3, [r2, #16]
1456:HALLIB/Src/stm32f7xx_hal_sai.c ****         /* Set the SAI state to ready to be able to start again the process */
 3515              		.loc 1 1456 0
 3516 0152 2268     		ldr	r2, [r4]
 3517 0154 4FF0FF31 		mov	r1, #-1
 3518              	.LVL303:
 3519 0158 9161     		str	r1, [r2, #24]
1458:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 3520              		.loc 1 1458 0
 3521 015a 0122     		movs	r2, #1
 3522 015c 84F87D20 		strb	r2, [r4, #125]
1461:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 3523              		.loc 1 1461 0
 3524 0160 A4F86A30 		strh	r3, [r4, #106]	@ movhi
1464:HALLIB/Src/stm32f7xx_hal_sai.c ****       }
 3525              		.loc 1 1464 0
 3526 0164 2046     		mov	r0, r4
 3527              	.LVL304:
 3528 0166 FFF7FEFF 		bl	HAL_SAI_ErrorCallback
 3529              	.LVL305:
 3530 016a 10BD     		pop	{r4, pc}
 3531              	.LVL306:
 3532              	.L268:
1468:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3533              		.loc 1 1468 0
 3534 016c 13F0100F 		tst	r3, #16
ARM GAS  /tmp/cc0s4dWM.s 			page 108


 3535 0170 0DD0     		beq	.L256
1468:HALLIB/Src/stm32f7xx_hal_sai.c ****     {
 3536              		.loc 1 1468 0 is_stmt 0 discriminator 1
 3537 0172 11F0100F 		tst	r1, #16
 3538 0176 0AD0     		beq	.L256
1471:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* Change the SAI error code */
 3539              		.loc 1 1471 0 is_stmt 1
 3540 0178 1023     		movs	r3, #16
 3541              	.LVL307:
 3542 017a 9361     		str	r3, [r2, #24]
1473:HALLIB/Src/stm32f7xx_hal_sai.c ****       /* the transfer is not stopped, we will forward the information to the user and we let the us
 3543              		.loc 1 1473 0
 3544 017c D4F88030 		ldr	r3, [r4, #128]
 3545 0180 43F01003 		orr	r3, r3, #16
 3546 0184 C4F88030 		str	r3, [r4, #128]
1475:HALLIB/Src/stm32f7xx_hal_sai.c ****     }
 3547              		.loc 1 1475 0
 3548 0188 2046     		mov	r0, r4
 3549              	.LVL308:
 3550 018a FFF7FEFF 		bl	HAL_SAI_ErrorCallback
 3551              	.LVL309:
 3552              	.L256:
 3553 018e 10BD     		pop	{r4, pc}
 3554              	.LVL310:
 3555              	.L273:
 3556              	.LCFI45:
 3557              		.cfi_def_cfa_offset 0
 3558              		.cfi_restore 4
 3559              		.cfi_restore 14
 3560 0190 7047     		bx	lr
 3561              	.L275:
 3562 0192 00BF     		.align	2
 3563              	.L274:
 3564 0194 00000000 		.word	SAI_DMAAbort
 3565              	.LBE3:
 3566              		.cfi_endproc
 3567              	.LFE155:
 3569              		.section	.text.SAI_DMAAbort,"ax",%progbits
 3570              		.align	2
 3571              		.thumb
 3572              		.thumb_func
 3574              	SAI_DMAAbort:
 3575              	.LFB179:
2131:HALLIB/Src/stm32f7xx_hal_sai.c **** }
2132:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2133:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
2134:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @brief DMA SAI Abort callback. 
2135:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2136:HALLIB/Src/stm32f7xx_hal_sai.c ****   *                the configuration information for the specified DMA module.
2137:HALLIB/Src/stm32f7xx_hal_sai.c ****   * @retval None
2138:HALLIB/Src/stm32f7xx_hal_sai.c ****   */
2139:HALLIB/Src/stm32f7xx_hal_sai.c **** static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)   
2140:HALLIB/Src/stm32f7xx_hal_sai.c **** {
 3576              		.loc 1 2140 0
 3577              		.cfi_startproc
 3578              		@ args = 0, pretend = 0, frame = 0
 3579              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0s4dWM.s 			page 109


 3580              	.LVL311:
 3581 0000 10B5     		push	{r4, lr}
 3582              	.LCFI46:
 3583              		.cfi_def_cfa_offset 8
 3584              		.cfi_offset 4, -8
 3585              		.cfi_offset 14, -4
2141:HALLIB/Src/stm32f7xx_hal_sai.c ****   SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3586              		.loc 1 2141 0
 3587 0002 846B     		ldr	r4, [r0, #56]
 3588              	.LVL312:
2142:HALLIB/Src/stm32f7xx_hal_sai.c ****   
2143:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Disable DMA request */
2144:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 3589              		.loc 1 2144 0
 3590 0004 2268     		ldr	r2, [r4]
 3591 0006 1368     		ldr	r3, [r2]
 3592 0008 23F40033 		bic	r3, r3, #131072
 3593 000c 1360     		str	r3, [r2]
2145:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2146:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Disable all interrupts and clear all flags */
2147:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->IMR = 0U;
 3594              		.loc 1 2147 0
 3595 000e 2368     		ldr	r3, [r4]
 3596 0010 0022     		movs	r2, #0
 3597 0012 1A61     		str	r2, [r3, #16]
2148:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->Instance->CLRFR = 0xFFFFFFFFU;
 3598              		.loc 1 2148 0
 3599 0014 2368     		ldr	r3, [r4]
 3600 0016 4FF0FF32 		mov	r2, #-1
 3601 001a 9A61     		str	r2, [r3, #24]
2149:HALLIB/Src/stm32f7xx_hal_sai.c ****   
2150:HALLIB/Src/stm32f7xx_hal_sai.c ****   if(hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 3602              		.loc 1 2150 0
 3603 001c D4F88030 		ldr	r3, [r4, #128]
 3604 0020 202B     		cmp	r3, #32
 3605 0022 07D0     		beq	.L277
2151:HALLIB/Src/stm32f7xx_hal_sai.c ****   {
2152:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Disable SAI peripheral */
2153:HALLIB/Src/stm32f7xx_hal_sai.c ****     SAI_Disable(hsai);
 3606              		.loc 1 2153 0
 3607 0024 2046     		mov	r0, r4
 3608              	.LVL313:
 3609 0026 FFF7FEFF 		bl	SAI_Disable
 3610              	.LVL314:
2154:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2155:HALLIB/Src/stm32f7xx_hal_sai.c ****     /* Flush the fifo */
2156:HALLIB/Src/stm32f7xx_hal_sai.c ****     SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 3611              		.loc 1 2156 0
 3612 002a 2268     		ldr	r2, [r4]
 3613 002c 5368     		ldr	r3, [r2, #4]
 3614 002e 43F00803 		orr	r3, r3, #8
 3615 0032 5360     		str	r3, [r2, #4]
 3616              	.L277:
2157:HALLIB/Src/stm32f7xx_hal_sai.c ****   }
2158:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Set the SAI state to ready to be able to start again the process */
2159:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->State = HAL_SAI_STATE_READY;
 3617              		.loc 1 2159 0
ARM GAS  /tmp/cc0s4dWM.s 			page 110


 3618 0034 0123     		movs	r3, #1
 3619 0036 84F87D30 		strb	r3, [r4, #125]
2160:HALLIB/Src/stm32f7xx_hal_sai.c ****   
2161:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* Initialize XferCount */
2162:HALLIB/Src/stm32f7xx_hal_sai.c ****   hsai->XferCount = 0U;  
 3620              		.loc 1 2162 0
 3621 003a 0023     		movs	r3, #0
 3622 003c A4F86A30 		strh	r3, [r4, #106]	@ movhi
2163:HALLIB/Src/stm32f7xx_hal_sai.c **** 
2164:HALLIB/Src/stm32f7xx_hal_sai.c ****   /* SAI error Callback */ 
2165:HALLIB/Src/stm32f7xx_hal_sai.c ****   HAL_SAI_ErrorCallback(hsai);
 3623              		.loc 1 2165 0
 3624 0040 2046     		mov	r0, r4
 3625 0042 FFF7FEFF 		bl	HAL_SAI_ErrorCallback
 3626              	.LVL315:
 3627 0046 10BD     		pop	{r4, pc}
 3628              		.cfi_endproc
 3629              	.LFE179:
 3631              		.section	.text.HAL_SAI_GetState,"ax",%progbits
 3632              		.align	2
 3633              		.global	HAL_SAI_GetState
 3634              		.thumb
 3635              		.thumb_func
 3637              	HAL_SAI_GetState:
 3638              	.LFB161:
1591:HALLIB/Src/stm32f7xx_hal_sai.c ****   return hsai->State;
 3639              		.loc 1 1591 0
 3640              		.cfi_startproc
 3641              		@ args = 0, pretend = 0, frame = 0
 3642              		@ frame_needed = 0, uses_anonymous_args = 0
 3643              		@ link register save eliminated.
 3644              	.LVL316:
1592:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 3645              		.loc 1 1592 0
 3646 0000 90F87D00 		ldrb	r0, [r0, #125]	@ zero_extendqisi2
 3647              	.LVL317:
1593:HALLIB/Src/stm32f7xx_hal_sai.c **** 
 3648              		.loc 1 1593 0
 3649 0004 7047     		bx	lr
 3650              		.cfi_endproc
 3651              	.LFE161:
 3653 0006 00BF     		.section	.text.HAL_SAI_GetError,"ax",%progbits
 3654              		.align	2
 3655              		.global	HAL_SAI_GetError
 3656              		.thumb
 3657              		.thumb_func
 3659              	HAL_SAI_GetError:
 3660              	.LFB162:
1602:HALLIB/Src/stm32f7xx_hal_sai.c ****   return hsai->ErrorCode;
 3661              		.loc 1 1602 0
 3662              		.cfi_startproc
 3663              		@ args = 0, pretend = 0, frame = 0
 3664              		@ frame_needed = 0, uses_anonymous_args = 0
 3665              		@ link register save eliminated.
 3666              	.LVL318:
1603:HALLIB/Src/stm32f7xx_hal_sai.c **** }
 3667              		.loc 1 1603 0
ARM GAS  /tmp/cc0s4dWM.s 			page 111


 3668 0000 D0F88000 		ldr	r0, [r0, #128]
 3669              	.LVL319:
1604:HALLIB/Src/stm32f7xx_hal_sai.c **** /**
 3670              		.loc 1 1604 0
 3671 0004 7047     		bx	lr
 3672              		.cfi_endproc
 3673              	.LFE162:
 3675 0006 00BF     		.text
 3676              	.Letext0:
 3677              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 3678              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 3679              		.file 4 "Inc/stm32f767xx.h"
 3680              		.file 5 "Inc/stm32f7xx.h"
 3681              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 3682              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 3683              		.file 8 "HALLIB/Inc/stm32f7xx_hal_sai.h"
 3684              		.file 9 "CORE/core_cm7.h"
 3685              		.file 10 "Inc/system_stm32f7xx.h"
 3686              		.file 11 "HALLIB/Inc/stm32f7xx_hal_rcc_ex.h"
 3687              		.file 12 "HALLIB/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/cc0s4dWM.s 			page 112


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_sai.c
     /tmp/cc0s4dWM.s:21     .text.SAI_InitI2S:00000000 $t
     /tmp/cc0s4dWM.s:25     .text.SAI_InitI2S:00000000 SAI_InitI2S
     /tmp/cc0s4dWM.s:100    .text.SAI_InitI2S:0000005a $d
     /tmp/cc0s4dWM.s:104    .text.SAI_InitI2S:0000005e $t
     /tmp/cc0s4dWM.s:234    .text.SAI_InitPCM:00000000 $t
     /tmp/cc0s4dWM.s:238    .text.SAI_InitPCM:00000000 SAI_InitPCM
     /tmp/cc0s4dWM.s:310    .text.SAI_InitPCM:00000050 $d
     /tmp/cc0s4dWM.s:314    .text.SAI_InitPCM:00000054 $t
     /tmp/cc0s4dWM.s:408    .text.SAI_FillFifo:00000000 $t
     /tmp/cc0s4dWM.s:412    .text.SAI_FillFifo:00000000 SAI_FillFifo
     /tmp/cc0s4dWM.s:481    .text.SAI_InterruptFlag:00000000 $t
     /tmp/cc0s4dWM.s:485    .text.SAI_InterruptFlag:00000000 SAI_InterruptFlag
     /tmp/cc0s4dWM.s:539    .text.SAI_Disable:00000000 $t
     /tmp/cc0s4dWM.s:543    .text.SAI_Disable:00000000 SAI_Disable
     /tmp/cc0s4dWM.s:597    .text.SAI_Disable:0000003c $d
     /tmp/cc0s4dWM.s:603    .text.HAL_SAI_MspInit:00000000 $t
     /tmp/cc0s4dWM.s:608    .text.HAL_SAI_MspInit:00000000 HAL_SAI_MspInit
     /tmp/cc0s4dWM.s:621    .text.HAL_SAI_Init:00000000 $t
     /tmp/cc0s4dWM.s:626    .text.HAL_SAI_Init:00000000 HAL_SAI_Init
     /tmp/cc0s4dWM.s:964    .text.HAL_SAI_Init:000001c0 $d
     /tmp/cc0s4dWM.s:978    .text.HAL_SAI_InitProtocol:00000000 $t
     /tmp/cc0s4dWM.s:983    .text.HAL_SAI_InitProtocol:00000000 HAL_SAI_InitProtocol
     /tmp/cc0s4dWM.s:1003   .text.HAL_SAI_InitProtocol:0000000c $d
     /tmp/cc0s4dWM.s:1044   .text.HAL_SAI_MspDeInit:00000000 $t
     /tmp/cc0s4dWM.s:1049   .text.HAL_SAI_MspDeInit:00000000 HAL_SAI_MspDeInit
     /tmp/cc0s4dWM.s:1062   .text.HAL_SAI_DeInit:00000000 $t
     /tmp/cc0s4dWM.s:1067   .text.HAL_SAI_DeInit:00000000 HAL_SAI_DeInit
     /tmp/cc0s4dWM.s:1133   .text.HAL_SAI_Transmit:00000000 $t
     /tmp/cc0s4dWM.s:1138   .text.HAL_SAI_Transmit:00000000 HAL_SAI_Transmit
     /tmp/cc0s4dWM.s:1331   .text.HAL_SAI_Receive:00000000 $t
     /tmp/cc0s4dWM.s:1336   .text.HAL_SAI_Receive:00000000 HAL_SAI_Receive
     /tmp/cc0s4dWM.s:1523   .text.HAL_SAI_Transmit_IT:00000000 $t
     /tmp/cc0s4dWM.s:1528   .text.HAL_SAI_Transmit_IT:00000000 HAL_SAI_Transmit_IT
     /tmp/cc0s4dWM.s:1660   .text.HAL_SAI_Transmit_IT:00000094 $d
     /tmp/cc0s4dWM.s:2717   .text.SAI_Transmit_IT8Bit:00000000 SAI_Transmit_IT8Bit
     /tmp/cc0s4dWM.s:2655   .text.SAI_Transmit_IT16Bit:00000000 SAI_Transmit_IT16Bit
     /tmp/cc0s4dWM.s:2593   .text.SAI_Transmit_IT32Bit:00000000 SAI_Transmit_IT32Bit
     /tmp/cc0s4dWM.s:1667   .text.HAL_SAI_Receive_IT:00000000 $t
     /tmp/cc0s4dWM.s:1672   .text.HAL_SAI_Receive_IT:00000000 HAL_SAI_Receive_IT
     /tmp/cc0s4dWM.s:1801   .text.HAL_SAI_Receive_IT:0000008c $d
     /tmp/cc0s4dWM.s:3023   .text.SAI_Receive_IT8Bit:00000000 SAI_Receive_IT8Bit
     /tmp/cc0s4dWM.s:2959   .text.SAI_Receive_IT16Bit:00000000 SAI_Receive_IT16Bit
     /tmp/cc0s4dWM.s:2895   .text.SAI_Receive_IT32Bit:00000000 SAI_Receive_IT32Bit
     /tmp/cc0s4dWM.s:1808   .text.HAL_SAI_DMAPause:00000000 $t
     /tmp/cc0s4dWM.s:1813   .text.HAL_SAI_DMAPause:00000000 HAL_SAI_DMAPause
     /tmp/cc0s4dWM.s:1851   .text.HAL_SAI_DMAResume:00000000 $t
     /tmp/cc0s4dWM.s:1856   .text.HAL_SAI_DMAResume:00000000 HAL_SAI_DMAResume
     /tmp/cc0s4dWM.s:1904   .text.HAL_SAI_DMAStop:00000000 $t
     /tmp/cc0s4dWM.s:1909   .text.HAL_SAI_DMAStop:00000000 HAL_SAI_DMAStop
     /tmp/cc0s4dWM.s:1999   .text.HAL_SAI_Abort:00000000 $t
     /tmp/cc0s4dWM.s:2004   .text.HAL_SAI_Abort:00000000 HAL_SAI_Abort
     /tmp/cc0s4dWM.s:2098   .text.HAL_SAI_Transmit_DMA:00000000 $t
     /tmp/cc0s4dWM.s:2103   .text.HAL_SAI_Transmit_DMA:00000000 HAL_SAI_Transmit_DMA
     /tmp/cc0s4dWM.s:2233   .text.HAL_SAI_Transmit_DMA:000000b4 $d
     /tmp/cc0s4dWM.s:2849   .text.SAI_DMATxHalfCplt:00000000 SAI_DMATxHalfCplt
ARM GAS  /tmp/cc0s4dWM.s 			page 113


     /tmp/cc0s4dWM.s:2777   .text.SAI_DMATxCplt:00000000 SAI_DMATxCplt
     /tmp/cc0s4dWM.s:3203   .text.SAI_DMAError:00000000 SAI_DMAError
     /tmp/cc0s4dWM.s:2240   .text.HAL_SAI_Receive_DMA:00000000 $t
     /tmp/cc0s4dWM.s:2245   .text.HAL_SAI_Receive_DMA:00000000 HAL_SAI_Receive_DMA
     /tmp/cc0s4dWM.s:2375   .text.HAL_SAI_Receive_DMA:000000b4 $d
     /tmp/cc0s4dWM.s:3157   .text.SAI_DMARxHalfCplt:00000000 SAI_DMARxHalfCplt
     /tmp/cc0s4dWM.s:3085   .text.SAI_DMARxCplt:00000000 SAI_DMARxCplt
     /tmp/cc0s4dWM.s:2382   .text.HAL_SAI_EnableTxMuteMode:00000000 $t
     /tmp/cc0s4dWM.s:2387   .text.HAL_SAI_EnableTxMuteMode:00000000 HAL_SAI_EnableTxMuteMode
     /tmp/cc0s4dWM.s:2426   .text.HAL_SAI_DisableTxMuteMode:00000000 $t
     /tmp/cc0s4dWM.s:2431   .text.HAL_SAI_DisableTxMuteMode:00000000 HAL_SAI_DisableTxMuteMode
     /tmp/cc0s4dWM.s:2463   .text.HAL_SAI_EnableRxMuteMode:00000000 $t
     /tmp/cc0s4dWM.s:2468   .text.HAL_SAI_EnableRxMuteMode:00000000 HAL_SAI_EnableRxMuteMode
     /tmp/cc0s4dWM.s:2531   .text.HAL_SAI_DisableRxMuteMode:00000000 $t
     /tmp/cc0s4dWM.s:2536   .text.HAL_SAI_DisableRxMuteMode:00000000 HAL_SAI_DisableRxMuteMode
     /tmp/cc0s4dWM.s:2571   .text.HAL_SAI_TxCpltCallback:00000000 $t
     /tmp/cc0s4dWM.s:2576   .text.HAL_SAI_TxCpltCallback:00000000 HAL_SAI_TxCpltCallback
     /tmp/cc0s4dWM.s:2589   .text.SAI_Transmit_IT32Bit:00000000 $t
     /tmp/cc0s4dWM.s:2651   .text.SAI_Transmit_IT16Bit:00000000 $t
     /tmp/cc0s4dWM.s:2713   .text.SAI_Transmit_IT8Bit:00000000 $t
     /tmp/cc0s4dWM.s:2773   .text.SAI_DMATxCplt:00000000 $t
     /tmp/cc0s4dWM.s:2827   .text.HAL_SAI_TxHalfCpltCallback:00000000 $t
     /tmp/cc0s4dWM.s:2832   .text.HAL_SAI_TxHalfCpltCallback:00000000 HAL_SAI_TxHalfCpltCallback
     /tmp/cc0s4dWM.s:2845   .text.SAI_DMATxHalfCplt:00000000 $t
     /tmp/cc0s4dWM.s:2873   .text.HAL_SAI_RxCpltCallback:00000000 $t
     /tmp/cc0s4dWM.s:2878   .text.HAL_SAI_RxCpltCallback:00000000 HAL_SAI_RxCpltCallback
     /tmp/cc0s4dWM.s:2891   .text.SAI_Receive_IT32Bit:00000000 $t
     /tmp/cc0s4dWM.s:2955   .text.SAI_Receive_IT16Bit:00000000 $t
     /tmp/cc0s4dWM.s:3019   .text.SAI_Receive_IT8Bit:00000000 $t
     /tmp/cc0s4dWM.s:3081   .text.SAI_DMARxCplt:00000000 $t
     /tmp/cc0s4dWM.s:3135   .text.HAL_SAI_RxHalfCpltCallback:00000000 $t
     /tmp/cc0s4dWM.s:3140   .text.HAL_SAI_RxHalfCpltCallback:00000000 HAL_SAI_RxHalfCpltCallback
     /tmp/cc0s4dWM.s:3153   .text.SAI_DMARxHalfCplt:00000000 $t
     /tmp/cc0s4dWM.s:3181   .text.HAL_SAI_ErrorCallback:00000000 $t
     /tmp/cc0s4dWM.s:3186   .text.HAL_SAI_ErrorCallback:00000000 HAL_SAI_ErrorCallback
     /tmp/cc0s4dWM.s:3199   .text.SAI_DMAError:00000000 $t
     /tmp/cc0s4dWM.s:3260   .text.HAL_SAI_IRQHandler:00000000 $t
     /tmp/cc0s4dWM.s:3265   .text.HAL_SAI_IRQHandler:00000000 HAL_SAI_IRQHandler
     /tmp/cc0s4dWM.s:3564   .text.HAL_SAI_IRQHandler:00000194 $d
     /tmp/cc0s4dWM.s:3574   .text.SAI_DMAAbort:00000000 SAI_DMAAbort
     /tmp/cc0s4dWM.s:3570   .text.SAI_DMAAbort:00000000 $t
     /tmp/cc0s4dWM.s:3632   .text.HAL_SAI_GetState:00000000 $t
     /tmp/cc0s4dWM.s:3637   .text.HAL_SAI_GetState:00000000 HAL_SAI_GetState
     /tmp/cc0s4dWM.s:3654   .text.HAL_SAI_GetError:00000000 $t
     /tmp/cc0s4dWM.s:3659   .text.HAL_SAI_GetError:00000000 HAL_SAI_GetError
                     .debug_frame:00000010 $d
     /tmp/cc0s4dWM.s:1008   .text.HAL_SAI_InitProtocol:00000011 $d
     /tmp/cc0s4dWM.s:1008   .text.HAL_SAI_InitProtocol:00000012 $t

UNDEFINED SYMBOLS
SystemCoreClock
HAL_RCCEx_GetPeriphCLKFreq
HAL_GetTick
HAL_DMA_Abort
HAL_DMA_Start_IT
HAL_DMA_Abort_IT
