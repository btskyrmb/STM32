ARM GAS  /tmp/ccObssGX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_ltdc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.LTDC_SetConfig,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	LTDC_SetConfig:
  26              	.LFB175:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_ltdc.c"
   1:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @file    stm32f7xx_hal_ltdc.c
   4:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief   LTDC HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *          functionalities of the LTDC peripheral:
   8:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *           + IO operation functions
  10:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *           + Peripheral Control functions  
  11:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *           + Peripheral State and Errors functions
  12:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *           
  13:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   @verbatim      
  14:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_ltdc.c ****                         ##### How to use this driver #####
  16:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   ==============================================================================
  17:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     [..]
  18:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      (#) Program the required configuration through the following parameters:   
  19:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          the LTDC timing, the horizontal and vertical polarity, 
  20:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          the pixel clock polarity, Data Enable polarity and the LTDC background color value 
  21:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          using HAL_LTDC_Init() function
  22:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
  23:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      (#) Program the required configuration through the following parameters:   
  24:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          the pixel format, the blending factors, input alpha value, the window size 
  25:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          and the image size using HAL_LTDC_ConfigLayer() function for foreground
  26:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          or/and background layer.     
  27:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
  28:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      (#) Optionally, configure and enable the CLUT using HAL_LTDC_ConfigCLUT() and 
  29:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          HAL_LTDC_EnableCLUT functions.
  30:HALLIB/Src/stm32f7xx_hal_ltdc.c ****        
  31:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      (#) Optionally, enable the Dither using HAL_LTDC_EnableDither().       
ARM GAS  /tmp/ccObssGX.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
  33:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      (#) Optionally, configure and enable the Color keying using HAL_LTDC_ConfigColorKeying()
  34:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          and HAL_LTDC_EnableColorKeying functions.
  35:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
  36:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      (#) Optionally, configure LineInterrupt using HAL_LTDC_ProgramLineEvent()
  37:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          function
  38:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
  39:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      (#) If needed, reconfigure and change the pixel format value, the alpha value
  40:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          value, the window size, the window position and the layer start address 
  41:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          for foreground or/and background layer using respectively the following 
  42:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          functions: HAL_LTDC_SetPixelFormat(), HAL_LTDC_SetAlpha(), HAL_LTDC_SetWindowSize(),
  43:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          HAL_LTDC_SetWindowPosition(), HAL_LTDC_SetAddress.
  44:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
  45:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      (#) Variant functions with "_NoReload" post fix allows to set the LTDC configuration/settings 
  46:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          This is useful in case when the program requires to modify serval LTDC settings (on one or
  47:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          then applying(reload) these settings in one shot by calling the function "HAL_LTDC_Reload"
  48:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
  49:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          After calling the "_NoReload" functions to set different color/format/layer settings, 
  50:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          the program can call the function "HAL_LTDC_Reload" To apply(Reload) these settings. 
  51:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          Function "HAL_LTDC_Reload" can be called with the parameter "ReloadType" 
  52:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          set to LTDC_RELOAD_IMMEDIATE if an immediate reload is required.
  53:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          Function "HAL_LTDC_Reload" can be called with the parameter "ReloadType" 
  54:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          set to LTDC_RELOAD_VERTICAL_BLANKING if the reload should be done in the next vertical bla
  55:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          this option allows to avoid display flicker by applying the new settings during the vertic
  56:HALLIB/Src/stm32f7xx_hal_ltdc.c ****            
  57:HALLIB/Src/stm32f7xx_hal_ltdc.c ****                      
  58:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      (#) To control LTDC state you can use the following function: HAL_LTDC_GetState()             
  59:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
  60:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      *** LTDC HAL driver macros list ***
  61:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      ============================================= 
  62:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      [..]
  63:HALLIB/Src/stm32f7xx_hal_ltdc.c ****        Below the list of most used macros in LTDC HAL driver.
  64:HALLIB/Src/stm32f7xx_hal_ltdc.c ****        
  65:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) __HAL_LTDC_ENABLE: Enable the LTDC.
  66:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) __HAL_LTDC_DISABLE: Disable the LTDC.
  67:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) __HAL_LTDC_LAYER_ENABLE: Enable the LTDC Layer.
  68:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) __HAL_LTDC_LAYER_DISABLE: Disable the LTDC Layer.
  69:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) __HAL_LTDC_RELOAD_CONFIG: Reload  Layer Configuration.
  70:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) __HAL_LTDC_GET_FLAG: Get the LTDC pending flags.
  71:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) __HAL_LTDC_CLEAR_FLAG: Clear the LTDC pending flags.
  72:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) __HAL_LTDC_ENABLE_IT: Enable the specified LTDC interrupts. 
  73:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) __HAL_LTDC_DISABLE_IT: Disable the specified LTDC interrupts.
  74:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) __HAL_LTDC_GET_IT_SOURCE: Check whether the specified LTDC interrupt has occurred or not.
  75:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       
  76:HALLIB/Src/stm32f7xx_hal_ltdc.c ****      [..] 
  77:HALLIB/Src/stm32f7xx_hal_ltdc.c ****        (@) You can refer to the LTDC HAL driver header file for more useful macros
  78:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
  79:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   @endverbatim
  80:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   ******************************************************************************
  81:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @attention
  82:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *
  83:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  84:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *
  85:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  86:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * are permitted provided that the following conditions are met:
  87:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  88:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *      this list of conditions and the following disclaimer.
ARM GAS  /tmp/ccObssGX.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  90:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *      this list of conditions and the following disclaimer in the documentation
  91:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *      and/or other materials provided with the distribution.
  92:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  93:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *      may be used to endorse or promote products derived from this software
  94:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *      without specific prior written permission.
  95:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *
  96:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  97:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  98:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  99:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 100:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 101:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 102:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 103:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 104:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 105:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 106:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *
 107:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   ******************************************************************************
 108:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */ 
 109:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 110:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /* Includes ------------------------------------------------------------------*/
 111:HALLIB/Src/stm32f7xx_hal_ltdc.c **** #include "stm32f7xx_hal.h"
 112:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 113:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /** @addtogroup STM32F7xx_HAL_Driver
 114:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @{
 115:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 116:HALLIB/Src/stm32f7xx_hal_ltdc.c **** #if defined (STM32F746xx) || defined (STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx
 117:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 118:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /** @defgroup LTDC LTDC
 119:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief LTDC HAL module driver
 120:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @{
 121:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 122:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 123:HALLIB/Src/stm32f7xx_hal_ltdc.c **** #ifdef HAL_LTDC_MODULE_ENABLED
 124:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 125:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /* Private typedef -----------------------------------------------------------*/
 126:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /* Private define ------------------------------------------------------------*/
 127:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /* Private macro -------------------------------------------------------------*/
 128:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /* Private variables ---------------------------------------------------------*/    
 129:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /* Private function prototypes -----------------------------------------------*/
 130:HALLIB/Src/stm32f7xx_hal_ltdc.c **** static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t Lay
 131:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /* Private functions ---------------------------------------------------------*/
 132:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 133:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /** @defgroup LTDC_Exported_Functions LTDC Exported Functions
 134:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @{
 135:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 136:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 137:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /** @defgroup LTDC_Exported_Functions_Group1 Initialization and Configuration functions
 138:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  *  @brief   Initialization and Configuration functions
 139:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  *
 140:HALLIB/Src/stm32f7xx_hal_ltdc.c **** @verbatim   
 141:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  ===============================================================================
 142:HALLIB/Src/stm32f7xx_hal_ltdc.c ****                 ##### Initialization and Configuration functions #####
 143:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  ===============================================================================  
 144:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     [..]  This section provides functions allowing to:
 145:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Initialize and configure the LTDC
ARM GAS  /tmp/ccObssGX.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) De-initialize the LTDC 
 147:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 148:HALLIB/Src/stm32f7xx_hal_ltdc.c **** @endverbatim
 149:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @{
 150:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 151:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 152:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 153:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Initializes the LTDC according to the specified
 154:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         parameters in the LTDC_InitTypeDef and create the associated handle.
 155:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
 156:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                the configuration information for the LTDC.
 157:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval HAL status
 158:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 159:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
 160:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 161:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0, tmp1 = 0;
 162:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 163:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the LTDC peripheral state */
 164:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   if(hltdc == NULL)
 165:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 166:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     return HAL_ERROR;
 167:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 168:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 169:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check function parameters */
 170:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 171:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 172:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 173:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 174:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 175:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 176:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 177:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 178:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 179:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 180:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 181:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 182:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 183:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 184:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   if(hltdc->State == HAL_LTDC_STATE_RESET)
 185:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 186:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     /* Allocate lock resource and initialize it */
 187:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     hltdc->Lock = HAL_UNLOCKED;
 188:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     /* Init the low level hardware */
 189:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     HAL_LTDC_MspInit(hltdc);
 190:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 191:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 192:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 193:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
 194:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 195:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Configures the HS, VS, DE and PC polarity */
 196:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 197:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 198:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 199:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 200:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets Synchronization size */
 201:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 202:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = (hltdc->Init.HorizontalSync << 16);
ARM GAS  /tmp/ccObssGX.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 204:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 205:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets Accumulated Back porch */
 206:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 207:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = (hltdc->Init.AccumulatedHBP << 16);
 208:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 209:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 210:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets Accumulated Active Width */
 211:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 212:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = (hltdc->Init.AccumulatedActiveW << 16);
 213:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 214:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 215:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets Total Width */
 216:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 217:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = (hltdc->Init.TotalWidth << 16);
 218:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 219:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 220:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the background color value */
 221:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 222:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 223:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 224:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 225:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 226:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Enable the transfer Error interrupt */
 227:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 228:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 229:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Enable the FIFO underrun interrupt */
 230:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 231:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 232:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Enable LTDC by setting LTDCEN bit */
 233:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LTDC_ENABLE(hltdc);
 234:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 235:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Initialize the error code */
 236:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 237:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 238:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Initialize the LTDC state*/
 239:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
 240:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 241:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 242:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 243:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 244:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 245:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Deinitializes the LTDC peripheral registers to their default reset
 246:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         values.
 247:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
 248:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                the configuration information for the LTDC.
 249:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval None
 250:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 251:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 252:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
 253:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 254:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* DeInit the low level hardware */
 255:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   HAL_LTDC_MspDeInit(hltdc); 
 256:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 257:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Initialize the error code */
 258:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 259:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Initialize the LTDC state*/
 261:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_RESET;
 262:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 263:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Release Lock */
 264:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 265:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 266:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 267:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 268:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 269:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 270:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Initializes the LTDC MSP.
 271:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
 272:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                the configuration information for the LTDC.
 273:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval None
 274:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 275:HALLIB/Src/stm32f7xx_hal_ltdc.c **** __weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
 276:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 277:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Prevent unused argument(s) compilation warning */
 278:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   UNUSED(hltdc);
 279:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 280:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 281:HALLIB/Src/stm32f7xx_hal_ltdc.c ****             the HAL_LTDC_MspInit could be implemented in the user file
 282:HALLIB/Src/stm32f7xx_hal_ltdc.c ****    */ 
 283:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 284:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 285:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 286:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  DeInitializes the LTDC MSP.
 287:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
 288:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                the configuration information for the LTDC.
 289:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval None
 290:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 291:HALLIB/Src/stm32f7xx_hal_ltdc.c **** __weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* hltdc)
 292:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 293:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Prevent unused argument(s) compilation warning */
 294:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   UNUSED(hltdc);
 295:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 296:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 297:HALLIB/Src/stm32f7xx_hal_ltdc.c ****             the HAL_LTDC_MspDeInit could be implemented in the user file
 298:HALLIB/Src/stm32f7xx_hal_ltdc.c ****    */
 299:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 300:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 301:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 302:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @}
 303:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 304:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 305:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /** @defgroup LTDC_Exported_Functions_Group2 IO operation functions 
 306:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  *  @brief   IO operation functions  
 307:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  *
 308:HALLIB/Src/stm32f7xx_hal_ltdc.c **** @verbatim
 309:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  ===============================================================================
 310:HALLIB/Src/stm32f7xx_hal_ltdc.c ****                       #####  IO operation functions  #####
 311:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  ===============================================================================  
 312:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     [..]  This section provides function allowing to:
 313:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Handle LTDC interrupt request
 314:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 315:HALLIB/Src/stm32f7xx_hal_ltdc.c **** @endverbatim
 316:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @{
ARM GAS  /tmp/ccObssGX.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 318:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 319:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Handles LTDC interrupt request.
 320:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
 321:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                the configuration information for the LTDC.  
 322:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval HAL status
 323:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 324:HALLIB/Src/stm32f7xx_hal_ltdc.c **** void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
 325:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 326:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Transfer Error Interrupt management ***************************************/
 327:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 328:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 329:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 330:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     {
 331:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Disable the transfer Error interrupt */
 332:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 333:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 334:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Clear the transfer error flag */
 335:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 336:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 337:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Update error code */
 338:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 339:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 340:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Change LTDC state */
 341:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       hltdc->State = HAL_LTDC_STATE_ERROR;
 342:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 343:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Process unlocked */
 344:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_UNLOCK(hltdc);
 345:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 346:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Transfer error Callback */
 347:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       HAL_LTDC_ErrorCallback(hltdc);
 348:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 349:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 350:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* FIFO underrun Interrupt management ***************************************/
 351:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 352:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 353:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 354:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     {
 355:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Disable the FIFO underrun interrupt */
 356:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 357:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 358:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Clear the FIFO underrun flag */
 359:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 360:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 361:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Update error code */
 362:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 363:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 364:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Change LTDC state */
 365:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       hltdc->State = HAL_LTDC_STATE_ERROR;
 366:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 367:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Process unlocked */
 368:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_UNLOCK(hltdc);
 369:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       
 370:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Transfer error Callback */
 371:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       HAL_LTDC_ErrorCallback(hltdc);
 372:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 373:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
ARM GAS  /tmp/ccObssGX.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Line Interrupt management ************************************************/
 375:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 376:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 377:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 378:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     {
 379:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Disable the Line interrupt */
 380:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 381:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 382:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Clear the Line interrupt flag */  
 383:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 384:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 385:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Change LTDC state */
 386:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       hltdc->State = HAL_LTDC_STATE_READY;
 387:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 388:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Process unlocked */
 389:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_UNLOCK(hltdc);
 390:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 391:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Line interrupt Callback */
 392:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       HAL_LTDC_LineEventCallback(hltdc);
 393:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 394:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 395:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Register reload Interrupt management ***************************************/
 396:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 397:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 398:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 399:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     {
 400:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Disable the register reload interrupt */
 401:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 402:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       
 403:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Clear the register reload flag */
 404:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 405:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       
 406:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Change LTDC state */
 407:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       hltdc->State = HAL_LTDC_STATE_READY;
 408:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       
 409:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Process unlocked */
 410:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       __HAL_UNLOCK(hltdc);
 411:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       
 412:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       /* Register reload interrupt Callback */
 413:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       HAL_LTDC_ReloadEventCallback(hltdc);
 414:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 415:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }  
 416:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 417:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 418:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 419:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Error LTDC callback.
 420:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
 421:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                the configuration information for the LTDC.
 422:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval None
 423:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 424:HALLIB/Src/stm32f7xx_hal_ltdc.c **** __weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 425:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 426:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Prevent unused argument(s) compilation warning */
 427:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   UNUSED(hltdc);
 428:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 429:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 430:HALLIB/Src/stm32f7xx_hal_ltdc.c ****             the HAL_LTDC_ErrorCallback could be implemented in the user file
ARM GAS  /tmp/ccObssGX.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_ltdc.c ****    */
 432:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 433:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 434:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 435:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Line Event callback.
 436:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
 437:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                the configuration information for the LTDC.
 438:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval None
 439:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 440:HALLIB/Src/stm32f7xx_hal_ltdc.c **** __weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 441:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 442:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Prevent unused argument(s) compilation warning */
 443:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   UNUSED(hltdc);
 444:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 445:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 446:HALLIB/Src/stm32f7xx_hal_ltdc.c ****             the HAL_LTDC_LineEventCallback could be implemented in the user file
 447:HALLIB/Src/stm32f7xx_hal_ltdc.c ****    */
 448:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 449:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 450:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 451:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Reload Event callback.
 452:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
 453:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                the configuration information for the LTDC.
 454:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval None
 455:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 456:HALLIB/Src/stm32f7xx_hal_ltdc.c **** __weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 457:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 458:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Prevent unused argument(s) compilation warning */
 459:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   UNUSED(hltdc);
 460:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 461:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 462:HALLIB/Src/stm32f7xx_hal_ltdc.c ****             the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
 463:HALLIB/Src/stm32f7xx_hal_ltdc.c ****    */
 464:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 465:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 466:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 467:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @}
 468:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 469:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 470:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /** @defgroup LTDC_Exported_Functions_Group3 Peripheral Control functions
 471:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  *  @brief    Peripheral Control functions 
 472:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  *
 473:HALLIB/Src/stm32f7xx_hal_ltdc.c **** @verbatim   
 474:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  ===============================================================================
 475:HALLIB/Src/stm32f7xx_hal_ltdc.c ****                     ##### Peripheral Control functions #####
 476:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  ===============================================================================  
 477:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     [..]  This section provides functions allowing to:
 478:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Configure the LTDC foreground or/and background parameters.
 479:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Set the active layer.
 480:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Configure the color keying.
 481:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Configure the C-LUT.
 482:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Enable / Disable the color keying.
 483:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Enable / Disable the C-LUT.
 484:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Update the layer position.
 485:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Update the layer size.
 486:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Update pixel format on the fly. 
 487:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Update transparency on the fly.
ARM GAS  /tmp/ccObssGX.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Update address on the fly.
 489:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 490:HALLIB/Src/stm32f7xx_hal_ltdc.c **** @endverbatim
 491:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @{
 492:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 493:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 494:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 495:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Configure the LTDC Layer according to the specified
 496:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         parameters in the LTDC_InitTypeDef and create the associated handle.
 497:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
 498:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                    the configuration information for the LTDC.
 499:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  pLayerCfg pointer to a LTDC_LayerCfgTypeDef structure that contains
 500:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                    the configuration information for the Layer.
 501:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
 502:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                    This parameter can be one of the following values:
 503:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                    0 or 1
 504:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval HAL status
 505:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 506:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, 
 507:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {   
 508:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 509:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 510:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 511:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 512:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
 513:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 514:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
 515:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
 516:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 517:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 518:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 519:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 520:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 521:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 522:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 523:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 524:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 525:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 526:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 527:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Copy new layer configuration into handle structure */
 528:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 529:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 530:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Configure the LTDC Layer */  
 531:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 532:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 533:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type */
 534:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 535:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 536:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Initialize the LTDC state*/
 537:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State  = HAL_LTDC_STATE_READY;
 538:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 539:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
 540:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 541:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 542:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 543:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 544:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 546:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Configure the color keying.
 547:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
 548:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
 549:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  RGBValue the color key value
 550:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
 551:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
 552:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
 553:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval HAL status
 554:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 555:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t
 556:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 557:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 558:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 559:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 560:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 561:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
 562:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 563:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
 564:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
 565:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 566:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Configures the default color values */
 567:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CK
 568:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 569:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 570:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type */
 571:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 572:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 573:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
 574:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
 575:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 576:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
 577:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 578:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 579:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 580:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 581:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 582:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 583:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Load the color lookup table.
 584:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
 585:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
 586:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  pCLUT    pointer to the color lookup table address.
 587:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  CLUTSize the color lookup table size.  
 588:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
 589:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
 590:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
 591:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval HAL status
 592:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 593:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize
 594:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 595:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0;
 596:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t counter = 0;
 597:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t pcounter = 0;
 598:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 599:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 600:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 601:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 603:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;  
 604:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 605:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
 606:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx)); 
 607:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 608:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   for(counter = 0; (counter < CLUTSize); counter++)
 609:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 610:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 611:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     {
 612:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       tmp  = (((counter + 16*counter) << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 
 613:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 614:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     else
 615:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     { 
 616:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       tmp  = ((counter << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uin
 617:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 618:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 619:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     pCLUT = (uint32_t *)pcounter;
 620:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 621:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     /* Specifies the C-LUT address and RGB value */
 622:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 623:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 624:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 625:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
 626:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY; 
 627:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 628:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
 629:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);  
 630:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 631:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 632:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 633:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 634:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 635:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Enable the color keying.
 636:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
 637:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
 638:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
 639:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
 640:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
 641:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
 642:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 643:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
 644:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {  
 645:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 646:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 647:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 648:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 649:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
 650:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 651:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
 652:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
 653:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 654:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Enable LTDC color keying by setting COLKEN bit */
 655:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 656:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 657:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type */
 658:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = LTDC_SRCR_IMR;
ARM GAS  /tmp/ccObssGX.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 660:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
 661:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY; 
 662:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 663:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
 664:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 665:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 666:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;  
 667:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 668:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 669:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 670:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Disable the color keying.
 671:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
 672:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
 673:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
 674:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
 675:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
 676:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
 677:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 678:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
 679:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 680:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 681:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 682:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 683:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 684:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
 685:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 686:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
 687:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
 688:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 689:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Disable LTDC color keying by setting COLKEN bit */
 690:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 691:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 692:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type */
 693:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 694:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 695:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
 696:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY; 
 697:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 698:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
 699:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 700:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 701:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 702:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 703:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 704:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 705:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Enable the color lookup table.
 706:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
 707:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
 708:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
 709:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
 710:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
 711:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
 712:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 713:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
 714:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 715:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 717:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 718:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 719:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 720:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
 721:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 722:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
 723:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
 724:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 725:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Disable LTDC color lookup table by setting CLUTEN bit */
 726:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 727:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 728:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type */
 729:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 730:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 731:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
 732:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY; 
 733:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 734:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
 735:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 736:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 737:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 738:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 739:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 740:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 741:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Disable the color lookup table.
 742:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
 743:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
 744:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
 745:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
 746:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1   
 747:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
 748:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 749:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_DisableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
 750:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 751:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  
 752:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 753:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 754:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 755:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 756:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
 757:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 758:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
 759:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
 760:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 761:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Disable LTDC color lookup table by setting CLUTEN bit */
 762:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 763:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 764:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type */
 765:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 766:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 767:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
 768:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY; 
 769:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 770:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
 771:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 772:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 774:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 775:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 776:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 777:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Enables Dither.
 778:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
 779:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                the configuration information for the LTDC.
 780:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
 781:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 782:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 783:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
 784:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 785:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 786:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 787:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 788:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 789:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
 790:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 791:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Enable Dither by setting DTEN bit */
 792:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 793:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 794:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
 795:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY; 
 796:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 797:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
 798:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 799:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 800:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 801:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 802:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 803:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 804:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Disables Dither.
 805:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
 806:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                the configuration information for the LTDC.
 807:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
 808:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 809:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 810:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_DisableDither(LTDC_HandleTypeDef *hltdc)
 811:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 812:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 813:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 814:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 815:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 816:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
 817:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 818:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Disable Dither by setting DTEN bit */
 819:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC->GCR &= ~(uint32_t)LTDC_GCR_DEN;
 820:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 821:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
 822:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
 823:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 824:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
 825:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 826:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 827:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 828:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 829:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 831:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Set the LTDC window size.
 832:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
 833:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
 834:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  XSize    LTDC Pixel per line
 835:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  YSize    LTDC Line number
 836:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
 837:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
 838:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
 839:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
 840:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 841:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetWindowSize(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32_t YSize,
 842:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 843:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 844:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 845:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 846:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 847:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 848:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 849:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY; 
 850:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 851:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Get layer configuration from handle structure */
 852:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 853:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 854:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters (Layers parameters)*/
 855:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
 856:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 857:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 858:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 859:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 860:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_CFBLL(XSize));
 861:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_CFBLNBR(YSize));
 862:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 863:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* update horizontal start/stop */
 864:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX0 = 0;
 865:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 866:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 867:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* update vertical start/stop */  
 868:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY0 = 0;
 869:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 870:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 871:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Reconfigures the color frame buffer pitch in byte */
 872:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->ImageWidth = XSize;
 873:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 874:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Reconfigures the frame buffer line number */
 875:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->ImageHeight = YSize;
 876:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 877:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set LTDC parameters */
 878:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 879:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 880:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type */
 881:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 882:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 883:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
 884:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
 885:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 886:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
ARM GAS  /tmp/ccObssGX.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 888:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 889:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 890:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 891:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 892:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 893:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Set the LTDC window position.
 894:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
 895:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
 896:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  X0       LTDC window X offset
 897:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  Y0       LTDC window Y offset
 898:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
 899:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                         This parameter can be one of the following values:
 900:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                         0 or 1
 901:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
 902:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 903:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, u
 904:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 905:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 906:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 907:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 908:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 909:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 910:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 911:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
 912:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 913:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Get layer configuration from handle structure */
 914:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 915:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 916:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
 917:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
 918:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 919:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 920:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 921:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 922:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 923:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* update horizontal start/stop */
 924:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX0 = X0;
 925:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 926:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 927:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* update vertical start/stop */
 928:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY0 = Y0;
 929:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 930:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 931:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set LTDC parameters */
 932:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 933:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 934:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type */
 935:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 936:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 937:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
 938:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
 939:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 940:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
 941:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 942:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 943:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
ARM GAS  /tmp/ccObssGX.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 945:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 946:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 947:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Reconfigure the pixel format.
 948:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc       pointer to a LTDC_HandleTypeDef structure that contains
 949:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                      the configuration information for the LTDC.
 950:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  Pixelformat new pixel format value.
 951:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx    LTDC Layer index.
 952:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                      This parameter can be one of the following values:
 953:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                      0 or 1.
 954:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
 955:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
 956:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetPixelFormat(LTDC_HandleTypeDef *hltdc, uint32_t Pixelformat, uint32_t
 957:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
 958:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 959:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 960:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 961:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
 962:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 963:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
 964:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
 965:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 966:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
 967:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
 968:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_PIXEL_FORMAT(Pixelformat));
 969:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 970:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Get layer configuration from handle structure */
 971:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg = &hltdc->LayerCfg[LayerIdx];  
 972:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 973:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Reconfigure the pixel format */
 974:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->PixelFormat = Pixelformat;
 975:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 976:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set LTDC parameters */
 977:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);   
 978:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 979:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type */
 980:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 981:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 982:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
 983:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
 984:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 985:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
 986:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
 987:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 988:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
 989:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 990:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 991:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 992:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Reconfigure the layer alpha value.
 993:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
 994:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
 995:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  Alpha    new alpha value.
 996:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
 997:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
 998:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
 999:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1000:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
ARM GAS  /tmp/ccObssGX.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
1002:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1003:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
1004:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1005:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1006:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1007:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1008:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1009:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1010:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1011:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1012:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_ALPHA(Alpha));
1013:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1014:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1015:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Get layer configuration from handle structure */
1016:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg = &hltdc->LayerCfg[LayerIdx];
1017:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1018:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Reconfigure the Alpha value */
1019:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->Alpha = Alpha;
1020:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1021:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set LTDC parameters */
1022:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
1023:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1024:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type */
1025:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = LTDC_SRCR_IMR;
1026:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1027:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1028:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
1029:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1030:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1031:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1032:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1033:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1034:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1035:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1036:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Reconfigure the frame buffer Address.
1037:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
1038:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
1039:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  Address  new address value.
1040:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx LTDC Layer index.
1041:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
1042:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1.
1043:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1044:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1045:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerId
1046:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1047:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
1048:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1049:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1050:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1051:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1052:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1053:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1054:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1055:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1056:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1057:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Get layer configuration from handle structure */
1059:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg = &hltdc->LayerCfg[LayerIdx];
1060:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1061:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Reconfigure the Address */
1062:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->FBStartAdress = Address;
1063:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1064:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set LTDC parameters */
1065:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
1066:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1067:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type */
1068:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = LTDC_SRCR_IMR;
1069:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1070:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1071:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
1072:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1073:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1074:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1075:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1076:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1077:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1078:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1079:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1080:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Function used to reconfigure the pitch for specific cases where the attached LayerIdx b
1081:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         larger than the one intended to be displayed on screen. Example of a buffer 800x480 att
1082:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         want to read and display on screen only a portion 320x240 taken in the center of the bu
1083:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         will be in that case 800 pixels and not 320 pixels as initially configured by previous 
1084:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Note : this function should be called only after a previous call to HAL_LTDC_ConfigLaye
1085:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                configured by HAL_LTDC_ConfigLayer() when required (refer to example described j
1086:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc             pointer to a LTDC_HandleTypeDef structure that contains
1087:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                            the configuration information for the LTDC.
1088:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LinePitchInPixels New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
1089:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx          LTDC layer index concerned by the modification of line pitch.
1090:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval HAL status
1091:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1092:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t
1093:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1094:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0;
1095:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t pitchUpdate = 0;
1096:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t pixelFormat = 0;
1097:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1098:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1099:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1100:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1101:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1102:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1103:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1104:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1105:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1106:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1107:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* get LayerIdx used pixel format */
1108:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
1109:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1110:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   if(pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
1111:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
1112:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 4;
1113:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1114:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
ARM GAS  /tmp/ccObssGX.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
1116:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 3;
1117:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1118:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   else if((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
1119:HALLIB/Src/stm32f7xx_hal_ltdc.c ****           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
1120:HALLIB/Src/stm32f7xx_hal_ltdc.c ****           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
1121:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
1122:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
1123:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 2;
1124:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1125:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   else
1126:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
1127:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 1;
1128:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1129:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1130:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pitchUpdate = ((LinePitchInPixels * tmp) << 16);
1131:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1132:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Clear previously set standard pitch */
1133:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
1134:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1135:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type as immediate update of LTDC pitch configured above */
1136:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC->SRCR |= LTDC_SRCR_IMR;
1137:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1138:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set new line pitch value */
1139:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
1140:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1141:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Reload type as immediate update of LTDC pitch configured above */
1142:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC->SRCR |= LTDC_SRCR_IMR;
1143:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1144:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1145:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
1146:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1147:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1148:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1149:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1150:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;  
1151:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1152:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1153:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1154:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Define the position of the line interrupt.
1155:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc             pointer to a LTDC_HandleTypeDef structure that contains
1156:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                            the configuration information for the LTDC.
1157:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  Line   Line Interrupt Position.
1158:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1159:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1160:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
1161:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1162:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1163:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1164:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1165:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1166:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1167:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1168:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1169:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LIPOS(Line));
1170:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1171:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Enable the Line interrupt */
ARM GAS  /tmp/ccObssGX.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
1173:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1174:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Sets the Line Interrupt position */
1175:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC->LIPCR = (uint32_t)Line;
1176:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1177:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1178:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
1179:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1180:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1181:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1182:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1183:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1184:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1185:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1186:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1187:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  LTDC configuration reload.
1188:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc            pointer to a LTDC_HandleTypeDef structure that contains
1189:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                           the configuration information for the LTDC.
1190:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  ReloadType       This parameter can be one of the following values :
1191:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                           LTDC_RELOAD_IMMEDIATE : Immediate Reload
1192:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                           LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
1193:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1194:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1195:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
1196:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1197:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_RELAOD(ReloadType));
1198:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1199:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1200:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1201:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1202:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1203:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;  
1204:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1205:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Enable the Reload interrupt */  
1206:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
1207:HALLIB/Src/stm32f7xx_hal_ltdc.c ****        
1208:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Apply Reload type */
1209:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SRCR = ReloadType;        
1210:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1211:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1212:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
1213:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1214:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1215:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1216:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1217:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1218:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1219:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1220:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1221:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Configure the LTDC Layer according to the specified without reloading
1222:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         parameters in the LTDC_InitTypeDef and create the associated handle.
1223:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_ConfigLayer without immediate reload
1224:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
1225:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                    the configuration information for the LTDC.
1226:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  pLayerCfg pointer to a LTDC_LayerCfgTypeDef structure that contains
1227:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                    the configuration information for the Layer.
1228:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
ARM GAS  /tmp/ccObssGX.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                    This parameter can be one of the following values:
1230:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                    0 or 1
1231:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval HAL status
1232:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1233:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_ConfigLayer_NoReload(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pL
1234:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {   
1235:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1236:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1237:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1238:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1239:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1240:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1241:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1242:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1243:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
1244:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
1245:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
1246:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
1247:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
1248:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
1249:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
1250:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
1251:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
1252:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
1253:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1254:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Copy new layer configuration into handle structure */
1255:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
1256:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1257:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Configure the LTDC Layer */  
1258:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
1259:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1260:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1261:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1262:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Initialize the LTDC state*/
1263:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State  = HAL_LTDC_STATE_READY;
1264:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1265:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1266:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1267:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1268:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1269:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1270:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1271:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1272:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Set the LTDC window size without reloading.
1273:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_SetWindowSize without immediate reload
1274:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
1275:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
1276:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  XSize    LTDC Pixel per line
1277:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  YSize    LTDC Line number
1278:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
1279:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
1280:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
1281:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1282:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1283:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetWindowSize_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32
1284:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1285:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
ARM GAS  /tmp/ccObssGX.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1287:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1288:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1289:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1290:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1291:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY; 
1292:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1293:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Get layer configuration from handle structure */
1294:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg = &hltdc->LayerCfg[LayerIdx];
1295:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1296:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters (Layers parameters)*/
1297:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1298:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
1299:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
1300:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
1301:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
1302:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_CFBLL(XSize));
1303:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_CFBLNBR(YSize));
1304:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1305:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* update horizontal start/stop */
1306:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX0 = 0;
1307:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
1308:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1309:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* update vertical start/stop */  
1310:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY0 = 0;
1311:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
1312:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1313:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Reconfigures the color frame buffer pitch in byte */
1314:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->ImageWidth = XSize;
1315:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1316:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Reconfigures the frame buffer line number */
1317:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->ImageHeight = YSize;
1318:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1319:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set LTDC parameters */
1320:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
1321:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1322:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1323:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1324:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1325:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
1326:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1327:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1328:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1329:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1330:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1331:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1332:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1333:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1334:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Set the LTDC window position without reloading.
1335:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_SetWindowPosition without immediate reload
1336:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
1337:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
1338:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  X0       LTDC window X offset
1339:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  Y0       LTDC window Y offset
1340:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
1341:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                         This parameter can be one of the following values:
1342:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                         0 or 1
ARM GAS  /tmp/ccObssGX.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1344:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1345:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetWindowPosition_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint3
1346:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1347:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
1348:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1349:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1350:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1351:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1352:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1353:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1354:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1355:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Get layer configuration from handle structure */
1356:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg = &hltdc->LayerCfg[LayerIdx];
1357:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1358:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1359:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1360:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
1361:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
1362:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
1363:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
1364:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1365:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* update horizontal start/stop */
1366:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX0 = X0;
1367:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
1368:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1369:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* update vertical start/stop */
1370:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY0 = Y0;
1371:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
1372:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1373:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set LTDC parameters */
1374:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
1375:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1376:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1377:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1378:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1379:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
1380:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1381:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1382:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1383:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1384:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1385:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1386:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1387:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1388:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Reconfigure the pixel format without reloading.
1389:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_SetPixelFormat without immediate reload
1390:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc       pointer to a LTDC_HandleTypeDfef structure that contains
1391:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                      the configuration information for the LTDC.
1392:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  Pixelformat new pixel format value.
1393:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx    LTDC Layer index.
1394:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                      This parameter can be one of the following values:
1395:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                      0 or 1.
1396:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1397:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1398:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetPixelFormat_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Pixelformat,
1399:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
ARM GAS  /tmp/ccObssGX.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
1401:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1402:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1403:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1404:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1405:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1406:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1407:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1408:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1409:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1410:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_PIXEL_FORMAT(Pixelformat));
1411:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1412:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Get layer configuration from handle structure */
1413:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg = &hltdc->LayerCfg[LayerIdx];  
1414:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1415:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Reconfigure the pixel format */
1416:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->PixelFormat = Pixelformat;
1417:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1418:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set LTDC parameters */
1419:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);   
1420:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1421:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1422:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1423:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1424:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
1425:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1426:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1427:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1428:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1429:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1430:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1431:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1432:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1433:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Reconfigure the layer alpha value without reloading.
1434:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_SetAlpha without immediate reload
1435:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
1436:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
1437:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  Alpha    new alpha value.
1438:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
1439:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
1440:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
1441:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1442:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1443:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetAlpha_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t La
1444:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1445:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
1446:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1447:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1448:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1449:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1450:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1451:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1452:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1453:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1454:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_ALPHA(Alpha));
1455:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1456:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 27


1457:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Get layer configuration from handle structure */
1458:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg = &hltdc->LayerCfg[LayerIdx];
1459:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1460:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Reconfigure the Alpha value */
1461:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->Alpha = Alpha;
1462:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1463:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set LTDC parameters */
1464:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
1465:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1466:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1467:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1468:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1469:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
1470:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1471:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1472:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1473:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1474:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1475:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1476:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1477:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1478:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Reconfigure the frame buffer Address without reloading.
1479:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_SetAddress without immediate reload   
1480:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
1481:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
1482:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  Address  new address value.
1483:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx LTDC Layer index.
1484:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
1485:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1.
1486:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1487:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1488:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetAddress_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_
1489:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1490:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
1491:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1492:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1493:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1494:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1495:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1496:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1497:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1498:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1499:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1500:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1501:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Get layer configuration from handle structure */
1502:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg = &hltdc->LayerCfg[LayerIdx];
1503:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1504:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Reconfigure the Address */
1505:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->FBStartAdress = Address;
1506:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1507:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set LTDC parameters */
1508:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
1509:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1510:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1511:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1512:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1513:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
ARM GAS  /tmp/ccObssGX.s 			page 28


1514:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1515:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1516:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1517:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1518:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1519:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1520:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1521:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1522:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Function used to reconfigure the pitch for specific cases where the attached LayerIdx b
1523:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         larger than the one intended to be displayed on screen. Example of a buffer 800x480 att
1524:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         want to read and display on screen only a portion 320x240 taken in the center of the bu
1525:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         will be in that case 800 pixels and not 320 pixels as initially configured by previous 
1526:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Note : this function should be called only after a previous call to HAL_LTDC_ConfigLaye
1527:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                configured by HAL_LTDC_ConfigLayer() when required (refer to example described j
1528:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_SetPitch without immediate reload    
1529:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc             pointer to a LTDC_HandleTypeDef structure that contains
1530:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                            the configuration information for the LTDC.
1531:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LinePitchInPixels New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
1532:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx          LTDC layer index concerned by the modification of line pitch.
1533:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval HAL status
1534:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1535:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_SetPitch_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels,
1536:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1537:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0;
1538:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t pitchUpdate = 0;
1539:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t pixelFormat = 0;
1540:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1541:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1542:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1543:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1544:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1545:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1546:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1547:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1548:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1549:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1550:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* get LayerIdx used pixel format */
1551:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
1552:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1553:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   if(pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
1554:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
1555:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 4;
1556:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1557:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
1558:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
1559:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 3;
1560:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1561:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   else if((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
1562:HALLIB/Src/stm32f7xx_hal_ltdc.c ****           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
1563:HALLIB/Src/stm32f7xx_hal_ltdc.c ****           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
1564:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
1565:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
1566:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 2;
1567:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1568:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   else
1569:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
1570:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 1;
ARM GAS  /tmp/ccObssGX.s 			page 29


1571:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1572:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1573:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pitchUpdate = ((LinePitchInPixels * tmp) << 16);
1574:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1575:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Clear previously set standard pitch */
1576:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
1577:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1578:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Set new line pitch value */
1579:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
1580:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1581:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1582:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1583:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1584:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
1585:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1586:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1587:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1588:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
1589:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;  
1590:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1591:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1592:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1593:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1594:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Configure the color keying without reloading.
1595:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_ConfigColorKeying without immediate reload
1596:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
1597:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
1598:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  RGBValue the color key value
1599:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
1600:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
1601:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
1602:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval HAL status
1603:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1604:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue,
1605:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1606:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1607:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1608:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1609:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1610:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1611:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1612:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1613:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1614:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1615:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Configures the default color values */
1616:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CK
1617:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
1618:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1619:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1620:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1621:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1622:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY;
1623:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1624:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1625:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1626:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1627:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
ARM GAS  /tmp/ccObssGX.s 			page 30


1628:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1629:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1630:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1631:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Enable the color keying without reloading.
1632:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_EnableColorKeying without immediate reload
1633:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
1634:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
1635:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
1636:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
1637:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
1638:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1639:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1640:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_EnableColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
1641:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {  
1642:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1643:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1644:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1645:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1646:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1647:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1648:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1649:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1650:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1651:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Enable LTDC color keying by setting COLKEN bit */
1652:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
1653:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1654:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1655:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1656:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1657:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY; 
1658:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1659:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1660:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1661:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1662:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;  
1663:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1664:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1665:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1666:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Disable the color keying without reloading.
1667:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_DisableColorKeying without immediate reload
1668:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
1669:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
1670:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
1671:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
1672:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
1673:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1674:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1675:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_DisableColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx
1676:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1677:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1678:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1679:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1680:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1681:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1682:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1683:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1684:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
ARM GAS  /tmp/ccObssGX.s 			page 31


1685:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1686:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Disable LTDC color keying by setting COLKEN bit */
1687:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
1688:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1689:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1690:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1691:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1692:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY; 
1693:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1694:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1695:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1696:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1697:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1698:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1699:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1700:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1701:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Enable the color lookup table without reloading.
1702:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_EnableCLUT without immediate reload
1703:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
1704:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
1705:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
1706:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
1707:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1
1708:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1709:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1710:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_EnableCLUT_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
1711:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1712:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1713:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1714:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1715:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1716:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1717:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1718:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1719:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1720:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1721:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1722:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Disable LTDC color lookup table by setting CLUTEN bit */
1723:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
1724:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1725:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1726:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1727:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1728:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY; 
1729:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1730:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1731:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1732:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1733:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1734:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1735:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1736:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1737:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Disable the color lookup table without reloading.
1738:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *         Variant of the function HAL_LTDC_DisableCLUT without immediate reload
1739:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc    pointer to a LTDC_HandleTypeDef structure that contains
1740:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
1741:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
ARM GAS  /tmp/ccObssGX.s 			page 32


1742:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   This parameter can be one of the following values:
1743:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   0 or 1   
1744:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval  HAL status
1745:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1746:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_StatusTypeDef HAL_LTDC_DisableCLUT_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
1747:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1748:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  
1749:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
1750:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_LOCK(hltdc);
1751:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1752:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change LTDC peripheral state */
1753:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_BUSY;
1754:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1755:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Check the parameters */
1756:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_LAYER(LayerIdx));
1757:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1758:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Disable LTDC color lookup table by setting CLUTEN bit */
1759:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
1760:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1761:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Do not Sets the Reload  */
1762:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1763:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Change the LTDC state*/
1764:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->State = HAL_LTDC_STATE_READY; 
1765:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1766:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process unlocked */
1767:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   __HAL_UNLOCK(hltdc);
1768:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1769:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return HAL_OK;
1770:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1771:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1772:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1773:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @}
1774:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1775:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1776:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /** @defgroup LTDC_Exported_Functions_Group4 Peripheral State and Errors functions
1777:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  *  @brief    Peripheral State and Errors functions 
1778:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  *
1779:HALLIB/Src/stm32f7xx_hal_ltdc.c **** @verbatim   
1780:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  ===============================================================================
1781:HALLIB/Src/stm32f7xx_hal_ltdc.c ****                   ##### Peripheral State and Errors functions #####
1782:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  ===============================================================================  
1783:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     [..]
1784:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     This subsection provides functions allowing to
1785:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Check the LTDC state.
1786:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (+) Get error code.  
1787:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1788:HALLIB/Src/stm32f7xx_hal_ltdc.c **** @endverbatim
1789:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @{
1790:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */ 
1791:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1792:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1793:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Return the LTDC state
1794:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
1795:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                the configuration information for the LTDC.
1796:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval HAL state
1797:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1798:HALLIB/Src/stm32f7xx_hal_ltdc.c **** HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
ARM GAS  /tmp/ccObssGX.s 			page 33


1799:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1800:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return hltdc->State;
1801:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1802:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1803:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1804:HALLIB/Src/stm32f7xx_hal_ltdc.c **** * @brief  Return the LTDC error code
1805:HALLIB/Src/stm32f7xx_hal_ltdc.c **** * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
1806:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *               the configuration information for the LTDC.
1807:HALLIB/Src/stm32f7xx_hal_ltdc.c **** * @retval LTDC Error Code
1808:HALLIB/Src/stm32f7xx_hal_ltdc.c **** */
1809:HALLIB/Src/stm32f7xx_hal_ltdc.c **** uint32_t HAL_LTDC_GetError(LTDC_HandleTypeDef *hltdc)
1810:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
1811:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return hltdc->ErrorCode;
1812:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
1813:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1814:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1815:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @}
1816:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1817:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1818:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
1819:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @brief  Configures the LTDC peripheral 
1820:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  hltdc     Pointer to a LTDC_HandleTypeDef structure that contains
1821:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                   the configuration information for the LTDC.
1822:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  pLayerCfg Pointer LTDC Layer Configuration structure
1823:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @param  LayerIdx  LTDC Layer index.
1824:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   *                    This parameter can be one of the following values: 0 or 1
1825:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   * @retval None
1826:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   */
1827:HALLIB/Src/stm32f7xx_hal_ltdc.c **** static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t Lay
1828:HALLIB/Src/stm32f7xx_hal_ltdc.c **** {
  28              		.loc 1 1828 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 20
  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41              	.LVL1:
1829:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0;
1830:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp1 = 0;
1831:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp2 = 0;
1832:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1833:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Configures the horizontal start and stop position */
1834:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  42              		.loc 1 1834 0
  43 0002 4D68     		ldr	r5, [r1, #4]
  44 0004 0468     		ldr	r4, [r0]
  45 0006 E368     		ldr	r3, [r4, #12]
  46 0008 C3F30B43 		ubfx	r3, r3, #16, #12
  47 000c 1D44     		add	r5, r5, r3
  48              	.LVL2:
ARM GAS  /tmp/ccObssGX.s 			page 34


1835:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  49              		.loc 1 1835 0
  50 000e D201     		lsls	r2, r2, #7
  51              	.LVL3:
  52 0010 1444     		add	r4, r4, r2
  53 0012 D4F88830 		ldr	r3, [r4, #136]
  54 0016 03F47043 		and	r3, r3, #61440
  55 001a C4F88830 		str	r3, [r4, #136]
1836:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_
  56              		.loc 1 1836 0
  57 001e 0468     		ldr	r4, [r0]
  58 0020 1619     		adds	r6, r2, r4
  59 0022 0B68     		ldr	r3, [r1]
  60 0024 E468     		ldr	r4, [r4, #12]
  61 0026 C4F30B44 		ubfx	r4, r4, #16, #12
  62 002a 2344     		add	r3, r3, r4
  63 002c 0133     		adds	r3, r3, #1
  64 002e 43EA0543 		orr	r3, r3, r5, lsl #16
  65 0032 C6F88830 		str	r3, [r6, #136]
1837:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1838:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Configures the vertical start and stop position */
1839:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  66              		.loc 1 1839 0
  67 0036 CD68     		ldr	r5, [r1, #12]
  68              	.LVL4:
  69 0038 0468     		ldr	r4, [r0]
  70 003a E368     		ldr	r3, [r4, #12]
  71 003c C3F30A03 		ubfx	r3, r3, #0, #11
  72 0040 1D44     		add	r5, r5, r3
  73              	.LVL5:
1840:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  74              		.loc 1 1840 0
  75 0042 1444     		add	r4, r4, r2
  76 0044 D4F88C30 		ldr	r3, [r4, #140]
  77 0048 03F47043 		and	r3, r3, #61440
  78 004c C4F88C30 		str	r3, [r4, #140]
1841:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_
  79              		.loc 1 1841 0
  80 0050 0468     		ldr	r4, [r0]
  81 0052 1619     		adds	r6, r2, r4
  82 0054 8B68     		ldr	r3, [r1, #8]
  83 0056 E468     		ldr	r4, [r4, #12]
  84 0058 C4F30A04 		ubfx	r4, r4, #0, #11
  85 005c 2344     		add	r3, r3, r4
  86 005e 0133     		adds	r3, r3, #1
  87 0060 43EA0543 		orr	r3, r3, r5, lsl #16
  88 0064 C6F88C30 		str	r3, [r6, #140]
1842:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1843:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Specifies the pixel format */
1844:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  89              		.loc 1 1844 0
  90 0068 0368     		ldr	r3, [r0]
  91 006a 1344     		add	r3, r3, r2
  92 006c D3F89440 		ldr	r4, [r3, #148]
  93 0070 24F00704 		bic	r4, r4, #7
  94 0074 C3F89440 		str	r4, [r3, #148]
1845:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
ARM GAS  /tmp/ccObssGX.s 			page 35


  95              		.loc 1 1845 0
  96 0078 0368     		ldr	r3, [r0]
  97 007a 1344     		add	r3, r3, r2
  98 007c 0C69     		ldr	r4, [r1, #16]
  99 007e C3F89440 		str	r4, [r3, #148]
1846:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1847:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Configures the default color values */
1848:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 100              		.loc 1 1848 0
 101 0082 91F831E0 		ldrb	lr, [r1, #49]	@ zero_extendqisi2
 102              	.LVL6:
1849:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 103              		.loc 1 1849 0
 104 0086 91F83230 		ldrb	r3, [r1, #50]	@ zero_extendqisi2
 105              	.LVL7:
1850:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp2 = (pLayerCfg->Alpha0 << 24);  
 106              		.loc 1 1850 0
 107 008a 8F69     		ldr	r7, [r1, #24]
 108              	.LVL8:
1851:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCR
 109              		.loc 1 1851 0
 110 008c 0668     		ldr	r6, [r0]
 111 008e 1644     		add	r6, r6, r2
 112 0090 D6F89C40 		ldr	r4, [r6, #156]
 113 0094 0025     		movs	r5, #0
 114 0096 C6F89C50 		str	r5, [r6, #156]
1852:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 115              		.loc 1 1852 0
 116 009a 0668     		ldr	r6, [r0]
 117 009c 1644     		add	r6, r6, r2
 118 009e 91F83040 		ldrb	r4, [r1, #48]	@ zero_extendqisi2
 119 00a2 44EA0E24 		orr	r4, r4, lr, lsl #8
 120 00a6 44EA0343 		orr	r3, r4, r3, lsl #16
 121              	.LVL9:
 122 00aa 43EA0763 		orr	r3, r3, r7, lsl #24
 123 00ae C6F89C30 		str	r3, [r6, #156]
1853:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1854:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Specifies the constant alpha value */
1855:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 124              		.loc 1 1855 0
 125 00b2 0368     		ldr	r3, [r0]
 126 00b4 1344     		add	r3, r3, r2
 127 00b6 D3F89840 		ldr	r4, [r3, #152]
 128 00ba 24F0FF04 		bic	r4, r4, #255
 129 00be C3F89840 		str	r4, [r3, #152]
1856:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 130              		.loc 1 1856 0
 131 00c2 0368     		ldr	r3, [r0]
 132 00c4 1344     		add	r3, r3, r2
 133 00c6 4C69     		ldr	r4, [r1, #20]
 134 00c8 C3F89840 		str	r4, [r3, #152]
1857:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1858:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Specifies the blending factors */
1859:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 135              		.loc 1 1859 0
 136 00cc 0368     		ldr	r3, [r0]
 137 00ce 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccObssGX.s 			page 36


 138 00d0 D3F8A060 		ldr	r6, [r3, #160]
 139 00d4 2D4C     		ldr	r4, .L9
 140 00d6 3440     		ands	r4, r4, r6
 141 00d8 C3F8A040 		str	r4, [r3, #160]
1860:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 142              		.loc 1 1860 0
 143 00dc 0368     		ldr	r3, [r0]
 144 00de 1344     		add	r3, r3, r2
 145 00e0 CE69     		ldr	r6, [r1, #28]
 146 00e2 0C6A     		ldr	r4, [r1, #32]
 147 00e4 3443     		orrs	r4, r4, r6
 148 00e6 C3F8A040 		str	r4, [r3, #160]
1861:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1862:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Configures the color frame buffer start address */
1863:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 149              		.loc 1 1863 0
 150 00ea 0368     		ldr	r3, [r0]
 151 00ec 1344     		add	r3, r3, r2
 152 00ee D3F8AC40 		ldr	r4, [r3, #172]
 153 00f2 C3F8AC50 		str	r5, [r3, #172]
1864:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 154              		.loc 1 1864 0
 155 00f6 0368     		ldr	r3, [r0]
 156 00f8 1344     		add	r3, r3, r2
 157 00fa 4C6A     		ldr	r4, [r1, #36]
 158 00fc C3F8AC40 		str	r4, [r3, #172]
1865:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1866:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 159              		.loc 1 1866 0
 160 0100 0B69     		ldr	r3, [r1, #16]
 161 0102 5BB1     		cbz	r3, .L3
1867:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
1868:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 4;
1869:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1870:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 162              		.loc 1 1870 0
 163 0104 012B     		cmp	r3, #1
 164 0106 0BD0     		beq	.L4
1871:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
1872:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 3;
1873:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1874:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 165              		.loc 1 1874 0
 166 0108 022B     		cmp	r3, #2
 167 010a 18BF     		it	ne
 168 010c 042B     		cmpne	r3, #4
 169 010e 09D0     		beq	.L5
1875:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 170              		.loc 1 1875 0
 171 0110 032B     		cmp	r3, #3
 172 0112 09D0     		beq	.L6
1876:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 173              		.loc 1 1876 0
 174 0114 072B     		cmp	r3, #7
 175 0116 09D1     		bne	.L7
1877:HALLIB/Src/stm32f7xx_hal_ltdc.c ****         (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
1878:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
ARM GAS  /tmp/ccObssGX.s 			page 37


1879:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 2;
 176              		.loc 1 1879 0
 177 0118 0227     		movs	r7, #2
 178              	.LVL10:
 179 011a 08E0     		b	.L2
 180              	.LVL11:
 181              	.L3:
1868:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 182              		.loc 1 1868 0
 183 011c 0427     		movs	r7, #4
 184              	.LVL12:
 185 011e 06E0     		b	.L2
 186              	.LVL13:
 187              	.L4:
1872:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 188              		.loc 1 1872 0
 189 0120 0327     		movs	r7, #3
 190              	.LVL14:
 191 0122 04E0     		b	.L2
 192              	.LVL15:
 193              	.L5:
 194              		.loc 1 1879 0
 195 0124 0227     		movs	r7, #2
 196              	.LVL16:
 197 0126 02E0     		b	.L2
 198              	.LVL17:
 199              	.L6:
 200 0128 0227     		movs	r7, #2
 201              	.LVL18:
 202 012a 00E0     		b	.L2
 203              	.LVL19:
 204              	.L7:
1880:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1881:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   else
1882:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
1883:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     tmp = 1;
 205              		.loc 1 1883 0
 206 012c 0127     		movs	r7, #1
 207              	.LVL20:
 208              	.L2:
1884:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
1885:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1886:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Configures the color frame buffer pitch in byte */
1887:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 209              		.loc 1 1887 0
 210 012e 0468     		ldr	r4, [r0]
 211 0130 1444     		add	r4, r4, r2
 212 0132 D4F8B030 		ldr	r3, [r4, #176]
 213 0136 03F0E023 		and	r3, r3, #-536813568
 214 013a C4F8B030 		str	r3, [r4, #176]
1888:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->Wind
 215              		.loc 1 1888 0
 216 013e 0468     		ldr	r4, [r0]
 217 0140 1444     		add	r4, r4, r2
 218 0142 04F18405 		add	r5, r4, #132
 219 0146 8C6A     		ldr	r4, [r1, #40]
 220 0148 04FB07F6 		mul	r6, r4, r7
ARM GAS  /tmp/ccObssGX.s 			page 38


 221 014c 4B68     		ldr	r3, [r1, #4]
 222 014e 0C68     		ldr	r4, [r1]
 223 0150 1C1B     		subs	r4, r3, r4
 224 0152 04FB07F3 		mul	r3, r4, r7
 225 0156 0333     		adds	r3, r3, #3
 226 0158 43EA0643 		orr	r3, r3, r6, lsl #16
 227 015c EB62     		str	r3, [r5, #44]
1889:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1890:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Configures the frame buffer line number */
1891:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 228              		.loc 1 1891 0
 229 015e 0368     		ldr	r3, [r0]
 230 0160 1344     		add	r3, r3, r2
 231 0162 D3F8B450 		ldr	r5, [r3, #180]
 232 0166 0A4C     		ldr	r4, .L9+4
 233 0168 2C40     		ands	r4, r4, r5
 234 016a C3F8B440 		str	r4, [r3, #180]
1892:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 235              		.loc 1 1892 0
 236 016e 0368     		ldr	r3, [r0]
 237 0170 1344     		add	r3, r3, r2
 238 0172 C96A     		ldr	r1, [r1, #44]
 239              	.LVL21:
 240 0174 C3F8B410 		str	r1, [r3, #180]
1893:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
1894:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Enable LTDC_Layer by setting LEN bit */  
1895:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 241              		.loc 1 1895 0
 242 0178 0368     		ldr	r3, [r0]
 243 017a 1A44     		add	r2, r2, r3
 244 017c D2F88430 		ldr	r3, [r2, #132]
 245 0180 43F00103 		orr	r3, r3, #1
 246 0184 C2F88430 		str	r3, [r2, #132]
 247 0188 F0BD     		pop	{r4, r5, r6, r7, pc}
 248              	.LVL22:
 249              	.L10:
 250 018a 00BF     		.align	2
 251              	.L9:
 252 018c F8F8FFFF 		.word	-1800
 253 0190 00F8FFFF 		.word	-2048
 254              		.cfi_endproc
 255              	.LFE175:
 257              		.section	.text.HAL_LTDC_MspInit,"ax",%progbits
 258              		.align	2
 259              		.weak	HAL_LTDC_MspInit
 260              		.thumb
 261              		.thumb_func
 263              	HAL_LTDC_MspInit:
 264              	.LFB138:
 276:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Prevent unused argument(s) compilation warning */
 265              		.loc 1 276 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269              		@ link register save eliminated.
 270              	.LVL23:
 271 0000 7047     		bx	lr
ARM GAS  /tmp/ccObssGX.s 			page 39


 272              		.cfi_endproc
 273              	.LFE138:
 275 0002 00BF     		.section	.text.HAL_LTDC_Init,"ax",%progbits
 276              		.align	2
 277              		.global	HAL_LTDC_Init
 278              		.thumb
 279              		.thumb_func
 281              	HAL_LTDC_Init:
 282              	.LFB136:
 160:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0, tmp1 = 0;
 283              		.loc 1 160 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              	.LVL24:
 164:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 288              		.loc 1 164 0
 289 0000 0028     		cmp	r0, #0
 290 0002 78D0     		beq	.L15
 160:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0, tmp1 = 0;
 291              		.loc 1 160 0
 292 0004 38B5     		push	{r3, r4, r5, lr}
 293              	.LCFI1:
 294              		.cfi_def_cfa_offset 16
 295              		.cfi_offset 3, -16
 296              		.cfi_offset 4, -12
 297              		.cfi_offset 5, -8
 298              		.cfi_offset 14, -4
 299 0006 0446     		mov	r4, r0
 184:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 300              		.loc 1 184 0
 301 0008 90F8A130 		ldrb	r3, [r0, #161]	@ zero_extendqisi2
 302 000c 13F0FF0F 		tst	r3, #255
 303 0010 04D1     		bne	.L14
 187:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     /* Init the low level hardware */
 304              		.loc 1 187 0
 305 0012 0023     		movs	r3, #0
 306 0014 80F8A030 		strb	r3, [r0, #160]
 189:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 307              		.loc 1 189 0
 308 0018 FFF7FEFF 		bl	HAL_LTDC_MspInit
 309              	.LVL25:
 310              	.L14:
 193:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 311              		.loc 1 193 0
 312 001c 0223     		movs	r3, #2
 313 001e 84F8A130 		strb	r3, [r4, #161]
 196:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 314              		.loc 1 196 0
 315 0022 2268     		ldr	r2, [r4]
 316 0024 9369     		ldr	r3, [r2, #24]
 317 0026 23F07043 		bic	r3, r3, #-268435456
 318 002a 9361     		str	r3, [r2, #24]
 197:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 319              		.loc 1 197 0
 320 002c 2168     		ldr	r1, [r4]
 321 002e 8869     		ldr	r0, [r1, #24]
ARM GAS  /tmp/ccObssGX.s 			page 40


 322 0030 6368     		ldr	r3, [r4, #4]
 323 0032 A268     		ldr	r2, [r4, #8]
 324 0034 1343     		orrs	r3, r3, r2
 198:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 325              		.loc 1 198 0
 326 0036 E268     		ldr	r2, [r4, #12]
 197:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 327              		.loc 1 197 0
 328 0038 1A43     		orrs	r2, r2, r3
 198:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 329              		.loc 1 198 0
 330 003a 2369     		ldr	r3, [r4, #16]
 331 003c 1343     		orrs	r3, r3, r2
 197:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 332              		.loc 1 197 0
 333 003e 0343     		orrs	r3, r3, r0
 334 0040 8B61     		str	r3, [r1, #24]
 201:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = (hltdc->Init.HorizontalSync << 16);
 335              		.loc 1 201 0
 336 0042 2168     		ldr	r1, [r4]
 337 0044 8A68     		ldr	r2, [r1, #8]
 338 0046 2D4B     		ldr	r3, .L18
 339 0048 1A40     		ands	r2, r2, r3
 340 004a 8A60     		str	r2, [r1, #8]
 202:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 341              		.loc 1 202 0
 342 004c 6569     		ldr	r5, [r4, #20]
 343              	.LVL26:
 203:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 344              		.loc 1 203 0
 345 004e 2168     		ldr	r1, [r4]
 346 0050 8868     		ldr	r0, [r1, #8]
 347 0052 A269     		ldr	r2, [r4, #24]
 348 0054 42EA0542 		orr	r2, r2, r5, lsl #16
 349 0058 0243     		orrs	r2, r2, r0
 350 005a 8A60     		str	r2, [r1, #8]
 206:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = (hltdc->Init.AccumulatedHBP << 16);
 351              		.loc 1 206 0
 352 005c 2168     		ldr	r1, [r4]
 353 005e CA68     		ldr	r2, [r1, #12]
 354 0060 1A40     		ands	r2, r2, r3
 355 0062 CA60     		str	r2, [r1, #12]
 207:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 356              		.loc 1 207 0
 357 0064 E569     		ldr	r5, [r4, #28]
 358              	.LVL27:
 208:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 359              		.loc 1 208 0
 360 0066 2168     		ldr	r1, [r4]
 361 0068 C868     		ldr	r0, [r1, #12]
 362 006a 226A     		ldr	r2, [r4, #32]
 363 006c 42EA0542 		orr	r2, r2, r5, lsl #16
 364 0070 0243     		orrs	r2, r2, r0
 365 0072 CA60     		str	r2, [r1, #12]
 211:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = (hltdc->Init.AccumulatedActiveW << 16);
 366              		.loc 1 211 0
 367 0074 2168     		ldr	r1, [r4]
ARM GAS  /tmp/ccObssGX.s 			page 41


 368 0076 0A69     		ldr	r2, [r1, #16]
 369 0078 1A40     		ands	r2, r2, r3
 370 007a 0A61     		str	r2, [r1, #16]
 212:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 371              		.loc 1 212 0
 372 007c 656A     		ldr	r5, [r4, #36]
 373              	.LVL28:
 213:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 374              		.loc 1 213 0
 375 007e 2168     		ldr	r1, [r4]
 376 0080 0869     		ldr	r0, [r1, #16]
 377 0082 A26A     		ldr	r2, [r4, #40]
 378 0084 42EA0542 		orr	r2, r2, r5, lsl #16
 379 0088 0243     		orrs	r2, r2, r0
 380 008a 0A61     		str	r2, [r1, #16]
 216:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp = (hltdc->Init.TotalWidth << 16);
 381              		.loc 1 216 0
 382 008c 2268     		ldr	r2, [r4]
 383 008e 5169     		ldr	r1, [r2, #20]
 384 0090 0B40     		ands	r3, r3, r1
 385 0092 5361     		str	r3, [r2, #20]
 217:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 386              		.loc 1 217 0
 387 0094 E06A     		ldr	r0, [r4, #44]
 388              	.LVL29:
 218:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 389              		.loc 1 218 0
 390 0096 2268     		ldr	r2, [r4]
 391 0098 5169     		ldr	r1, [r2, #20]
 392 009a 236B     		ldr	r3, [r4, #48]
 393 009c 43EA0043 		orr	r3, r3, r0, lsl #16
 394 00a0 0B43     		orrs	r3, r3, r1
 395 00a2 5361     		str	r3, [r2, #20]
 221:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 396              		.loc 1 221 0
 397 00a4 94F83530 		ldrb	r3, [r4, #53]	@ zero_extendqisi2
 398              	.LVL30:
 222:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 399              		.loc 1 222 0
 400 00a8 94F83620 		ldrb	r2, [r4, #54]	@ zero_extendqisi2
 401 00ac 1204     		lsls	r2, r2, #16
 402              	.LVL31:
 223:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 403              		.loc 1 223 0
 404 00ae 2068     		ldr	r0, [r4]
 405 00b0 C16A     		ldr	r1, [r0, #44]
 406 00b2 01F07F41 		and	r1, r1, #-16777216
 407 00b6 C162     		str	r1, [r0, #44]
 224:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 408              		.loc 1 224 0
 409 00b8 2168     		ldr	r1, [r4]
 410 00ba C86A     		ldr	r0, [r1, #44]
 411 00bc 42EA0322 		orr	r2, r2, r3, lsl #8
 412              	.LVL32:
 413 00c0 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 414              	.LVL33:
 415 00c4 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccObssGX.s 			page 42


 416 00c6 0343     		orrs	r3, r3, r0
 417 00c8 CB62     		str	r3, [r1, #44]
 227:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 418              		.loc 1 227 0
 419 00ca 2268     		ldr	r2, [r4]
 420 00cc 536B     		ldr	r3, [r2, #52]
 421 00ce 43F00403 		orr	r3, r3, #4
 422 00d2 5363     		str	r3, [r2, #52]
 230:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 423              		.loc 1 230 0
 424 00d4 2268     		ldr	r2, [r4]
 425 00d6 536B     		ldr	r3, [r2, #52]
 426 00d8 43F00203 		orr	r3, r3, #2
 427 00dc 5363     		str	r3, [r2, #52]
 233:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 428              		.loc 1 233 0
 429 00de 2268     		ldr	r2, [r4]
 430 00e0 9369     		ldr	r3, [r2, #24]
 431 00e2 43F00103 		orr	r3, r3, #1
 432 00e6 9361     		str	r3, [r2, #24]
 236:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 433              		.loc 1 236 0
 434 00e8 0020     		movs	r0, #0
 435 00ea C4F8A400 		str	r0, [r4, #164]
 239:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 436              		.loc 1 239 0
 437 00ee 0123     		movs	r3, #1
 438 00f0 84F8A130 		strb	r3, [r4, #161]
 241:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 439              		.loc 1 241 0
 440 00f4 38BD     		pop	{r3, r4, r5, pc}
 441              	.LVL34:
 442              	.L15:
 443              	.LCFI2:
 444              		.cfi_def_cfa_offset 0
 445              		.cfi_restore 3
 446              		.cfi_restore 4
 447              		.cfi_restore 5
 448              		.cfi_restore 14
 166:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 449              		.loc 1 166 0
 450 00f6 0120     		movs	r0, #1
 451              	.LVL35:
 452 00f8 7047     		bx	lr
 453              	.L19:
 454 00fa 00BF     		.align	2
 455              	.L18:
 456 00fc 00F800F0 		.word	-268371968
 457              		.cfi_endproc
 458              	.LFE136:
 460              		.section	.text.HAL_LTDC_MspDeInit,"ax",%progbits
 461              		.align	2
 462              		.weak	HAL_LTDC_MspDeInit
 463              		.thumb
 464              		.thumb_func
 466              	HAL_LTDC_MspDeInit:
 467              	.LFB139:
ARM GAS  /tmp/ccObssGX.s 			page 43


 292:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Prevent unused argument(s) compilation warning */
 468              		.loc 1 292 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              		@ link register save eliminated.
 473              	.LVL36:
 474 0000 7047     		bx	lr
 475              		.cfi_endproc
 476              	.LFE139:
 478 0002 00BF     		.section	.text.HAL_LTDC_DeInit,"ax",%progbits
 479              		.align	2
 480              		.global	HAL_LTDC_DeInit
 481              		.thumb
 482              		.thumb_func
 484              	HAL_LTDC_DeInit:
 485              	.LFB137:
 253:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* DeInit the low level hardware */
 486              		.loc 1 253 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              	.LVL37:
 253:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* DeInit the low level hardware */
 491              		.loc 1 253 0
 492 0000 10B5     		push	{r4, lr}
 493              	.LCFI3:
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 4, -8
 496              		.cfi_offset 14, -4
 497 0002 0446     		mov	r4, r0
 255:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 498              		.loc 1 255 0
 499 0004 FFF7FEFF 		bl	HAL_LTDC_MspDeInit
 500              	.LVL38:
 258:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 501              		.loc 1 258 0
 502 0008 0020     		movs	r0, #0
 503 000a C4F8A400 		str	r0, [r4, #164]
 261:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 504              		.loc 1 261 0
 505 000e 84F8A100 		strb	r0, [r4, #161]
 264:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 506              		.loc 1 264 0
 507 0012 84F8A000 		strb	r0, [r4, #160]
 267:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 508              		.loc 1 267 0
 509 0016 10BD     		pop	{r4, pc}
 510              		.cfi_endproc
 511              	.LFE137:
 513              		.section	.text.HAL_LTDC_ErrorCallback,"ax",%progbits
 514              		.align	2
 515              		.weak	HAL_LTDC_ErrorCallback
 516              		.thumb
 517              		.thumb_func
 519              	HAL_LTDC_ErrorCallback:
 520              	.LFB141:
ARM GAS  /tmp/ccObssGX.s 			page 44


 425:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Prevent unused argument(s) compilation warning */
 521              		.loc 1 425 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              		@ link register save eliminated.
 526              	.LVL39:
 527 0000 7047     		bx	lr
 528              		.cfi_endproc
 529              	.LFE141:
 531 0002 00BF     		.section	.text.HAL_LTDC_LineEventCallback,"ax",%progbits
 532              		.align	2
 533              		.weak	HAL_LTDC_LineEventCallback
 534              		.thumb
 535              		.thumb_func
 537              	HAL_LTDC_LineEventCallback:
 538              	.LFB142:
 441:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Prevent unused argument(s) compilation warning */
 539              		.loc 1 441 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543              		@ link register save eliminated.
 544              	.LVL40:
 545 0000 7047     		bx	lr
 546              		.cfi_endproc
 547              	.LFE142:
 549 0002 00BF     		.section	.text.HAL_LTDC_ReloadEventCallback,"ax",%progbits
 550              		.align	2
 551              		.weak	HAL_LTDC_ReloadEventCallback
 552              		.thumb
 553              		.thumb_func
 555              	HAL_LTDC_ReloadEventCallback:
 556              	.LFB143:
 457:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Prevent unused argument(s) compilation warning */
 557              		.loc 1 457 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 562              	.LVL41:
 563 0000 7047     		bx	lr
 564              		.cfi_endproc
 565              	.LFE143:
 567 0002 00BF     		.section	.text.HAL_LTDC_IRQHandler,"ax",%progbits
 568              		.align	2
 569              		.global	HAL_LTDC_IRQHandler
 570              		.thumb
 571              		.thumb_func
 573              	HAL_LTDC_IRQHandler:
 574              	.LFB140:
 325:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Transfer Error Interrupt management ***************************************/
 575              		.loc 1 325 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              	.LVL42:
ARM GAS  /tmp/ccObssGX.s 			page 45


 325:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Transfer Error Interrupt management ***************************************/
 580              		.loc 1 325 0
 581 0000 10B5     		push	{r4, lr}
 582              	.LCFI4:
 583              		.cfi_def_cfa_offset 8
 584              		.cfi_offset 4, -8
 585              		.cfi_offset 14, -4
 586 0002 0446     		mov	r4, r0
 327:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 587              		.loc 1 327 0
 588 0004 0368     		ldr	r3, [r0]
 589 0006 9A6B     		ldr	r2, [r3, #56]
 590 0008 12F0040F 		tst	r2, #4
 591 000c 17D0     		beq	.L27
 329:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     {
 592              		.loc 1 329 0
 593 000e 9A6B     		ldr	r2, [r3, #56]
 594 0010 12F0040F 		tst	r2, #4
 595 0014 13D0     		beq	.L27
 332:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 596              		.loc 1 332 0
 597 0016 5A6B     		ldr	r2, [r3, #52]
 598 0018 22F00402 		bic	r2, r2, #4
 599 001c 5A63     		str	r2, [r3, #52]
 335:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 600              		.loc 1 335 0
 601 001e 0368     		ldr	r3, [r0]
 602 0020 0422     		movs	r2, #4
 603 0022 DA63     		str	r2, [r3, #60]
 338:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 604              		.loc 1 338 0
 605 0024 D0F8A430 		ldr	r3, [r0, #164]
 606 0028 43F00103 		orr	r3, r3, #1
 607 002c C0F8A430 		str	r3, [r0, #164]
 341:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 608              		.loc 1 341 0
 609 0030 80F8A120 		strb	r2, [r0, #161]
 344:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 610              		.loc 1 344 0
 611 0034 0023     		movs	r3, #0
 612 0036 80F8A030 		strb	r3, [r0, #160]
 347:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 613              		.loc 1 347 0
 614 003a FFF7FEFF 		bl	HAL_LTDC_ErrorCallback
 615              	.LVL43:
 616              	.L27:
 351:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 617              		.loc 1 351 0
 618 003e 2368     		ldr	r3, [r4]
 619 0040 9A6B     		ldr	r2, [r3, #56]
 620 0042 12F0020F 		tst	r2, #2
 621 0046 18D0     		beq	.L28
 353:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     {
 622              		.loc 1 353 0
 623 0048 9A6B     		ldr	r2, [r3, #56]
 624 004a 12F0020F 		tst	r2, #2
 625 004e 14D0     		beq	.L28
ARM GAS  /tmp/ccObssGX.s 			page 46


 356:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 626              		.loc 1 356 0
 627 0050 5A6B     		ldr	r2, [r3, #52]
 628 0052 22F00202 		bic	r2, r2, #2
 629 0056 5A63     		str	r2, [r3, #52]
 359:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 630              		.loc 1 359 0
 631 0058 2368     		ldr	r3, [r4]
 632 005a 0222     		movs	r2, #2
 633 005c DA63     		str	r2, [r3, #60]
 362:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 634              		.loc 1 362 0
 635 005e D4F8A430 		ldr	r3, [r4, #164]
 636 0062 1343     		orrs	r3, r3, r2
 637 0064 C4F8A430 		str	r3, [r4, #164]
 365:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 638              		.loc 1 365 0
 639 0068 0423     		movs	r3, #4
 640 006a 84F8A130 		strb	r3, [r4, #161]
 368:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       
 641              		.loc 1 368 0
 642 006e 0023     		movs	r3, #0
 643 0070 84F8A030 		strb	r3, [r4, #160]
 371:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 644              		.loc 1 371 0
 645 0074 2046     		mov	r0, r4
 646 0076 FFF7FEFF 		bl	HAL_LTDC_ErrorCallback
 647              	.LVL44:
 648              	.L28:
 375:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 649              		.loc 1 375 0
 650 007a 2368     		ldr	r3, [r4]
 651 007c 9A6B     		ldr	r2, [r3, #56]
 652 007e 12F0010F 		tst	r2, #1
 653 0082 12D0     		beq	.L29
 377:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     {
 654              		.loc 1 377 0
 655 0084 9A6B     		ldr	r2, [r3, #56]
 656 0086 12F0010F 		tst	r2, #1
 657 008a 0ED0     		beq	.L29
 380:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 658              		.loc 1 380 0
 659 008c 5A6B     		ldr	r2, [r3, #52]
 660 008e 22F00102 		bic	r2, r2, #1
 661 0092 5A63     		str	r2, [r3, #52]
 383:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 662              		.loc 1 383 0
 663 0094 2268     		ldr	r2, [r4]
 664 0096 0123     		movs	r3, #1
 665 0098 D363     		str	r3, [r2, #60]
 386:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 666              		.loc 1 386 0
 667 009a 84F8A130 		strb	r3, [r4, #161]
 389:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 668              		.loc 1 389 0
 669 009e 0023     		movs	r3, #0
 670 00a0 84F8A030 		strb	r3, [r4, #160]
ARM GAS  /tmp/ccObssGX.s 			page 47


 392:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 671              		.loc 1 392 0
 672 00a4 2046     		mov	r0, r4
 673 00a6 FFF7FEFF 		bl	HAL_LTDC_LineEventCallback
 674              	.LVL45:
 675              	.L29:
 396:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 676              		.loc 1 396 0
 677 00aa 2368     		ldr	r3, [r4]
 678 00ac 9A6B     		ldr	r2, [r3, #56]
 679 00ae 12F0080F 		tst	r2, #8
 680 00b2 13D0     		beq	.L26
 398:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     {
 681              		.loc 1 398 0
 682 00b4 9A6B     		ldr	r2, [r3, #56]
 683 00b6 12F0080F 		tst	r2, #8
 684 00ba 0FD0     		beq	.L26
 401:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       
 685              		.loc 1 401 0
 686 00bc 5A6B     		ldr	r2, [r3, #52]
 687 00be 22F00802 		bic	r2, r2, #8
 688 00c2 5A63     		str	r2, [r3, #52]
 404:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       
 689              		.loc 1 404 0
 690 00c4 2368     		ldr	r3, [r4]
 691 00c6 0822     		movs	r2, #8
 692 00c8 DA63     		str	r2, [r3, #60]
 407:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       
 693              		.loc 1 407 0
 694 00ca 0123     		movs	r3, #1
 695 00cc 84F8A130 		strb	r3, [r4, #161]
 410:HALLIB/Src/stm32f7xx_hal_ltdc.c ****       
 696              		.loc 1 410 0
 697 00d0 0023     		movs	r3, #0
 698 00d2 84F8A030 		strb	r3, [r4, #160]
 413:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 699              		.loc 1 413 0
 700 00d6 2046     		mov	r0, r4
 701 00d8 FFF7FEFF 		bl	HAL_LTDC_ReloadEventCallback
 702              	.LVL46:
 703              	.L26:
 704 00dc 10BD     		pop	{r4, pc}
 705              		.cfi_endproc
 706              	.LFE140:
 708 00de 00BF     		.section	.text.HAL_LTDC_ConfigLayer,"ax",%progbits
 709              		.align	2
 710              		.global	HAL_LTDC_ConfigLayer
 711              		.thumb
 712              		.thumb_func
 714              	HAL_LTDC_ConfigLayer:
 715              	.LFB144:
 507:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 716              		.loc 1 507 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720              	.LVL47:
ARM GAS  /tmp/ccObssGX.s 			page 48


 509:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 721              		.loc 1 509 0
 722 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 723 0004 012B     		cmp	r3, #1
 724 0006 27D0     		beq	.L34
 507:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 725              		.loc 1 507 0 discriminator 2
 726 0008 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 727              	.LCFI5:
 728              		.cfi_def_cfa_offset 24
 729              		.cfi_offset 4, -24
 730              		.cfi_offset 5, -20
 731              		.cfi_offset 6, -16
 732              		.cfi_offset 7, -12
 733              		.cfi_offset 8, -8
 734              		.cfi_offset 14, -4
 735 000c 9646     		mov	lr, r2
 736 000e 0F46     		mov	r7, r1
 737 0010 0646     		mov	r6, r0
 509:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 738              		.loc 1 509 0 discriminator 2
 739 0012 4FF00108 		mov	r8, #1
 740 0016 80F8A080 		strb	r8, [r0, #160]
 512:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 741              		.loc 1 512 0 discriminator 2
 742 001a 0223     		movs	r3, #2
 743 001c 80F8A130 		strb	r3, [r0, #161]
 528:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 744              		.loc 1 528 0 discriminator 2
 745 0020 3424     		movs	r4, #52
 746 0022 04FB0204 		mla	r4, r4, r2, r0
 747 0026 3834     		adds	r4, r4, #56
 748 0028 0D46     		mov	r5, r1
 749 002a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 750              	.LVL48:
 751 002c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 752 002e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 753 0030 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 754 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 755 0034 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 756 0036 2B68     		ldr	r3, [r5]
 757 0038 2360     		str	r3, [r4]
 531:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 758              		.loc 1 531 0 discriminator 2
 759 003a 7246     		mov	r2, lr
 760 003c 3946     		mov	r1, r7
 761 003e 3046     		mov	r0, r6
 762 0040 FFF7FEFF 		bl	LTDC_SetConfig
 763              	.LVL49:
 534:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 764              		.loc 1 534 0 discriminator 2
 765 0044 3368     		ldr	r3, [r6]
 766 0046 C3F82480 		str	r8, [r3, #36]
 537:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 767              		.loc 1 537 0 discriminator 2
 768 004a 86F8A180 		strb	r8, [r6, #161]
 540:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 49


 769              		.loc 1 540 0 discriminator 2
 770 004e 0020     		movs	r0, #0
 771 0050 86F8A000 		strb	r0, [r6, #160]
 542:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 772              		.loc 1 542 0 discriminator 2
 773 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 774              	.LVL50:
 775              	.L34:
 776              	.LCFI6:
 777              		.cfi_def_cfa_offset 0
 778              		.cfi_restore 4
 779              		.cfi_restore 5
 780              		.cfi_restore 6
 781              		.cfi_restore 7
 782              		.cfi_restore 8
 783              		.cfi_restore 14
 509:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 784              		.loc 1 509 0
 785 0058 0220     		movs	r0, #2
 786              	.LVL51:
 787 005a 7047     		bx	lr
 788              		.cfi_endproc
 789              	.LFE144:
 791              		.section	.text.HAL_LTDC_ConfigColorKeying,"ax",%progbits
 792              		.align	2
 793              		.global	HAL_LTDC_ConfigColorKeying
 794              		.thumb
 795              		.thumb_func
 797              	HAL_LTDC_ConfigColorKeying:
 798              	.LFB145:
 556:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 799              		.loc 1 556 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              		@ link register save eliminated.
 804              	.LVL52:
 558:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 805              		.loc 1 558 0
 806 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 807 0004 012B     		cmp	r3, #1
 808 0006 1CD0     		beq	.L39
 556:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 809              		.loc 1 556 0 discriminator 2
 810 0008 30B4     		push	{r4, r5}
 811              	.LCFI7:
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 4, -8
 814              		.cfi_offset 5, -4
 558:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 815              		.loc 1 558 0 discriminator 2
 816 000a 0124     		movs	r4, #1
 817 000c 80F8A040 		strb	r4, [r0, #160]
 561:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 818              		.loc 1 561 0 discriminator 2
 819 0010 0223     		movs	r3, #2
 820 0012 80F8A130 		strb	r3, [r0, #161]
ARM GAS  /tmp/ccObssGX.s 			page 50


 567:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 821              		.loc 1 567 0 discriminator 2
 822 0016 0368     		ldr	r3, [r0]
 823 0018 D201     		lsls	r2, r2, #7
 824              	.LVL53:
 825 001a 1344     		add	r3, r3, r2
 826 001c D3F89050 		ldr	r5, [r3, #144]
 827 0020 05F07F45 		and	r5, r5, #-16777216
 828 0024 C3F89050 		str	r5, [r3, #144]
 568:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 829              		.loc 1 568 0 discriminator 2
 830 0028 0368     		ldr	r3, [r0]
 831 002a 1344     		add	r3, r3, r2
 832 002c C3F89010 		str	r1, [r3, #144]
 571:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 833              		.loc 1 571 0 discriminator 2
 834 0030 0368     		ldr	r3, [r0]
 835 0032 5C62     		str	r4, [r3, #36]
 574:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 836              		.loc 1 574 0 discriminator 2
 837 0034 80F8A140 		strb	r4, [r0, #161]
 577:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 838              		.loc 1 577 0 discriminator 2
 839 0038 0023     		movs	r3, #0
 840 003a 80F8A030 		strb	r3, [r0, #160]
 579:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 841              		.loc 1 579 0 discriminator 2
 842 003e 1846     		mov	r0, r3
 843              	.LVL54:
 844 0040 01E0     		b	.L38
 845              	.LVL55:
 846              	.L39:
 847              	.LCFI8:
 848              		.cfi_def_cfa_offset 0
 849              		.cfi_restore 4
 850              		.cfi_restore 5
 558:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 851              		.loc 1 558 0
 852 0042 0220     		movs	r0, #2
 853              	.LVL56:
 854 0044 7047     		bx	lr
 855              	.LVL57:
 856              	.L38:
 857              	.LCFI9:
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 4, -8
 860              		.cfi_offset 5, -4
 580:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 861              		.loc 1 580 0
 862 0046 30BC     		pop	{r4, r5}
 863              	.LCFI10:
 864              		.cfi_restore 5
 865              		.cfi_restore 4
 866              		.cfi_def_cfa_offset 0
 867 0048 7047     		bx	lr
 868              		.cfi_endproc
 869              	.LFE145:
ARM GAS  /tmp/ccObssGX.s 			page 51


 871 004a 00BF     		.section	.text.HAL_LTDC_ConfigCLUT,"ax",%progbits
 872              		.align	2
 873              		.global	HAL_LTDC_ConfigCLUT
 874              		.thumb
 875              		.thumb_func
 877              	HAL_LTDC_ConfigCLUT:
 878              	.LFB146:
 594:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0;
 879              		.loc 1 594 0
 880              		.cfi_startproc
 881              		@ args = 0, pretend = 0, frame = 0
 882              		@ frame_needed = 0, uses_anonymous_args = 0
 883              	.LVL58:
 884 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 885              	.LCFI11:
 886              		.cfi_def_cfa_offset 20
 887              		.cfi_offset 4, -20
 888              		.cfi_offset 5, -16
 889              		.cfi_offset 6, -12
 890              		.cfi_offset 7, -8
 891              		.cfi_offset 14, -4
 892              	.LVL59:
 600:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 893              		.loc 1 600 0
 894 0002 90F8A040 		ldrb	r4, [r0, #160]	@ zero_extendqisi2
 895 0006 012C     		cmp	r4, #1
 896 0008 36D0     		beq	.L48
 600:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 897              		.loc 1 600 0 is_stmt 0 discriminator 2
 898 000a 0124     		movs	r4, #1
 899 000c 80F8A040 		strb	r4, [r0, #160]
 603:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 900              		.loc 1 603 0 is_stmt 1 discriminator 2
 901 0010 0224     		movs	r4, #2
 902 0012 80F8A140 		strb	r4, [r0, #161]
 608:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 903              		.loc 1 608 0 discriminator 2
 904 0016 0026     		movs	r6, #0
 905 0018 24E0     		b	.L44
 906              	.LVL60:
 907              	.L47:
 610:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     {
 908              		.loc 1 610 0
 909 001a 3424     		movs	r4, #52
 910 001c 04FB0304 		mla	r4, r4, r3, r0
 911 0020 A46C     		ldr	r4, [r4, #72]
 912 0022 062C     		cmp	r4, #6
 913 0024 0DD1     		bne	.L45
 612:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 914              		.loc 1 612 0
 915 0026 06EB0614 		add	r4, r6, r6, lsl #4
 916 002a 0D68     		ldr	r5, [r1]
 917 002c 5FFA85FE 		uxtb	lr, r5
 918 0030 4EEA0467 		orr	r7, lr, r4, lsl #24
 919 0034 05F47F44 		and	r4, r5, #65280
 920 0038 3C43     		orrs	r4, r4, r7
 921 003a 05F47F05 		and	r5, r5, #16711680
ARM GAS  /tmp/ccObssGX.s 			page 52


 922 003e 2C43     		orrs	r4, r4, r5
 923              	.LVL61:
 924 0040 09E0     		b	.L46
 925              	.LVL62:
 926              	.L45:
 616:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     }
 927              		.loc 1 616 0
 928 0042 0C68     		ldr	r4, [r1]
 929 0044 E5B2     		uxtb	r5, r4
 930 0046 45EA0667 		orr	r7, r5, r6, lsl #24
 931 004a 04F47F45 		and	r5, r4, #65280
 932 004e 3D43     		orrs	r5, r5, r7
 933 0050 04F47F04 		and	r4, r4, #16711680
 934 0054 2C43     		orrs	r4, r4, r5
 935              	.LVL63:
 936              	.L46:
 618:HALLIB/Src/stm32f7xx_hal_ltdc.c ****     pCLUT = (uint32_t *)pcounter;
 937              		.loc 1 618 0 discriminator 2
 938 0056 0431     		adds	r1, r1, #4
 939              	.LVL64:
 622:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 940              		.loc 1 622 0 discriminator 2
 941 0058 0568     		ldr	r5, [r0]
 942 005a 05EBC315 		add	r5, r5, r3, lsl #7
 943 005e C5F8C440 		str	r4, [r5, #196]
 608:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 944              		.loc 1 608 0 discriminator 2
 945 0062 0136     		adds	r6, r6, #1
 946              	.LVL65:
 947              	.L44:
 608:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 948              		.loc 1 608 0 is_stmt 0 discriminator 1
 949 0064 9642     		cmp	r6, r2
 950 0066 D8D3     		bcc	.L47
 626:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 951              		.loc 1 626 0 is_stmt 1
 952 0068 0123     		movs	r3, #1
 953              	.LVL66:
 954 006a 80F8A130 		strb	r3, [r0, #161]
 629:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 955              		.loc 1 629 0
 956 006e 0023     		movs	r3, #0
 957 0070 80F8A030 		strb	r3, [r0, #160]
 631:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 958              		.loc 1 631 0
 959 0074 1846     		mov	r0, r3
 960              	.LVL67:
 961 0076 F0BD     		pop	{r4, r5, r6, r7, pc}
 962              	.LVL68:
 963              	.L48:
 600:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 964              		.loc 1 600 0
 965 0078 0220     		movs	r0, #2
 966              	.LVL69:
 632:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 967              		.loc 1 632 0
 968 007a F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccObssGX.s 			page 53


 969              		.cfi_endproc
 970              	.LFE146:
 972              		.section	.text.HAL_LTDC_EnableColorKeying,"ax",%progbits
 973              		.align	2
 974              		.global	HAL_LTDC_EnableColorKeying
 975              		.thumb
 976              		.thumb_func
 978              	HAL_LTDC_EnableColorKeying:
 979              	.LFB147:
 644:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 980              		.loc 1 644 0
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 0
 983              		@ frame_needed = 0, uses_anonymous_args = 0
 984              		@ link register save eliminated.
 985              	.LVL70:
 646:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 986              		.loc 1 646 0
 987 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 988 0004 012B     		cmp	r3, #1
 989 0006 17D0     		beq	.L52
 646:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 990              		.loc 1 646 0 is_stmt 0 discriminator 2
 991 0008 0122     		movs	r2, #1
 992 000a 80F8A020 		strb	r2, [r0, #160]
 649:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 993              		.loc 1 649 0 is_stmt 1 discriminator 2
 994 000e 0223     		movs	r3, #2
 995 0010 80F8A130 		strb	r3, [r0, #161]
 655:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 996              		.loc 1 655 0 discriminator 2
 997 0014 0368     		ldr	r3, [r0]
 998 0016 03EBC111 		add	r1, r3, r1, lsl #7
 999              	.LVL71:
 1000 001a D1F88430 		ldr	r3, [r1, #132]
 1001 001e 43F00203 		orr	r3, r3, #2
 1002 0022 C1F88430 		str	r3, [r1, #132]
 658:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1003              		.loc 1 658 0 discriminator 2
 1004 0026 0368     		ldr	r3, [r0]
 1005 0028 5A62     		str	r2, [r3, #36]
 661:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1006              		.loc 1 661 0 discriminator 2
 1007 002a 80F8A120 		strb	r2, [r0, #161]
 664:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1008              		.loc 1 664 0 discriminator 2
 1009 002e 0023     		movs	r3, #0
 1010 0030 80F8A030 		strb	r3, [r0, #160]
 666:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1011              		.loc 1 666 0 discriminator 2
 1012 0034 1846     		mov	r0, r3
 1013              	.LVL72:
 1014 0036 7047     		bx	lr
 1015              	.LVL73:
 1016              	.L52:
 646:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1017              		.loc 1 646 0
ARM GAS  /tmp/ccObssGX.s 			page 54


 1018 0038 0220     		movs	r0, #2
 1019              	.LVL74:
 667:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1020              		.loc 1 667 0
 1021 003a 7047     		bx	lr
 1022              		.cfi_endproc
 1023              	.LFE147:
 1025              		.section	.text.HAL_LTDC_DisableColorKeying,"ax",%progbits
 1026              		.align	2
 1027              		.global	HAL_LTDC_DisableColorKeying
 1028              		.thumb
 1029              		.thumb_func
 1031              	HAL_LTDC_DisableColorKeying:
 1032              	.LFB148:
 679:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 1033              		.loc 1 679 0
 1034              		.cfi_startproc
 1035              		@ args = 0, pretend = 0, frame = 0
 1036              		@ frame_needed = 0, uses_anonymous_args = 0
 1037              		@ link register save eliminated.
 1038              	.LVL75:
 681:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1039              		.loc 1 681 0
 1040 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1041 0004 012B     		cmp	r3, #1
 1042 0006 17D0     		beq	.L55
 681:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1043              		.loc 1 681 0 is_stmt 0 discriminator 2
 1044 0008 0122     		movs	r2, #1
 1045 000a 80F8A020 		strb	r2, [r0, #160]
 684:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1046              		.loc 1 684 0 is_stmt 1 discriminator 2
 1047 000e 0223     		movs	r3, #2
 1048 0010 80F8A130 		strb	r3, [r0, #161]
 690:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1049              		.loc 1 690 0 discriminator 2
 1050 0014 0368     		ldr	r3, [r0]
 1051 0016 03EBC111 		add	r1, r3, r1, lsl #7
 1052              	.LVL76:
 1053 001a D1F88430 		ldr	r3, [r1, #132]
 1054 001e 23F00203 		bic	r3, r3, #2
 1055 0022 C1F88430 		str	r3, [r1, #132]
 693:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1056              		.loc 1 693 0 discriminator 2
 1057 0026 0368     		ldr	r3, [r0]
 1058 0028 5A62     		str	r2, [r3, #36]
 696:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1059              		.loc 1 696 0 discriminator 2
 1060 002a 80F8A120 		strb	r2, [r0, #161]
 699:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1061              		.loc 1 699 0 discriminator 2
 1062 002e 0023     		movs	r3, #0
 1063 0030 80F8A030 		strb	r3, [r0, #160]
 701:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1064              		.loc 1 701 0 discriminator 2
 1065 0034 1846     		mov	r0, r3
 1066              	.LVL77:
ARM GAS  /tmp/ccObssGX.s 			page 55


 1067 0036 7047     		bx	lr
 1068              	.LVL78:
 1069              	.L55:
 681:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1070              		.loc 1 681 0
 1071 0038 0220     		movs	r0, #2
 1072              	.LVL79:
 702:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1073              		.loc 1 702 0
 1074 003a 7047     		bx	lr
 1075              		.cfi_endproc
 1076              	.LFE148:
 1078              		.section	.text.HAL_LTDC_EnableCLUT,"ax",%progbits
 1079              		.align	2
 1080              		.global	HAL_LTDC_EnableCLUT
 1081              		.thumb
 1082              		.thumb_func
 1084              	HAL_LTDC_EnableCLUT:
 1085              	.LFB149:
 714:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1086              		.loc 1 714 0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 0
 1089              		@ frame_needed = 0, uses_anonymous_args = 0
 1090              		@ link register save eliminated.
 1091              	.LVL80:
 717:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1092              		.loc 1 717 0
 1093 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1094 0004 012B     		cmp	r3, #1
 1095 0006 17D0     		beq	.L58
 717:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1096              		.loc 1 717 0 is_stmt 0 discriminator 2
 1097 0008 0122     		movs	r2, #1
 1098 000a 80F8A020 		strb	r2, [r0, #160]
 720:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1099              		.loc 1 720 0 is_stmt 1 discriminator 2
 1100 000e 0223     		movs	r3, #2
 1101 0010 80F8A130 		strb	r3, [r0, #161]
 726:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1102              		.loc 1 726 0 discriminator 2
 1103 0014 0368     		ldr	r3, [r0]
 1104 0016 03EBC111 		add	r1, r3, r1, lsl #7
 1105              	.LVL81:
 1106 001a D1F88430 		ldr	r3, [r1, #132]
 1107 001e 43F01003 		orr	r3, r3, #16
 1108 0022 C1F88430 		str	r3, [r1, #132]
 729:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1109              		.loc 1 729 0 discriminator 2
 1110 0026 0368     		ldr	r3, [r0]
 1111 0028 5A62     		str	r2, [r3, #36]
 732:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1112              		.loc 1 732 0 discriminator 2
 1113 002a 80F8A120 		strb	r2, [r0, #161]
 735:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1114              		.loc 1 735 0 discriminator 2
 1115 002e 0023     		movs	r3, #0
ARM GAS  /tmp/ccObssGX.s 			page 56


 1116 0030 80F8A030 		strb	r3, [r0, #160]
 737:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1117              		.loc 1 737 0 discriminator 2
 1118 0034 1846     		mov	r0, r3
 1119              	.LVL82:
 1120 0036 7047     		bx	lr
 1121              	.LVL83:
 1122              	.L58:
 717:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1123              		.loc 1 717 0
 1124 0038 0220     		movs	r0, #2
 1125              	.LVL84:
 738:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1126              		.loc 1 738 0
 1127 003a 7047     		bx	lr
 1128              		.cfi_endproc
 1129              	.LFE149:
 1131              		.section	.text.HAL_LTDC_DisableCLUT,"ax",%progbits
 1132              		.align	2
 1133              		.global	HAL_LTDC_DisableCLUT
 1134              		.thumb
 1135              		.thumb_func
 1137              	HAL_LTDC_DisableCLUT:
 1138              	.LFB150:
 750:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  
 1139              		.loc 1 750 0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 0
 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 1143              		@ link register save eliminated.
 1144              	.LVL85:
 753:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1145              		.loc 1 753 0
 1146 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1147 0004 012B     		cmp	r3, #1
 1148 0006 17D0     		beq	.L61
 753:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1149              		.loc 1 753 0 is_stmt 0 discriminator 2
 1150 0008 0122     		movs	r2, #1
 1151 000a 80F8A020 		strb	r2, [r0, #160]
 756:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1152              		.loc 1 756 0 is_stmt 1 discriminator 2
 1153 000e 0223     		movs	r3, #2
 1154 0010 80F8A130 		strb	r3, [r0, #161]
 762:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1155              		.loc 1 762 0 discriminator 2
 1156 0014 0368     		ldr	r3, [r0]
 1157 0016 03EBC111 		add	r1, r3, r1, lsl #7
 1158              	.LVL86:
 1159 001a D1F88430 		ldr	r3, [r1, #132]
 1160 001e 23F01003 		bic	r3, r3, #16
 1161 0022 C1F88430 		str	r3, [r1, #132]
 765:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1162              		.loc 1 765 0 discriminator 2
 1163 0026 0368     		ldr	r3, [r0]
 1164 0028 5A62     		str	r2, [r3, #36]
 768:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 57


 1165              		.loc 1 768 0 discriminator 2
 1166 002a 80F8A120 		strb	r2, [r0, #161]
 771:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1167              		.loc 1 771 0 discriminator 2
 1168 002e 0023     		movs	r3, #0
 1169 0030 80F8A030 		strb	r3, [r0, #160]
 773:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1170              		.loc 1 773 0 discriminator 2
 1171 0034 1846     		mov	r0, r3
 1172              	.LVL87:
 1173 0036 7047     		bx	lr
 1174              	.LVL88:
 1175              	.L61:
 753:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1176              		.loc 1 753 0
 1177 0038 0220     		movs	r0, #2
 1178              	.LVL89:
 774:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1179              		.loc 1 774 0
 1180 003a 7047     		bx	lr
 1181              		.cfi_endproc
 1182              	.LFE150:
 1184              		.section	.text.HAL_LTDC_EnableDither,"ax",%progbits
 1185              		.align	2
 1186              		.global	HAL_LTDC_EnableDither
 1187              		.thumb
 1188              		.thumb_func
 1190              	HAL_LTDC_EnableDither:
 1191              	.LFB151:
 784:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 1192              		.loc 1 784 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196              		@ link register save eliminated.
 1197              	.LVL90:
 786:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1198              		.loc 1 786 0
 1199 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1200 0004 012B     		cmp	r3, #1
 1201 0006 11D0     		beq	.L64
 786:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1202              		.loc 1 786 0 is_stmt 0 discriminator 2
 1203 0008 0122     		movs	r2, #1
 1204 000a 80F8A020 		strb	r2, [r0, #160]
 789:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1205              		.loc 1 789 0 is_stmt 1 discriminator 2
 1206 000e 0223     		movs	r3, #2
 1207 0010 80F8A130 		strb	r3, [r0, #161]
 792:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1208              		.loc 1 792 0 discriminator 2
 1209 0014 0649     		ldr	r1, .L65
 1210 0016 8B69     		ldr	r3, [r1, #24]
 1211 0018 43F48033 		orr	r3, r3, #65536
 1212 001c 8B61     		str	r3, [r1, #24]
 795:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1213              		.loc 1 795 0 discriminator 2
ARM GAS  /tmp/ccObssGX.s 			page 58


 1214 001e 80F8A120 		strb	r2, [r0, #161]
 798:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1215              		.loc 1 798 0 discriminator 2
 1216 0022 0023     		movs	r3, #0
 1217 0024 80F8A030 		strb	r3, [r0, #160]
 800:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1218              		.loc 1 800 0 discriminator 2
 1219 0028 1846     		mov	r0, r3
 1220              	.LVL91:
 1221 002a 7047     		bx	lr
 1222              	.LVL92:
 1223              	.L64:
 786:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1224              		.loc 1 786 0
 1225 002c 0220     		movs	r0, #2
 1226              	.LVL93:
 801:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1227              		.loc 1 801 0
 1228 002e 7047     		bx	lr
 1229              	.L66:
 1230              		.align	2
 1231              	.L65:
 1232 0030 00680140 		.word	1073833984
 1233              		.cfi_endproc
 1234              	.LFE151:
 1236              		.section	.text.HAL_LTDC_DisableDither,"ax",%progbits
 1237              		.align	2
 1238              		.global	HAL_LTDC_DisableDither
 1239              		.thumb
 1240              		.thumb_func
 1242              	HAL_LTDC_DisableDither:
 1243              	.LFB152:
 811:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 1244              		.loc 1 811 0
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 0
 1247              		@ frame_needed = 0, uses_anonymous_args = 0
 1248              		@ link register save eliminated.
 1249              	.LVL94:
 813:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1250              		.loc 1 813 0
 1251 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1252 0004 012B     		cmp	r3, #1
 1253 0006 11D0     		beq	.L69
 813:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1254              		.loc 1 813 0 is_stmt 0 discriminator 2
 1255 0008 0122     		movs	r2, #1
 1256 000a 80F8A020 		strb	r2, [r0, #160]
 816:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1257              		.loc 1 816 0 is_stmt 1 discriminator 2
 1258 000e 0223     		movs	r3, #2
 1259 0010 80F8A130 		strb	r3, [r0, #161]
 819:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1260              		.loc 1 819 0 discriminator 2
 1261 0014 0649     		ldr	r1, .L70
 1262 0016 8B69     		ldr	r3, [r1, #24]
 1263 0018 23F48033 		bic	r3, r3, #65536
ARM GAS  /tmp/ccObssGX.s 			page 59


 1264 001c 8B61     		str	r3, [r1, #24]
 822:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1265              		.loc 1 822 0 discriminator 2
 1266 001e 80F8A120 		strb	r2, [r0, #161]
 825:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1267              		.loc 1 825 0 discriminator 2
 1268 0022 0023     		movs	r3, #0
 1269 0024 80F8A030 		strb	r3, [r0, #160]
 827:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1270              		.loc 1 827 0 discriminator 2
 1271 0028 1846     		mov	r0, r3
 1272              	.LVL95:
 1273 002a 7047     		bx	lr
 1274              	.LVL96:
 1275              	.L69:
 813:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1276              		.loc 1 813 0
 1277 002c 0220     		movs	r0, #2
 1278              	.LVL97:
 828:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1279              		.loc 1 828 0
 1280 002e 7047     		bx	lr
 1281              	.L71:
 1282              		.align	2
 1283              	.L70:
 1284 0030 00680140 		.word	1073833984
 1285              		.cfi_endproc
 1286              	.LFE152:
 1288              		.section	.text.HAL_LTDC_SetWindowSize,"ax",%progbits
 1289              		.align	2
 1290              		.global	HAL_LTDC_SetWindowSize
 1291              		.thumb
 1292              		.thumb_func
 1294              	HAL_LTDC_SetWindowSize:
 1295              	.LFB153:
 842:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 1296              		.loc 1 842 0
 1297              		.cfi_startproc
 1298              		@ args = 0, pretend = 0, frame = 0
 1299              		@ frame_needed = 0, uses_anonymous_args = 0
 1300              	.LVL98:
 1301 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1302              	.LCFI12:
 1303              		.cfi_def_cfa_offset 24
 1304              		.cfi_offset 3, -24
 1305              		.cfi_offset 4, -20
 1306              		.cfi_offset 5, -16
 1307              		.cfi_offset 6, -12
 1308              		.cfi_offset 7, -8
 1309              		.cfi_offset 14, -4
 846:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1310              		.loc 1 846 0
 1311 0002 90F8A040 		ldrb	r4, [r0, #160]	@ zero_extendqisi2
 1312 0006 012C     		cmp	r4, #1
 1313 0008 20D0     		beq	.L74
 1314 000a 0446     		mov	r4, r0
 846:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 60


 1315              		.loc 1 846 0 is_stmt 0 discriminator 2
 1316 000c 0127     		movs	r7, #1
 1317 000e 80F8A070 		strb	r7, [r0, #160]
 849:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1318              		.loc 1 849 0 is_stmt 1 discriminator 2
 1319 0012 0220     		movs	r0, #2
 1320              	.LVL99:
 1321 0014 84F8A100 		strb	r0, [r4, #161]
 852:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1322              		.loc 1 852 0 discriminator 2
 1323 0018 3425     		movs	r5, #52
 1324 001a 05FB03F5 		mul	r5, r5, r3
 1325 001e 05F13800 		add	r0, r5, #56
 1326              	.LVL100:
 864:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 1327              		.loc 1 864 0 discriminator 2
 1328 0022 2544     		add	r5, r5, r4
 1329 0024 0026     		movs	r6, #0
 1330 0026 AE63     		str	r6, [r5, #56]
 865:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1331              		.loc 1 865 0 discriminator 2
 1332 0028 E963     		str	r1, [r5, #60]
 868:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 1333              		.loc 1 868 0 discriminator 2
 1334 002a 2E64     		str	r6, [r5, #64]
 869:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1335              		.loc 1 869 0 discriminator 2
 1336 002c 6A64     		str	r2, [r5, #68]
 872:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1337              		.loc 1 872 0 discriminator 2
 1338 002e 2966     		str	r1, [r5, #96]
 875:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1339              		.loc 1 875 0 discriminator 2
 1340 0030 6A66     		str	r2, [r5, #100]
 878:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1341              		.loc 1 878 0 discriminator 2
 1342 0032 1A46     		mov	r2, r3
 1343              	.LVL101:
 1344 0034 2118     		adds	r1, r4, r0
 1345              	.LVL102:
 1346 0036 2046     		mov	r0, r4
 1347 0038 FFF7FEFF 		bl	LTDC_SetConfig
 1348              	.LVL103:
 881:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1349              		.loc 1 881 0 discriminator 2
 1350 003c 2368     		ldr	r3, [r4]
 1351 003e 5F62     		str	r7, [r3, #36]
 884:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1352              		.loc 1 884 0 discriminator 2
 1353 0040 84F8A170 		strb	r7, [r4, #161]
 887:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1354              		.loc 1 887 0 discriminator 2
 1355 0044 84F8A060 		strb	r6, [r4, #160]
 889:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1356              		.loc 1 889 0 discriminator 2
 1357 0048 3046     		mov	r0, r6
 1358 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccObssGX.s 			page 61


 1359              	.LVL104:
 1360              	.L74:
 846:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1361              		.loc 1 846 0
 1362 004c 0220     		movs	r0, #2
 1363              	.LVL105:
 890:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1364              		.loc 1 890 0
 1365 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1366              		.cfi_endproc
 1367              	.LFE153:
 1369              		.section	.text.HAL_LTDC_SetWindowPosition,"ax",%progbits
 1370              		.align	2
 1371              		.global	HAL_LTDC_SetWindowPosition
 1372              		.thumb
 1373              		.thumb_func
 1375              	HAL_LTDC_SetWindowPosition:
 1376              	.LFB154:
 904:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 1377              		.loc 1 904 0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 1381              	.LVL106:
 1382 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1383              	.LCFI13:
 1384              		.cfi_def_cfa_offset 24
 1385              		.cfi_offset 3, -24
 1386              		.cfi_offset 4, -20
 1387              		.cfi_offset 5, -16
 1388              		.cfi_offset 6, -12
 1389              		.cfi_offset 7, -8
 1390              		.cfi_offset 14, -4
 908:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1391              		.loc 1 908 0
 1392 0002 90F8A040 		ldrb	r4, [r0, #160]	@ zero_extendqisi2
 1393 0006 012C     		cmp	r4, #1
 1394 0008 22D0     		beq	.L78
 1395 000a 0446     		mov	r4, r0
 908:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1396              		.loc 1 908 0 is_stmt 0 discriminator 2
 1397 000c 0125     		movs	r5, #1
 1398 000e 80F8A050 		strb	r5, [r0, #160]
 911:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1399              		.loc 1 911 0 is_stmt 1 discriminator 2
 1400 0012 0220     		movs	r0, #2
 1401              	.LVL107:
 1402 0014 84F8A100 		strb	r0, [r4, #161]
 914:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1403              		.loc 1 914 0 discriminator 2
 1404 0018 3420     		movs	r0, #52
 1405 001a 00FB03F0 		mul	r0, r0, r3
 1406 001e 00F1380E 		add	lr, r0, #56
 1407              	.LVL108:
 924:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 1408              		.loc 1 924 0 discriminator 2
 1409 0022 2044     		add	r0, r0, r4
ARM GAS  /tmp/ccObssGX.s 			page 62


 1410 0024 8163     		str	r1, [r0, #56]
 925:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1411              		.loc 1 925 0 discriminator 2
 1412 0026 076E     		ldr	r7, [r0, #96]
 1413 0028 3944     		add	r1, r1, r7
 1414              	.LVL109:
 1415 002a C163     		str	r1, [r0, #60]
 928:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 1416              		.loc 1 928 0 discriminator 2
 1417 002c 0264     		str	r2, [r0, #64]
 929:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1418              		.loc 1 929 0 discriminator 2
 1419 002e 466E     		ldr	r6, [r0, #100]
 1420 0030 1644     		add	r6, r6, r2
 1421 0032 4664     		str	r6, [r0, #68]
 932:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1422              		.loc 1 932 0 discriminator 2
 1423 0034 1A46     		mov	r2, r3
 1424              	.LVL110:
 1425 0036 04EB0E01 		add	r1, r4, lr
 1426              	.LVL111:
 1427 003a 2046     		mov	r0, r4
 1428              	.LVL112:
 1429 003c FFF7FEFF 		bl	LTDC_SetConfig
 1430              	.LVL113:
 935:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1431              		.loc 1 935 0 discriminator 2
 1432 0040 2368     		ldr	r3, [r4]
 1433 0042 5D62     		str	r5, [r3, #36]
 938:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1434              		.loc 1 938 0 discriminator 2
 1435 0044 84F8A150 		strb	r5, [r4, #161]
 941:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1436              		.loc 1 941 0 discriminator 2
 1437 0048 0020     		movs	r0, #0
 1438 004a 84F8A000 		strb	r0, [r4, #160]
 943:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1439              		.loc 1 943 0 discriminator 2
 1440 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1441              	.LVL114:
 1442              	.L78:
 908:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1443              		.loc 1 908 0
 1444 0050 0220     		movs	r0, #2
 1445              	.LVL115:
 944:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1446              		.loc 1 944 0
 1447 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1448              		.cfi_endproc
 1449              	.LFE154:
 1451              		.section	.text.HAL_LTDC_SetPixelFormat,"ax",%progbits
 1452              		.align	2
 1453              		.global	HAL_LTDC_SetPixelFormat
 1454              		.thumb
 1455              		.thumb_func
 1457              	HAL_LTDC_SetPixelFormat:
 1458              	.LFB155:
ARM GAS  /tmp/ccObssGX.s 			page 63


 957:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 1459              		.loc 1 957 0
 1460              		.cfi_startproc
 1461              		@ args = 0, pretend = 0, frame = 0
 1462              		@ frame_needed = 0, uses_anonymous_args = 0
 1463              	.LVL116:
 1464 0000 38B5     		push	{r3, r4, r5, lr}
 1465              	.LCFI14:
 1466              		.cfi_def_cfa_offset 16
 1467              		.cfi_offset 3, -16
 1468              		.cfi_offset 4, -12
 1469              		.cfi_offset 5, -8
 1470              		.cfi_offset 14, -4
 961:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1471              		.loc 1 961 0
 1472 0002 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1473 0006 012B     		cmp	r3, #1
 1474 0008 19D0     		beq	.L82
 1475 000a 0446     		mov	r4, r0
 961:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1476              		.loc 1 961 0 is_stmt 0 discriminator 2
 1477 000c 0125     		movs	r5, #1
 1478 000e 80F8A050 		strb	r5, [r0, #160]
 964:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1479              		.loc 1 964 0 is_stmt 1 discriminator 2
 1480 0012 0223     		movs	r3, #2
 1481 0014 80F8A130 		strb	r3, [r0, #161]
 971:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1482              		.loc 1 971 0 discriminator 2
 1483 0018 3423     		movs	r3, #52
 1484 001a 03FB02F3 		mul	r3, r3, r2
 1485 001e 03F13800 		add	r0, r3, #56
 1486              	.LVL117:
 974:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1487              		.loc 1 974 0 discriminator 2
 1488 0022 2344     		add	r3, r3, r4
 1489 0024 9964     		str	r1, [r3, #72]
 977:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1490              		.loc 1 977 0 discriminator 2
 1491 0026 2118     		adds	r1, r4, r0
 1492              	.LVL118:
 1493 0028 2046     		mov	r0, r4
 1494 002a FFF7FEFF 		bl	LTDC_SetConfig
 1495              	.LVL119:
 980:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1496              		.loc 1 980 0 discriminator 2
 1497 002e 2368     		ldr	r3, [r4]
 1498 0030 5D62     		str	r5, [r3, #36]
 983:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1499              		.loc 1 983 0 discriminator 2
 1500 0032 84F8A150 		strb	r5, [r4, #161]
 986:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1501              		.loc 1 986 0 discriminator 2
 1502 0036 0020     		movs	r0, #0
 1503 0038 84F8A000 		strb	r0, [r4, #160]
 988:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1504              		.loc 1 988 0 discriminator 2
ARM GAS  /tmp/ccObssGX.s 			page 64


 1505 003c 38BD     		pop	{r3, r4, r5, pc}
 1506              	.LVL120:
 1507              	.L82:
 961:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1508              		.loc 1 961 0
 1509 003e 0220     		movs	r0, #2
 1510              	.LVL121:
 989:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1511              		.loc 1 989 0
 1512 0040 38BD     		pop	{r3, r4, r5, pc}
 1513              		.cfi_endproc
 1514              	.LFE155:
 1516 0042 00BF     		.section	.text.HAL_LTDC_SetAlpha,"ax",%progbits
 1517              		.align	2
 1518              		.global	HAL_LTDC_SetAlpha
 1519              		.thumb
 1520              		.thumb_func
 1522              	HAL_LTDC_SetAlpha:
 1523              	.LFB156:
1002:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 1524              		.loc 1 1002 0
 1525              		.cfi_startproc
 1526              		@ args = 0, pretend = 0, frame = 0
 1527              		@ frame_needed = 0, uses_anonymous_args = 0
 1528              	.LVL122:
 1529 0000 38B5     		push	{r3, r4, r5, lr}
 1530              	.LCFI15:
 1531              		.cfi_def_cfa_offset 16
 1532              		.cfi_offset 3, -16
 1533              		.cfi_offset 4, -12
 1534              		.cfi_offset 5, -8
 1535              		.cfi_offset 14, -4
1006:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1536              		.loc 1 1006 0
 1537 0002 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1538 0006 012B     		cmp	r3, #1
 1539 0008 19D0     		beq	.L86
 1540 000a 0446     		mov	r4, r0
1006:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1541              		.loc 1 1006 0 is_stmt 0 discriminator 2
 1542 000c 0125     		movs	r5, #1
 1543 000e 80F8A050 		strb	r5, [r0, #160]
1009:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1544              		.loc 1 1009 0 is_stmt 1 discriminator 2
 1545 0012 0223     		movs	r3, #2
 1546 0014 80F8A130 		strb	r3, [r0, #161]
1016:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1547              		.loc 1 1016 0 discriminator 2
 1548 0018 3423     		movs	r3, #52
 1549 001a 03FB02F3 		mul	r3, r3, r2
 1550 001e 03F13800 		add	r0, r3, #56
 1551              	.LVL123:
1019:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1552              		.loc 1 1019 0 discriminator 2
 1553 0022 2344     		add	r3, r3, r4
 1554 0024 D964     		str	r1, [r3, #76]
1022:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 65


 1555              		.loc 1 1022 0 discriminator 2
 1556 0026 2118     		adds	r1, r4, r0
 1557              	.LVL124:
 1558 0028 2046     		mov	r0, r4
 1559 002a FFF7FEFF 		bl	LTDC_SetConfig
 1560              	.LVL125:
1025:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1561              		.loc 1 1025 0 discriminator 2
 1562 002e 2368     		ldr	r3, [r4]
 1563 0030 5D62     		str	r5, [r3, #36]
1028:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1564              		.loc 1 1028 0 discriminator 2
 1565 0032 84F8A150 		strb	r5, [r4, #161]
1031:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1566              		.loc 1 1031 0 discriminator 2
 1567 0036 0020     		movs	r0, #0
 1568 0038 84F8A000 		strb	r0, [r4, #160]
1033:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1569              		.loc 1 1033 0 discriminator 2
 1570 003c 38BD     		pop	{r3, r4, r5, pc}
 1571              	.LVL126:
 1572              	.L86:
1006:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1573              		.loc 1 1006 0
 1574 003e 0220     		movs	r0, #2
 1575              	.LVL127:
1034:HALLIB/Src/stm32f7xx_hal_ltdc.c **** /**
 1576              		.loc 1 1034 0
 1577 0040 38BD     		pop	{r3, r4, r5, pc}
 1578              		.cfi_endproc
 1579              	.LFE156:
 1581 0042 00BF     		.section	.text.HAL_LTDC_SetAddress,"ax",%progbits
 1582              		.align	2
 1583              		.global	HAL_LTDC_SetAddress
 1584              		.thumb
 1585              		.thumb_func
 1587              	HAL_LTDC_SetAddress:
 1588              	.LFB157:
1046:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 1589              		.loc 1 1046 0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 0
 1592              		@ frame_needed = 0, uses_anonymous_args = 0
 1593              	.LVL128:
 1594 0000 38B5     		push	{r3, r4, r5, lr}
 1595              	.LCFI16:
 1596              		.cfi_def_cfa_offset 16
 1597              		.cfi_offset 3, -16
 1598              		.cfi_offset 4, -12
 1599              		.cfi_offset 5, -8
 1600              		.cfi_offset 14, -4
1050:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1601              		.loc 1 1050 0
 1602 0002 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1603 0006 012B     		cmp	r3, #1
 1604 0008 19D0     		beq	.L90
 1605 000a 0446     		mov	r4, r0
ARM GAS  /tmp/ccObssGX.s 			page 66


1050:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1606              		.loc 1 1050 0 is_stmt 0 discriminator 2
 1607 000c 0125     		movs	r5, #1
 1608 000e 80F8A050 		strb	r5, [r0, #160]
1053:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1609              		.loc 1 1053 0 is_stmt 1 discriminator 2
 1610 0012 0223     		movs	r3, #2
 1611 0014 80F8A130 		strb	r3, [r0, #161]
1059:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1612              		.loc 1 1059 0 discriminator 2
 1613 0018 3423     		movs	r3, #52
 1614 001a 03FB02F3 		mul	r3, r3, r2
 1615 001e 03F13800 		add	r0, r3, #56
 1616              	.LVL129:
1062:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1617              		.loc 1 1062 0 discriminator 2
 1618 0022 2344     		add	r3, r3, r4
 1619 0024 D965     		str	r1, [r3, #92]
1065:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1620              		.loc 1 1065 0 discriminator 2
 1621 0026 2118     		adds	r1, r4, r0
 1622              	.LVL130:
 1623 0028 2046     		mov	r0, r4
 1624 002a FFF7FEFF 		bl	LTDC_SetConfig
 1625              	.LVL131:
1068:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1626              		.loc 1 1068 0 discriminator 2
 1627 002e 2368     		ldr	r3, [r4]
 1628 0030 5D62     		str	r5, [r3, #36]
1071:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1629              		.loc 1 1071 0 discriminator 2
 1630 0032 84F8A150 		strb	r5, [r4, #161]
1074:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1631              		.loc 1 1074 0 discriminator 2
 1632 0036 0020     		movs	r0, #0
 1633 0038 84F8A000 		strb	r0, [r4, #160]
1076:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1634              		.loc 1 1076 0 discriminator 2
 1635 003c 38BD     		pop	{r3, r4, r5, pc}
 1636              	.LVL132:
 1637              	.L90:
1050:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1638              		.loc 1 1050 0
 1639 003e 0220     		movs	r0, #2
 1640              	.LVL133:
1077:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1641              		.loc 1 1077 0
 1642 0040 38BD     		pop	{r3, r4, r5, pc}
 1643              		.cfi_endproc
 1644              	.LFE157:
 1646 0042 00BF     		.section	.text.HAL_LTDC_SetPitch,"ax",%progbits
 1647              		.align	2
 1648              		.global	HAL_LTDC_SetPitch
 1649              		.thumb
 1650              		.thumb_func
 1652              	HAL_LTDC_SetPitch:
 1653              	.LFB158:
ARM GAS  /tmp/ccObssGX.s 			page 67


1093:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0;
 1654              		.loc 1 1093 0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 0
 1657              		@ frame_needed = 0, uses_anonymous_args = 0
 1658              		@ link register save eliminated.
 1659              	.LVL134:
1099:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1660              		.loc 1 1099 0
 1661 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1662 0004 012B     		cmp	r3, #1
 1663 0006 45D0     		beq	.L96
1093:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0;
 1664              		.loc 1 1093 0 discriminator 2
 1665 0008 30B4     		push	{r4, r5}
 1666              	.LCFI17:
 1667              		.cfi_def_cfa_offset 8
 1668              		.cfi_offset 4, -8
 1669              		.cfi_offset 5, -4
1099:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1670              		.loc 1 1099 0 discriminator 2
 1671 000a 0123     		movs	r3, #1
 1672 000c 80F8A030 		strb	r3, [r0, #160]
1102:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1673              		.loc 1 1102 0 discriminator 2
 1674 0010 0223     		movs	r3, #2
 1675 0012 80F8A130 		strb	r3, [r0, #161]
1108:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1676              		.loc 1 1108 0 discriminator 2
 1677 0016 3423     		movs	r3, #52
 1678 0018 03FB0203 		mla	r3, r3, r2, r0
 1679 001c 9B6C     		ldr	r3, [r3, #72]
 1680              	.LVL135:
1110:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 1681              		.loc 1 1110 0 discriminator 2
 1682 001e 73B1     		cbz	r3, .L97
1114:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 1683              		.loc 1 1114 0
 1684 0020 012B     		cmp	r3, #1
 1685 0022 0ED0     		beq	.L98
1118:HALLIB/Src/stm32f7xx_hal_ltdc.c ****           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 1686              		.loc 1 1118 0
 1687 0024 022B     		cmp	r3, #2
 1688 0026 18BF     		it	ne
 1689 0028 042B     		cmpne	r3, #4
 1690 002a 0CD0     		beq	.L99
1121:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 1691              		.loc 1 1121 0
 1692 002c 072B     		cmp	r3, #7
 1693 002e 14BF     		ite	ne
 1694 0030 0024     		movne	r4, #0
 1695 0032 0124     		moveq	r4, #1
1120:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
 1696              		.loc 1 1120 0
 1697 0034 032B     		cmp	r3, #3
 1698 0036 00D0     		beq	.L101
 1699 0038 3CB1     		cbz	r4, .L100
ARM GAS  /tmp/ccObssGX.s 			page 68


 1700              	.L101:
1123:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 1701              		.loc 1 1123 0
 1702 003a 0223     		movs	r3, #2
 1703              	.LVL136:
 1704 003c 06E0     		b	.L94
 1705              	.LVL137:
 1706              	.L97:
1112:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 1707              		.loc 1 1112 0
 1708 003e 0423     		movs	r3, #4
 1709              	.LVL138:
 1710 0040 04E0     		b	.L94
 1711              	.LVL139:
 1712              	.L98:
1116:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 1713              		.loc 1 1116 0
 1714 0042 0323     		movs	r3, #3
 1715              	.LVL140:
 1716 0044 02E0     		b	.L94
 1717              	.LVL141:
 1718              	.L99:
1123:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 1719              		.loc 1 1123 0
 1720 0046 0223     		movs	r3, #2
 1721              	.LVL142:
 1722 0048 00E0     		b	.L94
 1723              	.LVL143:
 1724              	.L100:
1127:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 1725              		.loc 1 1127 0
 1726 004a 0123     		movs	r3, #1
 1727              	.LVL144:
 1728              	.L94:
1130:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1729              		.loc 1 1130 0
 1730 004c 01FB03F1 		mul	r1, r1, r3
 1731              	.LVL145:
1133:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1732              		.loc 1 1133 0
 1733 0050 0368     		ldr	r3, [r0]
 1734              	.LVL146:
 1735 0052 D201     		lsls	r2, r2, #7
 1736              	.LVL147:
 1737 0054 1344     		add	r3, r3, r2
 1738 0056 D3F8B050 		ldr	r5, [r3, #176]
 1739 005a 104C     		ldr	r4, .L104
 1740 005c 2C40     		ands	r4, r4, r5
 1741 005e C3F8B040 		str	r4, [r3, #176]
 1742              	.LVL148:
1136:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1743              		.loc 1 1136 0
 1744 0062 0F4B     		ldr	r3, .L104+4
 1745 0064 5C6A     		ldr	r4, [r3, #36]
 1746 0066 44F00104 		orr	r4, r4, #1
 1747 006a 5C62     		str	r4, [r3, #36]
1139:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
ARM GAS  /tmp/ccObssGX.s 			page 69


 1748              		.loc 1 1139 0
 1749 006c 0468     		ldr	r4, [r0]
 1750 006e 2244     		add	r2, r2, r4
 1751 0070 D2F8B040 		ldr	r4, [r2, #176]
 1752 0074 44EA0141 		orr	r1, r4, r1, lsl #16
 1753              	.LVL149:
 1754 0078 C2F8B010 		str	r1, [r2, #176]
1142:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1755              		.loc 1 1142 0
 1756 007c 5A6A     		ldr	r2, [r3, #36]
 1757 007e 42F00102 		orr	r2, r2, #1
 1758 0082 5A62     		str	r2, [r3, #36]
1145:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1759              		.loc 1 1145 0
 1760 0084 0123     		movs	r3, #1
 1761 0086 80F8A130 		strb	r3, [r0, #161]
1148:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1762              		.loc 1 1148 0
 1763 008a 0023     		movs	r3, #0
 1764 008c 80F8A030 		strb	r3, [r0, #160]
1150:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1765              		.loc 1 1150 0
 1766 0090 1846     		mov	r0, r3
 1767              	.LVL150:
 1768 0092 01E0     		b	.L93
 1769              	.LVL151:
 1770              	.L96:
 1771              	.LCFI18:
 1772              		.cfi_def_cfa_offset 0
 1773              		.cfi_restore 4
 1774              		.cfi_restore 5
1099:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1775              		.loc 1 1099 0
 1776 0094 0220     		movs	r0, #2
 1777              	.LVL152:
 1778 0096 7047     		bx	lr
 1779              	.LVL153:
 1780              	.L93:
 1781              	.LCFI19:
 1782              		.cfi_def_cfa_offset 8
 1783              		.cfi_offset 4, -8
 1784              		.cfi_offset 5, -4
1151:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1785              		.loc 1 1151 0
 1786 0098 30BC     		pop	{r4, r5}
 1787              	.LCFI20:
 1788              		.cfi_restore 5
 1789              		.cfi_restore 4
 1790              		.cfi_def_cfa_offset 0
 1791 009a 7047     		bx	lr
 1792              	.L105:
 1793              		.align	2
 1794              	.L104:
 1795 009c FFFF00E0 		.word	-536805377
 1796 00a0 00680140 		.word	1073833984
 1797              		.cfi_endproc
 1798              	.LFE158:
ARM GAS  /tmp/ccObssGX.s 			page 70


 1800              		.section	.text.HAL_LTDC_ProgramLineEvent,"ax",%progbits
 1801              		.align	2
 1802              		.global	HAL_LTDC_ProgramLineEvent
 1803              		.thumb
 1804              		.thumb_func
 1806              	HAL_LTDC_ProgramLineEvent:
 1807              	.LFB159:
1161:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 1808              		.loc 1 1161 0
 1809              		.cfi_startproc
 1810              		@ args = 0, pretend = 0, frame = 0
 1811              		@ frame_needed = 0, uses_anonymous_args = 0
 1812              		@ link register save eliminated.
 1813              	.LVL154:
1163:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1814              		.loc 1 1163 0
 1815 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1816 0004 012B     		cmp	r3, #1
 1817 0006 13D0     		beq	.L108
1161:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 1818              		.loc 1 1161 0 discriminator 2
 1819 0008 10B4     		push	{r4}
 1820              	.LCFI21:
 1821              		.cfi_def_cfa_offset 4
 1822              		.cfi_offset 4, -4
1163:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1823              		.loc 1 1163 0 discriminator 2
 1824 000a 0122     		movs	r2, #1
 1825 000c 80F8A020 		strb	r2, [r0, #160]
1166:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1826              		.loc 1 1166 0 discriminator 2
 1827 0010 0223     		movs	r3, #2
 1828 0012 80F8A130 		strb	r3, [r0, #161]
1172:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1829              		.loc 1 1172 0 discriminator 2
 1830 0016 0468     		ldr	r4, [r0]
 1831 0018 636B     		ldr	r3, [r4, #52]
 1832 001a 1343     		orrs	r3, r3, r2
 1833 001c 6363     		str	r3, [r4, #52]
1175:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1834              		.loc 1 1175 0 discriminator 2
 1835 001e 074B     		ldr	r3, .L111
 1836 0020 1964     		str	r1, [r3, #64]
1178:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1837              		.loc 1 1178 0 discriminator 2
 1838 0022 80F8A120 		strb	r2, [r0, #161]
1181:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1839              		.loc 1 1181 0 discriminator 2
 1840 0026 0023     		movs	r3, #0
 1841 0028 80F8A030 		strb	r3, [r0, #160]
1183:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1842              		.loc 1 1183 0 discriminator 2
 1843 002c 1846     		mov	r0, r3
 1844              	.LVL155:
 1845 002e 01E0     		b	.L107
 1846              	.LVL156:
 1847              	.L108:
ARM GAS  /tmp/ccObssGX.s 			page 71


 1848              	.LCFI22:
 1849              		.cfi_def_cfa_offset 0
 1850              		.cfi_restore 4
1163:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1851              		.loc 1 1163 0
 1852 0030 0220     		movs	r0, #2
 1853              	.LVL157:
 1854 0032 7047     		bx	lr
 1855              	.L107:
 1856              	.LCFI23:
 1857              		.cfi_def_cfa_offset 4
 1858              		.cfi_offset 4, -4
1184:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1859              		.loc 1 1184 0
 1860 0034 5DF8044B 		ldr	r4, [sp], #4
 1861              	.LCFI24:
 1862              		.cfi_restore 4
 1863              		.cfi_def_cfa_offset 0
 1864 0038 7047     		bx	lr
 1865              	.L112:
 1866 003a 00BF     		.align	2
 1867              	.L111:
 1868 003c 00680140 		.word	1073833984
 1869              		.cfi_endproc
 1870              	.LFE159:
 1872              		.section	.text.HAL_LTDC_Reload,"ax",%progbits
 1873              		.align	2
 1874              		.global	HAL_LTDC_Reload
 1875              		.thumb
 1876              		.thumb_func
 1878              	HAL_LTDC_Reload:
 1879              	.LFB160:
1196:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_RELAOD(ReloadType));
 1880              		.loc 1 1196 0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884              		@ link register save eliminated.
 1885              	.LVL158:
1200:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1886              		.loc 1 1200 0
 1887 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1888 0004 012B     		cmp	r3, #1
 1889 0006 14D0     		beq	.L115
1196:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   assert_param(IS_LTDC_RELAOD(ReloadType));
 1890              		.loc 1 1196 0 discriminator 2
 1891 0008 10B4     		push	{r4}
 1892              	.LCFI25:
 1893              		.cfi_def_cfa_offset 4
 1894              		.cfi_offset 4, -4
1200:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1895              		.loc 1 1200 0 discriminator 2
 1896 000a 0122     		movs	r2, #1
 1897 000c 80F8A020 		strb	r2, [r0, #160]
1203:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1898              		.loc 1 1203 0 discriminator 2
 1899 0010 0223     		movs	r3, #2
ARM GAS  /tmp/ccObssGX.s 			page 72


 1900 0012 80F8A130 		strb	r3, [r0, #161]
1206:HALLIB/Src/stm32f7xx_hal_ltdc.c ****        
 1901              		.loc 1 1206 0 discriminator 2
 1902 0016 0468     		ldr	r4, [r0]
 1903 0018 636B     		ldr	r3, [r4, #52]
 1904 001a 43F00803 		orr	r3, r3, #8
 1905 001e 6363     		str	r3, [r4, #52]
1209:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1906              		.loc 1 1209 0 discriminator 2
 1907 0020 0368     		ldr	r3, [r0]
 1908 0022 5962     		str	r1, [r3, #36]
1212:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1909              		.loc 1 1212 0 discriminator 2
 1910 0024 80F8A120 		strb	r2, [r0, #161]
1215:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1911              		.loc 1 1215 0 discriminator 2
 1912 0028 0023     		movs	r3, #0
 1913 002a 80F8A030 		strb	r3, [r0, #160]
1217:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 1914              		.loc 1 1217 0 discriminator 2
 1915 002e 1846     		mov	r0, r3
 1916              	.LVL159:
 1917 0030 01E0     		b	.L114
 1918              	.LVL160:
 1919              	.L115:
 1920              	.LCFI26:
 1921              		.cfi_def_cfa_offset 0
 1922              		.cfi_restore 4
1200:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1923              		.loc 1 1200 0
 1924 0032 0220     		movs	r0, #2
 1925              	.LVL161:
 1926 0034 7047     		bx	lr
 1927              	.L114:
 1928              	.LCFI27:
 1929              		.cfi_def_cfa_offset 4
 1930              		.cfi_offset 4, -4
1218:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1931              		.loc 1 1218 0
 1932 0036 5DF8044B 		ldr	r4, [sp], #4
 1933              	.LCFI28:
 1934              		.cfi_restore 4
 1935              		.cfi_def_cfa_offset 0
 1936 003a 7047     		bx	lr
 1937              		.cfi_endproc
 1938              	.LFE160:
 1940              		.section	.text.HAL_LTDC_ConfigLayer_NoReload,"ax",%progbits
 1941              		.align	2
 1942              		.global	HAL_LTDC_ConfigLayer_NoReload
 1943              		.thumb
 1944              		.thumb_func
 1946              	HAL_LTDC_ConfigLayer_NoReload:
 1947              	.LFB161:
1234:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 1948              		.loc 1 1234 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccObssGX.s 			page 73


 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952              	.LVL162:
1236:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1953              		.loc 1 1236 0
 1954 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 1955 0004 012B     		cmp	r3, #1
 1956 0006 24D0     		beq	.L120
1234:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 1957              		.loc 1 1234 0 discriminator 2
 1958 0008 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1959              	.LCFI29:
 1960              		.cfi_def_cfa_offset 24
 1961              		.cfi_offset 4, -24
 1962              		.cfi_offset 5, -20
 1963              		.cfi_offset 6, -16
 1964              		.cfi_offset 7, -12
 1965              		.cfi_offset 8, -8
 1966              		.cfi_offset 14, -4
 1967 000c 9646     		mov	lr, r2
 1968 000e 0F46     		mov	r7, r1
 1969 0010 0646     		mov	r6, r0
1236:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 1970              		.loc 1 1236 0 discriminator 2
 1971 0012 4FF00108 		mov	r8, #1
 1972 0016 80F8A080 		strb	r8, [r0, #160]
1239:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1973              		.loc 1 1239 0 discriminator 2
 1974 001a 0223     		movs	r3, #2
 1975 001c 80F8A130 		strb	r3, [r0, #161]
1255:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1976              		.loc 1 1255 0 discriminator 2
 1977 0020 3424     		movs	r4, #52
 1978 0022 04FB0204 		mla	r4, r4, r2, r0
 1979 0026 3834     		adds	r4, r4, #56
 1980 0028 0D46     		mov	r5, r1
 1981 002a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1982              	.LVL163:
 1983 002c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1984 002e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1985 0030 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1986 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1987 0034 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1988 0036 2B68     		ldr	r3, [r5]
 1989 0038 2360     		str	r3, [r4]
1258:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1990              		.loc 1 1258 0 discriminator 2
 1991 003a 7246     		mov	r2, lr
 1992 003c 3946     		mov	r1, r7
 1993 003e 3046     		mov	r0, r6
 1994 0040 FFF7FEFF 		bl	LTDC_SetConfig
 1995              	.LVL164:
1263:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1996              		.loc 1 1263 0 discriminator 2
 1997 0044 86F8A180 		strb	r8, [r6, #161]
1266:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 1998              		.loc 1 1266 0 discriminator 2
 1999 0048 0020     		movs	r0, #0
ARM GAS  /tmp/ccObssGX.s 			page 74


 2000 004a 86F8A000 		strb	r0, [r6, #160]
1268:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2001              		.loc 1 1268 0 discriminator 2
 2002 004e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2003              	.LVL165:
 2004              	.L120:
 2005              	.LCFI30:
 2006              		.cfi_def_cfa_offset 0
 2007              		.cfi_restore 4
 2008              		.cfi_restore 5
 2009              		.cfi_restore 6
 2010              		.cfi_restore 7
 2011              		.cfi_restore 8
 2012              		.cfi_restore 14
1236:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 2013              		.loc 1 1236 0
 2014 0052 0220     		movs	r0, #2
 2015              	.LVL166:
 2016 0054 7047     		bx	lr
 2017              		.cfi_endproc
 2018              	.LFE161:
 2020 0056 00BF     		.section	.text.HAL_LTDC_SetWindowSize_NoReload,"ax",%progbits
 2021              		.align	2
 2022              		.global	HAL_LTDC_SetWindowSize_NoReload
 2023              		.thumb
 2024              		.thumb_func
 2026              	HAL_LTDC_SetWindowSize_NoReload:
 2027              	.LFB162:
1284:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 2028              		.loc 1 1284 0
 2029              		.cfi_startproc
 2030              		@ args = 0, pretend = 0, frame = 0
 2031              		@ frame_needed = 0, uses_anonymous_args = 0
 2032              	.LVL167:
 2033 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2034              	.LCFI31:
 2035              		.cfi_def_cfa_offset 24
 2036              		.cfi_offset 3, -24
 2037              		.cfi_offset 4, -20
 2038              		.cfi_offset 5, -16
 2039              		.cfi_offset 6, -12
 2040              		.cfi_offset 7, -8
 2041              		.cfi_offset 14, -4
1288:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2042              		.loc 1 1288 0
 2043 0002 90F8A040 		ldrb	r4, [r0, #160]	@ zero_extendqisi2
 2044 0006 012C     		cmp	r4, #1
 2045 0008 1ED0     		beq	.L125
 2046 000a 0446     		mov	r4, r0
1288:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2047              		.loc 1 1288 0 is_stmt 0 discriminator 2
 2048 000c 0127     		movs	r7, #1
 2049 000e 80F8A070 		strb	r7, [r0, #160]
1291:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2050              		.loc 1 1291 0 is_stmt 1 discriminator 2
 2051 0012 0220     		movs	r0, #2
 2052              	.LVL168:
ARM GAS  /tmp/ccObssGX.s 			page 75


 2053 0014 84F8A100 		strb	r0, [r4, #161]
1294:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2054              		.loc 1 1294 0 discriminator 2
 2055 0018 3425     		movs	r5, #52
 2056 001a 05FB03F5 		mul	r5, r5, r3
 2057 001e 05F13800 		add	r0, r5, #56
 2058              	.LVL169:
1306:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 2059              		.loc 1 1306 0 discriminator 2
 2060 0022 2544     		add	r5, r5, r4
 2061 0024 0026     		movs	r6, #0
 2062 0026 AE63     		str	r6, [r5, #56]
1307:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2063              		.loc 1 1307 0 discriminator 2
 2064 0028 E963     		str	r1, [r5, #60]
1310:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 2065              		.loc 1 1310 0 discriminator 2
 2066 002a 2E64     		str	r6, [r5, #64]
1311:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2067              		.loc 1 1311 0 discriminator 2
 2068 002c 6A64     		str	r2, [r5, #68]
1314:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2069              		.loc 1 1314 0 discriminator 2
 2070 002e 2966     		str	r1, [r5, #96]
1317:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2071              		.loc 1 1317 0 discriminator 2
 2072 0030 6A66     		str	r2, [r5, #100]
1320:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2073              		.loc 1 1320 0 discriminator 2
 2074 0032 1A46     		mov	r2, r3
 2075              	.LVL170:
 2076 0034 2118     		adds	r1, r4, r0
 2077              	.LVL171:
 2078 0036 2046     		mov	r0, r4
 2079 0038 FFF7FEFF 		bl	LTDC_SetConfig
 2080              	.LVL172:
1325:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2081              		.loc 1 1325 0 discriminator 2
 2082 003c 84F8A170 		strb	r7, [r4, #161]
1328:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2083              		.loc 1 1328 0 discriminator 2
 2084 0040 84F8A060 		strb	r6, [r4, #160]
1330:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2085              		.loc 1 1330 0 discriminator 2
 2086 0044 3046     		mov	r0, r6
 2087 0046 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2088              	.LVL173:
 2089              	.L125:
1288:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2090              		.loc 1 1288 0
 2091 0048 0220     		movs	r0, #2
 2092              	.LVL174:
1331:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2093              		.loc 1 1331 0
 2094 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2095              		.cfi_endproc
 2096              	.LFE162:
ARM GAS  /tmp/ccObssGX.s 			page 76


 2098              		.section	.text.HAL_LTDC_SetWindowPosition_NoReload,"ax",%progbits
 2099              		.align	2
 2100              		.global	HAL_LTDC_SetWindowPosition_NoReload
 2101              		.thumb
 2102              		.thumb_func
 2104              	HAL_LTDC_SetWindowPosition_NoReload:
 2105              	.LFB163:
1346:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 2106              		.loc 1 1346 0
 2107              		.cfi_startproc
 2108              		@ args = 0, pretend = 0, frame = 0
 2109              		@ frame_needed = 0, uses_anonymous_args = 0
 2110              	.LVL175:
 2111 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2112              	.LCFI32:
 2113              		.cfi_def_cfa_offset 24
 2114              		.cfi_offset 3, -24
 2115              		.cfi_offset 4, -20
 2116              		.cfi_offset 5, -16
 2117              		.cfi_offset 6, -12
 2118              		.cfi_offset 7, -8
 2119              		.cfi_offset 14, -4
1350:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2120              		.loc 1 1350 0
 2121 0002 90F8A040 		ldrb	r4, [r0, #160]	@ zero_extendqisi2
 2122 0006 012C     		cmp	r4, #1
 2123 0008 20D0     		beq	.L129
 2124 000a 0446     		mov	r4, r0
1350:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2125              		.loc 1 1350 0 is_stmt 0 discriminator 2
 2126 000c 0126     		movs	r6, #1
 2127 000e 80F8A060 		strb	r6, [r0, #160]
1353:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2128              		.loc 1 1353 0 is_stmt 1 discriminator 2
 2129 0012 0220     		movs	r0, #2
 2130              	.LVL176:
 2131 0014 84F8A100 		strb	r0, [r4, #161]
1356:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2132              		.loc 1 1356 0 discriminator 2
 2133 0018 3420     		movs	r0, #52
 2134 001a 00FB03F0 		mul	r0, r0, r3
 2135 001e 00F1380E 		add	lr, r0, #56
 2136              	.LVL177:
1366:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 2137              		.loc 1 1366 0 discriminator 2
 2138 0022 2044     		add	r0, r0, r4
 2139 0024 8163     		str	r1, [r0, #56]
1367:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2140              		.loc 1 1367 0 discriminator 2
 2141 0026 076E     		ldr	r7, [r0, #96]
 2142 0028 3944     		add	r1, r1, r7
 2143              	.LVL178:
 2144 002a C163     		str	r1, [r0, #60]
1370:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 2145              		.loc 1 1370 0 discriminator 2
 2146 002c 0264     		str	r2, [r0, #64]
1371:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 77


 2147              		.loc 1 1371 0 discriminator 2
 2148 002e 456E     		ldr	r5, [r0, #100]
 2149 0030 1544     		add	r5, r5, r2
 2150 0032 4564     		str	r5, [r0, #68]
1374:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2151              		.loc 1 1374 0 discriminator 2
 2152 0034 1A46     		mov	r2, r3
 2153              	.LVL179:
 2154 0036 04EB0E01 		add	r1, r4, lr
 2155              	.LVL180:
 2156 003a 2046     		mov	r0, r4
 2157              	.LVL181:
 2158 003c FFF7FEFF 		bl	LTDC_SetConfig
 2159              	.LVL182:
1379:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2160              		.loc 1 1379 0 discriminator 2
 2161 0040 84F8A160 		strb	r6, [r4, #161]
1382:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2162              		.loc 1 1382 0 discriminator 2
 2163 0044 0020     		movs	r0, #0
 2164 0046 84F8A000 		strb	r0, [r4, #160]
1384:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2165              		.loc 1 1384 0 discriminator 2
 2166 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2167              	.LVL183:
 2168              	.L129:
1350:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2169              		.loc 1 1350 0
 2170 004c 0220     		movs	r0, #2
 2171              	.LVL184:
1385:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2172              		.loc 1 1385 0
 2173 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2174              		.cfi_endproc
 2175              	.LFE163:
 2177              		.section	.text.HAL_LTDC_SetPixelFormat_NoReload,"ax",%progbits
 2178              		.align	2
 2179              		.global	HAL_LTDC_SetPixelFormat_NoReload
 2180              		.thumb
 2181              		.thumb_func
 2183              	HAL_LTDC_SetPixelFormat_NoReload:
 2184              	.LFB164:
1399:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 2185              		.loc 1 1399 0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 0
 2188              		@ frame_needed = 0, uses_anonymous_args = 0
 2189              	.LVL185:
 2190 0000 38B5     		push	{r3, r4, r5, lr}
 2191              	.LCFI33:
 2192              		.cfi_def_cfa_offset 16
 2193              		.cfi_offset 3, -16
 2194              		.cfi_offset 4, -12
 2195              		.cfi_offset 5, -8
 2196              		.cfi_offset 14, -4
1403:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2197              		.loc 1 1403 0
ARM GAS  /tmp/ccObssGX.s 			page 78


 2198 0002 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 2199 0006 012B     		cmp	r3, #1
 2200 0008 17D0     		beq	.L133
 2201 000a 0446     		mov	r4, r0
1403:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2202              		.loc 1 1403 0 is_stmt 0 discriminator 2
 2203 000c 0125     		movs	r5, #1
 2204 000e 80F8A050 		strb	r5, [r0, #160]
1406:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2205              		.loc 1 1406 0 is_stmt 1 discriminator 2
 2206 0012 0223     		movs	r3, #2
 2207 0014 80F8A130 		strb	r3, [r0, #161]
1413:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2208              		.loc 1 1413 0 discriminator 2
 2209 0018 3423     		movs	r3, #52
 2210 001a 03FB02F3 		mul	r3, r3, r2
 2211 001e 03F13800 		add	r0, r3, #56
 2212              	.LVL186:
1416:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2213              		.loc 1 1416 0 discriminator 2
 2214 0022 2344     		add	r3, r3, r4
 2215 0024 9964     		str	r1, [r3, #72]
1419:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2216              		.loc 1 1419 0 discriminator 2
 2217 0026 2118     		adds	r1, r4, r0
 2218              	.LVL187:
 2219 0028 2046     		mov	r0, r4
 2220 002a FFF7FEFF 		bl	LTDC_SetConfig
 2221              	.LVL188:
1424:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2222              		.loc 1 1424 0 discriminator 2
 2223 002e 84F8A150 		strb	r5, [r4, #161]
1427:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2224              		.loc 1 1427 0 discriminator 2
 2225 0032 0020     		movs	r0, #0
 2226 0034 84F8A000 		strb	r0, [r4, #160]
1429:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2227              		.loc 1 1429 0 discriminator 2
 2228 0038 38BD     		pop	{r3, r4, r5, pc}
 2229              	.LVL189:
 2230              	.L133:
1403:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2231              		.loc 1 1403 0
 2232 003a 0220     		movs	r0, #2
 2233              	.LVL190:
1430:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2234              		.loc 1 1430 0
 2235 003c 38BD     		pop	{r3, r4, r5, pc}
 2236              		.cfi_endproc
 2237              	.LFE164:
 2239 003e 00BF     		.section	.text.HAL_LTDC_SetAlpha_NoReload,"ax",%progbits
 2240              		.align	2
 2241              		.global	HAL_LTDC_SetAlpha_NoReload
 2242              		.thumb
 2243              		.thumb_func
 2245              	HAL_LTDC_SetAlpha_NoReload:
 2246              	.LFB165:
ARM GAS  /tmp/ccObssGX.s 			page 79


1444:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 2247              		.loc 1 1444 0
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 0
 2250              		@ frame_needed = 0, uses_anonymous_args = 0
 2251              	.LVL191:
 2252 0000 38B5     		push	{r3, r4, r5, lr}
 2253              	.LCFI34:
 2254              		.cfi_def_cfa_offset 16
 2255              		.cfi_offset 3, -16
 2256              		.cfi_offset 4, -12
 2257              		.cfi_offset 5, -8
 2258              		.cfi_offset 14, -4
1448:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2259              		.loc 1 1448 0
 2260 0002 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 2261 0006 012B     		cmp	r3, #1
 2262 0008 17D0     		beq	.L137
 2263 000a 0446     		mov	r4, r0
1448:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2264              		.loc 1 1448 0 is_stmt 0 discriminator 2
 2265 000c 0125     		movs	r5, #1
 2266 000e 80F8A050 		strb	r5, [r0, #160]
1451:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2267              		.loc 1 1451 0 is_stmt 1 discriminator 2
 2268 0012 0223     		movs	r3, #2
 2269 0014 80F8A130 		strb	r3, [r0, #161]
1458:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2270              		.loc 1 1458 0 discriminator 2
 2271 0018 3423     		movs	r3, #52
 2272 001a 03FB02F3 		mul	r3, r3, r2
 2273 001e 03F13800 		add	r0, r3, #56
 2274              	.LVL192:
1461:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2275              		.loc 1 1461 0 discriminator 2
 2276 0022 2344     		add	r3, r3, r4
 2277 0024 D964     		str	r1, [r3, #76]
1464:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2278              		.loc 1 1464 0 discriminator 2
 2279 0026 2118     		adds	r1, r4, r0
 2280              	.LVL193:
 2281 0028 2046     		mov	r0, r4
 2282 002a FFF7FEFF 		bl	LTDC_SetConfig
 2283              	.LVL194:
1469:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2284              		.loc 1 1469 0 discriminator 2
 2285 002e 84F8A150 		strb	r5, [r4, #161]
1472:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2286              		.loc 1 1472 0 discriminator 2
 2287 0032 0020     		movs	r0, #0
 2288 0034 84F8A000 		strb	r0, [r4, #160]
1474:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2289              		.loc 1 1474 0 discriminator 2
 2290 0038 38BD     		pop	{r3, r4, r5, pc}
 2291              	.LVL195:
 2292              	.L137:
1448:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
ARM GAS  /tmp/ccObssGX.s 			page 80


 2293              		.loc 1 1448 0
 2294 003a 0220     		movs	r0, #2
 2295              	.LVL196:
1475:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2296              		.loc 1 1475 0
 2297 003c 38BD     		pop	{r3, r4, r5, pc}
 2298              		.cfi_endproc
 2299              	.LFE165:
 2301 003e 00BF     		.section	.text.HAL_LTDC_SetAddress_NoReload,"ax",%progbits
 2302              		.align	2
 2303              		.global	HAL_LTDC_SetAddress_NoReload
 2304              		.thumb
 2305              		.thumb_func
 2307              	HAL_LTDC_SetAddress_NoReload:
 2308              	.LFB166:
1489:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LayerCfgTypeDef *pLayerCfg;
 2309              		.loc 1 1489 0
 2310              		.cfi_startproc
 2311              		@ args = 0, pretend = 0, frame = 0
 2312              		@ frame_needed = 0, uses_anonymous_args = 0
 2313              	.LVL197:
 2314 0000 38B5     		push	{r3, r4, r5, lr}
 2315              	.LCFI35:
 2316              		.cfi_def_cfa_offset 16
 2317              		.cfi_offset 3, -16
 2318              		.cfi_offset 4, -12
 2319              		.cfi_offset 5, -8
 2320              		.cfi_offset 14, -4
1493:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2321              		.loc 1 1493 0
 2322 0002 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 2323 0006 012B     		cmp	r3, #1
 2324 0008 17D0     		beq	.L141
 2325 000a 0446     		mov	r4, r0
1493:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2326              		.loc 1 1493 0 is_stmt 0 discriminator 2
 2327 000c 0125     		movs	r5, #1
 2328 000e 80F8A050 		strb	r5, [r0, #160]
1496:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2329              		.loc 1 1496 0 is_stmt 1 discriminator 2
 2330 0012 0223     		movs	r3, #2
 2331 0014 80F8A130 		strb	r3, [r0, #161]
1502:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2332              		.loc 1 1502 0 discriminator 2
 2333 0018 3423     		movs	r3, #52
 2334 001a 03FB02F3 		mul	r3, r3, r2
 2335 001e 03F13800 		add	r0, r3, #56
 2336              	.LVL198:
1505:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2337              		.loc 1 1505 0 discriminator 2
 2338 0022 2344     		add	r3, r3, r4
 2339 0024 D965     		str	r1, [r3, #92]
1508:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2340              		.loc 1 1508 0 discriminator 2
 2341 0026 2118     		adds	r1, r4, r0
 2342              	.LVL199:
 2343 0028 2046     		mov	r0, r4
ARM GAS  /tmp/ccObssGX.s 			page 81


 2344 002a FFF7FEFF 		bl	LTDC_SetConfig
 2345              	.LVL200:
1513:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2346              		.loc 1 1513 0 discriminator 2
 2347 002e 84F8A150 		strb	r5, [r4, #161]
1516:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2348              		.loc 1 1516 0 discriminator 2
 2349 0032 0020     		movs	r0, #0
 2350 0034 84F8A000 		strb	r0, [r4, #160]
1518:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2351              		.loc 1 1518 0 discriminator 2
 2352 0038 38BD     		pop	{r3, r4, r5, pc}
 2353              	.LVL201:
 2354              	.L141:
1493:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2355              		.loc 1 1493 0
 2356 003a 0220     		movs	r0, #2
 2357              	.LVL202:
1519:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2358              		.loc 1 1519 0
 2359 003c 38BD     		pop	{r3, r4, r5, pc}
 2360              		.cfi_endproc
 2361              	.LFE166:
 2363 003e 00BF     		.section	.text.HAL_LTDC_SetPitch_NoReload,"ax",%progbits
 2364              		.align	2
 2365              		.global	HAL_LTDC_SetPitch_NoReload
 2366              		.thumb
 2367              		.thumb_func
 2369              	HAL_LTDC_SetPitch_NoReload:
 2370              	.LFB167:
1536:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0;
 2371              		.loc 1 1536 0
 2372              		.cfi_startproc
 2373              		@ args = 0, pretend = 0, frame = 0
 2374              		@ frame_needed = 0, uses_anonymous_args = 0
 2375              		@ link register save eliminated.
 2376              	.LVL203:
1542:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 2377              		.loc 1 1542 0
 2378 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 2379 0004 012B     		cmp	r3, #1
 2380 0006 3CD0     		beq	.L147
1536:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   uint32_t tmp = 0;
 2381              		.loc 1 1536 0 discriminator 2
 2382 0008 30B4     		push	{r4, r5}
 2383              	.LCFI36:
 2384              		.cfi_def_cfa_offset 8
 2385              		.cfi_offset 4, -8
 2386              		.cfi_offset 5, -4
1542:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 2387              		.loc 1 1542 0 discriminator 2
 2388 000a 0123     		movs	r3, #1
 2389 000c 80F8A030 		strb	r3, [r0, #160]
1545:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 2390              		.loc 1 1545 0 discriminator 2
 2391 0010 0223     		movs	r3, #2
 2392 0012 80F8A130 		strb	r3, [r0, #161]
ARM GAS  /tmp/ccObssGX.s 			page 82


1551:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 2393              		.loc 1 1551 0 discriminator 2
 2394 0016 3423     		movs	r3, #52
 2395 0018 03FB0203 		mla	r3, r3, r2, r0
 2396 001c 9B6C     		ldr	r3, [r3, #72]
 2397              	.LVL204:
1553:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 2398              		.loc 1 1553 0 discriminator 2
 2399 001e 73B1     		cbz	r3, .L148
1557:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 2400              		.loc 1 1557 0
 2401 0020 012B     		cmp	r3, #1
 2402 0022 0ED0     		beq	.L149
1561:HALLIB/Src/stm32f7xx_hal_ltdc.c ****           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 2403              		.loc 1 1561 0
 2404 0024 022B     		cmp	r3, #2
 2405 0026 18BF     		it	ne
 2406 0028 042B     		cmpne	r3, #4
 2407 002a 0CD0     		beq	.L150
1564:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   {
 2408              		.loc 1 1564 0
 2409 002c 072B     		cmp	r3, #7
 2410 002e 14BF     		ite	ne
 2411 0030 0024     		movne	r4, #0
 2412 0032 0124     		moveq	r4, #1
1563:HALLIB/Src/stm32f7xx_hal_ltdc.c ****          (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
 2413              		.loc 1 1563 0
 2414 0034 032B     		cmp	r3, #3
 2415 0036 00D0     		beq	.L152
 2416 0038 3CB1     		cbz	r4, .L151
 2417              	.L152:
1566:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 2418              		.loc 1 1566 0
 2419 003a 0223     		movs	r3, #2
 2420              	.LVL205:
 2421 003c 06E0     		b	.L145
 2422              	.LVL206:
 2423              	.L148:
1555:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 2424              		.loc 1 1555 0
 2425 003e 0423     		movs	r3, #4
 2426              	.LVL207:
 2427 0040 04E0     		b	.L145
 2428              	.LVL208:
 2429              	.L149:
1559:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 2430              		.loc 1 1559 0
 2431 0042 0323     		movs	r3, #3
 2432              	.LVL209:
 2433 0044 02E0     		b	.L145
 2434              	.LVL210:
 2435              	.L150:
1566:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 2436              		.loc 1 1566 0
 2437 0046 0223     		movs	r3, #2
 2438              	.LVL211:
 2439 0048 00E0     		b	.L145
ARM GAS  /tmp/ccObssGX.s 			page 83


 2440              	.LVL212:
 2441              	.L151:
1570:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   }
 2442              		.loc 1 1570 0
 2443 004a 0123     		movs	r3, #1
 2444              	.LVL213:
 2445              	.L145:
1573:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 2446              		.loc 1 1573 0
 2447 004c 01FB03F1 		mul	r1, r1, r3
 2448              	.LVL214:
1576:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 2449              		.loc 1 1576 0
 2450 0050 0368     		ldr	r3, [r0]
 2451              	.LVL215:
 2452 0052 D201     		lsls	r2, r2, #7
 2453              	.LVL216:
 2454 0054 1344     		add	r3, r3, r2
 2455 0056 D3F8B050 		ldr	r5, [r3, #176]
 2456 005a 0C4C     		ldr	r4, .L155
 2457 005c 2C40     		ands	r4, r4, r5
 2458 005e C3F8B040 		str	r4, [r3, #176]
 2459              	.LVL217:
1579:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 2460              		.loc 1 1579 0
 2461 0062 0368     		ldr	r3, [r0]
 2462 0064 1A44     		add	r2, r2, r3
 2463 0066 D2F8B030 		ldr	r3, [r2, #176]
 2464 006a 43EA0141 		orr	r1, r3, r1, lsl #16
 2465              	.LVL218:
 2466 006e C2F8B010 		str	r1, [r2, #176]
1584:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 2467              		.loc 1 1584 0
 2468 0072 0123     		movs	r3, #1
 2469 0074 80F8A130 		strb	r3, [r0, #161]
1587:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 2470              		.loc 1 1587 0
 2471 0078 0023     		movs	r3, #0
 2472 007a 80F8A030 		strb	r3, [r0, #160]
1589:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2473              		.loc 1 1589 0
 2474 007e 1846     		mov	r0, r3
 2475              	.LVL219:
 2476 0080 01E0     		b	.L144
 2477              	.LVL220:
 2478              	.L147:
 2479              	.LCFI37:
 2480              		.cfi_def_cfa_offset 0
 2481              		.cfi_restore 4
 2482              		.cfi_restore 5
1542:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   
 2483              		.loc 1 1542 0
 2484 0082 0220     		movs	r0, #2
 2485              	.LVL221:
 2486 0084 7047     		bx	lr
 2487              	.LVL222:
 2488              	.L144:
ARM GAS  /tmp/ccObssGX.s 			page 84


 2489              	.LCFI38:
 2490              		.cfi_def_cfa_offset 8
 2491              		.cfi_offset 4, -8
 2492              		.cfi_offset 5, -4
1590:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2493              		.loc 1 1590 0
 2494 0086 30BC     		pop	{r4, r5}
 2495              	.LCFI39:
 2496              		.cfi_restore 5
 2497              		.cfi_restore 4
 2498              		.cfi_def_cfa_offset 0
 2499 0088 7047     		bx	lr
 2500              	.L156:
 2501 008a 00BF     		.align	2
 2502              	.L155:
 2503 008c FFFF00E0 		.word	-536805377
 2504              		.cfi_endproc
 2505              	.LFE167:
 2507              		.section	.text.HAL_LTDC_ConfigColorKeying_NoReload,"ax",%progbits
 2508              		.align	2
 2509              		.global	HAL_LTDC_ConfigColorKeying_NoReload
 2510              		.thumb
 2511              		.thumb_func
 2513              	HAL_LTDC_ConfigColorKeying_NoReload:
 2514              	.LFB168:
1605:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 2515              		.loc 1 1605 0
 2516              		.cfi_startproc
 2517              		@ args = 0, pretend = 0, frame = 0
 2518              		@ frame_needed = 0, uses_anonymous_args = 0
 2519              		@ link register save eliminated.
 2520              	.LVL223:
1607:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2521              		.loc 1 1607 0
 2522 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 2523 0004 012B     		cmp	r3, #1
 2524 0006 1AD0     		beq	.L159
1605:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 2525              		.loc 1 1605 0 discriminator 2
 2526 0008 30B4     		push	{r4, r5}
 2527              	.LCFI40:
 2528              		.cfi_def_cfa_offset 8
 2529              		.cfi_offset 4, -8
 2530              		.cfi_offset 5, -4
1607:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2531              		.loc 1 1607 0 discriminator 2
 2532 000a 0125     		movs	r5, #1
 2533 000c 80F8A050 		strb	r5, [r0, #160]
1610:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2534              		.loc 1 1610 0 discriminator 2
 2535 0010 0223     		movs	r3, #2
 2536 0012 80F8A130 		strb	r3, [r0, #161]
1616:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 2537              		.loc 1 1616 0 discriminator 2
 2538 0016 0368     		ldr	r3, [r0]
 2539 0018 D201     		lsls	r2, r2, #7
 2540              	.LVL224:
ARM GAS  /tmp/ccObssGX.s 			page 85


 2541 001a 1344     		add	r3, r3, r2
 2542 001c D3F89040 		ldr	r4, [r3, #144]
 2543 0020 04F07F44 		and	r4, r4, #-16777216
 2544 0024 C3F89040 		str	r4, [r3, #144]
1617:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2545              		.loc 1 1617 0 discriminator 2
 2546 0028 0368     		ldr	r3, [r0]
 2547 002a 1344     		add	r3, r3, r2
 2548 002c C3F89010 		str	r1, [r3, #144]
1622:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2549              		.loc 1 1622 0 discriminator 2
 2550 0030 80F8A150 		strb	r5, [r0, #161]
1625:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2551              		.loc 1 1625 0 discriminator 2
 2552 0034 0023     		movs	r3, #0
 2553 0036 80F8A030 		strb	r3, [r0, #160]
1627:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2554              		.loc 1 1627 0 discriminator 2
 2555 003a 1846     		mov	r0, r3
 2556              	.LVL225:
 2557 003c 01E0     		b	.L158
 2558              	.LVL226:
 2559              	.L159:
 2560              	.LCFI41:
 2561              		.cfi_def_cfa_offset 0
 2562              		.cfi_restore 4
 2563              		.cfi_restore 5
1607:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2564              		.loc 1 1607 0
 2565 003e 0220     		movs	r0, #2
 2566              	.LVL227:
 2567 0040 7047     		bx	lr
 2568              	.LVL228:
 2569              	.L158:
 2570              	.LCFI42:
 2571              		.cfi_def_cfa_offset 8
 2572              		.cfi_offset 4, -8
 2573              		.cfi_offset 5, -4
1628:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2574              		.loc 1 1628 0
 2575 0042 30BC     		pop	{r4, r5}
 2576              	.LCFI43:
 2577              		.cfi_restore 5
 2578              		.cfi_restore 4
 2579              		.cfi_def_cfa_offset 0
 2580 0044 7047     		bx	lr
 2581              		.cfi_endproc
 2582              	.LFE168:
 2584 0046 00BF     		.section	.text.HAL_LTDC_EnableColorKeying_NoReload,"ax",%progbits
 2585              		.align	2
 2586              		.global	HAL_LTDC_EnableColorKeying_NoReload
 2587              		.thumb
 2588              		.thumb_func
 2590              	HAL_LTDC_EnableColorKeying_NoReload:
 2591              	.LFB169:
1641:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
 2592              		.loc 1 1641 0
ARM GAS  /tmp/ccObssGX.s 			page 86


 2593              		.cfi_startproc
 2594              		@ args = 0, pretend = 0, frame = 0
 2595              		@ frame_needed = 0, uses_anonymous_args = 0
 2596              		@ link register save eliminated.
 2597              	.LVL229:
1643:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2598              		.loc 1 1643 0
 2599 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 2600 0004 012B     		cmp	r3, #1
 2601 0006 15D0     		beq	.L164
1643:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2602              		.loc 1 1643 0 is_stmt 0 discriminator 2
 2603 0008 0122     		movs	r2, #1
 2604 000a 80F8A020 		strb	r2, [r0, #160]
1646:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2605              		.loc 1 1646 0 is_stmt 1 discriminator 2
 2606 000e 0223     		movs	r3, #2
 2607 0010 80F8A130 		strb	r3, [r0, #161]
1652:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2608              		.loc 1 1652 0 discriminator 2
 2609 0014 0368     		ldr	r3, [r0]
 2610 0016 03EBC111 		add	r1, r3, r1, lsl #7
 2611              	.LVL230:
 2612 001a D1F88430 		ldr	r3, [r1, #132]
 2613 001e 43F00203 		orr	r3, r3, #2
 2614 0022 C1F88430 		str	r3, [r1, #132]
1657:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2615              		.loc 1 1657 0 discriminator 2
 2616 0026 80F8A120 		strb	r2, [r0, #161]
1660:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2617              		.loc 1 1660 0 discriminator 2
 2618 002a 0023     		movs	r3, #0
 2619 002c 80F8A030 		strb	r3, [r0, #160]
1662:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2620              		.loc 1 1662 0 discriminator 2
 2621 0030 1846     		mov	r0, r3
 2622              	.LVL231:
 2623 0032 7047     		bx	lr
 2624              	.LVL232:
 2625              	.L164:
1643:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2626              		.loc 1 1643 0
 2627 0034 0220     		movs	r0, #2
 2628              	.LVL233:
1663:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2629              		.loc 1 1663 0
 2630 0036 7047     		bx	lr
 2631              		.cfi_endproc
 2632              	.LFE169:
 2634              		.section	.text.HAL_LTDC_DisableColorKeying_NoReload,"ax",%progbits
 2635              		.align	2
 2636              		.global	HAL_LTDC_DisableColorKeying_NoReload
 2637              		.thumb
 2638              		.thumb_func
 2640              	HAL_LTDC_DisableColorKeying_NoReload:
 2641              	.LFB170:
1676:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   /* Process locked */
ARM GAS  /tmp/ccObssGX.s 			page 87


 2642              		.loc 1 1676 0
 2643              		.cfi_startproc
 2644              		@ args = 0, pretend = 0, frame = 0
 2645              		@ frame_needed = 0, uses_anonymous_args = 0
 2646              		@ link register save eliminated.
 2647              	.LVL234:
1678:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2648              		.loc 1 1678 0
 2649 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 2650 0004 012B     		cmp	r3, #1
 2651 0006 15D0     		beq	.L167
1678:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2652              		.loc 1 1678 0 is_stmt 0 discriminator 2
 2653 0008 0122     		movs	r2, #1
 2654 000a 80F8A020 		strb	r2, [r0, #160]
1681:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2655              		.loc 1 1681 0 is_stmt 1 discriminator 2
 2656 000e 0223     		movs	r3, #2
 2657 0010 80F8A130 		strb	r3, [r0, #161]
1687:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2658              		.loc 1 1687 0 discriminator 2
 2659 0014 0368     		ldr	r3, [r0]
 2660 0016 03EBC111 		add	r1, r3, r1, lsl #7
 2661              	.LVL235:
 2662 001a D1F88430 		ldr	r3, [r1, #132]
 2663 001e 23F00203 		bic	r3, r3, #2
 2664 0022 C1F88430 		str	r3, [r1, #132]
1692:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2665              		.loc 1 1692 0 discriminator 2
 2666 0026 80F8A120 		strb	r2, [r0, #161]
1695:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2667              		.loc 1 1695 0 discriminator 2
 2668 002a 0023     		movs	r3, #0
 2669 002c 80F8A030 		strb	r3, [r0, #160]
1697:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2670              		.loc 1 1697 0 discriminator 2
 2671 0030 1846     		mov	r0, r3
 2672              	.LVL236:
 2673 0032 7047     		bx	lr
 2674              	.LVL237:
 2675              	.L167:
1678:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2676              		.loc 1 1678 0
 2677 0034 0220     		movs	r0, #2
 2678              	.LVL238:
1698:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2679              		.loc 1 1698 0
 2680 0036 7047     		bx	lr
 2681              		.cfi_endproc
 2682              	.LFE170:
 2684              		.section	.text.HAL_LTDC_EnableCLUT_NoReload,"ax",%progbits
 2685              		.align	2
 2686              		.global	HAL_LTDC_EnableCLUT_NoReload
 2687              		.thumb
 2688              		.thumb_func
 2690              	HAL_LTDC_EnableCLUT_NoReload:
 2691              	.LFB171:
ARM GAS  /tmp/ccObssGX.s 			page 88


1711:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2692              		.loc 1 1711 0
 2693              		.cfi_startproc
 2694              		@ args = 0, pretend = 0, frame = 0
 2695              		@ frame_needed = 0, uses_anonymous_args = 0
 2696              		@ link register save eliminated.
 2697              	.LVL239:
1714:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2698              		.loc 1 1714 0
 2699 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 2700 0004 012B     		cmp	r3, #1
 2701 0006 15D0     		beq	.L170
1714:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2702              		.loc 1 1714 0 is_stmt 0 discriminator 2
 2703 0008 0122     		movs	r2, #1
 2704 000a 80F8A020 		strb	r2, [r0, #160]
1717:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2705              		.loc 1 1717 0 is_stmt 1 discriminator 2
 2706 000e 0223     		movs	r3, #2
 2707 0010 80F8A130 		strb	r3, [r0, #161]
1723:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2708              		.loc 1 1723 0 discriminator 2
 2709 0014 0368     		ldr	r3, [r0]
 2710 0016 03EBC111 		add	r1, r3, r1, lsl #7
 2711              	.LVL240:
 2712 001a D1F88430 		ldr	r3, [r1, #132]
 2713 001e 43F01003 		orr	r3, r3, #16
 2714 0022 C1F88430 		str	r3, [r1, #132]
1728:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2715              		.loc 1 1728 0 discriminator 2
 2716 0026 80F8A120 		strb	r2, [r0, #161]
1731:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2717              		.loc 1 1731 0 discriminator 2
 2718 002a 0023     		movs	r3, #0
 2719 002c 80F8A030 		strb	r3, [r0, #160]
1733:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2720              		.loc 1 1733 0 discriminator 2
 2721 0030 1846     		mov	r0, r3
 2722              	.LVL241:
 2723 0032 7047     		bx	lr
 2724              	.LVL242:
 2725              	.L170:
1714:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2726              		.loc 1 1714 0
 2727 0034 0220     		movs	r0, #2
 2728              	.LVL243:
1734:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2729              		.loc 1 1734 0
 2730 0036 7047     		bx	lr
 2731              		.cfi_endproc
 2732              	.LFE171:
 2734              		.section	.text.HAL_LTDC_DisableCLUT_NoReload,"ax",%progbits
 2735              		.align	2
 2736              		.global	HAL_LTDC_DisableCLUT_NoReload
 2737              		.thumb
 2738              		.thumb_func
 2740              	HAL_LTDC_DisableCLUT_NoReload:
ARM GAS  /tmp/ccObssGX.s 			page 89


 2741              	.LFB172:
1747:HALLIB/Src/stm32f7xx_hal_ltdc.c ****  
 2742              		.loc 1 1747 0
 2743              		.cfi_startproc
 2744              		@ args = 0, pretend = 0, frame = 0
 2745              		@ frame_needed = 0, uses_anonymous_args = 0
 2746              		@ link register save eliminated.
 2747              	.LVL244:
1750:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2748              		.loc 1 1750 0
 2749 0000 90F8A030 		ldrb	r3, [r0, #160]	@ zero_extendqisi2
 2750 0004 012B     		cmp	r3, #1
 2751 0006 15D0     		beq	.L173
1750:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2752              		.loc 1 1750 0 is_stmt 0 discriminator 2
 2753 0008 0122     		movs	r2, #1
 2754 000a 80F8A020 		strb	r2, [r0, #160]
1753:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2755              		.loc 1 1753 0 is_stmt 1 discriminator 2
 2756 000e 0223     		movs	r3, #2
 2757 0010 80F8A130 		strb	r3, [r0, #161]
1759:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2758              		.loc 1 1759 0 discriminator 2
 2759 0014 0368     		ldr	r3, [r0]
 2760 0016 03EBC111 		add	r1, r3, r1, lsl #7
 2761              	.LVL245:
 2762 001a D1F88430 		ldr	r3, [r1, #132]
 2763 001e 23F01003 		bic	r3, r3, #16
 2764 0022 C1F88430 		str	r3, [r1, #132]
1764:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2765              		.loc 1 1764 0 discriminator 2
 2766 0026 80F8A120 		strb	r2, [r0, #161]
1767:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2767              		.loc 1 1767 0 discriminator 2
 2768 002a 0023     		movs	r3, #0
 2769 002c 80F8A030 		strb	r3, [r0, #160]
1769:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2770              		.loc 1 1769 0 discriminator 2
 2771 0030 1846     		mov	r0, r3
 2772              	.LVL246:
 2773 0032 7047     		bx	lr
 2774              	.LVL247:
 2775              	.L173:
1750:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2776              		.loc 1 1750 0
 2777 0034 0220     		movs	r0, #2
 2778              	.LVL248:
1770:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2779              		.loc 1 1770 0
 2780 0036 7047     		bx	lr
 2781              		.cfi_endproc
 2782              	.LFE172:
 2784              		.section	.text.HAL_LTDC_GetState,"ax",%progbits
 2785              		.align	2
 2786              		.global	HAL_LTDC_GetState
 2787              		.thumb
 2788              		.thumb_func
ARM GAS  /tmp/ccObssGX.s 			page 90


 2790              	HAL_LTDC_GetState:
 2791              	.LFB173:
1799:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return hltdc->State;
 2792              		.loc 1 1799 0
 2793              		.cfi_startproc
 2794              		@ args = 0, pretend = 0, frame = 0
 2795              		@ frame_needed = 0, uses_anonymous_args = 0
 2796              		@ link register save eliminated.
 2797              	.LVL249:
1800:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2798              		.loc 1 1800 0
 2799 0000 90F8A100 		ldrb	r0, [r0, #161]	@ zero_extendqisi2
 2800              	.LVL250:
1801:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2801              		.loc 1 1801 0
 2802 0004 7047     		bx	lr
 2803              		.cfi_endproc
 2804              	.LFE173:
 2806 0006 00BF     		.section	.text.HAL_LTDC_GetError,"ax",%progbits
 2807              		.align	2
 2808              		.global	HAL_LTDC_GetError
 2809              		.thumb
 2810              		.thumb_func
 2812              	HAL_LTDC_GetError:
 2813              	.LFB174:
1810:HALLIB/Src/stm32f7xx_hal_ltdc.c ****   return hltdc->ErrorCode;
 2814              		.loc 1 1810 0
 2815              		.cfi_startproc
 2816              		@ args = 0, pretend = 0, frame = 0
 2817              		@ frame_needed = 0, uses_anonymous_args = 0
 2818              		@ link register save eliminated.
 2819              	.LVL251:
1811:HALLIB/Src/stm32f7xx_hal_ltdc.c **** }
 2820              		.loc 1 1811 0
 2821 0000 D0F8A400 		ldr	r0, [r0, #164]
 2822              	.LVL252:
1812:HALLIB/Src/stm32f7xx_hal_ltdc.c **** 
 2823              		.loc 1 1812 0
 2824 0004 7047     		bx	lr
 2825              		.cfi_endproc
 2826              	.LFE174:
 2828 0006 00BF     		.text
 2829              	.Letext0:
 2830              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 2831              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 2832              		.file 4 "Inc/stm32f767xx.h"
 2833              		.file 5 "Inc/stm32f7xx.h"
 2834              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 2835              		.file 7 "HALLIB/Inc/stm32f7xx_hal_ltdc.h"
 2836              		.file 8 "CORE/core_cm7.h"
ARM GAS  /tmp/ccObssGX.s 			page 91


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_ltdc.c
     /tmp/ccObssGX.s:21     .text.LTDC_SetConfig:00000000 $t
     /tmp/ccObssGX.s:25     .text.LTDC_SetConfig:00000000 LTDC_SetConfig
     /tmp/ccObssGX.s:252    .text.LTDC_SetConfig:0000018c $d
     /tmp/ccObssGX.s:258    .text.HAL_LTDC_MspInit:00000000 $t
     /tmp/ccObssGX.s:263    .text.HAL_LTDC_MspInit:00000000 HAL_LTDC_MspInit
     /tmp/ccObssGX.s:276    .text.HAL_LTDC_Init:00000000 $t
     /tmp/ccObssGX.s:281    .text.HAL_LTDC_Init:00000000 HAL_LTDC_Init
     /tmp/ccObssGX.s:456    .text.HAL_LTDC_Init:000000fc $d
     /tmp/ccObssGX.s:461    .text.HAL_LTDC_MspDeInit:00000000 $t
     /tmp/ccObssGX.s:466    .text.HAL_LTDC_MspDeInit:00000000 HAL_LTDC_MspDeInit
     /tmp/ccObssGX.s:479    .text.HAL_LTDC_DeInit:00000000 $t
     /tmp/ccObssGX.s:484    .text.HAL_LTDC_DeInit:00000000 HAL_LTDC_DeInit
     /tmp/ccObssGX.s:514    .text.HAL_LTDC_ErrorCallback:00000000 $t
     /tmp/ccObssGX.s:519    .text.HAL_LTDC_ErrorCallback:00000000 HAL_LTDC_ErrorCallback
     /tmp/ccObssGX.s:532    .text.HAL_LTDC_LineEventCallback:00000000 $t
     /tmp/ccObssGX.s:537    .text.HAL_LTDC_LineEventCallback:00000000 HAL_LTDC_LineEventCallback
     /tmp/ccObssGX.s:550    .text.HAL_LTDC_ReloadEventCallback:00000000 $t
     /tmp/ccObssGX.s:555    .text.HAL_LTDC_ReloadEventCallback:00000000 HAL_LTDC_ReloadEventCallback
     /tmp/ccObssGX.s:568    .text.HAL_LTDC_IRQHandler:00000000 $t
     /tmp/ccObssGX.s:573    .text.HAL_LTDC_IRQHandler:00000000 HAL_LTDC_IRQHandler
     /tmp/ccObssGX.s:709    .text.HAL_LTDC_ConfigLayer:00000000 $t
     /tmp/ccObssGX.s:714    .text.HAL_LTDC_ConfigLayer:00000000 HAL_LTDC_ConfigLayer
     /tmp/ccObssGX.s:792    .text.HAL_LTDC_ConfigColorKeying:00000000 $t
     /tmp/ccObssGX.s:797    .text.HAL_LTDC_ConfigColorKeying:00000000 HAL_LTDC_ConfigColorKeying
     /tmp/ccObssGX.s:872    .text.HAL_LTDC_ConfigCLUT:00000000 $t
     /tmp/ccObssGX.s:877    .text.HAL_LTDC_ConfigCLUT:00000000 HAL_LTDC_ConfigCLUT
     /tmp/ccObssGX.s:973    .text.HAL_LTDC_EnableColorKeying:00000000 $t
     /tmp/ccObssGX.s:978    .text.HAL_LTDC_EnableColorKeying:00000000 HAL_LTDC_EnableColorKeying
     /tmp/ccObssGX.s:1026   .text.HAL_LTDC_DisableColorKeying:00000000 $t
     /tmp/ccObssGX.s:1031   .text.HAL_LTDC_DisableColorKeying:00000000 HAL_LTDC_DisableColorKeying
     /tmp/ccObssGX.s:1079   .text.HAL_LTDC_EnableCLUT:00000000 $t
     /tmp/ccObssGX.s:1084   .text.HAL_LTDC_EnableCLUT:00000000 HAL_LTDC_EnableCLUT
     /tmp/ccObssGX.s:1132   .text.HAL_LTDC_DisableCLUT:00000000 $t
     /tmp/ccObssGX.s:1137   .text.HAL_LTDC_DisableCLUT:00000000 HAL_LTDC_DisableCLUT
     /tmp/ccObssGX.s:1185   .text.HAL_LTDC_EnableDither:00000000 $t
     /tmp/ccObssGX.s:1190   .text.HAL_LTDC_EnableDither:00000000 HAL_LTDC_EnableDither
     /tmp/ccObssGX.s:1232   .text.HAL_LTDC_EnableDither:00000030 $d
     /tmp/ccObssGX.s:1237   .text.HAL_LTDC_DisableDither:00000000 $t
     /tmp/ccObssGX.s:1242   .text.HAL_LTDC_DisableDither:00000000 HAL_LTDC_DisableDither
     /tmp/ccObssGX.s:1284   .text.HAL_LTDC_DisableDither:00000030 $d
     /tmp/ccObssGX.s:1289   .text.HAL_LTDC_SetWindowSize:00000000 $t
     /tmp/ccObssGX.s:1294   .text.HAL_LTDC_SetWindowSize:00000000 HAL_LTDC_SetWindowSize
     /tmp/ccObssGX.s:1370   .text.HAL_LTDC_SetWindowPosition:00000000 $t
     /tmp/ccObssGX.s:1375   .text.HAL_LTDC_SetWindowPosition:00000000 HAL_LTDC_SetWindowPosition
     /tmp/ccObssGX.s:1452   .text.HAL_LTDC_SetPixelFormat:00000000 $t
     /tmp/ccObssGX.s:1457   .text.HAL_LTDC_SetPixelFormat:00000000 HAL_LTDC_SetPixelFormat
     /tmp/ccObssGX.s:1517   .text.HAL_LTDC_SetAlpha:00000000 $t
     /tmp/ccObssGX.s:1522   .text.HAL_LTDC_SetAlpha:00000000 HAL_LTDC_SetAlpha
     /tmp/ccObssGX.s:1582   .text.HAL_LTDC_SetAddress:00000000 $t
     /tmp/ccObssGX.s:1587   .text.HAL_LTDC_SetAddress:00000000 HAL_LTDC_SetAddress
     /tmp/ccObssGX.s:1647   .text.HAL_LTDC_SetPitch:00000000 $t
     /tmp/ccObssGX.s:1652   .text.HAL_LTDC_SetPitch:00000000 HAL_LTDC_SetPitch
     /tmp/ccObssGX.s:1795   .text.HAL_LTDC_SetPitch:0000009c $d
     /tmp/ccObssGX.s:1801   .text.HAL_LTDC_ProgramLineEvent:00000000 $t
     /tmp/ccObssGX.s:1806   .text.HAL_LTDC_ProgramLineEvent:00000000 HAL_LTDC_ProgramLineEvent
ARM GAS  /tmp/ccObssGX.s 			page 92


     /tmp/ccObssGX.s:1868   .text.HAL_LTDC_ProgramLineEvent:0000003c $d
     /tmp/ccObssGX.s:1873   .text.HAL_LTDC_Reload:00000000 $t
     /tmp/ccObssGX.s:1878   .text.HAL_LTDC_Reload:00000000 HAL_LTDC_Reload
     /tmp/ccObssGX.s:1941   .text.HAL_LTDC_ConfigLayer_NoReload:00000000 $t
     /tmp/ccObssGX.s:1946   .text.HAL_LTDC_ConfigLayer_NoReload:00000000 HAL_LTDC_ConfigLayer_NoReload
     /tmp/ccObssGX.s:2021   .text.HAL_LTDC_SetWindowSize_NoReload:00000000 $t
     /tmp/ccObssGX.s:2026   .text.HAL_LTDC_SetWindowSize_NoReload:00000000 HAL_LTDC_SetWindowSize_NoReload
     /tmp/ccObssGX.s:2099   .text.HAL_LTDC_SetWindowPosition_NoReload:00000000 $t
     /tmp/ccObssGX.s:2104   .text.HAL_LTDC_SetWindowPosition_NoReload:00000000 HAL_LTDC_SetWindowPosition_NoReload
     /tmp/ccObssGX.s:2178   .text.HAL_LTDC_SetPixelFormat_NoReload:00000000 $t
     /tmp/ccObssGX.s:2183   .text.HAL_LTDC_SetPixelFormat_NoReload:00000000 HAL_LTDC_SetPixelFormat_NoReload
     /tmp/ccObssGX.s:2240   .text.HAL_LTDC_SetAlpha_NoReload:00000000 $t
     /tmp/ccObssGX.s:2245   .text.HAL_LTDC_SetAlpha_NoReload:00000000 HAL_LTDC_SetAlpha_NoReload
     /tmp/ccObssGX.s:2302   .text.HAL_LTDC_SetAddress_NoReload:00000000 $t
     /tmp/ccObssGX.s:2307   .text.HAL_LTDC_SetAddress_NoReload:00000000 HAL_LTDC_SetAddress_NoReload
     /tmp/ccObssGX.s:2364   .text.HAL_LTDC_SetPitch_NoReload:00000000 $t
     /tmp/ccObssGX.s:2369   .text.HAL_LTDC_SetPitch_NoReload:00000000 HAL_LTDC_SetPitch_NoReload
     /tmp/ccObssGX.s:2503   .text.HAL_LTDC_SetPitch_NoReload:0000008c $d
     /tmp/ccObssGX.s:2508   .text.HAL_LTDC_ConfigColorKeying_NoReload:00000000 $t
     /tmp/ccObssGX.s:2513   .text.HAL_LTDC_ConfigColorKeying_NoReload:00000000 HAL_LTDC_ConfigColorKeying_NoReload
     /tmp/ccObssGX.s:2585   .text.HAL_LTDC_EnableColorKeying_NoReload:00000000 $t
     /tmp/ccObssGX.s:2590   .text.HAL_LTDC_EnableColorKeying_NoReload:00000000 HAL_LTDC_EnableColorKeying_NoReload
     /tmp/ccObssGX.s:2635   .text.HAL_LTDC_DisableColorKeying_NoReload:00000000 $t
     /tmp/ccObssGX.s:2640   .text.HAL_LTDC_DisableColorKeying_NoReload:00000000 HAL_LTDC_DisableColorKeying_NoReload
     /tmp/ccObssGX.s:2685   .text.HAL_LTDC_EnableCLUT_NoReload:00000000 $t
     /tmp/ccObssGX.s:2690   .text.HAL_LTDC_EnableCLUT_NoReload:00000000 HAL_LTDC_EnableCLUT_NoReload
     /tmp/ccObssGX.s:2735   .text.HAL_LTDC_DisableCLUT_NoReload:00000000 $t
     /tmp/ccObssGX.s:2740   .text.HAL_LTDC_DisableCLUT_NoReload:00000000 HAL_LTDC_DisableCLUT_NoReload
     /tmp/ccObssGX.s:2785   .text.HAL_LTDC_GetState:00000000 $t
     /tmp/ccObssGX.s:2790   .text.HAL_LTDC_GetState:00000000 HAL_LTDC_GetState
     /tmp/ccObssGX.s:2807   .text.HAL_LTDC_GetError:00000000 $t
     /tmp/ccObssGX.s:2812   .text.HAL_LTDC_GetError:00000000 HAL_LTDC_GetError
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
