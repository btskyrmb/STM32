ARM GAS  /tmp/cc7S4Kq7.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_qspi.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.QSPI_DMARxCplt,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	QSPI_DMARxCplt:
  26              	.LFB169:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_qspi.c"
   1:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_qspi.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @file    stm32f7xx_hal_qspi.c
   4:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief   QSPI HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *          functionalities of the QuadSPI interface (QSPI).
   8:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *           + Indirect functional mode management
  10:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *           + Memory-mapped functional mode management
  11:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *           + Auto-polling functional mode management
  12:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *           + Interrupts and flags management
  13:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *           + DMA channel configuration for indirect functional mode
  14:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *           + Errors management and abort functionality
  15:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *
  16:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *
  17:HALLIB/Src/stm32f7xx_hal_qspi.c ****   @verbatim
  18:HALLIB/Src/stm32f7xx_hal_qspi.c ****  ===============================================================================
  19:HALLIB/Src/stm32f7xx_hal_qspi.c ****                         ##### How to use this driver #####
  20:HALLIB/Src/stm32f7xx_hal_qspi.c ****  ===============================================================================
  21:HALLIB/Src/stm32f7xx_hal_qspi.c ****   [..]
  22:HALLIB/Src/stm32f7xx_hal_qspi.c ****     *** Initialization ***
  23:HALLIB/Src/stm32f7xx_hal_qspi.c ****     ======================
  24:HALLIB/Src/stm32f7xx_hal_qspi.c ****     [..]
  25:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) As prerequisite, fill in the HAL_QSPI_MspInit() :
  26:HALLIB/Src/stm32f7xx_hal_qspi.c ****         (++) Enable QuadSPI clock interface with __HAL_RCC_QSPI_CLK_ENABLE().
  27:HALLIB/Src/stm32f7xx_hal_qspi.c ****         (++) Reset QuadSPI IP with __HAL_RCC_QSPI_FORCE_RESET() and __HAL_RCC_QSPI_RELEASE_RESET().
  28:HALLIB/Src/stm32f7xx_hal_qspi.c ****         (++) Enable the clocks for the QuadSPI GPIOS with __HAL_RCC_GPIOx_CLK_ENABLE().
  29:HALLIB/Src/stm32f7xx_hal_qspi.c ****         (++) Configure these QuadSPI pins in alternate mode using HAL_GPIO_Init().
  30:HALLIB/Src/stm32f7xx_hal_qspi.c ****         (++) If interrupt mode is used, enable and configure QuadSPI global
  31:HALLIB/Src/stm32f7xx_hal_qspi.c ****             interrupt with HAL_NVIC_SetPriority() and HAL_NVIC_EnableIRQ().
ARM GAS  /tmp/cc7S4Kq7.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_qspi.c ****         (++) If DMA mode is used, enable the clocks for the QuadSPI DMA channel 
  33:HALLIB/Src/stm32f7xx_hal_qspi.c ****             with __HAL_RCC_DMAx_CLK_ENABLE(), configure DMA with HAL_DMA_Init(), 
  34:HALLIB/Src/stm32f7xx_hal_qspi.c ****             link it with QuadSPI handle using __HAL_LINKDMA(), enable and configure 
  35:HALLIB/Src/stm32f7xx_hal_qspi.c ****             DMA channel global interrupt with HAL_NVIC_SetPriority() and HAL_NVIC_EnableIRQ().
  36:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) Configure the flash size, the clock prescaler, the fifo threshold, the
  37:HALLIB/Src/stm32f7xx_hal_qspi.c ****           clock mode, the sample shifting and the CS high time using the HAL_QSPI_Init() function.
  38:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
  39:HALLIB/Src/stm32f7xx_hal_qspi.c ****     *** Indirect functional mode ***
  40:HALLIB/Src/stm32f7xx_hal_qspi.c ****     ================================
  41:HALLIB/Src/stm32f7xx_hal_qspi.c ****     [..]
  42:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) Configure the command sequence using the HAL_QSPI_Command() or HAL_QSPI_Command_IT() 
  43:HALLIB/Src/stm32f7xx_hal_qspi.c ****           functions :
  44:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Instruction phase : the mode used and if present the instruction opcode.
  45:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Address phase : the mode used and if present the size and the address value.
  46:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Alternate-bytes phase : the mode used and if present the size and the alternate 
  47:HALLIB/Src/stm32f7xx_hal_qspi.c ****              bytes values.
  48:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Dummy-cycles phase : the number of dummy cycles (mode used is same as data phase).
  49:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Data phase : the mode used and if present the number of bytes.
  50:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Double Data Rate (DDR) mode : the activation (or not) of this mode and the delay 
  51:HALLIB/Src/stm32f7xx_hal_qspi.c ****              if activated.
  52:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Sending Instruction Only Once (SIOO) mode : the activation (or not) of this mode.
  53:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) If no data is required for the command, it is sent directly to the memory :
  54:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In polling mode, the output of the function is done when the transfer is complete.
  55:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In interrupt mode, HAL_QSPI_CmdCpltCallback() will be called when the transfer is com
  56:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) For the indirect write mode, use HAL_QSPI_Transmit(), HAL_QSPI_Transmit_DMA() or 
  57:HALLIB/Src/stm32f7xx_hal_qspi.c ****           HAL_QSPI_Transmit_IT() after the command configuration :
  58:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In polling mode, the output of the function is done when the transfer is complete.
  59:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In interrupt mode, HAL_QSPI_FifoThresholdCallback() will be called when the fifo thre
  60:HALLIB/Src/stm32f7xx_hal_qspi.c ****              is reached and HAL_QSPI_TxCpltCallback() will be called when the transfer is complete.
  61:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In DMA mode, HAL_QSPI_TxHalfCpltCallback() will be called at the half transfer and 
  62:HALLIB/Src/stm32f7xx_hal_qspi.c ****              HAL_QSPI_TxCpltCallback() will be called when the transfer is complete.
  63:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) For the indirect read mode, use HAL_QSPI_Receive(), HAL_QSPI_Receive_DMA() or 
  64:HALLIB/Src/stm32f7xx_hal_qspi.c ****           HAL_QSPI_Receive_IT() after the command configuration :
  65:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In polling mode, the output of the function is done when the transfer is complete.
  66:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In interrupt mode, HAL_QSPI_FifoThresholdCallback() will be called when the fifo thre
  67:HALLIB/Src/stm32f7xx_hal_qspi.c ****              is reached and HAL_QSPI_RxCpltCallback() will be called when the transfer is complete.
  68:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In DMA mode, HAL_QSPI_RxHalfCpltCallback() will be called at the half transfer and 
  69:HALLIB/Src/stm32f7xx_hal_qspi.c ****              HAL_QSPI_RxCpltCallback() will be called when the transfer is complete.
  70:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
  71:HALLIB/Src/stm32f7xx_hal_qspi.c ****     *** Auto-polling functional mode ***
  72:HALLIB/Src/stm32f7xx_hal_qspi.c ****     ====================================
  73:HALLIB/Src/stm32f7xx_hal_qspi.c ****     [..]
  74:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) Configure the command sequence and the auto-polling functional mode using the 
  75:HALLIB/Src/stm32f7xx_hal_qspi.c ****           HAL_QSPI_AutoPolling() or HAL_QSPI_AutoPolling_IT() functions :
  76:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Instruction phase : the mode used and if present the instruction opcode.
  77:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Address phase : the mode used and if present the size and the address value.
  78:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Alternate-bytes phase : the mode used and if present the size and the alternate 
  79:HALLIB/Src/stm32f7xx_hal_qspi.c ****              bytes values.
  80:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Dummy-cycles phase : the number of dummy cycles (mode used is same as data phase).
  81:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Data phase : the mode used.
  82:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Double Data Rate (DDR) mode : the activation (or not) of this mode and the delay 
  83:HALLIB/Src/stm32f7xx_hal_qspi.c ****              if activated.
  84:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Sending Instruction Only Once (SIOO) mode : the activation (or not) of this mode.
  85:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) The size of the status bytes, the match value, the mask used, the match mode (OR/AND)
  86:HALLIB/Src/stm32f7xx_hal_qspi.c ****              the polling interval and the automatic stop activation.
  87:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) After the configuration :
  88:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In polling mode, the output of the function is done when the status match is reached.
ARM GAS  /tmp/cc7S4Kq7.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_qspi.c ****              automatic stop is activated to avoid an infinite loop.
  90:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In interrupt mode, HAL_QSPI_StatusMatchCallback() will be called each time the status
  91:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
  92:HALLIB/Src/stm32f7xx_hal_qspi.c ****     *** Memory-mapped functional mode ***
  93:HALLIB/Src/stm32f7xx_hal_qspi.c ****     =====================================
  94:HALLIB/Src/stm32f7xx_hal_qspi.c ****     [..]
  95:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) Configure the command sequence and the memory-mapped functional mode using the 
  96:HALLIB/Src/stm32f7xx_hal_qspi.c ****           HAL_QSPI_MemoryMapped() functions :
  97:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Instruction phase : the mode used and if present the instruction opcode.
  98:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Address phase : the mode used and the size.
  99:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Alternate-bytes phase : the mode used and if present the size and the alternate 
 100:HALLIB/Src/stm32f7xx_hal_qspi.c ****              bytes values.
 101:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Dummy-cycles phase : the number of dummy cycles (mode used is same as data phase).
 102:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Data phase : the mode used.
 103:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Double Data Rate (DDR) mode : the activation (or not) of this mode and the delay 
 104:HALLIB/Src/stm32f7xx_hal_qspi.c ****              if activated.
 105:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Sending Instruction Only Once (SIOO) mode : the activation (or not) of this mode.
 106:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) The timeout activation and the timeout period.
 107:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) After the configuration, the QuadSPI will be used as soon as an access on the AHB is done
 108:HALLIB/Src/stm32f7xx_hal_qspi.c ****           the address range. HAL_QSPI_TimeOutCallback() will be called when the timeout expires.
 109:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 110:HALLIB/Src/stm32f7xx_hal_qspi.c ****     *** Errors management and abort functionality ***
 111:HALLIB/Src/stm32f7xx_hal_qspi.c ****     ==================================================
 112:HALLIB/Src/stm32f7xx_hal_qspi.c ****     [..]
 113:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) HAL_QSPI_GetError() function gives the error raised during the last operation.
 114:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) HAL_QSPI_Abort() and HAL_QSPI_AbortIT() functions aborts any on-going operation and 
 115:HALLIB/Src/stm32f7xx_hal_qspi.c ****           flushes the fifo :
 116:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In polling mode, the output of the function is done when the transfer 
 117:HALLIB/Src/stm32f7xx_hal_qspi.c ****               complete bit is set and the busy bit cleared.
 118:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) In interrupt mode, HAL_QSPI_AbortCpltCallback() will be called when 
 119:HALLIB/Src/stm32f7xx_hal_qspi.c ****               the transfer complete bi is set.
 120:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 121:HALLIB/Src/stm32f7xx_hal_qspi.c ****     *** Control functions ***
 122:HALLIB/Src/stm32f7xx_hal_qspi.c ****     =========================
 123:HALLIB/Src/stm32f7xx_hal_qspi.c ****     [..]
 124:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) HAL_QSPI_GetState() function gives the current state of the HAL QuadSPI driver.
 125:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) HAL_QSPI_SetTimeout() function configures the timeout value used in the driver.
 126:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) HAL_QSPI_SetFifoThreshold() function configures the threshold on the Fifo of the QSPI IP.
 127:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) HAL_QSPI_GetFifoThreshold() function gives the current of the Fifo's threshold 
 128:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 129:HALLIB/Src/stm32f7xx_hal_qspi.c ****     *** Workarounds linked to Silicon Limitation ***
 130:HALLIB/Src/stm32f7xx_hal_qspi.c ****     ====================================================
 131:HALLIB/Src/stm32f7xx_hal_qspi.c ****     [..]
 132:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (#) Workarounds Implemented inside HAL Driver
 133:HALLIB/Src/stm32f7xx_hal_qspi.c ****          (++) Extra data written in the FIFO at the end of a read transfer
 134:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 135:HALLIB/Src/stm32f7xx_hal_qspi.c ****   @endverbatim
 136:HALLIB/Src/stm32f7xx_hal_qspi.c ****   ******************************************************************************
 137:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @attention
 138:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *
 139:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 140:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *
 141:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * Redistribution and use in source and binary forms, with or without modification,
 142:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * are permitted provided that the following conditions are met:
 143:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 144:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *      this list of conditions and the following disclaimer.
 145:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
ARM GAS  /tmp/cc7S4Kq7.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *      this list of conditions and the following disclaimer in the documentation
 147:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *      and/or other materials provided with the distribution.
 148:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 149:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *      may be used to endorse or promote products derived from this software
 150:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *      without specific prior written permission.
 151:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *
 152:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 153:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 154:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 155:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 156:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 157:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 158:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 159:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 160:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 161:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 162:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *
 163:HALLIB/Src/stm32f7xx_hal_qspi.c ****   ******************************************************************************  
 164:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 165:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 166:HALLIB/Src/stm32f7xx_hal_qspi.c **** /* Includes ------------------------------------------------------------------*/
 167:HALLIB/Src/stm32f7xx_hal_qspi.c **** #include "stm32f7xx_hal.h"
 168:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 169:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @addtogroup STM32F7xx_HAL_Driver
 170:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @{
 171:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 172:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 173:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @defgroup QSPI QSPI
 174:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief HAL QSPI module driver
 175:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @{
 176:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 177:HALLIB/Src/stm32f7xx_hal_qspi.c **** #ifdef HAL_QSPI_MODULE_ENABLED
 178:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 179:HALLIB/Src/stm32f7xx_hal_qspi.c **** /* Private typedef -----------------------------------------------------------*/
 180:HALLIB/Src/stm32f7xx_hal_qspi.c **** /* Private define ------------------------------------------------------------*/
 181:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @addtogroup QSPI_Private_Constants 
 182:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @{
 183:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 184:HALLIB/Src/stm32f7xx_hal_qspi.c **** #define QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE ((uint32_t)0x00000000U)          /*!<Indirect write mod
 185:HALLIB/Src/stm32f7xx_hal_qspi.c **** #define QSPI_FUNCTIONAL_MODE_INDIRECT_READ  ((uint32_t)QUADSPI_CCR_FMODE_0) /*!<Indirect read mode*
 186:HALLIB/Src/stm32f7xx_hal_qspi.c **** #define QSPI_FUNCTIONAL_MODE_AUTO_POLLING   ((uint32_t)QUADSPI_CCR_FMODE_1) /*!<Automatic polling m
 187:HALLIB/Src/stm32f7xx_hal_qspi.c **** #define QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED  ((uint32_t)QUADSPI_CCR_FMODE)   /*!<Memory-mapped mode*
 188:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 189:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @}
 190:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 191:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 192:HALLIB/Src/stm32f7xx_hal_qspi.c **** /* Private macro -------------------------------------------------------------*/
 193:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @addtogroup QSPI_Private_Macros QSPI Private Macros
 194:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @{
 195:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 196:HALLIB/Src/stm32f7xx_hal_qspi.c **** #define IS_QSPI_FUNCTIONAL_MODE(MODE) (((MODE) == QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE) || \
 197:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                        ((MODE) == QSPI_FUNCTIONAL_MODE_INDIRECT_READ)  || \
 198:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                        ((MODE) == QSPI_FUNCTIONAL_MODE_AUTO_POLLING)   || \
 199:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                        ((MODE) == QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 200:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 201:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @}
 202:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
ARM GAS  /tmp/cc7S4Kq7.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          
 204:HALLIB/Src/stm32f7xx_hal_qspi.c **** /* Private variables ---------------------------------------------------------*/
 205:HALLIB/Src/stm32f7xx_hal_qspi.c **** /* Private function prototypes -----------------------------------------------*/
 206:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @addtogroup QSPI_Private_Functions QSPI Private Functions
 207:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @{
 208:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 209:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMARxCplt(DMA_HandleTypeDef *hdma);
 210:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMATxCplt(DMA_HandleTypeDef *hdma);
 211:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 212:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 213:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMAError(DMA_HandleTypeDef *hdma); 
 214:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma);
 215:HALLIB/Src/stm32f7xx_hal_qspi.c **** static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, F
 216:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMod
 217:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 218:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @}
 219:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 220:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 221:HALLIB/Src/stm32f7xx_hal_qspi.c **** /* Exported functions ---------------------------------------------------------*/
 222:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 223:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @defgroup QSPI_Exported_Functions QSPI Exported Functions
 224:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @{
 225:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 226:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 227:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @defgroup QSPI_Exported_Functions_Group1 Initialization/de-initialization functions 
 228:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *  @brief    Initialization and Configuration functions 
 229:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *
 230:HALLIB/Src/stm32f7xx_hal_qspi.c **** @verbatim    
 231:HALLIB/Src/stm32f7xx_hal_qspi.c **** ===============================================================================
 232:HALLIB/Src/stm32f7xx_hal_qspi.c ****             ##### Initialization and Configuration functions #####
 233:HALLIB/Src/stm32f7xx_hal_qspi.c ****  ===============================================================================
 234:HALLIB/Src/stm32f7xx_hal_qspi.c ****     [..]
 235:HALLIB/Src/stm32f7xx_hal_qspi.c ****     This subsection provides a set of functions allowing to :
 236:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (+) Initialize the QuadSPI.
 237:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (+) De-initialize the QuadSPI.
 238:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 239:HALLIB/Src/stm32f7xx_hal_qspi.c **** @endverbatim
 240:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @{
 241:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 242:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 243:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 244:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief Initializes the QSPI mode according to the specified parameters
 245:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *        in the QSPI_InitTypeDef and creates the associated handle.
 246:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param hqspi qspi handle
 247:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
 248:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 249:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
 250:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
 251:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 252:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
 253:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 254:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check the QSPI handle allocation */
 255:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi == NULL)
 256:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 257:HALLIB/Src/stm32f7xx_hal_qspi.c ****     return HAL_ERROR;
 258:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 259:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
ARM GAS  /tmp/cc7S4Kq7.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check the parameters */
 261:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_ALL_INSTANCE(hqspi->Instance));
 262:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_CLOCK_PRESCALER(hqspi->Init.ClockPrescaler));
 263:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_FIFO_THRESHOLD(hqspi->Init.FifoThreshold));
 264:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
 265:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
 266:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
 267:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));
 268:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DUAL_FLASH_MODE(hqspi->Init.DualFlash));
 269:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 270:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
 271:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 272:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
 273:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 274:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 275:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
 276:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
 277:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 278:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_RESET)
 279:HALLIB/Src/stm32f7xx_hal_qspi.c ****   { 
 280:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Allocate lock resource and initialize it */
 281:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->Lock = HAL_UNLOCKED;
 282:HALLIB/Src/stm32f7xx_hal_qspi.c ****      
 283:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Init the low level hardware : GPIO, CLOCK */
 284:HALLIB/Src/stm32f7xx_hal_qspi.c ****     HAL_QSPI_MspInit(hqspi);
 285:HALLIB/Src/stm32f7xx_hal_qspi.c ****              
 286:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Configure the default timeout for the QSPI memory access */
 287:HALLIB/Src/stm32f7xx_hal_qspi.c ****     HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 288:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 289:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 290:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Configure QSPI FIFO Threshold */
 291:HALLIB/Src/stm32f7xx_hal_qspi.c ****   MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 292:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 293:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Wait till BUSY flag reset */
 294:HALLIB/Src/stm32f7xx_hal_qspi.c ****   status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 295:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 296:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(status == HAL_OK)
 297:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 298:HALLIB/Src/stm32f7xx_hal_qspi.c ****                 
 299:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Configure QSPI Clock Prescaler and Sample Shift */
 300:HALLIB/Src/stm32f7xx_hal_qspi.c ****     MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QU
 301:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 302:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Configure QSPI Flash Size, CS High Time and Clock Mode */
 303:HALLIB/Src/stm32f7xx_hal_qspi.c ****     MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 304:HALLIB/Src/stm32f7xx_hal_qspi.c ****                ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockM
 305:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 306:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Enable the QSPI peripheral */
 307:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_QSPI_ENABLE(hqspi);
 308:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 309:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Set QSPI error code to none */
 310:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 311:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 312:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Initialize the QSPI state */
 313:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->State = HAL_QSPI_STATE_READY;
 314:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 315:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 316:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Release Lock */
ARM GAS  /tmp/cc7S4Kq7.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_UNLOCK(hqspi);
 318:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 319:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Return function status */
 320:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
 321:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 322:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 323:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 324:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief DeInitializes the QSPI peripheral 
 325:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param hqspi qspi handle
 326:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
 327:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 328:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
 329:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
 330:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check the QSPI handle allocation */
 331:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi == NULL)
 332:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 333:HALLIB/Src/stm32f7xx_hal_qspi.c ****     return HAL_ERROR;
 334:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 335:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 336:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
 337:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
 338:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 339:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Disable the QSPI Peripheral Clock */
 340:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_QSPI_DISABLE(hqspi);
 341:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 342:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
 343:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_QSPI_MspDeInit(hqspi);
 344:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 345:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Set QSPI error code to none */
 346:HALLIB/Src/stm32f7xx_hal_qspi.c ****   hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 347:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 348:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Initialize the QSPI state */
 349:HALLIB/Src/stm32f7xx_hal_qspi.c ****   hqspi->State = HAL_QSPI_STATE_RESET;
 350:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 351:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Release Lock */
 352:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_UNLOCK(hqspi);
 353:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 354:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return HAL_OK;
 355:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 356:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 357:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 358:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief QSPI MSP Init
 359:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param hqspi QSPI handle
 360:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
 361:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 362:HALLIB/Src/stm32f7xx_hal_qspi.c ****  __weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
 363:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
 364:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 365:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
 366:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 367:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 368:HALLIB/Src/stm32f7xx_hal_qspi.c ****             the HAL_QSPI_MspInit can be implemented in the user file
 369:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */ 
 370:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 371:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 372:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 373:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief QSPI MSP DeInit
ARM GAS  /tmp/cc7S4Kq7.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param hqspi QSPI handle
 375:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
 376:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 377:HALLIB/Src/stm32f7xx_hal_qspi.c ****  __weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
 378:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
 379:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 380:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
 381:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 382:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 383:HALLIB/Src/stm32f7xx_hal_qspi.c ****             the HAL_QSPI_MspDeInit can be implemented in the user file
 384:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */ 
 385:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 386:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 387:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 388:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @}
 389:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 390:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 391:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @defgroup QSPI_Exported_Functions_Group2 IO operation functions 
 392:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *  @brief QSPI Transmit/Receive functions 
 393:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *
 394:HALLIB/Src/stm32f7xx_hal_qspi.c **** @verbatim   
 395:HALLIB/Src/stm32f7xx_hal_qspi.c ****  ===============================================================================
 396:HALLIB/Src/stm32f7xx_hal_qspi.c ****                       ##### IO operation functions #####
 397:HALLIB/Src/stm32f7xx_hal_qspi.c ****  ===============================================================================
 398:HALLIB/Src/stm32f7xx_hal_qspi.c ****        [..]
 399:HALLIB/Src/stm32f7xx_hal_qspi.c ****     This subsection provides a set of functions allowing to :
 400:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (+) Handle the interrupts.
 401:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (+) Handle the command sequence.
 402:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (+) Transmit data in blocking, interrupt or DMA mode.
 403:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (+) Receive data in blocking, interrupt or DMA mode.
 404:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (+) Manage the auto-polling functional mode.
 405:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (+) Manage the memory-mapped functional mode.
 406:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 407:HALLIB/Src/stm32f7xx_hal_qspi.c **** @endverbatim
 408:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @{
 409:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 410:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 411:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 412:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief This function handles QSPI interrupt request.
 413:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param hqspi QSPI handle
 414:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None.
 415:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 416:HALLIB/Src/stm32f7xx_hal_qspi.c **** void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
 417:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
 418:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __IO uint32_t *data_reg;
 419:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t flag = READ_REG(hqspi->Instance->SR);
 420:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t itsource = READ_REG(hqspi->Instance->CR);
 421:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 422:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
 423:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(((flag & QSPI_FLAG_FT)!= RESET) && ((itsource & QSPI_IT_FT)!= RESET))
 424:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 425:HALLIB/Src/stm32f7xx_hal_qspi.c ****     data_reg = &hqspi->Instance->DR;
 426:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 427:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 428:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 429:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Transmission process */
 430:HALLIB/Src/stm32f7xx_hal_qspi.c ****       while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != 0)
ARM GAS  /tmp/cc7S4Kq7.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 432:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (hqspi->TxXferCount > 0)
 433:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 434:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Fill the FIFO until it is full */
 435:HALLIB/Src/stm32f7xx_hal_qspi.c ****           *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 436:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->TxXferCount--;
 437:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 438:HALLIB/Src/stm32f7xx_hal_qspi.c ****         else
 439:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 440:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* No more data available for the transfer */
 441:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Disable the QSPI FIFO Threshold Interrupt */
 442:HALLIB/Src/stm32f7xx_hal_qspi.c ****           __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 443:HALLIB/Src/stm32f7xx_hal_qspi.c ****           break;
 444:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 445:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 446:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 447:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 448:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 449:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Receiving Process */
 450:HALLIB/Src/stm32f7xx_hal_qspi.c ****       while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != 0)
 451:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 452:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (hqspi->RxXferCount > 0)
 453:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 454:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Read the FIFO until it is empty */
 455:HALLIB/Src/stm32f7xx_hal_qspi.c ****           *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 456:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->RxXferCount--;
 457:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 458:HALLIB/Src/stm32f7xx_hal_qspi.c ****         else
 459:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 460:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* All data have been received for the transfer */
 461:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Disable the QSPI FIFO Threshold Interrupt */
 462:HALLIB/Src/stm32f7xx_hal_qspi.c ****           __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 463:HALLIB/Src/stm32f7xx_hal_qspi.c ****           break;
 464:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 465:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 466:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 467:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 468:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* FIFO Threshold callback */
 469:HALLIB/Src/stm32f7xx_hal_qspi.c ****     HAL_QSPI_FifoThresholdCallback(hqspi);
 470:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 471:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 472:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* QSPI Transfer Complete interrupt occurred -------------------------------*/
 473:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else if(((flag & QSPI_FLAG_TC)!= RESET) && ((itsource & QSPI_IT_TC)!= RESET))
 474:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 475:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Clear interrupt */
 476:HALLIB/Src/stm32f7xx_hal_qspi.c ****     WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 477:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 478:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
 479:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 480:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 481:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Transfer complete callback */
 482:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 483:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 484:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 485:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 486:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
 487:HALLIB/Src/stm32f7xx_hal_qspi.c ****         CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
ARM GAS  /tmp/cc7S4Kq7.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 489:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Disable the DMA channel */
 490:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_DMA_DISABLE(hqspi->hdma);
 491:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 492:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 493:HALLIB/Src/stm32f7xx_hal_qspi.c **** #if defined(QSPI1_V1_0)
 494:HALLIB/Src/stm32f7xx_hal_qspi.c **** /* Clear Busy bit */
 495:HALLIB/Src/stm32f7xx_hal_qspi.c ****       HAL_QSPI_Abort_IT(hqspi);
 496:HALLIB/Src/stm32f7xx_hal_qspi.c **** #endif
 497:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 498:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Change state of QSPI */
 499:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_READY;
 500:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 501:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* TX Complete callback */
 502:HALLIB/Src/stm32f7xx_hal_qspi.c ****       HAL_QSPI_TxCpltCallback(hqspi);
 503:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 504:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 505:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 506:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 507:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 508:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
 509:HALLIB/Src/stm32f7xx_hal_qspi.c ****         CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 510:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 511:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Disable the DMA channel */
 512:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_DMA_DISABLE(hqspi->hdma);
 513:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 514:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else
 515:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 516:HALLIB/Src/stm32f7xx_hal_qspi.c ****         data_reg = &hqspi->Instance->DR;
 517:HALLIB/Src/stm32f7xx_hal_qspi.c ****         while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0)
 518:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 519:HALLIB/Src/stm32f7xx_hal_qspi.c ****           if (hqspi->RxXferCount > 0)
 520:HALLIB/Src/stm32f7xx_hal_qspi.c ****           {
 521:HALLIB/Src/stm32f7xx_hal_qspi.c ****             /* Read the last data received in the FIFO until it is empty */
 522:HALLIB/Src/stm32f7xx_hal_qspi.c ****             *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 523:HALLIB/Src/stm32f7xx_hal_qspi.c ****             hqspi->RxXferCount--;
 524:HALLIB/Src/stm32f7xx_hal_qspi.c ****           }
 525:HALLIB/Src/stm32f7xx_hal_qspi.c ****           else
 526:HALLIB/Src/stm32f7xx_hal_qspi.c ****           {
 527:HALLIB/Src/stm32f7xx_hal_qspi.c ****             /* All data have been received for the transfer */
 528:HALLIB/Src/stm32f7xx_hal_qspi.c ****             break;
 529:HALLIB/Src/stm32f7xx_hal_qspi.c ****           }
 530:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 531:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 532:HALLIB/Src/stm32f7xx_hal_qspi.c **** #if defined(QSPI1_V1_0)
 533:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Workaround - Extra data written in the FIFO at the end of a read transfer */
 534:HALLIB/Src/stm32f7xx_hal_qspi.c ****       HAL_QSPI_Abort_IT(hqspi);
 535:HALLIB/Src/stm32f7xx_hal_qspi.c **** #endif /* QSPI_V1_0*/      
 536:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 537:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Change state of QSPI */
 538:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_READY;
 539:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 540:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* RX Complete callback */
 541:HALLIB/Src/stm32f7xx_hal_qspi.c ****       HAL_QSPI_RxCpltCallback(hqspi);
 542:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 543:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 544:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
ARM GAS  /tmp/cc7S4Kq7.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Change state of QSPI */
 546:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_READY;
 547:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 548:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Command Complete callback */
 549:HALLIB/Src/stm32f7xx_hal_qspi.c ****       HAL_QSPI_CmdCpltCallback(hqspi);
 550:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 551:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 552:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 553:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Change state of QSPI */
 554:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_READY;
 555:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 556:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 557:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 558:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Abort called by the user */
 559:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 560:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Abort Complete callback */
 561:HALLIB/Src/stm32f7xx_hal_qspi.c ****         HAL_QSPI_AbortCpltCallback(hqspi);
 562:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 563:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else 
 564:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 565:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Abort due to an error (eg :  DMA error) */
 566:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 567:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Error callback */
 568:HALLIB/Src/stm32f7xx_hal_qspi.c ****         HAL_QSPI_ErrorCallback(hqspi);
 569:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 570:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 571:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 572:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 573:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* QSPI Status Match interrupt occurred ------------------------------------*/
 574:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else if(((flag & QSPI_FLAG_SM)!= RESET) && ((itsource & QSPI_IT_SM)!= RESET))
 575:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 576:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Clear interrupt */
 577:HALLIB/Src/stm32f7xx_hal_qspi.c ****     WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 578:HALLIB/Src/stm32f7xx_hal_qspi.c ****    
 579:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Check if the automatic poll mode stop is activated */
 580:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0)
 581:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 582:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Disable the QSPI Transfer Error and Status Match Interrupts */
 583:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 584:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 585:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Change state of QSPI */
 586:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_READY;
 587:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 588:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 589:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Status match callback */
 590:HALLIB/Src/stm32f7xx_hal_qspi.c ****     HAL_QSPI_StatusMatchCallback(hqspi);
 591:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 592:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 593:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* QSPI Transfer Error interrupt occurred ----------------------------------*/
 594:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else if(((flag & QSPI_FLAG_TE)!= RESET) && ((itsource & QSPI_IT_TE)!= RESET))
 595:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 596:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Clear interrupt */
 597:HALLIB/Src/stm32f7xx_hal_qspi.c ****     WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 598:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 599:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Disable all the QSPI Interrupts */
 600:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 601:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
ARM GAS  /tmp/cc7S4Kq7.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Set error code */
 603:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 604:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 605:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 606:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 607:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
 608:HALLIB/Src/stm32f7xx_hal_qspi.c ****       CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 609:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 610:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Disable the DMA channel */
 611:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 612:HALLIB/Src/stm32f7xx_hal_qspi.c ****       HAL_DMA_Abort_IT(hqspi->hdma);
 613:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 614:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
 615:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 616:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Change state of QSPI */
 617:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_READY;
 618:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 619:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Error callback */
 620:HALLIB/Src/stm32f7xx_hal_qspi.c ****       HAL_QSPI_ErrorCallback(hqspi);
 621:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 622:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 623:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 624:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* QSPI Timeout interrupt occurred -----------------------------------------*/
 625:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else if(((flag & QSPI_FLAG_TO)!= RESET) && ((itsource & QSPI_IT_TO)!= RESET))
 626:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 627:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Clear interrupt */
 628:HALLIB/Src/stm32f7xx_hal_qspi.c ****     WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 629:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 630:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Time out callback */
 631:HALLIB/Src/stm32f7xx_hal_qspi.c ****     HAL_QSPI_TimeOutCallback(hqspi);
 632:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 633:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 634:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 635:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 636:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief Sets the command configuration. 
 637:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param hqspi QSPI handle
 638:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param cmd  structure that contains the command configuration information
 639:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param Timeout  Time out duration
 640:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   This function is used only in Indirect Read or Write Modes
 641:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
 642:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 643:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Ti
 644:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
 645:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 646:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
 647:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 648:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check the parameters */
 649:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_INSTRUCTION_MODE(cmd->InstructionMode));
 650:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 651:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 652:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_INSTRUCTION(cmd->Instruction));
 653:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 654:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 655:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_ADDRESS_MODE(cmd->AddressMode));
 656:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 657:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 658:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_ADDRESS_SIZE(cmd->AddressSize));
ARM GAS  /tmp/cc7S4Kq7.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 660:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 661:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_ALTERNATE_BYTES_MODE(cmd->AlternateByteMode));
 662:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 663:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 664:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_ALTERNATE_BYTES_SIZE(cmd->AlternateBytesSize));
 665:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 666:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 667:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DUMMY_CYCLES(cmd->DummyCycles));
 668:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DATA_MODE(cmd->DataMode));
 669:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 670:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
 671:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
 672:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
 673:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 674:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
 675:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
 676:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 677:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
 678:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 679:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 680:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 681:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Update QSPI state */
 682:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->State = HAL_QSPI_STATE_BUSY;   
 683:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 684:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Wait till BUSY flag reset */
 685:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 686:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 687:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if (status == HAL_OK)
 688:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 689:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Call the configuration function */
 690:HALLIB/Src/stm32f7xx_hal_qspi.c ****       QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 691:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 692:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (cmd->DataMode == QSPI_DATA_NONE)
 693:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 694:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* When there is no data phase, the transfer start as soon as the configuration is done 
 695:HALLIB/Src/stm32f7xx_hal_qspi.c ****         so wait until TC flag is set to go back in idle state */
 696:HALLIB/Src/stm32f7xx_hal_qspi.c ****         status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 697:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 698:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (status == HAL_OK)
 699:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 700:HALLIB/Src/stm32f7xx_hal_qspi.c ****           __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 701:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
 702:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Update QSPI state */
 703:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->State = HAL_QSPI_STATE_READY;   
 704:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 705:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 706:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 707:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else
 708:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 709:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Update QSPI state */
 710:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->State = HAL_QSPI_STATE_READY;   
 711:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 712:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 713:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 714:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
 715:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
ARM GAS  /tmp/cc7S4Kq7.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY;   
 717:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 718:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 719:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process unlocked */
 720:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_UNLOCK(hqspi);
 721:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 722:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Return function status */
 723:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
 724:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 725:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 726:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 727:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief Sets the command configuration in interrupt mode. 
 728:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param hqspi QSPI handle
 729:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param cmd  structure that contains the command configuration information
 730:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   This function is used only in Indirect Read or Write Modes
 731:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
 732:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 733:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
 734:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
 735:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 736:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
 737:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 738:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check the parameters */
 739:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_INSTRUCTION_MODE(cmd->InstructionMode));
 740:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 741:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 742:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_INSTRUCTION(cmd->Instruction));
 743:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 744:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 745:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_ADDRESS_MODE(cmd->AddressMode));
 746:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 747:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 748:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_ADDRESS_SIZE(cmd->AddressSize));
 749:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 750:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 751:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_ALTERNATE_BYTES_MODE(cmd->AlternateByteMode));
 752:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 753:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 754:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_ALTERNATE_BYTES_SIZE(cmd->AlternateBytesSize));
 755:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 756:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 757:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DUMMY_CYCLES(cmd->DummyCycles));
 758:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DATA_MODE(cmd->DataMode));
 759:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 760:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
 761:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
 762:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
 763:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 764:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
 765:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
 766:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 767:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
 768:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 769:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 770:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 771:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Update QSPI state */
 772:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->State = HAL_QSPI_STATE_BUSY;   
ARM GAS  /tmp/cc7S4Kq7.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 774:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Wait till BUSY flag reset */
 775:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout
 776:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 777:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if (status == HAL_OK)
 778:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 779:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (cmd->DataMode == QSPI_DATA_NONE)
 780:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 781:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Clear interrupt */
 782:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 783:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 784:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 785:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Call the configuration function */
 786:HALLIB/Src/stm32f7xx_hal_qspi.c ****       QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 787:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 788:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (cmd->DataMode == QSPI_DATA_NONE)
 789:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 790:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* When there is no data phase, the transfer start as soon as the configuration is done 
 791:HALLIB/Src/stm32f7xx_hal_qspi.c ****         so activate TC and TE interrupts */
 792:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Process unlocked */
 793:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_UNLOCK(hqspi);
 794:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 795:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Enable the QSPI Transfer Error Interrupt */
 796:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
 797:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 798:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else
 799:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 800:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Update QSPI state */
 801:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->State = HAL_QSPI_STATE_READY;   
 802:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 803:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Process unlocked */
 804:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_UNLOCK(hqspi);
 805:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 806:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 807:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
 808:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 809:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Process unlocked */
 810:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_UNLOCK(hqspi);
 811:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 812:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 813:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
 814:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 815:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY;   
 816:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 817:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Process unlocked */
 818:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_UNLOCK(hqspi);
 819:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 820:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 821:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Return function status */
 822:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
 823:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 824:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 825:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 826:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief Transmit an amount of data in blocking mode. 
 827:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param hqspi QSPI handle
 828:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param pData pointer to data buffer
 829:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param Timeout  Time out duration
ARM GAS  /tmp/cc7S4Kq7.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   This function is used only in Indirect Write Mode
 831:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
 832:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 833:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
 834:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
 835:HALLIB/Src/stm32f7xx_hal_qspi.c ****    HAL_StatusTypeDef status = HAL_OK;
 836:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
 837:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __IO uint32_t *data_reg = &hqspi->Instance->DR;
 838:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 839:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
 840:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
 841:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 842:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
 843:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 844:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 845:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 846:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(pData != NULL )
 847:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 848:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Update state */
 849:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 850:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 851:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure counters and size of the handle */
 852:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 853:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 854:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->pTxBuffPtr = pData;
 855:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 856:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: CCR register with functional as indirect write */
 857:HALLIB/Src/stm32f7xx_hal_qspi.c ****       MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 858:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 859:HALLIB/Src/stm32f7xx_hal_qspi.c ****       while(hqspi->TxXferCount > 0)
 860:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 861:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Wait until FT flag is set to send data */
 862:HALLIB/Src/stm32f7xx_hal_qspi.c ****         status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 863:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 864:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (status != HAL_OK)
 865:HALLIB/Src/stm32f7xx_hal_qspi.c ****         { 
 866:HALLIB/Src/stm32f7xx_hal_qspi.c ****           break;
 867:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 868:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 869:HALLIB/Src/stm32f7xx_hal_qspi.c ****         *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 870:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->TxXferCount--;
 871:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 872:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 873:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (status == HAL_OK)
 874:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 875:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Wait until TC flag is set to go back in idle state */
 876:HALLIB/Src/stm32f7xx_hal_qspi.c ****         status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 877:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 878:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (status == HAL_OK)
 879:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 880:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Clear Transfer Complete bit */
 881:HALLIB/Src/stm32f7xx_hal_qspi.c ****           __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 882:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
 883:HALLIB/Src/stm32f7xx_hal_qspi.c **** #if defined(QSPI1_V1_0)
 884:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Clear Busy bit */
 885:HALLIB/Src/stm32f7xx_hal_qspi.c ****           status = HAL_QSPI_Abort(hqspi);
 886:HALLIB/Src/stm32f7xx_hal_qspi.c **** #endif /* QSPI_V1_0 */ 
ARM GAS  /tmp/cc7S4Kq7.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 888:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 889:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 890:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Update QSPI state */
 891:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_READY;    
 892:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 893:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
 894:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 895:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 896:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_ERROR;
 897:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 898:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 899:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
 900:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 901:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY;
 902:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 903:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 904:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process unlocked */
 905:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_UNLOCK(hqspi);
 906:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 907:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
 908:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 909:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 910:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 911:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
 912:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief Receive an amount of data in blocking mode 
 913:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param hqspi QSPI handle
 914:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param pData pointer to data buffer
 915:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param Timeout  Time out duration
 916:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   This function is used only in Indirect Read Mode
 917:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
 918:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
 919:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
 920:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
 921:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
 922:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
 923:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 924:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __IO uint32_t *data_reg = &hqspi->Instance->DR;
 925:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 926:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
 927:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
 928:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 929:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
 930:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 931:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 932:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(pData != NULL )
 933:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 934:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Update state */
 935:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 936:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 937:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure counters and size of the handle */
 938:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 939:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 940:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->pRxBuffPtr = pData;
 941:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 942:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: CCR register with functional as indirect read */
 943:HALLIB/Src/stm32f7xx_hal_qspi.c ****       MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
ARM GAS  /tmp/cc7S4Kq7.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 945:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Start the transfer by re-writing the address in AR register */
 946:HALLIB/Src/stm32f7xx_hal_qspi.c ****       WRITE_REG(hqspi->Instance->AR, addr_reg);
 947:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 948:HALLIB/Src/stm32f7xx_hal_qspi.c ****       while(hqspi->RxXferCount > 0)
 949:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 950:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Wait until FT or TC flag is set to read received data */
 951:HALLIB/Src/stm32f7xx_hal_qspi.c ****         status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstar
 952:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 953:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if  (status != HAL_OK)
 954:HALLIB/Src/stm32f7xx_hal_qspi.c ****         { 
 955:HALLIB/Src/stm32f7xx_hal_qspi.c ****           break;
 956:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 957:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 958:HALLIB/Src/stm32f7xx_hal_qspi.c ****         *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 959:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->RxXferCount--;
 960:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 961:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 962:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (status == HAL_OK)
 963:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 964:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Wait until TC flag is set to go back in idle state */
 965:HALLIB/Src/stm32f7xx_hal_qspi.c ****         status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 966:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 967:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if  (status == HAL_OK)
 968:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 969:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Clear Transfer Complete bit */
 970:HALLIB/Src/stm32f7xx_hal_qspi.c ****           __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 971:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
 972:HALLIB/Src/stm32f7xx_hal_qspi.c **** #if defined(QSPI1_V1_0)
 973:HALLIB/Src/stm32f7xx_hal_qspi.c ****          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
 974:HALLIB/Src/stm32f7xx_hal_qspi.c ****          status = HAL_QSPI_Abort(hqspi);
 975:HALLIB/Src/stm32f7xx_hal_qspi.c **** #endif /* QSPI_V1_0 */  
 976:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 977:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 978:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 979:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Update QSPI state */
 980:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_READY;    
 981:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 982:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
 983:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 984:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 985:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_ERROR;
 986:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 987:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 988:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
 989:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 990:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY;
 991:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 992:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 993:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process unlocked */
 994:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_UNLOCK(hqspi);
 995:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 996:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
 997:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 998:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 999:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1000:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Send an amount of data in interrupt mode 
ARM GAS  /tmp/cc7S4Kq7.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1002:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  pData pointer to data buffer
1003:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   This function is used only in Indirect Write Mode
1004:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
1005:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1006:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_Transmit_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
1007:HALLIB/Src/stm32f7xx_hal_qspi.c **** {  
1008:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
1009:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1010:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
1011:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
1012:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1013:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
1014:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1015:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
1016:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(pData != NULL )
1017:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1018:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Update state */
1019:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
1020:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1021:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure counters and size of the handle */
1022:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
1023:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
1024:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->pTxBuffPtr = pData;
1025:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1026:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: CCR register with functional as indirect write */
1027:HALLIB/Src/stm32f7xx_hal_qspi.c ****       MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
1028:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1029:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Clear interrupt */
1030:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
1031:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1032:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Process unlocked */
1033:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_UNLOCK(hqspi);
1034:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1035:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
1036:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
1037:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1038:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1039:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
1040:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1041:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
1042:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_ERROR;
1043:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1044:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Process unlocked */
1045:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_UNLOCK(hqspi);
1046:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1047:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1048:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
1049:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1050:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY;
1051:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1052:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Process unlocked */
1053:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_UNLOCK(hqspi);
1054:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1055:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1056:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
1057:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
ARM GAS  /tmp/cc7S4Kq7.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1059:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1060:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Receive an amount of data in no-blocking mode with Interrupt
1061:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1062:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  pData pointer to data buffer
1063:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   This function is used only in Indirect Read Mode
1064:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
1065:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1066:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_Receive_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
1067:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1068:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
1069:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
1070:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1071:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
1072:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
1073:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1074:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
1075:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1076:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
1077:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1078:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(pData != NULL )
1079:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1080:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Update state */
1081:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
1082:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1083:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure counters and size of the handle */
1084:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
1085:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
1086:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->pRxBuffPtr = pData;
1087:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1088:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: CCR register with functional as indirect read */
1089:HALLIB/Src/stm32f7xx_hal_qspi.c ****       MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
1090:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1091:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Start the transfer by re-writing the address in AR register */
1092:HALLIB/Src/stm32f7xx_hal_qspi.c ****       WRITE_REG(hqspi->Instance->AR, addr_reg);
1093:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1094:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Clear interrupt */
1095:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
1096:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1097:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Process unlocked */
1098:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_UNLOCK(hqspi);
1099:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1100:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
1101:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
1102:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1103:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
1104:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1105:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
1106:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_ERROR;
1107:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1108:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Process unlocked */
1109:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_UNLOCK(hqspi);
1110:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1111:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1112:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
1113:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1114:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY;   
ARM GAS  /tmp/cc7S4Kq7.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1116:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Process unlocked */
1117:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_UNLOCK(hqspi);
1118:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1119:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1120:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
1121:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1122:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1123:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1124:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Sends an amount of data in non blocking mode with DMA. 
1125:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1126:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  pData pointer to data buffer
1127:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   This function is used only in Indirect Write Mode
1128:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   If DMA peripheral access is configured as halfword, the number 
1129:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *         of data and the fifo threshold should be aligned on halfword
1130:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   If DMA peripheral access is configured as word, the number 
1131:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *         of data and the fifo threshold should be aligned on word
1132:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
1133:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1134:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
1135:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1136:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
1137:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t *tmp;
1138:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1);
1139:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1140:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
1141:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
1142:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1143:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
1144:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1145:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Clear the error code */                
1146:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
1147:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1148:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(pData != NULL ) 
1149:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1150:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure counters of the handle */
1151:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
1152:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
1153:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->TxXferCount = data_size;
1154:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
1155:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_HALFWORD)
1156:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
1157:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (((data_size % 2) != 0) || ((hqspi->Init.FifoThreshold % 2) != 0))
1158:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
1159:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* The number of data or the fifo threshold is not aligned on halfword 
1160:HALLIB/Src/stm32f7xx_hal_qspi.c ****           => no transfer possible with DMA peripheral access configured as halfword */
1161:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
1162:HALLIB/Src/stm32f7xx_hal_qspi.c ****           status = HAL_ERROR;
1163:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
1164:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Process unlocked */
1165:HALLIB/Src/stm32f7xx_hal_qspi.c ****           __HAL_UNLOCK(hqspi);
1166:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
1167:HALLIB/Src/stm32f7xx_hal_qspi.c ****         else
1168:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
1169:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->TxXferCount = (data_size >> 1);
1170:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
1171:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
ARM GAS  /tmp/cc7S4Kq7.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_WORD)
1173:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
1174:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (((data_size % 4) != 0) || ((hqspi->Init.FifoThreshold % 4) != 0))
1175:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
1176:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* The number of data or the fifo threshold is not aligned on word 
1177:HALLIB/Src/stm32f7xx_hal_qspi.c ****           => no transfer possible with DMA peripheral access configured as word */
1178:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
1179:HALLIB/Src/stm32f7xx_hal_qspi.c ****           status = HAL_ERROR;
1180:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
1181:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Process unlocked */
1182:HALLIB/Src/stm32f7xx_hal_qspi.c ****           __HAL_UNLOCK(hqspi);
1183:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
1184:HALLIB/Src/stm32f7xx_hal_qspi.c ****         else
1185:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
1186:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->TxXferCount = (data_size >> 2);
1187:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
1188:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
1189:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1190:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (status == HAL_OK)
1191:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
1192:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1193:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Update state */
1194:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
1195:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1196:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Clear interrupt */
1197:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
1198:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1199:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure size and pointer of the handle */
1200:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->TxXferSize = hqspi->TxXferCount;
1201:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->pTxBuffPtr = pData;
1202:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1203:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: CCR register with functional mode as indirect write */
1204:HALLIB/Src/stm32f7xx_hal_qspi.c ****       MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
1205:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1206:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Set the QSPI DMA transfer complete callback */
1207:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->hdma->XferCpltCallback = QSPI_DMATxCplt;
1208:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1209:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Set the QSPI DMA Half transfer complete callback */
1210:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->hdma->XferHalfCpltCallback = QSPI_DMATxHalfCplt;
1211:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1212:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Set the DMA error callback */
1213:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->hdma->XferErrorCallback = QSPI_DMAError;
1214:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1215:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Clear the DMA abort callback */      
1216:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->hdma->XferAbortCallback = NULL;
1217:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1218:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure the direction of the DMA */
1219:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->hdma->Init.Direction = DMA_MEMORY_TO_PERIPH;
1220:HALLIB/Src/stm32f7xx_hal_qspi.c ****       MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
1221:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1222:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Enable the QSPI transmit DMA Channel */
1223:HALLIB/Src/stm32f7xx_hal_qspi.c ****       tmp = (uint32_t*)&pData;
1224:HALLIB/Src/stm32f7xx_hal_qspi.c ****       HAL_DMA_Start_IT(hqspi->hdma, *(uint32_t*)tmp, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferS
1225:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1226:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Process unlocked */
1227:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_UNLOCK(hqspi);
1228:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
ARM GAS  /tmp/cc7S4Kq7.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Enable the QSPI transfer error Interrupt */
1230:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
1231:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1232:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Enable the DMA transfer by setting the DMAEN bit in the QSPI CR register */
1233:HALLIB/Src/stm32f7xx_hal_qspi.c ****       SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
1234:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1235:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1236:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
1237:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1238:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
1239:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1240:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_ERROR;
1241:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1242:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Process unlocked */
1243:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_UNLOCK(hqspi);
1244:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1245:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1246:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
1247:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1248:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY;   
1249:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1250:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Process unlocked */
1251:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_UNLOCK(hqspi);
1252:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1253:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1254:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
1255:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1256:HALLIB/Src/stm32f7xx_hal_qspi.c ****                           
1257:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1258:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Receives an amount of data in non blocking mode with DMA. 
1259:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1260:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  pData pointer to data buffer.
1261:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   This function is used only in Indirect Read Mode
1262:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   If DMA peripheral access is configured as halfword, the number 
1263:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *         of data and the fifo threshold should be aligned on halfword
1264:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   If DMA peripheral access is configured as word, the number 
1265:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *         of data and the fifo threshold should be aligned on word
1266:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
1267:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1268:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_Receive_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
1269:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1270:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
1271:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t *tmp;
1272:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
1273:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1);
1274:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1275:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
1276:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
1277:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1278:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
1279:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1280:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
1281:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1282:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(pData != NULL ) 
1283:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1284:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure counters of the handle */
1285:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
ARM GAS  /tmp/cc7S4Kq7.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
1287:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->RxXferCount = data_size;
1288:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
1289:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_HALFWORD)
1290:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
1291:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (((data_size % 2) != 0) || ((hqspi->Init.FifoThreshold % 2) != 0))
1292:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
1293:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* The number of data or the fifo threshold is not aligned on halfword 
1294:HALLIB/Src/stm32f7xx_hal_qspi.c ****           => no transfer possible with DMA peripheral access configured as halfword */
1295:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
1296:HALLIB/Src/stm32f7xx_hal_qspi.c ****           status = HAL_ERROR;
1297:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
1298:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Process unlocked */
1299:HALLIB/Src/stm32f7xx_hal_qspi.c ****           __HAL_UNLOCK(hqspi);
1300:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
1301:HALLIB/Src/stm32f7xx_hal_qspi.c ****         else
1302:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
1303:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->RxXferCount = (data_size >> 1);
1304:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
1305:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
1306:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_WORD)
1307:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
1308:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (((data_size % 4) != 0) || ((hqspi->Init.FifoThreshold % 4) != 0))
1309:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
1310:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* The number of data or the fifo threshold is not aligned on word 
1311:HALLIB/Src/stm32f7xx_hal_qspi.c ****           => no transfer possible with DMA peripheral access configured as word */
1312:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
1313:HALLIB/Src/stm32f7xx_hal_qspi.c ****           status = HAL_ERROR;
1314:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
1315:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Process unlocked */
1316:HALLIB/Src/stm32f7xx_hal_qspi.c ****           __HAL_UNLOCK(hqspi);
1317:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
1318:HALLIB/Src/stm32f7xx_hal_qspi.c ****         else
1319:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
1320:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->RxXferCount = (data_size >> 2);
1321:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
1322:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
1323:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1324:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (status == HAL_OK)
1325:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
1326:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1327:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Update state */
1328:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
1329:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1330:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Clear interrupt */
1331:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
1332:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1333:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Configure size and pointer of the handle */
1334:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->RxXferSize = hqspi->RxXferCount;
1335:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->pRxBuffPtr = pData;
1336:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1337:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Set the QSPI DMA transfer complete callback */
1338:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->hdma->XferCpltCallback = QSPI_DMARxCplt;
1339:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1340:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Set the QSPI DMA Half transfer complete callback */
1341:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->hdma->XferHalfCpltCallback = QSPI_DMARxHalfCplt;
1342:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
ARM GAS  /tmp/cc7S4Kq7.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Set the DMA error callback */
1344:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->hdma->XferErrorCallback = QSPI_DMAError;
1345:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1346:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Clear the DMA abort callback */      
1347:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->hdma->XferAbortCallback = NULL;
1348:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1349:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Configure the direction of the DMA */
1350:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->hdma->Init.Direction = DMA_PERIPH_TO_MEMORY;
1351:HALLIB/Src/stm32f7xx_hal_qspi.c ****         MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
1352:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1353:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Enable the DMA Channel */
1354:HALLIB/Src/stm32f7xx_hal_qspi.c ****         tmp = (uint32_t*)&pData;
1355:HALLIB/Src/stm32f7xx_hal_qspi.c ****         HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)&hqspi->Instance->DR, *(uint32_t*)tmp, hqspi->RxXfe
1356:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1357:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Configure QSPI: CCR register with functional as indirect read */
1358:HALLIB/Src/stm32f7xx_hal_qspi.c ****         MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
1359:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1360:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Start the transfer by re-writing the address in AR register */
1361:HALLIB/Src/stm32f7xx_hal_qspi.c ****         WRITE_REG(hqspi->Instance->AR, addr_reg);
1362:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1363:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Process unlocked */
1364:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_UNLOCK(hqspi);
1365:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1366:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Enable the QSPI transfer error Interrupt */
1367:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
1368:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1369:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Enable the DMA transfer by setting the DMAEN bit in the QSPI CR register */
1370:HALLIB/Src/stm32f7xx_hal_qspi.c ****         SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
1371:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
1372:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1373:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
1374:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1375:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
1376:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_ERROR;
1377:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1378:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Process unlocked */
1379:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_UNLOCK(hqspi);
1380:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1381:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1382:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
1383:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1384:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY; 
1385:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1386:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Process unlocked */
1387:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_UNLOCK(hqspi);
1388:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1389:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1390:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
1391:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1392:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1393:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1394:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Configure the QSPI Automatic Polling Mode in blocking mode. 
1395:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1396:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  cmd structure that contains the command configuration information.
1397:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  cfg structure that contains the polling configuration information.
1398:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  Timeout  Time out duration
1399:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   This function is used only in Automatic Polling Mode
ARM GAS  /tmp/cc7S4Kq7.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
1401:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1402:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_Au
1403:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1404:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
1405:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
1406:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1407:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check the parameters */
1408:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_INSTRUCTION_MODE(cmd->InstructionMode));
1409:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
1410:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1411:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_INSTRUCTION(cmd->Instruction));
1412:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1413:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1414:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_ADDRESS_MODE(cmd->AddressMode));
1415:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->AddressMode != QSPI_ADDRESS_NONE)
1416:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1417:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_ADDRESS_SIZE(cmd->AddressSize));
1418:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1419:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1420:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_ALTERNATE_BYTES_MODE(cmd->AlternateByteMode));
1421:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
1422:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1423:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_ALTERNATE_BYTES_SIZE(cmd->AlternateBytesSize));
1424:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1425:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1426:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DUMMY_CYCLES(cmd->DummyCycles));
1427:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DATA_MODE(cmd->DataMode));
1428:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1429:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
1430:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
1431:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
1432:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1433:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_INTERVAL(cfg->Interval));
1434:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
1435:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
1436:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1437:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
1438:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
1439:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1440:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
1441:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1442:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1443:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
1444:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1445:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Update state */
1446:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
1447:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1448:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Wait till BUSY flag reset */
1449:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
1450:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1451:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if (status == HAL_OK)
1452:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1453:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: PSMAR register with the status match value */
1454:HALLIB/Src/stm32f7xx_hal_qspi.c ****       WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
1455:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1456:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: PSMKR register with the status mask value */
ARM GAS  /tmp/cc7S4Kq7.s 			page 27


1457:HALLIB/Src/stm32f7xx_hal_qspi.c ****       WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
1458:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1459:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: PIR register with the interval value */
1460:HALLIB/Src/stm32f7xx_hal_qspi.c ****       WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
1461:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1462:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: CR register with Match mode and Automatic stop enabled 
1463:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (otherwise there will be an infinite loop in blocking mode) */
1464:HALLIB/Src/stm32f7xx_hal_qspi.c ****       MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
1465:HALLIB/Src/stm32f7xx_hal_qspi.c ****                (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));
1466:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1467:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Call the configuration function */
1468:HALLIB/Src/stm32f7xx_hal_qspi.c ****       cmd->NbData = cfg->StatusBytesSize;
1469:HALLIB/Src/stm32f7xx_hal_qspi.c ****       QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
1470:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1471:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Wait until SM flag is set to go back in idle state */
1472:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
1473:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1474:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (status == HAL_OK)
1475:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
1476:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
1477:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1478:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Update state */
1479:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->State = HAL_QSPI_STATE_READY;
1480:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
1481:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1482:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1483:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
1484:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1485:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY;   
1486:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1487:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process unlocked */
1488:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_UNLOCK(hqspi);
1489:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1490:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Return function status */
1491:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;  
1492:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1493:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1494:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1495:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Configure the QSPI Automatic Polling Mode in non-blocking mode. 
1496:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1497:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  cmd structure that contains the command configuration information.
1498:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  cfg structure that contains the polling configuration information.
1499:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   This function is used only in Automatic Polling Mode
1500:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
1501:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1502:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI
1503:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1504:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
1505:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
1506:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1507:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check the parameters */
1508:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_INSTRUCTION_MODE(cmd->InstructionMode));
1509:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
1510:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1511:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_INSTRUCTION(cmd->Instruction));
1512:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1513:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
ARM GAS  /tmp/cc7S4Kq7.s 			page 28


1514:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_ADDRESS_MODE(cmd->AddressMode));
1515:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->AddressMode != QSPI_ADDRESS_NONE)
1516:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1517:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_ADDRESS_SIZE(cmd->AddressSize));
1518:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1519:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1520:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_ALTERNATE_BYTES_MODE(cmd->AlternateByteMode));
1521:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
1522:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1523:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_ALTERNATE_BYTES_SIZE(cmd->AlternateBytesSize));
1524:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1525:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1526:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DUMMY_CYCLES(cmd->DummyCycles));
1527:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DATA_MODE(cmd->DataMode));
1528:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1529:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
1530:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
1531:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
1532:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1533:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_INTERVAL(cfg->Interval));
1534:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
1535:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
1536:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
1537:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1538:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
1539:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
1540:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1541:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
1542:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1543:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
1544:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1545:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Update state */
1546:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
1547:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1548:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Wait till BUSY flag reset */
1549:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout
1550:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1551:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if (status == HAL_OK)
1552:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1553:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: PSMAR register with the status match value */
1554:HALLIB/Src/stm32f7xx_hal_qspi.c ****       WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
1555:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1556:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: PSMKR register with the status mask value */
1557:HALLIB/Src/stm32f7xx_hal_qspi.c ****       WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
1558:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1559:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: PIR register with the interval value */
1560:HALLIB/Src/stm32f7xx_hal_qspi.c ****       WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
1561:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1562:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: CR register with Match mode and Automatic stop mode */
1563:HALLIB/Src/stm32f7xx_hal_qspi.c ****       MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
1564:HALLIB/Src/stm32f7xx_hal_qspi.c ****                (cfg->MatchMode | cfg->AutomaticStop));
1565:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1566:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Clear interrupt */
1567:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
1568:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1569:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Call the configuration function */
1570:HALLIB/Src/stm32f7xx_hal_qspi.c ****       cmd->NbData = cfg->StatusBytesSize;
ARM GAS  /tmp/cc7S4Kq7.s 			page 29


1571:HALLIB/Src/stm32f7xx_hal_qspi.c ****       QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
1572:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1573:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Process unlocked */
1574:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_UNLOCK(hqspi);
1575:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1576:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Enable the QSPI Transfer Error and status match Interrupt */
1577:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
1578:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1579:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1580:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
1581:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1582:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Process unlocked */
1583:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_UNLOCK(hqspi);
1584:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1585:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1586:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
1587:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1588:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY;   
1589:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1590:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Process unlocked */
1591:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_UNLOCK(hqspi);
1592:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1593:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1594:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Return function status */
1595:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;  
1596:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1597:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1598:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1599:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Configure the Memory Mapped mode. 
1600:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1601:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  cmd structure that contains the command configuration information.
1602:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  cfg structure that contains the memory mapped configuration information.
1603:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @note   This function is used only in Memory mapped Mode
1604:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
1605:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1606:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_M
1607:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1608:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
1609:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
1610:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1611:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check the parameters */
1612:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_INSTRUCTION_MODE(cmd->InstructionMode));
1613:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
1614:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1615:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_INSTRUCTION(cmd->Instruction));
1616:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1617:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1618:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_ADDRESS_MODE(cmd->AddressMode));
1619:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->AddressMode != QSPI_ADDRESS_NONE)
1620:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1621:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_ADDRESS_SIZE(cmd->AddressSize));
1622:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1623:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1624:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_ALTERNATE_BYTES_MODE(cmd->AlternateByteMode));
1625:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
1626:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1627:HALLIB/Src/stm32f7xx_hal_qspi.c ****     assert_param(IS_QSPI_ALTERNATE_BYTES_SIZE(cmd->AlternateBytesSize));
ARM GAS  /tmp/cc7S4Kq7.s 			page 30


1628:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1629:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1630:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DUMMY_CYCLES(cmd->DummyCycles));
1631:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DATA_MODE(cmd->DataMode));
1632:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1633:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
1634:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
1635:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
1636:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1637:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));
1638:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1639:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
1640:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
1641:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1642:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
1643:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1644:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
1645:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1646:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Update state */
1647:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
1648:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1649:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Wait till BUSY flag reset */
1650:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout
1651:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1652:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if (status == HAL_OK)
1653:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1654:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: CR register with timeout counter enable */
1655:HALLIB/Src/stm32f7xx_hal_qspi.c ****     MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
1656:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1657:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
1658:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
1659:HALLIB/Src/stm32f7xx_hal_qspi.c ****         assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));
1660:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1661:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Configure QSPI: LPTR register with the low-power timeout value */
1662:HALLIB/Src/stm32f7xx_hal_qspi.c ****         WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
1663:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
1664:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Clear interrupt */
1665:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
1666:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1667:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Enable the QSPI TimeOut Interrupt */
1668:HALLIB/Src/stm32f7xx_hal_qspi.c ****         __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
1669:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
1670:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1671:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Call the configuration function */
1672:HALLIB/Src/stm32f7xx_hal_qspi.c ****       QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
1673:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1674:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1675:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
1676:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1677:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY;   
1678:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1679:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1680:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process unlocked */
1681:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_UNLOCK(hqspi);
1682:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1683:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Return function status */
1684:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;  
ARM GAS  /tmp/cc7S4Kq7.s 			page 31


1685:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1686:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1687:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1688:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Transfer Error callbacks
1689:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1690:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
1691:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1692:HALLIB/Src/stm32f7xx_hal_qspi.c **** __weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
1693:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1694:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
1695:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
1696:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1697:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1698:HALLIB/Src/stm32f7xx_hal_qspi.c ****             the HAL_QSPI_ErrorCallback could be implemented in the user file
1699:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */
1700:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1701:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1702:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1703:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Abort completed callback.
1704:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1705:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
1706:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1707:HALLIB/Src/stm32f7xx_hal_qspi.c **** __weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
1708:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1709:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
1710:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
1711:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1712:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1713:HALLIB/Src/stm32f7xx_hal_qspi.c ****            the HAL_QSPI_AbortCpltCallback could be implemented in the user file
1714:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */
1715:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1716:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1717:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1718:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Command completed callback.
1719:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1720:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
1721:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1722:HALLIB/Src/stm32f7xx_hal_qspi.c **** __weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
1723:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1724:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
1725:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
1726:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1727:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1728:HALLIB/Src/stm32f7xx_hal_qspi.c ****            the HAL_QSPI_CmdCpltCallback could be implemented in the user file
1729:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */
1730:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1731:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1732:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1733:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Rx Transfer completed callbacks.
1734:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1735:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
1736:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1737:HALLIB/Src/stm32f7xx_hal_qspi.c **** __weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
1738:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1739:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
1740:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
1741:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
ARM GAS  /tmp/cc7S4Kq7.s 			page 32


1742:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1743:HALLIB/Src/stm32f7xx_hal_qspi.c ****            the HAL_QSPI_RxCpltCallback could be implemented in the user file
1744:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */
1745:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1746:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1747:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1748:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Tx Transfer completed callbacks.
1749:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1750:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
1751:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1752:HALLIB/Src/stm32f7xx_hal_qspi.c ****  __weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
1753:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1754:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
1755:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
1756:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1757:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1758:HALLIB/Src/stm32f7xx_hal_qspi.c ****            the HAL_QSPI_TxCpltCallback could be implemented in the user file
1759:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */ 
1760:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1761:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1762:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1763:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Rx Half Transfer completed callbacks.
1764:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1765:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
1766:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1767:HALLIB/Src/stm32f7xx_hal_qspi.c **** __weak void HAL_QSPI_RxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
1768:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1769:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
1770:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
1771:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1772:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1773:HALLIB/Src/stm32f7xx_hal_qspi.c ****            the HAL_QSPI_RxHalfCpltCallback could be implemented in the user file
1774:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */
1775:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1776:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1777:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1778:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Tx Half Transfer completed callbacks.
1779:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1780:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
1781:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1782:HALLIB/Src/stm32f7xx_hal_qspi.c ****  __weak void HAL_QSPI_TxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
1783:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1784:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
1785:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
1786:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1787:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1788:HALLIB/Src/stm32f7xx_hal_qspi.c ****            the HAL_QSPI_TxHalfCpltCallback could be implemented in the user file
1789:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */ 
1790:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1791:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1792:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1793:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  FIFO Threshold callbacks
1794:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1795:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
1796:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1797:HALLIB/Src/stm32f7xx_hal_qspi.c **** __weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
1798:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
ARM GAS  /tmp/cc7S4Kq7.s 			page 33


1799:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
1800:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
1801:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1802:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1803:HALLIB/Src/stm32f7xx_hal_qspi.c ****             the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
1804:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */
1805:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1806:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1807:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1808:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Status Match callbacks
1809:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1810:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
1811:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1812:HALLIB/Src/stm32f7xx_hal_qspi.c **** __weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
1813:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1814:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
1815:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
1816:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1817:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1818:HALLIB/Src/stm32f7xx_hal_qspi.c ****             the HAL_QSPI_StatusMatchCallback could be implemented in the user file
1819:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */
1820:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1821:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1822:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1823:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Timeout callbacks
1824:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1825:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
1826:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1827:HALLIB/Src/stm32f7xx_hal_qspi.c **** __weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
1828:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1829:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
1830:HALLIB/Src/stm32f7xx_hal_qspi.c ****   UNUSED(hqspi);
1831:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1832:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1833:HALLIB/Src/stm32f7xx_hal_qspi.c ****             the HAL_QSPI_TimeOutCallback could be implemented in the user file
1834:HALLIB/Src/stm32f7xx_hal_qspi.c ****    */
1835:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1836:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1837:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1838:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @}
1839:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1840:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1841:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @defgroup QSPI_Exported_Functions_Group3 Peripheral Control and State functions 
1842:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *  @brief   QSPI control and State functions 
1843:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *
1844:HALLIB/Src/stm32f7xx_hal_qspi.c **** @verbatim   
1845:HALLIB/Src/stm32f7xx_hal_qspi.c ****  ===============================================================================
1846:HALLIB/Src/stm32f7xx_hal_qspi.c ****                   ##### Peripheral Control and State functions #####
1847:HALLIB/Src/stm32f7xx_hal_qspi.c ****  ===============================================================================  
1848:HALLIB/Src/stm32f7xx_hal_qspi.c ****     [..]
1849:HALLIB/Src/stm32f7xx_hal_qspi.c ****     This subsection provides a set of functions allowing to :
1850:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (+) Check in run-time the state of the driver. 
1851:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (+) Check the error code set during last operation.
1852:HALLIB/Src/stm32f7xx_hal_qspi.c ****       (+) Abort any operation.
1853:HALLIB/Src/stm32f7xx_hal_qspi.c **** .....   
1854:HALLIB/Src/stm32f7xx_hal_qspi.c **** @endverbatim
1855:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @{
ARM GAS  /tmp/cc7S4Kq7.s 			page 34


1856:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1857:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1858:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1859:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Return the QSPI handle state.
1860:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
1861:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL state
1862:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1863:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_QSPI_StateTypeDef HAL_QSPI_GetState(QSPI_HandleTypeDef *hqspi)
1864:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1865:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Return QSPI handle state */
1866:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return hqspi->State;
1867:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1868:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1869:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1870:HALLIB/Src/stm32f7xx_hal_qspi.c **** * @brief  Return the QSPI error code
1871:HALLIB/Src/stm32f7xx_hal_qspi.c **** * @param  hqspi QSPI handle
1872:HALLIB/Src/stm32f7xx_hal_qspi.c **** * @retval QSPI Error Code
1873:HALLIB/Src/stm32f7xx_hal_qspi.c **** */
1874:HALLIB/Src/stm32f7xx_hal_qspi.c **** uint32_t HAL_QSPI_GetError(QSPI_HandleTypeDef *hqspi)
1875:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1876:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return hqspi->ErrorCode;
1877:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1878:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1879:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1880:HALLIB/Src/stm32f7xx_hal_qspi.c **** * @brief  Abort the current transmission
1881:HALLIB/Src/stm32f7xx_hal_qspi.c **** * @param  hqspi QSPI handle
1882:HALLIB/Src/stm32f7xx_hal_qspi.c **** * @retval HAL status
1883:HALLIB/Src/stm32f7xx_hal_qspi.c **** */
1884:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
1885:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1886:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
1887:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
1888:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1889:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check if the state is in one of the busy states */
1890:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if ((hqspi->State & 0x2) != 0)
1891:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1892:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Process unlocked */
1893:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_UNLOCK(hqspi);
1894:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1895:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
1896:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1897:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
1898:HALLIB/Src/stm32f7xx_hal_qspi.c ****       CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
1899:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1900:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Abort DMA channel */
1901:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_DMA_Abort(hqspi->hdma);
1902:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if(status != HAL_OK)
1903:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
1904:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
1905:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
1906:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }  
1907:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1908:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Configure QSPI: CR register with Abort request */
1909:HALLIB/Src/stm32f7xx_hal_qspi.c ****     SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
1910:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1911:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Wait until TC flag is set to go back in idle state */
1912:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
ARM GAS  /tmp/cc7S4Kq7.s 			page 35


1913:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1914:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(status == HAL_OK)
1915:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1916:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
1917:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1918:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Wait until BUSY flag is reset */
1919:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeo
1920:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1921:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1922:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if (status == HAL_OK)
1923:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1924:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Update state */
1925:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->State = HAL_QSPI_STATE_READY;
1926:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1927:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1928:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1929:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
1930:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1931:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1932:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
1933:HALLIB/Src/stm32f7xx_hal_qspi.c **** * @brief  Abort the current transmission (non-blocking function)
1934:HALLIB/Src/stm32f7xx_hal_qspi.c **** * @param  hqspi QSPI handle
1935:HALLIB/Src/stm32f7xx_hal_qspi.c **** * @retval HAL status
1936:HALLIB/Src/stm32f7xx_hal_qspi.c **** */
1937:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
1938:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1939:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
1940:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
1941:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check if the state is in one of the busy states */
1942:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if ((hqspi->State & 0x2) != 0)
1943:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
1944:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Process unlocked */
1945:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_UNLOCK(hqspi);
1946:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1947:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Update QSPI state */
1948:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->State = HAL_QSPI_STATE_ABORT;   
1949:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1950:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Disable all interrupts */
1951:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
1952:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
1953:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
1954:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1955:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
1956:HALLIB/Src/stm32f7xx_hal_qspi.c ****       CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
1957:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1958:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Abort DMA channel */
1959:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
1960:HALLIB/Src/stm32f7xx_hal_qspi.c ****       HAL_DMA_Abort_IT(hqspi->hdma);
1961:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }  
1962:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
1963:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
1964:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Clear interrupt */
1965:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
1966:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
1967:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Enable the QSPI Transfer Complete Interrupt */
1968:HALLIB/Src/stm32f7xx_hal_qspi.c ****       __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
1969:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
ARM GAS  /tmp/cc7S4Kq7.s 			page 36


1970:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: CR register with Abort request */
1971:HALLIB/Src/stm32f7xx_hal_qspi.c ****       SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
1972:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
1973:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
1974:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1975:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
1976:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1977:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1978:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @brief Set QSPI timeout
1979:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle.
1980:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  Timeout Timeout for the QSPI memory access.
1981:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
1982:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1983:HALLIB/Src/stm32f7xx_hal_qspi.c **** void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
1984:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1985:HALLIB/Src/stm32f7xx_hal_qspi.c ****   hqspi->Timeout = Timeout;
1986:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
1987:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1988:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @brief Set QSPI Fifo threshold.
1989:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle.
1990:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  Threshold Threshold of the Fifo (value between 1 and 16).
1991:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
1992:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
1993:HALLIB/Src/stm32f7xx_hal_qspi.c **** HAL_StatusTypeDef HAL_QSPI_SetFifoThreshold(QSPI_HandleTypeDef *hqspi, uint32_t Threshold)
1994:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
1995:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
1996:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
1997:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process locked */
1998:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_LOCK(hqspi);
1999:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2000:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_READY)
2001:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
2002:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Synchronize init structure with new FIFO threshold value */
2003:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->Init.FifoThreshold = Threshold;
2004:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
2005:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Configure QSPI FIFO Threshold */
2006:HALLIB/Src/stm32f7xx_hal_qspi.c ****     MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, 
2007:HALLIB/Src/stm32f7xx_hal_qspi.c ****                ((hqspi->Init.FifoThreshold - 1) << QUADSPI_CR_FTHRES_Pos));
2008:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
2009:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
2010:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
2011:HALLIB/Src/stm32f7xx_hal_qspi.c ****     status = HAL_BUSY;   
2012:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
2013:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
2014:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Process unlocked */
2015:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_UNLOCK(hqspi);
2016:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2017:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Return function status */
2018:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return status;
2019:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
2020:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2021:HALLIB/Src/stm32f7xx_hal_qspi.c **** /** @brief Get QSPI Fifo threshold.
2022:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle.
2023:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval Fifo threshold (value between 1 and 16)
2024:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
2025:HALLIB/Src/stm32f7xx_hal_qspi.c **** uint32_t HAL_QSPI_GetFifoThreshold(QSPI_HandleTypeDef *hqspi)
2026:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
ARM GAS  /tmp/cc7S4Kq7.s 			page 37


2027:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return ((READ_BIT(hqspi->Instance->CR, QUADSPI_CR_FTHRES) >> QUADSPI_CR_FTHRES_Pos) + 1);
2028:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
2029:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2030:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
2031:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @}
2032:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
2033:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2034:HALLIB/Src/stm32f7xx_hal_qspi.c **** /* Private functions ---------------------------------------------------------*/
2035:HALLIB/Src/stm32f7xx_hal_qspi.c ****  
2036:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
2037:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  DMA QSPI receive process complete callback. 
2038:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hdma DMA handle
2039:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
2040:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
2041:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMARxCplt(DMA_HandleTypeDef *hdma)  
2042:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
  28              		.loc 1 2042 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
2043:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  34              		.loc 1 2043 0
  35 0000 836B     		ldr	r3, [r0, #56]
  36              	.LVL1:
2044:HALLIB/Src/stm32f7xx_hal_qspi.c ****   hqspi->RxXferCount = 0;
  37              		.loc 1 2044 0
  38 0002 0022     		movs	r2, #0
  39 0004 9A63     		str	r2, [r3, #56]
2045:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
2046:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Enable the QSPI transfer complete Interrupt */
2047:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
  40              		.loc 1 2047 0
  41 0006 1A68     		ldr	r2, [r3]
  42 0008 1368     		ldr	r3, [r2]
  43              	.LVL2:
  44 000a 43F40033 		orr	r3, r3, #131072
  45 000e 1360     		str	r3, [r2]
  46 0010 7047     		bx	lr
  47              		.cfi_endproc
  48              	.LFE169:
  50 0012 00BF     		.section	.text.QSPI_DMATxCplt,"ax",%progbits
  51              		.align	2
  52              		.thumb
  53              		.thumb_func
  55              	QSPI_DMATxCplt:
  56              	.LFB170:
2048:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
2049:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2050:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
2051:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  DMA QSPI transmit process complete callback. 
2052:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hdma DMA handle
2053:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
2054:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
2055:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMATxCplt(DMA_HandleTypeDef *hdma)     
2056:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
ARM GAS  /tmp/cc7S4Kq7.s 			page 38


  57              		.loc 1 2056 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  62              	.LVL3:
2057:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  63              		.loc 1 2057 0
  64 0000 836B     		ldr	r3, [r0, #56]
  65              	.LVL4:
2058:HALLIB/Src/stm32f7xx_hal_qspi.c ****   hqspi->TxXferCount = 0;
  66              		.loc 1 2058 0
  67 0002 0022     		movs	r2, #0
  68 0004 DA62     		str	r2, [r3, #44]
2059:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
2060:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Enable the QSPI transfer complete Interrupt */
2061:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
  69              		.loc 1 2061 0
  70 0006 1A68     		ldr	r2, [r3]
  71 0008 1368     		ldr	r3, [r2]
  72              	.LVL5:
  73 000a 43F40033 		orr	r3, r3, #131072
  74 000e 1360     		str	r3, [r2]
  75 0010 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE170:
  79 0012 00BF     		.section	.text.QSPI_Config,"ax",%progbits
  80              		.align	2
  81              		.thumb
  82              		.thumb_func
  84              	QSPI_Config:
  85              	.LFB176:
2062:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
2063:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2064:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
2065:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  DMA QSPI receive process half complete callback 
2066:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hdma  DMA handle
2067:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
2068:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
2069:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
2070:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
2071:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
2072:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2073:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_QSPI_RxHalfCpltCallback(hqspi); 
2074:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
2075:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2076:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
2077:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  DMA QSPI transmit process half complete callback 
2078:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hdma  DMA handle
2079:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
2080:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
2081:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2082:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
2083:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
2084:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2085:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_QSPI_TxHalfCpltCallback(hqspi);
2086:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
ARM GAS  /tmp/cc7S4Kq7.s 			page 39


2087:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2088:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
2089:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  DMA QSPI communication error callback.
2090:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hdma DMA handle
2091:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
2092:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
2093:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMAError(DMA_HandleTypeDef *hdma)   
2094:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
2095:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2096:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
2097:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* if DMA error is FIFO error ignore it */
2098:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2099:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
2100:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->RxXferCount = 0;
2101:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->TxXferCount = 0;
2102:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
2103:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
2104:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
2105:HALLIB/Src/stm32f7xx_hal_qspi.c ****     CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2106:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
2107:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Abort the QSPI */
2108:HALLIB/Src/stm32f7xx_hal_qspi.c ****     HAL_QSPI_Abort_IT(hqspi);
2109:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
2110:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
2111:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2112:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
2113:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  DMA QSPI abort complete callback.
2114:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hdma DMA handle
2115:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
2116:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
2117:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)   
2118:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
2119:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2120:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2121:HALLIB/Src/stm32f7xx_hal_qspi.c ****   hqspi->RxXferCount = 0;
2122:HALLIB/Src/stm32f7xx_hal_qspi.c ****   hqspi->TxXferCount = 0;
2123:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2124:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if(hqspi->State == HAL_QSPI_STATE_ABORT)
2125:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
2126:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* DMA Abort called by QSPI abort */
2127:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Clear interrupt */
2128:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
2129:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
2130:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Enable the QSPI Transfer Complete Interrupt */
2131:HALLIB/Src/stm32f7xx_hal_qspi.c ****     __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
2132:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
2133:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Configure QSPI: CR register with Abort request */
2134:HALLIB/Src/stm32f7xx_hal_qspi.c ****     SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
2135:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
2136:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
2137:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
2138:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* DMA Abort called due to a transfer error interrupt */
2139:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Change state of QSPI */
2140:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->State = HAL_QSPI_STATE_READY;
2141:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
2142:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Error callback */
2143:HALLIB/Src/stm32f7xx_hal_qspi.c ****     HAL_QSPI_ErrorCallback(hqspi);
ARM GAS  /tmp/cc7S4Kq7.s 			page 40


2144:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
2145:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
2146:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2147:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
2148:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Wait for a flag state until timeout.
2149:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
2150:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  Flag Flag checked
2151:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  State Value of the flag expected
2152:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  tickstart Start tick value
2153:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  Timeout Duration of the time out
2154:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval HAL status
2155:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
2156:HALLIB/Src/stm32f7xx_hal_qspi.c **** static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
2157:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                                         FlagStatus State, uint32_t tickstart, uint3
2158:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
2159:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Wait until flag is in expected state */    
2160:HALLIB/Src/stm32f7xx_hal_qspi.c ****   while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2161:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
2162:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Check for the Timeout */
2163:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if (Timeout != HAL_MAX_DELAY)
2164:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
2165:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
2166:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
2167:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->State     = HAL_QSPI_STATE_ERROR;
2168:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
2169:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
2170:HALLIB/Src/stm32f7xx_hal_qspi.c ****         return HAL_ERROR;
2171:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
2172:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
2173:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
2174:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return HAL_OK;
2175:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
2176:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2177:HALLIB/Src/stm32f7xx_hal_qspi.c **** /**
2178:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @brief  Configure the communication registers.
2179:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  hqspi QSPI handle
2180:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  cmd structure that contains the command configuration information
2181:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @param  FunctionalMode functional mode to configured
2182:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *           This parameter can be one of the following values:
2183:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *            @arg QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE: Indirect write mode
2184:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *            @arg QSPI_FUNCTIONAL_MODE_INDIRECT_READ: Indirect read mode
2185:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
2186:HALLIB/Src/stm32f7xx_hal_qspi.c ****   *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
2187:HALLIB/Src/stm32f7xx_hal_qspi.c ****   * @retval None
2188:HALLIB/Src/stm32f7xx_hal_qspi.c ****   */
2189:HALLIB/Src/stm32f7xx_hal_qspi.c **** static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMod
2190:HALLIB/Src/stm32f7xx_hal_qspi.c **** {
  86              		.loc 1 2190 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 8
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              	.LVL6:
  91 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  92              	.LCFI0:
  93              		.cfi_def_cfa_offset 20
  94              		.cfi_offset 4, -20
  95              		.cfi_offset 5, -16
ARM GAS  /tmp/cc7S4Kq7.s 			page 41


  96              		.cfi_offset 6, -12
  97              		.cfi_offset 7, -8
  98              		.cfi_offset 14, -4
  99 0002 83B0     		sub	sp, sp, #12
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 32
2191:HALLIB/Src/stm32f7xx_hal_qspi.c ****   assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));
2192:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2193:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 102              		.loc 1 2193 0
 103 0004 4B6A     		ldr	r3, [r1, #36]
 104 0006 33B1     		cbz	r3, .L4
 105              		.loc 1 2193 0 is_stmt 0 discriminator 1
 106 0008 B2F1406F 		cmp	r2, #201326592
 107 000c 03D0     		beq	.L4
2194:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
2195:HALLIB/Src/stm32f7xx_hal_qspi.c ****     /* Configure QSPI: DLR register with the number of data to read or write */
2196:HALLIB/Src/stm32f7xx_hal_qspi.c ****     WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1));
 108              		.loc 1 2196 0 is_stmt 1
 109 000e 0468     		ldr	r4, [r0]
 110 0010 8B6A     		ldr	r3, [r1, #40]
 111 0012 013B     		subs	r3, r3, #1
 112 0014 2361     		str	r3, [r4, #16]
 113              	.L4:
2197:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
2198:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
2199:HALLIB/Src/stm32f7xx_hal_qspi.c ****   if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 114              		.loc 1 2199 0
 115 0016 8B69     		ldr	r3, [r1, #24]
 116 0018 002B     		cmp	r3, #0
 117 001a 75D0     		beq	.L5
2200:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
2201:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 118              		.loc 1 2201 0
 119 001c 0C6A     		ldr	r4, [r1, #32]
 120 001e 002C     		cmp	r4, #0
 121 0020 3CD0     		beq	.L6
2202:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
2203:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: ABR register with alternate bytes value */
2204:HALLIB/Src/stm32f7xx_hal_qspi.c ****       WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 122              		.loc 1 2204 0
 123 0022 0368     		ldr	r3, [r0]
 124 0024 8C68     		ldr	r4, [r1, #8]
 125 0026 DC61     		str	r4, [r3, #28]
2205:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2206:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 126              		.loc 1 2206 0
 127 0028 CB69     		ldr	r3, [r1, #28]
 128 002a 03B3     		cbz	r3, .L7
2207:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
2208:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /*---- Command with instruction, address and alternate bytes ----*/
2209:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Configure QSPI: CCR register with all communications parameters */
2210:HALLIB/Src/stm32f7xx_hal_qspi.c ****         WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 129              		.loc 1 2210 0
 130 002c 0568     		ldr	r5, [r0]
 131 002e CE6A     		ldr	r6, [r1, #44]
 132 0030 0C6B     		ldr	r4, [r1, #48]
ARM GAS  /tmp/cc7S4Kq7.s 			page 42


 133 0032 2643     		orrs	r6, r6, r4
 134 0034 4C6B     		ldr	r4, [r1, #52]
 135 0036 3443     		orrs	r4, r4, r6
 136 0038 4E6A     		ldr	r6, [r1, #36]
 137 003a 2643     		orrs	r6, r6, r4
 138 003c 4C69     		ldr	r4, [r1, #20]
 139 003e 46EA8446 		orr	r6, r6, r4, lsl #18
 140 0042 0F69     		ldr	r7, [r1, #16]
 141 0044 46EA0704 		orr	r4, r6, r7
 142 0048 0F6A     		ldr	r7, [r1, #32]
 143 004a 2743     		orrs	r7, r7, r4
 144 004c CC68     		ldr	r4, [r1, #12]
 145 004e 3C43     		orrs	r4, r4, r7
 146 0050 1C43     		orrs	r4, r4, r3
 147 0052 8B69     		ldr	r3, [r1, #24]
 148 0054 1C43     		orrs	r4, r4, r3
 149 0056 0B68     		ldr	r3, [r1]
 150 0058 2343     		orrs	r3, r3, r4
 151 005a 1343     		orrs	r3, r3, r2
 152 005c 6B61     		str	r3, [r5, #20]
2211:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateB
2212:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMo
2213:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->InstructionMode | cmd->Instruction | FunctionalMode))
2214:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2215:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 153              		.loc 1 2215 0
 154 005e B2F1406F 		cmp	r2, #201326592
 155 0062 00F0C080 		beq	.L3
2216:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
2217:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Configure QSPI: AR register with address value */
2218:HALLIB/Src/stm32f7xx_hal_qspi.c ****           WRITE_REG(hqspi->Instance->AR, cmd->Address);
 156              		.loc 1 2218 0
 157 0066 0368     		ldr	r3, [r0]
 158 0068 4A68     		ldr	r2, [r1, #4]
 159              	.LVL7:
 160 006a 9A61     		str	r2, [r3, #24]
 161 006c BBE0     		b	.L3
 162              	.LVL8:
 163              	.L7:
2219:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
2220:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
2221:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else
2222:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
2223:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /*---- Command with instruction and alternate bytes ----*/
2224:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Configure QSPI: CCR register with all communications parameters */
2225:HALLIB/Src/stm32f7xx_hal_qspi.c ****         WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 164              		.loc 1 2225 0
 165 006e 0568     		ldr	r5, [r0]
 166 0070 CC6A     		ldr	r4, [r1, #44]
 167 0072 086B     		ldr	r0, [r1, #48]
 168              	.LVL9:
 169 0074 0443     		orrs	r4, r4, r0
 170 0076 486B     		ldr	r0, [r1, #52]
 171 0078 0443     		orrs	r4, r4, r0
 172 007a 486A     		ldr	r0, [r1, #36]
 173 007c 2043     		orrs	r0, r0, r4
 174 007e 4C69     		ldr	r4, [r1, #20]
ARM GAS  /tmp/cc7S4Kq7.s 			page 43


 175 0080 40EA8440 		orr	r0, r0, r4, lsl #18
 176 0084 0C69     		ldr	r4, [r1, #16]
 177 0086 0443     		orrs	r4, r4, r0
 178 0088 086A     		ldr	r0, [r1, #32]
 179 008a 0443     		orrs	r4, r4, r0
 180 008c 1C43     		orrs	r4, r4, r3
 181 008e 8B69     		ldr	r3, [r1, #24]
 182 0090 2343     		orrs	r3, r3, r4
 183 0092 0968     		ldr	r1, [r1]
 184              	.LVL10:
 185 0094 0B43     		orrs	r3, r3, r1
 186 0096 1A43     		orrs	r2, r2, r3
 187              	.LVL11:
 188 0098 6A61     		str	r2, [r5, #20]
 189 009a A4E0     		b	.L3
 190              	.LVL12:
 191              	.L6:
2226:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateB
2227:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->AlternateByteMode | cmd->AddressMode | cmd->Instructi
2228:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->Instruction | FunctionalMode));
2229:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
2230:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
2231:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
2232:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
2233:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 192              		.loc 1 2233 0
 193 009c D1F81CE0 		ldr	lr, [r1, #28]
 194 00a0 BEF1000F 		cmp	lr, #0
 195 00a4 1CD0     		beq	.L9
2234:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
2235:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /*---- Command with instruction and address ----*/
2236:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Configure QSPI: CCR register with all communications parameters */
2237:HALLIB/Src/stm32f7xx_hal_qspi.c ****         WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 196              		.loc 1 2237 0
 197 00a6 0668     		ldr	r6, [r0]
 198 00a8 0F6B     		ldr	r7, [r1, #48]
 199 00aa CD6A     		ldr	r5, [r1, #44]
 200 00ac 2F43     		orrs	r7, r7, r5
 201 00ae 4D6B     		ldr	r5, [r1, #52]
 202 00b0 3D43     		orrs	r5, r5, r7
 203 00b2 4F6A     		ldr	r7, [r1, #36]
 204 00b4 2F43     		orrs	r7, r7, r5
 205 00b6 4D69     		ldr	r5, [r1, #20]
 206 00b8 47EA8545 		orr	r5, r7, r5, lsl #18
 207 00bc 2C43     		orrs	r4, r4, r5
 208 00be CD68     		ldr	r5, [r1, #12]
 209 00c0 2543     		orrs	r5, r5, r4
 210 00c2 4EEA0505 		orr	r5, lr, r5
 211 00c6 2B43     		orrs	r3, r3, r5
 212 00c8 0C68     		ldr	r4, [r1]
 213 00ca 2343     		orrs	r3, r3, r4
 214 00cc 1343     		orrs	r3, r3, r2
 215 00ce 7361     		str	r3, [r6, #20]
2238:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateB
2239:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode
2240:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->Instruction | FunctionalMode));
2241:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
ARM GAS  /tmp/cc7S4Kq7.s 			page 44


2242:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 216              		.loc 1 2242 0
 217 00d0 B2F1406F 		cmp	r2, #201326592
 218 00d4 00F08780 		beq	.L3
2243:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
2244:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Configure QSPI: AR register with address value */
2245:HALLIB/Src/stm32f7xx_hal_qspi.c ****           WRITE_REG(hqspi->Instance->AR, cmd->Address);
 219              		.loc 1 2245 0
 220 00d8 0368     		ldr	r3, [r0]
 221 00da 4A68     		ldr	r2, [r1, #4]
 222              	.LVL13:
 223 00dc 9A61     		str	r2, [r3, #24]
 224 00de 82E0     		b	.L3
 225              	.LVL14:
 226              	.L9:
2246:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
2247:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
2248:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else
2249:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
2250:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /*---- Command with only instruction ----*/
2251:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Configure QSPI: CCR register with all communications parameters */
2252:HALLIB/Src/stm32f7xx_hal_qspi.c ****         WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 227              		.loc 1 2252 0
 228 00e0 0668     		ldr	r6, [r0]
 229 00e2 CD6A     		ldr	r5, [r1, #44]
 230 00e4 086B     		ldr	r0, [r1, #48]
 231              	.LVL15:
 232 00e6 0543     		orrs	r5, r5, r0
 233 00e8 486B     		ldr	r0, [r1, #52]
 234 00ea 0543     		orrs	r5, r5, r0
 235 00ec 486A     		ldr	r0, [r1, #36]
 236 00ee 2843     		orrs	r0, r0, r5
 237 00f0 4D69     		ldr	r5, [r1, #20]
 238 00f2 40EA8545 		orr	r5, r0, r5, lsl #18
 239 00f6 2543     		orrs	r5, r5, r4
 240 00f8 4EEA0505 		orr	r5, lr, r5
 241 00fc 2B43     		orrs	r3, r3, r5
 242 00fe 0968     		ldr	r1, [r1]
 243              	.LVL16:
 244 0100 0B43     		orrs	r3, r3, r1
 245 0102 1A43     		orrs	r2, r2, r3
 246              	.LVL17:
 247 0104 7261     		str	r2, [r6, #20]
 248 0106 6EE0     		b	.L3
 249              	.LVL18:
 250              	.L5:
2253:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateB
2254:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->AddressMode | cmd->InstructionMode | cmd->Instruction
2255:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          FunctionalMode));
2256:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
2257:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
2258:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
2259:HALLIB/Src/stm32f7xx_hal_qspi.c ****   else
2260:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
2261:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 251              		.loc 1 2261 0
 252 0108 0C6A     		ldr	r4, [r1, #32]
ARM GAS  /tmp/cc7S4Kq7.s 			page 45


 253 010a 002C     		cmp	r4, #0
 254 010c 37D0     		beq	.L10
2262:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
2263:HALLIB/Src/stm32f7xx_hal_qspi.c ****       /* Configure QSPI: ABR register with alternate bytes value */
2264:HALLIB/Src/stm32f7xx_hal_qspi.c ****       WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 255              		.loc 1 2264 0
 256 010e 0368     		ldr	r3, [r0]
 257 0110 8C68     		ldr	r4, [r1, #8]
 258 0112 DC61     		str	r4, [r3, #28]
2265:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2266:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 259              		.loc 1 2266 0
 260 0114 CB69     		ldr	r3, [r1, #28]
 261 0116 EBB1     		cbz	r3, .L11
2267:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
2268:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /*---- Command with address and alternate bytes ----*/
2269:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Configure QSPI: CCR register with all communications parameters */
2270:HALLIB/Src/stm32f7xx_hal_qspi.c ****         WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 262              		.loc 1 2270 0
 263 0118 0568     		ldr	r5, [r0]
 264 011a CE6A     		ldr	r6, [r1, #44]
 265 011c 0C6B     		ldr	r4, [r1, #48]
 266 011e 2643     		orrs	r6, r6, r4
 267 0120 4C6B     		ldr	r4, [r1, #52]
 268 0122 3443     		orrs	r4, r4, r6
 269 0124 4E6A     		ldr	r6, [r1, #36]
 270 0126 2643     		orrs	r6, r6, r4
 271 0128 4C69     		ldr	r4, [r1, #20]
 272 012a 46EA8446 		orr	r6, r6, r4, lsl #18
 273 012e 0F69     		ldr	r7, [r1, #16]
 274 0130 46EA0704 		orr	r4, r6, r7
 275 0134 0F6A     		ldr	r7, [r1, #32]
 276 0136 2743     		orrs	r7, r7, r4
 277 0138 CC68     		ldr	r4, [r1, #12]
 278 013a 3C43     		orrs	r4, r4, r7
 279 013c 1C43     		orrs	r4, r4, r3
 280 013e 8B69     		ldr	r3, [r1, #24]
 281 0140 2343     		orrs	r3, r3, r4
 282 0142 1343     		orrs	r3, r3, r2
 283 0144 6B61     		str	r3, [r5, #20]
2271:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateB
2272:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMo
2273:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->InstructionMode | FunctionalMode));
2274:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2275:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 284              		.loc 1 2275 0
 285 0146 B2F1406F 		cmp	r2, #201326592
 286 014a 4CD0     		beq	.L3
2276:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
2277:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Configure QSPI: AR register with address value */
2278:HALLIB/Src/stm32f7xx_hal_qspi.c ****           WRITE_REG(hqspi->Instance->AR, cmd->Address);
 287              		.loc 1 2278 0
 288 014c 0368     		ldr	r3, [r0]
 289 014e 4A68     		ldr	r2, [r1, #4]
 290              	.LVL19:
 291 0150 9A61     		str	r2, [r3, #24]
 292 0152 48E0     		b	.L3
ARM GAS  /tmp/cc7S4Kq7.s 			page 46


 293              	.LVL20:
 294              	.L11:
2279:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
2280:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
2281:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else
2282:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
2283:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /*---- Command with only alternate bytes ----*/
2284:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Configure QSPI: CCR register with all communications parameters */
2285:HALLIB/Src/stm32f7xx_hal_qspi.c ****         WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 295              		.loc 1 2285 0
 296 0154 0568     		ldr	r5, [r0]
 297 0156 CC6A     		ldr	r4, [r1, #44]
 298 0158 086B     		ldr	r0, [r1, #48]
 299              	.LVL21:
 300 015a 0443     		orrs	r4, r4, r0
 301 015c 486B     		ldr	r0, [r1, #52]
 302 015e 0443     		orrs	r4, r4, r0
 303 0160 486A     		ldr	r0, [r1, #36]
 304 0162 2043     		orrs	r0, r0, r4
 305 0164 4C69     		ldr	r4, [r1, #20]
 306 0166 40EA8440 		orr	r0, r0, r4, lsl #18
 307 016a 0C69     		ldr	r4, [r1, #16]
 308 016c 0443     		orrs	r4, r4, r0
 309 016e 086A     		ldr	r0, [r1, #32]
 310 0170 2043     		orrs	r0, r0, r4
 311 0172 0343     		orrs	r3, r3, r0
 312 0174 8969     		ldr	r1, [r1, #24]
 313              	.LVL22:
 314 0176 0B43     		orrs	r3, r3, r1
 315 0178 1A43     		orrs	r2, r2, r3
 316              	.LVL23:
 317 017a 6A61     		str	r2, [r5, #20]
 318 017c 33E0     		b	.L3
 319              	.LVL24:
 320              	.L10:
2286:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateB
2287:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->AlternateByteMode | cmd->AddressMode | cmd->Instructi
2288:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          FunctionalMode));
2289:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
2290:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
2291:HALLIB/Src/stm32f7xx_hal_qspi.c ****     else
2292:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
2293:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 321              		.loc 1 2293 0
 322 017e CE69     		ldr	r6, [r1, #28]
 323 0180 D6B1     		cbz	r6, .L12
2294:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
2295:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /*---- Command with only address ----*/
2296:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /* Configure QSPI: CCR register with all communications parameters */
2297:HALLIB/Src/stm32f7xx_hal_qspi.c ****         WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 324              		.loc 1 2297 0
 325 0182 0568     		ldr	r5, [r0]
 326 0184 0195     		str	r5, [sp, #4]
 327 0186 0F6B     		ldr	r7, [r1, #48]
 328 0188 CD6A     		ldr	r5, [r1, #44]
 329 018a 2F43     		orrs	r7, r7, r5
 330 018c 4D6B     		ldr	r5, [r1, #52]
ARM GAS  /tmp/cc7S4Kq7.s 			page 47


 331 018e 2F43     		orrs	r7, r7, r5
 332 0190 4D6A     		ldr	r5, [r1, #36]
 333 0192 2F43     		orrs	r7, r7, r5
 334 0194 4D69     		ldr	r5, [r1, #20]
 335 0196 47EA8547 		orr	r7, r7, r5, lsl #18
 336 019a 2743     		orrs	r7, r7, r4
 337 019c CC68     		ldr	r4, [r1, #12]
 338 019e 3C43     		orrs	r4, r4, r7
 339 01a0 3443     		orrs	r4, r4, r6
 340 01a2 2343     		orrs	r3, r3, r4
 341 01a4 1343     		orrs	r3, r3, r2
 342 01a6 019C     		ldr	r4, [sp, #4]
 343 01a8 6361     		str	r3, [r4, #20]
2298:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateB
2299:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode
2300:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                          FunctionalMode));
2301:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
2302:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 344              		.loc 1 2302 0
 345 01aa B2F1406F 		cmp	r2, #201326592
 346 01ae 1AD0     		beq	.L3
2303:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
2304:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Configure QSPI: AR register with address value */
2305:HALLIB/Src/stm32f7xx_hal_qspi.c ****           WRITE_REG(hqspi->Instance->AR, cmd->Address);
 347              		.loc 1 2305 0
 348 01b0 0368     		ldr	r3, [r0]
 349 01b2 4A68     		ldr	r2, [r1, #4]
 350              	.LVL25:
 351 01b4 9A61     		str	r2, [r3, #24]
 352 01b6 16E0     		b	.L3
 353              	.LVL26:
 354              	.L12:
2306:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
2307:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
2308:HALLIB/Src/stm32f7xx_hal_qspi.c ****       else
2309:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
2310:HALLIB/Src/stm32f7xx_hal_qspi.c ****         /*---- Command with only data phase ----*/
2311:HALLIB/Src/stm32f7xx_hal_qspi.c ****         if (cmd->DataMode != QSPI_DATA_NONE)
 355              		.loc 1 2311 0
 356 01b8 D1F824E0 		ldr	lr, [r1, #36]
 357 01bc BEF1000F 		cmp	lr, #0
 358 01c0 11D0     		beq	.L3
2312:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
2313:HALLIB/Src/stm32f7xx_hal_qspi.c ****           /* Configure QSPI: CCR register with all communications parameters */
2314:HALLIB/Src/stm32f7xx_hal_qspi.c ****           WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 359              		.loc 1 2314 0
 360 01c2 0568     		ldr	r5, [r0]
 361 01c4 0F6B     		ldr	r7, [r1, #48]
 362 01c6 C86A     		ldr	r0, [r1, #44]
 363              	.LVL27:
 364 01c8 0743     		orrs	r7, r7, r0
 365 01ca 486B     		ldr	r0, [r1, #52]
 366 01cc 3843     		orrs	r0, r0, r7
 367 01ce 4EEA0000 		orr	r0, lr, r0
 368 01d2 4969     		ldr	r1, [r1, #20]
 369              	.LVL28:
 370 01d4 40EA8140 		orr	r0, r0, r1, lsl #18
ARM GAS  /tmp/cc7S4Kq7.s 			page 48


 371 01d8 44EA0001 		orr	r1, r4, r0
 372 01dc 46EA0104 		orr	r4, r6, r1
 373 01e0 2343     		orrs	r3, r3, r4
 374 01e2 1A43     		orrs	r2, r2, r3
 375              	.LVL29:
 376 01e4 6A61     		str	r2, [r5, #20]
 377              	.L3:
2315:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                            cmd->DataMode | (cmd->DummyCycles << 18) | cmd->Alternat
2316:HALLIB/Src/stm32f7xx_hal_qspi.c ****                                            cmd->AddressMode | cmd->InstructionMode | FunctionalMode
2317:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
2318:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
2319:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
2320:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
2321:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 378              		.loc 1 2321 0
 379 01e6 03B0     		add	sp, sp, #12
 380              	.LCFI2:
 381              		.cfi_def_cfa_offset 20
 382              		@ sp needed
 383 01e8 F0BD     		pop	{r4, r5, r6, r7, pc}
 384              		.cfi_endproc
 385              	.LFE176:
 387 01ea 00BF     		.section	.text.QSPI_WaitFlagStateUntilTimeout,"ax",%progbits
 388              		.align	2
 389              		.thumb
 390              		.thumb_func
 392              	QSPI_WaitFlagStateUntilTimeout:
 393              	.LFB175:
2158:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Wait until flag is in expected state */    
 394              		.loc 1 2158 0
 395              		.cfi_startproc
 396              		@ args = 4, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              	.LVL30:
 399 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 400              	.LCFI3:
 401              		.cfi_def_cfa_offset 24
 402              		.cfi_offset 4, -24
 403              		.cfi_offset 5, -20
 404              		.cfi_offset 6, -16
 405              		.cfi_offset 7, -12
 406              		.cfi_offset 8, -8
 407              		.cfi_offset 14, -4
 408 0004 0546     		mov	r5, r0
 409 0006 0F46     		mov	r7, r1
 410 0008 1646     		mov	r6, r2
 411 000a 9846     		mov	r8, r3
 412 000c 069C     		ldr	r4, [sp, #24]
2160:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 413              		.loc 1 2160 0
 414 000e 13E0     		b	.L16
 415              	.LVL31:
 416              	.L19:
2163:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 417              		.loc 1 2163 0
 418 0010 B4F1FF3F 		cmp	r4, #-1
 419 0014 10D0     		beq	.L16
ARM GAS  /tmp/cc7S4Kq7.s 			page 49


2165:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 420              		.loc 1 2165 0
 421 0016 2CB1     		cbz	r4, .L17
2165:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 422              		.loc 1 2165 0 is_stmt 0 discriminator 1
 423 0018 FFF7FEFF 		bl	HAL_GetTick
 424              	.LVL32:
 425 001c C8EB0000 		rsb	r0, r8, r0
 426 0020 8442     		cmp	r4, r0
 427 0022 09D2     		bcs	.L16
 428              	.L17:
2167:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 429              		.loc 1 2167 0 is_stmt 1
 430 0024 0423     		movs	r3, #4
 431 0026 85F84130 		strb	r3, [r5, #65]
2168:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 432              		.loc 1 2168 0
 433 002a 6B6C     		ldr	r3, [r5, #68]
 434 002c 43F00103 		orr	r3, r3, #1
 435 0030 6B64     		str	r3, [r5, #68]
2170:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 436              		.loc 1 2170 0
 437 0032 0120     		movs	r0, #1
 438 0034 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 439              	.LVL33:
 440              	.L16:
2160:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 441              		.loc 1 2160 0
 442 0038 2B68     		ldr	r3, [r5]
 443 003a 9B68     		ldr	r3, [r3, #8]
 444 003c 3B42     		tst	r3, r7
 445 003e 14BF     		ite	ne
 446 0040 0123     		movne	r3, #1
 447 0042 0023     		moveq	r3, #0
 448 0044 B342     		cmp	r3, r6
 449 0046 E3D1     		bne	.L19
2174:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 450              		.loc 1 2174 0
 451 0048 0020     		movs	r0, #0
2175:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 452              		.loc 1 2175 0
 453 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 454              		.cfi_endproc
 455              	.LFE175:
 457 004e 00BF     		.section	.text.HAL_QSPI_MspInit,"ax",%progbits
 458              		.align	2
 459              		.weak	HAL_QSPI_MspInit
 460              		.thumb
 461              		.thumb_func
 463              	HAL_QSPI_MspInit:
 464              	.LFB138:
 363:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 465              		.loc 1 363 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              		@ link register save eliminated.
ARM GAS  /tmp/cc7S4Kq7.s 			page 50


 470              	.LVL34:
 471 0000 7047     		bx	lr
 472              		.cfi_endproc
 473              	.LFE138:
 475 0002 00BF     		.section	.text.HAL_QSPI_MspDeInit,"ax",%progbits
 476              		.align	2
 477              		.weak	HAL_QSPI_MspDeInit
 478              		.thumb
 479              		.thumb_func
 481              	HAL_QSPI_MspDeInit:
 482              	.LFB139:
 378:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 483              		.loc 1 378 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487              		@ link register save eliminated.
 488              	.LVL35:
 489 0000 7047     		bx	lr
 490              		.cfi_endproc
 491              	.LFE139:
 493 0002 00BF     		.section	.text.HAL_QSPI_DeInit,"ax",%progbits
 494              		.align	2
 495              		.global	HAL_QSPI_DeInit
 496              		.thumb
 497              		.thumb_func
 499              	HAL_QSPI_DeInit:
 500              	.LFB137:
 329:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check the QSPI handle allocation */
 501              		.loc 1 329 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              	.LVL36:
 331:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 506              		.loc 1 331 0
 507 0000 B8B1     		cbz	r0, .L25
 337:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 508              		.loc 1 337 0
 509 0002 90F84020 		ldrb	r2, [r0, #64]	@ zero_extendqisi2
 510 0006 D2B2     		uxtb	r2, r2
 511 0008 012A     		cmp	r2, #1
 512 000a 14D0     		beq	.L26
 329:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Check the QSPI handle allocation */
 513              		.loc 1 329 0 discriminator 2
 514 000c 10B5     		push	{r4, lr}
 515              	.LCFI4:
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 4, -8
 518              		.cfi_offset 14, -4
 519 000e 0446     		mov	r4, r0
 337:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 520              		.loc 1 337 0 discriminator 2
 521 0010 0123     		movs	r3, #1
 522 0012 80F84030 		strb	r3, [r0, #64]
 340:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 523              		.loc 1 340 0 discriminator 2
ARM GAS  /tmp/cc7S4Kq7.s 			page 51


 524 0016 0268     		ldr	r2, [r0]
 525 0018 1368     		ldr	r3, [r2]
 526 001a 23F00103 		bic	r3, r3, #1
 527 001e 1360     		str	r3, [r2]
 343:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 528              		.loc 1 343 0 discriminator 2
 529 0020 FFF7FEFF 		bl	HAL_QSPI_MspDeInit
 530              	.LVL37:
 346:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 531              		.loc 1 346 0 discriminator 2
 532 0024 0020     		movs	r0, #0
 533 0026 6064     		str	r0, [r4, #68]
 349:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 534              		.loc 1 349 0 discriminator 2
 535 0028 84F84100 		strb	r0, [r4, #65]
 352:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 536              		.loc 1 352 0 discriminator 2
 537 002c 84F84000 		strb	r0, [r4, #64]
 354:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 538              		.loc 1 354 0 discriminator 2
 539 0030 10BD     		pop	{r4, pc}
 540              	.LVL38:
 541              	.L25:
 542              	.LCFI5:
 543              		.cfi_def_cfa_offset 0
 544              		.cfi_restore 4
 545              		.cfi_restore 14
 333:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 546              		.loc 1 333 0
 547 0032 0120     		movs	r0, #1
 548              	.LVL39:
 549 0034 7047     		bx	lr
 550              	.LVL40:
 551              	.L26:
 337:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 552              		.loc 1 337 0
 553 0036 0220     		movs	r0, #2
 554              	.LVL41:
 555 0038 7047     		bx	lr
 556              		.cfi_endproc
 557              	.LFE137:
 559 003a 00BF     		.section	.text.HAL_QSPI_Command,"ax",%progbits
 560              		.align	2
 561              		.global	HAL_QSPI_Command
 562              		.thumb
 563              		.thumb_func
 565              	HAL_QSPI_Command:
 566              	.LFB141:
 644:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 567              		.loc 1 644 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              	.LVL42:
 572 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 573              	.LCFI6:
 574              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc7S4Kq7.s 			page 52


 575              		.cfi_offset 4, -24
 576              		.cfi_offset 5, -20
 577              		.cfi_offset 6, -16
 578              		.cfi_offset 7, -12
 579              		.cfi_offset 8, -8
 580              		.cfi_offset 14, -4
 581 0004 82B0     		sub	sp, sp, #8
 582              	.LCFI7:
 583              		.cfi_def_cfa_offset 32
 584 0006 0446     		mov	r4, r0
 585 0008 8846     		mov	r8, r1
 586 000a 1746     		mov	r7, r2
 587              	.LVL43:
 646:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 588              		.loc 1 646 0
 589 000c FFF7FEFF 		bl	HAL_GetTick
 590              	.LVL44:
 675:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 591              		.loc 1 675 0
 592 0010 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
 593 0014 DBB2     		uxtb	r3, r3
 594 0016 012B     		cmp	r3, #1
 595 0018 37D0     		beq	.L33
 596 001a 0646     		mov	r6, r0
 675:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 597              		.loc 1 675 0 is_stmt 0 discriminator 2
 598 001c 0123     		movs	r3, #1
 599 001e 84F84030 		strb	r3, [r4, #64]
 677:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 600              		.loc 1 677 0 is_stmt 1 discriminator 2
 601 0022 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 602 0026 DBB2     		uxtb	r3, r3
 603 0028 012B     		cmp	r3, #1
 604 002a 28D1     		bne	.L34
 679:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 605              		.loc 1 679 0
 606 002c 0022     		movs	r2, #0
 607 002e 6264     		str	r2, [r4, #68]
 682:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 608              		.loc 1 682 0
 609 0030 0223     		movs	r3, #2
 610 0032 84F84130 		strb	r3, [r4, #65]
 685:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 611              		.loc 1 685 0
 612 0036 0097     		str	r7, [sp]
 613 0038 0346     		mov	r3, r0
 614 003a 2021     		movs	r1, #32
 615 003c 2046     		mov	r0, r4
 616              	.LVL45:
 617 003e FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 618              	.LVL46:
 687:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 619              		.loc 1 687 0
 620 0042 0546     		mov	r5, r0
 621 0044 E0B9     		cbnz	r0, .L31
 690:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 622              		.loc 1 690 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 53


 623 0046 0022     		movs	r2, #0
 624 0048 4146     		mov	r1, r8
 625 004a 2046     		mov	r0, r4
 626              	.LVL47:
 627 004c FFF7FEFF 		bl	QSPI_Config
 628              	.LVL48:
 692:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 629              		.loc 1 692 0
 630 0050 D8F82430 		ldr	r3, [r8, #36]
 631 0054 7BB9     		cbnz	r3, .L32
 696:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 632              		.loc 1 696 0
 633 0056 0097     		str	r7, [sp]
 634 0058 3346     		mov	r3, r6
 635 005a 0122     		movs	r2, #1
 636 005c 0221     		movs	r1, #2
 637 005e 2046     		mov	r0, r4
 638 0060 FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 639              	.LVL49:
 698:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 640              		.loc 1 698 0
 641 0064 0546     		mov	r5, r0
 642 0066 58B9     		cbnz	r0, .L31
 700:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
 643              		.loc 1 700 0
 644 0068 2368     		ldr	r3, [r4]
 645 006a 0222     		movs	r2, #2
 646 006c DA60     		str	r2, [r3, #12]
 703:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 647              		.loc 1 703 0
 648 006e 0123     		movs	r3, #1
 649 0070 84F84130 		strb	r3, [r4, #65]
 650 0074 04E0     		b	.L31
 651              	.LVL50:
 652              	.L32:
 710:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 653              		.loc 1 710 0
 654 0076 0123     		movs	r3, #1
 655 0078 84F84130 		strb	r3, [r4, #65]
 656 007c 00E0     		b	.L31
 657              	.LVL51:
 658              	.L34:
 716:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 659              		.loc 1 716 0
 660 007e 0225     		movs	r5, #2
 661              	.LVL52:
 662              	.L31:
 720:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 663              		.loc 1 720 0
 664 0080 0023     		movs	r3, #0
 665 0082 84F84030 		strb	r3, [r4, #64]
 723:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 666              		.loc 1 723 0
 667 0086 2846     		mov	r0, r5
 668 0088 00E0     		b	.L30
 669              	.LVL53:
 670              	.L33:
ARM GAS  /tmp/cc7S4Kq7.s 			page 54


 675:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 671              		.loc 1 675 0
 672 008a 0220     		movs	r0, #2
 673              	.LVL54:
 674              	.L30:
 724:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 675              		.loc 1 724 0
 676 008c 02B0     		add	sp, sp, #8
 677              	.LCFI8:
 678              		.cfi_def_cfa_offset 24
 679              		@ sp needed
 680 008e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 681              		.cfi_endproc
 682              	.LFE141:
 684 0092 00BF     		.section	.text.HAL_QSPI_Command_IT,"ax",%progbits
 685              		.align	2
 686              		.global	HAL_QSPI_Command_IT
 687              		.thumb
 688              		.thumb_func
 690              	HAL_QSPI_Command_IT:
 691              	.LFB142:
 734:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 692              		.loc 1 734 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
 695              		@ frame_needed = 0, uses_anonymous_args = 0
 696              	.LVL55:
 697 0000 70B5     		push	{r4, r5, r6, lr}
 698              	.LCFI9:
 699              		.cfi_def_cfa_offset 16
 700              		.cfi_offset 4, -16
 701              		.cfi_offset 5, -12
 702              		.cfi_offset 6, -8
 703              		.cfi_offset 14, -4
 704 0002 82B0     		sub	sp, sp, #8
 705              	.LCFI10:
 706              		.cfi_def_cfa_offset 24
 707 0004 0446     		mov	r4, r0
 708 0006 0E46     		mov	r6, r1
 709              	.LVL56:
 736:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 710              		.loc 1 736 0
 711 0008 FFF7FEFF 		bl	HAL_GetTick
 712              	.LVL57:
 765:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 713              		.loc 1 765 0
 714 000c 94F84020 		ldrb	r2, [r4, #64]	@ zero_extendqisi2
 715 0010 D2B2     		uxtb	r2, r2
 716 0012 012A     		cmp	r2, #1
 717 0014 3BD0     		beq	.L42
 765:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 718              		.loc 1 765 0 is_stmt 0 discriminator 2
 719 0016 0122     		movs	r2, #1
 720 0018 84F84020 		strb	r2, [r4, #64]
 767:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 721              		.loc 1 767 0 is_stmt 1 discriminator 2
 722 001c 94F84120 		ldrb	r2, [r4, #65]	@ zero_extendqisi2
ARM GAS  /tmp/cc7S4Kq7.s 			page 55


 723 0020 D2B2     		uxtb	r2, r2
 724 0022 012A     		cmp	r2, #1
 725 0024 2ED1     		bne	.L38
 769:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 726              		.loc 1 769 0
 727 0026 0022     		movs	r2, #0
 728 0028 6264     		str	r2, [r4, #68]
 772:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 729              		.loc 1 772 0
 730 002a 0223     		movs	r3, #2
 731 002c 84F84130 		strb	r3, [r4, #65]
 775:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 732              		.loc 1 775 0
 733 0030 A36C     		ldr	r3, [r4, #72]
 734 0032 0093     		str	r3, [sp]
 735 0034 0346     		mov	r3, r0
 736 0036 2021     		movs	r1, #32
 737 0038 2046     		mov	r0, r4
 738              	.LVL58:
 739 003a FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 740              	.LVL59:
 777:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 741              		.loc 1 777 0
 742 003e 0546     		mov	r5, r0
 743 0040 E0B9     		cbnz	r0, .L39
 779:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 744              		.loc 1 779 0
 745 0042 736A     		ldr	r3, [r6, #36]
 746 0044 13B9     		cbnz	r3, .L40
 782:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 747              		.loc 1 782 0
 748 0046 2368     		ldr	r3, [r4]
 749 0048 0322     		movs	r2, #3
 750 004a DA60     		str	r2, [r3, #12]
 751              	.L40:
 786:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 752              		.loc 1 786 0
 753 004c 0022     		movs	r2, #0
 754 004e 3146     		mov	r1, r6
 755 0050 2046     		mov	r0, r4
 756              	.LVL60:
 757 0052 FFF7FEFF 		bl	QSPI_Config
 758              	.LVL61:
 788:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 759              		.loc 1 788 0
 760 0056 736A     		ldr	r3, [r6, #36]
 761 0058 43B9     		cbnz	r3, .L41
 793:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 762              		.loc 1 793 0
 763 005a 84F84030 		strb	r3, [r4, #64]
 796:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 764              		.loc 1 796 0
 765 005e 2268     		ldr	r2, [r4]
 766 0060 1368     		ldr	r3, [r2]
 767 0062 43F44033 		orr	r3, r3, #196608
 768 0066 1360     		str	r3, [r2]
 775:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
ARM GAS  /tmp/cc7S4Kq7.s 			page 56


 769              		.loc 1 775 0
 770 0068 2846     		mov	r0, r5
 771 006a 11E0     		b	.L37
 772              	.L41:
 801:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 773              		.loc 1 801 0
 774 006c 0123     		movs	r3, #1
 775 006e 84F84130 		strb	r3, [r4, #65]
 804:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 776              		.loc 1 804 0
 777 0072 0023     		movs	r3, #0
 778 0074 84F84030 		strb	r3, [r4, #64]
 775:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 779              		.loc 1 775 0
 780 0078 2846     		mov	r0, r5
 781 007a 09E0     		b	.L37
 782              	.LVL62:
 783              	.L39:
 810:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 784              		.loc 1 810 0
 785 007c 0023     		movs	r3, #0
 786 007e 84F84030 		strb	r3, [r4, #64]
 787 0082 05E0     		b	.L37
 788              	.LVL63:
 789              	.L38:
 818:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 790              		.loc 1 818 0
 791 0084 0023     		movs	r3, #0
 792 0086 84F84030 		strb	r3, [r4, #64]
 815:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 793              		.loc 1 815 0
 794 008a 0220     		movs	r0, #2
 795              	.LVL64:
 796 008c 00E0     		b	.L37
 797              	.LVL65:
 798              	.L42:
 765:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 799              		.loc 1 765 0
 800 008e 0220     		movs	r0, #2
 801              	.LVL66:
 802              	.L37:
 823:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 803              		.loc 1 823 0
 804 0090 02B0     		add	sp, sp, #8
 805              	.LCFI11:
 806              		.cfi_def_cfa_offset 16
 807              		@ sp needed
 808 0092 70BD     		pop	{r4, r5, r6, pc}
 809              		.cfi_endproc
 810              	.LFE142:
 812              		.section	.text.HAL_QSPI_Transmit,"ax",%progbits
 813              		.align	2
 814              		.global	HAL_QSPI_Transmit
 815              		.thumb
 816              		.thumb_func
 818              	HAL_QSPI_Transmit:
 819              	.LFB143:
ARM GAS  /tmp/cc7S4Kq7.s 			page 57


 834:HALLIB/Src/stm32f7xx_hal_qspi.c ****    HAL_StatusTypeDef status = HAL_OK;
 820              		.loc 1 834 0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824              	.LVL67:
 825 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 826              	.LCFI12:
 827              		.cfi_def_cfa_offset 24
 828              		.cfi_offset 4, -24
 829              		.cfi_offset 5, -20
 830              		.cfi_offset 6, -16
 831              		.cfi_offset 7, -12
 832              		.cfi_offset 8, -8
 833              		.cfi_offset 14, -4
 834 0004 82B0     		sub	sp, sp, #8
 835              	.LCFI13:
 836              		.cfi_def_cfa_offset 32
 837 0006 0446     		mov	r4, r0
 838 0008 8846     		mov	r8, r1
 839 000a 1746     		mov	r7, r2
 840              	.LVL68:
 836:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __IO uint32_t *data_reg = &hqspi->Instance->DR;
 841              		.loc 1 836 0
 842 000c FFF7FEFF 		bl	HAL_GetTick
 843              	.LVL69:
 837:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 844              		.loc 1 837 0
 845 0010 2568     		ldr	r5, [r4]
 846              	.LVL70:
 840:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 847              		.loc 1 840 0
 848 0012 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
 849 0016 DBB2     		uxtb	r3, r3
 850 0018 012B     		cmp	r3, #1
 851 001a 50D0     		beq	.L52
 852 001c 0646     		mov	r6, r0
 840:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 853              		.loc 1 840 0 is_stmt 0 discriminator 2
 854 001e 0123     		movs	r3, #1
 855 0020 84F84030 		strb	r3, [r4, #64]
 842:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 856              		.loc 1 842 0 is_stmt 1 discriminator 2
 857 0024 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 858 0028 DBB2     		uxtb	r3, r3
 859 002a 012B     		cmp	r3, #1
 860 002c 41D1     		bne	.L53
 844:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 861              		.loc 1 844 0
 862 002e 0023     		movs	r3, #0
 863 0030 6364     		str	r3, [r4, #68]
 846:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 864              		.loc 1 846 0
 865 0032 B8F1000F 		cmp	r8, #0
 866 0036 36D0     		beq	.L47
 849:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 867              		.loc 1 849 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 58


 868 0038 1223     		movs	r3, #18
 869 003a 84F84130 		strb	r3, [r4, #65]
 852:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 870              		.loc 1 852 0
 871 003e 2B69     		ldr	r3, [r5, #16]
 872 0040 0133     		adds	r3, r3, #1
 873 0042 E362     		str	r3, [r4, #44]
 853:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->pTxBuffPtr = pData;
 874              		.loc 1 853 0
 875 0044 2B69     		ldr	r3, [r5, #16]
 876 0046 0133     		adds	r3, r3, #1
 877 0048 A362     		str	r3, [r4, #40]
 854:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 878              		.loc 1 854 0
 879 004a C4F82480 		str	r8, [r4, #36]
 857:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 880              		.loc 1 857 0
 881 004e 6B69     		ldr	r3, [r5, #20]
 882 0050 23F04063 		bic	r3, r3, #201326592
 883 0054 6B61     		str	r3, [r5, #20]
 835:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
 884              		.loc 1 835 0
 885 0056 0022     		movs	r2, #0
 859:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 886              		.loc 1 859 0
 887 0058 11E0     		b	.L48
 888              	.LVL71:
 889              	.L50:
 862:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 890              		.loc 1 862 0
 891 005a 0097     		str	r7, [sp]
 892 005c 3346     		mov	r3, r6
 893 005e 0122     		movs	r2, #1
 894              	.LVL72:
 895 0060 0421     		movs	r1, #4
 896 0062 2046     		mov	r0, r4
 897 0064 FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 898              	.LVL73:
 864:HALLIB/Src/stm32f7xx_hal_qspi.c ****         { 
 899              		.loc 1 864 0
 900 0068 0246     		mov	r2, r0
 901 006a 58B9     		cbnz	r0, .L49
 869:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->TxXferCount--;
 902              		.loc 1 869 0
 903 006c 636A     		ldr	r3, [r4, #36]
 904 006e 591C     		adds	r1, r3, #1
 905 0070 6162     		str	r1, [r4, #36]
 906 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 907 0074 85F82030 		strb	r3, [r5, #32]
 870:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 908              		.loc 1 870 0
 909 0078 E36A     		ldr	r3, [r4, #44]
 910 007a 013B     		subs	r3, r3, #1
 911 007c E362     		str	r3, [r4, #44]
 912              	.LVL74:
 913              	.L48:
 859:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
ARM GAS  /tmp/cc7S4Kq7.s 			page 59


 914              		.loc 1 859 0
 915 007e E36A     		ldr	r3, [r4, #44]
 916 0080 002B     		cmp	r3, #0
 917 0082 EAD1     		bne	.L50
 918              	.LVL75:
 919              	.L49:
 873:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 920              		.loc 1 873 0
 921 0084 5AB9     		cbnz	r2, .L51
 876:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 922              		.loc 1 876 0
 923 0086 0097     		str	r7, [sp]
 924 0088 3346     		mov	r3, r6
 925 008a 0122     		movs	r2, #1
 926              	.LVL76:
 927 008c 0221     		movs	r1, #2
 928 008e 2046     		mov	r0, r4
 929 0090 FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 930              	.LVL77:
 878:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 931              		.loc 1 878 0
 932 0094 0246     		mov	r2, r0
 933 0096 10B9     		cbnz	r0, .L51
 881:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
 934              		.loc 1 881 0
 935 0098 2368     		ldr	r3, [r4]
 936 009a 0221     		movs	r1, #2
 937 009c D960     		str	r1, [r3, #12]
 938              	.LVL78:
 939              	.L51:
 891:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 940              		.loc 1 891 0
 941 009e 0123     		movs	r3, #1
 942 00a0 84F84130 		strb	r3, [r4, #65]
 943 00a4 06E0     		b	.L46
 944              	.LVL79:
 945              	.L47:
 895:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_ERROR;
 946              		.loc 1 895 0
 947 00a6 636C     		ldr	r3, [r4, #68]
 948 00a8 43F00803 		orr	r3, r3, #8
 949 00ac 6364     		str	r3, [r4, #68]
 950              	.LVL80:
 896:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 951              		.loc 1 896 0
 952 00ae 0122     		movs	r2, #1
 953 00b0 00E0     		b	.L46
 954              	.LVL81:
 955              	.L53:
 901:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 956              		.loc 1 901 0
 957 00b2 0222     		movs	r2, #2
 958              	.LVL82:
 959              	.L46:
 905:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 960              		.loc 1 905 0
 961 00b4 0023     		movs	r3, #0
ARM GAS  /tmp/cc7S4Kq7.s 			page 60


 962 00b6 84F84030 		strb	r3, [r4, #64]
 907:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 963              		.loc 1 907 0
 964 00ba 1046     		mov	r0, r2
 965 00bc 00E0     		b	.L45
 966              	.LVL83:
 967              	.L52:
 840:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 968              		.loc 1 840 0
 969 00be 0220     		movs	r0, #2
 970              	.LVL84:
 971              	.L45:
 908:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 972              		.loc 1 908 0
 973 00c0 02B0     		add	sp, sp, #8
 974              	.LCFI14:
 975              		.cfi_def_cfa_offset 24
 976              		@ sp needed
 977 00c2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 978              		.cfi_endproc
 979              	.LFE143:
 981 00c6 00BF     		.section	.text.HAL_QSPI_Receive,"ax",%progbits
 982              		.align	2
 983              		.global	HAL_QSPI_Receive
 984              		.thumb
 985              		.thumb_func
 987              	HAL_QSPI_Receive:
 988              	.LFB144:
 920:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
 989              		.loc 1 920 0
 990              		.cfi_startproc
 991              		@ args = 0, pretend = 0, frame = 0
 992              		@ frame_needed = 0, uses_anonymous_args = 0
 993              	.LVL85:
 994 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 995              	.LCFI15:
 996              		.cfi_def_cfa_offset 24
 997              		.cfi_offset 4, -24
 998              		.cfi_offset 5, -20
 999              		.cfi_offset 6, -16
 1000              		.cfi_offset 7, -12
 1001              		.cfi_offset 8, -8
 1002              		.cfi_offset 14, -4
 1003 0004 82B0     		sub	sp, sp, #8
 1004              	.LCFI16:
 1005              		.cfi_def_cfa_offset 32
 1006 0006 0446     		mov	r4, r0
 1007 0008 8846     		mov	r8, r1
 1008 000a 1746     		mov	r7, r2
 1009              	.LVL86:
 922:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 1010              		.loc 1 922 0
 1011 000c FFF7FEFF 		bl	HAL_GetTick
 1012              	.LVL87:
 923:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __IO uint32_t *data_reg = &hqspi->Instance->DR;
 1013              		.loc 1 923 0
 1014 0010 2568     		ldr	r5, [r4]
ARM GAS  /tmp/cc7S4Kq7.s 			page 61


 1015 0012 AA69     		ldr	r2, [r5, #24]
 1016              	.LVL88:
 927:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1017              		.loc 1 927 0
 1018 0014 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
 1019 0018 DBB2     		uxtb	r3, r3
 1020 001a 012B     		cmp	r3, #1
 1021 001c 54D0     		beq	.L63
 1022 001e 0646     		mov	r6, r0
 927:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1023              		.loc 1 927 0 is_stmt 0 discriminator 2
 1024 0020 0123     		movs	r3, #1
 1025 0022 84F84030 		strb	r3, [r4, #64]
 929:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 1026              		.loc 1 929 0 is_stmt 1 discriminator 2
 1027 0026 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 1028 002a DBB2     		uxtb	r3, r3
 1029 002c 012B     		cmp	r3, #1
 1030 002e 45D1     		bne	.L64
 931:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(pData != NULL )
 1031              		.loc 1 931 0
 1032 0030 0023     		movs	r3, #0
 1033 0032 6364     		str	r3, [r4, #68]
 932:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 1034              		.loc 1 932 0
 1035 0034 B8F1000F 		cmp	r8, #0
 1036 0038 3AD0     		beq	.L58
 935:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1037              		.loc 1 935 0
 1038 003a 2223     		movs	r3, #34
 1039 003c 84F84130 		strb	r3, [r4, #65]
 938:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 1040              		.loc 1 938 0
 1041 0040 2B69     		ldr	r3, [r5, #16]
 1042 0042 0133     		adds	r3, r3, #1
 1043 0044 A363     		str	r3, [r4, #56]
 939:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->pRxBuffPtr = pData;
 1044              		.loc 1 939 0
 1045 0046 2B69     		ldr	r3, [r5, #16]
 1046 0048 0133     		adds	r3, r3, #1
 1047 004a 6363     		str	r3, [r4, #52]
 940:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1048              		.loc 1 940 0
 1049 004c C4F83080 		str	r8, [r4, #48]
 943:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1050              		.loc 1 943 0
 1051 0050 6B69     		ldr	r3, [r5, #20]
 1052 0052 23F04063 		bic	r3, r3, #201326592
 1053 0056 43F08063 		orr	r3, r3, #67108864
 1054 005a 6B61     		str	r3, [r5, #20]
 946:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 1055              		.loc 1 946 0
 1056 005c 2368     		ldr	r3, [r4]
 1057 005e 9A61     		str	r2, [r3, #24]
 921:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
 1058              		.loc 1 921 0
 1059 0060 0022     		movs	r2, #0
ARM GAS  /tmp/cc7S4Kq7.s 			page 62


 1060              	.LVL89:
 948:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1061              		.loc 1 948 0
 1062 0062 11E0     		b	.L59
 1063              	.LVL90:
 1064              	.L61:
 951:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1065              		.loc 1 951 0
 1066 0064 0097     		str	r7, [sp]
 1067 0066 3346     		mov	r3, r6
 1068 0068 0122     		movs	r2, #1
 1069              	.LVL91:
 1070 006a 0621     		movs	r1, #6
 1071 006c 2046     		mov	r0, r4
 1072 006e FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 1073              	.LVL92:
 953:HALLIB/Src/stm32f7xx_hal_qspi.c ****         { 
 1074              		.loc 1 953 0
 1075 0072 0246     		mov	r2, r0
 1076 0074 58B9     		cbnz	r0, .L60
 958:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->RxXferCount--;
 1077              		.loc 1 958 0
 1078 0076 236B     		ldr	r3, [r4, #48]
 1079 0078 591C     		adds	r1, r3, #1
 1080 007a 2163     		str	r1, [r4, #48]
 1081 007c 95F82010 		ldrb	r1, [r5, #32]	@ zero_extendqisi2
 1082 0080 1970     		strb	r1, [r3]
 959:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 1083              		.loc 1 959 0
 1084 0082 A36B     		ldr	r3, [r4, #56]
 1085 0084 013B     		subs	r3, r3, #1
 1086 0086 A363     		str	r3, [r4, #56]
 1087              	.LVL93:
 1088              	.L59:
 948:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1089              		.loc 1 948 0
 1090 0088 A36B     		ldr	r3, [r4, #56]
 1091 008a 002B     		cmp	r3, #0
 1092 008c EAD1     		bne	.L61
 1093              	.LVL94:
 1094              	.L60:
 962:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1095              		.loc 1 962 0
 1096 008e 5AB9     		cbnz	r2, .L62
 965:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1097              		.loc 1 965 0
 1098 0090 0097     		str	r7, [sp]
 1099 0092 3346     		mov	r3, r6
 1100 0094 0122     		movs	r2, #1
 1101              	.LVL95:
 1102 0096 0221     		movs	r1, #2
 1103 0098 2046     		mov	r0, r4
 1104 009a FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 1105              	.LVL96:
 967:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 1106              		.loc 1 967 0
 1107 009e 0246     		mov	r2, r0
ARM GAS  /tmp/cc7S4Kq7.s 			page 63


 1108 00a0 10B9     		cbnz	r0, .L62
 970:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
 1109              		.loc 1 970 0
 1110 00a2 2368     		ldr	r3, [r4]
 1111 00a4 0221     		movs	r1, #2
 1112 00a6 D960     		str	r1, [r3, #12]
 1113              	.LVL97:
 1114              	.L62:
 980:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 1115              		.loc 1 980 0
 1116 00a8 0123     		movs	r3, #1
 1117 00aa 84F84130 		strb	r3, [r4, #65]
 1118 00ae 06E0     		b	.L57
 1119              	.LVL98:
 1120              	.L58:
 984:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_ERROR;
 1121              		.loc 1 984 0
 1122 00b0 636C     		ldr	r3, [r4, #68]
 1123 00b2 43F00803 		orr	r3, r3, #8
 1124 00b6 6364     		str	r3, [r4, #68]
 1125              	.LVL99:
 985:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 1126              		.loc 1 985 0
 1127 00b8 0122     		movs	r2, #1
 1128              	.LVL100:
 1129 00ba 00E0     		b	.L57
 1130              	.LVL101:
 1131              	.L64:
 990:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 1132              		.loc 1 990 0
 1133 00bc 0222     		movs	r2, #2
 1134              	.LVL102:
 1135              	.L57:
 994:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1136              		.loc 1 994 0
 1137 00be 0023     		movs	r3, #0
 1138 00c0 84F84030 		strb	r3, [r4, #64]
 996:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 1139              		.loc 1 996 0
 1140 00c4 1046     		mov	r0, r2
 1141 00c6 00E0     		b	.L56
 1142              	.LVL103:
 1143              	.L63:
 927:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1144              		.loc 1 927 0
 1145 00c8 0220     		movs	r0, #2
 1146              	.LVL104:
 1147              	.L56:
 997:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1148              		.loc 1 997 0
 1149 00ca 02B0     		add	sp, sp, #8
 1150              	.LCFI17:
 1151              		.cfi_def_cfa_offset 24
 1152              		@ sp needed
 1153 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1154              		.cfi_endproc
 1155              	.LFE144:
ARM GAS  /tmp/cc7S4Kq7.s 			page 64


 1157              		.section	.text.HAL_QSPI_Transmit_IT,"ax",%progbits
 1158              		.align	2
 1159              		.global	HAL_QSPI_Transmit_IT
 1160              		.thumb
 1161              		.thumb_func
 1163              	HAL_QSPI_Transmit_IT:
 1164              	.LFB145:
1007:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
 1165              		.loc 1 1007 0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 0
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 1169              		@ link register save eliminated.
 1170              	.LVL105:
1011:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1171              		.loc 1 1011 0
 1172 0000 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 1173 0004 DBB2     		uxtb	r3, r3
 1174 0006 012B     		cmp	r3, #1
 1175 0008 34D0     		beq	.L70
1011:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1176              		.loc 1 1011 0 is_stmt 0 discriminator 2
 1177 000a 0123     		movs	r3, #1
 1178 000c 80F84030 		strb	r3, [r0, #64]
1013:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 1179              		.loc 1 1013 0 is_stmt 1 discriminator 2
 1180 0010 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 1181 0014 DBB2     		uxtb	r3, r3
 1182 0016 012B     		cmp	r3, #1
 1183 0018 27D1     		bne	.L68
1015:HALLIB/Src/stm32f7xx_hal_qspi.c ****     if(pData != NULL )
 1184              		.loc 1 1015 0
 1185 001a 0023     		movs	r3, #0
 1186 001c 4364     		str	r3, [r0, #68]
1016:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 1187              		.loc 1 1016 0
 1188 001e D9B1     		cbz	r1, .L69
1019:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1189              		.loc 1 1019 0
 1190 0020 1223     		movs	r3, #18
 1191 0022 80F84130 		strb	r3, [r0, #65]
1022:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 1192              		.loc 1 1022 0
 1193 0026 0368     		ldr	r3, [r0]
 1194 0028 1A69     		ldr	r2, [r3, #16]
 1195 002a 0132     		adds	r2, r2, #1
 1196 002c C262     		str	r2, [r0, #44]
1023:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->pTxBuffPtr = pData;
 1197              		.loc 1 1023 0
 1198 002e 1A69     		ldr	r2, [r3, #16]
 1199 0030 0132     		adds	r2, r2, #1
 1200 0032 8262     		str	r2, [r0, #40]
1024:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1201              		.loc 1 1024 0
 1202 0034 4162     		str	r1, [r0, #36]
1027:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1203              		.loc 1 1027 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 65


 1204 0036 5A69     		ldr	r2, [r3, #20]
 1205 0038 22F04062 		bic	r2, r2, #201326592
 1206 003c 5A61     		str	r2, [r3, #20]
1030:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1207              		.loc 1 1030 0
 1208 003e 0368     		ldr	r3, [r0]
 1209 0040 0322     		movs	r2, #3
 1210 0042 DA60     		str	r2, [r3, #12]
1033:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 1211              		.loc 1 1033 0
 1212 0044 0023     		movs	r3, #0
 1213 0046 80F84030 		strb	r3, [r0, #64]
1036:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 1214              		.loc 1 1036 0
 1215 004a 0168     		ldr	r1, [r0]
 1216              	.LVL106:
 1217 004c 0A68     		ldr	r2, [r1]
 1218 004e 42F4E022 		orr	r2, r2, #458752
 1219 0052 0A60     		str	r2, [r1]
1008:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1220              		.loc 1 1008 0
 1221 0054 1846     		mov	r0, r3
 1222              	.LVL107:
 1223 0056 7047     		bx	lr
 1224              	.LVL108:
 1225              	.L69:
1041:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_ERROR;
 1226              		.loc 1 1041 0
 1227 0058 436C     		ldr	r3, [r0, #68]
 1228 005a 43F00803 		orr	r3, r3, #8
 1229 005e 4364     		str	r3, [r0, #68]
 1230              	.LVL109:
1045:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 1231              		.loc 1 1045 0
 1232 0060 0023     		movs	r3, #0
 1233 0062 80F84030 		strb	r3, [r0, #64]
1042:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1234              		.loc 1 1042 0
 1235 0066 0120     		movs	r0, #1
 1236              	.LVL110:
 1237 0068 7047     		bx	lr
 1238              	.LVL111:
 1239              	.L68:
1053:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 1240              		.loc 1 1053 0
 1241 006a 0023     		movs	r3, #0
 1242 006c 80F84030 		strb	r3, [r0, #64]
1050:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1243              		.loc 1 1050 0
 1244 0070 0220     		movs	r0, #2
 1245              	.LVL112:
 1246 0072 7047     		bx	lr
 1247              	.LVL113:
 1248              	.L70:
1011:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1249              		.loc 1 1011 0
 1250 0074 0220     		movs	r0, #2
ARM GAS  /tmp/cc7S4Kq7.s 			page 66


 1251              	.LVL114:
1057:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1252              		.loc 1 1057 0
 1253 0076 7047     		bx	lr
 1254              		.cfi_endproc
 1255              	.LFE145:
 1257              		.section	.text.HAL_QSPI_Receive_IT,"ax",%progbits
 1258              		.align	2
 1259              		.global	HAL_QSPI_Receive_IT
 1260              		.thumb
 1261              		.thumb_func
 1263              	HAL_QSPI_Receive_IT:
 1264              	.LFB146:
1067:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
 1265              		.loc 1 1067 0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 0
 1268              		@ frame_needed = 0, uses_anonymous_args = 0
 1269              		@ link register save eliminated.
 1270              	.LVL115:
 1271 0000 10B4     		push	{r4}
 1272              	.LCFI18:
 1273              		.cfi_def_cfa_offset 4
 1274              		.cfi_offset 4, -4
 1275              	.LVL116:
1069:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1276              		.loc 1 1069 0
 1277 0002 0268     		ldr	r2, [r0]
 1278 0004 9469     		ldr	r4, [r2, #24]
 1279              	.LVL117:
1072:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1280              		.loc 1 1072 0
 1281 0006 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 1282 000a DBB2     		uxtb	r3, r3
 1283 000c 012B     		cmp	r3, #1
 1284 000e 37D0     		beq	.L75
1072:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1285              		.loc 1 1072 0 is_stmt 0 discriminator 2
 1286 0010 0123     		movs	r3, #1
 1287 0012 80F84030 		strb	r3, [r0, #64]
1074:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 1288              		.loc 1 1074 0 is_stmt 1 discriminator 2
 1289 0016 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 1290 001a DBB2     		uxtb	r3, r3
 1291 001c 012B     		cmp	r3, #1
 1292 001e 2AD1     		bne	.L73
1076:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1293              		.loc 1 1076 0
 1294 0020 0023     		movs	r3, #0
 1295 0022 4364     		str	r3, [r0, #68]
1078:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 1296              		.loc 1 1078 0
 1297 0024 F1B1     		cbz	r1, .L74
1081:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1298              		.loc 1 1081 0
 1299 0026 2223     		movs	r3, #34
 1300 0028 80F84130 		strb	r3, [r0, #65]
ARM GAS  /tmp/cc7S4Kq7.s 			page 67


1084:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 1301              		.loc 1 1084 0
 1302 002c 1369     		ldr	r3, [r2, #16]
 1303 002e 0133     		adds	r3, r3, #1
 1304 0030 8363     		str	r3, [r0, #56]
1085:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->pRxBuffPtr = pData;
 1305              		.loc 1 1085 0
 1306 0032 1369     		ldr	r3, [r2, #16]
 1307 0034 0133     		adds	r3, r3, #1
 1308 0036 4363     		str	r3, [r0, #52]
1086:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1309              		.loc 1 1086 0
 1310 0038 0163     		str	r1, [r0, #48]
1089:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1311              		.loc 1 1089 0
 1312 003a 5369     		ldr	r3, [r2, #20]
 1313 003c 23F04063 		bic	r3, r3, #201326592
 1314 0040 43F08063 		orr	r3, r3, #67108864
 1315 0044 5361     		str	r3, [r2, #20]
1092:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1316              		.loc 1 1092 0
 1317 0046 0368     		ldr	r3, [r0]
 1318 0048 9C61     		str	r4, [r3, #24]
1095:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1319              		.loc 1 1095 0
 1320 004a 0368     		ldr	r3, [r0]
 1321 004c 0322     		movs	r2, #3
 1322 004e DA60     		str	r2, [r3, #12]
1098:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1323              		.loc 1 1098 0
 1324 0050 0023     		movs	r3, #0
 1325 0052 80F84030 		strb	r3, [r0, #64]
1101:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 1326              		.loc 1 1101 0
 1327 0056 0168     		ldr	r1, [r0]
 1328              	.LVL118:
 1329 0058 0A68     		ldr	r2, [r1]
 1330 005a 42F4E022 		orr	r2, r2, #458752
 1331 005e 0A60     		str	r2, [r1]
1068:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 1332              		.loc 1 1068 0
 1333 0060 1846     		mov	r0, r3
 1334              	.LVL119:
 1335 0062 0EE0     		b	.L72
 1336              	.LVL120:
 1337              	.L74:
1105:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_ERROR;
 1338              		.loc 1 1105 0
 1339 0064 436C     		ldr	r3, [r0, #68]
 1340 0066 43F00803 		orr	r3, r3, #8
 1341 006a 4364     		str	r3, [r0, #68]
 1342              	.LVL121:
1109:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 1343              		.loc 1 1109 0
 1344 006c 0023     		movs	r3, #0
 1345 006e 80F84030 		strb	r3, [r0, #64]
1106:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
ARM GAS  /tmp/cc7S4Kq7.s 			page 68


 1346              		.loc 1 1106 0
 1347 0072 0120     		movs	r0, #1
 1348              	.LVL122:
 1349 0074 05E0     		b	.L72
 1350              	.LVL123:
 1351              	.L73:
1117:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 1352              		.loc 1 1117 0
 1353 0076 0023     		movs	r3, #0
 1354 0078 80F84030 		strb	r3, [r0, #64]
1114:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1355              		.loc 1 1114 0
 1356 007c 0220     		movs	r0, #2
 1357              	.LVL124:
 1358 007e 00E0     		b	.L72
 1359              	.LVL125:
 1360              	.L75:
1072:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1361              		.loc 1 1072 0
 1362 0080 0220     		movs	r0, #2
 1363              	.LVL126:
 1364              	.L72:
1121:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1365              		.loc 1 1121 0
 1366 0082 5DF8044B 		ldr	r4, [sp], #4
 1367              	.LCFI19:
 1368              		.cfi_restore 4
 1369              		.cfi_def_cfa_offset 0
 1370              	.LVL127:
 1371 0086 7047     		bx	lr
 1372              		.cfi_endproc
 1373              	.LFE146:
 1375              		.section	.text.HAL_QSPI_Transmit_DMA,"ax",%progbits
 1376              		.align	2
 1377              		.global	HAL_QSPI_Transmit_DMA
 1378              		.thumb
 1379              		.thumb_func
 1381              	HAL_QSPI_Transmit_DMA:
 1382              	.LFB147:
1135:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
 1383              		.loc 1 1135 0
 1384              		.cfi_startproc
 1385              		@ args = 0, pretend = 0, frame = 0
 1386              		@ frame_needed = 0, uses_anonymous_args = 0
 1387              	.LVL128:
 1388 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1389              	.LCFI20:
 1390              		.cfi_def_cfa_offset 24
 1391              		.cfi_offset 3, -24
 1392              		.cfi_offset 4, -20
 1393              		.cfi_offset 5, -16
 1394              		.cfi_offset 6, -12
 1395              		.cfi_offset 7, -8
 1396              		.cfi_offset 14, -4
 1397              	.LVL129:
1138:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1398              		.loc 1 1138 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 69


 1399 0002 0568     		ldr	r5, [r0]
 1400 0004 2B69     		ldr	r3, [r5, #16]
 1401 0006 5A1C     		adds	r2, r3, #1
 1402              	.LVL130:
1141:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1403              		.loc 1 1141 0
 1404 0008 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 1405 000c DBB2     		uxtb	r3, r3
 1406 000e 012B     		cmp	r3, #1
 1407 0010 00F08A80 		beq	.L88
1141:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1408              		.loc 1 1141 0 is_stmt 0 discriminator 2
 1409 0014 0123     		movs	r3, #1
 1410 0016 80F84030 		strb	r3, [r0, #64]
1143:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 1411              		.loc 1 1143 0 is_stmt 1 discriminator 2
 1412 001a 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 1413 001e DBB2     		uxtb	r3, r3
 1414 0020 012B     		cmp	r3, #1
 1415 0022 7CD1     		bne	.L79
1146:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1416              		.loc 1 1146 0
 1417 0024 0023     		movs	r3, #0
 1418 0026 4364     		str	r3, [r0, #68]
1148:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 1419              		.loc 1 1148 0
 1420 0028 0029     		cmp	r1, #0
 1421 002a 6FD0     		beq	.L80
1151:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1422              		.loc 1 1151 0
 1423 002c C36B     		ldr	r3, [r0, #60]
 1424 002e 5B69     		ldr	r3, [r3, #20]
 1425 0030 13B9     		cbnz	r3, .L81
1153:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 1426              		.loc 1 1153 0
 1427 0032 C262     		str	r2, [r0, #44]
1136:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t *tmp;
 1428              		.loc 1 1136 0
 1429 0034 0024     		movs	r4, #0
 1430 0036 2EE0     		b	.L82
 1431              	.L81:
1155:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1432              		.loc 1 1155 0
 1433 0038 B3F5006F 		cmp	r3, #2048
 1434 003c 13D1     		bne	.L83
1157:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 1435              		.loc 1 1157 0
 1436 003e 12F0010F 		tst	r2, #1
 1437 0042 03D1     		bne	.L84
1157:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 1438              		.loc 1 1157 0 is_stmt 0 discriminator 1
 1439 0044 8368     		ldr	r3, [r0, #8]
 1440 0046 13F0010F 		tst	r3, #1
 1441 004a 08D0     		beq	.L85
 1442              	.L84:
1161:HALLIB/Src/stm32f7xx_hal_qspi.c ****           status = HAL_ERROR;
 1443              		.loc 1 1161 0 is_stmt 1
ARM GAS  /tmp/cc7S4Kq7.s 			page 70


 1444 004c 436C     		ldr	r3, [r0, #68]
 1445 004e 43F00803 		orr	r3, r3, #8
 1446 0052 4364     		str	r3, [r0, #68]
 1447              	.LVL131:
1165:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1448              		.loc 1 1165 0
 1449 0054 0023     		movs	r3, #0
 1450 0056 80F84030 		strb	r3, [r0, #64]
1162:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
 1451              		.loc 1 1162 0
 1452 005a 0124     		movs	r4, #1
1165:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1453              		.loc 1 1165 0
 1454 005c 1BE0     		b	.L82
 1455              	.LVL132:
 1456              	.L85:
1169:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1457              		.loc 1 1169 0
 1458 005e 5308     		lsrs	r3, r2, #1
 1459 0060 C362     		str	r3, [r0, #44]
1136:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t *tmp;
 1460              		.loc 1 1136 0
 1461 0062 0024     		movs	r4, #0
 1462 0064 17E0     		b	.L82
 1463              	.L83:
1172:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1464              		.loc 1 1172 0
 1465 0066 B3F5805F 		cmp	r3, #4096
 1466 006a 13D1     		bne	.L89
1174:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 1467              		.loc 1 1174 0
 1468 006c 12F0030F 		tst	r2, #3
 1469 0070 03D1     		bne	.L86
1174:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 1470              		.loc 1 1174 0 is_stmt 0 discriminator 1
 1471 0072 8368     		ldr	r3, [r0, #8]
 1472 0074 13F0030F 		tst	r3, #3
 1473 0078 08D0     		beq	.L87
 1474              	.L86:
1178:HALLIB/Src/stm32f7xx_hal_qspi.c ****           status = HAL_ERROR;
 1475              		.loc 1 1178 0 is_stmt 1
 1476 007a 436C     		ldr	r3, [r0, #68]
 1477 007c 43F00803 		orr	r3, r3, #8
 1478 0080 4364     		str	r3, [r0, #68]
 1479              	.LVL133:
1182:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1480              		.loc 1 1182 0
 1481 0082 0023     		movs	r3, #0
 1482 0084 80F84030 		strb	r3, [r0, #64]
1179:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
 1483              		.loc 1 1179 0
 1484 0088 0124     		movs	r4, #1
1182:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1485              		.loc 1 1182 0
 1486 008a 04E0     		b	.L82
 1487              	.LVL134:
 1488              	.L87:
ARM GAS  /tmp/cc7S4Kq7.s 			page 71


1186:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1489              		.loc 1 1186 0
 1490 008c 9308     		lsrs	r3, r2, #2
 1491 008e C362     		str	r3, [r0, #44]
1136:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t *tmp;
 1492              		.loc 1 1136 0
 1493 0090 0024     		movs	r4, #0
 1494 0092 00E0     		b	.L82
 1495              	.L89:
 1496 0094 0024     		movs	r4, #0
 1497              	.LVL135:
 1498              	.L82:
1190:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1499              		.loc 1 1190 0
 1500 0096 002C     		cmp	r4, #0
 1501 0098 48D1     		bne	.L90
 1502 009a 0646     		mov	r6, r0
1194:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1503              		.loc 1 1194 0
 1504 009c 1223     		movs	r3, #18
 1505 009e 80F84130 		strb	r3, [r0, #65]
1197:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1506              		.loc 1 1197 0
 1507 00a2 0323     		movs	r3, #3
 1508 00a4 EB60     		str	r3, [r5, #12]
1200:HALLIB/Src/stm32f7xx_hal_qspi.c ****       hqspi->pTxBuffPtr = pData;
 1509              		.loc 1 1200 0
 1510 00a6 C36A     		ldr	r3, [r0, #44]
 1511 00a8 8362     		str	r3, [r0, #40]
1201:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1512              		.loc 1 1201 0
 1513 00aa 4162     		str	r1, [r0, #36]
1204:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1514              		.loc 1 1204 0
 1515 00ac 0268     		ldr	r2, [r0]
 1516              	.LVL136:
 1517 00ae 5369     		ldr	r3, [r2, #20]
 1518 00b0 23F04063 		bic	r3, r3, #201326592
 1519 00b4 5361     		str	r3, [r2, #20]
1207:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1520              		.loc 1 1207 0
 1521 00b6 C36B     		ldr	r3, [r0, #60]
 1522 00b8 1D4A     		ldr	r2, .L92
 1523 00ba DA63     		str	r2, [r3, #60]
1210:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1524              		.loc 1 1210 0
 1525 00bc C36B     		ldr	r3, [r0, #60]
 1526 00be 1D4A     		ldr	r2, .L92+4
 1527 00c0 1A64     		str	r2, [r3, #64]
1213:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 1528              		.loc 1 1213 0
 1529 00c2 C36B     		ldr	r3, [r0, #60]
 1530 00c4 1C4A     		ldr	r2, .L92+8
 1531 00c6 DA64     		str	r2, [r3, #76]
1216:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1532              		.loc 1 1216 0
 1533 00c8 C36B     		ldr	r3, [r0, #60]
ARM GAS  /tmp/cc7S4Kq7.s 			page 72


 1534 00ca 0025     		movs	r5, #0
 1535 00cc 1D65     		str	r5, [r3, #80]
1219:HALLIB/Src/stm32f7xx_hal_qspi.c ****       MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
 1536              		.loc 1 1219 0
 1537 00ce C36B     		ldr	r3, [r0, #60]
 1538 00d0 4022     		movs	r2, #64
 1539 00d2 9A60     		str	r2, [r3, #8]
1220:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1540              		.loc 1 1220 0
 1541 00d4 C76B     		ldr	r7, [r0, #60]
 1542 00d6 3868     		ldr	r0, [r7]
 1543              	.LVL137:
 1544 00d8 0368     		ldr	r3, [r0]
 1545 00da 23F0C002 		bic	r2, r3, #192
 1546 00de BB68     		ldr	r3, [r7, #8]
 1547 00e0 1343     		orrs	r3, r3, r2
 1548 00e2 0360     		str	r3, [r0]
 1549              	.LVL138:
1224:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1550              		.loc 1 1224 0
 1551 00e4 3268     		ldr	r2, [r6]
 1552 00e6 B36A     		ldr	r3, [r6, #40]
 1553 00e8 2032     		adds	r2, r2, #32
 1554 00ea F06B     		ldr	r0, [r6, #60]
 1555 00ec FFF7FEFF 		bl	HAL_DMA_Start_IT
 1556              	.LVL139:
1227:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1557              		.loc 1 1227 0
 1558 00f0 86F84050 		strb	r5, [r6, #64]
1230:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1559              		.loc 1 1230 0
 1560 00f4 3268     		ldr	r2, [r6]
 1561 00f6 1368     		ldr	r3, [r2]
 1562 00f8 43F48033 		orr	r3, r3, #65536
 1563 00fc 1360     		str	r3, [r2]
1233:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 1564              		.loc 1 1233 0
 1565 00fe 3268     		ldr	r2, [r6]
 1566 0100 1368     		ldr	r3, [r2]
 1567 0102 43F00403 		orr	r3, r3, #4
 1568 0106 1360     		str	r3, [r2]
 1569 0108 2046     		mov	r0, r4
 1570 010a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1571              	.LVL140:
 1572              	.L80:
1238:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 1573              		.loc 1 1238 0
 1574 010c 436C     		ldr	r3, [r0, #68]
 1575 010e 43F00803 		orr	r3, r3, #8
 1576 0112 4364     		str	r3, [r0, #68]
 1577              	.LVL141:
1243:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 1578              		.loc 1 1243 0
 1579 0114 0023     		movs	r3, #0
 1580 0116 80F84030 		strb	r3, [r0, #64]
1240:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1581              		.loc 1 1240 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 73


 1582 011a 0120     		movs	r0, #1
 1583              	.LVL142:
 1584 011c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1585              	.LVL143:
 1586              	.L79:
1251:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 1587              		.loc 1 1251 0
 1588 011e 0023     		movs	r3, #0
 1589 0120 80F84030 		strb	r3, [r0, #64]
1248:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1590              		.loc 1 1248 0
 1591 0124 0220     		movs	r0, #2
 1592              	.LVL144:
 1593 0126 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1594              	.LVL145:
 1595              	.L88:
1141:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1596              		.loc 1 1141 0
 1597 0128 0220     		movs	r0, #2
 1598              	.LVL146:
 1599 012a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1600              	.LVL147:
 1601              	.L90:
 1602 012c 2046     		mov	r0, r4
 1603              	.LVL148:
1255:HALLIB/Src/stm32f7xx_hal_qspi.c ****                           
 1604              		.loc 1 1255 0
 1605 012e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1606              	.LVL149:
 1607              	.L93:
 1608              		.align	2
 1609              	.L92:
 1610 0130 00000000 		.word	QSPI_DMATxCplt
 1611 0134 00000000 		.word	QSPI_DMATxHalfCplt
 1612 0138 00000000 		.word	QSPI_DMAError
 1613              		.cfi_endproc
 1614              	.LFE147:
 1616              		.section	.text.HAL_QSPI_Receive_DMA,"ax",%progbits
 1617              		.align	2
 1618              		.global	HAL_QSPI_Receive_DMA
 1619              		.thumb
 1620              		.thumb_func
 1622              	HAL_QSPI_Receive_DMA:
 1623              	.LFB148:
1269:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
 1624              		.loc 1 1269 0
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 0
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 1628              	.LVL150:
 1629 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1630              	.LCFI21:
 1631              		.cfi_def_cfa_offset 24
 1632              		.cfi_offset 3, -24
 1633              		.cfi_offset 4, -20
 1634              		.cfi_offset 5, -16
 1635              		.cfi_offset 6, -12
ARM GAS  /tmp/cc7S4Kq7.s 			page 74


 1636              		.cfi_offset 7, -8
 1637              		.cfi_offset 14, -4
 1638              	.LVL151:
1272:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1);
 1639              		.loc 1 1272 0
 1640 0002 0668     		ldr	r6, [r0]
 1641 0004 B569     		ldr	r5, [r6, #24]
 1642              	.LVL152:
1273:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1643              		.loc 1 1273 0
 1644 0006 3369     		ldr	r3, [r6, #16]
 1645 0008 5C1C     		adds	r4, r3, #1
 1646              	.LVL153:
1276:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1647              		.loc 1 1276 0
 1648 000a 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 1649 000e DBB2     		uxtb	r3, r3
 1650 0010 012B     		cmp	r3, #1
 1651 0012 00F09280 		beq	.L105
1276:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1652              		.loc 1 1276 0 is_stmt 0 discriminator 2
 1653 0016 0123     		movs	r3, #1
 1654 0018 80F84030 		strb	r3, [r0, #64]
1278:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 1655              		.loc 1 1278 0 is_stmt 1 discriminator 2
 1656 001c 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 1657 0020 DBB2     		uxtb	r3, r3
 1658 0022 012B     		cmp	r3, #1
 1659 0024 40F08480 		bne	.L96
1280:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1660              		.loc 1 1280 0
 1661 0028 0023     		movs	r3, #0
 1662 002a 4364     		str	r3, [r0, #68]
1282:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 1663              		.loc 1 1282 0
 1664 002c 0029     		cmp	r1, #0
 1665 002e 76D0     		beq	.L97
1285:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1666              		.loc 1 1285 0
 1667 0030 C36B     		ldr	r3, [r0, #60]
 1668 0032 5B69     		ldr	r3, [r3, #20]
 1669 0034 13B9     		cbnz	r3, .L98
1287:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 1670              		.loc 1 1287 0
 1671 0036 8463     		str	r4, [r0, #56]
1270:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t *tmp;
 1672              		.loc 1 1270 0
 1673 0038 0024     		movs	r4, #0
 1674              	.LVL154:
 1675 003a 2EE0     		b	.L99
 1676              	.LVL155:
 1677              	.L98:
1289:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1678              		.loc 1 1289 0
 1679 003c B3F5006F 		cmp	r3, #2048
 1680 0040 13D1     		bne	.L100
1291:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
ARM GAS  /tmp/cc7S4Kq7.s 			page 75


 1681              		.loc 1 1291 0
 1682 0042 14F0010F 		tst	r4, #1
 1683 0046 03D1     		bne	.L101
1291:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 1684              		.loc 1 1291 0 is_stmt 0 discriminator 1
 1685 0048 8368     		ldr	r3, [r0, #8]
 1686 004a 13F0010F 		tst	r3, #1
 1687 004e 08D0     		beq	.L102
 1688              	.L101:
1295:HALLIB/Src/stm32f7xx_hal_qspi.c ****           status = HAL_ERROR;
 1689              		.loc 1 1295 0 is_stmt 1
 1690 0050 436C     		ldr	r3, [r0, #68]
 1691 0052 43F00803 		orr	r3, r3, #8
 1692 0056 4364     		str	r3, [r0, #68]
 1693              	.LVL156:
1299:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1694              		.loc 1 1299 0
 1695 0058 0023     		movs	r3, #0
 1696 005a 80F84030 		strb	r3, [r0, #64]
1296:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
 1697              		.loc 1 1296 0
 1698 005e 0124     		movs	r4, #1
 1699              	.LVL157:
1299:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1700              		.loc 1 1299 0
 1701 0060 1BE0     		b	.L99
 1702              	.LVL158:
 1703              	.L102:
1303:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1704              		.loc 1 1303 0
 1705 0062 6308     		lsrs	r3, r4, #1
 1706 0064 8363     		str	r3, [r0, #56]
1270:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t *tmp;
 1707              		.loc 1 1270 0
 1708 0066 0024     		movs	r4, #0
 1709              	.LVL159:
 1710 0068 17E0     		b	.L99
 1711              	.LVL160:
 1712              	.L100:
1306:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1713              		.loc 1 1306 0
 1714 006a B3F5805F 		cmp	r3, #4096
 1715 006e 13D1     		bne	.L106
1308:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 1716              		.loc 1 1308 0
 1717 0070 14F0030F 		tst	r4, #3
 1718 0074 03D1     		bne	.L103
1308:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 1719              		.loc 1 1308 0 is_stmt 0 discriminator 1
 1720 0076 8368     		ldr	r3, [r0, #8]
 1721 0078 13F0030F 		tst	r3, #3
 1722 007c 08D0     		beq	.L104
 1723              	.L103:
1312:HALLIB/Src/stm32f7xx_hal_qspi.c ****           status = HAL_ERROR;
 1724              		.loc 1 1312 0 is_stmt 1
 1725 007e 436C     		ldr	r3, [r0, #68]
 1726 0080 43F00803 		orr	r3, r3, #8
ARM GAS  /tmp/cc7S4Kq7.s 			page 76


 1727 0084 4364     		str	r3, [r0, #68]
 1728              	.LVL161:
1316:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1729              		.loc 1 1316 0
 1730 0086 0023     		movs	r3, #0
 1731 0088 80F84030 		strb	r3, [r0, #64]
1313:HALLIB/Src/stm32f7xx_hal_qspi.c ****           
 1732              		.loc 1 1313 0
 1733 008c 0124     		movs	r4, #1
 1734              	.LVL162:
1316:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1735              		.loc 1 1316 0
 1736 008e 04E0     		b	.L99
 1737              	.LVL163:
 1738              	.L104:
1320:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 1739              		.loc 1 1320 0
 1740 0090 A308     		lsrs	r3, r4, #2
 1741 0092 8363     		str	r3, [r0, #56]
1270:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t *tmp;
 1742              		.loc 1 1270 0
 1743 0094 0024     		movs	r4, #0
 1744              	.LVL164:
 1745 0096 00E0     		b	.L99
 1746              	.LVL165:
 1747              	.L106:
 1748 0098 0024     		movs	r4, #0
 1749              	.LVL166:
 1750              	.L99:
1324:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1751              		.loc 1 1324 0
 1752 009a 002C     		cmp	r4, #0
 1753 009c 4FD1     		bne	.L107
 1754 009e 0A46     		mov	r2, r1
 1755 00a0 0746     		mov	r7, r0
1328:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1756              		.loc 1 1328 0
 1757 00a2 2223     		movs	r3, #34
 1758 00a4 80F84130 		strb	r3, [r0, #65]
1331:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1759              		.loc 1 1331 0
 1760 00a8 0323     		movs	r3, #3
 1761 00aa F360     		str	r3, [r6, #12]
1334:HALLIB/Src/stm32f7xx_hal_qspi.c ****         hqspi->pRxBuffPtr = pData;
 1762              		.loc 1 1334 0
 1763 00ac 836B     		ldr	r3, [r0, #56]
 1764 00ae 4363     		str	r3, [r0, #52]
1335:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1765              		.loc 1 1335 0
 1766 00b0 3963     		str	r1, [r7, #48]
1338:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1767              		.loc 1 1338 0
 1768 00b2 C36B     		ldr	r3, [r0, #60]
 1769 00b4 2349     		ldr	r1, .L109
 1770              	.LVL167:
 1771 00b6 D963     		str	r1, [r3, #60]
1341:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
ARM GAS  /tmp/cc7S4Kq7.s 			page 77


 1772              		.loc 1 1341 0
 1773 00b8 C36B     		ldr	r3, [r0, #60]
 1774 00ba 2349     		ldr	r1, .L109+4
 1775 00bc 1964     		str	r1, [r3, #64]
1344:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1776              		.loc 1 1344 0
 1777 00be C36B     		ldr	r3, [r0, #60]
 1778 00c0 2249     		ldr	r1, .L109+8
 1779 00c2 D964     		str	r1, [r3, #76]
1347:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1780              		.loc 1 1347 0
 1781 00c4 C36B     		ldr	r3, [r0, #60]
 1782 00c6 0026     		movs	r6, #0
 1783 00c8 1E65     		str	r6, [r3, #80]
1350:HALLIB/Src/stm32f7xx_hal_qspi.c ****         MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
 1784              		.loc 1 1350 0
 1785 00ca C36B     		ldr	r3, [r0, #60]
 1786 00cc 9E60     		str	r6, [r3, #8]
1351:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1787              		.loc 1 1351 0
 1788 00ce D0F83CE0 		ldr	lr, [r0, #60]
 1789 00d2 DEF80010 		ldr	r1, [lr]
 1790 00d6 0B68     		ldr	r3, [r1]
 1791 00d8 23F0C000 		bic	r0, r3, #192
 1792              	.LVL168:
 1793 00dc DEF80830 		ldr	r3, [lr, #8]
 1794 00e0 0343     		orrs	r3, r3, r0
 1795 00e2 0B60     		str	r3, [r1]
 1796              	.LVL169:
1355:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1797              		.loc 1 1355 0
 1798 00e4 3968     		ldr	r1, [r7]
 1799 00e6 7B6B     		ldr	r3, [r7, #52]
 1800 00e8 2031     		adds	r1, r1, #32
 1801 00ea F86B     		ldr	r0, [r7, #60]
 1802 00ec FFF7FEFF 		bl	HAL_DMA_Start_IT
 1803              	.LVL170:
1358:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1804              		.loc 1 1358 0
 1805 00f0 3A68     		ldr	r2, [r7]
 1806 00f2 5369     		ldr	r3, [r2, #20]
 1807 00f4 23F04063 		bic	r3, r3, #201326592
 1808 00f8 43F08063 		orr	r3, r3, #67108864
 1809 00fc 5361     		str	r3, [r2, #20]
1361:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1810              		.loc 1 1361 0
 1811 00fe 3B68     		ldr	r3, [r7]
 1812 0100 9D61     		str	r5, [r3, #24]
1364:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1813              		.loc 1 1364 0
 1814 0102 87F84060 		strb	r6, [r7, #64]
1367:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1815              		.loc 1 1367 0
 1816 0106 3A68     		ldr	r2, [r7]
 1817 0108 1368     		ldr	r3, [r2]
 1818 010a 43F48033 		orr	r3, r3, #65536
 1819 010e 1360     		str	r3, [r2]
ARM GAS  /tmp/cc7S4Kq7.s 			page 78


1370:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 1820              		.loc 1 1370 0
 1821 0110 3A68     		ldr	r2, [r7]
 1822 0112 1368     		ldr	r3, [r2]
 1823 0114 43F00403 		orr	r3, r3, #4
 1824 0118 1360     		str	r3, [r2]
 1825 011a 2046     		mov	r0, r4
 1826 011c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1827              	.LVL171:
 1828              	.L97:
1375:HALLIB/Src/stm32f7xx_hal_qspi.c ****       status = HAL_ERROR;
 1829              		.loc 1 1375 0
 1830 011e 436C     		ldr	r3, [r0, #68]
 1831 0120 43F00803 		orr	r3, r3, #8
 1832 0124 4364     		str	r3, [r0, #68]
 1833              	.LVL172:
1379:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 1834              		.loc 1 1379 0
 1835 0126 0023     		movs	r3, #0
 1836 0128 80F84030 		strb	r3, [r0, #64]
1376:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 1837              		.loc 1 1376 0
 1838 012c 0120     		movs	r0, #1
 1839              	.LVL173:
 1840 012e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1841              	.LVL174:
 1842              	.L96:
1387:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 1843              		.loc 1 1387 0
 1844 0130 0023     		movs	r3, #0
 1845 0132 80F84030 		strb	r3, [r0, #64]
1384:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1846              		.loc 1 1384 0
 1847 0136 0220     		movs	r0, #2
 1848              	.LVL175:
 1849 0138 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1850              	.LVL176:
 1851              	.L105:
1276:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1852              		.loc 1 1276 0
 1853 013a 0220     		movs	r0, #2
 1854              	.LVL177:
 1855 013c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1856              	.LVL178:
 1857              	.L107:
 1858 013e 2046     		mov	r0, r4
 1859              	.LVL179:
1391:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1860              		.loc 1 1391 0
 1861 0140 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1862              	.LVL180:
 1863              	.L110:
 1864 0142 00BF     		.align	2
 1865              	.L109:
 1866 0144 00000000 		.word	QSPI_DMARxCplt
 1867 0148 00000000 		.word	QSPI_DMARxHalfCplt
 1868 014c 00000000 		.word	QSPI_DMAError
ARM GAS  /tmp/cc7S4Kq7.s 			page 79


 1869              		.cfi_endproc
 1870              	.LFE148:
 1872              		.section	.text.HAL_QSPI_AutoPolling,"ax",%progbits
 1873              		.align	2
 1874              		.global	HAL_QSPI_AutoPolling
 1875              		.thumb
 1876              		.thumb_func
 1878              	HAL_QSPI_AutoPolling:
 1879              	.LFB149:
1403:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1880              		.loc 1 1403 0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884              	.LVL181:
 1885 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1886              	.LCFI22:
 1887              		.cfi_def_cfa_offset 24
 1888              		.cfi_offset 4, -24
 1889              		.cfi_offset 5, -20
 1890              		.cfi_offset 6, -16
 1891              		.cfi_offset 7, -12
 1892              		.cfi_offset 8, -8
 1893              		.cfi_offset 14, -4
 1894 0004 82B0     		sub	sp, sp, #8
 1895              	.LCFI23:
 1896              		.cfi_def_cfa_offset 32
 1897 0006 0446     		mov	r4, r0
 1898 0008 8846     		mov	r8, r1
 1899 000a 1546     		mov	r5, r2
 1900 000c 1F46     		mov	r7, r3
 1901              	.LVL182:
1405:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1902              		.loc 1 1405 0
 1903 000e FFF7FEFF 		bl	HAL_GetTick
 1904              	.LVL183:
1438:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1905              		.loc 1 1438 0
 1906 0012 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
 1907 0016 DBB2     		uxtb	r3, r3
 1908 0018 012B     		cmp	r3, #1
 1909 001a 46D0     		beq	.L114
 1910 001c 0646     		mov	r6, r0
1438:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1911              		.loc 1 1438 0 is_stmt 0 discriminator 2
 1912 001e 0123     		movs	r3, #1
 1913 0020 84F84030 		strb	r3, [r4, #64]
1440:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 1914              		.loc 1 1440 0 is_stmt 1 discriminator 2
 1915 0024 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 1916 0028 DBB2     		uxtb	r3, r3
 1917 002a 012B     		cmp	r3, #1
 1918 002c 37D1     		bne	.L115
1443:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1919              		.loc 1 1443 0
 1920 002e 0022     		movs	r2, #0
 1921 0030 6264     		str	r2, [r4, #68]
ARM GAS  /tmp/cc7S4Kq7.s 			page 80


1446:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1922              		.loc 1 1446 0
 1923 0032 4223     		movs	r3, #66
 1924 0034 84F84130 		strb	r3, [r4, #65]
1449:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 1925              		.loc 1 1449 0
 1926 0038 0097     		str	r7, [sp]
 1927 003a 0346     		mov	r3, r0
 1928 003c 2021     		movs	r1, #32
 1929 003e 2046     		mov	r0, r4
 1930              	.LVL184:
 1931 0040 FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 1932              	.LVL185:
1451:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 1933              		.loc 1 1451 0
 1934 0044 0346     		mov	r3, r0
 1935 0046 58BB     		cbnz	r0, .L113
1454:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 1936              		.loc 1 1454 0
 1937 0048 2368     		ldr	r3, [r4]
 1938 004a 2A68     		ldr	r2, [r5]
 1939 004c 9A62     		str	r2, [r3, #40]
1457:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 1940              		.loc 1 1457 0
 1941 004e 2368     		ldr	r3, [r4]
 1942 0050 6A68     		ldr	r2, [r5, #4]
 1943 0052 5A62     		str	r2, [r3, #36]
1460:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 1944              		.loc 1 1460 0
 1945 0054 2368     		ldr	r3, [r4]
 1946 0056 AA68     		ldr	r2, [r5, #8]
 1947 0058 DA62     		str	r2, [r3, #44]
1464:HALLIB/Src/stm32f7xx_hal_qspi.c ****                (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));
 1948              		.loc 1 1464 0
 1949 005a 2168     		ldr	r1, [r4]
 1950 005c 0B68     		ldr	r3, [r1]
 1951 005e 23F44002 		bic	r2, r3, #12582912
 1952 0062 2B69     		ldr	r3, [r5, #16]
 1953 0064 1343     		orrs	r3, r3, r2
 1954 0066 43F48003 		orr	r3, r3, #4194304
 1955 006a 0B60     		str	r3, [r1]
1468:HALLIB/Src/stm32f7xx_hal_qspi.c ****       QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 1956              		.loc 1 1468 0
 1957 006c EB68     		ldr	r3, [r5, #12]
 1958 006e C8F82830 		str	r3, [r8, #40]
1469:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 1959              		.loc 1 1469 0
 1960 0072 4FF00062 		mov	r2, #134217728
 1961 0076 4146     		mov	r1, r8
 1962 0078 2046     		mov	r0, r4
 1963              	.LVL186:
 1964 007a FFF7FEFF 		bl	QSPI_Config
 1965              	.LVL187:
1472:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 1966              		.loc 1 1472 0
 1967 007e 0097     		str	r7, [sp]
 1968 0080 3346     		mov	r3, r6
ARM GAS  /tmp/cc7S4Kq7.s 			page 81


 1969 0082 0122     		movs	r2, #1
 1970 0084 0821     		movs	r1, #8
 1971 0086 2046     		mov	r0, r4
 1972 0088 FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 1973              	.LVL188:
1474:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 1974              		.loc 1 1474 0
 1975 008c 0346     		mov	r3, r0
 1976 008e 38B9     		cbnz	r0, .L113
1476:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 1977              		.loc 1 1476 0
 1978 0090 2268     		ldr	r2, [r4]
 1979 0092 0821     		movs	r1, #8
 1980 0094 D160     		str	r1, [r2, #12]
1479:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 1981              		.loc 1 1479 0
 1982 0096 0122     		movs	r2, #1
 1983 0098 84F84120 		strb	r2, [r4, #65]
 1984 009c 00E0     		b	.L113
 1985              	.LVL189:
 1986              	.L115:
1485:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 1987              		.loc 1 1485 0
 1988 009e 0223     		movs	r3, #2
 1989              	.LVL190:
 1990              	.L113:
1488:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1991              		.loc 1 1488 0
 1992 00a0 0022     		movs	r2, #0
 1993 00a2 84F84020 		strb	r2, [r4, #64]
1491:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 1994              		.loc 1 1491 0
 1995 00a6 1846     		mov	r0, r3
 1996 00a8 00E0     		b	.L112
 1997              	.LVL191:
 1998              	.L114:
1438:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 1999              		.loc 1 1438 0
 2000 00aa 0220     		movs	r0, #2
 2001              	.LVL192:
 2002              	.L112:
1492:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2003              		.loc 1 1492 0
 2004 00ac 02B0     		add	sp, sp, #8
 2005              	.LCFI24:
 2006              		.cfi_def_cfa_offset 24
 2007              		@ sp needed
 2008 00ae BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2009              		.cfi_endproc
 2010              	.LFE149:
 2012 00b2 00BF     		.section	.text.HAL_QSPI_AutoPolling_IT,"ax",%progbits
 2013              		.align	2
 2014              		.global	HAL_QSPI_AutoPolling_IT
 2015              		.thumb
 2016              		.thumb_func
 2018              	HAL_QSPI_AutoPolling_IT:
 2019              	.LFB150:
ARM GAS  /tmp/cc7S4Kq7.s 			page 82


1503:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 2020              		.loc 1 1503 0
 2021              		.cfi_startproc
 2022              		@ args = 0, pretend = 0, frame = 0
 2023              		@ frame_needed = 0, uses_anonymous_args = 0
 2024              	.LVL193:
 2025 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2026              	.LCFI25:
 2027              		.cfi_def_cfa_offset 20
 2028              		.cfi_offset 4, -20
 2029              		.cfi_offset 5, -16
 2030              		.cfi_offset 6, -12
 2031              		.cfi_offset 7, -8
 2032              		.cfi_offset 14, -4
 2033 0002 83B0     		sub	sp, sp, #12
 2034              	.LCFI26:
 2035              		.cfi_def_cfa_offset 32
 2036 0004 0446     		mov	r4, r0
 2037 0006 0F46     		mov	r7, r1
 2038 0008 1646     		mov	r6, r2
 2039              	.LVL194:
1505:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 2040              		.loc 1 1505 0
 2041 000a FFF7FEFF 		bl	HAL_GetTick
 2042              	.LVL195:
1539:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 2043              		.loc 1 1539 0
 2044 000e 94F84020 		ldrb	r2, [r4, #64]	@ zero_extendqisi2
 2045 0012 D2B2     		uxtb	r2, r2
 2046 0014 012A     		cmp	r2, #1
 2047 0016 45D0     		beq	.L121
1539:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 2048              		.loc 1 1539 0 is_stmt 0 discriminator 2
 2049 0018 0122     		movs	r2, #1
 2050 001a 84F84020 		strb	r2, [r4, #64]
1541:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2051              		.loc 1 1541 0 is_stmt 1 discriminator 2
 2052 001e 94F84120 		ldrb	r2, [r4, #65]	@ zero_extendqisi2
 2053 0022 D2B2     		uxtb	r2, r2
 2054 0024 012A     		cmp	r2, #1
 2055 0026 38D1     		bne	.L119
1543:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2056              		.loc 1 1543 0
 2057 0028 0022     		movs	r2, #0
 2058 002a 6264     		str	r2, [r4, #68]
1546:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2059              		.loc 1 1546 0
 2060 002c 4223     		movs	r3, #66
 2061 002e 84F84130 		strb	r3, [r4, #65]
1549:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2062              		.loc 1 1549 0
 2063 0032 A36C     		ldr	r3, [r4, #72]
 2064 0034 0093     		str	r3, [sp]
 2065 0036 0346     		mov	r3, r0
 2066 0038 2021     		movs	r1, #32
 2067 003a 2046     		mov	r0, r4
 2068              	.LVL196:
ARM GAS  /tmp/cc7S4Kq7.s 			page 83


 2069 003c FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 2070              	.LVL197:
1551:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 2071              		.loc 1 1551 0
 2072 0040 0546     		mov	r5, r0
 2073 0042 30BB     		cbnz	r0, .L120
1554:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 2074              		.loc 1 1554 0
 2075 0044 2368     		ldr	r3, [r4]
 2076 0046 3268     		ldr	r2, [r6]
 2077 0048 9A62     		str	r2, [r3, #40]
1557:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 2078              		.loc 1 1557 0
 2079 004a 2368     		ldr	r3, [r4]
 2080 004c 7268     		ldr	r2, [r6, #4]
 2081 004e 5A62     		str	r2, [r3, #36]
1560:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 2082              		.loc 1 1560 0
 2083 0050 2368     		ldr	r3, [r4]
 2084 0052 B268     		ldr	r2, [r6, #8]
 2085 0054 DA62     		str	r2, [r3, #44]
1563:HALLIB/Src/stm32f7xx_hal_qspi.c ****                (cfg->MatchMode | cfg->AutomaticStop));
 2086              		.loc 1 1563 0
 2087 0056 2168     		ldr	r1, [r4]
 2088 0058 0B68     		ldr	r3, [r1]
 2089 005a 23F44002 		bic	r2, r3, #12582912
 2090 005e 3069     		ldr	r0, [r6, #16]
 2091              	.LVL198:
 2092 0060 7369     		ldr	r3, [r6, #20]
 2093 0062 0343     		orrs	r3, r3, r0
 2094 0064 1343     		orrs	r3, r3, r2
 2095 0066 0B60     		str	r3, [r1]
1567:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 2096              		.loc 1 1567 0
 2097 0068 2368     		ldr	r3, [r4]
 2098 006a 0922     		movs	r2, #9
 2099 006c DA60     		str	r2, [r3, #12]
1570:HALLIB/Src/stm32f7xx_hal_qspi.c ****       QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 2100              		.loc 1 1570 0
 2101 006e F368     		ldr	r3, [r6, #12]
 2102 0070 BB62     		str	r3, [r7, #40]
1571:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2103              		.loc 1 1571 0
 2104 0072 4FF00062 		mov	r2, #134217728
 2105 0076 3946     		mov	r1, r7
 2106 0078 2046     		mov	r0, r4
 2107 007a FFF7FEFF 		bl	QSPI_Config
 2108              	.LVL199:
1574:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 2109              		.loc 1 1574 0
 2110 007e 0023     		movs	r3, #0
 2111 0080 84F84030 		strb	r3, [r4, #64]
1577:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2112              		.loc 1 1577 0
 2113 0084 2268     		ldr	r2, [r4]
 2114 0086 1368     		ldr	r3, [r2]
 2115 0088 43F41023 		orr	r3, r3, #589824
ARM GAS  /tmp/cc7S4Kq7.s 			page 84


 2116 008c 1360     		str	r3, [r2]
1549:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2117              		.loc 1 1549 0
 2118 008e 2846     		mov	r0, r5
 2119 0090 09E0     		b	.L118
 2120              	.LVL200:
 2121              	.L120:
1583:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 2122              		.loc 1 1583 0
 2123 0092 0023     		movs	r3, #0
 2124 0094 84F84030 		strb	r3, [r4, #64]
 2125 0098 05E0     		b	.L118
 2126              	.LVL201:
 2127              	.L119:
1591:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 2128              		.loc 1 1591 0
 2129 009a 0023     		movs	r3, #0
 2130 009c 84F84030 		strb	r3, [r4, #64]
1588:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2131              		.loc 1 1588 0
 2132 00a0 0220     		movs	r0, #2
 2133              	.LVL202:
 2134 00a2 00E0     		b	.L118
 2135              	.LVL203:
 2136              	.L121:
1539:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 2137              		.loc 1 1539 0
 2138 00a4 0220     		movs	r0, #2
 2139              	.LVL204:
 2140              	.L118:
1596:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2141              		.loc 1 1596 0
 2142 00a6 03B0     		add	sp, sp, #12
 2143              	.LCFI27:
 2144              		.cfi_def_cfa_offset 20
 2145              		@ sp needed
 2146 00a8 F0BD     		pop	{r4, r5, r6, r7, pc}
 2147              		.cfi_endproc
 2148              	.LFE150:
 2150 00aa 00BF     		.section	.text.HAL_QSPI_MemoryMapped,"ax",%progbits
 2151              		.align	2
 2152              		.global	HAL_QSPI_MemoryMapped
 2153              		.thumb
 2154              		.thumb_func
 2156              	HAL_QSPI_MemoryMapped:
 2157              	.LFB151:
1607:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 2158              		.loc 1 1607 0
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 0
 2161              		@ frame_needed = 0, uses_anonymous_args = 0
 2162              	.LVL205:
 2163 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2164              	.LCFI28:
 2165              		.cfi_def_cfa_offset 20
 2166              		.cfi_offset 4, -20
 2167              		.cfi_offset 5, -16
ARM GAS  /tmp/cc7S4Kq7.s 			page 85


 2168              		.cfi_offset 6, -12
 2169              		.cfi_offset 7, -8
 2170              		.cfi_offset 14, -4
 2171 0002 83B0     		sub	sp, sp, #12
 2172              	.LCFI29:
 2173              		.cfi_def_cfa_offset 32
 2174 0004 0446     		mov	r4, r0
 2175 0006 0F46     		mov	r7, r1
 2176 0008 1646     		mov	r6, r2
 2177              	.LVL206:
1609:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 2178              		.loc 1 1609 0
 2179 000a FFF7FEFF 		bl	HAL_GetTick
 2180              	.LVL207:
1640:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 2181              		.loc 1 1640 0
 2182 000e 94F84020 		ldrb	r2, [r4, #64]	@ zero_extendqisi2
 2183 0012 D2B2     		uxtb	r2, r2
 2184 0014 012A     		cmp	r2, #1
 2185 0016 37D0     		beq	.L127
1640:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 2186              		.loc 1 1640 0 is_stmt 0 discriminator 2
 2187 0018 0122     		movs	r2, #1
 2188 001a 84F84020 		strb	r2, [r4, #64]
1642:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2189              		.loc 1 1642 0 is_stmt 1 discriminator 2
 2190 001e 94F84120 		ldrb	r2, [r4, #65]	@ zero_extendqisi2
 2191 0022 D2B2     		uxtb	r2, r2
 2192 0024 012A     		cmp	r2, #1
 2193 0026 29D1     		bne	.L128
1644:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2194              		.loc 1 1644 0
 2195 0028 0022     		movs	r2, #0
 2196 002a 6264     		str	r2, [r4, #68]
1647:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2197              		.loc 1 1647 0
 2198 002c 8223     		movs	r3, #130
 2199 002e 84F84130 		strb	r3, [r4, #65]
1650:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2200              		.loc 1 1650 0
 2201 0032 A36C     		ldr	r3, [r4, #72]
 2202 0034 0093     		str	r3, [sp]
 2203 0036 0346     		mov	r3, r0
 2204 0038 2021     		movs	r1, #32
 2205 003a 2046     		mov	r0, r4
 2206              	.LVL208:
 2207 003c FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 2208              	.LVL209:
1652:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 2209              		.loc 1 1652 0
 2210 0040 0546     		mov	r5, r0
 2211 0042 E0B9     		cbnz	r0, .L125
1655:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2212              		.loc 1 1655 0
 2213 0044 2168     		ldr	r1, [r4]
 2214 0046 0B68     		ldr	r3, [r1]
 2215 0048 23F00802 		bic	r2, r3, #8
ARM GAS  /tmp/cc7S4Kq7.s 			page 86


 2216 004c 7368     		ldr	r3, [r6, #4]
 2217 004e 1343     		orrs	r3, r3, r2
 2218 0050 0B60     		str	r3, [r1]
1657:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 2219              		.loc 1 1657 0
 2220 0052 7368     		ldr	r3, [r6, #4]
 2221 0054 082B     		cmp	r3, #8
 2222 0056 0AD1     		bne	.L126
1662:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 2223              		.loc 1 1662 0
 2224 0058 2368     		ldr	r3, [r4]
 2225 005a 3268     		ldr	r2, [r6]
 2226 005c 1A63     		str	r2, [r3, #48]
1665:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2227              		.loc 1 1665 0
 2228 005e 2368     		ldr	r3, [r4]
 2229 0060 1022     		movs	r2, #16
 2230 0062 DA60     		str	r2, [r3, #12]
1668:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 2231              		.loc 1 1668 0
 2232 0064 2268     		ldr	r2, [r4]
 2233 0066 1368     		ldr	r3, [r2]
 2234 0068 43F48013 		orr	r3, r3, #1048576
 2235 006c 1360     		str	r3, [r2]
 2236              	.L126:
1672:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 2237              		.loc 1 1672 0
 2238 006e 4FF04062 		mov	r2, #201326592
 2239 0072 3946     		mov	r1, r7
 2240 0074 2046     		mov	r0, r4
 2241              	.LVL210:
 2242 0076 FFF7FEFF 		bl	QSPI_Config
 2243              	.LVL211:
 2244 007a 00E0     		b	.L125
 2245              	.LVL212:
 2246              	.L128:
1677:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 2247              		.loc 1 1677 0
 2248 007c 0225     		movs	r5, #2
 2249              	.LVL213:
 2250              	.L125:
1681:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 2251              		.loc 1 1681 0
 2252 007e 0023     		movs	r3, #0
 2253 0080 84F84030 		strb	r3, [r4, #64]
1684:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 2254              		.loc 1 1684 0
 2255 0084 2846     		mov	r0, r5
 2256 0086 00E0     		b	.L124
 2257              	.LVL214:
 2258              	.L127:
1640:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 2259              		.loc 1 1640 0
 2260 0088 0220     		movs	r0, #2
 2261              	.LVL215:
 2262              	.L124:
1685:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
ARM GAS  /tmp/cc7S4Kq7.s 			page 87


 2263              		.loc 1 1685 0
 2264 008a 03B0     		add	sp, sp, #12
 2265              	.LCFI30:
 2266              		.cfi_def_cfa_offset 20
 2267              		@ sp needed
 2268 008c F0BD     		pop	{r4, r5, r6, r7, pc}
 2269              		.cfi_endproc
 2270              	.LFE151:
 2272 008e 00BF     		.section	.text.HAL_QSPI_ErrorCallback,"ax",%progbits
 2273              		.align	2
 2274              		.weak	HAL_QSPI_ErrorCallback
 2275              		.thumb
 2276              		.thumb_func
 2278              	HAL_QSPI_ErrorCallback:
 2279              	.LFB152:
1693:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 2280              		.loc 1 1693 0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 0
 2283              		@ frame_needed = 0, uses_anonymous_args = 0
 2284              		@ link register save eliminated.
 2285              	.LVL216:
 2286 0000 7047     		bx	lr
 2287              		.cfi_endproc
 2288              	.LFE152:
 2290 0002 00BF     		.section	.text.QSPI_DMAAbortCplt,"ax",%progbits
 2291              		.align	2
 2292              		.thumb
 2293              		.thumb_func
 2295              	QSPI_DMAAbortCplt:
 2296              	.LFB174:
2118:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2297              		.loc 1 2118 0
 2298              		.cfi_startproc
 2299              		@ args = 0, pretend = 0, frame = 0
 2300              		@ frame_needed = 0, uses_anonymous_args = 0
 2301              	.LVL217:
2118:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2302              		.loc 1 2118 0
 2303 0000 08B5     		push	{r3, lr}
 2304              	.LCFI31:
 2305              		.cfi_def_cfa_offset 8
 2306              		.cfi_offset 3, -8
 2307              		.cfi_offset 14, -4
2119:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2308              		.loc 1 2119 0
 2309 0002 806B     		ldr	r0, [r0, #56]
 2310              	.LVL218:
2121:HALLIB/Src/stm32f7xx_hal_qspi.c ****   hqspi->TxXferCount = 0;
 2311              		.loc 1 2121 0
 2312 0004 0023     		movs	r3, #0
 2313 0006 8363     		str	r3, [r0, #56]
2122:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2314              		.loc 1 2122 0
 2315 0008 C362     		str	r3, [r0, #44]
2124:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2316              		.loc 1 2124 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 88


 2317 000a 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 2318 000e DBB2     		uxtb	r3, r3
 2319 0010 082B     		cmp	r3, #8
 2320 0012 0DD1     		bne	.L132
2128:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2321              		.loc 1 2128 0
 2322 0014 0368     		ldr	r3, [r0]
 2323 0016 0222     		movs	r2, #2
 2324 0018 DA60     		str	r2, [r3, #12]
2131:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2325              		.loc 1 2131 0
 2326 001a 0268     		ldr	r2, [r0]
 2327 001c 1368     		ldr	r3, [r2]
 2328 001e 43F40033 		orr	r3, r3, #131072
 2329 0022 1360     		str	r3, [r2]
2134:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 2330              		.loc 1 2134 0
 2331 0024 0268     		ldr	r2, [r0]
 2332 0026 1368     		ldr	r3, [r2]
 2333 0028 43F00203 		orr	r3, r3, #2
 2334 002c 1360     		str	r3, [r2]
 2335 002e 08BD     		pop	{r3, pc}
 2336              	.L132:
2140:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2337              		.loc 1 2140 0
 2338 0030 0123     		movs	r3, #1
 2339 0032 80F84130 		strb	r3, [r0, #65]
2143:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 2340              		.loc 1 2143 0
 2341 0036 FFF7FEFF 		bl	HAL_QSPI_ErrorCallback
 2342              	.LVL219:
 2343 003a 08BD     		pop	{r3, pc}
 2344              		.cfi_endproc
 2345              	.LFE174:
 2347              		.section	.text.HAL_QSPI_AbortCpltCallback,"ax",%progbits
 2348              		.align	2
 2349              		.weak	HAL_QSPI_AbortCpltCallback
 2350              		.thumb
 2351              		.thumb_func
 2353              	HAL_QSPI_AbortCpltCallback:
 2354              	.LFB153:
1708:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 2355              		.loc 1 1708 0
 2356              		.cfi_startproc
 2357              		@ args = 0, pretend = 0, frame = 0
 2358              		@ frame_needed = 0, uses_anonymous_args = 0
 2359              		@ link register save eliminated.
 2360              	.LVL220:
 2361 0000 7047     		bx	lr
 2362              		.cfi_endproc
 2363              	.LFE153:
 2365 0002 00BF     		.section	.text.HAL_QSPI_CmdCpltCallback,"ax",%progbits
 2366              		.align	2
 2367              		.weak	HAL_QSPI_CmdCpltCallback
 2368              		.thumb
 2369              		.thumb_func
 2371              	HAL_QSPI_CmdCpltCallback:
ARM GAS  /tmp/cc7S4Kq7.s 			page 89


 2372              	.LFB154:
1723:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 2373              		.loc 1 1723 0
 2374              		.cfi_startproc
 2375              		@ args = 0, pretend = 0, frame = 0
 2376              		@ frame_needed = 0, uses_anonymous_args = 0
 2377              		@ link register save eliminated.
 2378              	.LVL221:
 2379 0000 7047     		bx	lr
 2380              		.cfi_endproc
 2381              	.LFE154:
 2383 0002 00BF     		.section	.text.HAL_QSPI_RxCpltCallback,"ax",%progbits
 2384              		.align	2
 2385              		.weak	HAL_QSPI_RxCpltCallback
 2386              		.thumb
 2387              		.thumb_func
 2389              	HAL_QSPI_RxCpltCallback:
 2390              	.LFB155:
1738:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 2391              		.loc 1 1738 0
 2392              		.cfi_startproc
 2393              		@ args = 0, pretend = 0, frame = 0
 2394              		@ frame_needed = 0, uses_anonymous_args = 0
 2395              		@ link register save eliminated.
 2396              	.LVL222:
 2397 0000 7047     		bx	lr
 2398              		.cfi_endproc
 2399              	.LFE155:
 2401 0002 00BF     		.section	.text.HAL_QSPI_TxCpltCallback,"ax",%progbits
 2402              		.align	2
 2403              		.weak	HAL_QSPI_TxCpltCallback
 2404              		.thumb
 2405              		.thumb_func
 2407              	HAL_QSPI_TxCpltCallback:
 2408              	.LFB156:
1753:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 2409              		.loc 1 1753 0
 2410              		.cfi_startproc
 2411              		@ args = 0, pretend = 0, frame = 0
 2412              		@ frame_needed = 0, uses_anonymous_args = 0
 2413              		@ link register save eliminated.
 2414              	.LVL223:
 2415 0000 7047     		bx	lr
 2416              		.cfi_endproc
 2417              	.LFE156:
 2419 0002 00BF     		.section	.text.HAL_QSPI_RxHalfCpltCallback,"ax",%progbits
 2420              		.align	2
 2421              		.weak	HAL_QSPI_RxHalfCpltCallback
 2422              		.thumb
 2423              		.thumb_func
 2425              	HAL_QSPI_RxHalfCpltCallback:
 2426              	.LFB157:
1768:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 2427              		.loc 1 1768 0
 2428              		.cfi_startproc
 2429              		@ args = 0, pretend = 0, frame = 0
 2430              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 90


 2431              		@ link register save eliminated.
 2432              	.LVL224:
 2433 0000 7047     		bx	lr
 2434              		.cfi_endproc
 2435              	.LFE157:
 2437 0002 00BF     		.section	.text.QSPI_DMARxHalfCplt,"ax",%progbits
 2438              		.align	2
 2439              		.thumb
 2440              		.thumb_func
 2442              	QSPI_DMARxHalfCplt:
 2443              	.LFB171:
2070:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 2444              		.loc 1 2070 0
 2445              		.cfi_startproc
 2446              		@ args = 0, pretend = 0, frame = 0
 2447              		@ frame_needed = 0, uses_anonymous_args = 0
 2448              	.LVL225:
2070:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 2449              		.loc 1 2070 0
 2450 0000 08B5     		push	{r3, lr}
 2451              	.LCFI32:
 2452              		.cfi_def_cfa_offset 8
 2453              		.cfi_offset 3, -8
 2454              		.cfi_offset 14, -4
 2455              	.LVL226:
2073:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 2456              		.loc 1 2073 0
 2457 0002 806B     		ldr	r0, [r0, #56]
 2458              	.LVL227:
 2459 0004 FFF7FEFF 		bl	HAL_QSPI_RxHalfCpltCallback
 2460              	.LVL228:
 2461 0008 08BD     		pop	{r3, pc}
 2462              		.cfi_endproc
 2463              	.LFE171:
 2465 000a 00BF     		.section	.text.HAL_QSPI_TxHalfCpltCallback,"ax",%progbits
 2466              		.align	2
 2467              		.weak	HAL_QSPI_TxHalfCpltCallback
 2468              		.thumb
 2469              		.thumb_func
 2471              	HAL_QSPI_TxHalfCpltCallback:
 2472              	.LFB158:
1783:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 2473              		.loc 1 1783 0
 2474              		.cfi_startproc
 2475              		@ args = 0, pretend = 0, frame = 0
 2476              		@ frame_needed = 0, uses_anonymous_args = 0
 2477              		@ link register save eliminated.
 2478              	.LVL229:
 2479 0000 7047     		bx	lr
 2480              		.cfi_endproc
 2481              	.LFE158:
 2483 0002 00BF     		.section	.text.QSPI_DMATxHalfCplt,"ax",%progbits
 2484              		.align	2
 2485              		.thumb
 2486              		.thumb_func
 2488              	QSPI_DMATxHalfCplt:
 2489              	.LFB172:
ARM GAS  /tmp/cc7S4Kq7.s 			page 91


2082:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 2490              		.loc 1 2082 0
 2491              		.cfi_startproc
 2492              		@ args = 0, pretend = 0, frame = 0
 2493              		@ frame_needed = 0, uses_anonymous_args = 0
 2494              	.LVL230:
2082:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 2495              		.loc 1 2082 0
 2496 0000 08B5     		push	{r3, lr}
 2497              	.LCFI33:
 2498              		.cfi_def_cfa_offset 8
 2499              		.cfi_offset 3, -8
 2500              		.cfi_offset 14, -4
 2501              	.LVL231:
2085:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 2502              		.loc 1 2085 0
 2503 0002 806B     		ldr	r0, [r0, #56]
 2504              	.LVL232:
 2505 0004 FFF7FEFF 		bl	HAL_QSPI_TxHalfCpltCallback
 2506              	.LVL233:
 2507 0008 08BD     		pop	{r3, pc}
 2508              		.cfi_endproc
 2509              	.LFE172:
 2511 000a 00BF     		.section	.text.HAL_QSPI_FifoThresholdCallback,"ax",%progbits
 2512              		.align	2
 2513              		.weak	HAL_QSPI_FifoThresholdCallback
 2514              		.thumb
 2515              		.thumb_func
 2517              	HAL_QSPI_FifoThresholdCallback:
 2518              	.LFB159:
1798:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 2519              		.loc 1 1798 0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 0
 2522              		@ frame_needed = 0, uses_anonymous_args = 0
 2523              		@ link register save eliminated.
 2524              	.LVL234:
 2525 0000 7047     		bx	lr
 2526              		.cfi_endproc
 2527              	.LFE159:
 2529 0002 00BF     		.section	.text.HAL_QSPI_StatusMatchCallback,"ax",%progbits
 2530              		.align	2
 2531              		.weak	HAL_QSPI_StatusMatchCallback
 2532              		.thumb
 2533              		.thumb_func
 2535              	HAL_QSPI_StatusMatchCallback:
 2536              	.LFB160:
1813:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 2537              		.loc 1 1813 0
 2538              		.cfi_startproc
 2539              		@ args = 0, pretend = 0, frame = 0
 2540              		@ frame_needed = 0, uses_anonymous_args = 0
 2541              		@ link register save eliminated.
 2542              	.LVL235:
 2543 0000 7047     		bx	lr
 2544              		.cfi_endproc
 2545              	.LFE160:
ARM GAS  /tmp/cc7S4Kq7.s 			page 92


 2547 0002 00BF     		.section	.text.HAL_QSPI_TimeOutCallback,"ax",%progbits
 2548              		.align	2
 2549              		.weak	HAL_QSPI_TimeOutCallback
 2550              		.thumb
 2551              		.thumb_func
 2553              	HAL_QSPI_TimeOutCallback:
 2554              	.LFB161:
1828:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Prevent unused argument(s) compilation warning */
 2555              		.loc 1 1828 0
 2556              		.cfi_startproc
 2557              		@ args = 0, pretend = 0, frame = 0
 2558              		@ frame_needed = 0, uses_anonymous_args = 0
 2559              		@ link register save eliminated.
 2560              	.LVL236:
 2561 0000 7047     		bx	lr
 2562              		.cfi_endproc
 2563              	.LFE161:
 2565 0002 00BF     		.section	.text.HAL_QSPI_IRQHandler,"ax",%progbits
 2566              		.align	2
 2567              		.global	HAL_QSPI_IRQHandler
 2568              		.thumb
 2569              		.thumb_func
 2571              	HAL_QSPI_IRQHandler:
 2572              	.LFB140:
 417:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __IO uint32_t *data_reg;
 2573              		.loc 1 417 0
 2574              		.cfi_startproc
 2575              		@ args = 0, pretend = 0, frame = 0
 2576              		@ frame_needed = 0, uses_anonymous_args = 0
 2577              	.LVL237:
 417:HALLIB/Src/stm32f7xx_hal_qspi.c ****   __IO uint32_t *data_reg;
 2578              		.loc 1 417 0
 2579 0000 08B5     		push	{r3, lr}
 2580              	.LCFI34:
 2581              		.cfi_def_cfa_offset 8
 2582              		.cfi_offset 3, -8
 2583              		.cfi_offset 14, -4
 419:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t itsource = READ_REG(hqspi->Instance->CR);
 2584              		.loc 1 419 0
 2585 0002 0368     		ldr	r3, [r0]
 2586 0004 9A68     		ldr	r2, [r3, #8]
 2587              	.LVL238:
 420:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2588              		.loc 1 420 0
 2589 0006 1968     		ldr	r1, [r3]
 2590              	.LVL239:
 423:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2591              		.loc 1 423 0
 2592 0008 12F0040F 		tst	r2, #4
 2593 000c 3ED0     		beq	.L149
 423:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2594              		.loc 1 423 0 is_stmt 0 discriminator 1
 2595 000e 11F4802F 		tst	r1, #262144
 2596 0012 3BD0     		beq	.L149
 2597              	.LVL240:
 427:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 2598              		.loc 1 427 0 is_stmt 1
ARM GAS  /tmp/cc7S4Kq7.s 			page 93


 2599 0014 90F84120 		ldrb	r2, [r0, #65]	@ zero_extendqisi2
 2600              	.LVL241:
 2601 0018 D2B2     		uxtb	r2, r2
 2602 001a 122A     		cmp	r2, #18
 2603 001c 17D1     		bne	.L172
 2604 001e 10E0     		b	.L150
 2605              	.LVL242:
 2606              	.L154:
 432:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 2607              		.loc 1 432 0
 2608 0020 C16A     		ldr	r1, [r0, #44]
 2609 0022 49B1     		cbz	r1, .L152
 435:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->TxXferCount--;
 2610              		.loc 1 435 0
 2611 0024 426A     		ldr	r2, [r0, #36]
 2612 0026 511C     		adds	r1, r2, #1
 2613 0028 4162     		str	r1, [r0, #36]
 2614 002a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2615 002c 83F82020 		strb	r2, [r3, #32]
 436:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 2616              		.loc 1 436 0
 2617 0030 C26A     		ldr	r2, [r0, #44]
 2618 0032 013A     		subs	r2, r2, #1
 2619 0034 C262     		str	r2, [r0, #44]
 2620 0036 04E0     		b	.L150
 2621              	.L152:
 442:HALLIB/Src/stm32f7xx_hal_qspi.c ****           break;
 2622              		.loc 1 442 0
 2623 0038 1368     		ldr	r3, [r2]
 2624              	.LVL243:
 2625 003a 23F48023 		bic	r3, r3, #262144
 2626 003e 1360     		str	r3, [r2]
 443:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 2627              		.loc 1 443 0
 2628 0040 21E0     		b	.L153
 2629              	.LVL244:
 2630              	.L150:
 430:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 2631              		.loc 1 430 0
 2632 0042 0268     		ldr	r2, [r0]
 2633 0044 9168     		ldr	r1, [r2, #8]
 2634 0046 11F0040F 		tst	r1, #4
 2635 004a E9D1     		bne	.L154
 2636 004c 1BE0     		b	.L153
 2637              	.LVL245:
 2638              	.L172:
 447:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 2639              		.loc 1 447 0
 2640 004e 90F84120 		ldrb	r2, [r0, #65]	@ zero_extendqisi2
 2641 0052 D2B2     		uxtb	r2, r2
 2642 0054 222A     		cmp	r2, #34
 2643 0056 16D1     		bne	.L153
 2644 0058 10E0     		b	.L155
 2645              	.LVL246:
 2646              	.L157:
 452:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 2647              		.loc 1 452 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 94


 2648 005a 816B     		ldr	r1, [r0, #56]
 2649 005c 49B1     		cbz	r1, .L156
 455:HALLIB/Src/stm32f7xx_hal_qspi.c ****           hqspi->RxXferCount--;
 2650              		.loc 1 455 0
 2651 005e 026B     		ldr	r2, [r0, #48]
 2652 0060 511C     		adds	r1, r2, #1
 2653 0062 0163     		str	r1, [r0, #48]
 2654 0064 93F82010 		ldrb	r1, [r3, #32]	@ zero_extendqisi2
 2655 0068 1170     		strb	r1, [r2]
 456:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 2656              		.loc 1 456 0
 2657 006a 826B     		ldr	r2, [r0, #56]
 2658 006c 013A     		subs	r2, r2, #1
 2659 006e 8263     		str	r2, [r0, #56]
 2660 0070 04E0     		b	.L155
 2661              	.L156:
 462:HALLIB/Src/stm32f7xx_hal_qspi.c ****           break;
 2662              		.loc 1 462 0
 2663 0072 1368     		ldr	r3, [r2]
 2664              	.LVL247:
 2665 0074 23F48023 		bic	r3, r3, #262144
 2666 0078 1360     		str	r3, [r2]
 463:HALLIB/Src/stm32f7xx_hal_qspi.c ****         }
 2667              		.loc 1 463 0
 2668 007a 04E0     		b	.L153
 2669              	.LVL248:
 2670              	.L155:
 450:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 2671              		.loc 1 450 0
 2672 007c 0268     		ldr	r2, [r0]
 2673 007e 9168     		ldr	r1, [r2, #8]
 2674 0080 11F0040F 		tst	r1, #4
 2675 0084 E9D1     		bne	.L157
 2676              	.LVL249:
 2677              	.L153:
 469:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 2678              		.loc 1 469 0
 2679 0086 FFF7FEFF 		bl	HAL_QSPI_FifoThresholdCallback
 2680              	.LVL250:
 2681 008a 08BD     		pop	{r3, pc}
 2682              	.LVL251:
 2683              	.L149:
 473:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2684              		.loc 1 473 0
 2685 008c 12F0020F 		tst	r2, #2
 2686 0090 69D0     		beq	.L159
 473:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2687              		.loc 1 473 0 is_stmt 0 discriminator 1
 2688 0092 11F4003F 		tst	r1, #131072
 2689 0096 66D0     		beq	.L159
 476:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2690              		.loc 1 476 0 is_stmt 1
 2691 0098 0222     		movs	r2, #2
 2692              	.LVL252:
 2693 009a DA60     		str	r2, [r3, #12]
 479:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2694              		.loc 1 479 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 95


 2695 009c 0268     		ldr	r2, [r0]
 2696 009e 1368     		ldr	r3, [r2]
 2697 00a0 23F4E023 		bic	r3, r3, #458752
 2698 00a4 1360     		str	r3, [r2]
 482:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 2699              		.loc 1 482 0
 2700 00a6 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 2701 00aa DBB2     		uxtb	r3, r3
 2702 00ac 122B     		cmp	r3, #18
 2703 00ae 14D1     		bne	.L160
 484:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 2704              		.loc 1 484 0
 2705 00b0 0368     		ldr	r3, [r0]
 2706 00b2 1A68     		ldr	r2, [r3]
 2707 00b4 12F0040F 		tst	r2, #4
 2708 00b8 09D0     		beq	.L161
 487:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 2709              		.loc 1 487 0
 2710 00ba 1A68     		ldr	r2, [r3]
 2711 00bc 22F00402 		bic	r2, r2, #4
 2712 00c0 1A60     		str	r2, [r3]
 490:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 2713              		.loc 1 490 0
 2714 00c2 C36B     		ldr	r3, [r0, #60]
 2715 00c4 1A68     		ldr	r2, [r3]
 2716 00c6 1368     		ldr	r3, [r2]
 2717 00c8 23F00103 		bic	r3, r3, #1
 2718 00cc 1360     		str	r3, [r2]
 2719              	.L161:
 499:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2720              		.loc 1 499 0
 2721 00ce 0123     		movs	r3, #1
 2722 00d0 80F84130 		strb	r3, [r0, #65]
 502:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 2723              		.loc 1 502 0
 2724 00d4 FFF7FEFF 		bl	HAL_QSPI_TxCpltCallback
 2725              	.LVL253:
 2726 00d8 08BD     		pop	{r3, pc}
 2727              	.LVL254:
 2728              	.L160:
 504:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 2729              		.loc 1 504 0
 2730 00da 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 2731 00de DBB2     		uxtb	r3, r3
 2732 00e0 222B     		cmp	r3, #34
 2733 00e2 25D1     		bne	.L162
 506:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 2734              		.loc 1 506 0
 2735 00e4 0168     		ldr	r1, [r0]
 2736              	.LVL255:
 2737 00e6 0B68     		ldr	r3, [r1]
 2738 00e8 13F0040F 		tst	r3, #4
 2739 00ec 15D0     		beq	.L163
 509:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 2740              		.loc 1 509 0
 2741 00ee 0B68     		ldr	r3, [r1]
 2742 00f0 23F00403 		bic	r3, r3, #4
ARM GAS  /tmp/cc7S4Kq7.s 			page 96


 2743 00f4 0B60     		str	r3, [r1]
 512:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 2744              		.loc 1 512 0
 2745 00f6 C36B     		ldr	r3, [r0, #60]
 2746 00f8 1A68     		ldr	r2, [r3]
 2747 00fa 1368     		ldr	r3, [r2]
 2748 00fc 23F00103 		bic	r3, r3, #1
 2749 0100 1360     		str	r3, [r2]
 2750 0102 0FE0     		b	.L164
 2751              	.L165:
 519:HALLIB/Src/stm32f7xx_hal_qspi.c ****           {
 2752              		.loc 1 519 0
 2753 0104 836B     		ldr	r3, [r0, #56]
 2754 0106 6BB1     		cbz	r3, .L164
 522:HALLIB/Src/stm32f7xx_hal_qspi.c ****             hqspi->RxXferCount--;
 2755              		.loc 1 522 0
 2756 0108 036B     		ldr	r3, [r0, #48]
 2757 010a 5A1C     		adds	r2, r3, #1
 2758 010c 0263     		str	r2, [r0, #48]
 2759 010e 91F82020 		ldrb	r2, [r1, #32]	@ zero_extendqisi2
 2760 0112 1A70     		strb	r2, [r3]
 523:HALLIB/Src/stm32f7xx_hal_qspi.c ****           }
 2761              		.loc 1 523 0
 2762 0114 836B     		ldr	r3, [r0, #56]
 2763 0116 013B     		subs	r3, r3, #1
 2764 0118 8363     		str	r3, [r0, #56]
 2765              	.L163:
 517:HALLIB/Src/stm32f7xx_hal_qspi.c ****         {
 2766              		.loc 1 517 0
 2767 011a 0368     		ldr	r3, [r0]
 2768 011c 9B68     		ldr	r3, [r3, #8]
 2769 011e 13F4F85F 		tst	r3, #7936
 2770 0122 EFD1     		bne	.L165
 2771              	.L164:
 538:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2772              		.loc 1 538 0
 2773 0124 0123     		movs	r3, #1
 2774 0126 80F84130 		strb	r3, [r0, #65]
 541:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 2775              		.loc 1 541 0
 2776 012a FFF7FEFF 		bl	HAL_QSPI_RxCpltCallback
 2777              	.LVL256:
 2778 012e 08BD     		pop	{r3, pc}
 2779              	.LVL257:
 2780              	.L162:
 543:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 2781              		.loc 1 543 0
 2782 0130 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 2783 0134 DBB2     		uxtb	r3, r3
 2784 0136 022B     		cmp	r3, #2
 2785 0138 05D1     		bne	.L166
 546:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2786              		.loc 1 546 0
 2787 013a 0123     		movs	r3, #1
 2788 013c 80F84130 		strb	r3, [r0, #65]
 549:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 2789              		.loc 1 549 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 97


 2790 0140 FFF7FEFF 		bl	HAL_QSPI_CmdCpltCallback
 2791              	.LVL258:
 2792 0144 08BD     		pop	{r3, pc}
 2793              	.LVL259:
 2794              	.L166:
 551:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 2795              		.loc 1 551 0
 2796 0146 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 2797 014a DBB2     		uxtb	r3, r3
 2798 014c 082B     		cmp	r3, #8
 2799 014e 52D1     		bne	.L148
 554:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2800              		.loc 1 554 0
 2801 0150 0123     		movs	r3, #1
 2802 0152 80F84130 		strb	r3, [r0, #65]
 556:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 2803              		.loc 1 556 0
 2804 0156 436C     		ldr	r3, [r0, #68]
 2805 0158 13B9     		cbnz	r3, .L167
 561:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 2806              		.loc 1 561 0
 2807 015a FFF7FEFF 		bl	HAL_QSPI_AbortCpltCallback
 2808              	.LVL260:
 2809 015e 08BD     		pop	{r3, pc}
 2810              	.LVL261:
 2811              	.L167:
 568:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 2812              		.loc 1 568 0
 2813 0160 FFF7FEFF 		bl	HAL_QSPI_ErrorCallback
 2814              	.LVL262:
 2815 0164 08BD     		pop	{r3, pc}
 2816              	.LVL263:
 2817              	.L159:
 574:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2818              		.loc 1 574 0
 2819 0166 12F0080F 		tst	r2, #8
 2820 016a 13D0     		beq	.L168
 574:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2821              		.loc 1 574 0 is_stmt 0 discriminator 1
 2822 016c 11F4002F 		tst	r1, #524288
 2823 0170 10D0     		beq	.L168
 577:HALLIB/Src/stm32f7xx_hal_qspi.c ****    
 2824              		.loc 1 577 0 is_stmt 1
 2825 0172 0822     		movs	r2, #8
 2826              	.LVL264:
 2827 0174 DA60     		str	r2, [r3, #12]
 580:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 2828              		.loc 1 580 0
 2829 0176 0368     		ldr	r3, [r0]
 2830 0178 1A68     		ldr	r2, [r3]
 2831 017a 12F4800F 		tst	r2, #4194304
 2832 017e 06D0     		beq	.L169
 583:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2833              		.loc 1 583 0
 2834 0180 1A68     		ldr	r2, [r3]
 2835 0182 22F41022 		bic	r2, r2, #589824
 2836 0186 1A60     		str	r2, [r3]
ARM GAS  /tmp/cc7S4Kq7.s 			page 98


 586:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 2837              		.loc 1 586 0
 2838 0188 0123     		movs	r3, #1
 2839 018a 80F84130 		strb	r3, [r0, #65]
 2840              	.L169:
 590:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 2841              		.loc 1 590 0
 2842 018e FFF7FEFF 		bl	HAL_QSPI_StatusMatchCallback
 2843              	.LVL265:
 2844 0192 08BD     		pop	{r3, pc}
 2845              	.LVL266:
 2846              	.L168:
 594:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2847              		.loc 1 594 0
 2848 0194 12F0010F 		tst	r2, #1
 2849 0198 23D0     		beq	.L170
 594:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2850              		.loc 1 594 0 is_stmt 0 discriminator 1
 2851 019a 11F4803F 		tst	r1, #65536
 2852 019e 20D0     		beq	.L170
 597:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2853              		.loc 1 597 0 is_stmt 1
 2854 01a0 0122     		movs	r2, #1
 2855              	.LVL267:
 2856 01a2 DA60     		str	r2, [r3, #12]
 600:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2857              		.loc 1 600 0
 2858 01a4 0268     		ldr	r2, [r0]
 2859 01a6 1368     		ldr	r3, [r2]
 2860 01a8 23F47023 		bic	r3, r3, #983040
 2861 01ac 1360     		str	r3, [r2]
 603:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2862              		.loc 1 603 0
 2863 01ae 436C     		ldr	r3, [r0, #68]
 2864 01b0 43F00203 		orr	r3, r3, #2
 2865 01b4 4364     		str	r3, [r0, #68]
 605:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 2866              		.loc 1 605 0
 2867 01b6 0368     		ldr	r3, [r0]
 2868 01b8 1A68     		ldr	r2, [r3]
 2869 01ba 12F0040F 		tst	r2, #4
 2870 01be 0AD0     		beq	.L171
 608:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 2871              		.loc 1 608 0
 2872 01c0 1A68     		ldr	r2, [r3]
 2873 01c2 22F00402 		bic	r2, r2, #4
 2874 01c6 1A60     		str	r2, [r3]
 611:HALLIB/Src/stm32f7xx_hal_qspi.c ****       HAL_DMA_Abort_IT(hqspi->hdma);
 2875              		.loc 1 611 0
 2876 01c8 C36B     		ldr	r3, [r0, #60]
 2877 01ca 0B4A     		ldr	r2, .L174
 2878 01cc 1A65     		str	r2, [r3, #80]
 612:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 2879              		.loc 1 612 0
 2880 01ce C06B     		ldr	r0, [r0, #60]
 2881              	.LVL268:
 2882 01d0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
ARM GAS  /tmp/cc7S4Kq7.s 			page 99


 2883              	.LVL269:
 2884 01d4 08BD     		pop	{r3, pc}
 2885              	.LVL270:
 2886              	.L171:
 617:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 2887              		.loc 1 617 0
 2888 01d6 0123     		movs	r3, #1
 2889 01d8 80F84130 		strb	r3, [r0, #65]
 620:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 2890              		.loc 1 620 0
 2891 01dc FFF7FEFF 		bl	HAL_QSPI_ErrorCallback
 2892              	.LVL271:
 2893 01e0 08BD     		pop	{r3, pc}
 2894              	.LVL272:
 2895              	.L170:
 625:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2896              		.loc 1 625 0
 2897 01e2 12F0100F 		tst	r2, #16
 2898 01e6 06D0     		beq	.L148
 625:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2899              		.loc 1 625 0 is_stmt 0 discriminator 1
 2900 01e8 11F4801F 		tst	r1, #1048576
 2901 01ec 03D0     		beq	.L148
 628:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 2902              		.loc 1 628 0 is_stmt 1
 2903 01ee 1022     		movs	r2, #16
 2904              	.LVL273:
 2905 01f0 DA60     		str	r2, [r3, #12]
 631:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 2906              		.loc 1 631 0
 2907 01f2 FFF7FEFF 		bl	HAL_QSPI_TimeOutCallback
 2908              	.LVL274:
 2909              	.L148:
 2910 01f6 08BD     		pop	{r3, pc}
 2911              	.L175:
 2912              		.align	2
 2913              	.L174:
 2914 01f8 00000000 		.word	QSPI_DMAAbortCplt
 2915              		.cfi_endproc
 2916              	.LFE140:
 2918              		.section	.text.HAL_QSPI_GetState,"ax",%progbits
 2919              		.align	2
 2920              		.global	HAL_QSPI_GetState
 2921              		.thumb
 2922              		.thumb_func
 2924              	HAL_QSPI_GetState:
 2925              	.LFB162:
1864:HALLIB/Src/stm32f7xx_hal_qspi.c ****   /* Return QSPI handle state */
 2926              		.loc 1 1864 0
 2927              		.cfi_startproc
 2928              		@ args = 0, pretend = 0, frame = 0
 2929              		@ frame_needed = 0, uses_anonymous_args = 0
 2930              		@ link register save eliminated.
 2931              	.LVL275:
1866:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 2932              		.loc 1 1866 0
 2933 0000 90F84100 		ldrb	r0, [r0, #65]	@ zero_extendqisi2
ARM GAS  /tmp/cc7S4Kq7.s 			page 100


 2934              	.LVL276:
1867:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2935              		.loc 1 1867 0
 2936 0004 7047     		bx	lr
 2937              		.cfi_endproc
 2938              	.LFE162:
 2940 0006 00BF     		.section	.text.HAL_QSPI_GetError,"ax",%progbits
 2941              		.align	2
 2942              		.global	HAL_QSPI_GetError
 2943              		.thumb
 2944              		.thumb_func
 2946              	HAL_QSPI_GetError:
 2947              	.LFB163:
1875:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return hqspi->ErrorCode;
 2948              		.loc 1 1875 0
 2949              		.cfi_startproc
 2950              		@ args = 0, pretend = 0, frame = 0
 2951              		@ frame_needed = 0, uses_anonymous_args = 0
 2952              		@ link register save eliminated.
 2953              	.LVL277:
1876:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 2954              		.loc 1 1876 0
 2955 0000 406C     		ldr	r0, [r0, #68]
 2956              	.LVL278:
1877:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2957              		.loc 1 1877 0
 2958 0002 7047     		bx	lr
 2959              		.cfi_endproc
 2960              	.LFE163:
 2962              		.section	.text.HAL_QSPI_Abort,"ax",%progbits
 2963              		.align	2
 2964              		.global	HAL_QSPI_Abort
 2965              		.thumb
 2966              		.thumb_func
 2968              	HAL_QSPI_Abort:
 2969              	.LFB164:
1885:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
 2970              		.loc 1 1885 0
 2971              		.cfi_startproc
 2972              		@ args = 0, pretend = 0, frame = 0
 2973              		@ frame_needed = 0, uses_anonymous_args = 0
 2974              	.LVL279:
 2975 0000 30B5     		push	{r4, r5, lr}
 2976              	.LCFI35:
 2977              		.cfi_def_cfa_offset 12
 2978              		.cfi_offset 4, -12
 2979              		.cfi_offset 5, -8
 2980              		.cfi_offset 14, -4
 2981 0002 83B0     		sub	sp, sp, #12
 2982              	.LCFI36:
 2983              		.cfi_def_cfa_offset 24
 2984 0004 0446     		mov	r4, r0
 2985              	.LVL280:
1887:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 2986              		.loc 1 1887 0
 2987 0006 FFF7FEFF 		bl	HAL_GetTick
 2988              	.LVL281:
ARM GAS  /tmp/cc7S4Kq7.s 			page 101


1890:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 2989              		.loc 1 1890 0
 2990 000a 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 2991 000e 13F0020F 		tst	r3, #2
 2992 0012 34D0     		beq	.L182
 2993 0014 0546     		mov	r5, r0
1893:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 2994              		.loc 1 1893 0
 2995 0016 0023     		movs	r3, #0
 2996 0018 84F84030 		strb	r3, [r4, #64]
1895:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 2997              		.loc 1 1895 0
 2998 001c 2368     		ldr	r3, [r4]
 2999 001e 1A68     		ldr	r2, [r3]
 3000 0020 12F0040F 		tst	r2, #4
 3001 0024 0BD0     		beq	.L180
1898:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 3002              		.loc 1 1898 0
 3003 0026 1A68     		ldr	r2, [r3]
 3004 0028 22F00402 		bic	r2, r2, #4
 3005 002c 1A60     		str	r2, [r3]
1901:HALLIB/Src/stm32f7xx_hal_qspi.c ****       if(status != HAL_OK)
 3006              		.loc 1 1901 0
 3007 002e E06B     		ldr	r0, [r4, #60]
 3008              	.LVL282:
 3009 0030 FFF7FEFF 		bl	HAL_DMA_Abort
 3010              	.LVL283:
1902:HALLIB/Src/stm32f7xx_hal_qspi.c ****       {
 3011              		.loc 1 1902 0
 3012 0034 18B1     		cbz	r0, .L180
1904:HALLIB/Src/stm32f7xx_hal_qspi.c ****       }
 3013              		.loc 1 1904 0
 3014 0036 636C     		ldr	r3, [r4, #68]
 3015 0038 43F00403 		orr	r3, r3, #4
 3016 003c 6364     		str	r3, [r4, #68]
 3017              	.LVL284:
 3018              	.L180:
1909:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 3019              		.loc 1 1909 0
 3020 003e 2268     		ldr	r2, [r4]
 3021 0040 1368     		ldr	r3, [r2]
 3022 0042 43F00203 		orr	r3, r3, #2
 3023 0046 1360     		str	r3, [r2]
1912:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3024              		.loc 1 1912 0
 3025 0048 A36C     		ldr	r3, [r4, #72]
 3026 004a 0093     		str	r3, [sp]
 3027 004c 2B46     		mov	r3, r5
 3028 004e 0122     		movs	r2, #1
 3029 0050 0221     		movs	r1, #2
 3030 0052 2046     		mov	r0, r4
 3031 0054 FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 3032              	.LVL285:
1914:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 3033              		.loc 1 1914 0
 3034 0058 0346     		mov	r3, r0
 3035 005a 58B9     		cbnz	r0, .L181
ARM GAS  /tmp/cc7S4Kq7.s 			page 102


1916:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 3036              		.loc 1 1916 0
 3037 005c 2368     		ldr	r3, [r4]
 3038 005e 0222     		movs	r2, #2
 3039 0060 DA60     		str	r2, [r3, #12]
1919:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 3040              		.loc 1 1919 0
 3041 0062 A36C     		ldr	r3, [r4, #72]
 3042 0064 0093     		str	r3, [sp]
 3043 0066 2B46     		mov	r3, r5
 3044 0068 0022     		movs	r2, #0
 3045 006a 2021     		movs	r1, #32
 3046 006c 2046     		mov	r0, r4
 3047              	.LVL286:
 3048 006e FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 3049              	.LVL287:
 3050 0072 0346     		mov	r3, r0
 3051              	.LVL288:
 3052              	.L181:
1922:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 3053              		.loc 1 1922 0
 3054 0074 23B9     		cbnz	r3, .L179
1925:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 3055              		.loc 1 1925 0
 3056 0076 0122     		movs	r2, #1
 3057 0078 84F84120 		strb	r2, [r4, #65]
 3058 007c 00E0     		b	.L179
 3059              	.LVL289:
 3060              	.L182:
1886:HALLIB/Src/stm32f7xx_hal_qspi.c ****   uint32_t tickstart = HAL_GetTick();
 3061              		.loc 1 1886 0
 3062 007e 0023     		movs	r3, #0
 3063              	.LVL290:
 3064              	.L179:
1930:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3065              		.loc 1 1930 0
 3066 0080 1846     		mov	r0, r3
 3067 0082 03B0     		add	sp, sp, #12
 3068              	.LCFI37:
 3069              		.cfi_def_cfa_offset 12
 3070              		@ sp needed
 3071 0084 30BD     		pop	{r4, r5, pc}
 3072              		.cfi_endproc
 3073              	.LFE164:
 3075 0086 00BF     		.section	.text.HAL_QSPI_Abort_IT,"ax",%progbits
 3076              		.align	2
 3077              		.global	HAL_QSPI_Abort_IT
 3078              		.thumb
 3079              		.thumb_func
 3081              	HAL_QSPI_Abort_IT:
 3082              	.LFB165:
1938:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
 3083              		.loc 1 1938 0
 3084              		.cfi_startproc
 3085              		@ args = 0, pretend = 0, frame = 0
 3086              		@ frame_needed = 0, uses_anonymous_args = 0
 3087              	.LVL291:
ARM GAS  /tmp/cc7S4Kq7.s 			page 103


 3088 0000 08B5     		push	{r3, lr}
 3089              	.LCFI38:
 3090              		.cfi_def_cfa_offset 8
 3091              		.cfi_offset 3, -8
 3092              		.cfi_offset 14, -4
 3093              	.LVL292:
1942:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 3094              		.loc 1 1942 0
 3095 0002 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 3096 0006 13F0020F 		tst	r3, #2
 3097 000a 26D0     		beq	.L185
1945:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 3098              		.loc 1 1945 0
 3099 000c 0023     		movs	r3, #0
 3100 000e 80F84030 		strb	r3, [r0, #64]
1948:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 3101              		.loc 1 1948 0
 3102 0012 0823     		movs	r3, #8
 3103 0014 80F84130 		strb	r3, [r0, #65]
1951:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 3104              		.loc 1 1951 0
 3105 0018 0268     		ldr	r2, [r0]
 3106 001a 1368     		ldr	r3, [r2]
 3107 001c 23F4F813 		bic	r3, r3, #2031616
 3108 0020 1360     		str	r3, [r2]
1953:HALLIB/Src/stm32f7xx_hal_qspi.c ****     {
 3109              		.loc 1 1953 0
 3110 0022 0368     		ldr	r3, [r0]
 3111 0024 1A68     		ldr	r2, [r3]
 3112 0026 12F0040F 		tst	r2, #4
 3113 002a 0AD0     		beq	.L186
1956:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 3114              		.loc 1 1956 0
 3115 002c 1A68     		ldr	r2, [r3]
 3116 002e 22F00402 		bic	r2, r2, #4
 3117 0032 1A60     		str	r2, [r3]
1959:HALLIB/Src/stm32f7xx_hal_qspi.c ****       HAL_DMA_Abort_IT(hqspi->hdma);
 3118              		.loc 1 1959 0
 3119 0034 C36B     		ldr	r3, [r0, #60]
 3120 0036 0A4A     		ldr	r2, .L188
 3121 0038 1A65     		str	r2, [r3, #80]
1960:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }  
 3122              		.loc 1 1960 0
 3123 003a C06B     		ldr	r0, [r0, #60]
 3124              	.LVL293:
 3125 003c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3126              	.LVL294:
 3127 0040 0BE0     		b	.L185
 3128              	.LVL295:
 3129              	.L186:
1965:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 3130              		.loc 1 1965 0
 3131 0042 0222     		movs	r2, #2
 3132 0044 DA60     		str	r2, [r3, #12]
1968:HALLIB/Src/stm32f7xx_hal_qspi.c ****       
 3133              		.loc 1 1968 0
 3134 0046 0268     		ldr	r2, [r0]
ARM GAS  /tmp/cc7S4Kq7.s 			page 104


 3135 0048 1368     		ldr	r3, [r2]
 3136 004a 43F40033 		orr	r3, r3, #131072
 3137 004e 1360     		str	r3, [r2]
1971:HALLIB/Src/stm32f7xx_hal_qspi.c ****     }
 3138              		.loc 1 1971 0
 3139 0050 0268     		ldr	r2, [r0]
 3140 0052 1368     		ldr	r3, [r2]
 3141 0054 43F00203 		orr	r3, r3, #2
 3142 0058 1360     		str	r3, [r2]
 3143              	.LVL296:
 3144              	.L185:
1976:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3145              		.loc 1 1976 0
 3146 005a 0020     		movs	r0, #0
 3147 005c 08BD     		pop	{r3, pc}
 3148              	.L189:
 3149 005e 00BF     		.align	2
 3150              	.L188:
 3151 0060 00000000 		.word	QSPI_DMAAbortCplt
 3152              		.cfi_endproc
 3153              	.LFE165:
 3155              		.section	.text.QSPI_DMAError,"ax",%progbits
 3156              		.align	2
 3157              		.thumb
 3158              		.thumb_func
 3160              	QSPI_DMAError:
 3161              	.LFB173:
2094:HALLIB/Src/stm32f7xx_hal_qspi.c ****   QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3162              		.loc 1 2094 0
 3163              		.cfi_startproc
 3164              		@ args = 0, pretend = 0, frame = 0
 3165              		@ frame_needed = 0, uses_anonymous_args = 0
 3166              	.LVL297:
 3167 0000 10B5     		push	{r4, lr}
 3168              	.LCFI39:
 3169              		.cfi_def_cfa_offset 8
 3170              		.cfi_offset 4, -8
 3171              		.cfi_offset 14, -4
2095:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 3172              		.loc 1 2095 0
 3173 0002 846B     		ldr	r4, [r0, #56]
 3174              	.LVL298:
2098:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 3175              		.loc 1 2098 0
 3176 0004 FFF7FEFF 		bl	HAL_DMA_GetError
 3177              	.LVL299:
 3178 0008 0228     		cmp	r0, #2
 3179 000a 0ED0     		beq	.L190
2100:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->TxXferCount = 0;
 3180              		.loc 1 2100 0
 3181 000c 0023     		movs	r3, #0
 3182 000e A363     		str	r3, [r4, #56]
2101:HALLIB/Src/stm32f7xx_hal_qspi.c ****     hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
 3183              		.loc 1 2101 0
 3184 0010 E362     		str	r3, [r4, #44]
2102:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 3185              		.loc 1 2102 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 105


 3186 0012 636C     		ldr	r3, [r4, #68]
 3187 0014 43F00403 		orr	r3, r3, #4
 3188 0018 6364     		str	r3, [r4, #68]
2105:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 3189              		.loc 1 2105 0
 3190 001a 2268     		ldr	r2, [r4]
 3191 001c 1368     		ldr	r3, [r2]
 3192 001e 23F00403 		bic	r3, r3, #4
 3193 0022 1360     		str	r3, [r2]
2108:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 3194              		.loc 1 2108 0
 3195 0024 2046     		mov	r0, r4
 3196 0026 FFF7FEFF 		bl	HAL_QSPI_Abort_IT
 3197              	.LVL300:
 3198              	.L190:
 3199 002a 10BD     		pop	{r4, pc}
 3200              		.cfi_endproc
 3201              	.LFE173:
 3203              		.section	.text.HAL_QSPI_SetTimeout,"ax",%progbits
 3204              		.align	2
 3205              		.global	HAL_QSPI_SetTimeout
 3206              		.thumb
 3207              		.thumb_func
 3209              	HAL_QSPI_SetTimeout:
 3210              	.LFB166:
1984:HALLIB/Src/stm32f7xx_hal_qspi.c ****   hqspi->Timeout = Timeout;
 3211              		.loc 1 1984 0
 3212              		.cfi_startproc
 3213              		@ args = 0, pretend = 0, frame = 0
 3214              		@ frame_needed = 0, uses_anonymous_args = 0
 3215              		@ link register save eliminated.
 3216              	.LVL301:
1985:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 3217              		.loc 1 1985 0
 3218 0000 8164     		str	r1, [r0, #72]
 3219 0002 7047     		bx	lr
 3220              		.cfi_endproc
 3221              	.LFE166:
 3223              		.section	.text.HAL_QSPI_Init,"ax",%progbits
 3224              		.align	2
 3225              		.global	HAL_QSPI_Init
 3226              		.thumb
 3227              		.thumb_func
 3229              	HAL_QSPI_Init:
 3230              	.LFB136:
 250:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 3231              		.loc 1 250 0
 3232              		.cfi_startproc
 3233              		@ args = 0, pretend = 0, frame = 0
 3234              		@ frame_needed = 0, uses_anonymous_args = 0
 3235              	.LVL302:
 3236 0000 30B5     		push	{r4, r5, lr}
 3237              	.LCFI40:
 3238              		.cfi_def_cfa_offset 12
 3239              		.cfi_offset 4, -12
 3240              		.cfi_offset 5, -8
 3241              		.cfi_offset 14, -4
ARM GAS  /tmp/cc7S4Kq7.s 			page 106


 3242 0002 83B0     		sub	sp, sp, #12
 3243              	.LCFI41:
 3244              		.cfi_def_cfa_offset 24
 3245 0004 0446     		mov	r4, r0
 3246              	.LVL303:
 252:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 3247              		.loc 1 252 0
 3248 0006 FFF7FEFF 		bl	HAL_GetTick
 3249              	.LVL304:
 255:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 3250              		.loc 1 255 0
 3251 000a 002C     		cmp	r4, #0
 3252 000c 54D0     		beq	.L198
 3253 000e 0546     		mov	r5, r0
 276:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 3254              		.loc 1 276 0
 3255 0010 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
 3256 0014 DBB2     		uxtb	r3, r3
 3257 0016 012B     		cmp	r3, #1
 3258 0018 50D0     		beq	.L199
 276:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 3259              		.loc 1 276 0 is_stmt 0 discriminator 2
 3260 001a 0123     		movs	r3, #1
 3261 001c 84F84030 		strb	r3, [r4, #64]
 278:HALLIB/Src/stm32f7xx_hal_qspi.c ****   { 
 3262              		.loc 1 278 0 is_stmt 1 discriminator 2
 3263 0020 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 3264 0024 13F0FF0F 		tst	r3, #255
 3265 0028 0AD1     		bne	.L196
 281:HALLIB/Src/stm32f7xx_hal_qspi.c ****      
 3266              		.loc 1 281 0
 3267 002a 0023     		movs	r3, #0
 3268 002c 84F84030 		strb	r3, [r4, #64]
 284:HALLIB/Src/stm32f7xx_hal_qspi.c ****              
 3269              		.loc 1 284 0
 3270 0030 2046     		mov	r0, r4
 3271              	.LVL305:
 3272 0032 FFF7FEFF 		bl	HAL_QSPI_MspInit
 3273              	.LVL306:
 287:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 3274              		.loc 1 287 0
 3275 0036 41F28831 		movw	r1, #5000
 3276 003a 2046     		mov	r0, r4
 3277 003c FFF7FEFF 		bl	HAL_QSPI_SetTimeout
 3278              	.LVL307:
 3279              	.L196:
 291:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3280              		.loc 1 291 0
 3281 0040 2168     		ldr	r1, [r4]
 3282 0042 0B68     		ldr	r3, [r1]
 3283 0044 23F4F852 		bic	r2, r3, #7936
 3284 0048 A368     		ldr	r3, [r4, #8]
 3285 004a 013B     		subs	r3, r3, #1
 3286 004c 42EA0323 		orr	r3, r2, r3, lsl #8
 3287 0050 0B60     		str	r3, [r1]
 294:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3288              		.loc 1 294 0
ARM GAS  /tmp/cc7S4Kq7.s 			page 107


 3289 0052 A36C     		ldr	r3, [r4, #72]
 3290 0054 0093     		str	r3, [sp]
 3291 0056 2B46     		mov	r3, r5
 3292 0058 0022     		movs	r2, #0
 3293 005a 2021     		movs	r1, #32
 3294 005c 2046     		mov	r0, r4
 3295 005e FFF7FEFF 		bl	QSPI_WaitFlagStateUntilTimeout
 3296              	.LVL308:
 296:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 3297              		.loc 1 296 0
 3298 0062 0346     		mov	r3, r0
 3299 0064 18BB     		cbnz	r0, .L197
 300:HALLIB/Src/stm32f7xx_hal_qspi.c ****         
 3300              		.loc 1 300 0
 3301 0066 2568     		ldr	r5, [r4]
 3302              	.LVL309:
 3303 0068 2A68     		ldr	r2, [r5]
 3304 006a 1649     		ldr	r1, .L201
 3305 006c 1140     		ands	r1, r1, r2
 3306 006e 6068     		ldr	r0, [r4, #4]
 3307              	.LVL310:
 3308 0070 E268     		ldr	r2, [r4, #12]
 3309 0072 42EA0060 		orr	r0, r2, r0, lsl #24
 3310 0076 E269     		ldr	r2, [r4, #28]
 3311 0078 1043     		orrs	r0, r0, r2
 3312 007a 226A     		ldr	r2, [r4, #32]
 3313 007c 0243     		orrs	r2, r2, r0
 3314 007e 0A43     		orrs	r2, r2, r1
 3315 0080 2A60     		str	r2, [r5]
 303:HALLIB/Src/stm32f7xx_hal_qspi.c ****                ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockM
 3316              		.loc 1 303 0
 3317 0082 2568     		ldr	r5, [r4]
 3318 0084 6A68     		ldr	r2, [r5, #4]
 3319 0086 1049     		ldr	r1, .L201+4
 3320 0088 1140     		ands	r1, r1, r2
 3321 008a 2069     		ldr	r0, [r4, #16]
 3322 008c 6269     		ldr	r2, [r4, #20]
 3323 008e 42EA0040 		orr	r0, r2, r0, lsl #16
 3324 0092 A269     		ldr	r2, [r4, #24]
 3325 0094 0243     		orrs	r2, r2, r0
 3326 0096 0A43     		orrs	r2, r2, r1
 3327 0098 6A60     		str	r2, [r5, #4]
 307:HALLIB/Src/stm32f7xx_hal_qspi.c ****   
 3328              		.loc 1 307 0
 3329 009a 2168     		ldr	r1, [r4]
 3330 009c 0A68     		ldr	r2, [r1]
 3331 009e 42F00102 		orr	r2, r2, #1
 3332 00a2 0A60     		str	r2, [r1]
 310:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3333              		.loc 1 310 0
 3334 00a4 0022     		movs	r2, #0
 3335 00a6 6264     		str	r2, [r4, #68]
 313:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 3336              		.loc 1 313 0
 3337 00a8 0122     		movs	r2, #1
 3338 00aa 84F84120 		strb	r2, [r4, #65]
 3339              	.L197:
ARM GAS  /tmp/cc7S4Kq7.s 			page 108


 317:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3340              		.loc 1 317 0
 3341 00ae 0022     		movs	r2, #0
 3342 00b0 84F84020 		strb	r2, [r4, #64]
 320:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 3343              		.loc 1 320 0
 3344 00b4 1846     		mov	r0, r3
 3345 00b6 02E0     		b	.L195
 3346              	.LVL311:
 3347              	.L198:
 257:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 3348              		.loc 1 257 0
 3349 00b8 0120     		movs	r0, #1
 3350              	.LVL312:
 3351 00ba 00E0     		b	.L195
 3352              	.LVL313:
 3353              	.L199:
 276:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 3354              		.loc 1 276 0
 3355 00bc 0220     		movs	r0, #2
 3356              	.LVL314:
 3357              	.L195:
 321:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3358              		.loc 1 321 0
 3359 00be 03B0     		add	sp, sp, #12
 3360              	.LCFI42:
 3361              		.cfi_def_cfa_offset 12
 3362              		@ sp needed
 3363 00c0 30BD     		pop	{r4, r5, pc}
 3364              	.LVL315:
 3365              	.L202:
 3366 00c2 00BF     		.align	2
 3367              	.L201:
 3368 00c4 2FFFFF00 		.word	16777007
 3369 00c8 FEF8E0FF 		.word	-2033410
 3370              		.cfi_endproc
 3371              	.LFE136:
 3373              		.section	.text.HAL_QSPI_SetFifoThreshold,"ax",%progbits
 3374              		.align	2
 3375              		.global	HAL_QSPI_SetFifoThreshold
 3376              		.thumb
 3377              		.thumb_func
 3379              	HAL_QSPI_SetFifoThreshold:
 3380              	.LFB167:
1994:HALLIB/Src/stm32f7xx_hal_qspi.c ****   HAL_StatusTypeDef status = HAL_OK;
 3381              		.loc 1 1994 0
 3382              		.cfi_startproc
 3383              		@ args = 0, pretend = 0, frame = 0
 3384              		@ frame_needed = 0, uses_anonymous_args = 0
 3385              		@ link register save eliminated.
 3386              	.LVL316:
1998:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3387              		.loc 1 1998 0
 3388 0000 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 3389 0004 DBB2     		uxtb	r3, r3
 3390 0006 012B     		cmp	r3, #1
 3391 0008 18D0     		beq	.L206
ARM GAS  /tmp/cc7S4Kq7.s 			page 109


1998:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3392              		.loc 1 1998 0 is_stmt 0 discriminator 2
 3393 000a 0123     		movs	r3, #1
 3394 000c 80F84030 		strb	r3, [r0, #64]
2000:HALLIB/Src/stm32f7xx_hal_qspi.c ****   {
 3395              		.loc 1 2000 0 is_stmt 1 discriminator 2
 3396 0010 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 3397 0014 DBB2     		uxtb	r3, r3
 3398 0016 012B     		cmp	r3, #1
 3399 0018 0AD1     		bne	.L207
2003:HALLIB/Src/stm32f7xx_hal_qspi.c ****     
 3400              		.loc 1 2003 0
 3401 001a 8160     		str	r1, [r0, #8]
2006:HALLIB/Src/stm32f7xx_hal_qspi.c ****                ((hqspi->Init.FifoThreshold - 1) << QUADSPI_CR_FTHRES_Pos));
 3402              		.loc 1 2006 0
 3403 001c 0268     		ldr	r2, [r0]
 3404 001e 1368     		ldr	r3, [r2]
 3405 0020 23F4F853 		bic	r3, r3, #7936
 3406 0024 0139     		subs	r1, r1, #1
 3407              	.LVL317:
 3408 0026 43EA0121 		orr	r1, r3, r1, lsl #8
 3409 002a 1160     		str	r1, [r2]
 3410              	.LVL318:
1995:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3411              		.loc 1 1995 0
 3412 002c 0023     		movs	r3, #0
 3413 002e 00E0     		b	.L205
 3414              	.LVL319:
 3415              	.L207:
2011:HALLIB/Src/stm32f7xx_hal_qspi.c ****   }
 3416              		.loc 1 2011 0
 3417 0030 0223     		movs	r3, #2
 3418              	.LVL320:
 3419              	.L205:
2015:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3420              		.loc 1 2015 0
 3421 0032 0022     		movs	r2, #0
 3422 0034 80F84020 		strb	r2, [r0, #64]
2018:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 3423              		.loc 1 2018 0
 3424 0038 1846     		mov	r0, r3
 3425              	.LVL321:
 3426 003a 7047     		bx	lr
 3427              	.LVL322:
 3428              	.L206:
1998:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3429              		.loc 1 1998 0
 3430 003c 0220     		movs	r0, #2
 3431              	.LVL323:
2019:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3432              		.loc 1 2019 0
 3433 003e 7047     		bx	lr
 3434              		.cfi_endproc
 3435              	.LFE167:
 3437              		.section	.text.HAL_QSPI_GetFifoThreshold,"ax",%progbits
 3438              		.align	2
 3439              		.global	HAL_QSPI_GetFifoThreshold
ARM GAS  /tmp/cc7S4Kq7.s 			page 110


 3440              		.thumb
 3441              		.thumb_func
 3443              	HAL_QSPI_GetFifoThreshold:
 3444              	.LFB168:
2026:HALLIB/Src/stm32f7xx_hal_qspi.c ****   return ((READ_BIT(hqspi->Instance->CR, QUADSPI_CR_FTHRES) >> QUADSPI_CR_FTHRES_Pos) + 1);
 3445              		.loc 1 2026 0
 3446              		.cfi_startproc
 3447              		@ args = 0, pretend = 0, frame = 0
 3448              		@ frame_needed = 0, uses_anonymous_args = 0
 3449              		@ link register save eliminated.
 3450              	.LVL324:
2027:HALLIB/Src/stm32f7xx_hal_qspi.c **** }
 3451              		.loc 1 2027 0
 3452 0000 0368     		ldr	r3, [r0]
 3453 0002 1868     		ldr	r0, [r3]
 3454              	.LVL325:
 3455 0004 C0F30420 		ubfx	r0, r0, #8, #5
2028:HALLIB/Src/stm32f7xx_hal_qspi.c **** 
 3456              		.loc 1 2028 0
 3457 0008 0130     		adds	r0, r0, #1
 3458 000a 7047     		bx	lr
 3459              		.cfi_endproc
 3460              	.LFE168:
 3462              		.text
 3463              	.Letext0:
 3464              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 3465              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 3466              		.file 4 "Inc/stm32f767xx.h"
 3467              		.file 5 "Inc/stm32f7xx.h"
 3468              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 3469              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 3470              		.file 8 "HALLIB/Inc/stm32f7xx_hal_qspi.h"
 3471              		.file 9 "HALLIB/Inc/stm32f7xx_hal.h"
 3472              		.file 10 "CORE/core_cm7.h"
ARM GAS  /tmp/cc7S4Kq7.s 			page 111


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_qspi.c
     /tmp/cc7S4Kq7.s:21     .text.QSPI_DMARxCplt:00000000 $t
     /tmp/cc7S4Kq7.s:25     .text.QSPI_DMARxCplt:00000000 QSPI_DMARxCplt
     /tmp/cc7S4Kq7.s:51     .text.QSPI_DMATxCplt:00000000 $t
     /tmp/cc7S4Kq7.s:55     .text.QSPI_DMATxCplt:00000000 QSPI_DMATxCplt
     /tmp/cc7S4Kq7.s:80     .text.QSPI_Config:00000000 $t
     /tmp/cc7S4Kq7.s:84     .text.QSPI_Config:00000000 QSPI_Config
     /tmp/cc7S4Kq7.s:388    .text.QSPI_WaitFlagStateUntilTimeout:00000000 $t
     /tmp/cc7S4Kq7.s:392    .text.QSPI_WaitFlagStateUntilTimeout:00000000 QSPI_WaitFlagStateUntilTimeout
     /tmp/cc7S4Kq7.s:458    .text.HAL_QSPI_MspInit:00000000 $t
     /tmp/cc7S4Kq7.s:463    .text.HAL_QSPI_MspInit:00000000 HAL_QSPI_MspInit
     /tmp/cc7S4Kq7.s:476    .text.HAL_QSPI_MspDeInit:00000000 $t
     /tmp/cc7S4Kq7.s:481    .text.HAL_QSPI_MspDeInit:00000000 HAL_QSPI_MspDeInit
     /tmp/cc7S4Kq7.s:494    .text.HAL_QSPI_DeInit:00000000 $t
     /tmp/cc7S4Kq7.s:499    .text.HAL_QSPI_DeInit:00000000 HAL_QSPI_DeInit
     /tmp/cc7S4Kq7.s:560    .text.HAL_QSPI_Command:00000000 $t
     /tmp/cc7S4Kq7.s:565    .text.HAL_QSPI_Command:00000000 HAL_QSPI_Command
     /tmp/cc7S4Kq7.s:685    .text.HAL_QSPI_Command_IT:00000000 $t
     /tmp/cc7S4Kq7.s:690    .text.HAL_QSPI_Command_IT:00000000 HAL_QSPI_Command_IT
     /tmp/cc7S4Kq7.s:813    .text.HAL_QSPI_Transmit:00000000 $t
     /tmp/cc7S4Kq7.s:818    .text.HAL_QSPI_Transmit:00000000 HAL_QSPI_Transmit
     /tmp/cc7S4Kq7.s:982    .text.HAL_QSPI_Receive:00000000 $t
     /tmp/cc7S4Kq7.s:987    .text.HAL_QSPI_Receive:00000000 HAL_QSPI_Receive
     /tmp/cc7S4Kq7.s:1158   .text.HAL_QSPI_Transmit_IT:00000000 $t
     /tmp/cc7S4Kq7.s:1163   .text.HAL_QSPI_Transmit_IT:00000000 HAL_QSPI_Transmit_IT
     /tmp/cc7S4Kq7.s:1258   .text.HAL_QSPI_Receive_IT:00000000 $t
     /tmp/cc7S4Kq7.s:1263   .text.HAL_QSPI_Receive_IT:00000000 HAL_QSPI_Receive_IT
     /tmp/cc7S4Kq7.s:1376   .text.HAL_QSPI_Transmit_DMA:00000000 $t
     /tmp/cc7S4Kq7.s:1381   .text.HAL_QSPI_Transmit_DMA:00000000 HAL_QSPI_Transmit_DMA
     /tmp/cc7S4Kq7.s:1610   .text.HAL_QSPI_Transmit_DMA:00000130 $d
     /tmp/cc7S4Kq7.s:2488   .text.QSPI_DMATxHalfCplt:00000000 QSPI_DMATxHalfCplt
     /tmp/cc7S4Kq7.s:3160   .text.QSPI_DMAError:00000000 QSPI_DMAError
     /tmp/cc7S4Kq7.s:1617   .text.HAL_QSPI_Receive_DMA:00000000 $t
     /tmp/cc7S4Kq7.s:1622   .text.HAL_QSPI_Receive_DMA:00000000 HAL_QSPI_Receive_DMA
     /tmp/cc7S4Kq7.s:1866   .text.HAL_QSPI_Receive_DMA:00000144 $d
     /tmp/cc7S4Kq7.s:2442   .text.QSPI_DMARxHalfCplt:00000000 QSPI_DMARxHalfCplt
     /tmp/cc7S4Kq7.s:1873   .text.HAL_QSPI_AutoPolling:00000000 $t
     /tmp/cc7S4Kq7.s:1878   .text.HAL_QSPI_AutoPolling:00000000 HAL_QSPI_AutoPolling
     /tmp/cc7S4Kq7.s:2013   .text.HAL_QSPI_AutoPolling_IT:00000000 $t
     /tmp/cc7S4Kq7.s:2018   .text.HAL_QSPI_AutoPolling_IT:00000000 HAL_QSPI_AutoPolling_IT
     /tmp/cc7S4Kq7.s:2151   .text.HAL_QSPI_MemoryMapped:00000000 $t
     /tmp/cc7S4Kq7.s:2156   .text.HAL_QSPI_MemoryMapped:00000000 HAL_QSPI_MemoryMapped
     /tmp/cc7S4Kq7.s:2273   .text.HAL_QSPI_ErrorCallback:00000000 $t
     /tmp/cc7S4Kq7.s:2278   .text.HAL_QSPI_ErrorCallback:00000000 HAL_QSPI_ErrorCallback
     /tmp/cc7S4Kq7.s:2291   .text.QSPI_DMAAbortCplt:00000000 $t
     /tmp/cc7S4Kq7.s:2295   .text.QSPI_DMAAbortCplt:00000000 QSPI_DMAAbortCplt
     /tmp/cc7S4Kq7.s:2348   .text.HAL_QSPI_AbortCpltCallback:00000000 $t
     /tmp/cc7S4Kq7.s:2353   .text.HAL_QSPI_AbortCpltCallback:00000000 HAL_QSPI_AbortCpltCallback
     /tmp/cc7S4Kq7.s:2366   .text.HAL_QSPI_CmdCpltCallback:00000000 $t
     /tmp/cc7S4Kq7.s:2371   .text.HAL_QSPI_CmdCpltCallback:00000000 HAL_QSPI_CmdCpltCallback
     /tmp/cc7S4Kq7.s:2384   .text.HAL_QSPI_RxCpltCallback:00000000 $t
     /tmp/cc7S4Kq7.s:2389   .text.HAL_QSPI_RxCpltCallback:00000000 HAL_QSPI_RxCpltCallback
     /tmp/cc7S4Kq7.s:2402   .text.HAL_QSPI_TxCpltCallback:00000000 $t
     /tmp/cc7S4Kq7.s:2407   .text.HAL_QSPI_TxCpltCallback:00000000 HAL_QSPI_TxCpltCallback
     /tmp/cc7S4Kq7.s:2420   .text.HAL_QSPI_RxHalfCpltCallback:00000000 $t
     /tmp/cc7S4Kq7.s:2425   .text.HAL_QSPI_RxHalfCpltCallback:00000000 HAL_QSPI_RxHalfCpltCallback
ARM GAS  /tmp/cc7S4Kq7.s 			page 112


     /tmp/cc7S4Kq7.s:2438   .text.QSPI_DMARxHalfCplt:00000000 $t
     /tmp/cc7S4Kq7.s:2466   .text.HAL_QSPI_TxHalfCpltCallback:00000000 $t
     /tmp/cc7S4Kq7.s:2471   .text.HAL_QSPI_TxHalfCpltCallback:00000000 HAL_QSPI_TxHalfCpltCallback
     /tmp/cc7S4Kq7.s:2484   .text.QSPI_DMATxHalfCplt:00000000 $t
     /tmp/cc7S4Kq7.s:2512   .text.HAL_QSPI_FifoThresholdCallback:00000000 $t
     /tmp/cc7S4Kq7.s:2517   .text.HAL_QSPI_FifoThresholdCallback:00000000 HAL_QSPI_FifoThresholdCallback
     /tmp/cc7S4Kq7.s:2530   .text.HAL_QSPI_StatusMatchCallback:00000000 $t
     /tmp/cc7S4Kq7.s:2535   .text.HAL_QSPI_StatusMatchCallback:00000000 HAL_QSPI_StatusMatchCallback
     /tmp/cc7S4Kq7.s:2548   .text.HAL_QSPI_TimeOutCallback:00000000 $t
     /tmp/cc7S4Kq7.s:2553   .text.HAL_QSPI_TimeOutCallback:00000000 HAL_QSPI_TimeOutCallback
     /tmp/cc7S4Kq7.s:2566   .text.HAL_QSPI_IRQHandler:00000000 $t
     /tmp/cc7S4Kq7.s:2571   .text.HAL_QSPI_IRQHandler:00000000 HAL_QSPI_IRQHandler
     /tmp/cc7S4Kq7.s:2914   .text.HAL_QSPI_IRQHandler:000001f8 $d
     /tmp/cc7S4Kq7.s:2919   .text.HAL_QSPI_GetState:00000000 $t
     /tmp/cc7S4Kq7.s:2924   .text.HAL_QSPI_GetState:00000000 HAL_QSPI_GetState
     /tmp/cc7S4Kq7.s:2941   .text.HAL_QSPI_GetError:00000000 $t
     /tmp/cc7S4Kq7.s:2946   .text.HAL_QSPI_GetError:00000000 HAL_QSPI_GetError
     /tmp/cc7S4Kq7.s:2963   .text.HAL_QSPI_Abort:00000000 $t
     /tmp/cc7S4Kq7.s:2968   .text.HAL_QSPI_Abort:00000000 HAL_QSPI_Abort
     /tmp/cc7S4Kq7.s:3076   .text.HAL_QSPI_Abort_IT:00000000 $t
     /tmp/cc7S4Kq7.s:3081   .text.HAL_QSPI_Abort_IT:00000000 HAL_QSPI_Abort_IT
     /tmp/cc7S4Kq7.s:3151   .text.HAL_QSPI_Abort_IT:00000060 $d
     /tmp/cc7S4Kq7.s:3156   .text.QSPI_DMAError:00000000 $t
     /tmp/cc7S4Kq7.s:3204   .text.HAL_QSPI_SetTimeout:00000000 $t
     /tmp/cc7S4Kq7.s:3209   .text.HAL_QSPI_SetTimeout:00000000 HAL_QSPI_SetTimeout
     /tmp/cc7S4Kq7.s:3224   .text.HAL_QSPI_Init:00000000 $t
     /tmp/cc7S4Kq7.s:3229   .text.HAL_QSPI_Init:00000000 HAL_QSPI_Init
     /tmp/cc7S4Kq7.s:3368   .text.HAL_QSPI_Init:000000c4 $d
     /tmp/cc7S4Kq7.s:3374   .text.HAL_QSPI_SetFifoThreshold:00000000 $t
     /tmp/cc7S4Kq7.s:3379   .text.HAL_QSPI_SetFifoThreshold:00000000 HAL_QSPI_SetFifoThreshold
     /tmp/cc7S4Kq7.s:3438   .text.HAL_QSPI_GetFifoThreshold:00000000 $t
     /tmp/cc7S4Kq7.s:3443   .text.HAL_QSPI_GetFifoThreshold:00000000 HAL_QSPI_GetFifoThreshold
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort_IT
HAL_DMA_Abort
HAL_DMA_GetError
