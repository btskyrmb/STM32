ARM GAS  /tmp/ccps07Ev.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_sd.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.SD_DMATransmitCplt,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	SD_DMATransmitCplt:
  26              	.LFB163:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_sd.c"
   1:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_sd.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @file    stm32f7xx_hal_sd.c
   4:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief   SD card HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_sd.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_sd.c ****   *          functionalities of the Secure Digital (SD) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_sd.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_sd.c ****   *           + IO operation functions
  10:HALLIB/Src/stm32f7xx_hal_sd.c ****   *           + Peripheral Control functions 
  11:HALLIB/Src/stm32f7xx_hal_sd.c ****   *           + SD card Control functions
  12:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         
  13:HALLIB/Src/stm32f7xx_hal_sd.c ****   @verbatim
  14:HALLIB/Src/stm32f7xx_hal_sd.c ****   ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_sd.c ****                         ##### How to use this driver #####
  16:HALLIB/Src/stm32f7xx_hal_sd.c ****   ==============================================================================
  17:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]
  18:HALLIB/Src/stm32f7xx_hal_sd.c ****     This driver implements a high level communication layer for read and write from/to 
  19:HALLIB/Src/stm32f7xx_hal_sd.c ****     this memory. The needed STM32 hardware resources (SDMMC and GPIO) are performed by 
  20:HALLIB/Src/stm32f7xx_hal_sd.c ****     the user in HAL_SD_MspInit() function (MSP layer).                             
  21:HALLIB/Src/stm32f7xx_hal_sd.c ****     Basically, the MSP layer configuration should be the same as we provide in the 
  22:HALLIB/Src/stm32f7xx_hal_sd.c ****     examples.
  23:HALLIB/Src/stm32f7xx_hal_sd.c ****     You can easily tailor this configuration according to hardware resources.
  24:HALLIB/Src/stm32f7xx_hal_sd.c **** 
  25:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]
  26:HALLIB/Src/stm32f7xx_hal_sd.c ****     This driver is a generic layered driver for SDMMC memories which uses the HAL 
  27:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC driver functions to interface with SD and uSD cards devices. 
  28:HALLIB/Src/stm32f7xx_hal_sd.c ****     It is used as follows:
  29:HALLIB/Src/stm32f7xx_hal_sd.c ****  
  30:HALLIB/Src/stm32f7xx_hal_sd.c ****     (#)Initialize the SDMMC low level resources by implement the HAL_SD_MspInit() API:
  31:HALLIB/Src/stm32f7xx_hal_sd.c ****         (##) Enable the SDMMC interface clock using __HAL_RCC_SDMMC_CLK_ENABLE(); 
ARM GAS  /tmp/ccps07Ev.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_sd.c ****         (##) SDMMC pins configuration for SD card
  33:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) Enable the clock for the SDMMC GPIOs using the functions __HAL_RCC_GPIOx_CLK_ENAB
  34:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) Configure these SDMMC pins as alternate function pull-up using HAL_GPIO_Init()
  35:HALLIB/Src/stm32f7xx_hal_sd.c ****                   and according to your pin assignment;
  36:HALLIB/Src/stm32f7xx_hal_sd.c ****         (##) DMA Configuration if you need to use DMA process (HAL_SD_ReadBlocks_DMA()
  37:HALLIB/Src/stm32f7xx_hal_sd.c ****              and HAL_SD_WriteBlocks_DMA() APIs).
  38:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) Enable the DMAx interface clock using __HAL_RCC_DMAx_CLK_ENABLE(); 
  39:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) Configure the DMA using the function HAL_DMA_Init() with predeclared and filled. 
  40:HALLIB/Src/stm32f7xx_hal_sd.c ****         (##) NVIC configuration if you need to use interrupt process when using DMA transfer.
  41:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) Configure the SDMMC and DMA interrupt priorities using functions
  42:HALLIB/Src/stm32f7xx_hal_sd.c ****                   HAL_NVIC_SetPriority(); DMA priority is superior to SDMMC's priority
  43:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) Enable the NVIC DMA and SDMMC IRQs using function HAL_NVIC_EnableIRQ()
  44:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) SDMMC interrupts are managed using the macros __HAL_SD_ENABLE_IT() 
  45:HALLIB/Src/stm32f7xx_hal_sd.c ****                   and __HAL_SD_DISABLE_IT() inside the communication process.
  46:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) SDMMC interrupts pending bits are managed using the macros __HAL_SD_GET_IT()
  47:HALLIB/Src/stm32f7xx_hal_sd.c ****                   and __HAL_SD_CLEAR_IT()
  48:HALLIB/Src/stm32f7xx_hal_sd.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_SD_ReadBlocks_IT()
  49:HALLIB/Src/stm32f7xx_hal_sd.c ****              and HAL_SD_WriteBlocks_IT() APIs).
  50:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) Configure the SDMMC interrupt priorities using function
  51:HALLIB/Src/stm32f7xx_hal_sd.c ****                   HAL_NVIC_SetPriority();
  52:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) Enable the NVIC SDMMC IRQs using function HAL_NVIC_EnableIRQ()
  53:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) SDMMC interrupts are managed using the macros __HAL_SD_ENABLE_IT() 
  54:HALLIB/Src/stm32f7xx_hal_sd.c ****                   and __HAL_SD_DISABLE_IT() inside the communication process.
  55:HALLIB/Src/stm32f7xx_hal_sd.c ****             (+++) SDMMC interrupts pending bits are managed using the macros __HAL_SD_GET_IT()
  56:HALLIB/Src/stm32f7xx_hal_sd.c ****                   and __HAL_SD_CLEAR_IT()
  57:HALLIB/Src/stm32f7xx_hal_sd.c ****     (#) At this stage, you can perform SD read/write/erase operations after SD card initialization 
  58:HALLIB/Src/stm32f7xx_hal_sd.c **** 
  59:HALLIB/Src/stm32f7xx_hal_sd.c ****          
  60:HALLIB/Src/stm32f7xx_hal_sd.c ****   *** SD Card Initialization and configuration ***
  61:HALLIB/Src/stm32f7xx_hal_sd.c ****   ================================================    
  62:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]
  63:HALLIB/Src/stm32f7xx_hal_sd.c ****     To initialize the SD Card, use the HAL_SD_Init() function. It Initializes 
  64:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC IP (STM32 side) and the SD Card, and put it into StandBy State (Ready for data transfer).
  65:HALLIB/Src/stm32f7xx_hal_sd.c ****     This function provide the following operations:
  66:HALLIB/Src/stm32f7xx_hal_sd.c **** 
  67:HALLIB/Src/stm32f7xx_hal_sd.c ****     (#) Initialize the SDMMC peripheral interface with defaullt configuration.
  68:HALLIB/Src/stm32f7xx_hal_sd.c ****         The initialization process is done at 400KHz. You can change or adapt 
  69:HALLIB/Src/stm32f7xx_hal_sd.c ****         this frequency by adjusting the "ClockDiv" field. 
  70:HALLIB/Src/stm32f7xx_hal_sd.c ****         The SD Card frequency (SDMMC_CK) is computed as follows:
  71:HALLIB/Src/stm32f7xx_hal_sd.c ****   
  72:HALLIB/Src/stm32f7xx_hal_sd.c ****            SDMMC_CK = SDMMCCLK / (ClockDiv + 2)
  73:HALLIB/Src/stm32f7xx_hal_sd.c ****   
  74:HALLIB/Src/stm32f7xx_hal_sd.c ****         In initialization mode and according to the SD Card standard, 
  75:HALLIB/Src/stm32f7xx_hal_sd.c ****         make sure that the SDMMC_CK frequency doesn't exceed 400KHz.
  76:HALLIB/Src/stm32f7xx_hal_sd.c **** 
  77:HALLIB/Src/stm32f7xx_hal_sd.c ****         This phase of initialization is done through SDMMC_Init() and 
  78:HALLIB/Src/stm32f7xx_hal_sd.c ****         SDMMC_PowerState_ON() SDMMC low level APIs.
  79:HALLIB/Src/stm32f7xx_hal_sd.c **** 
  80:HALLIB/Src/stm32f7xx_hal_sd.c ****     (#) Initialize the SD card. The API used is HAL_SD_InitCard().
  81:HALLIB/Src/stm32f7xx_hal_sd.c ****         This phase allows the card initialization and identification 
  82:HALLIB/Src/stm32f7xx_hal_sd.c ****         and check the SD Card type (Standard Capacity or High Capacity)
  83:HALLIB/Src/stm32f7xx_hal_sd.c ****         The initialization flow is compatible with SD standard.
  84:HALLIB/Src/stm32f7xx_hal_sd.c **** 
  85:HALLIB/Src/stm32f7xx_hal_sd.c ****         This API (HAL_SD_InitCard()) could be used also to reinitialize the card in case 
  86:HALLIB/Src/stm32f7xx_hal_sd.c ****         of plug-off plug-in.
  87:HALLIB/Src/stm32f7xx_hal_sd.c ****   
  88:HALLIB/Src/stm32f7xx_hal_sd.c ****     (#) Configure the SD Card Data transfer frequency. By Default, the card transfer 
ARM GAS  /tmp/ccps07Ev.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_sd.c ****         frequency is set to 24MHz. You can change or adapt this frequency by adjusting 
  90:HALLIB/Src/stm32f7xx_hal_sd.c ****         the "ClockDiv" field.
  91:HALLIB/Src/stm32f7xx_hal_sd.c ****         In transfer mode and according to the SD Card standard, make sure that the 
  92:HALLIB/Src/stm32f7xx_hal_sd.c ****         SDMMC_CK frequency doesn't exceed 25MHz and 50MHz in High-speed mode switch.
  93:HALLIB/Src/stm32f7xx_hal_sd.c ****         To be able to use a frequency higher than 24MHz, you should use the SDMMC 
  94:HALLIB/Src/stm32f7xx_hal_sd.c ****         peripheral in bypass mode. Refer to the corresponding reference manual 
  95:HALLIB/Src/stm32f7xx_hal_sd.c ****         for more details.
  96:HALLIB/Src/stm32f7xx_hal_sd.c ****   
  97:HALLIB/Src/stm32f7xx_hal_sd.c ****     (#) Select the corresponding SD Card according to the address read with the step 2.
  98:HALLIB/Src/stm32f7xx_hal_sd.c ****     
  99:HALLIB/Src/stm32f7xx_hal_sd.c ****     (#) Configure the SD Card in wide bus mode: 4-bits data.
 100:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 101:HALLIB/Src/stm32f7xx_hal_sd.c ****   *** SD Card Read operation ***
 102:HALLIB/Src/stm32f7xx_hal_sd.c ****   ==============================
 103:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..] 
 104:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) You can read from SD card in polling mode by using function HAL_SD_ReadBlocks(). 
 105:HALLIB/Src/stm32f7xx_hal_sd.c ****         This function allows the read of 512 bytes blocks.
 106:HALLIB/Src/stm32f7xx_hal_sd.c ****         You can choose either one block read operation or multiple block read operation 
 107:HALLIB/Src/stm32f7xx_hal_sd.c ****         by adjusting the "NumberOfBlocks" parameter.
 108:HALLIB/Src/stm32f7xx_hal_sd.c ****         After this, you have to ensure that the transfer is done correctly. The check is done
 109:HALLIB/Src/stm32f7xx_hal_sd.c ****         through HAL_SD_GetCardState() function for SD card state.
 110:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 111:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) You can read from SD card in DMA mode by using function HAL_SD_ReadBlocks_DMA().
 112:HALLIB/Src/stm32f7xx_hal_sd.c ****         This function allows the read of 512 bytes blocks.
 113:HALLIB/Src/stm32f7xx_hal_sd.c ****         You can choose either one block read operation or multiple block read operation 
 114:HALLIB/Src/stm32f7xx_hal_sd.c ****         by adjusting the "NumberOfBlocks" parameter.
 115:HALLIB/Src/stm32f7xx_hal_sd.c ****         After this, you have to ensure that the transfer is done correctly. The check is done
 116:HALLIB/Src/stm32f7xx_hal_sd.c ****         through HAL_SD_GetCardState() function for SD card state.
 117:HALLIB/Src/stm32f7xx_hal_sd.c ****         You could also check the DMA transfer process through the SD Rx interrupt event.
 118:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 119:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) You can read from SD card in Interrupt mode by using function HAL_SD_ReadBlocks_IT().
 120:HALLIB/Src/stm32f7xx_hal_sd.c ****         This function allows the read of 512 bytes blocks.
 121:HALLIB/Src/stm32f7xx_hal_sd.c ****         You can choose either one block read operation or multiple block read operation 
 122:HALLIB/Src/stm32f7xx_hal_sd.c ****         by adjusting the "NumberOfBlocks" parameter.
 123:HALLIB/Src/stm32f7xx_hal_sd.c ****         After this, you have to ensure that the transfer is done correctly. The check is done
 124:HALLIB/Src/stm32f7xx_hal_sd.c ****         through HAL_SD_GetCardState() function for SD card state.
 125:HALLIB/Src/stm32f7xx_hal_sd.c ****         You could also check the IT transfer process through the SD Rx interrupt event.
 126:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 127:HALLIB/Src/stm32f7xx_hal_sd.c ****   *** SD Card Write operation ***
 128:HALLIB/Src/stm32f7xx_hal_sd.c ****   =============================== 
 129:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..] 
 130:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) You can write to SD card in polling mode by using function HAL_SD_WriteBlocks(). 
 131:HALLIB/Src/stm32f7xx_hal_sd.c ****         This function allows the read of 512 bytes blocks.
 132:HALLIB/Src/stm32f7xx_hal_sd.c ****         You can choose either one block read operation or multiple block read operation 
 133:HALLIB/Src/stm32f7xx_hal_sd.c ****         by adjusting the "NumberOfBlocks" parameter.
 134:HALLIB/Src/stm32f7xx_hal_sd.c ****         After this, you have to ensure that the transfer is done correctly. The check is done
 135:HALLIB/Src/stm32f7xx_hal_sd.c ****         through HAL_SD_GetCardState() function for SD card state.
 136:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 137:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) You can write to SD card in DMA mode by using function HAL_SD_WriteBlocks_DMA().
 138:HALLIB/Src/stm32f7xx_hal_sd.c ****         This function allows the read of 512 bytes blocks.
 139:HALLIB/Src/stm32f7xx_hal_sd.c ****         You can choose either one block read operation or multiple block read operation 
 140:HALLIB/Src/stm32f7xx_hal_sd.c ****         by adjusting the "NumberOfBlocks" parameter.
 141:HALLIB/Src/stm32f7xx_hal_sd.c ****         After this, you have to ensure that the transfer is done correctly. The check is done
 142:HALLIB/Src/stm32f7xx_hal_sd.c ****         through HAL_SD_GetCardState() function for SD card state.
 143:HALLIB/Src/stm32f7xx_hal_sd.c ****         You could also check the DMA transfer process through the SD Tx interrupt event.  
 144:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 145:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) You can write to SD card in Interrupt mode by using function HAL_SD_WriteBlocks_IT().
ARM GAS  /tmp/ccps07Ev.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_sd.c ****         This function allows the read of 512 bytes blocks.
 147:HALLIB/Src/stm32f7xx_hal_sd.c ****         You can choose either one block read operation or multiple block read operation 
 148:HALLIB/Src/stm32f7xx_hal_sd.c ****         by adjusting the "NumberOfBlocks" parameter.
 149:HALLIB/Src/stm32f7xx_hal_sd.c ****         After this, you have to ensure that the transfer is done correctly. The check is done
 150:HALLIB/Src/stm32f7xx_hal_sd.c ****         through HAL_SD_GetCardState() function for SD card state.
 151:HALLIB/Src/stm32f7xx_hal_sd.c ****         You could also check the IT transfer process through the SD Tx interrupt event.
 152:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 153:HALLIB/Src/stm32f7xx_hal_sd.c ****   *** SD card status ***
 154:HALLIB/Src/stm32f7xx_hal_sd.c ****   ====================== 
 155:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]
 156:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) The SD Status contains status bits that are related to the SD Memory 
 157:HALLIB/Src/stm32f7xx_hal_sd.c ****         Card proprietary features. To get SD card status use the HAL_SD_GetCardStatus().
 158:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 159:HALLIB/Src/stm32f7xx_hal_sd.c ****   *** SD card information ***
 160:HALLIB/Src/stm32f7xx_hal_sd.c ****   =========================== 
 161:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]
 162:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) To get SD card information, you can use the function HAL_SD_GetCardInfo().
 163:HALLIB/Src/stm32f7xx_hal_sd.c ****         It returns useful information about the SD card such as block size, card type,
 164:HALLIB/Src/stm32f7xx_hal_sd.c ****         block number ...
 165:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 166:HALLIB/Src/stm32f7xx_hal_sd.c ****   *** SD card CSD register ***
 167:HALLIB/Src/stm32f7xx_hal_sd.c ****   ============================
 168:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]
 169:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) The HAL_SD_GetCardCSD() API allows to get the parameters of the CSD register.
 170:HALLIB/Src/stm32f7xx_hal_sd.c ****         Some of the CSD parameters are useful for card initialization and identification.
 171:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 172:HALLIB/Src/stm32f7xx_hal_sd.c ****   *** SD card CID register ***
 173:HALLIB/Src/stm32f7xx_hal_sd.c ****   ============================
 174:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]
 175:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) The HAL_SD_GetCardCID() API allows to get the parameters of the CID register.
 176:HALLIB/Src/stm32f7xx_hal_sd.c ****         Some of the CSD parameters are useful for card initialization and identification.
 177:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 178:HALLIB/Src/stm32f7xx_hal_sd.c ****   *** SD HAL driver macros list ***
 179:HALLIB/Src/stm32f7xx_hal_sd.c ****   ==================================
 180:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]
 181:HALLIB/Src/stm32f7xx_hal_sd.c ****     Below the list of most used macros in SD HAL driver.
 182:HALLIB/Src/stm32f7xx_hal_sd.c ****        
 183:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) __HAL_SD_ENABLE : Enable the SD device
 184:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) __HAL_SD_DISABLE : Disable the SD device
 185:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) __HAL_SD_DMA_ENABLE: Enable the SDMMC DMA transfer
 186:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) __HAL_SD_DMA_DISABLE: Disable the SDMMC DMA transfer
 187:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) __HAL_SD_ENABLE_IT: Enable the SD device interrupt
 188:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) __HAL_SD_DISABLE_IT: Disable the SD device interrupt
 189:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) __HAL_SD_GET_FLAG:Check whether the specified SD flag is set or not
 190:HALLIB/Src/stm32f7xx_hal_sd.c ****     (+) __HAL_SD_CLEAR_FLAG: Clear the SD's pending flags
 191:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 192:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]
 193:HALLIB/Src/stm32f7xx_hal_sd.c ****     (@) You can refer to the SD HAL driver header file for more useful macros 
 194:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 195:HALLIB/Src/stm32f7xx_hal_sd.c ****   @endverbatim
 196:HALLIB/Src/stm32f7xx_hal_sd.c ****   ******************************************************************************
 197:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @attention
 198:HALLIB/Src/stm32f7xx_hal_sd.c ****   *
 199:HALLIB/Src/stm32f7xx_hal_sd.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 200:HALLIB/Src/stm32f7xx_hal_sd.c ****   *
 201:HALLIB/Src/stm32f7xx_hal_sd.c ****   * Redistribution and use in source and binary forms, with or without modification,
 202:HALLIB/Src/stm32f7xx_hal_sd.c ****   * are permitted provided that the following conditions are met:
ARM GAS  /tmp/ccps07Ev.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_sd.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 204:HALLIB/Src/stm32f7xx_hal_sd.c ****   *      this list of conditions and the following disclaimer.
 205:HALLIB/Src/stm32f7xx_hal_sd.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 206:HALLIB/Src/stm32f7xx_hal_sd.c ****   *      this list of conditions and the following disclaimer in the documentation
 207:HALLIB/Src/stm32f7xx_hal_sd.c ****   *      and/or other materials provided with the distribution.
 208:HALLIB/Src/stm32f7xx_hal_sd.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 209:HALLIB/Src/stm32f7xx_hal_sd.c ****   *      may be used to endorse or promote products derived from this software
 210:HALLIB/Src/stm32f7xx_hal_sd.c ****   *      without specific prior written permission.
 211:HALLIB/Src/stm32f7xx_hal_sd.c ****   *
 212:HALLIB/Src/stm32f7xx_hal_sd.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 213:HALLIB/Src/stm32f7xx_hal_sd.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 214:HALLIB/Src/stm32f7xx_hal_sd.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 215:HALLIB/Src/stm32f7xx_hal_sd.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 216:HALLIB/Src/stm32f7xx_hal_sd.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 217:HALLIB/Src/stm32f7xx_hal_sd.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 218:HALLIB/Src/stm32f7xx_hal_sd.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 219:HALLIB/Src/stm32f7xx_hal_sd.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 220:HALLIB/Src/stm32f7xx_hal_sd.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 221:HALLIB/Src/stm32f7xx_hal_sd.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 222:HALLIB/Src/stm32f7xx_hal_sd.c ****   *
 223:HALLIB/Src/stm32f7xx_hal_sd.c ****   ******************************************************************************
 224:HALLIB/Src/stm32f7xx_hal_sd.c ****   */ 
 225:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 226:HALLIB/Src/stm32f7xx_hal_sd.c **** /* Includes ------------------------------------------------------------------*/
 227:HALLIB/Src/stm32f7xx_hal_sd.c **** #include "stm32f7xx_hal.h"
 228:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 229:HALLIB/Src/stm32f7xx_hal_sd.c **** /** @addtogroup STM32F7xx_HAL_Driver
 230:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @{
 231:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 232:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 233:HALLIB/Src/stm32f7xx_hal_sd.c **** /** @addtogroup SD 
 234:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @{
 235:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 236:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 237:HALLIB/Src/stm32f7xx_hal_sd.c **** #ifdef HAL_SD_MODULE_ENABLED
 238:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 239:HALLIB/Src/stm32f7xx_hal_sd.c **** /* Private typedef -----------------------------------------------------------*/
 240:HALLIB/Src/stm32f7xx_hal_sd.c **** /* Private define ------------------------------------------------------------*/
 241:HALLIB/Src/stm32f7xx_hal_sd.c **** /** @addtogroup SD_Private_Defines
 242:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @{
 243:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 244:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 245:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
 246:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @}
 247:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 248:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 249:HALLIB/Src/stm32f7xx_hal_sd.c **** /* Private macro -------------------------------------------------------------*/
 250:HALLIB/Src/stm32f7xx_hal_sd.c **** /* Private variables ---------------------------------------------------------*/
 251:HALLIB/Src/stm32f7xx_hal_sd.c **** /* Private function prototypes -----------------------------------------------*/
 252:HALLIB/Src/stm32f7xx_hal_sd.c **** /* Private functions ---------------------------------------------------------*/
 253:HALLIB/Src/stm32f7xx_hal_sd.c **** /** @defgroup SD_Private_Functions SD Private Functions
 254:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @{
 255:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 256:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_InitCard(SD_HandleTypeDef *hsd);
 257:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_PowerON(SD_HandleTypeDef *hsd);                      
 258:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus);
 259:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus);
ARM GAS  /tmp/ccps07Ev.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd);
 261:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd);
 262:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR);
 263:HALLIB/Src/stm32f7xx_hal_sd.c **** static HAL_StatusTypeDef SD_PowerOFF(SD_HandleTypeDef *hsd);
 264:HALLIB/Src/stm32f7xx_hal_sd.c **** static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd);
 265:HALLIB/Src/stm32f7xx_hal_sd.c **** static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd);
 266:HALLIB/Src/stm32f7xx_hal_sd.c **** static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 267:HALLIB/Src/stm32f7xx_hal_sd.c **** static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 268:HALLIB/Src/stm32f7xx_hal_sd.c **** static void SD_DMAError(DMA_HandleTypeDef *hdma);
 269:HALLIB/Src/stm32f7xx_hal_sd.c **** static void SD_DMATxAbort(DMA_HandleTypeDef *hdma);
 270:HALLIB/Src/stm32f7xx_hal_sd.c **** static void SD_DMARxAbort(DMA_HandleTypeDef *hdma);
 271:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
 272:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @}
 273:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 274:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 275:HALLIB/Src/stm32f7xx_hal_sd.c **** /* Exported functions --------------------------------------------------------*/
 276:HALLIB/Src/stm32f7xx_hal_sd.c **** /** @addtogroup SD_Exported_Functions
 277:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @{
 278:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 279:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 280:HALLIB/Src/stm32f7xx_hal_sd.c **** /** @addtogroup SD_Exported_Functions_Group1
 281:HALLIB/Src/stm32f7xx_hal_sd.c ****  *  @brief   Initialization and de-initialization functions 
 282:HALLIB/Src/stm32f7xx_hal_sd.c ****  *
 283:HALLIB/Src/stm32f7xx_hal_sd.c **** @verbatim    
 284:HALLIB/Src/stm32f7xx_hal_sd.c ****   ==============================================================================
 285:HALLIB/Src/stm32f7xx_hal_sd.c ****           ##### Initialization and de-initialization functions #####
 286:HALLIB/Src/stm32f7xx_hal_sd.c ****   ==============================================================================
 287:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]  
 288:HALLIB/Src/stm32f7xx_hal_sd.c ****     This section provides functions allowing to initialize/de-initialize the SD
 289:HALLIB/Src/stm32f7xx_hal_sd.c ****     card device to be ready for use.
 290:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 291:HALLIB/Src/stm32f7xx_hal_sd.c **** @endverbatim
 292:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @{
 293:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 294:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 295:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
 296:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Initializes the SD according to the specified parameters in the 
 297:HALLIB/Src/stm32f7xx_hal_sd.c ****             SD_HandleTypeDef and create the associated handle.
 298:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to the SD handle  
 299:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
 300:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 301:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
 302:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 303:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check the SD handle allocation */
 304:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd == NULL)
 305:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 306:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 307:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 308:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 309:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check the parameters */
 310:HALLIB/Src/stm32f7xx_hal_sd.c ****   assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 311:HALLIB/Src/stm32f7xx_hal_sd.c ****   assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 312:HALLIB/Src/stm32f7xx_hal_sd.c ****   assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 313:HALLIB/Src/stm32f7xx_hal_sd.c ****   assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 314:HALLIB/Src/stm32f7xx_hal_sd.c ****   assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 315:HALLIB/Src/stm32f7xx_hal_sd.c ****   assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 316:HALLIB/Src/stm32f7xx_hal_sd.c ****   assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
ARM GAS  /tmp/ccps07Ev.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 318:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->State == HAL_SD_STATE_RESET)
 319:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 320:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Allocate lock resource and initialize it */
 321:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->Lock = HAL_UNLOCKED;
 322:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 323:HALLIB/Src/stm32f7xx_hal_sd.c ****     HAL_SD_MspInit(hsd);
 324:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 325:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 326:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->State = HAL_SD_STATE_BUSY;
 327:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 328:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Initialize the Card parameters */
 329:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_InitCard(hsd);
 330:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 331:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Initialize the error code */
 332:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 333:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 334:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Initialize the SD operation */
 335:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->Context = SD_CONTEXT_NONE;
 336:HALLIB/Src/stm32f7xx_hal_sd.c ****                                                                                      
 337:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Initialize the SD state */
 338:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->State = HAL_SD_STATE_READY;
 339:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 340:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
 341:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 342:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 343:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
 344:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Initializes the SD Card.
 345:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
 346:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   This function initializes the SD card. It could be used when a card 
 347:HALLIB/Src/stm32f7xx_hal_sd.c ****             re-initialization is needed.
 348:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
 349:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 350:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
 351:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 352:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 353:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_InitTypeDef Init;
 354:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 355:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Default SDMMC peripheral configuration for SD card initialization */
 356:HALLIB/Src/stm32f7xx_hal_sd.c ****   Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 357:HALLIB/Src/stm32f7xx_hal_sd.c ****   Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 358:HALLIB/Src/stm32f7xx_hal_sd.c ****   Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 359:HALLIB/Src/stm32f7xx_hal_sd.c ****   Init.BusWide             = SDMMC_BUS_WIDE_1B;
 360:HALLIB/Src/stm32f7xx_hal_sd.c ****   Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 361:HALLIB/Src/stm32f7xx_hal_sd.c ****   Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 362:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 363:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Initialize SDMMC peripheral interface with default configuration */
 364:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_Init(hsd->Instance, Init);
 365:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 366:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Disable SDMMC Clock */
 367:HALLIB/Src/stm32f7xx_hal_sd.c ****   __HAL_SD_DISABLE(hsd); 
 368:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 369:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Set Power State to ON */
 370:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_PowerState_ON(hsd->Instance);
 371:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 372:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Enable SDMMC Clock */
 373:HALLIB/Src/stm32f7xx_hal_sd.c ****   __HAL_SD_ENABLE(hsd);
ARM GAS  /tmp/ccps07Ev.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 375:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Required power up waiting time before starting the SD initialization sequence */
 376:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_Delay(2);
 377:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 378:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Identify card operating voltage */
 379:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SD_PowerON(hsd);
 380:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
 381:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 382:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
 383:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= errorstate;
 384:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 385:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 386:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 387:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Card initialization */
 388:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SD_InitCard(hsd);
 389:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
 390:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 391:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
 392:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= errorstate;
 393:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 394:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 395:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 396:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
 397:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 398:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 399:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
 400:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  De-Initializes the SD card.
 401:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
 402:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
 403:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 404:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
 405:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 406:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check the SD handle allocation */
 407:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd == NULL)
 408:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 409:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 410:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 411:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 412:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check the parameters */
 413:HALLIB/Src/stm32f7xx_hal_sd.c ****   assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 414:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 415:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->State = HAL_SD_STATE_BUSY;
 416:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 417:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Set SD power state to off */ 
 418:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_PowerOFF(hsd);
 419:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 420:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* De-Initialize the MSP layer */
 421:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_MspDeInit(hsd);
 422:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 423:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->ErrorCode = HAL_SD_ERROR_NONE;
 424:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->State = HAL_SD_STATE_RESET;
 425:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 426:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
 427:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 428:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 429:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 430:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
ARM GAS  /tmp/ccps07Ev.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Initializes the SD MSP.
 432:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
 433:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval None
 434:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 435:HALLIB/Src/stm32f7xx_hal_sd.c **** __weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
 436:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 437:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
 438:HALLIB/Src/stm32f7xx_hal_sd.c ****   UNUSED(hsd);
 439:HALLIB/Src/stm32f7xx_hal_sd.c ****  
 440:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 441:HALLIB/Src/stm32f7xx_hal_sd.c ****             the HAL_SD_MspInit could be implemented in the user file
 442:HALLIB/Src/stm32f7xx_hal_sd.c ****    */
 443:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 444:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 445:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
 446:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  De-Initialize SD MSP.
 447:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
 448:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval None
 449:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 450:HALLIB/Src/stm32f7xx_hal_sd.c **** __weak void HAL_SD_MspDeInit(SD_HandleTypeDef *hsd)
 451:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 452:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
 453:HALLIB/Src/stm32f7xx_hal_sd.c ****   UNUSED(hsd);
 454:HALLIB/Src/stm32f7xx_hal_sd.c ****  
 455:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 456:HALLIB/Src/stm32f7xx_hal_sd.c ****             the HAL_SD_MspDeInit could be implemented in the user file
 457:HALLIB/Src/stm32f7xx_hal_sd.c ****    */
 458:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 459:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 460:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
 461:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @}
 462:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 463:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 464:HALLIB/Src/stm32f7xx_hal_sd.c **** /** @addtogroup SD_Exported_Functions_Group2
 465:HALLIB/Src/stm32f7xx_hal_sd.c ****  *  @brief   Data transfer functions 
 466:HALLIB/Src/stm32f7xx_hal_sd.c ****  *
 467:HALLIB/Src/stm32f7xx_hal_sd.c **** @verbatim   
 468:HALLIB/Src/stm32f7xx_hal_sd.c ****   ==============================================================================
 469:HALLIB/Src/stm32f7xx_hal_sd.c ****                         ##### IO operation functions #####
 470:HALLIB/Src/stm32f7xx_hal_sd.c ****   ==============================================================================  
 471:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]
 472:HALLIB/Src/stm32f7xx_hal_sd.c ****     This subsection provides a set of functions allowing to manage the data 
 473:HALLIB/Src/stm32f7xx_hal_sd.c ****     transfer from/to SD card.
 474:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 475:HALLIB/Src/stm32f7xx_hal_sd.c **** @endverbatim
 476:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @{
 477:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 478:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 479:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
 480:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Reads block(s) from a specified address in a card. The Data transfer 
 481:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         is managed by polling mode.
 482:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   This API should be followed by a check on the card state through
 483:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         HAL_SD_GetCardState().
 484:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
 485:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pData pointer to the buffer that will contain the received data
 486:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  BlockAdd Block Address from where data is to be read 
 487:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  NumberOfBlocks Number of SD blocks to read
ARM GAS  /tmp/ccps07Ev.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  Timeout Specify timeout value
 489:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
 490:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 491:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint3
 492:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 493:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 494:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 495:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tickstart = HAL_GetTick();
 496:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 497:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 498:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(NULL == pData)
 499:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 500:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 501:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 502:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 503:HALLIB/Src/stm32f7xx_hal_sd.c ****  
 504:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->State == HAL_SD_STATE_READY)
 505:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 506:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 507:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 508:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 509:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 510:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 511:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 512:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 513:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 514:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_BUSY;
 515:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 516:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Initialize data control register */
 517:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->Instance->DCTRL = 0;
 518:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 519:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 520:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 521:HALLIB/Src/stm32f7xx_hal_sd.c ****       BlockAdd *= 512;
 522:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 523:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 524:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set Block Size for Card */
 525:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 526:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 527:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 528:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 529:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 530:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 531:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 532:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 533:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 534:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 535:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Configure the SD DPSM (Data Path State Machine) */
 536:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataTimeOut   = SDMMC_DATATIMEOUT;
 537:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 538:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 539:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 540:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 541:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
 542:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
 543:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 544:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Read block(s) in polling mode */
ARM GAS  /tmp/ccps07Ev.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(NumberOfBlocks > 1)
 546:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 547:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 548:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 549:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Read Multi Block command */ 
 550:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 551:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 552:HALLIB/Src/stm32f7xx_hal_sd.c ****     else
 553:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 554:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 555:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 556:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Read Single Block command */
 557:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 558:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 559:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 560:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 561:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 562:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 563:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 564:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 565:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 566:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 567:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 568:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Poll on SDMMC flags */
 569:HALLIB/Src/stm32f7xx_hal_sd.c ****     while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | 
 570:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 571:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 572:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 573:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Read data from SDMMC Rx FIFO */
 574:HALLIB/Src/stm32f7xx_hal_sd.c ****         for(count = 0U; count < 8U; count++)
 575:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 576:HALLIB/Src/stm32f7xx_hal_sd.c ****           *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 577:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 578:HALLIB/Src/stm32f7xx_hal_sd.c ****         tempbuff += 8U;
 579:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 580:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 581:HALLIB/Src/stm32f7xx_hal_sd.c ****       if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 582:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 583:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Clear all the static flags */
 584:HALLIB/Src/stm32f7xx_hal_sd.c ****         __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 585:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 586:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State= HAL_SD_STATE_READY;
 587:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_TIMEOUT;
 588:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 589:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 590:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 591:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send stop transmission command in case of multiblock read */
 592:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 593:HALLIB/Src/stm32f7xx_hal_sd.c ****     {    
 594:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(hsd->SdCard.CardType != CARD_SECURED)
 595:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 596:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Send stop transmission command */
 597:HALLIB/Src/stm32f7xx_hal_sd.c ****         errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 598:HALLIB/Src/stm32f7xx_hal_sd.c ****         if(errorstate != HAL_SD_ERROR_NONE)
 599:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 600:HALLIB/Src/stm32f7xx_hal_sd.c ****           /* Clear all the static flags */
 601:HALLIB/Src/stm32f7xx_hal_sd.c ****           __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
ARM GAS  /tmp/ccps07Ev.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_sd.c ****           hsd->ErrorCode |= errorstate;
 603:HALLIB/Src/stm32f7xx_hal_sd.c ****           hsd->State = HAL_SD_STATE_READY;
 604:HALLIB/Src/stm32f7xx_hal_sd.c ****           return HAL_ERROR;
 605:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 606:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 607:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 608:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 609:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Get error state */
 610:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 611:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 612:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 613:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 614:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 615:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 616:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 617:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 618:HALLIB/Src/stm32f7xx_hal_sd.c ****     else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 619:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 620:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 621:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 622:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 623:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 624:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 625:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 626:HALLIB/Src/stm32f7xx_hal_sd.c ****     else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 627:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 628:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 629:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 630:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 631:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 632:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 633:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 634:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 635:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Empty FIFO if there is still any data */
 636:HALLIB/Src/stm32f7xx_hal_sd.c ****     while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 637:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 638:HALLIB/Src/stm32f7xx_hal_sd.c ****       *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 639:HALLIB/Src/stm32f7xx_hal_sd.c ****       tempbuff++;
 640:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 641:HALLIB/Src/stm32f7xx_hal_sd.c ****       if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 642:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 643:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Clear all the static flags */
 644:HALLIB/Src/stm32f7xx_hal_sd.c ****         __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 645:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 646:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State= HAL_SD_STATE_READY;
 647:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_ERROR;
 648:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 649:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 650:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 651:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Clear all the static flags */
 652:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 653:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 654:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
 655:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 656:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_OK;
 657:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 658:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
ARM GAS  /tmp/ccps07Ev.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 660:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 661:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 662:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 663:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 664:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 665:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
 666:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Allows to write block(s) to a specified address in a card. The Data
 667:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         transfer is managed by polling mode.
 668:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   This API should be followed by a check on the card state through
 669:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         HAL_SD_GetCardState().
 670:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
 671:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pData pointer to the buffer that will contain the data to transmit
 672:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  BlockAdd Block Address where data will be written  
 673:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  NumberOfBlocks Number of SD blocks to write
 674:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  Timeout Specify timeout value
 675:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
 676:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 677:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint
 678:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 679:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 680:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 681:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tickstart = HAL_GetTick();
 682:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t count = 0;
 683:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t *tempbuff = (uint32_t *)pData;
 684:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 685:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(NULL == pData)
 686:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 687:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 688:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 689:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 690:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 691:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->State == HAL_SD_STATE_READY)
 692:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 693:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 694:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 695:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 696:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 697:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 698:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 699:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 700:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 701:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_BUSY;
 702:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 703:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Initialize data control register */
 704:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->Instance->DCTRL = 0;
 705:HALLIB/Src/stm32f7xx_hal_sd.c ****      
 706:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 707:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 708:HALLIB/Src/stm32f7xx_hal_sd.c ****       BlockAdd *= 512;
 709:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 710:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 711:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set Block Size for Card */ 
 712:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 713:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 714:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 715:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
ARM GAS  /tmp/ccps07Ev.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 717:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 718:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 719:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 720:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 721:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 722:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Write Blocks in Polling mode */
 723:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(NumberOfBlocks > 1U)
 724:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 725:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 726:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 727:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Write Multi Block command */ 
 728:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 729:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 730:HALLIB/Src/stm32f7xx_hal_sd.c ****     else
 731:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 732:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 733:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 734:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Write Single Block command */
 735:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 736:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 737:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 738:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 739:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 740:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 741:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 742:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 743:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 744:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 745:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 746:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Configure the SD DPSM (Data Path State Machine) */ 
 747:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataTimeOut   = SDMMC_DATATIMEOUT;
 748:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 749:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 750:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 751:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 752:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
 753:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
 754:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 755:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Write block(s) in polling mode */
 756:HALLIB/Src/stm32f7xx_hal_sd.c ****     while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 757:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 758:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 759:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 760:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Write data to SDMMC Tx FIFO */
 761:HALLIB/Src/stm32f7xx_hal_sd.c ****         for(count = 0U; count < 8U; count++)
 762:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 763:HALLIB/Src/stm32f7xx_hal_sd.c ****           SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 764:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 765:HALLIB/Src/stm32f7xx_hal_sd.c ****         tempbuff += 8U;
 766:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 767:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 768:HALLIB/Src/stm32f7xx_hal_sd.c ****       if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 769:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 770:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Clear all the static flags */
 771:HALLIB/Src/stm32f7xx_hal_sd.c ****         __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 772:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode |= errorstate;
ARM GAS  /tmp/ccps07Ev.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State = HAL_SD_STATE_READY;
 774:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_TIMEOUT;
 775:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 776:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 777:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 778:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send stop transmission command in case of multiblock write */
 779:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 780:HALLIB/Src/stm32f7xx_hal_sd.c ****     { 
 781:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(hsd->SdCard.CardType != CARD_SECURED)
 782:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 783:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Send stop transmission command */
 784:HALLIB/Src/stm32f7xx_hal_sd.c ****         errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 785:HALLIB/Src/stm32f7xx_hal_sd.c ****         if(errorstate != HAL_SD_ERROR_NONE)
 786:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 787:HALLIB/Src/stm32f7xx_hal_sd.c ****           /* Clear all the static flags */
 788:HALLIB/Src/stm32f7xx_hal_sd.c ****           __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 789:HALLIB/Src/stm32f7xx_hal_sd.c ****           hsd->ErrorCode |= errorstate;
 790:HALLIB/Src/stm32f7xx_hal_sd.c ****           hsd->State = HAL_SD_STATE_READY;
 791:HALLIB/Src/stm32f7xx_hal_sd.c ****           return HAL_ERROR;
 792:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 793:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 794:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 795:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 796:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Get error state */
 797:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 798:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 799:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 800:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 802:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 803:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 804:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 805:HALLIB/Src/stm32f7xx_hal_sd.c ****     else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 806:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 807:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 808:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 809:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 810:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 811:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 812:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 813:HALLIB/Src/stm32f7xx_hal_sd.c ****     else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 814:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 815:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 816:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 817:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 818:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 819:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 820:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 821:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 822:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Clear all the static flags */
 823:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 824:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 825:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
 826:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 827:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_OK;
 828:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 829:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
ARM GAS  /tmp/ccps07Ev.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 831:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 832:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 833:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 834:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 835:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 836:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
 837:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Reads block(s) from a specified address in a card. The Data transfer 
 838:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         is managed in interrupt mode. 
 839:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   This API should be followed by a check on the card state through
 840:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         HAL_SD_GetCardState().
 841:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   You could also check the IT transfer process through the SD Rx 
 842:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         interrupt event.
 843:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle                 
 844:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pData Pointer to the buffer that will contain the received data
 845:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  BlockAdd Block Address from where data is to be read 
 846:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  NumberOfBlocks Number of blocks to read.
 847:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
 848:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 849:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_ReadBlocks_IT(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, ui
 850:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 851:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 852:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 853:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 854:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(NULL == pData)
 855:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 856:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 857:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 858:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 859:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 860:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->State == HAL_SD_STATE_READY)
 861:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 862:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 863:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 864:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 865:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 866:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 867:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 868:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 869:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 870:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_BUSY;
 871:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 872:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Initialize data control register */
 873:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->Instance->DCTRL = 0U;
 874:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 875:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->pRxBuffPtr = (uint32_t *)pData;
 876:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 877:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 878:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DA
 879:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 880:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 881:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 882:HALLIB/Src/stm32f7xx_hal_sd.c ****       BlockAdd *= 512U;
 883:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 884:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 885:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Configure the SD DPSM (Data Path State Machine) */ 
 886:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataTimeOut   = SDMMC_DATATIMEOUT;
ARM GAS  /tmp/ccps07Ev.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 888:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 889:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 890:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 891:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
 892:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
 893:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 894:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set Block Size for Card */ 
 895:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 896:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 897:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 898:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 899:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 900:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 901:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 902:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 903:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 904:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 905:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Read Blocks in IT mode */
 906:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(NumberOfBlocks > 1U)
 907:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 908:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_IT);
 909:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 910:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Read Multi Block command */
 911:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 912:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 913:HALLIB/Src/stm32f7xx_hal_sd.c ****     else
 914:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 915:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_IT);
 916:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 917:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Read Single Block command */
 918:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 919:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 920:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 921:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 922:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 923:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 924:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 925:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 926:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 927:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 928:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 929:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_OK;
 930:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 931:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
 932:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 933:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_BUSY;
 934:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 935:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 936:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 937:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
 938:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Writes block(s) to a specified address in a card. The Data transfer 
 939:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         is managed in interrupt mode. 
 940:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   This API should be followed by a check on the card state through
 941:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         HAL_SD_GetCardState().
 942:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   You could also check the IT transfer process through the SD Tx 
 943:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         interrupt event. 
ARM GAS  /tmp/ccps07Ev.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
 945:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pData Pointer to the buffer that will contain the data to transmit
 946:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  BlockAdd Block Address where data will be written    
 947:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  NumberOfBlocks Number of blocks to write
 948:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
 949:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
 950:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_WriteBlocks_IT(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, u
 951:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 952:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 953:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 954:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 955:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(NULL == pData)
 956:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 957:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 958:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 959:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 960:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 961:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->State == HAL_SD_STATE_READY)
 962:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 963:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 964:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 965:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 966:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 967:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 968:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 969:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 970:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 971:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_BUSY;
 972:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 973:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Initialize data control register */
 974:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->Instance->DCTRL = 0U;
 975:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 976:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->pTxBuffPtr = (uint32_t *)pData;
 977:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 978:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 979:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Enable transfer interrupts */
 980:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_D
 981:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 982:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 983:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 984:HALLIB/Src/stm32f7xx_hal_sd.c ****       BlockAdd *= 512U;
 985:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 986:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 987:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set Block Size for Card */ 
 988:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 989:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 990:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 991:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
 992:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 993:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 994:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 995:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 996:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 997:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 998:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Write Blocks in Polling mode */
 999:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(NumberOfBlocks > 1U)
1000:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
ARM GAS  /tmp/ccps07Ev.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK| SD_CONTEXT_IT);
1002:HALLIB/Src/stm32f7xx_hal_sd.c ****       
1003:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Write Multi Block command */ 
1004:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
1005:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1006:HALLIB/Src/stm32f7xx_hal_sd.c ****     else
1007:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1008:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_IT);
1009:HALLIB/Src/stm32f7xx_hal_sd.c ****       
1010:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Write Single Block command */ 
1011:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
1012:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1013:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
1014:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1015:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
1016:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
1017:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
1018:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
1019:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1020:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1021:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1022:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Configure the SD DPSM (Data Path State Machine) */ 
1023:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataTimeOut   = SDMMC_DATATIMEOUT;
1024:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = BLOCKSIZE * NumberOfBlocks;
1025:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
1026:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
1027:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
1028:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
1029:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
1030:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1031:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_OK;
1032:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1033:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
1034:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1035:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_BUSY;
1036:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1037:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1038:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1039:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1040:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Reads block(s) from a specified address in a card. The Data transfer 
1041:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         is managed by DMA mode. 
1042:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   This API should be followed by a check on the card state through
1043:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         HAL_SD_GetCardState().
1044:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   You could also check the DMA transfer process through the SD Rx 
1045:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         interrupt event.
1046:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer SD handle                 
1047:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pData Pointer to the buffer that will contain the received data
1048:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  BlockAdd Block Address from where data is to be read  
1049:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  NumberOfBlocks Number of blocks to read.
1050:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
1051:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1052:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, u
1053:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1054:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
1055:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
1056:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1057:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(NULL == pData)
ARM GAS  /tmp/ccps07Ev.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1059:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
1060:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
1061:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1062:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1063:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->State == HAL_SD_STATE_READY)
1064:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1065:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = HAL_DMA_ERROR_NONE;
1066:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1067:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
1068:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1069:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
1070:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1071:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1072:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1073:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_BUSY;
1074:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1075:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Initialize data control register */
1076:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->Instance->DCTRL = 0U;
1077:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1078:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DA
1079:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1080:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set the DMA transfer complete callback */
1081:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
1082:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1083:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set the DMA error callback */
1084:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->hdmarx->XferErrorCallback = SD_DMAError;
1085:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1086:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set the DMA Abort callback */
1087:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->hdmarx->XferAbortCallback = NULL;
1088:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1089:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Enable the DMA Channel */
1090:HALLIB/Src/stm32f7xx_hal_sd.c ****     HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCK
1091:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1092:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Enable SD DMA transfer */
1093:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_DMA_ENABLE(hsd);
1094:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1095:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
1096:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1097:HALLIB/Src/stm32f7xx_hal_sd.c ****       BlockAdd *= 512U;
1098:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1099:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1100:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Configure the SD DPSM (Data Path State Machine) */ 
1101:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataTimeOut   = SDMMC_DATATIMEOUT;
1102:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = BLOCKSIZE * NumberOfBlocks;
1103:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
1104:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
1105:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
1106:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
1107:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
1108:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1109:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set Block Size for Card */ 
1110:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
1111:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
1112:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1113:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
1114:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
ARM GAS  /tmp/ccps07Ev.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
1116:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
1117:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1118:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1119:HALLIB/Src/stm32f7xx_hal_sd.c ****         
1120:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Read Blocks in DMA mode */
1121:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(NumberOfBlocks > 1U)
1122:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1123:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
1124:HALLIB/Src/stm32f7xx_hal_sd.c ****       
1125:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Read Multi Block command */ 
1126:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
1127:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1128:HALLIB/Src/stm32f7xx_hal_sd.c ****     else
1129:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1130:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
1131:HALLIB/Src/stm32f7xx_hal_sd.c ****       
1132:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Read Single Block command */ 
1133:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
1134:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1135:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
1136:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1137:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
1138:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
1139:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
1140:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
1141:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1142:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1143:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1144:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_OK;
1145:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1146:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
1147:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1148:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_BUSY;
1149:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1150:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1151:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1152:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1153:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Writes block(s) to a specified address in a card. The Data transfer 
1154:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         is managed by DMA mode. 
1155:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   This API should be followed by a check on the card state through
1156:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         HAL_SD_GetCardState().
1157:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   You could also check the DMA transfer process through the SD Tx 
1158:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         interrupt event.
1159:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
1160:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pData Pointer to the buffer that will contain the data to transmit
1161:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  BlockAdd Block Address where data will be written  
1162:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  NumberOfBlocks Number of blocks to write
1163:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
1164:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1165:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, 
1166:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1167:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
1168:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
1169:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1170:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(NULL == pData)
1171:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
ARM GAS  /tmp/ccps07Ev.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
1173:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
1174:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1175:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1176:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->State == HAL_SD_STATE_READY)
1177:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1178:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = HAL_DMA_ERROR_NONE;
1179:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1180:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
1181:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1182:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
1183:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1184:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1185:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1186:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_BUSY;
1187:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1188:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Initialize data control register */
1189:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->Instance->DCTRL = 0U;
1190:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1191:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Enable SD Error interrupts */
1192:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
1193:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1194:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set the DMA transfer complete callback */
1195:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
1196:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1197:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set the DMA error callback */
1198:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->hdmatx->XferErrorCallback = SD_DMAError;
1199:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1200:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set the DMA Abort callback */
1201:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->hdmatx->XferAbortCallback = NULL;
1202:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1203:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
1204:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1205:HALLIB/Src/stm32f7xx_hal_sd.c ****       BlockAdd *= 512U;
1206:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1207:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1208:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set Block Size for Card */ 
1209:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
1210:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
1211:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1212:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
1213:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
1214:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
1215:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
1216:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1217:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1218:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1219:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Write Blocks in Polling mode */
1220:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(NumberOfBlocks > 1U)
1221:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1222:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
1223:HALLIB/Src/stm32f7xx_hal_sd.c ****       
1224:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Write Multi Block command */ 
1225:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
1226:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1227:HALLIB/Src/stm32f7xx_hal_sd.c ****     else
1228:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
ARM GAS  /tmp/ccps07Ev.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
1230:HALLIB/Src/stm32f7xx_hal_sd.c ****       
1231:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Write Single Block command */
1232:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
1233:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1234:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
1235:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1236:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
1237:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
1238:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
1239:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
1240:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1241:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1242:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1243:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Enable SDMMC DMA transfer */
1244:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_DMA_ENABLE(hsd);
1245:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1246:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Enable the DMA Channel */
1247:HALLIB/Src/stm32f7xx_hal_sd.c ****     HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCK
1248:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1249:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Configure the SD DPSM (Data Path State Machine) */ 
1250:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataTimeOut   = SDMMC_DATATIMEOUT;
1251:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = BLOCKSIZE * NumberOfBlocks;
1252:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
1253:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
1254:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
1255:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
1256:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
1257:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1258:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_OK;
1259:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1260:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
1261:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1262:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_BUSY;
1263:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1264:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1265:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1266:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1267:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Erases the specified memory area of the given SD card.
1268:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @note   This API should be followed by a check on the card state through
1269:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         HAL_SD_GetCardState().
1270:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle 
1271:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  BlockStartAdd Start Block address
1272:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  BlockEndAdd End Block address
1273:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
1274:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1275:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_Erase(SD_HandleTypeDef *hsd, uint32_t BlockStartAdd, uint32_t BlockEndAdd)
1276:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1277:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
1278:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1279:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->State == HAL_SD_STATE_READY)
1280:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1281:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = HAL_DMA_ERROR_NONE;
1282:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1283:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(BlockEndAdd < BlockStartAdd)
1284:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1285:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
ARM GAS  /tmp/ccps07Ev.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1287:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1288:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1289:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(BlockEndAdd > (hsd->SdCard.LogBlockNbr))
1290:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1291:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
1292:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1293:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1294:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1295:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_BUSY;
1296:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1297:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Check if the card command class supports erase command */
1298:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(((hsd->SdCard.Class) & SDMMC_CCCC_ERASE) == 0U)
1299:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1300:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
1301:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
1302:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
1303:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
1304:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1305:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1306:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1307:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
1308:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1309:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
1310:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
1311:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
1312:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
1313:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1314:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1315:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1316:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Get start and end block for high capacity cards */
1317:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
1318:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1319:HALLIB/Src/stm32f7xx_hal_sd.c ****       BlockStartAdd *= 512U;
1320:HALLIB/Src/stm32f7xx_hal_sd.c ****       BlockEndAdd   *= 512U;
1321:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1322:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1323:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
1324:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->SdCard.CardType != CARD_SECURED)
1325:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1326:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Send CMD32 SD_ERASE_GRP_START with argument as addr  */
1327:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdSDEraseStartAdd(hsd->Instance, BlockStartAdd);
1328:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(errorstate != HAL_SD_ERROR_NONE)
1329:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
1330:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Clear all the static flags */
1331:HALLIB/Src/stm32f7xx_hal_sd.c ****         __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
1332:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode |= errorstate;
1333:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State = HAL_SD_STATE_READY;
1334:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_ERROR;
1335:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
1336:HALLIB/Src/stm32f7xx_hal_sd.c ****       
1337:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Send CMD33 SD_ERASE_GRP_END with argument as addr  */
1338:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdSDEraseEndAdd(hsd->Instance, BlockEndAdd);
1339:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(errorstate != HAL_SD_ERROR_NONE)
1340:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
1341:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Clear all the static flags */
1342:HALLIB/Src/stm32f7xx_hal_sd.c ****         __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
ARM GAS  /tmp/ccps07Ev.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode |= errorstate;
1344:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State = HAL_SD_STATE_READY;
1345:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_ERROR;
1346:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
1347:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1348:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1349:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send CMD38 ERASE */
1350:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdErase(hsd->Instance);
1351:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
1352:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1353:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
1354:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
1355:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
1356:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
1357:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
1358:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1359:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1360:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
1361:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1362:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_OK;
1363:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1364:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
1365:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1366:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_BUSY;
1367:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1368:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1369:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1370:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1371:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  This function handles SD card interrupt request.
1372:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
1373:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval None
1374:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1375:HALLIB/Src/stm32f7xx_hal_sd.c **** void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
1376:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1377:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
1378:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1379:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check for SDMMC interrupt flags */
1380:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
1381:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1382:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
1383:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1384:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
1385:HALLIB/Src/stm32f7xx_hal_sd.c ****                              SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
1386:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1387:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((hsd->Context & SD_CONTEXT_IT) != RESET)
1388:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1389:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_
1390:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
1391:HALLIB/Src/stm32f7xx_hal_sd.c ****         errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
1392:HALLIB/Src/stm32f7xx_hal_sd.c ****         if(errorstate != HAL_SD_ERROR_NONE)
1393:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
1394:HALLIB/Src/stm32f7xx_hal_sd.c ****           hsd->ErrorCode |= errorstate;
1395:HALLIB/Src/stm32f7xx_hal_sd.c ****           HAL_SD_ErrorCallback(hsd);
1396:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
1397:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
1398:HALLIB/Src/stm32f7xx_hal_sd.c ****       
1399:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear all the static flags */
ARM GAS  /tmp/ccps07Ev.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
1401:HALLIB/Src/stm32f7xx_hal_sd.c ****       
1402:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
1403:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_RE
1404:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
1405:HALLIB/Src/stm32f7xx_hal_sd.c ****         HAL_SD_RxCpltCallback(hsd);
1406:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
1407:HALLIB/Src/stm32f7xx_hal_sd.c ****       else
1408:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
1409:HALLIB/Src/stm32f7xx_hal_sd.c ****         HAL_SD_TxCpltCallback(hsd);
1410:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
1411:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1412:HALLIB/Src/stm32f7xx_hal_sd.c ****     else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
1413:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1414:HALLIB/Src/stm32f7xx_hal_sd.c ****       if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
1415:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
1416:HALLIB/Src/stm32f7xx_hal_sd.c ****         errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
1417:HALLIB/Src/stm32f7xx_hal_sd.c ****         if(errorstate != HAL_SD_ERROR_NONE)
1418:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
1419:HALLIB/Src/stm32f7xx_hal_sd.c ****           hsd->ErrorCode |= errorstate;
1420:HALLIB/Src/stm32f7xx_hal_sd.c ****           HAL_SD_ErrorCallback(hsd);
1421:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
1422:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
1423:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_RE
1424:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
1425:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Disable the DMA transfer for transmit request by setting the DMAEN bit
1426:HALLIB/Src/stm32f7xx_hal_sd.c ****         in the SD DCTRL register */
1427:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
1428:HALLIB/Src/stm32f7xx_hal_sd.c ****         
1429:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State = HAL_SD_STATE_READY;
1430:HALLIB/Src/stm32f7xx_hal_sd.c ****         
1431:HALLIB/Src/stm32f7xx_hal_sd.c ****         HAL_SD_TxCpltCallback(hsd);
1432:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
1433:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1434:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1435:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1436:HALLIB/Src/stm32f7xx_hal_sd.c ****   else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
1437:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1438:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_TXFIFOHE);
1439:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1440:HALLIB/Src/stm32f7xx_hal_sd.c ****     SD_Write_IT(hsd);
1441:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1442:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1443:HALLIB/Src/stm32f7xx_hal_sd.c ****   else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
1444:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1445:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXFIFOHF);
1446:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1447:HALLIB/Src/stm32f7xx_hal_sd.c ****     SD_Read_IT(hsd);
1448:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1449:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1450:HALLIB/Src/stm32f7xx_hal_sd.c ****   else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_I
1451:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1452:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Set Error code */
1453:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
1454:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1455:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
1456:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
ARM GAS  /tmp/ccps07Ev.s 			page 27


1457:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
1458:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1459:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
1460:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1461:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
1462:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1463:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
1464:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1465:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
1466:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1467:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
1468:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1469:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1470:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Clear All flags */
1471:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
1472:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1473:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Disable all interrupts */
1474:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
1475:HALLIB/Src/stm32f7xx_hal_sd.c ****                              SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
1476:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1477:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((hsd->Context & SD_CONTEXT_DMA) != RESET)
1478:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1479:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Abort the SD DMA Streams */
1480:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(hsd->hdmatx != NULL)
1481:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
1482:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Set the DMA Tx abort callback */
1483:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
1484:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Abort DMA in IT mode */
1485:HALLIB/Src/stm32f7xx_hal_sd.c ****         if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
1486:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
1487:HALLIB/Src/stm32f7xx_hal_sd.c ****           SD_DMATxAbort(hsd->hdmatx);
1488:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
1489:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
1490:HALLIB/Src/stm32f7xx_hal_sd.c ****       else if(hsd->hdmarx != NULL)
1491:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
1492:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Set the DMA Rx abort callback */
1493:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
1494:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Abort DMA in IT mode */
1495:HALLIB/Src/stm32f7xx_hal_sd.c ****         if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
1496:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
1497:HALLIB/Src/stm32f7xx_hal_sd.c ****           SD_DMARxAbort(hsd->hdmarx);
1498:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
1499:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
1500:HALLIB/Src/stm32f7xx_hal_sd.c ****       else
1501:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
1502:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode = HAL_SD_ERROR_NONE;
1503:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State = HAL_SD_STATE_READY;
1504:HALLIB/Src/stm32f7xx_hal_sd.c ****         HAL_SD_AbortCallback(hsd);
1505:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
1506:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1507:HALLIB/Src/stm32f7xx_hal_sd.c ****     else if((hsd->Context & SD_CONTEXT_IT) != RESET)
1508:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1509:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Set the SD state to ready to be able to start again the process */
1510:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
1511:HALLIB/Src/stm32f7xx_hal_sd.c ****       HAL_SD_ErrorCallback(hsd);
1512:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1513:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
ARM GAS  /tmp/ccps07Ev.s 			page 28


1514:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1515:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1516:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1517:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief return the SD state
1518:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param hsd Pointer to sd handle
1519:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL state
1520:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1521:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_SD_StateTypeDef HAL_SD_GetState(SD_HandleTypeDef *hsd)
1522:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1523:HALLIB/Src/stm32f7xx_hal_sd.c ****   return hsd->State;
1524:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1525:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1526:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1527:HALLIB/Src/stm32f7xx_hal_sd.c **** * @brief  Return the SD error code
1528:HALLIB/Src/stm32f7xx_hal_sd.c **** * @param  hsd  Pointer to a SD_HandleTypeDef structure that contains
1529:HALLIB/Src/stm32f7xx_hal_sd.c ****   *              the configuration information.
1530:HALLIB/Src/stm32f7xx_hal_sd.c **** * @retval SD Error Code
1531:HALLIB/Src/stm32f7xx_hal_sd.c **** */
1532:HALLIB/Src/stm32f7xx_hal_sd.c **** uint32_t HAL_SD_GetError(SD_HandleTypeDef *hsd)
1533:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1534:HALLIB/Src/stm32f7xx_hal_sd.c ****   return hsd->ErrorCode;
1535:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1536:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1537:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1538:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief Tx Transfer completed callbacks
1539:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param hsd Pointer to SD handle
1540:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval None
1541:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1542:HALLIB/Src/stm32f7xx_hal_sd.c ****  __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
1543:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1544:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
1545:HALLIB/Src/stm32f7xx_hal_sd.c ****   UNUSED(hsd);
1546:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1547:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1548:HALLIB/Src/stm32f7xx_hal_sd.c ****             the HAL_SD_TxCpltCallback can be implemented in the user file
1549:HALLIB/Src/stm32f7xx_hal_sd.c ****    */
1550:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1551:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1552:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1553:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief Rx Transfer completed callbacks
1554:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param hsd Pointer SD handle
1555:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval None
1556:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1557:HALLIB/Src/stm32f7xx_hal_sd.c **** __weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
1558:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1559:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
1560:HALLIB/Src/stm32f7xx_hal_sd.c ****   UNUSED(hsd);
1561:HALLIB/Src/stm32f7xx_hal_sd.c ****  
1562:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1563:HALLIB/Src/stm32f7xx_hal_sd.c ****             the HAL_SD_RxCpltCallback can be implemented in the user file
1564:HALLIB/Src/stm32f7xx_hal_sd.c ****    */
1565:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1566:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1567:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1568:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief SD error callbacks
1569:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param hsd Pointer SD handle
1570:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval None
ARM GAS  /tmp/ccps07Ev.s 			page 29


1571:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1572:HALLIB/Src/stm32f7xx_hal_sd.c **** __weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
1573:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1574:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
1575:HALLIB/Src/stm32f7xx_hal_sd.c ****   UNUSED(hsd);
1576:HALLIB/Src/stm32f7xx_hal_sd.c ****  
1577:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1578:HALLIB/Src/stm32f7xx_hal_sd.c ****             the HAL_SD_ErrorCallback can be implemented in the user file
1579:HALLIB/Src/stm32f7xx_hal_sd.c ****    */ 
1580:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1581:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1582:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1583:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief SD Abort callbacks
1584:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param hsd Pointer SD handle
1585:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval None
1586:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1587:HALLIB/Src/stm32f7xx_hal_sd.c **** __weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
1588:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1589:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
1590:HALLIB/Src/stm32f7xx_hal_sd.c ****   UNUSED(hsd);
1591:HALLIB/Src/stm32f7xx_hal_sd.c ****  
1592:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1593:HALLIB/Src/stm32f7xx_hal_sd.c ****             the HAL_SD_ErrorCallback can be implemented in the user file
1594:HALLIB/Src/stm32f7xx_hal_sd.c ****    */ 
1595:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1596:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1597:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1598:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1599:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @}
1600:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1601:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1602:HALLIB/Src/stm32f7xx_hal_sd.c **** /** @addtogroup SD_Exported_Functions_Group3
1603:HALLIB/Src/stm32f7xx_hal_sd.c ****  *  @brief   management functions 
1604:HALLIB/Src/stm32f7xx_hal_sd.c ****  *
1605:HALLIB/Src/stm32f7xx_hal_sd.c **** @verbatim   
1606:HALLIB/Src/stm32f7xx_hal_sd.c ****   ==============================================================================
1607:HALLIB/Src/stm32f7xx_hal_sd.c ****                       ##### Peripheral Control functions #####
1608:HALLIB/Src/stm32f7xx_hal_sd.c ****   ==============================================================================  
1609:HALLIB/Src/stm32f7xx_hal_sd.c ****   [..]
1610:HALLIB/Src/stm32f7xx_hal_sd.c ****     This subsection provides a set of functions allowing to control the SD card 
1611:HALLIB/Src/stm32f7xx_hal_sd.c ****     operations and get the related information
1612:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1613:HALLIB/Src/stm32f7xx_hal_sd.c **** @endverbatim
1614:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @{
1615:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1616:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1617:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1618:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Returns information the information of the card which are stored on
1619:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         the CID register.
1620:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
1621:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pCID Pointer to a HAL_SD_CardCIDTypeDef structure that  
1622:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         contains all CID register parameters 
1623:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
1624:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1625:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_GetCardCID(SD_HandleTypeDef *hsd, HAL_SD_CardCIDTypeDef *pCID)
1626:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1627:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tmp = 0;
ARM GAS  /tmp/ccps07Ev.s 			page 30


1628:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1629:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 0 */
1630:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[0] & 0xFF000000U) >> 24);
1631:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ManufacturerID = tmp;
1632:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1633:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 1 */
1634:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[0] & 0x00FF0000) >> 16);
1635:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->OEM_AppliID = tmp << 8;
1636:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1637:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 2 */
1638:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[0] & 0x000000FF00) >> 8);
1639:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->OEM_AppliID |= tmp;
1640:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1641:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 3 */
1642:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)(hsd->CID[0] & 0x000000FF);
1643:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdName1 = tmp << 24;
1644:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1645:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 4 */
1646:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[1] & 0xFF000000U) >> 24);
1647:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdName1 |= tmp << 16;
1648:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1649:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 5 */
1650:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
1651:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdName1 |= tmp << 8;
1652:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1653:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 6 */
1654:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[1] & 0x0000FF00) >> 8);
1655:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdName1 |= tmp;
1656:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1657:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 7 */
1658:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
1659:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdName2 = tmp;
1660:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1661:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 8 */
1662:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[2] & 0xFF000000U) >> 24);
1663:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdRev = tmp;
1664:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1665:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 9 */
1666:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
1667:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdSN = tmp << 24;
1668:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1669:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 10 */
1670:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[2] & 0x0000FF00) >> 8);
1671:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdSN |= tmp << 16;
1672:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1673:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 11 */
1674:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)(hsd->CID[2] & 0x000000FF);
1675:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdSN |= tmp << 8;
1676:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1677:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 12 */
1678:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[3] & 0xFF000000U) >> 24);
1679:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdSN |= tmp;
1680:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1681:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 13 */
1682:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
1683:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->Reserved1   |= (tmp & 0xF0) >> 4;
1684:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ManufactDate = (tmp & 0x0F) << 8;
ARM GAS  /tmp/ccps07Ev.s 			page 31


1685:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1686:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 14 */
1687:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CID[3] & 0x0000FF00) >> 8);
1688:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ManufactDate |= tmp;
1689:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1690:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 15 */
1691:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)(hsd->CID[3] & 0x000000FF);
1692:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->CID_CRC   = (tmp & 0xFE) >> 1;
1693:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->Reserved2 = 1;
1694:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1695:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
1696:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1697:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1698:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1699:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Returns information the information of the card which are stored on
1700:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         the CSD register.
1701:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
1702:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
1703:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         contains all CSD register parameters  
1704:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
1705:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1706:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
1707:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1708:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tmp = 0;
1709:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1710:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 0 */
1711:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
1712:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
1713:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
1714:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->Reserved1      = tmp & 0x03;
1715:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1716:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 1 */
1717:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
1718:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->TAAC = (uint8_t)tmp;
1719:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1720:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 2 */
1721:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
1722:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->NSAC = (uint8_t)tmp;
1723:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1724:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 3 */
1725:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = hsd->CSD[0] & 0x000000FF;
1726:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->MaxBusClkFrec = (uint8_t)tmp;
1727:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1728:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 4 */
1729:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
1730:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->CardComdClasses = (uint16_t)(tmp << 4);
1731:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1732:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 5 */
1733:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
1734:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
1735:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
1736:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1737:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 6 */
1738:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
1739:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
1740:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
1741:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
ARM GAS  /tmp/ccps07Ev.s 			page 32


1742:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
1743:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->Reserved2       = 0; /*!< Reserved */
1744:HALLIB/Src/stm32f7xx_hal_sd.c ****        
1745:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->SdCard.CardType == CARD_SDSC)
1746:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1747:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSize = (tmp & 0x03) << 10;
1748:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1749:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 7 */
1750:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
1751:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSize |= (tmp) << 2;
1752:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1753:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 8 */
1754:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
1755:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
1756:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1757:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
1758:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
1759:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1760:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 9 */
1761:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
1762:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
1763:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
1764:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
1765:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 10 */
1766:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
1767:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
1768:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1769:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
1770:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
1771:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
1772:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1773:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
1774:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.LogBlockSize = 512;
1775:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1776:HALLIB/Src/stm32f7xx_hal_sd.c ****   else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
1777:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1778:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 7 */
1779:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
1780:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSize = (tmp & 0x3F) << 16;
1781:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1782:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 8 */
1783:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
1784:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1785:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSize |= (tmp << 8);
1786:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1787:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 9 */
1788:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
1789:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1790:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSize |= (tmp);
1791:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1792:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 10 */
1793:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
1794:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1795:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
1796:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
1797:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1798:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
ARM GAS  /tmp/ccps07Ev.s 			page 33


1799:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1800:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Clear all the static flags */
1801:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
1802:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
1803:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
1804:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
1805:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1806:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1807:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->EraseGrSize = (tmp & 0x40) >> 6;
1808:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
1809:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1810:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 11 */
1811:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
1812:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
1813:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->WrProtectGrSize = (tmp & 0x7F);
1814:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1815:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 12 */
1816:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
1817:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
1818:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
1819:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
1820:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
1821:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1822:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 13 */
1823:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
1824:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
1825:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
1826:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->Reserved3           = 0;
1827:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->ContentProtectAppli = (tmp & 0x01);
1828:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1829:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 14 */
1830:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
1831:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
1832:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->CopyFlag         = (tmp & 0x40) >> 6;
1833:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
1834:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
1835:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->FileFormat       = (tmp & 0x0C) >> 2;
1836:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->ECC              = (tmp & 0x03);
1837:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1838:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Byte 15 */
1839:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
1840:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
1841:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->Reserved4 = 1;
1842:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1843:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
1844:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1845:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1846:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1847:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Gets the SD status info.
1848:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle      
1849:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that 
1850:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         will contain the SD card status information 
1851:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
1852:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1853:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
1854:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1855:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tmp = 0;
ARM GAS  /tmp/ccps07Ev.s 			page 34


1856:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t sd_status[16];
1857:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
1858:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1859:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SD_SendSDStatus(hsd, sd_status);
1860:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
1861:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1862:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Clear all the static flags */
1863:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
1864:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= errorstate;
1865:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
1866:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
1867:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1868:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
1869:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1870:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 0 */
1871:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[0] & 0xC0) >> 6;
1872:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->DataBusWidth = (uint8_t)tmp;
1873:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1874:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 0 */
1875:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[0] & 0x20) >> 5;
1876:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->SecuredMode = (uint8_t)tmp;
1877:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1878:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 2 */
1879:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[0] & 0x00FF0000U) >> 16;
1880:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->CardType = (uint16_t)(tmp << 8);
1881:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1882:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 3 */
1883:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[0] & 0xFF000000U) >> 24;
1884:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->CardType |= (uint16_t)tmp;
1885:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1886:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 4 */
1887:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[1] & 0xFF);
1888:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->ProtectedAreaSize = (uint32_t)(tmp << 24);
1889:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1890:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 5 */
1891:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[1] & 0xFF00) >> 8;
1892:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->ProtectedAreaSize |= (uint32_t)(tmp << 16);
1893:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1894:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 6 */
1895:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[1] & 0xFF0000) >> 16;
1896:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->ProtectedAreaSize |= (uint32_t)(tmp << 8);
1897:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1898:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 7 */
1899:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[1] & 0xFF000000U) >> 24;
1900:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->ProtectedAreaSize |= (uint32_t)tmp;
1901:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1902:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 8 */
1903:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[2] & 0xFF);
1904:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->SpeedClass = (uint8_t)tmp;
1905:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1906:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 9 */
1907:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[2] & 0xFF00) >> 8;
1908:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->PerformanceMove = (uint8_t)tmp;
1909:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1910:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 10 */
1911:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[2] & 0xF00000) >> 20;
1912:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->AllocationUnitSize = (uint8_t)tmp;
ARM GAS  /tmp/ccps07Ev.s 			page 35


1913:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1914:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 11 */
1915:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[2] & 0xFF000000U) >> 24;
1916:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->EraseSize = (uint16_t)(tmp << 8);
1917:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1918:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 12 */
1919:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[3] & 0xFF);
1920:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->EraseSize |= (uint16_t)tmp;
1921:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1922:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 13 */
1923:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[3] & 0xFC00) >> 10;
1924:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->EraseTimeout = (uint8_t)tmp;
1925:HALLIB/Src/stm32f7xx_hal_sd.c ****     
1926:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 13 */
1927:HALLIB/Src/stm32f7xx_hal_sd.c ****     tmp = (sd_status[3] & 0x0300) >> 8;
1928:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->EraseOffset = (uint8_t)tmp;
1929:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
1930:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1931:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
1932:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1933:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1934:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1935:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Gets the SD card info.
1936:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle      
1937:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
1938:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         will contain the SD card status information 
1939:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
1940:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1941:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
1942:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1943:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
1944:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
1945:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
1946:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
1947:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
1948:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
1949:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
1950:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
1951:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1952:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
1953:HALLIB/Src/stm32f7xx_hal_sd.c **** }
1954:HALLIB/Src/stm32f7xx_hal_sd.c **** 
1955:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
1956:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Enables wide bus operation for the requested card if supported by 
1957:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         card.
1958:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle       
1959:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  WideMode Specifies the SD card wide bus mode 
1960:HALLIB/Src/stm32f7xx_hal_sd.c ****   *          This parameter can be one of the following values:
1961:HALLIB/Src/stm32f7xx_hal_sd.c ****   *            @arg SDMMC_BUS_WIDE_8B: 8-bit data transfer
1962:HALLIB/Src/stm32f7xx_hal_sd.c ****   *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
1963:HALLIB/Src/stm32f7xx_hal_sd.c ****   *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
1964:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
1965:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
1966:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
1967:HALLIB/Src/stm32f7xx_hal_sd.c **** {
1968:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_InitTypeDef Init;
1969:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
ARM GAS  /tmp/ccps07Ev.s 			page 36


1970:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1971:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check the parameters */
1972:HALLIB/Src/stm32f7xx_hal_sd.c ****   assert_param(IS_SDMMC_BUS_WIDE(WideMode));
1973:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1974:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Chnage Satte */
1975:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->State = HAL_SD_STATE_BUSY;
1976:HALLIB/Src/stm32f7xx_hal_sd.c ****   
1977:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->SdCard.CardType != CARD_SECURED) 
1978:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
1979:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(WideMode == SDMMC_BUS_WIDE_8B)
1980:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1981:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
1982:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1983:HALLIB/Src/stm32f7xx_hal_sd.c ****     else if(WideMode == SDMMC_BUS_WIDE_4B)
1984:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1985:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SD_WideBus_Enable(hsd);
1986:HALLIB/Src/stm32f7xx_hal_sd.c ****       
1987:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
1988:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1989:HALLIB/Src/stm32f7xx_hal_sd.c ****     else if(WideMode == SDMMC_BUS_WIDE_1B)
1990:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1991:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SD_WideBus_Disable(hsd);
1992:HALLIB/Src/stm32f7xx_hal_sd.c ****       
1993:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
1994:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
1995:HALLIB/Src/stm32f7xx_hal_sd.c ****     else
1996:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
1997:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* WideMode is not a valid argument*/
1998:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
1999:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2000:HALLIB/Src/stm32f7xx_hal_sd.c ****   }  
2001:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
2002:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2003:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* MMC Card does not support this feature */
2004:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2005:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2006:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2007:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
2008:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2009:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Clear all the static flags */
2010:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2011:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
2012:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
2013:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2014:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
2015:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2016:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Configure the SDMMC peripheral */
2017:HALLIB/Src/stm32f7xx_hal_sd.c ****     Init.ClockEdge           = hsd->Init.ClockEdge;
2018:HALLIB/Src/stm32f7xx_hal_sd.c ****     Init.ClockBypass         = hsd->Init.ClockBypass;
2019:HALLIB/Src/stm32f7xx_hal_sd.c ****     Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2020:HALLIB/Src/stm32f7xx_hal_sd.c ****     Init.BusWide             = WideMode;
2021:HALLIB/Src/stm32f7xx_hal_sd.c ****     Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2022:HALLIB/Src/stm32f7xx_hal_sd.c ****     Init.ClockDiv            = hsd->Init.ClockDiv;
2023:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_Init(hsd->Instance, Init);
2024:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2025:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2026:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Change State */
ARM GAS  /tmp/ccps07Ev.s 			page 37


2027:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->State = HAL_SD_STATE_READY;
2028:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2029:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
2030:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2031:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2032:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2033:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2034:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Gets the current sd card data state.
2035:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd pointer to SD handle
2036:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval Card state
2037:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2038:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
2039:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2040:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
2041:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
2042:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t resp1 = 0;
2043:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2044:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SD_SendStatus(hsd, &resp1);
2045:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
2046:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2047:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= errorstate;
2048:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2049:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2050:HALLIB/Src/stm32f7xx_hal_sd.c ****   cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
2051:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2052:HALLIB/Src/stm32f7xx_hal_sd.c ****   return cardstate;
2053:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2054:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2055:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2056:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Abort the current transfer and disable the SD.
2057:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd pointer to a SD_HandleTypeDef structure that contains
2058:HALLIB/Src/stm32f7xx_hal_sd.c ****   *                the configuration information for SD module.
2059:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
2060:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2061:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_Abort(SD_HandleTypeDef *hsd)
2062:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2063:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef CardState;
2064:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2065:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* DIsable All interrupts */
2066:HALLIB/Src/stm32f7xx_hal_sd.c ****   __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
2067:HALLIB/Src/stm32f7xx_hal_sd.c ****                            SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
2068:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2069:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Clear All flags */
2070:HALLIB/Src/stm32f7xx_hal_sd.c ****   __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2071:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2072:HALLIB/Src/stm32f7xx_hal_sd.c ****   if((hsd->hdmatx != NULL) || (hsd->hdmarx != NULL))
2073:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2074:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Disable the SD DMA request */
2075:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
2076:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2077:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Abort the SD DMA Tx Stream */
2078:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->hdmatx != NULL)
2079:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2080:HALLIB/Src/stm32f7xx_hal_sd.c ****       HAL_DMA_Abort(hsd->hdmatx);
2081:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2082:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Abort the SD DMA Rx Stream */
2083:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->hdmarx != NULL)
ARM GAS  /tmp/ccps07Ev.s 			page 38


2084:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2085:HALLIB/Src/stm32f7xx_hal_sd.c ****       HAL_DMA_Abort(hsd->hdmarx);
2086:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2087:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2088:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2089:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->State = HAL_SD_STATE_READY;
2090:HALLIB/Src/stm32f7xx_hal_sd.c ****   CardState = HAL_SD_GetCardState(hsd);
2091:HALLIB/Src/stm32f7xx_hal_sd.c ****   if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
2092:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2093:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = SDMMC_CmdStopTransfer(hsd->Instance);
2094:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2095:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
2096:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2097:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
2098:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2099:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
2100:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2101:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2102:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2103:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Abort the current transfer and disable the SD (IT mode).
2104:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd pointer to a SD_HandleTypeDef structure that contains
2105:HALLIB/Src/stm32f7xx_hal_sd.c ****   *                the configuration information for SD module.
2106:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
2107:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2108:HALLIB/Src/stm32f7xx_hal_sd.c **** HAL_StatusTypeDef HAL_SD_Abort_IT(SD_HandleTypeDef *hsd)
2109:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2110:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef CardState;
2111:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2112:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* DIsable All interrupts */
2113:HALLIB/Src/stm32f7xx_hal_sd.c ****   __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
2114:HALLIB/Src/stm32f7xx_hal_sd.c ****                            SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
2115:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2116:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Clear All flags */
2117:HALLIB/Src/stm32f7xx_hal_sd.c ****   __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2118:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2119:HALLIB/Src/stm32f7xx_hal_sd.c ****   if((hsd->hdmatx != NULL) || (hsd->hdmarx != NULL))
2120:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2121:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Disable the SD DMA request */
2122:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
2123:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2124:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Abort the SD DMA Tx Stream */
2125:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->hdmatx != NULL)
2126:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2127:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->hdmatx->XferAbortCallback =  SD_DMATxAbort;
2128:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
2129:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2130:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->hdmatx = NULL;
2131:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2132:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2133:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Abort the SD DMA Rx Stream */
2134:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->hdmarx != NULL)
2135:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2136:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->hdmarx->XferAbortCallback =  SD_DMARxAbort;
2137:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
2138:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2139:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->hdmarx = NULL;
2140:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
ARM GAS  /tmp/ccps07Ev.s 			page 39


2141:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2142:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2143:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2144:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* No transfer ongoing on both DMA channels*/
2145:HALLIB/Src/stm32f7xx_hal_sd.c ****   if((hsd->hdmatx == NULL) && (hsd->hdmarx == NULL))
2146:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2147:HALLIB/Src/stm32f7xx_hal_sd.c ****     CardState = HAL_SD_GetCardState(hsd);
2148:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
2149:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
2150:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2151:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode = SDMMC_CmdStopTransfer(hsd->Instance);
2152:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2153:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
2154:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2155:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
2156:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2157:HALLIB/Src/stm32f7xx_hal_sd.c ****     else
2158:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2159:HALLIB/Src/stm32f7xx_hal_sd.c ****       HAL_SD_AbortCallback(hsd);
2160:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2161:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2162:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2163:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
2164:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2165:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2166:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2167:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @}
2168:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2169:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2170:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2171:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @}
2172:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2173:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2174:HALLIB/Src/stm32f7xx_hal_sd.c **** /* Private function ----------------------------------------------------------*/  
2175:HALLIB/Src/stm32f7xx_hal_sd.c **** /** @addtogroup SD_Private_Functions
2176:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @{
2177:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2178:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2179:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2180:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  DMA SD transmit process complete callback 
2181:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hdma DMA handle
2182:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval None
2183:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2184:HALLIB/Src/stm32f7xx_hal_sd.c **** static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
2185:HALLIB/Src/stm32f7xx_hal_sd.c **** {
  28              		.loc 1 2185 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
2186:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  34              		.loc 1 2186 0
  35 0000 836B     		ldr	r3, [r0, #56]
  36              	.LVL1:
2187:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2188:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Enable DATAEND Interrupt */
ARM GAS  /tmp/ccps07Ev.s 			page 40


2189:HALLIB/Src/stm32f7xx_hal_sd.c ****   __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
  37              		.loc 1 2189 0
  38 0002 1A68     		ldr	r2, [r3]
  39 0004 D36B     		ldr	r3, [r2, #60]
  40              	.LVL2:
  41 0006 43F48073 		orr	r3, r3, #256
  42 000a D363     		str	r3, [r2, #60]
  43              	.LVL3:
  44 000c 7047     		bx	lr
  45              		.cfi_endproc
  46              	.LFE163:
  48 000e 00BF     		.section	.text.SD_PowerON,"ax",%progbits
  49              		.align	2
  50              		.thumb
  51              		.thumb_func
  53              	SD_PowerON:
  54              	.LFB169:
2190:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2191:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2192:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2193:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  DMA SD receive process complete callback 
2194:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hdma DMA handle
2195:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval None
2196:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2197:HALLIB/Src/stm32f7xx_hal_sd.c **** static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
2198:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2199:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
2200:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
2201:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2202:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Send stop command in multiblock write */
2203:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
2204:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2205:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2206:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
2207:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2208:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
2209:HALLIB/Src/stm32f7xx_hal_sd.c ****       HAL_SD_ErrorCallback(hsd);
2210:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2211:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2212:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2213:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Disable the DMA transfer for transmit request by setting the DMAEN bit
2214:HALLIB/Src/stm32f7xx_hal_sd.c ****   in the SD DCTRL register */
2215:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
2216:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2217:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Clear all the static flags */
2218:HALLIB/Src/stm32f7xx_hal_sd.c ****   __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2219:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2220:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->State = HAL_SD_STATE_READY;
2221:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2222:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_RxCpltCallback(hsd);
2223:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2224:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2225:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2226:HALLIB/Src/stm32f7xx_hal_sd.c **** * @brief  DMA SD communication error callback 
2227:HALLIB/Src/stm32f7xx_hal_sd.c **** * @param  hdma DMA handle
2228:HALLIB/Src/stm32f7xx_hal_sd.c **** * @retval None
2229:HALLIB/Src/stm32f7xx_hal_sd.c **** */
ARM GAS  /tmp/ccps07Ev.s 			page 41


2230:HALLIB/Src/stm32f7xx_hal_sd.c **** static void SD_DMAError(DMA_HandleTypeDef *hdma)   
2231:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2232:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
2233:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef CardState;
2234:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2235:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* if DMA error is FIFO error ignore it */
2236:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2237:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2238:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE)
2239:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2240:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Clear All flags */
2241:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2242:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2243:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Disable All interrupts */
2244:HALLIB/Src/stm32f7xx_hal_sd.c ****       __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
2245:HALLIB/Src/stm32f7xx_hal_sd.c ****         SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
2246:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2247:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_DMA;
2248:HALLIB/Src/stm32f7xx_hal_sd.c ****       CardState = HAL_SD_GetCardState(hsd);
2249:HALLIB/Src/stm32f7xx_hal_sd.c ****       if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
2250:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2251:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
2252:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2253:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2254:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State= HAL_SD_STATE_READY;
2255:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2256:HALLIB/Src/stm32f7xx_hal_sd.c ****     HAL_SD_ErrorCallback(hsd);
2257:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2258:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2259:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2260:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2261:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  DMA SD Tx Abort callback 
2262:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hdma DMA handle
2263:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval None
2264:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2265:HALLIB/Src/stm32f7xx_hal_sd.c **** static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
2266:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2267:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
2268:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef CardState;
2269:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2270:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->hdmatx != NULL)
2271:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2272:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->hdmatx = NULL;
2273:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2274:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2275:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* All DMA channels are aborted */
2276:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->hdmarx == NULL)
2277:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2278:HALLIB/Src/stm32f7xx_hal_sd.c ****     CardState = HAL_SD_GetCardState(hsd);
2279:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = HAL_SD_ERROR_NONE;
2280:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
2281:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
2282:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2283:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
2284:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2285:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
2286:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
ARM GAS  /tmp/ccps07Ev.s 			page 42


2287:HALLIB/Src/stm32f7xx_hal_sd.c ****         HAL_SD_AbortCallback(hsd);
2288:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2289:HALLIB/Src/stm32f7xx_hal_sd.c ****       else
2290:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2291:HALLIB/Src/stm32f7xx_hal_sd.c ****         HAL_SD_ErrorCallback(hsd);
2292:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2293:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2294:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2295:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2296:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2297:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2298:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  DMA SD Rx Abort callback 
2299:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hdma DMA handle
2300:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval None
2301:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2302:HALLIB/Src/stm32f7xx_hal_sd.c **** static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
2303:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2304:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
2305:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef CardState;
2306:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2307:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->hdmarx != NULL)
2308:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2309:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->hdmarx = NULL;
2310:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2311:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2312:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* All DMA channels are aborted */
2313:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->hdmatx == NULL)
2314:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2315:HALLIB/Src/stm32f7xx_hal_sd.c ****     CardState = HAL_SD_GetCardState(hsd);
2316:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = HAL_SD_ERROR_NONE;
2317:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
2318:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
2319:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2320:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
2321:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2322:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
2323:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2324:HALLIB/Src/stm32f7xx_hal_sd.c ****         HAL_SD_AbortCallback(hsd);
2325:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2326:HALLIB/Src/stm32f7xx_hal_sd.c ****       else
2327:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2328:HALLIB/Src/stm32f7xx_hal_sd.c ****         HAL_SD_ErrorCallback(hsd);
2329:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2330:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2331:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2332:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2333:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2334:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2335:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2336:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Initializes the sd card.
2337:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
2338:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval SD Card error state
2339:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2340:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
2341:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2342:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardCSDTypeDef CSD;
2343:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
ARM GAS  /tmp/ccps07Ev.s 			page 43


2344:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint16_t sd_rca = 1;
2345:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2346:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check the power State */
2347:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(SDMMC_GetPowerState(hsd->Instance) == 0) 
2348:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2349:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Power off */
2350:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2351:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2352:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2353:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->SdCard.CardType != CARD_SECURED) 
2354:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2355:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send CMD2 ALL_SEND_CID */
2356:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdSendCID(hsd->Instance);
2357:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
2358:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2359:HALLIB/Src/stm32f7xx_hal_sd.c ****       return errorstate;
2360:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2361:HALLIB/Src/stm32f7xx_hal_sd.c ****     else
2362:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2363:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Get Card identification number data */
2364:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2365:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2366:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2367:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2368:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2369:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2370:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2371:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->SdCard.CardType != CARD_SECURED) 
2372:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2373:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send CMD3 SET_REL_ADDR with argument 0 */
2374:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* SD Card publishes its RCA. */
2375:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2376:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
2377:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2378:HALLIB/Src/stm32f7xx_hal_sd.c ****       return errorstate;
2379:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2380:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2381:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(hsd->SdCard.CardType != CARD_SECURED) 
2382:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2383:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Get the SD card RCA */
2384:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.RelCardAdd = sd_rca;
2385:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2386:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send CMD9 SEND_CSD with argument as card's RCA */
2387:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2388:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
2389:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2390:HALLIB/Src/stm32f7xx_hal_sd.c ****       return errorstate;
2391:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2392:HALLIB/Src/stm32f7xx_hal_sd.c ****     else
2393:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2394:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Get Card Specific Data */
2395:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2396:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2397:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2398:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2399:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2400:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
ARM GAS  /tmp/ccps07Ev.s 			page 44


2401:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2402:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Get the Card Class */
2403:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
2404:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2405:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Get CSD parameters */
2406:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_GetCardCSD(hsd, &CSD);
2407:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2408:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Select the Card */
2409:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16
2410:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
2411:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2412:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
2413:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2414:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2415:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Configure SDMMC peripheral interface */     
2416:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_Init(hsd->Instance, hsd->Init);
2417:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2418:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* All cards are initialized */
2419:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_SD_ERROR_NONE;
2420:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2421:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2422:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2423:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Enquires cards about their operating voltage and configures clock
2424:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         controls and stores SD information that will be needed in future
2425:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         in the SD handle.
2426:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
2427:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval error state
2428:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2429:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
2430:HALLIB/Src/stm32f7xx_hal_sd.c **** {
  55              		.loc 1 2430 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 8
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              	.LVL4:
  60 0000 10B5     		push	{r4, lr}
  61              	.LCFI0:
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 4, -8
  64              		.cfi_offset 14, -4
  65 0002 82B0     		sub	sp, sp, #8
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 16
  68 0004 0446     		mov	r4, r0
2431:HALLIB/Src/stm32f7xx_hal_sd.c ****   __IO uint32_t count = 0;
  69              		.loc 1 2431 0
  70 0006 0023     		movs	r3, #0
  71 0008 0193     		str	r3, [sp, #4]
  72              	.LVL5:
2432:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t response = 0, validvoltage = 0;
2433:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
2434:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2435:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* CMD0: GO_IDLE_STATE */
2436:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
  73              		.loc 1 2436 0
  74 000a 0068     		ldr	r0, [r0]
  75              	.LVL6:
ARM GAS  /tmp/ccps07Ev.s 			page 45


  76 000c FFF7FEFF 		bl	SDMMC_CmdGoIdleState
  77              	.LVL7:
2437:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
  78              		.loc 1 2437 0
  79 0010 0028     		cmp	r0, #0
  80 0012 4DD1     		bne	.L10
2438:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2439:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
2440:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2441:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2442:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
2443:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SDMMC_CmdOperCond(hsd->Instance);
  81              		.loc 1 2443 0
  82 0014 2068     		ldr	r0, [r4]
  83              	.LVL8:
  84 0016 FFF7FEFF 		bl	SDMMC_CmdOperCond
  85              	.LVL9:
2444:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
  86              		.loc 1 2444 0
  87 001a 00B3     		cbz	r0, .L4
2445:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2446:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.CardVersion = CARD_V1_X;
  88              		.loc 1 2446 0
  89 001c 0020     		movs	r0, #0
  90              	.LVL10:
  91 001e A064     		str	r0, [r4, #72]
2447:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2448:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
2449:HALLIB/Src/stm32f7xx_hal_sd.c ****     while(validvoltage == 0)
  92              		.loc 1 2449 0
  93 0020 17E0     		b	.L5
  94              	.LVL11:
  95              	.L6:
2450:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2451:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(count++ == SDMMC_MAX_VOLT_TRIAL)
  96              		.loc 1 2451 0
  97 0022 019B     		ldr	r3, [sp, #4]
  98 0024 5A1C     		adds	r2, r3, #1
  99 0026 0192     		str	r2, [sp, #4]
 100 0028 4FF6FF72 		movw	r2, #65535
 101 002c 9342     		cmp	r3, r2
 102 002e 40D0     		beq	.L11
2452:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2453:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_SD_ERROR_INVALID_VOLTRANGE;
2454:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2455:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2456:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* SEND CMD55 APP_CMD with RCA as 0 */
2457:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 103              		.loc 1 2457 0
 104 0030 0021     		movs	r1, #0
 105 0032 2068     		ldr	r0, [r4]
 106              	.LVL12:
 107 0034 FFF7FEFF 		bl	SDMMC_CmdAppCommand
 108              	.LVL13:
2458:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(errorstate != HAL_SD_ERROR_NONE)
 109              		.loc 1 2458 0
 110 0038 0028     		cmp	r0, #0
ARM GAS  /tmp/ccps07Ev.s 			page 46


 111 003a 3DD1     		bne	.L12
2459:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2460:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2461:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2462:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2463:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Send CMD41 */
2464:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 112              		.loc 1 2464 0
 113 003c 0021     		movs	r1, #0
 114 003e 2068     		ldr	r0, [r4]
 115              	.LVL14:
 116 0040 FFF7FEFF 		bl	SDMMC_CmdAppOperCommand
 117              	.LVL15:
2465:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(errorstate != HAL_SD_ERROR_NONE)
 118              		.loc 1 2465 0
 119 0044 0028     		cmp	r0, #0
 120 0046 3AD1     		bne	.L13
2466:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2467:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2468:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2469:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2470:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Get command response */
2471:HALLIB/Src/stm32f7xx_hal_sd.c ****       response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 121              		.loc 1 2471 0
 122 0048 0021     		movs	r1, #0
 123 004a 2068     		ldr	r0, [r4]
 124              	.LVL16:
 125 004c FFF7FEFF 		bl	SDMMC_GetResponse
 126              	.LVL17:
2472:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2473:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Get operating voltage*/
2474:HALLIB/Src/stm32f7xx_hal_sd.c ****       validvoltage = (((response >> 31) == 1) ? 1 : 0);
 127              		.loc 1 2474 0
 128 0050 C00F     		lsrs	r0, r0, #31
 129              	.LVL18:
 130              	.L5:
2449:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 131              		.loc 1 2449 0
 132 0052 0028     		cmp	r0, #0
 133 0054 E5D0     		beq	.L6
2475:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2476:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Card type is SDSC */
2477:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.CardType = CARD_SDSC;
 134              		.loc 1 2477 0
 135 0056 0023     		movs	r3, #0
 136 0058 6364     		str	r3, [r4, #68]
2478:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2479:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
2480:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2481:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.CardVersion = CARD_V2_X;
2482:HALLIB/Src/stm32f7xx_hal_sd.c ****         
2483:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
2484:HALLIB/Src/stm32f7xx_hal_sd.c ****     while(validvoltage == 0)
2485:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2486:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(count++ == SDMMC_MAX_VOLT_TRIAL)
2487:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2488:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_SD_ERROR_INVALID_VOLTRANGE;
ARM GAS  /tmp/ccps07Ev.s 			page 47


2489:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2490:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2491:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* SEND CMD55 APP_CMD with RCA as 0 */
2492:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2493:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(errorstate != HAL_SD_ERROR_NONE)
2494:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2495:HALLIB/Src/stm32f7xx_hal_sd.c ****         return errorstate;
2496:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2497:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2498:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Send CMD41 */
2499:HALLIB/Src/stm32f7xx_hal_sd.c ****       errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
2500:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(errorstate != HAL_SD_ERROR_NONE)
2501:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2502:HALLIB/Src/stm32f7xx_hal_sd.c ****         return errorstate;
2503:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2504:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2505:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Get command response */
2506:HALLIB/Src/stm32f7xx_hal_sd.c ****       response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2507:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2508:HALLIB/Src/stm32f7xx_hal_sd.c ****       /* Get operating voltage*/
2509:HALLIB/Src/stm32f7xx_hal_sd.c ****       validvoltage = (((response >> 31) == 1) ? 1 : 0);
2510:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2511:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2512:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) *
2513:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2514:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->SdCard.CardType = CARD_SDHC_SDXC;
2515:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2516:HALLIB/Src/stm32f7xx_hal_sd.c ****     else
2517:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2518:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->SdCard.CardType = CARD_SDSC;
2519:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2520:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2521:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2522:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_SD_ERROR_NONE;
 137              		.loc 1 2522 0
 138 005a 1846     		mov	r0, r3
 139              	.LVL19:
 140 005c 36E0     		b	.L3
 141              	.LVL20:
 142              	.L4:
2481:HALLIB/Src/stm32f7xx_hal_sd.c ****         
 143              		.loc 1 2481 0
 144 005e 0123     		movs	r3, #1
 145 0060 A364     		str	r3, [r4, #72]
2432:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 146              		.loc 1 2432 0
 147 0062 0020     		movs	r0, #0
 148              	.LVL21:
 149 0064 0346     		mov	r3, r0
2484:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 150              		.loc 1 2484 0
 151 0066 17E0     		b	.L7
 152              	.LVL22:
 153              	.L8:
2486:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 154              		.loc 1 2486 0
 155 0068 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccps07Ev.s 			page 48


 156              	.LVL23:
 157 006a 5A1C     		adds	r2, r3, #1
 158 006c 0192     		str	r2, [sp, #4]
 159 006e 4FF6FF72 		movw	r2, #65535
 160 0072 9342     		cmp	r3, r2
 161 0074 26D0     		beq	.L14
2492:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(errorstate != HAL_SD_ERROR_NONE)
 162              		.loc 1 2492 0
 163 0076 0021     		movs	r1, #0
 164 0078 2068     		ldr	r0, [r4]
 165              	.LVL24:
 166 007a FFF7FEFF 		bl	SDMMC_CmdAppCommand
 167              	.LVL25:
2493:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 168              		.loc 1 2493 0
 169 007e 20BB     		cbnz	r0, .L15
2499:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(errorstate != HAL_SD_ERROR_NONE)
 170              		.loc 1 2499 0
 171 0080 4FF08041 		mov	r1, #1073741824
 172 0084 2068     		ldr	r0, [r4]
 173              	.LVL26:
 174 0086 FFF7FEFF 		bl	SDMMC_CmdAppOperCommand
 175              	.LVL27:
2500:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 176              		.loc 1 2500 0
 177 008a F8B9     		cbnz	r0, .L16
2506:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 178              		.loc 1 2506 0
 179 008c 0021     		movs	r1, #0
 180 008e 2068     		ldr	r0, [r4]
 181              	.LVL28:
 182 0090 FFF7FEFF 		bl	SDMMC_GetResponse
 183              	.LVL29:
2509:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 184              		.loc 1 2509 0
 185 0094 0346     		mov	r3, r0
 186 0096 C00F     		lsrs	r0, r0, #31
 187              	.LVL30:
 188              	.L7:
2484:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 189              		.loc 1 2484 0
 190 0098 0028     		cmp	r0, #0
 191 009a E5D0     		beq	.L8
2512:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 192              		.loc 1 2512 0
 193 009c 13F08040 		ands	r0, r3, #1073741824
 194              	.LVL31:
 195 00a0 03D0     		beq	.L9
2514:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 196              		.loc 1 2514 0
 197 00a2 0123     		movs	r3, #1
 198              	.LVL32:
 199 00a4 6364     		str	r3, [r4, #68]
 200              		.loc 1 2522 0
 201 00a6 0020     		movs	r0, #0
 202 00a8 10E0     		b	.L3
 203              	.LVL33:
ARM GAS  /tmp/ccps07Ev.s 			page 49


 204              	.L9:
2518:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 205              		.loc 1 2518 0
 206 00aa 0023     		movs	r3, #0
 207              	.LVL34:
 208 00ac 6364     		str	r3, [r4, #68]
 209 00ae 0DE0     		b	.L3
 210              	.LVL35:
 211              	.L10:
 212 00b0 0CE0     		b	.L3
 213              	.LVL36:
 214              	.L11:
2453:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 215              		.loc 1 2453 0
 216 00b2 4FF08070 		mov	r0, #16777216
 217              	.LVL37:
 218 00b6 09E0     		b	.L3
 219              	.LVL38:
 220              	.L12:
2460:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 221              		.loc 1 2460 0
 222 00b8 4FF08050 		mov	r0, #268435456
 223              	.LVL39:
 224 00bc 06E0     		b	.L3
 225              	.LVL40:
 226              	.L13:
2467:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 227              		.loc 1 2467 0
 228 00be 4FF08050 		mov	r0, #268435456
 229              	.LVL41:
 230 00c2 03E0     		b	.L3
 231              	.LVL42:
 232              	.L14:
2488:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 233              		.loc 1 2488 0
 234 00c4 4FF08070 		mov	r0, #16777216
 235              	.LVL43:
 236 00c8 00E0     		b	.L3
 237              	.LVL44:
 238              	.L15:
 239 00ca FFE7     		b	.L3
 240              	.L16:
 241              	.LVL45:
 242              	.L3:
2523:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 243              		.loc 1 2523 0
 244 00cc 02B0     		add	sp, sp, #8
 245              	.LCFI2:
 246              		.cfi_def_cfa_offset 8
 247              		@ sp needed
 248 00ce 10BD     		pop	{r4, pc}
 249              		.cfi_endproc
 250              	.LFE169:
 252              		.section	.text.SD_PowerOFF,"ax",%progbits
 253              		.align	2
 254              		.thumb
 255              		.thumb_func
ARM GAS  /tmp/ccps07Ev.s 			page 50


 257              	SD_PowerOFF:
 258              	.LFB170:
2524:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2525:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2526:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Turns the SDMMC output signals off.
2527:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
2528:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
2529:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2530:HALLIB/Src/stm32f7xx_hal_sd.c **** static HAL_StatusTypeDef SD_PowerOFF(SD_HandleTypeDef *hsd)
2531:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 259              		.loc 1 2531 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL46:
 264 0000 08B5     		push	{r3, lr}
 265              	.LCFI3:
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 3, -8
 268              		.cfi_offset 14, -4
2532:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Set Power State to OFF */
2533:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_PowerState_OFF(hsd->Instance);
 269              		.loc 1 2533 0
 270 0002 0068     		ldr	r0, [r0]
 271              	.LVL47:
 272 0004 FFF7FEFF 		bl	SDMMC_PowerState_OFF
 273              	.LVL48:
2534:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2535:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
2536:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 274              		.loc 1 2536 0
 275 0008 0020     		movs	r0, #0
 276 000a 08BD     		pop	{r3, pc}
 277              		.cfi_endproc
 278              	.LFE170:
 280              		.section	.text.SD_Read_IT,"ax",%progbits
 281              		.align	2
 282              		.thumb
 283              		.thumb_func
 285              	SD_Read_IT:
 286              	.LFB176:
2537:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2538:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2539:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Send Status info command.
2540:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd pointer to SD handle
2541:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pSDstatus Pointer to the buffer that will contain the SD card status 
2542:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         SD Status register)
2543:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval error state
2544:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2545:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
2546:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2547:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
2548:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
2549:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tickstart = HAL_GetTick();
2550:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t count = 0;
2551:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2552:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check SD response */
ARM GAS  /tmp/ccps07Ev.s 			page 51


2553:HALLIB/Src/stm32f7xx_hal_sd.c ****   if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2554:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2555:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2556:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2557:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2558:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Set block size for card if it is not equal to current block size for card */
2559:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
2560:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
2561:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2562:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_NONE;
2563:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
2564:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2565:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2566:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Send CMD55 */
2567:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
2568:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
2569:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2570:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_NONE;
2571:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
2572:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2573:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2574:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Configure the SD DPSM (Data Path State Machine) */ 
2575:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DataTimeOut   = SDMMC_DATATIMEOUT;
2576:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DataLength    = 64;
2577:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
2578:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2579:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2580:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DPSM          = SDMMC_DPSM_ENABLE;
2581:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_ConfigData(hsd->Instance, &config);
2582:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2583:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
2584:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
2585:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
2586:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2587:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_NONE;
2588:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
2589:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2590:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2591:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Get status data */
2592:HALLIB/Src/stm32f7xx_hal_sd.c ****   while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SD
2593:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2594:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2595:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2596:HALLIB/Src/stm32f7xx_hal_sd.c ****       for(count = 0; count < 8; count++)
2597:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
2598:HALLIB/Src/stm32f7xx_hal_sd.c ****         *(pSDstatus + count) = SDMMC_ReadFIFO(hsd->Instance);
2599:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
2600:HALLIB/Src/stm32f7xx_hal_sd.c ****       
2601:HALLIB/Src/stm32f7xx_hal_sd.c ****       pSDstatus += 8;
2602:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2603:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2604:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2605:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2606:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_SD_ERROR_TIMEOUT;
2607:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2608:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2609:HALLIB/Src/stm32f7xx_hal_sd.c ****   
ARM GAS  /tmp/ccps07Ev.s 			page 52


2610:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2611:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2612:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_DATA_TIMEOUT;
2613:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2614:HALLIB/Src/stm32f7xx_hal_sd.c ****   else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2615:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2616:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_DATA_CRC_FAIL;
2617:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2618:HALLIB/Src/stm32f7xx_hal_sd.c ****   else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2619:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2620:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_RX_OVERRUN;
2621:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2622:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2623:HALLIB/Src/stm32f7xx_hal_sd.c ****   while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
2624:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2625:HALLIB/Src/stm32f7xx_hal_sd.c ****     *pSDstatus = SDMMC_ReadFIFO(hsd->Instance);
2626:HALLIB/Src/stm32f7xx_hal_sd.c ****     pSDstatus++;
2627:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2628:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2629:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2630:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_SD_ERROR_TIMEOUT;
2631:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2632:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2633:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2634:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Clear all the static status flags*/
2635:HALLIB/Src/stm32f7xx_hal_sd.c ****   __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2636:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2637:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_SD_ERROR_NONE;
2638:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2639:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2640:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2641:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Returns the current card's status.
2642:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
2643:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pCardStatus pointer to the buffer that will contain the SD card 
2644:HALLIB/Src/stm32f7xx_hal_sd.c ****   *         status (Card Status register)  
2645:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval error state
2646:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2647:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
2648:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2649:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
2650:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2651:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(pCardStatus == NULL)
2652:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2653:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_PARAM;
2654:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2655:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2656:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Send Status command */
2657:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
2658:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
2659:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2660:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
2661:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2662:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2663:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Get SD card status */
2664:HALLIB/Src/stm32f7xx_hal_sd.c ****   *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2665:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2666:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_SD_ERROR_NONE;
ARM GAS  /tmp/ccps07Ev.s 			page 53


2667:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2668:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2669:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2670:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Enables the SDMMC wide bus mode.
2671:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd pointer to SD handle
2672:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval error state
2673:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2674:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
2675:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2676:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t scr[2] = {0, 0};
2677:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
2678:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2679:HALLIB/Src/stm32f7xx_hal_sd.c ****   if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2680:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2681:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2682:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2683:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2684:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Get SCR Register */
2685:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SD_FindSCR(hsd, scr);
2686:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
2687:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2688:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
2689:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2690:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2691:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* If requested card supports wide bus operation */
2692:HALLIB/Src/stm32f7xx_hal_sd.c ****   if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
2693:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2694:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send CMD55 APP_CMD with argument as card's RCA.*/
2695:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
2696:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_OK)
2697:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2698:HALLIB/Src/stm32f7xx_hal_sd.c ****       return errorstate;
2699:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2700:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2701:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
2702:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
2703:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_OK)
2704:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2705:HALLIB/Src/stm32f7xx_hal_sd.c ****       return errorstate;
2706:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2707:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2708:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_NONE;
2709:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2710:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
2711:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2712:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2713:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2714:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2715:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2716:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2717:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Disables the SDMMC wide bus mode.
2718:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
2719:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval error state
2720:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2721:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
2722:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2723:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t scr[2] = {0, 0};
ARM GAS  /tmp/ccps07Ev.s 			page 54


2724:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
2725:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2726:HALLIB/Src/stm32f7xx_hal_sd.c ****   if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2727:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2728:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2729:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2730:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2731:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Get SCR Register */
2732:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SD_FindSCR(hsd, scr);
2733:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
2734:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2735:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
2736:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2737:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2738:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* If requested card supports 1 bit mode operation */
2739:HALLIB/Src/stm32f7xx_hal_sd.c ****   if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2740:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2741:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send CMD55 APP_CMD with argument as card's RCA */
2742:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
2743:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_OK)
2744:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2745:HALLIB/Src/stm32f7xx_hal_sd.c ****       return errorstate;
2746:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2747:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2748:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
2749:HALLIB/Src/stm32f7xx_hal_sd.c ****     errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
2750:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_OK)
2751:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2752:HALLIB/Src/stm32f7xx_hal_sd.c ****       return errorstate;
2753:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2754:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2755:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_NONE;
2756:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2757:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
2758:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2759:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2760:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2761:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2762:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2763:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2764:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2765:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Finds the SD card SCR register value.
2766:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd Pointer to SD handle
2767:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  pSCR pointer to the buffer that will contain the SCR value  
2768:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval error state
2769:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2770:HALLIB/Src/stm32f7xx_hal_sd.c **** static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
2771:HALLIB/Src/stm32f7xx_hal_sd.c **** {
2772:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
2773:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
2774:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tickstart = HAL_GetTick();
2775:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t index = 0;
2776:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tempscr[2] = {0, 0};
2777:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2778:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Set Block Size To 8 Bytes */
2779:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
2780:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
ARM GAS  /tmp/ccps07Ev.s 			page 55


2781:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2782:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
2783:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2784:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2785:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Send CMD55 APP_CMD with argument as card's RCA */
2786:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
2787:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
2788:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2789:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
2790:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2791:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2792:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DataTimeOut   = SDMMC_DATATIMEOUT;
2793:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DataLength    = 8;
2794:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
2795:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2796:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2797:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DPSM          = SDMMC_DPSM_ENABLE;
2798:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_ConfigData(hsd->Instance, &config);
2799:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2800:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
2801:HALLIB/Src/stm32f7xx_hal_sd.c ****   errorstate = SDMMC_CmdSendSCR(hsd->Instance);
2802:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
2803:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2804:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
2805:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2806:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2807:HALLIB/Src/stm32f7xx_hal_sd.c ****   while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SD
2808:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2809:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
2810:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2811:HALLIB/Src/stm32f7xx_hal_sd.c ****       *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
2812:HALLIB/Src/stm32f7xx_hal_sd.c ****       index++;
2813:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2814:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2815:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2816:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
2817:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_SD_ERROR_TIMEOUT;
2818:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
2819:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2820:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2821:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2822:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2823:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2824:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2825:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_DATA_TIMEOUT;
2826:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2827:HALLIB/Src/stm32f7xx_hal_sd.c ****   else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2828:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2829:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2830:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2831:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_DATA_CRC_FAIL;
2832:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2833:HALLIB/Src/stm32f7xx_hal_sd.c ****   else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2834:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2835:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2836:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2837:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_SD_ERROR_RX_OVERRUN;
ARM GAS  /tmp/ccps07Ev.s 			page 56


2838:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2839:HALLIB/Src/stm32f7xx_hal_sd.c ****   else
2840:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2841:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* No error flag set */
2842:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Clear all the static flags */
2843:HALLIB/Src/stm32f7xx_hal_sd.c ****     __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2844:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2845:HALLIB/Src/stm32f7xx_hal_sd.c ****     *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
2846:HALLIB/Src/stm32f7xx_hal_sd.c ****       ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
2847:HALLIB/Src/stm32f7xx_hal_sd.c ****     
2848:HALLIB/Src/stm32f7xx_hal_sd.c ****     *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
2849:HALLIB/Src/stm32f7xx_hal_sd.c ****       ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
2850:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2851:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2852:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_SD_ERROR_NONE;
2853:HALLIB/Src/stm32f7xx_hal_sd.c **** }
2854:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2855:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2856:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Wrap up reading in non-blocking mode.
2857:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd pointer to a SD_HandleTypeDef structure that contains
2858:HALLIB/Src/stm32f7xx_hal_sd.c ****   *              the configuration information.
2859:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
2860:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2861:HALLIB/Src/stm32f7xx_hal_sd.c **** static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
2862:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 287              		.loc 1 2862 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              	.LVL49:
 292 0000 70B5     		push	{r4, r5, r6, lr}
 293              	.LCFI4:
 294              		.cfi_def_cfa_offset 16
 295              		.cfi_offset 4, -16
 296              		.cfi_offset 5, -12
 297              		.cfi_offset 6, -8
 298              		.cfi_offset 14, -4
 299 0002 0546     		mov	r5, r0
 300              	.LVL50:
2863:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t count = 0;
2864:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t* tmp;
2865:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2866:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint32_t*)hsd->pRxBuffPtr;
 301              		.loc 1 2866 0
 302 0004 866A     		ldr	r6, [r0, #40]
 303              	.LVL51:
2867:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2868:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Read data from SDMMC Rx FIFO */
2869:HALLIB/Src/stm32f7xx_hal_sd.c ****   for(count = 0; count < 8; count++)
 304              		.loc 1 2869 0
 305 0006 0024     		movs	r4, #0
 306 0008 05E0     		b	.L21
 307              	.LVL52:
 308              	.L22:
2870:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2871:HALLIB/Src/stm32f7xx_hal_sd.c ****     *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 309              		.loc 1 2871 0 discriminator 3
ARM GAS  /tmp/ccps07Ev.s 			page 57


 310 000a 2868     		ldr	r0, [r5]
 311 000c FFF7FEFF 		bl	SDMMC_ReadFIFO
 312              	.LVL53:
 313 0010 46F82400 		str	r0, [r6, r4, lsl #2]
2869:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 314              		.loc 1 2869 0 discriminator 3
 315 0014 0134     		adds	r4, r4, #1
 316              	.LVL54:
 317              	.L21:
2869:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 318              		.loc 1 2869 0 is_stmt 0 discriminator 1
 319 0016 072C     		cmp	r4, #7
 320 0018 F7D9     		bls	.L22
2872:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2873:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2874:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->pRxBuffPtr += 8;
 321              		.loc 1 2874 0 is_stmt 1
 322 001a AB6A     		ldr	r3, [r5, #40]
 323 001c 2033     		adds	r3, r3, #32
 324 001e AB62     		str	r3, [r5, #40]
2875:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2876:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
2877:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 325              		.loc 1 2877 0
 326 0020 0020     		movs	r0, #0
 327 0022 70BD     		pop	{r4, r5, r6, pc}
 328              		.cfi_endproc
 329              	.LFE176:
 331              		.section	.text.SD_Write_IT,"ax",%progbits
 332              		.align	2
 333              		.thumb
 334              		.thumb_func
 336              	SD_Write_IT:
 337              	.LFB177:
2878:HALLIB/Src/stm32f7xx_hal_sd.c **** 
2879:HALLIB/Src/stm32f7xx_hal_sd.c **** /**
2880:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @brief  Wrap up writing in non-blocking mode.
2881:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @param  hsd pointer to a SD_HandleTypeDef structure that contains
2882:HALLIB/Src/stm32f7xx_hal_sd.c ****   *              the configuration information.
2883:HALLIB/Src/stm32f7xx_hal_sd.c ****   * @retval HAL status
2884:HALLIB/Src/stm32f7xx_hal_sd.c ****   */
2885:HALLIB/Src/stm32f7xx_hal_sd.c **** static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
2886:HALLIB/Src/stm32f7xx_hal_sd.c **** {
 338              		.loc 1 2886 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342              	.LVL55:
 343 0000 70B5     		push	{r4, r5, r6, lr}
 344              	.LCFI5:
 345              		.cfi_def_cfa_offset 16
 346              		.cfi_offset 4, -16
 347              		.cfi_offset 5, -12
 348              		.cfi_offset 6, -8
 349              		.cfi_offset 14, -4
 350 0002 0546     		mov	r5, r0
 351              	.LVL56:
ARM GAS  /tmp/ccps07Ev.s 			page 58


2887:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t count = 0;
2888:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t* tmp;
2889:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2890:HALLIB/Src/stm32f7xx_hal_sd.c ****   tmp = (uint32_t*)hsd->pTxBuffPtr;
 352              		.loc 1 2890 0
 353 0004 066A     		ldr	r6, [r0, #32]
 354              	.LVL57:
2891:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2892:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Write data to SDMMC Tx FIFO */
2893:HALLIB/Src/stm32f7xx_hal_sd.c ****   for(count = 0; count < 8; count++)
 355              		.loc 1 2893 0
 356 0006 0024     		movs	r4, #0
 357 0008 05E0     		b	.L25
 358              	.LVL58:
 359              	.L26:
2894:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
2895:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 360              		.loc 1 2895 0 discriminator 3
 361 000a 06EB8401 		add	r1, r6, r4, lsl #2
 362 000e 2868     		ldr	r0, [r5]
 363 0010 FFF7FEFF 		bl	SDMMC_WriteFIFO
 364              	.LVL59:
2893:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 365              		.loc 1 2893 0 discriminator 3
 366 0014 0134     		adds	r4, r4, #1
 367              	.LVL60:
 368              	.L25:
2893:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 369              		.loc 1 2893 0 is_stmt 0 discriminator 1
 370 0016 072C     		cmp	r4, #7
 371 0018 F7D9     		bls	.L26
2896:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
2897:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2898:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->pTxBuffPtr += 8;
 372              		.loc 1 2898 0 is_stmt 1
 373 001a 2B6A     		ldr	r3, [r5, #32]
 374 001c 2033     		adds	r3, r3, #32
 375 001e 2B62     		str	r3, [r5, #32]
2899:HALLIB/Src/stm32f7xx_hal_sd.c ****   
2900:HALLIB/Src/stm32f7xx_hal_sd.c ****   return HAL_OK;
2901:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 376              		.loc 1 2901 0
 377 0020 0020     		movs	r0, #0
 378 0022 70BD     		pop	{r4, r5, r6, pc}
 379              		.cfi_endproc
 380              	.LFE177:
 382              		.section	.text.SD_SendSDStatus,"ax",%progbits
 383              		.align	2
 384              		.thumb
 385              		.thumb_func
 387              	SD_SendSDStatus:
 388              	.LFB171:
2546:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 389              		.loc 1 2546 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 24
 392              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccps07Ev.s 			page 59


 393              	.LVL61:
 394 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 395              	.LCFI6:
 396              		.cfi_def_cfa_offset 20
 397              		.cfi_offset 4, -20
 398              		.cfi_offset 5, -16
 399              		.cfi_offset 6, -12
 400              		.cfi_offset 7, -8
 401              		.cfi_offset 14, -4
 402 0002 87B0     		sub	sp, sp, #28
 403              	.LCFI7:
 404              		.cfi_def_cfa_offset 48
 405 0004 0446     		mov	r4, r0
 406 0006 0E46     		mov	r6, r1
 407              	.LVL62:
2549:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t count = 0;
 408              		.loc 1 2549 0
 409 0008 FFF7FEFF 		bl	HAL_GetTick
 410              	.LVL63:
 411 000c 0746     		mov	r7, r0
 412              	.LVL64:
2553:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 413              		.loc 1 2553 0
 414 000e 0021     		movs	r1, #0
 415 0010 2068     		ldr	r0, [r4]
 416              	.LVL65:
 417 0012 FFF7FEFF 		bl	SDMMC_GetResponse
 418              	.LVL66:
 419 0016 10F0007F 		tst	r0, #33554432
 420 001a 65D1     		bne	.L39
2559:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
 421              		.loc 1 2559 0
 422 001c 4021     		movs	r1, #64
 423 001e 2068     		ldr	r0, [r4]
 424 0020 FFF7FEFF 		bl	SDMMC_CmdBlockLength
 425              	.LVL67:
2560:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 426              		.loc 1 2560 0
 427 0024 10B1     		cbz	r0, .L30
2562:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
 428              		.loc 1 2562 0
 429 0026 A26B     		ldr	r2, [r4, #56]
 430 0028 A263     		str	r2, [r4, #56]
2563:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 431              		.loc 1 2563 0
 432 002a 6BE0     		b	.L29
 433              	.L30:
2567:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
 434              		.loc 1 2567 0
 435 002c 216D     		ldr	r1, [r4, #80]
 436 002e 0904     		lsls	r1, r1, #16
 437 0030 2068     		ldr	r0, [r4]
 438              	.LVL68:
 439 0032 FFF7FEFF 		bl	SDMMC_CmdAppCommand
 440              	.LVL69:
2568:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 441              		.loc 1 2568 0
ARM GAS  /tmp/ccps07Ev.s 			page 60


 442 0036 10B1     		cbz	r0, .L31
2570:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
 443              		.loc 1 2570 0
 444 0038 A26B     		ldr	r2, [r4, #56]
 445 003a A263     		str	r2, [r4, #56]
2571:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 446              		.loc 1 2571 0
 447 003c 62E0     		b	.L29
 448              	.L31:
2575:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DataLength    = 64;
 449              		.loc 1 2575 0
 450 003e 4FF0FF33 		mov	r3, #-1
 451 0042 0093     		str	r3, [sp]
2576:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 452              		.loc 1 2576 0
 453 0044 4023     		movs	r3, #64
 454 0046 0193     		str	r3, [sp, #4]
2577:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 455              		.loc 1 2577 0
 456 0048 6023     		movs	r3, #96
 457 004a 0293     		str	r3, [sp, #8]
2578:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 458              		.loc 1 2578 0
 459 004c 0223     		movs	r3, #2
 460 004e 0393     		str	r3, [sp, #12]
2579:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DPSM          = SDMMC_DPSM_ENABLE;
 461              		.loc 1 2579 0
 462 0050 0023     		movs	r3, #0
 463 0052 0493     		str	r3, [sp, #16]
2580:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_ConfigData(hsd->Instance, &config);
 464              		.loc 1 2580 0
 465 0054 0123     		movs	r3, #1
 466 0056 0593     		str	r3, [sp, #20]
2581:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 467              		.loc 1 2581 0
 468 0058 6946     		mov	r1, sp
 469 005a 2068     		ldr	r0, [r4]
 470              	.LVL70:
 471 005c FFF7FEFF 		bl	SDMMC_ConfigData
 472              	.LVL71:
2584:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
 473              		.loc 1 2584 0
 474 0060 2068     		ldr	r0, [r4]
 475 0062 FFF7FEFF 		bl	SDMMC_CmdStatusRegister
 476              	.LVL72:
2585:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 477              		.loc 1 2585 0
 478 0066 C0B1     		cbz	r0, .L32
2587:HALLIB/Src/stm32f7xx_hal_sd.c ****     return errorstate;
 479              		.loc 1 2587 0
 480 0068 A26B     		ldr	r2, [r4, #56]
 481 006a A263     		str	r2, [r4, #56]
2588:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 482              		.loc 1 2588 0
 483 006c 4AE0     		b	.L29
 484              	.LVL73:
 485              	.L36:
ARM GAS  /tmp/ccps07Ev.s 			page 61


2594:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 486              		.loc 1 2594 0
 487 006e 5B6B     		ldr	r3, [r3, #52]
 488 0070 13F4004F 		tst	r3, #32768
 489 0074 07D1     		bne	.L40
 490 0076 0AE0     		b	.L34
 491              	.LVL74:
 492              	.L35:
2598:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 493              		.loc 1 2598 0 discriminator 3
 494 0078 2068     		ldr	r0, [r4]
 495 007a FFF7FEFF 		bl	SDMMC_ReadFIFO
 496              	.LVL75:
 497 007e 46F82500 		str	r0, [r6, r5, lsl #2]
2596:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 498              		.loc 1 2596 0 discriminator 3
 499 0082 0135     		adds	r5, r5, #1
 500              	.LVL76:
 501 0084 00E0     		b	.L33
 502              	.LVL77:
 503              	.L40:
 504 0086 0025     		movs	r5, #0
 505              	.L33:
 506              	.LVL78:
2596:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 507              		.loc 1 2596 0 is_stmt 0 discriminator 1
 508 0088 072D     		cmp	r5, #7
 509 008a F5D9     		bls	.L35
2601:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 510              		.loc 1 2601 0 is_stmt 1
 511 008c 2036     		adds	r6, r6, #32
 512              	.LVL79:
 513              	.L34:
2604:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 514              		.loc 1 2604 0
 515 008e FFF7FEFF 		bl	HAL_GetTick
 516              	.LVL80:
 517 0092 C01B     		subs	r0, r0, r7
 518 0094 B0F1FF3F 		cmp	r0, #-1
 519 0098 29D0     		beq	.L41
 520              	.L32:
2592:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 521              		.loc 1 2592 0
 522 009a 2368     		ldr	r3, [r4]
 523 009c 596B     		ldr	r1, [r3, #52]
 524 009e 40F22A42 		movw	r2, #1066
 525 00a2 1142     		tst	r1, r2
 526 00a4 E3D0     		beq	.L36
2610:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 527              		.loc 1 2610 0
 528 00a6 5A6B     		ldr	r2, [r3, #52]
 529 00a8 12F0080F 		tst	r2, #8
 530 00ac 22D1     		bne	.L42
2614:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 531              		.loc 1 2614 0
 532 00ae 5A6B     		ldr	r2, [r3, #52]
 533 00b0 12F0020F 		tst	r2, #2
ARM GAS  /tmp/ccps07Ev.s 			page 62


 534 00b4 20D1     		bne	.L43
2618:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 535              		.loc 1 2618 0
 536 00b6 5B6B     		ldr	r3, [r3, #52]
 537 00b8 13F0200F 		tst	r3, #32
 538 00bc 1ED1     		bne	.L44
 539 00be 0AE0     		b	.L37
 540              	.L38:
2625:HALLIB/Src/stm32f7xx_hal_sd.c ****     pSDstatus++;
 541              		.loc 1 2625 0
 542 00c0 1046     		mov	r0, r2
 543 00c2 FFF7FEFF 		bl	SDMMC_ReadFIFO
 544              	.LVL81:
 545 00c6 46F8040B 		str	r0, [r6], #4
 546              	.LVL82:
2628:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 547              		.loc 1 2628 0
 548 00ca FFF7FEFF 		bl	HAL_GetTick
 549              	.LVL83:
 550 00ce C01B     		subs	r0, r0, r7
 551 00d0 B0F1FF3F 		cmp	r0, #-1
 552 00d4 14D0     		beq	.L45
 553              	.L37:
2623:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 554              		.loc 1 2623 0
 555 00d6 2268     		ldr	r2, [r4]
 556 00d8 536B     		ldr	r3, [r2, #52]
 557 00da 13F40010 		ands	r0, r3, #2097152
 558 00de EFD1     		bne	.L38
2635:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 559              		.loc 1 2635 0
 560 00e0 40F2FF53 		movw	r3, #1535
 561 00e4 9363     		str	r3, [r2, #56]
2637:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 562              		.loc 1 2637 0
 563 00e6 0DE0     		b	.L29
 564              	.LVL84:
 565              	.L39:
2555:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 566              		.loc 1 2555 0
 567 00e8 4FF40060 		mov	r0, #2048
 568 00ec 0AE0     		b	.L29
 569              	.LVL85:
 570              	.L41:
2606:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 571              		.loc 1 2606 0
 572 00ee 4FF00040 		mov	r0, #-2147483648
 573 00f2 07E0     		b	.L29
 574              	.L42:
2612:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 575              		.loc 1 2612 0
 576 00f4 0820     		movs	r0, #8
 577 00f6 05E0     		b	.L29
 578              	.L43:
2616:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 579              		.loc 1 2616 0
 580 00f8 0220     		movs	r0, #2
ARM GAS  /tmp/ccps07Ev.s 			page 63


 581 00fa 03E0     		b	.L29
 582              	.L44:
2620:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 583              		.loc 1 2620 0
 584 00fc 2020     		movs	r0, #32
 585 00fe 01E0     		b	.L29
 586              	.L45:
2630:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 587              		.loc 1 2630 0
 588 0100 4FF00040 		mov	r0, #-2147483648
 589              	.L29:
2638:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 590              		.loc 1 2638 0
 591 0104 07B0     		add	sp, sp, #28
 592              	.LCFI8:
 593              		.cfi_def_cfa_offset 20
 594              		@ sp needed
 595 0106 F0BD     		pop	{r4, r5, r6, r7, pc}
 596              		.cfi_endproc
 597              	.LFE171:
 599              		.section	.text.SD_FindSCR,"ax",%progbits
 600              		.align	2
 601              		.thumb
 602              		.thumb_func
 604              	SD_FindSCR:
 605              	.LFB175:
2771:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 606              		.loc 1 2771 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 32
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610              	.LVL86:
 611 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 612              	.LCFI9:
 613              		.cfi_def_cfa_offset 20
 614              		.cfi_offset 4, -20
 615              		.cfi_offset 5, -16
 616              		.cfi_offset 6, -12
 617              		.cfi_offset 7, -8
 618              		.cfi_offset 14, -4
 619 0002 89B0     		sub	sp, sp, #36
 620              	.LCFI10:
 621              		.cfi_def_cfa_offset 56
 622 0004 0446     		mov	r4, r0
 623 0006 0D46     		mov	r5, r1
 624              	.LVL87:
2774:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t index = 0;
 625              		.loc 1 2774 0
 626 0008 FFF7FEFF 		bl	HAL_GetTick
 627              	.LVL88:
 628 000c 0646     		mov	r6, r0
 629              	.LVL89:
2776:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 630              		.loc 1 2776 0
 631 000e 0023     		movs	r3, #0
 632 0010 0093     		str	r3, [sp]
 633 0012 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccps07Ev.s 			page 64


2779:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
 634              		.loc 1 2779 0
 635 0014 0821     		movs	r1, #8
 636 0016 2068     		ldr	r0, [r4]
 637              	.LVL90:
 638 0018 FFF7FEFF 		bl	SDMMC_CmdBlockLength
 639              	.LVL91:
2780:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 640              		.loc 1 2780 0
 641 001c 0028     		cmp	r0, #0
 642 001e 69D1     		bne	.L55
2786:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
 643              		.loc 1 2786 0
 644 0020 216D     		ldr	r1, [r4, #80]
 645 0022 0904     		lsls	r1, r1, #16
 646 0024 2068     		ldr	r0, [r4]
 647              	.LVL92:
 648 0026 FFF7FEFF 		bl	SDMMC_CmdAppCommand
 649              	.LVL93:
2787:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 650              		.loc 1 2787 0
 651 002a 0028     		cmp	r0, #0
 652 002c 63D1     		bne	.L56
2792:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DataLength    = 8;
 653              		.loc 1 2792 0
 654 002e 4FF0FF33 		mov	r3, #-1
 655 0032 0293     		str	r3, [sp, #8]
2793:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 656              		.loc 1 2793 0
 657 0034 0823     		movs	r3, #8
 658 0036 0393     		str	r3, [sp, #12]
2794:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 659              		.loc 1 2794 0
 660 0038 3023     		movs	r3, #48
 661 003a 0493     		str	r3, [sp, #16]
2795:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 662              		.loc 1 2795 0
 663 003c 0223     		movs	r3, #2
 664 003e 0593     		str	r3, [sp, #20]
2796:HALLIB/Src/stm32f7xx_hal_sd.c ****   config.DPSM          = SDMMC_DPSM_ENABLE;
 665              		.loc 1 2796 0
 666 0040 0023     		movs	r3, #0
 667 0042 0693     		str	r3, [sp, #24]
2797:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_ConfigData(hsd->Instance, &config);
 668              		.loc 1 2797 0
 669 0044 0123     		movs	r3, #1
 670 0046 0793     		str	r3, [sp, #28]
2798:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 671              		.loc 1 2798 0
 672 0048 02A9     		add	r1, sp, #8
 673 004a 2068     		ldr	r0, [r4]
 674              	.LVL94:
 675 004c FFF7FEFF 		bl	SDMMC_ConfigData
 676              	.LVL95:
2801:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
 677              		.loc 1 2801 0
 678 0050 2068     		ldr	r0, [r4]
ARM GAS  /tmp/ccps07Ev.s 			page 65


 679 0052 FFF7FEFF 		bl	SDMMC_CmdSendSCR
 680              	.LVL96:
2802:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 681              		.loc 1 2802 0
 682 0056 0028     		cmp	r0, #0
 683 0058 4ED1     		bne	.L57
 684 005a 0027     		movs	r7, #0
 685 005c 0FE0     		b	.L49
 686              	.LVL97:
 687              	.L51:
2809:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 688              		.loc 1 2809 0
 689 005e 4B6B     		ldr	r3, [r1, #52]
 690 0060 13F4001F 		tst	r3, #2097152
 691 0064 05D0     		beq	.L50
2811:HALLIB/Src/stm32f7xx_hal_sd.c ****       index++;
 692              		.loc 1 2811 0
 693 0066 0846     		mov	r0, r1
 694 0068 FFF7FEFF 		bl	SDMMC_ReadFIFO
 695              	.LVL98:
 696 006c 4DF82700 		str	r0, [sp, r7, lsl #2]
2812:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 697              		.loc 1 2812 0
 698 0070 0137     		adds	r7, r7, #1
 699              	.LVL99:
 700              	.L50:
2815:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 701              		.loc 1 2815 0
 702 0072 FFF7FEFF 		bl	HAL_GetTick
 703              	.LVL100:
 704 0076 801B     		subs	r0, r0, r6
 705 0078 B0F1FF3F 		cmp	r0, #-1
 706 007c 3DD0     		beq	.L58
 707              	.LVL101:
 708              	.L49:
2807:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 709              		.loc 1 2807 0
 710 007e 2168     		ldr	r1, [r4]
 711 0080 4A6B     		ldr	r2, [r1, #52]
 712 0082 40F22A43 		movw	r3, #1066
 713 0086 1A42     		tst	r2, r3
 714 0088 E9D0     		beq	.L51
2821:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 715              		.loc 1 2821 0
 716 008a 4B6B     		ldr	r3, [r1, #52]
 717 008c 13F0080F 		tst	r3, #8
 718 0090 03D0     		beq	.L52
2823:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 719              		.loc 1 2823 0
 720 0092 0823     		movs	r3, #8
 721 0094 8B63     		str	r3, [r1, #56]
2825:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 722              		.loc 1 2825 0
 723 0096 1846     		mov	r0, r3
 724 0098 31E0     		b	.L48
 725              	.L52:
2827:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
ARM GAS  /tmp/ccps07Ev.s 			page 66


 726              		.loc 1 2827 0
 727 009a 4B6B     		ldr	r3, [r1, #52]
 728 009c 13F0020F 		tst	r3, #2
 729 00a0 03D0     		beq	.L53
2829:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 730              		.loc 1 2829 0
 731 00a2 0223     		movs	r3, #2
 732 00a4 8B63     		str	r3, [r1, #56]
2831:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 733              		.loc 1 2831 0
 734 00a6 1846     		mov	r0, r3
 735 00a8 29E0     		b	.L48
 736              	.L53:
2833:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 737              		.loc 1 2833 0
 738 00aa 4B6B     		ldr	r3, [r1, #52]
 739 00ac 13F02000 		ands	r0, r3, #32
 740 00b0 02D0     		beq	.L54
2835:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 741              		.loc 1 2835 0
 742 00b2 2020     		movs	r0, #32
 743 00b4 8863     		str	r0, [r1, #56]
2837:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 744              		.loc 1 2837 0
 745 00b6 22E0     		b	.L48
 746              	.L54:
2843:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 747              		.loc 1 2843 0
 748 00b8 40F2FF53 		movw	r3, #1535
 749 00bc 8B63     		str	r3, [r1, #56]
2845:HALLIB/Src/stm32f7xx_hal_sd.c ****       ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 750              		.loc 1 2845 0
 751 00be 0099     		ldr	r1, [sp]
 752 00c0 0B02     		lsls	r3, r1, #8
 753 00c2 03F47F03 		and	r3, r3, #16711680
 754 00c6 43EA0163 		orr	r3, r3, r1, lsl #24
2846:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 755              		.loc 1 2846 0
 756 00ca 0A0A     		lsrs	r2, r1, #8
 757 00cc 02F47F42 		and	r2, r2, #65280
2845:HALLIB/Src/stm32f7xx_hal_sd.c ****       ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 758              		.loc 1 2845 0
 759 00d0 1343     		orrs	r3, r3, r2
2846:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 760              		.loc 1 2846 0
 761 00d2 43EA1163 		orr	r3, r3, r1, lsr #24
2845:HALLIB/Src/stm32f7xx_hal_sd.c ****       ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 762              		.loc 1 2845 0
 763 00d6 6B60     		str	r3, [r5, #4]
2848:HALLIB/Src/stm32f7xx_hal_sd.c ****       ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 764              		.loc 1 2848 0
 765 00d8 0199     		ldr	r1, [sp, #4]
 766 00da 0B02     		lsls	r3, r1, #8
 767 00dc 03F47F03 		and	r3, r3, #16711680
 768 00e0 43EA0163 		orr	r3, r3, r1, lsl #24
2849:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 769              		.loc 1 2849 0
ARM GAS  /tmp/ccps07Ev.s 			page 67


 770 00e4 0A0A     		lsrs	r2, r1, #8
 771 00e6 02F47F42 		and	r2, r2, #65280
2848:HALLIB/Src/stm32f7xx_hal_sd.c ****       ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 772              		.loc 1 2848 0
 773 00ea 1343     		orrs	r3, r3, r2
2849:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 774              		.loc 1 2849 0
 775 00ec 43EA1163 		orr	r3, r3, r1, lsr #24
2848:HALLIB/Src/stm32f7xx_hal_sd.c ****       ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 776              		.loc 1 2848 0
 777 00f0 2B60     		str	r3, [r5]
2852:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 778              		.loc 1 2852 0
 779 00f2 04E0     		b	.L48
 780              	.LVL102:
 781              	.L55:
 782 00f4 03E0     		b	.L48
 783              	.L56:
 784 00f6 02E0     		b	.L48
 785              	.L57:
 786 00f8 01E0     		b	.L48
 787              	.LVL103:
 788              	.L58:
2817:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 789              		.loc 1 2817 0
 790 00fa 4FF00040 		mov	r0, #-2147483648
 791              	.LVL104:
 792              	.L48:
2853:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 793              		.loc 1 2853 0
 794 00fe 09B0     		add	sp, sp, #36
 795              	.LCFI11:
 796              		.cfi_def_cfa_offset 20
 797              		@ sp needed
 798 0100 F0BD     		pop	{r4, r5, r6, r7, pc}
 799              		.cfi_endproc
 800              	.LFE175:
 802 0102 00BF     		.section	.text.SD_WideBus_Enable,"ax",%progbits
 803              		.align	2
 804              		.thumb
 805              		.thumb_func
 807              	SD_WideBus_Enable:
 808              	.LFB173:
2675:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t scr[2] = {0, 0};
 809              		.loc 1 2675 0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 8
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              	.LVL105:
 814 0000 30B5     		push	{r4, r5, lr}
 815              	.LCFI12:
 816              		.cfi_def_cfa_offset 12
 817              		.cfi_offset 4, -12
 818              		.cfi_offset 5, -8
 819              		.cfi_offset 14, -4
 820 0002 83B0     		sub	sp, sp, #12
 821              	.LCFI13:
ARM GAS  /tmp/ccps07Ev.s 			page 68


 822              		.cfi_def_cfa_offset 24
 823 0004 0546     		mov	r5, r0
2676:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 824              		.loc 1 2676 0
 825 0006 0021     		movs	r1, #0
 826 0008 0091     		str	r1, [sp]
 827 000a 0191     		str	r1, [sp, #4]
 828              	.LVL106:
2679:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 829              		.loc 1 2679 0
 830 000c 0068     		ldr	r0, [r0]
 831              	.LVL107:
 832 000e FFF7FEFF 		bl	SDMMC_GetResponse
 833              	.LVL108:
 834 0012 10F00074 		ands	r4, r0, #33554432
 835 0016 14D1     		bne	.L62
2685:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
 836              		.loc 1 2685 0
 837 0018 6946     		mov	r1, sp
 838 001a 2846     		mov	r0, r5
 839 001c FFF7FEFF 		bl	SD_FindSCR
 840              	.LVL109:
2686:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 841              		.loc 1 2686 0
 842 0020 90B9     		cbnz	r0, .L63
2692:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 843              		.loc 1 2692 0
 844 0022 019B     		ldr	r3, [sp, #4]
 845 0024 13F4802F 		tst	r3, #262144
 846 0028 10D0     		beq	.L64
2695:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_OK)
 847              		.loc 1 2695 0
 848 002a 296D     		ldr	r1, [r5, #80]
 849 002c 0904     		lsls	r1, r1, #16
 850 002e 2868     		ldr	r0, [r5]
 851              	.LVL110:
 852 0030 FFF7FEFF 		bl	SDMMC_CmdAppCommand
 853              	.LVL111:
2696:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 854              		.loc 1 2696 0
 855 0034 68B9     		cbnz	r0, .L65
2702:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_OK)
 856              		.loc 1 2702 0
 857 0036 0221     		movs	r1, #2
 858 0038 2868     		ldr	r0, [r5]
 859              	.LVL112:
 860 003a FFF7FEFF 		bl	SDMMC_CmdBusWidth
 861              	.LVL113:
2703:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 862              		.loc 1 2703 0
 863 003e 50B9     		cbnz	r0, .L66
 864 0040 0AE0     		b	.L61
 865              	.LVL114:
 866              	.L62:
2681:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 867              		.loc 1 2681 0
 868 0042 4FF40064 		mov	r4, #2048
ARM GAS  /tmp/ccps07Ev.s 			page 69


 869 0046 07E0     		b	.L61
 870              	.LVL115:
 871              	.L63:
2688:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 872              		.loc 1 2688 0
 873 0048 0446     		mov	r4, r0
 874 004a 05E0     		b	.L61
 875              	.L64:
2712:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 876              		.loc 1 2712 0
 877 004c 4FF08064 		mov	r4, #67108864
 878 0050 02E0     		b	.L61
 879              	.L65:
2698:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 880              		.loc 1 2698 0
 881 0052 0446     		mov	r4, r0
 882 0054 00E0     		b	.L61
 883              	.L66:
2705:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 884              		.loc 1 2705 0
 885 0056 0446     		mov	r4, r0
 886              	.LVL116:
 887              	.L61:
2714:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 888              		.loc 1 2714 0
 889 0058 2046     		mov	r0, r4
 890 005a 03B0     		add	sp, sp, #12
 891              	.LCFI14:
 892              		.cfi_def_cfa_offset 12
 893              		@ sp needed
 894 005c 30BD     		pop	{r4, r5, pc}
 895              		.cfi_endproc
 896              	.LFE173:
 898 005e 00BF     		.section	.text.SD_WideBus_Disable,"ax",%progbits
 899              		.align	2
 900              		.thumb
 901              		.thumb_func
 903              	SD_WideBus_Disable:
 904              	.LFB174:
2722:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t scr[2] = {0, 0};
 905              		.loc 1 2722 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 8
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909              	.LVL117:
 910 0000 30B5     		push	{r4, r5, lr}
 911              	.LCFI15:
 912              		.cfi_def_cfa_offset 12
 913              		.cfi_offset 4, -12
 914              		.cfi_offset 5, -8
 915              		.cfi_offset 14, -4
 916 0002 83B0     		sub	sp, sp, #12
 917              	.LCFI16:
 918              		.cfi_def_cfa_offset 24
 919 0004 0546     		mov	r5, r0
2723:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 920              		.loc 1 2723 0
ARM GAS  /tmp/ccps07Ev.s 			page 70


 921 0006 0021     		movs	r1, #0
 922 0008 0091     		str	r1, [sp]
 923 000a 0191     		str	r1, [sp, #4]
 924              	.LVL118:
2726:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 925              		.loc 1 2726 0
 926 000c 0068     		ldr	r0, [r0]
 927              	.LVL119:
 928 000e FFF7FEFF 		bl	SDMMC_GetResponse
 929              	.LVL120:
 930 0012 10F00074 		ands	r4, r0, #33554432
 931 0016 14D1     		bne	.L70
2732:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
 932              		.loc 1 2732 0
 933 0018 6946     		mov	r1, sp
 934 001a 2846     		mov	r0, r5
 935 001c FFF7FEFF 		bl	SD_FindSCR
 936              	.LVL121:
2733:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 937              		.loc 1 2733 0
 938 0020 90B9     		cbnz	r0, .L71
2739:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 939              		.loc 1 2739 0
 940 0022 019B     		ldr	r3, [sp, #4]
 941 0024 13F4803F 		tst	r3, #65536
 942 0028 10D0     		beq	.L72
2742:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_OK)
 943              		.loc 1 2742 0
 944 002a 296D     		ldr	r1, [r5, #80]
 945 002c 0904     		lsls	r1, r1, #16
 946 002e 2868     		ldr	r0, [r5]
 947              	.LVL122:
 948 0030 FFF7FEFF 		bl	SDMMC_CmdAppCommand
 949              	.LVL123:
2743:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 950              		.loc 1 2743 0
 951 0034 68B9     		cbnz	r0, .L73
2749:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_OK)
 952              		.loc 1 2749 0
 953 0036 0021     		movs	r1, #0
 954 0038 2868     		ldr	r0, [r5]
 955              	.LVL124:
 956 003a FFF7FEFF 		bl	SDMMC_CmdBusWidth
 957              	.LVL125:
2750:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 958              		.loc 1 2750 0
 959 003e 50B9     		cbnz	r0, .L74
 960 0040 0AE0     		b	.L69
 961              	.LVL126:
 962              	.L70:
2728:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 963              		.loc 1 2728 0
 964 0042 4FF40064 		mov	r4, #2048
 965 0046 07E0     		b	.L69
 966              	.LVL127:
 967              	.L71:
2735:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
ARM GAS  /tmp/ccps07Ev.s 			page 71


 968              		.loc 1 2735 0
 969 0048 0446     		mov	r4, r0
 970 004a 05E0     		b	.L69
 971              	.L72:
2759:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 972              		.loc 1 2759 0
 973 004c 4FF08064 		mov	r4, #67108864
 974 0050 02E0     		b	.L69
 975              	.L73:
2745:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 976              		.loc 1 2745 0
 977 0052 0446     		mov	r4, r0
 978 0054 00E0     		b	.L69
 979              	.L74:
2752:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 980              		.loc 1 2752 0
 981 0056 0446     		mov	r4, r0
 982              	.LVL128:
 983              	.L69:
2761:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 984              		.loc 1 2761 0
 985 0058 2046     		mov	r0, r4
 986 005a 03B0     		add	sp, sp, #12
 987              	.LCFI17:
 988              		.cfi_def_cfa_offset 12
 989              		@ sp needed
 990 005c 30BD     		pop	{r4, r5, pc}
 991              		.cfi_endproc
 992              	.LFE174:
 994 005e 00BF     		.section	.text.SD_SendStatus,"ax",%progbits
 995              		.align	2
 996              		.thumb
 997              		.thumb_func
 999              	SD_SendStatus:
 1000              	.LFB172:
2648:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 1001              		.loc 1 2648 0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 0
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005              	.LVL129:
2651:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 1006              		.loc 1 2651 0
 1007 0000 79B1     		cbz	r1, .L78
2648:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 1008              		.loc 1 2648 0
 1009 0002 38B5     		push	{r3, r4, r5, lr}
 1010              	.LCFI18:
 1011              		.cfi_def_cfa_offset 16
 1012              		.cfi_offset 3, -16
 1013              		.cfi_offset 4, -12
 1014              		.cfi_offset 5, -8
 1015              		.cfi_offset 14, -4
 1016 0004 0D46     		mov	r5, r1
 1017 0006 0446     		mov	r4, r0
2657:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
 1018              		.loc 1 2657 0
ARM GAS  /tmp/ccps07Ev.s 			page 72


 1019 0008 016D     		ldr	r1, [r0, #80]
 1020              	.LVL130:
 1021 000a 0904     		lsls	r1, r1, #16
 1022 000c 0068     		ldr	r0, [r0]
 1023              	.LVL131:
 1024 000e FFF7FEFF 		bl	SDMMC_CmdSendStatus
 1025              	.LVL132:
2658:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 1026              		.loc 1 2658 0
 1027 0012 48B9     		cbnz	r0, .L79
2664:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 1028              		.loc 1 2664 0
 1029 0014 0021     		movs	r1, #0
 1030 0016 2068     		ldr	r0, [r4]
 1031              	.LVL133:
 1032 0018 FFF7FEFF 		bl	SDMMC_GetResponse
 1033              	.LVL134:
 1034 001c 2860     		str	r0, [r5]
2666:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 1035              		.loc 1 2666 0
 1036 001e 0020     		movs	r0, #0
 1037 0020 38BD     		pop	{r3, r4, r5, pc}
 1038              	.LVL135:
 1039              	.L78:
 1040              	.LCFI19:
 1041              		.cfi_def_cfa_offset 0
 1042              		.cfi_restore 3
 1043              		.cfi_restore 4
 1044              		.cfi_restore 5
 1045              		.cfi_restore 14
2653:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 1046              		.loc 1 2653 0
 1047 0022 4FF00060 		mov	r0, #134217728
 1048              	.LVL136:
2667:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 1049              		.loc 1 2667 0
 1050 0026 7047     		bx	lr
 1051              	.LVL137:
 1052              	.L79:
 1053              	.LCFI20:
 1054              		.cfi_def_cfa_offset 16
 1055              		.cfi_offset 3, -16
 1056              		.cfi_offset 4, -12
 1057              		.cfi_offset 5, -8
 1058              		.cfi_offset 14, -4
 1059 0028 38BD     		pop	{r3, r4, r5, pc}
 1060              		.cfi_endproc
 1061              	.LFE172:
 1063 002a 00BF     		.section	.text.HAL_SD_MspInit,"ax",%progbits
 1064              		.align	2
 1065              		.weak	HAL_SD_MspInit
 1066              		.thumb
 1067              		.thumb_func
 1069              	HAL_SD_MspInit:
 1070              	.LFB139:
 436:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
 1071              		.loc 1 436 0
ARM GAS  /tmp/ccps07Ev.s 			page 73


 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 0
 1074              		@ frame_needed = 0, uses_anonymous_args = 0
 1075              		@ link register save eliminated.
 1076              	.LVL138:
 1077 0000 7047     		bx	lr
 1078              		.cfi_endproc
 1079              	.LFE139:
 1081 0002 00BF     		.section	.text.HAL_SD_MspDeInit,"ax",%progbits
 1082              		.align	2
 1083              		.weak	HAL_SD_MspDeInit
 1084              		.thumb
 1085              		.thumb_func
 1087              	HAL_SD_MspDeInit:
 1088              	.LFB140:
 451:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
 1089              		.loc 1 451 0
 1090              		.cfi_startproc
 1091              		@ args = 0, pretend = 0, frame = 0
 1092              		@ frame_needed = 0, uses_anonymous_args = 0
 1093              		@ link register save eliminated.
 1094              	.LVL139:
 1095 0000 7047     		bx	lr
 1096              		.cfi_endproc
 1097              	.LFE140:
 1099 0002 00BF     		.section	.text.HAL_SD_DeInit,"ax",%progbits
 1100              		.align	2
 1101              		.global	HAL_SD_DeInit
 1102              		.thumb
 1103              		.thumb_func
 1105              	HAL_SD_DeInit:
 1106              	.LFB138:
 405:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check the SD handle allocation */
 1107              		.loc 1 405 0
 1108              		.cfi_startproc
 1109              		@ args = 0, pretend = 0, frame = 0
 1110              		@ frame_needed = 0, uses_anonymous_args = 0
 1111              	.LVL140:
 407:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 1112              		.loc 1 407 0
 1113 0000 70B1     		cbz	r0, .L85
 405:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check the SD handle allocation */
 1114              		.loc 1 405 0
 1115 0002 10B5     		push	{r4, lr}
 1116              	.LCFI21:
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 4, -8
 1119              		.cfi_offset 14, -4
 1120 0004 0446     		mov	r4, r0
 415:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 1121              		.loc 1 415 0
 1122 0006 0323     		movs	r3, #3
 1123 0008 80F83430 		strb	r3, [r0, #52]
 418:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 1124              		.loc 1 418 0
 1125 000c FFF7FEFF 		bl	SD_PowerOFF
 1126              	.LVL141:
ARM GAS  /tmp/ccps07Ev.s 			page 74


 421:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 1127              		.loc 1 421 0
 1128 0010 2046     		mov	r0, r4
 1129 0012 FFF7FEFF 		bl	HAL_SD_MspDeInit
 1130              	.LVL142:
 423:HALLIB/Src/stm32f7xx_hal_sd.c ****   hsd->State = HAL_SD_STATE_RESET;
 1131              		.loc 1 423 0
 1132 0016 0020     		movs	r0, #0
 1133 0018 A063     		str	r0, [r4, #56]
 424:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 1134              		.loc 1 424 0
 1135 001a 84F83400 		strb	r0, [r4, #52]
 426:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 1136              		.loc 1 426 0
 1137 001e 10BD     		pop	{r4, pc}
 1138              	.LVL143:
 1139              	.L85:
 1140              	.LCFI22:
 1141              		.cfi_def_cfa_offset 0
 1142              		.cfi_restore 4
 1143              		.cfi_restore 14
 409:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 1144              		.loc 1 409 0
 1145 0020 0120     		movs	r0, #1
 1146              	.LVL144:
 1147 0022 7047     		bx	lr
 1148              		.cfi_endproc
 1149              	.LFE138:
 1151              		.section	.text.HAL_SD_ReadBlocks,"ax",%progbits
 1152              		.align	2
 1153              		.global	HAL_SD_ReadBlocks
 1154              		.thumb
 1155              		.thumb_func
 1157              	HAL_SD_ReadBlocks:
 1158              	.LFB141:
 492:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 1159              		.loc 1 492 0
 1160              		.cfi_startproc
 1161              		@ args = 4, pretend = 0, frame = 24
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163              	.LVL145:
 1164 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1165              	.LCFI23:
 1166              		.cfi_def_cfa_offset 24
 1167              		.cfi_offset 4, -24
 1168              		.cfi_offset 5, -20
 1169              		.cfi_offset 6, -16
 1170              		.cfi_offset 7, -12
 1171              		.cfi_offset 8, -8
 1172              		.cfi_offset 14, -4
 1173 0004 86B0     		sub	sp, sp, #24
 1174              	.LCFI24:
 1175              		.cfi_def_cfa_offset 48
 1176 0006 0446     		mov	r4, r0
 1177 0008 0E46     		mov	r6, r1
 1178 000a 1546     		mov	r5, r2
 1179 000c 9846     		mov	r8, r3
ARM GAS  /tmp/ccps07Ev.s 			page 75


 1180              	.LVL146:
 495:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 1181              		.loc 1 495 0
 1182 000e FFF7FEFF 		bl	HAL_GetTick
 1183              	.LVL147:
 498:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 1184              		.loc 1 498 0
 1185 0012 2EB9     		cbnz	r6, .L89
 500:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 1186              		.loc 1 500 0
 1187 0014 A36B     		ldr	r3, [r4, #56]
 1188 0016 43F00063 		orr	r3, r3, #134217728
 1189 001a A363     		str	r3, [r4, #56]
 501:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 1190              		.loc 1 501 0
 1191 001c 0120     		movs	r0, #1
 1192              	.LVL148:
 1193 001e F7E0     		b	.L90
 1194              	.LVL149:
 1195              	.L89:
 1196 0020 0746     		mov	r7, r0
 504:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 1197              		.loc 1 504 0
 1198 0022 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 1199 0026 DBB2     		uxtb	r3, r3
 1200 0028 012B     		cmp	r3, #1
 1201 002a 40F0EC80 		bne	.L91
 506:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1202              		.loc 1 506 0
 1203 002e 0023     		movs	r3, #0
 1204 0030 A363     		str	r3, [r4, #56]
 508:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1205              		.loc 1 508 0
 1206 0032 05EB0803 		add	r3, r5, r8
 1207 0036 E26D     		ldr	r2, [r4, #92]
 1208 0038 9342     		cmp	r3, r2
 1209 003a 05D9     		bls	.L92
 510:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1210              		.loc 1 510 0
 1211 003c A36B     		ldr	r3, [r4, #56]
 1212 003e 43F00073 		orr	r3, r3, #33554432
 1213 0042 A363     		str	r3, [r4, #56]
 511:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1214              		.loc 1 511 0
 1215 0044 0120     		movs	r0, #1
 1216              	.LVL150:
 1217 0046 E3E0     		b	.L90
 1218              	.LVL151:
 1219              	.L92:
 514:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1220              		.loc 1 514 0
 1221 0048 0323     		movs	r3, #3
 1222 004a 84F83430 		strb	r3, [r4, #52]
 517:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1223              		.loc 1 517 0
 1224 004e 2368     		ldr	r3, [r4]
 1225 0050 0022     		movs	r2, #0
ARM GAS  /tmp/ccps07Ev.s 			page 76


 1226 0052 DA62     		str	r2, [r3, #44]
 519:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1227              		.loc 1 519 0
 1228 0054 636C     		ldr	r3, [r4, #68]
 1229 0056 012B     		cmp	r3, #1
 1230 0058 00D0     		beq	.L93
 521:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1231              		.loc 1 521 0
 1232 005a 6D02     		lsls	r5, r5, #9
 1233              	.LVL152:
 1234              	.L93:
 525:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 1235              		.loc 1 525 0
 1236 005c 4FF40071 		mov	r1, #512
 1237 0060 2068     		ldr	r0, [r4]
 1238              	.LVL153:
 1239 0062 FFF7FEFF 		bl	SDMMC_CmdBlockLength
 1240              	.LVL154:
 526:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1241              		.loc 1 526 0
 1242 0066 0346     		mov	r3, r0
 1243 0068 50B1     		cbz	r0, .L94
 529:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 1244              		.loc 1 529 0
 1245 006a 2268     		ldr	r2, [r4]
 1246 006c 40F2FF51 		movw	r1, #1535
 1247 0070 9163     		str	r1, [r2, #56]
 530:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 1248              		.loc 1 530 0
 1249 0072 A06B     		ldr	r0, [r4, #56]
 1250              	.LVL155:
 1251 0074 1843     		orrs	r0, r0, r3
 1252 0076 A063     		str	r0, [r4, #56]
 531:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1253              		.loc 1 531 0
 1254 0078 0120     		movs	r0, #1
 1255 007a 84F83400 		strb	r0, [r4, #52]
 532:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1256              		.loc 1 532 0
 1257 007e C7E0     		b	.L90
 1258              	.LVL156:
 1259              	.L94:
 536:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 1260              		.loc 1 536 0
 1261 0080 4FF0FF33 		mov	r3, #-1
 1262 0084 0093     		str	r3, [sp]
 537:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 1263              		.loc 1 537 0
 1264 0086 4FEA4823 		lsl	r3, r8, #9
 1265 008a 0193     		str	r3, [sp, #4]
 538:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 1266              		.loc 1 538 0
 1267 008c 9023     		movs	r3, #144
 1268 008e 0293     		str	r3, [sp, #8]
 539:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 1269              		.loc 1 539 0
 1270 0090 0223     		movs	r3, #2
ARM GAS  /tmp/ccps07Ev.s 			page 77


 1271 0092 0393     		str	r3, [sp, #12]
 540:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
 1272              		.loc 1 540 0
 1273 0094 0023     		movs	r3, #0
 1274 0096 0493     		str	r3, [sp, #16]
 541:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
 1275              		.loc 1 541 0
 1276 0098 0123     		movs	r3, #1
 1277 009a 0593     		str	r3, [sp, #20]
 542:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1278              		.loc 1 542 0
 1279 009c 6946     		mov	r1, sp
 1280 009e 2068     		ldr	r0, [r4]
 1281              	.LVL157:
 1282 00a0 FFF7FEFF 		bl	SDMMC_ConfigData
 1283              	.LVL158:
 545:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1284              		.loc 1 545 0
 1285 00a4 B8F1010F 		cmp	r8, #1
 1286 00a8 06D9     		bls	.L95
 547:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 1287              		.loc 1 547 0
 1288 00aa 0223     		movs	r3, #2
 1289 00ac 2363     		str	r3, [r4, #48]
 550:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1290              		.loc 1 550 0
 1291 00ae 2946     		mov	r1, r5
 1292 00b0 2068     		ldr	r0, [r4]
 1293 00b2 FFF7FEFF 		bl	SDMMC_CmdReadMultiBlock
 1294              	.LVL159:
 1295 00b6 05E0     		b	.L96
 1296              	.LVL160:
 1297              	.L95:
 554:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 1298              		.loc 1 554 0
 1299 00b8 0123     		movs	r3, #1
 1300 00ba 2363     		str	r3, [r4, #48]
 557:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1301              		.loc 1 557 0
 1302 00bc 2946     		mov	r1, r5
 1303 00be 2068     		ldr	r0, [r4]
 1304 00c0 FFF7FEFF 		bl	SDMMC_CmdReadSingleBlock
 1305              	.LVL161:
 1306              	.L96:
 559:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1307              		.loc 1 559 0
 1308 00c4 78B3     		cbz	r0, .L97
 562:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 1309              		.loc 1 562 0
 1310 00c6 2368     		ldr	r3, [r4]
 1311 00c8 40F2FF52 		movw	r2, #1535
 1312 00cc 9A63     		str	r2, [r3, #56]
 563:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 1313              		.loc 1 563 0
 1314 00ce A36B     		ldr	r3, [r4, #56]
 1315 00d0 1843     		orrs	r0, r0, r3
 1316              	.LVL162:
ARM GAS  /tmp/ccps07Ev.s 			page 78


 1317 00d2 A063     		str	r0, [r4, #56]
 564:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1318              		.loc 1 564 0
 1319 00d4 0120     		movs	r0, #1
 1320 00d6 84F83400 		strb	r0, [r4, #52]
 565:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1321              		.loc 1 565 0
 1322 00da 99E0     		b	.L90
 1323              	.LVL163:
 1324              	.L102:
 571:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 1325              		.loc 1 571 0
 1326 00dc 436B     		ldr	r3, [r0, #52]
 1327 00de 13F4004F 		tst	r3, #32768
 1328 00e2 07D1     		bne	.L109
 1329 00e4 0AE0     		b	.L99
 1330              	.LVL164:
 1331              	.L100:
 576:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 1332              		.loc 1 576 0 discriminator 3
 1333 00e6 2068     		ldr	r0, [r4]
 1334 00e8 FFF7FEFF 		bl	SDMMC_ReadFIFO
 1335              	.LVL165:
 1336 00ec 46F82500 		str	r0, [r6, r5, lsl #2]
 574:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 1337              		.loc 1 574 0 discriminator 3
 1338 00f0 0135     		adds	r5, r5, #1
 1339              	.LVL166:
 1340 00f2 00E0     		b	.L98
 1341              	.LVL167:
 1342              	.L109:
 1343 00f4 0025     		movs	r5, #0
 1344              	.L98:
 1345              	.LVL168:
 574:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 1346              		.loc 1 574 0 is_stmt 0 discriminator 1
 1347 00f6 072D     		cmp	r5, #7
 1348 00f8 F5D9     		bls	.L100
 578:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 1349              		.loc 1 578 0 is_stmt 1
 1350 00fa 2036     		adds	r6, r6, #32
 1351              	.LVL169:
 1352              	.L99:
 581:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 1353              		.loc 1 581 0
 1354 00fc 0C9B     		ldr	r3, [sp, #48]
 1355 00fe 2BB1     		cbz	r3, .L101
 581:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 1356              		.loc 1 581 0 is_stmt 0 discriminator 1
 1357 0100 FFF7FEFF 		bl	HAL_GetTick
 1358              	.LVL170:
 1359 0104 C01B     		subs	r0, r0, r7
 1360 0106 0C9B     		ldr	r3, [sp, #48]
 1361 0108 8342     		cmp	r3, r0
 1362 010a 0CD8     		bhi	.L97
 1363              	.L101:
 584:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
ARM GAS  /tmp/ccps07Ev.s 			page 79


 1364              		.loc 1 584 0 is_stmt 1
 1365 010c 2368     		ldr	r3, [r4]
 1366 010e 40F2FF52 		movw	r2, #1535
 1367 0112 9A63     		str	r2, [r3, #56]
 585:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State= HAL_SD_STATE_READY;
 1368              		.loc 1 585 0
 1369 0114 A36B     		ldr	r3, [r4, #56]
 1370 0116 43F00043 		orr	r3, r3, #-2147483648
 1371 011a A363     		str	r3, [r4, #56]
 586:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_TIMEOUT;
 1372              		.loc 1 586 0
 1373 011c 0123     		movs	r3, #1
 1374 011e 84F83430 		strb	r3, [r4, #52]
 587:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 1375              		.loc 1 587 0
 1376 0122 0320     		movs	r0, #3
 1377 0124 74E0     		b	.L90
 1378              	.L97:
 569:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1379              		.loc 1 569 0
 1380 0126 2068     		ldr	r0, [r4]
 1381 0128 436B     		ldr	r3, [r0, #52]
 1382 012a 13F4957F 		tst	r3, #298
 1383 012e D5D0     		beq	.L102
 592:HALLIB/Src/stm32f7xx_hal_sd.c ****     {    
 1384              		.loc 1 592 0
 1385 0130 436B     		ldr	r3, [r0, #52]
 1386 0132 13F4807F 		tst	r3, #256
 1387 0136 13D0     		beq	.L103
 592:HALLIB/Src/stm32f7xx_hal_sd.c ****     {    
 1388              		.loc 1 592 0 is_stmt 0 discriminator 1
 1389 0138 B8F1010F 		cmp	r8, #1
 1390 013c 10D9     		bls	.L103
 594:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 1391              		.loc 1 594 0 is_stmt 1
 1392 013e 636C     		ldr	r3, [r4, #68]
 1393 0140 032B     		cmp	r3, #3
 1394 0142 0DD0     		beq	.L103
 597:HALLIB/Src/stm32f7xx_hal_sd.c ****         if(errorstate != HAL_SD_ERROR_NONE)
 1395              		.loc 1 597 0
 1396 0144 FFF7FEFF 		bl	SDMMC_CmdStopTransfer
 1397              	.LVL171:
 598:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 1398              		.loc 1 598 0
 1399 0148 50B1     		cbz	r0, .L103
 601:HALLIB/Src/stm32f7xx_hal_sd.c ****           hsd->ErrorCode |= errorstate;
 1400              		.loc 1 601 0
 1401 014a 2368     		ldr	r3, [r4]
 1402 014c 40F2FF51 		movw	r1, #1535
 1403 0150 9963     		str	r1, [r3, #56]
 602:HALLIB/Src/stm32f7xx_hal_sd.c ****           hsd->State = HAL_SD_STATE_READY;
 1404              		.loc 1 602 0
 1405 0152 A36B     		ldr	r3, [r4, #56]
 1406 0154 0343     		orrs	r3, r3, r0
 1407 0156 A363     		str	r3, [r4, #56]
 603:HALLIB/Src/stm32f7xx_hal_sd.c ****           return HAL_ERROR;
 1408              		.loc 1 603 0
ARM GAS  /tmp/ccps07Ev.s 			page 80


 1409 0158 0120     		movs	r0, #1
 1410              	.LVL172:
 1411 015a 84F83400 		strb	r0, [r4, #52]
 604:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 1412              		.loc 1 604 0
 1413 015e 57E0     		b	.L90
 1414              	.L103:
 610:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1415              		.loc 1 610 0
 1416 0160 2368     		ldr	r3, [r4]
 1417 0162 5A6B     		ldr	r2, [r3, #52]
 1418 0164 12F0080F 		tst	r2, #8
 1419 0168 0AD0     		beq	.L104
 613:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 1420              		.loc 1 613 0
 1421 016a 40F2FF52 		movw	r2, #1535
 1422 016e 9A63     		str	r2, [r3, #56]
 614:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 1423              		.loc 1 614 0
 1424 0170 A36B     		ldr	r3, [r4, #56]
 1425 0172 43F00803 		orr	r3, r3, #8
 1426 0176 A363     		str	r3, [r4, #56]
 615:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1427              		.loc 1 615 0
 1428 0178 0120     		movs	r0, #1
 1429 017a 84F83400 		strb	r0, [r4, #52]
 616:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1430              		.loc 1 616 0
 1431 017e 47E0     		b	.L90
 1432              	.L104:
 618:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1433              		.loc 1 618 0
 1434 0180 5A6B     		ldr	r2, [r3, #52]
 1435 0182 12F0020F 		tst	r2, #2
 1436 0186 0AD0     		beq	.L105
 621:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 1437              		.loc 1 621 0
 1438 0188 40F2FF52 		movw	r2, #1535
 1439 018c 9A63     		str	r2, [r3, #56]
 622:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 1440              		.loc 1 622 0
 1441 018e A36B     		ldr	r3, [r4, #56]
 1442 0190 43F00203 		orr	r3, r3, #2
 1443 0194 A363     		str	r3, [r4, #56]
 623:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1444              		.loc 1 623 0
 1445 0196 0120     		movs	r0, #1
 1446 0198 84F83400 		strb	r0, [r4, #52]
 624:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1447              		.loc 1 624 0
 1448 019c 38E0     		b	.L90
 1449              	.L105:
 626:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1450              		.loc 1 626 0
 1451 019e 5A6B     		ldr	r2, [r3, #52]
 1452 01a0 12F0200F 		tst	r2, #32
 1453 01a4 22D0     		beq	.L106
ARM GAS  /tmp/ccps07Ev.s 			page 81


 629:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 1454              		.loc 1 629 0
 1455 01a6 40F2FF52 		movw	r2, #1535
 1456 01aa 9A63     		str	r2, [r3, #56]
 630:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 1457              		.loc 1 630 0
 1458 01ac A36B     		ldr	r3, [r4, #56]
 1459 01ae 43F02003 		orr	r3, r3, #32
 1460 01b2 A363     		str	r3, [r4, #56]
 631:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1461              		.loc 1 631 0
 1462 01b4 0120     		movs	r0, #1
 1463 01b6 84F83400 		strb	r0, [r4, #52]
 632:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1464              		.loc 1 632 0
 1465 01ba 29E0     		b	.L90
 1466              	.L108:
 638:HALLIB/Src/stm32f7xx_hal_sd.c ****       tempbuff++;
 1467              		.loc 1 638 0
 1468 01bc FFF7FEFF 		bl	SDMMC_ReadFIFO
 1469              	.LVL173:
 1470 01c0 46F8040B 		str	r0, [r6], #4
 1471              	.LVL174:
 641:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 1472              		.loc 1 641 0
 1473 01c4 0C9B     		ldr	r3, [sp, #48]
 1474 01c6 2BB1     		cbz	r3, .L107
 641:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 1475              		.loc 1 641 0 is_stmt 0 discriminator 1
 1476 01c8 FFF7FEFF 		bl	HAL_GetTick
 1477              	.LVL175:
 1478 01cc C01B     		subs	r0, r0, r7
 1479 01ce 0C9B     		ldr	r3, [sp, #48]
 1480 01d0 8342     		cmp	r3, r0
 1481 01d2 0BD8     		bhi	.L106
 1482              	.L107:
 644:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 1483              		.loc 1 644 0 is_stmt 1
 1484 01d4 2368     		ldr	r3, [r4]
 1485 01d6 40F2FF52 		movw	r2, #1535
 1486 01da 9A63     		str	r2, [r3, #56]
 645:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State= HAL_SD_STATE_READY;
 1487              		.loc 1 645 0
 1488 01dc A36B     		ldr	r3, [r4, #56]
 1489 01de 43F00043 		orr	r3, r3, #-2147483648
 1490 01e2 A363     		str	r3, [r4, #56]
 646:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_ERROR;
 1491              		.loc 1 646 0
 1492 01e4 0120     		movs	r0, #1
 1493 01e6 84F83400 		strb	r0, [r4, #52]
 647:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 1494              		.loc 1 647 0
 1495 01ea 11E0     		b	.L90
 1496              	.L106:
 636:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1497              		.loc 1 636 0
 1498 01ec 2068     		ldr	r0, [r4]
ARM GAS  /tmp/ccps07Ev.s 			page 82


 1499 01ee 436B     		ldr	r3, [r0, #52]
 1500 01f0 13F4001F 		tst	r3, #2097152
 1501 01f4 E2D1     		bne	.L108
 652:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1502              		.loc 1 652 0
 1503 01f6 40F2FF53 		movw	r3, #1535
 1504 01fa 8363     		str	r3, [r0, #56]
 654:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1505              		.loc 1 654 0
 1506 01fc 0123     		movs	r3, #1
 1507 01fe 84F83430 		strb	r3, [r4, #52]
 656:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 1508              		.loc 1 656 0
 1509 0202 0020     		movs	r0, #0
 1510 0204 04E0     		b	.L90
 1511              	.LVL176:
 1512              	.L91:
 660:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 1513              		.loc 1 660 0
 1514 0206 A36B     		ldr	r3, [r4, #56]
 1515 0208 43F00053 		orr	r3, r3, #536870912
 1516 020c A363     		str	r3, [r4, #56]
 661:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 1517              		.loc 1 661 0
 1518 020e 0120     		movs	r0, #1
 1519              	.LVL177:
 1520              	.L90:
 663:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 1521              		.loc 1 663 0
 1522 0210 06B0     		add	sp, sp, #24
 1523              	.LCFI25:
 1524              		.cfi_def_cfa_offset 24
 1525              		@ sp needed
 1526 0212 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1527              		.cfi_endproc
 1528              	.LFE141:
 1530 0216 00BF     		.section	.text.HAL_SD_WriteBlocks,"ax",%progbits
 1531              		.align	2
 1532              		.global	HAL_SD_WriteBlocks
 1533              		.thumb
 1534              		.thumb_func
 1536              	HAL_SD_WriteBlocks:
 1537              	.LFB142:
 678:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 1538              		.loc 1 678 0
 1539              		.cfi_startproc
 1540              		@ args = 4, pretend = 0, frame = 24
 1541              		@ frame_needed = 0, uses_anonymous_args = 0
 1542              	.LVL178:
 1543 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1544              	.LCFI26:
 1545              		.cfi_def_cfa_offset 28
 1546              		.cfi_offset 4, -28
 1547              		.cfi_offset 5, -24
 1548              		.cfi_offset 6, -20
 1549              		.cfi_offset 7, -16
 1550              		.cfi_offset 8, -12
ARM GAS  /tmp/ccps07Ev.s 			page 83


 1551              		.cfi_offset 9, -8
 1552              		.cfi_offset 14, -4
 1553 0004 87B0     		sub	sp, sp, #28
 1554              	.LCFI27:
 1555              		.cfi_def_cfa_offset 56
 1556 0006 0446     		mov	r4, r0
 1557 0008 0E46     		mov	r6, r1
 1558 000a 1546     		mov	r5, r2
 1559 000c 9846     		mov	r8, r3
 1560              	.LVL179:
 681:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t count = 0;
 1561              		.loc 1 681 0
 1562 000e FFF7FEFF 		bl	HAL_GetTick
 1563              	.LVL180:
 685:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 1564              		.loc 1 685 0
 1565 0012 2EB9     		cbnz	r6, .L112
 687:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 1566              		.loc 1 687 0
 1567 0014 A36B     		ldr	r3, [r4, #56]
 1568 0016 43F00063 		orr	r3, r3, #134217728
 1569 001a A363     		str	r3, [r4, #56]
 688:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 1570              		.loc 1 688 0
 1571 001c 0120     		movs	r0, #1
 1572              	.LVL181:
 1573 001e DFE0     		b	.L113
 1574              	.LVL182:
 1575              	.L112:
 1576 0020 0746     		mov	r7, r0
 691:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 1577              		.loc 1 691 0
 1578 0022 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 1579 0026 DBB2     		uxtb	r3, r3
 1580 0028 012B     		cmp	r3, #1
 1581 002a 40F0D480 		bne	.L114
 693:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1582              		.loc 1 693 0
 1583 002e 0023     		movs	r3, #0
 1584 0030 A363     		str	r3, [r4, #56]
 695:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1585              		.loc 1 695 0
 1586 0032 05EB0803 		add	r3, r5, r8
 1587 0036 E26D     		ldr	r2, [r4, #92]
 1588 0038 9342     		cmp	r3, r2
 1589 003a 05D9     		bls	.L115
 697:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1590              		.loc 1 697 0
 1591 003c A36B     		ldr	r3, [r4, #56]
 1592 003e 43F00073 		orr	r3, r3, #33554432
 1593 0042 A363     		str	r3, [r4, #56]
 698:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1594              		.loc 1 698 0
 1595 0044 0120     		movs	r0, #1
 1596              	.LVL183:
 1597 0046 CBE0     		b	.L113
 1598              	.LVL184:
ARM GAS  /tmp/ccps07Ev.s 			page 84


 1599              	.L115:
 701:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1600              		.loc 1 701 0
 1601 0048 0323     		movs	r3, #3
 1602 004a 84F83430 		strb	r3, [r4, #52]
 704:HALLIB/Src/stm32f7xx_hal_sd.c ****      
 1603              		.loc 1 704 0
 1604 004e 2368     		ldr	r3, [r4]
 1605 0050 0022     		movs	r2, #0
 1606 0052 DA62     		str	r2, [r3, #44]
 706:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1607              		.loc 1 706 0
 1608 0054 636C     		ldr	r3, [r4, #68]
 1609 0056 012B     		cmp	r3, #1
 1610 0058 00D0     		beq	.L116
 708:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1611              		.loc 1 708 0
 1612 005a 6D02     		lsls	r5, r5, #9
 1613              	.LVL185:
 1614              	.L116:
 712:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 1615              		.loc 1 712 0
 1616 005c 4FF40071 		mov	r1, #512
 1617 0060 2068     		ldr	r0, [r4]
 1618              	.LVL186:
 1619 0062 FFF7FEFF 		bl	SDMMC_CmdBlockLength
 1620              	.LVL187:
 713:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1621              		.loc 1 713 0
 1622 0066 0346     		mov	r3, r0
 1623 0068 50B1     		cbz	r0, .L117
 716:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 1624              		.loc 1 716 0
 1625 006a 2268     		ldr	r2, [r4]
 1626 006c 40F2FF51 		movw	r1, #1535
 1627 0070 9163     		str	r1, [r2, #56]
 717:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 1628              		.loc 1 717 0
 1629 0072 A06B     		ldr	r0, [r4, #56]
 1630              	.LVL188:
 1631 0074 1843     		orrs	r0, r0, r3
 1632 0076 A063     		str	r0, [r4, #56]
 718:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1633              		.loc 1 718 0
 1634 0078 0120     		movs	r0, #1
 1635 007a 84F83400 		strb	r0, [r4, #52]
 719:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1636              		.loc 1 719 0
 1637 007e AFE0     		b	.L113
 1638              	.LVL189:
 1639              	.L117:
 723:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1640              		.loc 1 723 0
 1641 0080 B8F1010F 		cmp	r8, #1
 1642 0084 07D9     		bls	.L118
 725:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 1643              		.loc 1 725 0
ARM GAS  /tmp/ccps07Ev.s 			page 85


 1644 0086 2023     		movs	r3, #32
 1645 0088 2363     		str	r3, [r4, #48]
 728:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1646              		.loc 1 728 0
 1647 008a 2946     		mov	r1, r5
 1648 008c 2068     		ldr	r0, [r4]
 1649              	.LVL190:
 1650 008e FFF7FEFF 		bl	SDMMC_CmdWriteMultiBlock
 1651              	.LVL191:
 1652 0092 8146     		mov	r9, r0
 1653              	.LVL192:
 1654 0094 06E0     		b	.L119
 1655              	.L118:
 732:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 1656              		.loc 1 732 0
 1657 0096 1023     		movs	r3, #16
 1658 0098 2363     		str	r3, [r4, #48]
 735:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1659              		.loc 1 735 0
 1660 009a 2946     		mov	r1, r5
 1661 009c 2068     		ldr	r0, [r4]
 1662              	.LVL193:
 1663 009e FFF7FEFF 		bl	SDMMC_CmdWriteSingleBlock
 1664              	.LVL194:
 1665 00a2 8146     		mov	r9, r0
 1666              	.LVL195:
 1667              	.L119:
 737:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1668              		.loc 1 737 0
 1669 00a4 B9F1000F 		cmp	r9, #0
 1670 00a8 0BD0     		beq	.L120
 740:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 1671              		.loc 1 740 0
 1672 00aa 2368     		ldr	r3, [r4]
 1673 00ac 40F2FF52 		movw	r2, #1535
 1674 00b0 9A63     		str	r2, [r3, #56]
 741:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 1675              		.loc 1 741 0
 1676 00b2 A36B     		ldr	r3, [r4, #56]
 1677 00b4 49EA0303 		orr	r3, r9, r3
 1678 00b8 A363     		str	r3, [r4, #56]
 742:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1679              		.loc 1 742 0
 1680 00ba 0120     		movs	r0, #1
 1681              	.LVL196:
 1682 00bc 84F83400 		strb	r0, [r4, #52]
 743:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1683              		.loc 1 743 0
 1684 00c0 8EE0     		b	.L113
 1685              	.LVL197:
 1686              	.L120:
 747:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 1687              		.loc 1 747 0
 1688 00c2 4FF0FF33 		mov	r3, #-1
 1689 00c6 0093     		str	r3, [sp]
 748:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 1690              		.loc 1 748 0
ARM GAS  /tmp/ccps07Ev.s 			page 86


 1691 00c8 4FEA4823 		lsl	r3, r8, #9
 1692 00cc 0193     		str	r3, [sp, #4]
 749:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 1693              		.loc 1 749 0
 1694 00ce 9023     		movs	r3, #144
 1695 00d0 0293     		str	r3, [sp, #8]
 750:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 1696              		.loc 1 750 0
 1697 00d2 0023     		movs	r3, #0
 1698 00d4 0393     		str	r3, [sp, #12]
 751:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
 1699              		.loc 1 751 0
 1700 00d6 0493     		str	r3, [sp, #16]
 752:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
 1701              		.loc 1 752 0
 1702 00d8 0123     		movs	r3, #1
 1703 00da 0593     		str	r3, [sp, #20]
 753:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1704              		.loc 1 753 0
 1705 00dc 6946     		mov	r1, sp
 1706 00de 2068     		ldr	r0, [r4]
 1707              	.LVL198:
 1708 00e0 FFF7FEFF 		bl	SDMMC_ConfigData
 1709              	.LVL199:
 756:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1710              		.loc 1 756 0
 1711 00e4 24E0     		b	.L121
 1712              	.LVL200:
 1713              	.L126:
 758:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 1714              		.loc 1 758 0
 1715 00e6 436B     		ldr	r3, [r0, #52]
 1716 00e8 13F4804F 		tst	r3, #16384
 1717 00ec 07D1     		bne	.L131
 1718 00ee 0AE0     		b	.L123
 1719              	.LVL201:
 1720              	.L124:
 763:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 1721              		.loc 1 763 0 discriminator 3
 1722 00f0 06EB8501 		add	r1, r6, r5, lsl #2
 1723 00f4 2068     		ldr	r0, [r4]
 1724 00f6 FFF7FEFF 		bl	SDMMC_WriteFIFO
 1725              	.LVL202:
 761:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 1726              		.loc 1 761 0 discriminator 3
 1727 00fa 0135     		adds	r5, r5, #1
 1728              	.LVL203:
 1729 00fc 00E0     		b	.L122
 1730              	.LVL204:
 1731              	.L131:
 1732 00fe 0025     		movs	r5, #0
 1733              	.L122:
 1734              	.LVL205:
 761:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 1735              		.loc 1 761 0 is_stmt 0 discriminator 1
 1736 0100 072D     		cmp	r5, #7
 1737 0102 F5D9     		bls	.L124
ARM GAS  /tmp/ccps07Ev.s 			page 87


 765:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 1738              		.loc 1 765 0 is_stmt 1
 1739 0104 2036     		adds	r6, r6, #32
 1740              	.LVL206:
 1741              	.L123:
 768:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 1742              		.loc 1 768 0
 1743 0106 0E9B     		ldr	r3, [sp, #56]
 1744 0108 2BB1     		cbz	r3, .L125
 768:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 1745              		.loc 1 768 0 is_stmt 0 discriminator 1
 1746 010a FFF7FEFF 		bl	HAL_GetTick
 1747              	.LVL207:
 1748 010e C01B     		subs	r0, r0, r7
 1749 0110 0E9B     		ldr	r3, [sp, #56]
 1750 0112 8342     		cmp	r3, r0
 1751 0114 0CD8     		bhi	.L121
 1752              	.L125:
 771:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode |= errorstate;
 1753              		.loc 1 771 0 is_stmt 1
 1754 0116 2368     		ldr	r3, [r4]
 1755 0118 40F2FF52 		movw	r2, #1535
 1756 011c 9A63     		str	r2, [r3, #56]
 772:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State = HAL_SD_STATE_READY;
 1757              		.loc 1 772 0
 1758 011e A36B     		ldr	r3, [r4, #56]
 1759 0120 49EA0303 		orr	r3, r9, r3
 1760 0124 A363     		str	r3, [r4, #56]
 773:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_TIMEOUT;
 1761              		.loc 1 773 0
 1762 0126 0123     		movs	r3, #1
 1763 0128 84F83430 		strb	r3, [r4, #52]
 774:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 1764              		.loc 1 774 0
 1765 012c 0320     		movs	r0, #3
 1766 012e 57E0     		b	.L113
 1767              	.L121:
 756:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1768              		.loc 1 756 0
 1769 0130 2068     		ldr	r0, [r4]
 1770 0132 436B     		ldr	r3, [r0, #52]
 1771 0134 13F48D7F 		tst	r3, #282
 1772 0138 D5D0     		beq	.L126
 779:HALLIB/Src/stm32f7xx_hal_sd.c ****     { 
 1773              		.loc 1 779 0
 1774 013a 436B     		ldr	r3, [r0, #52]
 1775 013c 13F4807F 		tst	r3, #256
 1776 0140 13D0     		beq	.L127
 779:HALLIB/Src/stm32f7xx_hal_sd.c ****     { 
 1777              		.loc 1 779 0 is_stmt 0 discriminator 1
 1778 0142 B8F1010F 		cmp	r8, #1
 1779 0146 10D9     		bls	.L127
 781:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 1780              		.loc 1 781 0 is_stmt 1
 1781 0148 636C     		ldr	r3, [r4, #68]
 1782 014a 032B     		cmp	r3, #3
 1783 014c 0DD0     		beq	.L127
ARM GAS  /tmp/ccps07Ev.s 			page 88


 784:HALLIB/Src/stm32f7xx_hal_sd.c ****         if(errorstate != HAL_SD_ERROR_NONE)
 1784              		.loc 1 784 0
 1785 014e FFF7FEFF 		bl	SDMMC_CmdStopTransfer
 1786              	.LVL208:
 785:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 1787              		.loc 1 785 0
 1788 0152 50B1     		cbz	r0, .L127
 788:HALLIB/Src/stm32f7xx_hal_sd.c ****           hsd->ErrorCode |= errorstate;
 1789              		.loc 1 788 0
 1790 0154 2368     		ldr	r3, [r4]
 1791 0156 40F2FF51 		movw	r1, #1535
 1792 015a 9963     		str	r1, [r3, #56]
 789:HALLIB/Src/stm32f7xx_hal_sd.c ****           hsd->State = HAL_SD_STATE_READY;
 1793              		.loc 1 789 0
 1794 015c A36B     		ldr	r3, [r4, #56]
 1795 015e 0343     		orrs	r3, r3, r0
 1796 0160 A363     		str	r3, [r4, #56]
 790:HALLIB/Src/stm32f7xx_hal_sd.c ****           return HAL_ERROR;
 1797              		.loc 1 790 0
 1798 0162 0120     		movs	r0, #1
 1799              	.LVL209:
 1800 0164 84F83400 		strb	r0, [r4, #52]
 791:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 1801              		.loc 1 791 0
 1802 0168 3AE0     		b	.L113
 1803              	.L127:
 797:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1804              		.loc 1 797 0
 1805 016a 2368     		ldr	r3, [r4]
 1806 016c 5A6B     		ldr	r2, [r3, #52]
 1807 016e 12F0080F 		tst	r2, #8
 1808 0172 0AD0     		beq	.L128
 800:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 1809              		.loc 1 800 0
 1810 0174 40F2FF52 		movw	r2, #1535
 1811 0178 9A63     		str	r2, [r3, #56]
 801:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 1812              		.loc 1 801 0
 1813 017a A36B     		ldr	r3, [r4, #56]
 1814 017c 43F00803 		orr	r3, r3, #8
 1815 0180 A363     		str	r3, [r4, #56]
 802:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1816              		.loc 1 802 0
 1817 0182 0120     		movs	r0, #1
 1818 0184 84F83400 		strb	r0, [r4, #52]
 803:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1819              		.loc 1 803 0
 1820 0188 2AE0     		b	.L113
 1821              	.L128:
 805:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1822              		.loc 1 805 0
 1823 018a 5A6B     		ldr	r2, [r3, #52]
 1824 018c 12F0020F 		tst	r2, #2
 1825 0190 0AD0     		beq	.L129
 808:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 1826              		.loc 1 808 0
 1827 0192 40F2FF52 		movw	r2, #1535
ARM GAS  /tmp/ccps07Ev.s 			page 89


 1828 0196 9A63     		str	r2, [r3, #56]
 809:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 1829              		.loc 1 809 0
 1830 0198 A36B     		ldr	r3, [r4, #56]
 1831 019a 43F00203 		orr	r3, r3, #2
 1832 019e A363     		str	r3, [r4, #56]
 810:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1833              		.loc 1 810 0
 1834 01a0 0120     		movs	r0, #1
 1835 01a2 84F83400 		strb	r0, [r4, #52]
 811:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1836              		.loc 1 811 0
 1837 01a6 1BE0     		b	.L113
 1838              	.L129:
 813:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1839              		.loc 1 813 0
 1840 01a8 5A6B     		ldr	r2, [r3, #52]
 1841 01aa 12F0100F 		tst	r2, #16
 1842 01ae 0AD0     		beq	.L130
 816:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 1843              		.loc 1 816 0
 1844 01b0 40F2FF52 		movw	r2, #1535
 1845 01b4 9A63     		str	r2, [r3, #56]
 817:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 1846              		.loc 1 817 0
 1847 01b6 A36B     		ldr	r3, [r4, #56]
 1848 01b8 43F01003 		orr	r3, r3, #16
 1849 01bc A363     		str	r3, [r4, #56]
 818:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1850              		.loc 1 818 0
 1851 01be 0120     		movs	r0, #1
 1852 01c0 84F83400 		strb	r0, [r4, #52]
 819:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1853              		.loc 1 819 0
 1854 01c4 0CE0     		b	.L113
 1855              	.L130:
 823:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1856              		.loc 1 823 0
 1857 01c6 40F2FF52 		movw	r2, #1535
 1858 01ca 9A63     		str	r2, [r3, #56]
 825:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1859              		.loc 1 825 0
 1860 01cc 0123     		movs	r3, #1
 1861 01ce 84F83430 		strb	r3, [r4, #52]
 827:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 1862              		.loc 1 827 0
 1863 01d2 0020     		movs	r0, #0
 1864 01d4 04E0     		b	.L113
 1865              	.LVL210:
 1866              	.L114:
 831:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 1867              		.loc 1 831 0
 1868 01d6 A36B     		ldr	r3, [r4, #56]
 1869 01d8 43F00053 		orr	r3, r3, #536870912
 1870 01dc A363     		str	r3, [r4, #56]
 832:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 1871              		.loc 1 832 0
ARM GAS  /tmp/ccps07Ev.s 			page 90


 1872 01de 0120     		movs	r0, #1
 1873              	.LVL211:
 1874              	.L113:
 834:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 1875              		.loc 1 834 0
 1876 01e0 07B0     		add	sp, sp, #28
 1877              	.LCFI28:
 1878              		.cfi_def_cfa_offset 28
 1879              		@ sp needed
 1880 01e2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1881              		.cfi_endproc
 1882              	.LFE142:
 1884 01e6 00BF     		.section	.text.HAL_SD_ReadBlocks_IT,"ax",%progbits
 1885              		.align	2
 1886              		.global	HAL_SD_ReadBlocks_IT
 1887              		.thumb
 1888              		.thumb_func
 1890              	HAL_SD_ReadBlocks_IT:
 1891              	.LFB143:
 850:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 1892              		.loc 1 850 0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 24
 1895              		@ frame_needed = 0, uses_anonymous_args = 0
 1896              	.LVL212:
 1897 0000 70B5     		push	{r4, r5, r6, lr}
 1898              	.LCFI29:
 1899              		.cfi_def_cfa_offset 16
 1900              		.cfi_offset 4, -16
 1901              		.cfi_offset 5, -12
 1902              		.cfi_offset 6, -8
 1903              		.cfi_offset 14, -4
 1904 0002 86B0     		sub	sp, sp, #24
 1905              	.LCFI30:
 1906              		.cfi_def_cfa_offset 40
 1907 0004 0446     		mov	r4, r0
 1908              	.LVL213:
 854:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 1909              		.loc 1 854 0
 1910 0006 29B9     		cbnz	r1, .L134
 856:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 1911              		.loc 1 856 0
 1912 0008 836B     		ldr	r3, [r0, #56]
 1913              	.LVL214:
 1914 000a 43F00063 		orr	r3, r3, #134217728
 1915 000e 8363     		str	r3, [r0, #56]
 857:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 1916              		.loc 1 857 0
 1917 0010 0120     		movs	r0, #1
 1918              	.LVL215:
 1919 0012 66E0     		b	.L135
 1920              	.LVL216:
 1921              	.L134:
 1922 0014 1546     		mov	r5, r2
 1923 0016 1E46     		mov	r6, r3
 1924 0018 0A46     		mov	r2, r1
 1925              	.LVL217:
ARM GAS  /tmp/ccps07Ev.s 			page 91


 860:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 1926              		.loc 1 860 0
 1927 001a 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1928              	.LVL218:
 1929 001e DBB2     		uxtb	r3, r3
 1930 0020 012B     		cmp	r3, #1
 1931 0022 5BD1     		bne	.L141
 862:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1932              		.loc 1 862 0
 1933 0024 0023     		movs	r3, #0
 1934 0026 8363     		str	r3, [r0, #56]
 864:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 1935              		.loc 1 864 0
 1936 0028 AB19     		adds	r3, r5, r6
 1937 002a C16D     		ldr	r1, [r0, #92]
 1938              	.LVL219:
 1939 002c 8B42     		cmp	r3, r1
 1940 002e 05D9     		bls	.L136
 866:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 1941              		.loc 1 866 0
 1942 0030 836B     		ldr	r3, [r0, #56]
 1943 0032 43F00073 		orr	r3, r3, #33554432
 1944 0036 8363     		str	r3, [r0, #56]
 867:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1945              		.loc 1 867 0
 1946 0038 0120     		movs	r0, #1
 1947              	.LVL220:
 1948 003a 52E0     		b	.L135
 1949              	.LVL221:
 1950              	.L136:
 870:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1951              		.loc 1 870 0
 1952 003c 0323     		movs	r3, #3
 1953 003e 80F83430 		strb	r3, [r0, #52]
 873:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1954              		.loc 1 873 0
 1955 0042 0368     		ldr	r3, [r0]
 1956 0044 0021     		movs	r1, #0
 1957 0046 D962     		str	r1, [r3, #44]
 875:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 1958              		.loc 1 875 0
 1959 0048 8262     		str	r2, [r0, #40]
 876:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1960              		.loc 1 876 0
 1961 004a 7202     		lsls	r2, r6, #9
 1962              	.LVL222:
 1963 004c C262     		str	r2, [r0, #44]
 878:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1964              		.loc 1 878 0
 1965 004e 0168     		ldr	r1, [r0]
 1966 0050 C86B     		ldr	r0, [r1, #60]
 1967              	.LVL223:
 1968 0052 48F22A13 		movw	r3, #33066
 1969 0056 0343     		orrs	r3, r3, r0
 1970 0058 CB63     		str	r3, [r1, #60]
 1971              	.LVL224:
 880:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
ARM GAS  /tmp/ccps07Ev.s 			page 92


 1972              		.loc 1 880 0
 1973 005a 636C     		ldr	r3, [r4, #68]
 1974 005c 012B     		cmp	r3, #1
 1975 005e 00D0     		beq	.L137
 882:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 1976              		.loc 1 882 0
 1977 0060 6D02     		lsls	r5, r5, #9
 1978              	.LVL225:
 1979              	.L137:
 886:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 1980              		.loc 1 886 0
 1981 0062 4FF0FF33 		mov	r3, #-1
 1982 0066 0093     		str	r3, [sp]
 887:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 1983              		.loc 1 887 0
 1984 0068 0192     		str	r2, [sp, #4]
 888:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 1985              		.loc 1 888 0
 1986 006a 9023     		movs	r3, #144
 1987 006c 0293     		str	r3, [sp, #8]
 889:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 1988              		.loc 1 889 0
 1989 006e 0223     		movs	r3, #2
 1990 0070 0393     		str	r3, [sp, #12]
 890:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
 1991              		.loc 1 890 0
 1992 0072 0023     		movs	r3, #0
 1993 0074 0493     		str	r3, [sp, #16]
 891:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
 1994              		.loc 1 891 0
 1995 0076 0123     		movs	r3, #1
 1996 0078 0593     		str	r3, [sp, #20]
 892:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 1997              		.loc 1 892 0
 1998 007a 6946     		mov	r1, sp
 1999 007c 2068     		ldr	r0, [r4]
 2000 007e FFF7FEFF 		bl	SDMMC_ConfigData
 2001              	.LVL226:
 895:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 2002              		.loc 1 895 0
 2003 0082 4FF40071 		mov	r1, #512
 2004 0086 2068     		ldr	r0, [r4]
 2005 0088 FFF7FEFF 		bl	SDMMC_CmdBlockLength
 2006              	.LVL227:
 896:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2007              		.loc 1 896 0
 2008 008c 0346     		mov	r3, r0
 2009 008e 50B1     		cbz	r0, .L138
 899:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 2010              		.loc 1 899 0
 2011 0090 2268     		ldr	r2, [r4]
 2012 0092 40F2FF51 		movw	r1, #1535
 2013 0096 9163     		str	r1, [r2, #56]
 900:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 2014              		.loc 1 900 0
 2015 0098 A06B     		ldr	r0, [r4, #56]
 2016              	.LVL228:
ARM GAS  /tmp/ccps07Ev.s 			page 93


 2017 009a 1843     		orrs	r0, r0, r3
 2018 009c A063     		str	r0, [r4, #56]
 901:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2019              		.loc 1 901 0
 2020 009e 0120     		movs	r0, #1
 2021 00a0 84F83400 		strb	r0, [r4, #52]
 902:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2022              		.loc 1 902 0
 2023 00a4 1DE0     		b	.L135
 2024              	.LVL229:
 2025              	.L138:
 906:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2026              		.loc 1 906 0
 2027 00a6 012E     		cmp	r6, #1
 2028 00a8 06D9     		bls	.L139
 908:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 2029              		.loc 1 908 0
 2030 00aa 0A23     		movs	r3, #10
 2031 00ac 2363     		str	r3, [r4, #48]
 911:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2032              		.loc 1 911 0
 2033 00ae 2946     		mov	r1, r5
 2034 00b0 2068     		ldr	r0, [r4]
 2035              	.LVL230:
 2036 00b2 FFF7FEFF 		bl	SDMMC_CmdReadMultiBlock
 2037              	.LVL231:
 2038 00b6 05E0     		b	.L140
 2039              	.L139:
 915:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 2040              		.loc 1 915 0
 2041 00b8 0923     		movs	r3, #9
 2042 00ba 2363     		str	r3, [r4, #48]
 918:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2043              		.loc 1 918 0
 2044 00bc 2946     		mov	r1, r5
 2045 00be 2068     		ldr	r0, [r4]
 2046              	.LVL232:
 2047 00c0 FFF7FEFF 		bl	SDMMC_CmdReadSingleBlock
 2048              	.LVL233:
 2049              	.L140:
 920:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2050              		.loc 1 920 0
 2051 00c4 60B1     		cbz	r0, .L142
 923:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 2052              		.loc 1 923 0
 2053 00c6 2368     		ldr	r3, [r4]
 2054 00c8 40F2FF52 		movw	r2, #1535
 2055 00cc 9A63     		str	r2, [r3, #56]
 924:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 2056              		.loc 1 924 0
 2057 00ce A36B     		ldr	r3, [r4, #56]
 2058 00d0 1843     		orrs	r0, r0, r3
 2059              	.LVL234:
 2060 00d2 A063     		str	r0, [r4, #56]
 925:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2061              		.loc 1 925 0
 2062 00d4 0120     		movs	r0, #1
ARM GAS  /tmp/ccps07Ev.s 			page 94


 2063 00d6 84F83400 		strb	r0, [r4, #52]
 926:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2064              		.loc 1 926 0
 2065 00da 02E0     		b	.L135
 2066              	.LVL235:
 2067              	.L141:
 933:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2068              		.loc 1 933 0
 2069 00dc 0220     		movs	r0, #2
 2070              	.LVL236:
 2071 00de 00E0     		b	.L135
 2072              	.LVL237:
 2073              	.L142:
 929:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2074              		.loc 1 929 0
 2075 00e0 0020     		movs	r0, #0
 2076              	.LVL238:
 2077              	.L135:
 935:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 2078              		.loc 1 935 0
 2079 00e2 06B0     		add	sp, sp, #24
 2080              	.LCFI31:
 2081              		.cfi_def_cfa_offset 16
 2082              		@ sp needed
 2083 00e4 70BD     		pop	{r4, r5, r6, pc}
 2084              		.cfi_endproc
 2085              	.LFE143:
 2087 00e6 00BF     		.section	.text.HAL_SD_WriteBlocks_IT,"ax",%progbits
 2088              		.align	2
 2089              		.global	HAL_SD_WriteBlocks_IT
 2090              		.thumb
 2091              		.thumb_func
 2093              	HAL_SD_WriteBlocks_IT:
 2094              	.LFB144:
 951:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 2095              		.loc 1 951 0
 2096              		.cfi_startproc
 2097              		@ args = 0, pretend = 0, frame = 24
 2098              		@ frame_needed = 0, uses_anonymous_args = 0
 2099              	.LVL239:
 2100 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2101              	.LCFI32:
 2102              		.cfi_def_cfa_offset 20
 2103              		.cfi_offset 4, -20
 2104              		.cfi_offset 5, -16
 2105              		.cfi_offset 6, -12
 2106              		.cfi_offset 7, -8
 2107              		.cfi_offset 14, -4
 2108 0002 87B0     		sub	sp, sp, #28
 2109              	.LCFI33:
 2110              		.cfi_def_cfa_offset 48
 2111 0004 0446     		mov	r4, r0
 2112              	.LVL240:
 955:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 2113              		.loc 1 955 0
 2114 0006 29B9     		cbnz	r1, .L145
 957:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
ARM GAS  /tmp/ccps07Ev.s 			page 95


 2115              		.loc 1 957 0
 2116 0008 836B     		ldr	r3, [r0, #56]
 2117              	.LVL241:
 2118 000a 43F00063 		orr	r3, r3, #134217728
 2119 000e 8363     		str	r3, [r0, #56]
 958:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2120              		.loc 1 958 0
 2121 0010 0120     		movs	r0, #1
 2122              	.LVL242:
 2123 0012 65E0     		b	.L146
 2124              	.LVL243:
 2125              	.L145:
 2126 0014 1546     		mov	r5, r2
 2127 0016 1E46     		mov	r6, r3
 2128 0018 0A46     		mov	r2, r1
 2129              	.LVL244:
 961:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 2130              		.loc 1 961 0
 2131 001a 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 2132              	.LVL245:
 2133 001e DBB2     		uxtb	r3, r3
 2134 0020 012B     		cmp	r3, #1
 2135 0022 5CD1     		bne	.L153
 963:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2136              		.loc 1 963 0
 2137 0024 0023     		movs	r3, #0
 2138 0026 8363     		str	r3, [r0, #56]
 965:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2139              		.loc 1 965 0
 2140 0028 AB19     		adds	r3, r5, r6
 2141 002a C16D     		ldr	r1, [r0, #92]
 2142              	.LVL246:
 2143 002c 8B42     		cmp	r3, r1
 2144 002e 05D9     		bls	.L147
 967:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2145              		.loc 1 967 0
 2146 0030 836B     		ldr	r3, [r0, #56]
 2147 0032 43F00073 		orr	r3, r3, #33554432
 2148 0036 8363     		str	r3, [r0, #56]
 968:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2149              		.loc 1 968 0
 2150 0038 0120     		movs	r0, #1
 2151              	.LVL247:
 2152 003a 51E0     		b	.L146
 2153              	.LVL248:
 2154              	.L147:
 971:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2155              		.loc 1 971 0
 2156 003c 0323     		movs	r3, #3
 2157 003e 80F83430 		strb	r3, [r0, #52]
 974:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2158              		.loc 1 974 0
 2159 0042 0368     		ldr	r3, [r0]
 2160 0044 0021     		movs	r1, #0
 2161 0046 D962     		str	r1, [r3, #44]
 976:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 2162              		.loc 1 976 0
ARM GAS  /tmp/ccps07Ev.s 			page 96


 2163 0048 0262     		str	r2, [r0, #32]
 977:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2164              		.loc 1 977 0
 2165 004a 7702     		lsls	r7, r6, #9
 2166 004c 4762     		str	r7, [r0, #36]
 980:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2167              		.loc 1 980 0
 2168 004e 0268     		ldr	r2, [r0]
 2169              	.LVL249:
 2170 0050 D16B     		ldr	r1, [r2, #60]
 2171 0052 44F21A13 		movw	r3, #16666
 2172 0056 0B43     		orrs	r3, r3, r1
 2173 0058 D363     		str	r3, [r2, #60]
 2174              	.LVL250:
 982:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2175              		.loc 1 982 0
 2176 005a 436C     		ldr	r3, [r0, #68]
 2177 005c 012B     		cmp	r3, #1
 2178 005e 00D0     		beq	.L148
 984:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2179              		.loc 1 984 0
 2180 0060 6D02     		lsls	r5, r5, #9
 2181              	.LVL251:
 2182              	.L148:
 988:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 2183              		.loc 1 988 0
 2184 0062 4FF40071 		mov	r1, #512
 2185 0066 2068     		ldr	r0, [r4]
 2186              	.LVL252:
 2187 0068 FFF7FEFF 		bl	SDMMC_CmdBlockLength
 2188              	.LVL253:
 989:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2189              		.loc 1 989 0
 2190 006c 0346     		mov	r3, r0
 2191 006e 50B1     		cbz	r0, .L149
 992:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 2192              		.loc 1 992 0
 2193 0070 2268     		ldr	r2, [r4]
 2194 0072 40F2FF51 		movw	r1, #1535
 2195 0076 9163     		str	r1, [r2, #56]
 993:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 2196              		.loc 1 993 0
 2197 0078 A06B     		ldr	r0, [r4, #56]
 2198              	.LVL254:
 2199 007a 1843     		orrs	r0, r0, r3
 2200 007c A063     		str	r0, [r4, #56]
 994:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2201              		.loc 1 994 0
 2202 007e 0120     		movs	r0, #1
 2203 0080 84F83400 		strb	r0, [r4, #52]
 995:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2204              		.loc 1 995 0
 2205 0084 2CE0     		b	.L146
 2206              	.LVL255:
 2207              	.L149:
 999:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2208              		.loc 1 999 0
ARM GAS  /tmp/ccps07Ev.s 			page 97


 2209 0086 012E     		cmp	r6, #1
 2210 0088 06D9     		bls	.L150
1001:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 2211              		.loc 1 1001 0
 2212 008a 2823     		movs	r3, #40
 2213 008c 2363     		str	r3, [r4, #48]
1004:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2214              		.loc 1 1004 0
 2215 008e 2946     		mov	r1, r5
 2216 0090 2068     		ldr	r0, [r4]
 2217              	.LVL256:
 2218 0092 FFF7FEFF 		bl	SDMMC_CmdWriteMultiBlock
 2219              	.LVL257:
 2220 0096 05E0     		b	.L151
 2221              	.L150:
1008:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 2222              		.loc 1 1008 0
 2223 0098 1823     		movs	r3, #24
 2224 009a 2363     		str	r3, [r4, #48]
1011:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2225              		.loc 1 1011 0
 2226 009c 2946     		mov	r1, r5
 2227 009e 2068     		ldr	r0, [r4]
 2228              	.LVL258:
 2229 00a0 FFF7FEFF 		bl	SDMMC_CmdWriteSingleBlock
 2230              	.LVL259:
 2231              	.L151:
1013:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2232              		.loc 1 1013 0
 2233 00a4 50B1     		cbz	r0, .L152
1016:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 2234              		.loc 1 1016 0
 2235 00a6 2368     		ldr	r3, [r4]
 2236 00a8 40F2FF52 		movw	r2, #1535
 2237 00ac 9A63     		str	r2, [r3, #56]
1017:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 2238              		.loc 1 1017 0
 2239 00ae A36B     		ldr	r3, [r4, #56]
 2240 00b0 1843     		orrs	r0, r0, r3
 2241              	.LVL260:
 2242 00b2 A063     		str	r0, [r4, #56]
1018:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2243              		.loc 1 1018 0
 2244 00b4 0120     		movs	r0, #1
 2245 00b6 84F83400 		strb	r0, [r4, #52]
1019:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2246              		.loc 1 1019 0
 2247 00ba 11E0     		b	.L146
 2248              	.LVL261:
 2249              	.L152:
1023:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 2250              		.loc 1 1023 0
 2251 00bc 4FF0FF33 		mov	r3, #-1
 2252 00c0 0093     		str	r3, [sp]
1024:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 2253              		.loc 1 1024 0
 2254 00c2 0197     		str	r7, [sp, #4]
ARM GAS  /tmp/ccps07Ev.s 			page 98


1025:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 2255              		.loc 1 1025 0
 2256 00c4 9023     		movs	r3, #144
 2257 00c6 0293     		str	r3, [sp, #8]
1026:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 2258              		.loc 1 1026 0
 2259 00c8 0025     		movs	r5, #0
 2260              	.LVL262:
 2261 00ca 0395     		str	r5, [sp, #12]
1027:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
 2262              		.loc 1 1027 0
 2263 00cc 0495     		str	r5, [sp, #16]
1028:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
 2264              		.loc 1 1028 0
 2265 00ce 0123     		movs	r3, #1
 2266 00d0 0593     		str	r3, [sp, #20]
1029:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2267              		.loc 1 1029 0
 2268 00d2 6946     		mov	r1, sp
 2269 00d4 2068     		ldr	r0, [r4]
 2270              	.LVL263:
 2271 00d6 FFF7FEFF 		bl	SDMMC_ConfigData
 2272              	.LVL264:
1031:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2273              		.loc 1 1031 0
 2274 00da 2846     		mov	r0, r5
 2275 00dc 00E0     		b	.L146
 2276              	.LVL265:
 2277              	.L153:
1035:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2278              		.loc 1 1035 0
 2279 00de 0220     		movs	r0, #2
 2280              	.LVL266:
 2281              	.L146:
1037:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 2282              		.loc 1 1037 0
 2283 00e0 07B0     		add	sp, sp, #28
 2284              	.LCFI34:
 2285              		.cfi_def_cfa_offset 20
 2286              		@ sp needed
 2287 00e2 F0BD     		pop	{r4, r5, r6, r7, pc}
 2288              		.cfi_endproc
 2289              	.LFE144:
 2291              		.section	.text.HAL_SD_ReadBlocks_DMA,"ax",%progbits
 2292              		.align	2
 2293              		.global	HAL_SD_ReadBlocks_DMA
 2294              		.thumb
 2295              		.thumb_func
 2297              	HAL_SD_ReadBlocks_DMA:
 2298              	.LFB145:
1053:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 2299              		.loc 1 1053 0
 2300              		.cfi_startproc
 2301              		@ args = 0, pretend = 0, frame = 24
 2302              		@ frame_needed = 0, uses_anonymous_args = 0
 2303              	.LVL267:
 2304 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccps07Ev.s 			page 99


 2305              	.LCFI35:
 2306              		.cfi_def_cfa_offset 20
 2307              		.cfi_offset 4, -20
 2308              		.cfi_offset 5, -16
 2309              		.cfi_offset 6, -12
 2310              		.cfi_offset 7, -8
 2311              		.cfi_offset 14, -4
 2312 0002 87B0     		sub	sp, sp, #28
 2313              	.LCFI36:
 2314              		.cfi_def_cfa_offset 48
 2315 0004 0446     		mov	r4, r0
 2316              	.LVL268:
1057:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 2317              		.loc 1 1057 0
 2318 0006 29B9     		cbnz	r1, .L156
1059:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 2319              		.loc 1 1059 0
 2320 0008 836B     		ldr	r3, [r0, #56]
 2321              	.LVL269:
 2322 000a 43F00063 		orr	r3, r3, #134217728
 2323 000e 8363     		str	r3, [r0, #56]
1060:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2324              		.loc 1 1060 0
 2325 0010 0120     		movs	r0, #1
 2326              	.LVL270:
 2327 0012 75E0     		b	.L157
 2328              	.LVL271:
 2329              	.L156:
 2330 0014 1546     		mov	r5, r2
 2331 0016 1E46     		mov	r6, r3
 2332 0018 0A46     		mov	r2, r1
 2333              	.LVL272:
1063:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 2334              		.loc 1 1063 0
 2335 001a 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 2336              	.LVL273:
 2337 001e DBB2     		uxtb	r3, r3
 2338 0020 012B     		cmp	r3, #1
 2339 0022 6AD1     		bne	.L163
1065:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2340              		.loc 1 1065 0
 2341 0024 0023     		movs	r3, #0
 2342 0026 8363     		str	r3, [r0, #56]
1067:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2343              		.loc 1 1067 0
 2344 0028 AB19     		adds	r3, r5, r6
 2345 002a C16D     		ldr	r1, [r0, #92]
 2346              	.LVL274:
 2347 002c 8B42     		cmp	r3, r1
 2348 002e 05D9     		bls	.L158
1069:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2349              		.loc 1 1069 0
 2350 0030 836B     		ldr	r3, [r0, #56]
 2351 0032 43F00073 		orr	r3, r3, #33554432
 2352 0036 8363     		str	r3, [r0, #56]
1070:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2353              		.loc 1 1070 0
ARM GAS  /tmp/ccps07Ev.s 			page 100


 2354 0038 0120     		movs	r0, #1
 2355              	.LVL275:
 2356 003a 61E0     		b	.L157
 2357              	.LVL276:
 2358              	.L158:
1073:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2359              		.loc 1 1073 0
 2360 003c 0323     		movs	r3, #3
 2361 003e 80F83430 		strb	r3, [r0, #52]
1076:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2362              		.loc 1 1076 0
 2363 0042 0368     		ldr	r3, [r0]
 2364 0044 0021     		movs	r1, #0
 2365 0046 D962     		str	r1, [r3, #44]
1078:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2366              		.loc 1 1078 0
 2367 0048 0068     		ldr	r0, [r0]
 2368              	.LVL277:
 2369 004a C36B     		ldr	r3, [r0, #60]
 2370 004c 43F49573 		orr	r3, r3, #298
 2371 0050 C363     		str	r3, [r0, #60]
1081:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2372              		.loc 1 1081 0
 2373 0052 E36B     		ldr	r3, [r4, #60]
 2374 0054 2B48     		ldr	r0, .L166
 2375 0056 D863     		str	r0, [r3, #60]
1084:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2376              		.loc 1 1084 0
 2377 0058 E36B     		ldr	r3, [r4, #60]
 2378 005a 2B48     		ldr	r0, .L166+4
 2379 005c D864     		str	r0, [r3, #76]
1087:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2380              		.loc 1 1087 0
 2381 005e E36B     		ldr	r3, [r4, #60]
 2382 0060 1965     		str	r1, [r3, #80]
1090:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2383              		.loc 1 1090 0
 2384 0062 2168     		ldr	r1, [r4]
 2385 0064 7702     		lsls	r7, r6, #9
 2386 0066 BB08     		lsrs	r3, r7, #2
 2387 0068 8031     		adds	r1, r1, #128
 2388 006a E06B     		ldr	r0, [r4, #60]
 2389 006c FFF7FEFF 		bl	HAL_DMA_Start_IT
 2390              	.LVL278:
1093:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2391              		.loc 1 1093 0
 2392 0070 2268     		ldr	r2, [r4]
 2393 0072 D36A     		ldr	r3, [r2, #44]
 2394 0074 43F00803 		orr	r3, r3, #8
 2395 0078 D362     		str	r3, [r2, #44]
1095:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2396              		.loc 1 1095 0
 2397 007a 636C     		ldr	r3, [r4, #68]
 2398 007c 012B     		cmp	r3, #1
 2399 007e 00D0     		beq	.L159
1097:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2400              		.loc 1 1097 0
ARM GAS  /tmp/ccps07Ev.s 			page 101


 2401 0080 6D02     		lsls	r5, r5, #9
 2402              	.LVL279:
 2403              	.L159:
1101:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 2404              		.loc 1 1101 0
 2405 0082 4FF0FF33 		mov	r3, #-1
 2406 0086 0093     		str	r3, [sp]
1102:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 2407              		.loc 1 1102 0
 2408 0088 0197     		str	r7, [sp, #4]
1103:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 2409              		.loc 1 1103 0
 2410 008a 9023     		movs	r3, #144
 2411 008c 0293     		str	r3, [sp, #8]
1104:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 2412              		.loc 1 1104 0
 2413 008e 0223     		movs	r3, #2
 2414 0090 0393     		str	r3, [sp, #12]
1105:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
 2415              		.loc 1 1105 0
 2416 0092 0023     		movs	r3, #0
 2417 0094 0493     		str	r3, [sp, #16]
1106:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
 2418              		.loc 1 1106 0
 2419 0096 0123     		movs	r3, #1
 2420 0098 0593     		str	r3, [sp, #20]
1107:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 2421              		.loc 1 1107 0
 2422 009a 6946     		mov	r1, sp
 2423 009c 2068     		ldr	r0, [r4]
 2424 009e FFF7FEFF 		bl	SDMMC_ConfigData
 2425              	.LVL280:
1110:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 2426              		.loc 1 1110 0
 2427 00a2 4FF40071 		mov	r1, #512
 2428 00a6 2068     		ldr	r0, [r4]
 2429 00a8 FFF7FEFF 		bl	SDMMC_CmdBlockLength
 2430              	.LVL281:
1111:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2431              		.loc 1 1111 0
 2432 00ac 50B1     		cbz	r0, .L160
1114:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 2433              		.loc 1 1114 0
 2434 00ae 2368     		ldr	r3, [r4]
 2435 00b0 40F2FF51 		movw	r1, #1535
 2436 00b4 9963     		str	r1, [r3, #56]
1115:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 2437              		.loc 1 1115 0
 2438 00b6 A36B     		ldr	r3, [r4, #56]
 2439 00b8 0343     		orrs	r3, r3, r0
 2440 00ba A363     		str	r3, [r4, #56]
1116:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2441              		.loc 1 1116 0
 2442 00bc 0120     		movs	r0, #1
 2443              	.LVL282:
 2444 00be 84F83400 		strb	r0, [r4, #52]
1117:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
ARM GAS  /tmp/ccps07Ev.s 			page 102


 2445              		.loc 1 1117 0
 2446 00c2 1DE0     		b	.L157
 2447              	.LVL283:
 2448              	.L160:
1121:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2449              		.loc 1 1121 0
 2450 00c4 012E     		cmp	r6, #1
 2451 00c6 06D9     		bls	.L161
1123:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 2452              		.loc 1 1123 0
 2453 00c8 8223     		movs	r3, #130
 2454 00ca 2363     		str	r3, [r4, #48]
1126:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2455              		.loc 1 1126 0
 2456 00cc 2946     		mov	r1, r5
 2457 00ce 2068     		ldr	r0, [r4]
 2458              	.LVL284:
 2459 00d0 FFF7FEFF 		bl	SDMMC_CmdReadMultiBlock
 2460              	.LVL285:
 2461 00d4 05E0     		b	.L162
 2462              	.L161:
1130:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 2463              		.loc 1 1130 0
 2464 00d6 8123     		movs	r3, #129
 2465 00d8 2363     		str	r3, [r4, #48]
1133:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2466              		.loc 1 1133 0
 2467 00da 2946     		mov	r1, r5
 2468 00dc 2068     		ldr	r0, [r4]
 2469              	.LVL286:
 2470 00de FFF7FEFF 		bl	SDMMC_CmdReadSingleBlock
 2471              	.LVL287:
 2472              	.L162:
1135:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2473              		.loc 1 1135 0
 2474 00e2 60B1     		cbz	r0, .L164
1138:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 2475              		.loc 1 1138 0
 2476 00e4 2368     		ldr	r3, [r4]
 2477 00e6 40F2FF52 		movw	r2, #1535
 2478 00ea 9A63     		str	r2, [r3, #56]
1139:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 2479              		.loc 1 1139 0
 2480 00ec A36B     		ldr	r3, [r4, #56]
 2481 00ee 1843     		orrs	r0, r0, r3
 2482              	.LVL288:
 2483 00f0 A063     		str	r0, [r4, #56]
1140:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2484              		.loc 1 1140 0
 2485 00f2 0120     		movs	r0, #1
 2486 00f4 84F83400 		strb	r0, [r4, #52]
1141:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2487              		.loc 1 1141 0
 2488 00f8 02E0     		b	.L157
 2489              	.LVL289:
 2490              	.L163:
1148:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
ARM GAS  /tmp/ccps07Ev.s 			page 103


 2491              		.loc 1 1148 0
 2492 00fa 0220     		movs	r0, #2
 2493              	.LVL290:
 2494 00fc 00E0     		b	.L157
 2495              	.LVL291:
 2496              	.L164:
1144:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2497              		.loc 1 1144 0
 2498 00fe 0020     		movs	r0, #0
 2499              	.LVL292:
 2500              	.L157:
1150:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 2501              		.loc 1 1150 0
 2502 0100 07B0     		add	sp, sp, #28
 2503              	.LCFI37:
 2504              		.cfi_def_cfa_offset 20
 2505              		@ sp needed
 2506 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 2507              	.LVL293:
 2508              	.L167:
 2509              		.align	2
 2510              	.L166:
 2511 0104 00000000 		.word	SD_DMAReceiveCplt
 2512 0108 00000000 		.word	SD_DMAError
 2513              		.cfi_endproc
 2514              	.LFE145:
 2516              		.section	.text.HAL_SD_WriteBlocks_DMA,"ax",%progbits
 2517              		.align	2
 2518              		.global	HAL_SD_WriteBlocks_DMA
 2519              		.thumb
 2520              		.thumb_func
 2522              	HAL_SD_WriteBlocks_DMA:
 2523              	.LFB146:
1166:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_DataInitTypeDef config;
 2524              		.loc 1 1166 0
 2525              		.cfi_startproc
 2526              		@ args = 0, pretend = 0, frame = 24
 2527              		@ frame_needed = 0, uses_anonymous_args = 0
 2528              	.LVL294:
 2529 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2530              	.LCFI38:
 2531              		.cfi_def_cfa_offset 20
 2532              		.cfi_offset 4, -20
 2533              		.cfi_offset 5, -16
 2534              		.cfi_offset 6, -12
 2535              		.cfi_offset 7, -8
 2536              		.cfi_offset 14, -4
 2537 0002 87B0     		sub	sp, sp, #28
 2538              	.LCFI39:
 2539              		.cfi_def_cfa_offset 48
 2540 0004 0446     		mov	r4, r0
 2541              	.LVL295:
1170:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 2542              		.loc 1 1170 0
 2543 0006 29B9     		cbnz	r1, .L169
1172:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 2544              		.loc 1 1172 0
ARM GAS  /tmp/ccps07Ev.s 			page 104


 2545 0008 836B     		ldr	r3, [r0, #56]
 2546              	.LVL296:
 2547 000a 43F00063 		orr	r3, r3, #134217728
 2548 000e 8363     		str	r3, [r0, #56]
1173:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2549              		.loc 1 1173 0
 2550 0010 0120     		movs	r0, #1
 2551              	.LVL297:
 2552 0012 76E0     		b	.L170
 2553              	.LVL298:
 2554              	.L169:
 2555 0014 1546     		mov	r5, r2
 2556 0016 1E46     		mov	r6, r3
 2557 0018 0F46     		mov	r7, r1
1176:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 2558              		.loc 1 1176 0
 2559 001a 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 2560              	.LVL299:
 2561 001e DBB2     		uxtb	r3, r3
 2562 0020 012B     		cmp	r3, #1
 2563 0022 6DD1     		bne	.L177
1178:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2564              		.loc 1 1178 0
 2565 0024 0023     		movs	r3, #0
 2566 0026 8363     		str	r3, [r0, #56]
1180:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2567              		.loc 1 1180 0
 2568 0028 9319     		adds	r3, r2, r6
 2569 002a C26D     		ldr	r2, [r0, #92]
 2570              	.LVL300:
 2571 002c 9342     		cmp	r3, r2
 2572 002e 05D9     		bls	.L171
1182:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2573              		.loc 1 1182 0
 2574 0030 836B     		ldr	r3, [r0, #56]
 2575 0032 43F00073 		orr	r3, r3, #33554432
 2576 0036 8363     		str	r3, [r0, #56]
1183:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2577              		.loc 1 1183 0
 2578 0038 0120     		movs	r0, #1
 2579              	.LVL301:
 2580 003a 62E0     		b	.L170
 2581              	.LVL302:
 2582              	.L171:
1186:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2583              		.loc 1 1186 0
 2584 003c 0323     		movs	r3, #3
 2585 003e 80F83430 		strb	r3, [r0, #52]
1189:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2586              		.loc 1 1189 0
 2587 0042 0368     		ldr	r3, [r0]
 2588 0044 0022     		movs	r2, #0
 2589 0046 DA62     		str	r2, [r3, #44]
1192:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2590              		.loc 1 1192 0
 2591 0048 0168     		ldr	r1, [r0]
 2592              	.LVL303:
ARM GAS  /tmp/ccps07Ev.s 			page 105


 2593 004a CB6B     		ldr	r3, [r1, #60]
 2594 004c 43F01A03 		orr	r3, r3, #26
 2595 0050 CB63     		str	r3, [r1, #60]
1195:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2596              		.loc 1 1195 0
 2597 0052 036C     		ldr	r3, [r0, #64]
 2598 0054 2C49     		ldr	r1, .L179
 2599 0056 D963     		str	r1, [r3, #60]
1198:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2600              		.loc 1 1198 0
 2601 0058 036C     		ldr	r3, [r0, #64]
 2602 005a 2C49     		ldr	r1, .L179+4
 2603 005c D964     		str	r1, [r3, #76]
1201:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2604              		.loc 1 1201 0
 2605 005e 036C     		ldr	r3, [r0, #64]
 2606 0060 1A65     		str	r2, [r3, #80]
1203:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2607              		.loc 1 1203 0
 2608 0062 436C     		ldr	r3, [r0, #68]
 2609 0064 012B     		cmp	r3, #1
 2610 0066 00D0     		beq	.L172
1205:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2611              		.loc 1 1205 0
 2612 0068 6D02     		lsls	r5, r5, #9
 2613              	.LVL304:
 2614              	.L172:
1209:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 2615              		.loc 1 1209 0
 2616 006a 4FF40071 		mov	r1, #512
 2617 006e 2068     		ldr	r0, [r4]
 2618              	.LVL305:
 2619 0070 FFF7FEFF 		bl	SDMMC_CmdBlockLength
 2620              	.LVL306:
1210:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2621              		.loc 1 1210 0
 2622 0074 0346     		mov	r3, r0
 2623 0076 50B1     		cbz	r0, .L173
1213:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 2624              		.loc 1 1213 0
 2625 0078 2268     		ldr	r2, [r4]
 2626 007a 40F2FF51 		movw	r1, #1535
 2627 007e 9163     		str	r1, [r2, #56]
1214:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 2628              		.loc 1 1214 0
 2629 0080 A06B     		ldr	r0, [r4, #56]
 2630              	.LVL307:
 2631 0082 1843     		orrs	r0, r0, r3
 2632 0084 A063     		str	r0, [r4, #56]
1215:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2633              		.loc 1 1215 0
 2634 0086 0120     		movs	r0, #1
 2635 0088 84F83400 		strb	r0, [r4, #52]
1216:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2636              		.loc 1 1216 0
 2637 008c 39E0     		b	.L170
 2638              	.LVL308:
ARM GAS  /tmp/ccps07Ev.s 			page 106


 2639              	.L173:
1220:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2640              		.loc 1 1220 0
 2641 008e 012E     		cmp	r6, #1
 2642 0090 06D9     		bls	.L174
1222:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 2643              		.loc 1 1222 0
 2644 0092 A023     		movs	r3, #160
 2645 0094 2363     		str	r3, [r4, #48]
1225:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2646              		.loc 1 1225 0
 2647 0096 2946     		mov	r1, r5
 2648 0098 2068     		ldr	r0, [r4]
 2649              	.LVL309:
 2650 009a FFF7FEFF 		bl	SDMMC_CmdWriteMultiBlock
 2651              	.LVL310:
 2652 009e 05E0     		b	.L175
 2653              	.L174:
1229:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 2654              		.loc 1 1229 0
 2655 00a0 9023     		movs	r3, #144
 2656 00a2 2363     		str	r3, [r4, #48]
1232:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2657              		.loc 1 1232 0
 2658 00a4 2946     		mov	r1, r5
 2659 00a6 2068     		ldr	r0, [r4]
 2660              	.LVL311:
 2661 00a8 FFF7FEFF 		bl	SDMMC_CmdWriteSingleBlock
 2662              	.LVL312:
 2663              	.L175:
1234:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2664              		.loc 1 1234 0
 2665 00ac 50B1     		cbz	r0, .L176
1237:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 2666              		.loc 1 1237 0
 2667 00ae 2368     		ldr	r3, [r4]
 2668 00b0 40F2FF52 		movw	r2, #1535
 2669 00b4 9A63     		str	r2, [r3, #56]
1238:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 2670              		.loc 1 1238 0
 2671 00b6 A36B     		ldr	r3, [r4, #56]
 2672 00b8 1843     		orrs	r0, r0, r3
 2673              	.LVL313:
 2674 00ba A063     		str	r0, [r4, #56]
1239:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2675              		.loc 1 1239 0
 2676 00bc 0120     		movs	r0, #1
 2677 00be 84F83400 		strb	r0, [r4, #52]
1240:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2678              		.loc 1 1240 0
 2679 00c2 1EE0     		b	.L170
 2680              	.LVL314:
 2681              	.L176:
1244:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2682              		.loc 1 1244 0
 2683 00c4 2268     		ldr	r2, [r4]
 2684 00c6 D36A     		ldr	r3, [r2, #44]
ARM GAS  /tmp/ccps07Ev.s 			page 107


 2685 00c8 43F00803 		orr	r3, r3, #8
 2686 00cc D362     		str	r3, [r2, #44]
1247:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2687              		.loc 1 1247 0
 2688 00ce 2268     		ldr	r2, [r4]
 2689 00d0 7602     		lsls	r6, r6, #9
 2690              	.LVL315:
 2691 00d2 B308     		lsrs	r3, r6, #2
 2692 00d4 8032     		adds	r2, r2, #128
 2693 00d6 3946     		mov	r1, r7
 2694 00d8 206C     		ldr	r0, [r4, #64]
 2695              	.LVL316:
 2696 00da FFF7FEFF 		bl	HAL_DMA_Start_IT
 2697              	.LVL317:
1250:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 2698              		.loc 1 1250 0
 2699 00de 4FF0FF33 		mov	r3, #-1
 2700 00e2 0093     		str	r3, [sp]
1251:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 2701              		.loc 1 1251 0
 2702 00e4 0196     		str	r6, [sp, #4]
1252:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 2703              		.loc 1 1252 0
 2704 00e6 9023     		movs	r3, #144
 2705 00e8 0293     		str	r3, [sp, #8]
1253:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 2706              		.loc 1 1253 0
 2707 00ea 0025     		movs	r5, #0
 2708              	.LVL318:
 2709 00ec 0395     		str	r5, [sp, #12]
1254:HALLIB/Src/stm32f7xx_hal_sd.c ****     config.DPSM          = SDMMC_DPSM_ENABLE;
 2710              		.loc 1 1254 0
 2711 00ee 0495     		str	r5, [sp, #16]
1255:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_ConfigData(hsd->Instance, &config);
 2712              		.loc 1 1255 0
 2713 00f0 0123     		movs	r3, #1
 2714 00f2 0593     		str	r3, [sp, #20]
1256:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2715              		.loc 1 1256 0
 2716 00f4 6946     		mov	r1, sp
 2717 00f6 2068     		ldr	r0, [r4]
 2718 00f8 FFF7FEFF 		bl	SDMMC_ConfigData
 2719              	.LVL319:
1258:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2720              		.loc 1 1258 0
 2721 00fc 2846     		mov	r0, r5
 2722 00fe 00E0     		b	.L170
 2723              	.LVL320:
 2724              	.L177:
1262:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2725              		.loc 1 1262 0
 2726 0100 0220     		movs	r0, #2
 2727              	.LVL321:
 2728              	.L170:
1264:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 2729              		.loc 1 1264 0
 2730 0102 07B0     		add	sp, sp, #28
ARM GAS  /tmp/ccps07Ev.s 			page 108


 2731              	.LCFI40:
 2732              		.cfi_def_cfa_offset 20
 2733              		@ sp needed
 2734 0104 F0BD     		pop	{r4, r5, r6, r7, pc}
 2735              	.LVL322:
 2736              	.L180:
 2737 0106 00BF     		.align	2
 2738              	.L179:
 2739 0108 00000000 		.word	SD_DMATransmitCplt
 2740 010c 00000000 		.word	SD_DMAError
 2741              		.cfi_endproc
 2742              	.LFE146:
 2744              		.section	.text.HAL_SD_Erase,"ax",%progbits
 2745              		.align	2
 2746              		.global	HAL_SD_Erase
 2747              		.thumb
 2748              		.thumb_func
 2750              	HAL_SD_Erase:
 2751              	.LFB147:
1276:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 2752              		.loc 1 1276 0
 2753              		.cfi_startproc
 2754              		@ args = 0, pretend = 0, frame = 0
 2755              		@ frame_needed = 0, uses_anonymous_args = 0
 2756              	.LVL323:
1279:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 2757              		.loc 1 1279 0
 2758 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 2759 0004 DBB2     		uxtb	r3, r3
 2760 0006 012B     		cmp	r3, #1
 2761 0008 78D1     		bne	.L191
1276:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 2762              		.loc 1 1276 0
 2763 000a 70B5     		push	{r4, r5, r6, lr}
 2764              	.LCFI41:
 2765              		.cfi_def_cfa_offset 16
 2766              		.cfi_offset 4, -16
 2767              		.cfi_offset 5, -12
 2768              		.cfi_offset 6, -8
 2769              		.cfi_offset 14, -4
 2770 000c 0446     		mov	r4, r0
 2771 000e 0E46     		mov	r6, r1
 2772 0010 1546     		mov	r5, r2
1281:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2773              		.loc 1 1281 0
 2774 0012 0023     		movs	r3, #0
 2775 0014 8363     		str	r3, [r0, #56]
1283:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2776              		.loc 1 1283 0
 2777 0016 8A42     		cmp	r2, r1
 2778 0018 05D2     		bcs	.L183
1285:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2779              		.loc 1 1285 0
 2780 001a 836B     		ldr	r3, [r0, #56]
 2781 001c 43F00063 		orr	r3, r3, #134217728
 2782 0020 8363     		str	r3, [r0, #56]
1286:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
ARM GAS  /tmp/ccps07Ev.s 			page 109


 2783              		.loc 1 1286 0
 2784 0022 0120     		movs	r0, #1
 2785              	.LVL324:
 2786 0024 70BD     		pop	{r4, r5, r6, pc}
 2787              	.LVL325:
 2788              	.L183:
1289:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2789              		.loc 1 1289 0
 2790 0026 C36D     		ldr	r3, [r0, #92]
 2791 0028 9A42     		cmp	r2, r3
 2792 002a 05D9     		bls	.L184
1291:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2793              		.loc 1 1291 0
 2794 002c 836B     		ldr	r3, [r0, #56]
 2795 002e 43F00073 		orr	r3, r3, #33554432
 2796 0032 8363     		str	r3, [r0, #56]
1292:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2797              		.loc 1 1292 0
 2798 0034 0120     		movs	r0, #1
 2799              	.LVL326:
 2800 0036 70BD     		pop	{r4, r5, r6, pc}
 2801              	.LVL327:
 2802              	.L184:
1295:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2803              		.loc 1 1295 0
 2804 0038 0323     		movs	r3, #3
 2805 003a 80F83430 		strb	r3, [r0, #52]
1298:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2806              		.loc 1 1298 0
 2807 003e C36C     		ldr	r3, [r0, #76]
 2808 0040 13F0200F 		tst	r3, #32
 2809 0044 0BD1     		bne	.L185
1301:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 2810              		.loc 1 1301 0
 2811 0046 0368     		ldr	r3, [r0]
 2812 0048 40F2FF52 		movw	r2, #1535
 2813              	.LVL328:
 2814 004c 9A63     		str	r2, [r3, #56]
1302:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 2815              		.loc 1 1302 0
 2816 004e 836B     		ldr	r3, [r0, #56]
 2817 0050 43F08063 		orr	r3, r3, #67108864
 2818 0054 8363     		str	r3, [r0, #56]
1303:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2819              		.loc 1 1303 0
 2820 0056 0120     		movs	r0, #1
 2821              	.LVL329:
 2822 0058 84F83400 		strb	r0, [r4, #52]
1304:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2823              		.loc 1 1304 0
 2824 005c 70BD     		pop	{r4, r5, r6, pc}
 2825              	.LVL330:
 2826              	.L185:
1307:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2827              		.loc 1 1307 0
 2828 005e 0021     		movs	r1, #0
 2829              	.LVL331:
ARM GAS  /tmp/ccps07Ev.s 			page 110


 2830 0060 0068     		ldr	r0, [r0]
 2831              	.LVL332:
 2832 0062 FFF7FEFF 		bl	SDMMC_GetResponse
 2833              	.LVL333:
 2834 0066 10F0007F 		tst	r0, #33554432
 2835 006a 0BD0     		beq	.L186
1310:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 2836              		.loc 1 1310 0
 2837 006c 2368     		ldr	r3, [r4]
 2838 006e 40F2FF52 		movw	r2, #1535
 2839 0072 9A63     		str	r2, [r3, #56]
1311:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 2840              		.loc 1 1311 0
 2841 0074 A36B     		ldr	r3, [r4, #56]
 2842 0076 43F40063 		orr	r3, r3, #2048
 2843 007a A363     		str	r3, [r4, #56]
1312:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2844              		.loc 1 1312 0
 2845 007c 0120     		movs	r0, #1
 2846 007e 84F83400 		strb	r0, [r4, #52]
1313:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2847              		.loc 1 1313 0
 2848 0082 70BD     		pop	{r4, r5, r6, pc}
 2849              	.LVL334:
 2850              	.L186:
1317:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2851              		.loc 1 1317 0
 2852 0084 636C     		ldr	r3, [r4, #68]
 2853 0086 012B     		cmp	r3, #1
 2854 0088 01D0     		beq	.L187
1319:HALLIB/Src/stm32f7xx_hal_sd.c ****       BlockEndAdd   *= 512U;
 2855              		.loc 1 1319 0
 2856 008a 7602     		lsls	r6, r6, #9
 2857              	.LVL335:
1320:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2858              		.loc 1 1320 0
 2859 008c 6D02     		lsls	r5, r5, #9
 2860              	.LVL336:
 2861              	.L187:
1324:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2862              		.loc 1 1324 0
 2863 008e 032B     		cmp	r3, #3
 2864 0090 20D0     		beq	.L188
1327:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(errorstate != HAL_SD_ERROR_NONE)
 2865              		.loc 1 1327 0
 2866 0092 3146     		mov	r1, r6
 2867 0094 2068     		ldr	r0, [r4]
 2868 0096 FFF7FEFF 		bl	SDMMC_CmdSDEraseStartAdd
 2869              	.LVL337:
1328:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 2870              		.loc 1 1328 0
 2871 009a 50B1     		cbz	r0, .L189
1331:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode |= errorstate;
 2872              		.loc 1 1331 0
 2873 009c 2368     		ldr	r3, [r4]
 2874 009e 40F2FF51 		movw	r1, #1535
 2875 00a2 9963     		str	r1, [r3, #56]
ARM GAS  /tmp/ccps07Ev.s 			page 111


1332:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State = HAL_SD_STATE_READY;
 2876              		.loc 1 1332 0
 2877 00a4 A36B     		ldr	r3, [r4, #56]
 2878 00a6 0343     		orrs	r3, r3, r0
 2879 00a8 A363     		str	r3, [r4, #56]
1333:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_ERROR;
 2880              		.loc 1 1333 0
 2881 00aa 0120     		movs	r0, #1
 2882              	.LVL338:
 2883 00ac 84F83400 		strb	r0, [r4, #52]
1334:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 2884              		.loc 1 1334 0
 2885 00b0 70BD     		pop	{r4, r5, r6, pc}
 2886              	.LVL339:
 2887              	.L189:
1338:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(errorstate != HAL_SD_ERROR_NONE)
 2888              		.loc 1 1338 0
 2889 00b2 2946     		mov	r1, r5
 2890 00b4 2068     		ldr	r0, [r4]
 2891              	.LVL340:
 2892 00b6 FFF7FEFF 		bl	SDMMC_CmdSDEraseEndAdd
 2893              	.LVL341:
1339:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 2894              		.loc 1 1339 0
 2895 00ba 0346     		mov	r3, r0
 2896 00bc 50B1     		cbz	r0, .L188
1342:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->ErrorCode |= errorstate;
 2897              		.loc 1 1342 0
 2898 00be 2268     		ldr	r2, [r4]
 2899 00c0 40F2FF51 		movw	r1, #1535
 2900 00c4 9163     		str	r1, [r2, #56]
1343:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State = HAL_SD_STATE_READY;
 2901              		.loc 1 1343 0
 2902 00c6 A26B     		ldr	r2, [r4, #56]
 2903 00c8 1343     		orrs	r3, r3, r2
 2904 00ca A363     		str	r3, [r4, #56]
1344:HALLIB/Src/stm32f7xx_hal_sd.c ****         return HAL_ERROR;
 2905              		.loc 1 1344 0
 2906 00cc 0120     		movs	r0, #1
 2907              	.LVL342:
 2908 00ce 84F83400 		strb	r0, [r4, #52]
1345:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 2909              		.loc 1 1345 0
 2910 00d2 70BD     		pop	{r4, r5, r6, pc}
 2911              	.LVL343:
 2912              	.L188:
1350:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 2913              		.loc 1 1350 0
 2914 00d4 2068     		ldr	r0, [r4]
 2915 00d6 FFF7FEFF 		bl	SDMMC_CmdErase
 2916              	.LVL344:
1351:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 2917              		.loc 1 1351 0
 2918 00da 50B1     		cbz	r0, .L190
1354:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->ErrorCode |= errorstate;
 2919              		.loc 1 1354 0
 2920 00dc 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccps07Ev.s 			page 112


 2921 00de 40F2FF51 		movw	r1, #1535
 2922 00e2 9963     		str	r1, [r3, #56]
1355:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->State = HAL_SD_STATE_READY;
 2923              		.loc 1 1355 0
 2924 00e4 A36B     		ldr	r3, [r4, #56]
 2925 00e6 0343     		orrs	r3, r3, r0
 2926 00e8 A363     		str	r3, [r4, #56]
1356:HALLIB/Src/stm32f7xx_hal_sd.c ****       return HAL_ERROR;
 2927              		.loc 1 1356 0
 2928 00ea 0120     		movs	r0, #1
 2929              	.LVL345:
 2930 00ec 84F83400 		strb	r0, [r4, #52]
1357:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 2931              		.loc 1 1357 0
 2932 00f0 70BD     		pop	{r4, r5, r6, pc}
 2933              	.LVL346:
 2934              	.L190:
1360:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 2935              		.loc 1 1360 0
 2936 00f2 0123     		movs	r3, #1
 2937 00f4 84F83430 		strb	r3, [r4, #52]
1362:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2938              		.loc 1 1362 0
 2939 00f8 0020     		movs	r0, #0
 2940              	.LVL347:
 2941 00fa 70BD     		pop	{r4, r5, r6, pc}
 2942              	.LVL348:
 2943              	.L191:
 2944              	.LCFI42:
 2945              		.cfi_def_cfa_offset 0
 2946              		.cfi_restore 4
 2947              		.cfi_restore 5
 2948              		.cfi_restore 6
 2949              		.cfi_restore 14
1366:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 2950              		.loc 1 1366 0
 2951 00fc 0220     		movs	r0, #2
 2952              	.LVL349:
 2953 00fe 7047     		bx	lr
 2954              		.cfi_endproc
 2955              	.LFE147:
 2957              		.section	.text.HAL_SD_GetState,"ax",%progbits
 2958              		.align	2
 2959              		.global	HAL_SD_GetState
 2960              		.thumb
 2961              		.thumb_func
 2963              	HAL_SD_GetState:
 2964              	.LFB149:
1522:HALLIB/Src/stm32f7xx_hal_sd.c ****   return hsd->State;
 2965              		.loc 1 1522 0
 2966              		.cfi_startproc
 2967              		@ args = 0, pretend = 0, frame = 0
 2968              		@ frame_needed = 0, uses_anonymous_args = 0
 2969              		@ link register save eliminated.
 2970              	.LVL350:
1523:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 2971              		.loc 1 1523 0
ARM GAS  /tmp/ccps07Ev.s 			page 113


 2972 0000 90F83400 		ldrb	r0, [r0, #52]	@ zero_extendqisi2
 2973              	.LVL351:
1524:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 2974              		.loc 1 1524 0
 2975 0004 7047     		bx	lr
 2976              		.cfi_endproc
 2977              	.LFE149:
 2979 0006 00BF     		.section	.text.HAL_SD_GetError,"ax",%progbits
 2980              		.align	2
 2981              		.global	HAL_SD_GetError
 2982              		.thumb
 2983              		.thumb_func
 2985              	HAL_SD_GetError:
 2986              	.LFB150:
1533:HALLIB/Src/stm32f7xx_hal_sd.c ****   return hsd->ErrorCode;
 2987              		.loc 1 1533 0
 2988              		.cfi_startproc
 2989              		@ args = 0, pretend = 0, frame = 0
 2990              		@ frame_needed = 0, uses_anonymous_args = 0
 2991              		@ link register save eliminated.
 2992              	.LVL352:
1534:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 2993              		.loc 1 1534 0
 2994 0000 806B     		ldr	r0, [r0, #56]
 2995              	.LVL353:
1535:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 2996              		.loc 1 1535 0
 2997 0002 7047     		bx	lr
 2998              		.cfi_endproc
 2999              	.LFE150:
 3001              		.section	.text.HAL_SD_TxCpltCallback,"ax",%progbits
 3002              		.align	2
 3003              		.weak	HAL_SD_TxCpltCallback
 3004              		.thumb
 3005              		.thumb_func
 3007              	HAL_SD_TxCpltCallback:
 3008              	.LFB151:
1543:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
 3009              		.loc 1 1543 0
 3010              		.cfi_startproc
 3011              		@ args = 0, pretend = 0, frame = 0
 3012              		@ frame_needed = 0, uses_anonymous_args = 0
 3013              		@ link register save eliminated.
 3014              	.LVL354:
 3015 0000 7047     		bx	lr
 3016              		.cfi_endproc
 3017              	.LFE151:
 3019 0002 00BF     		.section	.text.HAL_SD_RxCpltCallback,"ax",%progbits
 3020              		.align	2
 3021              		.weak	HAL_SD_RxCpltCallback
 3022              		.thumb
 3023              		.thumb_func
 3025              	HAL_SD_RxCpltCallback:
 3026              	.LFB152:
1558:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
 3027              		.loc 1 1558 0
 3028              		.cfi_startproc
ARM GAS  /tmp/ccps07Ev.s 			page 114


 3029              		@ args = 0, pretend = 0, frame = 0
 3030              		@ frame_needed = 0, uses_anonymous_args = 0
 3031              		@ link register save eliminated.
 3032              	.LVL355:
 3033 0000 7047     		bx	lr
 3034              		.cfi_endproc
 3035              	.LFE152:
 3037 0002 00BF     		.section	.text.HAL_SD_ErrorCallback,"ax",%progbits
 3038              		.align	2
 3039              		.weak	HAL_SD_ErrorCallback
 3040              		.thumb
 3041              		.thumb_func
 3043              	HAL_SD_ErrorCallback:
 3044              	.LFB153:
1573:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
 3045              		.loc 1 1573 0
 3046              		.cfi_startproc
 3047              		@ args = 0, pretend = 0, frame = 0
 3048              		@ frame_needed = 0, uses_anonymous_args = 0
 3049              		@ link register save eliminated.
 3050              	.LVL356:
 3051 0000 7047     		bx	lr
 3052              		.cfi_endproc
 3053              	.LFE153:
 3055 0002 00BF     		.section	.text.SD_DMAReceiveCplt,"ax",%progbits
 3056              		.align	2
 3057              		.thumb
 3058              		.thumb_func
 3060              	SD_DMAReceiveCplt:
 3061              	.LFB164:
2198:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 3062              		.loc 1 2198 0
 3063              		.cfi_startproc
 3064              		@ args = 0, pretend = 0, frame = 0
 3065              		@ frame_needed = 0, uses_anonymous_args = 0
 3066              	.LVL357:
2198:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 3067              		.loc 1 2198 0
 3068 0000 10B5     		push	{r4, lr}
 3069              	.LCFI43:
 3070              		.cfi_def_cfa_offset 8
 3071              		.cfi_offset 4, -8
 3072              		.cfi_offset 14, -4
2199:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 3073              		.loc 1 2199 0
 3074 0002 846B     		ldr	r4, [r0, #56]
 3075              	.LVL358:
2203:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3076              		.loc 1 2203 0
 3077 0004 236B     		ldr	r3, [r4, #48]
 3078 0006 822B     		cmp	r3, #130
 3079 0008 0AD1     		bne	.L200
2205:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 3080              		.loc 1 2205 0
 3081 000a 2068     		ldr	r0, [r4]
 3082              	.LVL359:
 3083 000c FFF7FEFF 		bl	SDMMC_CmdStopTransfer
ARM GAS  /tmp/ccps07Ev.s 			page 115


 3084              	.LVL360:
2206:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 3085              		.loc 1 2206 0
 3086 0010 0346     		mov	r3, r0
 3087 0012 28B1     		cbz	r0, .L200
2208:HALLIB/Src/stm32f7xx_hal_sd.c ****       HAL_SD_ErrorCallback(hsd);
 3088              		.loc 1 2208 0
 3089 0014 A06B     		ldr	r0, [r4, #56]
 3090              	.LVL361:
 3091 0016 1843     		orrs	r0, r0, r3
 3092 0018 A063     		str	r0, [r4, #56]
2209:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 3093              		.loc 1 2209 0
 3094 001a 2046     		mov	r0, r4
 3095 001c FFF7FEFF 		bl	HAL_SD_ErrorCallback
 3096              	.LVL362:
 3097              	.L200:
2215:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3098              		.loc 1 2215 0
 3099 0020 2268     		ldr	r2, [r4]
 3100 0022 D36A     		ldr	r3, [r2, #44]
 3101 0024 23F00803 		bic	r3, r3, #8
 3102 0028 D362     		str	r3, [r2, #44]
2218:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3103              		.loc 1 2218 0
 3104 002a 2368     		ldr	r3, [r4]
 3105 002c 40F2FF52 		movw	r2, #1535
 3106 0030 9A63     		str	r2, [r3, #56]
2220:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3107              		.loc 1 2220 0
 3108 0032 0123     		movs	r3, #1
 3109 0034 84F83430 		strb	r3, [r4, #52]
2222:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 3110              		.loc 1 2222 0
 3111 0038 2046     		mov	r0, r4
 3112 003a FFF7FEFF 		bl	HAL_SD_RxCpltCallback
 3113              	.LVL363:
 3114 003e 10BD     		pop	{r4, pc}
 3115              		.cfi_endproc
 3116              	.LFE164:
 3118              		.section	.text.HAL_SD_AbortCallback,"ax",%progbits
 3119              		.align	2
 3120              		.weak	HAL_SD_AbortCallback
 3121              		.thumb
 3122              		.thumb_func
 3124              	HAL_SD_AbortCallback:
 3125              	.LFB154:
1588:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Prevent unused argument(s) compilation warning */
 3126              		.loc 1 1588 0
 3127              		.cfi_startproc
 3128              		@ args = 0, pretend = 0, frame = 0
 3129              		@ frame_needed = 0, uses_anonymous_args = 0
 3130              		@ link register save eliminated.
 3131              	.LVL364:
 3132 0000 7047     		bx	lr
 3133              		.cfi_endproc
 3134              	.LFE154:
ARM GAS  /tmp/ccps07Ev.s 			page 116


 3136 0002 00BF     		.section	.text.HAL_SD_GetCardCID,"ax",%progbits
 3137              		.align	2
 3138              		.global	HAL_SD_GetCardCID
 3139              		.thumb
 3140              		.thumb_func
 3142              	HAL_SD_GetCardCID:
 3143              	.LFB155:
1626:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tmp = 0;
 3144              		.loc 1 1626 0
 3145              		.cfi_startproc
 3146              		@ args = 0, pretend = 0, frame = 0
 3147              		@ frame_needed = 0, uses_anonymous_args = 0
 3148              		@ link register save eliminated.
 3149              	.LVL365:
1626:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tmp = 0;
 3150              		.loc 1 1626 0
 3151 0000 10B4     		push	{r4}
 3152              	.LCFI44:
 3153              		.cfi_def_cfa_offset 4
 3154              		.cfi_offset 4, -4
 3155              	.LVL366:
1631:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3156              		.loc 1 1631 0
 3157 0002 90F87730 		ldrb	r3, [r0, #119]	@ zero_extendqisi2
 3158              	.LVL367:
 3159 0006 0B70     		strb	r3, [r1]
 3160              	.LVL368:
1635:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3161              		.loc 1 1635 0
 3162 0008 90F87630 		ldrb	r3, [r0, #118]	@ zero_extendqisi2
 3163 000c 1B02     		lsls	r3, r3, #8
 3164 000e 4B80     		strh	r3, [r1, #2]	@ movhi
 3165              	.LVL369:
1639:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3166              		.loc 1 1639 0
 3167 0010 4B88     		ldrh	r3, [r1, #2]
 3168 0012 9AB2     		uxth	r2, r3
 3169 0014 90F87530 		ldrb	r3, [r0, #117]	@ zero_extendqisi2
 3170 0018 1343     		orrs	r3, r3, r2
 3171 001a 4B80     		strh	r3, [r1, #2]	@ movhi
 3172              	.LVL370:
1642:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdName1 = tmp << 24;
 3173              		.loc 1 1642 0
 3174 001c 436F     		ldr	r3, [r0, #116]
 3175              	.LVL371:
 3176 001e 1B06     		lsls	r3, r3, #24
 3177              	.LVL372:
1643:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3178              		.loc 1 1643 0
 3179 0020 4B60     		str	r3, [r1, #4]
 3180              	.LVL373:
1646:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdName1 |= tmp << 16;
 3181              		.loc 1 1646 0
 3182 0022 90F87B20 		ldrb	r2, [r0, #123]	@ zero_extendqisi2
 3183              	.LVL374:
1647:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3184              		.loc 1 1647 0
ARM GAS  /tmp/ccps07Ev.s 			page 117


 3185 0026 4B68     		ldr	r3, [r1, #4]
 3186 0028 43EA0243 		orr	r3, r3, r2, lsl #16
 3187 002c 4B60     		str	r3, [r1, #4]
1650:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdName1 |= tmp << 8;
 3188              		.loc 1 1650 0
 3189 002e B0F87A30 		ldrh	r3, [r0, #122]
 3190              	.LVL375:
1651:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3191              		.loc 1 1651 0
 3192 0032 4A68     		ldr	r2, [r1, #4]
 3193 0034 1B02     		lsls	r3, r3, #8
 3194              	.LVL376:
 3195 0036 03F47F43 		and	r3, r3, #65280
 3196 003a 1343     		orrs	r3, r3, r2
 3197 003c 4B60     		str	r3, [r1, #4]
 3198              	.LVL377:
1655:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3199              		.loc 1 1655 0
 3200 003e 4B68     		ldr	r3, [r1, #4]
 3201 0040 90F87920 		ldrb	r2, [r0, #121]	@ zero_extendqisi2
 3202 0044 1343     		orrs	r3, r3, r2
 3203 0046 4B60     		str	r3, [r1, #4]
 3204              	.LVL378:
1659:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3205              		.loc 1 1659 0
 3206 0048 90F87830 		ldrb	r3, [r0, #120]	@ zero_extendqisi2
 3207 004c 0B72     		strb	r3, [r1, #8]
 3208              	.LVL379:
1663:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3209              		.loc 1 1663 0
 3210 004e 90F87F30 		ldrb	r3, [r0, #127]	@ zero_extendqisi2
 3211              	.LVL380:
 3212 0052 4B72     		strb	r3, [r1, #9]
1666:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdSN = tmp << 24;
 3213              		.loc 1 1666 0
 3214 0054 B0F87E30 		ldrh	r3, [r0, #126]
 3215              	.LVL381:
 3216 0058 1B06     		lsls	r3, r3, #24
 3217              	.LVL382:
1667:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3218              		.loc 1 1667 0
 3219 005a CB60     		str	r3, [r1, #12]
 3220              	.LVL383:
1670:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdSN |= tmp << 16;
 3221              		.loc 1 1670 0
 3222 005c C36F     		ldr	r3, [r0, #124]
 3223 005e 1B0A     		lsrs	r3, r3, #8
 3224              	.LVL384:
1671:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3225              		.loc 1 1671 0
 3226 0060 CA68     		ldr	r2, [r1, #12]
 3227 0062 1B04     		lsls	r3, r3, #16
 3228              	.LVL385:
 3229 0064 03F47F03 		and	r3, r3, #16711680
 3230 0068 1343     		orrs	r3, r3, r2
 3231 006a CB60     		str	r3, [r1, #12]
 3232              	.LVL386:
ARM GAS  /tmp/ccps07Ev.s 			page 118


1674:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdSN |= tmp << 8;
 3233              		.loc 1 1674 0
 3234 006c C36F     		ldr	r3, [r0, #124]
 3235              	.LVL387:
1675:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3236              		.loc 1 1675 0
 3237 006e CA68     		ldr	r2, [r1, #12]
 3238 0070 1B02     		lsls	r3, r3, #8
 3239              	.LVL388:
 3240 0072 03F47F43 		and	r3, r3, #65280
 3241 0076 1343     		orrs	r3, r3, r2
 3242 0078 CB60     		str	r3, [r1, #12]
 3243              	.LVL389:
1678:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ProdSN |= tmp;
 3244              		.loc 1 1678 0
 3245 007a 90F88320 		ldrb	r2, [r0, #131]	@ zero_extendqisi2
 3246              	.LVL390:
1679:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3247              		.loc 1 1679 0
 3248 007e CB68     		ldr	r3, [r1, #12]
 3249 0080 1343     		orrs	r3, r3, r2
 3250 0082 CB60     		str	r3, [r1, #12]
1682:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->Reserved1   |= (tmp & 0xF0) >> 4;
 3251              		.loc 1 1682 0
 3252 0084 D0F88030 		ldr	r3, [r0, #128]
 3253              	.LVL391:
1683:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->ManufactDate = (tmp & 0x0F) << 8;
 3254              		.loc 1 1683 0
 3255 0088 0C7C     		ldrb	r4, [r1, #16]	@ zero_extendqisi2
 3256 008a C3F30352 		ubfx	r2, r3, #20, #4
 3257 008e 2243     		orrs	r2, r2, r4
 3258 0090 0A74     		strb	r2, [r1, #16]
1684:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3259              		.loc 1 1684 0
 3260 0092 C3F30743 		ubfx	r3, r3, #16, #8
 3261              	.LVL392:
 3262 0096 1B02     		lsls	r3, r3, #8
 3263 0098 03F47063 		and	r3, r3, #3840
 3264 009c 4B82     		strh	r3, [r1, #18]	@ movhi
 3265              	.LVL393:
1688:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3266              		.loc 1 1688 0
 3267 009e 4B8A     		ldrh	r3, [r1, #18]
 3268 00a0 9AB2     		uxth	r2, r3
 3269 00a2 90F88130 		ldrb	r3, [r0, #129]	@ zero_extendqisi2
 3270 00a6 1343     		orrs	r3, r3, r2
 3271 00a8 4B82     		strh	r3, [r1, #18]	@ movhi
 3272              	.LVL394:
1691:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->CID_CRC   = (tmp & 0xFE) >> 1;
 3273              		.loc 1 1691 0
 3274 00aa D0F88030 		ldr	r3, [r0, #128]
 3275              	.LVL395:
1692:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCID->Reserved2 = 1;
 3276              		.loc 1 1692 0
 3277 00ae C3F34603 		ubfx	r3, r3, #1, #7
 3278              	.LVL396:
 3279 00b2 0B75     		strb	r3, [r1, #20]
ARM GAS  /tmp/ccps07Ev.s 			page 119


 3280              	.LVL397:
1693:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3281              		.loc 1 1693 0
 3282 00b4 0123     		movs	r3, #1
 3283 00b6 4B75     		strb	r3, [r1, #21]
1696:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3284              		.loc 1 1696 0
 3285 00b8 0020     		movs	r0, #0
 3286              	.LVL398:
 3287 00ba 5DF8044B 		ldr	r4, [sp], #4
 3288              	.LCFI45:
 3289              		.cfi_restore 4
 3290              		.cfi_def_cfa_offset 0
 3291 00be 7047     		bx	lr
 3292              		.cfi_endproc
 3293              	.LFE155:
 3295              		.section	.text.HAL_SD_GetCardCSD,"ax",%progbits
 3296              		.align	2
 3297              		.global	HAL_SD_GetCardCSD
 3298              		.thumb
 3299              		.thumb_func
 3301              	HAL_SD_GetCardCSD:
 3302              	.LFB156:
1707:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tmp = 0;
 3303              		.loc 1 1707 0
 3304              		.cfi_startproc
 3305              		@ args = 0, pretend = 0, frame = 0
 3306              		@ frame_needed = 0, uses_anonymous_args = 0
 3307              		@ link register save eliminated.
 3308              	.LVL399:
 3309 0000 70B4     		push	{r4, r5, r6}
 3310              	.LCFI46:
 3311              		.cfi_def_cfa_offset 12
 3312              		.cfi_offset 4, -12
 3313              		.cfi_offset 5, -8
 3314              		.cfi_offset 6, -4
 3315              	.LVL400:
1711:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 3316              		.loc 1 1711 0
 3317 0002 436E     		ldr	r3, [r0, #100]
 3318              	.LVL401:
1712:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 3319              		.loc 1 1712 0
 3320 0004 9A0F     		lsrs	r2, r3, #30
 3321 0006 0A70     		strb	r2, [r1]
1713:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->Reserved1      = tmp & 0x03;
 3322              		.loc 1 1713 0
 3323 0008 C3F38362 		ubfx	r2, r3, #26, #4
 3324 000c 4A70     		strb	r2, [r1, #1]
1714:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3325              		.loc 1 1714 0
 3326 000e C3F30163 		ubfx	r3, r3, #24, #2
 3327              	.LVL402:
 3328 0012 8B70     		strb	r3, [r1, #2]
 3329              	.LVL403:
1718:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3330              		.loc 1 1718 0
ARM GAS  /tmp/ccps07Ev.s 			page 120


 3331 0014 90F86630 		ldrb	r3, [r0, #102]	@ zero_extendqisi2
 3332 0018 CB70     		strb	r3, [r1, #3]
 3333              	.LVL404:
1722:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3334              		.loc 1 1722 0
 3335 001a 90F86530 		ldrb	r3, [r0, #101]	@ zero_extendqisi2
 3336 001e 0B71     		strb	r3, [r1, #4]
 3337              	.LVL405:
1726:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3338              		.loc 1 1726 0
 3339 0020 90F86430 		ldrb	r3, [r0, #100]	@ zero_extendqisi2
 3340 0024 4B71     		strb	r3, [r1, #5]
 3341              	.LVL406:
1729:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 3342              		.loc 1 1729 0
 3343 0026 90F86B30 		ldrb	r3, [r0, #107]	@ zero_extendqisi2
 3344              	.LVL407:
1730:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3345              		.loc 1 1730 0
 3346 002a 1B01     		lsls	r3, r3, #4
 3347              	.LVL408:
 3348 002c CB80     		strh	r3, [r1, #6]	@ movhi
 3349              	.LVL409:
1733:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 3350              		.loc 1 1733 0
 3351 002e B0F86A30 		ldrh	r3, [r0, #106]
 3352              	.LVL410:
1734:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 3353              		.loc 1 1734 0
 3354 0032 CA88     		ldrh	r2, [r1, #6]
 3355 0034 94B2     		uxth	r4, r2
 3356 0036 C3F30312 		ubfx	r2, r3, #4, #4
 3357 003a 2243     		orrs	r2, r2, r4
 3358 003c CA80     		strh	r2, [r1, #6]	@ movhi
1735:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3359              		.loc 1 1735 0
 3360 003e 03F00F03 		and	r3, r3, #15
 3361              	.LVL411:
 3362 0042 0B72     		strb	r3, [r1, #8]
1738:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 3363              		.loc 1 1738 0
 3364 0044 90F86930 		ldrb	r3, [r0, #105]	@ zero_extendqisi2
 3365              	.LVL412:
1739:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 3366              		.loc 1 1739 0
 3367 0048 DA09     		lsrs	r2, r3, #7
 3368 004a 4A72     		strb	r2, [r1, #9]
1740:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 3369              		.loc 1 1740 0
 3370 004c C3F38012 		ubfx	r2, r3, #6, #1
 3371 0050 8A72     		strb	r2, [r1, #10]
1741:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 3372              		.loc 1 1741 0
 3373 0052 C3F34012 		ubfx	r2, r3, #5, #1
 3374 0056 CA72     		strb	r2, [r1, #11]
1742:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->Reserved2       = 0; /*!< Reserved */
 3375              		.loc 1 1742 0
ARM GAS  /tmp/ccps07Ev.s 			page 121


 3376 0058 C3F30012 		ubfx	r2, r3, #4, #1
 3377 005c 0A73     		strb	r2, [r1, #12]
1743:HALLIB/Src/stm32f7xx_hal_sd.c ****        
 3378              		.loc 1 1743 0
 3379 005e 0022     		movs	r2, #0
 3380 0060 4A73     		strb	r2, [r1, #13]
1745:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3381              		.loc 1 1745 0
 3382 0062 426C     		ldr	r2, [r0, #68]
 3383 0064 002A     		cmp	r2, #0
 3384 0066 41D1     		bne	.L206
1747:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 3385              		.loc 1 1747 0
 3386 0068 9B02     		lsls	r3, r3, #10
 3387              	.LVL413:
 3388 006a 03F44063 		and	r3, r3, #3072
 3389 006e 0B61     		str	r3, [r1, #16]
1750:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSize |= (tmp) << 2;
 3390              		.loc 1 1750 0
 3391 0070 836E     		ldr	r3, [r0, #104]
 3392              	.LVL414:
1751:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 3393              		.loc 1 1751 0
 3394 0072 0A69     		ldr	r2, [r1, #16]
 3395 0074 9B00     		lsls	r3, r3, #2
 3396              	.LVL415:
 3397 0076 03F47F73 		and	r3, r3, #1020
 3398 007a 1343     		orrs	r3, r3, r2
 3399 007c 0B61     		str	r3, [r1, #16]
 3400              	.LVL416:
1754:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 3401              		.loc 1 1754 0
 3402 007e C36E     		ldr	r3, [r0, #108]
 3403              	.LVL417:
1755:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 3404              		.loc 1 1755 0
 3405 0080 0A69     		ldr	r2, [r1, #16]
 3406 0082 42EA9372 		orr	r2, r2, r3, lsr #30
 3407 0086 0A61     		str	r2, [r1, #16]
1757:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 3408              		.loc 1 1757 0
 3409 0088 C3F3C262 		ubfx	r2, r3, #27, #3
 3410 008c 0A75     		strb	r2, [r1, #20]
1758:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 3411              		.loc 1 1758 0
 3412 008e C3F30263 		ubfx	r3, r3, #24, #3
 3413              	.LVL418:
 3414 0092 4B75     		strb	r3, [r1, #21]
1761:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 3415              		.loc 1 1761 0
 3416 0094 C26E     		ldr	r2, [r0, #108]
 3417 0096 130C     		lsrs	r3, r2, #16
 3418              	.LVL419:
1762:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 3419              		.loc 1 1762 0
 3420 0098 C2F34254 		ubfx	r4, r2, #21, #3
 3421 009c 8C75     		strb	r4, [r1, #22]
ARM GAS  /tmp/ccps07Ev.s 			page 122


1763:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 3422              		.loc 1 1763 0
 3423 009e C2F38242 		ubfx	r2, r2, #18, #3
 3424 00a2 CA75     		strb	r2, [r1, #23]
1764:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Byte 10 */
 3425              		.loc 1 1764 0
 3426 00a4 5B00     		lsls	r3, r3, #1
 3427              	.LVL420:
 3428 00a6 03F00603 		and	r3, r3, #6
 3429 00aa 0B76     		strb	r3, [r1, #24]
1766:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 3430              		.loc 1 1766 0
 3431 00ac C36E     		ldr	r3, [r0, #108]
 3432 00ae C3F30724 		ubfx	r4, r3, #8, #8
 3433              	.LVL421:
1767:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 3434              		.loc 1 1767 0
 3435 00b2 0A7E     		ldrb	r2, [r1, #24]	@ zero_extendqisi2
 3436 00b4 C3F3C033 		ubfx	r3, r3, #15, #1
 3437 00b8 1343     		orrs	r3, r3, r2
 3438 00ba 0B76     		strb	r3, [r1, #24]
1769:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 3439              		.loc 1 1769 0
 3440 00bc 0D69     		ldr	r5, [r1, #16]
 3441 00be 6E1C     		adds	r6, r5, #1
 3442 00c0 4665     		str	r6, [r0, #84]
1770:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 3443              		.loc 1 1770 0
 3444 00c2 0B7E     		ldrb	r3, [r1, #24]	@ zero_extendqisi2
 3445 00c4 0233     		adds	r3, r3, #2
 3446 00c6 0122     		movs	r2, #1
 3447 00c8 02FA03F3 		lsl	r3, r2, r3
 3448 00cc 06FB03F5 		mul	r5, r6, r3
 3449 00d0 4565     		str	r5, [r0, #84]
1771:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3450              		.loc 1 1771 0
 3451 00d2 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 3452 00d4 DBB2     		uxtb	r3, r3
 3453 00d6 02FA03F3 		lsl	r3, r2, r3
 3454 00da 8365     		str	r3, [r0, #88]
1773:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.LogBlockSize = 512;
 3455              		.loc 1 1773 0
 3456 00dc 5B0A     		lsrs	r3, r3, #9
 3457 00de 03FB05F3 		mul	r3, r3, r5
 3458 00e2 C365     		str	r3, [r0, #92]
1774:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 3459              		.loc 1 1774 0
 3460 00e4 4FF40073 		mov	r3, #512
 3461 00e8 0366     		str	r3, [r0, #96]
 3462 00ea 2AE0     		b	.L207
 3463              	.LVL422:
 3464              	.L206:
1776:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3465              		.loc 1 1776 0
 3466 00ec 012A     		cmp	r2, #1
 3467 00ee 1BD1     		bne	.L208
1779:HALLIB/Src/stm32f7xx_hal_sd.c ****     pCSD->DeviceSize = (tmp & 0x3F) << 16;
ARM GAS  /tmp/ccps07Ev.s 			page 123


 3468              		.loc 1 1779 0
 3469 00f0 836E     		ldr	r3, [r0, #104]
 3470              	.LVL423:
1780:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 3471              		.loc 1 1780 0
 3472 00f2 1B04     		lsls	r3, r3, #16
 3473              	.LVL424:
 3474 00f4 03F47C13 		and	r3, r3, #4128768
 3475 00f8 0B61     		str	r3, [r1, #16]
 3476              	.LVL425:
1783:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 3477              		.loc 1 1783 0
 3478 00fa 90F86F20 		ldrb	r2, [r0, #111]	@ zero_extendqisi2
 3479              	.LVL426:
1785:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 3480              		.loc 1 1785 0
 3481 00fe 0B69     		ldr	r3, [r1, #16]
 3482 0100 43EA0223 		orr	r3, r3, r2, lsl #8
 3483 0104 0B61     		str	r3, [r1, #16]
 3484              	.LVL427:
1790:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 3485              		.loc 1 1790 0
 3486 0106 0B69     		ldr	r3, [r1, #16]
 3487 0108 90F86E20 		ldrb	r2, [r0, #110]	@ zero_extendqisi2
 3488 010c 1343     		orrs	r3, r3, r2
 3489 010e 0B61     		str	r3, [r1, #16]
 3490              	.LVL428:
 3491 0110 90F86D40 		ldrb	r4, [r0, #109]	@ zero_extendqisi2
 3492              	.LVL429:
1795:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 3493              		.loc 1 1795 0
 3494 0114 0A69     		ldr	r2, [r1, #16]
 3495 0116 0132     		adds	r2, r2, #1
 3496 0118 9202     		lsls	r2, r2, #10
 3497 011a 4265     		str	r2, [r0, #84]
 3498 011c C265     		str	r2, [r0, #92]
1796:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 3499              		.loc 1 1796 0
 3500 011e 4FF40073 		mov	r3, #512
 3501 0122 8365     		str	r3, [r0, #88]
 3502 0124 0366     		str	r3, [r0, #96]
 3503 0126 0CE0     		b	.L207
 3504              	.LVL430:
 3505              	.L208:
1801:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 3506              		.loc 1 1801 0
 3507 0128 0368     		ldr	r3, [r0]
 3508              	.LVL431:
 3509 012a 40F2FF52 		movw	r2, #1535
 3510 012e 9A63     		str	r2, [r3, #56]
1802:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
 3511              		.loc 1 1802 0
 3512 0130 836B     		ldr	r3, [r0, #56]
 3513 0132 43F08053 		orr	r3, r3, #268435456
 3514 0136 8363     		str	r3, [r0, #56]
1803:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 3515              		.loc 1 1803 0
ARM GAS  /tmp/ccps07Ev.s 			page 124


 3516 0138 0122     		movs	r2, #1
 3517 013a 80F83420 		strb	r2, [r0, #52]
1804:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 3518              		.loc 1 1804 0
 3519 013e 1046     		mov	r0, r2
 3520              	.LVL432:
 3521 0140 50E0     		b	.L209
 3522              	.LVL433:
 3523              	.L207:
1807:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 3524              		.loc 1 1807 0
 3525 0142 C4F38013 		ubfx	r3, r4, #6, #1
 3526 0146 4B76     		strb	r3, [r1, #25]
1808:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3527              		.loc 1 1808 0
 3528 0148 6400     		lsls	r4, r4, #1
 3529              	.LVL434:
 3530 014a 04F07E04 		and	r4, r4, #126
 3531 014e 8C76     		strb	r4, [r1, #26]
1811:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 3532              		.loc 1 1811 0
 3533 0150 C36E     		ldr	r3, [r0, #108]
 3534              	.LVL435:
1812:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->WrProtectGrSize = (tmp & 0x7F);
 3535              		.loc 1 1812 0
 3536 0152 8C7E     		ldrb	r4, [r1, #26]	@ zero_extendqisi2
 3537 0154 C3F3C012 		ubfx	r2, r3, #7, #1
 3538 0158 2243     		orrs	r2, r2, r4
 3539 015a 8A76     		strb	r2, [r1, #26]
1813:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3540              		.loc 1 1813 0
 3541 015c 03F07F03 		and	r3, r3, #127
 3542              	.LVL436:
 3543 0160 CB76     		strb	r3, [r1, #27]
1816:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 3544              		.loc 1 1816 0
 3545 0162 036F     		ldr	r3, [r0, #112]
 3546 0164 1A0E     		lsrs	r2, r3, #24
 3547              	.LVL437:
1817:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 3548              		.loc 1 1817 0
 3549 0166 DC0F     		lsrs	r4, r3, #31
 3550 0168 0C77     		strb	r4, [r1, #28]
1818:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 3551              		.loc 1 1818 0
 3552 016a C3F34174 		ubfx	r4, r3, #29, #2
 3553 016e 4C77     		strb	r4, [r1, #29]
1819:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 3554              		.loc 1 1819 0
 3555 0170 C3F38263 		ubfx	r3, r3, #26, #3
 3556 0174 8B77     		strb	r3, [r1, #30]
1820:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3557              		.loc 1 1820 0
 3558 0176 9300     		lsls	r3, r2, #2
 3559 0178 03F00C03 		and	r3, r3, #12
 3560 017c CB77     		strb	r3, [r1, #31]
1823:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
ARM GAS  /tmp/ccps07Ev.s 			page 125


 3561              		.loc 1 1823 0
 3562 017e 036F     		ldr	r3, [r0, #112]
 3563              	.LVL438:
1824:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 3564              		.loc 1 1824 0
 3565 0180 CC7F     		ldrb	r4, [r1, #31]	@ zero_extendqisi2
 3566 0182 C3F38152 		ubfx	r2, r3, #22, #2
 3567 0186 2243     		orrs	r2, r2, r4
 3568 0188 CA77     		strb	r2, [r1, #31]
1825:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->Reserved3           = 0;
 3569              		.loc 1 1825 0
 3570 018a C3F34052 		ubfx	r2, r3, #21, #1
 3571 018e 81F82020 		strb	r2, [r1, #32]
1826:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->ContentProtectAppli = (tmp & 0x01);
 3572              		.loc 1 1826 0
 3573 0192 0022     		movs	r2, #0
 3574 0194 81F82120 		strb	r2, [r1, #33]
1827:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3575              		.loc 1 1827 0
 3576 0198 C3F30043 		ubfx	r3, r3, #16, #1
 3577              	.LVL439:
 3578 019c 81F82230 		strb	r3, [r1, #34]
1830:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 3579              		.loc 1 1830 0
 3580 01a0 036F     		ldr	r3, [r0, #112]
 3581              	.LVL440:
1831:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 3582              		.loc 1 1831 0
 3583 01a2 C3F3C034 		ubfx	r4, r3, #15, #1
 3584 01a6 81F82340 		strb	r4, [r1, #35]
1832:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 3585              		.loc 1 1832 0
 3586 01aa C3F38034 		ubfx	r4, r3, #14, #1
 3587 01ae 81F82440 		strb	r4, [r1, #36]
1833:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 3588              		.loc 1 1833 0
 3589 01b2 C3F34034 		ubfx	r4, r3, #13, #1
 3590 01b6 81F82540 		strb	r4, [r1, #37]
1834:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 3591              		.loc 1 1834 0
 3592 01ba C3F30034 		ubfx	r4, r3, #12, #1
 3593 01be 81F82640 		strb	r4, [r1, #38]
1835:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->ECC              = (tmp & 0x03);
 3594              		.loc 1 1835 0
 3595 01c2 C3F38124 		ubfx	r4, r3, #10, #2
 3596 01c6 81F82740 		strb	r4, [r1, #39]
1836:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3597              		.loc 1 1836 0
 3598 01ca C3F30123 		ubfx	r3, r3, #8, #2
 3599              	.LVL441:
 3600 01ce 81F82830 		strb	r3, [r1, #40]
1839:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 3601              		.loc 1 1839 0
 3602 01d2 036F     		ldr	r3, [r0, #112]
 3603              	.LVL442:
1840:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCSD->Reserved4 = 1;
 3604              		.loc 1 1840 0
ARM GAS  /tmp/ccps07Ev.s 			page 126


 3605 01d4 C3F34603 		ubfx	r3, r3, #1, #7
 3606              	.LVL443:
 3607 01d8 81F82930 		strb	r3, [r1, #41]
 3608              	.LVL444:
1841:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3609              		.loc 1 1841 0
 3610 01dc 0123     		movs	r3, #1
 3611 01de 81F82A30 		strb	r3, [r1, #42]
1843:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 3612              		.loc 1 1843 0
 3613 01e2 1046     		mov	r0, r2
 3614              	.LVL445:
 3615              	.L209:
1844:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3616              		.loc 1 1844 0
 3617 01e4 70BC     		pop	{r4, r5, r6}
 3618              	.LCFI47:
 3619              		.cfi_restore 6
 3620              		.cfi_restore 5
 3621              		.cfi_restore 4
 3622              		.cfi_def_cfa_offset 0
 3623 01e6 7047     		bx	lr
 3624              		.cfi_endproc
 3625              	.LFE156:
 3627              		.section	.text.SD_InitCard,"ax",%progbits
 3628              		.align	2
 3629              		.thumb
 3630              		.thumb_func
 3632              	SD_InitCard:
 3633              	.LFB168:
2341:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardCSDTypeDef CSD;
 3634              		.loc 1 2341 0
 3635              		.cfi_startproc
 3636              		@ args = 0, pretend = 0, frame = 48
 3637              		@ frame_needed = 0, uses_anonymous_args = 0
 3638              	.LVL446:
 3639 0000 30B5     		push	{r4, r5, lr}
 3640              	.LCFI48:
 3641              		.cfi_def_cfa_offset 12
 3642              		.cfi_offset 4, -12
 3643              		.cfi_offset 5, -8
 3644              		.cfi_offset 14, -4
 3645 0002 91B0     		sub	sp, sp, #68
 3646              	.LCFI49:
 3647              		.cfi_def_cfa_offset 80
 3648 0004 0446     		mov	r4, r0
 3649              	.LVL447:
2344:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3650              		.loc 1 2344 0
 3651 0006 0123     		movs	r3, #1
 3652 0008 ADF81230 		strh	r3, [sp, #18]	@ movhi
2347:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3653              		.loc 1 2347 0
 3654 000c 0068     		ldr	r0, [r0]
 3655              	.LVL448:
 3656 000e FFF7FEFF 		bl	SDMMC_GetPowerState
 3657              	.LVL449:
ARM GAS  /tmp/ccps07Ev.s 			page 127


 3658 0012 0028     		cmp	r0, #0
 3659 0014 66D0     		beq	.L216
2353:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3660              		.loc 1 2353 0
 3661 0016 636C     		ldr	r3, [r4, #68]
 3662 0018 032B     		cmp	r3, #3
 3663 001a 19D0     		beq	.L213
2356:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 3664              		.loc 1 2356 0
 3665 001c 2068     		ldr	r0, [r4]
 3666 001e FFF7FEFF 		bl	SDMMC_CmdSendCID
 3667              	.LVL450:
2357:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 3668              		.loc 1 2357 0
 3669 0022 0028     		cmp	r0, #0
 3670 0024 61D1     		bne	.L217
2364:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 3671              		.loc 1 2364 0
 3672 0026 0021     		movs	r1, #0
 3673 0028 2068     		ldr	r0, [r4]
 3674              	.LVL451:
 3675 002a FFF7FEFF 		bl	SDMMC_GetResponse
 3676              	.LVL452:
 3677 002e 6067     		str	r0, [r4, #116]
2365:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 3678              		.loc 1 2365 0
 3679 0030 0421     		movs	r1, #4
 3680 0032 2068     		ldr	r0, [r4]
 3681 0034 FFF7FEFF 		bl	SDMMC_GetResponse
 3682              	.LVL453:
 3683 0038 A067     		str	r0, [r4, #120]
2366:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 3684              		.loc 1 2366 0
 3685 003a 0821     		movs	r1, #8
 3686 003c 2068     		ldr	r0, [r4]
 3687 003e FFF7FEFF 		bl	SDMMC_GetResponse
 3688              	.LVL454:
 3689 0042 E067     		str	r0, [r4, #124]
2367:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 3690              		.loc 1 2367 0
 3691 0044 0C21     		movs	r1, #12
 3692 0046 2068     		ldr	r0, [r4]
 3693 0048 FFF7FEFF 		bl	SDMMC_GetResponse
 3694              	.LVL455:
 3695 004c C4F88000 		str	r0, [r4, #128]
 3696              	.L213:
2371:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3697              		.loc 1 2371 0
 3698 0050 636C     		ldr	r3, [r4, #68]
 3699 0052 032B     		cmp	r3, #3
 3700 0054 06D0     		beq	.L214
2375:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 3701              		.loc 1 2375 0
 3702 0056 0DF11201 		add	r1, sp, #18
 3703 005a 2068     		ldr	r0, [r4]
 3704 005c FFF7FEFF 		bl	SDMMC_CmdSetRelAdd
 3705              	.LVL456:
ARM GAS  /tmp/ccps07Ev.s 			page 128


2376:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 3706              		.loc 1 2376 0
 3707 0060 0028     		cmp	r0, #0
 3708 0062 43D1     		bne	.L218
 3709              	.LVL457:
 3710              	.L214:
2381:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3711              		.loc 1 2381 0
 3712 0064 636C     		ldr	r3, [r4, #68]
 3713 0066 032B     		cmp	r3, #3
 3714 0068 1CD0     		beq	.L215
2384:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 3715              		.loc 1 2384 0
 3716 006a BDF81210 		ldrh	r1, [sp, #18]
 3717 006e 2165     		str	r1, [r4, #80]
2387:HALLIB/Src/stm32f7xx_hal_sd.c ****     if(errorstate != HAL_SD_ERROR_NONE)
 3718              		.loc 1 2387 0
 3719 0070 0904     		lsls	r1, r1, #16
 3720 0072 2068     		ldr	r0, [r4]
 3721 0074 FFF7FEFF 		bl	SDMMC_CmdSendCSD
 3722              	.LVL458:
2388:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 3723              		.loc 1 2388 0
 3724 0078 0028     		cmp	r0, #0
 3725 007a 38D1     		bne	.L219
2395:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 3726              		.loc 1 2395 0
 3727 007c 0021     		movs	r1, #0
 3728 007e 2068     		ldr	r0, [r4]
 3729              	.LVL459:
 3730 0080 FFF7FEFF 		bl	SDMMC_GetResponse
 3731              	.LVL460:
 3732 0084 6066     		str	r0, [r4, #100]
2396:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 3733              		.loc 1 2396 0
 3734 0086 0421     		movs	r1, #4
 3735 0088 2068     		ldr	r0, [r4]
 3736 008a FFF7FEFF 		bl	SDMMC_GetResponse
 3737              	.LVL461:
 3738 008e A066     		str	r0, [r4, #104]
2397:HALLIB/Src/stm32f7xx_hal_sd.c ****       hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 3739              		.loc 1 2397 0
 3740 0090 0821     		movs	r1, #8
 3741 0092 2068     		ldr	r0, [r4]
 3742 0094 FFF7FEFF 		bl	SDMMC_GetResponse
 3743              	.LVL462:
 3744 0098 E066     		str	r0, [r4, #108]
2398:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 3745              		.loc 1 2398 0
 3746 009a 0C21     		movs	r1, #12
 3747 009c 2068     		ldr	r0, [r4]
 3748 009e FFF7FEFF 		bl	SDMMC_GetResponse
 3749              	.LVL463:
 3750 00a2 2067     		str	r0, [r4, #112]
 3751              	.L215:
2403:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3752              		.loc 1 2403 0
ARM GAS  /tmp/ccps07Ev.s 			page 129


 3753 00a4 0421     		movs	r1, #4
 3754 00a6 2068     		ldr	r0, [r4]
 3755 00a8 FFF7FEFF 		bl	SDMMC_GetResponse
 3756              	.LVL464:
 3757 00ac 000D     		lsrs	r0, r0, #20
 3758 00ae E064     		str	r0, [r4, #76]
2406:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3759              		.loc 1 2406 0
 3760 00b0 05A9     		add	r1, sp, #20
 3761 00b2 2046     		mov	r0, r4
 3762 00b4 FFF7FEFF 		bl	HAL_SD_GetCardCSD
 3763              	.LVL465:
2409:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
 3764              		.loc 1 2409 0
 3765 00b8 226D     		ldr	r2, [r4, #80]
 3766 00ba 1204     		lsls	r2, r2, #16
 3767 00bc 0023     		movs	r3, #0
 3768 00be 2068     		ldr	r0, [r4]
 3769 00c0 FFF7FEFF 		bl	SDMMC_CmdSelDesel
 3770              	.LVL466:
2410:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3771              		.loc 1 2410 0
 3772 00c4 A0B9     		cbnz	r0, .L220
2416:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3773              		.loc 1 2416 0
 3774 00c6 2346     		mov	r3, r4
 3775 00c8 53F8105B 		ldr	r5, [r3], #16
 3776 00cc 93E80700 		ldmia	r3, {r0, r1, r2}
 3777              	.LVL467:
 3778 00d0 8DE80700 		stmia	sp, {r0, r1, r2}
 3779 00d4 0434     		adds	r4, r4, #4
 3780              	.LVL468:
 3781 00d6 94E80E00 		ldmia	r4, {r1, r2, r3}
 3782 00da 2846     		mov	r0, r5
 3783 00dc FFF7FEFF 		bl	SDMMC_Init
 3784              	.LVL469:
2419:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 3785              		.loc 1 2419 0
 3786 00e0 0020     		movs	r0, #0
 3787 00e2 05E0     		b	.L212
 3788              	.LVL470:
 3789              	.L216:
2350:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 3790              		.loc 1 2350 0
 3791 00e4 4FF08060 		mov	r0, #67108864
 3792 00e8 02E0     		b	.L212
 3793              	.LVL471:
 3794              	.L217:
 3795 00ea 01E0     		b	.L212
 3796              	.L218:
 3797 00ec 00E0     		b	.L212
 3798              	.L219:
 3799 00ee FFE7     		b	.L212
 3800              	.L220:
 3801              	.LVL472:
 3802              	.L212:
2420:HALLIB/Src/stm32f7xx_hal_sd.c **** 
ARM GAS  /tmp/ccps07Ev.s 			page 130


 3803              		.loc 1 2420 0
 3804 00f0 11B0     		add	sp, sp, #68
 3805              	.LCFI50:
 3806              		.cfi_def_cfa_offset 12
 3807              		@ sp needed
 3808 00f2 30BD     		pop	{r4, r5, pc}
 3809              		.cfi_endproc
 3810              	.LFE168:
 3812              		.section	.text.HAL_SD_InitCard,"ax",%progbits
 3813              		.align	2
 3814              		.global	HAL_SD_InitCard
 3815              		.thumb
 3816              		.thumb_func
 3818              	HAL_SD_InitCard:
 3819              	.LFB137:
 351:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 3820              		.loc 1 351 0
 3821              		.cfi_startproc
 3822              		@ args = 0, pretend = 0, frame = 24
 3823              		@ frame_needed = 0, uses_anonymous_args = 0
 3824              	.LVL473:
 3825 0000 10B5     		push	{r4, lr}
 3826              	.LCFI51:
 3827              		.cfi_def_cfa_offset 8
 3828              		.cfi_offset 4, -8
 3829              		.cfi_offset 14, -4
 3830 0002 8AB0     		sub	sp, sp, #40
 3831              	.LCFI52:
 3832              		.cfi_def_cfa_offset 48
 3833 0004 0446     		mov	r4, r0
 3834              	.LVL474:
 356:HALLIB/Src/stm32f7xx_hal_sd.c ****   Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 3835              		.loc 1 356 0
 3836 0006 0023     		movs	r3, #0
 3837 0008 0493     		str	r3, [sp, #16]
 357:HALLIB/Src/stm32f7xx_hal_sd.c ****   Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 3838              		.loc 1 357 0
 3839 000a 0593     		str	r3, [sp, #20]
 358:HALLIB/Src/stm32f7xx_hal_sd.c ****   Init.BusWide             = SDMMC_BUS_WIDE_1B;
 3840              		.loc 1 358 0
 3841 000c 0693     		str	r3, [sp, #24]
 359:HALLIB/Src/stm32f7xx_hal_sd.c ****   Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 3842              		.loc 1 359 0
 3843 000e 0793     		str	r3, [sp, #28]
 360:HALLIB/Src/stm32f7xx_hal_sd.c ****   Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 3844              		.loc 1 360 0
 3845 0010 0893     		str	r3, [sp, #32]
 361:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3846              		.loc 1 361 0
 3847 0012 7623     		movs	r3, #118
 3848 0014 0993     		str	r3, [sp, #36]
 364:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3849              		.loc 1 364 0
 3850 0016 0AAB     		add	r3, sp, #40
 3851 0018 13E90700 		ldmdb	r3, {r0, r1, r2}
 3852              	.LVL475:
 3853 001c 8DE80700 		stmia	sp, {r0, r1, r2}
ARM GAS  /tmp/ccps07Ev.s 			page 131


 3854 0020 04AB     		add	r3, sp, #16
 3855 0022 0ECB     		ldmia	r3, {r1, r2, r3}
 3856 0024 2068     		ldr	r0, [r4]
 3857 0026 FFF7FEFF 		bl	SDMMC_Init
 3858              	.LVL476:
 367:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3859              		.loc 1 367 0
 3860 002a 2268     		ldr	r2, [r4]
 3861 002c 5368     		ldr	r3, [r2, #4]
 3862 002e 23F48073 		bic	r3, r3, #256
 3863 0032 5360     		str	r3, [r2, #4]
 370:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3864              		.loc 1 370 0
 3865 0034 2068     		ldr	r0, [r4]
 3866 0036 FFF7FEFF 		bl	SDMMC_PowerState_ON
 3867              	.LVL477:
 373:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3868              		.loc 1 373 0
 3869 003a 2268     		ldr	r2, [r4]
 3870 003c 5368     		ldr	r3, [r2, #4]
 3871 003e 43F48073 		orr	r3, r3, #256
 3872 0042 5360     		str	r3, [r2, #4]
 376:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3873              		.loc 1 376 0
 3874 0044 0220     		movs	r0, #2
 3875 0046 FFF7FEFF 		bl	HAL_Delay
 3876              	.LVL478:
 379:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
 3877              		.loc 1 379 0
 3878 004a 2046     		mov	r0, r4
 3879 004c FFF7FEFF 		bl	SD_PowerON
 3880              	.LVL479:
 380:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3881              		.loc 1 380 0
 3882 0050 38B1     		cbz	r0, .L223
 3883 0052 0246     		mov	r2, r0
 382:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= errorstate;
 3884              		.loc 1 382 0
 3885 0054 0120     		movs	r0, #1
 3886              	.LVL480:
 3887 0056 84F83400 		strb	r0, [r4, #52]
 383:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 3888              		.loc 1 383 0
 3889 005a A36B     		ldr	r3, [r4, #56]
 3890 005c 1343     		orrs	r3, r3, r2
 3891 005e A363     		str	r3, [r4, #56]
 384:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 3892              		.loc 1 384 0
 3893 0060 0CE0     		b	.L224
 3894              	.LVL481:
 3895              	.L223:
 388:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_SD_ERROR_NONE)
 3896              		.loc 1 388 0
 3897 0062 2046     		mov	r0, r4
 3898              	.LVL482:
 3899 0064 FFF7FEFF 		bl	SD_InitCard
 3900              	.LVL483:
ARM GAS  /tmp/ccps07Ev.s 			page 132


 389:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3901              		.loc 1 389 0
 3902 0068 0246     		mov	r2, r0
 3903 006a 30B1     		cbz	r0, .L225
 391:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= errorstate;
 3904              		.loc 1 391 0
 3905 006c 0120     		movs	r0, #1
 3906              	.LVL484:
 3907 006e 84F83400 		strb	r0, [r4, #52]
 392:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 3908              		.loc 1 392 0
 3909 0072 A36B     		ldr	r3, [r4, #56]
 3910 0074 1343     		orrs	r3, r3, r2
 3911 0076 A363     		str	r3, [r4, #56]
 393:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 3912              		.loc 1 393 0
 3913 0078 00E0     		b	.L224
 3914              	.LVL485:
 3915              	.L225:
 396:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 3916              		.loc 1 396 0
 3917 007a 0020     		movs	r0, #0
 3918              	.LVL486:
 3919              	.L224:
 397:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3920              		.loc 1 397 0
 3921 007c 0AB0     		add	sp, sp, #40
 3922              	.LCFI53:
 3923              		.cfi_def_cfa_offset 8
 3924              		@ sp needed
 3925 007e 10BD     		pop	{r4, pc}
 3926              		.cfi_endproc
 3927              	.LFE137:
 3929              		.section	.text.HAL_SD_Init,"ax",%progbits
 3930              		.align	2
 3931              		.global	HAL_SD_Init
 3932              		.thumb
 3933              		.thumb_func
 3935              	HAL_SD_Init:
 3936              	.LFB136:
 302:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check the SD handle allocation */
 3937              		.loc 1 302 0
 3938              		.cfi_startproc
 3939              		@ args = 0, pretend = 0, frame = 0
 3940              		@ frame_needed = 0, uses_anonymous_args = 0
 3941              	.LVL487:
 304:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3942              		.loc 1 304 0
 3943 0000 B8B1     		cbz	r0, .L230
 302:HALLIB/Src/stm32f7xx_hal_sd.c ****   /* Check the SD handle allocation */
 3944              		.loc 1 302 0
 3945 0002 10B5     		push	{r4, lr}
 3946              	.LCFI54:
 3947              		.cfi_def_cfa_offset 8
 3948              		.cfi_offset 4, -8
 3949              		.cfi_offset 14, -4
 3950 0004 0446     		mov	r4, r0
ARM GAS  /tmp/ccps07Ev.s 			page 133


 318:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 3951              		.loc 1 318 0
 3952 0006 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 3953 000a 13F0FF0F 		tst	r3, #255
 3954 000e 03D1     		bne	.L229
 321:HALLIB/Src/stm32f7xx_hal_sd.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 3955              		.loc 1 321 0
 3956 0010 0023     		movs	r3, #0
 3957 0012 0377     		strb	r3, [r0, #28]
 323:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 3958              		.loc 1 323 0
 3959 0014 FFF7FEFF 		bl	HAL_SD_MspInit
 3960              	.LVL488:
 3961              	.L229:
 326:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3962              		.loc 1 326 0
 3963 0018 0323     		movs	r3, #3
 3964 001a 84F83430 		strb	r3, [r4, #52]
 329:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3965              		.loc 1 329 0
 3966 001e 2046     		mov	r0, r4
 3967 0020 FFF7FEFF 		bl	HAL_SD_InitCard
 3968              	.LVL489:
 332:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 3969              		.loc 1 332 0
 3970 0024 0020     		movs	r0, #0
 3971 0026 A063     		str	r0, [r4, #56]
 335:HALLIB/Src/stm32f7xx_hal_sd.c ****                                                                                      
 3972              		.loc 1 335 0
 3973 0028 2063     		str	r0, [r4, #48]
 338:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 3974              		.loc 1 338 0
 3975 002a 0123     		movs	r3, #1
 3976 002c 84F83430 		strb	r3, [r4, #52]
 340:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 3977              		.loc 1 340 0
 3978 0030 10BD     		pop	{r4, pc}
 3979              	.LVL490:
 3980              	.L230:
 3981              	.LCFI55:
 3982              		.cfi_def_cfa_offset 0
 3983              		.cfi_restore 4
 3984              		.cfi_restore 14
 306:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 3985              		.loc 1 306 0
 3986 0032 0120     		movs	r0, #1
 3987              	.LVL491:
 3988 0034 7047     		bx	lr
 3989              		.cfi_endproc
 3990              	.LFE136:
 3992 0036 00BF     		.section	.text.HAL_SD_GetCardStatus,"ax",%progbits
 3993              		.align	2
 3994              		.global	HAL_SD_GetCardStatus
 3995              		.thumb
 3996              		.thumb_func
 3998              	HAL_SD_GetCardStatus:
 3999              	.LFB157:
ARM GAS  /tmp/ccps07Ev.s 			page 134


1854:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t tmp = 0;
 4000              		.loc 1 1854 0
 4001              		.cfi_startproc
 4002              		@ args = 0, pretend = 0, frame = 64
 4003              		@ frame_needed = 0, uses_anonymous_args = 0
 4004              	.LVL492:
 4005 0000 30B5     		push	{r4, r5, lr}
 4006              	.LCFI56:
 4007              		.cfi_def_cfa_offset 12
 4008              		.cfi_offset 4, -12
 4009              		.cfi_offset 5, -8
 4010              		.cfi_offset 14, -4
 4011 0002 91B0     		sub	sp, sp, #68
 4012              	.LCFI57:
 4013              		.cfi_def_cfa_offset 80
 4014 0004 0546     		mov	r5, r0
 4015 0006 0C46     		mov	r4, r1
 4016              	.LVL493:
1859:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
 4017              		.loc 1 1859 0
 4018 0008 6946     		mov	r1, sp
 4019              	.LVL494:
 4020 000a FFF7FEFF 		bl	SD_SendSDStatus
 4021              	.LVL495:
1860:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4022              		.loc 1 1860 0
 4023 000e 58B1     		cbz	r0, .L234
 4024 0010 0346     		mov	r3, r0
1863:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode |= errorstate;
 4025              		.loc 1 1863 0
 4026 0012 2A68     		ldr	r2, [r5]
 4027 0014 40F2FF51 		movw	r1, #1535
 4028 0018 9163     		str	r1, [r2, #56]
1864:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
 4029              		.loc 1 1864 0
 4030 001a A86B     		ldr	r0, [r5, #56]
 4031              	.LVL496:
 4032 001c 1843     		orrs	r0, r0, r3
 4033 001e A863     		str	r0, [r5, #56]
1865:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 4034              		.loc 1 1865 0
 4035 0020 0120     		movs	r0, #1
 4036 0022 85F83400 		strb	r0, [r5, #52]
1866:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4037              		.loc 1 1866 0
 4038 0026 3DE0     		b	.L235
 4039              	.LVL497:
 4040              	.L234:
1871:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->DataBusWidth = (uint8_t)tmp;
 4041              		.loc 1 1871 0
 4042 0028 009A     		ldr	r2, [sp]
 4043              	.LVL498:
1872:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4044              		.loc 1 1872 0
 4045 002a C2F38113 		ubfx	r3, r2, #6, #2
 4046              	.LVL499:
 4047 002e 2370     		strb	r3, [r4]
ARM GAS  /tmp/ccps07Ev.s 			page 135


 4048              	.LVL500:
1876:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4049              		.loc 1 1876 0
 4050 0030 C2F34013 		ubfx	r3, r2, #5, #1
 4051              	.LVL501:
 4052 0034 6370     		strb	r3, [r4, #1]
1879:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->CardType = (uint16_t)(tmp << 8);
 4053              		.loc 1 1879 0
 4054 0036 C2F30743 		ubfx	r3, r2, #16, #8
 4055              	.LVL502:
1880:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4056              		.loc 1 1880 0
 4057 003a 1B02     		lsls	r3, r3, #8
 4058              	.LVL503:
 4059 003c 6380     		strh	r3, [r4, #2]	@ movhi
 4060              	.LVL504:
1884:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4061              		.loc 1 1884 0
 4062 003e 6388     		ldrh	r3, [r4, #2]
 4063 0040 9BB2     		uxth	r3, r3
 4064 0042 43EA1263 		orr	r3, r3, r2, lsr #24
 4065 0046 6380     		strh	r3, [r4, #2]	@ movhi
1887:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->ProtectedAreaSize = (uint32_t)(tmp << 24);
 4066              		.loc 1 1887 0
 4067 0048 019A     		ldr	r2, [sp, #4]
 4068              	.LVL505:
 4069 004a 1306     		lsls	r3, r2, #24
1888:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4070              		.loc 1 1888 0
 4071 004c 6360     		str	r3, [r4, #4]
1891:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->ProtectedAreaSize |= (uint32_t)(tmp << 16);
 4072              		.loc 1 1891 0
 4073 004e 130A     		lsrs	r3, r2, #8
 4074              	.LVL506:
1892:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4075              		.loc 1 1892 0
 4076 0050 6168     		ldr	r1, [r4, #4]
 4077 0052 1B04     		lsls	r3, r3, #16
 4078              	.LVL507:
 4079 0054 03F47F03 		and	r3, r3, #16711680
 4080 0058 0B43     		orrs	r3, r3, r1
 4081 005a 6360     		str	r3, [r4, #4]
1895:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->ProtectedAreaSize |= (uint32_t)(tmp << 8);
 4082              		.loc 1 1895 0
 4083 005c 130C     		lsrs	r3, r2, #16
 4084              	.LVL508:
1896:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4085              		.loc 1 1896 0
 4086 005e 6168     		ldr	r1, [r4, #4]
 4087 0060 1B02     		lsls	r3, r3, #8
 4088              	.LVL509:
 4089 0062 03F47F43 		and	r3, r3, #65280
 4090 0066 0B43     		orrs	r3, r3, r1
 4091 0068 6360     		str	r3, [r4, #4]
 4092              	.LVL510:
1900:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4093              		.loc 1 1900 0
ARM GAS  /tmp/ccps07Ev.s 			page 136


 4094 006a 6368     		ldr	r3, [r4, #4]
 4095 006c 43EA1262 		orr	r2, r3, r2, lsr #24
 4096              	.LVL511:
 4097 0070 6260     		str	r2, [r4, #4]
1903:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->SpeedClass = (uint8_t)tmp;
 4098              		.loc 1 1903 0
 4099 0072 029B     		ldr	r3, [sp, #8]
 4100              	.LVL512:
1904:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4101              		.loc 1 1904 0
 4102 0074 DAB2     		uxtb	r2, r3
 4103 0076 2272     		strb	r2, [r4, #8]
 4104              	.LVL513:
1908:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4105              		.loc 1 1908 0
 4106 0078 C3F30722 		ubfx	r2, r3, #8, #8
 4107 007c 6272     		strb	r2, [r4, #9]
 4108              	.LVL514:
1912:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4109              		.loc 1 1912 0
 4110 007e C3F30352 		ubfx	r2, r3, #20, #4
 4111              	.LVL515:
 4112 0082 A272     		strb	r2, [r4, #10]
1915:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->EraseSize = (uint16_t)(tmp << 8);
 4113              		.loc 1 1915 0
 4114 0084 1B0E     		lsrs	r3, r3, #24
 4115              	.LVL516:
1916:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4116              		.loc 1 1916 0
 4117 0086 1B02     		lsls	r3, r3, #8
 4118              	.LVL517:
 4119 0088 A381     		strh	r3, [r4, #12]	@ movhi
1919:HALLIB/Src/stm32f7xx_hal_sd.c ****     pStatus->EraseSize |= (uint16_t)tmp;
 4120              		.loc 1 1919 0
 4121 008a 039B     		ldr	r3, [sp, #12]
 4122              	.LVL518:
1920:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4123              		.loc 1 1920 0
 4124 008c A289     		ldrh	r2, [r4, #12]
 4125 008e 91B2     		uxth	r1, r2
 4126 0090 DAB2     		uxtb	r2, r3
 4127              	.LVL519:
 4128 0092 0A43     		orrs	r2, r2, r1
 4129              	.LVL520:
 4130 0094 A281     		strh	r2, [r4, #12]	@ movhi
 4131              	.LVL521:
1924:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4132              		.loc 1 1924 0
 4133 0096 C3F38522 		ubfx	r2, r3, #10, #6
 4134              	.LVL522:
 4135 009a A273     		strb	r2, [r4, #14]
 4136              	.LVL523:
1928:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4137              		.loc 1 1928 0
 4138 009c C3F30123 		ubfx	r3, r3, #8, #2
 4139              	.LVL524:
 4140 00a0 E373     		strb	r3, [r4, #15]
ARM GAS  /tmp/ccps07Ev.s 			page 137


1931:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 4141              		.loc 1 1931 0
 4142 00a2 0020     		movs	r0, #0
 4143              	.LVL525:
 4144              	.L235:
1932:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 4145              		.loc 1 1932 0
 4146 00a4 11B0     		add	sp, sp, #68
 4147              	.LCFI58:
 4148              		.cfi_def_cfa_offset 12
 4149              		@ sp needed
 4150 00a6 30BD     		pop	{r4, r5, pc}
 4151              		.cfi_endproc
 4152              	.LFE157:
 4154              		.section	.text.HAL_SD_GetCardInfo,"ax",%progbits
 4155              		.align	2
 4156              		.global	HAL_SD_GetCardInfo
 4157              		.thumb
 4158              		.thumb_func
 4160              	HAL_SD_GetCardInfo:
 4161              	.LFB158:
1942:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 4162              		.loc 1 1942 0
 4163              		.cfi_startproc
 4164              		@ args = 0, pretend = 0, frame = 0
 4165              		@ frame_needed = 0, uses_anonymous_args = 0
 4166              		@ link register save eliminated.
 4167              	.LVL526:
1943:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 4168              		.loc 1 1943 0
 4169 0000 436C     		ldr	r3, [r0, #68]
 4170 0002 0B60     		str	r3, [r1]
1944:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 4171              		.loc 1 1944 0
 4172 0004 836C     		ldr	r3, [r0, #72]
 4173 0006 4B60     		str	r3, [r1, #4]
1945:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 4174              		.loc 1 1945 0
 4175 0008 C36C     		ldr	r3, [r0, #76]
 4176 000a 8B60     		str	r3, [r1, #8]
1946:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 4177              		.loc 1 1946 0
 4178 000c 036D     		ldr	r3, [r0, #80]
 4179 000e CB60     		str	r3, [r1, #12]
1947:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 4180              		.loc 1 1947 0
 4181 0010 436D     		ldr	r3, [r0, #84]
 4182 0012 0B61     		str	r3, [r1, #16]
1948:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 4183              		.loc 1 1948 0
 4184 0014 836D     		ldr	r3, [r0, #88]
 4185 0016 4B61     		str	r3, [r1, #20]
1949:HALLIB/Src/stm32f7xx_hal_sd.c ****   pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 4186              		.loc 1 1949 0
 4187 0018 C36D     		ldr	r3, [r0, #92]
 4188 001a 8B61     		str	r3, [r1, #24]
1950:HALLIB/Src/stm32f7xx_hal_sd.c ****   
ARM GAS  /tmp/ccps07Ev.s 			page 138


 4189              		.loc 1 1950 0
 4190 001c 036E     		ldr	r3, [r0, #96]
 4191 001e CB61     		str	r3, [r1, #28]
1953:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 4192              		.loc 1 1953 0
 4193 0020 0020     		movs	r0, #0
 4194              	.LVL527:
 4195 0022 7047     		bx	lr
 4196              		.cfi_endproc
 4197              	.LFE158:
 4199              		.section	.text.HAL_SD_ConfigWideBusOperation,"ax",%progbits
 4200              		.align	2
 4201              		.global	HAL_SD_ConfigWideBusOperation
 4202              		.thumb
 4203              		.thumb_func
 4205              	HAL_SD_ConfigWideBusOperation:
 4206              	.LFB159:
1967:HALLIB/Src/stm32f7xx_hal_sd.c ****   SDMMC_InitTypeDef Init;
 4207              		.loc 1 1967 0
 4208              		.cfi_startproc
 4209              		@ args = 0, pretend = 0, frame = 24
 4210              		@ frame_needed = 0, uses_anonymous_args = 0
 4211              	.LVL528:
 4212 0000 30B5     		push	{r4, r5, lr}
 4213              	.LCFI59:
 4214              		.cfi_def_cfa_offset 12
 4215              		.cfi_offset 4, -12
 4216              		.cfi_offset 5, -8
 4217              		.cfi_offset 14, -4
 4218 0002 8BB0     		sub	sp, sp, #44
 4219              	.LCFI60:
 4220              		.cfi_def_cfa_offset 56
 4221 0004 0446     		mov	r4, r0
 4222 0006 0D46     		mov	r5, r1
 4223              	.LVL529:
1975:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 4224              		.loc 1 1975 0
 4225 0008 0323     		movs	r3, #3
 4226 000a 80F83430 		strb	r3, [r0, #52]
1977:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4227              		.loc 1 1977 0
 4228 000e 436C     		ldr	r3, [r0, #68]
 4229 0010 032B     		cmp	r3, #3
 4230 0012 1CD0     		beq	.L239
1979:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4231              		.loc 1 1979 0
 4232 0014 B1F5805F 		cmp	r1, #4096
 4233 0018 04D1     		bne	.L240
1981:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4234              		.loc 1 1981 0
 4235 001a 836B     		ldr	r3, [r0, #56]
 4236 001c 43F08053 		orr	r3, r3, #268435456
 4237 0020 8363     		str	r3, [r0, #56]
 4238 0022 18E0     		b	.L241
 4239              	.L240:
1983:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4240              		.loc 1 1983 0
ARM GAS  /tmp/ccps07Ev.s 			page 139


 4241 0024 B1F5006F 		cmp	r1, #2048
 4242 0028 05D1     		bne	.L242
1985:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 4243              		.loc 1 1985 0
 4244 002a FFF7FEFF 		bl	SD_WideBus_Enable
 4245              	.LVL530:
1987:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4246              		.loc 1 1987 0
 4247 002e A36B     		ldr	r3, [r4, #56]
 4248 0030 1843     		orrs	r0, r0, r3
 4249              	.LVL531:
 4250 0032 A063     		str	r0, [r4, #56]
 4251 0034 0FE0     		b	.L241
 4252              	.LVL532:
 4253              	.L242:
1989:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4254              		.loc 1 1989 0
 4255 0036 29B9     		cbnz	r1, .L243
1991:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 4256              		.loc 1 1991 0
 4257 0038 FFF7FEFF 		bl	SD_WideBus_Disable
 4258              	.LVL533:
1993:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4259              		.loc 1 1993 0
 4260 003c A36B     		ldr	r3, [r4, #56]
 4261 003e 1843     		orrs	r0, r0, r3
 4262              	.LVL534:
 4263 0040 A063     		str	r0, [r4, #56]
 4264 0042 08E0     		b	.L241
 4265              	.LVL535:
 4266              	.L243:
1998:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4267              		.loc 1 1998 0
 4268 0044 836B     		ldr	r3, [r0, #56]
 4269 0046 43F00063 		orr	r3, r3, #134217728
 4270 004a 8363     		str	r3, [r0, #56]
 4271 004c 03E0     		b	.L241
 4272              	.L239:
2004:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4273              		.loc 1 2004 0
 4274 004e 836B     		ldr	r3, [r0, #56]
 4275 0050 43F08053 		orr	r3, r3, #268435456
 4276 0054 8363     		str	r3, [r0, #56]
 4277              	.LVL536:
 4278              	.L241:
2007:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4279              		.loc 1 2007 0
 4280 0056 A36B     		ldr	r3, [r4, #56]
 4281 0058 3BB1     		cbz	r3, .L244
2010:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
 4282              		.loc 1 2010 0
 4283 005a 2368     		ldr	r3, [r4]
 4284 005c 40F2FF52 		movw	r2, #1535
 4285 0060 9A63     		str	r2, [r3, #56]
2011:HALLIB/Src/stm32f7xx_hal_sd.c ****     return HAL_ERROR;
 4286              		.loc 1 2011 0
 4287 0062 0120     		movs	r0, #1
ARM GAS  /tmp/ccps07Ev.s 			page 140


 4288 0064 84F83400 		strb	r0, [r4, #52]
2012:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4289              		.loc 1 2012 0
 4290 0068 18E0     		b	.L245
 4291              	.L244:
2017:HALLIB/Src/stm32f7xx_hal_sd.c ****     Init.ClockBypass         = hsd->Init.ClockBypass;
 4292              		.loc 1 2017 0
 4293 006a 6368     		ldr	r3, [r4, #4]
 4294 006c 0493     		str	r3, [sp, #16]
2018:HALLIB/Src/stm32f7xx_hal_sd.c ****     Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 4295              		.loc 1 2018 0
 4296 006e A368     		ldr	r3, [r4, #8]
 4297 0070 0593     		str	r3, [sp, #20]
2019:HALLIB/Src/stm32f7xx_hal_sd.c ****     Init.BusWide             = WideMode;
 4298              		.loc 1 2019 0
 4299 0072 E368     		ldr	r3, [r4, #12]
 4300 0074 0693     		str	r3, [sp, #24]
2020:HALLIB/Src/stm32f7xx_hal_sd.c ****     Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 4301              		.loc 1 2020 0
 4302 0076 0795     		str	r5, [sp, #28]
2021:HALLIB/Src/stm32f7xx_hal_sd.c ****     Init.ClockDiv            = hsd->Init.ClockDiv;
 4303              		.loc 1 2021 0
 4304 0078 6369     		ldr	r3, [r4, #20]
 4305 007a 0893     		str	r3, [sp, #32]
2022:HALLIB/Src/stm32f7xx_hal_sd.c ****     SDMMC_Init(hsd->Instance, Init);
 4306              		.loc 1 2022 0
 4307 007c A369     		ldr	r3, [r4, #24]
 4308 007e 0993     		str	r3, [sp, #36]
2023:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4309              		.loc 1 2023 0
 4310 0080 0AAB     		add	r3, sp, #40
 4311 0082 13E90700 		ldmdb	r3, {r0, r1, r2}
 4312 0086 8DE80700 		stmia	sp, {r0, r1, r2}
 4313 008a 04AB     		add	r3, sp, #16
 4314 008c 0ECB     		ldmia	r3, {r1, r2, r3}
 4315 008e 2068     		ldr	r0, [r4]
 4316 0090 FFF7FEFF 		bl	SDMMC_Init
 4317              	.LVL537:
2027:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 4318              		.loc 1 2027 0
 4319 0094 0123     		movs	r3, #1
 4320 0096 84F83430 		strb	r3, [r4, #52]
2029:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 4321              		.loc 1 2029 0
 4322 009a 0020     		movs	r0, #0
 4323              	.L245:
2030:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 4324              		.loc 1 2030 0
 4325 009c 0BB0     		add	sp, sp, #44
 4326              	.LCFI61:
 4327              		.cfi_def_cfa_offset 12
 4328              		@ sp needed
 4329 009e 30BD     		pop	{r4, r5, pc}
 4330              		.cfi_endproc
 4331              	.LFE159:
 4333              		.section	.text.HAL_SD_GetCardState,"ax",%progbits
 4334              		.align	2
ARM GAS  /tmp/ccps07Ev.s 			page 141


 4335              		.global	HAL_SD_GetCardState
 4336              		.thumb
 4337              		.thumb_func
 4339              	HAL_SD_GetCardState:
 4340              	.LFB160:
2039:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 4341              		.loc 1 2039 0
 4342              		.cfi_startproc
 4343              		@ args = 0, pretend = 0, frame = 8
 4344              		@ frame_needed = 0, uses_anonymous_args = 0
 4345              	.LVL538:
 4346 0000 10B5     		push	{r4, lr}
 4347              	.LCFI62:
 4348              		.cfi_def_cfa_offset 8
 4349              		.cfi_offset 4, -8
 4350              		.cfi_offset 14, -4
 4351 0002 82B0     		sub	sp, sp, #8
 4352              	.LCFI63:
 4353              		.cfi_def_cfa_offset 16
 4354 0004 0446     		mov	r4, r0
 4355              	.LVL539:
2042:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 4356              		.loc 1 2042 0
 4357 0006 02A9     		add	r1, sp, #8
 4358 0008 0023     		movs	r3, #0
 4359 000a 41F8043D 		str	r3, [r1, #-4]!
2044:HALLIB/Src/stm32f7xx_hal_sd.c ****   if(errorstate != HAL_OK)
 4360              		.loc 1 2044 0
 4361 000e FFF7FEFF 		bl	SD_SendStatus
 4362              	.LVL540:
2045:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4363              		.loc 1 2045 0
 4364 0012 18B1     		cbz	r0, .L248
 4365 0014 0346     		mov	r3, r0
2047:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4366              		.loc 1 2047 0
 4367 0016 A06B     		ldr	r0, [r4, #56]
 4368              	.LVL541:
 4369 0018 1843     		orrs	r0, r0, r3
 4370 001a A063     		str	r0, [r4, #56]
 4371              	.LVL542:
 4372              	.L248:
2053:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 4373              		.loc 1 2053 0
 4374 001c 0198     		ldr	r0, [sp, #4]
 4375 001e C0F34320 		ubfx	r0, r0, #9, #4
 4376 0022 02B0     		add	sp, sp, #8
 4377              	.LCFI64:
 4378              		.cfi_def_cfa_offset 8
 4379              		@ sp needed
 4380 0024 10BD     		pop	{r4, pc}
 4381              		.cfi_endproc
 4382              	.LFE160:
 4384 0026 00BF     		.section	.text.SD_DMAError,"ax",%progbits
 4385              		.align	2
 4386              		.thumb
 4387              		.thumb_func
ARM GAS  /tmp/ccps07Ev.s 			page 142


 4389              	SD_DMAError:
 4390              	.LFB165:
2231:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 4391              		.loc 1 2231 0
 4392              		.cfi_startproc
 4393              		@ args = 0, pretend = 0, frame = 0
 4394              		@ frame_needed = 0, uses_anonymous_args = 0
 4395              	.LVL543:
 4396 0000 10B5     		push	{r4, lr}
 4397              	.LCFI65:
 4398              		.cfi_def_cfa_offset 8
 4399              		.cfi_offset 4, -8
 4400              		.cfi_offset 14, -4
2232:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef CardState;
 4401              		.loc 1 2232 0
 4402 0002 846B     		ldr	r4, [r0, #56]
 4403              	.LVL544:
2236:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4404              		.loc 1 2236 0
 4405 0004 FFF7FEFF 		bl	HAL_DMA_GetError
 4406              	.LVL545:
 4407 0008 0228     		cmp	r0, #2
 4408 000a 27D0     		beq	.L250
2238:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4409              		.loc 1 2238 0
 4410 000c E36B     		ldr	r3, [r4, #60]
 4411 000e 5B6D     		ldr	r3, [r3, #84]
 4412 0010 012B     		cmp	r3, #1
 4413 0012 03D0     		beq	.L252
2238:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4414              		.loc 1 2238 0 is_stmt 0 discriminator 1
 4415 0014 236C     		ldr	r3, [r4, #64]
 4416 0016 5B6D     		ldr	r3, [r3, #84]
 4417 0018 012B     		cmp	r3, #1
 4418 001a 1CD1     		bne	.L253
 4419              	.L252:
2241:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 4420              		.loc 1 2241 0 is_stmt 1
 4421 001c 2368     		ldr	r3, [r4]
 4422 001e 40F2FF52 		movw	r2, #1535
 4423 0022 9A63     		str	r2, [r3, #56]
2244:HALLIB/Src/stm32f7xx_hal_sd.c ****         SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
 4424              		.loc 1 2244 0
 4425 0024 2268     		ldr	r2, [r4]
 4426 0026 D36B     		ldr	r3, [r2, #60]
 4427 0028 23F49D73 		bic	r3, r3, #314
 4428 002c D363     		str	r3, [r2, #60]
2247:HALLIB/Src/stm32f7xx_hal_sd.c ****       CardState = HAL_SD_GetCardState(hsd);
 4429              		.loc 1 2247 0
 4430 002e A36B     		ldr	r3, [r4, #56]
 4431 0030 43F08043 		orr	r3, r3, #1073741824
 4432 0034 A363     		str	r3, [r4, #56]
2248:HALLIB/Src/stm32f7xx_hal_sd.c ****       if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 4433              		.loc 1 2248 0
 4434 0036 2046     		mov	r0, r4
 4435 0038 FFF7FEFF 		bl	HAL_SD_GetCardState
 4436              	.LVL546:
ARM GAS  /tmp/ccps07Ev.s 			page 143


2249:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4437              		.loc 1 2249 0
 4438 003c 0538     		subs	r0, r0, #5
 4439              	.LVL547:
 4440 003e C0B2     		uxtb	r0, r0
 4441 0040 0128     		cmp	r0, #1
 4442 0042 05D8     		bhi	.L254
2251:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 4443              		.loc 1 2251 0
 4444 0044 2068     		ldr	r0, [r4]
 4445 0046 FFF7FEFF 		bl	SDMMC_CmdStopTransfer
 4446              	.LVL548:
 4447 004a A36B     		ldr	r3, [r4, #56]
 4448 004c 1843     		orrs	r0, r0, r3
 4449 004e A063     		str	r0, [r4, #56]
 4450              	.L254:
2254:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4451              		.loc 1 2254 0
 4452 0050 0123     		movs	r3, #1
 4453 0052 84F83430 		strb	r3, [r4, #52]
 4454              	.L253:
2256:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4455              		.loc 1 2256 0
 4456 0056 2046     		mov	r0, r4
 4457 0058 FFF7FEFF 		bl	HAL_SD_ErrorCallback
 4458              	.LVL549:
 4459              	.L250:
 4460 005c 10BD     		pop	{r4, pc}
 4461              		.cfi_endproc
 4462              	.LFE165:
 4464 005e 00BF     		.section	.text.SD_DMATxAbort,"ax",%progbits
 4465              		.align	2
 4466              		.thumb
 4467              		.thumb_func
 4469              	SD_DMATxAbort:
 4470              	.LFB166:
2266:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 4471              		.loc 1 2266 0
 4472              		.cfi_startproc
 4473              		@ args = 0, pretend = 0, frame = 0
 4474              		@ frame_needed = 0, uses_anonymous_args = 0
 4475              	.LVL550:
 4476 0000 10B5     		push	{r4, lr}
 4477              	.LCFI66:
 4478              		.cfi_def_cfa_offset 8
 4479              		.cfi_offset 4, -8
 4480              		.cfi_offset 14, -4
2267:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef CardState;
 4481              		.loc 1 2267 0
 4482 0002 846B     		ldr	r4, [r0, #56]
 4483              	.LVL551:
2270:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4484              		.loc 1 2270 0
 4485 0004 236C     		ldr	r3, [r4, #64]
 4486 0006 0BB1     		cbz	r3, .L257
2272:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4487              		.loc 1 2272 0
ARM GAS  /tmp/ccps07Ev.s 			page 144


 4488 0008 0023     		movs	r3, #0
 4489 000a 2364     		str	r3, [r4, #64]
 4490              	.L257:
2276:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4491              		.loc 1 2276 0
 4492 000c E36B     		ldr	r3, [r4, #60]
 4493 000e D3B9     		cbnz	r3, .L256
2278:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = HAL_SD_ERROR_NONE;
 4494              		.loc 1 2278 0
 4495 0010 2046     		mov	r0, r4
 4496              	.LVL552:
 4497 0012 FFF7FEFF 		bl	HAL_SD_GetCardState
 4498              	.LVL553:
2279:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
 4499              		.loc 1 2279 0
 4500 0016 0023     		movs	r3, #0
 4501 0018 A363     		str	r3, [r4, #56]
2280:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 4502              		.loc 1 2280 0
 4503 001a 0123     		movs	r3, #1
 4504 001c 84F83430 		strb	r3, [r4, #52]
2281:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4505              		.loc 1 2281 0
 4506 0020 0538     		subs	r0, r0, #5
 4507              	.LVL554:
 4508 0022 C0B2     		uxtb	r0, r0
 4509 0024 9842     		cmp	r0, r3
 4510 0026 0ED8     		bhi	.L256
2283:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 4511              		.loc 1 2283 0
 4512 0028 2068     		ldr	r0, [r4]
 4513 002a FFF7FEFF 		bl	SDMMC_CmdStopTransfer
 4514              	.LVL555:
 4515 002e A36B     		ldr	r3, [r4, #56]
 4516 0030 1843     		orrs	r0, r0, r3
 4517 0032 A063     		str	r0, [r4, #56]
2285:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4518              		.loc 1 2285 0
 4519 0034 A36B     		ldr	r3, [r4, #56]
 4520 0036 1BB1     		cbz	r3, .L259
2287:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 4521              		.loc 1 2287 0
 4522 0038 2046     		mov	r0, r4
 4523 003a FFF7FEFF 		bl	HAL_SD_AbortCallback
 4524              	.LVL556:
 4525 003e 10BD     		pop	{r4, pc}
 4526              	.LVL557:
 4527              	.L259:
2291:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 4528              		.loc 1 2291 0
 4529 0040 2046     		mov	r0, r4
 4530 0042 FFF7FEFF 		bl	HAL_SD_ErrorCallback
 4531              	.LVL558:
 4532              	.L256:
 4533 0046 10BD     		pop	{r4, pc}
 4534              		.cfi_endproc
 4535              	.LFE166:
ARM GAS  /tmp/ccps07Ev.s 			page 145


 4537              		.section	.text.SD_DMARxAbort,"ax",%progbits
 4538              		.align	2
 4539              		.thumb
 4540              		.thumb_func
 4542              	SD_DMARxAbort:
 4543              	.LFB167:
2303:HALLIB/Src/stm32f7xx_hal_sd.c ****   SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 4544              		.loc 1 2303 0
 4545              		.cfi_startproc
 4546              		@ args = 0, pretend = 0, frame = 0
 4547              		@ frame_needed = 0, uses_anonymous_args = 0
 4548              	.LVL559:
 4549 0000 10B5     		push	{r4, lr}
 4550              	.LCFI67:
 4551              		.cfi_def_cfa_offset 8
 4552              		.cfi_offset 4, -8
 4553              		.cfi_offset 14, -4
2304:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef CardState;
 4554              		.loc 1 2304 0
 4555 0002 846B     		ldr	r4, [r0, #56]
 4556              	.LVL560:
2307:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4557              		.loc 1 2307 0
 4558 0004 E36B     		ldr	r3, [r4, #60]
 4559 0006 0BB1     		cbz	r3, .L262
2309:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4560              		.loc 1 2309 0
 4561 0008 0023     		movs	r3, #0
 4562 000a E363     		str	r3, [r4, #60]
 4563              	.L262:
2313:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4564              		.loc 1 2313 0
 4565 000c 236C     		ldr	r3, [r4, #64]
 4566 000e D3B9     		cbnz	r3, .L261
2315:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->ErrorCode = HAL_SD_ERROR_NONE;
 4567              		.loc 1 2315 0
 4568 0010 2046     		mov	r0, r4
 4569              	.LVL561:
 4570 0012 FFF7FEFF 		bl	HAL_SD_GetCardState
 4571              	.LVL562:
2316:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
 4572              		.loc 1 2316 0
 4573 0016 0023     		movs	r3, #0
 4574 0018 A363     		str	r3, [r4, #56]
2317:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 4575              		.loc 1 2317 0
 4576 001a 0123     		movs	r3, #1
 4577 001c 84F83430 		strb	r3, [r4, #52]
2318:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4578              		.loc 1 2318 0
 4579 0020 0538     		subs	r0, r0, #5
 4580              	.LVL563:
 4581 0022 C0B2     		uxtb	r0, r0
 4582 0024 9842     		cmp	r0, r3
 4583 0026 0ED8     		bhi	.L261
2320:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 4584              		.loc 1 2320 0
ARM GAS  /tmp/ccps07Ev.s 			page 146


 4585 0028 2068     		ldr	r0, [r4]
 4586 002a FFF7FEFF 		bl	SDMMC_CmdStopTransfer
 4587              	.LVL564:
 4588 002e A36B     		ldr	r3, [r4, #56]
 4589 0030 1843     		orrs	r0, r0, r3
 4590 0032 A063     		str	r0, [r4, #56]
2322:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4591              		.loc 1 2322 0
 4592 0034 A36B     		ldr	r3, [r4, #56]
 4593 0036 1BB1     		cbz	r3, .L264
2324:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 4594              		.loc 1 2324 0
 4595 0038 2046     		mov	r0, r4
 4596 003a FFF7FEFF 		bl	HAL_SD_AbortCallback
 4597              	.LVL565:
 4598 003e 10BD     		pop	{r4, pc}
 4599              	.LVL566:
 4600              	.L264:
2328:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 4601              		.loc 1 2328 0
 4602 0040 2046     		mov	r0, r4
 4603 0042 FFF7FEFF 		bl	HAL_SD_ErrorCallback
 4604              	.LVL567:
 4605              	.L261:
 4606 0046 10BD     		pop	{r4, pc}
 4607              		.cfi_endproc
 4608              	.LFE167:
 4610              		.section	.text.HAL_SD_IRQHandler,"ax",%progbits
 4611              		.align	2
 4612              		.global	HAL_SD_IRQHandler
 4613              		.thumb
 4614              		.thumb_func
 4616              	HAL_SD_IRQHandler:
 4617              	.LFB148:
1376:HALLIB/Src/stm32f7xx_hal_sd.c ****   uint32_t errorstate = HAL_SD_ERROR_NONE;
 4618              		.loc 1 1376 0
 4619              		.cfi_startproc
 4620              		@ args = 0, pretend = 0, frame = 0
 4621              		@ frame_needed = 0, uses_anonymous_args = 0
 4622              	.LVL568:
 4623 0000 10B5     		push	{r4, lr}
 4624              	.LCFI68:
 4625              		.cfi_def_cfa_offset 8
 4626              		.cfi_offset 4, -8
 4627              		.cfi_offset 14, -4
 4628 0002 0446     		mov	r4, r0
 4629              	.LVL569:
1380:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4630              		.loc 1 1380 0
 4631 0004 0368     		ldr	r3, [r0]
 4632 0006 5A6B     		ldr	r2, [r3, #52]
 4633 0008 12F4807F 		tst	r2, #256
 4634 000c 5DD0     		beq	.L267
1382:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4635              		.loc 1 1382 0
 4636 000e 4FF48072 		mov	r2, #256
 4637 0012 9A63     		str	r2, [r3, #56]
ARM GAS  /tmp/ccps07Ev.s 			page 147


1384:HALLIB/Src/stm32f7xx_hal_sd.c ****                              SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
 4638              		.loc 1 1384 0
 4639 0014 0268     		ldr	r2, [r0]
 4640 0016 D36B     		ldr	r3, [r2, #60]
 4641 0018 23F49D73 		bic	r3, r3, #314
 4642 001c D363     		str	r3, [r2, #60]
1387:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4643              		.loc 1 1387 0
 4644 001e 036B     		ldr	r3, [r0, #48]
 4645 0020 13F0080F 		tst	r3, #8
 4646 0024 29D0     		beq	.L268
1389:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4647              		.loc 1 1389 0
 4648 0026 036B     		ldr	r3, [r0, #48]
 4649 0028 13F0020F 		tst	r3, #2
 4650 002c 03D1     		bne	.L269
1389:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4651              		.loc 1 1389 0 is_stmt 0 discriminator 1
 4652 002e 036B     		ldr	r3, [r0, #48]
 4653 0030 13F0200F 		tst	r3, #32
 4654 0034 0AD0     		beq	.L270
 4655              	.L269:
1391:HALLIB/Src/stm32f7xx_hal_sd.c ****         if(errorstate != HAL_SD_ERROR_NONE)
 4656              		.loc 1 1391 0 is_stmt 1
 4657 0036 2068     		ldr	r0, [r4]
 4658              	.LVL570:
 4659 0038 FFF7FEFF 		bl	SDMMC_CmdStopTransfer
 4660              	.LVL571:
1392:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 4661              		.loc 1 1392 0
 4662 003c 0346     		mov	r3, r0
 4663 003e 28B1     		cbz	r0, .L270
1394:HALLIB/Src/stm32f7xx_hal_sd.c ****           HAL_SD_ErrorCallback(hsd);
 4664              		.loc 1 1394 0
 4665 0040 A26B     		ldr	r2, [r4, #56]
 4666 0042 1343     		orrs	r3, r3, r2
 4667 0044 A363     		str	r3, [r4, #56]
1395:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 4668              		.loc 1 1395 0
 4669 0046 2046     		mov	r0, r4
 4670              	.LVL572:
 4671 0048 FFF7FEFF 		bl	HAL_SD_ErrorCallback
 4672              	.LVL573:
 4673              	.L270:
1400:HALLIB/Src/stm32f7xx_hal_sd.c ****       
 4674              		.loc 1 1400 0
 4675 004c 2368     		ldr	r3, [r4]
 4676 004e 40F2FF52 		movw	r2, #1535
 4677 0052 9A63     		str	r2, [r3, #56]
1402:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_RE
 4678              		.loc 1 1402 0
 4679 0054 0123     		movs	r3, #1
 4680 0056 84F83430 		strb	r3, [r4, #52]
1403:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4681              		.loc 1 1403 0
 4682 005a 236B     		ldr	r3, [r4, #48]
 4683 005c 13F0010F 		tst	r3, #1
ARM GAS  /tmp/ccps07Ev.s 			page 148


 4684 0060 03D1     		bne	.L271
1403:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4685              		.loc 1 1403 0 is_stmt 0 discriminator 1
 4686 0062 236B     		ldr	r3, [r4, #48]
 4687 0064 13F0020F 		tst	r3, #2
 4688 0068 03D0     		beq	.L272
 4689              	.L271:
1405:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 4690              		.loc 1 1405 0 is_stmt 1
 4691 006a 2046     		mov	r0, r4
 4692 006c FFF7FEFF 		bl	HAL_SD_RxCpltCallback
 4693              	.LVL574:
 4694 0070 10BD     		pop	{r4, pc}
 4695              	.LVL575:
 4696              	.L272:
1409:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 4697              		.loc 1 1409 0
 4698 0072 2046     		mov	r0, r4
 4699 0074 FFF7FEFF 		bl	HAL_SD_TxCpltCallback
 4700              	.LVL576:
 4701 0078 10BD     		pop	{r4, pc}
 4702              	.LVL577:
 4703              	.L268:
1412:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4704              		.loc 1 1412 0
 4705 007a 036B     		ldr	r3, [r0, #48]
 4706 007c 13F0800F 		tst	r3, #128
 4707 0080 00F09280 		beq	.L266
1414:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4708              		.loc 1 1414 0
 4709 0084 036B     		ldr	r3, [r0, #48]
 4710 0086 13F0200F 		tst	r3, #32
 4711 008a 0AD0     		beq	.L274
1416:HALLIB/Src/stm32f7xx_hal_sd.c ****         if(errorstate != HAL_SD_ERROR_NONE)
 4712              		.loc 1 1416 0
 4713 008c 0068     		ldr	r0, [r0]
 4714              	.LVL578:
 4715 008e FFF7FEFF 		bl	SDMMC_CmdStopTransfer
 4716              	.LVL579:
1417:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 4717              		.loc 1 1417 0
 4718 0092 0346     		mov	r3, r0
 4719 0094 28B1     		cbz	r0, .L274
1419:HALLIB/Src/stm32f7xx_hal_sd.c ****           HAL_SD_ErrorCallback(hsd);
 4720              		.loc 1 1419 0
 4721 0096 A26B     		ldr	r2, [r4, #56]
 4722 0098 1343     		orrs	r3, r3, r2
 4723 009a A363     		str	r3, [r4, #56]
1420:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 4724              		.loc 1 1420 0
 4725 009c 2046     		mov	r0, r4
 4726              	.LVL580:
 4727 009e FFF7FEFF 		bl	HAL_SD_ErrorCallback
 4728              	.LVL581:
 4729              	.L274:
1423:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4730              		.loc 1 1423 0
ARM GAS  /tmp/ccps07Ev.s 			page 149


 4731 00a2 236B     		ldr	r3, [r4, #48]
 4732 00a4 13F0010F 		tst	r3, #1
 4733 00a8 7ED1     		bne	.L266
1423:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4734              		.loc 1 1423 0 is_stmt 0 discriminator 1
 4735 00aa 236B     		ldr	r3, [r4, #48]
 4736 00ac 13F0020F 		tst	r3, #2
 4737 00b0 7AD1     		bne	.L266
1427:HALLIB/Src/stm32f7xx_hal_sd.c ****         
 4738              		.loc 1 1427 0 is_stmt 1
 4739 00b2 2268     		ldr	r2, [r4]
 4740 00b4 D36A     		ldr	r3, [r2, #44]
 4741 00b6 23F00803 		bic	r3, r3, #8
 4742 00ba D362     		str	r3, [r2, #44]
1429:HALLIB/Src/stm32f7xx_hal_sd.c ****         
 4743              		.loc 1 1429 0
 4744 00bc 0123     		movs	r3, #1
 4745 00be 84F83430 		strb	r3, [r4, #52]
1431:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 4746              		.loc 1 1431 0
 4747 00c2 2046     		mov	r0, r4
 4748 00c4 FFF7FEFF 		bl	HAL_SD_TxCpltCallback
 4749              	.LVL582:
 4750 00c8 10BD     		pop	{r4, pc}
 4751              	.LVL583:
 4752              	.L267:
1436:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4753              		.loc 1 1436 0
 4754 00ca 5A6B     		ldr	r2, [r3, #52]
 4755 00cc 12F4804F 		tst	r2, #16384
 4756 00d0 05D0     		beq	.L275
1438:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4757              		.loc 1 1438 0
 4758 00d2 4FF48042 		mov	r2, #16384
 4759 00d6 9A63     		str	r2, [r3, #56]
1440:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4760              		.loc 1 1440 0
 4761 00d8 FFF7FEFF 		bl	SD_Write_IT
 4762              	.LVL584:
 4763 00dc 10BD     		pop	{r4, pc}
 4764              	.LVL585:
 4765              	.L275:
1443:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4766              		.loc 1 1443 0
 4767 00de 5A6B     		ldr	r2, [r3, #52]
 4768 00e0 12F4004F 		tst	r2, #32768
 4769 00e4 05D0     		beq	.L276
1445:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4770              		.loc 1 1445 0
 4771 00e6 4FF40042 		mov	r2, #32768
 4772 00ea 9A63     		str	r2, [r3, #56]
1447:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4773              		.loc 1 1447 0
 4774 00ec FFF7FEFF 		bl	SD_Read_IT
 4775              	.LVL586:
 4776 00f0 10BD     		pop	{r4, pc}
 4777              	.LVL587:
ARM GAS  /tmp/ccps07Ev.s 			page 150


 4778              	.L276:
1450:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4779              		.loc 1 1450 0
 4780 00f2 5A6B     		ldr	r2, [r3, #52]
 4781 00f4 12F03A0F 		tst	r2, #58
 4782 00f8 56D0     		beq	.L266
1453:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4783              		.loc 1 1453 0
 4784 00fa 5A6B     		ldr	r2, [r3, #52]
 4785 00fc 12F0020F 		tst	r2, #2
 4786 0100 03D0     		beq	.L277
1455:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4787              		.loc 1 1455 0
 4788 0102 826B     		ldr	r2, [r0, #56]
 4789 0104 42F00202 		orr	r2, r2, #2
 4790 0108 8263     		str	r2, [r0, #56]
 4791              	.L277:
1457:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4792              		.loc 1 1457 0
 4793 010a 5A6B     		ldr	r2, [r3, #52]
 4794 010c 12F0080F 		tst	r2, #8
 4795 0110 03D0     		beq	.L278
1459:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4796              		.loc 1 1459 0
 4797 0112 A26B     		ldr	r2, [r4, #56]
 4798 0114 42F00802 		orr	r2, r2, #8
 4799 0118 A263     		str	r2, [r4, #56]
 4800              	.L278:
1461:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4801              		.loc 1 1461 0
 4802 011a 5A6B     		ldr	r2, [r3, #52]
 4803 011c 12F0200F 		tst	r2, #32
 4804 0120 03D0     		beq	.L279
1463:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4805              		.loc 1 1463 0
 4806 0122 A26B     		ldr	r2, [r4, #56]
 4807 0124 42F02002 		orr	r2, r2, #32
 4808 0128 A263     		str	r2, [r4, #56]
 4809              	.L279:
1465:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4810              		.loc 1 1465 0
 4811 012a 5A6B     		ldr	r2, [r3, #52]
 4812 012c 12F0100F 		tst	r2, #16
 4813 0130 03D0     		beq	.L280
1467:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4814              		.loc 1 1467 0
 4815 0132 A26B     		ldr	r2, [r4, #56]
 4816 0134 42F01002 		orr	r2, r2, #16
 4817 0138 A263     		str	r2, [r4, #56]
 4818              	.L280:
1471:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4819              		.loc 1 1471 0
 4820 013a 40F2FF52 		movw	r2, #1535
 4821 013e 9A63     		str	r2, [r3, #56]
1474:HALLIB/Src/stm32f7xx_hal_sd.c ****                              SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
 4822              		.loc 1 1474 0
 4823 0140 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccps07Ev.s 			page 151


 4824 0142 D36B     		ldr	r3, [r2, #60]
 4825 0144 23F49D73 		bic	r3, r3, #314
 4826 0148 D363     		str	r3, [r2, #60]
1477:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4827              		.loc 1 1477 0
 4828 014a 236B     		ldr	r3, [r4, #48]
 4829 014c 13F0800F 		tst	r3, #128
 4830 0150 20D0     		beq	.L281
1480:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4831              		.loc 1 1480 0
 4832 0152 236C     		ldr	r3, [r4, #64]
 4833 0154 4BB1     		cbz	r3, .L282
1483:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Abort DMA in IT mode */
 4834              		.loc 1 1483 0
 4835 0156 154A     		ldr	r2, .L285
 4836 0158 1A65     		str	r2, [r3, #80]
1485:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 4837              		.loc 1 1485 0
 4838 015a 206C     		ldr	r0, [r4, #64]
 4839              	.LVL588:
 4840 015c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4841              	.LVL589:
 4842 0160 10B3     		cbz	r0, .L266
1487:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 4843              		.loc 1 1487 0
 4844 0162 206C     		ldr	r0, [r4, #64]
 4845 0164 FFF7FEFF 		bl	SD_DMATxAbort
 4846              	.LVL590:
 4847 0168 10BD     		pop	{r4, pc}
 4848              	.LVL591:
 4849              	.L282:
1490:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 4850              		.loc 1 1490 0
 4851 016a E36B     		ldr	r3, [r4, #60]
 4852 016c 4BB1     		cbz	r3, .L283
1493:HALLIB/Src/stm32f7xx_hal_sd.c ****         /* Abort DMA in IT mode */
 4853              		.loc 1 1493 0
 4854 016e 104A     		ldr	r2, .L285+4
 4855 0170 1A65     		str	r2, [r3, #80]
1495:HALLIB/Src/stm32f7xx_hal_sd.c ****         {
 4856              		.loc 1 1495 0
 4857 0172 E06B     		ldr	r0, [r4, #60]
 4858              	.LVL592:
 4859 0174 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4860              	.LVL593:
 4861 0178 B0B1     		cbz	r0, .L266
1497:HALLIB/Src/stm32f7xx_hal_sd.c ****         }
 4862              		.loc 1 1497 0
 4863 017a E06B     		ldr	r0, [r4, #60]
 4864 017c FFF7FEFF 		bl	SD_DMARxAbort
 4865              	.LVL594:
 4866 0180 10BD     		pop	{r4, pc}
 4867              	.LVL595:
 4868              	.L283:
1502:HALLIB/Src/stm32f7xx_hal_sd.c ****         hsd->State = HAL_SD_STATE_READY;
 4869              		.loc 1 1502 0
 4870 0182 0023     		movs	r3, #0
ARM GAS  /tmp/ccps07Ev.s 			page 152


 4871 0184 A363     		str	r3, [r4, #56]
1503:HALLIB/Src/stm32f7xx_hal_sd.c ****         HAL_SD_AbortCallback(hsd);
 4872              		.loc 1 1503 0
 4873 0186 0123     		movs	r3, #1
 4874 0188 84F83430 		strb	r3, [r4, #52]
1504:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 4875              		.loc 1 1504 0
 4876 018c 2046     		mov	r0, r4
 4877              	.LVL596:
 4878 018e FFF7FEFF 		bl	HAL_SD_AbortCallback
 4879              	.LVL597:
 4880 0192 10BD     		pop	{r4, pc}
 4881              	.LVL598:
 4882              	.L281:
1507:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4883              		.loc 1 1507 0
 4884 0194 236B     		ldr	r3, [r4, #48]
 4885 0196 13F0080F 		tst	r3, #8
 4886 019a 05D0     		beq	.L266
1510:HALLIB/Src/stm32f7xx_hal_sd.c ****       HAL_SD_ErrorCallback(hsd);
 4887              		.loc 1 1510 0
 4888 019c 0123     		movs	r3, #1
 4889 019e 84F83430 		strb	r3, [r4, #52]
1511:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4890              		.loc 1 1511 0
 4891 01a2 2046     		mov	r0, r4
 4892              	.LVL599:
 4893 01a4 FFF7FEFF 		bl	HAL_SD_ErrorCallback
 4894              	.LVL600:
 4895              	.L266:
 4896 01a8 10BD     		pop	{r4, pc}
 4897              	.LVL601:
 4898              	.L286:
 4899 01aa 00BF     		.align	2
 4900              	.L285:
 4901 01ac 00000000 		.word	SD_DMATxAbort
 4902 01b0 00000000 		.word	SD_DMARxAbort
 4903              		.cfi_endproc
 4904              	.LFE148:
 4906              		.section	.text.HAL_SD_Abort,"ax",%progbits
 4907              		.align	2
 4908              		.global	HAL_SD_Abort
 4909              		.thumb
 4910              		.thumb_func
 4912              	HAL_SD_Abort:
 4913              	.LFB161:
2062:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef CardState;
 4914              		.loc 1 2062 0
 4915              		.cfi_startproc
 4916              		@ args = 0, pretend = 0, frame = 0
 4917              		@ frame_needed = 0, uses_anonymous_args = 0
 4918              	.LVL602:
 4919 0000 10B5     		push	{r4, lr}
 4920              	.LCFI69:
 4921              		.cfi_def_cfa_offset 8
 4922              		.cfi_offset 4, -8
 4923              		.cfi_offset 14, -4
ARM GAS  /tmp/ccps07Ev.s 			page 153


 4924 0002 0446     		mov	r4, r0
2066:HALLIB/Src/stm32f7xx_hal_sd.c ****                            SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
 4925              		.loc 1 2066 0
 4926 0004 0268     		ldr	r2, [r0]
 4927 0006 D36B     		ldr	r3, [r2, #60]
 4928 0008 23F49D73 		bic	r3, r3, #314
 4929 000c D363     		str	r3, [r2, #60]
2070:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 4930              		.loc 1 2070 0
 4931 000e 0368     		ldr	r3, [r0]
 4932 0010 40F2FF52 		movw	r2, #1535
 4933 0014 9A63     		str	r2, [r3, #56]
2072:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4934              		.loc 1 2072 0
 4935 0016 036C     		ldr	r3, [r0, #64]
 4936 0018 0BB9     		cbnz	r3, .L288
2072:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4937              		.loc 1 2072 0 is_stmt 0 discriminator 1
 4938 001a C36B     		ldr	r3, [r0, #60]
 4939 001c 63B1     		cbz	r3, .L289
 4940              	.L288:
2075:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 4941              		.loc 1 2075 0 is_stmt 1
 4942 001e 2268     		ldr	r2, [r4]
 4943 0020 D36A     		ldr	r3, [r2, #44]
 4944 0022 23F00803 		bic	r3, r3, #8
 4945 0026 D362     		str	r3, [r2, #44]
2078:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4946              		.loc 1 2078 0
 4947 0028 206C     		ldr	r0, [r4, #64]
 4948              	.LVL603:
 4949 002a 08B1     		cbz	r0, .L290
2080:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4950              		.loc 1 2080 0
 4951 002c FFF7FEFF 		bl	HAL_DMA_Abort
 4952              	.LVL604:
 4953              	.L290:
2083:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 4954              		.loc 1 2083 0
 4955 0030 E06B     		ldr	r0, [r4, #60]
 4956 0032 08B1     		cbz	r0, .L289
2085:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 4957              		.loc 1 2085 0
 4958 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 4959              	.LVL605:
 4960              	.L289:
2089:HALLIB/Src/stm32f7xx_hal_sd.c ****   CardState = HAL_SD_GetCardState(hsd);
 4961              		.loc 1 2089 0
 4962 0038 0123     		movs	r3, #1
 4963 003a 84F83430 		strb	r3, [r4, #52]
2090:HALLIB/Src/stm32f7xx_hal_sd.c ****   if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 4964              		.loc 1 2090 0
 4965 003e 2046     		mov	r0, r4
 4966 0040 FFF7FEFF 		bl	HAL_SD_GetCardState
 4967              	.LVL606:
2091:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4968              		.loc 1 2091 0
ARM GAS  /tmp/ccps07Ev.s 			page 154


 4969 0044 0538     		subs	r0, r0, #5
 4970              	.LVL607:
 4971 0046 C0B2     		uxtb	r0, r0
 4972 0048 0128     		cmp	r0, #1
 4973 004a 03D8     		bhi	.L291
2093:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4974              		.loc 1 2093 0
 4975 004c 2068     		ldr	r0, [r4]
 4976 004e FFF7FEFF 		bl	SDMMC_CmdStopTransfer
 4977              	.LVL608:
 4978 0052 A063     		str	r0, [r4, #56]
 4979              	.L291:
2095:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 4980              		.loc 1 2095 0
 4981 0054 A36B     		ldr	r3, [r4, #56]
 4982 0056 0BB1     		cbz	r3, .L293
2097:HALLIB/Src/stm32f7xx_hal_sd.c ****   }
 4983              		.loc 1 2097 0
 4984 0058 0120     		movs	r0, #1
 4985 005a 10BD     		pop	{r4, pc}
 4986              	.LVL609:
 4987              	.L293:
2099:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 4988              		.loc 1 2099 0
 4989 005c 0020     		movs	r0, #0
2100:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 4990              		.loc 1 2100 0
 4991 005e 10BD     		pop	{r4, pc}
 4992              		.cfi_endproc
 4993              	.LFE161:
 4995              		.section	.text.HAL_SD_Abort_IT,"ax",%progbits
 4996              		.align	2
 4997              		.global	HAL_SD_Abort_IT
 4998              		.thumb
 4999              		.thumb_func
 5001              	HAL_SD_Abort_IT:
 5002              	.LFB162:
2109:HALLIB/Src/stm32f7xx_hal_sd.c ****   HAL_SD_CardStateTypeDef CardState;
 5003              		.loc 1 2109 0
 5004              		.cfi_startproc
 5005              		@ args = 0, pretend = 0, frame = 0
 5006              		@ frame_needed = 0, uses_anonymous_args = 0
 5007              	.LVL610:
 5008 0000 10B5     		push	{r4, lr}
 5009              	.LCFI70:
 5010              		.cfi_def_cfa_offset 8
 5011              		.cfi_offset 4, -8
 5012              		.cfi_offset 14, -4
 5013 0002 0446     		mov	r4, r0
2113:HALLIB/Src/stm32f7xx_hal_sd.c ****                            SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
 5014              		.loc 1 2113 0
 5015 0004 0268     		ldr	r2, [r0]
 5016 0006 D36B     		ldr	r3, [r2, #60]
 5017 0008 23F49D73 		bic	r3, r3, #314
 5018 000c D363     		str	r3, [r2, #60]
2117:HALLIB/Src/stm32f7xx_hal_sd.c ****   
 5019              		.loc 1 2117 0
ARM GAS  /tmp/ccps07Ev.s 			page 155


 5020 000e 0368     		ldr	r3, [r0]
 5021 0010 40F2FF52 		movw	r2, #1535
 5022 0014 9A63     		str	r2, [r3, #56]
2119:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 5023              		.loc 1 2119 0
 5024 0016 036C     		ldr	r3, [r0, #64]
 5025 0018 0BB9     		cbnz	r3, .L296
2119:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 5026              		.loc 1 2119 0 is_stmt 0 discriminator 1
 5027 001a C36B     		ldr	r3, [r0, #60]
 5028 001c C3B1     		cbz	r3, .L297
 5029              	.L296:
2122:HALLIB/Src/stm32f7xx_hal_sd.c ****     
 5030              		.loc 1 2122 0 is_stmt 1
 5031 001e 2268     		ldr	r2, [r4]
 5032 0020 D36A     		ldr	r3, [r2, #44]
 5033 0022 23F00803 		bic	r3, r3, #8
 5034 0026 D362     		str	r3, [r2, #44]
2125:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 5035              		.loc 1 2125 0
 5036 0028 236C     		ldr	r3, [r4, #64]
 5037 002a 3BB1     		cbz	r3, .L298
2127:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 5038              		.loc 1 2127 0
 5039 002c 184A     		ldr	r2, .L305
 5040 002e 1A65     		str	r2, [r3, #80]
2128:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 5041              		.loc 1 2128 0
 5042 0030 206C     		ldr	r0, [r4, #64]
 5043              	.LVL611:
 5044 0032 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 5045              	.LVL612:
 5046 0036 08B1     		cbz	r0, .L298
2130:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 5047              		.loc 1 2130 0
 5048 0038 0023     		movs	r3, #0
 5049 003a 2364     		str	r3, [r4, #64]
 5050              	.L298:
2134:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 5051              		.loc 1 2134 0
 5052 003c E36B     		ldr	r3, [r4, #60]
 5053 003e 3BB1     		cbz	r3, .L297
2136:HALLIB/Src/stm32f7xx_hal_sd.c ****       if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 5054              		.loc 1 2136 0
 5055 0040 144A     		ldr	r2, .L305+4
 5056 0042 1A65     		str	r2, [r3, #80]
2137:HALLIB/Src/stm32f7xx_hal_sd.c ****       {
 5057              		.loc 1 2137 0
 5058 0044 E06B     		ldr	r0, [r4, #60]
 5059 0046 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 5060              	.LVL613:
 5061 004a 08B1     		cbz	r0, .L297
2139:HALLIB/Src/stm32f7xx_hal_sd.c ****       }
 5062              		.loc 1 2139 0
 5063 004c 0023     		movs	r3, #0
 5064 004e E363     		str	r3, [r4, #60]
 5065              	.L297:
ARM GAS  /tmp/ccps07Ev.s 			page 156


2145:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 5066              		.loc 1 2145 0
 5067 0050 236C     		ldr	r3, [r4, #64]
 5068 0052 B3B9     		cbnz	r3, .L301
2145:HALLIB/Src/stm32f7xx_hal_sd.c ****   {
 5069              		.loc 1 2145 0 is_stmt 0 discriminator 1
 5070 0054 E36B     		ldr	r3, [r4, #60]
 5071 0056 B3B9     		cbnz	r3, .L302
2147:HALLIB/Src/stm32f7xx_hal_sd.c ****     hsd->State = HAL_SD_STATE_READY;
 5072              		.loc 1 2147 0 is_stmt 1
 5073 0058 2046     		mov	r0, r4
 5074 005a FFF7FEFF 		bl	HAL_SD_GetCardState
 5075              	.LVL614:
2148:HALLIB/Src/stm32f7xx_hal_sd.c ****     if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 5076              		.loc 1 2148 0
 5077 005e 0123     		movs	r3, #1
 5078 0060 84F83430 		strb	r3, [r4, #52]
2149:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 5079              		.loc 1 2149 0
 5080 0064 0538     		subs	r0, r0, #5
 5081              	.LVL615:
 5082 0066 C0B2     		uxtb	r0, r0
 5083 0068 9842     		cmp	r0, r3
 5084 006a 03D8     		bhi	.L300
2151:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 5085              		.loc 1 2151 0
 5086 006c 2068     		ldr	r0, [r4]
 5087 006e FFF7FEFF 		bl	SDMMC_CmdStopTransfer
 5088              	.LVL616:
 5089 0072 A063     		str	r0, [r4, #56]
 5090              	.L300:
2153:HALLIB/Src/stm32f7xx_hal_sd.c ****     {
 5091              		.loc 1 2153 0
 5092 0074 A36B     		ldr	r3, [r4, #56]
 5093 0076 43B9     		cbnz	r3, .L303
2159:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 5094              		.loc 1 2159 0
 5095 0078 2046     		mov	r0, r4
 5096 007a FFF7FEFF 		bl	HAL_SD_AbortCallback
 5097              	.LVL617:
2163:HALLIB/Src/stm32f7xx_hal_sd.c **** }
 5098              		.loc 1 2163 0
 5099 007e 0020     		movs	r0, #0
 5100 0080 10BD     		pop	{r4, pc}
 5101              	.LVL618:
 5102              	.L301:
 5103 0082 0020     		movs	r0, #0
 5104 0084 10BD     		pop	{r4, pc}
 5105              	.LVL619:
 5106              	.L302:
 5107 0086 0020     		movs	r0, #0
 5108 0088 10BD     		pop	{r4, pc}
 5109              	.LVL620:
 5110              	.L303:
2155:HALLIB/Src/stm32f7xx_hal_sd.c ****     }
 5111              		.loc 1 2155 0
 5112 008a 0120     		movs	r0, #1
ARM GAS  /tmp/ccps07Ev.s 			page 157


2164:HALLIB/Src/stm32f7xx_hal_sd.c **** 
 5113              		.loc 1 2164 0
 5114 008c 10BD     		pop	{r4, pc}
 5115              	.LVL621:
 5116              	.L306:
 5117 008e 00BF     		.align	2
 5118              	.L305:
 5119 0090 00000000 		.word	SD_DMATxAbort
 5120 0094 00000000 		.word	SD_DMARxAbort
 5121              		.cfi_endproc
 5122              	.LFE162:
 5124              		.text
 5125              	.Letext0:
 5126              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 5127              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 5128              		.file 4 "Inc/stm32f767xx.h"
 5129              		.file 5 "Inc/stm32f7xx.h"
 5130              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 5131              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 5132              		.file 8 "HALLIB/Inc/stm32f7xx_ll_sdmmc.h"
 5133              		.file 9 "HALLIB/Inc/stm32f7xx_hal_sd.h"
 5134              		.file 10 "HALLIB/Inc/stm32f7xx_hal.h"
 5135              		.file 11 "CORE/core_cm7.h"
ARM GAS  /tmp/ccps07Ev.s 			page 158


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_sd.c
     /tmp/ccps07Ev.s:21     .text.SD_DMATransmitCplt:00000000 $t
     /tmp/ccps07Ev.s:25     .text.SD_DMATransmitCplt:00000000 SD_DMATransmitCplt
     /tmp/ccps07Ev.s:49     .text.SD_PowerON:00000000 $t
     /tmp/ccps07Ev.s:53     .text.SD_PowerON:00000000 SD_PowerON
     /tmp/ccps07Ev.s:253    .text.SD_PowerOFF:00000000 $t
     /tmp/ccps07Ev.s:257    .text.SD_PowerOFF:00000000 SD_PowerOFF
     /tmp/ccps07Ev.s:281    .text.SD_Read_IT:00000000 $t
     /tmp/ccps07Ev.s:285    .text.SD_Read_IT:00000000 SD_Read_IT
     /tmp/ccps07Ev.s:332    .text.SD_Write_IT:00000000 $t
     /tmp/ccps07Ev.s:336    .text.SD_Write_IT:00000000 SD_Write_IT
     /tmp/ccps07Ev.s:383    .text.SD_SendSDStatus:00000000 $t
     /tmp/ccps07Ev.s:387    .text.SD_SendSDStatus:00000000 SD_SendSDStatus
     /tmp/ccps07Ev.s:600    .text.SD_FindSCR:00000000 $t
     /tmp/ccps07Ev.s:604    .text.SD_FindSCR:00000000 SD_FindSCR
     /tmp/ccps07Ev.s:803    .text.SD_WideBus_Enable:00000000 $t
     /tmp/ccps07Ev.s:807    .text.SD_WideBus_Enable:00000000 SD_WideBus_Enable
     /tmp/ccps07Ev.s:899    .text.SD_WideBus_Disable:00000000 $t
     /tmp/ccps07Ev.s:903    .text.SD_WideBus_Disable:00000000 SD_WideBus_Disable
     /tmp/ccps07Ev.s:995    .text.SD_SendStatus:00000000 $t
     /tmp/ccps07Ev.s:999    .text.SD_SendStatus:00000000 SD_SendStatus
     /tmp/ccps07Ev.s:1064   .text.HAL_SD_MspInit:00000000 $t
     /tmp/ccps07Ev.s:1069   .text.HAL_SD_MspInit:00000000 HAL_SD_MspInit
     /tmp/ccps07Ev.s:1082   .text.HAL_SD_MspDeInit:00000000 $t
     /tmp/ccps07Ev.s:1087   .text.HAL_SD_MspDeInit:00000000 HAL_SD_MspDeInit
     /tmp/ccps07Ev.s:1100   .text.HAL_SD_DeInit:00000000 $t
     /tmp/ccps07Ev.s:1105   .text.HAL_SD_DeInit:00000000 HAL_SD_DeInit
     /tmp/ccps07Ev.s:1152   .text.HAL_SD_ReadBlocks:00000000 $t
     /tmp/ccps07Ev.s:1157   .text.HAL_SD_ReadBlocks:00000000 HAL_SD_ReadBlocks
     /tmp/ccps07Ev.s:1531   .text.HAL_SD_WriteBlocks:00000000 $t
     /tmp/ccps07Ev.s:1536   .text.HAL_SD_WriteBlocks:00000000 HAL_SD_WriteBlocks
     /tmp/ccps07Ev.s:1885   .text.HAL_SD_ReadBlocks_IT:00000000 $t
     /tmp/ccps07Ev.s:1890   .text.HAL_SD_ReadBlocks_IT:00000000 HAL_SD_ReadBlocks_IT
     /tmp/ccps07Ev.s:2088   .text.HAL_SD_WriteBlocks_IT:00000000 $t
     /tmp/ccps07Ev.s:2093   .text.HAL_SD_WriteBlocks_IT:00000000 HAL_SD_WriteBlocks_IT
     /tmp/ccps07Ev.s:2292   .text.HAL_SD_ReadBlocks_DMA:00000000 $t
     /tmp/ccps07Ev.s:2297   .text.HAL_SD_ReadBlocks_DMA:00000000 HAL_SD_ReadBlocks_DMA
     /tmp/ccps07Ev.s:2511   .text.HAL_SD_ReadBlocks_DMA:00000104 $d
     /tmp/ccps07Ev.s:3060   .text.SD_DMAReceiveCplt:00000000 SD_DMAReceiveCplt
     /tmp/ccps07Ev.s:4389   .text.SD_DMAError:00000000 SD_DMAError
     /tmp/ccps07Ev.s:2517   .text.HAL_SD_WriteBlocks_DMA:00000000 $t
     /tmp/ccps07Ev.s:2522   .text.HAL_SD_WriteBlocks_DMA:00000000 HAL_SD_WriteBlocks_DMA
     /tmp/ccps07Ev.s:2739   .text.HAL_SD_WriteBlocks_DMA:00000108 $d
     /tmp/ccps07Ev.s:2745   .text.HAL_SD_Erase:00000000 $t
     /tmp/ccps07Ev.s:2750   .text.HAL_SD_Erase:00000000 HAL_SD_Erase
     /tmp/ccps07Ev.s:2958   .text.HAL_SD_GetState:00000000 $t
     /tmp/ccps07Ev.s:2963   .text.HAL_SD_GetState:00000000 HAL_SD_GetState
     /tmp/ccps07Ev.s:2980   .text.HAL_SD_GetError:00000000 $t
     /tmp/ccps07Ev.s:2985   .text.HAL_SD_GetError:00000000 HAL_SD_GetError
     /tmp/ccps07Ev.s:3002   .text.HAL_SD_TxCpltCallback:00000000 $t
     /tmp/ccps07Ev.s:3007   .text.HAL_SD_TxCpltCallback:00000000 HAL_SD_TxCpltCallback
     /tmp/ccps07Ev.s:3020   .text.HAL_SD_RxCpltCallback:00000000 $t
     /tmp/ccps07Ev.s:3025   .text.HAL_SD_RxCpltCallback:00000000 HAL_SD_RxCpltCallback
     /tmp/ccps07Ev.s:3038   .text.HAL_SD_ErrorCallback:00000000 $t
     /tmp/ccps07Ev.s:3043   .text.HAL_SD_ErrorCallback:00000000 HAL_SD_ErrorCallback
     /tmp/ccps07Ev.s:3056   .text.SD_DMAReceiveCplt:00000000 $t
ARM GAS  /tmp/ccps07Ev.s 			page 159


     /tmp/ccps07Ev.s:3119   .text.HAL_SD_AbortCallback:00000000 $t
     /tmp/ccps07Ev.s:3124   .text.HAL_SD_AbortCallback:00000000 HAL_SD_AbortCallback
     /tmp/ccps07Ev.s:3137   .text.HAL_SD_GetCardCID:00000000 $t
     /tmp/ccps07Ev.s:3142   .text.HAL_SD_GetCardCID:00000000 HAL_SD_GetCardCID
     /tmp/ccps07Ev.s:3296   .text.HAL_SD_GetCardCSD:00000000 $t
     /tmp/ccps07Ev.s:3301   .text.HAL_SD_GetCardCSD:00000000 HAL_SD_GetCardCSD
     /tmp/ccps07Ev.s:3628   .text.SD_InitCard:00000000 $t
     /tmp/ccps07Ev.s:3632   .text.SD_InitCard:00000000 SD_InitCard
     /tmp/ccps07Ev.s:3813   .text.HAL_SD_InitCard:00000000 $t
     /tmp/ccps07Ev.s:3818   .text.HAL_SD_InitCard:00000000 HAL_SD_InitCard
     /tmp/ccps07Ev.s:3930   .text.HAL_SD_Init:00000000 $t
     /tmp/ccps07Ev.s:3935   .text.HAL_SD_Init:00000000 HAL_SD_Init
     /tmp/ccps07Ev.s:3993   .text.HAL_SD_GetCardStatus:00000000 $t
     /tmp/ccps07Ev.s:3998   .text.HAL_SD_GetCardStatus:00000000 HAL_SD_GetCardStatus
     /tmp/ccps07Ev.s:4155   .text.HAL_SD_GetCardInfo:00000000 $t
     /tmp/ccps07Ev.s:4160   .text.HAL_SD_GetCardInfo:00000000 HAL_SD_GetCardInfo
     /tmp/ccps07Ev.s:4200   .text.HAL_SD_ConfigWideBusOperation:00000000 $t
     /tmp/ccps07Ev.s:4205   .text.HAL_SD_ConfigWideBusOperation:00000000 HAL_SD_ConfigWideBusOperation
     /tmp/ccps07Ev.s:4334   .text.HAL_SD_GetCardState:00000000 $t
     /tmp/ccps07Ev.s:4339   .text.HAL_SD_GetCardState:00000000 HAL_SD_GetCardState
     /tmp/ccps07Ev.s:4385   .text.SD_DMAError:00000000 $t
     /tmp/ccps07Ev.s:4465   .text.SD_DMATxAbort:00000000 $t
     /tmp/ccps07Ev.s:4469   .text.SD_DMATxAbort:00000000 SD_DMATxAbort
     /tmp/ccps07Ev.s:4538   .text.SD_DMARxAbort:00000000 $t
     /tmp/ccps07Ev.s:4542   .text.SD_DMARxAbort:00000000 SD_DMARxAbort
     /tmp/ccps07Ev.s:4611   .text.HAL_SD_IRQHandler:00000000 $t
     /tmp/ccps07Ev.s:4616   .text.HAL_SD_IRQHandler:00000000 HAL_SD_IRQHandler
     /tmp/ccps07Ev.s:4901   .text.HAL_SD_IRQHandler:000001ac $d
     /tmp/ccps07Ev.s:4907   .text.HAL_SD_Abort:00000000 $t
     /tmp/ccps07Ev.s:4912   .text.HAL_SD_Abort:00000000 HAL_SD_Abort
     /tmp/ccps07Ev.s:4996   .text.HAL_SD_Abort_IT:00000000 $t
     /tmp/ccps07Ev.s:5001   .text.HAL_SD_Abort_IT:00000000 HAL_SD_Abort_IT
     /tmp/ccps07Ev.s:5119   .text.HAL_SD_Abort_IT:00000090 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SDMMC_CmdGoIdleState
SDMMC_CmdOperCond
SDMMC_CmdAppCommand
SDMMC_CmdAppOperCommand
SDMMC_GetResponse
SDMMC_PowerState_OFF
SDMMC_ReadFIFO
SDMMC_WriteFIFO
HAL_GetTick
SDMMC_CmdBlockLength
SDMMC_ConfigData
SDMMC_CmdStatusRegister
SDMMC_CmdSendSCR
SDMMC_CmdBusWidth
SDMMC_CmdSendStatus
SDMMC_CmdReadMultiBlock
SDMMC_CmdReadSingleBlock
SDMMC_CmdStopTransfer
SDMMC_CmdWriteMultiBlock
SDMMC_CmdWriteSingleBlock
HAL_DMA_Start_IT
ARM GAS  /tmp/ccps07Ev.s 			page 160


SDMMC_CmdSDEraseStartAdd
SDMMC_CmdSDEraseEndAdd
SDMMC_CmdErase
SDMMC_GetPowerState
SDMMC_CmdSendCID
SDMMC_CmdSetRelAdd
SDMMC_CmdSendCSD
SDMMC_CmdSelDesel
SDMMC_Init
SDMMC_PowerState_ON
HAL_Delay
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_DMA_Abort
