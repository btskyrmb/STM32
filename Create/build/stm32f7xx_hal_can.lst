ARM GAS  /tmp/cc1cC1gt.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_can.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  21              		.align	2
  22              		.weak	HAL_CAN_MspInit
  23              		.thumb
  24              		.thumb_func
  26              	HAL_CAN_MspInit:
  27              	.LFB138:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal_can.c"
   1:HALLIB/Src/stm32f7xx_hal_can.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_can.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_can.c ****   * @file    stm32f7xx_hal_can.c
   4:HALLIB/Src/stm32f7xx_hal_can.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:HALLIB/Src/stm32f7xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_can.c ****   *           + Configuration functions
  10:HALLIB/Src/stm32f7xx_hal_can.c ****   *           + Control functions
  11:HALLIB/Src/stm32f7xx_hal_can.c ****   *           + Interrupts management
  12:HALLIB/Src/stm32f7xx_hal_can.c ****   *           + Callbacks functions
  13:HALLIB/Src/stm32f7xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:HALLIB/Src/stm32f7xx_hal_can.c ****   *
  15:HALLIB/Src/stm32f7xx_hal_can.c ****   @verbatim
  16:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
  17:HALLIB/Src/stm32f7xx_hal_can.c ****                         ##### How to use this driver #####
  18:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
  19:HALLIB/Src/stm32f7xx_hal_can.c ****     [..]
  20:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:HALLIB/Src/stm32f7xx_hal_can.c ****           HAL_CAN_MspInit():
  22:HALLIB/Src/stm32f7xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:HALLIB/Src/stm32f7xx_hal_can.c ****          (++) Configure CAN pins
  24:HALLIB/Src/stm32f7xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:HALLIB/Src/stm32f7xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:HALLIB/Src/stm32f7xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:HALLIB/Src/stm32f7xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:HALLIB/Src/stm32f7xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:HALLIB/Src/stm32f7xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  30:HALLIB/Src/stm32f7xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
ARM GAS  /tmp/cc1cC1gt.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal_can.c **** 
  32:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:HALLIB/Src/stm32f7xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:HALLIB/Src/stm32f7xx_hal_can.c **** 
  35:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:HALLIB/Src/stm32f7xx_hal_can.c ****           functions:
  37:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:HALLIB/Src/stm32f7xx_hal_can.c **** 
  39:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:HALLIB/Src/stm32f7xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:HALLIB/Src/stm32f7xx_hal_can.c ****           messages.
  42:HALLIB/Src/stm32f7xx_hal_can.c **** 
  43:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:HALLIB/Src/stm32f7xx_hal_can.c ****           can be used:
  45:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:HALLIB/Src/stm32f7xx_hal_can.c ****                  message.
  47:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:HALLIB/Src/stm32f7xx_hal_can.c ****                  message.
  49:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:HALLIB/Src/stm32f7xx_hal_can.c ****                  mailboxes.
  51:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:HALLIB/Src/stm32f7xx_hal_can.c ****                  in a Tx mailbox.
  53:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:HALLIB/Src/stm32f7xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:HALLIB/Src/stm32f7xx_hal_can.c **** 
  56:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:HALLIB/Src/stm32f7xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:HALLIB/Src/stm32f7xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:HALLIB/Src/stm32f7xx_hal_can.c ****           stored in the Rx Fifo.
  60:HALLIB/Src/stm32f7xx_hal_can.c **** 
  61:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:HALLIB/Src/stm32f7xx_hal_can.c **** 
  63:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:HALLIB/Src/stm32f7xx_hal_can.c **** 
  65:HALLIB/Src/stm32f7xx_hal_can.c **** 
  66:HALLIB/Src/stm32f7xx_hal_can.c ****       *** Polling mode operation ***
  67:HALLIB/Src/stm32f7xx_hal_can.c ****       ==============================
  68:HALLIB/Src/stm32f7xx_hal_can.c ****     [..]
  69:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) Reception:
  70:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:HALLIB/Src/stm32f7xx_hal_can.c ****                  until at least one message is received.
  72:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:HALLIB/Src/stm32f7xx_hal_can.c **** 
  74:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) Transmission:
  75:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:HALLIB/Src/stm32f7xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) Then request transmission of a message using
  78:HALLIB/Src/stm32f7xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:HALLIB/Src/stm32f7xx_hal_can.c **** 
  80:HALLIB/Src/stm32f7xx_hal_can.c **** 
  81:HALLIB/Src/stm32f7xx_hal_can.c ****       *** Interrupt mode operation ***
  82:HALLIB/Src/stm32f7xx_hal_can.c ****       ================================
  83:HALLIB/Src/stm32f7xx_hal_can.c ****     [..]
  84:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:HALLIB/Src/stm32f7xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:HALLIB/Src/stm32f7xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  87:HALLIB/Src/stm32f7xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
ARM GAS  /tmp/cc1cC1gt.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal_can.c **** 
  89:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:HALLIB/Src/stm32f7xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:HALLIB/Src/stm32f7xx_hal_can.c **** 
  92:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:HALLIB/Src/stm32f7xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:HALLIB/Src/stm32f7xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:HALLIB/Src/stm32f7xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:HALLIB/Src/stm32f7xx_hal_can.c ****           here.
  97:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:HALLIB/Src/stm32f7xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:HALLIB/Src/stm32f7xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:HALLIB/Src/stm32f7xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:HALLIB/Src/stm32f7xx_hal_can.c ****                  read, the notification can be activated again.
 103:HALLIB/Src/stm32f7xx_hal_can.c **** 
 104:HALLIB/Src/stm32f7xx_hal_can.c **** 
 105:HALLIB/Src/stm32f7xx_hal_can.c ****       *** Sleep mode ***
 106:HALLIB/Src/stm32f7xx_hal_can.c ****       ==================
 107:HALLIB/Src/stm32f7xx_hal_can.c ****     [..]
 108:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:HALLIB/Src/stm32f7xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:HALLIB/Src/stm32f7xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:HALLIB/Src/stm32f7xx_hal_can.c ****           be completed.
 112:HALLIB/Src/stm32f7xx_hal_can.c **** 
 113:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:HALLIB/Src/stm32f7xx_hal_can.c ****           will be entered.
 115:HALLIB/Src/stm32f7xx_hal_can.c **** 
 116:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:HALLIB/Src/stm32f7xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:HALLIB/Src/stm32f7xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:HALLIB/Src/stm32f7xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:HALLIB/Src/stm32f7xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:HALLIB/Src/stm32f7xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:HALLIB/Src/stm32f7xx_hal_can.c **** 
 123:HALLIB/Src/stm32f7xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:HALLIB/Src/stm32f7xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:HALLIB/Src/stm32f7xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:HALLIB/Src/stm32f7xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:HALLIB/Src/stm32f7xx_hal_can.c **** 
 129:HALLIB/Src/stm32f7xx_hal_can.c ****   @endverbatim
 130:HALLIB/Src/stm32f7xx_hal_can.c ****   ******************************************************************************
 131:HALLIB/Src/stm32f7xx_hal_can.c ****   * @attention
 132:HALLIB/Src/stm32f7xx_hal_can.c ****   *
 133:HALLIB/Src/stm32f7xx_hal_can.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 134:HALLIB/Src/stm32f7xx_hal_can.c ****   *
 135:HALLIB/Src/stm32f7xx_hal_can.c ****   * Redistribution and use in source and binary forms, with or without modification,
 136:HALLIB/Src/stm32f7xx_hal_can.c ****   * are permitted provided that the following conditions are met:
 137:HALLIB/Src/stm32f7xx_hal_can.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 138:HALLIB/Src/stm32f7xx_hal_can.c ****   *      this list of conditions and the following disclaimer.
 139:HALLIB/Src/stm32f7xx_hal_can.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 140:HALLIB/Src/stm32f7xx_hal_can.c ****   *      this list of conditions and the following disclaimer in the documentation
 141:HALLIB/Src/stm32f7xx_hal_can.c ****   *      and/or other materials provided with the distribution.
 142:HALLIB/Src/stm32f7xx_hal_can.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 143:HALLIB/Src/stm32f7xx_hal_can.c ****   *      may be used to endorse or promote products derived from this software
 144:HALLIB/Src/stm32f7xx_hal_can.c ****   *      without specific prior written permission.
ARM GAS  /tmp/cc1cC1gt.s 			page 4


 145:HALLIB/Src/stm32f7xx_hal_can.c ****   *
 146:HALLIB/Src/stm32f7xx_hal_can.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 147:HALLIB/Src/stm32f7xx_hal_can.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 148:HALLIB/Src/stm32f7xx_hal_can.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 149:HALLIB/Src/stm32f7xx_hal_can.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 150:HALLIB/Src/stm32f7xx_hal_can.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 151:HALLIB/Src/stm32f7xx_hal_can.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 152:HALLIB/Src/stm32f7xx_hal_can.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 153:HALLIB/Src/stm32f7xx_hal_can.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 154:HALLIB/Src/stm32f7xx_hal_can.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 155:HALLIB/Src/stm32f7xx_hal_can.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 156:HALLIB/Src/stm32f7xx_hal_can.c ****   *
 157:HALLIB/Src/stm32f7xx_hal_can.c ****   ******************************************************************************
 158:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 159:HALLIB/Src/stm32f7xx_hal_can.c **** 
 160:HALLIB/Src/stm32f7xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 161:HALLIB/Src/stm32f7xx_hal_can.c **** #include "stm32f7xx_hal.h"
 162:HALLIB/Src/stm32f7xx_hal_can.c **** 
 163:HALLIB/Src/stm32f7xx_hal_can.c **** /** @addtogroup STM32F7xx_HAL_Driver
 164:HALLIB/Src/stm32f7xx_hal_can.c ****   * @{
 165:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 166:HALLIB/Src/stm32f7xx_hal_can.c **** 
 167:HALLIB/Src/stm32f7xx_hal_can.c **** #if defined(CAN1)
 168:HALLIB/Src/stm32f7xx_hal_can.c **** 
 169:HALLIB/Src/stm32f7xx_hal_can.c **** /** @defgroup CAN CAN
 170:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief CAN driver modules
 171:HALLIB/Src/stm32f7xx_hal_can.c ****   * @{
 172:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 173:HALLIB/Src/stm32f7xx_hal_can.c **** 
 174:HALLIB/Src/stm32f7xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 175:HALLIB/Src/stm32f7xx_hal_can.c **** 
 176:HALLIB/Src/stm32f7xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 177:HALLIB/Src/stm32f7xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 178:HALLIB/Src/stm32f7xx_hal_can.c **** #endif
 179:HALLIB/Src/stm32f7xx_hal_can.c **** 
 180:HALLIB/Src/stm32f7xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 181:HALLIB/Src/stm32f7xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 182:HALLIB/Src/stm32f7xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 183:HALLIB/Src/stm32f7xx_hal_can.c ****   * @{
 184:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 185:HALLIB/Src/stm32f7xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 186:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 187:HALLIB/Src/stm32f7xx_hal_can.c ****   * @}
 188:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 189:HALLIB/Src/stm32f7xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 190:HALLIB/Src/stm32f7xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 191:HALLIB/Src/stm32f7xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 192:HALLIB/Src/stm32f7xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 193:HALLIB/Src/stm32f7xx_hal_can.c **** 
 194:HALLIB/Src/stm32f7xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 195:HALLIB/Src/stm32f7xx_hal_can.c ****   * @{
 196:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 197:HALLIB/Src/stm32f7xx_hal_can.c **** 
 198:HALLIB/Src/stm32f7xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 199:HALLIB/Src/stm32f7xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 200:HALLIB/Src/stm32f7xx_hal_can.c ****  *
 201:HALLIB/Src/stm32f7xx_hal_can.c **** @verbatim
ARM GAS  /tmp/cc1cC1gt.s 			page 5


 202:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
 203:HALLIB/Src/stm32f7xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 204:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
 205:HALLIB/Src/stm32f7xx_hal_can.c ****     [..]  This section provides functions allowing to:
 206:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 207:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 208:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 209:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 210:HALLIB/Src/stm32f7xx_hal_can.c **** 
 211:HALLIB/Src/stm32f7xx_hal_can.c **** @endverbatim
 212:HALLIB/Src/stm32f7xx_hal_can.c ****   * @{
 213:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 214:HALLIB/Src/stm32f7xx_hal_can.c **** 
 215:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 216:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 217:HALLIB/Src/stm32f7xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 218:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 219:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 220:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status
 221:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 222:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 223:HALLIB/Src/stm32f7xx_hal_can.c **** {
 224:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t tickstart = 0U;
 225:HALLIB/Src/stm32f7xx_hal_can.c **** 
 226:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check CAN handle */
 227:HALLIB/Src/stm32f7xx_hal_can.c ****   if (hcan == NULL)
 228:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 229:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 230:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 231:HALLIB/Src/stm32f7xx_hal_can.c **** 
 232:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check the parameters */
 233:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 234:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 235:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 236:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 237:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 238:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 239:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 240:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 241:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 242:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 243:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 244:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 245:HALLIB/Src/stm32f7xx_hal_can.c **** 
 246:HALLIB/Src/stm32f7xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 247:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 248:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 249:HALLIB/Src/stm32f7xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 250:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 251:HALLIB/Src/stm32f7xx_hal_can.c **** 
 252:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Exit from sleep mode */
 253:HALLIB/Src/stm32f7xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 254:HALLIB/Src/stm32f7xx_hal_can.c **** 
 255:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Get tick */
 256:HALLIB/Src/stm32f7xx_hal_can.c ****   tickstart = HAL_GetTick();
 257:HALLIB/Src/stm32f7xx_hal_can.c **** 
 258:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
ARM GAS  /tmp/cc1cC1gt.s 			page 6


 259:HALLIB/Src/stm32f7xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 260:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 261:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 262:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 263:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Update error code */
 264:HALLIB/Src/stm32f7xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 265:HALLIB/Src/stm32f7xx_hal_can.c **** 
 266:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Change CAN state */
 267:HALLIB/Src/stm32f7xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 268:HALLIB/Src/stm32f7xx_hal_can.c **** 
 269:HALLIB/Src/stm32f7xx_hal_can.c ****       return HAL_ERROR;
 270:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 271:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 272:HALLIB/Src/stm32f7xx_hal_can.c **** 
 273:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Request initialisation */
 274:HALLIB/Src/stm32f7xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 275:HALLIB/Src/stm32f7xx_hal_can.c **** 
 276:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Get tick */
 277:HALLIB/Src/stm32f7xx_hal_can.c ****   tickstart = HAL_GetTick();
 278:HALLIB/Src/stm32f7xx_hal_can.c **** 
 279:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Wait initialisation acknowledge */
 280:HALLIB/Src/stm32f7xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 281:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 282:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 283:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 284:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Update error code */
 285:HALLIB/Src/stm32f7xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 286:HALLIB/Src/stm32f7xx_hal_can.c **** 
 287:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Change CAN state */
 288:HALLIB/Src/stm32f7xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 289:HALLIB/Src/stm32f7xx_hal_can.c **** 
 290:HALLIB/Src/stm32f7xx_hal_can.c ****       return HAL_ERROR;
 291:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 292:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 293:HALLIB/Src/stm32f7xx_hal_can.c **** 
 294:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Set the time triggered communication mode */
 295:HALLIB/Src/stm32f7xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 296:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 297:HALLIB/Src/stm32f7xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 298:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 299:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 300:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 301:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 302:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 303:HALLIB/Src/stm32f7xx_hal_can.c **** 
 304:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Set the automatic bus-off management */
 305:HALLIB/Src/stm32f7xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 306:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 307:HALLIB/Src/stm32f7xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 308:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 309:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 310:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 311:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 312:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 313:HALLIB/Src/stm32f7xx_hal_can.c **** 
 314:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Set the automatic wake-up mode */
 315:HALLIB/Src/stm32f7xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
ARM GAS  /tmp/cc1cC1gt.s 			page 7


 316:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 317:HALLIB/Src/stm32f7xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 318:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 319:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 320:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 321:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 322:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 323:HALLIB/Src/stm32f7xx_hal_can.c **** 
 324:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Set the automatic retransmission */
 325:HALLIB/Src/stm32f7xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 326:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 327:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 328:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 329:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 330:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 331:HALLIB/Src/stm32f7xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 332:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 333:HALLIB/Src/stm32f7xx_hal_can.c **** 
 334:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 335:HALLIB/Src/stm32f7xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 336:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 337:HALLIB/Src/stm32f7xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 338:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 339:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 340:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 341:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 342:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 343:HALLIB/Src/stm32f7xx_hal_can.c **** 
 344:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Set the transmit FIFO priority */
 345:HALLIB/Src/stm32f7xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 346:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 347:HALLIB/Src/stm32f7xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 348:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 349:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 350:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 351:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 352:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 353:HALLIB/Src/stm32f7xx_hal_can.c **** 
 354:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Set the bit timing register */
 355:HALLIB/Src/stm32f7xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 356:HALLIB/Src/stm32f7xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 357:HALLIB/Src/stm32f7xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 358:HALLIB/Src/stm32f7xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 359:HALLIB/Src/stm32f7xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 360:HALLIB/Src/stm32f7xx_hal_can.c **** 
 361:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Initialize the error code */
 362:HALLIB/Src/stm32f7xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 363:HALLIB/Src/stm32f7xx_hal_can.c **** 
 364:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Initialize the CAN state */
 365:HALLIB/Src/stm32f7xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 366:HALLIB/Src/stm32f7xx_hal_can.c **** 
 367:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Return function status */
 368:HALLIB/Src/stm32f7xx_hal_can.c ****   return HAL_OK;
 369:HALLIB/Src/stm32f7xx_hal_can.c **** }
 370:HALLIB/Src/stm32f7xx_hal_can.c **** 
 371:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 372:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
ARM GAS  /tmp/cc1cC1gt.s 			page 8


 373:HALLIB/Src/stm32f7xx_hal_can.c ****   *         reset values.
 374:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 375:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 376:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status
 377:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 378:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 379:HALLIB/Src/stm32f7xx_hal_can.c **** {
 380:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check CAN handle */
 381:HALLIB/Src/stm32f7xx_hal_can.c ****   if (hcan == NULL)
 382:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 383:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 384:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 385:HALLIB/Src/stm32f7xx_hal_can.c **** 
 386:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check the parameters */
 387:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 388:HALLIB/Src/stm32f7xx_hal_can.c **** 
 389:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Stop the CAN module */
 390:HALLIB/Src/stm32f7xx_hal_can.c ****   HAL_CAN_Stop(hcan);
 391:HALLIB/Src/stm32f7xx_hal_can.c **** 
 392:HALLIB/Src/stm32f7xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 393:HALLIB/Src/stm32f7xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 394:HALLIB/Src/stm32f7xx_hal_can.c **** 
 395:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Reset the CAN peripheral */
 396:HALLIB/Src/stm32f7xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 397:HALLIB/Src/stm32f7xx_hal_can.c **** 
 398:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 399:HALLIB/Src/stm32f7xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 400:HALLIB/Src/stm32f7xx_hal_can.c **** 
 401:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Change CAN state */
 402:HALLIB/Src/stm32f7xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 403:HALLIB/Src/stm32f7xx_hal_can.c **** 
 404:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Return function status */
 405:HALLIB/Src/stm32f7xx_hal_can.c ****   return HAL_OK;
 406:HALLIB/Src/stm32f7xx_hal_can.c **** }
 407:HALLIB/Src/stm32f7xx_hal_can.c **** 
 408:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 409:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 410:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 411:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 412:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
 413:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 414:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 415:HALLIB/Src/stm32f7xx_hal_can.c **** {
  29              		.loc 1 415 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE138:
  39 0002 00BF     		.section	.text.HAL_CAN_Init,"ax",%progbits
  40              		.align	2
  41              		.global	HAL_CAN_Init
  42              		.thumb
  43              		.thumb_func
ARM GAS  /tmp/cc1cC1gt.s 			page 9


  45              	HAL_CAN_Init:
  46              	.LFB136:
 223:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t tickstart = 0U;
  47              		.loc 1 223 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              	.LVL1:
 227:HALLIB/Src/stm32f7xx_hal_can.c ****   {
  52              		.loc 1 227 0
  53 0000 0028     		cmp	r0, #0
  54 0002 00F0A480 		beq	.L21
 223:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t tickstart = 0U;
  55              		.loc 1 223 0
  56 0006 38B5     		push	{r3, r4, r5, lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 16
  59              		.cfi_offset 3, -16
  60              		.cfi_offset 4, -12
  61              		.cfi_offset 5, -8
  62              		.cfi_offset 14, -4
  63 0008 0446     		mov	r4, r0
 246:HALLIB/Src/stm32f7xx_hal_can.c ****   {
  64              		.loc 1 246 0
  65 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
  66 000e 13F0FF0F 		tst	r3, #255
  67 0012 01D1     		bne	.L4
 249:HALLIB/Src/stm32f7xx_hal_can.c ****   }
  68              		.loc 1 249 0
  69 0014 FFF7FEFF 		bl	HAL_CAN_MspInit
  70              	.LVL2:
  71              	.L4:
 253:HALLIB/Src/stm32f7xx_hal_can.c **** 
  72              		.loc 1 253 0
  73 0018 2268     		ldr	r2, [r4]
  74 001a 1368     		ldr	r3, [r2]
  75 001c 23F00203 		bic	r3, r3, #2
  76 0020 1360     		str	r3, [r2]
 256:HALLIB/Src/stm32f7xx_hal_can.c **** 
  77              		.loc 1 256 0
  78 0022 FFF7FEFF 		bl	HAL_GetTick
  79              	.LVL3:
  80 0026 0546     		mov	r5, r0
  81              	.LVL4:
 259:HALLIB/Src/stm32f7xx_hal_can.c ****   {
  82              		.loc 1 259 0
  83 0028 0DE0     		b	.L5
  84              	.LVL5:
  85              	.L6:
 261:HALLIB/Src/stm32f7xx_hal_can.c ****     {
  86              		.loc 1 261 0
  87 002a FFF7FEFF 		bl	HAL_GetTick
  88              	.LVL6:
  89 002e 401B     		subs	r0, r0, r5
  90 0030 0A28     		cmp	r0, #10
  91 0032 08D9     		bls	.L5
 264:HALLIB/Src/stm32f7xx_hal_can.c **** 
ARM GAS  /tmp/cc1cC1gt.s 			page 10


  92              		.loc 1 264 0
  93 0034 636A     		ldr	r3, [r4, #36]
  94 0036 43F40033 		orr	r3, r3, #131072
  95 003a 6362     		str	r3, [r4, #36]
 267:HALLIB/Src/stm32f7xx_hal_can.c **** 
  96              		.loc 1 267 0
  97 003c 0523     		movs	r3, #5
  98 003e 84F82030 		strb	r3, [r4, #32]
 269:HALLIB/Src/stm32f7xx_hal_can.c ****     }
  99              		.loc 1 269 0
 100 0042 0120     		movs	r0, #1
 101 0044 38BD     		pop	{r3, r4, r5, pc}
 102              	.LVL7:
 103              	.L5:
 259:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 104              		.loc 1 259 0
 105 0046 2368     		ldr	r3, [r4]
 106 0048 5A68     		ldr	r2, [r3, #4]
 107 004a 12F0020F 		tst	r2, #2
 108 004e ECD1     		bne	.L6
 274:HALLIB/Src/stm32f7xx_hal_can.c **** 
 109              		.loc 1 274 0
 110 0050 1A68     		ldr	r2, [r3]
 111 0052 42F00102 		orr	r2, r2, #1
 112 0056 1A60     		str	r2, [r3]
 277:HALLIB/Src/stm32f7xx_hal_can.c **** 
 113              		.loc 1 277 0
 114 0058 FFF7FEFF 		bl	HAL_GetTick
 115              	.LVL8:
 116 005c 0546     		mov	r5, r0
 117              	.LVL9:
 280:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 118              		.loc 1 280 0
 119 005e 0DE0     		b	.L7
 120              	.LVL10:
 121              	.L8:
 282:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 122              		.loc 1 282 0
 123 0060 FFF7FEFF 		bl	HAL_GetTick
 124              	.LVL11:
 125 0064 401B     		subs	r0, r0, r5
 126 0066 0A28     		cmp	r0, #10
 127 0068 08D9     		bls	.L7
 285:HALLIB/Src/stm32f7xx_hal_can.c **** 
 128              		.loc 1 285 0
 129 006a 636A     		ldr	r3, [r4, #36]
 130 006c 43F40033 		orr	r3, r3, #131072
 131 0070 6362     		str	r3, [r4, #36]
 288:HALLIB/Src/stm32f7xx_hal_can.c **** 
 132              		.loc 1 288 0
 133 0072 0523     		movs	r3, #5
 134 0074 84F82030 		strb	r3, [r4, #32]
 290:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 135              		.loc 1 290 0
 136 0078 0120     		movs	r0, #1
 137 007a 38BD     		pop	{r3, r4, r5, pc}
 138              	.LVL12:
ARM GAS  /tmp/cc1cC1gt.s 			page 11


 139              	.L7:
 280:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 140              		.loc 1 280 0
 141 007c 2368     		ldr	r3, [r4]
 142 007e 5A68     		ldr	r2, [r3, #4]
 143 0080 12F0010F 		tst	r2, #1
 144 0084 ECD0     		beq	.L8
 295:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 145              		.loc 1 295 0
 146 0086 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 147 0088 012A     		cmp	r2, #1
 148 008a 04D1     		bne	.L9
 297:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 149              		.loc 1 297 0
 150 008c 1A68     		ldr	r2, [r3]
 151 008e 42F08002 		orr	r2, r2, #128
 152 0092 1A60     		str	r2, [r3]
 153 0094 03E0     		b	.L10
 154              	.L9:
 301:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 155              		.loc 1 301 0
 156 0096 1A68     		ldr	r2, [r3]
 157 0098 22F08002 		bic	r2, r2, #128
 158 009c 1A60     		str	r2, [r3]
 159              	.L10:
 305:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 160              		.loc 1 305 0
 161 009e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 162 00a0 012B     		cmp	r3, #1
 163 00a2 05D1     		bne	.L11
 307:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 164              		.loc 1 307 0
 165 00a4 2268     		ldr	r2, [r4]
 166 00a6 1368     		ldr	r3, [r2]
 167 00a8 43F04003 		orr	r3, r3, #64
 168 00ac 1360     		str	r3, [r2]
 169 00ae 04E0     		b	.L12
 170              	.L11:
 311:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 171              		.loc 1 311 0
 172 00b0 2268     		ldr	r2, [r4]
 173 00b2 1368     		ldr	r3, [r2]
 174 00b4 23F04003 		bic	r3, r3, #64
 175 00b8 1360     		str	r3, [r2]
 176              	.L12:
 315:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 177              		.loc 1 315 0
 178 00ba A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 179 00bc 012B     		cmp	r3, #1
 180 00be 05D1     		bne	.L13
 317:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 181              		.loc 1 317 0
 182 00c0 2268     		ldr	r2, [r4]
 183 00c2 1368     		ldr	r3, [r2]
 184 00c4 43F02003 		orr	r3, r3, #32
 185 00c8 1360     		str	r3, [r2]
 186 00ca 04E0     		b	.L14
ARM GAS  /tmp/cc1cC1gt.s 			page 12


 187              	.L13:
 321:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 188              		.loc 1 321 0
 189 00cc 2268     		ldr	r2, [r4]
 190 00ce 1368     		ldr	r3, [r2]
 191 00d0 23F02003 		bic	r3, r3, #32
 192 00d4 1360     		str	r3, [r2]
 193              	.L14:
 325:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 194              		.loc 1 325 0
 195 00d6 E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 196 00d8 012B     		cmp	r3, #1
 197 00da 05D1     		bne	.L15
 327:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 198              		.loc 1 327 0
 199 00dc 2268     		ldr	r2, [r4]
 200 00de 1368     		ldr	r3, [r2]
 201 00e0 23F01003 		bic	r3, r3, #16
 202 00e4 1360     		str	r3, [r2]
 203 00e6 04E0     		b	.L16
 204              	.L15:
 331:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 205              		.loc 1 331 0
 206 00e8 2268     		ldr	r2, [r4]
 207 00ea 1368     		ldr	r3, [r2]
 208 00ec 43F01003 		orr	r3, r3, #16
 209 00f0 1360     		str	r3, [r2]
 210              	.L16:
 335:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 211              		.loc 1 335 0
 212 00f2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 213 00f4 012B     		cmp	r3, #1
 214 00f6 05D1     		bne	.L17
 337:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 215              		.loc 1 337 0
 216 00f8 2268     		ldr	r2, [r4]
 217 00fa 1368     		ldr	r3, [r2]
 218 00fc 43F00803 		orr	r3, r3, #8
 219 0100 1360     		str	r3, [r2]
 220 0102 04E0     		b	.L18
 221              	.L17:
 341:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 222              		.loc 1 341 0
 223 0104 2268     		ldr	r2, [r4]
 224 0106 1368     		ldr	r3, [r2]
 225 0108 23F00803 		bic	r3, r3, #8
 226 010c 1360     		str	r3, [r2]
 227              	.L18:
 345:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 228              		.loc 1 345 0
 229 010e 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 230 0110 012B     		cmp	r3, #1
 231 0112 05D1     		bne	.L19
 347:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 232              		.loc 1 347 0
 233 0114 2268     		ldr	r2, [r4]
 234 0116 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cc1cC1gt.s 			page 13


 235 0118 43F00403 		orr	r3, r3, #4
 236 011c 1360     		str	r3, [r2]
 237 011e 04E0     		b	.L20
 238              	.L19:
 351:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 239              		.loc 1 351 0
 240 0120 2268     		ldr	r2, [r4]
 241 0122 1368     		ldr	r3, [r2]
 242 0124 23F00403 		bic	r3, r3, #4
 243 0128 1360     		str	r3, [r2]
 244              	.L20:
 355:HALLIB/Src/stm32f7xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 245              		.loc 1 355 0
 246 012a 2168     		ldr	r1, [r4]
 247 012c A268     		ldr	r2, [r4, #8]
 248 012e E368     		ldr	r3, [r4, #12]
 249 0130 1A43     		orrs	r2, r2, r3
 250 0132 2369     		ldr	r3, [r4, #16]
 251 0134 1A43     		orrs	r2, r2, r3
 252 0136 6369     		ldr	r3, [r4, #20]
 253 0138 1A43     		orrs	r2, r2, r3
 254 013a 6368     		ldr	r3, [r4, #4]
 255 013c 013B     		subs	r3, r3, #1
 256 013e 1343     		orrs	r3, r3, r2
 257 0140 CB61     		str	r3, [r1, #28]
 362:HALLIB/Src/stm32f7xx_hal_can.c **** 
 258              		.loc 1 362 0
 259 0142 0020     		movs	r0, #0
 260 0144 6062     		str	r0, [r4, #36]
 365:HALLIB/Src/stm32f7xx_hal_can.c **** 
 261              		.loc 1 365 0
 262 0146 0123     		movs	r3, #1
 263 0148 84F82030 		strb	r3, [r4, #32]
 368:HALLIB/Src/stm32f7xx_hal_can.c **** }
 264              		.loc 1 368 0
 265 014c 38BD     		pop	{r3, r4, r5, pc}
 266              	.LVL13:
 267              	.L21:
 268              	.LCFI1:
 269              		.cfi_def_cfa_offset 0
 270              		.cfi_restore 3
 271              		.cfi_restore 4
 272              		.cfi_restore 5
 273              		.cfi_restore 14
 229:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 274              		.loc 1 229 0
 275 014e 0120     		movs	r0, #1
 276              	.LVL14:
 277 0150 7047     		bx	lr
 278              		.cfi_endproc
 279              	.LFE136:
 281 0152 00BF     		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 282              		.align	2
 283              		.weak	HAL_CAN_MspDeInit
 284              		.thumb
 285              		.thumb_func
 287              	HAL_CAN_MspDeInit:
ARM GAS  /tmp/cc1cC1gt.s 			page 14


 288              	.LFB139:
 416:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 417:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
 418:HALLIB/Src/stm32f7xx_hal_can.c **** 
 419:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 420:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 421:HALLIB/Src/stm32f7xx_hal_can.c ****    */
 422:HALLIB/Src/stm32f7xx_hal_can.c **** }
 423:HALLIB/Src/stm32f7xx_hal_can.c **** 
 424:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 425:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 426:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 427:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 428:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
 429:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 430:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 431:HALLIB/Src/stm32f7xx_hal_can.c **** {
 289              		.loc 1 431 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294              	.LVL15:
 295 0000 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE139:
 299 0002 00BF     		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 300              		.align	2
 301              		.global	HAL_CAN_ConfigFilter
 302              		.thumb
 303              		.thumb_func
 305              	HAL_CAN_ConfigFilter:
 306              	.LFB140:
 432:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 433:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
 434:HALLIB/Src/stm32f7xx_hal_can.c **** 
 435:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 436:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 437:HALLIB/Src/stm32f7xx_hal_can.c ****    */
 438:HALLIB/Src/stm32f7xx_hal_can.c **** }
 439:HALLIB/Src/stm32f7xx_hal_can.c **** 
 440:HALLIB/Src/stm32f7xx_hal_can.c **** 
 441:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 442:HALLIB/Src/stm32f7xx_hal_can.c ****   * @}
 443:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 444:HALLIB/Src/stm32f7xx_hal_can.c **** 
 445:HALLIB/Src/stm32f7xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 446:HALLIB/Src/stm32f7xx_hal_can.c ****  *  @brief    Configuration functions.
 447:HALLIB/Src/stm32f7xx_hal_can.c ****  *
 448:HALLIB/Src/stm32f7xx_hal_can.c **** @verbatim
 449:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
 450:HALLIB/Src/stm32f7xx_hal_can.c ****               ##### Configuration functions #####
 451:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
 452:HALLIB/Src/stm32f7xx_hal_can.c ****     [..]  This section provides functions allowing to:
 453:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 454:HALLIB/Src/stm32f7xx_hal_can.c **** 
 455:HALLIB/Src/stm32f7xx_hal_can.c **** @endverbatim
ARM GAS  /tmp/cc1cC1gt.s 			page 15


 456:HALLIB/Src/stm32f7xx_hal_can.c ****   * @{
 457:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 458:HALLIB/Src/stm32f7xx_hal_can.c **** 
 459:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 460:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 461:HALLIB/Src/stm32f7xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 462:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 463:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 464:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 465:HALLIB/Src/stm32f7xx_hal_can.c ****   *         contains the filter configuration information.
 466:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
 467:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 468:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 469:HALLIB/Src/stm32f7xx_hal_can.c **** {
 307              		.loc 1 469 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312              	.LVL16:
 313              		.loc 1 469 0
 314 0000 70B4     		push	{r4, r5, r6}
 315              	.LCFI2:
 316              		.cfi_def_cfa_offset 12
 317              		.cfi_offset 4, -12
 318              		.cfi_offset 5, -8
 319              		.cfi_offset 6, -4
 320              	.LVL17:
 470:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t filternbrbitpos = 0U;
 471:HALLIB/Src/stm32f7xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 321              		.loc 1 471 0
 322 0002 0368     		ldr	r3, [r0]
 323              	.LVL18:
 472:HALLIB/Src/stm32f7xx_hal_can.c **** 
 473:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 324              		.loc 1 473 0
 325 0004 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 326 0008 D2B2     		uxtb	r2, r2
 327 000a 012A     		cmp	r2, #1
 328 000c 04D0     		beq	.L26
 474:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 329              		.loc 1 474 0 discriminator 1
 330 000e 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 331 0012 D2B2     		uxtb	r2, r2
 473:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 332              		.loc 1 473 0 discriminator 1
 333 0014 022A     		cmp	r2, #2
 334 0016 7ED1     		bne	.L27
 335              	.L26:
 475:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 476:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check the parameters */
 477:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 478:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 479:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 480:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 481:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 482:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
ARM GAS  /tmp/cc1cC1gt.s 			page 16


 483:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 484:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
 485:HALLIB/Src/stm32f7xx_hal_can.c **** 
 486:HALLIB/Src/stm32f7xx_hal_can.c **** #if defined(CAN3)
 487:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check the CAN instance */
 488:HALLIB/Src/stm32f7xx_hal_can.c ****     if (hcan->Instance == CAN3)
 336              		.loc 1 488 0
 337 0018 424A     		ldr	r2, .L40
 338 001a 9342     		cmp	r3, r2
 339 001c 00D0     		beq	.L28
 489:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 490:HALLIB/Src/stm32f7xx_hal_can.c ****       /* CAN3 is single instance with 14 dedicated filters banks */
 491:HALLIB/Src/stm32f7xx_hal_can.c **** 
 492:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Check the parameters */
 493:HALLIB/Src/stm32f7xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 494:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 495:HALLIB/Src/stm32f7xx_hal_can.c ****     else
 496:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 497:HALLIB/Src/stm32f7xx_hal_can.c ****       /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 498:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Select master instance to access the filter banks */
 499:HALLIB/Src/stm32f7xx_hal_can.c ****       can_ip = CAN1;
 340              		.loc 1 499 0
 341 001e 424B     		ldr	r3, .L40+4
 342              	.LVL19:
 343              	.L28:
 500:HALLIB/Src/stm32f7xx_hal_can.c **** 
 501:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Check the parameters */
 502:HALLIB/Src/stm32f7xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 503:HALLIB/Src/stm32f7xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 504:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 505:HALLIB/Src/stm32f7xx_hal_can.c **** #elif defined(CAN2)
 506:HALLIB/Src/stm32f7xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 507:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Select master instance to access the filter banks */
 508:HALLIB/Src/stm32f7xx_hal_can.c ****     can_ip = CAN1;
 509:HALLIB/Src/stm32f7xx_hal_can.c **** 
 510:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check the parameters */
 511:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 512:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 513:HALLIB/Src/stm32f7xx_hal_can.c **** #else
 514:HALLIB/Src/stm32f7xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 515:HALLIB/Src/stm32f7xx_hal_can.c **** 
 516:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check the parameters */
 517:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 518:HALLIB/Src/stm32f7xx_hal_can.c **** #endif
 519:HALLIB/Src/stm32f7xx_hal_can.c **** 
 520:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Initialisation mode for the filter */
 521:HALLIB/Src/stm32f7xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 344              		.loc 1 521 0
 345 0020 D3F80022 		ldr	r2, [r3, #512]
 346 0024 42F00102 		orr	r2, r2, #1
 347 0028 C3F80022 		str	r2, [r3, #512]
 522:HALLIB/Src/stm32f7xx_hal_can.c **** 
 523:HALLIB/Src/stm32f7xx_hal_can.c **** #if defined(CAN3)
 524:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check the CAN instance */
 525:HALLIB/Src/stm32f7xx_hal_can.c ****     if (can_ip == CAN1)
 348              		.loc 1 525 0
 349 002c 3E4A     		ldr	r2, .L40+4
ARM GAS  /tmp/cc1cC1gt.s 			page 17


 350 002e 9342     		cmp	r3, r2
 351 0030 0CD1     		bne	.L29
 526:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 527:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Select the start filter number of CAN2 slave instance */
 528:HALLIB/Src/stm32f7xx_hal_can.c ****       CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 352              		.loc 1 528 0
 353 0032 D3F80022 		ldr	r2, [r3, #512]
 354 0036 22F47C52 		bic	r2, r2, #16128
 355 003a C3F80022 		str	r2, [r3, #512]
 529:HALLIB/Src/stm32f7xx_hal_can.c ****       SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 356              		.loc 1 529 0
 357 003e D3F80022 		ldr	r2, [r3, #512]
 358 0042 486A     		ldr	r0, [r1, #36]
 359              	.LVL20:
 360 0044 42EA0022 		orr	r2, r2, r0, lsl #8
 361 0048 C3F80022 		str	r2, [r3, #512]
 362              	.L29:
 530:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 531:HALLIB/Src/stm32f7xx_hal_can.c **** 
 532:HALLIB/Src/stm32f7xx_hal_can.c **** #elif defined(CAN2)
 533:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 534:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 535:HALLIB/Src/stm32f7xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 536:HALLIB/Src/stm32f7xx_hal_can.c **** 
 537:HALLIB/Src/stm32f7xx_hal_can.c **** #endif
 538:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Convert filter number into bit position */
 539:HALLIB/Src/stm32f7xx_hal_can.c ****     filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 363              		.loc 1 539 0
 364 004c 4A69     		ldr	r2, [r1, #20]
 365 004e 0120     		movs	r0, #1
 366 0050 00FA02F2 		lsl	r2, r0, r2
 367              	.LVL21:
 540:HALLIB/Src/stm32f7xx_hal_can.c **** 
 541:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Filter Deactivation */
 542:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 368              		.loc 1 542 0
 369 0054 D3F81C02 		ldr	r0, [r3, #540]
 370 0058 D443     		mvns	r4, r2
 371 005a 2040     		ands	r0, r0, r4
 372 005c C3F81C02 		str	r0, [r3, #540]
 543:HALLIB/Src/stm32f7xx_hal_can.c **** 
 544:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Filter Scale */
 545:HALLIB/Src/stm32f7xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 373              		.loc 1 545 0
 374 0060 C869     		ldr	r0, [r1, #28]
 375 0062 A8B9     		cbnz	r0, .L30
 546:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 547:HALLIB/Src/stm32f7xx_hal_can.c ****       /* 16-bit scale for the filter */
 548:HALLIB/Src/stm32f7xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 376              		.loc 1 548 0
 377 0064 D3F80C02 		ldr	r0, [r3, #524]
 378 0068 2040     		ands	r0, r0, r4
 379 006a C3F80C02 		str	r0, [r3, #524]
 549:HALLIB/Src/stm32f7xx_hal_can.c **** 
 550:HALLIB/Src/stm32f7xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 551:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 552:HALLIB/Src/stm32f7xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
ARM GAS  /tmp/cc1cC1gt.s 			page 18


 380              		.loc 1 552 0
 381 006e 4869     		ldr	r0, [r1, #20]
 553:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 382              		.loc 1 553 0
 383 0070 CE68     		ldr	r6, [r1, #12]
 554:HALLIB/Src/stm32f7xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 384              		.loc 1 554 0
 385 0072 8D88     		ldrh	r5, [r1, #4]
 553:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 386              		.loc 1 553 0
 387 0074 45EA0645 		orr	r5, r5, r6, lsl #16
 552:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 388              		.loc 1 552 0
 389 0078 4830     		adds	r0, r0, #72
 390 007a 43F83050 		str	r5, [r3, r0, lsl #3]
 555:HALLIB/Src/stm32f7xx_hal_can.c **** 
 556:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 557:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 558:HALLIB/Src/stm32f7xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 391              		.loc 1 558 0
 392 007e 4869     		ldr	r0, [r1, #20]
 559:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 393              		.loc 1 559 0
 394 0080 8E68     		ldr	r6, [r1, #8]
 560:HALLIB/Src/stm32f7xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 395              		.loc 1 560 0
 396 0082 0D88     		ldrh	r5, [r1]
 559:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 397              		.loc 1 559 0
 398 0084 45EA0645 		orr	r5, r5, r6, lsl #16
 558:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 399              		.loc 1 558 0
 400 0088 4830     		adds	r0, r0, #72
 401 008a 03EBC000 		add	r0, r3, r0, lsl #3
 402 008e 4560     		str	r5, [r0, #4]
 403              	.L30:
 561:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 562:HALLIB/Src/stm32f7xx_hal_can.c **** 
 563:HALLIB/Src/stm32f7xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 404              		.loc 1 563 0
 405 0090 C869     		ldr	r0, [r1, #28]
 406 0092 0128     		cmp	r0, #1
 407 0094 15D1     		bne	.L31
 564:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 565:HALLIB/Src/stm32f7xx_hal_can.c ****       /* 32-bit scale for the filter */
 566:HALLIB/Src/stm32f7xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 408              		.loc 1 566 0
 409 0096 D3F80C02 		ldr	r0, [r3, #524]
 410 009a 1043     		orrs	r0, r0, r2
 411 009c C3F80C02 		str	r0, [r3, #524]
 567:HALLIB/Src/stm32f7xx_hal_can.c **** 
 568:HALLIB/Src/stm32f7xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 569:HALLIB/Src/stm32f7xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 412              		.loc 1 569 0
 413 00a0 4869     		ldr	r0, [r1, #20]
 570:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 414              		.loc 1 570 0
ARM GAS  /tmp/cc1cC1gt.s 			page 19


 415 00a2 0E68     		ldr	r6, [r1]
 571:HALLIB/Src/stm32f7xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 416              		.loc 1 571 0
 417 00a4 8D88     		ldrh	r5, [r1, #4]
 570:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 418              		.loc 1 570 0
 419 00a6 45EA0645 		orr	r5, r5, r6, lsl #16
 569:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 420              		.loc 1 569 0
 421 00aa 4830     		adds	r0, r0, #72
 422 00ac 43F83050 		str	r5, [r3, r0, lsl #3]
 572:HALLIB/Src/stm32f7xx_hal_can.c **** 
 573:HALLIB/Src/stm32f7xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 574:HALLIB/Src/stm32f7xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 423              		.loc 1 574 0
 424 00b0 4869     		ldr	r0, [r1, #20]
 575:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 425              		.loc 1 575 0
 426 00b2 8E68     		ldr	r6, [r1, #8]
 576:HALLIB/Src/stm32f7xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 427              		.loc 1 576 0
 428 00b4 8D89     		ldrh	r5, [r1, #12]
 575:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 429              		.loc 1 575 0
 430 00b6 45EA0645 		orr	r5, r5, r6, lsl #16
 574:HALLIB/Src/stm32f7xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 431              		.loc 1 574 0
 432 00ba 4830     		adds	r0, r0, #72
 433 00bc 03EBC000 		add	r0, r3, r0, lsl #3
 434 00c0 4560     		str	r5, [r0, #4]
 435              	.L31:
 577:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 578:HALLIB/Src/stm32f7xx_hal_can.c **** 
 579:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Filter Mode */
 580:HALLIB/Src/stm32f7xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 436              		.loc 1 580 0
 437 00c2 8869     		ldr	r0, [r1, #24]
 438 00c4 28B9     		cbnz	r0, .L32
 581:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 582:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 583:HALLIB/Src/stm32f7xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 439              		.loc 1 583 0
 440 00c6 D3F80402 		ldr	r0, [r3, #516]
 441 00ca 2040     		ands	r0, r0, r4
 442 00cc C3F80402 		str	r0, [r3, #516]
 443 00d0 04E0     		b	.L33
 444              	.L32:
 584:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 585:HALLIB/Src/stm32f7xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 586:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 587:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Identifier list mode for the filter*/
 588:HALLIB/Src/stm32f7xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 445              		.loc 1 588 0
 446 00d2 D3F80402 		ldr	r0, [r3, #516]
 447 00d6 1043     		orrs	r0, r0, r2
 448 00d8 C3F80402 		str	r0, [r3, #516]
 449              	.L33:
ARM GAS  /tmp/cc1cC1gt.s 			page 20


 589:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 590:HALLIB/Src/stm32f7xx_hal_can.c **** 
 591:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Filter FIFO assignment */
 592:HALLIB/Src/stm32f7xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 450              		.loc 1 592 0
 451 00dc 0869     		ldr	r0, [r1, #16]
 452 00de 28B9     		cbnz	r0, .L34
 593:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 594:HALLIB/Src/stm32f7xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 595:HALLIB/Src/stm32f7xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 453              		.loc 1 595 0
 454 00e0 D3F81402 		ldr	r0, [r3, #532]
 455 00e4 0440     		ands	r4, r4, r0
 456 00e6 C3F81442 		str	r4, [r3, #532]
 457 00ea 04E0     		b	.L35
 458              	.L34:
 596:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 597:HALLIB/Src/stm32f7xx_hal_can.c ****     else
 598:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 599:HALLIB/Src/stm32f7xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 600:HALLIB/Src/stm32f7xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 459              		.loc 1 600 0
 460 00ec D3F81402 		ldr	r0, [r3, #532]
 461 00f0 1043     		orrs	r0, r0, r2
 462 00f2 C3F81402 		str	r0, [r3, #532]
 463              	.L35:
 601:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 602:HALLIB/Src/stm32f7xx_hal_can.c **** 
 603:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Filter activation */
 604:HALLIB/Src/stm32f7xx_hal_can.c ****     if (sFilterConfig->FilterActivation == ENABLE)
 464              		.loc 1 604 0
 465 00f6 096A     		ldr	r1, [r1, #32]
 466              	.LVL22:
 467 00f8 0129     		cmp	r1, #1
 468 00fa 04D1     		bne	.L36
 605:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 606:HALLIB/Src/stm32f7xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 469              		.loc 1 606 0
 470 00fc D3F81C12 		ldr	r1, [r3, #540]
 471 0100 0A43     		orrs	r2, r2, r1
 472              	.LVL23:
 473 0102 C3F81C22 		str	r2, [r3, #540]
 474              	.L36:
 607:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 608:HALLIB/Src/stm32f7xx_hal_can.c **** 
 609:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 610:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 475              		.loc 1 610 0
 476 0106 D3F80022 		ldr	r2, [r3, #512]
 477 010a 22F00102 		bic	r2, r2, #1
 478 010e C3F80022 		str	r2, [r3, #512]
 611:HALLIB/Src/stm32f7xx_hal_can.c **** 
 612:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Return function status */
 613:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_OK;
 479              		.loc 1 613 0
 480 0112 0020     		movs	r0, #0
 481 0114 04E0     		b	.L37
ARM GAS  /tmp/cc1cC1gt.s 			page 21


 482              	.LVL24:
 483              	.L27:
 614:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 615:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 616:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 617:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code */
 618:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 484              		.loc 1 618 0
 485 0116 436A     		ldr	r3, [r0, #36]
 486              	.LVL25:
 487 0118 43F48023 		orr	r3, r3, #262144
 488 011c 4362     		str	r3, [r0, #36]
 619:HALLIB/Src/stm32f7xx_hal_can.c **** 
 620:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 489              		.loc 1 620 0
 490 011e 0120     		movs	r0, #1
 491              	.LVL26:
 492              	.L37:
 621:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 622:HALLIB/Src/stm32f7xx_hal_can.c **** }
 493              		.loc 1 622 0
 494 0120 70BC     		pop	{r4, r5, r6}
 495              	.LCFI3:
 496              		.cfi_restore 6
 497              		.cfi_restore 5
 498              		.cfi_restore 4
 499              		.cfi_def_cfa_offset 0
 500 0122 7047     		bx	lr
 501              	.L41:
 502              		.align	2
 503              	.L40:
 504 0124 00340040 		.word	1073755136
 505 0128 00640040 		.word	1073767424
 506              		.cfi_endproc
 507              	.LFE140:
 509              		.section	.text.HAL_CAN_Start,"ax",%progbits
 510              		.align	2
 511              		.global	HAL_CAN_Start
 512              		.thumb
 513              		.thumb_func
 515              	HAL_CAN_Start:
 516              	.LFB141:
 623:HALLIB/Src/stm32f7xx_hal_can.c **** 
 624:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 625:HALLIB/Src/stm32f7xx_hal_can.c ****   * @}
 626:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 627:HALLIB/Src/stm32f7xx_hal_can.c **** 
 628:HALLIB/Src/stm32f7xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 629:HALLIB/Src/stm32f7xx_hal_can.c ****  *  @brief    Control functions
 630:HALLIB/Src/stm32f7xx_hal_can.c ****  *
 631:HALLIB/Src/stm32f7xx_hal_can.c **** @verbatim
 632:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
 633:HALLIB/Src/stm32f7xx_hal_can.c ****                       ##### Control functions #####
 634:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
 635:HALLIB/Src/stm32f7xx_hal_can.c ****     [..]  This section provides functions allowing to:
 636:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 637:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
ARM GAS  /tmp/cc1cC1gt.s 			page 22


 638:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 639:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 640:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 641:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 642:HALLIB/Src/stm32f7xx_hal_can.c ****                                              and activate the corresponding
 643:HALLIB/Src/stm32f7xx_hal_can.c ****                                              transmission request
 644:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 645:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 646:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 647:HALLIB/Src/stm32f7xx_hal_can.c ****                                              pending on the selected Tx mailbox
 648:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 649:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 650:HALLIB/Src/stm32f7xx_hal_can.c **** 
 651:HALLIB/Src/stm32f7xx_hal_can.c **** @endverbatim
 652:HALLIB/Src/stm32f7xx_hal_can.c ****   * @{
 653:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 654:HALLIB/Src/stm32f7xx_hal_can.c **** 
 655:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 656:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Start the CAN module.
 657:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 658:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 659:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status
 660:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 661:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
 662:HALLIB/Src/stm32f7xx_hal_can.c **** {
 517              		.loc 1 662 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              	.LVL27:
 522 0000 38B5     		push	{r3, r4, r5, lr}
 523              	.LCFI4:
 524              		.cfi_def_cfa_offset 16
 525              		.cfi_offset 3, -16
 526              		.cfi_offset 4, -12
 527              		.cfi_offset 5, -8
 528              		.cfi_offset 14, -4
 529              	.LVL28:
 663:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t tickstart = 0U;
 664:HALLIB/Src/stm32f7xx_hal_can.c **** 
 665:HALLIB/Src/stm32f7xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 530              		.loc 1 665 0
 531 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 532 0006 DBB2     		uxtb	r3, r3
 533 0008 012B     		cmp	r3, #1
 534 000a 22D1     		bne	.L43
 535 000c 0446     		mov	r4, r0
 666:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 667:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Change CAN peripheral state */
 668:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 536              		.loc 1 668 0
 537 000e 0223     		movs	r3, #2
 538 0010 80F82030 		strb	r3, [r0, #32]
 669:HALLIB/Src/stm32f7xx_hal_can.c **** 
 670:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Request leave initialisation */
 671:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 539              		.loc 1 671 0
ARM GAS  /tmp/cc1cC1gt.s 			page 23


 540 0014 0268     		ldr	r2, [r0]
 541 0016 1368     		ldr	r3, [r2]
 542 0018 23F00103 		bic	r3, r3, #1
 543 001c 1360     		str	r3, [r2]
 672:HALLIB/Src/stm32f7xx_hal_can.c **** 
 673:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Get tick */
 674:HALLIB/Src/stm32f7xx_hal_can.c ****     tickstart = HAL_GetTick();
 544              		.loc 1 674 0
 545 001e FFF7FEFF 		bl	HAL_GetTick
 546              	.LVL29:
 547 0022 0546     		mov	r5, r0
 548              	.LVL30:
 675:HALLIB/Src/stm32f7xx_hal_can.c **** 
 676:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Wait the acknowledge */
 677:HALLIB/Src/stm32f7xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 549              		.loc 1 677 0
 550 0024 0DE0     		b	.L44
 551              	.LVL31:
 552              	.L46:
 678:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 679:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Check for the Timeout */
 680:HALLIB/Src/stm32f7xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 553              		.loc 1 680 0
 554 0026 FFF7FEFF 		bl	HAL_GetTick
 555              	.LVL32:
 556 002a 401B     		subs	r0, r0, r5
 557 002c 0A28     		cmp	r0, #10
 558 002e 08D9     		bls	.L44
 681:HALLIB/Src/stm32f7xx_hal_can.c ****       {
 682:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Update error code */
 683:HALLIB/Src/stm32f7xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 559              		.loc 1 683 0
 560 0030 636A     		ldr	r3, [r4, #36]
 561 0032 43F40033 		orr	r3, r3, #131072
 562 0036 6362     		str	r3, [r4, #36]
 684:HALLIB/Src/stm32f7xx_hal_can.c **** 
 685:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Change CAN state */
 686:HALLIB/Src/stm32f7xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 563              		.loc 1 686 0
 564 0038 0523     		movs	r3, #5
 565 003a 84F82030 		strb	r3, [r4, #32]
 687:HALLIB/Src/stm32f7xx_hal_can.c **** 
 688:HALLIB/Src/stm32f7xx_hal_can.c ****         return HAL_ERROR;
 566              		.loc 1 688 0
 567 003e 0120     		movs	r0, #1
 568 0040 38BD     		pop	{r3, r4, r5, pc}
 569              	.LVL33:
 570              	.L44:
 677:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 571              		.loc 1 677 0
 572 0042 2368     		ldr	r3, [r4]
 573 0044 5B68     		ldr	r3, [r3, #4]
 574 0046 13F0010F 		tst	r3, #1
 575 004a ECD1     		bne	.L46
 689:HALLIB/Src/stm32f7xx_hal_can.c ****       }
 690:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 691:HALLIB/Src/stm32f7xx_hal_can.c **** 
ARM GAS  /tmp/cc1cC1gt.s 			page 24


 692:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Reset the CAN ErrorCode */
 693:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 576              		.loc 1 693 0
 577 004c 0020     		movs	r0, #0
 578 004e 6062     		str	r0, [r4, #36]
 694:HALLIB/Src/stm32f7xx_hal_can.c **** 
 695:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Return function status */
 696:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_OK;
 579              		.loc 1 696 0
 580 0050 38BD     		pop	{r3, r4, r5, pc}
 581              	.LVL34:
 582              	.L43:
 697:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 698:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 699:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 700:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code */
 701:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 583              		.loc 1 701 0
 584 0052 436A     		ldr	r3, [r0, #36]
 585 0054 43F40023 		orr	r3, r3, #524288
 586 0058 4362     		str	r3, [r0, #36]
 702:HALLIB/Src/stm32f7xx_hal_can.c **** 
 703:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 587              		.loc 1 703 0
 588 005a 0120     		movs	r0, #1
 589              	.LVL35:
 704:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 705:HALLIB/Src/stm32f7xx_hal_can.c **** }
 590              		.loc 1 705 0
 591 005c 38BD     		pop	{r3, r4, r5, pc}
 592              		.cfi_endproc
 593              	.LFE141:
 595 005e 00BF     		.section	.text.HAL_CAN_Stop,"ax",%progbits
 596              		.align	2
 597              		.global	HAL_CAN_Stop
 598              		.thumb
 599              		.thumb_func
 601              	HAL_CAN_Stop:
 602              	.LFB142:
 706:HALLIB/Src/stm32f7xx_hal_can.c **** 
 707:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 708:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
 709:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 710:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 711:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status
 712:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 713:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
 714:HALLIB/Src/stm32f7xx_hal_can.c **** {
 603              		.loc 1 714 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              	.LVL36:
 608 0000 38B5     		push	{r3, r4, r5, lr}
 609              	.LCFI5:
 610              		.cfi_def_cfa_offset 16
 611              		.cfi_offset 3, -16
ARM GAS  /tmp/cc1cC1gt.s 			page 25


 612              		.cfi_offset 4, -12
 613              		.cfi_offset 5, -8
 614              		.cfi_offset 14, -4
 615              	.LVL37:
 715:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t tickstart = 0U;
 716:HALLIB/Src/stm32f7xx_hal_can.c **** 
 717:HALLIB/Src/stm32f7xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 616              		.loc 1 717 0
 617 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 618 0006 DBB2     		uxtb	r3, r3
 619 0008 022B     		cmp	r3, #2
 620 000a 25D1     		bne	.L49
 621 000c 0446     		mov	r4, r0
 718:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 719:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Request initialisation */
 720:HALLIB/Src/stm32f7xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 622              		.loc 1 720 0
 623 000e 0268     		ldr	r2, [r0]
 624 0010 1368     		ldr	r3, [r2]
 625 0012 43F00103 		orr	r3, r3, #1
 626 0016 1360     		str	r3, [r2]
 721:HALLIB/Src/stm32f7xx_hal_can.c **** 
 722:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Get tick */
 723:HALLIB/Src/stm32f7xx_hal_can.c ****     tickstart = HAL_GetTick();
 627              		.loc 1 723 0
 628 0018 FFF7FEFF 		bl	HAL_GetTick
 629              	.LVL38:
 630 001c 0546     		mov	r5, r0
 631              	.LVL39:
 724:HALLIB/Src/stm32f7xx_hal_can.c **** 
 725:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Wait the acknowledge */
 726:HALLIB/Src/stm32f7xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 632              		.loc 1 726 0
 633 001e 0DE0     		b	.L50
 634              	.LVL40:
 635              	.L52:
 727:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 728:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Check for the Timeout */
 729:HALLIB/Src/stm32f7xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 636              		.loc 1 729 0
 637 0020 FFF7FEFF 		bl	HAL_GetTick
 638              	.LVL41:
 639 0024 401B     		subs	r0, r0, r5
 640 0026 0A28     		cmp	r0, #10
 641 0028 08D9     		bls	.L50
 730:HALLIB/Src/stm32f7xx_hal_can.c ****       {
 731:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Update error code */
 732:HALLIB/Src/stm32f7xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 642              		.loc 1 732 0
 643 002a 636A     		ldr	r3, [r4, #36]
 644 002c 43F40033 		orr	r3, r3, #131072
 645 0030 6362     		str	r3, [r4, #36]
 733:HALLIB/Src/stm32f7xx_hal_can.c **** 
 734:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Change CAN state */
 735:HALLIB/Src/stm32f7xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 646              		.loc 1 735 0
 647 0032 0523     		movs	r3, #5
ARM GAS  /tmp/cc1cC1gt.s 			page 26


 648 0034 84F82030 		strb	r3, [r4, #32]
 736:HALLIB/Src/stm32f7xx_hal_can.c **** 
 737:HALLIB/Src/stm32f7xx_hal_can.c ****         return HAL_ERROR;
 649              		.loc 1 737 0
 650 0038 0120     		movs	r0, #1
 651 003a 38BD     		pop	{r3, r4, r5, pc}
 652              	.LVL42:
 653              	.L50:
 726:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 654              		.loc 1 726 0
 655 003c 2368     		ldr	r3, [r4]
 656 003e 5A68     		ldr	r2, [r3, #4]
 657 0040 12F0010F 		tst	r2, #1
 658 0044 ECD0     		beq	.L52
 738:HALLIB/Src/stm32f7xx_hal_can.c ****       }
 739:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 740:HALLIB/Src/stm32f7xx_hal_can.c **** 
 741:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Exit from sleep mode */
 742:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 659              		.loc 1 742 0
 660 0046 1A68     		ldr	r2, [r3]
 661 0048 22F00202 		bic	r2, r2, #2
 662 004c 1A60     		str	r2, [r3]
 743:HALLIB/Src/stm32f7xx_hal_can.c **** 
 744:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Change CAN peripheral state */
 745:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
 663              		.loc 1 745 0
 664 004e 0123     		movs	r3, #1
 665 0050 84F82030 		strb	r3, [r4, #32]
 746:HALLIB/Src/stm32f7xx_hal_can.c **** 
 747:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Return function status */
 748:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_OK;
 666              		.loc 1 748 0
 667 0054 0020     		movs	r0, #0
 668 0056 38BD     		pop	{r3, r4, r5, pc}
 669              	.LVL43:
 670              	.L49:
 749:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 750:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 751:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 752:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code */
 753:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 671              		.loc 1 753 0
 672 0058 436A     		ldr	r3, [r0, #36]
 673 005a 43F48013 		orr	r3, r3, #1048576
 674 005e 4362     		str	r3, [r0, #36]
 754:HALLIB/Src/stm32f7xx_hal_can.c **** 
 755:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 675              		.loc 1 755 0
 676 0060 0120     		movs	r0, #1
 677              	.LVL44:
 756:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 757:HALLIB/Src/stm32f7xx_hal_can.c **** }
 678              		.loc 1 757 0
 679 0062 38BD     		pop	{r3, r4, r5, pc}
 680              		.cfi_endproc
 681              	.LFE142:
ARM GAS  /tmp/cc1cC1gt.s 			page 27


 683              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 684              		.align	2
 685              		.global	HAL_CAN_DeInit
 686              		.thumb
 687              		.thumb_func
 689              	HAL_CAN_DeInit:
 690              	.LFB137:
 379:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check CAN handle */
 691              		.loc 1 379 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              	.LVL45:
 381:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 696              		.loc 1 381 0
 697 0000 80B1     		cbz	r0, .L56
 379:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check CAN handle */
 698              		.loc 1 379 0
 699 0002 10B5     		push	{r4, lr}
 700              	.LCFI6:
 701              		.cfi_def_cfa_offset 8
 702              		.cfi_offset 4, -8
 703              		.cfi_offset 14, -4
 704 0004 0446     		mov	r4, r0
 390:HALLIB/Src/stm32f7xx_hal_can.c **** 
 705              		.loc 1 390 0
 706 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 707              	.LVL46:
 393:HALLIB/Src/stm32f7xx_hal_can.c **** 
 708              		.loc 1 393 0
 709 000a 2046     		mov	r0, r4
 710 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 711              	.LVL47:
 396:HALLIB/Src/stm32f7xx_hal_can.c **** 
 712              		.loc 1 396 0
 713 0010 2268     		ldr	r2, [r4]
 714 0012 1368     		ldr	r3, [r2]
 715 0014 43F40043 		orr	r3, r3, #32768
 716 0018 1360     		str	r3, [r2]
 399:HALLIB/Src/stm32f7xx_hal_can.c **** 
 717              		.loc 1 399 0
 718 001a 0020     		movs	r0, #0
 719 001c 6062     		str	r0, [r4, #36]
 402:HALLIB/Src/stm32f7xx_hal_can.c **** 
 720              		.loc 1 402 0
 721 001e 84F82000 		strb	r0, [r4, #32]
 405:HALLIB/Src/stm32f7xx_hal_can.c **** }
 722              		.loc 1 405 0
 723 0022 10BD     		pop	{r4, pc}
 724              	.LVL48:
 725              	.L56:
 726              	.LCFI7:
 727              		.cfi_def_cfa_offset 0
 728              		.cfi_restore 4
 729              		.cfi_restore 14
 383:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 730              		.loc 1 383 0
ARM GAS  /tmp/cc1cC1gt.s 			page 28


 731 0024 0120     		movs	r0, #1
 732              	.LVL49:
 733 0026 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE137:
 737              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 738              		.align	2
 739              		.global	HAL_CAN_RequestSleep
 740              		.thumb
 741              		.thumb_func
 743              	HAL_CAN_RequestSleep:
 744              	.LFB143:
 758:HALLIB/Src/stm32f7xx_hal_can.c **** 
 759:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 760:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
 761:HALLIB/Src/stm32f7xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
 762:HALLIB/Src/stm32f7xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
 763:HALLIB/Src/stm32f7xx_hal_can.c ****   *         of a CAN frame) has been completed.
 764:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 765:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 766:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status.
 767:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 768:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
 769:HALLIB/Src/stm32f7xx_hal_can.c **** {
 745              		.loc 1 769 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              		@ link register save eliminated.
 750              	.LVL50:
 770:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 751              		.loc 1 770 0
 752 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 753 0004 DBB2     		uxtb	r3, r3
 754 0006 012B     		cmp	r3, #1
 755 0008 04D0     		beq	.L60
 771:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 756              		.loc 1 771 0 discriminator 1
 757 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 758 000e DBB2     		uxtb	r3, r3
 770:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 759              		.loc 1 770 0 discriminator 1
 760 0010 022B     		cmp	r3, #2
 761 0012 06D1     		bne	.L61
 762              	.L60:
 772:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 773:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Request Sleep mode */
 774:HALLIB/Src/stm32f7xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 763              		.loc 1 774 0
 764 0014 0268     		ldr	r2, [r0]
 765 0016 1368     		ldr	r3, [r2]
 766 0018 43F00203 		orr	r3, r3, #2
 767 001c 1360     		str	r3, [r2]
 775:HALLIB/Src/stm32f7xx_hal_can.c **** 
 776:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Return function status */
 777:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_OK;
 768              		.loc 1 777 0
ARM GAS  /tmp/cc1cC1gt.s 			page 29


 769 001e 0020     		movs	r0, #0
 770              	.LVL51:
 771 0020 7047     		bx	lr
 772              	.LVL52:
 773              	.L61:
 778:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 779:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 780:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 781:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code */
 782:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 774              		.loc 1 782 0
 775 0022 436A     		ldr	r3, [r0, #36]
 776 0024 43F48023 		orr	r3, r3, #262144
 777 0028 4362     		str	r3, [r0, #36]
 783:HALLIB/Src/stm32f7xx_hal_can.c **** 
 784:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Return function status */
 785:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 778              		.loc 1 785 0
 779 002a 0120     		movs	r0, #1
 780              	.LVL53:
 786:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 787:HALLIB/Src/stm32f7xx_hal_can.c **** }
 781              		.loc 1 787 0
 782 002c 7047     		bx	lr
 783              		.cfi_endproc
 784              	.LFE143:
 786 002e 00BF     		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 787              		.align	2
 788              		.global	HAL_CAN_WakeUp
 789              		.thumb
 790              		.thumb_func
 792              	HAL_CAN_WakeUp:
 793              	.LFB144:
 788:HALLIB/Src/stm32f7xx_hal_can.c **** 
 789:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 790:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Wake up from sleep mode.
 791:HALLIB/Src/stm32f7xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
 792:HALLIB/Src/stm32f7xx_hal_can.c ****   *         is exited.
 793:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 794:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 795:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status.
 796:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 797:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
 798:HALLIB/Src/stm32f7xx_hal_can.c **** {
 794              		.loc 1 798 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 8
 797              		@ frame_needed = 0, uses_anonymous_args = 0
 798              		@ link register save eliminated.
 799              	.LVL54:
 800 0000 82B0     		sub	sp, sp, #8
 801              	.LCFI8:
 802              		.cfi_def_cfa_offset 8
 799:HALLIB/Src/stm32f7xx_hal_can.c ****   __IO uint32_t count = 0;
 803              		.loc 1 799 0
 804 0002 0023     		movs	r3, #0
 805 0004 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc1cC1gt.s 			page 30


 806              	.LVL55:
 800:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t timeout = 1000000U;
 801:HALLIB/Src/stm32f7xx_hal_can.c **** 
 802:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 807              		.loc 1 802 0
 808 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 809 000a DBB2     		uxtb	r3, r3
 810 000c 012B     		cmp	r3, #1
 811 000e 04D0     		beq	.L64
 803:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 812              		.loc 1 803 0 discriminator 1
 813 0010 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 814 0014 DBB2     		uxtb	r3, r3
 802:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 815              		.loc 1 802 0 discriminator 1
 816 0016 022B     		cmp	r3, #2
 817 0018 17D1     		bne	.L65
 818              	.L64:
 804:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 805:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Wake up request */
 806:HALLIB/Src/stm32f7xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 819              		.loc 1 806 0
 820 001a 0268     		ldr	r2, [r0]
 821 001c 1368     		ldr	r3, [r2]
 822 001e 23F00203 		bic	r3, r3, #2
 823 0022 1360     		str	r3, [r2]
 824              	.L68:
 807:HALLIB/Src/stm32f7xx_hal_can.c **** 
 808:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Wait sleep mode is exited */
 809:HALLIB/Src/stm32f7xx_hal_can.c ****     do
 810:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 811:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Check if timeout is reached */
 812:HALLIB/Src/stm32f7xx_hal_can.c ****       if (++count > timeout)
 825              		.loc 1 812 0
 826 0024 019B     		ldr	r3, [sp, #4]
 827 0026 0133     		adds	r3, r3, #1
 828 0028 0193     		str	r3, [sp, #4]
 829 002a 0B4A     		ldr	r2, .L70
 830 002c 9342     		cmp	r3, r2
 831 002e 05D9     		bls	.L66
 813:HALLIB/Src/stm32f7xx_hal_can.c ****       {
 814:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Update error code */
 815:HALLIB/Src/stm32f7xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 832              		.loc 1 815 0
 833 0030 436A     		ldr	r3, [r0, #36]
 834 0032 43F40033 		orr	r3, r3, #131072
 835 0036 4362     		str	r3, [r0, #36]
 816:HALLIB/Src/stm32f7xx_hal_can.c **** 
 817:HALLIB/Src/stm32f7xx_hal_can.c ****         return HAL_ERROR;
 836              		.loc 1 817 0
 837 0038 0120     		movs	r0, #1
 838              	.LVL56:
 839 003a 0BE0     		b	.L67
 840              	.LVL57:
 841              	.L66:
 818:HALLIB/Src/stm32f7xx_hal_can.c ****       }
 819:HALLIB/Src/stm32f7xx_hal_can.c ****     }
ARM GAS  /tmp/cc1cC1gt.s 			page 31


 820:HALLIB/Src/stm32f7xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET);
 842              		.loc 1 820 0
 843 003c 0368     		ldr	r3, [r0]
 844 003e 5B68     		ldr	r3, [r3, #4]
 845 0040 13F0020F 		tst	r3, #2
 846 0044 EED1     		bne	.L68
 821:HALLIB/Src/stm32f7xx_hal_can.c **** 
 822:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Return function status */
 823:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_OK;
 847              		.loc 1 823 0
 848 0046 0020     		movs	r0, #0
 849              	.LVL58:
 850 0048 04E0     		b	.L67
 851              	.LVL59:
 852              	.L65:
 824:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 825:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 826:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 827:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code */
 828:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 853              		.loc 1 828 0
 854 004a 436A     		ldr	r3, [r0, #36]
 855 004c 43F48023 		orr	r3, r3, #262144
 856 0050 4362     		str	r3, [r0, #36]
 829:HALLIB/Src/stm32f7xx_hal_can.c **** 
 830:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 857              		.loc 1 830 0
 858 0052 0120     		movs	r0, #1
 859              	.LVL60:
 860              	.L67:
 831:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 832:HALLIB/Src/stm32f7xx_hal_can.c **** }
 861              		.loc 1 832 0
 862 0054 02B0     		add	sp, sp, #8
 863              	.LCFI9:
 864              		.cfi_def_cfa_offset 0
 865              		@ sp needed
 866 0056 7047     		bx	lr
 867              	.L71:
 868              		.align	2
 869              	.L70:
 870 0058 40420F00 		.word	1000000
 871              		.cfi_endproc
 872              	.LFE144:
 874              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 875              		.align	2
 876              		.global	HAL_CAN_IsSleepActive
 877              		.thumb
 878              		.thumb_func
 880              	HAL_CAN_IsSleepActive:
 881              	.LFB145:
 833:HALLIB/Src/stm32f7xx_hal_can.c **** 
 834:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 835:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Check is sleep mode is active.
 836:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 837:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 838:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval Status
ARM GAS  /tmp/cc1cC1gt.s 			page 32


 839:HALLIB/Src/stm32f7xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
 840:HALLIB/Src/stm32f7xx_hal_can.c ****   *          - 1 : Sleep mode is active.
 841:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 842:HALLIB/Src/stm32f7xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
 843:HALLIB/Src/stm32f7xx_hal_can.c **** {
 882              		.loc 1 843 0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 0
 885              		@ frame_needed = 0, uses_anonymous_args = 0
 886              		@ link register save eliminated.
 887              	.LVL61:
 844:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t status = 0U;
 845:HALLIB/Src/stm32f7xx_hal_can.c **** 
 846:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 888              		.loc 1 846 0
 889 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 890 0004 DBB2     		uxtb	r3, r3
 891 0006 012B     		cmp	r3, #1
 892 0008 04D0     		beq	.L73
 847:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 893              		.loc 1 847 0 discriminator 1
 894 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 895 000e DBB2     		uxtb	r3, r3
 846:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 896              		.loc 1 846 0 discriminator 1
 897 0010 022B     		cmp	r3, #2
 898 0012 06D1     		bne	.L75
 899              	.L73:
 848:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 849:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check Sleep mode */
 850:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 900              		.loc 1 850 0
 901 0014 0368     		ldr	r3, [r0]
 902 0016 5B68     		ldr	r3, [r3, #4]
 903 0018 13F0020F 		tst	r3, #2
 904 001c 03D1     		bne	.L76
 844:HALLIB/Src/stm32f7xx_hal_can.c **** 
 905              		.loc 1 844 0
 906 001e 0020     		movs	r0, #0
 907              	.LVL62:
 908 0020 7047     		bx	lr
 909              	.LVL63:
 910              	.L75:
 911 0022 0020     		movs	r0, #0
 912              	.LVL64:
 913 0024 7047     		bx	lr
 914              	.LVL65:
 915              	.L76:
 851:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 852:HALLIB/Src/stm32f7xx_hal_can.c ****       status = 1U;
 916              		.loc 1 852 0
 917 0026 0120     		movs	r0, #1
 918              	.LVL66:
 853:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 854:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 855:HALLIB/Src/stm32f7xx_hal_can.c **** 
 856:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Return function status */
ARM GAS  /tmp/cc1cC1gt.s 			page 33


 857:HALLIB/Src/stm32f7xx_hal_can.c ****   return status;
 858:HALLIB/Src/stm32f7xx_hal_can.c **** }
 919              		.loc 1 858 0
 920 0028 7047     		bx	lr
 921              		.cfi_endproc
 922              	.LFE145:
 924 002a 00BF     		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 925              		.align	2
 926              		.global	HAL_CAN_AddTxMessage
 927              		.thumb
 928              		.thumb_func
 930              	HAL_CAN_AddTxMessage:
 931              	.LFB146:
 859:HALLIB/Src/stm32f7xx_hal_can.c **** 
 860:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 861:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
 862:HALLIB/Src/stm32f7xx_hal_can.c ****   *         corresponding transmission request.
 863:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 864:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 865:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
 866:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
 867:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
 868:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
 869:HALLIB/Src/stm32f7xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
 870:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status
 871:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 872:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
 873:HALLIB/Src/stm32f7xx_hal_can.c **** {
 932              		.loc 1 873 0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 0
 935              		@ frame_needed = 0, uses_anonymous_args = 0
 936              		@ link register save eliminated.
 937              	.LVL67:
 938 0000 70B4     		push	{r4, r5, r6}
 939              	.LCFI10:
 940              		.cfi_def_cfa_offset 12
 941              		.cfi_offset 4, -12
 942              		.cfi_offset 5, -8
 943              		.cfi_offset 6, -4
 874:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t transmitmailbox;
 875:HALLIB/Src/stm32f7xx_hal_can.c **** 
 876:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check the parameters */
 877:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 878:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 879:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 880:HALLIB/Src/stm32f7xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
 881:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 882:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
 883:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 884:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 885:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 886:HALLIB/Src/stm32f7xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 887:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 888:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 889:HALLIB/Src/stm32f7xx_hal_can.c **** 
 890:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
ARM GAS  /tmp/cc1cC1gt.s 			page 34


 944              		.loc 1 890 0
 945 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 946 0006 E4B2     		uxtb	r4, r4
 947 0008 012C     		cmp	r4, #1
 948 000a 04D0     		beq	.L78
 891:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 949              		.loc 1 891 0 discriminator 1
 950 000c 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 951 0010 E4B2     		uxtb	r4, r4
 890:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 952              		.loc 1 890 0 discriminator 1
 953 0012 022C     		cmp	r4, #2
 954 0014 65D1     		bne	.L79
 955              	.L78:
 892:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 893:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
 894:HALLIB/Src/stm32f7xx_hal_can.c ****     if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 956              		.loc 1 894 0
 957 0016 0468     		ldr	r4, [r0]
 958 0018 A568     		ldr	r5, [r4, #8]
 959 001a 15F0806F 		tst	r5, #67108864
 960 001e 07D1     		bne	.L80
 895:HALLIB/Src/stm32f7xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 961              		.loc 1 895 0 discriminator 1
 962 0020 A568     		ldr	r5, [r4, #8]
 894:HALLIB/Src/stm32f7xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 963              		.loc 1 894 0 discriminator 1
 964 0022 15F0006F 		tst	r5, #134217728
 965 0026 03D1     		bne	.L80
 896:HALLIB/Src/stm32f7xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 966              		.loc 1 896 0
 967 0028 A568     		ldr	r5, [r4, #8]
 895:HALLIB/Src/stm32f7xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 968              		.loc 1 895 0
 969 002a 15F0805F 		tst	r5, #268435456
 970 002e 52D0     		beq	.L81
 971              	.L80:
 897:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 898:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Select an empty transmit mailbox */
 899:HALLIB/Src/stm32f7xx_hal_can.c ****       transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 972              		.loc 1 899 0
 973 0030 A468     		ldr	r4, [r4, #8]
 974 0032 C4F30164 		ubfx	r4, r4, #24, #2
 975              	.LVL68:
 900:HALLIB/Src/stm32f7xx_hal_can.c **** 
 901:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Store the Tx mailbox */
 902:HALLIB/Src/stm32f7xx_hal_can.c ****       *pTxMailbox = 1U << transmitmailbox;
 976              		.loc 1 902 0
 977 0036 0125     		movs	r5, #1
 978 0038 A540     		lsls	r5, r5, r4
 979 003a 1D60     		str	r5, [r3]
 903:HALLIB/Src/stm32f7xx_hal_can.c **** 
 904:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Set up the Id */
 905:HALLIB/Src/stm32f7xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 980              		.loc 1 905 0
 981 003c 8B68     		ldr	r3, [r1, #8]
 982              	.LVL69:
ARM GAS  /tmp/cc1cC1gt.s 			page 35


 983 003e 4BB9     		cbnz	r3, .L82
 906:HALLIB/Src/stm32f7xx_hal_can.c ****       {
 907:HALLIB/Src/stm32f7xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 984              		.loc 1 907 0
 985 0040 0568     		ldr	r5, [r0]
 986 0042 0E68     		ldr	r6, [r1]
 908:HALLIB/Src/stm32f7xx_hal_can.c ****                                                            pHeader->RTR);
 987              		.loc 1 908 0
 988 0044 CB68     		ldr	r3, [r1, #12]
 907:HALLIB/Src/stm32f7xx_hal_can.c ****                                                            pHeader->RTR);
 989              		.loc 1 907 0
 990 0046 43EA4656 		orr	r6, r3, r6, lsl #21
 991 004a 04F11803 		add	r3, r4, #24
 992 004e 1B01     		lsls	r3, r3, #4
 993 0050 EE50     		str	r6, [r5, r3]
 994 0052 09E0     		b	.L83
 995              	.L82:
 909:HALLIB/Src/stm32f7xx_hal_can.c ****       }
 910:HALLIB/Src/stm32f7xx_hal_can.c ****       else
 911:HALLIB/Src/stm32f7xx_hal_can.c ****       {
 912:HALLIB/Src/stm32f7xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 996              		.loc 1 912 0
 997 0054 0668     		ldr	r6, [r0]
 998 0056 4D68     		ldr	r5, [r1, #4]
 999 0058 43EAC503 		orr	r3, r3, r5, lsl #3
 913:HALLIB/Src/stm32f7xx_hal_can.c ****                                                            pHeader->IDE |
 914:HALLIB/Src/stm32f7xx_hal_can.c ****                                                            pHeader->RTR);
 1000              		.loc 1 914 0
 1001 005c CD68     		ldr	r5, [r1, #12]
 913:HALLIB/Src/stm32f7xx_hal_can.c ****                                                            pHeader->IDE |
 1002              		.loc 1 913 0
 1003 005e 2B43     		orrs	r3, r3, r5
 912:HALLIB/Src/stm32f7xx_hal_can.c ****                                                            pHeader->IDE |
 1004              		.loc 1 912 0
 1005 0060 04F11805 		add	r5, r4, #24
 1006 0064 2D01     		lsls	r5, r5, #4
 1007 0066 7351     		str	r3, [r6, r5]
 1008              	.L83:
 915:HALLIB/Src/stm32f7xx_hal_can.c ****       }
 916:HALLIB/Src/stm32f7xx_hal_can.c **** 
 917:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Set up the DLC */
 918:HALLIB/Src/stm32f7xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 1009              		.loc 1 918 0
 1010 0068 0368     		ldr	r3, [r0]
 1011 006a 0D69     		ldr	r5, [r1, #16]
 1012 006c 04F11806 		add	r6, r4, #24
 1013 0070 03EB0613 		add	r3, r3, r6, lsl #4
 1014 0074 5D60     		str	r5, [r3, #4]
 919:HALLIB/Src/stm32f7xx_hal_can.c **** 
 920:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
 921:HALLIB/Src/stm32f7xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 1015              		.loc 1 921 0
 1016 0076 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 1017 0078 012B     		cmp	r3, #1
 1018 007a 06D1     		bne	.L84
 922:HALLIB/Src/stm32f7xx_hal_can.c ****       {
 923:HALLIB/Src/stm32f7xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
ARM GAS  /tmp/cc1cC1gt.s 			page 36


 1019              		.loc 1 923 0
 1020 007c 0368     		ldr	r3, [r0]
 1021 007e 03EB0613 		add	r3, r3, r6, lsl #4
 1022 0082 5968     		ldr	r1, [r3, #4]
 1023              	.LVL70:
 1024 0084 41F48071 		orr	r1, r1, #256
 1025 0088 5960     		str	r1, [r3, #4]
 1026              	.L84:
 924:HALLIB/Src/stm32f7xx_hal_can.c ****       }
 925:HALLIB/Src/stm32f7xx_hal_can.c **** 
 926:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Set up the data field */
 927:HALLIB/Src/stm32f7xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 1027              		.loc 1 927 0
 1028 008a 0168     		ldr	r1, [r0]
 1029 008c D579     		ldrb	r5, [r2, #7]	@ zero_extendqisi2
 1030 008e 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1031 0090 1B04     		lsls	r3, r3, #16
 1032 0092 43EA0563 		orr	r3, r3, r5, lsl #24
 1033 0096 5579     		ldrb	r5, [r2, #5]	@ zero_extendqisi2
 1034 0098 43EA0523 		orr	r3, r3, r5, lsl #8
 1035 009c 1579     		ldrb	r5, [r2, #4]	@ zero_extendqisi2
 1036 009e 2B43     		orrs	r3, r3, r5
 1037 00a0 2501     		lsls	r5, r4, #4
 1038 00a2 2944     		add	r1, r1, r5
 1039 00a4 C1F88C31 		str	r3, [r1, #396]
 928:HALLIB/Src/stm32f7xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 929:HALLIB/Src/stm32f7xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
 930:HALLIB/Src/stm32f7xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
 931:HALLIB/Src/stm32f7xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
 932:HALLIB/Src/stm32f7xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1040              		.loc 1 932 0
 1041 00a8 0168     		ldr	r1, [r0]
 1042 00aa D678     		ldrb	r6, [r2, #3]	@ zero_extendqisi2
 1043 00ac 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1044 00ae 1B04     		lsls	r3, r3, #16
 1045 00b0 43EA0663 		orr	r3, r3, r6, lsl #24
 1046 00b4 5678     		ldrb	r6, [r2, #1]	@ zero_extendqisi2
 1047 00b6 43EA0623 		orr	r3, r3, r6, lsl #8
 1048 00ba 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1049              	.LVL71:
 1050 00bc 1343     		orrs	r3, r3, r2
 1051 00be 2944     		add	r1, r1, r5
 1052 00c0 C1F88831 		str	r3, [r1, #392]
 933:HALLIB/Src/stm32f7xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 934:HALLIB/Src/stm32f7xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
 935:HALLIB/Src/stm32f7xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
 936:HALLIB/Src/stm32f7xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
 937:HALLIB/Src/stm32f7xx_hal_can.c **** 
 938:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Request transmission */
 939:HALLIB/Src/stm32f7xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1053              		.loc 1 939 0
 1054 00c4 0268     		ldr	r2, [r0]
 1055 00c6 1834     		adds	r4, r4, #24
 1056              	.LVL72:
 1057 00c8 2401     		lsls	r4, r4, #4
 1058              	.LVL73:
 1059 00ca 1359     		ldr	r3, [r2, r4]
ARM GAS  /tmp/cc1cC1gt.s 			page 37


 1060 00cc 43F00103 		orr	r3, r3, #1
 1061 00d0 1351     		str	r3, [r2, r4]
 940:HALLIB/Src/stm32f7xx_hal_can.c **** 
 941:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Return function status */
 942:HALLIB/Src/stm32f7xx_hal_can.c ****       return HAL_OK;
 1062              		.loc 1 942 0
 1063 00d2 0020     		movs	r0, #0
 1064              	.LVL74:
 1065 00d4 0AE0     		b	.L85
 1066              	.LVL75:
 1067              	.L81:
 943:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 944:HALLIB/Src/stm32f7xx_hal_can.c ****     else
 945:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 946:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Update error code */
 947:HALLIB/Src/stm32f7xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1068              		.loc 1 947 0
 1069 00d6 436A     		ldr	r3, [r0, #36]
 1070              	.LVL76:
 1071 00d8 43F40013 		orr	r3, r3, #2097152
 1072 00dc 4362     		str	r3, [r0, #36]
 948:HALLIB/Src/stm32f7xx_hal_can.c **** 
 949:HALLIB/Src/stm32f7xx_hal_can.c ****       return HAL_ERROR;
 1073              		.loc 1 949 0
 1074 00de 0120     		movs	r0, #1
 1075              	.LVL77:
 1076 00e0 04E0     		b	.L85
 1077              	.LVL78:
 1078              	.L79:
 950:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 951:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 952:HALLIB/Src/stm32f7xx_hal_can.c ****   else
 953:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 954:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code */
 955:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1079              		.loc 1 955 0
 1080 00e2 436A     		ldr	r3, [r0, #36]
 1081              	.LVL79:
 1082 00e4 43F48023 		orr	r3, r3, #262144
 1083 00e8 4362     		str	r3, [r0, #36]
 956:HALLIB/Src/stm32f7xx_hal_can.c **** 
 957:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 1084              		.loc 1 957 0
 1085 00ea 0120     		movs	r0, #1
 1086              	.LVL80:
 1087              	.L85:
 958:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 959:HALLIB/Src/stm32f7xx_hal_can.c **** }
 1088              		.loc 1 959 0
 1089 00ec 70BC     		pop	{r4, r5, r6}
 1090              	.LCFI11:
 1091              		.cfi_restore 6
 1092              		.cfi_restore 5
 1093              		.cfi_restore 4
 1094              		.cfi_def_cfa_offset 0
 1095 00ee 7047     		bx	lr
 1096              		.cfi_endproc
ARM GAS  /tmp/cc1cC1gt.s 			page 38


 1097              	.LFE146:
 1099              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1100              		.align	2
 1101              		.global	HAL_CAN_AbortTxRequest
 1102              		.thumb
 1103              		.thumb_func
 1105              	HAL_CAN_AbortTxRequest:
 1106              	.LFB147:
 960:HALLIB/Src/stm32f7xx_hal_can.c **** 
 961:HALLIB/Src/stm32f7xx_hal_can.c **** /**
 962:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Abort transmission requests
 963:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 964:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
 965:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
 966:HALLIB/Src/stm32f7xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
 967:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status
 968:HALLIB/Src/stm32f7xx_hal_can.c ****   */
 969:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
 970:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1107              		.loc 1 970 0
 1108              		.cfi_startproc
 1109              		@ args = 0, pretend = 0, frame = 0
 1110              		@ frame_needed = 0, uses_anonymous_args = 0
 1111              		@ link register save eliminated.
 1112              	.LVL81:
 971:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check function parameters */
 972:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 973:HALLIB/Src/stm32f7xx_hal_can.c **** 
 974:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1113              		.loc 1 974 0
 1114 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1115 0004 DBB2     		uxtb	r3, r3
 1116 0006 012B     		cmp	r3, #1
 1117 0008 04D0     		beq	.L88
 975:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1118              		.loc 1 975 0 discriminator 1
 1119 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1120 000e DBB2     		uxtb	r3, r3
 974:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1121              		.loc 1 974 0 discriminator 1
 1122 0010 022B     		cmp	r3, #2
 1123 0012 19D1     		bne	.L89
 1124              	.L88:
 976:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 977:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check Tx Mailbox 0 */
 978:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != RESET)
 1125              		.loc 1 978 0
 1126 0014 11F0010F 		tst	r1, #1
 1127 0018 04D0     		beq	.L90
 979:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 980:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
 981:HALLIB/Src/stm32f7xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 1128              		.loc 1 981 0
 1129 001a 0268     		ldr	r2, [r0]
 1130 001c 9368     		ldr	r3, [r2, #8]
 1131 001e 43F08003 		orr	r3, r3, #128
 1132 0022 9360     		str	r3, [r2, #8]
ARM GAS  /tmp/cc1cC1gt.s 			page 39


 1133              	.L90:
 982:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 983:HALLIB/Src/stm32f7xx_hal_can.c **** 
 984:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check Tx Mailbox 1 */
 985:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != RESET)
 1134              		.loc 1 985 0
 1135 0024 11F0020F 		tst	r1, #2
 1136 0028 04D0     		beq	.L91
 986:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 987:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
 988:HALLIB/Src/stm32f7xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 1137              		.loc 1 988 0
 1138 002a 0268     		ldr	r2, [r0]
 1139 002c 9368     		ldr	r3, [r2, #8]
 1140 002e 43F40043 		orr	r3, r3, #32768
 1141 0032 9360     		str	r3, [r2, #8]
 1142              	.L91:
 989:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 990:HALLIB/Src/stm32f7xx_hal_can.c **** 
 991:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check Tx Mailbox 2 */
 992:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != RESET)
 1143              		.loc 1 992 0
 1144 0034 11F0040F 		tst	r1, #4
 1145 0038 0CD0     		beq	.L93
 993:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 994:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
 995:HALLIB/Src/stm32f7xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 1146              		.loc 1 995 0
 1147 003a 0268     		ldr	r2, [r0]
 1148 003c 9368     		ldr	r3, [r2, #8]
 1149 003e 43F40003 		orr	r3, r3, #8388608
 1150 0042 9360     		str	r3, [r2, #8]
 996:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 997:HALLIB/Src/stm32f7xx_hal_can.c **** 
 998:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Return function status */
 999:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_OK;
 1151              		.loc 1 999 0
 1152 0044 0020     		movs	r0, #0
 1153              	.LVL82:
 1154 0046 7047     		bx	lr
 1155              	.LVL83:
 1156              	.L89:
1000:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1001:HALLIB/Src/stm32f7xx_hal_can.c ****   else
1002:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1003:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code */
1004:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1157              		.loc 1 1004 0
 1158 0048 436A     		ldr	r3, [r0, #36]
 1159 004a 43F48023 		orr	r3, r3, #262144
 1160 004e 4362     		str	r3, [r0, #36]
1005:HALLIB/Src/stm32f7xx_hal_can.c **** 
1006:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 1161              		.loc 1 1006 0
 1162 0050 0120     		movs	r0, #1
 1163              	.LVL84:
 1164 0052 7047     		bx	lr
ARM GAS  /tmp/cc1cC1gt.s 			page 40


 1165              	.LVL85:
 1166              	.L93:
 999:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 1167              		.loc 1 999 0
 1168 0054 0020     		movs	r0, #0
 1169              	.LVL86:
1007:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1008:HALLIB/Src/stm32f7xx_hal_can.c **** }
 1170              		.loc 1 1008 0
 1171 0056 7047     		bx	lr
 1172              		.cfi_endproc
 1173              	.LFE147:
 1175              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1176              		.align	2
 1177              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1178              		.thumb
 1179              		.thumb_func
 1181              	HAL_CAN_GetTxMailboxesFreeLevel:
 1182              	.LFB148:
1009:HALLIB/Src/stm32f7xx_hal_can.c **** 
1010:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1011:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1012:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1013:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1014:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1015:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1016:HALLIB/Src/stm32f7xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1017:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1183              		.loc 1 1017 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              		@ link register save eliminated.
 1188              	.LVL87:
1018:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t freelevel = 0U;
1019:HALLIB/Src/stm32f7xx_hal_can.c **** 
1020:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1189              		.loc 1 1020 0
 1190 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1191 0004 DBB2     		uxtb	r3, r3
 1192 0006 012B     		cmp	r3, #1
 1193 0008 04D0     		beq	.L95
1021:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1194              		.loc 1 1021 0 discriminator 1
 1195 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1196 000e DBB2     		uxtb	r3, r3
1020:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1197              		.loc 1 1020 0 discriminator 1
 1198 0010 022B     		cmp	r3, #2
 1199 0012 12D1     		bne	.L99
 1200              	.L95:
1022:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1023:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1024:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != RESET)
 1201              		.loc 1 1024 0
 1202 0014 0368     		ldr	r3, [r0]
 1203 0016 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/cc1cC1gt.s 			page 41


 1204 0018 12F0806F 		tst	r2, #67108864
 1205 001c 01D1     		bne	.L100
1018:HALLIB/Src/stm32f7xx_hal_can.c **** 
 1206              		.loc 1 1018 0
 1207 001e 0020     		movs	r0, #0
 1208              	.LVL88:
 1209 0020 00E0     		b	.L97
 1210              	.LVL89:
 1211              	.L100:
1025:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1026:HALLIB/Src/stm32f7xx_hal_can.c ****       freelevel++;
 1212              		.loc 1 1026 0
 1213 0022 0120     		movs	r0, #1
 1214              	.LVL90:
 1215              	.L97:
1027:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1028:HALLIB/Src/stm32f7xx_hal_can.c **** 
1029:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1030:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET)
 1216              		.loc 1 1030 0
 1217 0024 9A68     		ldr	r2, [r3, #8]
 1218 0026 12F0006F 		tst	r2, #134217728
 1219 002a 00D0     		beq	.L98
1031:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1032:HALLIB/Src/stm32f7xx_hal_can.c ****       freelevel++;
 1220              		.loc 1 1032 0
 1221 002c 0130     		adds	r0, r0, #1
 1222              	.LVL91:
 1223              	.L98:
1033:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1034:HALLIB/Src/stm32f7xx_hal_can.c **** 
1035:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1036:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET)
 1224              		.loc 1 1036 0
 1225 002e 9B68     		ldr	r3, [r3, #8]
 1226 0030 13F0805F 		tst	r3, #268435456
 1227 0034 02D0     		beq	.L96
1037:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1038:HALLIB/Src/stm32f7xx_hal_can.c ****       freelevel++;
 1228              		.loc 1 1038 0
 1229 0036 0130     		adds	r0, r0, #1
 1230              	.LVL92:
 1231 0038 7047     		bx	lr
 1232              	.LVL93:
 1233              	.L99:
1018:HALLIB/Src/stm32f7xx_hal_can.c **** 
 1234              		.loc 1 1018 0
 1235 003a 0020     		movs	r0, #0
 1236              	.LVL94:
 1237              	.L96:
1039:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1040:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1041:HALLIB/Src/stm32f7xx_hal_can.c **** 
1042:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1043:HALLIB/Src/stm32f7xx_hal_can.c ****   return freelevel;
1044:HALLIB/Src/stm32f7xx_hal_can.c **** }
 1238              		.loc 1 1044 0
ARM GAS  /tmp/cc1cC1gt.s 			page 42


 1239 003c 7047     		bx	lr
 1240              		.cfi_endproc
 1241              	.LFE148:
 1243 003e 00BF     		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1244              		.align	2
 1245              		.global	HAL_CAN_IsTxMessagePending
 1246              		.thumb
 1247              		.thumb_func
 1249              	HAL_CAN_IsTxMessagePending:
 1250              	.LFB149:
1045:HALLIB/Src/stm32f7xx_hal_can.c **** 
1046:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1047:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1048:HALLIB/Src/stm32f7xx_hal_can.c ****   *         Mailboxes.
1049:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1050:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1051:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1052:HALLIB/Src/stm32f7xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1053:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval Status
1054:HALLIB/Src/stm32f7xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1055:HALLIB/Src/stm32f7xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1056:HALLIB/Src/stm32f7xx_hal_can.c ****   *                Tx Mailbox.
1057:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1058:HALLIB/Src/stm32f7xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1059:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1251              		.loc 1 1059 0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 0
 1254              		@ frame_needed = 0, uses_anonymous_args = 0
 1255              		@ link register save eliminated.
 1256              	.LVL95:
1060:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t status = 0U;
1061:HALLIB/Src/stm32f7xx_hal_can.c **** 
1062:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check function parameters */
1063:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1064:HALLIB/Src/stm32f7xx_hal_can.c **** 
1065:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1257              		.loc 1 1065 0
 1258 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1259 0004 DBB2     		uxtb	r3, r3
 1260 0006 012B     		cmp	r3, #1
 1261 0008 04D0     		beq	.L102
1066:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1262              		.loc 1 1066 0 discriminator 1
 1263 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1264 000e DBB2     		uxtb	r3, r3
1065:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1265              		.loc 1 1065 0 discriminator 1
 1266 0010 022B     		cmp	r3, #2
 1267 0012 07D1     		bne	.L104
 1268              	.L102:
1067:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1068:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1069:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1269              		.loc 1 1069 0
 1270 0014 0368     		ldr	r3, [r0]
 1271 0016 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/cc1cC1gt.s 			page 43


 1272 0018 8906     		lsls	r1, r1, #26
 1273              	.LVL96:
 1274 001a 31EA0303 		bics	r3, r1, r3
 1275 001e 03D1     		bne	.L105
1060:HALLIB/Src/stm32f7xx_hal_can.c **** 
 1276              		.loc 1 1060 0
 1277 0020 0020     		movs	r0, #0
 1278              	.LVL97:
 1279 0022 7047     		bx	lr
 1280              	.LVL98:
 1281              	.L104:
 1282 0024 0020     		movs	r0, #0
 1283              	.LVL99:
 1284 0026 7047     		bx	lr
 1285              	.LVL100:
 1286              	.L105:
1070:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1071:HALLIB/Src/stm32f7xx_hal_can.c ****       status = 1U;
 1287              		.loc 1 1071 0
 1288 0028 0120     		movs	r0, #1
 1289              	.LVL101:
1072:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1073:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1074:HALLIB/Src/stm32f7xx_hal_can.c **** 
1075:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Return status */
1076:HALLIB/Src/stm32f7xx_hal_can.c ****   return status;
1077:HALLIB/Src/stm32f7xx_hal_can.c **** }
 1290              		.loc 1 1077 0
 1291 002a 7047     		bx	lr
 1292              		.cfi_endproc
 1293              	.LFE149:
 1295              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1296              		.align	2
 1297              		.global	HAL_CAN_GetTxTimestamp
 1298              		.thumb
 1299              		.thumb_func
 1301              	HAL_CAN_GetTxTimestamp:
 1302              	.LFB150:
1078:HALLIB/Src/stm32f7xx_hal_can.c **** 
1079:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1080:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1081:HALLIB/Src/stm32f7xx_hal_can.c ****             mode is enabled.
1082:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1083:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1084:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1085:HALLIB/Src/stm32f7xx_hal_can.c ****   *         read.
1086:HALLIB/Src/stm32f7xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1087:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1088:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1089:HALLIB/Src/stm32f7xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1090:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1303              		.loc 1 1090 0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 0
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 1307              		@ link register save eliminated.
 1308              	.LVL102:
ARM GAS  /tmp/cc1cC1gt.s 			page 44


1091:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t timestamp = 0U;
1092:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t transmitmailbox;
1093:HALLIB/Src/stm32f7xx_hal_can.c **** 
1094:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check function parameters */
1095:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1096:HALLIB/Src/stm32f7xx_hal_can.c **** 
1097:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1309              		.loc 1 1097 0
 1310 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1311 0004 DBB2     		uxtb	r3, r3
 1312 0006 012B     		cmp	r3, #1
 1313 0008 04D0     		beq	.L107
1098:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1314              		.loc 1 1098 0 discriminator 1
 1315 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1316 000e DBB2     		uxtb	r3, r3
1097:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1317              		.loc 1 1097 0 discriminator 1
 1318 0010 022B     		cmp	r3, #2
 1319 0012 0AD1     		bne	.L109
 1320              	.L107:
 1321              	.LVL103:
 1322              	.LBB4:
 1323              	.LBB5:
 1324              		.file 2 "CORE/cmsis_gcc.h"
   1:CORE/cmsis_gcc.h **** /**************************************************************************//**
   2:CORE/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:CORE/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:CORE/cmsis_gcc.h ****  * @version  V4.30
   5:CORE/cmsis_gcc.h ****  * @date     20. October 2015
   6:CORE/cmsis_gcc.h ****  ******************************************************************************/
   7:CORE/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:CORE/cmsis_gcc.h **** 
   9:CORE/cmsis_gcc.h ****    All rights reserved.
  10:CORE/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:CORE/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:CORE/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:CORE/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:CORE/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:CORE/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:CORE/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:CORE/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:CORE/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:CORE/cmsis_gcc.h ****      specific prior written permission.
  20:CORE/cmsis_gcc.h ****    *
  21:CORE/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:CORE/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:CORE/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:CORE/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:CORE/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:CORE/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:CORE/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:CORE/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:CORE/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:CORE/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:CORE/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:CORE/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
ARM GAS  /tmp/cc1cC1gt.s 			page 45


  33:CORE/cmsis_gcc.h **** 
  34:CORE/cmsis_gcc.h **** 
  35:CORE/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:CORE/cmsis_gcc.h **** 
  38:CORE/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:CORE/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:CORE/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:CORE/cmsis_gcc.h **** #endif
  45:CORE/cmsis_gcc.h **** 
  46:CORE/cmsis_gcc.h **** 
  47:CORE/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:CORE/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:CORE/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:CORE/cmsis_gcc.h ****   @{
  51:CORE/cmsis_gcc.h ****  */
  52:CORE/cmsis_gcc.h **** 
  53:CORE/cmsis_gcc.h **** /**
  54:CORE/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:CORE/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:CORE/cmsis_gcc.h ****  */
  58:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:CORE/cmsis_gcc.h **** {
  60:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:CORE/cmsis_gcc.h **** }
  62:CORE/cmsis_gcc.h **** 
  63:CORE/cmsis_gcc.h **** 
  64:CORE/cmsis_gcc.h **** /**
  65:CORE/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:CORE/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:CORE/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:CORE/cmsis_gcc.h ****  */
  69:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:CORE/cmsis_gcc.h **** {
  71:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:CORE/cmsis_gcc.h **** }
  73:CORE/cmsis_gcc.h **** 
  74:CORE/cmsis_gcc.h **** 
  75:CORE/cmsis_gcc.h **** /**
  76:CORE/cmsis_gcc.h ****   \brief   Get Control Register
  77:CORE/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:CORE/cmsis_gcc.h ****   \return               Control Register value
  79:CORE/cmsis_gcc.h ****  */
  80:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:CORE/cmsis_gcc.h **** {
  82:CORE/cmsis_gcc.h ****   uint32_t result;
  83:CORE/cmsis_gcc.h **** 
  84:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:CORE/cmsis_gcc.h ****   return(result);
  86:CORE/cmsis_gcc.h **** }
  87:CORE/cmsis_gcc.h **** 
  88:CORE/cmsis_gcc.h **** 
  89:CORE/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc1cC1gt.s 			page 46


  90:CORE/cmsis_gcc.h ****   \brief   Set Control Register
  91:CORE/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:CORE/cmsis_gcc.h ****  */
  94:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:CORE/cmsis_gcc.h **** {
  96:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:CORE/cmsis_gcc.h **** }
  98:CORE/cmsis_gcc.h **** 
  99:CORE/cmsis_gcc.h **** 
 100:CORE/cmsis_gcc.h **** /**
 101:CORE/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:CORE/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:CORE/cmsis_gcc.h ****   \return               IPSR Register value
 104:CORE/cmsis_gcc.h ****  */
 105:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:CORE/cmsis_gcc.h **** {
 107:CORE/cmsis_gcc.h ****   uint32_t result;
 108:CORE/cmsis_gcc.h **** 
 109:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:CORE/cmsis_gcc.h ****   return(result);
 111:CORE/cmsis_gcc.h **** }
 112:CORE/cmsis_gcc.h **** 
 113:CORE/cmsis_gcc.h **** 
 114:CORE/cmsis_gcc.h **** /**
 115:CORE/cmsis_gcc.h ****   \brief   Get APSR Register
 116:CORE/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:CORE/cmsis_gcc.h ****   \return               APSR Register value
 118:CORE/cmsis_gcc.h ****  */
 119:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:CORE/cmsis_gcc.h **** {
 121:CORE/cmsis_gcc.h ****   uint32_t result;
 122:CORE/cmsis_gcc.h **** 
 123:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:CORE/cmsis_gcc.h ****   return(result);
 125:CORE/cmsis_gcc.h **** }
 126:CORE/cmsis_gcc.h **** 
 127:CORE/cmsis_gcc.h **** 
 128:CORE/cmsis_gcc.h **** /**
 129:CORE/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:CORE/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:CORE/cmsis_gcc.h **** 
 132:CORE/cmsis_gcc.h ****     \return               xPSR Register value
 133:CORE/cmsis_gcc.h ****  */
 134:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:CORE/cmsis_gcc.h **** {
 136:CORE/cmsis_gcc.h ****   uint32_t result;
 137:CORE/cmsis_gcc.h **** 
 138:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:CORE/cmsis_gcc.h ****   return(result);
 140:CORE/cmsis_gcc.h **** }
 141:CORE/cmsis_gcc.h **** 
 142:CORE/cmsis_gcc.h **** 
 143:CORE/cmsis_gcc.h **** /**
 144:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:CORE/cmsis_gcc.h ****   \return               PSP Register value
ARM GAS  /tmp/cc1cC1gt.s 			page 47


 147:CORE/cmsis_gcc.h ****  */
 148:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:CORE/cmsis_gcc.h **** {
 150:CORE/cmsis_gcc.h ****   register uint32_t result;
 151:CORE/cmsis_gcc.h **** 
 152:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:CORE/cmsis_gcc.h ****   return(result);
 154:CORE/cmsis_gcc.h **** }
 155:CORE/cmsis_gcc.h **** 
 156:CORE/cmsis_gcc.h **** 
 157:CORE/cmsis_gcc.h **** /**
 158:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:CORE/cmsis_gcc.h ****  */
 162:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:CORE/cmsis_gcc.h **** {
 164:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:CORE/cmsis_gcc.h **** }
 166:CORE/cmsis_gcc.h **** 
 167:CORE/cmsis_gcc.h **** 
 168:CORE/cmsis_gcc.h **** /**
 169:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:CORE/cmsis_gcc.h ****   \return               MSP Register value
 172:CORE/cmsis_gcc.h ****  */
 173:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:CORE/cmsis_gcc.h **** {
 175:CORE/cmsis_gcc.h ****   register uint32_t result;
 176:CORE/cmsis_gcc.h **** 
 177:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:CORE/cmsis_gcc.h ****   return(result);
 179:CORE/cmsis_gcc.h **** }
 180:CORE/cmsis_gcc.h **** 
 181:CORE/cmsis_gcc.h **** 
 182:CORE/cmsis_gcc.h **** /**
 183:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:CORE/cmsis_gcc.h **** 
 186:CORE/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:CORE/cmsis_gcc.h ****  */
 188:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:CORE/cmsis_gcc.h **** {
 190:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:CORE/cmsis_gcc.h **** }
 192:CORE/cmsis_gcc.h **** 
 193:CORE/cmsis_gcc.h **** 
 194:CORE/cmsis_gcc.h **** /**
 195:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:CORE/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 198:CORE/cmsis_gcc.h ****  */
 199:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:CORE/cmsis_gcc.h **** {
 201:CORE/cmsis_gcc.h ****   uint32_t result;
 202:CORE/cmsis_gcc.h **** 
 203:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
ARM GAS  /tmp/cc1cC1gt.s 			page 48


 204:CORE/cmsis_gcc.h ****   return(result);
 205:CORE/cmsis_gcc.h **** }
 206:CORE/cmsis_gcc.h **** 
 207:CORE/cmsis_gcc.h **** 
 208:CORE/cmsis_gcc.h **** /**
 209:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:CORE/cmsis_gcc.h ****  */
 213:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:CORE/cmsis_gcc.h **** {
 215:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:CORE/cmsis_gcc.h **** }
 217:CORE/cmsis_gcc.h **** 
 218:CORE/cmsis_gcc.h **** 
 219:CORE/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:CORE/cmsis_gcc.h **** 
 221:CORE/cmsis_gcc.h **** /**
 222:CORE/cmsis_gcc.h ****   \brief   Enable FIQ
 223:CORE/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:CORE/cmsis_gcc.h ****  */
 226:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:CORE/cmsis_gcc.h **** {
 228:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:CORE/cmsis_gcc.h **** }
 230:CORE/cmsis_gcc.h **** 
 231:CORE/cmsis_gcc.h **** 
 232:CORE/cmsis_gcc.h **** /**
 233:CORE/cmsis_gcc.h ****   \brief   Disable FIQ
 234:CORE/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:CORE/cmsis_gcc.h ****  */
 237:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:CORE/cmsis_gcc.h **** {
 239:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:CORE/cmsis_gcc.h **** }
 241:CORE/cmsis_gcc.h **** 
 242:CORE/cmsis_gcc.h **** 
 243:CORE/cmsis_gcc.h **** /**
 244:CORE/cmsis_gcc.h ****   \brief   Get Base Priority
 245:CORE/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 247:CORE/cmsis_gcc.h ****  */
 248:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:CORE/cmsis_gcc.h **** {
 250:CORE/cmsis_gcc.h ****   uint32_t result;
 251:CORE/cmsis_gcc.h **** 
 252:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:CORE/cmsis_gcc.h ****   return(result);
 254:CORE/cmsis_gcc.h **** }
 255:CORE/cmsis_gcc.h **** 
 256:CORE/cmsis_gcc.h **** 
 257:CORE/cmsis_gcc.h **** /**
 258:CORE/cmsis_gcc.h ****   \brief   Set Base Priority
 259:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
ARM GAS  /tmp/cc1cC1gt.s 			page 49


 261:CORE/cmsis_gcc.h ****  */
 262:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:CORE/cmsis_gcc.h **** {
 264:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:CORE/cmsis_gcc.h **** }
 266:CORE/cmsis_gcc.h **** 
 267:CORE/cmsis_gcc.h **** 
 268:CORE/cmsis_gcc.h **** /**
 269:CORE/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:CORE/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:CORE/cmsis_gcc.h ****  */
 274:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:CORE/cmsis_gcc.h **** {
 276:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:CORE/cmsis_gcc.h **** }
 278:CORE/cmsis_gcc.h **** 
 279:CORE/cmsis_gcc.h **** 
 280:CORE/cmsis_gcc.h **** /**
 281:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:CORE/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 284:CORE/cmsis_gcc.h ****  */
 285:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:CORE/cmsis_gcc.h **** {
 287:CORE/cmsis_gcc.h ****   uint32_t result;
 288:CORE/cmsis_gcc.h **** 
 289:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:CORE/cmsis_gcc.h ****   return(result);
 291:CORE/cmsis_gcc.h **** }
 292:CORE/cmsis_gcc.h **** 
 293:CORE/cmsis_gcc.h **** 
 294:CORE/cmsis_gcc.h **** /**
 295:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:CORE/cmsis_gcc.h ****  */
 299:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:CORE/cmsis_gcc.h **** {
 301:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:CORE/cmsis_gcc.h **** }
 303:CORE/cmsis_gcc.h **** 
 304:CORE/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:CORE/cmsis_gcc.h **** 
 306:CORE/cmsis_gcc.h **** 
 307:CORE/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:CORE/cmsis_gcc.h **** 
 309:CORE/cmsis_gcc.h **** /**
 310:CORE/cmsis_gcc.h ****   \brief   Get FPSCR
 311:CORE/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:CORE/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:CORE/cmsis_gcc.h ****  */
 314:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:CORE/cmsis_gcc.h **** {
 316:CORE/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:CORE/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/cc1cC1gt.s 			page 50


 318:CORE/cmsis_gcc.h **** 
 319:CORE/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 321:CORE/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 323:CORE/cmsis_gcc.h ****   return(result);
 324:CORE/cmsis_gcc.h **** #else
 325:CORE/cmsis_gcc.h ****    return(0);
 326:CORE/cmsis_gcc.h **** #endif
 327:CORE/cmsis_gcc.h **** }
 328:CORE/cmsis_gcc.h **** 
 329:CORE/cmsis_gcc.h **** 
 330:CORE/cmsis_gcc.h **** /**
 331:CORE/cmsis_gcc.h ****   \brief   Set FPSCR
 332:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:CORE/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:CORE/cmsis_gcc.h ****  */
 335:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:CORE/cmsis_gcc.h **** {
 337:CORE/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:CORE/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 340:CORE/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 342:CORE/cmsis_gcc.h **** #endif
 343:CORE/cmsis_gcc.h **** }
 344:CORE/cmsis_gcc.h **** 
 345:CORE/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:CORE/cmsis_gcc.h **** 
 347:CORE/cmsis_gcc.h **** 
 348:CORE/cmsis_gcc.h **** 
 349:CORE/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:CORE/cmsis_gcc.h **** 
 351:CORE/cmsis_gcc.h **** 
 352:CORE/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:CORE/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:CORE/cmsis_gcc.h ****   Access to dedicated instructions
 355:CORE/cmsis_gcc.h ****   @{
 356:CORE/cmsis_gcc.h **** */
 357:CORE/cmsis_gcc.h **** 
 358:CORE/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:CORE/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:CORE/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:CORE/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:CORE/cmsis_gcc.h **** #else
 365:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:CORE/cmsis_gcc.h **** #endif
 368:CORE/cmsis_gcc.h **** 
 369:CORE/cmsis_gcc.h **** /**
 370:CORE/cmsis_gcc.h ****   \brief   No Operation
 371:CORE/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:CORE/cmsis_gcc.h ****  */
 373:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:CORE/cmsis_gcc.h **** {
ARM GAS  /tmp/cc1cC1gt.s 			page 51


 375:CORE/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:CORE/cmsis_gcc.h **** }
 377:CORE/cmsis_gcc.h **** 
 378:CORE/cmsis_gcc.h **** 
 379:CORE/cmsis_gcc.h **** /**
 380:CORE/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:CORE/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:CORE/cmsis_gcc.h ****  */
 383:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:CORE/cmsis_gcc.h **** {
 385:CORE/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:CORE/cmsis_gcc.h **** }
 387:CORE/cmsis_gcc.h **** 
 388:CORE/cmsis_gcc.h **** 
 389:CORE/cmsis_gcc.h **** /**
 390:CORE/cmsis_gcc.h ****   \brief   Wait For Event
 391:CORE/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:CORE/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:CORE/cmsis_gcc.h ****  */
 394:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:CORE/cmsis_gcc.h **** {
 396:CORE/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:CORE/cmsis_gcc.h **** }
 398:CORE/cmsis_gcc.h **** 
 399:CORE/cmsis_gcc.h **** 
 400:CORE/cmsis_gcc.h **** /**
 401:CORE/cmsis_gcc.h ****   \brief   Send Event
 402:CORE/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:CORE/cmsis_gcc.h ****  */
 404:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:CORE/cmsis_gcc.h **** {
 406:CORE/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:CORE/cmsis_gcc.h **** }
 408:CORE/cmsis_gcc.h **** 
 409:CORE/cmsis_gcc.h **** 
 410:CORE/cmsis_gcc.h **** /**
 411:CORE/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:CORE/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:CORE/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:CORE/cmsis_gcc.h ****            after the instruction has been completed.
 415:CORE/cmsis_gcc.h ****  */
 416:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:CORE/cmsis_gcc.h **** {
 418:CORE/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:CORE/cmsis_gcc.h **** }
 420:CORE/cmsis_gcc.h **** 
 421:CORE/cmsis_gcc.h **** 
 422:CORE/cmsis_gcc.h **** /**
 423:CORE/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:CORE/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:CORE/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:CORE/cmsis_gcc.h ****  */
 427:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:CORE/cmsis_gcc.h **** {
 429:CORE/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:CORE/cmsis_gcc.h **** }
 431:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/cc1cC1gt.s 			page 52


 432:CORE/cmsis_gcc.h **** 
 433:CORE/cmsis_gcc.h **** /**
 434:CORE/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:CORE/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:CORE/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:CORE/cmsis_gcc.h ****  */
 438:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:CORE/cmsis_gcc.h **** {
 440:CORE/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:CORE/cmsis_gcc.h **** }
 442:CORE/cmsis_gcc.h **** 
 443:CORE/cmsis_gcc.h **** 
 444:CORE/cmsis_gcc.h **** /**
 445:CORE/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:CORE/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:CORE/cmsis_gcc.h ****   \return               Reversed value
 449:CORE/cmsis_gcc.h ****  */
 450:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:CORE/cmsis_gcc.h **** {
 452:CORE/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:CORE/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:CORE/cmsis_gcc.h **** #else
 455:CORE/cmsis_gcc.h ****   uint32_t result;
 456:CORE/cmsis_gcc.h **** 
 457:CORE/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:CORE/cmsis_gcc.h ****   return(result);
 459:CORE/cmsis_gcc.h **** #endif
 460:CORE/cmsis_gcc.h **** }
 461:CORE/cmsis_gcc.h **** 
 462:CORE/cmsis_gcc.h **** 
 463:CORE/cmsis_gcc.h **** /**
 464:CORE/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:CORE/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:CORE/cmsis_gcc.h ****   \return               Reversed value
 468:CORE/cmsis_gcc.h ****  */
 469:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:CORE/cmsis_gcc.h **** {
 471:CORE/cmsis_gcc.h ****   uint32_t result;
 472:CORE/cmsis_gcc.h **** 
 473:CORE/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:CORE/cmsis_gcc.h ****   return(result);
 475:CORE/cmsis_gcc.h **** }
 476:CORE/cmsis_gcc.h **** 
 477:CORE/cmsis_gcc.h **** 
 478:CORE/cmsis_gcc.h **** /**
 479:CORE/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:CORE/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:CORE/cmsis_gcc.h ****   \return               Reversed value
 483:CORE/cmsis_gcc.h ****  */
 484:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:CORE/cmsis_gcc.h **** {
 486:CORE/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:CORE/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:CORE/cmsis_gcc.h **** #else
ARM GAS  /tmp/cc1cC1gt.s 			page 53


 489:CORE/cmsis_gcc.h ****   int32_t result;
 490:CORE/cmsis_gcc.h **** 
 491:CORE/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:CORE/cmsis_gcc.h ****   return(result);
 493:CORE/cmsis_gcc.h **** #endif
 494:CORE/cmsis_gcc.h **** }
 495:CORE/cmsis_gcc.h **** 
 496:CORE/cmsis_gcc.h **** 
 497:CORE/cmsis_gcc.h **** /**
 498:CORE/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:CORE/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:CORE/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:CORE/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:CORE/cmsis_gcc.h ****   \return               Rotated value
 503:CORE/cmsis_gcc.h ****  */
 504:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:CORE/cmsis_gcc.h **** {
 506:CORE/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:CORE/cmsis_gcc.h **** }
 508:CORE/cmsis_gcc.h **** 
 509:CORE/cmsis_gcc.h **** 
 510:CORE/cmsis_gcc.h **** /**
 511:CORE/cmsis_gcc.h ****   \brief   Breakpoint
 512:CORE/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:CORE/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:CORE/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:CORE/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:CORE/cmsis_gcc.h ****  */
 517:CORE/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:CORE/cmsis_gcc.h **** 
 519:CORE/cmsis_gcc.h **** 
 520:CORE/cmsis_gcc.h **** /**
 521:CORE/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:CORE/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:CORE/cmsis_gcc.h ****   \return               Reversed value
 525:CORE/cmsis_gcc.h ****  */
 526:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:CORE/cmsis_gcc.h **** {
 528:CORE/cmsis_gcc.h ****   uint32_t result;
 529:CORE/cmsis_gcc.h **** 
 530:CORE/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:CORE/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1325              		.loc 2 531 0
 1326              		.syntax unified
 1327              	@ 531 "CORE/cmsis_gcc.h" 1
 1328 0014 91FAA1F1 		rbit r1, r1
 1329              	@ 0 "" 2
 1330              	.LVL104:
 1331              		.thumb
 1332              		.syntax unified
 1333              	.LBE5:
 1334              	.LBE4:
1099:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1100:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Select the Tx mailbox */
1101:HALLIB/Src/stm32f7xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
 1335              		.loc 1 1101 0
ARM GAS  /tmp/cc1cC1gt.s 			page 54


 1336 0018 B1FA81F1 		clz	r1, r1
 1337              	.LVL105:
1102:HALLIB/Src/stm32f7xx_hal_can.c **** 
1103:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Get timestamp */
1104:HALLIB/Src/stm32f7xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
 1338              		.loc 1 1104 0
 1339 001c 0368     		ldr	r3, [r0]
 1340 001e 1831     		adds	r1, r1, #24
 1341              	.LVL106:
 1342 0020 03EB0111 		add	r1, r3, r1, lsl #4
 1343              	.LVL107:
 1344 0024 4868     		ldr	r0, [r1, #4]
 1345              	.LVL108:
 1346 0026 000C     		lsrs	r0, r0, #16
 1347              	.LVL109:
 1348 0028 7047     		bx	lr
 1349              	.LVL110:
 1350              	.L109:
1091:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t transmitmailbox;
 1351              		.loc 1 1091 0
 1352 002a 0020     		movs	r0, #0
 1353              	.LVL111:
1105:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1106:HALLIB/Src/stm32f7xx_hal_can.c **** 
1107:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Return the timestamp */
1108:HALLIB/Src/stm32f7xx_hal_can.c ****   return timestamp;
1109:HALLIB/Src/stm32f7xx_hal_can.c **** }
 1354              		.loc 1 1109 0
 1355 002c 7047     		bx	lr
 1356              		.cfi_endproc
 1357              	.LFE150:
 1359 002e 00BF     		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1360              		.align	2
 1361              		.global	HAL_CAN_GetRxMessage
 1362              		.thumb
 1363              		.thumb_func
 1365              	HAL_CAN_GetRxMessage:
 1366              	.LFB151:
1110:HALLIB/Src/stm32f7xx_hal_can.c **** 
1111:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1112:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1113:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1114:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1115:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1116:HALLIB/Src/stm32f7xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1117:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1118:HALLIB/Src/stm32f7xx_hal_can.c ****   *         of the Rx frame will be stored.
1119:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1120:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status
1121:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1122:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1123:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1367              		.loc 1 1123 0
 1368              		.cfi_startproc
 1369              		@ args = 0, pretend = 0, frame = 0
 1370              		@ frame_needed = 0, uses_anonymous_args = 0
 1371              		@ link register save eliminated.
ARM GAS  /tmp/cc1cC1gt.s 			page 55


 1372              	.LVL112:
 1373 0000 30B4     		push	{r4, r5}
 1374              	.LCFI12:
 1375              		.cfi_def_cfa_offset 8
 1376              		.cfi_offset 4, -8
 1377              		.cfi_offset 5, -4
1124:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1125:HALLIB/Src/stm32f7xx_hal_can.c **** 
1126:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1378              		.loc 1 1126 0
 1379 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1380 0006 E4B2     		uxtb	r4, r4
 1381 0008 012C     		cmp	r4, #1
 1382 000a 05D0     		beq	.L111
1127:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1383              		.loc 1 1127 0 discriminator 1
 1384 000c 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1385 0010 E4B2     		uxtb	r4, r4
1126:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1386              		.loc 1 1126 0 discriminator 1
 1387 0012 022C     		cmp	r4, #2
 1388 0014 40F08A80 		bne	.L112
 1389              	.L111:
1128:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1129:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check the Rx FIFO */
1130:HALLIB/Src/stm32f7xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1390              		.loc 1 1130 0
 1391 0018 51B9     		cbnz	r1, .L113
1131:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1132:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1133:HALLIB/Src/stm32f7xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 1392              		.loc 1 1133 0
 1393 001a 0468     		ldr	r4, [r0]
 1394 001c E468     		ldr	r4, [r4, #12]
 1395 001e 14F0030F 		tst	r4, #3
 1396 0022 12D1     		bne	.L114
1134:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1135:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Update error code */
1136:HALLIB/Src/stm32f7xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1397              		.loc 1 1136 0
 1398 0024 436A     		ldr	r3, [r0, #36]
 1399              	.LVL113:
 1400 0026 43F40013 		orr	r3, r3, #2097152
 1401 002a 4362     		str	r3, [r0, #36]
1137:HALLIB/Src/stm32f7xx_hal_can.c **** 
1138:HALLIB/Src/stm32f7xx_hal_can.c ****         return HAL_ERROR;
 1402              		.loc 1 1138 0
 1403 002c 0120     		movs	r0, #1
 1404              	.LVL114:
 1405 002e 84E0     		b	.L115
 1406              	.LVL115:
 1407              	.L113:
1139:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1140:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1141:HALLIB/Src/stm32f7xx_hal_can.c ****     else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 1408              		.loc 1 1141 0
 1409 0030 0129     		cmp	r1, #1
ARM GAS  /tmp/cc1cC1gt.s 			page 56


 1410 0032 0AD1     		bne	.L114
1142:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1143:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1144:HALLIB/Src/stm32f7xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 1411              		.loc 1 1144 0
 1412 0034 0468     		ldr	r4, [r0]
 1413 0036 2469     		ldr	r4, [r4, #16]
 1414 0038 14F0030F 		tst	r4, #3
 1415 003c 05D1     		bne	.L114
1145:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1146:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Update error code */
1147:HALLIB/Src/stm32f7xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1416              		.loc 1 1147 0
 1417 003e 436A     		ldr	r3, [r0, #36]
 1418              	.LVL116:
 1419 0040 43F40013 		orr	r3, r3, #2097152
 1420 0044 4362     		str	r3, [r0, #36]
1148:HALLIB/Src/stm32f7xx_hal_can.c **** 
1149:HALLIB/Src/stm32f7xx_hal_can.c ****         return HAL_ERROR;
 1421              		.loc 1 1149 0
 1422 0046 0120     		movs	r0, #1
 1423              	.LVL117:
 1424 0048 77E0     		b	.L115
 1425              	.LVL118:
 1426              	.L114:
1150:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1151:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1152:HALLIB/Src/stm32f7xx_hal_can.c **** 
1153:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Get the header */
1154:HALLIB/Src/stm32f7xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 1427              		.loc 1 1154 0
 1428 004a 0568     		ldr	r5, [r0]
 1429 004c 01F11B04 		add	r4, r1, #27
 1430 0050 2401     		lsls	r4, r4, #4
 1431 0052 2C59     		ldr	r4, [r5, r4]
 1432 0054 04F00404 		and	r4, r4, #4
 1433 0058 9460     		str	r4, [r2, #8]
1155:HALLIB/Src/stm32f7xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1434              		.loc 1 1155 0
 1435 005a 3CB9     		cbnz	r4, .L116
1156:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1157:HALLIB/Src/stm32f7xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 1436              		.loc 1 1157 0
 1437 005c 0568     		ldr	r5, [r0]
 1438 005e 01F11B04 		add	r4, r1, #27
 1439 0062 2401     		lsls	r4, r4, #4
 1440 0064 2C59     		ldr	r4, [r5, r4]
 1441 0066 640D     		lsrs	r4, r4, #21
 1442 0068 1460     		str	r4, [r2]
 1443 006a 06E0     		b	.L117
 1444              	.L116:
1158:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1159:HALLIB/Src/stm32f7xx_hal_can.c ****     else
1160:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1161:HALLIB/Src/stm32f7xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
 1445              		.loc 1 1161 0
 1446 006c 0568     		ldr	r5, [r0]
ARM GAS  /tmp/cc1cC1gt.s 			page 57


 1447 006e 01F11B04 		add	r4, r1, #27
 1448 0072 2401     		lsls	r4, r4, #4
 1449 0074 2C59     		ldr	r4, [r5, r4]
 1450 0076 E408     		lsrs	r4, r4, #3
 1451 0078 5460     		str	r4, [r2, #4]
 1452              	.L117:
1162:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1163:HALLIB/Src/stm32f7xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 1453              		.loc 1 1163 0
 1454 007a 0568     		ldr	r5, [r0]
 1455 007c 01F11B04 		add	r4, r1, #27
 1456 0080 2401     		lsls	r4, r4, #4
 1457 0082 2D59     		ldr	r5, [r5, r4]
 1458 0084 C5F34005 		ubfx	r5, r5, #1, #1
 1459 0088 D560     		str	r5, [r2, #12]
1164:HALLIB/Src/stm32f7xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1460              		.loc 1 1164 0
 1461 008a 0568     		ldr	r5, [r0]
 1462 008c 2544     		add	r5, r5, r4
 1463 008e 6D68     		ldr	r5, [r5, #4]
 1464 0090 05F00F05 		and	r5, r5, #15
 1465 0094 1561     		str	r5, [r2, #16]
1165:HALLIB/Src/stm32f7xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1466              		.loc 1 1165 0
 1467 0096 0568     		ldr	r5, [r0]
 1468 0098 2544     		add	r5, r5, r4
 1469 009a 6D68     		ldr	r5, [r5, #4]
 1470 009c C5F30725 		ubfx	r5, r5, #8, #8
 1471 00a0 9561     		str	r5, [r2, #24]
1166:HALLIB/Src/stm32f7xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1472              		.loc 1 1166 0
 1473 00a2 0568     		ldr	r5, [r0]
 1474 00a4 2C44     		add	r4, r4, r5
 1475 00a6 6468     		ldr	r4, [r4, #4]
 1476 00a8 240C     		lsrs	r4, r4, #16
 1477 00aa 5461     		str	r4, [r2, #20]
1167:HALLIB/Src/stm32f7xx_hal_can.c **** 
1168:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Get the data */
1169:HALLIB/Src/stm32f7xx_hal_can.c ****     aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos
 1478              		.loc 1 1169 0
 1479 00ac 0468     		ldr	r4, [r0]
 1480 00ae 0A01     		lsls	r2, r1, #4
 1481              	.LVL119:
 1482 00b0 1444     		add	r4, r4, r2
 1483 00b2 D4F8B841 		ldr	r4, [r4, #440]
 1484 00b6 1C70     		strb	r4, [r3]
1170:HALLIB/Src/stm32f7xx_hal_can.c ****     aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos
 1485              		.loc 1 1170 0
 1486 00b8 0468     		ldr	r4, [r0]
 1487 00ba 1444     		add	r4, r4, r2
 1488 00bc D4F8B841 		ldr	r4, [r4, #440]
 1489 00c0 240A     		lsrs	r4, r4, #8
 1490 00c2 5C70     		strb	r4, [r3, #1]
1171:HALLIB/Src/stm32f7xx_hal_can.c ****     aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos
 1491              		.loc 1 1171 0
 1492 00c4 0468     		ldr	r4, [r0]
 1493 00c6 1444     		add	r4, r4, r2
ARM GAS  /tmp/cc1cC1gt.s 			page 58


 1494 00c8 D4F8B841 		ldr	r4, [r4, #440]
 1495 00cc 240C     		lsrs	r4, r4, #16
 1496 00ce 9C70     		strb	r4, [r3, #2]
1172:HALLIB/Src/stm32f7xx_hal_can.c ****     aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos
 1497              		.loc 1 1172 0
 1498 00d0 0468     		ldr	r4, [r0]
 1499 00d2 1444     		add	r4, r4, r2
 1500 00d4 D4F8B841 		ldr	r4, [r4, #440]
 1501 00d8 240E     		lsrs	r4, r4, #24
 1502 00da DC70     		strb	r4, [r3, #3]
1173:HALLIB/Src/stm32f7xx_hal_can.c ****     aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos
 1503              		.loc 1 1173 0
 1504 00dc 0468     		ldr	r4, [r0]
 1505 00de 1444     		add	r4, r4, r2
 1506 00e0 D4F8BC41 		ldr	r4, [r4, #444]
 1507 00e4 1C71     		strb	r4, [r3, #4]
1174:HALLIB/Src/stm32f7xx_hal_can.c ****     aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos
 1508              		.loc 1 1174 0
 1509 00e6 0468     		ldr	r4, [r0]
 1510 00e8 1444     		add	r4, r4, r2
 1511 00ea D4F8BC41 		ldr	r4, [r4, #444]
 1512 00ee 240A     		lsrs	r4, r4, #8
 1513 00f0 5C71     		strb	r4, [r3, #5]
1175:HALLIB/Src/stm32f7xx_hal_can.c ****     aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos
 1514              		.loc 1 1175 0
 1515 00f2 0468     		ldr	r4, [r0]
 1516 00f4 1444     		add	r4, r4, r2
 1517 00f6 D4F8BC41 		ldr	r4, [r4, #444]
 1518 00fa 240C     		lsrs	r4, r4, #16
 1519 00fc 9C71     		strb	r4, [r3, #6]
1176:HALLIB/Src/stm32f7xx_hal_can.c ****     aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos
 1520              		.loc 1 1176 0
 1521 00fe 0468     		ldr	r4, [r0]
 1522 0100 2244     		add	r2, r2, r4
 1523 0102 D2F8BC21 		ldr	r2, [r2, #444]
 1524 0106 120E     		lsrs	r2, r2, #24
 1525 0108 DA71     		strb	r2, [r3, #7]
1177:HALLIB/Src/stm32f7xx_hal_can.c **** 
1178:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Release the FIFO */
1179:HALLIB/Src/stm32f7xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1526              		.loc 1 1179 0
 1527 010a 31B9     		cbnz	r1, .L118
1180:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1181:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Release RX FIFO 0 */
1182:HALLIB/Src/stm32f7xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 1528              		.loc 1 1182 0
 1529 010c 0268     		ldr	r2, [r0]
 1530 010e D368     		ldr	r3, [r2, #12]
 1531              	.LVL120:
 1532 0110 43F02003 		orr	r3, r3, #32
 1533 0114 D360     		str	r3, [r2, #12]
1183:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1184:HALLIB/Src/stm32f7xx_hal_can.c ****     else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
1185:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1186:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Release RX FIFO 1 */
1187:HALLIB/Src/stm32f7xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1188:HALLIB/Src/stm32f7xx_hal_can.c ****     }
ARM GAS  /tmp/cc1cC1gt.s 			page 59


1189:HALLIB/Src/stm32f7xx_hal_can.c **** 
1190:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Return function status */
1191:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_OK;
 1534              		.loc 1 1191 0
 1535 0116 0020     		movs	r0, #0
 1536              	.LVL121:
 1537 0118 0FE0     		b	.L115
 1538              	.LVL122:
 1539              	.L118:
1184:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 1540              		.loc 1 1184 0
 1541 011a 0129     		cmp	r1, #1
 1542 011c 0CD1     		bne	.L119
1187:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 1543              		.loc 1 1187 0
 1544 011e 0268     		ldr	r2, [r0]
 1545 0120 1369     		ldr	r3, [r2, #16]
 1546              	.LVL123:
 1547 0122 43F02003 		orr	r3, r3, #32
 1548 0126 1361     		str	r3, [r2, #16]
 1549              		.loc 1 1191 0
 1550 0128 0020     		movs	r0, #0
 1551              	.LVL124:
 1552 012a 06E0     		b	.L115
 1553              	.LVL125:
 1554              	.L112:
1192:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1193:HALLIB/Src/stm32f7xx_hal_can.c ****   else
1194:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1195:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code */
1196:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1555              		.loc 1 1196 0
 1556 012c 436A     		ldr	r3, [r0, #36]
 1557              	.LVL126:
 1558 012e 43F48023 		orr	r3, r3, #262144
 1559 0132 4362     		str	r3, [r0, #36]
1197:HALLIB/Src/stm32f7xx_hal_can.c **** 
1198:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 1560              		.loc 1 1198 0
 1561 0134 0120     		movs	r0, #1
 1562              	.LVL127:
 1563 0136 00E0     		b	.L115
 1564              	.LVL128:
 1565              	.L119:
1191:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 1566              		.loc 1 1191 0
 1567 0138 0020     		movs	r0, #0
 1568              	.LVL129:
 1569              	.L115:
1199:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1200:HALLIB/Src/stm32f7xx_hal_can.c **** }
 1570              		.loc 1 1200 0
 1571 013a 30BC     		pop	{r4, r5}
 1572              	.LCFI13:
 1573              		.cfi_restore 5
 1574              		.cfi_restore 4
 1575              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc1cC1gt.s 			page 60


 1576 013c 7047     		bx	lr
 1577              		.cfi_endproc
 1578              	.LFE151:
 1580 013e 00BF     		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1581              		.align	2
 1582              		.global	HAL_CAN_GetRxFifoFillLevel
 1583              		.thumb
 1584              		.thumb_func
 1586              	HAL_CAN_GetRxFifoFillLevel:
 1587              	.LFB152:
1201:HALLIB/Src/stm32f7xx_hal_can.c **** 
1202:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1203:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1204:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1205:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1206:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1207:HALLIB/Src/stm32f7xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1208:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1209:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1210:HALLIB/Src/stm32f7xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1211:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1588              		.loc 1 1211 0
 1589              		.cfi_startproc
 1590              		@ args = 0, pretend = 0, frame = 0
 1591              		@ frame_needed = 0, uses_anonymous_args = 0
 1592              		@ link register save eliminated.
 1593              	.LVL130:
1212:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t filllevel = 0U;
1213:HALLIB/Src/stm32f7xx_hal_can.c **** 
1214:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check function parameters */
1215:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1216:HALLIB/Src/stm32f7xx_hal_can.c **** 
1217:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1594              		.loc 1 1217 0
 1595 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1596 0004 DBB2     		uxtb	r3, r3
 1597 0006 012B     		cmp	r3, #1
 1598 0008 04D0     		beq	.L122
1218:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1599              		.loc 1 1218 0 discriminator 1
 1600 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1601 000e DBB2     		uxtb	r3, r3
1217:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1602              		.loc 1 1217 0 discriminator 1
 1603 0010 022B     		cmp	r3, #2
 1604 0012 0AD1     		bne	.L125
 1605              	.L122:
1219:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1220:HALLIB/Src/stm32f7xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
 1606              		.loc 1 1220 0
 1607 0014 21B9     		cbnz	r1, .L124
1221:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1222:HALLIB/Src/stm32f7xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 1608              		.loc 1 1222 0
 1609 0016 0368     		ldr	r3, [r0]
 1610 0018 D868     		ldr	r0, [r3, #12]
 1611              	.LVL131:
ARM GAS  /tmp/cc1cC1gt.s 			page 61


 1612 001a 00F00300 		and	r0, r0, #3
 1613              	.LVL132:
 1614 001e 7047     		bx	lr
 1615              	.LVL133:
 1616              	.L124:
1223:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1224:HALLIB/Src/stm32f7xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1225:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1226:HALLIB/Src/stm32f7xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 1617              		.loc 1 1226 0
 1618 0020 0368     		ldr	r3, [r0]
 1619 0022 1869     		ldr	r0, [r3, #16]
 1620              	.LVL134:
 1621 0024 00F00300 		and	r0, r0, #3
 1622              	.LVL135:
 1623 0028 7047     		bx	lr
 1624              	.LVL136:
 1625              	.L125:
1212:HALLIB/Src/stm32f7xx_hal_can.c **** 
 1626              		.loc 1 1212 0
 1627 002a 0020     		movs	r0, #0
 1628              	.LVL137:
1227:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1228:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1229:HALLIB/Src/stm32f7xx_hal_can.c **** 
1230:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Return Rx FIFO fill level */
1231:HALLIB/Src/stm32f7xx_hal_can.c ****   return filllevel;
1232:HALLIB/Src/stm32f7xx_hal_can.c **** }
 1629              		.loc 1 1232 0
 1630 002c 7047     		bx	lr
 1631              		.cfi_endproc
 1632              	.LFE152:
 1634 002e 00BF     		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1635              		.align	2
 1636              		.global	HAL_CAN_ActivateNotification
 1637              		.thumb
 1638              		.thumb_func
 1640              	HAL_CAN_ActivateNotification:
 1641              	.LFB153:
1233:HALLIB/Src/stm32f7xx_hal_can.c **** 
1234:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1235:HALLIB/Src/stm32f7xx_hal_can.c ****   * @}
1236:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1237:HALLIB/Src/stm32f7xx_hal_can.c **** 
1238:HALLIB/Src/stm32f7xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1239:HALLIB/Src/stm32f7xx_hal_can.c ****  *  @brief    Interrupts management
1240:HALLIB/Src/stm32f7xx_hal_can.c ****  *
1241:HALLIB/Src/stm32f7xx_hal_can.c **** @verbatim
1242:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
1243:HALLIB/Src/stm32f7xx_hal_can.c ****                        ##### Interrupts management #####
1244:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
1245:HALLIB/Src/stm32f7xx_hal_can.c ****     [..]  This section provides functions allowing to:
1246:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1247:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1248:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1249:HALLIB/Src/stm32f7xx_hal_can.c **** 
1250:HALLIB/Src/stm32f7xx_hal_can.c **** @endverbatim
ARM GAS  /tmp/cc1cC1gt.s 			page 62


1251:HALLIB/Src/stm32f7xx_hal_can.c ****   * @{
1252:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1253:HALLIB/Src/stm32f7xx_hal_can.c **** 
1254:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1255:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Enable interrupts.
1256:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1257:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1258:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1259:HALLIB/Src/stm32f7xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1260:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status
1261:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1262:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1263:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1642              		.loc 1 1263 0
 1643              		.cfi_startproc
 1644              		@ args = 0, pretend = 0, frame = 0
 1645              		@ frame_needed = 0, uses_anonymous_args = 0
 1646              		@ link register save eliminated.
 1647              	.LVL138:
1264:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check function parameters */
1265:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1266:HALLIB/Src/stm32f7xx_hal_can.c **** 
1267:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1648              		.loc 1 1267 0
 1649 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1650 0004 DBB2     		uxtb	r3, r3
 1651 0006 012B     		cmp	r3, #1
 1652 0008 04D0     		beq	.L127
1268:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1653              		.loc 1 1268 0 discriminator 1
 1654 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1655 000e DBB2     		uxtb	r3, r3
1267:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1656              		.loc 1 1267 0 discriminator 1
 1657 0010 022B     		cmp	r3, #2
 1658 0012 05D1     		bne	.L128
 1659              	.L127:
1269:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1270:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Enable the selected interrupts */
1271:HALLIB/Src/stm32f7xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 1660              		.loc 1 1271 0
 1661 0014 0368     		ldr	r3, [r0]
 1662 0016 5A69     		ldr	r2, [r3, #20]
 1663 0018 1143     		orrs	r1, r1, r2
 1664              	.LVL139:
 1665 001a 5961     		str	r1, [r3, #20]
1272:HALLIB/Src/stm32f7xx_hal_can.c **** 
1273:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Return function status */
1274:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_OK;
 1666              		.loc 1 1274 0
 1667 001c 0020     		movs	r0, #0
 1668              	.LVL140:
 1669 001e 7047     		bx	lr
 1670              	.LVL141:
 1671              	.L128:
1275:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1276:HALLIB/Src/stm32f7xx_hal_can.c ****   else
ARM GAS  /tmp/cc1cC1gt.s 			page 63


1277:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1278:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code */
1279:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1672              		.loc 1 1279 0
 1673 0020 436A     		ldr	r3, [r0, #36]
 1674 0022 43F48023 		orr	r3, r3, #262144
 1675 0026 4362     		str	r3, [r0, #36]
1280:HALLIB/Src/stm32f7xx_hal_can.c **** 
1281:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 1676              		.loc 1 1281 0
 1677 0028 0120     		movs	r0, #1
 1678              	.LVL142:
1282:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1283:HALLIB/Src/stm32f7xx_hal_can.c **** }
 1679              		.loc 1 1283 0
 1680 002a 7047     		bx	lr
 1681              		.cfi_endproc
 1682              	.LFE153:
 1684              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 1685              		.align	2
 1686              		.global	HAL_CAN_DeactivateNotification
 1687              		.thumb
 1688              		.thumb_func
 1690              	HAL_CAN_DeactivateNotification:
 1691              	.LFB154:
1284:HALLIB/Src/stm32f7xx_hal_can.c **** 
1285:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1286:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Disable interrupts.
1287:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1288:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1289:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1290:HALLIB/Src/stm32f7xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1291:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status
1292:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1293:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1294:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1692              		.loc 1 1294 0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 0
 1695              		@ frame_needed = 0, uses_anonymous_args = 0
 1696              		@ link register save eliminated.
 1697              	.LVL143:
1295:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Check function parameters */
1296:HALLIB/Src/stm32f7xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1297:HALLIB/Src/stm32f7xx_hal_can.c **** 
1298:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1698              		.loc 1 1298 0
 1699 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1700 0004 DBB2     		uxtb	r3, r3
 1701 0006 012B     		cmp	r3, #1
 1702 0008 04D0     		beq	.L131
1299:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1703              		.loc 1 1299 0 discriminator 1
 1704 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1705 000e DBB2     		uxtb	r3, r3
1298:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1706              		.loc 1 1298 0 discriminator 1
ARM GAS  /tmp/cc1cC1gt.s 			page 64


 1707 0010 022B     		cmp	r3, #2
 1708 0012 06D1     		bne	.L132
 1709              	.L131:
1300:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1301:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Disable the selected interrupts */
1302:HALLIB/Src/stm32f7xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 1710              		.loc 1 1302 0
 1711 0014 0268     		ldr	r2, [r0]
 1712 0016 5369     		ldr	r3, [r2, #20]
 1713 0018 23EA0101 		bic	r1, r3, r1
 1714              	.LVL144:
 1715 001c 5161     		str	r1, [r2, #20]
1303:HALLIB/Src/stm32f7xx_hal_can.c **** 
1304:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Return function status */
1305:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_OK;
 1716              		.loc 1 1305 0
 1717 001e 0020     		movs	r0, #0
 1718              	.LVL145:
 1719 0020 7047     		bx	lr
 1720              	.LVL146:
 1721              	.L132:
1306:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1307:HALLIB/Src/stm32f7xx_hal_can.c ****   else
1308:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1309:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code */
1310:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1722              		.loc 1 1310 0
 1723 0022 436A     		ldr	r3, [r0, #36]
 1724 0024 43F48023 		orr	r3, r3, #262144
 1725 0028 4362     		str	r3, [r0, #36]
1311:HALLIB/Src/stm32f7xx_hal_can.c **** 
1312:HALLIB/Src/stm32f7xx_hal_can.c ****     return HAL_ERROR;
 1726              		.loc 1 1312 0
 1727 002a 0120     		movs	r0, #1
 1728              	.LVL147:
1313:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1314:HALLIB/Src/stm32f7xx_hal_can.c **** }
 1729              		.loc 1 1314 0
 1730 002c 7047     		bx	lr
 1731              		.cfi_endproc
 1732              	.LFE154:
 1734 002e 00BF     		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 1735              		.align	2
 1736              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 1737              		.thumb
 1738              		.thumb_func
 1740              	HAL_CAN_TxMailbox0CompleteCallback:
 1741              	.LFB156:
1315:HALLIB/Src/stm32f7xx_hal_can.c **** 
1316:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1317:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1318:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1319:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1320:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1321:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1322:HALLIB/Src/stm32f7xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1323:HALLIB/Src/stm32f7xx_hal_can.c **** {
ARM GAS  /tmp/cc1cC1gt.s 			page 65


1324:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1325:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1326:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1327:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1328:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1329:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1330:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1331:HALLIB/Src/stm32f7xx_hal_can.c **** 
1332:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1333:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
1334:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1335:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1336:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != RESET)
1337:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1338:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1339:HALLIB/Src/stm32f7xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1340:HALLIB/Src/stm32f7xx_hal_can.c **** 
1341:HALLIB/Src/stm32f7xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != RESET)
1342:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1343:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1344:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Call weak (surcharged) callback */
1345:HALLIB/Src/stm32f7xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1346:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1347:HALLIB/Src/stm32f7xx_hal_can.c ****       else
1348:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1349:HALLIB/Src/stm32f7xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != RESET)
1350:HALLIB/Src/stm32f7xx_hal_can.c ****         {
1351:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Update error code */
1352:HALLIB/Src/stm32f7xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1353:HALLIB/Src/stm32f7xx_hal_can.c ****         }
1354:HALLIB/Src/stm32f7xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != RESET)
1355:HALLIB/Src/stm32f7xx_hal_can.c ****         {
1356:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Update error code */
1357:HALLIB/Src/stm32f7xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1358:HALLIB/Src/stm32f7xx_hal_can.c ****         }
1359:HALLIB/Src/stm32f7xx_hal_can.c ****         else
1360:HALLIB/Src/stm32f7xx_hal_can.c ****         {
1361:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1362:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Call weak (surcharged) callback */
1363:HALLIB/Src/stm32f7xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1364:HALLIB/Src/stm32f7xx_hal_can.c ****         }
1365:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1366:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1367:HALLIB/Src/stm32f7xx_hal_can.c **** 
1368:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1369:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != RESET)
1370:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1371:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1372:HALLIB/Src/stm32f7xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1373:HALLIB/Src/stm32f7xx_hal_can.c **** 
1374:HALLIB/Src/stm32f7xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != RESET)
1375:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1376:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1377:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Call weak (surcharged) callback */
1378:HALLIB/Src/stm32f7xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1379:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1380:HALLIB/Src/stm32f7xx_hal_can.c ****       else
ARM GAS  /tmp/cc1cC1gt.s 			page 66


1381:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1382:HALLIB/Src/stm32f7xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != RESET)
1383:HALLIB/Src/stm32f7xx_hal_can.c ****         {
1384:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Update error code */
1385:HALLIB/Src/stm32f7xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1386:HALLIB/Src/stm32f7xx_hal_can.c ****         }
1387:HALLIB/Src/stm32f7xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != RESET)
1388:HALLIB/Src/stm32f7xx_hal_can.c ****         {
1389:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Update error code */
1390:HALLIB/Src/stm32f7xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1391:HALLIB/Src/stm32f7xx_hal_can.c ****         }
1392:HALLIB/Src/stm32f7xx_hal_can.c ****         else
1393:HALLIB/Src/stm32f7xx_hal_can.c ****         {
1394:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1395:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Call weak (surcharged) callback */
1396:HALLIB/Src/stm32f7xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1397:HALLIB/Src/stm32f7xx_hal_can.c ****         }
1398:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1399:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1400:HALLIB/Src/stm32f7xx_hal_can.c **** 
1401:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1402:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != RESET)
1403:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1404:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1405:HALLIB/Src/stm32f7xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1406:HALLIB/Src/stm32f7xx_hal_can.c **** 
1407:HALLIB/Src/stm32f7xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != RESET)
1408:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1409:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1410:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Call weak (surcharged) callback */
1411:HALLIB/Src/stm32f7xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1412:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1413:HALLIB/Src/stm32f7xx_hal_can.c ****       else
1414:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1415:HALLIB/Src/stm32f7xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != RESET)
1416:HALLIB/Src/stm32f7xx_hal_can.c ****         {
1417:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Update error code */
1418:HALLIB/Src/stm32f7xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1419:HALLIB/Src/stm32f7xx_hal_can.c ****         }
1420:HALLIB/Src/stm32f7xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != RESET)
1421:HALLIB/Src/stm32f7xx_hal_can.c ****         {
1422:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Update error code */
1423:HALLIB/Src/stm32f7xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1424:HALLIB/Src/stm32f7xx_hal_can.c ****         }
1425:HALLIB/Src/stm32f7xx_hal_can.c ****         else
1426:HALLIB/Src/stm32f7xx_hal_can.c ****         {
1427:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1428:HALLIB/Src/stm32f7xx_hal_can.c ****           /* Call weak (surcharged) callback */
1429:HALLIB/Src/stm32f7xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1430:HALLIB/Src/stm32f7xx_hal_can.c ****         }
1431:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1432:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1433:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1434:HALLIB/Src/stm32f7xx_hal_can.c **** 
1435:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1436:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
1437:HALLIB/Src/stm32f7xx_hal_can.c ****   {
ARM GAS  /tmp/cc1cC1gt.s 			page 67


1438:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
1439:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1440:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1441:HALLIB/Src/stm32f7xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1442:HALLIB/Src/stm32f7xx_hal_can.c **** 
1443:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1444:HALLIB/Src/stm32f7xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1445:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1446:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1447:HALLIB/Src/stm32f7xx_hal_can.c **** 
1448:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1449:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
1450:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1451:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
1452:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1453:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1454:HALLIB/Src/stm32f7xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1455:HALLIB/Src/stm32f7xx_hal_can.c **** 
1456:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1457:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Call weak (surcharged) callback */
1458:HALLIB/Src/stm32f7xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1459:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1460:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1461:HALLIB/Src/stm32f7xx_hal_can.c **** 
1462:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1463:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
1464:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1465:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check if message is still pending */
1466:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
1467:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1468:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1469:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Call weak (surcharged) callback */
1470:HALLIB/Src/stm32f7xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1471:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1472:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1473:HALLIB/Src/stm32f7xx_hal_can.c **** 
1474:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1475:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
1476:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1477:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
1478:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1479:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1480:HALLIB/Src/stm32f7xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1481:HALLIB/Src/stm32f7xx_hal_can.c **** 
1482:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1483:HALLIB/Src/stm32f7xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1484:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1485:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1486:HALLIB/Src/stm32f7xx_hal_can.c **** 
1487:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1488:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
1489:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1490:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
1491:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1492:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1493:HALLIB/Src/stm32f7xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1494:HALLIB/Src/stm32f7xx_hal_can.c **** 
ARM GAS  /tmp/cc1cC1gt.s 			page 68


1495:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1496:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Call weak (surcharged) callback */
1497:HALLIB/Src/stm32f7xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1498:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1499:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1500:HALLIB/Src/stm32f7xx_hal_can.c **** 
1501:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1502:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
1503:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1504:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check if message is still pending */
1505:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
1506:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1507:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1508:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Call weak (surcharged) callback */
1509:HALLIB/Src/stm32f7xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1510:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1511:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1512:HALLIB/Src/stm32f7xx_hal_can.c **** 
1513:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1514:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
1515:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1516:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != RESET)
1517:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1518:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1519:HALLIB/Src/stm32f7xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1520:HALLIB/Src/stm32f7xx_hal_can.c **** 
1521:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Sleep Callback */
1522:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Call weak (surcharged) callback */
1523:HALLIB/Src/stm32f7xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1524:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1525:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1526:HALLIB/Src/stm32f7xx_hal_can.c **** 
1527:HALLIB/Src/stm32f7xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1528:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != RESET)
1529:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1530:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != RESET)
1531:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1532:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Clear WakeUp Flag */
1533:HALLIB/Src/stm32f7xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1534:HALLIB/Src/stm32f7xx_hal_can.c **** 
1535:HALLIB/Src/stm32f7xx_hal_can.c ****       /* WakeUp Callback */
1536:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Call weak (surcharged) callback */
1537:HALLIB/Src/stm32f7xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1538:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1539:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1540:HALLIB/Src/stm32f7xx_hal_can.c **** 
1541:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Error interrupts management *********************************************/
1542:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != RESET)
1543:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1544:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != RESET)
1545:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1546:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Check Error Warning Flag */
1547:HALLIB/Src/stm32f7xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
1548:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
1549:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1550:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1551:HALLIB/Src/stm32f7xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
ARM GAS  /tmp/cc1cC1gt.s 			page 69


1552:HALLIB/Src/stm32f7xx_hal_can.c **** 
1553:HALLIB/Src/stm32f7xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1554:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1555:HALLIB/Src/stm32f7xx_hal_can.c **** 
1556:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Check Error Passive Flag */
1557:HALLIB/Src/stm32f7xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
1558:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
1559:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1560:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1561:HALLIB/Src/stm32f7xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1562:HALLIB/Src/stm32f7xx_hal_can.c **** 
1563:HALLIB/Src/stm32f7xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1564:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1565:HALLIB/Src/stm32f7xx_hal_can.c **** 
1566:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Check Bus-off Flag */
1567:HALLIB/Src/stm32f7xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
1568:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
1569:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1570:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
1571:HALLIB/Src/stm32f7xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
1572:HALLIB/Src/stm32f7xx_hal_can.c **** 
1573:HALLIB/Src/stm32f7xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
1574:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1575:HALLIB/Src/stm32f7xx_hal_can.c **** 
1576:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Check Last Error Code Flag */
1577:HALLIB/Src/stm32f7xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
1578:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
1579:HALLIB/Src/stm32f7xx_hal_can.c ****       {
1580:HALLIB/Src/stm32f7xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
1581:HALLIB/Src/stm32f7xx_hal_can.c ****         {
1582:HALLIB/Src/stm32f7xx_hal_can.c ****           case (CAN_ESR_LEC_0):
1583:HALLIB/Src/stm32f7xx_hal_can.c ****             /* Set CAN error code to Stuff error */
1584:HALLIB/Src/stm32f7xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
1585:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
1586:HALLIB/Src/stm32f7xx_hal_can.c ****           case (CAN_ESR_LEC_1):
1587:HALLIB/Src/stm32f7xx_hal_can.c ****             /* Set CAN error code to Form error */
1588:HALLIB/Src/stm32f7xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
1589:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
1590:HALLIB/Src/stm32f7xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
1591:HALLIB/Src/stm32f7xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
1592:HALLIB/Src/stm32f7xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
1593:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
1594:HALLIB/Src/stm32f7xx_hal_can.c ****           case (CAN_ESR_LEC_2):
1595:HALLIB/Src/stm32f7xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
1596:HALLIB/Src/stm32f7xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
1597:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
1598:HALLIB/Src/stm32f7xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
1599:HALLIB/Src/stm32f7xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
1600:HALLIB/Src/stm32f7xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
1601:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
1602:HALLIB/Src/stm32f7xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
1603:HALLIB/Src/stm32f7xx_hal_can.c ****             /* Set CAN error code to CRC error */
1604:HALLIB/Src/stm32f7xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
1605:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
1606:HALLIB/Src/stm32f7xx_hal_can.c ****           default:
1607:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
1608:HALLIB/Src/stm32f7xx_hal_can.c ****         }
ARM GAS  /tmp/cc1cC1gt.s 			page 70


1609:HALLIB/Src/stm32f7xx_hal_can.c **** 
1610:HALLIB/Src/stm32f7xx_hal_can.c ****         /* Clear Last error code Flag */
1611:HALLIB/Src/stm32f7xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
1612:HALLIB/Src/stm32f7xx_hal_can.c ****       }
1613:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1614:HALLIB/Src/stm32f7xx_hal_can.c **** 
1615:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Clear ERRI Flag */
1616:HALLIB/Src/stm32f7xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
1617:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1618:HALLIB/Src/stm32f7xx_hal_can.c **** 
1619:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
1620:HALLIB/Src/stm32f7xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
1621:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1622:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code in handle */
1623:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
1624:HALLIB/Src/stm32f7xx_hal_can.c **** 
1625:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Call Error callback function */
1626:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Call weak (surcharged) callback */
1627:HALLIB/Src/stm32f7xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
1628:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1629:HALLIB/Src/stm32f7xx_hal_can.c **** }
1630:HALLIB/Src/stm32f7xx_hal_can.c **** 
1631:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1632:HALLIB/Src/stm32f7xx_hal_can.c ****   * @}
1633:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1634:HALLIB/Src/stm32f7xx_hal_can.c **** 
1635:HALLIB/Src/stm32f7xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
1636:HALLIB/Src/stm32f7xx_hal_can.c ****  *  @brief   CAN Callback functions
1637:HALLIB/Src/stm32f7xx_hal_can.c ****  *
1638:HALLIB/Src/stm32f7xx_hal_can.c **** @verbatim
1639:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
1640:HALLIB/Src/stm32f7xx_hal_can.c ****                           ##### Callback functions #####
1641:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
1642:HALLIB/Src/stm32f7xx_hal_can.c ****     [..]
1643:HALLIB/Src/stm32f7xx_hal_can.c ****     This subsection provides the following callback functions:
1644:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
1645:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
1646:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
1647:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
1648:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
1649:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
1650:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
1651:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
1652:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
1653:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
1654:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
1655:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
1656:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
1657:HALLIB/Src/stm32f7xx_hal_can.c **** 
1658:HALLIB/Src/stm32f7xx_hal_can.c **** @endverbatim
1659:HALLIB/Src/stm32f7xx_hal_can.c ****   * @{
1660:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1661:HALLIB/Src/stm32f7xx_hal_can.c **** 
1662:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1663:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
1664:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1665:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
ARM GAS  /tmp/cc1cC1gt.s 			page 71


1666:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1667:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1668:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
1669:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1742              		.loc 1 1669 0
 1743              		.cfi_startproc
 1744              		@ args = 0, pretend = 0, frame = 0
 1745              		@ frame_needed = 0, uses_anonymous_args = 0
 1746              		@ link register save eliminated.
 1747              	.LVL148:
 1748 0000 7047     		bx	lr
 1749              		.cfi_endproc
 1750              	.LFE156:
 1752 0002 00BF     		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 1753              		.align	2
 1754              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 1755              		.thumb
 1756              		.thumb_func
 1758              	HAL_CAN_TxMailbox1CompleteCallback:
 1759              	.LFB157:
1670:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1671:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1672:HALLIB/Src/stm32f7xx_hal_can.c **** 
1673:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1674:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
1675:HALLIB/Src/stm32f7xx_hal_can.c ****             user file
1676:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1677:HALLIB/Src/stm32f7xx_hal_can.c **** }
1678:HALLIB/Src/stm32f7xx_hal_can.c **** 
1679:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1680:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
1681:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1682:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1683:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1684:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1685:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
1686:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1760              		.loc 1 1686 0
 1761              		.cfi_startproc
 1762              		@ args = 0, pretend = 0, frame = 0
 1763              		@ frame_needed = 0, uses_anonymous_args = 0
 1764              		@ link register save eliminated.
 1765              	.LVL149:
 1766 0000 7047     		bx	lr
 1767              		.cfi_endproc
 1768              	.LFE157:
 1770 0002 00BF     		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 1771              		.align	2
 1772              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 1773              		.thumb
 1774              		.thumb_func
 1776              	HAL_CAN_TxMailbox2CompleteCallback:
 1777              	.LFB158:
1687:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1688:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1689:HALLIB/Src/stm32f7xx_hal_can.c **** 
1690:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
ARM GAS  /tmp/cc1cC1gt.s 			page 72


1691:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
1692:HALLIB/Src/stm32f7xx_hal_can.c ****             user file
1693:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1694:HALLIB/Src/stm32f7xx_hal_can.c **** }
1695:HALLIB/Src/stm32f7xx_hal_can.c **** 
1696:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1697:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
1698:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1699:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1700:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1701:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1702:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
1703:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1778              		.loc 1 1703 0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 0
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782              		@ link register save eliminated.
 1783              	.LVL150:
 1784 0000 7047     		bx	lr
 1785              		.cfi_endproc
 1786              	.LFE158:
 1788 0002 00BF     		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 1789              		.align	2
 1790              		.weak	HAL_CAN_TxMailbox0AbortCallback
 1791              		.thumb
 1792              		.thumb_func
 1794              	HAL_CAN_TxMailbox0AbortCallback:
 1795              	.LFB159:
1704:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1705:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1706:HALLIB/Src/stm32f7xx_hal_can.c **** 
1707:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1708:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
1709:HALLIB/Src/stm32f7xx_hal_can.c ****             user file
1710:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1711:HALLIB/Src/stm32f7xx_hal_can.c **** }
1712:HALLIB/Src/stm32f7xx_hal_can.c **** 
1713:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1714:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
1715:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1716:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1717:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1718:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1719:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
1720:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1796              		.loc 1 1720 0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 0, uses_anonymous_args = 0
 1800              		@ link register save eliminated.
 1801              	.LVL151:
 1802 0000 7047     		bx	lr
 1803              		.cfi_endproc
 1804              	.LFE159:
 1806 0002 00BF     		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 1807              		.align	2
ARM GAS  /tmp/cc1cC1gt.s 			page 73


 1808              		.weak	HAL_CAN_TxMailbox1AbortCallback
 1809              		.thumb
 1810              		.thumb_func
 1812              	HAL_CAN_TxMailbox1AbortCallback:
 1813              	.LFB160:
1721:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1722:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1723:HALLIB/Src/stm32f7xx_hal_can.c **** 
1724:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1725:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
1726:HALLIB/Src/stm32f7xx_hal_can.c ****             user file
1727:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1728:HALLIB/Src/stm32f7xx_hal_can.c **** }
1729:HALLIB/Src/stm32f7xx_hal_can.c **** 
1730:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1731:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
1732:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1733:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1734:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1735:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1736:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
1737:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1814              		.loc 1 1737 0
 1815              		.cfi_startproc
 1816              		@ args = 0, pretend = 0, frame = 0
 1817              		@ frame_needed = 0, uses_anonymous_args = 0
 1818              		@ link register save eliminated.
 1819              	.LVL152:
 1820 0000 7047     		bx	lr
 1821              		.cfi_endproc
 1822              	.LFE160:
 1824 0002 00BF     		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 1825              		.align	2
 1826              		.weak	HAL_CAN_TxMailbox2AbortCallback
 1827              		.thumb
 1828              		.thumb_func
 1830              	HAL_CAN_TxMailbox2AbortCallback:
 1831              	.LFB161:
1738:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1739:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1740:HALLIB/Src/stm32f7xx_hal_can.c **** 
1741:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1742:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
1743:HALLIB/Src/stm32f7xx_hal_can.c ****             user file
1744:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1745:HALLIB/Src/stm32f7xx_hal_can.c **** }
1746:HALLIB/Src/stm32f7xx_hal_can.c **** 
1747:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1748:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
1749:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1750:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1751:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1752:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1753:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
1754:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1832              		.loc 1 1754 0
 1833              		.cfi_startproc
ARM GAS  /tmp/cc1cC1gt.s 			page 74


 1834              		@ args = 0, pretend = 0, frame = 0
 1835              		@ frame_needed = 0, uses_anonymous_args = 0
 1836              		@ link register save eliminated.
 1837              	.LVL153:
 1838 0000 7047     		bx	lr
 1839              		.cfi_endproc
 1840              	.LFE161:
 1842 0002 00BF     		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1843              		.align	2
 1844              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 1845              		.thumb
 1846              		.thumb_func
 1848              	HAL_CAN_RxFifo0MsgPendingCallback:
 1849              	.LFB162:
1755:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1756:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1757:HALLIB/Src/stm32f7xx_hal_can.c **** 
1758:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1759:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
1760:HALLIB/Src/stm32f7xx_hal_can.c ****             user file
1761:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1762:HALLIB/Src/stm32f7xx_hal_can.c **** }
1763:HALLIB/Src/stm32f7xx_hal_can.c **** 
1764:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1765:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
1766:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1767:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1768:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1769:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1770:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
1771:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1850              		.loc 1 1771 0
 1851              		.cfi_startproc
 1852              		@ args = 0, pretend = 0, frame = 0
 1853              		@ frame_needed = 0, uses_anonymous_args = 0
 1854              		@ link register save eliminated.
 1855              	.LVL154:
 1856 0000 7047     		bx	lr
 1857              		.cfi_endproc
 1858              	.LFE162:
 1860 0002 00BF     		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 1861              		.align	2
 1862              		.weak	HAL_CAN_RxFifo0FullCallback
 1863              		.thumb
 1864              		.thumb_func
 1866              	HAL_CAN_RxFifo0FullCallback:
 1867              	.LFB163:
1772:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1773:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1774:HALLIB/Src/stm32f7xx_hal_can.c **** 
1775:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1776:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
1777:HALLIB/Src/stm32f7xx_hal_can.c ****             user file
1778:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1779:HALLIB/Src/stm32f7xx_hal_can.c **** }
1780:HALLIB/Src/stm32f7xx_hal_can.c **** 
1781:HALLIB/Src/stm32f7xx_hal_can.c **** /**
ARM GAS  /tmp/cc1cC1gt.s 			page 75


1782:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
1783:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1784:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1785:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1786:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1787:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
1788:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1868              		.loc 1 1788 0
 1869              		.cfi_startproc
 1870              		@ args = 0, pretend = 0, frame = 0
 1871              		@ frame_needed = 0, uses_anonymous_args = 0
 1872              		@ link register save eliminated.
 1873              	.LVL155:
 1874 0000 7047     		bx	lr
 1875              		.cfi_endproc
 1876              	.LFE163:
 1878 0002 00BF     		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 1879              		.align	2
 1880              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 1881              		.thumb
 1882              		.thumb_func
 1884              	HAL_CAN_RxFifo1MsgPendingCallback:
 1885              	.LFB164:
1789:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1790:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1791:HALLIB/Src/stm32f7xx_hal_can.c **** 
1792:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1793:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
1794:HALLIB/Src/stm32f7xx_hal_can.c ****             file
1795:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1796:HALLIB/Src/stm32f7xx_hal_can.c **** }
1797:HALLIB/Src/stm32f7xx_hal_can.c **** 
1798:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1799:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
1800:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1801:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1802:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1803:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1804:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
1805:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1886              		.loc 1 1805 0
 1887              		.cfi_startproc
 1888              		@ args = 0, pretend = 0, frame = 0
 1889              		@ frame_needed = 0, uses_anonymous_args = 0
 1890              		@ link register save eliminated.
 1891              	.LVL156:
 1892 0000 7047     		bx	lr
 1893              		.cfi_endproc
 1894              	.LFE164:
 1896 0002 00BF     		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 1897              		.align	2
 1898              		.weak	HAL_CAN_RxFifo1FullCallback
 1899              		.thumb
 1900              		.thumb_func
 1902              	HAL_CAN_RxFifo1FullCallback:
 1903              	.LFB165:
1806:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/cc1cC1gt.s 			page 76


1807:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1808:HALLIB/Src/stm32f7xx_hal_can.c **** 
1809:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1810:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
1811:HALLIB/Src/stm32f7xx_hal_can.c ****             user file
1812:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1813:HALLIB/Src/stm32f7xx_hal_can.c **** }
1814:HALLIB/Src/stm32f7xx_hal_can.c **** 
1815:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1816:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
1817:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1818:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1819:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1820:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1821:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
1822:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1904              		.loc 1 1822 0
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 0
 1907              		@ frame_needed = 0, uses_anonymous_args = 0
 1908              		@ link register save eliminated.
 1909              	.LVL157:
 1910 0000 7047     		bx	lr
 1911              		.cfi_endproc
 1912              	.LFE165:
 1914 0002 00BF     		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 1915              		.align	2
 1916              		.weak	HAL_CAN_SleepCallback
 1917              		.thumb
 1918              		.thumb_func
 1920              	HAL_CAN_SleepCallback:
 1921              	.LFB166:
1823:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1824:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1825:HALLIB/Src/stm32f7xx_hal_can.c **** 
1826:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1827:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
1828:HALLIB/Src/stm32f7xx_hal_can.c ****             file
1829:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1830:HALLIB/Src/stm32f7xx_hal_can.c **** }
1831:HALLIB/Src/stm32f7xx_hal_can.c **** 
1832:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1833:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Sleep callback.
1834:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1835:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1836:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1837:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1838:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
1839:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1922              		.loc 1 1839 0
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 0
 1925              		@ frame_needed = 0, uses_anonymous_args = 0
 1926              		@ link register save eliminated.
 1927              	.LVL158:
 1928 0000 7047     		bx	lr
 1929              		.cfi_endproc
ARM GAS  /tmp/cc1cC1gt.s 			page 77


 1930              	.LFE166:
 1932 0002 00BF     		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 1933              		.align	2
 1934              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 1935              		.thumb
 1936              		.thumb_func
 1938              	HAL_CAN_WakeUpFromRxMsgCallback:
 1939              	.LFB167:
1840:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1841:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1842:HALLIB/Src/stm32f7xx_hal_can.c **** 
1843:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1844:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
1845:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1846:HALLIB/Src/stm32f7xx_hal_can.c **** }
1847:HALLIB/Src/stm32f7xx_hal_can.c **** 
1848:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1849:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
1850:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1851:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1852:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1853:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1854:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
1855:HALLIB/Src/stm32f7xx_hal_can.c **** {
 1940              		.loc 1 1855 0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 0
 1943              		@ frame_needed = 0, uses_anonymous_args = 0
 1944              		@ link register save eliminated.
 1945              	.LVL159:
 1946 0000 7047     		bx	lr
 1947              		.cfi_endproc
 1948              	.LFE167:
 1950 0002 00BF     		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1951              		.align	2
 1952              		.weak	HAL_CAN_ErrorCallback
 1953              		.thumb
 1954              		.thumb_func
 1956              	HAL_CAN_ErrorCallback:
 1957              	.LFB168:
1856:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1857:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1858:HALLIB/Src/stm32f7xx_hal_can.c **** 
1859:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1860:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
1861:HALLIB/Src/stm32f7xx_hal_can.c ****             user file
1862:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1863:HALLIB/Src/stm32f7xx_hal_can.c **** }
1864:HALLIB/Src/stm32f7xx_hal_can.c **** 
1865:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1866:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Error CAN callback.
1867:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1868:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1869:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval None
1870:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1871:HALLIB/Src/stm32f7xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
1872:HALLIB/Src/stm32f7xx_hal_can.c **** {
ARM GAS  /tmp/cc1cC1gt.s 			page 78


 1958              		.loc 1 1872 0
 1959              		.cfi_startproc
 1960              		@ args = 0, pretend = 0, frame = 0
 1961              		@ frame_needed = 0, uses_anonymous_args = 0
 1962              		@ link register save eliminated.
 1963              	.LVL160:
 1964 0000 7047     		bx	lr
 1965              		.cfi_endproc
 1966              	.LFE168:
 1968 0002 00BF     		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 1969              		.align	2
 1970              		.global	HAL_CAN_IRQHandler
 1971              		.thumb
 1972              		.thumb_func
 1974              	HAL_CAN_IRQHandler:
 1975              	.LFB155:
1323:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1976              		.loc 1 1323 0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 0
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 1980              	.LVL161:
1323:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1981              		.loc 1 1323 0
 1982 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1983              	.LCFI14:
 1984              		.cfi_def_cfa_offset 40
 1985              		.cfi_offset 3, -40
 1986              		.cfi_offset 4, -36
 1987              		.cfi_offset 5, -32
 1988              		.cfi_offset 6, -28
 1989              		.cfi_offset 7, -24
 1990              		.cfi_offset 8, -20
 1991              		.cfi_offset 9, -16
 1992              		.cfi_offset 10, -12
 1993              		.cfi_offset 11, -8
 1994              		.cfi_offset 14, -4
 1995 0004 0546     		mov	r5, r0
 1996              	.LVL162:
1325:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 1997              		.loc 1 1325 0
 1998 0006 0368     		ldr	r3, [r0]
 1999 0008 5C69     		ldr	r4, [r3, #20]
 2000              	.LVL163:
1326:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2001              		.loc 1 1326 0
 2002 000a 5F68     		ldr	r7, [r3, #4]
 2003              	.LVL164:
1327:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2004              		.loc 1 1327 0
 2005 000c 9E68     		ldr	r6, [r3, #8]
 2006              	.LVL165:
1328:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2007              		.loc 1 1328 0
 2008 000e D3F80C90 		ldr	r9, [r3, #12]
 2009              	.LVL166:
1329:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
ARM GAS  /tmp/cc1cC1gt.s 			page 79


 2010              		.loc 1 1329 0
 2011 0012 D3F81080 		ldr	r8, [r3, #16]
 2012              	.LVL167:
1330:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2013              		.loc 1 1330 0
 2014 0016 D3F818A0 		ldr	r10, [r3, #24]
 2015              	.LVL168:
1333:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 2016              		.loc 1 1333 0
 2017 001a 14F0010F 		tst	r4, #1
 2018 001e 5AD0     		beq	.L180
1336:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2019              		.loc 1 1336 0
 2020 0020 16F0010F 		tst	r6, #1
 2021 0024 14D0     		beq	.L181
1339:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2022              		.loc 1 1339 0
 2023 0026 0122     		movs	r2, #1
 2024 0028 9A60     		str	r2, [r3, #8]
1341:HALLIB/Src/stm32f7xx_hal_can.c ****       {
 2025              		.loc 1 1341 0
 2026 002a 16F0020F 		tst	r6, #2
 2027 002e 04D0     		beq	.L150
1345:HALLIB/Src/stm32f7xx_hal_can.c ****       }
 2028              		.loc 1 1345 0
 2029 0030 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2030              	.LVL169:
1324:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2031              		.loc 1 1324 0
 2032 0034 4FF0000B 		mov	fp, #0
 2033 0038 12E0     		b	.L149
 2034              	.LVL170:
 2035              	.L150:
1349:HALLIB/Src/stm32f7xx_hal_can.c ****         {
 2036              		.loc 1 1349 0
 2037 003a 16F0040F 		tst	r6, #4
 2038 003e 0AD1     		bne	.L182
1354:HALLIB/Src/stm32f7xx_hal_can.c ****         {
 2039              		.loc 1 1354 0
 2040 0040 16F0080F 		tst	r6, #8
 2041 0044 0AD1     		bne	.L183
1363:HALLIB/Src/stm32f7xx_hal_can.c ****         }
 2042              		.loc 1 1363 0
 2043 0046 FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2044              	.LVL171:
1324:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2045              		.loc 1 1324 0
 2046 004a 4FF0000B 		mov	fp, #0
 2047 004e 07E0     		b	.L149
 2048              	.LVL172:
 2049              	.L181:
 2050 0050 4FF0000B 		mov	fp, #0
 2051 0054 04E0     		b	.L149
 2052              	.L182:
1352:HALLIB/Src/stm32f7xx_hal_can.c ****         }
 2053              		.loc 1 1352 0
 2054 0056 4FF4006B 		mov	fp, #2048
ARM GAS  /tmp/cc1cC1gt.s 			page 80


 2055 005a 01E0     		b	.L149
 2056              	.L183:
1357:HALLIB/Src/stm32f7xx_hal_can.c ****         }
 2057              		.loc 1 1357 0
 2058 005c 4FF4805B 		mov	fp, #4096
 2059              	.LVL173:
 2060              	.L149:
1369:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2061              		.loc 1 1369 0
 2062 0060 16F4807F 		tst	r6, #256
 2063 0064 19D0     		beq	.L151
1372:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2064              		.loc 1 1372 0
 2065 0066 2B68     		ldr	r3, [r5]
 2066 0068 4FF48072 		mov	r2, #256
 2067 006c 9A60     		str	r2, [r3, #8]
1374:HALLIB/Src/stm32f7xx_hal_can.c ****       {
 2068              		.loc 1 1374 0
 2069 006e 16F4007F 		tst	r6, #512
 2070 0072 03D0     		beq	.L152
1378:HALLIB/Src/stm32f7xx_hal_can.c ****       }
 2071              		.loc 1 1378 0
 2072 0074 2846     		mov	r0, r5
 2073 0076 FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2074              	.LVL174:
 2075 007a 0EE0     		b	.L151
 2076              	.L152:
1382:HALLIB/Src/stm32f7xx_hal_can.c ****         {
 2077              		.loc 1 1382 0
 2078 007c 16F4806F 		tst	r6, #1024
 2079 0080 02D0     		beq	.L153
1385:HALLIB/Src/stm32f7xx_hal_can.c ****         }
 2080              		.loc 1 1385 0
 2081 0082 4BF4005B 		orr	fp, fp, #8192
 2082              	.LVL175:
 2083 0086 08E0     		b	.L151
 2084              	.L153:
1387:HALLIB/Src/stm32f7xx_hal_can.c ****         {
 2085              		.loc 1 1387 0
 2086 0088 16F4006F 		tst	r6, #2048
 2087 008c 02D0     		beq	.L154
1390:HALLIB/Src/stm32f7xx_hal_can.c ****         }
 2088              		.loc 1 1390 0
 2089 008e 4BF4804B 		orr	fp, fp, #16384
 2090              	.LVL176:
 2091 0092 02E0     		b	.L151
 2092              	.L154:
1396:HALLIB/Src/stm32f7xx_hal_can.c ****         }
 2093              		.loc 1 1396 0
 2094 0094 2846     		mov	r0, r5
 2095 0096 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2096              	.LVL177:
 2097              	.L151:
1402:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2098              		.loc 1 1402 0
 2099 009a 16F4803F 		tst	r6, #65536
 2100 009e 1CD0     		beq	.L148
ARM GAS  /tmp/cc1cC1gt.s 			page 81


1405:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2101              		.loc 1 1405 0
 2102 00a0 2B68     		ldr	r3, [r5]
 2103 00a2 4FF48032 		mov	r2, #65536
 2104 00a6 9A60     		str	r2, [r3, #8]
1407:HALLIB/Src/stm32f7xx_hal_can.c ****       {
 2105              		.loc 1 1407 0
 2106 00a8 16F4003F 		tst	r6, #131072
 2107 00ac 03D0     		beq	.L155
1411:HALLIB/Src/stm32f7xx_hal_can.c ****       }
 2108              		.loc 1 1411 0
 2109 00ae 2846     		mov	r0, r5
 2110 00b0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2111              	.LVL178:
 2112 00b4 11E0     		b	.L148
 2113              	.L155:
1415:HALLIB/Src/stm32f7xx_hal_can.c ****         {
 2114              		.loc 1 1415 0
 2115 00b6 16F4802F 		tst	r6, #262144
 2116 00ba 02D0     		beq	.L156
1418:HALLIB/Src/stm32f7xx_hal_can.c ****         }
 2117              		.loc 1 1418 0
 2118 00bc 4BF4004B 		orr	fp, fp, #32768
 2119              	.LVL179:
 2120 00c0 0BE0     		b	.L148
 2121              	.L156:
1420:HALLIB/Src/stm32f7xx_hal_can.c ****         {
 2122              		.loc 1 1420 0
 2123 00c2 16F4002F 		tst	r6, #524288
 2124 00c6 02D0     		beq	.L157
1423:HALLIB/Src/stm32f7xx_hal_can.c ****         }
 2125              		.loc 1 1423 0
 2126 00c8 4BF4803B 		orr	fp, fp, #65536
 2127              	.LVL180:
 2128 00cc 05E0     		b	.L148
 2129              	.L157:
1429:HALLIB/Src/stm32f7xx_hal_can.c ****         }
 2130              		.loc 1 1429 0
 2131 00ce 2846     		mov	r0, r5
 2132 00d0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2133              	.LVL181:
 2134 00d4 01E0     		b	.L148
 2135              	.LVL182:
 2136              	.L180:
1324:HALLIB/Src/stm32f7xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2137              		.loc 1 1324 0
 2138 00d6 4FF0000B 		mov	fp, #0
 2139              	.LVL183:
 2140              	.L148:
1436:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 2141              		.loc 1 1436 0
 2142 00da 14F0080F 		tst	r4, #8
 2143 00de 07D0     		beq	.L158
1438:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2144              		.loc 1 1438 0
 2145 00e0 19F0100F 		tst	r9, #16
 2146 00e4 04D0     		beq	.L158
ARM GAS  /tmp/cc1cC1gt.s 			page 82


1441:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2147              		.loc 1 1441 0
 2148 00e6 4BF4007B 		orr	fp, fp, #512
 2149              	.LVL184:
1444:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 2150              		.loc 1 1444 0
 2151 00ea 2B68     		ldr	r3, [r5]
 2152 00ec 1022     		movs	r2, #16
 2153 00ee DA60     		str	r2, [r3, #12]
 2154              	.L158:
1449:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 2155              		.loc 1 1449 0
 2156 00f0 14F0040F 		tst	r4, #4
 2157 00f4 08D0     		beq	.L159
1451:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2158              		.loc 1 1451 0
 2159 00f6 19F0080F 		tst	r9, #8
 2160 00fa 05D0     		beq	.L159
1454:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2161              		.loc 1 1454 0
 2162 00fc 2B68     		ldr	r3, [r5]
 2163 00fe 0822     		movs	r2, #8
 2164 0100 DA60     		str	r2, [r3, #12]
1458:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 2165              		.loc 1 1458 0
 2166 0102 2846     		mov	r0, r5
 2167 0104 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2168              	.LVL185:
 2169              	.L159:
1463:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 2170              		.loc 1 1463 0
 2171 0108 14F0020F 		tst	r4, #2
 2172 010c 07D0     		beq	.L160
1466:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2173              		.loc 1 1466 0
 2174 010e 2B68     		ldr	r3, [r5]
 2175 0110 DB68     		ldr	r3, [r3, #12]
 2176 0112 13F0030F 		tst	r3, #3
 2177 0116 02D0     		beq	.L160
1470:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 2178              		.loc 1 1470 0
 2179 0118 2846     		mov	r0, r5
 2180 011a FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2181              	.LVL186:
 2182              	.L160:
1475:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 2183              		.loc 1 1475 0
 2184 011e 14F0400F 		tst	r4, #64
 2185 0122 07D0     		beq	.L161
1477:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2186              		.loc 1 1477 0
 2187 0124 18F0100F 		tst	r8, #16
 2188 0128 04D0     		beq	.L161
1480:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2189              		.loc 1 1480 0
 2190 012a 4BF4806B 		orr	fp, fp, #1024
 2191              	.LVL187:
ARM GAS  /tmp/cc1cC1gt.s 			page 83


1483:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 2192              		.loc 1 1483 0
 2193 012e 2B68     		ldr	r3, [r5]
 2194 0130 1022     		movs	r2, #16
 2195 0132 1A61     		str	r2, [r3, #16]
 2196              	.L161:
1488:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 2197              		.loc 1 1488 0
 2198 0134 14F0200F 		tst	r4, #32
 2199 0138 08D0     		beq	.L162
1490:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2200              		.loc 1 1490 0
 2201 013a 18F0080F 		tst	r8, #8
 2202 013e 05D0     		beq	.L162
1493:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2203              		.loc 1 1493 0
 2204 0140 2B68     		ldr	r3, [r5]
 2205 0142 0822     		movs	r2, #8
 2206 0144 1A61     		str	r2, [r3, #16]
1497:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 2207              		.loc 1 1497 0
 2208 0146 2846     		mov	r0, r5
 2209 0148 FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2210              	.LVL188:
 2211              	.L162:
1502:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 2212              		.loc 1 1502 0
 2213 014c 14F0100F 		tst	r4, #16
 2214 0150 07D0     		beq	.L163
1505:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2215              		.loc 1 1505 0
 2216 0152 2B68     		ldr	r3, [r5]
 2217 0154 1B69     		ldr	r3, [r3, #16]
 2218 0156 13F0030F 		tst	r3, #3
 2219 015a 02D0     		beq	.L163
1509:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 2220              		.loc 1 1509 0
 2221 015c 2846     		mov	r0, r5
 2222 015e FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2223              	.LVL189:
 2224              	.L163:
1514:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 2225              		.loc 1 1514 0
 2226 0162 14F4003F 		tst	r4, #131072
 2227 0166 08D0     		beq	.L164
1516:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2228              		.loc 1 1516 0
 2229 0168 17F0100F 		tst	r7, #16
 2230 016c 05D0     		beq	.L164
1519:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2231              		.loc 1 1519 0
 2232 016e 2B68     		ldr	r3, [r5]
 2233 0170 1022     		movs	r2, #16
 2234 0172 5A60     		str	r2, [r3, #4]
1523:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 2235              		.loc 1 1523 0
 2236 0174 2846     		mov	r0, r5
ARM GAS  /tmp/cc1cC1gt.s 			page 84


 2237 0176 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2238              	.LVL190:
 2239              	.L164:
1528:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 2240              		.loc 1 1528 0
 2241 017a 14F4803F 		tst	r4, #65536
 2242 017e 08D0     		beq	.L165
1530:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2243              		.loc 1 1530 0
 2244 0180 17F0080F 		tst	r7, #8
 2245 0184 05D0     		beq	.L165
1533:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2246              		.loc 1 1533 0
 2247 0186 2B68     		ldr	r3, [r5]
 2248 0188 0822     		movs	r2, #8
 2249 018a 5A60     		str	r2, [r3, #4]
1537:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 2250              		.loc 1 1537 0
 2251 018c 2846     		mov	r0, r5
 2252 018e FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2253              	.LVL191:
 2254              	.L165:
1542:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 2255              		.loc 1 1542 0
 2256 0192 14F4004F 		tst	r4, #32768
 2257 0196 4ED0     		beq	.L166
1544:HALLIB/Src/stm32f7xx_hal_can.c ****     {
 2258              		.loc 1 1544 0
 2259 0198 17F0040F 		tst	r7, #4
 2260 019c 48D0     		beq	.L167
1547:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
 2261              		.loc 1 1547 0
 2262 019e 14F4807F 		tst	r4, #256
 2263 01a2 04D0     		beq	.L168
1547:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
 2264              		.loc 1 1547 0 is_stmt 0 discriminator 1
 2265 01a4 1AF0010F 		tst	r10, #1
 2266 01a8 01D0     		beq	.L168
1551:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2267              		.loc 1 1551 0 is_stmt 1
 2268 01aa 4BF0010B 		orr	fp, fp, #1
 2269              	.LVL192:
 2270              	.L168:
1557:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
 2271              		.loc 1 1557 0
 2272 01ae 14F4007F 		tst	r4, #512
 2273 01b2 04D0     		beq	.L169
1557:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
 2274              		.loc 1 1557 0 is_stmt 0 discriminator 1
 2275 01b4 1AF0020F 		tst	r10, #2
 2276 01b8 01D0     		beq	.L169
1561:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2277              		.loc 1 1561 0 is_stmt 1
 2278 01ba 4BF0020B 		orr	fp, fp, #2
 2279              	.LVL193:
 2280              	.L169:
1567:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
ARM GAS  /tmp/cc1cC1gt.s 			page 85


 2281              		.loc 1 1567 0
 2282 01be 14F4806F 		tst	r4, #1024
 2283 01c2 04D0     		beq	.L170
1567:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
 2284              		.loc 1 1567 0 is_stmt 0 discriminator 1
 2285 01c4 1AF0040F 		tst	r10, #4
 2286 01c8 01D0     		beq	.L170
1571:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2287              		.loc 1 1571 0 is_stmt 1
 2288 01ca 4BF0040B 		orr	fp, fp, #4
 2289              	.LVL194:
 2290              	.L170:
1577:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
 2291              		.loc 1 1577 0
 2292 01ce 14F4006F 		tst	r4, #2048
 2293 01d2 2DD0     		beq	.L167
1577:HALLIB/Src/stm32f7xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
 2294              		.loc 1 1577 0 is_stmt 0 discriminator 1
 2295 01d4 1AF0700A 		ands	r10, r10, #112
 2296              	.LVL195:
 2297 01d8 2AD0     		beq	.L167
1580:HALLIB/Src/stm32f7xx_hal_can.c ****         {
 2298              		.loc 1 1580 0 is_stmt 1
 2299 01da BAF1300F 		cmp	r10, #48
 2300 01de 17D0     		beq	.L172
 2301 01e0 06D8     		bhi	.L173
 2302 01e2 BAF1100F 		cmp	r10, #16
 2303 01e6 0DD0     		beq	.L174
 2304 01e8 BAF1200F 		cmp	r10, #32
 2305 01ec 0DD0     		beq	.L175
 2306 01ee 1AE0     		b	.L171
 2307              	.L173:
 2308 01f0 BAF1500F 		cmp	r10, #80
 2309 01f4 12D0     		beq	.L176
 2310 01f6 BAF1600F 		cmp	r10, #96
 2311 01fa 12D0     		beq	.L177
 2312 01fc BAF1400F 		cmp	r10, #64
 2313 0200 11D1     		bne	.L171
 2314 0202 08E0     		b	.L178
 2315              	.L174:
1584:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
 2316              		.loc 1 1584 0
 2317 0204 4BF0080B 		orr	fp, fp, #8
 2318              	.LVL196:
1585:HALLIB/Src/stm32f7xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2319              		.loc 1 1585 0
 2320 0208 0DE0     		b	.L171
 2321              	.L175:
1588:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
 2322              		.loc 1 1588 0
 2323 020a 4BF0100B 		orr	fp, fp, #16
 2324              	.LVL197:
1589:HALLIB/Src/stm32f7xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2325              		.loc 1 1589 0
 2326 020e 0AE0     		b	.L171
 2327              	.L172:
1592:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
ARM GAS  /tmp/cc1cC1gt.s 			page 86


 2328              		.loc 1 1592 0
 2329 0210 4BF0200B 		orr	fp, fp, #32
 2330              	.LVL198:
1593:HALLIB/Src/stm32f7xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2331              		.loc 1 1593 0
 2332 0214 07E0     		b	.L171
 2333              	.L178:
1596:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
 2334              		.loc 1 1596 0
 2335 0216 4BF0400B 		orr	fp, fp, #64
 2336              	.LVL199:
1597:HALLIB/Src/stm32f7xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2337              		.loc 1 1597 0
 2338 021a 04E0     		b	.L171
 2339              	.L176:
1600:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
 2340              		.loc 1 1600 0
 2341 021c 4BF0800B 		orr	fp, fp, #128
 2342              	.LVL200:
1601:HALLIB/Src/stm32f7xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2343              		.loc 1 1601 0
 2344 0220 01E0     		b	.L171
 2345              	.L177:
1604:HALLIB/Src/stm32f7xx_hal_can.c ****             break;
 2346              		.loc 1 1604 0
 2347 0222 4BF4807B 		orr	fp, fp, #256
 2348              	.LVL201:
 2349              	.L171:
1611:HALLIB/Src/stm32f7xx_hal_can.c ****       }
 2350              		.loc 1 1611 0
 2351 0226 2A68     		ldr	r2, [r5]
 2352 0228 9369     		ldr	r3, [r2, #24]
 2353 022a 23F07003 		bic	r3, r3, #112
 2354 022e 9361     		str	r3, [r2, #24]
 2355              	.L167:
1616:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 2356              		.loc 1 1616 0
 2357 0230 2B68     		ldr	r3, [r5]
 2358 0232 0422     		movs	r2, #4
 2359 0234 5A60     		str	r2, [r3, #4]
 2360              	.L166:
1620:HALLIB/Src/stm32f7xx_hal_can.c ****   {
 2361              		.loc 1 1620 0
 2362 0236 BBF1000F 		cmp	fp, #0
 2363 023a 06D0     		beq	.L147
1623:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2364              		.loc 1 1623 0
 2365 023c 6B6A     		ldr	r3, [r5, #36]
 2366 023e 4BEA0303 		orr	r3, fp, r3
 2367 0242 6B62     		str	r3, [r5, #36]
1627:HALLIB/Src/stm32f7xx_hal_can.c ****   }
 2368              		.loc 1 1627 0
 2369 0244 2846     		mov	r0, r5
 2370 0246 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2371              	.LVL202:
 2372              	.L147:
 2373 024a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/cc1cC1gt.s 			page 87


 2374              		.cfi_endproc
 2375              	.LFE155:
 2377 024e 00BF     		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2378              		.align	2
 2379              		.global	HAL_CAN_GetState
 2380              		.thumb
 2381              		.thumb_func
 2383              	HAL_CAN_GetState:
 2384              	.LFB169:
1873:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1874:HALLIB/Src/stm32f7xx_hal_can.c ****   UNUSED(hcan);
1875:HALLIB/Src/stm32f7xx_hal_can.c **** 
1876:HALLIB/Src/stm32f7xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1877:HALLIB/Src/stm32f7xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
1878:HALLIB/Src/stm32f7xx_hal_can.c ****    */
1879:HALLIB/Src/stm32f7xx_hal_can.c **** }
1880:HALLIB/Src/stm32f7xx_hal_can.c **** 
1881:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1882:HALLIB/Src/stm32f7xx_hal_can.c ****   * @}
1883:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1884:HALLIB/Src/stm32f7xx_hal_can.c **** 
1885:HALLIB/Src/stm32f7xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
1886:HALLIB/Src/stm32f7xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
1887:HALLIB/Src/stm32f7xx_hal_can.c ****  *
1888:HALLIB/Src/stm32f7xx_hal_can.c **** @verbatim
1889:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
1890:HALLIB/Src/stm32f7xx_hal_can.c ****             ##### Peripheral State and Error functions #####
1891:HALLIB/Src/stm32f7xx_hal_can.c ****   ==============================================================================
1892:HALLIB/Src/stm32f7xx_hal_can.c ****     [..]
1893:HALLIB/Src/stm32f7xx_hal_can.c ****     This subsection provides functions allowing to :
1894:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
1895:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
1896:HALLIB/Src/stm32f7xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
1897:HALLIB/Src/stm32f7xx_hal_can.c **** 
1898:HALLIB/Src/stm32f7xx_hal_can.c **** @endverbatim
1899:HALLIB/Src/stm32f7xx_hal_can.c ****   * @{
1900:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1901:HALLIB/Src/stm32f7xx_hal_can.c **** 
1902:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1903:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Return the CAN state.
1904:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1905:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1906:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL state
1907:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1908:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
1909:HALLIB/Src/stm32f7xx_hal_can.c **** {
 2385              		.loc 1 1909 0
 2386              		.cfi_startproc
 2387              		@ args = 0, pretend = 0, frame = 0
 2388              		@ frame_needed = 0, uses_anonymous_args = 0
 2389              		@ link register save eliminated.
 2390              	.LVL203:
1910:HALLIB/Src/stm32f7xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2391              		.loc 1 1910 0
 2392 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2393 0004 DBB2     		uxtb	r3, r3
 2394              	.LVL204:
ARM GAS  /tmp/cc1cC1gt.s 			page 88


1911:HALLIB/Src/stm32f7xx_hal_can.c **** 
1912:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 2395              		.loc 1 1912 0
 2396 0006 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 2397 000a D2B2     		uxtb	r2, r2
 2398 000c 012A     		cmp	r2, #1
 2399 000e 04D0     		beq	.L186
1913:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2400              		.loc 1 1913 0 discriminator 1
 2401 0010 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 2402 0014 D2B2     		uxtb	r2, r2
1912:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2403              		.loc 1 1912 0 discriminator 1
 2404 0016 022A     		cmp	r2, #2
 2405 0018 0CD1     		bne	.L187
 2406              	.L186:
1914:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1915:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
1916:HALLIB/Src/stm32f7xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 2407              		.loc 1 1916 0
 2408 001a 0268     		ldr	r2, [r0]
 2409 001c 5168     		ldr	r1, [r2, #4]
 2410 001e 11F0020F 		tst	r1, #2
 2411 0022 04D1     		bne	.L188
1917:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1918:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Sleep mode is active */
1919:HALLIB/Src/stm32f7xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
1920:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1921:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Check sleep mode request flag */
1922:HALLIB/Src/stm32f7xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != RESET)
 2412              		.loc 1 1922 0
 2413 0024 1268     		ldr	r2, [r2]
 2414 0026 12F0020F 		tst	r2, #2
 2415 002a 02D1     		bne	.L189
 2416 002c 02E0     		b	.L187
 2417              	.L188:
1919:HALLIB/Src/stm32f7xx_hal_can.c ****     }
 2418              		.loc 1 1919 0
 2419 002e 0423     		movs	r3, #4
 2420              	.LVL205:
 2421 0030 00E0     		b	.L187
 2422              	.LVL206:
 2423              	.L189:
1923:HALLIB/Src/stm32f7xx_hal_can.c ****     {
1924:HALLIB/Src/stm32f7xx_hal_can.c ****       /* Sleep mode request is pending */
1925:HALLIB/Src/stm32f7xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
 2424              		.loc 1 1925 0
 2425 0032 0323     		movs	r3, #3
 2426              	.LVL207:
 2427              	.L187:
1926:HALLIB/Src/stm32f7xx_hal_can.c ****     }
1927:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1928:HALLIB/Src/stm32f7xx_hal_can.c **** 
1929:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Return CAN state */
1930:HALLIB/Src/stm32f7xx_hal_can.c ****   return state;
1931:HALLIB/Src/stm32f7xx_hal_can.c **** }
 2428              		.loc 1 1931 0
ARM GAS  /tmp/cc1cC1gt.s 			page 89


 2429 0034 1846     		mov	r0, r3
 2430              	.LVL208:
 2431 0036 7047     		bx	lr
 2432              		.cfi_endproc
 2433              	.LFE169:
 2435              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2436              		.align	2
 2437              		.global	HAL_CAN_GetError
 2438              		.thumb
 2439              		.thumb_func
 2441              	HAL_CAN_GetError:
 2442              	.LFB170:
1932:HALLIB/Src/stm32f7xx_hal_can.c **** 
1933:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1934:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Return the CAN error code.
1935:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1936:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1937:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval CAN Error Code
1938:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1939:HALLIB/Src/stm32f7xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
1940:HALLIB/Src/stm32f7xx_hal_can.c **** {
 2443              		.loc 1 1940 0
 2444              		.cfi_startproc
 2445              		@ args = 0, pretend = 0, frame = 0
 2446              		@ frame_needed = 0, uses_anonymous_args = 0
 2447              		@ link register save eliminated.
 2448              	.LVL209:
1941:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Return CAN error code */
1942:HALLIB/Src/stm32f7xx_hal_can.c ****   return hcan->ErrorCode;
 2449              		.loc 1 1942 0
 2450 0000 406A     		ldr	r0, [r0, #36]
 2451              	.LVL210:
1943:HALLIB/Src/stm32f7xx_hal_can.c **** }
 2452              		.loc 1 1943 0
 2453 0002 7047     		bx	lr
 2454              		.cfi_endproc
 2455              	.LFE170:
 2457              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2458              		.align	2
 2459              		.global	HAL_CAN_ResetError
 2460              		.thumb
 2461              		.thumb_func
 2463              	HAL_CAN_ResetError:
 2464              	.LFB171:
1944:HALLIB/Src/stm32f7xx_hal_can.c **** 
1945:HALLIB/Src/stm32f7xx_hal_can.c **** /**
1946:HALLIB/Src/stm32f7xx_hal_can.c ****   * @brief  Reset the CAN error code.
1947:HALLIB/Src/stm32f7xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1948:HALLIB/Src/stm32f7xx_hal_can.c ****   *         the configuration information for the specified CAN.
1949:HALLIB/Src/stm32f7xx_hal_can.c ****   * @retval HAL status
1950:HALLIB/Src/stm32f7xx_hal_can.c ****   */
1951:HALLIB/Src/stm32f7xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
1952:HALLIB/Src/stm32f7xx_hal_can.c **** {
 2465              		.loc 1 1952 0
 2466              		.cfi_startproc
 2467              		@ args = 0, pretend = 0, frame = 0
 2468              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc1cC1gt.s 			page 90


 2469              		@ link register save eliminated.
 2470              	.LVL211:
1953:HALLIB/Src/stm32f7xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
1954:HALLIB/Src/stm32f7xx_hal_can.c **** 
1955:HALLIB/Src/stm32f7xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 2471              		.loc 1 1955 0
 2472 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2473 0004 DBB2     		uxtb	r3, r3
 2474 0006 012B     		cmp	r3, #1
 2475 0008 04D0     		beq	.L192
1956:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2476              		.loc 1 1956 0 discriminator 1
 2477 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2478 000e DBB2     		uxtb	r3, r3
1955:HALLIB/Src/stm32f7xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2479              		.loc 1 1955 0 discriminator 1
 2480 0010 022B     		cmp	r3, #2
 2481 0012 03D1     		bne	.L193
 2482              	.L192:
1957:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1958:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Reset CAN error code */
1959:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode = 0U;
 2483              		.loc 1 1959 0
 2484 0014 0023     		movs	r3, #0
 2485 0016 4362     		str	r3, [r0, #36]
1953:HALLIB/Src/stm32f7xx_hal_can.c **** 
 2486              		.loc 1 1953 0
 2487 0018 1846     		mov	r0, r3
 2488              	.LVL212:
 2489              		.loc 1 1959 0
 2490 001a 7047     		bx	lr
 2491              	.LVL213:
 2492              	.L193:
1960:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1961:HALLIB/Src/stm32f7xx_hal_can.c ****   else
1962:HALLIB/Src/stm32f7xx_hal_can.c ****   {
1963:HALLIB/Src/stm32f7xx_hal_can.c ****     /* Update error code */
1964:HALLIB/Src/stm32f7xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2493              		.loc 1 1964 0
 2494 001c 436A     		ldr	r3, [r0, #36]
 2495 001e 43F48023 		orr	r3, r3, #262144
 2496 0022 4362     		str	r3, [r0, #36]
 2497              	.LVL214:
1965:HALLIB/Src/stm32f7xx_hal_can.c **** 
1966:HALLIB/Src/stm32f7xx_hal_can.c ****     status = HAL_ERROR;
 2498              		.loc 1 1966 0
 2499 0024 0120     		movs	r0, #1
 2500              	.LVL215:
1967:HALLIB/Src/stm32f7xx_hal_can.c ****   }
1968:HALLIB/Src/stm32f7xx_hal_can.c **** 
1969:HALLIB/Src/stm32f7xx_hal_can.c ****   /* Return the status */
1970:HALLIB/Src/stm32f7xx_hal_can.c ****   return status;
1971:HALLIB/Src/stm32f7xx_hal_can.c **** }
 2501              		.loc 1 1971 0
 2502 0026 7047     		bx	lr
 2503              		.cfi_endproc
 2504              	.LFE171:
ARM GAS  /tmp/cc1cC1gt.s 			page 91


 2506              		.text
 2507              	.Letext0:
 2508              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 2509              		.file 4 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 2510              		.file 5 "Inc/stm32f767xx.h"
 2511              		.file 6 "Inc/stm32f7xx.h"
 2512              		.file 7 "HALLIB/Inc/stm32f7xx_hal_def.h"
 2513              		.file 8 "HALLIB/Inc/stm32f7xx_hal_can.h"
 2514              		.file 9 "CORE/core_cm7.h"
 2515              		.file 10 "HALLIB/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/cc1cC1gt.s 			page 92


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_can.c
     /tmp/cc1cC1gt.s:21     .text.HAL_CAN_MspInit:00000000 $t
     /tmp/cc1cC1gt.s:26     .text.HAL_CAN_MspInit:00000000 HAL_CAN_MspInit
     /tmp/cc1cC1gt.s:40     .text.HAL_CAN_Init:00000000 $t
     /tmp/cc1cC1gt.s:45     .text.HAL_CAN_Init:00000000 HAL_CAN_Init
     /tmp/cc1cC1gt.s:282    .text.HAL_CAN_MspDeInit:00000000 $t
     /tmp/cc1cC1gt.s:287    .text.HAL_CAN_MspDeInit:00000000 HAL_CAN_MspDeInit
     /tmp/cc1cC1gt.s:300    .text.HAL_CAN_ConfigFilter:00000000 $t
     /tmp/cc1cC1gt.s:305    .text.HAL_CAN_ConfigFilter:00000000 HAL_CAN_ConfigFilter
     /tmp/cc1cC1gt.s:504    .text.HAL_CAN_ConfigFilter:00000124 $d
     /tmp/cc1cC1gt.s:510    .text.HAL_CAN_Start:00000000 $t
     /tmp/cc1cC1gt.s:515    .text.HAL_CAN_Start:00000000 HAL_CAN_Start
     /tmp/cc1cC1gt.s:596    .text.HAL_CAN_Stop:00000000 $t
     /tmp/cc1cC1gt.s:601    .text.HAL_CAN_Stop:00000000 HAL_CAN_Stop
     /tmp/cc1cC1gt.s:684    .text.HAL_CAN_DeInit:00000000 $t
     /tmp/cc1cC1gt.s:689    .text.HAL_CAN_DeInit:00000000 HAL_CAN_DeInit
     /tmp/cc1cC1gt.s:738    .text.HAL_CAN_RequestSleep:00000000 $t
     /tmp/cc1cC1gt.s:743    .text.HAL_CAN_RequestSleep:00000000 HAL_CAN_RequestSleep
     /tmp/cc1cC1gt.s:787    .text.HAL_CAN_WakeUp:00000000 $t
     /tmp/cc1cC1gt.s:792    .text.HAL_CAN_WakeUp:00000000 HAL_CAN_WakeUp
     /tmp/cc1cC1gt.s:870    .text.HAL_CAN_WakeUp:00000058 $d
     /tmp/cc1cC1gt.s:875    .text.HAL_CAN_IsSleepActive:00000000 $t
     /tmp/cc1cC1gt.s:880    .text.HAL_CAN_IsSleepActive:00000000 HAL_CAN_IsSleepActive
     /tmp/cc1cC1gt.s:925    .text.HAL_CAN_AddTxMessage:00000000 $t
     /tmp/cc1cC1gt.s:930    .text.HAL_CAN_AddTxMessage:00000000 HAL_CAN_AddTxMessage
     /tmp/cc1cC1gt.s:1100   .text.HAL_CAN_AbortTxRequest:00000000 $t
     /tmp/cc1cC1gt.s:1105   .text.HAL_CAN_AbortTxRequest:00000000 HAL_CAN_AbortTxRequest
     /tmp/cc1cC1gt.s:1176   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 $t
     /tmp/cc1cC1gt.s:1181   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/cc1cC1gt.s:1244   .text.HAL_CAN_IsTxMessagePending:00000000 $t
     /tmp/cc1cC1gt.s:1249   .text.HAL_CAN_IsTxMessagePending:00000000 HAL_CAN_IsTxMessagePending
     /tmp/cc1cC1gt.s:1296   .text.HAL_CAN_GetTxTimestamp:00000000 $t
     /tmp/cc1cC1gt.s:1301   .text.HAL_CAN_GetTxTimestamp:00000000 HAL_CAN_GetTxTimestamp
     /tmp/cc1cC1gt.s:1360   .text.HAL_CAN_GetRxMessage:00000000 $t
     /tmp/cc1cC1gt.s:1365   .text.HAL_CAN_GetRxMessage:00000000 HAL_CAN_GetRxMessage
     /tmp/cc1cC1gt.s:1581   .text.HAL_CAN_GetRxFifoFillLevel:00000000 $t
     /tmp/cc1cC1gt.s:1586   .text.HAL_CAN_GetRxFifoFillLevel:00000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/cc1cC1gt.s:1635   .text.HAL_CAN_ActivateNotification:00000000 $t
     /tmp/cc1cC1gt.s:1640   .text.HAL_CAN_ActivateNotification:00000000 HAL_CAN_ActivateNotification
     /tmp/cc1cC1gt.s:1685   .text.HAL_CAN_DeactivateNotification:00000000 $t
     /tmp/cc1cC1gt.s:1690   .text.HAL_CAN_DeactivateNotification:00000000 HAL_CAN_DeactivateNotification
     /tmp/cc1cC1gt.s:1735   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 $t
     /tmp/cc1cC1gt.s:1740   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/cc1cC1gt.s:1753   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 $t
     /tmp/cc1cC1gt.s:1758   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/cc1cC1gt.s:1771   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 $t
     /tmp/cc1cC1gt.s:1776   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/cc1cC1gt.s:1789   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 $t
     /tmp/cc1cC1gt.s:1794   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/cc1cC1gt.s:1807   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 $t
     /tmp/cc1cC1gt.s:1812   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/cc1cC1gt.s:1825   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 $t
     /tmp/cc1cC1gt.s:1830   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/cc1cC1gt.s:1843   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 $t
     /tmp/cc1cC1gt.s:1848   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cc1cC1gt.s:1861   .text.HAL_CAN_RxFifo0FullCallback:00000000 $t
ARM GAS  /tmp/cc1cC1gt.s 			page 93


     /tmp/cc1cC1gt.s:1866   .text.HAL_CAN_RxFifo0FullCallback:00000000 HAL_CAN_RxFifo0FullCallback
     /tmp/cc1cC1gt.s:1879   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 $t
     /tmp/cc1cC1gt.s:1884   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/cc1cC1gt.s:1897   .text.HAL_CAN_RxFifo1FullCallback:00000000 $t
     /tmp/cc1cC1gt.s:1902   .text.HAL_CAN_RxFifo1FullCallback:00000000 HAL_CAN_RxFifo1FullCallback
     /tmp/cc1cC1gt.s:1915   .text.HAL_CAN_SleepCallback:00000000 $t
     /tmp/cc1cC1gt.s:1920   .text.HAL_CAN_SleepCallback:00000000 HAL_CAN_SleepCallback
     /tmp/cc1cC1gt.s:1933   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 $t
     /tmp/cc1cC1gt.s:1938   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/cc1cC1gt.s:1951   .text.HAL_CAN_ErrorCallback:00000000 $t
     /tmp/cc1cC1gt.s:1956   .text.HAL_CAN_ErrorCallback:00000000 HAL_CAN_ErrorCallback
     /tmp/cc1cC1gt.s:1969   .text.HAL_CAN_IRQHandler:00000000 $t
     /tmp/cc1cC1gt.s:1974   .text.HAL_CAN_IRQHandler:00000000 HAL_CAN_IRQHandler
     /tmp/cc1cC1gt.s:2378   .text.HAL_CAN_GetState:00000000 $t
     /tmp/cc1cC1gt.s:2383   .text.HAL_CAN_GetState:00000000 HAL_CAN_GetState
     /tmp/cc1cC1gt.s:2436   .text.HAL_CAN_GetError:00000000 $t
     /tmp/cc1cC1gt.s:2441   .text.HAL_CAN_GetError:00000000 HAL_CAN_GetError
     /tmp/cc1cC1gt.s:2458   .text.HAL_CAN_ResetError:00000000 $t
     /tmp/cc1cC1gt.s:2463   .text.HAL_CAN_ResetError:00000000 HAL_CAN_ResetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
