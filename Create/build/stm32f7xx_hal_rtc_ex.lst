ARM GAS  /tmp/ccMphqsi.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_rtc_ex.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_RTCEx_SetTimeStamp,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_RTCEx_SetTimeStamp
  23              		.thumb
  24              		.thumb_func
  26              	HAL_RTCEx_SetTimeStamp:
  27              	.LFB136:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal_rtc_ex.c"
   1:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @file    stm32f7xx_hal_rtc_ex.c
   4:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief   RTC HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          functionalities of the Real Time Clock (RTC) Extension peripheral:
   8:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *           + RTC Time Stamp functions
   9:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *           + RTC Tamper functions 
  10:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *           + RTC Wake-up functions
  11:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *           + Extension Control functions
  12:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *           + Extension RTC features functions    
  13:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *         
  14:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   @verbatim
  15:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   ==============================================================================
  16:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                   ##### How to use this driver #####
  17:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   ==============================================================================
  18:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   [..] 
  19:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) Enable the RTC domain access.
  20:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  21:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         format using the HAL_RTC_Init() function.
  22:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
  23:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *** RTC Wakeup configuration ***
  24:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   ================================
  25:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   [..] 
  26:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) To configure the RTC Wakeup Clock source and Counter use the HAL_RTC_SetWakeUpTimer()
  27:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         function. You can also configure the RTC Wakeup timer in interrupt mode 
  28:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         using the HAL_RTC_SetWakeUpTimer_IT() function.
  29:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) To read the RTC WakeUp Counter register, use the HAL_RTC_GetWakeUpTimer() 
  30:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         function.
ARM GAS  /tmp/ccMphqsi.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
  32:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *** TimeStamp configuration ***
  33:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   ===============================
  34:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   [..]
  35:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) Enables the RTC TimeStamp using the HAL_RTC_SetTimeStamp() function.
  36:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         You can also configure the RTC TimeStamp with interrupt mode using the
  37:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         HAL_RTC_SetTimeStamp_IT() function.
  38:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) To read the RTC TimeStamp Time and Date register, use the HAL_RTC_GetTimeStamp()
  39:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         function.
  40:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
  41:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *** Internal TimeStamp configuration ***
  42:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   ===============================
  43:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   [..]
  44:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) Enables the RTC internal TimeStamp using the HAL_RTC_SetInternalTimeStamp() function.
  45:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) To read the RTC TimeStamp Time and Date register, use the HAL_RTC_GetTimeStamp()
  46:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         function.
  47:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
  48:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *** Tamper configuration ***
  49:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   ============================
  50:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   [..]
  51:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) Enable the RTC Tamper and Configure the Tamper filter count, trigger Edge 
  52:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         or Level according to the Tamper filter (if equal to 0 Edge else Level) 
  53:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         value, sampling frequency, NoErase, MaskFlag,  precharge or discharge and
  54:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         Pull-UP using the HAL_RTC_SetTamper() function. You can configure RTC Tamper
  55:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         with interrupt mode using HAL_RTC_SetTamper_IT() function.
  56:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) The default configuration of the Tamper erases the backup registers. To avoid
  57:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         erase, enable the NoErase field on the RTC_TAMPCR register.
  58:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
  59:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *** Backup Data Registers configuration ***
  60:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   ===========================================
  61:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   [..]
  62:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) To write to the RTC Backup Data registers, use the HAL_RTC_BKUPWrite()
  63:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         function.  
  64:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     (+) To read the RTC Backup Data registers, use the HAL_RTC_BKUPRead()
  65:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         function.
  66:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****      
  67:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****    @endverbatim
  68:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   ******************************************************************************
  69:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @attention
  70:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *
  71:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  72:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *
  73:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  74:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * are permitted provided that the following conditions are met:
  75:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  76:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *      this list of conditions and the following disclaimer.
  77:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  78:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  79:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *      and/or other materials provided with the distribution.
  80:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  81:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *      may be used to endorse or promote products derived from this software
  82:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *      without specific prior written permission.
  83:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *
  84:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  85:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  86:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  87:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
ARM GAS  /tmp/ccMphqsi.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  89:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  90:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  91:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  92:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  93:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  94:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *
  95:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   ******************************************************************************
  96:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */ 
  97:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
  98:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /* Includes ------------------------------------------------------------------*/
  99:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** #include "stm32f7xx_hal.h"
 100:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 101:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /** @addtogroup STM32F7xx_HAL_Driver
 102:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @{
 103:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 104:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 105:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /** @defgroup RTCEx RTCEx 
 106:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief RTC Extended HAL module driver
 107:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @{
 108:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 109:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 110:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** #ifdef HAL_RTC_MODULE_ENABLED
 111:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 112:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /* Private typedef -----------------------------------------------------------*/
 113:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /* Private define ------------------------------------------------------------*/
 114:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /* Private macro -------------------------------------------------------------*/
 115:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /* Private variables ---------------------------------------------------------*/
 116:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /* Private function prototypes -----------------------------------------------*/
 117:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /* Private functions ---------------------------------------------------------*/
 118:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 119:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /** @defgroup RTCEx_Exported_Functions RTCEx Exported Functions
 120:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @{
 121:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 122:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 123:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 124:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /** @defgroup RTCEx_Group1 RTC TimeStamp and Tamper functions
 125:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  *  @brief   RTC TimeStamp and Tamper functions
 126:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  *
 127:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** @verbatim   
 128:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  ===============================================================================
 129:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                  ##### RTC TimeStamp and Tamper functions #####
 130:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  ===============================================================================  
 131:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  
 132:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  [..] This section provides functions allowing to configure TimeStamp feature
 133:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 134:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** @endverbatim
 135:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @{
 136:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 137:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 138:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 139:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Sets TimeStamp.
 140:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @note   This API must be called before enabling the TimeStamp feature. 
 141:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 142:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 143:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  TimeStampEdge Specifies the pin edge on which the TimeStamp is 
 144:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *         activated.
ARM GAS  /tmp/ccMphqsi.s 			page 4


 145:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be one of the following values:
 146:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPEDGE_RISING: the Time stamp event occurs on the  
 147:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                                        rising edge of the related pin.
 148:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPEDGE_FALLING: the Time stamp event occurs on the 
 149:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                                         falling edge of the related pin.
 150:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  RTC_TimeStampPin specifies the RTC TimeStamp Pin.
 151:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be one of the following values:
 152:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPPIN_PC13: PC13 is selected as RTC TimeStamp Pin.
 153:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.  
 154:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.   
 155:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 156:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 157:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t 
 158:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
  29              		.loc 1 158 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35 0000 70B4     		push	{r4, r5, r6}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 12
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 6, -4
  41              	.LVL1:
 159:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0;
 160:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 161:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
 162:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
 163:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
 164:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 165:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
 166:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
  42              		.loc 1 166 0
  43 0002 047F     		ldrb	r4, [r0, #28]	@ zero_extendqisi2
  44 0004 012C     		cmp	r4, #1
  45 0006 26D0     		beq	.L3
  46              		.loc 1 166 0 is_stmt 0 discriminator 2
  47 0008 0125     		movs	r5, #1
  48 000a 0577     		strb	r5, [r0, #28]
 167:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 168:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
  49              		.loc 1 168 0 is_stmt 1 discriminator 2
  50 000c 0223     		movs	r3, #2
  51 000e 4377     		strb	r3, [r0, #29]
 169:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 170:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get the RTC_CR register and clear the bits to be configured */
 171:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
  52              		.loc 1 171 0 discriminator 2
  53 0010 0468     		ldr	r4, [r0]
  54 0012 A668     		ldr	r6, [r4, #8]
  55 0014 A3F60B03 		subw	r3, r3, #2059
  56 0018 3340     		ands	r3, r3, r6
  57              	.LVL2:
 172:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
ARM GAS  /tmp/ccMphqsi.s 			page 5


 173:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmpreg|= TimeStampEdge;
  58              		.loc 1 173 0 discriminator 2
  59 001a 1943     		orrs	r1, r1, r3
  60              	.LVL3:
 174:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 175:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 176:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  61              		.loc 1 176 0 discriminator 2
  62 001c CA23     		movs	r3, #202
  63 001e 6362     		str	r3, [r4, #36]
  64 0020 0368     		ldr	r3, [r0]
  65 0022 5324     		movs	r4, #83
  66 0024 5C62     		str	r4, [r3, #36]
 177:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 178:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
  67              		.loc 1 178 0 discriminator 2
  68 0026 0468     		ldr	r4, [r0]
  69 0028 E36C     		ldr	r3, [r4, #76]
  70 002a 23F00603 		bic	r3, r3, #6
  71 002e E364     		str	r3, [r4, #76]
 179:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin); 
  72              		.loc 1 179 0 discriminator 2
  73 0030 0468     		ldr	r4, [r0]
  74 0032 E36C     		ldr	r3, [r4, #76]
  75 0034 1A43     		orrs	r2, r2, r3
  76              	.LVL4:
  77 0036 E264     		str	r2, [r4, #76]
 180:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 181:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
 182:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CR = (uint32_t)tmpreg;
  78              		.loc 1 182 0 discriminator 2
  79 0038 0368     		ldr	r3, [r0]
  80 003a 9960     		str	r1, [r3, #8]
 183:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 184:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
  81              		.loc 1 184 0 discriminator 2
  82 003c 0268     		ldr	r2, [r0]
  83 003e 9368     		ldr	r3, [r2, #8]
  84 0040 43F40063 		orr	r3, r3, #2048
  85 0044 9360     		str	r3, [r2, #8]
 185:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 186:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
 187:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);    
  86              		.loc 1 187 0 discriminator 2
  87 0046 0368     		ldr	r3, [r0]
  88 0048 FF22     		movs	r2, #255
  89 004a 5A62     		str	r2, [r3, #36]
 188:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 189:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
 190:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
  90              		.loc 1 190 0 discriminator 2
  91 004c 4577     		strb	r5, [r0, #29]
 191:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 192:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 193:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
  92              		.loc 1 193 0 discriminator 2
  93 004e 0023     		movs	r3, #0
ARM GAS  /tmp/ccMphqsi.s 			page 6


  94 0050 0377     		strb	r3, [r0, #28]
 194:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 195:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
  95              		.loc 1 195 0 discriminator 2
  96 0052 1846     		mov	r0, r3
  97              	.LVL5:
  98 0054 00E0     		b	.L2
  99              	.LVL6:
 100              	.L3:
 166:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 101              		.loc 1 166 0
 102 0056 0220     		movs	r0, #2
 103              	.LVL7:
 104              	.L2:
 196:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 105              		.loc 1 196 0
 106 0058 70BC     		pop	{r4, r5, r6}
 107              	.LCFI1:
 108              		.cfi_restore 6
 109              		.cfi_restore 5
 110              		.cfi_restore 4
 111              		.cfi_def_cfa_offset 0
 112 005a 7047     		bx	lr
 113              		.cfi_endproc
 114              	.LFE136:
 116              		.section	.text.HAL_RTCEx_SetTimeStamp_IT,"ax",%progbits
 117              		.align	2
 118              		.global	HAL_RTCEx_SetTimeStamp_IT
 119              		.thumb
 120              		.thumb_func
 122              	HAL_RTCEx_SetTimeStamp_IT:
 123              	.LFB137:
 197:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 198:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 199:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Sets TimeStamp with Interrupt. 
 200:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 201:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 202:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @note   This API must be called before enabling the TimeStamp feature.
 203:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  TimeStampEdge Specifies the pin edge on which the TimeStamp is 
 204:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *         activated.
 205:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be one of the following values:
 206:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPEDGE_RISING: the Time stamp event occurs on the  
 207:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                                        rising edge of the related pin.
 208:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPEDGE_FALLING: the Time stamp event occurs on the 
 209:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                                         falling edge of the related pin.
 210:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  RTC_TimeStampPin Specifies the RTC TimeStamp Pin.
 211:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be one of the following values:
 212:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPPIN_PC13: PC13 is selected as RTC TimeStamp Pin.
 213:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.  
 214:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.   
 215:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 216:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 217:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32
 218:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 124              		.loc 1 218 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccMphqsi.s 			page 7


 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129              	.LVL8:
 219:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0;
 220:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 221:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
 222:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
 223:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
 224:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 225:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
 226:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 130              		.loc 1 226 0
 131 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 132 0002 012B     		cmp	r3, #1
 133 0004 3BD0     		beq	.L7
 218:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0;
 134              		.loc 1 218 0 discriminator 2
 135 0006 70B4     		push	{r4, r5, r6}
 136              	.LCFI2:
 137              		.cfi_def_cfa_offset 12
 138              		.cfi_offset 4, -12
 139              		.cfi_offset 5, -8
 140              		.cfi_offset 6, -4
 141              		.loc 1 226 0 discriminator 2
 142 0008 0124     		movs	r4, #1
 143 000a 0477     		strb	r4, [r0, #28]
 227:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 228:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 144              		.loc 1 228 0 discriminator 2
 145 000c 0223     		movs	r3, #2
 146 000e 4377     		strb	r3, [r0, #29]
 229:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 230:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get the RTC_CR register and clear the bits to be configured */
 231:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 147              		.loc 1 231 0 discriminator 2
 148 0010 0568     		ldr	r5, [r0]
 149 0012 AE68     		ldr	r6, [r5, #8]
 150 0014 A3F60B03 		subw	r3, r3, #2059
 151 0018 3340     		ands	r3, r3, r6
 152              	.LVL9:
 232:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 233:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmpreg |= TimeStampEdge;
 153              		.loc 1 233 0 discriminator 2
 154 001a 1943     		orrs	r1, r1, r3
 155              	.LVL10:
 234:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 235:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 236:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 156              		.loc 1 236 0 discriminator 2
 157 001c CA23     		movs	r3, #202
 158 001e 6B62     		str	r3, [r5, #36]
 159 0020 0368     		ldr	r3, [r0]
 160 0022 5325     		movs	r5, #83
 161 0024 5D62     		str	r5, [r3, #36]
 237:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 238:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
 239:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CR = (uint32_t)tmpreg;
ARM GAS  /tmp/ccMphqsi.s 			page 8


 162              		.loc 1 239 0 discriminator 2
 163 0026 0368     		ldr	r3, [r0]
 164 0028 9960     		str	r1, [r3, #8]
 240:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 241:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 165              		.loc 1 241 0 discriminator 2
 166 002a 0168     		ldr	r1, [r0]
 167              	.LVL11:
 168 002c CB6C     		ldr	r3, [r1, #76]
 169              	.LVL12:
 170 002e 23F00603 		bic	r3, r3, #6
 171 0032 CB64     		str	r3, [r1, #76]
 242:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 172              		.loc 1 242 0 discriminator 2
 173 0034 0368     		ldr	r3, [r0]
 174 0036 D96C     		ldr	r1, [r3, #76]
 175 0038 0A43     		orrs	r2, r2, r1
 176              	.LVL13:
 177 003a DA64     		str	r2, [r3, #76]
 243:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 244:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear RTC Timestamp flag */
 245:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 178              		.loc 1 245 0 discriminator 2
 179 003c 0268     		ldr	r2, [r0]
 180 003e D368     		ldr	r3, [r2, #12]
 181 0040 DBB2     		uxtb	r3, r3
 182 0042 63F40863 		orn	r3, r3, #2176
 183 0046 D360     		str	r3, [r2, #12]
 246:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 247:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 184              		.loc 1 247 0 discriminator 2
 185 0048 0268     		ldr	r2, [r0]
 186 004a 9368     		ldr	r3, [r2, #8]
 187 004c 43F40063 		orr	r3, r3, #2048
 188 0050 9360     		str	r3, [r2, #8]
 248:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 249:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable IT timestamp */ 
 250:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TIMESTAMP_ENABLE_IT(hrtc,RTC_IT_TS);
 189              		.loc 1 250 0 discriminator 2
 190 0052 0268     		ldr	r2, [r0]
 191 0054 9368     		ldr	r3, [r2, #8]
 192 0056 43F40043 		orr	r3, r3, #32768
 193 005a 9360     		str	r3, [r2, #8]
 251:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 252:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* RTC timestamp Interrupt Configuration: EXTI configuration */
 253:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 194              		.loc 1 253 0 discriminator 2
 195 005c 0A4B     		ldr	r3, .L10
 196 005e 1A68     		ldr	r2, [r3]
 197 0060 42F40012 		orr	r2, r2, #2097152
 198 0064 1A60     		str	r2, [r3]
 254:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 255:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   EXTI->RTSR |= RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT;
 199              		.loc 1 255 0 discriminator 2
 200 0066 9A68     		ldr	r2, [r3, #8]
 201 0068 42F40012 		orr	r2, r2, #2097152
 202 006c 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccMphqsi.s 			page 9


 256:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 257:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
 258:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 203              		.loc 1 258 0 discriminator 2
 204 006e 0368     		ldr	r3, [r0]
 205 0070 FF22     		movs	r2, #255
 206 0072 5A62     		str	r2, [r3, #36]
 259:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 260:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;  
 207              		.loc 1 260 0 discriminator 2
 208 0074 4477     		strb	r4, [r0, #29]
 261:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 262:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 263:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 209              		.loc 1 263 0 discriminator 2
 210 0076 0023     		movs	r3, #0
 211 0078 0377     		strb	r3, [r0, #28]
 264:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 265:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 212              		.loc 1 265 0 discriminator 2
 213 007a 1846     		mov	r0, r3
 214              	.LVL14:
 215 007c 01E0     		b	.L6
 216              	.LVL15:
 217              	.L7:
 218              	.LCFI3:
 219              		.cfi_def_cfa_offset 0
 220              		.cfi_restore 4
 221              		.cfi_restore 5
 222              		.cfi_restore 6
 226:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 223              		.loc 1 226 0
 224 007e 0220     		movs	r0, #2
 225              	.LVL16:
 226 0080 7047     		bx	lr
 227              	.LVL17:
 228              	.L6:
 229              	.LCFI4:
 230              		.cfi_def_cfa_offset 12
 231              		.cfi_offset 4, -12
 232              		.cfi_offset 5, -8
 233              		.cfi_offset 6, -4
 266:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 234              		.loc 1 266 0
 235 0082 70BC     		pop	{r4, r5, r6}
 236              	.LCFI5:
 237              		.cfi_restore 6
 238              		.cfi_restore 5
 239              		.cfi_restore 4
 240              		.cfi_def_cfa_offset 0
 241              	.LVL18:
 242 0084 7047     		bx	lr
 243              	.L11:
 244 0086 00BF     		.align	2
 245              	.L10:
 246 0088 003C0140 		.word	1073822720
 247              		.cfi_endproc
ARM GAS  /tmp/ccMphqsi.s 			page 10


 248              	.LFE137:
 250              		.section	.text.HAL_RTCEx_DeactivateTimeStamp,"ax",%progbits
 251              		.align	2
 252              		.global	HAL_RTCEx_DeactivateTimeStamp
 253              		.thumb
 254              		.thumb_func
 256              	HAL_RTCEx_DeactivateTimeStamp:
 257              	.LFB138:
 267:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 268:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 269:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Deactivates TimeStamp. 
 270:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 271:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 272:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 273:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 274:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_DeactivateTimeStamp(RTC_HandleTypeDef *hrtc)
 275:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 258              		.loc 1 275 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263              	.LVL19:
 276:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0U;
 277:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 278:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
 279:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 264              		.loc 1 279 0
 265 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 266 0002 012B     		cmp	r3, #1
 267 0004 1CD0     		beq	.L14
 275:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0U;
 268              		.loc 1 275 0 discriminator 2
 269 0006 10B4     		push	{r4}
 270              	.LCFI6:
 271              		.cfi_def_cfa_offset 4
 272              		.cfi_offset 4, -4
 273              		.loc 1 279 0 discriminator 2
 274 0008 0122     		movs	r2, #1
 275 000a 0277     		strb	r2, [r0, #28]
 280:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 281:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 276              		.loc 1 281 0 discriminator 2
 277 000c 0223     		movs	r3, #2
 278 000e 4377     		strb	r3, [r0, #29]
 282:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 283:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 284:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 279              		.loc 1 284 0 discriminator 2
 280 0010 0368     		ldr	r3, [r0]
 281 0012 CA21     		movs	r1, #202
 282 0014 5962     		str	r1, [r3, #36]
 283 0016 0368     		ldr	r3, [r0]
 284 0018 5321     		movs	r1, #83
 285 001a 5962     		str	r1, [r3, #36]
 285:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 286:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* In case of interrupt mode is used, the interrupt source must disabled */ 
ARM GAS  /tmp/ccMphqsi.s 			page 11


 287:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TIMESTAMP_DISABLE_IT(hrtc, RTC_IT_TS);
 286              		.loc 1 287 0 discriminator 2
 287 001c 0168     		ldr	r1, [r0]
 288 001e 8B68     		ldr	r3, [r1, #8]
 289 0020 23F40043 		bic	r3, r3, #32768
 290 0024 8B60     		str	r3, [r1, #8]
 288:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 289:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get the RTC_CR register and clear the bits to be configured */
 290:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 291              		.loc 1 290 0 discriminator 2
 292 0026 0168     		ldr	r1, [r0]
 293 0028 8C68     		ldr	r4, [r1, #8]
 294 002a 084B     		ldr	r3, .L17
 295 002c 2340     		ands	r3, r3, r4
 296              	.LVL20:
 291:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 292:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
 293:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CR = (uint32_t)tmpreg;
 297              		.loc 1 293 0 discriminator 2
 298 002e 8B60     		str	r3, [r1, #8]
 294:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 295:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
 296:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 299              		.loc 1 296 0 discriminator 2
 300 0030 0368     		ldr	r3, [r0]
 301              	.LVL21:
 302 0032 FF21     		movs	r1, #255
 303              	.LVL22:
 304 0034 5962     		str	r1, [r3, #36]
 297:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  
 298:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;  
 305              		.loc 1 298 0 discriminator 2
 306 0036 4277     		strb	r2, [r0, #29]
 299:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 300:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 301:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 307              		.loc 1 301 0 discriminator 2
 308 0038 0023     		movs	r3, #0
 309 003a 0377     		strb	r3, [r0, #28]
 302:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 303:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 310              		.loc 1 303 0 discriminator 2
 311 003c 1846     		mov	r0, r3
 312              	.LVL23:
 313 003e 01E0     		b	.L13
 314              	.LVL24:
 315              	.L14:
 316              	.LCFI7:
 317              		.cfi_def_cfa_offset 0
 318              		.cfi_restore 4
 279:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 319              		.loc 1 279 0
 320 0040 0220     		movs	r0, #2
 321              	.LVL25:
 322 0042 7047     		bx	lr
 323              	.LVL26:
 324              	.L13:
ARM GAS  /tmp/ccMphqsi.s 			page 12


 325              	.LCFI8:
 326              		.cfi_def_cfa_offset 4
 327              		.cfi_offset 4, -4
 304:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 328              		.loc 1 304 0
 329 0044 5DF8044B 		ldr	r4, [sp], #4
 330              	.LCFI9:
 331              		.cfi_restore 4
 332              		.cfi_def_cfa_offset 0
 333              	.LVL27:
 334 0048 7047     		bx	lr
 335              	.L18:
 336 004a 00BF     		.align	2
 337              	.L17:
 338 004c F7F7FFFF 		.word	-2057
 339              		.cfi_endproc
 340              	.LFE138:
 342              		.section	.text.HAL_RTCEx_SetInternalTimeStamp,"ax",%progbits
 343              		.align	2
 344              		.global	HAL_RTCEx_SetInternalTimeStamp
 345              		.thumb
 346              		.thumb_func
 348              	HAL_RTCEx_SetInternalTimeStamp:
 349              	.LFB139:
 305:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 306:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 307:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Sets Internal TimeStamp.
 308:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @note   This API must be called before enabling the internal TimeStamp feature.
 309:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 310:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 311:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 312:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 313:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetInternalTimeStamp(RTC_HandleTypeDef *hrtc)
 314:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 350              		.loc 1 314 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 0
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354              		@ link register save eliminated.
 355              	.LVL28:
 315:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */
 316:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 356              		.loc 1 316 0
 357 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 358 0002 012B     		cmp	r3, #1
 359 0004 16D0     		beq	.L21
 360              		.loc 1 316 0 is_stmt 0 discriminator 2
 361 0006 0122     		movs	r2, #1
 362 0008 0277     		strb	r2, [r0, #28]
 317:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 318:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 363              		.loc 1 318 0 is_stmt 1 discriminator 2
 364 000a 0223     		movs	r3, #2
 365 000c 4377     		strb	r3, [r0, #29]
 319:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 320:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 321:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
ARM GAS  /tmp/ccMphqsi.s 			page 13


 366              		.loc 1 321 0 discriminator 2
 367 000e 0368     		ldr	r3, [r0]
 368 0010 CA21     		movs	r1, #202
 369 0012 5962     		str	r1, [r3, #36]
 370 0014 0368     		ldr	r3, [r0]
 371 0016 5321     		movs	r1, #83
 372 0018 5962     		str	r1, [r3, #36]
 322:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 323:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the internal Time Stamp Enable bits */
 324:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_INTERNAL_TIMESTAMP_ENABLE(hrtc);
 373              		.loc 1 324 0 discriminator 2
 374 001a 0168     		ldr	r1, [r0]
 375 001c 8B68     		ldr	r3, [r1, #8]
 376 001e 43F08073 		orr	r3, r3, #16777216
 377 0022 8B60     		str	r3, [r1, #8]
 325:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 326:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
 327:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 378              		.loc 1 327 0 discriminator 2
 379 0024 0368     		ldr	r3, [r0]
 380 0026 FF21     		movs	r1, #255
 381 0028 5962     		str	r1, [r3, #36]
 328:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 329:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
 330:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;
 382              		.loc 1 330 0 discriminator 2
 383 002a 4277     		strb	r2, [r0, #29]
 331:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 332:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 333:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 384              		.loc 1 333 0 discriminator 2
 385 002c 0023     		movs	r3, #0
 386 002e 0377     		strb	r3, [r0, #28]
 334:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 335:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 387              		.loc 1 335 0 discriminator 2
 388 0030 1846     		mov	r0, r3
 389              	.LVL29:
 390 0032 7047     		bx	lr
 391              	.LVL30:
 392              	.L21:
 316:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 393              		.loc 1 316 0
 394 0034 0220     		movs	r0, #2
 395              	.LVL31:
 336:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 396              		.loc 1 336 0
 397 0036 7047     		bx	lr
 398              		.cfi_endproc
 399              	.LFE139:
 401              		.section	.text.HAL_RTCEx_DeactivateInternalTimeStamp,"ax",%progbits
 402              		.align	2
 403              		.global	HAL_RTCEx_DeactivateInternalTimeStamp
 404              		.thumb
 405              		.thumb_func
 407              	HAL_RTCEx_DeactivateInternalTimeStamp:
 408              	.LFB140:
ARM GAS  /tmp/ccMphqsi.s 			page 14


 337:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 338:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 339:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Deactivates internal TimeStamp.
 340:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 341:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 342:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 343:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 344:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_DeactivateInternalTimeStamp(RTC_HandleTypeDef *hrtc)
 345:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 409              		.loc 1 345 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 414              	.LVL32:
 346:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */
 347:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 415              		.loc 1 347 0
 416 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 417 0002 012B     		cmp	r3, #1
 418 0004 16D0     		beq	.L24
 419              		.loc 1 347 0 is_stmt 0 discriminator 2
 420 0006 0122     		movs	r2, #1
 421 0008 0277     		strb	r2, [r0, #28]
 348:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 349:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 422              		.loc 1 349 0 is_stmt 1 discriminator 2
 423 000a 0223     		movs	r3, #2
 424 000c 4377     		strb	r3, [r0, #29]
 350:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 351:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 352:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 425              		.loc 1 352 0 discriminator 2
 426 000e 0368     		ldr	r3, [r0]
 427 0010 CA21     		movs	r1, #202
 428 0012 5962     		str	r1, [r3, #36]
 429 0014 0368     		ldr	r3, [r0]
 430 0016 5321     		movs	r1, #83
 431 0018 5962     		str	r1, [r3, #36]
 353:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 354:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the internal Time Stamp Enable bits */
 355:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_INTERNAL_TIMESTAMP_DISABLE(hrtc);
 432              		.loc 1 355 0 discriminator 2
 433 001a 0168     		ldr	r1, [r0]
 434 001c 8B68     		ldr	r3, [r1, #8]
 435 001e 23F08073 		bic	r3, r3, #16777216
 436 0022 8B60     		str	r3, [r1, #8]
 356:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 357:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
 358:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 437              		.loc 1 358 0 discriminator 2
 438 0024 0368     		ldr	r3, [r0]
 439 0026 FF21     		movs	r1, #255
 440 0028 5962     		str	r1, [r3, #36]
 359:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 360:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;
 441              		.loc 1 360 0 discriminator 2
ARM GAS  /tmp/ccMphqsi.s 			page 15


 442 002a 4277     		strb	r2, [r0, #29]
 361:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 362:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */
 363:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 443              		.loc 1 363 0 discriminator 2
 444 002c 0023     		movs	r3, #0
 445 002e 0377     		strb	r3, [r0, #28]
 364:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 365:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 446              		.loc 1 365 0 discriminator 2
 447 0030 1846     		mov	r0, r3
 448              	.LVL33:
 449 0032 7047     		bx	lr
 450              	.LVL34:
 451              	.L24:
 347:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 452              		.loc 1 347 0
 453 0034 0220     		movs	r0, #2
 454              	.LVL35:
 366:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 455              		.loc 1 366 0
 456 0036 7047     		bx	lr
 457              		.cfi_endproc
 458              	.LFE140:
 460              		.section	.text.HAL_RTCEx_GetTimeStamp,"ax",%progbits
 461              		.align	2
 462              		.global	HAL_RTCEx_GetTimeStamp
 463              		.thumb
 464              		.thumb_func
 466              	HAL_RTCEx_GetTimeStamp:
 467              	.LFB141:
 367:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 368:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 369:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Gets the RTC TimeStamp value.
 370:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 371:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 372:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  sTimeStamp Pointer to Time structure
 373:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  sTimeStampDate Pointer to Date structure  
 374:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  Format specifies the format of the entered parameters.
 375:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be one of the following values:
 376:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             FORMAT_BIN: Binary data format 
 377:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             FORMAT_BCD: BCD data format
 378:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 379:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 380:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_GetTimeStamp(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef* sTimeStamp, RTC_
 381:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 468              		.loc 1 381 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              	.LVL36:
 473 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 474              	.LCFI10:
 475              		.cfi_def_cfa_offset 24
 476              		.cfi_offset 3, -24
 477              		.cfi_offset 4, -20
 478              		.cfi_offset 5, -16
ARM GAS  /tmp/ccMphqsi.s 			page 16


 479              		.cfi_offset 6, -12
 480              		.cfi_offset 7, -8
 481              		.cfi_offset 14, -4
 482 0002 0646     		mov	r6, r0
 483 0004 0C46     		mov	r4, r1
 484 0006 1546     		mov	r5, r2
 485              	.LVL37:
 382:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmptime = 0U, tmpdate = 0U;
 383:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 384:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
 385:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_FORMAT(Format));
 386:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 387:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get the TimeStamp time and date registers values */
 388:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmptime = (uint32_t)(hrtc->Instance->TSTR & RTC_TR_RESERVED_MASK);
 486              		.loc 1 388 0
 487 0008 0268     		ldr	r2, [r0]
 488              	.LVL38:
 489 000a 106B     		ldr	r0, [r2, #48]
 490              	.LVL39:
 491 000c 1E49     		ldr	r1, .L28
 492              	.LVL40:
 493 000e 0140     		ands	r1, r1, r0
 494              	.LVL41:
 389:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmpdate = (uint32_t)(hrtc->Instance->TSDR & RTC_DR_RESERVED_MASK);
 495              		.loc 1 389 0
 496 0010 506B     		ldr	r0, [r2, #52]
 497 0012 1E4A     		ldr	r2, .L28+4
 498 0014 0240     		ands	r2, r2, r0
 499              	.LVL42:
 390:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 391:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Fill the Time structure fields with the read parameters */
 392:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   sTimeStamp->Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 500              		.loc 1 392 0
 501 0016 080C     		lsrs	r0, r1, #16
 502 0018 00F03F07 		and	r7, r0, #63
 503 001c 2770     		strb	r7, [r4]
 393:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   sTimeStamp->Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 504              		.loc 1 393 0
 505 001e C1F30627 		ubfx	r7, r1, #8, #7
 506 0022 6770     		strb	r7, [r4, #1]
 394:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   sTimeStamp->Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 507              		.loc 1 394 0
 508 0024 A170     		strb	r1, [r4, #2]
 395:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   sTimeStamp->TimeFormat = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16U);  
 509              		.loc 1 395 0
 510 0026 00F04000 		and	r0, r0, #64
 511 002a 2073     		strb	r0, [r4, #12]
 396:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   sTimeStamp->SubSeconds = (uint32_t) hrtc->Instance->TSSSR;
 512              		.loc 1 396 0
 513 002c 3168     		ldr	r1, [r6]
 514              	.LVL43:
 515 002e 896B     		ldr	r1, [r1, #56]
 516 0030 6160     		str	r1, [r4, #4]
 397:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 398:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Fill the Date structure fields with the read parameters */
 399:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   sTimeStampDate->Year = 0U;
 517              		.loc 1 399 0
ARM GAS  /tmp/ccMphqsi.s 			page 17


 518 0032 0021     		movs	r1, #0
 519 0034 E970     		strb	r1, [r5, #3]
 400:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   sTimeStampDate->Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 520              		.loc 1 400 0
 521 0036 C2F30421 		ubfx	r1, r2, #8, #5
 522 003a 6970     		strb	r1, [r5, #1]
 401:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   sTimeStampDate->Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 523              		.loc 1 401 0
 524 003c AA70     		strb	r2, [r5, #2]
 402:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   sTimeStampDate->WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13U);
 525              		.loc 1 402 0
 526 003e C2F34232 		ubfx	r2, r2, #13, #3
 527              	.LVL44:
 528 0042 2A70     		strb	r2, [r5]
 403:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 404:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the input parameters format */
 405:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(Format == RTC_FORMAT_BIN)
 529              		.loc 1 405 0
 530 0044 BBB9     		cbnz	r3, .L26
 406:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 407:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Convert the TimeStamp structure parameters to Binary format */
 408:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTimeStamp->Hours = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Hours);
 531              		.loc 1 408 0
 532 0046 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 533 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 534              	.LVL45:
 535 004c 2070     		strb	r0, [r4]
 409:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTimeStamp->Minutes = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Minutes);
 536              		.loc 1 409 0
 537 004e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 538 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 539              	.LVL46:
 540 0054 6070     		strb	r0, [r4, #1]
 410:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTimeStamp->Seconds = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Seconds);
 541              		.loc 1 410 0
 542 0056 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 543 0058 FFF7FEFF 		bl	RTC_Bcd2ToByte
 544              	.LVL47:
 545 005c A070     		strb	r0, [r4, #2]
 411:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
 412:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Convert the DateTimeStamp structure parameters to Binary format */
 413:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTimeStampDate->Month = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->Month);
 546              		.loc 1 413 0
 547 005e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 548 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 549              	.LVL48:
 550 0064 6870     		strb	r0, [r5, #1]
 414:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTimeStampDate->Date = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->Date);
 551              		.loc 1 414 0
 552 0066 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 553 0068 FFF7FEFF 		bl	RTC_Bcd2ToByte
 554              	.LVL49:
 555 006c A870     		strb	r0, [r5, #2]
 415:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTimeStampDate->WeekDay = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->WeekDay);
 556              		.loc 1 415 0
 557 006e 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 558 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
ARM GAS  /tmp/ccMphqsi.s 			page 18


 559              	.LVL50:
 560 0074 2870     		strb	r0, [r5]
 561              	.L26:
 416:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 417:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 418:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear the TIMESTAMP Flag */
 419:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 562              		.loc 1 419 0
 563 0076 3268     		ldr	r2, [r6]
 564 0078 D368     		ldr	r3, [r2, #12]
 565 007a DBB2     		uxtb	r3, r3
 566 007c 63F40863 		orn	r3, r3, #2176
 567 0080 D360     		str	r3, [r2, #12]
 420:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
 421:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 422:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 568              		.loc 1 422 0
 569 0082 0020     		movs	r0, #0
 570 0084 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 571              	.LVL51:
 572              	.L29:
 573 0086 00BF     		.align	2
 574              	.L28:
 575 0088 7F7F7F00 		.word	8355711
 576 008c 3FFFFF00 		.word	16777023
 577              		.cfi_endproc
 578              	.LFE141:
 580              		.section	.text.HAL_RTCEx_SetTamper,"ax",%progbits
 581              		.align	2
 582              		.global	HAL_RTCEx_SetTamper
 583              		.thumb
 584              		.thumb_func
 586              	HAL_RTCEx_SetTamper:
 587              	.LFB142:
 423:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 424:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 425:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Sets Tamper
 426:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @note   By calling this API we disable the tamper interrupt for all tampers. 
 427:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 428:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 429:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  sTamper Pointer to Tamper Structure.
 430:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 431:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 432:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef* sTamper)
 433:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 588              		.loc 1 433 0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 592              		@ link register save eliminated.
 593              	.LVL52:
 434:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0U;
 435:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 436:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
 437:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER(sTamper->Tamper)); 
 438:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(sTamper->Trigger));
 439:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_ERASE_MODE(sTamper->NoErase));
ARM GAS  /tmp/ccMphqsi.s 			page 19


 440:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_MASKFLAG_STATE(sTamper->MaskFlag));
 441:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_FILTER(sTamper->Filter));
 442:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(sTamper->SamplingFrequency));         
 443:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
 444:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
 445:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
 446:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  
 447:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
 448:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 594              		.loc 1 448 0
 595 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 596 0002 012B     		cmp	r3, #1
 597 0004 60D0     		beq	.L39
 433:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0U;
 598              		.loc 1 433 0 discriminator 2
 599 0006 30B4     		push	{r4, r5}
 600              	.LCFI11:
 601              		.cfi_def_cfa_offset 8
 602              		.cfi_offset 4, -8
 603              		.cfi_offset 5, -4
 604              		.loc 1 448 0 discriminator 2
 605 0008 0123     		movs	r3, #1
 606 000a 0377     		strb	r3, [r0, #28]
 449:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
 450:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 607              		.loc 1 450 0 discriminator 2
 608 000c 0223     		movs	r3, #2
 609 000e 4377     		strb	r3, [r0, #29]
 451:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 452:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(sTamper->Trigger != RTC_TAMPERTRIGGER_RISINGEDGE)
 610              		.loc 1 452 0 discriminator 2
 611 0010 8B68     		ldr	r3, [r1, #8]
 612 0012 13B1     		cbz	r3, .L32
 453:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   { 
 454:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTamper->Trigger = (uint32_t)(sTamper->Tamper << 1U); 
 613              		.loc 1 454 0
 614 0014 0B68     		ldr	r3, [r1]
 615 0016 5B00     		lsls	r3, r3, #1
 616 0018 8B60     		str	r3, [r1, #8]
 617              	.L32:
 455:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   } 
 456:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 457:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 618              		.loc 1 457 0
 619 001a CB68     		ldr	r3, [r1, #12]
 620 001c B3B1     		cbz	r3, .L33
 458:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   { 
 459:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTamper->NoErase = 0;
 621              		.loc 1 459 0
 622 001e 0023     		movs	r3, #0
 623 0020 CB60     		str	r3, [r1, #12]
 460:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 624              		.loc 1 460 0
 625 0022 0B68     		ldr	r3, [r1]
 626 0024 13F0010F 		tst	r3, #1
 627 0028 02D0     		beq	.L34
 461:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
ARM GAS  /tmp/ccMphqsi.s 			page 20


 462:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->NoErase |= RTC_TAMPCR_TAMP1NOERASE;
 628              		.loc 1 462 0
 629 002a 4FF40032 		mov	r2, #131072
 630 002e CA60     		str	r2, [r1, #12]
 631              	.L34:
 463:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 464:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 632              		.loc 1 464 0
 633 0030 13F0080F 		tst	r3, #8
 634 0034 03D0     		beq	.L35
 465:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 466:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->NoErase |= RTC_TAMPCR_TAMP2NOERASE;
 635              		.loc 1 466 0
 636 0036 CA68     		ldr	r2, [r1, #12]
 637 0038 42F48012 		orr	r2, r2, #1048576
 638 003c CA60     		str	r2, [r1, #12]
 639              	.L35:
 467:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 468:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 640              		.loc 1 468 0
 641 003e 13F0200F 		tst	r3, #32
 642 0042 03D0     		beq	.L33
 469:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 470:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->NoErase |= RTC_TAMPCR_TAMP3NOERASE;
 643              		.loc 1 470 0
 644 0044 CB68     		ldr	r3, [r1, #12]
 645 0046 43F40003 		orr	r3, r3, #8388608
 646 004a CB60     		str	r3, [r1, #12]
 647              	.L33:
 471:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 472:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 473:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 474:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 648              		.loc 1 474 0
 649 004c 0B69     		ldr	r3, [r1, #16]
 650 004e B3B1     		cbz	r3, .L36
 475:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 476:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTamper->MaskFlag = 0;
 651              		.loc 1 476 0
 652 0050 0023     		movs	r3, #0
 653 0052 0B61     		str	r3, [r1, #16]
 477:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 654              		.loc 1 477 0
 655 0054 0B68     		ldr	r3, [r1]
 656 0056 13F0010F 		tst	r3, #1
 657 005a 02D0     		beq	.L37
 478:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 479:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->MaskFlag |= RTC_TAMPCR_TAMP1MF;
 658              		.loc 1 479 0
 659 005c 4FF48022 		mov	r2, #262144
 660 0060 0A61     		str	r2, [r1, #16]
 661              	.L37:
 480:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 481:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 662              		.loc 1 481 0
 663 0062 13F0080F 		tst	r3, #8
 664 0066 03D0     		beq	.L38
ARM GAS  /tmp/ccMphqsi.s 			page 21


 482:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 483:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->MaskFlag |= RTC_TAMPCR_TAMP2MF;
 665              		.loc 1 483 0
 666 0068 0A69     		ldr	r2, [r1, #16]
 667 006a 42F40012 		orr	r2, r2, #2097152
 668 006e 0A61     		str	r2, [r1, #16]
 669              	.L38:
 484:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 485:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 670              		.loc 1 485 0
 671 0070 13F0200F 		tst	r3, #32
 672 0074 03D0     		beq	.L36
 486:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 487:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->MaskFlag |= RTC_TAMPCR_TAMP3MF;
 673              		.loc 1 487 0
 674 0076 0B69     		ldr	r3, [r1, #16]
 675 0078 43F08073 		orr	r3, r3, #16777216
 676 007c 0B61     		str	r3, [r1, #16]
 677              	.L36:
 488:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 489:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 490:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 491:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmpreg = ((uint32_t)sTamper->Tamper | (uint32_t)sTamper->Trigger  | (uint32_t)sTamper->NoErase |\
 678              		.loc 1 491 0
 679 007e 0B68     		ldr	r3, [r1]
 680 0080 8A68     		ldr	r2, [r1, #8]
 681 0082 43EA0204 		orr	r4, r3, r2
 682 0086 CA68     		ldr	r2, [r1, #12]
 683 0088 1443     		orrs	r4, r4, r2
 492:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             (uint32_t)sTamper->MaskFlag | (uint32_t)sTamper->Filter | (uint32_t)sTamper->SamplingFr
 684              		.loc 1 492 0
 685 008a 0A69     		ldr	r2, [r1, #16]
 491:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             (uint32_t)sTamper->MaskFlag | (uint32_t)sTamper->Filter | (uint32_t)sTamper->SamplingFr
 686              		.loc 1 491 0
 687 008c 1443     		orrs	r4, r4, r2
 688              		.loc 1 492 0
 689 008e 4A69     		ldr	r2, [r1, #20]
 690 0090 1443     		orrs	r4, r4, r2
 691 0092 8A69     		ldr	r2, [r1, #24]
 692 0094 1443     		orrs	r4, r4, r2
 493:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             (uint32_t)sTamper->PrechargeDuration | (uint32_t)sTamper->TamperPullUp | sTamper->TimeS
 693              		.loc 1 493 0
 694 0096 CA69     		ldr	r2, [r1, #28]
 492:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             (uint32_t)sTamper->MaskFlag | (uint32_t)sTamper->Filter | (uint32_t)sTamper->SamplingFr
 695              		.loc 1 492 0
 696 0098 1443     		orrs	r4, r4, r2
 697              		.loc 1 493 0
 698 009a 0A6A     		ldr	r2, [r1, #32]
 699 009c 1443     		orrs	r4, r4, r2
 700 009e 4A6A     		ldr	r2, [r1, #36]
 491:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             (uint32_t)sTamper->MaskFlag | (uint32_t)sTamper->Filter | (uint32_t)sTamper->SamplingFr
 701              		.loc 1 491 0
 702 00a0 2243     		orrs	r2, r2, r4
 703              	.LVL53:
 494:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 495:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->TAMPCR &= (uint32_t)~((uint32_t)sTamper->Tamper | (uint32_t)(sTamper->Tamper << 1
 704              		.loc 1 495 0
ARM GAS  /tmp/ccMphqsi.s 			page 22


 705 00a2 0568     		ldr	r5, [r0]
 706 00a4 296C     		ldr	r1, [r5, #64]
 707              	.LVL54:
 708 00a6 43EA4303 		orr	r3, r3, r3, lsl #1
 496:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMPFREQ | (uint32_t)RTC_TAMPCR_TAMPFLT
 497:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMPPUDIS | (uint32_t)RTC_TAMPCR_TAMPIE
 498:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMP2IE | (uint32_t)RTC_TAMPCR_TAMP3IE 
 499:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMP2NOERASE | (uint32_t)RTC_TAMPCR_TAM
 500:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMP2MF | (uint32_t)RTC_TAMPCR_TAMP3MF)
 709              		.loc 1 500 0
 710 00aa 094C     		ldr	r4, .L42
 711 00ac 1C43     		orrs	r4, r4, r3
 495:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMPFREQ | (uint32_t)RTC_TAMPCR_TAMPFLT
 712              		.loc 1 495 0
 713 00ae 21EA0403 		bic	r3, r1, r4
 714 00b2 2B64     		str	r3, [r5, #64]
 501:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 502:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->TAMPCR |= tmpreg;      
 715              		.loc 1 502 0
 716 00b4 0168     		ldr	r1, [r0]
 717 00b6 0B6C     		ldr	r3, [r1, #64]
 718 00b8 1343     		orrs	r3, r3, r2
 719 00ba 0B64     		str	r3, [r1, #64]
 503:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
 504:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 720              		.loc 1 504 0
 721 00bc 0123     		movs	r3, #1
 722 00be 4377     		strb	r3, [r0, #29]
 505:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 506:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 507:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 723              		.loc 1 507 0
 724 00c0 0023     		movs	r3, #0
 725 00c2 0377     		strb	r3, [r0, #28]
 508:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
 509:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 726              		.loc 1 509 0
 727 00c4 1846     		mov	r0, r3
 728              	.LVL55:
 729 00c6 01E0     		b	.L31
 730              	.LVL56:
 731              	.L39:
 732              	.LCFI12:
 733              		.cfi_def_cfa_offset 0
 734              		.cfi_restore 4
 735              		.cfi_restore 5
 448:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
 736              		.loc 1 448 0
 737 00c8 0220     		movs	r0, #2
 738              	.LVL57:
 739 00ca 7047     		bx	lr
 740              	.LVL58:
 741              	.L31:
 742              	.LCFI13:
 743              		.cfi_def_cfa_offset 8
 744              		.cfi_offset 4, -8
 745              		.cfi_offset 5, -4
ARM GAS  /tmp/ccMphqsi.s 			page 23


 510:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 746              		.loc 1 510 0
 747 00cc 30BC     		pop	{r4, r5}
 748              	.LCFI14:
 749              		.cfi_restore 5
 750              		.cfi_restore 4
 751              		.cfi_def_cfa_offset 0
 752 00ce 7047     		bx	lr
 753              	.L43:
 754              		.align	2
 755              	.L42:
 756 00d0 84FFFF01 		.word	33554308
 757              		.cfi_endproc
 758              	.LFE142:
 760              		.section	.text.HAL_RTCEx_SetTamper_IT,"ax",%progbits
 761              		.align	2
 762              		.global	HAL_RTCEx_SetTamper_IT
 763              		.thumb
 764              		.thumb_func
 766              	HAL_RTCEx_SetTamper_IT:
 767              	.LFB143:
 511:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 512:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 513:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Sets Tamper with interrupt.
 514:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @note   By calling this API we force the tamper interrupt for all tampers.
 515:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 516:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 517:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  sTamper Pointer to RTC Tamper.
 518:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 519:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 520:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef* sTamper)
 521:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 768              		.loc 1 521 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 0
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 772              		@ link register save eliminated.
 773              	.LVL59:
 522:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0;
 523:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 524:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
 525:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER(sTamper->Tamper)); 
 526:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_INTERRUPT(sTamper->Interrupt));
 527:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(sTamper->Trigger));
 528:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_ERASE_MODE(sTamper->NoErase));
 529:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_MASKFLAG_STATE(sTamper->MaskFlag));
 530:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_FILTER(sTamper->Filter));
 531:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(sTamper->SamplingFrequency));         
 532:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
 533:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
 534:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
 535:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  
 536:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
 537:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 774              		.loc 1 537 0
 775 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 776 0002 012B     		cmp	r3, #1
ARM GAS  /tmp/ccMphqsi.s 			page 24


 777 0004 00F08B80 		beq	.L56
 521:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0;
 778              		.loc 1 521 0 discriminator 2
 779 0008 70B4     		push	{r4, r5, r6}
 780              	.LCFI15:
 781              		.cfi_def_cfa_offset 12
 782              		.cfi_offset 4, -12
 783              		.cfi_offset 5, -8
 784              		.cfi_offset 6, -4
 785              		.loc 1 537 0 discriminator 2
 786 000a 0123     		movs	r3, #1
 787 000c 0377     		strb	r3, [r0, #28]
 538:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
 539:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 788              		.loc 1 539 0 discriminator 2
 789 000e 0223     		movs	r3, #2
 790 0010 4377     		strb	r3, [r0, #29]
 540:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 541:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the tamper trigger */
 542:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(sTamper->Trigger != RTC_TAMPERTRIGGER_RISINGEDGE)
 791              		.loc 1 542 0 discriminator 2
 792 0012 8B68     		ldr	r3, [r1, #8]
 793 0014 13B1     		cbz	r3, .L46
 543:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   { 
 544:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTamper->Trigger = (uint32_t)(sTamper->Tamper << 1); 
 794              		.loc 1 544 0
 795 0016 0B68     		ldr	r3, [r1]
 796 0018 5B00     		lsls	r3, r3, #1
 797 001a 8B60     		str	r3, [r1, #8]
 798              	.L46:
 545:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   } 
 546:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 547:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 799              		.loc 1 547 0
 800 001c CB68     		ldr	r3, [r1, #12]
 801 001e B3B1     		cbz	r3, .L47
 548:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   { 
 549:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTamper->NoErase = 0;
 802              		.loc 1 549 0
 803 0020 0023     		movs	r3, #0
 804 0022 CB60     		str	r3, [r1, #12]
 550:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_1) != 0)
 805              		.loc 1 550 0
 806 0024 0B68     		ldr	r3, [r1]
 807 0026 13F0010F 		tst	r3, #1
 808 002a 02D0     		beq	.L48
 551:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 552:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->NoErase |= RTC_TAMPCR_TAMP1NOERASE;
 809              		.loc 1 552 0
 810 002c 4FF40032 		mov	r2, #131072
 811 0030 CA60     		str	r2, [r1, #12]
 812              	.L48:
 553:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 554:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_2) != 0)
 813              		.loc 1 554 0
 814 0032 13F0080F 		tst	r3, #8
 815 0036 03D0     		beq	.L49
ARM GAS  /tmp/ccMphqsi.s 			page 25


 555:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 556:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->NoErase |= RTC_TAMPCR_TAMP2NOERASE;
 816              		.loc 1 556 0
 817 0038 CA68     		ldr	r2, [r1, #12]
 818 003a 42F48012 		orr	r2, r2, #1048576
 819 003e CA60     		str	r2, [r1, #12]
 820              	.L49:
 557:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 558:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_3) != 0)
 821              		.loc 1 558 0
 822 0040 13F0200F 		tst	r3, #32
 823 0044 03D0     		beq	.L47
 559:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 560:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->NoErase |= RTC_TAMPCR_TAMP3NOERASE;
 824              		.loc 1 560 0
 825 0046 CB68     		ldr	r3, [r1, #12]
 826 0048 43F40003 		orr	r3, r3, #8388608
 827 004c CB60     		str	r3, [r1, #12]
 828              	.L47:
 561:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 562:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 563:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 564:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 829              		.loc 1 564 0
 830 004e 0B69     		ldr	r3, [r1, #16]
 831 0050 B3B1     		cbz	r3, .L50
 565:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 566:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     sTamper->MaskFlag = 0;
 832              		.loc 1 566 0
 833 0052 0023     		movs	r3, #0
 834 0054 0B61     		str	r3, [r1, #16]
 567:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_1) != 0)
 835              		.loc 1 567 0
 836 0056 0B68     		ldr	r3, [r1]
 837 0058 13F0010F 		tst	r3, #1
 838 005c 02D0     		beq	.L51
 568:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 569:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->MaskFlag |= RTC_TAMPCR_TAMP1MF;
 839              		.loc 1 569 0
 840 005e 4FF48022 		mov	r2, #262144
 841 0062 0A61     		str	r2, [r1, #16]
 842              	.L51:
 570:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 571:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_2) != 0)
 843              		.loc 1 571 0
 844 0064 13F0080F 		tst	r3, #8
 845 0068 03D0     		beq	.L52
 572:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 573:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->MaskFlag |= RTC_TAMPCR_TAMP2MF;
 846              		.loc 1 573 0
 847 006a 0A69     		ldr	r2, [r1, #16]
 848 006c 42F40012 		orr	r2, r2, #2097152
 849 0070 0A61     		str	r2, [r1, #16]
 850              	.L52:
 574:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 575:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((sTamper->Tamper & RTC_TAMPER_3) != 0)
 851              		.loc 1 575 0
ARM GAS  /tmp/ccMphqsi.s 			page 26


 852 0072 13F0200F 		tst	r3, #32
 853 0076 03D0     		beq	.L50
 576:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 577:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       sTamper->MaskFlag |= RTC_TAMPCR_TAMP3MF;
 854              		.loc 1 577 0
 855 0078 0B69     		ldr	r3, [r1, #16]
 856 007a 43F08073 		orr	r3, r3, #16777216
 857 007e 0B61     		str	r3, [r1, #16]
 858              	.L50:
 578:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 579:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 580:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 581:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmpreg = ((uint32_t)sTamper->Tamper | (uint32_t)sTamper->Interrupt | (uint32_t)sTamper->Trigger  
 859              		.loc 1 581 0
 860 0080 0B68     		ldr	r3, [r1]
 861 0082 4A68     		ldr	r2, [r1, #4]
 862 0084 43EA0204 		orr	r4, r3, r2
 863 0088 8A68     		ldr	r2, [r1, #8]
 864 008a 1443     		orrs	r4, r4, r2
 865 008c CA68     		ldr	r2, [r1, #12]
 866 008e 1443     		orrs	r4, r4, r2
 582:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             (uint32_t)sTamper->MaskFlag | (uint32_t)sTamper->Filter | (uint32_t)sTamper->SamplingFr
 867              		.loc 1 582 0
 868 0090 0A69     		ldr	r2, [r1, #16]
 581:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             (uint32_t)sTamper->MaskFlag | (uint32_t)sTamper->Filter | (uint32_t)sTamper->SamplingFr
 869              		.loc 1 581 0
 870 0092 1443     		orrs	r4, r4, r2
 871              		.loc 1 582 0
 872 0094 4A69     		ldr	r2, [r1, #20]
 873 0096 1443     		orrs	r4, r4, r2
 874 0098 8A69     		ldr	r2, [r1, #24]
 875 009a 1443     		orrs	r4, r4, r2
 583:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             (uint32_t)sTamper->PrechargeDuration | (uint32_t)sTamper->TamperPullUp | sTamper->TimeS
 876              		.loc 1 583 0
 877 009c CA69     		ldr	r2, [r1, #28]
 582:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             (uint32_t)sTamper->MaskFlag | (uint32_t)sTamper->Filter | (uint32_t)sTamper->SamplingFr
 878              		.loc 1 582 0
 879 009e 1443     		orrs	r4, r4, r2
 880              		.loc 1 583 0
 881 00a0 0A6A     		ldr	r2, [r1, #32]
 882 00a2 1443     		orrs	r4, r4, r2
 883 00a4 4A6A     		ldr	r2, [r1, #36]
 581:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             (uint32_t)sTamper->MaskFlag | (uint32_t)sTamper->Filter | (uint32_t)sTamper->SamplingFr
 884              		.loc 1 581 0
 885 00a6 2243     		orrs	r2, r2, r4
 886              	.LVL60:
 584:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 585:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->TAMPCR &= (uint32_t)~((uint32_t)sTamper->Tamper | (uint32_t)(sTamper->Tamper << 1
 887              		.loc 1 585 0
 888 00a8 0668     		ldr	r6, [r0]
 889 00aa 346C     		ldr	r4, [r6, #64]
 890 00ac 43EA4303 		orr	r3, r3, r3, lsl #1
 586:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMPFREQ | (uint32_t)RTC_TAMPCR_TAMPFLT
 587:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMPPUDIS | (uint32_t)RTC_TAMPCR_TAMPIE
 588:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMP2IE | (uint32_t)RTC_TAMPCR_TAMP3IE 
 589:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMP2NOERASE | (uint32_t)RTC_TAMPCR_TAM
 590:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMP2MF | (uint32_t)RTC_TAMPCR_TAMP3MF)
ARM GAS  /tmp/ccMphqsi.s 			page 27


 891              		.loc 1 590 0
 892 00b0 1D4D     		ldr	r5, .L59
 893 00b2 1D43     		orrs	r5, r5, r3
 585:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                                        (uint32_t)RTC_TAMPCR_TAMPFREQ | (uint32_t)RTC_TAMPCR_TAMPFLT
 894              		.loc 1 585 0
 895 00b4 24EA0503 		bic	r3, r4, r5
 896 00b8 3364     		str	r3, [r6, #64]
 591:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 592:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->TAMPCR |= tmpreg;
 897              		.loc 1 592 0
 898 00ba 0468     		ldr	r4, [r0]
 899 00bc 236C     		ldr	r3, [r4, #64]
 900 00be 1343     		orrs	r3, r3, r2
 901 00c0 2364     		str	r3, [r4, #64]
 593:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 594:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(sTamper->Tamper == RTC_TAMPER_1)
 902              		.loc 1 594 0
 903 00c2 0B68     		ldr	r3, [r1]
 904 00c4 012B     		cmp	r3, #1
 905 00c6 06D1     		bne	.L53
 595:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 596:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Clear RTC Tamper 1 flag */
 597:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 906              		.loc 1 597 0
 907 00c8 0268     		ldr	r2, [r0]
 908              	.LVL61:
 909 00ca D368     		ldr	r3, [r2, #12]
 910 00cc DBB2     		uxtb	r3, r3
 911 00ce 63F40253 		orn	r3, r3, #8320
 912 00d2 D360     		str	r3, [r2, #12]
 913 00d4 14E0     		b	.L54
 914              	.LVL62:
 915              	.L53:
 598:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 599:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   else if(sTamper->Tamper == RTC_TAMPER_2)
 916              		.loc 1 599 0
 917 00d6 082B     		cmp	r3, #8
 918 00d8 06D1     		bne	.L55
 600:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 601:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Clear RTC Tamper 2 flag */
 602:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);    
 919              		.loc 1 602 0
 920 00da 0268     		ldr	r2, [r0]
 921              	.LVL63:
 922 00dc D368     		ldr	r3, [r2, #12]
 923 00de DBB2     		uxtb	r3, r3
 924 00e0 63F48143 		orn	r3, r3, #16512
 925 00e4 D360     		str	r3, [r2, #12]
 926 00e6 0BE0     		b	.L54
 927              	.LVL64:
 928              	.L55:
 603:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 604:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   else
 605:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 606:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Clear RTC Tamper 3 flag */
 607:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);  
 929              		.loc 1 607 0
ARM GAS  /tmp/ccMphqsi.s 			page 28


 930 00e8 0268     		ldr	r2, [r0]
 931              	.LVL65:
 932 00ea D368     		ldr	r3, [r2, #12]
 933 00ec DBB2     		uxtb	r3, r3
 934 00ee 43F07F43 		orr	r3, r3, #-16777216
 935 00f2 43F47F03 		orr	r3, r3, #16711680
 936 00f6 43F4FE43 		orr	r3, r3, #32512
 937 00fa 43F07F03 		orr	r3, r3, #127
 938 00fe D360     		str	r3, [r2, #12]
 939              	.L54:
 608:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 609:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 610:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* RTC Tamper Interrupt Configuration: EXTI configuration */
 611:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 940              		.loc 1 611 0
 941 0100 0A4B     		ldr	r3, .L59+4
 942 0102 1A68     		ldr	r2, [r3]
 943 0104 42F40012 		orr	r2, r2, #2097152
 944 0108 1A60     		str	r2, [r3]
 612:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 613:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   EXTI->RTSR |= RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT;
 945              		.loc 1 613 0
 946 010a 9A68     		ldr	r2, [r3, #8]
 947 010c 42F40012 		orr	r2, r2, #2097152
 948 0110 9A60     		str	r2, [r3, #8]
 614:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 615:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;   
 949              		.loc 1 615 0
 950 0112 0123     		movs	r3, #1
 951 0114 4377     		strb	r3, [r0, #29]
 616:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 617:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 618:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 952              		.loc 1 618 0
 953 0116 0023     		movs	r3, #0
 954 0118 0377     		strb	r3, [r0, #28]
 619:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 620:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 955              		.loc 1 620 0
 956 011a 1846     		mov	r0, r3
 957              	.LVL66:
 958 011c 01E0     		b	.L45
 959              	.LVL67:
 960              	.L56:
 961              	.LCFI16:
 962              		.cfi_def_cfa_offset 0
 963              		.cfi_restore 4
 964              		.cfi_restore 5
 965              		.cfi_restore 6
 537:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
 966              		.loc 1 537 0
 967 011e 0220     		movs	r0, #2
 968              	.LVL68:
 969 0120 7047     		bx	lr
 970              	.LVL69:
 971              	.L45:
 972              	.LCFI17:
ARM GAS  /tmp/ccMphqsi.s 			page 29


 973              		.cfi_def_cfa_offset 12
 974              		.cfi_offset 4, -12
 975              		.cfi_offset 5, -8
 976              		.cfi_offset 6, -4
 621:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 977              		.loc 1 621 0
 978 0122 70BC     		pop	{r4, r5, r6}
 979              	.LCFI18:
 980              		.cfi_restore 6
 981              		.cfi_restore 5
 982              		.cfi_restore 4
 983              		.cfi_def_cfa_offset 0
 984 0124 7047     		bx	lr
 985              	.L60:
 986 0126 00BF     		.align	2
 987              	.L59:
 988 0128 84FFFF01 		.word	33554308
 989 012c 003C0140 		.word	1073822720
 990              		.cfi_endproc
 991              	.LFE143:
 993              		.section	.text.HAL_RTCEx_DeactivateTamper,"ax",%progbits
 994              		.align	2
 995              		.global	HAL_RTCEx_DeactivateTamper
 996              		.thumb
 997              		.thumb_func
 999              	HAL_RTCEx_DeactivateTamper:
 1000              	.LFB144:
 622:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 623:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 624:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Deactivates Tamper.
 625:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 626:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 627:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  Tamper Selected tamper pin.
 628:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be RTC_Tamper_1 and/or RTC_TAMPER_2.
 629:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 630:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 631:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_DeactivateTamper(RTC_HandleTypeDef *hrtc, uint32_t Tamper)
 632:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 1001              		.loc 1 632 0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 0
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005              		@ link register save eliminated.
 1006              	.LVL70:
 633:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER(Tamper)); 
 634:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 635:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
 636:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 1007              		.loc 1 636 0
 1008 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1009 0002 012B     		cmp	r3, #1
 1010 0004 27D0     		beq	.L66
 632:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER(Tamper)); 
 1011              		.loc 1 632 0 discriminator 2
 1012 0006 10B4     		push	{r4}
 1013              	.LCFI19:
 1014              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccMphqsi.s 			page 30


 1015              		.cfi_offset 4, -4
 1016              		.loc 1 636 0 discriminator 2
 1017 0008 0123     		movs	r3, #1
 1018 000a 0377     		strb	r3, [r0, #28]
 637:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
 638:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1019              		.loc 1 638 0 discriminator 2
 1020 000c 0223     		movs	r3, #2
 1021 000e 4377     		strb	r3, [r0, #29]
 639:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 640:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /* Disable the selected Tamper pin */
 641:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->TAMPCR &= (uint32_t)~Tamper;
 1022              		.loc 1 641 0 discriminator 2
 1023 0010 0268     		ldr	r2, [r0]
 1024 0012 136C     		ldr	r3, [r2, #64]
 1025 0014 23EA0103 		bic	r3, r3, r1
 1026 0018 1364     		str	r3, [r2, #64]
 642:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 643:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if ((Tamper & RTC_TAMPER_1) != 0)
 1027              		.loc 1 643 0 discriminator 2
 1028 001a 11F0010F 		tst	r1, #1
 1029 001e 04D0     		beq	.L63
 644:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 645:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Disable the Tamper1 interrupt */
 646:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     hrtc->Instance->TAMPCR &= (uint32_t)~(RTC_IT_TAMP | RTC_IT_TAMP1);
 1030              		.loc 1 646 0
 1031 0020 0268     		ldr	r2, [r0]
 1032 0022 146C     		ldr	r4, [r2, #64]
 1033 0024 0E4B     		ldr	r3, .L69
 1034 0026 2340     		ands	r3, r3, r4
 1035 0028 1364     		str	r3, [r2, #64]
 1036              	.L63:
 647:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 648:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if ((Tamper & RTC_TAMPER_2) != 0)
 1037              		.loc 1 648 0
 1038 002a 11F0080F 		tst	r1, #8
 1039 002e 04D0     		beq	.L64
 649:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 650:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Disable the Tamper2 interrupt */
 651:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     hrtc->Instance->TAMPCR &= (uint32_t)~(RTC_IT_TAMP | RTC_IT_TAMP2);
 1040              		.loc 1 651 0
 1041 0030 0268     		ldr	r2, [r0]
 1042 0032 146C     		ldr	r4, [r2, #64]
 1043 0034 0B4B     		ldr	r3, .L69+4
 1044 0036 2340     		ands	r3, r3, r4
 1045 0038 1364     		str	r3, [r2, #64]
 1046              	.L64:
 652:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 653:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if ((Tamper & RTC_TAMPER_3) != 0)
 1047              		.loc 1 653 0
 1048 003a 11F0200F 		tst	r1, #32
 1049 003e 04D0     		beq	.L65
 654:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 655:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Disable the Tamper2 interrupt */
 656:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     hrtc->Instance->TAMPCR &= (uint32_t)~(RTC_IT_TAMP | RTC_IT_TAMP3);
 1050              		.loc 1 656 0
 1051 0040 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccMphqsi.s 			page 31


 1052 0042 116C     		ldr	r1, [r2, #64]
 1053              	.LVL71:
 1054 0044 084B     		ldr	r3, .L69+8
 1055 0046 0B40     		ands	r3, r3, r1
 1056 0048 1364     		str	r3, [r2, #64]
 1057              	.L65:
 657:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   } 
 658:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 659:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;   
 1058              		.loc 1 659 0
 1059 004a 0123     		movs	r3, #1
 1060 004c 4377     		strb	r3, [r0, #29]
 660:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 661:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */  
 662:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 1061              		.loc 1 662 0
 1062 004e 0023     		movs	r3, #0
 1063 0050 0377     		strb	r3, [r0, #28]
 663:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 664:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK; 
 1064              		.loc 1 664 0
 1065 0052 1846     		mov	r0, r3
 1066              	.LVL72:
 1067 0054 01E0     		b	.L62
 1068              	.LVL73:
 1069              	.L66:
 1070              	.LCFI20:
 1071              		.cfi_def_cfa_offset 0
 1072              		.cfi_restore 4
 636:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
 1073              		.loc 1 636 0
 1074 0056 0220     		movs	r0, #2
 1075              	.LVL74:
 1076 0058 7047     		bx	lr
 1077              	.LVL75:
 1078              	.L62:
 1079              	.LCFI21:
 1080              		.cfi_def_cfa_offset 4
 1081              		.cfi_offset 4, -4
 665:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 1082              		.loc 1 665 0
 1083 005a 5DF8044B 		ldr	r4, [sp], #4
 1084              	.LCFI22:
 1085              		.cfi_restore 4
 1086              		.cfi_def_cfa_offset 0
 1087 005e 7047     		bx	lr
 1088              	.L70:
 1089              		.align	2
 1090              	.L69:
 1091 0060 FBFFFEFF 		.word	-65541
 1092 0064 FBFFF7FF 		.word	-524293
 1093 0068 FBFFBFFF 		.word	-4194309
 1094              		.cfi_endproc
 1095              	.LFE144:
 1097              		.section	.text.HAL_RTCEx_TimeStampEventCallback,"ax",%progbits
 1098              		.align	2
 1099              		.weak	HAL_RTCEx_TimeStampEventCallback
ARM GAS  /tmp/ccMphqsi.s 			page 32


 1100              		.thumb
 1101              		.thumb_func
 1103              	HAL_RTCEx_TimeStampEventCallback:
 1104              	.LFB146:
 666:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 667:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 668:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  This function handles TimeStamp interrupt request.
 669:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 670:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 671:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval None
 672:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 673:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
 674:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {  
 675:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(__HAL_RTC_TIMESTAMP_GET_IT(hrtc, RTC_IT_TS))
 676:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 677:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Get the status of the Interrupt */
 678:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_TS) != (uint32_t)RESET)
 679:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 680:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****        /* TIMESTAMP callback */ 
 681:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         HAL_RTCEx_TimeStampEventCallback(hrtc);
 682:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 683:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Clear the TIMESTAMP interrupt pending bit */
 684:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc,RTC_FLAG_TSF);
 685:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 686:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 687:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 688:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get the status of the Interrupt */
 689:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F)== SET)
 690:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 691:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Get the TAMPER Interrupt enable bit and pending bit */
 692:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMPIE)) != (uint32_t)RESET) || \
 693:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****        (((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMP1IE)) != (uint32_t)RESET))
 694:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 695:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Tamper callback */
 696:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       HAL_RTCEx_Tamper1EventCallback(hrtc);
 697:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 698:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Clear the Tamper interrupt pending bit */
 699:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP1F);
 700:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 701:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 702:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 703:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get the status of the Interrupt */
 704:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F)== SET)
 705:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 706:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Get the TAMPER Interrupt enable bit and pending bit */
 707:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMPIE)) != (uint32_t)RESET) || \
 708:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****        (((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMP2IE)) != (uint32_t)RESET))
 709:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 710:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Tamper callback */
 711:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       HAL_RTCEx_Tamper2EventCallback(hrtc);
 712:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 713:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Clear the Tamper interrupt pending bit */
 714:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 715:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 716:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 717:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 718:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get the status of the Interrupt */
ARM GAS  /tmp/ccMphqsi.s 			page 33


 719:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F)== SET)
 720:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 721:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Get the TAMPER Interrupt enable bit and pending bit */
 722:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMPIE)) != (uint32_t)RESET) || \
 723:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****        (((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMP3IE)) != (uint32_t)RESET))
 724:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 725:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Tamper callback */
 726:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       HAL_RTCEx_Tamper3EventCallback(hrtc);
 727:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 728:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Clear the Tamper interrupt pending bit */
 729:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
 730:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 731:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 732:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 733:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear the EXTI's Flag for RTC TimeStamp and Tamper */
 734:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 735:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 736:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
 737:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;
 738:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 739:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 740:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 741:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  TimeStamp callback. 
 742:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 743:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 744:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval None
 745:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 746:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** __weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
 747:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 1105              		.loc 1 747 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 1110              	.LVL76:
 1111 0000 7047     		bx	lr
 1112              		.cfi_endproc
 1113              	.LFE146:
 1115 0002 00BF     		.section	.text.HAL_RTCEx_Tamper1EventCallback,"ax",%progbits
 1116              		.align	2
 1117              		.weak	HAL_RTCEx_Tamper1EventCallback
 1118              		.thumb
 1119              		.thumb_func
 1121              	HAL_RTCEx_Tamper1EventCallback:
 1122              	.LFB147:
 748:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Prevent unused argument(s) compilation warning */
 749:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   UNUSED(hrtc);
 750:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 751:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 752:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             the HAL_RTC_TimeStampEventCallback could be implemented in the user file
 753:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 754:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 755:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 756:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 757:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Tamper 1 callback. 
 758:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 759:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
ARM GAS  /tmp/ccMphqsi.s 			page 34


 760:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval None
 761:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 762:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** __weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
 763:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 1123              		.loc 1 763 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 1127              		@ link register save eliminated.
 1128              	.LVL77:
 1129 0000 7047     		bx	lr
 1130              		.cfi_endproc
 1131              	.LFE147:
 1133 0002 00BF     		.section	.text.HAL_RTCEx_Tamper2EventCallback,"ax",%progbits
 1134              		.align	2
 1135              		.weak	HAL_RTCEx_Tamper2EventCallback
 1136              		.thumb
 1137              		.thumb_func
 1139              	HAL_RTCEx_Tamper2EventCallback:
 1140              	.LFB148:
 764:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Prevent unused argument(s) compilation warning */
 765:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   UNUSED(hrtc);
 766:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 767:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 768:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             the HAL_RTC_Tamper1EventCallback could be implemented in the user file
 769:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****    */
 770:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 771:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 772:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 773:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Tamper 2 callback. 
 774:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 775:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 776:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval None
 777:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 778:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** __weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
 779:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 1141              		.loc 1 779 0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 1145              		@ link register save eliminated.
 1146              	.LVL78:
 1147 0000 7047     		bx	lr
 1148              		.cfi_endproc
 1149              	.LFE148:
 1151 0002 00BF     		.section	.text.HAL_RTCEx_Tamper3EventCallback,"ax",%progbits
 1152              		.align	2
 1153              		.weak	HAL_RTCEx_Tamper3EventCallback
 1154              		.thumb
 1155              		.thumb_func
 1157              	HAL_RTCEx_Tamper3EventCallback:
 1158              	.LFB149:
 780:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Prevent unused argument(s) compilation warning */
 781:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   UNUSED(hrtc);
 782:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 783:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 784:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             the HAL_RTC_Tamper2EventCallback could be implemented in the user file
ARM GAS  /tmp/ccMphqsi.s 			page 35


 785:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****    */
 786:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 787:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 788:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 789:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Tamper 3 callback. 
 790:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc RTC handle
 791:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval None
 792:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 793:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** __weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
 794:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 1159              		.loc 1 794 0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163              		@ link register save eliminated.
 1164              	.LVL79:
 1165 0000 7047     		bx	lr
 1166              		.cfi_endproc
 1167              	.LFE149:
 1169 0002 00BF     		.section	.text.HAL_RTCEx_TamperTimeStampIRQHandler,"ax",%progbits
 1170              		.align	2
 1171              		.global	HAL_RTCEx_TamperTimeStampIRQHandler
 1172              		.thumb
 1173              		.thumb_func
 1175              	HAL_RTCEx_TamperTimeStampIRQHandler:
 1176              	.LFB145:
 674:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(__HAL_RTC_TIMESTAMP_GET_IT(hrtc, RTC_IT_TS))
 1177              		.loc 1 674 0
 1178              		.cfi_startproc
 1179              		@ args = 0, pretend = 0, frame = 0
 1180              		@ frame_needed = 0, uses_anonymous_args = 0
 1181              	.LVL80:
 674:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(__HAL_RTC_TIMESTAMP_GET_IT(hrtc, RTC_IT_TS))
 1182              		.loc 1 674 0
 1183 0000 10B5     		push	{r4, lr}
 1184              	.LCFI23:
 1185              		.cfi_def_cfa_offset 8
 1186              		.cfi_offset 4, -8
 1187              		.cfi_offset 14, -4
 1188 0002 0446     		mov	r4, r0
 675:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 1189              		.loc 1 675 0
 1190 0004 0368     		ldr	r3, [r0]
 1191 0006 DA68     		ldr	r2, [r3, #12]
 1192 0008 12F4006F 		tst	r2, #2048
 1193 000c 0BD0     		beq	.L76
 678:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 1194              		.loc 1 678 0
 1195 000e 9B68     		ldr	r3, [r3, #8]
 1196 0010 13F4004F 		tst	r3, #32768
 1197 0014 07D0     		beq	.L76
 681:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 1198              		.loc 1 681 0
 1199 0016 FFF7FEFF 		bl	HAL_RTCEx_TimeStampEventCallback
 1200              	.LVL81:
 684:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 1201              		.loc 1 684 0
ARM GAS  /tmp/ccMphqsi.s 			page 36


 1202 001a 2268     		ldr	r2, [r4]
 1203 001c D368     		ldr	r3, [r2, #12]
 1204 001e DBB2     		uxtb	r3, r3
 1205 0020 63F40863 		orn	r3, r3, #2176
 1206 0024 D360     		str	r3, [r2, #12]
 1207              	.L76:
 689:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 1208              		.loc 1 689 0
 1209 0026 2368     		ldr	r3, [r4]
 1210 0028 DA68     		ldr	r2, [r3, #12]
 1211 002a 12F4005F 		tst	r2, #8192
 1212 002e 10D0     		beq	.L77
 692:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****        (((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMP1IE)) != (uint32_t)RESET))
 1213              		.loc 1 692 0
 1214 0030 1A6C     		ldr	r2, [r3, #64]
 1215 0032 12F0040F 		tst	r2, #4
 1216 0036 03D1     		bne	.L78
 693:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 1217              		.loc 1 693 0 discriminator 1
 1218 0038 1B6C     		ldr	r3, [r3, #64]
 692:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****        (((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMP1IE)) != (uint32_t)RESET))
 1219              		.loc 1 692 0 discriminator 1
 1220 003a 13F4803F 		tst	r3, #65536
 1221 003e 08D0     		beq	.L77
 1222              	.L78:
 696:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 1223              		.loc 1 696 0
 1224 0040 2046     		mov	r0, r4
 1225 0042 FFF7FEFF 		bl	HAL_RTCEx_Tamper1EventCallback
 1226              	.LVL82:
 699:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 1227              		.loc 1 699 0
 1228 0046 2268     		ldr	r2, [r4]
 1229 0048 D368     		ldr	r3, [r2, #12]
 1230 004a DBB2     		uxtb	r3, r3
 1231 004c 63F40253 		orn	r3, r3, #8320
 1232 0050 D360     		str	r3, [r2, #12]
 1233              	.L77:
 704:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 1234              		.loc 1 704 0
 1235 0052 2368     		ldr	r3, [r4]
 1236 0054 DA68     		ldr	r2, [r3, #12]
 1237 0056 12F4804F 		tst	r2, #16384
 1238 005a 10D0     		beq	.L79
 707:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****        (((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMP2IE)) != (uint32_t)RESET))
 1239              		.loc 1 707 0
 1240 005c 1A6C     		ldr	r2, [r3, #64]
 1241 005e 12F0040F 		tst	r2, #4
 1242 0062 03D1     		bne	.L80
 708:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 1243              		.loc 1 708 0 discriminator 1
 1244 0064 1B6C     		ldr	r3, [r3, #64]
 707:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****        (((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMP2IE)) != (uint32_t)RESET))
 1245              		.loc 1 707 0 discriminator 1
 1246 0066 13F4002F 		tst	r3, #524288
 1247 006a 08D0     		beq	.L79
 1248              	.L80:
ARM GAS  /tmp/ccMphqsi.s 			page 37


 711:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 1249              		.loc 1 711 0
 1250 006c 2046     		mov	r0, r4
 1251 006e FFF7FEFF 		bl	HAL_RTCEx_Tamper2EventCallback
 1252              	.LVL83:
 714:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 1253              		.loc 1 714 0
 1254 0072 2268     		ldr	r2, [r4]
 1255 0074 D368     		ldr	r3, [r2, #12]
 1256 0076 DBB2     		uxtb	r3, r3
 1257 0078 63F48143 		orn	r3, r3, #16512
 1258 007c D360     		str	r3, [r2, #12]
 1259              	.L79:
 719:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 1260              		.loc 1 719 0
 1261 007e 2368     		ldr	r3, [r4]
 1262 0080 DA68     		ldr	r2, [r3, #12]
 1263 0082 12F4004F 		tst	r2, #32768
 1264 0086 16D0     		beq	.L81
 722:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****        (((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMP3IE)) != (uint32_t)RESET))
 1265              		.loc 1 722 0
 1266 0088 1A6C     		ldr	r2, [r3, #64]
 1267 008a 12F0040F 		tst	r2, #4
 1268 008e 03D1     		bne	.L82
 723:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 1269              		.loc 1 723 0 discriminator 1
 1270 0090 1B6C     		ldr	r3, [r3, #64]
 722:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****        (((hrtc->Instance->TAMPCR & RTC_TAMPCR_TAMP3IE)) != (uint32_t)RESET))
 1271              		.loc 1 722 0 discriminator 1
 1272 0092 13F4800F 		tst	r3, #4194304
 1273 0096 0ED0     		beq	.L81
 1274              	.L82:
 726:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 1275              		.loc 1 726 0
 1276 0098 2046     		mov	r0, r4
 1277 009a FFF7FEFF 		bl	HAL_RTCEx_Tamper3EventCallback
 1278              	.LVL84:
 729:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 1279              		.loc 1 729 0
 1280 009e 2268     		ldr	r2, [r4]
 1281 00a0 D368     		ldr	r3, [r2, #12]
 1282 00a2 DBB2     		uxtb	r3, r3
 1283 00a4 43F07F43 		orr	r3, r3, #-16777216
 1284 00a8 43F47F03 		orr	r3, r3, #16711680
 1285 00ac 43F4FE43 		orr	r3, r3, #32512
 1286 00b0 43F07F03 		orr	r3, r3, #127
 1287 00b4 D360     		str	r3, [r2, #12]
 1288              	.L81:
 734:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 1289              		.loc 1 734 0
 1290 00b6 4FF40012 		mov	r2, #2097152
 1291 00ba 024B     		ldr	r3, .L84
 1292 00bc 5A61     		str	r2, [r3, #20]
 737:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 1293              		.loc 1 737 0
 1294 00be 0123     		movs	r3, #1
 1295 00c0 6377     		strb	r3, [r4, #29]
ARM GAS  /tmp/ccMphqsi.s 			page 38


 1296 00c2 10BD     		pop	{r4, pc}
 1297              	.LVL85:
 1298              	.L85:
 1299              		.align	2
 1300              	.L84:
 1301 00c4 003C0140 		.word	1073822720
 1302              		.cfi_endproc
 1303              	.LFE145:
 1305              		.section	.text.HAL_RTCEx_PollForTimeStampEvent,"ax",%progbits
 1306              		.align	2
 1307              		.global	HAL_RTCEx_PollForTimeStampEvent
 1308              		.thumb
 1309              		.thumb_func
 1311              	HAL_RTCEx_PollForTimeStampEvent:
 1312              	.LFB150:
 795:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Prevent unused argument(s) compilation warning */
 796:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   UNUSED(hrtc);
 797:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 798:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 799:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
 800:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****    */
 801:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 802:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 803:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 804:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  This function handles TimeStamp polling request.
 805:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 806:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 807:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  Timeout Timeout duration
 808:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 809:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 810:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_PollForTimeStampEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
 811:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** { 
 1313              		.loc 1 811 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 0
 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 1317              	.LVL86:
 1318 0000 70B5     		push	{r4, r5, r6, lr}
 1319              	.LCFI24:
 1320              		.cfi_def_cfa_offset 16
 1321              		.cfi_offset 4, -16
 1322              		.cfi_offset 5, -12
 1323              		.cfi_offset 6, -8
 1324              		.cfi_offset 14, -4
 1325 0002 0446     		mov	r4, r0
 1326 0004 0D46     		mov	r5, r1
 1327              	.LVL87:
 812:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tickstart = 0; 
 813:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 814:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get tick */
 815:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tickstart = HAL_GetTick();
 1328              		.loc 1 815 0
 1329 0006 FFF7FEFF 		bl	HAL_GetTick
 1330              	.LVL88:
 1331 000a 0646     		mov	r6, r0
 1332              	.LVL89:
 816:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
ARM GAS  /tmp/ccMphqsi.s 			page 39


 817:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   while(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) == RESET)
 1333              		.loc 1 817 0
 1334 000c 0BE0     		b	.L88
 1335              	.LVL90:
 1336              	.L91:
 818:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {	        
 819:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 1337              		.loc 1 819 0
 1338 000e B5F1FF3F 		cmp	r5, #-1
 1339 0012 08D0     		beq	.L88
 820:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 821:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 1340              		.loc 1 821 0
 1341 0014 25B1     		cbz	r5, .L89
 1342              		.loc 1 821 0 is_stmt 0 discriminator 1
 1343 0016 FFF7FEFF 		bl	HAL_GetTick
 1344              	.LVL91:
 1345 001a 801B     		subs	r0, r0, r6
 1346 001c 8542     		cmp	r5, r0
 1347 001e 02D2     		bcs	.L88
 1348              	.L89:
 822:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       {
 823:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1349              		.loc 1 823 0 is_stmt 1
 1350 0020 0320     		movs	r0, #3
 1351 0022 6077     		strb	r0, [r4, #29]
 824:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 1352              		.loc 1 824 0
 1353 0024 70BD     		pop	{r4, r5, r6, pc}
 1354              	.LVL92:
 1355              	.L88:
 817:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {	        
 1356              		.loc 1 817 0
 1357 0026 2368     		ldr	r3, [r4]
 1358 0028 DA68     		ldr	r2, [r3, #12]
 1359 002a 12F4006F 		tst	r2, #2048
 1360 002e EED0     		beq	.L91
 825:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       }
 826:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 827:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 828:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 	
 829:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSOVF) != RESET)
 1361              		.loc 1 829 0
 1362 0030 DA68     		ldr	r2, [r3, #12]
 1363 0032 12F4805F 		tst	r2, #4096
 1364 0036 08D0     		beq	.L92
 830:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 831:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Clear the TIMESTAMP OverRun Flag */
 832:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 1365              		.loc 1 832 0
 1366 0038 DA68     		ldr	r2, [r3, #12]
 1367 003a D2B2     		uxtb	r2, r2
 1368 003c 62F48452 		orn	r2, r2, #4224
 1369 0040 DA60     		str	r2, [r3, #12]
 833:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
 834:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Change TIMESTAMP state */
 835:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     hrtc->State = HAL_RTC_STATE_ERROR; 
ARM GAS  /tmp/ccMphqsi.s 			page 40


 1370              		.loc 1 835 0
 1371 0042 0423     		movs	r3, #4
 1372 0044 6377     		strb	r3, [r4, #29]
 836:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
 837:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     return HAL_ERROR; 
 1373              		.loc 1 837 0
 1374 0046 0120     		movs	r0, #1
 1375 0048 70BD     		pop	{r4, r5, r6, pc}
 1376              	.LVL93:
 1377              	.L92:
 838:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****    }
 839:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 	
 840:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
 841:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 1378              		.loc 1 841 0
 1379 004a 0123     		movs	r3, #1
 1380 004c 6377     		strb	r3, [r4, #29]
 842:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 843:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK; 
 1381              		.loc 1 843 0
 1382 004e 0020     		movs	r0, #0
 844:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 1383              		.loc 1 844 0
 1384 0050 70BD     		pop	{r4, r5, r6, pc}
 1385              		.cfi_endproc
 1386              	.LFE150:
 1388 0052 00BF     		.section	.text.HAL_RTCEx_PollForTamper1Event,"ax",%progbits
 1389              		.align	2
 1390              		.global	HAL_RTCEx_PollForTamper1Event
 1391              		.thumb
 1392              		.thumb_func
 1394              	HAL_RTCEx_PollForTamper1Event:
 1395              	.LFB151:
 845:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 846:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 847:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  This function handles Tamper1 Polling.
 848:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 849:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 850:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  Timeout Timeout duration
 851:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 852:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 853:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_PollForTamper1Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
 854:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {  
 1396              		.loc 1 854 0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 0
 1399              		@ frame_needed = 0, uses_anonymous_args = 0
 1400              	.LVL94:
 1401 0000 70B5     		push	{r4, r5, r6, lr}
 1402              	.LCFI25:
 1403              		.cfi_def_cfa_offset 16
 1404              		.cfi_offset 4, -16
 1405              		.cfi_offset 5, -12
 1406              		.cfi_offset 6, -8
 1407              		.cfi_offset 14, -4
 1408 0002 0446     		mov	r4, r0
 1409 0004 0D46     		mov	r5, r1
ARM GAS  /tmp/ccMphqsi.s 			page 41


 1410              	.LVL95:
 855:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tickstart = 0U; 
 856:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 857:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get tick */
 858:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tickstart = HAL_GetTick();
 1411              		.loc 1 858 0
 1412 0006 FFF7FEFF 		bl	HAL_GetTick
 1413              	.LVL96:
 1414 000a 0646     		mov	r6, r0
 1415              	.LVL97:
 859:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 860:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get the status of the Interrupt */
 861:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   while(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F)== RESET)
 1416              		.loc 1 861 0
 1417 000c 0BE0     		b	.L96
 1418              	.LVL98:
 1419              	.L99:
 862:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 863:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 1420              		.loc 1 863 0
 1421 000e B5F1FF3F 		cmp	r5, #-1
 1422 0012 08D0     		beq	.L96
 864:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 865:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 1423              		.loc 1 865 0
 1424 0014 25B1     		cbz	r5, .L97
 1425              		.loc 1 865 0 is_stmt 0 discriminator 1
 1426 0016 FFF7FEFF 		bl	HAL_GetTick
 1427              	.LVL99:
 1428 001a 801B     		subs	r0, r0, r6
 1429 001c 8542     		cmp	r5, r0
 1430 001e 02D2     		bcs	.L96
 1431              	.L97:
 866:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       {
 867:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1432              		.loc 1 867 0 is_stmt 1
 1433 0020 0320     		movs	r0, #3
 1434 0022 6077     		strb	r0, [r4, #29]
 868:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 1435              		.loc 1 868 0
 1436 0024 70BD     		pop	{r4, r5, r6, pc}
 1437              	.LVL100:
 1438              	.L96:
 861:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 1439              		.loc 1 861 0
 1440 0026 2368     		ldr	r3, [r4]
 1441 0028 DA68     		ldr	r2, [r3, #12]
 1442 002a 12F4005F 		tst	r2, #8192
 1443 002e EED0     		beq	.L99
 869:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       }
 870:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 871:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 872:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 873:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear the Tamper Flag */
 874:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP1F);
 1444              		.loc 1 874 0
 1445 0030 DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/ccMphqsi.s 			page 42


 1446 0032 D2B2     		uxtb	r2, r2
 1447 0034 62F40252 		orn	r2, r2, #8320
 1448 0038 DA60     		str	r2, [r3, #12]
 875:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 876:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
 877:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;
 1449              		.loc 1 877 0
 1450 003a 0123     		movs	r3, #1
 1451 003c 6377     		strb	r3, [r4, #29]
 878:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 879:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK; 
 1452              		.loc 1 879 0
 1453 003e 0020     		movs	r0, #0
 880:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 1454              		.loc 1 880 0
 1455 0040 70BD     		pop	{r4, r5, r6, pc}
 1456              		.cfi_endproc
 1457              	.LFE151:
 1459 0042 00BF     		.section	.text.HAL_RTCEx_PollForTamper2Event,"ax",%progbits
 1460              		.align	2
 1461              		.global	HAL_RTCEx_PollForTamper2Event
 1462              		.thumb
 1463              		.thumb_func
 1465              	HAL_RTCEx_PollForTamper2Event:
 1466              	.LFB152:
 881:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 882:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 883:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  This function handles Tamper2 Polling.
 884:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 885:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 886:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  Timeout Timeout duration
 887:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 888:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 889:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_PollForTamper2Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
 890:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {  
 1467              		.loc 1 890 0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 0
 1470              		@ frame_needed = 0, uses_anonymous_args = 0
 1471              	.LVL101:
 1472 0000 70B5     		push	{r4, r5, r6, lr}
 1473              	.LCFI26:
 1474              		.cfi_def_cfa_offset 16
 1475              		.cfi_offset 4, -16
 1476              		.cfi_offset 5, -12
 1477              		.cfi_offset 6, -8
 1478              		.cfi_offset 14, -4
 1479 0002 0446     		mov	r4, r0
 1480 0004 0D46     		mov	r5, r1
 1481              	.LVL102:
 891:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tickstart = 0; 
 892:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 893:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get tick */
 894:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tickstart = HAL_GetTick();
 1482              		.loc 1 894 0
 1483 0006 FFF7FEFF 		bl	HAL_GetTick
 1484              	.LVL103:
ARM GAS  /tmp/ccMphqsi.s 			page 43


 1485 000a 0646     		mov	r6, r0
 1486              	.LVL104:
 895:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 896:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get the status of the Interrupt */
 897:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   while(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) == RESET)
 1487              		.loc 1 897 0
 1488 000c 0BE0     		b	.L103
 1489              	.LVL105:
 1490              	.L106:
 898:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 899:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 1491              		.loc 1 899 0
 1492 000e B5F1FF3F 		cmp	r5, #-1
 1493 0012 08D0     		beq	.L103
 900:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 901:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 1494              		.loc 1 901 0
 1495 0014 25B1     		cbz	r5, .L104
 1496              		.loc 1 901 0 is_stmt 0 discriminator 1
 1497 0016 FFF7FEFF 		bl	HAL_GetTick
 1498              	.LVL106:
 1499 001a 801B     		subs	r0, r0, r6
 1500 001c 8542     		cmp	r5, r0
 1501 001e 02D2     		bcs	.L103
 1502              	.L104:
 902:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       {
 903:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1503              		.loc 1 903 0 is_stmt 1
 1504 0020 0320     		movs	r0, #3
 1505 0022 6077     		strb	r0, [r4, #29]
 904:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 1506              		.loc 1 904 0
 1507 0024 70BD     		pop	{r4, r5, r6, pc}
 1508              	.LVL107:
 1509              	.L103:
 897:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 1510              		.loc 1 897 0
 1511 0026 2368     		ldr	r3, [r4]
 1512 0028 DA68     		ldr	r2, [r3, #12]
 1513 002a 12F4804F 		tst	r2, #16384
 1514 002e EED0     		beq	.L106
 905:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       }
 906:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 907:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 908:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 909:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear the Tamper Flag */
 910:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP2F);
 1515              		.loc 1 910 0
 1516 0030 DA68     		ldr	r2, [r3, #12]
 1517 0032 D2B2     		uxtb	r2, r2
 1518 0034 62F48142 		orn	r2, r2, #16512
 1519 0038 DA60     		str	r2, [r3, #12]
 911:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 912:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
 913:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;
 1520              		.loc 1 913 0
 1521 003a 0123     		movs	r3, #1
ARM GAS  /tmp/ccMphqsi.s 			page 44


 1522 003c 6377     		strb	r3, [r4, #29]
 914:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 915:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 1523              		.loc 1 915 0
 1524 003e 0020     		movs	r0, #0
 916:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 1525              		.loc 1 916 0
 1526 0040 70BD     		pop	{r4, r5, r6, pc}
 1527              		.cfi_endproc
 1528              	.LFE152:
 1530 0042 00BF     		.section	.text.HAL_RTCEx_PollForTamper3Event,"ax",%progbits
 1531              		.align	2
 1532              		.global	HAL_RTCEx_PollForTamper3Event
 1533              		.thumb
 1534              		.thumb_func
 1536              	HAL_RTCEx_PollForTamper3Event:
 1537              	.LFB153:
 917:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 918:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 919:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  This function handles Tamper3 Polling.
 920:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc RTC handle
 921:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  Timeout Timeout duration
 922:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 923:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 924:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_PollForTamper3Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
 925:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 1538              		.loc 1 925 0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 0
 1541              		@ frame_needed = 0, uses_anonymous_args = 0
 1542              	.LVL108:
 1543 0000 70B5     		push	{r4, r5, r6, lr}
 1544              	.LCFI27:
 1545              		.cfi_def_cfa_offset 16
 1546              		.cfi_offset 4, -16
 1547              		.cfi_offset 5, -12
 1548              		.cfi_offset 6, -8
 1549              		.cfi_offset 14, -4
 1550 0002 0446     		mov	r4, r0
 1551 0004 0D46     		mov	r5, r1
 926:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tickstart = HAL_GetTick();
 1552              		.loc 1 926 0
 1553 0006 FFF7FEFF 		bl	HAL_GetTick
 1554              	.LVL109:
 1555 000a 0646     		mov	r6, r0
 1556              	.LVL110:
 927:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 928:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get the status of the Interrupt */
 929:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   while(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) == RESET)
 1557              		.loc 1 929 0
 1558 000c 0BE0     		b	.L110
 1559              	.LVL111:
 1560              	.L113:
 930:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 931:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 1561              		.loc 1 931 0
 1562 000e B5F1FF3F 		cmp	r5, #-1
ARM GAS  /tmp/ccMphqsi.s 			page 45


 1563 0012 08D0     		beq	.L110
 932:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 933:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 1564              		.loc 1 933 0
 1565 0014 25B1     		cbz	r5, .L111
 1566              		.loc 1 933 0 is_stmt 0 discriminator 1
 1567 0016 FFF7FEFF 		bl	HAL_GetTick
 1568              	.LVL112:
 1569 001a 801B     		subs	r0, r0, r6
 1570 001c 8542     		cmp	r5, r0
 1571 001e 02D2     		bcs	.L110
 1572              	.L111:
 934:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       {
 935:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1573              		.loc 1 935 0 is_stmt 1
 1574 0020 0320     		movs	r0, #3
 1575 0022 6077     		strb	r0, [r4, #29]
 936:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 1576              		.loc 1 936 0
 1577 0024 70BD     		pop	{r4, r5, r6, pc}
 1578              	.LVL113:
 1579              	.L110:
 929:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 1580              		.loc 1 929 0
 1581 0026 2368     		ldr	r3, [r4]
 1582 0028 DA68     		ldr	r2, [r3, #12]
 1583 002a 12F4004F 		tst	r2, #32768
 1584 002e EED0     		beq	.L113
 937:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       }
 938:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 939:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
 940:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 941:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear the Tamper Flag */
 942:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP3F);
 1585              		.loc 1 942 0
 1586 0030 DA68     		ldr	r2, [r3, #12]
 1587 0032 D2B2     		uxtb	r2, r2
 1588 0034 42F07F42 		orr	r2, r2, #-16777216
 1589 0038 42F47F02 		orr	r2, r2, #16711680
 1590 003c 42F4FE42 		orr	r2, r2, #32512
 1591 0040 42F07F02 		orr	r2, r2, #127
 1592 0044 DA60     		str	r2, [r3, #12]
 943:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 944:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
 945:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;
 1593              		.loc 1 945 0
 1594 0046 0123     		movs	r3, #1
 1595 0048 6377     		strb	r3, [r4, #29]
 946:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 947:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 1596              		.loc 1 947 0
 1597 004a 0020     		movs	r0, #0
 948:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 1598              		.loc 1 948 0
 1599 004c 70BD     		pop	{r4, r5, r6, pc}
 1600              		.cfi_endproc
 1601              	.LFE153:
ARM GAS  /tmp/ccMphqsi.s 			page 46


 1603 004e 00BF     		.section	.text.HAL_RTCEx_SetWakeUpTimer,"ax",%progbits
 1604              		.align	2
 1605              		.global	HAL_RTCEx_SetWakeUpTimer
 1606              		.thumb
 1607              		.thumb_func
 1609              	HAL_RTCEx_SetWakeUpTimer:
 1610              	.LFB154:
 949:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 950:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 951:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @}
 952:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 953:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 954:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /** @defgroup RTCEx_Group2 RTC Wake-up functions
 955:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  *  @brief   RTC Wake-up functions
 956:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  *
 957:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** @verbatim   
 958:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  ===============================================================================
 959:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                         ##### RTC Wake-up functions #####
 960:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  ===============================================================================  
 961:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  
 962:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  [..] This section provides functions allowing to configure Wake-up feature
 963:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 964:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** @endverbatim
 965:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @{
 966:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 967:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 968:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
 969:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Sets wake up timer. 
 970:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 971:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
 972:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  WakeUpCounter Wake up counter
 973:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  WakeUpClock Wake up clock  
 974:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
 975:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
 976:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_
 977:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 1611              		.loc 1 977 0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 0
 1614              		@ frame_needed = 0, uses_anonymous_args = 0
 1615              	.LVL114:
 1616 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1617              	.LCFI28:
 1618              		.cfi_def_cfa_offset 24
 1619              		.cfi_offset 3, -24
 1620              		.cfi_offset 4, -20
 1621              		.cfi_offset 5, -16
 1622              		.cfi_offset 6, -12
 1623              		.cfi_offset 7, -8
 1624              		.cfi_offset 14, -4
 1625              	.LVL115:
 978:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tickstart = 0;
 979:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 980:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
 981:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 982:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 983:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  
ARM GAS  /tmp/ccMphqsi.s 			page 47


 984:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
 985:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 1626              		.loc 1 985 0
 1627 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1628 0004 012B     		cmp	r3, #1
 1629 0006 45D0     		beq	.L120
 1630 0008 1546     		mov	r5, r2
 1631 000a 0F46     		mov	r7, r1
 1632 000c 0446     		mov	r4, r0
 1633              		.loc 1 985 0 is_stmt 0 discriminator 2
 1634 000e 0123     		movs	r3, #1
 1635 0010 0377     		strb	r3, [r0, #28]
 986:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
 987:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1636              		.loc 1 987 0 is_stmt 1 discriminator 2
 1637 0012 0223     		movs	r3, #2
 1638 0014 4377     		strb	r3, [r0, #29]
 988:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 989:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 990:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1639              		.loc 1 990 0 discriminator 2
 1640 0016 0368     		ldr	r3, [r0]
 1641 0018 CA22     		movs	r2, #202
 1642              	.LVL116:
 1643 001a 5A62     		str	r2, [r3, #36]
 1644 001c 0368     		ldr	r3, [r0]
 1645 001e 5322     		movs	r2, #83
 1646 0020 5A62     		str	r2, [r3, #36]
 991:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 992:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 1647              		.loc 1 992 0 discriminator 2
 1648 0022 0268     		ldr	r2, [r0]
 1649 0024 9368     		ldr	r3, [r2, #8]
 1650 0026 23F48063 		bic	r3, r3, #1024
 1651 002a 9360     		str	r3, [r2, #8]
 993:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 994:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get tick */
 995:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tickstart = HAL_GetTick();
 1652              		.loc 1 995 0 discriminator 2
 1653 002c FFF7FEFF 		bl	HAL_GetTick
 1654              	.LVL117:
 1655 0030 0646     		mov	r6, r0
 1656              	.LVL118:
 996:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
 997:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
 998:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 1657              		.loc 1 998 0 discriminator 2
 1658 0032 2368     		ldr	r3, [r4]
 1659 0034 9B68     		ldr	r3, [r3, #8]
 1660 0036 13F4806F 		tst	r3, #1024
 1661 003a 0ED1     		bne	.L117
 1662 003c 12E0     		b	.L118
 1663              	.LVL119:
 1664              	.L119:
 999:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1000:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1001:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
ARM GAS  /tmp/ccMphqsi.s 			page 48


1002:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
1003:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 1665              		.loc 1 1003 0
 1666 003e FFF7FEFF 		bl	HAL_GetTick
 1667              	.LVL120:
 1668 0042 801B     		subs	r0, r0, r6
 1669 0044 B0F57A7F 		cmp	r0, #1000
 1670 0048 07D9     		bls	.L117
1004:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       {
1005:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         /* Enable the write protection for RTC registers */
1006:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1671              		.loc 1 1006 0
 1672 004a 2368     		ldr	r3, [r4]
 1673 004c FF22     		movs	r2, #255
 1674 004e 5A62     		str	r2, [r3, #36]
1007:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1008:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1675              		.loc 1 1008 0
 1676 0050 0320     		movs	r0, #3
 1677 0052 6077     		strb	r0, [r4, #29]
1009:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1010:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         /* Process Unlocked */ 
1011:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         __HAL_UNLOCK(hrtc);
 1678              		.loc 1 1011 0
 1679 0054 0023     		movs	r3, #0
 1680 0056 2377     		strb	r3, [r4, #28]
1012:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1013:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 1681              		.loc 1 1013 0
 1682 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1683              	.LVL121:
 1684              	.L117:
1001:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 1685              		.loc 1 1001 0
 1686 005a 2368     		ldr	r3, [r4]
 1687 005c DB68     		ldr	r3, [r3, #12]
 1688 005e 13F0040F 		tst	r3, #4
 1689 0062 ECD0     		beq	.L119
 1690              	.L118:
1014:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       }  
1015:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
1016:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
1017:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1018:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1019:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 1691              		.loc 1 1019 0
 1692 0064 2268     		ldr	r2, [r4]
 1693 0066 9368     		ldr	r3, [r2, #8]
 1694 0068 23F00703 		bic	r3, r3, #7
 1695 006c 9360     		str	r3, [r2, #8]
1020:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1021:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the clock source */
1022:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 1696              		.loc 1 1022 0
 1697 006e 2368     		ldr	r3, [r4]
 1698 0070 9A68     		ldr	r2, [r3, #8]
 1699 0072 1543     		orrs	r5, r5, r2
ARM GAS  /tmp/ccMphqsi.s 			page 49


 1700              	.LVL122:
 1701 0074 9D60     		str	r5, [r3, #8]
1023:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1024:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the Wakeup Timer counter */
1025:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 1702              		.loc 1 1025 0
 1703 0076 2368     		ldr	r3, [r4]
 1704 0078 5F61     		str	r7, [r3, #20]
1026:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1027:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****    /* Enable the Wakeup Timer */
1028:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);   
 1705              		.loc 1 1028 0
 1706 007a 2268     		ldr	r2, [r4]
 1707 007c 9368     		ldr	r3, [r2, #8]
 1708 007e 43F48063 		orr	r3, r3, #1024
 1709 0082 9360     		str	r3, [r2, #8]
1029:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1030:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1031:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 1710              		.loc 1 1031 0
 1711 0084 2368     		ldr	r3, [r4]
 1712 0086 FF22     		movs	r2, #255
 1713 0088 5A62     		str	r2, [r3, #36]
1032:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1033:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;   
 1714              		.loc 1 1033 0
 1715 008a 0123     		movs	r3, #1
 1716 008c 6377     		strb	r3, [r4, #29]
1034:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1035:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1036:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 1717              		.loc 1 1036 0
 1718 008e 0020     		movs	r0, #0
 1719 0090 2077     		strb	r0, [r4, #28]
1037:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1038:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 1720              		.loc 1 1038 0
 1721 0092 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1722              	.LVL123:
 1723              	.L120:
 985:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
 1724              		.loc 1 985 0
 1725 0094 0220     		movs	r0, #2
 1726              	.LVL124:
1039:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 1727              		.loc 1 1039 0
 1728 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1729              		.cfi_endproc
 1730              	.LFE154:
 1732              		.section	.text.HAL_RTCEx_SetWakeUpTimer_IT,"ax",%progbits
 1733              		.align	2
 1734              		.global	HAL_RTCEx_SetWakeUpTimer_IT
 1735              		.thumb
 1736              		.thumb_func
 1738              	HAL_RTCEx_SetWakeUpTimer_IT:
 1739              	.LFB155:
1040:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
ARM GAS  /tmp/ccMphqsi.s 			page 50


1041:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1042:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Sets wake up timer with interrupt
1043:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1044:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
1045:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  WakeUpCounter Wake up counter
1046:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  WakeUpClock Wake up clock  
1047:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
1048:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1049:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint
1050:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 1740              		.loc 1 1050 0
 1741              		.cfi_startproc
 1742              		@ args = 0, pretend = 0, frame = 8
 1743              		@ frame_needed = 0, uses_anonymous_args = 0
 1744              		@ link register save eliminated.
 1745              	.LVL125:
1051:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __IO uint32_t count;
1052:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1053:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
1054:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
1055:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
1056:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1057:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
1058:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 1746              		.loc 1 1058 0
 1747 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1748 0002 012B     		cmp	r3, #1
 1749 0004 7DD0     		beq	.L129
1050:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __IO uint32_t count;
 1750              		.loc 1 1050 0 discriminator 2
 1751 0006 30B4     		push	{r4, r5}
 1752              	.LCFI29:
 1753              		.cfi_def_cfa_offset 8
 1754              		.cfi_offset 4, -8
 1755              		.cfi_offset 5, -4
 1756 0008 82B0     		sub	sp, sp, #8
 1757              	.LCFI30:
 1758              		.cfi_def_cfa_offset 16
 1759              		.loc 1 1058 0 discriminator 2
 1760 000a 0123     		movs	r3, #1
 1761 000c 0377     		strb	r3, [r0, #28]
1059:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1060:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1762              		.loc 1 1060 0 discriminator 2
 1763 000e 0223     		movs	r3, #2
 1764 0010 4377     		strb	r3, [r0, #29]
1061:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1062:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1063:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1765              		.loc 1 1063 0 discriminator 2
 1766 0012 0368     		ldr	r3, [r0]
 1767 0014 CA24     		movs	r4, #202
 1768 0016 5C62     		str	r4, [r3, #36]
 1769 0018 0368     		ldr	r3, [r0]
 1770 001a 5324     		movs	r4, #83
 1771 001c 5C62     		str	r4, [r3, #36]
1064:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
ARM GAS  /tmp/ccMphqsi.s 			page 51


1065:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 1772              		.loc 1 1065 0 discriminator 2
 1773 001e 0468     		ldr	r4, [r0]
 1774 0020 A368     		ldr	r3, [r4, #8]
 1775 0022 23F48063 		bic	r3, r3, #1024
 1776 0026 A360     		str	r3, [r4, #8]
1066:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1067:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check RTC WUTWF flag is reset only when wake up timer enabled */
1068:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 1777              		.loc 1 1068 0 discriminator 2
 1778 0028 0568     		ldr	r5, [r0]
 1779 002a AB68     		ldr	r3, [r5, #8]
 1780 002c 13F4806F 		tst	r3, #1024
 1781 0030 1AD0     		beq	.L124
1069:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1070:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
1071:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 1782              		.loc 1 1071 0
 1783 0032 364B     		ldr	r3, .L132
 1784 0034 1B68     		ldr	r3, [r3]
 1785 0036 364C     		ldr	r4, .L132+4
 1786 0038 A4FB0343 		umull	r4, r3, r4, r3
 1787 003c DB0A     		lsrs	r3, r3, #11
 1788 003e 4FF47A74 		mov	r4, #1000
 1789 0042 04FB03F3 		mul	r3, r4, r3
 1790 0046 0193     		str	r3, [sp, #4]
 1791              	.L126:
1072:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     do
1073:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
1074:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       if(count-- == 0U)
 1792              		.loc 1 1074 0
 1793 0048 019B     		ldr	r3, [sp, #4]
 1794 004a 5C1E     		subs	r4, r3, #1
 1795 004c 0194     		str	r4, [sp, #4]
 1796 004e 3BB9     		cbnz	r3, .L125
1075:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       {
1076:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         /* Enable the write protection for RTC registers */
1077:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1797              		.loc 1 1077 0
 1798 0050 FF23     		movs	r3, #255
 1799 0052 6B62     		str	r3, [r5, #36]
1078:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1079:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1800              		.loc 1 1079 0
 1801 0054 0323     		movs	r3, #3
 1802 0056 4377     		strb	r3, [r0, #29]
1080:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1081:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         /* Process Unlocked */
1082:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         __HAL_UNLOCK(hrtc);
 1803              		.loc 1 1082 0
 1804 0058 0022     		movs	r2, #0
 1805              	.LVL126:
 1806 005a 0277     		strb	r2, [r0, #28]
1083:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1084:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 1807              		.loc 1 1084 0
 1808 005c 1846     		mov	r0, r3
ARM GAS  /tmp/ccMphqsi.s 			page 52


 1809              	.LVL127:
 1810 005e 52E0     		b	.L123
 1811              	.LVL128:
 1812              	.L125:
1085:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       }
1086:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
1087:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 1813              		.loc 1 1087 0
 1814 0060 EB68     		ldr	r3, [r5, #12]
 1815 0062 13F0040F 		tst	r3, #4
 1816 0066 EFD1     		bne	.L126
 1817              	.L124:
1088:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
1089:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1090:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 1818              		.loc 1 1090 0
 1819 0068 AB68     		ldr	r3, [r5, #8]
 1820 006a 23F48063 		bic	r3, r3, #1024
 1821 006e AB60     		str	r3, [r5, #8]
1091:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1092:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1093:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 1822              		.loc 1 1093 0
 1823 0070 264B     		ldr	r3, .L132
 1824 0072 1B68     		ldr	r3, [r3]
 1825 0074 264C     		ldr	r4, .L132+4
 1826 0076 A4FB0343 		umull	r4, r3, r4, r3
 1827 007a DB0A     		lsrs	r3, r3, #11
 1828 007c 4FF47A74 		mov	r4, #1000
 1829 0080 04FB03F3 		mul	r3, r4, r3
 1830 0084 0193     		str	r3, [sp, #4]
 1831              	.L128:
1094:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   do
1095:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1096:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if(count-- == 0U)
 1832              		.loc 1 1096 0
 1833 0086 019B     		ldr	r3, [sp, #4]
 1834 0088 5C1E     		subs	r4, r3, #1
 1835 008a 0194     		str	r4, [sp, #4]
 1836 008c 43B9     		cbnz	r3, .L127
1097:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
1098:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Enable the write protection for RTC registers */
1099:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1837              		.loc 1 1099 0
 1838 008e 0368     		ldr	r3, [r0]
 1839 0090 FF22     		movs	r2, #255
 1840              	.LVL129:
 1841 0092 5A62     		str	r2, [r3, #36]
1100:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1101:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1842              		.loc 1 1101 0
 1843 0094 0323     		movs	r3, #3
 1844 0096 4377     		strb	r3, [r0, #29]
1102:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1103:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Process Unlocked */
1104:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       __HAL_UNLOCK(hrtc);
 1845              		.loc 1 1104 0
ARM GAS  /tmp/ccMphqsi.s 			page 53


 1846 0098 0022     		movs	r2, #0
 1847 009a 0277     		strb	r2, [r0, #28]
1105:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1106:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       return HAL_TIMEOUT;
 1848              		.loc 1 1106 0
 1849 009c 1846     		mov	r0, r3
 1850              	.LVL130:
 1851 009e 32E0     		b	.L123
 1852              	.LVL131:
 1853              	.L127:
1107:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
1108:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
1109:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 1854              		.loc 1 1109 0
 1855 00a0 0368     		ldr	r3, [r0]
 1856 00a2 DC68     		ldr	r4, [r3, #12]
 1857 00a4 14F0040F 		tst	r4, #4
 1858 00a8 EDD0     		beq	.L128
1110:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         
1111:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the Wake-up Timer counter */
1112:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 1859              		.loc 1 1112 0
 1860 00aa 5961     		str	r1, [r3, #20]
1113:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1114:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1115:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 1861              		.loc 1 1115 0
 1862 00ac 0168     		ldr	r1, [r0]
 1863              	.LVL132:
 1864 00ae 8B68     		ldr	r3, [r1, #8]
 1865              	.LVL133:
 1866 00b0 23F00703 		bic	r3, r3, #7
 1867 00b4 8B60     		str	r3, [r1, #8]
1116:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1117:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the clock source */
1118:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 1868              		.loc 1 1118 0
 1869 00b6 0368     		ldr	r3, [r0]
 1870 00b8 9968     		ldr	r1, [r3, #8]
 1871 00ba 0A43     		orrs	r2, r2, r1
 1872              	.LVL134:
 1873 00bc 9A60     		str	r2, [r3, #8]
1119:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1120:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
1121:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 1874              		.loc 1 1121 0
 1875 00be 154B     		ldr	r3, .L132+8
 1876 00c0 1A68     		ldr	r2, [r3]
 1877 00c2 42F48002 		orr	r2, r2, #4194304
 1878 00c6 1A60     		str	r2, [r3]
1122:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1123:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 1879              		.loc 1 1123 0
 1880 00c8 9A68     		ldr	r2, [r3, #8]
 1881 00ca 42F48002 		orr	r2, r2, #4194304
 1882 00ce 9A60     		str	r2, [r3, #8]
1124:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
ARM GAS  /tmp/ccMphqsi.s 			page 54


1125:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear RTC Wake Up timer Flag */
1126:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 1883              		.loc 1 1126 0
 1884 00d0 0268     		ldr	r2, [r0]
 1885 00d2 D368     		ldr	r3, [r2, #12]
 1886 00d4 DBB2     		uxtb	r3, r3
 1887 00d6 63F49063 		orn	r3, r3, #1152
 1888 00da D360     		str	r3, [r2, #12]
1127:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1128:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the Interrupt in the RTC_CR register */
1129:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 1889              		.loc 1 1129 0
 1890 00dc 0268     		ldr	r2, [r0]
 1891 00de 9368     		ldr	r3, [r2, #8]
 1892 00e0 43F48043 		orr	r3, r3, #16384
 1893 00e4 9360     		str	r3, [r2, #8]
1130:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1131:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the Wakeup Timer */
1132:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 1894              		.loc 1 1132 0
 1895 00e6 0268     		ldr	r2, [r0]
 1896 00e8 9368     		ldr	r3, [r2, #8]
 1897 00ea 43F48063 		orr	r3, r3, #1024
 1898 00ee 9360     		str	r3, [r2, #8]
1133:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
1134:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1135:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 1899              		.loc 1 1135 0
 1900 00f0 0368     		ldr	r3, [r0]
 1901 00f2 FF22     		movs	r2, #255
 1902 00f4 5A62     		str	r2, [r3, #36]
1136:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1137:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;   
 1903              		.loc 1 1137 0
 1904 00f6 0123     		movs	r3, #1
 1905 00f8 4377     		strb	r3, [r0, #29]
1138:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1139:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1140:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 1906              		.loc 1 1140 0
 1907 00fa 0023     		movs	r3, #0
 1908 00fc 0377     		strb	r3, [r0, #28]
1141:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  
1142:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 1909              		.loc 1 1142 0
 1910 00fe 1846     		mov	r0, r3
 1911              	.LVL135:
 1912 0100 01E0     		b	.L123
 1913              	.LVL136:
 1914              	.L129:
 1915              	.LCFI31:
 1916              		.cfi_def_cfa_offset 0
 1917              		.cfi_restore 4
 1918              		.cfi_restore 5
1058:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 1919              		.loc 1 1058 0
 1920 0102 0220     		movs	r0, #2
ARM GAS  /tmp/ccMphqsi.s 			page 55


 1921              	.LVL137:
 1922 0104 7047     		bx	lr
 1923              	.LVL138:
 1924              	.L123:
 1925              	.LCFI32:
 1926              		.cfi_def_cfa_offset 16
 1927              		.cfi_offset 4, -8
 1928              		.cfi_offset 5, -4
1143:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 1929              		.loc 1 1143 0
 1930 0106 02B0     		add	sp, sp, #8
 1931              	.LCFI33:
 1932              		.cfi_def_cfa_offset 8
 1933              		@ sp needed
 1934 0108 30BC     		pop	{r4, r5}
 1935              	.LCFI34:
 1936              		.cfi_restore 5
 1937              		.cfi_restore 4
 1938              		.cfi_def_cfa_offset 0
 1939 010a 7047     		bx	lr
 1940              	.L133:
 1941              		.align	2
 1942              	.L132:
 1943 010c 00000000 		.word	SystemCoreClock
 1944 0110 D34D6210 		.word	274877907
 1945 0114 003C0140 		.word	1073822720
 1946              		.cfi_endproc
 1947              	.LFE155:
 1949              		.section	.text.HAL_RTCEx_DeactivateWakeUpTimer,"ax",%progbits
 1950              		.align	2
 1951              		.global	HAL_RTCEx_DeactivateWakeUpTimer
 1952              		.thumb
 1953              		.thumb_func
 1955              	HAL_RTCEx_DeactivateWakeUpTimer:
 1956              	.LFB156:
1144:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1145:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1146:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Deactivates wake up timer counter.
1147:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1148:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC. 
1149:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
1150:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1151:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
1152:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 1957              		.loc 1 1152 0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 0
 1960              		@ frame_needed = 0, uses_anonymous_args = 0
 1961              	.LVL139:
 1962 0000 38B5     		push	{r3, r4, r5, lr}
 1963              	.LCFI35:
 1964              		.cfi_def_cfa_offset 16
 1965              		.cfi_offset 3, -16
 1966              		.cfi_offset 4, -12
 1967              		.cfi_offset 5, -8
 1968              		.cfi_offset 14, -4
 1969              	.LVL140:
ARM GAS  /tmp/ccMphqsi.s 			page 56


1153:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tickstart = 0U;
1154:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1155:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
1156:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 1970              		.loc 1 1156 0
 1971 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1972 0004 012B     		cmp	r3, #1
 1973 0006 32D0     		beq	.L138
 1974 0008 0446     		mov	r4, r0
 1975              		.loc 1 1156 0 is_stmt 0 discriminator 2
 1976 000a 0123     		movs	r3, #1
 1977 000c 0377     		strb	r3, [r0, #28]
1157:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1158:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1978              		.loc 1 1158 0 is_stmt 1 discriminator 2
 1979 000e 0223     		movs	r3, #2
 1980 0010 4377     		strb	r3, [r0, #29]
1159:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1160:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1161:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1981              		.loc 1 1161 0 discriminator 2
 1982 0012 0368     		ldr	r3, [r0]
 1983 0014 CA22     		movs	r2, #202
 1984 0016 5A62     		str	r2, [r3, #36]
 1985 0018 0368     		ldr	r3, [r0]
 1986 001a 5322     		movs	r2, #83
 1987 001c 5A62     		str	r2, [r3, #36]
1162:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1163:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the Wakeup Timer */
1164:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 1988              		.loc 1 1164 0 discriminator 2
 1989 001e 0268     		ldr	r2, [r0]
 1990 0020 9368     		ldr	r3, [r2, #8]
 1991 0022 23F48063 		bic	r3, r3, #1024
 1992 0026 9360     		str	r3, [r2, #8]
1165:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1166:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* In case of interrupt mode is used, the interrupt source must disabled */ 
1167:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 1993              		.loc 1 1167 0 discriminator 2
 1994 0028 0268     		ldr	r2, [r0]
 1995 002a 9368     		ldr	r3, [r2, #8]
 1996 002c 23F48043 		bic	r3, r3, #16384
 1997 0030 9360     		str	r3, [r2, #8]
1168:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1169:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get tick */
1170:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tickstart = HAL_GetTick();
 1998              		.loc 1 1170 0 discriminator 2
 1999 0032 FFF7FEFF 		bl	HAL_GetTick
 2000              	.LVL141:
 2001 0036 0546     		mov	r5, r0
 2002              	.LVL142:
1171:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1172:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1173:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 2003              		.loc 1 1173 0 discriminator 2
 2004 0038 0DE0     		b	.L136
 2005              	.LVL143:
ARM GAS  /tmp/ccMphqsi.s 			page 57


 2006              	.L137:
1174:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1175:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2007              		.loc 1 1175 0
 2008 003a FFF7FEFF 		bl	HAL_GetTick
 2009              	.LVL144:
 2010 003e 401B     		subs	r0, r0, r5
 2011 0040 B0F57A7F 		cmp	r0, #1000
 2012 0044 07D9     		bls	.L136
1176:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
1177:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Enable the write protection for RTC registers */
1178:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2013              		.loc 1 1178 0
 2014 0046 2368     		ldr	r3, [r4]
 2015 0048 FF22     		movs	r2, #255
 2016 004a 5A62     		str	r2, [r3, #36]
1179:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1180:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2017              		.loc 1 1180 0
 2018 004c 0320     		movs	r0, #3
 2019 004e 6077     		strb	r0, [r4, #29]
1181:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1182:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Process Unlocked */ 
1183:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       __HAL_UNLOCK(hrtc);
 2020              		.loc 1 1183 0
 2021 0050 0023     		movs	r3, #0
 2022 0052 2377     		strb	r3, [r4, #28]
1184:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1185:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       return HAL_TIMEOUT;
 2023              		.loc 1 1185 0
 2024 0054 38BD     		pop	{r3, r4, r5, pc}
 2025              	.LVL145:
 2026              	.L136:
1173:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 2027              		.loc 1 1173 0
 2028 0056 2368     		ldr	r3, [r4]
 2029 0058 DA68     		ldr	r2, [r3, #12]
 2030 005a 12F0040F 		tst	r2, #4
 2031 005e ECD0     		beq	.L137
1186:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }   
1187:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
1188:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1189:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1190:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2032              		.loc 1 1190 0
 2033 0060 FF22     		movs	r2, #255
 2034 0062 5A62     		str	r2, [r3, #36]
1191:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1192:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;   
 2035              		.loc 1 1192 0
 2036 0064 0123     		movs	r3, #1
 2037 0066 6377     		strb	r3, [r4, #29]
1193:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1194:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1195:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2038              		.loc 1 1195 0
 2039 0068 0020     		movs	r0, #0
ARM GAS  /tmp/ccMphqsi.s 			page 58


 2040 006a 2077     		strb	r0, [r4, #28]
1196:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1197:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 2041              		.loc 1 1197 0
 2042 006c 38BD     		pop	{r3, r4, r5, pc}
 2043              	.LVL146:
 2044              	.L138:
1156:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 2045              		.loc 1 1156 0
 2046 006e 0220     		movs	r0, #2
 2047              	.LVL147:
1198:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2048              		.loc 1 1198 0
 2049 0070 38BD     		pop	{r3, r4, r5, pc}
 2050              		.cfi_endproc
 2051              	.LFE156:
 2053 0072 00BF     		.section	.text.HAL_RTCEx_GetWakeUpTimer,"ax",%progbits
 2054              		.align	2
 2055              		.global	HAL_RTCEx_GetWakeUpTimer
 2056              		.thumb
 2057              		.thumb_func
 2059              	HAL_RTCEx_GetWakeUpTimer:
 2060              	.LFB157:
1199:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1200:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1201:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Gets wake up timer counter.
1202:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1203:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC. 
1204:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval Counter value
1205:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1206:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** uint32_t HAL_RTCEx_GetWakeUpTimer(RTC_HandleTypeDef *hrtc)
1207:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 2061              		.loc 1 1207 0
 2062              		.cfi_startproc
 2063              		@ args = 0, pretend = 0, frame = 0
 2064              		@ frame_needed = 0, uses_anonymous_args = 0
 2065              		@ link register save eliminated.
 2066              	.LVL148:
1208:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get the counter value */
1209:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return ((uint32_t)(hrtc->Instance->WUTR & RTC_WUTR_WUT)); 
 2067              		.loc 1 1209 0
 2068 0000 0368     		ldr	r3, [r0]
 2069 0002 5869     		ldr	r0, [r3, #20]
 2070              	.LVL149:
1210:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2071              		.loc 1 1210 0
 2072 0004 80B2     		uxth	r0, r0
 2073 0006 7047     		bx	lr
 2074              		.cfi_endproc
 2075              	.LFE157:
 2077              		.section	.text.HAL_RTCEx_WakeUpTimerEventCallback,"ax",%progbits
 2078              		.align	2
 2079              		.weak	HAL_RTCEx_WakeUpTimerEventCallback
 2080              		.thumb
 2081              		.thumb_func
 2083              	HAL_RTCEx_WakeUpTimerEventCallback:
 2084              	.LFB159:
ARM GAS  /tmp/ccMphqsi.s 			page 59


1211:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1212:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1213:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  This function handles Wake Up Timer interrupt request.
1214:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1215:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
1216:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval None
1217:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1218:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
1219:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {  
1220:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(__HAL_RTC_WAKEUPTIMER_GET_IT(hrtc, RTC_IT_WUT))
1221:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1222:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Get the status of the Interrupt */
1223:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_WUT) != (uint32_t)RESET)
1224:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
1225:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* WAKEUPTIMER callback */ 
1226:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
1227:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1228:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Clear the WAKEUPTIMER interrupt pending bit */
1229:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
1230:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
1231:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
1232:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1233:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear the EXTI's line Flag for RTC WakeUpTimer */
1234:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
1235:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1236:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
1237:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;
1238:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
1239:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1240:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1241:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Wake Up Timer callback.
1242:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1243:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
1244:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval None
1245:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1246:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** __weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
1247:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 2085              		.loc 1 1247 0
 2086              		.cfi_startproc
 2087              		@ args = 0, pretend = 0, frame = 0
 2088              		@ frame_needed = 0, uses_anonymous_args = 0
 2089              		@ link register save eliminated.
 2090              	.LVL150:
 2091 0000 7047     		bx	lr
 2092              		.cfi_endproc
 2093              	.LFE159:
 2095 0002 00BF     		.section	.text.HAL_RTCEx_WakeUpTimerIRQHandler,"ax",%progbits
 2096              		.align	2
 2097              		.global	HAL_RTCEx_WakeUpTimerIRQHandler
 2098              		.thumb
 2099              		.thumb_func
 2101              	HAL_RTCEx_WakeUpTimerIRQHandler:
 2102              	.LFB158:
1219:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(__HAL_RTC_WAKEUPTIMER_GET_IT(hrtc, RTC_IT_WUT))
 2103              		.loc 1 1219 0
 2104              		.cfi_startproc
 2105              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccMphqsi.s 			page 60


 2106              		@ frame_needed = 0, uses_anonymous_args = 0
 2107              	.LVL151:
1219:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(__HAL_RTC_WAKEUPTIMER_GET_IT(hrtc, RTC_IT_WUT))
 2108              		.loc 1 1219 0
 2109 0000 10B5     		push	{r4, lr}
 2110              	.LCFI36:
 2111              		.cfi_def_cfa_offset 8
 2112              		.cfi_offset 4, -8
 2113              		.cfi_offset 14, -4
 2114 0002 0446     		mov	r4, r0
1220:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 2115              		.loc 1 1220 0
 2116 0004 0368     		ldr	r3, [r0]
 2117 0006 DA68     		ldr	r2, [r3, #12]
 2118 0008 12F4806F 		tst	r2, #1024
 2119 000c 0BD0     		beq	.L143
1223:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 2120              		.loc 1 1223 0
 2121 000e 9B68     		ldr	r3, [r3, #8]
 2122 0010 13F4804F 		tst	r3, #16384
 2123 0014 07D0     		beq	.L143
1226:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
 2124              		.loc 1 1226 0
 2125 0016 FFF7FEFF 		bl	HAL_RTCEx_WakeUpTimerEventCallback
 2126              	.LVL152:
1229:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
 2127              		.loc 1 1229 0
 2128 001a 2268     		ldr	r2, [r4]
 2129 001c D368     		ldr	r3, [r2, #12]
 2130 001e DBB2     		uxtb	r3, r3
 2131 0020 63F49063 		orn	r3, r3, #1152
 2132 0024 D360     		str	r3, [r2, #12]
 2133              	.L143:
1234:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 2134              		.loc 1 1234 0
 2135 0026 4FF48002 		mov	r2, #4194304
 2136 002a 024B     		ldr	r3, .L145
 2137 002c 5A61     		str	r2, [r3, #20]
1237:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2138              		.loc 1 1237 0
 2139 002e 0123     		movs	r3, #1
 2140 0030 6377     		strb	r3, [r4, #29]
 2141 0032 10BD     		pop	{r4, pc}
 2142              	.LVL153:
 2143              	.L146:
 2144              		.align	2
 2145              	.L145:
 2146 0034 003C0140 		.word	1073822720
 2147              		.cfi_endproc
 2148              	.LFE158:
 2150              		.section	.text.HAL_RTCEx_PollForWakeUpTimerEvent,"ax",%progbits
 2151              		.align	2
 2152              		.global	HAL_RTCEx_PollForWakeUpTimerEvent
 2153              		.thumb
 2154              		.thumb_func
 2156              	HAL_RTCEx_PollForWakeUpTimerEvent:
 2157              	.LFB160:
ARM GAS  /tmp/ccMphqsi.s 			page 61


1248:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1249:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   UNUSED(hrtc);
1250:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1251:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1252:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
1253:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****    */
1254:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
1255:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1256:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1257:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  This function handles Wake Up Timer Polling.
1258:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1259:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
1260:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  Timeout Timeout duration
1261:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
1262:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1263:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_PollForWakeUpTimerEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1264:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {  
 2158              		.loc 1 1264 0
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 0
 2161              		@ frame_needed = 0, uses_anonymous_args = 0
 2162              	.LVL154:
 2163 0000 70B5     		push	{r4, r5, r6, lr}
 2164              	.LCFI37:
 2165              		.cfi_def_cfa_offset 16
 2166              		.cfi_offset 4, -16
 2167              		.cfi_offset 5, -12
 2168              		.cfi_offset 6, -8
 2169              		.cfi_offset 14, -4
 2170 0002 0446     		mov	r4, r0
 2171 0004 0D46     		mov	r5, r1
 2172              	.LVL155:
1265:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tickstart = 0; 
1266:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1267:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get tick */
1268:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tickstart = HAL_GetTick();
 2173              		.loc 1 1268 0
 2174 0006 FFF7FEFF 		bl	HAL_GetTick
 2175              	.LVL156:
 2176 000a 0646     		mov	r6, r0
 2177              	.LVL157:
1269:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1270:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) == RESET)
 2178              		.loc 1 1270 0
 2179 000c 0BE0     		b	.L149
 2180              	.LVL158:
 2181              	.L152:
1271:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1272:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 2182              		.loc 1 1272 0
 2183 000e B5F1FF3F 		cmp	r5, #-1
 2184 0012 08D0     		beq	.L149
1273:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
1274:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 2185              		.loc 1 1274 0
 2186 0014 25B1     		cbz	r5, .L150
 2187              		.loc 1 1274 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccMphqsi.s 			page 62


 2188 0016 FFF7FEFF 		bl	HAL_GetTick
 2189              	.LVL159:
 2190 001a 801B     		subs	r0, r0, r6
 2191 001c 8542     		cmp	r5, r0
 2192 001e 02D2     		bcs	.L149
 2193              	.L150:
1275:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       {
1276:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2194              		.loc 1 1276 0 is_stmt 1
 2195 0020 0320     		movs	r0, #3
 2196 0022 6077     		strb	r0, [r4, #29]
1277:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1278:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 2197              		.loc 1 1278 0
 2198 0024 70BD     		pop	{r4, r5, r6, pc}
 2199              	.LVL160:
 2200              	.L149:
1270:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 2201              		.loc 1 1270 0
 2202 0026 2368     		ldr	r3, [r4]
 2203 0028 DA68     		ldr	r2, [r3, #12]
 2204 002a 12F4806F 		tst	r2, #1024
 2205 002e EED0     		beq	.L152
1279:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       }
1280:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
1281:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
1282:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1283:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear the WAKEUPTIMER Flag */
1284:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 2206              		.loc 1 1284 0
 2207 0030 DA68     		ldr	r2, [r3, #12]
 2208 0032 D2B2     		uxtb	r2, r2
 2209 0034 62F49062 		orn	r2, r2, #1152
 2210 0038 DA60     		str	r2, [r3, #12]
1285:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1286:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
1287:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2211              		.loc 1 1287 0
 2212 003a 0123     		movs	r3, #1
 2213 003c 6377     		strb	r3, [r4, #29]
1288:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1289:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK; 
 2214              		.loc 1 1289 0
 2215 003e 0020     		movs	r0, #0
1290:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2216              		.loc 1 1290 0
 2217 0040 70BD     		pop	{r4, r5, r6, pc}
 2218              		.cfi_endproc
 2219              	.LFE160:
 2221 0042 00BF     		.section	.text.HAL_RTCEx_BKUPWrite,"ax",%progbits
 2222              		.align	2
 2223              		.global	HAL_RTCEx_BKUPWrite
 2224              		.thumb
 2225              		.thumb_func
 2227              	HAL_RTCEx_BKUPWrite:
 2228              	.LFB161:
1291:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
ARM GAS  /tmp/ccMphqsi.s 			page 63


1292:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1293:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @}
1294:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1295:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1296:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1297:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /** @defgroup RTCEx_Group3 Extension Peripheral Control functions 
1298:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  *  @brief   Extension Peripheral Control functions 
1299:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  *
1300:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** @verbatim   
1301:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  ===============================================================================
1302:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****               ##### Extension Peripheral Control functions #####
1303:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  ===============================================================================  
1304:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     [..]
1305:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     This subsection provides functions allowing to
1306:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Write a data in a specified RTC Backup data register
1307:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Read a data in a specified RTC Backup data register
1308:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Set the Coarse calibration parameters.
1309:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Deactivate the Coarse calibration parameters
1310:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Set the Smooth calibration parameters.
1311:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Configure the Synchronization Shift Control Settings.
1312:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1313:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Deactivate the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1314:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Enable the RTC reference clock detection.
1315:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Disable the RTC reference clock detection.
1316:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Enable the Bypass Shadow feature.
1317:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) Disable the Bypass Shadow feature.
1318:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1319:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** @endverbatim
1320:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @{
1321:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1322:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1323:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1324:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Writes a data in a specified RTC Backup data register.
1325:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1326:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC. 
1327:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  BackupRegister RTC Backup data Register number.
1328:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
1329:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                                 specify the register.
1330:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  Data Data to be written in the specified RTC Backup data register.                     
1331:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval None
1332:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1333:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
1334:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 2229              		.loc 1 1334 0
 2230              		.cfi_startproc
 2231              		@ args = 0, pretend = 0, frame = 0
 2232              		@ frame_needed = 0, uses_anonymous_args = 0
 2233              		@ link register save eliminated.
 2234              	.LVL161:
1335:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmp = 0;
1336:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1337:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
1338:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_BKP(BackupRegister));
1339:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1340:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 2235              		.loc 1 1340 0
 2236 0000 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccMphqsi.s 			page 64


 2237 0002 5033     		adds	r3, r3, #80
 2238              	.LVL162:
1341:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmp += (BackupRegister * 4);
1342:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1343:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Write the specified register */
1344:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 2239              		.loc 1 1344 0
 2240 0004 43F82120 		str	r2, [r3, r1, lsl #2]
 2241 0008 7047     		bx	lr
 2242              		.cfi_endproc
 2243              	.LFE161:
 2245              		.section	.text.HAL_RTCEx_BKUPRead,"ax",%progbits
 2246              		.align	2
 2247              		.global	HAL_RTCEx_BKUPRead
 2248              		.thumb
 2249              		.thumb_func
 2251              	HAL_RTCEx_BKUPRead:
 2252              	.LFB162:
1345:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
1346:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1347:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1348:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Reads data from the specified RTC Backup data Register.
1349:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1350:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC. 
1351:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  BackupRegister RTC Backup data Register number.
1352:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
1353:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                                 specify the register.                   
1354:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval Read value
1355:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1356:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
1357:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 2253              		.loc 1 1357 0
 2254              		.cfi_startproc
 2255              		@ args = 0, pretend = 0, frame = 0
 2256              		@ frame_needed = 0, uses_anonymous_args = 0
 2257              		@ link register save eliminated.
 2258              	.LVL163:
1358:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tmp = 0;
1359:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1360:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
1361:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_BKP(BackupRegister));
1362:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1363:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 2259              		.loc 1 1363 0
 2260 0000 0368     		ldr	r3, [r0]
 2261 0002 5033     		adds	r3, r3, #80
 2262              	.LVL164:
1364:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tmp += (BackupRegister * 4);
1365:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1366:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Read the specified register */
1367:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return (*(__IO uint32_t *)tmp);
 2263              		.loc 1 1367 0
 2264 0004 53F82100 		ldr	r0, [r3, r1, lsl #2]
 2265              	.LVL165:
1368:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2266              		.loc 1 1368 0
 2267 0008 7047     		bx	lr
ARM GAS  /tmp/ccMphqsi.s 			page 65


 2268              		.cfi_endproc
 2269              	.LFE162:
 2271 000a 00BF     		.section	.text.HAL_RTCEx_SetSmoothCalib,"ax",%progbits
 2272              		.align	2
 2273              		.global	HAL_RTCEx_SetSmoothCalib
 2274              		.thumb
 2275              		.thumb_func
 2277              	HAL_RTCEx_SetSmoothCalib:
 2278              	.LFB163:
1369:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1370:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1371:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Sets the Smooth calibration parameters.
1372:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1373:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.  
1374:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  SmoothCalibPeriod Select the Smooth Calibration Period.
1375:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be can be one of the following values :
1376:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_SMOOTHCALIB_PERIOD_32SEC: The smooth calibration period is 32s.
1377:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_SMOOTHCALIB_PERIOD_16SEC: The smooth calibration period is 16s.
1378:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_SMOOTHCALIB_PERIOD_8SEC: The smooth calibration period is 8s.
1379:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  SmoothCalibPlusPulses Select to Set or reset the CALP bit.
1380:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be one of the following values:
1381:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_SMOOTHCALIB_PLUSPULSES_SET: Add one RTCCLK pulses every 2*11 pulses.
1382:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_SMOOTHCALIB_PLUSPULSES_RESET: No RTCCLK pulses are added.
1383:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  SmouthCalibMinusPulsesValue Select the value of CALM[80] bits.
1384:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be one any value from 0 to 0x000001FF.
1385:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @note   To deactivate the smooth calibration, the field SmoothCalibPlusPulses 
1386:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field 
1387:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *         SmouthCalibMinusPulsesValue must be equal to 0.  
1388:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
1389:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1390:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uin
1391:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 2279              		.loc 1 1391 0
 2280              		.cfi_startproc
 2281              		@ args = 0, pretend = 0, frame = 0
 2282              		@ frame_needed = 0, uses_anonymous_args = 0
 2283              	.LVL166:
 2284 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2285              	.LCFI38:
 2286              		.cfi_def_cfa_offset 24
 2287              		.cfi_offset 4, -24
 2288              		.cfi_offset 5, -20
 2289              		.cfi_offset 6, -16
 2290              		.cfi_offset 7, -12
 2291              		.cfi_offset 8, -8
 2292              		.cfi_offset 14, -4
 2293              	.LVL167:
1392:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tickstart = 0;
1393:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1394:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
1395:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
1396:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
1397:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmouthCalibMinusPulsesValue));
1398:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1399:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
1400:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2294              		.loc 1 1400 0
ARM GAS  /tmp/ccMphqsi.s 			page 66


 2295 0004 047F     		ldrb	r4, [r0, #28]	@ zero_extendqisi2
 2296 0006 012C     		cmp	r4, #1
 2297 0008 38D0     		beq	.L161
 2298 000a 1D46     		mov	r5, r3
 2299 000c 1646     		mov	r6, r2
 2300 000e 0F46     		mov	r7, r1
 2301 0010 0446     		mov	r4, r0
 2302              		.loc 1 1400 0 is_stmt 0 discriminator 2
 2303 0012 0123     		movs	r3, #1
 2304              	.LVL168:
 2305 0014 0377     		strb	r3, [r0, #28]
1401:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1402:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2306              		.loc 1 1402 0 is_stmt 1 discriminator 2
 2307 0016 0223     		movs	r3, #2
 2308 0018 4377     		strb	r3, [r0, #29]
1403:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1404:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1405:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2309              		.loc 1 1405 0 discriminator 2
 2310 001a 0368     		ldr	r3, [r0]
 2311 001c CA22     		movs	r2, #202
 2312              	.LVL169:
 2313 001e 5A62     		str	r2, [r3, #36]
 2314 0020 0368     		ldr	r3, [r0]
 2315 0022 5322     		movs	r2, #83
 2316 0024 5A62     		str	r2, [r3, #36]
1406:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1407:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* check if a calibration is pending*/
1408:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 2317              		.loc 1 1408 0 discriminator 2
 2318 0026 0368     		ldr	r3, [r0]
 2319 0028 DB68     		ldr	r3, [r3, #12]
 2320 002a 13F4803F 		tst	r3, #65536
 2321 002e 18D0     		beq	.L158
1409:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1410:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get tick */
1411:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tickstart = HAL_GetTick();
 2322              		.loc 1 1411 0
 2323 0030 FFF7FEFF 		bl	HAL_GetTick
 2324              	.LVL170:
 2325 0034 8046     		mov	r8, r0
 2326              	.LVL171:
1412:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1413:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* check if a calibration is pending*/
1414:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 2327              		.loc 1 1414 0
 2328 0036 0FE0     		b	.L159
 2329              	.LVL172:
 2330              	.L160:
1415:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
1416:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2331              		.loc 1 1416 0
 2332 0038 FFF7FEFF 		bl	HAL_GetTick
 2333              	.LVL173:
 2334 003c C8EB0000 		rsb	r0, r8, r0
 2335 0040 B0F57A7F 		cmp	r0, #1000
ARM GAS  /tmp/ccMphqsi.s 			page 67


 2336 0044 08D9     		bls	.L159
1417:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       {
1418:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         /* Enable the write protection for RTC registers */
1419:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2337              		.loc 1 1419 0
 2338 0046 2368     		ldr	r3, [r4]
 2339 0048 FF22     		movs	r2, #255
 2340 004a 5A62     		str	r2, [r3, #36]
1420:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         
1421:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         /* Change RTC state */
1422:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2341              		.loc 1 1422 0
 2342 004c 0320     		movs	r0, #3
 2343 004e 6077     		strb	r0, [r4, #29]
1423:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         
1424:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         /* Process Unlocked */ 
1425:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         __HAL_UNLOCK(hrtc);
 2344              		.loc 1 1425 0
 2345 0050 0023     		movs	r3, #0
 2346 0052 2377     		strb	r3, [r4, #28]
1426:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         
1427:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 2347              		.loc 1 1427 0
 2348 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2349              	.LVL174:
 2350              	.L159:
1414:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 2351              		.loc 1 1414 0
 2352 0058 2068     		ldr	r0, [r4]
 2353 005a C068     		ldr	r0, [r0, #12]
 2354 005c 10F4803F 		tst	r0, #65536
 2355 0060 EAD1     		bne	.L160
 2356              	.LVL175:
 2357              	.L158:
1428:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       }
1429:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
1430:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
1431:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1432:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the Smooth calibration settings */
1433:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses |
 2358              		.loc 1 1433 0
 2359 0062 2368     		ldr	r3, [r4]
 2360 0064 3E43     		orrs	r6, r6, r7
 2361              	.LVL176:
 2362 0066 3543     		orrs	r5, r5, r6
 2363              	.LVL177:
 2364 0068 DD63     		str	r5, [r3, #60]
1434:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1435:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1436:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2365              		.loc 1 1436 0
 2366 006a 2368     		ldr	r3, [r4]
 2367 006c FF22     		movs	r2, #255
 2368 006e 5A62     		str	r2, [r3, #36]
1437:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1438:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
1439:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
ARM GAS  /tmp/ccMphqsi.s 			page 68


 2369              		.loc 1 1439 0
 2370 0070 0123     		movs	r3, #1
 2371 0072 6377     		strb	r3, [r4, #29]
1440:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1441:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1442:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2372              		.loc 1 1442 0
 2373 0074 0020     		movs	r0, #0
 2374 0076 2077     		strb	r0, [r4, #28]
1443:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1444:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 2375              		.loc 1 1444 0
 2376 0078 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2377              	.LVL178:
 2378              	.L161:
1400:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 2379              		.loc 1 1400 0
 2380 007c 0220     		movs	r0, #2
 2381              	.LVL179:
1445:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2382              		.loc 1 1445 0
 2383 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2384              		.cfi_endproc
 2385              	.LFE163:
 2387 0082 00BF     		.section	.text.HAL_RTCEx_SetSynchroShift,"ax",%progbits
 2388              		.align	2
 2389              		.global	HAL_RTCEx_SetSynchroShift
 2390              		.thumb
 2391              		.thumb_func
 2393              	HAL_RTCEx_SetSynchroShift:
 2394              	.LFB164:
1446:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1447:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1448:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Configures the Synchronization Shift Control Settings.
1449:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register. 
1450:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1451:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.    
1452:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  ShiftAdd1S Select to add or not 1 second to the time calendar.
1453:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be one of the following values :
1454:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_SHIFTADD1S_SET: Add one second to the clock calendar. 
1455:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_SHIFTADD1S_RESET: No effect.
1456:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  ShiftSubFS Select the number of Second Fractions to substitute.
1457:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be one any value from 0 to 0x7FFF.
1458:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
1459:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1460:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetSynchroShift(RTC_HandleTypeDef* hrtc, uint32_t ShiftAdd1S, uint32_t 
1461:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 2395              		.loc 1 1461 0
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 0
 2398              		@ frame_needed = 0, uses_anonymous_args = 0
 2399              	.LVL180:
 2400 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2401              	.LCFI39:
 2402              		.cfi_def_cfa_offset 24
 2403              		.cfi_offset 3, -24
 2404              		.cfi_offset 4, -20
ARM GAS  /tmp/ccMphqsi.s 			page 69


 2405              		.cfi_offset 5, -16
 2406              		.cfi_offset 6, -12
 2407              		.cfi_offset 7, -8
 2408              		.cfi_offset 14, -4
 2409              	.LVL181:
1462:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tickstart = 0;
1463:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1464:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
1465:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_SHIFT_ADD1S(ShiftAdd1S));
1466:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_SHIFT_SUBFS(ShiftSubFS));
1467:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1468:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
1469:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2410              		.loc 1 1469 0
 2411 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 2412 0004 012B     		cmp	r3, #1
 2413 0006 4CD0     		beq	.L169
 2414 0008 1646     		mov	r6, r2
 2415 000a 0F46     		mov	r7, r1
 2416 000c 0446     		mov	r4, r0
 2417              		.loc 1 1469 0 is_stmt 0 discriminator 2
 2418 000e 0123     		movs	r3, #1
 2419 0010 0377     		strb	r3, [r0, #28]
1470:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1471:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2420              		.loc 1 1471 0 is_stmt 1 discriminator 2
 2421 0012 0223     		movs	r3, #2
 2422 0014 4377     		strb	r3, [r0, #29]
1472:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1473:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1474:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2423              		.loc 1 1474 0 discriminator 2
 2424 0016 0368     		ldr	r3, [r0]
 2425 0018 CA22     		movs	r2, #202
 2426              	.LVL182:
 2427 001a 5A62     		str	r2, [r3, #36]
 2428 001c 0368     		ldr	r3, [r0]
 2429 001e 5322     		movs	r2, #83
 2430 0020 5A62     		str	r2, [r3, #36]
1475:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1476:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get tick */
1477:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tickstart = HAL_GetTick();
 2431              		.loc 1 1477 0 discriminator 2
 2432 0022 FFF7FEFF 		bl	HAL_GetTick
 2433              	.LVL183:
 2434 0026 0546     		mov	r5, r0
 2435              	.LVL184:
1478:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1479:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Wait until the shift is completed*/
1480:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     while((hrtc->Instance->ISR & RTC_ISR_SHPF) != RESET)
 2436              		.loc 1 1480 0 discriminator 2
 2437 0028 0DE0     		b	.L165
 2438              	.LVL185:
 2439              	.L166:
1481:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
1482:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2440              		.loc 1 1482 0
ARM GAS  /tmp/ccMphqsi.s 			page 70


 2441 002a FFF7FEFF 		bl	HAL_GetTick
 2442              	.LVL186:
 2443 002e 401B     		subs	r0, r0, r5
 2444 0030 B0F57A7F 		cmp	r0, #1000
 2445 0034 07D9     		bls	.L165
1483:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       {  
1484:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         /* Enable the write protection for RTC registers */
1485:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 2446              		.loc 1 1485 0
 2447 0036 2368     		ldr	r3, [r4]
 2448 0038 FF22     		movs	r2, #255
 2449 003a 5A62     		str	r2, [r3, #36]
1486:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         
1487:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2450              		.loc 1 1487 0
 2451 003c 0320     		movs	r0, #3
 2452 003e 6077     		strb	r0, [r4, #29]
1488:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         
1489:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         /* Process Unlocked */ 
1490:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         __HAL_UNLOCK(hrtc);
 2453              		.loc 1 1490 0
 2454 0040 0023     		movs	r3, #0
 2455 0042 2377     		strb	r3, [r4, #28]
1491:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         
1492:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 2456              		.loc 1 1492 0
 2457 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2458              	.LVL187:
 2459              	.L165:
1480:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
 2460              		.loc 1 1480 0
 2461 0046 2368     		ldr	r3, [r4]
 2462 0048 D868     		ldr	r0, [r3, #12]
 2463 004a 10F0080F 		tst	r0, #8
 2464 004e ECD1     		bne	.L166
1493:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       }
1494:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
1495:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1496:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Check if the reference clock detection is disabled */
1497:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if((hrtc->Instance->CR & RTC_CR_REFCKON) == RESET)
 2465              		.loc 1 1497 0
 2466 0050 9A68     		ldr	r2, [r3, #8]
 2467 0052 12F0100F 		tst	r2, #16
 2468 0056 14D1     		bne	.L167
1498:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
1499:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Configure the Shift settings */
1500:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       hrtc->Instance->SHIFTR = (uint32_t)(uint32_t)(ShiftSubFS) | (uint32_t)(ShiftAdd1S);
 2469              		.loc 1 1500 0
 2470 0058 46EA0701 		orr	r1, r6, r7
 2471 005c D962     		str	r1, [r3, #44]
1501:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1502:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1503:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 2472              		.loc 1 1503 0
 2473 005e 2368     		ldr	r3, [r4]
 2474 0060 9B68     		ldr	r3, [r3, #8]
 2475 0062 13F0200F 		tst	r3, #32
ARM GAS  /tmp/ccMphqsi.s 			page 71


 2476 0066 14D1     		bne	.L168
1504:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       {
1505:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 2477              		.loc 1 1505 0
 2478 0068 2046     		mov	r0, r4
 2479 006a FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 2480              	.LVL188:
 2481 006e 80B1     		cbz	r0, .L168
1506:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         {
1507:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****           /* Enable the write protection for RTC registers */
1508:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 2482              		.loc 1 1508 0
 2483 0070 2368     		ldr	r3, [r4]
 2484 0072 FF22     		movs	r2, #255
 2485 0074 5A62     		str	r2, [r3, #36]
1509:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****           
1510:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****           hrtc->State = HAL_RTC_STATE_ERROR;
 2486              		.loc 1 1510 0
 2487 0076 0423     		movs	r3, #4
 2488 0078 6377     		strb	r3, [r4, #29]
1511:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****           
1512:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****           /* Process Unlocked */ 
1513:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****           __HAL_UNLOCK(hrtc);
 2489              		.loc 1 1513 0
 2490 007a 0023     		movs	r3, #0
 2491 007c 2377     		strb	r3, [r4, #28]
1514:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****           
1515:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****           return HAL_ERROR;
 2492              		.loc 1 1515 0
 2493 007e 0120     		movs	r0, #1
 2494 0080 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2495              	.LVL189:
 2496              	.L167:
1516:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         }
1517:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       }
1518:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
1519:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     else
1520:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
1521:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Enable the write protection for RTC registers */
1522:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2497              		.loc 1 1522 0
 2498 0082 FF22     		movs	r2, #255
 2499 0084 5A62     		str	r2, [r3, #36]
1523:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1524:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Change RTC state */
1525:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       hrtc->State = HAL_RTC_STATE_ERROR; 
 2500              		.loc 1 1525 0
 2501 0086 0423     		movs	r3, #4
 2502 0088 6377     		strb	r3, [r4, #29]
1526:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1527:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       /* Process Unlocked */ 
1528:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       __HAL_UNLOCK(hrtc);
 2503              		.loc 1 1528 0
 2504 008a 0023     		movs	r3, #0
 2505 008c 2377     		strb	r3, [r4, #28]
1529:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       
1530:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       return HAL_ERROR;
ARM GAS  /tmp/ccMphqsi.s 			page 72


 2506              		.loc 1 1530 0
 2507 008e 0120     		movs	r0, #1
 2508 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2509              	.LVL190:
 2510              	.L168:
1531:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
1532:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1533:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1534:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2511              		.loc 1 1534 0
 2512 0092 2368     		ldr	r3, [r4]
 2513 0094 FF22     		movs	r2, #255
 2514 0096 5A62     		str	r2, [r3, #36]
1535:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1536:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
1537:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2515              		.loc 1 1537 0
 2516 0098 0123     		movs	r3, #1
 2517 009a 6377     		strb	r3, [r4, #29]
1538:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1539:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1540:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2518              		.loc 1 1540 0
 2519 009c 0020     		movs	r0, #0
 2520 009e 2077     		strb	r0, [r4, #28]
1541:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1542:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 2521              		.loc 1 1542 0
 2522 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2523              	.LVL191:
 2524              	.L169:
1469:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 2525              		.loc 1 1469 0
 2526 00a2 0220     		movs	r0, #2
 2527              	.LVL192:
1543:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2528              		.loc 1 1543 0
 2529 00a4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2530              		.cfi_endproc
 2531              	.LFE164:
 2533 00a6 00BF     		.section	.text.HAL_RTCEx_SetCalibrationOutPut,"ax",%progbits
 2534              		.align	2
 2535              		.global	HAL_RTCEx_SetCalibrationOutPut
 2536              		.thumb
 2537              		.thumb_func
 2539              	HAL_RTCEx_SetCalibrationOutPut:
 2540              	.LFB165:
1544:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1545:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1546:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Configures the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1547:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1548:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.    
1549:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  CalibOutput Select the Calibration output Selection .
1550:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *          This parameter can be one of the following values:
1551:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz. 
1552:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
1553:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
ARM GAS  /tmp/ccMphqsi.s 			page 73


1554:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1555:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
1556:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 2541              		.loc 1 1556 0
 2542              		.cfi_startproc
 2543              		@ args = 0, pretend = 0, frame = 0
 2544              		@ frame_needed = 0, uses_anonymous_args = 0
 2545              		@ link register save eliminated.
 2546              	.LVL193:
1557:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
1558:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));
1559:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1560:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
1561:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2547              		.loc 1 1561 0
 2548 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 2549 0002 012B     		cmp	r3, #1
 2550 0004 20D0     		beq	.L173
1556:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Check the parameters */
 2551              		.loc 1 1556 0 discriminator 2
 2552 0006 10B4     		push	{r4}
 2553              	.LCFI40:
 2554              		.cfi_def_cfa_offset 4
 2555              		.cfi_offset 4, -4
 2556              		.loc 1 1561 0 discriminator 2
 2557 0008 0122     		movs	r2, #1
 2558 000a 0277     		strb	r2, [r0, #28]
1562:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1563:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2559              		.loc 1 1563 0 discriminator 2
 2560 000c 0223     		movs	r3, #2
 2561 000e 4377     		strb	r3, [r0, #29]
1564:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1565:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1566:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2562              		.loc 1 1566 0 discriminator 2
 2563 0010 0368     		ldr	r3, [r0]
 2564 0012 CA24     		movs	r4, #202
 2565 0014 5C62     		str	r4, [r3, #36]
 2566 0016 0368     		ldr	r3, [r0]
 2567 0018 5324     		movs	r4, #83
 2568 001a 5C62     		str	r4, [r3, #36]
1567:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1568:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear flags before config */
1569:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 2569              		.loc 1 1569 0 discriminator 2
 2570 001c 0468     		ldr	r4, [r0]
 2571 001e A368     		ldr	r3, [r4, #8]
 2572 0020 23F40023 		bic	r3, r3, #524288
 2573 0024 A360     		str	r3, [r4, #8]
1570:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1571:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Configure the RTC_CR register */
1572:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CR |= (uint32_t)CalibOutput;
 2574              		.loc 1 1572 0 discriminator 2
 2575 0026 0368     		ldr	r3, [r0]
 2576 0028 9C68     		ldr	r4, [r3, #8]
 2577 002a 2143     		orrs	r1, r1, r4
ARM GAS  /tmp/ccMphqsi.s 			page 74


 2578              	.LVL194:
 2579 002c 9960     		str	r1, [r3, #8]
1573:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1574:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 2580              		.loc 1 1574 0 discriminator 2
 2581 002e 0168     		ldr	r1, [r0]
 2582 0030 8B68     		ldr	r3, [r1, #8]
 2583 0032 43F40003 		orr	r3, r3, #8388608
 2584 0036 8B60     		str	r3, [r1, #8]
1575:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1576:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1577:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2585              		.loc 1 1577 0 discriminator 2
 2586 0038 0368     		ldr	r3, [r0]
 2587 003a FF21     		movs	r1, #255
 2588 003c 5962     		str	r1, [r3, #36]
1578:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1579:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
1580:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2589              		.loc 1 1580 0 discriminator 2
 2590 003e 4277     		strb	r2, [r0, #29]
1581:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1582:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1583:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2591              		.loc 1 1583 0 discriminator 2
 2592 0040 0023     		movs	r3, #0
 2593 0042 0377     		strb	r3, [r0, #28]
1584:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1585:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 2594              		.loc 1 1585 0 discriminator 2
 2595 0044 1846     		mov	r0, r3
 2596              	.LVL195:
 2597 0046 01E0     		b	.L172
 2598              	.LVL196:
 2599              	.L173:
 2600              	.LCFI41:
 2601              		.cfi_def_cfa_offset 0
 2602              		.cfi_restore 4
1561:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 2603              		.loc 1 1561 0
 2604 0048 0220     		movs	r0, #2
 2605              	.LVL197:
 2606 004a 7047     		bx	lr
 2607              	.LVL198:
 2608              	.L172:
 2609              	.LCFI42:
 2610              		.cfi_def_cfa_offset 4
 2611              		.cfi_offset 4, -4
1586:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2612              		.loc 1 1586 0
 2613 004c 5DF8044B 		ldr	r4, [sp], #4
 2614              	.LCFI43:
 2615              		.cfi_restore 4
 2616              		.cfi_def_cfa_offset 0
 2617 0050 7047     		bx	lr
 2618              		.cfi_endproc
 2619              	.LFE165:
ARM GAS  /tmp/ccMphqsi.s 			page 75


 2621 0052 00BF     		.section	.text.HAL_RTCEx_DeactivateCalibrationOutPut,"ax",%progbits
 2622              		.align	2
 2623              		.global	HAL_RTCEx_DeactivateCalibrationOutPut
 2624              		.thumb
 2625              		.thumb_func
 2627              	HAL_RTCEx_DeactivateCalibrationOutPut:
 2628              	.LFB166:
1587:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1588:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1589:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Deactivates the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1590:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1591:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.    
1592:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
1593:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1594:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_DeactivateCalibrationOutPut(RTC_HandleTypeDef* hrtc)
1595:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 2629              		.loc 1 1595 0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 0
 2632              		@ frame_needed = 0, uses_anonymous_args = 0
 2633              		@ link register save eliminated.
 2634              	.LVL199:
1596:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
1597:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2635              		.loc 1 1597 0
 2636 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 2637 0002 012B     		cmp	r3, #1
 2638 0004 16D0     		beq	.L178
 2639              		.loc 1 1597 0 is_stmt 0 discriminator 2
 2640 0006 0122     		movs	r2, #1
 2641 0008 0277     		strb	r2, [r0, #28]
1598:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1599:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2642              		.loc 1 1599 0 is_stmt 1 discriminator 2
 2643 000a 0223     		movs	r3, #2
 2644 000c 4377     		strb	r3, [r0, #29]
1600:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1601:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1602:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2645              		.loc 1 1602 0 discriminator 2
 2646 000e 0368     		ldr	r3, [r0]
 2647 0010 CA21     		movs	r1, #202
 2648 0012 5962     		str	r1, [r3, #36]
 2649 0014 0368     		ldr	r3, [r0]
 2650 0016 5321     		movs	r1, #83
 2651 0018 5962     		str	r1, [r3, #36]
1603:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1604:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_CALIBRATION_OUTPUT_DISABLE(hrtc);
 2652              		.loc 1 1604 0 discriminator 2
 2653 001a 0168     		ldr	r1, [r0]
 2654 001c 8B68     		ldr	r3, [r1, #8]
 2655 001e 23F40003 		bic	r3, r3, #8388608
 2656 0022 8B60     		str	r3, [r1, #8]
1605:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
1606:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1607:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2657              		.loc 1 1607 0 discriminator 2
ARM GAS  /tmp/ccMphqsi.s 			page 76


 2658 0024 0368     		ldr	r3, [r0]
 2659 0026 FF21     		movs	r1, #255
 2660 0028 5962     		str	r1, [r3, #36]
1608:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1609:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
1610:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2661              		.loc 1 1610 0 discriminator 2
 2662 002a 4277     		strb	r2, [r0, #29]
1611:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1612:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1613:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2663              		.loc 1 1613 0 discriminator 2
 2664 002c 0023     		movs	r3, #0
 2665 002e 0377     		strb	r3, [r0, #28]
1614:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1615:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 2666              		.loc 1 1615 0 discriminator 2
 2667 0030 1846     		mov	r0, r3
 2668              	.LVL200:
 2669 0032 7047     		bx	lr
 2670              	.LVL201:
 2671              	.L178:
1597:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 2672              		.loc 1 1597 0
 2673 0034 0220     		movs	r0, #2
 2674              	.LVL202:
1616:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2675              		.loc 1 1616 0
 2676 0036 7047     		bx	lr
 2677              		.cfi_endproc
 2678              	.LFE166:
 2680              		.section	.text.HAL_RTCEx_SetRefClock,"ax",%progbits
 2681              		.align	2
 2682              		.global	HAL_RTCEx_SetRefClock
 2683              		.thumb
 2684              		.thumb_func
 2686              	HAL_RTCEx_SetRefClock:
 2687              	.LFB167:
1617:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1618:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1619:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Enables the RTC reference clock detection.
1620:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1621:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.    
1622:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
1623:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1624:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef* hrtc)
1625:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 2688              		.loc 1 1625 0
 2689              		.cfi_startproc
 2690              		@ args = 0, pretend = 0, frame = 0
 2691              		@ frame_needed = 0, uses_anonymous_args = 0
 2692              	.LVL203:
1626:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
1627:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2693              		.loc 1 1627 0
 2694 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 2695 0002 012B     		cmp	r3, #1
ARM GAS  /tmp/ccMphqsi.s 			page 77


 2696 0004 2AD0     		beq	.L182
1625:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
 2697              		.loc 1 1625 0 discriminator 2
 2698 0006 10B5     		push	{r4, lr}
 2699              	.LCFI44:
 2700              		.cfi_def_cfa_offset 8
 2701              		.cfi_offset 4, -8
 2702              		.cfi_offset 14, -4
 2703 0008 0446     		mov	r4, r0
 2704              		.loc 1 1627 0 discriminator 2
 2705 000a 0123     		movs	r3, #1
 2706 000c 0377     		strb	r3, [r0, #28]
1628:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1629:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2707              		.loc 1 1629 0 discriminator 2
 2708 000e 0223     		movs	r3, #2
 2709 0010 4377     		strb	r3, [r0, #29]
1630:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1631:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1632:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2710              		.loc 1 1632 0 discriminator 2
 2711 0012 0368     		ldr	r3, [r0]
 2712 0014 CA22     		movs	r2, #202
 2713 0016 5A62     		str	r2, [r3, #36]
 2714 0018 0368     		ldr	r3, [r0]
 2715 001a 5322     		movs	r2, #83
 2716 001c 5A62     		str	r2, [r3, #36]
1633:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1634:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Set Initialization mode */
1635:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 2717              		.loc 1 1635 0 discriminator 2
 2718 001e FFF7FEFF 		bl	RTC_EnterInitMode
 2719              	.LVL204:
 2720 0022 0346     		mov	r3, r0
 2721 0024 40B1     		cbz	r0, .L181
1636:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1637:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Enable the write protection for RTC registers */
1638:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 2722              		.loc 1 1638 0
 2723 0026 2368     		ldr	r3, [r4]
 2724 0028 FF22     		movs	r2, #255
 2725 002a 5A62     		str	r2, [r3, #36]
1639:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
1640:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Set RTC state*/
1641:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 2726              		.loc 1 1641 0
 2727 002c 0423     		movs	r3, #4
 2728 002e 6377     		strb	r3, [r4, #29]
1642:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
1643:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Process Unlocked */ 
1644:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     __HAL_UNLOCK(hrtc);
 2729              		.loc 1 1644 0
 2730 0030 0023     		movs	r3, #0
 2731 0032 2377     		strb	r3, [r4, #28]
1645:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
1646:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     return HAL_ERROR;
 2732              		.loc 1 1646 0
ARM GAS  /tmp/ccMphqsi.s 			page 78


 2733 0034 0123     		movs	r3, #1
 2734 0036 14E0     		b	.L180
 2735              	.L181:
1647:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   } 
1648:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   else
1649:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1650:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 2736              		.loc 1 1650 0
 2737 0038 2168     		ldr	r1, [r4]
 2738 003a 8A68     		ldr	r2, [r1, #8]
 2739 003c 42F01002 		orr	r2, r2, #16
 2740 0040 8A60     		str	r2, [r1, #8]
1651:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1652:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Exit Initialization mode */
1653:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 2741              		.loc 1 1653 0
 2742 0042 2168     		ldr	r1, [r4]
 2743 0044 CA68     		ldr	r2, [r1, #12]
 2744 0046 22F08002 		bic	r2, r2, #128
 2745 004a CA60     		str	r2, [r1, #12]
1654:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
1655:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1656:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1657:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2746              		.loc 1 1657 0
 2747 004c 2268     		ldr	r2, [r4]
 2748 004e FF21     		movs	r1, #255
 2749 0050 5162     		str	r1, [r2, #36]
1658:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1659:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****    /* Change RTC state */
1660:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2750              		.loc 1 1660 0
 2751 0052 0122     		movs	r2, #1
 2752 0054 6277     		strb	r2, [r4, #29]
1661:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1662:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1663:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2753              		.loc 1 1663 0
 2754 0056 0022     		movs	r2, #0
 2755 0058 2277     		strb	r2, [r4, #28]
1664:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1665:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 2756              		.loc 1 1665 0
 2757 005a 02E0     		b	.L180
 2758              	.LVL205:
 2759              	.L182:
 2760              	.LCFI45:
 2761              		.cfi_def_cfa_offset 0
 2762              		.cfi_restore 4
 2763              		.cfi_restore 14
1627:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 2764              		.loc 1 1627 0
 2765 005c 0223     		movs	r3, #2
1666:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2766              		.loc 1 1666 0
 2767 005e 1846     		mov	r0, r3
 2768              	.LVL206:
ARM GAS  /tmp/ccMphqsi.s 			page 79


 2769 0060 7047     		bx	lr
 2770              	.LVL207:
 2771              	.L180:
 2772              	.LCFI46:
 2773              		.cfi_def_cfa_offset 8
 2774              		.cfi_offset 4, -8
 2775              		.cfi_offset 14, -4
 2776 0062 1846     		mov	r0, r3
 2777 0064 10BD     		pop	{r4, pc}
 2778              		.cfi_endproc
 2779              	.LFE167:
 2781 0066 00BF     		.section	.text.HAL_RTCEx_DeactivateRefClock,"ax",%progbits
 2782              		.align	2
 2783              		.global	HAL_RTCEx_DeactivateRefClock
 2784              		.thumb
 2785              		.thumb_func
 2787              	HAL_RTCEx_DeactivateRefClock:
 2788              	.LFB168:
1667:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1668:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1669:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Disable the RTC reference clock detection.
1670:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1671:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.    
1672:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
1673:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1674:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_DeactivateRefClock(RTC_HandleTypeDef* hrtc)
1675:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** { 
 2789              		.loc 1 1675 0
 2790              		.cfi_startproc
 2791              		@ args = 0, pretend = 0, frame = 0
 2792              		@ frame_needed = 0, uses_anonymous_args = 0
 2793              	.LVL208:
1676:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
1677:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2794              		.loc 1 1677 0
 2795 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 2796 0002 012B     		cmp	r3, #1
 2797 0004 2AD0     		beq	.L188
1675:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
 2798              		.loc 1 1675 0 discriminator 2
 2799 0006 10B5     		push	{r4, lr}
 2800              	.LCFI47:
 2801              		.cfi_def_cfa_offset 8
 2802              		.cfi_offset 4, -8
 2803              		.cfi_offset 14, -4
 2804 0008 0446     		mov	r4, r0
 2805              		.loc 1 1677 0 discriminator 2
 2806 000a 0123     		movs	r3, #1
 2807 000c 0377     		strb	r3, [r0, #28]
1678:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1679:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2808              		.loc 1 1679 0 discriminator 2
 2809 000e 0223     		movs	r3, #2
 2810 0010 4377     		strb	r3, [r0, #29]
1680:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1681:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1682:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
ARM GAS  /tmp/ccMphqsi.s 			page 80


 2811              		.loc 1 1682 0 discriminator 2
 2812 0012 0368     		ldr	r3, [r0]
 2813 0014 CA22     		movs	r2, #202
 2814 0016 5A62     		str	r2, [r3, #36]
 2815 0018 0368     		ldr	r3, [r0]
 2816 001a 5322     		movs	r2, #83
 2817 001c 5A62     		str	r2, [r3, #36]
1683:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1684:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Set Initialization mode */
1685:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 2818              		.loc 1 1685 0 discriminator 2
 2819 001e FFF7FEFF 		bl	RTC_EnterInitMode
 2820              	.LVL209:
 2821 0022 0346     		mov	r3, r0
 2822 0024 40B1     		cbz	r0, .L187
1686:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1687:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Enable the write protection for RTC registers */
1688:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 2823              		.loc 1 1688 0
 2824 0026 2368     		ldr	r3, [r4]
 2825 0028 FF22     		movs	r2, #255
 2826 002a 5A62     		str	r2, [r3, #36]
1689:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
1690:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Set RTC state*/
1691:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 2827              		.loc 1 1691 0
 2828 002c 0423     		movs	r3, #4
 2829 002e 6377     		strb	r3, [r4, #29]
1692:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
1693:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Process Unlocked */ 
1694:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     __HAL_UNLOCK(hrtc);
 2830              		.loc 1 1694 0
 2831 0030 0023     		movs	r3, #0
 2832 0032 2377     		strb	r3, [r4, #28]
1695:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
1696:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     return HAL_ERROR;
 2833              		.loc 1 1696 0
 2834 0034 0123     		movs	r3, #1
 2835 0036 14E0     		b	.L186
 2836              	.L187:
1697:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   } 
1698:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   else
1699:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1700:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     __HAL_RTC_CLOCKREF_DETECTION_DISABLE(hrtc);
 2837              		.loc 1 1700 0
 2838 0038 2168     		ldr	r1, [r4]
 2839 003a 8A68     		ldr	r2, [r1, #8]
 2840 003c 22F01002 		bic	r2, r2, #16
 2841 0040 8A60     		str	r2, [r1, #8]
1701:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     
1702:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     /* Exit Initialization mode */
1703:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 2842              		.loc 1 1703 0
 2843 0042 2168     		ldr	r1, [r4]
 2844 0044 CA68     		ldr	r2, [r1, #12]
 2845 0046 22F08002 		bic	r2, r2, #128
 2846 004a CA60     		str	r2, [r1, #12]
ARM GAS  /tmp/ccMphqsi.s 			page 81


1704:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
1705:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1706:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1707:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2847              		.loc 1 1707 0
 2848 004c 2268     		ldr	r2, [r4]
 2849 004e FF21     		movs	r1, #255
 2850 0050 5162     		str	r1, [r2, #36]
1708:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1709:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
1710:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2851              		.loc 1 1710 0
 2852 0052 0122     		movs	r2, #1
 2853 0054 6277     		strb	r2, [r4, #29]
1711:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1712:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1713:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2854              		.loc 1 1713 0
 2855 0056 0022     		movs	r2, #0
 2856 0058 2277     		strb	r2, [r4, #28]
1714:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1715:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 2857              		.loc 1 1715 0
 2858 005a 02E0     		b	.L186
 2859              	.LVL210:
 2860              	.L188:
 2861              	.LCFI48:
 2862              		.cfi_def_cfa_offset 0
 2863              		.cfi_restore 4
 2864              		.cfi_restore 14
1677:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 2865              		.loc 1 1677 0
 2866 005c 0223     		movs	r3, #2
1716:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2867              		.loc 1 1716 0
 2868 005e 1846     		mov	r0, r3
 2869              	.LVL211:
 2870 0060 7047     		bx	lr
 2871              	.LVL212:
 2872              	.L186:
 2873              	.LCFI49:
 2874              		.cfi_def_cfa_offset 8
 2875              		.cfi_offset 4, -8
 2876              		.cfi_offset 14, -4
 2877 0062 1846     		mov	r0, r3
 2878 0064 10BD     		pop	{r4, pc}
 2879              		.cfi_endproc
 2880              	.LFE168:
 2882 0066 00BF     		.section	.text.HAL_RTCEx_EnableBypassShadow,"ax",%progbits
 2883              		.align	2
 2884              		.global	HAL_RTCEx_EnableBypassShadow
 2885              		.thumb
 2886              		.thumb_func
 2888              	HAL_RTCEx_EnableBypassShadow:
 2889              	.LFB169:
1717:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1718:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
ARM GAS  /tmp/ccMphqsi.s 			page 82


1719:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Enables the Bypass Shadow feature.
1720:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1721:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.  
1722:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
1723:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *         directly from the Calendar counter.
1724:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
1725:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1726:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
1727:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 2890              		.loc 1 1727 0
 2891              		.cfi_startproc
 2892              		@ args = 0, pretend = 0, frame = 0
 2893              		@ frame_needed = 0, uses_anonymous_args = 0
 2894              		@ link register save eliminated.
 2895              	.LVL213:
1728:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
1729:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2896              		.loc 1 1729 0
 2897 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 2898 0002 012B     		cmp	r3, #1
 2899 0004 16D0     		beq	.L193
 2900              		.loc 1 1729 0 is_stmt 0 discriminator 2
 2901 0006 0122     		movs	r2, #1
 2902 0008 0277     		strb	r2, [r0, #28]
1730:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1731:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2903              		.loc 1 1731 0 is_stmt 1 discriminator 2
 2904 000a 0223     		movs	r3, #2
 2905 000c 4377     		strb	r3, [r0, #29]
1732:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1733:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1734:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2906              		.loc 1 1734 0 discriminator 2
 2907 000e 0368     		ldr	r3, [r0]
 2908 0010 CA21     		movs	r1, #202
 2909 0012 5962     		str	r1, [r3, #36]
 2910 0014 0368     		ldr	r3, [r0]
 2911 0016 5321     		movs	r1, #83
 2912 0018 5962     		str	r1, [r3, #36]
1735:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1736:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Set the BYPSHAD bit */
1737:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 2913              		.loc 1 1737 0 discriminator 2
 2914 001a 0168     		ldr	r1, [r0]
 2915 001c 8B68     		ldr	r3, [r1, #8]
 2916 001e 43F02003 		orr	r3, r3, #32
 2917 0022 8B60     		str	r3, [r1, #8]
1738:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1739:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1740:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2918              		.loc 1 1740 0 discriminator 2
 2919 0024 0368     		ldr	r3, [r0]
 2920 0026 FF21     		movs	r1, #255
 2921 0028 5962     		str	r1, [r3, #36]
1741:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1742:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
1743:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
ARM GAS  /tmp/ccMphqsi.s 			page 83


 2922              		.loc 1 1743 0 discriminator 2
 2923 002a 4277     		strb	r2, [r0, #29]
1744:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1745:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1746:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2924              		.loc 1 1746 0 discriminator 2
 2925 002c 0023     		movs	r3, #0
 2926 002e 0377     		strb	r3, [r0, #28]
1747:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1748:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 2927              		.loc 1 1748 0 discriminator 2
 2928 0030 1846     		mov	r0, r3
 2929              	.LVL214:
 2930 0032 7047     		bx	lr
 2931              	.LVL215:
 2932              	.L193:
1729:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 2933              		.loc 1 1729 0
 2934 0034 0220     		movs	r0, #2
 2935              	.LVL216:
1749:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2936              		.loc 1 1749 0
 2937 0036 7047     		bx	lr
 2938              		.cfi_endproc
 2939              	.LFE169:
 2941              		.section	.text.HAL_RTCEx_DisableBypassShadow,"ax",%progbits
 2942              		.align	2
 2943              		.global	HAL_RTCEx_DisableBypassShadow
 2944              		.thumb
 2945              		.thumb_func
 2947              	HAL_RTCEx_DisableBypassShadow:
 2948              	.LFB170:
1750:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1751:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1752:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Disables the Bypass Shadow feature.
1753:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1754:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.  
1755:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
1756:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *         directly from the Calendar counter.
1757:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
1758:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1759:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
1760:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 2949              		.loc 1 1760 0
 2950              		.cfi_startproc
 2951              		@ args = 0, pretend = 0, frame = 0
 2952              		@ frame_needed = 0, uses_anonymous_args = 0
 2953              		@ link register save eliminated.
 2954              	.LVL217:
1761:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Locked */ 
1762:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2955              		.loc 1 1762 0
 2956 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 2957 0002 012B     		cmp	r3, #1
 2958 0004 16D0     		beq	.L196
 2959              		.loc 1 1762 0 is_stmt 0 discriminator 2
 2960 0006 0122     		movs	r2, #1
ARM GAS  /tmp/ccMphqsi.s 			page 84


 2961 0008 0277     		strb	r2, [r0, #28]
1763:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1764:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2962              		.loc 1 1764 0 is_stmt 1 discriminator 2
 2963 000a 0223     		movs	r3, #2
 2964 000c 4377     		strb	r3, [r0, #29]
1765:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1766:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1767:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2965              		.loc 1 1767 0 discriminator 2
 2966 000e 0368     		ldr	r3, [r0]
 2967 0010 CA21     		movs	r1, #202
 2968 0012 5962     		str	r1, [r3, #36]
 2969 0014 0368     		ldr	r3, [r0]
 2970 0016 5321     		movs	r1, #83
 2971 0018 5962     		str	r1, [r3, #36]
1768:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1769:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Reset the BYPSHAD bit */
1770:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->Instance->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 2972              		.loc 1 1770 0 discriminator 2
 2973 001a 0168     		ldr	r1, [r0]
 2974 001c 8B68     		ldr	r3, [r1, #8]
 2975 001e 03F0DF03 		and	r3, r3, #223
 2976 0022 8B60     		str	r3, [r1, #8]
1771:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1772:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1773:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2977              		.loc 1 1773 0 discriminator 2
 2978 0024 0368     		ldr	r3, [r0]
 2979 0026 FF21     		movs	r1, #255
 2980 0028 5962     		str	r1, [r3, #36]
1774:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1775:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
1776:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2981              		.loc 1 1776 0 discriminator 2
 2982 002a 4277     		strb	r2, [r0, #29]
1777:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1778:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1779:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2983              		.loc 1 1779 0 discriminator 2
 2984 002c 0023     		movs	r3, #0
 2985 002e 0377     		strb	r3, [r0, #28]
1780:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1781:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK;
 2986              		.loc 1 1781 0 discriminator 2
 2987 0030 1846     		mov	r0, r3
 2988              	.LVL218:
 2989 0032 7047     		bx	lr
 2990              	.LVL219:
 2991              	.L196:
1762:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
 2992              		.loc 1 1762 0
 2993 0034 0220     		movs	r0, #2
 2994              	.LVL220:
1782:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 2995              		.loc 1 1782 0
 2996 0036 7047     		bx	lr
ARM GAS  /tmp/ccMphqsi.s 			page 85


 2997              		.cfi_endproc
 2998              	.LFE170:
 3000              		.section	.text.HAL_RTCEx_AlarmBEventCallback,"ax",%progbits
 3001              		.align	2
 3002              		.weak	HAL_RTCEx_AlarmBEventCallback
 3003              		.thumb
 3004              		.thumb_func
 3006              	HAL_RTCEx_AlarmBEventCallback:
 3007              	.LFB171:
1783:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1784:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1785:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @}
1786:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1787:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1788:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /** @defgroup RTCEx_Group4 Extended features functions 
1789:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  *  @brief    Extended features functions  
1790:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  *
1791:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** @verbatim   
1792:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  ===============================================================================
1793:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                  ##### Extended features functions #####
1794:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****  ===============================================================================  
1795:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     [..]  This section provides functions allowing to:
1796:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) RTC Alram B callback
1797:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       (+) RTC Poll for Alarm B request
1798:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****                
1799:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** @endverbatim
1800:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @{
1801:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1802:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1803:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1804:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  Alarm B callback.
1805:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1806:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
1807:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval None
1808:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1809:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** __weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
1810:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {
 3008              		.loc 1 1810 0
 3009              		.cfi_startproc
 3010              		@ args = 0, pretend = 0, frame = 0
 3011              		@ frame_needed = 0, uses_anonymous_args = 0
 3012              		@ link register save eliminated.
 3013              	.LVL221:
 3014 0000 7047     		bx	lr
 3015              		.cfi_endproc
 3016              	.LFE171:
 3018 0002 00BF     		.section	.text.HAL_RTCEx_PollForAlarmBEvent,"ax",%progbits
 3019              		.align	2
 3020              		.global	HAL_RTCEx_PollForAlarmBEvent
 3021              		.thumb
 3022              		.thumb_func
 3024              	HAL_RTCEx_PollForAlarmBEvent:
 3025              	.LFB172:
1811:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1812:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   UNUSED(hrtc);
1813:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1814:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
ARM GAS  /tmp/ccMphqsi.s 			page 86


1815:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****             the HAL_RTC_AlarmBEventCallback could be implemented in the user file
1816:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****    */
1817:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
1818:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1819:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** /**
1820:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @brief  This function handles AlarmB Polling request.
1821:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1822:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   *                the configuration information for RTC.
1823:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @param  Timeout Timeout duration
1824:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   * @retval HAL status
1825:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   */
1826:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_PollForAlarmBEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1827:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** {  
 3026              		.loc 1 1827 0
 3027              		.cfi_startproc
 3028              		@ args = 0, pretend = 0, frame = 0
 3029              		@ frame_needed = 0, uses_anonymous_args = 0
 3030              	.LVL222:
 3031              		.loc 1 1827 0
 3032 0000 70B5     		push	{r4, r5, r6, lr}
 3033              	.LCFI50:
 3034              		.cfi_def_cfa_offset 16
 3035              		.cfi_offset 4, -16
 3036              		.cfi_offset 5, -12
 3037              		.cfi_offset 6, -8
 3038              		.cfi_offset 14, -4
 3039 0002 0446     		mov	r4, r0
 3040 0004 0D46     		mov	r5, r1
 3041              	.LVL223:
1828:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   uint32_t tickstart = 0; 
1829:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1830:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Get tick */
1831:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   tickstart = HAL_GetTick();
 3042              		.loc 1 1831 0
 3043 0006 FFF7FEFF 		bl	HAL_GetTick
 3044              	.LVL224:
 3045 000a 0646     		mov	r6, r0
 3046              	.LVL225:
1832:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** 
1833:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) == RESET)
 3047              		.loc 1 1833 0
 3048 000c 0BE0     		b	.L200
 3049              	.LVL226:
 3050              	.L203:
1834:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
1835:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 3051              		.loc 1 1835 0
 3052 000e B5F1FF3F 		cmp	r5, #-1
 3053 0012 08D0     		beq	.L200
1836:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     {
1837:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 3054              		.loc 1 1837 0
 3055 0014 25B1     		cbz	r5, .L201
 3056              		.loc 1 1837 0 is_stmt 0 discriminator 1
 3057 0016 FFF7FEFF 		bl	HAL_GetTick
 3058              	.LVL227:
 3059 001a 801B     		subs	r0, r0, r6
ARM GAS  /tmp/ccMphqsi.s 			page 87


 3060 001c 8542     		cmp	r5, r0
 3061 001e 02D2     		bcs	.L200
 3062              	.L201:
1838:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       {
1839:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 3063              		.loc 1 1839 0 is_stmt 1
 3064 0020 0320     		movs	r0, #3
 3065 0022 6077     		strb	r0, [r4, #29]
1840:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 3066              		.loc 1 1840 0
 3067 0024 70BD     		pop	{r4, r5, r6, pc}
 3068              	.LVL228:
 3069              	.L200:
1833:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   {
 3070              		.loc 1 1833 0
 3071 0026 2368     		ldr	r3, [r4]
 3072 0028 DA68     		ldr	r2, [r3, #12]
 3073 002a 12F4007F 		tst	r2, #512
 3074 002e EED0     		beq	.L203
1841:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****       }
1842:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****     }
1843:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   }
1844:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1845:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Clear the Alarm Flag */
1846:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 3075              		.loc 1 1846 0
 3076 0030 DA68     		ldr	r2, [r3, #12]
 3077 0032 D2B2     		uxtb	r2, r2
 3078 0034 62F42072 		orn	r2, r2, #640
 3079 0038 DA60     		str	r2, [r3, #12]
1847:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1848:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   /* Change RTC state */
1849:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 3080              		.loc 1 1849 0
 3081 003a 0123     		movs	r3, #1
 3082 003c 6377     		strb	r3, [r4, #29]
1850:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   
1851:HALLIB/Src/stm32f7xx_hal_rtc_ex.c ****   return HAL_OK; 
 3083              		.loc 1 1851 0
 3084 003e 0020     		movs	r0, #0
1852:HALLIB/Src/stm32f7xx_hal_rtc_ex.c **** }
 3085              		.loc 1 1852 0
 3086 0040 70BD     		pop	{r4, r5, r6, pc}
 3087              		.cfi_endproc
 3088              	.LFE172:
 3090 0042 00BF     		.text
 3091              	.Letext0:
 3092              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 3093              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 3094              		.file 4 "Inc/stm32f767xx.h"
 3095              		.file 5 "Inc/stm32f7xx.h"
 3096              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 3097              		.file 7 "HALLIB/Inc/stm32f7xx_hal_rtc.h"
 3098              		.file 8 "HALLIB/Inc/stm32f7xx_hal_rtc_ex.h"
 3099              		.file 9 "CORE/core_cm7.h"
 3100              		.file 10 "Inc/system_stm32f7xx.h"
 3101              		.file 11 "HALLIB/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccMphqsi.s 			page 88


ARM GAS  /tmp/ccMphqsi.s 			page 89


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_rtc_ex.c
     /tmp/ccMphqsi.s:21     .text.HAL_RTCEx_SetTimeStamp:00000000 $t
     /tmp/ccMphqsi.s:26     .text.HAL_RTCEx_SetTimeStamp:00000000 HAL_RTCEx_SetTimeStamp
     /tmp/ccMphqsi.s:117    .text.HAL_RTCEx_SetTimeStamp_IT:00000000 $t
     /tmp/ccMphqsi.s:122    .text.HAL_RTCEx_SetTimeStamp_IT:00000000 HAL_RTCEx_SetTimeStamp_IT
     /tmp/ccMphqsi.s:246    .text.HAL_RTCEx_SetTimeStamp_IT:00000088 $d
     /tmp/ccMphqsi.s:251    .text.HAL_RTCEx_DeactivateTimeStamp:00000000 $t
     /tmp/ccMphqsi.s:256    .text.HAL_RTCEx_DeactivateTimeStamp:00000000 HAL_RTCEx_DeactivateTimeStamp
     /tmp/ccMphqsi.s:338    .text.HAL_RTCEx_DeactivateTimeStamp:0000004c $d
     /tmp/ccMphqsi.s:343    .text.HAL_RTCEx_SetInternalTimeStamp:00000000 $t
     /tmp/ccMphqsi.s:348    .text.HAL_RTCEx_SetInternalTimeStamp:00000000 HAL_RTCEx_SetInternalTimeStamp
     /tmp/ccMphqsi.s:402    .text.HAL_RTCEx_DeactivateInternalTimeStamp:00000000 $t
     /tmp/ccMphqsi.s:407    .text.HAL_RTCEx_DeactivateInternalTimeStamp:00000000 HAL_RTCEx_DeactivateInternalTimeStamp
     /tmp/ccMphqsi.s:461    .text.HAL_RTCEx_GetTimeStamp:00000000 $t
     /tmp/ccMphqsi.s:466    .text.HAL_RTCEx_GetTimeStamp:00000000 HAL_RTCEx_GetTimeStamp
     /tmp/ccMphqsi.s:575    .text.HAL_RTCEx_GetTimeStamp:00000088 $d
     /tmp/ccMphqsi.s:581    .text.HAL_RTCEx_SetTamper:00000000 $t
     /tmp/ccMphqsi.s:586    .text.HAL_RTCEx_SetTamper:00000000 HAL_RTCEx_SetTamper
     /tmp/ccMphqsi.s:756    .text.HAL_RTCEx_SetTamper:000000d0 $d
     /tmp/ccMphqsi.s:761    .text.HAL_RTCEx_SetTamper_IT:00000000 $t
     /tmp/ccMphqsi.s:766    .text.HAL_RTCEx_SetTamper_IT:00000000 HAL_RTCEx_SetTamper_IT
     /tmp/ccMphqsi.s:988    .text.HAL_RTCEx_SetTamper_IT:00000128 $d
     /tmp/ccMphqsi.s:994    .text.HAL_RTCEx_DeactivateTamper:00000000 $t
     /tmp/ccMphqsi.s:999    .text.HAL_RTCEx_DeactivateTamper:00000000 HAL_RTCEx_DeactivateTamper
     /tmp/ccMphqsi.s:1091   .text.HAL_RTCEx_DeactivateTamper:00000060 $d
     /tmp/ccMphqsi.s:1098   .text.HAL_RTCEx_TimeStampEventCallback:00000000 $t
     /tmp/ccMphqsi.s:1103   .text.HAL_RTCEx_TimeStampEventCallback:00000000 HAL_RTCEx_TimeStampEventCallback
     /tmp/ccMphqsi.s:1116   .text.HAL_RTCEx_Tamper1EventCallback:00000000 $t
     /tmp/ccMphqsi.s:1121   .text.HAL_RTCEx_Tamper1EventCallback:00000000 HAL_RTCEx_Tamper1EventCallback
     /tmp/ccMphqsi.s:1134   .text.HAL_RTCEx_Tamper2EventCallback:00000000 $t
     /tmp/ccMphqsi.s:1139   .text.HAL_RTCEx_Tamper2EventCallback:00000000 HAL_RTCEx_Tamper2EventCallback
     /tmp/ccMphqsi.s:1152   .text.HAL_RTCEx_Tamper3EventCallback:00000000 $t
     /tmp/ccMphqsi.s:1157   .text.HAL_RTCEx_Tamper3EventCallback:00000000 HAL_RTCEx_Tamper3EventCallback
     /tmp/ccMphqsi.s:1170   .text.HAL_RTCEx_TamperTimeStampIRQHandler:00000000 $t
     /tmp/ccMphqsi.s:1175   .text.HAL_RTCEx_TamperTimeStampIRQHandler:00000000 HAL_RTCEx_TamperTimeStampIRQHandler
     /tmp/ccMphqsi.s:1301   .text.HAL_RTCEx_TamperTimeStampIRQHandler:000000c4 $d
     /tmp/ccMphqsi.s:1306   .text.HAL_RTCEx_PollForTimeStampEvent:00000000 $t
     /tmp/ccMphqsi.s:1311   .text.HAL_RTCEx_PollForTimeStampEvent:00000000 HAL_RTCEx_PollForTimeStampEvent
     /tmp/ccMphqsi.s:1389   .text.HAL_RTCEx_PollForTamper1Event:00000000 $t
     /tmp/ccMphqsi.s:1394   .text.HAL_RTCEx_PollForTamper1Event:00000000 HAL_RTCEx_PollForTamper1Event
     /tmp/ccMphqsi.s:1460   .text.HAL_RTCEx_PollForTamper2Event:00000000 $t
     /tmp/ccMphqsi.s:1465   .text.HAL_RTCEx_PollForTamper2Event:00000000 HAL_RTCEx_PollForTamper2Event
     /tmp/ccMphqsi.s:1531   .text.HAL_RTCEx_PollForTamper3Event:00000000 $t
     /tmp/ccMphqsi.s:1536   .text.HAL_RTCEx_PollForTamper3Event:00000000 HAL_RTCEx_PollForTamper3Event
     /tmp/ccMphqsi.s:1604   .text.HAL_RTCEx_SetWakeUpTimer:00000000 $t
     /tmp/ccMphqsi.s:1609   .text.HAL_RTCEx_SetWakeUpTimer:00000000 HAL_RTCEx_SetWakeUpTimer
     /tmp/ccMphqsi.s:1733   .text.HAL_RTCEx_SetWakeUpTimer_IT:00000000 $t
     /tmp/ccMphqsi.s:1738   .text.HAL_RTCEx_SetWakeUpTimer_IT:00000000 HAL_RTCEx_SetWakeUpTimer_IT
     /tmp/ccMphqsi.s:1943   .text.HAL_RTCEx_SetWakeUpTimer_IT:0000010c $d
     /tmp/ccMphqsi.s:1950   .text.HAL_RTCEx_DeactivateWakeUpTimer:00000000 $t
     /tmp/ccMphqsi.s:1955   .text.HAL_RTCEx_DeactivateWakeUpTimer:00000000 HAL_RTCEx_DeactivateWakeUpTimer
     /tmp/ccMphqsi.s:2054   .text.HAL_RTCEx_GetWakeUpTimer:00000000 $t
     /tmp/ccMphqsi.s:2059   .text.HAL_RTCEx_GetWakeUpTimer:00000000 HAL_RTCEx_GetWakeUpTimer
     /tmp/ccMphqsi.s:2078   .text.HAL_RTCEx_WakeUpTimerEventCallback:00000000 $t
     /tmp/ccMphqsi.s:2083   .text.HAL_RTCEx_WakeUpTimerEventCallback:00000000 HAL_RTCEx_WakeUpTimerEventCallback
     /tmp/ccMphqsi.s:2096   .text.HAL_RTCEx_WakeUpTimerIRQHandler:00000000 $t
ARM GAS  /tmp/ccMphqsi.s 			page 90


     /tmp/ccMphqsi.s:2101   .text.HAL_RTCEx_WakeUpTimerIRQHandler:00000000 HAL_RTCEx_WakeUpTimerIRQHandler
     /tmp/ccMphqsi.s:2146   .text.HAL_RTCEx_WakeUpTimerIRQHandler:00000034 $d
     /tmp/ccMphqsi.s:2151   .text.HAL_RTCEx_PollForWakeUpTimerEvent:00000000 $t
     /tmp/ccMphqsi.s:2156   .text.HAL_RTCEx_PollForWakeUpTimerEvent:00000000 HAL_RTCEx_PollForWakeUpTimerEvent
     /tmp/ccMphqsi.s:2222   .text.HAL_RTCEx_BKUPWrite:00000000 $t
     /tmp/ccMphqsi.s:2227   .text.HAL_RTCEx_BKUPWrite:00000000 HAL_RTCEx_BKUPWrite
     /tmp/ccMphqsi.s:2246   .text.HAL_RTCEx_BKUPRead:00000000 $t
     /tmp/ccMphqsi.s:2251   .text.HAL_RTCEx_BKUPRead:00000000 HAL_RTCEx_BKUPRead
     /tmp/ccMphqsi.s:2272   .text.HAL_RTCEx_SetSmoothCalib:00000000 $t
     /tmp/ccMphqsi.s:2277   .text.HAL_RTCEx_SetSmoothCalib:00000000 HAL_RTCEx_SetSmoothCalib
     /tmp/ccMphqsi.s:2388   .text.HAL_RTCEx_SetSynchroShift:00000000 $t
     /tmp/ccMphqsi.s:2393   .text.HAL_RTCEx_SetSynchroShift:00000000 HAL_RTCEx_SetSynchroShift
     /tmp/ccMphqsi.s:2534   .text.HAL_RTCEx_SetCalibrationOutPut:00000000 $t
     /tmp/ccMphqsi.s:2539   .text.HAL_RTCEx_SetCalibrationOutPut:00000000 HAL_RTCEx_SetCalibrationOutPut
     /tmp/ccMphqsi.s:2622   .text.HAL_RTCEx_DeactivateCalibrationOutPut:00000000 $t
     /tmp/ccMphqsi.s:2627   .text.HAL_RTCEx_DeactivateCalibrationOutPut:00000000 HAL_RTCEx_DeactivateCalibrationOutPut
     /tmp/ccMphqsi.s:2681   .text.HAL_RTCEx_SetRefClock:00000000 $t
     /tmp/ccMphqsi.s:2686   .text.HAL_RTCEx_SetRefClock:00000000 HAL_RTCEx_SetRefClock
     /tmp/ccMphqsi.s:2782   .text.HAL_RTCEx_DeactivateRefClock:00000000 $t
     /tmp/ccMphqsi.s:2787   .text.HAL_RTCEx_DeactivateRefClock:00000000 HAL_RTCEx_DeactivateRefClock
     /tmp/ccMphqsi.s:2883   .text.HAL_RTCEx_EnableBypassShadow:00000000 $t
     /tmp/ccMphqsi.s:2888   .text.HAL_RTCEx_EnableBypassShadow:00000000 HAL_RTCEx_EnableBypassShadow
     /tmp/ccMphqsi.s:2942   .text.HAL_RTCEx_DisableBypassShadow:00000000 $t
     /tmp/ccMphqsi.s:2947   .text.HAL_RTCEx_DisableBypassShadow:00000000 HAL_RTCEx_DisableBypassShadow
     /tmp/ccMphqsi.s:3001   .text.HAL_RTCEx_AlarmBEventCallback:00000000 $t
     /tmp/ccMphqsi.s:3006   .text.HAL_RTCEx_AlarmBEventCallback:00000000 HAL_RTCEx_AlarmBEventCallback
     /tmp/ccMphqsi.s:3019   .text.HAL_RTCEx_PollForAlarmBEvent:00000000 $t
     /tmp/ccMphqsi.s:3024   .text.HAL_RTCEx_PollForAlarmBEvent:00000000 HAL_RTCEx_PollForAlarmBEvent
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RTC_Bcd2ToByte
HAL_GetTick
SystemCoreClock
HAL_RTC_WaitForSynchro
RTC_EnterInitMode
