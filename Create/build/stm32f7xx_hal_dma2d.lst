ARM GAS  /tmp/ccSyzCiQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_dma2d.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.DMA2D_SetConfig,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	DMA2D_SetConfig:
  26              	.LFB165:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_dma2d.c"
   1:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @file    stm32f7xx_hal_dma2d.c
   4:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief   DMA2D HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *          functionalities of the DMA2D peripheral:
   8:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *           + IO operation functions
  10:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *           + Peripheral Control functions 
  11:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *           + Peripheral State and Errors functions
  12:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *
  13:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   @verbatim
  14:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                         ##### How to use this driver #####
  16:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   ==============================================================================
  17:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     [..]
  18:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (#) Program the required configuration through the following parameters:   
  19:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           the transfer mode, the output color mode and the output offset using 
  20:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           HAL_DMA2D_Init() function.
  21:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
  22:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (#) Program the required configuration through the following parameters:   
  23:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           the input color mode, the input color, the input alpha value, the alpha mode,
  24:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           the red/blue swap mode, the inverted alpha mode and the input offset using 
  25:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           HAL_DMA2D_ConfigLayer() function for foreground or/and background layer.
  26:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           
  27:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      *** Polling mode IO operation ***
  28:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      =================================   
  29:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     [..]        
  30:HALLIB/Src/stm32f7xx_hal_dma2d.c ****        (#) Configure pdata parameter (explained hereafter), destination and data length 
  31:HALLIB/Src/stm32f7xx_hal_dma2d.c ****            and enable the transfer using HAL_DMA2D_Start(). 
ARM GAS  /tmp/ccSyzCiQ.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_dma2d.c ****        (#) Wait for end of transfer using HAL_DMA2D_PollForTransfer(), at this stage
  33:HALLIB/Src/stm32f7xx_hal_dma2d.c ****            user can specify the value of timeout according to his end application.
  34:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                
  35:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      *** Interrupt mode IO operation ***    
  36:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      ===================================
  37:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      [..] 
  38:HALLIB/Src/stm32f7xx_hal_dma2d.c ****        (#) Configure pdata parameter, destination and data length and enable 
  39:HALLIB/Src/stm32f7xx_hal_dma2d.c ****            the transfer using HAL_DMA2D_Start_IT(). 
  40:HALLIB/Src/stm32f7xx_hal_dma2d.c ****        (#) Use HAL_DMA2D_IRQHandler() called under DMA2D_IRQHandler() interrupt subroutine.
  41:HALLIB/Src/stm32f7xx_hal_dma2d.c ****        (#) At the end of data transfer HAL_DMA2D_IRQHandler() function is executed and user can 
  42:HALLIB/Src/stm32f7xx_hal_dma2d.c ****            add his own function by customization of function pointer XferCpltCallback (member 
  43:HALLIB/Src/stm32f7xx_hal_dma2d.c ****            of DMA2D handle structure). 
  44:HALLIB/Src/stm32f7xx_hal_dma2d.c ****        (#) In case of error, the HAL_DMA2D_IRQHandler() function will call the callback 
  45:HALLIB/Src/stm32f7xx_hal_dma2d.c ****            XferErrorCallback.            
  46:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
  47:HALLIB/Src/stm32f7xx_hal_dma2d.c ****          -@-   In Register-to-Memory transfer mode, pdata parameter is the register
  48:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                color, in Memory-to-memory or Memory-to-Memory with pixel format
  49:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                conversion pdata is the source address.
  50:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
  51:HALLIB/Src/stm32f7xx_hal_dma2d.c ****          -@-   Configure the foreground source address, the background source address, 
  52:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                the destination and data length then Enable the transfer using 
  53:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                HAL_DMA2D_BlendingStart() in polling mode and HAL_DMA2D_BlendingStart_IT()
  54:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                in interrupt mode.
  55:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                
  56:HALLIB/Src/stm32f7xx_hal_dma2d.c ****          -@-   HAL_DMA2D_BlendingStart() and HAL_DMA2D_BlendingStart_IT() functions
  57:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                are used if the memory to memory with blending transfer mode is selected.
  58:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                    
  59:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (#) Optionally, configure and enable the CLUT using HAL_DMA2D_CLUTLoad() in polling
  60:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           mode or HAL_DMA2D_CLUTLoad_IT() in interrupt mode.
  61:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
  62:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (#) Optionally, configure the line watermark in using the API HAL_DMA2D_ProgramLineEvent()
  63:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           
  64:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (#) Optionally, configure the dead time value in the AHB clock cycle inserted between two 
  65:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           consecutive accesses on the AHB master port in using the API HAL_DMA2D_ConfigDeadTime()
  66:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           and enable/disable the functionality  with the APIs HAL_DMA2D_EnableDeadTime() or
  67:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           HAL_DMA2D_DisableDeadTime().          
  68:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    
  69:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (#) The transfer can be suspended, resumed and aborted using the following
  70:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           functions: HAL_DMA2D_Suspend(), HAL_DMA2D_Resume(), HAL_DMA2D_Abort().
  71:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           
  72:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (#) The CLUT loading can be suspended, resumed and aborted using the following
  73:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           functions: HAL_DMA2D_CLUTLoading_Suspend(), HAL_DMA2D_CLUTLoading_Resume(), 
  74:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           HAL_DMA2D_CLUTLoading_Abort().                
  75:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                      
  76:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (#) To control the DMA2D state, use the following function: HAL_DMA2D_GetState().   
  77:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
  78:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (#) To read the DMA2D error code, use the following function: HAL_DMA2D_GetError().          
  79:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
  80:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      *** DMA2D HAL driver macros list ***
  81:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      ============================================= 
  82:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      [..]
  83:HALLIB/Src/stm32f7xx_hal_dma2d.c ****        Below the list of most used macros in DMA2D HAL driver :
  84:HALLIB/Src/stm32f7xx_hal_dma2d.c ****        
  85:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) __HAL_DMA2D_ENABLE: Enable the DMA2D peripheral.
  86:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) __HAL_DMA2D_GET_FLAG: Get the DMA2D pending flags.
  87:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) __HAL_DMA2D_CLEAR_FLAG: Clear the DMA2D pending flags.
  88:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) __HAL_DMA2D_ENABLE_IT: Enable the specified DMA2D interrupts.
ARM GAS  /tmp/ccSyzCiQ.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) __HAL_DMA2D_DISABLE_IT: Disable the specified DMA2D interrupts.
  90:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) __HAL_DMA2D_GET_IT_SOURCE: Check whether the specified DMA2D interrupt is enabled or not.
  91:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      
  92:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      [..] 
  93:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (@) You can refer to the DMA2D HAL driver header file for more useful macros
  94:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                                   
  95:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   @endverbatim
  96:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   ******************************************************************************
  97:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @attention
  98:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *
  99:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 100:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *
 101:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * Redistribution and use in source and binary forms, with or without modification,
 102:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * are permitted provided that the following conditions are met:
 103:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 104:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *      this list of conditions and the following disclaimer.
 105:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 106:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *      this list of conditions and the following disclaimer in the documentation
 107:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *      and/or other materials provided with the distribution.
 108:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 109:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *      may be used to endorse or promote products derived from this software
 110:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *      without specific prior written permission.
 111:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *
 112:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 113:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 114:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 115:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 116:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 117:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 118:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 119:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 120:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 121:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 122:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *
 123:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   ******************************************************************************
 124:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */ 
 125:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 126:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /* Includes ------------------------------------------------------------------*/
 127:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #include "stm32f7xx_hal.h"
 128:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 129:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /** @addtogroup STM32F7xx_HAL_Driver
 130:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @{
 131:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 132:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 133:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /** @defgroup DMA2D  DMA2D
 134:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief DMA2D HAL module driver
 135:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @{
 136:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 137:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 138:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #ifdef HAL_DMA2D_MODULE_ENABLED
 139:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #if defined (DMA2D)
 140:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 141:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /* Private types -------------------------------------------------------------*/
 142:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /* Private define ------------------------------------------------------------*/
 143:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /** @defgroup DMA2D_Private_Constants DMA2D Private Constants
 144:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @{
 145:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
ARM GAS  /tmp/ccSyzCiQ.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 147:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /** @defgroup DMA2D_TimeOut DMA2D Time Out 
 148:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @{
 149:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */  
 150:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #define DMA2D_TIMEOUT_ABORT           ((uint32_t)1000)  /*!<  1s  */
 151:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #define DMA2D_TIMEOUT_SUSPEND         ((uint32_t)1000)  /*!<  1s  */
 152:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 153:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @}
 154:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 155:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 156:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 157:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @}
 158:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 159:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 160:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /* Private variables ---------------------------------------------------------*/
 161:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /* Private constants ---------------------------------------------------------*/
 162:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /* Private macro -------------------------------------------------------------*/
 163:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /* Private function prototypes -----------------------------------------------*/
 164:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /** @addtogroup DMA2D_Private_Functions_Prototypes
 165:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @{
 166:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 167:HALLIB/Src/stm32f7xx_hal_dma2d.c **** static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint3
 168:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 169:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @}
 170:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 171:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 172:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /* Private functions ---------------------------------------------------------*/
 173:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /* Exported functions --------------------------------------------------------*/
 174:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /** @defgroup DMA2D_Exported_Functions DMA2D Exported Functions
 175:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @{
 176:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 177:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 178:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /** @defgroup DMA2D_Exported_Functions_Group1 Initialization and de-initialization functions
 179:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  *  @brief   Initialization and Configuration functions
 180:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  *
 181:HALLIB/Src/stm32f7xx_hal_dma2d.c **** @verbatim   
 182:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  ===============================================================================
 183:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                 ##### Initialization and Configuration functions #####
 184:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  ===============================================================================  
 185:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     [..]  This section provides functions allowing to:
 186:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Initialize and configure the DMA2D
 187:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) De-initialize the DMA2D 
 188:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 189:HALLIB/Src/stm32f7xx_hal_dma2d.c **** @endverbatim
 190:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @{
 191:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 192:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 193:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 194:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Initialize the DMA2D according to the specified
 195:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *         parameters in the DMA2D_InitTypeDef and create the associated handle.
 196:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
 197:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D.
 198:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 199:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 200:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
 201:HALLIB/Src/stm32f7xx_hal_dma2d.c **** { 
 202:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the DMA2D peripheral state */
ARM GAS  /tmp/ccSyzCiQ.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(hdma2d == NULL)
 204:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 205:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      return HAL_ERROR;
 206:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 207:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 208:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 209:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
 210:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 211:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 212:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 213:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 214:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 215:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 216:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Allocate lock resource and initialize it */
 217:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     hdma2d->Lock = HAL_UNLOCKED;
 218:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Init the low level hardware */
 219:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     HAL_DMA2D_MspInit(hdma2d);
 220:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 221:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 222:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change DMA2D peripheral state */
 223:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 224:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 225:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* DMA2D CR register configuration -------------------------------------------*/
 226:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 227:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 228:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* DMA2D OPFCCR register configuration ---------------------------------------*/
 229:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 230:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 231:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* DMA2D OOR register configuration ------------------------------------------*/  
 232:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 233:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 234:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #if defined (DMA2D_OPFCCR_AI)
 235:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* DMA2D OPFCCR AI fields setting (Output Alpha Inversion)*/
 236:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_AI, (hdma2d->Init.AlphaInverted << DMA2D_OPFCCR
 237:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #endif /* DMA2D_OPFCCR_AI */ 
 238:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 239:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #if defined (DMA2D_OPFCCR_RBS) 
 240:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_R
 241:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #endif /* DMA2D_OPFCCR_RBS */
 242:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 243:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 244:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Update error code */
 245:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 246:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 247:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Initialize the DMA2D state*/
 248:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State  = HAL_DMA2D_STATE_READY;
 249:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 250:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 251:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 252:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 253:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 254:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Deinitializes the DMA2D peripheral registers to their default reset
 255:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *         values.
 256:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
 257:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D.
 258:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval None
 259:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
ARM GAS  /tmp/ccSyzCiQ.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 261:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
 262:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 263:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 264:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the DMA2D peripheral state */
 265:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(hdma2d == NULL)
 266:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 267:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      return HAL_ERROR;
 268:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 269:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 270:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Before aborting any DMA2D transfer or CLUT loading, check
 271:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      first whether or not DMA2D clock is enabled */
 272:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 273:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 274:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Abort DMA2D transfer if any */
 275:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 276:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 277:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 278:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
 279:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Issue when aborting DMA2D transfer */       
 280:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         return HAL_ERROR;
 281:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
 282:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 283:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     else
 284:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 285:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Abort background CLUT loading if any */
 286:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 287:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {  
 288:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0) != HAL_OK)        
 289:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 290:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           /* Issue when aborting background CLUT loading */     
 291:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           return HAL_ERROR;
 292:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
 293:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
 294:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       else
 295:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
 296:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Abort foreground CLUT loading if any */
 297:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 298:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 299:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1) != HAL_OK)  
 300:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           {
 301:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             /* Issue when aborting foreground CLUT loading */     
 302:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             return HAL_ERROR;
 303:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           }        
 304:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
 305:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
 306:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 307:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 308:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 309:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             
 310:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Carry on with de-initialization of low level hardware */
 311:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   HAL_DMA2D_MspDeInit(hdma2d);
 312:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 313:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Reset DMA2D control registers*/
 314:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->Instance->CR = 0;
 315:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->Instance->FGOR = 0;
 316:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->Instance->BGOR = 0;  
ARM GAS  /tmp/ccSyzCiQ.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->Instance->FGPFCCR = 0;
 318:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->Instance->BGPFCCR = 0;  
 319:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->Instance->OPFCCR = 0;
 320:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 321:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Update error code */
 322:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 323:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 324:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Initialize the DMA2D state*/
 325:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State  = HAL_DMA2D_STATE_RESET;
 326:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 327:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Release Lock */
 328:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_UNLOCK(hdma2d);
 329:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 330:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 331:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 332:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 333:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 334:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Initializes the DMA2D MSP.
 335:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
 336:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D.
 337:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval None
 338:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 339:HALLIB/Src/stm32f7xx_hal_dma2d.c **** __weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
 340:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 341:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Prevent unused argument(s) compilation warning */
 342:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   UNUSED(hdma2d);
 343:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 344:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* NOTE : This function should not be modified; when the callback is needed,
 345:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             the HAL_DMA2D_MspInit can be implemented in the user file.
 346:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    */
 347:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 348:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 349:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 350:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  DeInitializes the DMA2D MSP.
 351:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
 352:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D.
 353:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval None
 354:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 355:HALLIB/Src/stm32f7xx_hal_dma2d.c **** __weak void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
 356:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 357:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Prevent unused argument(s) compilation warning */
 358:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   UNUSED(hdma2d);
 359:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 360:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* NOTE : This function should not be modified; when the callback is needed,
 361:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             the HAL_DMA2D_MspDeInit can be implemented in the user file.
 362:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    */
 363:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 364:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 365:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 366:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @}
 367:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 368:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 369:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 370:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /** @defgroup DMA2D_Exported_Functions_Group2 IO operation functions
 371:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  *  @brief   IO operation functions  
 372:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  *
 373:HALLIB/Src/stm32f7xx_hal_dma2d.c **** @verbatim   
ARM GAS  /tmp/ccSyzCiQ.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  ===============================================================================
 375:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                       #####  IO operation functions  #####
 376:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  ===============================================================================  
 377:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     [..]  This section provides functions allowing to:
 378:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Configure the pdata, destination address and data size then 
 379:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           start the DMA2D transfer.
 380:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Configure the source for foreground and background, destination address 
 381:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           and data size then start a MultiBuffer DMA2D transfer.
 382:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Configure the pdata, destination address and data size then 
 383:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           start the DMA2D transfer with interrupt.
 384:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Configure the source for foreground and background, destination address 
 385:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           and data size then start a MultiBuffer DMA2D transfer with interrupt.
 386:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Abort DMA2D transfer.
 387:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Suspend DMA2D transfer.
 388:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Resume DMA2D transfer. 
 389:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Enable CLUT transfer.      
 390:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Configure CLUT loading then start transfer in polling mode.
 391:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Configure CLUT loading then start transfer in interrupt mode.
 392:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Abort DMA2D CLUT loading.
 393:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Suspend DMA2D CLUT loading.
 394:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Resume DMA2D CLUT loading. 
 395:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Poll for transfer complete.
 396:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) handle DMA2D interrupt request.
 397:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Transfer watermark callback.
 398:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) CLUT Transfer Complete callback.
 399:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
 400:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
 401:HALLIB/Src/stm32f7xx_hal_dma2d.c **** @endverbatim
 402:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @{
 403:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 404:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 405:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 406:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Start the DMA2D Transfer.
 407:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d     Pointer to a DMA2D_HandleTypeDef structure that contains
 408:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                     the configuration information for the DMA2D.  
 409:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  pdata      Configure the source memory Buffer address if 
 410:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                     Memory-to-Memory or Memory-to-Memory with pixel format 
 411:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                     conversion mode is selected, or configure 
 412:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                     the color value if Register-to-Memory mode is selected.
 413:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  DstAddress The destination memory Buffer address.
 414:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Width      The width of data to be transferred from source to destination (expressed in
 415:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Height     The height of data to be transferred from source to destination (expressed i
 416:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 417:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 418:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress,
 419:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 420:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 421:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_LINE(Height));
 422:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_PIXEL(Width));
 423:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 424:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process locked */
 425:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);
 426:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 427:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change DMA2D peripheral state */
 428:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;
 429:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 430:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure the source, destination address and the data size */
ARM GAS  /tmp/ccSyzCiQ.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 432:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 433:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Enable the Peripheral */
 434:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_DMA2D_ENABLE(hdma2d);
 435:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 436:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 437:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 438:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 439:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 440:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Start the DMA2D Transfer with interrupt enabled.
 441:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d     Pointer to a DMA2D_HandleTypeDef structure that contains
 442:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                     the configuration information for the DMA2D.  
 443:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  pdata      Configure the source memory Buffer address if 
 444:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                     the Memory-to-Memory or Memory-to-Memory with pixel format 
 445:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                     conversion mode is selected, or configure 
 446:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                     the color value if Register-to-Memory mode is selected.
 447:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  DstAddress The destination memory Buffer address.
 448:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Width      The width of data to be transferred from source to destination (expressed in
 449:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Height     The height of data to be transferred from source to destination (expressed i
 450:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 451:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 452:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddre
 453:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 454:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 455:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_LINE(Height));
 456:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_PIXEL(Width));
 457:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 458:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process locked */
 459:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);
 460:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 461:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change DMA2D peripheral state */
 462:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;
 463:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 464:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure the source, destination address and the data size */
 465:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 466:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 467:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Enable the transfer complete, transfer error and configuration error interrupts */
 468:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 469:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 470:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Enable the Peripheral */
 471:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_DMA2D_ENABLE(hdma2d);
 472:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 473:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 474:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 475:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 476:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 477:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Start the multi-source DMA2D Transfer.
 478:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d      Pointer to a DMA2D_HandleTypeDef structure that contains
 479:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                      the configuration information for the DMA2D.  
 480:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  SrcAddress1 The source memory Buffer address for the foreground layer.
 481:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  SrcAddress2 The source memory Buffer address for the background layer.
 482:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  DstAddress  The destination memory Buffer address.
 483:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Width       The width of data to be transferred from source to destination (expressed i
 484:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Height      The height of data to be transferred from source to destination (expressed 
 485:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 486:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 487:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_BlendingStart(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32
ARM GAS  /tmp/ccSyzCiQ.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 489:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 490:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_LINE(Height));
 491:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_PIXEL(Width));  
 492:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 493:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process locked */
 494:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);
 495:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 496:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change DMA2D peripheral state */
 497:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY; 
 498:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 499:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure DMA2D Stream source2 address */
 500:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 501:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 502:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure the source, destination address and the data size */
 503:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 504:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 505:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Enable the Peripheral */
 506:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_DMA2D_ENABLE(hdma2d);
 507:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 508:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 509:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 510:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 511:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 512:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Start the multi-source DMA2D Transfer with interrupt enabled.
 513:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d     Pointer to a DMA2D_HandleTypeDef structure that contains
 514:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                     the configuration information for the DMA2D.  
 515:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  SrcAddress1 The source memory Buffer address for the foreground layer.
 516:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  SrcAddress2 The source memory Buffer address for the background layer.
 517:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  DstAddress  The destination memory Buffer address.
 518:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Width       The width of data to be transferred from source to destination (expressed i
 519:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Height      The height of data to be transferred from source to destination (expressed 
 520:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 521:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 522:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uin
 523:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 524:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 525:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_LINE(Height));
 526:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_PIXEL(Width));
 527:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 528:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process locked */
 529:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);
 530:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 531:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change DMA2D peripheral state */
 532:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;
 533:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  
 534:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure DMA2D Stream source2 address */
 535:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 536:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 537:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure the source, destination address and the data size */
 538:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 539:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 540:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Enable the transfer complete, transfer error and configuration error interrupts */
 541:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 542:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 543:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Enable the Peripheral */
 544:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_DMA2D_ENABLE(hdma2d);
ARM GAS  /tmp/ccSyzCiQ.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 546:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 547:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 548:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 549:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 550:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Abort the DMA2D Transfer.
 551:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
 552:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                  the configuration information for the DMA2D.
 553:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 554:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 555:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
 556:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 557:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tickstart = 0;
 558:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 559:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Abort the DMA2D transfer */
 560:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* START bit is reset to make sure not to set it again, in the event the HW clears it
 561:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      between the register read and the register write by the CPU (writing 0 has no 
 562:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      effect on START bitvalue) */
 563:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 564:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 565:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Get tick */
 566:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   tickstart = HAL_GetTick();
 567:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 568:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check if the DMA2D is effectively disabled */
 569:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   while((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 570:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 571:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 572:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 573:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Update error code */
 574:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 575:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 576:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Change the DMA2D state */
 577:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 578:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 579:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Process Unlocked */
 580:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_UNLOCK(hdma2d);
 581:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 582:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       return HAL_TIMEOUT;
 583:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 584:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 585:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 586:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
 587:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);  
 588:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 589:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change the DMA2D state*/
 590:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_READY;
 591:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 592:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Unlocked */
 593:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_UNLOCK(hdma2d);  
 594:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 595:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 596:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 597:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 598:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 599:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Suspend the DMA2D Transfer.
 600:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
 601:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D. 
ARM GAS  /tmp/ccSyzCiQ.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 603:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 604:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_Suspend(DMA2D_HandleTypeDef *hdma2d)
 605:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 606:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tickstart = 0;
 607:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 608:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Suspend the DMA2D transfer */
 609:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* START bit is reset to make sure not to set it again, in the event the HW clears it
 610:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      between the register read and the register write by the CPU (writing 0 has no 
 611:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      effect on START bitvalue). */
 612:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_SUSP|DMA2D_CR_START, DMA2D_CR_SUSP);
 613:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 614:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Get tick */
 615:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   tickstart = HAL_GetTick();
 616:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 617:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check if the DMA2D is effectively suspended */
 618:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   while (((hdma2d->Instance->CR & DMA2D_CR_SUSP) != DMA2D_CR_SUSP) \
 619:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     && ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START))
 620:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 621:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_SUSPEND)
 622:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 623:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Update error code */
 624:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 625:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 626:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Change the DMA2D state */
 627:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 628:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 629:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       return HAL_TIMEOUT;
 630:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 631:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 632:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 633:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    /* Check whether or not a transfer is actually suspended and change the DMA2D state accordingly 
 634:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if ((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 635:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {    
 636:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     hdma2d->State = HAL_DMA2D_STATE_SUSPEND;
 637:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 638:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   else
 639:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 640:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Make sure SUSP bit is cleared since it is meaningless 
 641:HALLIB/Src/stm32f7xx_hal_dma2d.c ****        when no tranfer is on-going */
 642:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     CLEAR_BIT(hdma2d->Instance->CR, DMA2D_CR_SUSP);
 643:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 644:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 645:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 646:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 647:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 648:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 649:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Resume the DMA2D Transfer.
 650:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
 651:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D.  
 652:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 653:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 654:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_Resume(DMA2D_HandleTypeDef *hdma2d)
 655:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 656:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the SUSP and START bits */
 657:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if((hdma2d->Instance->CR & (DMA2D_CR_SUSP | DMA2D_CR_START)) == (DMA2D_CR_SUSP | DMA2D_CR_START))
 658:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
ARM GAS  /tmp/ccSyzCiQ.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Ongoing transfer is suspended: change the DMA2D state before resuming */
 660:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     hdma2d->State = HAL_DMA2D_STATE_BUSY;
 661:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 662:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 663:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Resume the DMA2D transfer */
 664:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* START bit is reset to make sure not to set it again, in the event the HW clears it
 665:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      between the register read and the register write by the CPU (writing 0 has no 
 666:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      effect on START bitvalue). */
 667:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   CLEAR_BIT(hdma2d->Instance->CR, (DMA2D_CR_SUSP|DMA2D_CR_START));  
 668:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 669:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 670:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 671:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 672:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 673:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 674:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Enable the DMA2D CLUT Transfer.
 675:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d   Pointer to a DMA2D_HandleTypeDef structure that contains
 676:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   the configuration information for the DMA2D.
 677:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  LayerIdx DMA2D Layer index.
 678:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   This parameter can be one of the following values:
 679:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   0(background) / 1(foreground)
 680:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 681:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 682:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_EnableCLUT(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
 683:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {  
 684:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 685:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_LAYER(LayerIdx));
 686:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 687:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process locked */
 688:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);
 689:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 690:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change DMA2D peripheral state */
 691:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 692:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 693:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(LayerIdx == 0)
 694:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 695:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Enable the background CLUT loading */
 696:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     SET_BIT(hdma2d->Instance->BGPFCCR, DMA2D_BGPFCCR_START);
 697:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 698:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   else
 699:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 700:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Enable the foreground CLUT loading */
 701:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     SET_BIT(hdma2d->Instance->FGPFCCR, DMA2D_FGPFCCR_START);    
 702:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 703:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 704:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 705:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 706:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 707:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 708:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 709:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Start DMA2D CLUT Loading.
 710:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d   Pointer to a DMA2D_HandleTypeDef structure that contains
 711:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   the configuration information for the DMA2D.
 712:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  CLUTCfg  Pointer to a DMA2D_CLUTCfgTypeDef structure that contains
 713:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   the configuration information for the color look up table.
 714:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  LayerIdx DMA2D Layer index.
 715:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   This parameter can be one of the following values:
ARM GAS  /tmp/ccSyzCiQ.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   0(background) / 1(foreground)
 717:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @note Invoking this API is similar to calling HAL_DMA2D_ConfigCLUT() then HAL_DMA2D_EnableCLUT(
 718:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 719:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 720:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_CLUTLoad(DMA2D_HandleTypeDef *hdma2d, DMA2D_CLUTCfgTypeDef CLUTCfg, uin
 721:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 722:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 723:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_LAYER(LayerIdx));   
 724:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_CLUT_CM(CLUTCfg.CLUTColorMode));
 725:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_CLUT_SIZE(CLUTCfg.Size));
 726:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 727:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process locked */
 728:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);
 729:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 730:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change DMA2D peripheral state */
 731:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 732:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 733:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure the CLUT of the background DMA2D layer */
 734:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(LayerIdx == 0)
 735:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 736:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write background CLUT memory address */
 737:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 738:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 739:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write background CLUT size and CLUT color mode */
 740:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM), 
 741:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_BGPFCCR_CCM_P
 742:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 743:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Enable the CLUT loading for the background */
 744:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     SET_BIT(hdma2d->Instance->BGPFCCR, DMA2D_BGPFCCR_START);
 745:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 746:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure the CLUT of the foreground DMA2D layer */
 747:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   else
 748:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 749:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write foreground CLUT memory address */
 750:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 751:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 752:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write foreground CLUT size and CLUT color mode */
 753:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), 
 754:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_FGPFCCR_CCM_P
 755:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 756:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  /* Enable the CLUT loading for the foreground */
 757:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     SET_BIT(hdma2d->Instance->FGPFCCR, DMA2D_FGPFCCR_START);  
 758:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 759:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 760:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 761:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 762:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 763:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 764:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Start DMA2D CLUT Loading with interrupt enabled.
 765:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d   Pointer to a DMA2D_HandleTypeDef structure that contains
 766:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   the configuration information for the DMA2D.
 767:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  CLUTCfg  Pointer to a DMA2D_CLUTCfgTypeDef structure that contains
 768:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   the configuration information for the color look up table.
 769:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  LayerIdx DMA2D Layer index.
 770:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   This parameter can be one of the following values:
 771:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   0(background) / 1(foreground)
 772:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
ARM GAS  /tmp/ccSyzCiQ.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 774:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_CLUTLoad_IT(DMA2D_HandleTypeDef *hdma2d, DMA2D_CLUTCfgTypeDef CLUTCfg, 
 775:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 776:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 777:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_LAYER(LayerIdx));   
 778:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_CLUT_CM(CLUTCfg.CLUTColorMode));
 779:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_CLUT_SIZE(CLUTCfg.Size));
 780:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 781:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process locked */
 782:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);
 783:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 784:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change DMA2D peripheral state */
 785:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 786:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 787:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure the CLUT of the background DMA2D layer */
 788:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(LayerIdx == 0)
 789:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 790:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write background CLUT memory address */
 791:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 792:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 793:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write background CLUT size and CLUT color mode */
 794:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM), 
 795:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_BGPFCCR_CCM_P
 796:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             
 797:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Enable the CLUT Transfer Complete, transfer Error, configuration Error and CLUT Access Error
 798:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);         
 799:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 800:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Enable the CLUT loading for the background */
 801:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     SET_BIT(hdma2d->Instance->BGPFCCR, DMA2D_BGPFCCR_START);
 802:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 803:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure the CLUT of the foreground DMA2D layer */
 804:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   else
 805:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 806:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write foreground CLUT memory address */
 807:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 808:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 809:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write foreground CLUT size and CLUT color mode */
 810:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), 
 811:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_FGPFCCR_CCM_P
 812:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             
 813:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Enable the CLUT Transfer Complete, transfer Error, configuration Error and CLUT Access Error
 814:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);         
 815:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 816:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Enable the CLUT loading for the foreground */
 817:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     SET_BIT(hdma2d->Instance->FGPFCCR, DMA2D_FGPFCCR_START);  
 818:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 819:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 820:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 821:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 822:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 823:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 824:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Abort the DMA2D CLUT loading.
 825:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d  Pointer to a DMA2D_HandleTypeDef structure that contains
 826:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                  the configuration information for the DMA2D.
 827:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  LayerIdx DMA2D Layer index.
 828:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   This parameter can be one of the following values:
 829:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   0(background) / 1(foreground)  
ARM GAS  /tmp/ccSyzCiQ.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 831:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 832:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
 833:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 834:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tickstart  = 0;
 835:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register 
 836:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 837:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Abort the CLUT loading */
 838:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 839:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 840:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* If foreground CLUT loading is considered, update local variables */ 
 841:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(LayerIdx == 1)
 842:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 843:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     reg  = &(hdma2d->Instance->FGPFCCR);
 844:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 845:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 846:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 847:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Get tick */
 848:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   tickstart = HAL_GetTick();
 849:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  
 850:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check if the CLUT loading is aborted */          
 851:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   while((*reg & DMA2D_BGPFCCR_START) != RESET)
 852:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 853:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 854:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 855:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Update error code */
 856:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 857:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 858:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Change the DMA2D state */
 859:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 860:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 861:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Process Unlocked */
 862:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_UNLOCK(hdma2d);
 863:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 864:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       return HAL_TIMEOUT;
 865:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 866:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 867:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 868:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error 
 869:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);      
 870:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    
 871:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change the DMA2D state*/
 872:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_READY;
 873:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      
 874:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Unlocked */
 875:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_UNLOCK(hdma2d);
 876:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 877:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 878:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 879:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 880:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 881:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Suspend the DMA2D CLUT loading.
 882:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
 883:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D. 
 884:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  LayerIdx DMA2D Layer index.
 885:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   This parameter can be one of the following values:
 886:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   0(background) / 1(foreground)    
ARM GAS  /tmp/ccSyzCiQ.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 888:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 889:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Suspend(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
 890:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 891:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tickstart = 0;
 892:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register 
 893:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 894:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Suspend the CLUT loading */
 895:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   SET_BIT(hdma2d->Instance->CR, DMA2D_CR_SUSP); 
 896:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 897:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* If foreground CLUT loading is considered, update local variables */ 
 898:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(LayerIdx == 1)
 899:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 900:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     reg  = &(hdma2d->Instance->FGPFCCR);
 901:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }   
 902:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 903:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Get tick */
 904:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   tickstart = HAL_GetTick();
 905:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 906:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check if the CLUT loading is suspended */
 907:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   while (((hdma2d->Instance->CR & DMA2D_CR_SUSP) != DMA2D_CR_SUSP) \
 908:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     && ((*reg & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START))
 909:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 910:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_SUSPEND)
 911:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 912:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Update error code */
 913:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 914:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 915:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Change the DMA2D state */
 916:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 917:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 918:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       return HAL_TIMEOUT;
 919:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 920:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 921:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 922:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    /* Check whether or not a transfer is actually suspended and change the DMA2D state accordingly 
 923:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if ((*reg & DMA2D_BGPFCCR_START) != RESET)
 924:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {    
 925:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     hdma2d->State = HAL_DMA2D_STATE_SUSPEND;
 926:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 927:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   else
 928:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 929:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Make sure SUSP bit is cleared since it is meaningless 
 930:HALLIB/Src/stm32f7xx_hal_dma2d.c ****        when no tranfer is on-going */
 931:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     CLEAR_BIT(hdma2d->Instance->CR, DMA2D_CR_SUSP);
 932:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }  
 933:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 934:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 935:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 936:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 937:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 938:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Resume the DMA2D CLUT loading.
 939:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
 940:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D. 
 941:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  LayerIdx DMA2D Layer index.
 942:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   This parameter can be one of the following values:
 943:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   0(background) / 1(foreground)      
ARM GAS  /tmp/ccSyzCiQ.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 945:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 946:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Resume(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
 947:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 948:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the SUSP and START bits for background or foreground CLUT loading */
 949:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(LayerIdx == 0)
 950:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {  
 951:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Background CLUT loading suspension check */
 952:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if (((hdma2d->Instance->CR & DMA2D_CR_SUSP) == DMA2D_CR_SUSP)
 953:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       && ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START))
 954:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 955:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Ongoing CLUT loading is suspended: change the DMA2D state before resuming */
 956:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->State = HAL_DMA2D_STATE_BUSY;
 957:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 958:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 959:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   else
 960:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 961:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Foreground CLUT loading suspension check */
 962:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if (((hdma2d->Instance->CR & DMA2D_CR_SUSP) == DMA2D_CR_SUSP)
 963:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       && ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START))
 964:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 965:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Ongoing CLUT loading is suspended: change the DMA2D state before resuming */
 966:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->State = HAL_DMA2D_STATE_BUSY;
 967:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }  
 968:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 969:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 970:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Resume the CLUT loading */
 971:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   CLEAR_BIT(hdma2d->Instance->CR, DMA2D_CR_SUSP);  
 972:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 973:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
 974:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 975:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 976:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 977:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 978:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 979:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Polling for transfer complete or CLUT loading.
 980:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
 981:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D. 
 982:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Timeout Timeout duration
 983:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
 984:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
 985:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
 986:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
 987:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tickstart = 0;
 988:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __IO uint32_t isrflags = 0x0;  
 989:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 990:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Polling for DMA2D transfer */
 991:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 992:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 993:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    /* Get tick */
 994:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    tickstart = HAL_GetTick();
 995:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 996:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 997:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 998:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       isrflags = READ_REG(hdma2d->Instance->ISR); 
 999:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
1000:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
ARM GAS  /tmp/ccSyzCiQ.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         if ((isrflags & DMA2D_FLAG_CE) != RESET)
1002:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
1003:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
1004:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
1005:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         if ((isrflags & DMA2D_FLAG_TE) != RESET)        
1006:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
1007:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
1008:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
1009:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Clear the transfer and configuration error flags */
1010:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
1011:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1012:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Change DMA2D state */
1013:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         hdma2d->State = HAL_DMA2D_STATE_ERROR;
1014:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1015:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Process unlocked */
1016:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         __HAL_UNLOCK(hdma2d);
1017:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
1018:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         return HAL_ERROR;
1019:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
1020:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Check for the Timeout */
1021:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if(Timeout != HAL_MAX_DELAY)
1022:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
1023:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
1024:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
1025:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           /* Update error code */
1026:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
1027:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1028:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           /* Change the DMA2D state */
1029:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
1030:HALLIB/Src/stm32f7xx_hal_dma2d.c ****          
1031:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           /* Process unlocked */
1032:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           __HAL_UNLOCK(hdma2d);
1033:HALLIB/Src/stm32f7xx_hal_dma2d.c ****            
1034:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           return HAL_TIMEOUT;
1035:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
1036:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }        
1037:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1038:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1039:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Polling for CLUT loading (foreground or background) */
1040:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
1041:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
1042:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1043:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Get tick */
1044:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     tickstart = HAL_GetTick();
1045:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    
1046:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
1047:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
1048:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       isrflags = READ_REG(hdma2d->Instance->ISR);   
1049:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
1050:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {      
1051:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         if ((isrflags & DMA2D_FLAG_CAE) != RESET)
1052:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
1053:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
1054:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }   
1055:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         if ((isrflags & DMA2D_FLAG_CE) != RESET)             
1056:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
1057:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
ARM GAS  /tmp/ccSyzCiQ.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
1059:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         if ((isrflags & DMA2D_FLAG_TE) != RESET)        
1060:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
1061:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
1062:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
1063:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
1064:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
1065:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
1066:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Change DMA2D state */
1067:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         hdma2d->State= HAL_DMA2D_STATE_ERROR;
1068:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
1069:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Process unlocked */
1070:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         __HAL_UNLOCK(hdma2d);
1071:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           
1072:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         return HAL_ERROR;      
1073:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }      
1074:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Check for the Timeout */
1075:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if(Timeout != HAL_MAX_DELAY)
1076:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
1077:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
1078:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
1079:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           /* Update error code */
1080:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
1081:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1082:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           /* Change the DMA2D state */
1083:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
1084:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
1085:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           /* Process unlocked */
1086:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           __HAL_UNLOCK(hdma2d);
1087:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                     
1088:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           return HAL_TIMEOUT;
1089:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
1090:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }      
1091:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1092:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1093:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1094:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Clear the transfer complete and CLUT loading flags */
1095:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
1096:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1097:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change DMA2D state */
1098:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_READY;
1099:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1100:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process unlocked */
1101:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_UNLOCK(hdma2d);
1102:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1103:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
1104:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
1105:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1106:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Handle DMA2D interrupt request.
1107:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
1108:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D.  
1109:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
1110:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1111:HALLIB/Src/stm32f7xx_hal_dma2d.c **** void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
1112:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
1113:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
1114:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t crflags = READ_REG(hdma2d->Instance->CR);
ARM GAS  /tmp/ccSyzCiQ.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
1116:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Transfer Error Interrupt management ***************************************/
1117:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if ((isrflags & DMA2D_FLAG_TE) != RESET)
1118:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1119:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if ((crflags & DMA2D_IT_TE) != RESET)    
1120:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
1121:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Disable the transfer Error interrupt */
1122:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);  
1123:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1124:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Update error code */
1125:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
1126:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1127:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Clear the transfer error flag */
1128:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
1129:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1130:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Change DMA2D state */
1131:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->State = HAL_DMA2D_STATE_ERROR;
1132:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1133:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Process Unlocked */
1134:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_UNLOCK(hdma2d);       
1135:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
1136:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if(hdma2d->XferErrorCallback != NULL)
1137:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
1138:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Transfer error Callback */
1139:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         hdma2d->XferErrorCallback(hdma2d);
1140:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
1141:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1142:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1143:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configuration Error Interrupt management **********************************/
1144:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if ((isrflags & DMA2D_FLAG_CE) != RESET)
1145:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1146:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if ((crflags & DMA2D_IT_CE) != RESET)    
1147:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {  
1148:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Disable the Configuration Error interrupt */
1149:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
1150:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1151:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Clear the Configuration error flag */
1152:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
1153:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1154:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Update error code */
1155:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
1156:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1157:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Change DMA2D state */
1158:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->State = HAL_DMA2D_STATE_ERROR;
1159:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1160:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Process Unlocked */
1161:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_UNLOCK(hdma2d);       
1162:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
1163:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if(hdma2d->XferErrorCallback != NULL)
1164:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
1165:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Transfer error Callback */
1166:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         hdma2d->XferErrorCallback(hdma2d);
1167:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
1168:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1169:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1170:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* CLUT access Error Interrupt management ***********************************/
1171:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if ((isrflags & DMA2D_FLAG_CAE) != RESET)
ARM GAS  /tmp/ccSyzCiQ.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1173:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if ((crflags & DMA2D_IT_CAE) != RESET)    
1174:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {    
1175:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Disable the CLUT access error interrupt */
1176:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
1177:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1178:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Clear the CLUT access error flag */
1179:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
1180:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1181:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Update error code */
1182:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
1183:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1184:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Change DMA2D state */
1185:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->State = HAL_DMA2D_STATE_ERROR;
1186:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1187:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Process Unlocked */
1188:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_UNLOCK(hdma2d);       
1189:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
1190:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if(hdma2d->XferErrorCallback != NULL)
1191:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
1192:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Transfer error Callback */
1193:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         hdma2d->XferErrorCallback(hdma2d);
1194:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
1195:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1196:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }  
1197:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Transfer watermark Interrupt management **********************************/
1198:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if ((isrflags & DMA2D_FLAG_TW) != RESET)
1199:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1200:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if ((crflags & DMA2D_IT_TW) != RESET)    
1201:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {    
1202:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Disable the transfer watermark interrupt */
1203:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
1204:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1205:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Clear the transfer watermark flag */  
1206:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
1207:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1208:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Transfer watermark Callback */
1209:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       HAL_DMA2D_LineEventCallback(hdma2d);
1210:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1211:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }  
1212:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Transfer Complete Interrupt management ************************************/
1213:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if ((isrflags & DMA2D_FLAG_TC) != RESET)
1214:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1215:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if ((crflags & DMA2D_IT_TC) != RESET)    
1216:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {   
1217:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Disable the transfer complete interrupt */
1218:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
1219:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1220:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Clear the transfer complete flag */  
1221:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
1222:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1223:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Update error code */
1224:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
1225:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1226:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Change DMA2D state */
1227:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->State = HAL_DMA2D_STATE_READY;
1228:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
ARM GAS  /tmp/ccSyzCiQ.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Process Unlocked */
1230:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_UNLOCK(hdma2d);       
1231:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
1232:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if(hdma2d->XferCpltCallback != NULL)
1233:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
1234:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         /* Transfer complete Callback */
1235:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         hdma2d->XferCpltCallback(hdma2d);
1236:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }         
1237:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1238:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1239:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* CLUT Transfer Complete Interrupt management ******************************/
1240:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if ((isrflags & DMA2D_FLAG_CTC) != RESET)
1241:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1242:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if ((crflags & DMA2D_IT_CTC) != RESET)    
1243:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {    
1244:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Disable the CLUT transfer complete interrupt */
1245:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
1246:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1247:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Clear the CLUT transfer complete flag */  
1248:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
1249:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1250:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Update error code */
1251:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
1252:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1253:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Change DMA2D state */
1254:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       hdma2d->State = HAL_DMA2D_STATE_READY;
1255:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1256:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* Process Unlocked */
1257:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       __HAL_UNLOCK(hdma2d);       
1258:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
1259:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       /* CLUT Transfer complete Callback */
1260:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
1261:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1262:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }  
1263:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1264:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
1265:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1266:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1267:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Transfer watermark callback.
1268:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
1269:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D.
1270:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval None
1271:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1272:HALLIB/Src/stm32f7xx_hal_dma2d.c **** __weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
1273:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
1274:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Prevent unused argument(s) compilation warning */
1275:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   UNUSED(hdma2d);
1276:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1277:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1278:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             the HAL_DMA2D_LineEventCallback can be implemented in the user file.
1279:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    */
1280:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
1281:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1282:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1283:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  CLUT Transfer Complete callback.
1284:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
1285:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D.
ARM GAS  /tmp/ccSyzCiQ.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval None
1287:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1288:HALLIB/Src/stm32f7xx_hal_dma2d.c **** __weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
1289:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
1290:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Prevent unused argument(s) compilation warning */
1291:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   UNUSED(hdma2d);
1292:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1293:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1294:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
1295:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    */
1296:HALLIB/Src/stm32f7xx_hal_dma2d.c **** } 
1297:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1298:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1299:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @}
1300:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1301:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1302:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /** @defgroup DMA2D_Exported_Functions_Group3 Peripheral Control functions
1303:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  *  @brief    Peripheral Control functions 
1304:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  *
1305:HALLIB/Src/stm32f7xx_hal_dma2d.c **** @verbatim   
1306:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  ===============================================================================
1307:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                     ##### Peripheral Control functions #####
1308:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  ===============================================================================  
1309:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     [..]  This section provides functions allowing to:
1310:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Configure the DMA2D foreground or background layer parameters.
1311:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Configure the DMA2D CLUT transfer.
1312:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Configure the line watermark
1313:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Configure the dead time value.
1314:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Enable or disable the dead time value functionality.      
1315:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           
1316:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1317:HALLIB/Src/stm32f7xx_hal_dma2d.c **** @endverbatim
1318:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @{
1319:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1320:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1321:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1322:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Configure the DMA2D Layer according to the specified
1323:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *         parameters in the DMA2D_InitTypeDef and create the associated handle.
1324:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
1325:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D.
1326:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  LayerIdx DMA2D Layer index.
1327:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   This parameter can be one of the following values:
1328:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   0(background) / 1(foreground)
1329:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
1330:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1331:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
1332:HALLIB/Src/stm32f7xx_hal_dma2d.c **** { 
1333:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
1334:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1335:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t regMask = 0, regValue = 0;
1336:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1337:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
1338:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_LAYER(LayerIdx));  
1339:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
1340:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(hdma2d->Init.Mode != DMA2D_R2M)
1341:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {  
1342:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     assert_param(IS_DMA2D_INPUT_COLOR_MODE(pLayerCfg->InputColorMode));
ARM GAS  /tmp/ccSyzCiQ.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if(hdma2d->Init.Mode != DMA2D_M2M)
1344:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
1345:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
1346:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1347:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1348:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1349:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process locked */
1350:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);
1351:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1352:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change DMA2D peripheral state */
1353:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;  
1354:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1355:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* DMA2D BGPFCR register configuration -----------------------------------*/
1356:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Prepare the value to be written to the BGPFCCR register */
1357:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1358:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
1359:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
1360:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1361:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #if defined (DMA2D_FGPFCCR_AI) && defined (DMA2D_BGPFCCR_AI)
1362:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   regValue |= (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos);
1363:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   regMask  |= DMA2D_BGPFCCR_AI;  
1364:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #endif /* (DMA2D_FGPFCCR_AI) && (DMA2D_BGPFCCR_AI)  */ 
1365:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1366:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
1367:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
1368:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   regMask  |= DMA2D_BGPFCCR_RBS;  
1369:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #endif  
1370:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1371:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8
1372:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1373:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
1374:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1375:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   else
1376:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1377:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
1378:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1379:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1380:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure the background DMA2D layer */
1381:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(LayerIdx == 0)
1382:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1383:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write DMA2D BGPFCCR register */
1384:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
1385:HALLIB/Src/stm32f7xx_hal_dma2d.c ****               
1386:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* DMA2D BGOR register configuration -------------------------------------*/  
1387:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
1388:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1389:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* DMA2D BGCOLR register configuration -------------------------------------*/ 
1390:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_
1391:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {    
1392:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_G
1393:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }    
1394:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1395:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure the foreground DMA2D layer */
1396:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   else
1397:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1398:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      /* Write DMA2D FGPFCCR register */
1399:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
ARM GAS  /tmp/ccSyzCiQ.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1401:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* DMA2D FGOR register configuration -------------------------------------*/
1402:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
1403:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    
1404:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* DMA2D FGCOLR register configuration -------------------------------------*/   
1405:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_
1406:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
1407:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_G
1408:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }   
1409:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }   
1410:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Initialize the DMA2D state*/
1411:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_READY;
1412:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1413:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process unlocked */
1414:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_UNLOCK(hdma2d);  
1415:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1416:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
1417:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
1418:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1419:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1420:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Configure the DMA2D CLUT Transfer.
1421:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d   Pointer to a DMA2D_HandleTypeDef structure that contains
1422:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   the configuration information for the DMA2D.
1423:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  CLUTCfg  Pointer to a DMA2D_CLUTCfgTypeDef structure that contains
1424:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   the configuration information for the color look up table.
1425:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  LayerIdx DMA2D Layer index.
1426:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   This parameter can be one of the following values:
1427:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                   0(background) / 1(foreground)
1428:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
1429:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1430:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_ConfigCLUT(DMA2D_HandleTypeDef *hdma2d, DMA2D_CLUTCfgTypeDef CLUTCfg, u
1431:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
1432:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
1433:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_LAYER(LayerIdx));   
1434:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_CLUT_CM(CLUTCfg.CLUTColorMode));
1435:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_CLUT_SIZE(CLUTCfg.Size));
1436:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1437:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process locked */
1438:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);
1439:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1440:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Change DMA2D peripheral state */
1441:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;     
1442:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1443:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure the CLUT of the background DMA2D layer */
1444:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if(LayerIdx == 0)
1445:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1446:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write background CLUT memory address */
1447:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
1448:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      
1449:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write background CLUT size and CLUT color mode */
1450:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM), 
1451:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_BGPFCCR_CCM_P
1452:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  }
1453:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  /* Configure the CLUT of the foreground DMA2D layer */
1454:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  else
1455:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  {
1456:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    /* Write foreground CLUT memory address */
ARM GAS  /tmp/ccSyzCiQ.s 			page 27


1457:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
1458:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      
1459:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write foreground CLUT size and CLUT color mode */
1460:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), 
1461:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_FGPFCCR_CCM_P
1462:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1463:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1464:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Set the DMA2D state to Ready*/
1465:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_READY;
1466:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1467:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process unlocked */
1468:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_UNLOCK(hdma2d); 
1469:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1470:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
1471:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
1472:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1473:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1474:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1475:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Configure the line watermark.
1476:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
1477:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D.
1478:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Line   Line Watermark configuration (maximum 16-bit long value expected).
1479:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @note   HAL_DMA2D_ProgramLineEvent() API enables the transfer watermark interrupt.
1480:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @note   The transfer watermark interrupt is disabled once it has occurred.
1481:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
1482:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1483:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1484:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_ProgramLineEvent(DMA2D_HandleTypeDef *hdma2d, uint32_t Line)
1485:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
1486:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
1487:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   assert_param(IS_DMA2D_LINEWATERMARK(Line));
1488:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1489:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if (Line > DMA2D_LWR_LW)
1490:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1491:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     return HAL_ERROR;  
1492:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1493:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   else
1494:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {      
1495:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Process locked */
1496:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     __HAL_LOCK(hdma2d);
1497:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1498:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Change DMA2D peripheral state */
1499:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     hdma2d->State = HAL_DMA2D_STATE_BUSY;
1500:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1501:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Sets the Line watermark configuration */
1502:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     WRITE_REG(hdma2d->Instance->LWR, Line);
1503:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1504:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Enable the Line interrupt */
1505:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TW);
1506:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
1507:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Initialize the DMA2D state*/
1508:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     hdma2d->State = HAL_DMA2D_STATE_READY;
1509:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1510:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Process unlocked */
1511:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     __HAL_UNLOCK(hdma2d);  
1512:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1513:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     return HAL_OK;
ARM GAS  /tmp/ccSyzCiQ.s 			page 28


1514:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }  
1515:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
1516:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1517:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1518:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief Enable DMA2D dead time feature.
1519:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param hdma2d DMA2D handle.
1520:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
1521:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1522:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_EnableDeadTime(DMA2D_HandleTypeDef *hdma2d)
1523:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
1524:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Locked */
1525:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);
1526:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1527:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;
1528:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1529:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Set DMA2D_AMTCR EN bit */
1530:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   SET_BIT(hdma2d->Instance->AMTCR, DMA2D_AMTCR_EN);
1531:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1532:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_READY;
1533:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1534:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Unlocked */
1535:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_UNLOCK(hdma2d);
1536:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1537:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
1538:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
1539:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1540:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1541:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief Disable DMA2D dead time feature.
1542:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param hdma2d DMA2D handle.
1543:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
1544:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1545:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_DisableDeadTime(DMA2D_HandleTypeDef *hdma2d)
1546:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
1547:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Locked */
1548:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);
1549:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1550:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;
1551:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1552:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Clear DMA2D_AMTCR EN bit */
1553:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   CLEAR_BIT(hdma2d->Instance->AMTCR, DMA2D_AMTCR_EN);
1554:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1555:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_READY;
1556:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1557:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Unlocked */
1558:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_UNLOCK(hdma2d);
1559:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1560:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
1561:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
1562:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1563:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1564:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief Configure dead time.
1565:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @note The dead time value represents the guaranteed minimum number of cycles between 
1566:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *       two consecutive transactions on the AHB bus.
1567:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param hdma2d DMA2D handle.
1568:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param DeadTime dead time value.
1569:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
1570:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
ARM GAS  /tmp/ccSyzCiQ.s 			page 29


1571:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_StatusTypeDef HAL_DMA2D_ConfigDeadTime(DMA2D_HandleTypeDef *hdma2d, uint8_t DeadTime)
1572:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
1573:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Locked */
1574:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_LOCK(hdma2d);  
1575:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1576:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_BUSY;
1577:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1578:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Set DMA2D_AMTCR DT field */
1579:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   MODIFY_REG(hdma2d->Instance->AMTCR, DMA2D_AMTCR_DT, (((uint32_t) DeadTime) << DMA2D_AMTCR_DT_Pos)
1580:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1581:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->State = HAL_DMA2D_STATE_READY;
1582:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1583:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Unlocked */
1584:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   __HAL_UNLOCK(hdma2d);
1585:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1586:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return HAL_OK;
1587:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
1588:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1589:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1590:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @}
1591:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1592:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1593:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1594:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /** @defgroup DMA2D_Exported_Functions_Group4 Peripheral State and Error functions
1595:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  *  @brief    Peripheral State functions 
1596:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  *
1597:HALLIB/Src/stm32f7xx_hal_dma2d.c **** @verbatim   
1598:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  ===============================================================================
1599:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                   ##### Peripheral State and Errors functions #####
1600:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  ===============================================================================  
1601:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     [..]
1602:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     This subsection provides functions allowing to :
1603:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Get the DMA2D state
1604:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       (+) Get the DMA2D error code  
1605:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1606:HALLIB/Src/stm32f7xx_hal_dma2d.c **** @endverbatim
1607:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @{
1608:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */ 
1609:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1610:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1611:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Return the DMA2D state
1612:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
1613:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                 the configuration information for the DMA2D.  
1614:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL state
1615:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1616:HALLIB/Src/stm32f7xx_hal_dma2d.c **** HAL_DMA2D_StateTypeDef HAL_DMA2D_GetState(DMA2D_HandleTypeDef *hdma2d)
1617:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {  
1618:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return hdma2d->State;
1619:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
1620:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1621:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1622:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Return the DMA2D error code
1623:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
1624:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *               the configuration information for DMA2D.
1625:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval DMA2D Error Code
1626:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1627:HALLIB/Src/stm32f7xx_hal_dma2d.c **** uint32_t HAL_DMA2D_GetError(DMA2D_HandleTypeDef *hdma2d)
ARM GAS  /tmp/ccSyzCiQ.s 			page 30


1628:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {
1629:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return hdma2d->ErrorCode;
1630:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
1631:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1632:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1633:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @}
1634:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1635:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1636:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1637:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @}
1638:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */  
1639:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1640:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1641:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /** @defgroup DMA2D_Private_Functions DMA2D Private Functions
1642:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @{
1643:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1644:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
1645:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
1646:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @brief  Set the DMA2D transfer parameters.
1647:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  hdma2d     Pointer to a DMA2D_HandleTypeDef structure that contains
1648:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   *                     the configuration information for the specified DMA2D.  
1649:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  pdata      The source memory Buffer address
1650:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  DstAddress The destination memory Buffer address
1651:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Width      The width of data to be transferred from source to destination.
1652:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @param  Height     The height of data to be transferred from source to destination.
1653:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   * @retval HAL status
1654:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   */
1655:HALLIB/Src/stm32f7xx_hal_dma2d.c **** static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint3
1656:HALLIB/Src/stm32f7xx_hal_dma2d.c **** {  
  28              		.loc 1 1656 0
  29              		.cfi_startproc
  30              		@ args = 4, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 70B4     		push	{r4, r5, r6}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 6, -4
  40              	.LVL1:
1657:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tmp = 0;
1658:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tmp1 = 0;
1659:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tmp2 = 0;
1660:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tmp3 = 0;
1661:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tmp4 = 0;
1662:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1663:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure DMA2D data size */
1664:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Po
  41              		.loc 1 1664 0
  42 0002 0668     		ldr	r6, [r0]
  43 0004 756C     		ldr	r5, [r6, #68]
  44 0006 05F04045 		and	r5, r5, #-1073741824
  45 000a 039C     		ldr	r4, [sp, #12]
  46 000c 44EA0343 		orr	r3, r4, r3, lsl #16
  47              	.LVL2:
ARM GAS  /tmp/ccSyzCiQ.s 			page 31


  48 0010 2B43     		orrs	r3, r3, r5
  49 0012 7364     		str	r3, [r6, #68]
1665:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
1666:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Configure DMA2D destination address */
1667:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
  50              		.loc 1 1667 0
  51 0014 0368     		ldr	r3, [r0]
  52 0016 DA63     		str	r2, [r3, #60]
1668:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  
1669:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Register to memory DMA2D mode selected */
1670:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   if (hdma2d->Init.Mode == DMA2D_R2M)
  53              		.loc 1 1670 0
  54 0018 4368     		ldr	r3, [r0, #4]
  55 001a B3F5403F 		cmp	r3, #196608
  56 001e 36D1     		bne	.L2
1671:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {    
1672:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
  57              		.loc 1 1672 0
  58 0020 01F07F44 		and	r4, r1, #-16777216
  59              	.LVL3:
1673:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     tmp2 = pdata & DMA2D_OCOLR_RED_1;
  60              		.loc 1 1673 0
  61 0024 01F47F05 		and	r5, r1, #16711680
  62              	.LVL4:
1674:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
  63              		.loc 1 1674 0
  64 0028 01F47F43 		and	r3, r1, #65280
  65              	.LVL5:
1675:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
  66              		.loc 1 1675 0
  67 002c C9B2     		uxtb	r1, r1
  68              	.LVL6:
1676:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
1677:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Prepare the value to be written to the OCOLR register according to the color mode */
1678:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
  69              		.loc 1 1678 0
  70 002e 8268     		ldr	r2, [r0, #8]
  71              	.LVL7:
  72 0030 1AB9     		cbnz	r2, .L3
1679:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
1680:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp = (tmp3 | tmp2 | tmp1| tmp4);
  73              		.loc 1 1680 0
  74 0032 2B43     		orrs	r3, r3, r5
  75              	.LVL8:
  76 0034 2343     		orrs	r3, r3, r4
  77 0036 1943     		orrs	r1, r1, r3
  78              	.LVL9:
  79 0038 26E0     		b	.L4
  80              	.LVL10:
  81              	.L3:
1681:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1682:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
  82              		.loc 1 1682 0
  83 003a 012A     		cmp	r2, #1
  84 003c 03D1     		bne	.L5
1683:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
1684:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp = (tmp3 | tmp2 | tmp4);  
ARM GAS  /tmp/ccSyzCiQ.s 			page 32


  85              		.loc 1 1684 0
  86 003e 45EA0302 		orr	r2, r5, r3
  87 0042 1143     		orrs	r1, r1, r2
  88              	.LVL11:
  89 0044 20E0     		b	.L4
  90              	.LVL12:
  91              	.L5:
1685:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1686:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
  92              		.loc 1 1686 0
  93 0046 022A     		cmp	r2, #2
  94 0048 07D1     		bne	.L6
1687:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
1688:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp2 = (tmp2 >> 19);
  95              		.loc 1 1688 0
  96 004a EA0C     		lsrs	r2, r5, #19
  97              	.LVL13:
1689:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp3 = (tmp3 >> 10);
  98              		.loc 1 1689 0
  99 004c 9C0A     		lsrs	r4, r3, #10
 100              	.LVL14:
1690:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp4 = (tmp4 >> 3 );
1691:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 101              		.loc 1 1691 0
 102 004e D302     		lsls	r3, r2, #11
 103 0050 43EA4413 		orr	r3, r3, r4, lsl #5
 104 0054 43EAD101 		orr	r1, r3, r1, lsr #3
 105              	.LVL15:
 106 0058 16E0     		b	.L4
 107              	.LVL16:
 108              	.L6:
1692:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
1693:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 109              		.loc 1 1693 0
 110 005a 032A     		cmp	r2, #3
 111 005c 0AD1     		bne	.L7
1694:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     { 
1695:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp1 = (tmp1 >> 31);
 112              		.loc 1 1695 0
 113 005e E40F     		lsrs	r4, r4, #31
 114              	.LVL17:
1696:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp2 = (tmp2 >> 19);
 115              		.loc 1 1696 0
 116 0060 EA0C     		lsrs	r2, r5, #19
 117              	.LVL18:
1697:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp3 = (tmp3 >> 11);
 118              		.loc 1 1697 0
 119 0062 DD0A     		lsrs	r5, r3, #11
 120              	.LVL19:
1698:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp4 = (tmp4 >> 3 );      
1699:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 121              		.loc 1 1699 0
 122 0064 9302     		lsls	r3, r2, #10
 123 0066 43EA4513 		orr	r3, r3, r5, lsl #5
 124 006a 43EAC433 		orr	r3, r3, r4, lsl #15
 125 006e 43EAD101 		orr	r1, r3, r1, lsr #3
 126              	.LVL20:
ARM GAS  /tmp/ccSyzCiQ.s 			page 33


 127 0072 09E0     		b	.L4
 128              	.LVL21:
 129              	.L7:
1700:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     } 
1701:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
1702:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
1703:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp1 = (tmp1 >> 28);
 130              		.loc 1 1703 0
 131 0074 240F     		lsrs	r4, r4, #28
 132              	.LVL22:
1704:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp2 = (tmp2 >> 20);
 133              		.loc 1 1704 0
 134 0076 2E0D     		lsrs	r6, r5, #20
 135              	.LVL23:
1705:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp3 = (tmp3 >> 12);
 136              		.loc 1 1705 0
 137 0078 1A0B     		lsrs	r2, r3, #12
 138              	.LVL24:
1706:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp4 = (tmp4 >> 4 );
1707:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 139              		.loc 1 1707 0
 140 007a 3602     		lsls	r6, r6, #8
 141              	.LVL25:
 142 007c 46EA0216 		orr	r6, r6, r2, lsl #4
 143 0080 46EA0435 		orr	r5, r6, r4, lsl #12
 144              	.LVL26:
 145 0084 45EA1111 		orr	r1, r5, r1, lsr #4
 146              	.LVL27:
 147              	.L4:
1708:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }    
1709:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Write to DMA2D OCOLR register */
1710:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 148              		.loc 1 1710 0
 149 0088 0368     		ldr	r3, [r0]
 150 008a 9963     		str	r1, [r3, #56]
 151 008c 01E0     		b	.L1
 152              	.LVL28:
 153              	.L2:
1711:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   } 
1712:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
1713:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
1714:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Configure DMA2D source address */
1715:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 154              		.loc 1 1715 0
 155 008e 0368     		ldr	r3, [r0]
 156 0090 D960     		str	r1, [r3, #12]
 157              	.LVL29:
 158              	.L1:
1716:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
1717:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 159              		.loc 1 1717 0
 160 0092 70BC     		pop	{r4, r5, r6}
 161              	.LCFI1:
 162              		.cfi_restore 6
 163              		.cfi_restore 5
 164              		.cfi_restore 4
 165              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccSyzCiQ.s 			page 34


 166              	.LVL30:
 167 0094 7047     		bx	lr
 168              		.cfi_endproc
 169              	.LFE165:
 171 0096 00BF     		.section	.text.HAL_DMA2D_MspInit,"ax",%progbits
 172              		.align	2
 173              		.weak	HAL_DMA2D_MspInit
 174              		.thumb
 175              		.thumb_func
 177              	HAL_DMA2D_MspInit:
 178              	.LFB138:
 340:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Prevent unused argument(s) compilation warning */
 179              		.loc 1 340 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              		@ link register save eliminated.
 184              	.LVL31:
 185 0000 7047     		bx	lr
 186              		.cfi_endproc
 187              	.LFE138:
 189 0002 00BF     		.section	.text.HAL_DMA2D_Init,"ax",%progbits
 190              		.align	2
 191              		.global	HAL_DMA2D_Init
 192              		.thumb
 193              		.thumb_func
 195              	HAL_DMA2D_Init:
 196              	.LFB136:
 201:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the DMA2D peripheral state */
 197              		.loc 1 201 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              	.LVL32:
 203:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 202              		.loc 1 203 0
 203 0000 0028     		cmp	r0, #0
 204 0002 39D0     		beq	.L14
 201:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the DMA2D peripheral state */
 205              		.loc 1 201 0
 206 0004 10B5     		push	{r4, lr}
 207              	.LCFI2:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 4, -8
 210              		.cfi_offset 14, -4
 211 0006 0446     		mov	r4, r0
 214:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 212              		.loc 1 214 0
 213 0008 90F85130 		ldrb	r3, [r0, #81]	@ zero_extendqisi2
 214 000c 13F0FF0F 		tst	r3, #255
 215 0010 04D1     		bne	.L13
 217:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     /* Init the low level hardware */
 216              		.loc 1 217 0
 217 0012 0023     		movs	r3, #0
 218 0014 80F85030 		strb	r3, [r0, #80]
 219:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 219              		.loc 1 219 0
ARM GAS  /tmp/ccSyzCiQ.s 			page 35


 220 0018 FFF7FEFF 		bl	HAL_DMA2D_MspInit
 221              	.LVL33:
 222              	.L13:
 223:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 223              		.loc 1 223 0
 224 001c 0223     		movs	r3, #2
 225 001e 84F85130 		strb	r3, [r4, #81]
 226:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 226              		.loc 1 226 0
 227 0022 2168     		ldr	r1, [r4]
 228 0024 0B68     		ldr	r3, [r1]
 229 0026 23F44032 		bic	r2, r3, #196608
 230 002a 6368     		ldr	r3, [r4, #4]
 231 002c 1343     		orrs	r3, r3, r2
 232 002e 0B60     		str	r3, [r1]
 229:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 233              		.loc 1 229 0
 234 0030 2168     		ldr	r1, [r4]
 235 0032 4B6B     		ldr	r3, [r1, #52]
 236 0034 23F00702 		bic	r2, r3, #7
 237 0038 A368     		ldr	r3, [r4, #8]
 238 003a 1343     		orrs	r3, r3, r2
 239 003c 4B63     		str	r3, [r1, #52]
 232:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 240              		.loc 1 232 0
 241 003e 2168     		ldr	r1, [r4]
 242 0040 0B6C     		ldr	r3, [r1, #64]
 243 0042 0E4A     		ldr	r2, .L17
 244 0044 1A40     		ands	r2, r2, r3
 245 0046 E368     		ldr	r3, [r4, #12]
 246 0048 1343     		orrs	r3, r3, r2
 247 004a 0B64     		str	r3, [r1, #64]
 236:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #endif /* DMA2D_OPFCCR_AI */ 
 248              		.loc 1 236 0
 249 004c 2268     		ldr	r2, [r4]
 250 004e 536B     		ldr	r3, [r2, #52]
 251 0050 23F48013 		bic	r3, r3, #1048576
 252 0054 2169     		ldr	r1, [r4, #16]
 253 0056 43EA0153 		orr	r3, r3, r1, lsl #20
 254 005a 5363     		str	r3, [r2, #52]
 240:HALLIB/Src/stm32f7xx_hal_dma2d.c **** #endif /* DMA2D_OPFCCR_RBS */
 255              		.loc 1 240 0
 256 005c 2268     		ldr	r2, [r4]
 257 005e 536B     		ldr	r3, [r2, #52]
 258 0060 23F40013 		bic	r3, r3, #2097152
 259 0064 6169     		ldr	r1, [r4, #20]
 260 0066 43EA4153 		orr	r3, r3, r1, lsl #21
 261 006a 5363     		str	r3, [r2, #52]
 245:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 262              		.loc 1 245 0
 263 006c 0020     		movs	r0, #0
 264 006e 6065     		str	r0, [r4, #84]
 248:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 265              		.loc 1 248 0
 266 0070 0123     		movs	r3, #1
 267 0072 84F85130 		strb	r3, [r4, #81]
 250:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
ARM GAS  /tmp/ccSyzCiQ.s 			page 36


 268              		.loc 1 250 0
 269 0076 10BD     		pop	{r4, pc}
 270              	.LVL34:
 271              	.L14:
 272              	.LCFI3:
 273              		.cfi_def_cfa_offset 0
 274              		.cfi_restore 4
 275              		.cfi_restore 14
 205:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 276              		.loc 1 205 0
 277 0078 0120     		movs	r0, #1
 278              	.LVL35:
 279 007a 7047     		bx	lr
 280              	.L18:
 281              		.align	2
 282              	.L17:
 283 007c 00C0FFFF 		.word	-16384
 284              		.cfi_endproc
 285              	.LFE136:
 287              		.section	.text.HAL_DMA2D_MspDeInit,"ax",%progbits
 288              		.align	2
 289              		.weak	HAL_DMA2D_MspDeInit
 290              		.thumb
 291              		.thumb_func
 293              	HAL_DMA2D_MspDeInit:
 294              	.LFB139:
 356:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Prevent unused argument(s) compilation warning */
 295              		.loc 1 356 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              		@ link register save eliminated.
 300              	.LVL36:
 301 0000 7047     		bx	lr
 302              		.cfi_endproc
 303              	.LFE139:
 305 0002 00BF     		.section	.text.HAL_DMA2D_Start,"ax",%progbits
 306              		.align	2
 307              		.global	HAL_DMA2D_Start
 308              		.thumb
 309              		.thumb_func
 311              	HAL_DMA2D_Start:
 312              	.LFB140:
 419:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 313              		.loc 1 419 0
 314              		.cfi_startproc
 315              		@ args = 4, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              	.LVL37:
 419:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 318              		.loc 1 419 0
 319 0000 10B5     		push	{r4, lr}
 320              	.LCFI4:
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 4, -8
 323              		.cfi_offset 14, -4
 324 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccSyzCiQ.s 			page 37


 325              	.LCFI5:
 326              		.cfi_def_cfa_offset 16
 425:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 327              		.loc 1 425 0
 328 0004 90F85040 		ldrb	r4, [r0, #80]	@ zero_extendqisi2
 329 0008 012C     		cmp	r4, #1
 330 000a 12D0     		beq	.L22
 331 000c 0446     		mov	r4, r0
 425:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 332              		.loc 1 425 0 is_stmt 0 discriminator 2
 333 000e 0120     		movs	r0, #1
 334              	.LVL38:
 335 0010 84F85000 		strb	r0, [r4, #80]
 428:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 336              		.loc 1 428 0 is_stmt 1 discriminator 2
 337 0014 0220     		movs	r0, #2
 338 0016 84F85100 		strb	r0, [r4, #81]
 431:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 339              		.loc 1 431 0 discriminator 2
 340 001a 0498     		ldr	r0, [sp, #16]
 341 001c 0090     		str	r0, [sp]
 342 001e 2046     		mov	r0, r4
 343 0020 FFF7FEFF 		bl	DMA2D_SetConfig
 344              	.LVL39:
 434:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 345              		.loc 1 434 0 discriminator 2
 346 0024 2268     		ldr	r2, [r4]
 347 0026 1368     		ldr	r3, [r2]
 348 0028 43F00103 		orr	r3, r3, #1
 349 002c 1360     		str	r3, [r2]
 436:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 350              		.loc 1 436 0 discriminator 2
 351 002e 0020     		movs	r0, #0
 352 0030 00E0     		b	.L21
 353              	.LVL40:
 354              	.L22:
 425:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 355              		.loc 1 425 0
 356 0032 0220     		movs	r0, #2
 357              	.LVL41:
 358              	.L21:
 437:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 359              		.loc 1 437 0
 360 0034 02B0     		add	sp, sp, #8
 361              	.LCFI6:
 362              		.cfi_def_cfa_offset 8
 363              		@ sp needed
 364 0036 10BD     		pop	{r4, pc}
 365              		.cfi_endproc
 366              	.LFE140:
 368              		.section	.text.HAL_DMA2D_Start_IT,"ax",%progbits
 369              		.align	2
 370              		.global	HAL_DMA2D_Start_IT
 371              		.thumb
 372              		.thumb_func
 374              	HAL_DMA2D_Start_IT:
 375              	.LFB141:
ARM GAS  /tmp/ccSyzCiQ.s 			page 38


 453:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 376              		.loc 1 453 0
 377              		.cfi_startproc
 378              		@ args = 4, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              	.LVL42:
 381 0000 10B5     		push	{r4, lr}
 382              	.LCFI7:
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 4, -8
 385              		.cfi_offset 14, -4
 386 0002 82B0     		sub	sp, sp, #8
 387              	.LCFI8:
 388              		.cfi_def_cfa_offset 16
 459:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 389              		.loc 1 459 0
 390 0004 90F85040 		ldrb	r4, [r0, #80]	@ zero_extendqisi2
 391 0008 012C     		cmp	r4, #1
 392 000a 17D0     		beq	.L26
 393 000c 0446     		mov	r4, r0
 459:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 394              		.loc 1 459 0 is_stmt 0 discriminator 2
 395 000e 0120     		movs	r0, #1
 396              	.LVL43:
 397 0010 84F85000 		strb	r0, [r4, #80]
 462:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 398              		.loc 1 462 0 is_stmt 1 discriminator 2
 399 0014 0220     		movs	r0, #2
 400 0016 84F85100 		strb	r0, [r4, #81]
 465:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 401              		.loc 1 465 0 discriminator 2
 402 001a 0498     		ldr	r0, [sp, #16]
 403 001c 0090     		str	r0, [sp]
 404 001e 2046     		mov	r0, r4
 405 0020 FFF7FEFF 		bl	DMA2D_SetConfig
 406              	.LVL44:
 468:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 407              		.loc 1 468 0 discriminator 2
 408 0024 2268     		ldr	r2, [r4]
 409 0026 1368     		ldr	r3, [r2]
 410 0028 43F40C53 		orr	r3, r3, #8960
 411 002c 1360     		str	r3, [r2]
 471:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 412              		.loc 1 471 0 discriminator 2
 413 002e 2268     		ldr	r2, [r4]
 414 0030 1368     		ldr	r3, [r2]
 415 0032 43F00103 		orr	r3, r3, #1
 416 0036 1360     		str	r3, [r2]
 473:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 417              		.loc 1 473 0 discriminator 2
 418 0038 0020     		movs	r0, #0
 419 003a 00E0     		b	.L25
 420              	.LVL45:
 421              	.L26:
 459:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 422              		.loc 1 459 0
 423 003c 0220     		movs	r0, #2
ARM GAS  /tmp/ccSyzCiQ.s 			page 39


 424              	.LVL46:
 425              	.L25:
 474:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 426              		.loc 1 474 0
 427 003e 02B0     		add	sp, sp, #8
 428              	.LCFI9:
 429              		.cfi_def_cfa_offset 8
 430              		@ sp needed
 431 0040 10BD     		pop	{r4, pc}
 432              		.cfi_endproc
 433              	.LFE141:
 435 0042 00BF     		.section	.text.HAL_DMA2D_BlendingStart,"ax",%progbits
 436              		.align	2
 437              		.global	HAL_DMA2D_BlendingStart
 438              		.thumb
 439              		.thumb_func
 441              	HAL_DMA2D_BlendingStart:
 442              	.LFB142:
 488:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 443              		.loc 1 488 0
 444              		.cfi_startproc
 445              		@ args = 8, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              	.LVL47:
 448 0000 30B5     		push	{r4, r5, lr}
 449              	.LCFI10:
 450              		.cfi_def_cfa_offset 12
 451              		.cfi_offset 4, -12
 452              		.cfi_offset 5, -8
 453              		.cfi_offset 14, -4
 454 0002 83B0     		sub	sp, sp, #12
 455              	.LCFI11:
 456              		.cfi_def_cfa_offset 24
 494:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 457              		.loc 1 494 0
 458 0004 90F85040 		ldrb	r4, [r0, #80]	@ zero_extendqisi2
 459 0008 012C     		cmp	r4, #1
 460 000a 16D0     		beq	.L30
 461 000c 1D46     		mov	r5, r3
 462 000e 0446     		mov	r4, r0
 494:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 463              		.loc 1 494 0 is_stmt 0 discriminator 2
 464 0010 0123     		movs	r3, #1
 465              	.LVL48:
 466 0012 80F85030 		strb	r3, [r0, #80]
 497:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 467              		.loc 1 497 0 is_stmt 1 discriminator 2
 468 0016 0223     		movs	r3, #2
 469 0018 80F85130 		strb	r3, [r0, #81]
 500:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 470              		.loc 1 500 0 discriminator 2
 471 001c 0368     		ldr	r3, [r0]
 472 001e 5A61     		str	r2, [r3, #20]
 503:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 473              		.loc 1 503 0 discriminator 2
 474 0020 079B     		ldr	r3, [sp, #28]
 475 0022 0093     		str	r3, [sp]
ARM GAS  /tmp/ccSyzCiQ.s 			page 40


 476 0024 069B     		ldr	r3, [sp, #24]
 477 0026 2A46     		mov	r2, r5
 478              	.LVL49:
 479 0028 FFF7FEFF 		bl	DMA2D_SetConfig
 480              	.LVL50:
 506:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 481              		.loc 1 506 0 discriminator 2
 482 002c 2268     		ldr	r2, [r4]
 483 002e 1368     		ldr	r3, [r2]
 484 0030 43F00103 		orr	r3, r3, #1
 485 0034 1360     		str	r3, [r2]
 508:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 486              		.loc 1 508 0 discriminator 2
 487 0036 0020     		movs	r0, #0
 488 0038 00E0     		b	.L29
 489              	.LVL51:
 490              	.L30:
 494:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 491              		.loc 1 494 0
 492 003a 0220     		movs	r0, #2
 493              	.LVL52:
 494              	.L29:
 509:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 495              		.loc 1 509 0
 496 003c 03B0     		add	sp, sp, #12
 497              	.LCFI12:
 498              		.cfi_def_cfa_offset 12
 499              		@ sp needed
 500 003e 30BD     		pop	{r4, r5, pc}
 501              		.cfi_endproc
 502              	.LFE142:
 504              		.section	.text.HAL_DMA2D_BlendingStart_IT,"ax",%progbits
 505              		.align	2
 506              		.global	HAL_DMA2D_BlendingStart_IT
 507              		.thumb
 508              		.thumb_func
 510              	HAL_DMA2D_BlendingStart_IT:
 511              	.LFB143:
 523:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 512              		.loc 1 523 0
 513              		.cfi_startproc
 514              		@ args = 8, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              	.LVL53:
 517 0000 30B5     		push	{r4, r5, lr}
 518              	.LCFI13:
 519              		.cfi_def_cfa_offset 12
 520              		.cfi_offset 4, -12
 521              		.cfi_offset 5, -8
 522              		.cfi_offset 14, -4
 523 0002 83B0     		sub	sp, sp, #12
 524              	.LCFI14:
 525              		.cfi_def_cfa_offset 24
 529:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 526              		.loc 1 529 0
 527 0004 90F85040 		ldrb	r4, [r0, #80]	@ zero_extendqisi2
 528 0008 012C     		cmp	r4, #1
ARM GAS  /tmp/ccSyzCiQ.s 			page 41


 529 000a 1BD0     		beq	.L34
 530 000c 1D46     		mov	r5, r3
 531 000e 0446     		mov	r4, r0
 529:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 532              		.loc 1 529 0 is_stmt 0 discriminator 2
 533 0010 0123     		movs	r3, #1
 534              	.LVL54:
 535 0012 80F85030 		strb	r3, [r0, #80]
 532:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  
 536              		.loc 1 532 0 is_stmt 1 discriminator 2
 537 0016 0223     		movs	r3, #2
 538 0018 80F85130 		strb	r3, [r0, #81]
 535:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 539              		.loc 1 535 0 discriminator 2
 540 001c 0368     		ldr	r3, [r0]
 541 001e 5A61     		str	r2, [r3, #20]
 538:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 542              		.loc 1 538 0 discriminator 2
 543 0020 079B     		ldr	r3, [sp, #28]
 544 0022 0093     		str	r3, [sp]
 545 0024 069B     		ldr	r3, [sp, #24]
 546 0026 2A46     		mov	r2, r5
 547              	.LVL55:
 548 0028 FFF7FEFF 		bl	DMA2D_SetConfig
 549              	.LVL56:
 541:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 550              		.loc 1 541 0 discriminator 2
 551 002c 2268     		ldr	r2, [r4]
 552 002e 1368     		ldr	r3, [r2]
 553 0030 43F40C53 		orr	r3, r3, #8960
 554 0034 1360     		str	r3, [r2]
 544:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 555              		.loc 1 544 0 discriminator 2
 556 0036 2268     		ldr	r2, [r4]
 557 0038 1368     		ldr	r3, [r2]
 558 003a 43F00103 		orr	r3, r3, #1
 559 003e 1360     		str	r3, [r2]
 546:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 560              		.loc 1 546 0 discriminator 2
 561 0040 0020     		movs	r0, #0
 562 0042 00E0     		b	.L33
 563              	.LVL57:
 564              	.L34:
 529:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 565              		.loc 1 529 0
 566 0044 0220     		movs	r0, #2
 567              	.LVL58:
 568              	.L33:
 547:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 569              		.loc 1 547 0
 570 0046 03B0     		add	sp, sp, #12
 571              	.LCFI15:
 572              		.cfi_def_cfa_offset 12
 573              		@ sp needed
 574 0048 30BD     		pop	{r4, r5, pc}
 575              		.cfi_endproc
 576              	.LFE143:
ARM GAS  /tmp/ccSyzCiQ.s 			page 42


 578 004a 00BF     		.section	.text.HAL_DMA2D_Abort,"ax",%progbits
 579              		.align	2
 580              		.global	HAL_DMA2D_Abort
 581              		.thumb
 582              		.thumb_func
 584              	HAL_DMA2D_Abort:
 585              	.LFB144:
 556:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tickstart = 0;
 586              		.loc 1 556 0
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 0
 589              		@ frame_needed = 0, uses_anonymous_args = 0
 590              	.LVL59:
 591 0000 38B5     		push	{r3, r4, r5, lr}
 592              	.LCFI16:
 593              		.cfi_def_cfa_offset 16
 594              		.cfi_offset 3, -16
 595              		.cfi_offset 4, -12
 596              		.cfi_offset 5, -8
 597              		.cfi_offset 14, -4
 598 0002 0446     		mov	r4, r0
 599              	.LVL60:
 563:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 600              		.loc 1 563 0
 601 0004 0268     		ldr	r2, [r0]
 602 0006 1368     		ldr	r3, [r2]
 603 0008 23F00503 		bic	r3, r3, #5
 604 000c 43F00403 		orr	r3, r3, #4
 605 0010 1360     		str	r3, [r2]
 566:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 606              		.loc 1 566 0
 607 0012 FFF7FEFF 		bl	HAL_GetTick
 608              	.LVL61:
 609 0016 0546     		mov	r5, r0
 610              	.LVL62:
 569:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 611              		.loc 1 569 0
 612 0018 10E0     		b	.L37
 613              	.LVL63:
 614              	.L39:
 571:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 615              		.loc 1 571 0
 616 001a FFF7FEFF 		bl	HAL_GetTick
 617              	.LVL64:
 618 001e 401B     		subs	r0, r0, r5
 619 0020 B0F57A7F 		cmp	r0, #1000
 620 0024 0AD9     		bls	.L37
 574:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 621              		.loc 1 574 0
 622 0026 636D     		ldr	r3, [r4, #84]
 623 0028 43F02003 		orr	r3, r3, #32
 624 002c 6365     		str	r3, [r4, #84]
 577:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 625              		.loc 1 577 0
 626 002e 0320     		movs	r0, #3
 627 0030 84F85100 		strb	r0, [r4, #81]
 580:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
ARM GAS  /tmp/ccSyzCiQ.s 			page 43


 628              		.loc 1 580 0
 629 0034 0023     		movs	r3, #0
 630 0036 84F85030 		strb	r3, [r4, #80]
 582:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 631              		.loc 1 582 0
 632 003a 38BD     		pop	{r3, r4, r5, pc}
 633              	.LVL65:
 634              	.L37:
 569:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 635              		.loc 1 569 0
 636 003c 2368     		ldr	r3, [r4]
 637 003e 1A68     		ldr	r2, [r3]
 638 0040 12F0010F 		tst	r2, #1
 639 0044 E9D1     		bne	.L39
 587:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 640              		.loc 1 587 0
 641 0046 1A68     		ldr	r2, [r3]
 642 0048 22F40C52 		bic	r2, r2, #8960
 643 004c 1A60     		str	r2, [r3]
 590:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 644              		.loc 1 590 0
 645 004e 0123     		movs	r3, #1
 646 0050 84F85130 		strb	r3, [r4, #81]
 593:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 647              		.loc 1 593 0
 648 0054 0020     		movs	r0, #0
 649 0056 84F85000 		strb	r0, [r4, #80]
 596:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 650              		.loc 1 596 0
 651 005a 38BD     		pop	{r3, r4, r5, pc}
 652              		.cfi_endproc
 653              	.LFE144:
 655              		.section	.text.HAL_DMA2D_Suspend,"ax",%progbits
 656              		.align	2
 657              		.global	HAL_DMA2D_Suspend
 658              		.thumb
 659              		.thumb_func
 661              	HAL_DMA2D_Suspend:
 662              	.LFB145:
 605:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tickstart = 0;
 663              		.loc 1 605 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667              	.LVL66:
 668 0000 38B5     		push	{r3, r4, r5, lr}
 669              	.LCFI17:
 670              		.cfi_def_cfa_offset 16
 671              		.cfi_offset 3, -16
 672              		.cfi_offset 4, -12
 673              		.cfi_offset 5, -8
 674              		.cfi_offset 14, -4
 675 0002 0446     		mov	r4, r0
 676              	.LVL67:
 612:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 677              		.loc 1 612 0
 678 0004 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccSyzCiQ.s 			page 44


 679 0006 1368     		ldr	r3, [r2]
 680 0008 23F00303 		bic	r3, r3, #3
 681 000c 43F00203 		orr	r3, r3, #2
 682 0010 1360     		str	r3, [r2]
 615:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 683              		.loc 1 615 0
 684 0012 FFF7FEFF 		bl	HAL_GetTick
 685              	.LVL68:
 686 0016 0546     		mov	r5, r0
 687              	.LVL69:
 618:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     && ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START))
 688              		.loc 1 618 0
 689 0018 0DE0     		b	.L42
 690              	.LVL70:
 691              	.L45:
 621:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 692              		.loc 1 621 0
 693 001a FFF7FEFF 		bl	HAL_GetTick
 694              	.LVL71:
 695 001e 401B     		subs	r0, r0, r5
 696 0020 B0F57A7F 		cmp	r0, #1000
 697 0024 07D9     		bls	.L42
 624:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 698              		.loc 1 624 0
 699 0026 636D     		ldr	r3, [r4, #84]
 700 0028 43F02003 		orr	r3, r3, #32
 701 002c 6365     		str	r3, [r4, #84]
 627:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 702              		.loc 1 627 0
 703 002e 0320     		movs	r0, #3
 704 0030 84F85100 		strb	r0, [r4, #81]
 629:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 705              		.loc 1 629 0
 706 0034 38BD     		pop	{r3, r4, r5, pc}
 707              	.LVL72:
 708              	.L42:
 618:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     && ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START))
 709              		.loc 1 618 0
 710 0036 2368     		ldr	r3, [r4]
 711 0038 1A68     		ldr	r2, [r3]
 712 003a 12F0020F 		tst	r2, #2
 713 003e 03D1     		bne	.L44
 619:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 714              		.loc 1 619 0
 715 0040 1A68     		ldr	r2, [r3]
 716 0042 12F0010F 		tst	r2, #1
 717 0046 E8D1     		bne	.L45
 718              	.L44:
 634:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {    
 719              		.loc 1 634 0
 720 0048 1A68     		ldr	r2, [r3]
 721 004a 12F0010F 		tst	r2, #1
 722 004e 04D0     		beq	.L46
 636:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 723              		.loc 1 636 0
 724 0050 0523     		movs	r3, #5
 725 0052 84F85130 		strb	r3, [r4, #81]
ARM GAS  /tmp/ccSyzCiQ.s 			page 45


 645:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 726              		.loc 1 645 0
 727 0056 0020     		movs	r0, #0
 728 0058 38BD     		pop	{r3, r4, r5, pc}
 729              	.LVL73:
 730              	.L46:
 642:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 731              		.loc 1 642 0
 732 005a 1A68     		ldr	r2, [r3]
 733 005c 22F00202 		bic	r2, r2, #2
 734 0060 1A60     		str	r2, [r3]
 645:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 735              		.loc 1 645 0
 736 0062 0020     		movs	r0, #0
 646:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 737              		.loc 1 646 0
 738 0064 38BD     		pop	{r3, r4, r5, pc}
 739              		.cfi_endproc
 740              	.LFE145:
 742 0066 00BF     		.section	.text.HAL_DMA2D_Resume,"ax",%progbits
 743              		.align	2
 744              		.global	HAL_DMA2D_Resume
 745              		.thumb
 746              		.thumb_func
 748              	HAL_DMA2D_Resume:
 749              	.LFB146:
 655:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the SUSP and START bits */
 750              		.loc 1 655 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 755              	.LVL74:
 657:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 756              		.loc 1 657 0
 757 0000 0368     		ldr	r3, [r0]
 758 0002 1A68     		ldr	r2, [r3]
 759 0004 02F00302 		and	r2, r2, #3
 760 0008 032A     		cmp	r2, #3
 761 000a 02D1     		bne	.L49
 660:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 762              		.loc 1 660 0
 763 000c 0222     		movs	r2, #2
 764 000e 80F85120 		strb	r2, [r0, #81]
 765              	.L49:
 667:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 766              		.loc 1 667 0
 767 0012 1A68     		ldr	r2, [r3]
 768 0014 22F00302 		bic	r2, r2, #3
 769 0018 1A60     		str	r2, [r3]
 670:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 770              		.loc 1 670 0
 771 001a 0020     		movs	r0, #0
 772              	.LVL75:
 773 001c 7047     		bx	lr
 774              		.cfi_endproc
 775              	.LFE146:
ARM GAS  /tmp/ccSyzCiQ.s 			page 46


 777 001e 00BF     		.section	.text.HAL_DMA2D_EnableCLUT,"ax",%progbits
 778              		.align	2
 779              		.global	HAL_DMA2D_EnableCLUT
 780              		.thumb
 781              		.thumb_func
 783              	HAL_DMA2D_EnableCLUT:
 784              	.LFB147:
 683:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 785              		.loc 1 683 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              		@ link register save eliminated.
 790              	.LVL76:
 688:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 791              		.loc 1 688 0
 792 0000 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 793 0004 012B     		cmp	r3, #1
 794 0006 14D0     		beq	.L53
 688:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 795              		.loc 1 688 0 is_stmt 0 discriminator 2
 796 0008 0123     		movs	r3, #1
 797 000a 80F85030 		strb	r3, [r0, #80]
 691:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 798              		.loc 1 691 0 is_stmt 1 discriminator 2
 799 000e 0223     		movs	r3, #2
 800 0010 80F85130 		strb	r3, [r0, #81]
 693:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 801              		.loc 1 693 0 discriminator 2
 802 0014 31B9     		cbnz	r1, .L52
 696:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 803              		.loc 1 696 0
 804 0016 0268     		ldr	r2, [r0]
 805 0018 536A     		ldr	r3, [r2, #36]
 806 001a 43F02003 		orr	r3, r3, #32
 807 001e 5362     		str	r3, [r2, #36]
 704:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 808              		.loc 1 704 0
 809 0020 0020     		movs	r0, #0
 810              	.LVL77:
 811 0022 7047     		bx	lr
 812              	.LVL78:
 813              	.L52:
 701:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 814              		.loc 1 701 0
 815 0024 0268     		ldr	r2, [r0]
 816 0026 D369     		ldr	r3, [r2, #28]
 817 0028 43F02003 		orr	r3, r3, #32
 818 002c D361     		str	r3, [r2, #28]
 704:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 819              		.loc 1 704 0
 820 002e 0020     		movs	r0, #0
 821              	.LVL79:
 822 0030 7047     		bx	lr
 823              	.LVL80:
 824              	.L53:
 688:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
ARM GAS  /tmp/ccSyzCiQ.s 			page 47


 825              		.loc 1 688 0
 826 0032 0220     		movs	r0, #2
 827              	.LVL81:
 705:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 828              		.loc 1 705 0
 829 0034 7047     		bx	lr
 830              		.cfi_endproc
 831              	.LFE147:
 833 0036 00BF     		.section	.text.HAL_DMA2D_CLUTLoad,"ax",%progbits
 834              		.align	2
 835              		.global	HAL_DMA2D_CLUTLoad
 836              		.thumb
 837              		.thumb_func
 839              	HAL_DMA2D_CLUTLoad:
 840              	.LFB148:
 721:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 841              		.loc 1 721 0
 842              		.cfi_startproc
 843              		@ args = 4, pretend = 0, frame = 16
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845              		@ link register save eliminated.
 846              	.LVL82:
 847 0000 10B4     		push	{r4}
 848              	.LCFI18:
 849              		.cfi_def_cfa_offset 4
 850              		.cfi_offset 4, -4
 851 0002 85B0     		sub	sp, sp, #20
 852              	.LCFI19:
 853              		.cfi_def_cfa_offset 24
 854 0004 04AC     		add	r4, sp, #16
 855 0006 04E90E00 		stmdb	r4, {r1, r2, r3}
 728:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 856              		.loc 1 728 0
 857 000a 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 858 000e 012B     		cmp	r3, #1
 859 0010 31D0     		beq	.L57
 728:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 860              		.loc 1 728 0 is_stmt 0 discriminator 2
 861 0012 0123     		movs	r3, #1
 862 0014 80F85030 		strb	r3, [r0, #80]
 731:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 863              		.loc 1 731 0 is_stmt 1 discriminator 2
 864 0018 0223     		movs	r3, #2
 865 001a 80F85130 		strb	r3, [r0, #81]
 734:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 866              		.loc 1 734 0 discriminator 2
 867 001e 069B     		ldr	r3, [sp, #24]
 868 0020 A3B9     		cbnz	r3, .L56
 737:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 869              		.loc 1 737 0
 870 0022 0368     		ldr	r3, [r0]
 871 0024 019A     		ldr	r2, [sp, #4]
 872 0026 1A63     		str	r2, [r3, #48]
 740:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_BGPFCCR_CCM_P
 873              		.loc 1 740 0
 874 0028 0468     		ldr	r4, [r0]
 875 002a 636A     		ldr	r3, [r4, #36]
ARM GAS  /tmp/ccSyzCiQ.s 			page 48


 876 002c 1449     		ldr	r1, .L59
 877 002e 1940     		ands	r1, r1, r3
 878 0030 029B     		ldr	r3, [sp, #8]
 879 0032 1A01     		lsls	r2, r3, #4
 880 0034 039B     		ldr	r3, [sp, #12]
 881 0036 42EA0323 		orr	r3, r2, r3, lsl #8
 882 003a 0B43     		orrs	r3, r3, r1
 883 003c 6362     		str	r3, [r4, #36]
 744:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 884              		.loc 1 744 0
 885 003e 0268     		ldr	r2, [r0]
 886 0040 536A     		ldr	r3, [r2, #36]
 887 0042 43F02003 		orr	r3, r3, #32
 888 0046 5362     		str	r3, [r2, #36]
 760:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 889              		.loc 1 760 0
 890 0048 0020     		movs	r0, #0
 891              	.LVL83:
 892 004a 15E0     		b	.L55
 893              	.LVL84:
 894              	.L56:
 750:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 895              		.loc 1 750 0
 896 004c 0368     		ldr	r3, [r0]
 897 004e 019A     		ldr	r2, [sp, #4]
 898 0050 DA62     		str	r2, [r3, #44]
 753:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_FGPFCCR_CCM_P
 899              		.loc 1 753 0
 900 0052 0468     		ldr	r4, [r0]
 901 0054 E369     		ldr	r3, [r4, #28]
 902 0056 0A49     		ldr	r1, .L59
 903 0058 1940     		ands	r1, r1, r3
 904 005a 029B     		ldr	r3, [sp, #8]
 905 005c 1A01     		lsls	r2, r3, #4
 906 005e 039B     		ldr	r3, [sp, #12]
 907 0060 42EA0323 		orr	r3, r2, r3, lsl #8
 908 0064 0B43     		orrs	r3, r3, r1
 909 0066 E361     		str	r3, [r4, #28]
 757:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 910              		.loc 1 757 0
 911 0068 0268     		ldr	r2, [r0]
 912 006a D369     		ldr	r3, [r2, #28]
 913 006c 43F02003 		orr	r3, r3, #32
 914 0070 D361     		str	r3, [r2, #28]
 760:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 915              		.loc 1 760 0
 916 0072 0020     		movs	r0, #0
 917              	.LVL85:
 918 0074 00E0     		b	.L55
 919              	.LVL86:
 920              	.L57:
 728:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 921              		.loc 1 728 0
 922 0076 0220     		movs	r0, #2
 923              	.LVL87:
 924              	.L55:
 761:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
ARM GAS  /tmp/ccSyzCiQ.s 			page 49


 925              		.loc 1 761 0
 926 0078 05B0     		add	sp, sp, #20
 927              	.LCFI20:
 928              		.cfi_def_cfa_offset 4
 929              		@ sp needed
 930 007a 5DF8044B 		ldr	r4, [sp], #4
 931              	.LCFI21:
 932              		.cfi_restore 4
 933              		.cfi_def_cfa_offset 0
 934              	.LVL88:
 935 007e 7047     		bx	lr
 936              	.L60:
 937              		.align	2
 938              	.L59:
 939 0080 EF00FFFF 		.word	-65297
 940              		.cfi_endproc
 941              	.LFE148:
 943              		.section	.text.HAL_DMA2D_CLUTLoad_IT,"ax",%progbits
 944              		.align	2
 945              		.global	HAL_DMA2D_CLUTLoad_IT
 946              		.thumb
 947              		.thumb_func
 949              	HAL_DMA2D_CLUTLoad_IT:
 950              	.LFB149:
 775:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 951              		.loc 1 775 0
 952              		.cfi_startproc
 953              		@ args = 4, pretend = 0, frame = 16
 954              		@ frame_needed = 0, uses_anonymous_args = 0
 955              		@ link register save eliminated.
 956              	.LVL89:
 957 0000 10B4     		push	{r4}
 958              	.LCFI22:
 959              		.cfi_def_cfa_offset 4
 960              		.cfi_offset 4, -4
 961 0002 85B0     		sub	sp, sp, #20
 962              	.LCFI23:
 963              		.cfi_def_cfa_offset 24
 964 0004 04AC     		add	r4, sp, #16
 965 0006 04E90E00 		stmdb	r4, {r1, r2, r3}
 782:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 966              		.loc 1 782 0
 967 000a 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 968 000e 012B     		cmp	r3, #1
 969 0010 3BD0     		beq	.L64
 782:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 970              		.loc 1 782 0 is_stmt 0 discriminator 2
 971 0012 0123     		movs	r3, #1
 972 0014 80F85030 		strb	r3, [r0, #80]
 785:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 973              		.loc 1 785 0 is_stmt 1 discriminator 2
 974 0018 0223     		movs	r3, #2
 975 001a 80F85130 		strb	r3, [r0, #81]
 788:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 976              		.loc 1 788 0 discriminator 2
 977 001e 069B     		ldr	r3, [sp, #24]
 978 0020 CBB9     		cbnz	r3, .L63
ARM GAS  /tmp/ccSyzCiQ.s 			page 50


 791:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 979              		.loc 1 791 0
 980 0022 0368     		ldr	r3, [r0]
 981 0024 019A     		ldr	r2, [sp, #4]
 982 0026 1A63     		str	r2, [r3, #48]
 794:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_BGPFCCR_CCM_P
 983              		.loc 1 794 0
 984 0028 0468     		ldr	r4, [r0]
 985 002a 636A     		ldr	r3, [r4, #36]
 986 002c 1949     		ldr	r1, .L66
 987 002e 1940     		ands	r1, r1, r3
 988 0030 029B     		ldr	r3, [sp, #8]
 989 0032 1A01     		lsls	r2, r3, #4
 990 0034 039B     		ldr	r3, [sp, #12]
 991 0036 42EA0323 		orr	r3, r2, r3, lsl #8
 992 003a 0B43     		orrs	r3, r3, r1
 993 003c 6362     		str	r3, [r4, #36]
 798:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 994              		.loc 1 798 0
 995 003e 0268     		ldr	r2, [r0]
 996 0040 1368     		ldr	r3, [r2]
 997 0042 43F46453 		orr	r3, r3, #14592
 998 0046 1360     		str	r3, [r2]
 801:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 999              		.loc 1 801 0
 1000 0048 0268     		ldr	r2, [r0]
 1001 004a 536A     		ldr	r3, [r2, #36]
 1002 004c 43F02003 		orr	r3, r3, #32
 1003 0050 5362     		str	r3, [r2, #36]
 820:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 1004              		.loc 1 820 0
 1005 0052 0020     		movs	r0, #0
 1006              	.LVL90:
 1007 0054 1AE0     		b	.L62
 1008              	.LVL91:
 1009              	.L63:
 807:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 1010              		.loc 1 807 0
 1011 0056 0368     		ldr	r3, [r0]
 1012 0058 019A     		ldr	r2, [sp, #4]
 1013 005a DA62     		str	r2, [r3, #44]
 810:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_FGPFCCR_CCM_P
 1014              		.loc 1 810 0
 1015 005c 0468     		ldr	r4, [r0]
 1016 005e E369     		ldr	r3, [r4, #28]
 1017 0060 0C49     		ldr	r1, .L66
 1018 0062 1940     		ands	r1, r1, r3
 1019 0064 029B     		ldr	r3, [sp, #8]
 1020 0066 1A01     		lsls	r2, r3, #4
 1021 0068 039B     		ldr	r3, [sp, #12]
 1022 006a 42EA0323 		orr	r3, r2, r3, lsl #8
 1023 006e 0B43     		orrs	r3, r3, r1
 1024 0070 E361     		str	r3, [r4, #28]
 814:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 1025              		.loc 1 814 0
 1026 0072 0268     		ldr	r2, [r0]
 1027 0074 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccSyzCiQ.s 			page 51


 1028 0076 43F46453 		orr	r3, r3, #14592
 1029 007a 1360     		str	r3, [r2]
 817:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 1030              		.loc 1 817 0
 1031 007c 0268     		ldr	r2, [r0]
 1032 007e D369     		ldr	r3, [r2, #28]
 1033 0080 43F02003 		orr	r3, r3, #32
 1034 0084 D361     		str	r3, [r2, #28]
 820:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 1035              		.loc 1 820 0
 1036 0086 0020     		movs	r0, #0
 1037              	.LVL92:
 1038 0088 00E0     		b	.L62
 1039              	.LVL93:
 1040              	.L64:
 782:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1041              		.loc 1 782 0
 1042 008a 0220     		movs	r0, #2
 1043              	.LVL94:
 1044              	.L62:
 821:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1045              		.loc 1 821 0
 1046 008c 05B0     		add	sp, sp, #20
 1047              	.LCFI24:
 1048              		.cfi_def_cfa_offset 4
 1049              		@ sp needed
 1050 008e 5DF8044B 		ldr	r4, [sp], #4
 1051              	.LCFI25:
 1052              		.cfi_restore 4
 1053              		.cfi_def_cfa_offset 0
 1054              	.LVL95:
 1055 0092 7047     		bx	lr
 1056              	.L67:
 1057              		.align	2
 1058              	.L66:
 1059 0094 EF00FFFF 		.word	-65297
 1060              		.cfi_endproc
 1061              	.LFE149:
 1063              		.section	.text.HAL_DMA2D_CLUTLoading_Abort,"ax",%progbits
 1064              		.align	2
 1065              		.global	HAL_DMA2D_CLUTLoading_Abort
 1066              		.thumb
 1067              		.thumb_func
 1069              	HAL_DMA2D_CLUTLoading_Abort:
 1070              	.LFB150:
 833:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tickstart  = 0;
 1071              		.loc 1 833 0
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 0
 1074              		@ frame_needed = 0, uses_anonymous_args = 0
 1075              	.LVL96:
 1076 0000 70B5     		push	{r4, r5, r6, lr}
 1077              	.LCFI26:
 1078              		.cfi_def_cfa_offset 16
 1079              		.cfi_offset 4, -16
 1080              		.cfi_offset 5, -12
 1081              		.cfi_offset 6, -8
ARM GAS  /tmp/ccSyzCiQ.s 			page 52


 1082              		.cfi_offset 14, -4
 1083 0002 0646     		mov	r6, r0
 1084              	.LVL97:
 835:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1085              		.loc 1 835 0
 1086 0004 0368     		ldr	r3, [r0]
 1087 0006 03F12404 		add	r4, r3, #36
 1088              	.LVL98:
 838:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1089              		.loc 1 838 0
 1090 000a 1A68     		ldr	r2, [r3]
 1091 000c 42F00402 		orr	r2, r2, #4
 1092 0010 1A60     		str	r2, [r3]
 841:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1093              		.loc 1 841 0
 1094 0012 0129     		cmp	r1, #1
 1095 0014 01D1     		bne	.L69
 843:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 1096              		.loc 1 843 0
 1097 0016 0468     		ldr	r4, [r0]
 1098              	.LVL99:
 1099 0018 1C34     		adds	r4, r4, #28
 1100              	.LVL100:
 1101              	.L69:
 848:HALLIB/Src/stm32f7xx_hal_dma2d.c ****  
 1102              		.loc 1 848 0
 1103 001a FFF7FEFF 		bl	HAL_GetTick
 1104              	.LVL101:
 1105 001e 0546     		mov	r5, r0
 1106              	.LVL102:
 851:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1107              		.loc 1 851 0
 1108 0020 10E0     		b	.L70
 1109              	.LVL103:
 1110              	.L72:
 853:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 1111              		.loc 1 853 0
 1112 0022 FFF7FEFF 		bl	HAL_GetTick
 1113              	.LVL104:
 1114 0026 401B     		subs	r0, r0, r5
 1115 0028 B0F57A7F 		cmp	r0, #1000
 1116 002c 0AD9     		bls	.L70
 856:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 1117              		.loc 1 856 0
 1118 002e 736D     		ldr	r3, [r6, #84]
 1119 0030 43F02003 		orr	r3, r3, #32
 1120 0034 7365     		str	r3, [r6, #84]
 859:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 1121              		.loc 1 859 0
 1122 0036 0320     		movs	r0, #3
 1123 0038 86F85100 		strb	r0, [r6, #81]
 862:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 1124              		.loc 1 862 0
 1125 003c 0023     		movs	r3, #0
 1126 003e 86F85030 		strb	r3, [r6, #80]
 864:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 1127              		.loc 1 864 0
ARM GAS  /tmp/ccSyzCiQ.s 			page 53


 1128 0042 70BD     		pop	{r4, r5, r6, pc}
 1129              	.LVL105:
 1130              	.L70:
 851:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1131              		.loc 1 851 0
 1132 0044 2368     		ldr	r3, [r4]
 1133 0046 13F0200F 		tst	r3, #32
 1134 004a EAD1     		bne	.L72
 869:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    
 1135              		.loc 1 869 0
 1136 004c 3268     		ldr	r2, [r6]
 1137 004e 1368     		ldr	r3, [r2]
 1138 0050 23F46453 		bic	r3, r3, #14592
 1139 0054 1360     		str	r3, [r2]
 872:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      
 1140              		.loc 1 872 0
 1141 0056 0123     		movs	r3, #1
 1142 0058 86F85130 		strb	r3, [r6, #81]
 875:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1143              		.loc 1 875 0
 1144 005c 0020     		movs	r0, #0
 1145 005e 86F85000 		strb	r0, [r6, #80]
 878:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1146              		.loc 1 878 0
 1147 0062 70BD     		pop	{r4, r5, r6, pc}
 1148              		.cfi_endproc
 1149              	.LFE150:
 1151              		.section	.text.HAL_DMA2D_DeInit,"ax",%progbits
 1152              		.align	2
 1153              		.global	HAL_DMA2D_DeInit
 1154              		.thumb
 1155              		.thumb_func
 1157              	HAL_DMA2D_DeInit:
 1158              	.LFB137:
 262:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1159              		.loc 1 262 0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163              	.LVL106:
 265:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1164              		.loc 1 265 0
 1165 0000 0028     		cmp	r0, #0
 1166 0002 36D0     		beq	.L79
 262:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1167              		.loc 1 262 0
 1168 0004 10B5     		push	{r4, lr}
 1169              	.LCFI27:
 1170              		.cfi_def_cfa_offset 8
 1171              		.cfi_offset 4, -8
 1172              		.cfi_offset 14, -4
 1173 0006 0446     		mov	r4, r0
 272:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1174              		.loc 1 272 0
 1175 0008 1E4B     		ldr	r3, .L84
 1176 000a 1B6B     		ldr	r3, [r3, #48]
 1177 000c 13F4000F 		tst	r3, #8388608
ARM GAS  /tmp/ccSyzCiQ.s 			page 54


 1178 0010 19D0     		beq	.L76
 275:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 1179              		.loc 1 275 0
 1180 0012 0368     		ldr	r3, [r0]
 1181 0014 1A68     		ldr	r2, [r3]
 1182 0016 12F0010F 		tst	r2, #1
 1183 001a 03D0     		beq	.L77
 277:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
 1184              		.loc 1 277 0
 1185 001c FFF7FEFF 		bl	HAL_DMA2D_Abort
 1186              	.LVL107:
 1187 0020 88B1     		cbz	r0, .L76
 1188 0022 28E0     		b	.L80
 1189              	.LVL108:
 1190              	.L77:
 286:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {  
 1191              		.loc 1 286 0
 1192 0024 5A6A     		ldr	r2, [r3, #36]
 1193 0026 12F0200F 		tst	r2, #32
 1194 002a 04D0     		beq	.L78
 288:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 1195              		.loc 1 288 0
 1196 002c 0021     		movs	r1, #0
 1197 002e FFF7FEFF 		bl	HAL_DMA2D_CLUTLoading_Abort
 1198              	.LVL109:
 1199 0032 40B1     		cbz	r0, .L76
 1200 0034 21E0     		b	.L81
 1201              	.LVL110:
 1202              	.L78:
 297:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 1203              		.loc 1 297 0
 1204 0036 DB69     		ldr	r3, [r3, #28]
 1205 0038 13F0200F 		tst	r3, #32
 1206 003c 03D0     		beq	.L76
 299:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           {
 1207              		.loc 1 299 0
 1208 003e 0121     		movs	r1, #1
 1209 0040 FFF7FEFF 		bl	HAL_DMA2D_CLUTLoading_Abort
 1210              	.LVL111:
 1211 0044 D8B9     		cbnz	r0, .L82
 1212              	.L76:
 311:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1213              		.loc 1 311 0
 1214 0046 2046     		mov	r0, r4
 1215 0048 FFF7FEFF 		bl	HAL_DMA2D_MspDeInit
 1216              	.LVL112:
 314:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->Instance->FGOR = 0;
 1217              		.loc 1 314 0
 1218 004c 2368     		ldr	r3, [r4]
 1219 004e 0020     		movs	r0, #0
 1220 0050 1860     		str	r0, [r3]
 315:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->Instance->BGOR = 0;  
 1221              		.loc 1 315 0
 1222 0052 2368     		ldr	r3, [r4]
 1223 0054 1861     		str	r0, [r3, #16]
 316:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->Instance->FGPFCCR = 0;
 1224              		.loc 1 316 0
ARM GAS  /tmp/ccSyzCiQ.s 			page 55


 1225 0056 2368     		ldr	r3, [r4]
 1226 0058 9861     		str	r0, [r3, #24]
 317:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->Instance->BGPFCCR = 0;  
 1227              		.loc 1 317 0
 1228 005a 2368     		ldr	r3, [r4]
 1229 005c D861     		str	r0, [r3, #28]
 318:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   hdma2d->Instance->OPFCCR = 0;
 1230              		.loc 1 318 0
 1231 005e 2368     		ldr	r3, [r4]
 1232 0060 5862     		str	r0, [r3, #36]
 319:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1233              		.loc 1 319 0
 1234 0062 2368     		ldr	r3, [r4]
 1235 0064 5863     		str	r0, [r3, #52]
 322:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1236              		.loc 1 322 0
 1237 0066 6065     		str	r0, [r4, #84]
 325:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1238              		.loc 1 325 0
 1239 0068 84F85100 		strb	r0, [r4, #81]
 328:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1240              		.loc 1 328 0
 1241 006c 84F85000 		strb	r0, [r4, #80]
 330:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 1242              		.loc 1 330 0
 1243 0070 10BD     		pop	{r4, pc}
 1244              	.LVL113:
 1245              	.L79:
 1246              	.LCFI28:
 1247              		.cfi_def_cfa_offset 0
 1248              		.cfi_restore 4
 1249              		.cfi_restore 14
 267:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 1250              		.loc 1 267 0
 1251 0072 0120     		movs	r0, #1
 1252              	.LVL114:
 331:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1253              		.loc 1 331 0
 1254 0074 7047     		bx	lr
 1255              	.LVL115:
 1256              	.L80:
 1257              	.LCFI29:
 1258              		.cfi_def_cfa_offset 8
 1259              		.cfi_offset 4, -8
 1260              		.cfi_offset 14, -4
 280:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
 1261              		.loc 1 280 0
 1262 0076 0120     		movs	r0, #1
 1263 0078 10BD     		pop	{r4, pc}
 1264              	.LVL116:
 1265              	.L81:
 291:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
 1266              		.loc 1 291 0
 1267 007a 0120     		movs	r0, #1
 1268 007c 10BD     		pop	{r4, pc}
 1269              	.LVL117:
 1270              	.L82:
ARM GAS  /tmp/ccSyzCiQ.s 			page 56


 302:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           }        
 1271              		.loc 1 302 0
 1272 007e 0120     		movs	r0, #1
 331:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1273              		.loc 1 331 0
 1274 0080 10BD     		pop	{r4, pc}
 1275              	.LVL118:
 1276              	.L85:
 1277 0082 00BF     		.align	2
 1278              	.L84:
 1279 0084 00380240 		.word	1073887232
 1280              		.cfi_endproc
 1281              	.LFE137:
 1283              		.section	.text.HAL_DMA2D_CLUTLoading_Suspend,"ax",%progbits
 1284              		.align	2
 1285              		.global	HAL_DMA2D_CLUTLoading_Suspend
 1286              		.thumb
 1287              		.thumb_func
 1289              	HAL_DMA2D_CLUTLoading_Suspend:
 1290              	.LFB151:
 890:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tickstart = 0;
 1291              		.loc 1 890 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 0
 1294              		@ frame_needed = 0, uses_anonymous_args = 0
 1295              	.LVL119:
 1296 0000 70B5     		push	{r4, r5, r6, lr}
 1297              	.LCFI30:
 1298              		.cfi_def_cfa_offset 16
 1299              		.cfi_offset 4, -16
 1300              		.cfi_offset 5, -12
 1301              		.cfi_offset 6, -8
 1302              		.cfi_offset 14, -4
 1303 0002 0446     		mov	r4, r0
 1304              	.LVL120:
 892:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1305              		.loc 1 892 0
 1306 0004 0368     		ldr	r3, [r0]
 1307 0006 03F12405 		add	r5, r3, #36
 1308              	.LVL121:
 895:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1309              		.loc 1 895 0
 1310 000a 1A68     		ldr	r2, [r3]
 1311 000c 42F00202 		orr	r2, r2, #2
 1312 0010 1A60     		str	r2, [r3]
 898:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1313              		.loc 1 898 0
 1314 0012 0129     		cmp	r1, #1
 1315 0014 01D1     		bne	.L87
 900:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }   
 1316              		.loc 1 900 0
 1317 0016 0568     		ldr	r5, [r0]
 1318              	.LVL122:
 1319 0018 1C35     		adds	r5, r5, #28
 1320              	.LVL123:
 1321              	.L87:
 904:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
ARM GAS  /tmp/ccSyzCiQ.s 			page 57


 1322              		.loc 1 904 0
 1323 001a FFF7FEFF 		bl	HAL_GetTick
 1324              	.LVL124:
 1325 001e 0646     		mov	r6, r0
 1326              	.LVL125:
 907:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     && ((*reg & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START))
 1327              		.loc 1 907 0
 1328 0020 0DE0     		b	.L88
 1329              	.LVL126:
 1330              	.L91:
 910:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 1331              		.loc 1 910 0
 1332 0022 FFF7FEFF 		bl	HAL_GetTick
 1333              	.LVL127:
 1334 0026 801B     		subs	r0, r0, r6
 1335 0028 B0F57A7F 		cmp	r0, #1000
 1336 002c 07D9     		bls	.L88
 913:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 1337              		.loc 1 913 0
 1338 002e 636D     		ldr	r3, [r4, #84]
 1339 0030 43F02003 		orr	r3, r3, #32
 1340 0034 6365     		str	r3, [r4, #84]
 916:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 1341              		.loc 1 916 0
 1342 0036 0320     		movs	r0, #3
 1343 0038 84F85100 		strb	r0, [r4, #81]
 918:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 1344              		.loc 1 918 0
 1345 003c 70BD     		pop	{r4, r5, r6, pc}
 1346              	.LVL128:
 1347              	.L88:
 907:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     && ((*reg & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START))
 1348              		.loc 1 907 0
 1349 003e 2368     		ldr	r3, [r4]
 1350 0040 1A68     		ldr	r2, [r3]
 1351 0042 12F0020F 		tst	r2, #2
 1352 0046 03D1     		bne	.L90
 908:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1353              		.loc 1 908 0
 1354 0048 2A68     		ldr	r2, [r5]
 1355 004a 12F0200F 		tst	r2, #32
 1356 004e E8D1     		bne	.L91
 1357              	.L90:
 923:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {    
 1358              		.loc 1 923 0
 1359 0050 2A68     		ldr	r2, [r5]
 1360 0052 12F0200F 		tst	r2, #32
 1361 0056 04D0     		beq	.L92
 925:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 1362              		.loc 1 925 0
 1363 0058 0523     		movs	r3, #5
 1364 005a 84F85130 		strb	r3, [r4, #81]
 934:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 1365              		.loc 1 934 0
 1366 005e 0020     		movs	r0, #0
 1367 0060 70BD     		pop	{r4, r5, r6, pc}
 1368              	.LVL129:
ARM GAS  /tmp/ccSyzCiQ.s 			page 58


 1369              	.L92:
 931:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }  
 1370              		.loc 1 931 0
 1371 0062 1A68     		ldr	r2, [r3]
 1372 0064 22F00202 		bic	r2, r2, #2
 1373 0068 1A60     		str	r2, [r3]
 934:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 1374              		.loc 1 934 0
 1375 006a 0020     		movs	r0, #0
 935:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1376              		.loc 1 935 0
 1377 006c 70BD     		pop	{r4, r5, r6, pc}
 1378              		.cfi_endproc
 1379              	.LFE151:
 1381 006e 00BF     		.section	.text.HAL_DMA2D_CLUTLoading_Resume,"ax",%progbits
 1382              		.align	2
 1383              		.global	HAL_DMA2D_CLUTLoading_Resume
 1384              		.thumb
 1385              		.thumb_func
 1387              	HAL_DMA2D_CLUTLoading_Resume:
 1388              	.LFB152:
 947:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the SUSP and START bits for background or foreground CLUT loading */
 1389              		.loc 1 947 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 0
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393              		@ link register save eliminated.
 1394              	.LVL130:
 949:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {  
 1395              		.loc 1 949 0
 1396 0000 61B9     		cbnz	r1, .L95
 952:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       && ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START))
 1397              		.loc 1 952 0
 1398 0002 0368     		ldr	r3, [r0]
 1399 0004 1A68     		ldr	r2, [r3]
 1400 0006 12F0020F 		tst	r2, #2
 1401 000a 13D0     		beq	.L96
 953:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 1402              		.loc 1 953 0
 1403 000c 5B6A     		ldr	r3, [r3, #36]
 1404 000e 13F0200F 		tst	r3, #32
 1405 0012 0FD0     		beq	.L96
 956:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 1406              		.loc 1 956 0
 1407 0014 0223     		movs	r3, #2
 1408 0016 80F85130 		strb	r3, [r0, #81]
 1409 001a 0BE0     		b	.L96
 1410              	.L95:
 962:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       && ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START))
 1411              		.loc 1 962 0
 1412 001c 0368     		ldr	r3, [r0]
 1413 001e 1A68     		ldr	r2, [r3]
 1414 0020 12F0020F 		tst	r2, #2
 1415 0024 06D0     		beq	.L96
 963:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 1416              		.loc 1 963 0
 1417 0026 DB69     		ldr	r3, [r3, #28]
ARM GAS  /tmp/ccSyzCiQ.s 			page 59


 1418 0028 13F0200F 		tst	r3, #32
 1419 002c 02D0     		beq	.L96
 966:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }  
 1420              		.loc 1 966 0
 1421 002e 0223     		movs	r3, #2
 1422 0030 80F85130 		strb	r3, [r0, #81]
 1423              	.L96:
 971:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1424              		.loc 1 971 0
 1425 0034 0268     		ldr	r2, [r0]
 1426 0036 1368     		ldr	r3, [r2]
 1427 0038 23F00203 		bic	r3, r3, #2
 1428 003c 1360     		str	r3, [r2]
 974:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1429              		.loc 1 974 0
 1430 003e 0020     		movs	r0, #0
 1431              	.LVL131:
 1432 0040 7047     		bx	lr
 1433              		.cfi_endproc
 1434              	.LFE152:
 1436 0042 00BF     		.section	.text.HAL_DMA2D_PollForTransfer,"ax",%progbits
 1437              		.align	2
 1438              		.global	HAL_DMA2D_PollForTransfer
 1439              		.thumb
 1440              		.thumb_func
 1442              	HAL_DMA2D_PollForTransfer:
 1443              	.LFB153:
 986:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t tickstart = 0;
 1444              		.loc 1 986 0
 1445              		.cfi_startproc
 1446              		@ args = 0, pretend = 0, frame = 8
 1447              		@ frame_needed = 0, uses_anonymous_args = 0
 1448              	.LVL132:
 1449 0000 70B5     		push	{r4, r5, r6, lr}
 1450              	.LCFI31:
 1451              		.cfi_def_cfa_offset 16
 1452              		.cfi_offset 4, -16
 1453              		.cfi_offset 5, -12
 1454              		.cfi_offset 6, -8
 1455              		.cfi_offset 14, -4
 1456 0002 82B0     		sub	sp, sp, #8
 1457              	.LCFI32:
 1458              		.cfi_def_cfa_offset 24
 1459 0004 0446     		mov	r4, r0
 1460 0006 0D46     		mov	r5, r1
 1461              	.LVL133:
 988:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1462              		.loc 1 988 0
 1463 0008 0023     		movs	r3, #0
 1464 000a 0193     		str	r3, [sp, #4]
 991:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1465              		.loc 1 991 0
 1466 000c 0368     		ldr	r3, [r0]
 1467 000e 1B68     		ldr	r3, [r3]
 1468 0010 13F0010F 		tst	r3, #1
 1469 0014 3CD0     		beq	.L98
 994:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
ARM GAS  /tmp/ccSyzCiQ.s 			page 60


 1470              		.loc 1 994 0
 1471 0016 FFF7FEFF 		bl	HAL_GetTick
 1472              	.LVL134:
 1473 001a 0646     		mov	r6, r0
 1474              	.LVL135:
 996:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 1475              		.loc 1 996 0
 1476 001c 33E0     		b	.L104
 1477              	.LVL136:
 1478              	.L106:
 998:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 1479              		.loc 1 998 0
 1480 001e 5A68     		ldr	r2, [r3, #4]
 1481 0020 0192     		str	r2, [sp, #4]
 999:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
 1482              		.loc 1 999 0
 1483 0022 019A     		ldr	r2, [sp, #4]
 1484 0024 12F0210F 		tst	r2, #33
 1485 0028 19D0     		beq	.L100
1001:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 1486              		.loc 1 1001 0
 1487 002a 019A     		ldr	r2, [sp, #4]
 1488 002c 12F0200F 		tst	r2, #32
 1489 0030 03D0     		beq	.L101
1003:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
 1490              		.loc 1 1003 0
 1491 0032 626D     		ldr	r2, [r4, #84]
 1492 0034 42F00202 		orr	r2, r2, #2
 1493 0038 6265     		str	r2, [r4, #84]
 1494              	.L101:
1005:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 1495              		.loc 1 1005 0
 1496 003a 019A     		ldr	r2, [sp, #4]
 1497 003c 12F0010F 		tst	r2, #1
 1498 0040 03D0     		beq	.L102
1007:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
 1499              		.loc 1 1007 0
 1500 0042 626D     		ldr	r2, [r4, #84]
 1501 0044 42F00102 		orr	r2, r2, #1
 1502 0048 6265     		str	r2, [r4, #84]
 1503              	.L102:
1010:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1504              		.loc 1 1010 0
 1505 004a 2122     		movs	r2, #33
 1506 004c 9A60     		str	r2, [r3, #8]
1013:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1507              		.loc 1 1013 0
 1508 004e 0423     		movs	r3, #4
 1509 0050 84F85130 		strb	r3, [r4, #81]
1016:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
 1510              		.loc 1 1016 0
 1511 0054 0023     		movs	r3, #0
 1512 0056 84F85030 		strb	r3, [r4, #80]
1018:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
 1513              		.loc 1 1018 0
 1514 005a 0120     		movs	r0, #1
 1515 005c 6FE0     		b	.L103
ARM GAS  /tmp/ccSyzCiQ.s 			page 61


 1516              	.L100:
1021:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
 1517              		.loc 1 1021 0
 1518 005e B5F1FF3F 		cmp	r5, #-1
 1519 0062 10D0     		beq	.L104
1023:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 1520              		.loc 1 1023 0
 1521 0064 25B1     		cbz	r5, .L105
1023:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 1522              		.loc 1 1023 0 is_stmt 0 discriminator 1
 1523 0066 FFF7FEFF 		bl	HAL_GetTick
 1524              	.LVL137:
 1525 006a 801B     		subs	r0, r0, r6
 1526 006c 8542     		cmp	r5, r0
 1527 006e 0AD2     		bcs	.L104
 1528              	.L105:
1026:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1529              		.loc 1 1026 0 is_stmt 1
 1530 0070 636D     		ldr	r3, [r4, #84]
 1531 0072 43F02003 		orr	r3, r3, #32
 1532 0076 6365     		str	r3, [r4, #84]
1029:HALLIB/Src/stm32f7xx_hal_dma2d.c ****          
 1533              		.loc 1 1029 0
 1534 0078 0320     		movs	r0, #3
 1535 007a 84F85100 		strb	r0, [r4, #81]
1032:HALLIB/Src/stm32f7xx_hal_dma2d.c ****            
 1536              		.loc 1 1032 0
 1537 007e 0023     		movs	r3, #0
 1538 0080 84F85030 		strb	r3, [r4, #80]
1034:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
 1539              		.loc 1 1034 0
 1540 0084 5BE0     		b	.L103
 1541              	.L104:
 996:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 1542              		.loc 1 996 0
 1543 0086 2368     		ldr	r3, [r4]
 1544 0088 5A68     		ldr	r2, [r3, #4]
 1545 008a 12F0020F 		tst	r2, #2
 1546 008e C6D0     		beq	.L106
 1547              	.LVL138:
 1548              	.L98:
1040:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 1549              		.loc 1 1040 0
 1550 0090 2368     		ldr	r3, [r4]
 1551 0092 DA69     		ldr	r2, [r3, #28]
 1552 0094 12F0200F 		tst	r2, #32
 1553 0098 03D1     		bne	.L107
1041:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1554              		.loc 1 1041 0 discriminator 1
 1555 009a 5B6A     		ldr	r3, [r3, #36]
1040:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 1556              		.loc 1 1040 0 discriminator 1
 1557 009c 13F0200F 		tst	r3, #32
 1558 00a0 44D0     		beq	.L108
 1559              	.L107:
1044:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    
 1560              		.loc 1 1044 0
ARM GAS  /tmp/ccSyzCiQ.s 			page 62


 1561 00a2 FFF7FEFF 		bl	HAL_GetTick
 1562              	.LVL139:
 1563 00a6 0646     		mov	r6, r0
 1564              	.LVL140:
1046:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 1565              		.loc 1 1046 0
 1566 00a8 3BE0     		b	.L114
 1567              	.LVL141:
 1568              	.L116:
1048:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 1569              		.loc 1 1048 0
 1570 00aa 5A68     		ldr	r2, [r3, #4]
 1571 00ac 0192     		str	r2, [sp, #4]
1049:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {      
 1572              		.loc 1 1049 0
 1573 00ae 019A     		ldr	r2, [sp, #4]
 1574 00b0 12F0290F 		tst	r2, #41
 1575 00b4 21D0     		beq	.L110
1051:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 1576              		.loc 1 1051 0
 1577 00b6 019A     		ldr	r2, [sp, #4]
 1578 00b8 12F0080F 		tst	r2, #8
 1579 00bc 03D0     		beq	.L111
1053:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }   
 1580              		.loc 1 1053 0
 1581 00be 626D     		ldr	r2, [r4, #84]
 1582 00c0 42F00402 		orr	r2, r2, #4
 1583 00c4 6265     		str	r2, [r4, #84]
 1584              	.L111:
1055:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 1585              		.loc 1 1055 0
 1586 00c6 019A     		ldr	r2, [sp, #4]
 1587 00c8 12F0200F 		tst	r2, #32
 1588 00cc 03D0     		beq	.L112
1057:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
 1589              		.loc 1 1057 0
 1590 00ce 626D     		ldr	r2, [r4, #84]
 1591 00d0 42F00202 		orr	r2, r2, #2
 1592 00d4 6265     		str	r2, [r4, #84]
 1593              	.L112:
1059:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 1594              		.loc 1 1059 0
 1595 00d6 019A     		ldr	r2, [sp, #4]
 1596 00d8 12F0010F 		tst	r2, #1
 1597 00dc 03D0     		beq	.L113
1061:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
 1598              		.loc 1 1061 0
 1599 00de 626D     		ldr	r2, [r4, #84]
 1600 00e0 42F00102 		orr	r2, r2, #1
 1601 00e4 6265     		str	r2, [r4, #84]
 1602              	.L113:
1064:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
 1603              		.loc 1 1064 0
 1604 00e6 2922     		movs	r2, #41
 1605 00e8 9A60     		str	r2, [r3, #8]
1067:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
 1606              		.loc 1 1067 0
ARM GAS  /tmp/ccSyzCiQ.s 			page 63


 1607 00ea 0423     		movs	r3, #4
 1608 00ec 84F85130 		strb	r3, [r4, #81]
1070:HALLIB/Src/stm32f7xx_hal_dma2d.c ****           
 1609              		.loc 1 1070 0
 1610 00f0 0023     		movs	r3, #0
 1611 00f2 84F85030 		strb	r3, [r4, #80]
1072:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }      
 1612              		.loc 1 1072 0
 1613 00f6 0120     		movs	r0, #1
 1614 00f8 21E0     		b	.L103
 1615              	.L110:
1075:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
 1616              		.loc 1 1075 0
 1617 00fa B5F1FF3F 		cmp	r5, #-1
 1618 00fe 10D0     		beq	.L114
1077:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 1619              		.loc 1 1077 0
 1620 0100 25B1     		cbz	r5, .L115
1077:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         {
 1621              		.loc 1 1077 0 is_stmt 0 discriminator 1
 1622 0102 FFF7FEFF 		bl	HAL_GetTick
 1623              	.LVL142:
 1624 0106 801B     		subs	r0, r0, r6
 1625 0108 8542     		cmp	r5, r0
 1626 010a 0AD2     		bcs	.L114
 1627              	.L115:
1080:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 1628              		.loc 1 1080 0 is_stmt 1
 1629 010c 636D     		ldr	r3, [r4, #84]
 1630 010e 43F02003 		orr	r3, r3, #32
 1631 0112 6365     		str	r3, [r4, #84]
1083:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
 1632              		.loc 1 1083 0
 1633 0114 0320     		movs	r0, #3
 1634 0116 84F85100 		strb	r0, [r4, #81]
1086:HALLIB/Src/stm32f7xx_hal_dma2d.c ****                     
 1635              		.loc 1 1086 0
 1636 011a 0023     		movs	r3, #0
 1637 011c 84F85030 		strb	r3, [r4, #80]
1088:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         }
 1638              		.loc 1 1088 0
 1639 0120 0DE0     		b	.L103
 1640              	.L114:
1046:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 1641              		.loc 1 1046 0
 1642 0122 2368     		ldr	r3, [r4]
 1643 0124 5A68     		ldr	r2, [r3, #4]
 1644 0126 12F0100F 		tst	r2, #16
 1645 012a BED0     		beq	.L116
 1646              	.LVL143:
 1647              	.L108:
1095:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1648              		.loc 1 1095 0
 1649 012c 2368     		ldr	r3, [r4]
 1650 012e 1222     		movs	r2, #18
 1651 0130 9A60     		str	r2, [r3, #8]
1098:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
ARM GAS  /tmp/ccSyzCiQ.s 			page 64


 1652              		.loc 1 1098 0
 1653 0132 0123     		movs	r3, #1
 1654 0134 84F85130 		strb	r3, [r4, #81]
1101:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1655              		.loc 1 1101 0
 1656 0138 0020     		movs	r0, #0
 1657 013a 84F85000 		strb	r0, [r4, #80]
 1658              	.L103:
1104:HALLIB/Src/stm32f7xx_hal_dma2d.c **** /**
 1659              		.loc 1 1104 0
 1660 013e 02B0     		add	sp, sp, #8
 1661              	.LCFI33:
 1662              		.cfi_def_cfa_offset 16
 1663              		@ sp needed
 1664 0140 70BD     		pop	{r4, r5, r6, pc}
 1665              		.cfi_endproc
 1666              	.LFE153:
 1668 0142 00BF     		.section	.text.HAL_DMA2D_LineEventCallback,"ax",%progbits
 1669              		.align	2
 1670              		.weak	HAL_DMA2D_LineEventCallback
 1671              		.thumb
 1672              		.thumb_func
 1674              	HAL_DMA2D_LineEventCallback:
 1675              	.LFB155:
1273:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Prevent unused argument(s) compilation warning */
 1676              		.loc 1 1273 0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 1680              		@ link register save eliminated.
 1681              	.LVL144:
 1682 0000 7047     		bx	lr
 1683              		.cfi_endproc
 1684              	.LFE155:
 1686 0002 00BF     		.section	.text.HAL_DMA2D_CLUTLoadingCpltCallback,"ax",%progbits
 1687              		.align	2
 1688              		.weak	HAL_DMA2D_CLUTLoadingCpltCallback
 1689              		.thumb
 1690              		.thumb_func
 1692              	HAL_DMA2D_CLUTLoadingCpltCallback:
 1693              	.LFB156:
1289:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Prevent unused argument(s) compilation warning */
 1694              		.loc 1 1289 0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 0
 1697              		@ frame_needed = 0, uses_anonymous_args = 0
 1698              		@ link register save eliminated.
 1699              	.LVL145:
 1700 0000 7047     		bx	lr
 1701              		.cfi_endproc
 1702              	.LFE156:
 1704 0002 00BF     		.section	.text.HAL_DMA2D_IRQHandler,"ax",%progbits
 1705              		.align	2
 1706              		.global	HAL_DMA2D_IRQHandler
 1707              		.thumb
 1708              		.thumb_func
 1710              	HAL_DMA2D_IRQHandler:
ARM GAS  /tmp/ccSyzCiQ.s 			page 65


 1711              	.LFB154:
1112:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 1712              		.loc 1 1112 0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 0
 1715              		@ frame_needed = 0, uses_anonymous_args = 0
 1716              	.LVL146:
1112:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 1717              		.loc 1 1112 0
 1718 0000 70B5     		push	{r4, r5, r6, lr}
 1719              	.LCFI34:
 1720              		.cfi_def_cfa_offset 16
 1721              		.cfi_offset 4, -16
 1722              		.cfi_offset 5, -12
 1723              		.cfi_offset 6, -8
 1724              		.cfi_offset 14, -4
 1725 0002 0446     		mov	r4, r0
1113:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 1726              		.loc 1 1113 0
 1727 0004 0368     		ldr	r3, [r0]
 1728 0006 5D68     		ldr	r5, [r3, #4]
 1729              	.LVL147:
1114:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
 1730              		.loc 1 1114 0
 1731 0008 1E68     		ldr	r6, [r3]
 1732              	.LVL148:
1117:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1733              		.loc 1 1117 0
 1734 000a 15F0010F 		tst	r5, #1
 1735 000e 16D0     		beq	.L121
1119:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 1736              		.loc 1 1119 0
 1737 0010 16F4807F 		tst	r6, #256
 1738 0014 13D0     		beq	.L121
1122:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1739              		.loc 1 1122 0
 1740 0016 1A68     		ldr	r2, [r3]
 1741 0018 22F48072 		bic	r2, r2, #256
 1742 001c 1A60     		str	r2, [r3]
1125:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 1743              		.loc 1 1125 0
 1744 001e 436D     		ldr	r3, [r0, #84]
 1745 0020 43F00103 		orr	r3, r3, #1
 1746 0024 4365     		str	r3, [r0, #84]
1128:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1747              		.loc 1 1128 0
 1748 0026 0368     		ldr	r3, [r0]
 1749 0028 0122     		movs	r2, #1
 1750 002a 9A60     		str	r2, [r3, #8]
1131:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1751              		.loc 1 1131 0
 1752 002c 0423     		movs	r3, #4
 1753 002e 80F85130 		strb	r3, [r0, #81]
1134:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 1754              		.loc 1 1134 0
 1755 0032 0023     		movs	r3, #0
 1756 0034 80F85030 		strb	r3, [r0, #80]
ARM GAS  /tmp/ccSyzCiQ.s 			page 66


1136:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
 1757              		.loc 1 1136 0
 1758 0038 C369     		ldr	r3, [r0, #28]
 1759 003a 03B1     		cbz	r3, .L121
1139:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
 1760              		.loc 1 1139 0
 1761 003c 9847     		blx	r3
 1762              	.LVL149:
 1763              	.L121:
1144:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1764              		.loc 1 1144 0
 1765 003e 15F0200F 		tst	r5, #32
 1766 0042 18D0     		beq	.L122
1146:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {  
 1767              		.loc 1 1146 0
 1768 0044 16F4005F 		tst	r6, #8192
 1769 0048 15D0     		beq	.L122
1149:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1770              		.loc 1 1149 0
 1771 004a 2268     		ldr	r2, [r4]
 1772 004c 1368     		ldr	r3, [r2]
 1773 004e 23F40053 		bic	r3, r3, #8192
 1774 0052 1360     		str	r3, [r2]
1152:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1775              		.loc 1 1152 0
 1776 0054 2368     		ldr	r3, [r4]
 1777 0056 2022     		movs	r2, #32
 1778 0058 9A60     		str	r2, [r3, #8]
1155:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 1779              		.loc 1 1155 0
 1780 005a 636D     		ldr	r3, [r4, #84]
 1781 005c 43F00203 		orr	r3, r3, #2
 1782 0060 6365     		str	r3, [r4, #84]
1158:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1783              		.loc 1 1158 0
 1784 0062 0423     		movs	r3, #4
 1785 0064 84F85130 		strb	r3, [r4, #81]
1161:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 1786              		.loc 1 1161 0
 1787 0068 0023     		movs	r3, #0
 1788 006a 84F85030 		strb	r3, [r4, #80]
1163:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
 1789              		.loc 1 1163 0
 1790 006e E369     		ldr	r3, [r4, #28]
 1791 0070 0BB1     		cbz	r3, .L122
1166:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
 1792              		.loc 1 1166 0
 1793 0072 2046     		mov	r0, r4
 1794 0074 9847     		blx	r3
 1795              	.LVL150:
 1796              	.L122:
1171:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1797              		.loc 1 1171 0
 1798 0076 15F0080F 		tst	r5, #8
 1799 007a 18D0     		beq	.L123
1173:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {    
 1800              		.loc 1 1173 0
ARM GAS  /tmp/ccSyzCiQ.s 			page 67


 1801 007c 16F4006F 		tst	r6, #2048
 1802 0080 15D0     		beq	.L123
1176:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1803              		.loc 1 1176 0
 1804 0082 2268     		ldr	r2, [r4]
 1805 0084 1368     		ldr	r3, [r2]
 1806 0086 23F40063 		bic	r3, r3, #2048
 1807 008a 1360     		str	r3, [r2]
1179:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1808              		.loc 1 1179 0
 1809 008c 2368     		ldr	r3, [r4]
 1810 008e 0822     		movs	r2, #8
 1811 0090 9A60     		str	r2, [r3, #8]
1182:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 1812              		.loc 1 1182 0
 1813 0092 636D     		ldr	r3, [r4, #84]
 1814 0094 43F00403 		orr	r3, r3, #4
 1815 0098 6365     		str	r3, [r4, #84]
1185:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1816              		.loc 1 1185 0
 1817 009a 0423     		movs	r3, #4
 1818 009c 84F85130 		strb	r3, [r4, #81]
1188:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 1819              		.loc 1 1188 0
 1820 00a0 0023     		movs	r3, #0
 1821 00a2 84F85030 		strb	r3, [r4, #80]
1190:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
 1822              		.loc 1 1190 0
 1823 00a6 E369     		ldr	r3, [r4, #28]
 1824 00a8 0BB1     		cbz	r3, .L123
1193:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }
 1825              		.loc 1 1193 0
 1826 00aa 2046     		mov	r0, r4
 1827 00ac 9847     		blx	r3
 1828              	.LVL151:
 1829              	.L123:
1198:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1830              		.loc 1 1198 0
 1831 00ae 15F0040F 		tst	r5, #4
 1832 00b2 0DD0     		beq	.L124
1200:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {    
 1833              		.loc 1 1200 0
 1834 00b4 16F4806F 		tst	r6, #1024
 1835 00b8 0AD0     		beq	.L124
1203:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1836              		.loc 1 1203 0
 1837 00ba 2268     		ldr	r2, [r4]
 1838 00bc 1368     		ldr	r3, [r2]
 1839 00be 23F48063 		bic	r3, r3, #1024
 1840 00c2 1360     		str	r3, [r2]
1206:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1841              		.loc 1 1206 0
 1842 00c4 2368     		ldr	r3, [r4]
 1843 00c6 0422     		movs	r2, #4
 1844 00c8 9A60     		str	r2, [r3, #8]
1209:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 1845              		.loc 1 1209 0
ARM GAS  /tmp/ccSyzCiQ.s 			page 68


 1846 00ca 2046     		mov	r0, r4
 1847 00cc FFF7FEFF 		bl	HAL_DMA2D_LineEventCallback
 1848              	.LVL152:
 1849              	.L124:
1213:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1850              		.loc 1 1213 0
 1851 00d0 15F0020F 		tst	r5, #2
 1852 00d4 16D0     		beq	.L125
1215:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {   
 1853              		.loc 1 1215 0
 1854 00d6 16F4007F 		tst	r6, #512
 1855 00da 13D0     		beq	.L125
1218:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1856              		.loc 1 1218 0
 1857 00dc 2268     		ldr	r2, [r4]
 1858 00de 1368     		ldr	r3, [r2]
 1859 00e0 23F40073 		bic	r3, r3, #512
 1860 00e4 1360     		str	r3, [r2]
1221:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1861              		.loc 1 1221 0
 1862 00e6 2368     		ldr	r3, [r4]
 1863 00e8 0222     		movs	r2, #2
 1864 00ea 9A60     		str	r2, [r3, #8]
1224:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 1865              		.loc 1 1224 0
 1866 00ec 636D     		ldr	r3, [r4, #84]
 1867 00ee 6365     		str	r3, [r4, #84]
1227:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 1868              		.loc 1 1227 0
 1869 00f0 0123     		movs	r3, #1
 1870 00f2 84F85130 		strb	r3, [r4, #81]
1230:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 1871              		.loc 1 1230 0
 1872 00f6 0023     		movs	r3, #0
 1873 00f8 84F85030 		strb	r3, [r4, #80]
1232:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       {
 1874              		.loc 1 1232 0
 1875 00fc A369     		ldr	r3, [r4, #24]
 1876 00fe 0BB1     		cbz	r3, .L125
1235:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       }         
 1877              		.loc 1 1235 0
 1878 0100 2046     		mov	r0, r4
 1879 0102 9847     		blx	r3
 1880              	.LVL153:
 1881              	.L125:
1240:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1882              		.loc 1 1240 0
 1883 0104 15F0100F 		tst	r5, #16
 1884 0108 15D0     		beq	.L120
1242:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {    
 1885              		.loc 1 1242 0
 1886 010a 16F4805F 		tst	r6, #4096
 1887 010e 12D0     		beq	.L120
1245:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1888              		.loc 1 1245 0
 1889 0110 2268     		ldr	r2, [r4]
 1890 0112 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccSyzCiQ.s 			page 69


 1891 0114 23F48053 		bic	r3, r3, #4096
 1892 0118 1360     		str	r3, [r2]
1248:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1893              		.loc 1 1248 0
 1894 011a 2368     		ldr	r3, [r4]
 1895 011c 1022     		movs	r2, #16
 1896 011e 9A60     		str	r2, [r3, #8]
1251:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 1897              		.loc 1 1251 0
 1898 0120 636D     		ldr	r3, [r4, #84]
 1899 0122 6365     		str	r3, [r4, #84]
1254:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 1900              		.loc 1 1254 0
 1901 0124 0123     		movs	r3, #1
 1902 0126 84F85130 		strb	r3, [r4, #81]
1257:HALLIB/Src/stm32f7xx_hal_dma2d.c ****       
 1903              		.loc 1 1257 0
 1904 012a 0023     		movs	r3, #0
 1905 012c 84F85030 		strb	r3, [r4, #80]
1260:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }
 1906              		.loc 1 1260 0
 1907 0130 2046     		mov	r0, r4
 1908 0132 FFF7FEFF 		bl	HAL_DMA2D_CLUTLoadingCpltCallback
 1909              	.LVL154:
 1910              	.L120:
 1911 0136 70BD     		pop	{r4, r5, r6, pc}
 1912              		.cfi_endproc
 1913              	.LFE154:
 1915              		.section	.text.HAL_DMA2D_ConfigLayer,"ax",%progbits
 1916              		.align	2
 1917              		.global	HAL_DMA2D_ConfigLayer
 1918              		.thumb
 1919              		.thumb_func
 1921              	HAL_DMA2D_ConfigLayer:
 1922              	.LFB157:
1332:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 1923              		.loc 1 1332 0
 1924              		.cfi_startproc
 1925              		@ args = 0, pretend = 0, frame = 0
 1926              		@ frame_needed = 0, uses_anonymous_args = 0
 1927              		@ link register save eliminated.
 1928              	.LVL155:
1350:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1929              		.loc 1 1350 0
 1930 0000 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 1931 0004 012B     		cmp	r3, #1
 1932 0006 65D0     		beq	.L134
1332:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 1933              		.loc 1 1332 0 discriminator 2
 1934 0008 30B4     		push	{r4, r5}
 1935              	.LCFI35:
 1936              		.cfi_def_cfa_offset 8
 1937              		.cfi_offset 4, -8
 1938              		.cfi_offset 5, -4
1350:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 1939              		.loc 1 1350 0 discriminator 2
 1940 000a 0123     		movs	r3, #1
ARM GAS  /tmp/ccSyzCiQ.s 			page 70


 1941 000c 80F85030 		strb	r3, [r0, #80]
1353:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 1942              		.loc 1 1353 0 discriminator 2
 1943 0010 0223     		movs	r3, #2
 1944 0012 80F85130 		strb	r3, [r0, #81]
1358:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 1945              		.loc 1 1358 0 discriminator 2
 1946 0016 4B00     		lsls	r3, r1, #1
 1947 0018 0B44     		add	r3, r3, r1
 1948 001a DA00     		lsls	r2, r3, #3
 1949 001c 0244     		add	r2, r2, r0
 1950 001e 546A     		ldr	r4, [r2, #36]
 1951 0020 936A     		ldr	r3, [r2, #40]
 1952 0022 44EA0343 		orr	r3, r4, r3, lsl #16
 1953              	.LVL156:
1362:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   regMask  |= DMA2D_BGPFCCR_AI;  
 1954              		.loc 1 1362 0 discriminator 2
 1955 0026 156B     		ldr	r5, [r2, #48]
 1956 0028 43EA0553 		orr	r3, r3, r5, lsl #20
 1957              	.LVL157:
1367:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   regMask  |= DMA2D_BGPFCCR_RBS;  
 1958              		.loc 1 1367 0 discriminator 2
 1959 002c 526B     		ldr	r2, [r2, #52]
 1960 002e 43EA4253 		orr	r3, r3, r2, lsl #21
 1961              	.LVL158:
1371:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1962              		.loc 1 1371 0 discriminator 2
 1963 0032 093C     		subs	r4, r4, #9
 1964 0034 012C     		cmp	r4, #1
 1965 0036 08D8     		bhi	.L130
1373:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 1966              		.loc 1 1373 0
 1967 0038 01EB4104 		add	r4, r1, r1, lsl #1
 1968 003c E200     		lsls	r2, r4, #3
 1969 003e 0244     		add	r2, r2, r0
 1970 0040 D26A     		ldr	r2, [r2, #44]
 1971 0042 02F07F42 		and	r2, r2, #-16777216
 1972 0046 1343     		orrs	r3, r3, r2
 1973              	.LVL159:
 1974 0048 06E0     		b	.L131
 1975              	.L130:
1377:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
 1976              		.loc 1 1377 0
 1977 004a 01EB4104 		add	r4, r1, r1, lsl #1
 1978 004e E200     		lsls	r2, r4, #3
 1979 0050 0244     		add	r2, r2, r0
 1980 0052 D26A     		ldr	r2, [r2, #44]
 1981 0054 43EA0263 		orr	r3, r3, r2, lsl #24
 1982              	.LVL160:
 1983              	.L131:
1381:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 1984              		.loc 1 1381 0
 1985 0058 D1B9     		cbnz	r1, .L132
1384:HALLIB/Src/stm32f7xx_hal_dma2d.c ****               
 1986              		.loc 1 1384 0
 1987 005a 0468     		ldr	r4, [r0]
 1988 005c 656A     		ldr	r5, [r4, #36]
ARM GAS  /tmp/ccSyzCiQ.s 			page 71


 1989 005e 1F4A     		ldr	r2, .L137
 1990 0060 2A40     		ands	r2, r2, r5
 1991 0062 1343     		orrs	r3, r3, r2
 1992              	.LVL161:
 1993 0064 6362     		str	r3, [r4, #36]
1387:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 1994              		.loc 1 1387 0
 1995 0066 0468     		ldr	r4, [r0]
 1996 0068 4A00     		lsls	r2, r1, #1
 1997 006a 0A44     		add	r2, r2, r1
 1998 006c D300     		lsls	r3, r2, #3
 1999 006e 0344     		add	r3, r3, r0
 2000 0070 1A6A     		ldr	r2, [r3, #32]
 2001 0072 A261     		str	r2, [r4, #24]
1390:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {    
 2002              		.loc 1 1390 0
 2003 0074 5B6A     		ldr	r3, [r3, #36]
 2004 0076 093B     		subs	r3, r3, #9
 2005 0078 012B     		cmp	r3, #1
 2006 007a 23D8     		bhi	.L133
1392:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }    
 2007              		.loc 1 1392 0
 2008 007c 0268     		ldr	r2, [r0]
 2009 007e 01EB4101 		add	r1, r1, r1, lsl #1
 2010              	.LVL162:
 2011 0082 CB00     		lsls	r3, r1, #3
 2012 0084 0344     		add	r3, r3, r0
 2013 0086 DB6A     		ldr	r3, [r3, #44]
 2014 0088 23F07F43 		bic	r3, r3, #-16777216
 2015 008c 9362     		str	r3, [r2, #40]
 2016 008e 19E0     		b	.L133
 2017              	.LVL163:
 2018              	.L132:
1399:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 2019              		.loc 1 1399 0
 2020 0090 0468     		ldr	r4, [r0]
 2021 0092 E569     		ldr	r5, [r4, #28]
 2022 0094 114A     		ldr	r2, .L137
 2023 0096 2A40     		ands	r2, r2, r5
 2024 0098 1343     		orrs	r3, r3, r2
 2025              	.LVL164:
 2026 009a E361     		str	r3, [r4, #28]
1402:HALLIB/Src/stm32f7xx_hal_dma2d.c ****    
 2027              		.loc 1 1402 0
 2028 009c 0468     		ldr	r4, [r0]
 2029 009e 4A00     		lsls	r2, r1, #1
 2030 00a0 0A44     		add	r2, r2, r1
 2031 00a2 D300     		lsls	r3, r2, #3
 2032 00a4 0344     		add	r3, r3, r0
 2033 00a6 1A6A     		ldr	r2, [r3, #32]
 2034 00a8 2261     		str	r2, [r4, #16]
1405:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     {
 2035              		.loc 1 1405 0
 2036 00aa 5B6A     		ldr	r3, [r3, #36]
 2037 00ac 093B     		subs	r3, r3, #9
 2038 00ae 012B     		cmp	r3, #1
 2039 00b0 08D8     		bhi	.L133
ARM GAS  /tmp/ccSyzCiQ.s 			page 72


1407:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     }   
 2040              		.loc 1 1407 0
 2041 00b2 0268     		ldr	r2, [r0]
 2042 00b4 01EB4101 		add	r1, r1, r1, lsl #1
 2043              	.LVL165:
 2044 00b8 CB00     		lsls	r3, r1, #3
 2045 00ba 0344     		add	r3, r3, r0
 2046 00bc DB6A     		ldr	r3, [r3, #44]
 2047 00be 23F07F43 		bic	r3, r3, #-16777216
 2048 00c2 1362     		str	r3, [r2, #32]
 2049              	.L133:
1411:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2050              		.loc 1 1411 0
 2051 00c4 0123     		movs	r3, #1
 2052 00c6 80F85130 		strb	r3, [r0, #81]
1414:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2053              		.loc 1 1414 0
 2054 00ca 0023     		movs	r3, #0
 2055 00cc 80F85030 		strb	r3, [r0, #80]
1416:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 2056              		.loc 1 1416 0
 2057 00d0 1846     		mov	r0, r3
 2058              	.LVL166:
 2059 00d2 01E0     		b	.L129
 2060              	.LVL167:
 2061              	.L134:
 2062              	.LCFI36:
 2063              		.cfi_def_cfa_offset 0
 2064              		.cfi_restore 4
 2065              		.cfi_restore 5
1350:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2066              		.loc 1 1350 0
 2067 00d4 0220     		movs	r0, #2
 2068              	.LVL168:
 2069 00d6 7047     		bx	lr
 2070              	.LVL169:
 2071              	.L129:
 2072              	.LCFI37:
 2073              		.cfi_def_cfa_offset 8
 2074              		.cfi_offset 4, -8
 2075              		.cfi_offset 5, -4
1417:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2076              		.loc 1 1417 0
 2077 00d8 30BC     		pop	{r4, r5}
 2078              	.LCFI38:
 2079              		.cfi_restore 5
 2080              		.cfi_restore 4
 2081              		.cfi_def_cfa_offset 0
 2082 00da 7047     		bx	lr
 2083              	.L138:
 2084              		.align	2
 2085              	.L137:
 2086 00dc F0FFCC00 		.word	13434864
 2087              		.cfi_endproc
 2088              	.LFE157:
 2090              		.section	.text.HAL_DMA2D_ConfigCLUT,"ax",%progbits
 2091              		.align	2
ARM GAS  /tmp/ccSyzCiQ.s 			page 73


 2092              		.global	HAL_DMA2D_ConfigCLUT
 2093              		.thumb
 2094              		.thumb_func
 2096              	HAL_DMA2D_ConfigCLUT:
 2097              	.LFB158:
1431:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 2098              		.loc 1 1431 0
 2099              		.cfi_startproc
 2100              		@ args = 4, pretend = 0, frame = 16
 2101              		@ frame_needed = 0, uses_anonymous_args = 0
 2102              		@ link register save eliminated.
 2103              	.LVL170:
 2104 0000 10B4     		push	{r4}
 2105              	.LCFI39:
 2106              		.cfi_def_cfa_offset 4
 2107              		.cfi_offset 4, -4
 2108 0002 85B0     		sub	sp, sp, #20
 2109              	.LCFI40:
 2110              		.cfi_def_cfa_offset 24
 2111 0004 04AC     		add	r4, sp, #16
 2112 0006 04E90E00 		stmdb	r4, {r1, r2, r3}
1438:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2113              		.loc 1 1438 0
 2114 000a 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 2115 000e 012B     		cmp	r3, #1
 2116 0010 2CD0     		beq	.L143
1438:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2117              		.loc 1 1438 0 is_stmt 0 discriminator 2
 2118 0012 0123     		movs	r3, #1
 2119 0014 80F85030 		strb	r3, [r0, #80]
1441:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2120              		.loc 1 1441 0 is_stmt 1 discriminator 2
 2121 0018 0223     		movs	r3, #2
 2122 001a 80F85130 		strb	r3, [r0, #81]
1444:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 2123              		.loc 1 1444 0 discriminator 2
 2124 001e 069B     		ldr	r3, [sp, #24]
 2125 0020 73B9     		cbnz	r3, .L141
1447:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      
 2126              		.loc 1 1447 0
 2127 0022 0368     		ldr	r3, [r0]
 2128 0024 019A     		ldr	r2, [sp, #4]
 2129 0026 1A63     		str	r2, [r3, #48]
1450:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_BGPFCCR_CCM_P
 2130              		.loc 1 1450 0
 2131 0028 0468     		ldr	r4, [r0]
 2132 002a 636A     		ldr	r3, [r4, #36]
 2133 002c 1249     		ldr	r1, .L145
 2134 002e 1940     		ands	r1, r1, r3
 2135 0030 029B     		ldr	r3, [sp, #8]
 2136 0032 1A01     		lsls	r2, r3, #4
 2137 0034 039B     		ldr	r3, [sp, #12]
 2138 0036 42EA0323 		orr	r3, r2, r3, lsl #8
 2139 003a 0B43     		orrs	r3, r3, r1
 2140 003c 6362     		str	r3, [r4, #36]
 2141 003e 0DE0     		b	.L142
 2142              	.L141:
ARM GAS  /tmp/ccSyzCiQ.s 			page 74


1457:HALLIB/Src/stm32f7xx_hal_dma2d.c ****      
 2143              		.loc 1 1457 0
 2144 0040 0368     		ldr	r3, [r0]
 2145 0042 019A     		ldr	r2, [sp, #4]
 2146 0044 DA62     		str	r2, [r3, #44]
1460:HALLIB/Src/stm32f7xx_hal_dma2d.c ****             ((CLUTCfg.Size << DMA2D_BGPFCCR_CS_Pos) | (CLUTCfg.CLUTColorMode << DMA2D_FGPFCCR_CCM_P
 2147              		.loc 1 1460 0
 2148 0046 0468     		ldr	r4, [r0]
 2149 0048 E369     		ldr	r3, [r4, #28]
 2150 004a 0B49     		ldr	r1, .L145
 2151 004c 1940     		ands	r1, r1, r3
 2152 004e 029B     		ldr	r3, [sp, #8]
 2153 0050 1A01     		lsls	r2, r3, #4
 2154 0052 039B     		ldr	r3, [sp, #12]
 2155 0054 42EA0323 		orr	r3, r2, r3, lsl #8
 2156 0058 0B43     		orrs	r3, r3, r1
 2157 005a E361     		str	r3, [r4, #28]
 2158              	.L142:
1465:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2159              		.loc 1 1465 0
 2160 005c 0123     		movs	r3, #1
 2161 005e 80F85130 		strb	r3, [r0, #81]
1468:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 2162              		.loc 1 1468 0
 2163 0062 0023     		movs	r3, #0
 2164 0064 80F85030 		strb	r3, [r0, #80]
1470:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 2165              		.loc 1 1470 0
 2166 0068 1846     		mov	r0, r3
 2167              	.LVL171:
 2168 006a 00E0     		b	.L140
 2169              	.LVL172:
 2170              	.L143:
1438:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2171              		.loc 1 1438 0
 2172 006c 0220     		movs	r0, #2
 2173              	.LVL173:
 2174              	.L140:
1471:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2175              		.loc 1 1471 0
 2176 006e 05B0     		add	sp, sp, #20
 2177              	.LCFI41:
 2178              		.cfi_def_cfa_offset 4
 2179              		@ sp needed
 2180 0070 5DF8044B 		ldr	r4, [sp], #4
 2181              	.LCFI42:
 2182              		.cfi_restore 4
 2183              		.cfi_def_cfa_offset 0
 2184              	.LVL174:
 2185 0074 7047     		bx	lr
 2186              	.L146:
 2187 0076 00BF     		.align	2
 2188              	.L145:
 2189 0078 EF00FFFF 		.word	-65297
 2190              		.cfi_endproc
 2191              	.LFE158:
 2193              		.section	.text.HAL_DMA2D_ProgramLineEvent,"ax",%progbits
ARM GAS  /tmp/ccSyzCiQ.s 			page 75


 2194              		.align	2
 2195              		.global	HAL_DMA2D_ProgramLineEvent
 2196              		.thumb
 2197              		.thumb_func
 2199              	HAL_DMA2D_ProgramLineEvent:
 2200              	.LFB159:
1485:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Check the parameters */
 2201              		.loc 1 1485 0
 2202              		.cfi_startproc
 2203              		@ args = 0, pretend = 0, frame = 0
 2204              		@ frame_needed = 0, uses_anonymous_args = 0
 2205              		@ link register save eliminated.
 2206              	.LVL175:
1489:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   {
 2207              		.loc 1 1489 0
 2208 0000 B1F5803F 		cmp	r1, #65536
 2209 0004 17D2     		bcs	.L149
1496:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 2210              		.loc 1 1496 0
 2211 0006 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 2212 000a 012B     		cmp	r3, #1
 2213 000c 15D0     		beq	.L150
1496:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 2214              		.loc 1 1496 0 is_stmt 0 discriminator 2
 2215 000e 0122     		movs	r2, #1
 2216 0010 80F85020 		strb	r2, [r0, #80]
1499:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2217              		.loc 1 1499 0 is_stmt 1 discriminator 2
 2218 0014 0223     		movs	r3, #2
 2219 0016 80F85130 		strb	r3, [r0, #81]
1502:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 2220              		.loc 1 1502 0 discriminator 2
 2221 001a 0368     		ldr	r3, [r0]
 2222 001c 9964     		str	r1, [r3, #72]
1505:HALLIB/Src/stm32f7xx_hal_dma2d.c ****         
 2223              		.loc 1 1505 0 discriminator 2
 2224 001e 0168     		ldr	r1, [r0]
 2225              	.LVL176:
 2226 0020 0B68     		ldr	r3, [r1]
 2227              	.LVL177:
 2228 0022 43F48063 		orr	r3, r3, #1024
 2229 0026 0B60     		str	r3, [r1]
1508:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 2230              		.loc 1 1508 0 discriminator 2
 2231 0028 80F85120 		strb	r2, [r0, #81]
1511:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 2232              		.loc 1 1511 0 discriminator 2
 2233 002c 0023     		movs	r3, #0
 2234 002e 80F85030 		strb	r3, [r0, #80]
1513:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }  
 2235              		.loc 1 1513 0 discriminator 2
 2236 0032 1846     		mov	r0, r3
 2237              	.LVL178:
 2238 0034 7047     		bx	lr
 2239              	.LVL179:
 2240              	.L149:
1491:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   }
ARM GAS  /tmp/ccSyzCiQ.s 			page 76


 2241              		.loc 1 1491 0
 2242 0036 0120     		movs	r0, #1
 2243              	.LVL180:
 2244 0038 7047     		bx	lr
 2245              	.LVL181:
 2246              	.L150:
1496:HALLIB/Src/stm32f7xx_hal_dma2d.c ****     
 2247              		.loc 1 1496 0
 2248 003a 0220     		movs	r0, #2
 2249              	.LVL182:
1515:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2250              		.loc 1 1515 0
 2251 003c 7047     		bx	lr
 2252              		.cfi_endproc
 2253              	.LFE159:
 2255 003e 00BF     		.section	.text.HAL_DMA2D_EnableDeadTime,"ax",%progbits
 2256              		.align	2
 2257              		.global	HAL_DMA2D_EnableDeadTime
 2258              		.thumb
 2259              		.thumb_func
 2261              	HAL_DMA2D_EnableDeadTime:
 2262              	.LFB160:
1523:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Locked */
 2263              		.loc 1 1523 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 0
 2266              		@ frame_needed = 0, uses_anonymous_args = 0
 2267              		@ link register save eliminated.
 2268              	.LVL183:
1525:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2269              		.loc 1 1525 0
 2270 0000 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 2271 0004 012B     		cmp	r3, #1
 2272 0006 10D0     		beq	.L153
1525:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2273              		.loc 1 1525 0 is_stmt 0 discriminator 2
 2274 0008 0122     		movs	r2, #1
 2275 000a 80F85020 		strb	r2, [r0, #80]
1527:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2276              		.loc 1 1527 0 is_stmt 1 discriminator 2
 2277 000e 0223     		movs	r3, #2
 2278 0010 80F85130 		strb	r3, [r0, #81]
1530:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2279              		.loc 1 1530 0 discriminator 2
 2280 0014 0168     		ldr	r1, [r0]
 2281 0016 CB6C     		ldr	r3, [r1, #76]
 2282 0018 1343     		orrs	r3, r3, r2
 2283 001a CB64     		str	r3, [r1, #76]
1532:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2284              		.loc 1 1532 0 discriminator 2
 2285 001c 80F85120 		strb	r2, [r0, #81]
1535:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2286              		.loc 1 1535 0 discriminator 2
 2287 0020 0023     		movs	r3, #0
 2288 0022 80F85030 		strb	r3, [r0, #80]
1537:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 2289              		.loc 1 1537 0 discriminator 2
ARM GAS  /tmp/ccSyzCiQ.s 			page 77


 2290 0026 1846     		mov	r0, r3
 2291              	.LVL184:
 2292 0028 7047     		bx	lr
 2293              	.LVL185:
 2294              	.L153:
1525:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2295              		.loc 1 1525 0
 2296 002a 0220     		movs	r0, #2
 2297              	.LVL186:
1538:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2298              		.loc 1 1538 0
 2299 002c 7047     		bx	lr
 2300              		.cfi_endproc
 2301              	.LFE160:
 2303 002e 00BF     		.section	.text.HAL_DMA2D_DisableDeadTime,"ax",%progbits
 2304              		.align	2
 2305              		.global	HAL_DMA2D_DisableDeadTime
 2306              		.thumb
 2307              		.thumb_func
 2309              	HAL_DMA2D_DisableDeadTime:
 2310              	.LFB161:
1546:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Locked */
 2311              		.loc 1 1546 0
 2312              		.cfi_startproc
 2313              		@ args = 0, pretend = 0, frame = 0
 2314              		@ frame_needed = 0, uses_anonymous_args = 0
 2315              		@ link register save eliminated.
 2316              	.LVL187:
1548:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2317              		.loc 1 1548 0
 2318 0000 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 2319 0004 012B     		cmp	r3, #1
 2320 0006 11D0     		beq	.L156
1548:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2321              		.loc 1 1548 0 is_stmt 0 discriminator 2
 2322 0008 0122     		movs	r2, #1
 2323 000a 80F85020 		strb	r2, [r0, #80]
1550:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2324              		.loc 1 1550 0 is_stmt 1 discriminator 2
 2325 000e 0223     		movs	r3, #2
 2326 0010 80F85130 		strb	r3, [r0, #81]
1553:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2327              		.loc 1 1553 0 discriminator 2
 2328 0014 0168     		ldr	r1, [r0]
 2329 0016 CB6C     		ldr	r3, [r1, #76]
 2330 0018 23F00103 		bic	r3, r3, #1
 2331 001c CB64     		str	r3, [r1, #76]
1555:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2332              		.loc 1 1555 0 discriminator 2
 2333 001e 80F85120 		strb	r2, [r0, #81]
1558:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2334              		.loc 1 1558 0 discriminator 2
 2335 0022 0023     		movs	r3, #0
 2336 0024 80F85030 		strb	r3, [r0, #80]
1560:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 2337              		.loc 1 1560 0 discriminator 2
 2338 0028 1846     		mov	r0, r3
ARM GAS  /tmp/ccSyzCiQ.s 			page 78


 2339              	.LVL188:
 2340 002a 7047     		bx	lr
 2341              	.LVL189:
 2342              	.L156:
1548:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2343              		.loc 1 1548 0
 2344 002c 0220     		movs	r0, #2
 2345              	.LVL190:
1561:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2346              		.loc 1 1561 0
 2347 002e 7047     		bx	lr
 2348              		.cfi_endproc
 2349              	.LFE161:
 2351              		.section	.text.HAL_DMA2D_ConfigDeadTime,"ax",%progbits
 2352              		.align	2
 2353              		.global	HAL_DMA2D_ConfigDeadTime
 2354              		.thumb
 2355              		.thumb_func
 2357              	HAL_DMA2D_ConfigDeadTime:
 2358              	.LFB162:
1572:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Locked */
 2359              		.loc 1 1572 0
 2360              		.cfi_startproc
 2361              		@ args = 0, pretend = 0, frame = 0
 2362              		@ frame_needed = 0, uses_anonymous_args = 0
 2363              		@ link register save eliminated.
 2364              	.LVL191:
1574:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2365              		.loc 1 1574 0
 2366 0000 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 2367 0004 012B     		cmp	r3, #1
 2368 0006 14D0     		beq	.L159
1572:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   /* Process Locked */
 2369              		.loc 1 1572 0 discriminator 2
 2370 0008 10B4     		push	{r4}
 2371              	.LCFI43:
 2372              		.cfi_def_cfa_offset 4
 2373              		.cfi_offset 4, -4
1574:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2374              		.loc 1 1574 0 discriminator 2
 2375 000a 0122     		movs	r2, #1
 2376 000c 80F85020 		strb	r2, [r0, #80]
1576:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2377              		.loc 1 1576 0 discriminator 2
 2378 0010 0223     		movs	r3, #2
 2379 0012 80F85130 		strb	r3, [r0, #81]
1579:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2380              		.loc 1 1579 0 discriminator 2
 2381 0016 0468     		ldr	r4, [r0]
 2382 0018 E36C     		ldr	r3, [r4, #76]
 2383 001a 23F47F43 		bic	r3, r3, #65280
 2384 001e 43EA0121 		orr	r1, r3, r1, lsl #8
 2385              	.LVL192:
 2386 0022 E164     		str	r1, [r4, #76]
1581:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2387              		.loc 1 1581 0 discriminator 2
 2388 0024 80F85120 		strb	r2, [r0, #81]
ARM GAS  /tmp/ccSyzCiQ.s 			page 79


1584:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2389              		.loc 1 1584 0 discriminator 2
 2390 0028 0023     		movs	r3, #0
 2391 002a 80F85030 		strb	r3, [r0, #80]
1586:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 2392              		.loc 1 1586 0 discriminator 2
 2393 002e 1846     		mov	r0, r3
 2394              	.LVL193:
 2395 0030 01E0     		b	.L158
 2396              	.LVL194:
 2397              	.L159:
 2398              	.LCFI44:
 2399              		.cfi_def_cfa_offset 0
 2400              		.cfi_restore 4
1574:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   
 2401              		.loc 1 1574 0
 2402 0032 0220     		movs	r0, #2
 2403              	.LVL195:
 2404 0034 7047     		bx	lr
 2405              	.LVL196:
 2406              	.L158:
 2407              	.LCFI45:
 2408              		.cfi_def_cfa_offset 4
 2409              		.cfi_offset 4, -4
1587:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2410              		.loc 1 1587 0
 2411 0036 5DF8044B 		ldr	r4, [sp], #4
 2412              	.LCFI46:
 2413              		.cfi_restore 4
 2414              		.cfi_def_cfa_offset 0
 2415 003a 7047     		bx	lr
 2416              		.cfi_endproc
 2417              	.LFE162:
 2419              		.section	.text.HAL_DMA2D_GetState,"ax",%progbits
 2420              		.align	2
 2421              		.global	HAL_DMA2D_GetState
 2422              		.thumb
 2423              		.thumb_func
 2425              	HAL_DMA2D_GetState:
 2426              	.LFB163:
1617:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return hdma2d->State;
 2427              		.loc 1 1617 0
 2428              		.cfi_startproc
 2429              		@ args = 0, pretend = 0, frame = 0
 2430              		@ frame_needed = 0, uses_anonymous_args = 0
 2431              		@ link register save eliminated.
 2432              	.LVL197:
1618:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 2433              		.loc 1 1618 0
 2434 0000 90F85100 		ldrb	r0, [r0, #81]	@ zero_extendqisi2
 2435              	.LVL198:
1619:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2436              		.loc 1 1619 0
 2437 0004 7047     		bx	lr
 2438              		.cfi_endproc
 2439              	.LFE163:
 2441 0006 00BF     		.section	.text.HAL_DMA2D_GetError,"ax",%progbits
ARM GAS  /tmp/ccSyzCiQ.s 			page 80


 2442              		.align	2
 2443              		.global	HAL_DMA2D_GetError
 2444              		.thumb
 2445              		.thumb_func
 2447              	HAL_DMA2D_GetError:
 2448              	.LFB164:
1628:HALLIB/Src/stm32f7xx_hal_dma2d.c ****   return hdma2d->ErrorCode;
 2449              		.loc 1 1628 0
 2450              		.cfi_startproc
 2451              		@ args = 0, pretend = 0, frame = 0
 2452              		@ frame_needed = 0, uses_anonymous_args = 0
 2453              		@ link register save eliminated.
 2454              	.LVL199:
1629:HALLIB/Src/stm32f7xx_hal_dma2d.c **** }
 2455              		.loc 1 1629 0
 2456 0000 406D     		ldr	r0, [r0, #84]
 2457              	.LVL200:
1630:HALLIB/Src/stm32f7xx_hal_dma2d.c **** 
 2458              		.loc 1 1630 0
 2459 0002 7047     		bx	lr
 2460              		.cfi_endproc
 2461              	.LFE164:
 2463              		.text
 2464              	.Letext0:
 2465              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 2466              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 2467              		.file 4 "Inc/stm32f767xx.h"
 2468              		.file 5 "Inc/stm32f7xx.h"
 2469              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 2470              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma2d.h"
 2471              		.file 8 "CORE/core_cm7.h"
 2472              		.file 9 "HALLIB/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccSyzCiQ.s 			page 81


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_dma2d.c
     /tmp/ccSyzCiQ.s:21     .text.DMA2D_SetConfig:00000000 $t
     /tmp/ccSyzCiQ.s:25     .text.DMA2D_SetConfig:00000000 DMA2D_SetConfig
     /tmp/ccSyzCiQ.s:172    .text.HAL_DMA2D_MspInit:00000000 $t
     /tmp/ccSyzCiQ.s:177    .text.HAL_DMA2D_MspInit:00000000 HAL_DMA2D_MspInit
     /tmp/ccSyzCiQ.s:190    .text.HAL_DMA2D_Init:00000000 $t
     /tmp/ccSyzCiQ.s:195    .text.HAL_DMA2D_Init:00000000 HAL_DMA2D_Init
     /tmp/ccSyzCiQ.s:283    .text.HAL_DMA2D_Init:0000007c $d
     /tmp/ccSyzCiQ.s:288    .text.HAL_DMA2D_MspDeInit:00000000 $t
     /tmp/ccSyzCiQ.s:293    .text.HAL_DMA2D_MspDeInit:00000000 HAL_DMA2D_MspDeInit
     /tmp/ccSyzCiQ.s:306    .text.HAL_DMA2D_Start:00000000 $t
     /tmp/ccSyzCiQ.s:311    .text.HAL_DMA2D_Start:00000000 HAL_DMA2D_Start
     /tmp/ccSyzCiQ.s:369    .text.HAL_DMA2D_Start_IT:00000000 $t
     /tmp/ccSyzCiQ.s:374    .text.HAL_DMA2D_Start_IT:00000000 HAL_DMA2D_Start_IT
     /tmp/ccSyzCiQ.s:436    .text.HAL_DMA2D_BlendingStart:00000000 $t
     /tmp/ccSyzCiQ.s:441    .text.HAL_DMA2D_BlendingStart:00000000 HAL_DMA2D_BlendingStart
     /tmp/ccSyzCiQ.s:505    .text.HAL_DMA2D_BlendingStart_IT:00000000 $t
     /tmp/ccSyzCiQ.s:510    .text.HAL_DMA2D_BlendingStart_IT:00000000 HAL_DMA2D_BlendingStart_IT
     /tmp/ccSyzCiQ.s:579    .text.HAL_DMA2D_Abort:00000000 $t
     /tmp/ccSyzCiQ.s:584    .text.HAL_DMA2D_Abort:00000000 HAL_DMA2D_Abort
     /tmp/ccSyzCiQ.s:656    .text.HAL_DMA2D_Suspend:00000000 $t
     /tmp/ccSyzCiQ.s:661    .text.HAL_DMA2D_Suspend:00000000 HAL_DMA2D_Suspend
     /tmp/ccSyzCiQ.s:743    .text.HAL_DMA2D_Resume:00000000 $t
     /tmp/ccSyzCiQ.s:748    .text.HAL_DMA2D_Resume:00000000 HAL_DMA2D_Resume
     /tmp/ccSyzCiQ.s:778    .text.HAL_DMA2D_EnableCLUT:00000000 $t
     /tmp/ccSyzCiQ.s:783    .text.HAL_DMA2D_EnableCLUT:00000000 HAL_DMA2D_EnableCLUT
     /tmp/ccSyzCiQ.s:834    .text.HAL_DMA2D_CLUTLoad:00000000 $t
     /tmp/ccSyzCiQ.s:839    .text.HAL_DMA2D_CLUTLoad:00000000 HAL_DMA2D_CLUTLoad
     /tmp/ccSyzCiQ.s:939    .text.HAL_DMA2D_CLUTLoad:00000080 $d
     /tmp/ccSyzCiQ.s:944    .text.HAL_DMA2D_CLUTLoad_IT:00000000 $t
     /tmp/ccSyzCiQ.s:949    .text.HAL_DMA2D_CLUTLoad_IT:00000000 HAL_DMA2D_CLUTLoad_IT
     /tmp/ccSyzCiQ.s:1059   .text.HAL_DMA2D_CLUTLoad_IT:00000094 $d
     /tmp/ccSyzCiQ.s:1064   .text.HAL_DMA2D_CLUTLoading_Abort:00000000 $t
     /tmp/ccSyzCiQ.s:1069   .text.HAL_DMA2D_CLUTLoading_Abort:00000000 HAL_DMA2D_CLUTLoading_Abort
     /tmp/ccSyzCiQ.s:1152   .text.HAL_DMA2D_DeInit:00000000 $t
     /tmp/ccSyzCiQ.s:1157   .text.HAL_DMA2D_DeInit:00000000 HAL_DMA2D_DeInit
     /tmp/ccSyzCiQ.s:1279   .text.HAL_DMA2D_DeInit:00000084 $d
     /tmp/ccSyzCiQ.s:1284   .text.HAL_DMA2D_CLUTLoading_Suspend:00000000 $t
     /tmp/ccSyzCiQ.s:1289   .text.HAL_DMA2D_CLUTLoading_Suspend:00000000 HAL_DMA2D_CLUTLoading_Suspend
     /tmp/ccSyzCiQ.s:1382   .text.HAL_DMA2D_CLUTLoading_Resume:00000000 $t
     /tmp/ccSyzCiQ.s:1387   .text.HAL_DMA2D_CLUTLoading_Resume:00000000 HAL_DMA2D_CLUTLoading_Resume
     /tmp/ccSyzCiQ.s:1437   .text.HAL_DMA2D_PollForTransfer:00000000 $t
     /tmp/ccSyzCiQ.s:1442   .text.HAL_DMA2D_PollForTransfer:00000000 HAL_DMA2D_PollForTransfer
     /tmp/ccSyzCiQ.s:1669   .text.HAL_DMA2D_LineEventCallback:00000000 $t
     /tmp/ccSyzCiQ.s:1674   .text.HAL_DMA2D_LineEventCallback:00000000 HAL_DMA2D_LineEventCallback
     /tmp/ccSyzCiQ.s:1687   .text.HAL_DMA2D_CLUTLoadingCpltCallback:00000000 $t
     /tmp/ccSyzCiQ.s:1692   .text.HAL_DMA2D_CLUTLoadingCpltCallback:00000000 HAL_DMA2D_CLUTLoadingCpltCallback
     /tmp/ccSyzCiQ.s:1705   .text.HAL_DMA2D_IRQHandler:00000000 $t
     /tmp/ccSyzCiQ.s:1710   .text.HAL_DMA2D_IRQHandler:00000000 HAL_DMA2D_IRQHandler
     /tmp/ccSyzCiQ.s:1916   .text.HAL_DMA2D_ConfigLayer:00000000 $t
     /tmp/ccSyzCiQ.s:1921   .text.HAL_DMA2D_ConfigLayer:00000000 HAL_DMA2D_ConfigLayer
     /tmp/ccSyzCiQ.s:2086   .text.HAL_DMA2D_ConfigLayer:000000dc $d
     /tmp/ccSyzCiQ.s:2091   .text.HAL_DMA2D_ConfigCLUT:00000000 $t
     /tmp/ccSyzCiQ.s:2096   .text.HAL_DMA2D_ConfigCLUT:00000000 HAL_DMA2D_ConfigCLUT
     /tmp/ccSyzCiQ.s:2189   .text.HAL_DMA2D_ConfigCLUT:00000078 $d
     /tmp/ccSyzCiQ.s:2194   .text.HAL_DMA2D_ProgramLineEvent:00000000 $t
ARM GAS  /tmp/ccSyzCiQ.s 			page 82


     /tmp/ccSyzCiQ.s:2199   .text.HAL_DMA2D_ProgramLineEvent:00000000 HAL_DMA2D_ProgramLineEvent
     /tmp/ccSyzCiQ.s:2256   .text.HAL_DMA2D_EnableDeadTime:00000000 $t
     /tmp/ccSyzCiQ.s:2261   .text.HAL_DMA2D_EnableDeadTime:00000000 HAL_DMA2D_EnableDeadTime
     /tmp/ccSyzCiQ.s:2304   .text.HAL_DMA2D_DisableDeadTime:00000000 $t
     /tmp/ccSyzCiQ.s:2309   .text.HAL_DMA2D_DisableDeadTime:00000000 HAL_DMA2D_DisableDeadTime
     /tmp/ccSyzCiQ.s:2352   .text.HAL_DMA2D_ConfigDeadTime:00000000 $t
     /tmp/ccSyzCiQ.s:2357   .text.HAL_DMA2D_ConfigDeadTime:00000000 HAL_DMA2D_ConfigDeadTime
     /tmp/ccSyzCiQ.s:2420   .text.HAL_DMA2D_GetState:00000000 $t
     /tmp/ccSyzCiQ.s:2425   .text.HAL_DMA2D_GetState:00000000 HAL_DMA2D_GetState
     /tmp/ccSyzCiQ.s:2442   .text.HAL_DMA2D_GetError:00000000 $t
     /tmp/ccSyzCiQ.s:2447   .text.HAL_DMA2D_GetError:00000000 HAL_DMA2D_GetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
