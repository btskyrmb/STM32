ARM GAS  /tmp/ccg5urG3.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_flash_ex.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.FLASH_MassErase,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	FLASH_MassErase:
  26              	.LFB140:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_flash_ex.c"
   1:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @file    stm32f7xx_hal_flash_ex.c
   4:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief   Extended FLASH HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          functionalities of the FLASH extension peripheral:
   8:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *           + Extended programming operations functions
   9:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *  
  10:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   @verbatim
  11:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   ==============================================================================
  12:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                    ##### Flash Extension features #####
  13:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   ==============================================================================
  14:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****            
  15:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   [..] Comparing to other previous devices, the FLASH interface for STM32F76xx/STM32F77xx 
  16:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****        devices contains the following additional features 
  17:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****        
  18:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****        (+) Capacity up to 2 Mbyte with dual bank architecture supporting read-while-write
  19:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****            capability (RWW)
  20:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****        (+) Dual bank memory organization       
  21:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****        (+) Dual boot mode
  22:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****    
  23:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                       ##### How to use this driver #####
  24:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   ==============================================================================
  25:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   [..] This driver provides functions to configure and program the FLASH memory 
  26:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****        of all STM32F7xx devices. It includes
  27:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       (#) FLASH Memory Erase functions: 
  28:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and 
  29:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                 HAL_FLASH_Lock() functions
  30:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****            (++) Erase function: Erase sector, erase all sectors
  31:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****            (++) There are two modes of erase :
ARM GAS  /tmp/ccg5urG3.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****              (+++) Polling Mode using HAL_FLASHEx_Erase()
  33:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****              (+++) Interrupt Mode using HAL_FLASHEx_Erase_IT()
  34:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****              
  35:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       (#) Option Bytes Programming functions: Use HAL_FLASHEx_OBProgram() to :
  36:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****            (++) Set/Reset the write protection
  37:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****            (++) Set the Read protection Level
  38:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****            (++) Set the BOR level
  39:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****            (++) Program the user Option Bytes
  40:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
  41:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   @endverbatim
  42:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   ******************************************************************************
  43:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @attention
  44:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *
  45:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  46:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *
  47:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  48:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * are permitted provided that the following conditions are met:
  49:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  50:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *      this list of conditions and the following disclaimer.
  51:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  52:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  53:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *      and/or other materials provided with the distribution.
  54:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  55:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *      may be used to endorse or promote products derived from this software
  56:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *      without specific prior written permission.
  57:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *
  58:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  59:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  60:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  61:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  62:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  63:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  64:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  65:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  66:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  67:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  68:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *
  69:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   ******************************************************************************
  70:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */ 
  71:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
  72:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /* Includes ------------------------------------------------------------------*/
  73:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #include "stm32f7xx_hal.h"
  74:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
  75:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /** @addtogroup STM32F7xx_HAL_Driver
  76:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @{
  77:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
  78:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
  79:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /** @defgroup FLASHEx FLASHEx
  80:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief FLASH HAL Extension module driver
  81:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @{
  82:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
  83:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
  84:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #ifdef HAL_FLASH_MODULE_ENABLED
  85:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
  86:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /* Private typedef -----------------------------------------------------------*/
  87:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /* Private define ------------------------------------------------------------*/
  88:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Constants
ARM GAS  /tmp/ccg5urG3.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @{
  90:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */    
  91:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #define SECTOR_MASK               0xFFFFFF07U
  92:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #define FLASH_TIMEOUT_VALUE       50000U/* 50 s */
  93:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
  94:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @}
  95:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
  96:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     
  97:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /* Private macro -------------------------------------------------------------*/
  98:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /* Private variables ---------------------------------------------------------*/
  99:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Variables
 100:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @{
 101:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */    
 102:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** extern FLASH_ProcessTypeDef pFlash;
 103:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 104:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @}
 105:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 106:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 107:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /* Private function prototypes -----------------------------------------------*/
 108:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Functions
 109:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @{
 110:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 111:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /* Option bytes control */
 112:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_EnableWRP(uint32_t WRPSector);
 113:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_DisableWRP(uint32_t WRPSector);
 114:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_RDP_LevelConfig(uint8_t Level);
 115:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_BOR_LevelConfig(uint8_t Level);
 116:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address);
 117:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t           FLASH_OB_GetUser(void);
 118:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t           FLASH_OB_GetWRP(void);
 119:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetRDP(void);
 120:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t           FLASH_OB_GetBOR(void);
 121:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t           FLASH_OB_GetBootAddress(uint32_t BootOption);
 122:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 123:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR_nDBANK)
 124:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static void               FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks);
 125:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_UserConfig(uint32_t Wwdg, uint32_t Iwdg, uint32_t Stop, uint32_t
 126:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                               uint32_t Iwdgstdby, uint32_t NDBank, uint32_t NDBoot)
 127:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #else
 128:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static void               FLASH_MassErase(uint8_t VoltageRange);
 129:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_UserConfig(uint32_t Wwdg, uint32_t Iwdg, uint32_t Stop, uint32_t
 130:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR_nDBANK */
 131:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 132:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR2_PCROP)
 133:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_PCROP_Config(uint32_t PCROPSector);
 134:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_PCROP_RDP_Config(uint32_t Pcrop_Rdp);
 135:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t           FLASH_OB_GetPCROP(void);
 136:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t           FLASH_OB_GetPCROPRDP(void);
 137:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR2_PCROP */
 138:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 139:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** extern HAL_StatusTypeDef  FLASH_WaitForLastOperation(uint32_t Timeout);
 140:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 141:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @}
 142:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 143:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 144:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /* Exported functions --------------------------------------------------------*/
 145:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions FLASHEx Exported Functions
ARM GAS  /tmp/ccg5urG3.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @{
 147:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 148:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 149:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions_Group1 Extended IO operation functions
 150:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****  *  @brief   Extended IO operation functions 
 151:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****  *
 152:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** @verbatim   
 153:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****  ===============================================================================
 154:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                 ##### Extended programming operation functions #####
 155:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****  ===============================================================================  
 156:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     [..]
 157:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     This subsection provides a set of functions allowing to manage the Extension FLASH 
 158:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     programming operations Operations.
 159:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 160:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** @endverbatim
 161:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @{
 162:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 163:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 164:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Perform a mass erase or erase the specified FLASH memory sectors 
 165:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param[in]  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
 166:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 167:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * 
 168:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param[out]  SectorError pointer to variable  that
 169:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         contains the configuration information on faulty sector in case of error 
 170:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         (0xFFFFFFFF means that all the sectors have been correctly erased)
 171:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * 
 172:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 173:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 174:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
 175:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 176:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 177:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t index = 0;
 178:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 179:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Process Locked */
 180:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 181:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 182:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 183:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 184:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 185:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 186:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 187:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 188:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 189:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 190:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /*Initialization of SectorError variable*/
 191:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     *SectorError = 0xFFFFFFFFU;
 192:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     
 193:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 194:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     {
 195:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       /*Mass erase to be done*/
 196:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR_nDBANK)      
 197:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 198:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #else
 199:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 200:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR_nDBANK */
 201:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                       
 202:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
ARM GAS  /tmp/ccg5urG3.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 204:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       
 205:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       /* if the erase operation is completed, disable the MER Bit */
 206:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       FLASH->CR &= (~FLASH_MER_BIT);
 207:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     }
 208:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     else
 209:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     {
 210:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       /* Check the parameters */
 211:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 212:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 213:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       /* Erase by sector by sector to be done*/
 214:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++
 215:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       {
 216:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 217:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 218:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 219:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 220:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         
 221:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         /* If the erase operation is completed, disable the SER Bit and SNB Bits */
 222:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 223:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 224:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         if(status != HAL_OK) 
 225:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         {
 226:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****           /* In case of error, stop erase procedure and return the faulty sector*/
 227:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****           *SectorError = index;
 228:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****           break;
 229:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         }
 230:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       }
 231:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     }
 232:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 233:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 234:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Process Unlocked */
 235:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 236:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 237:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 238:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 239:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 240:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 241:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Perform a mass erase or erase the specified FLASH memory sectors  with interrupt enable
 242:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
 243:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 244:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * 
 245:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 246:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 247:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
 248:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 249:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 250:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 251:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Process Locked */
 252:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 253:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 254:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 255:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 256:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 257:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Enable End of FLASH Operation interrupt */
 258:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 259:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
ARM GAS  /tmp/ccg5urG3.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Enable Error source interrupt */
 261:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 262:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 263:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Clear pending flags (if any) */  
 264:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
 265:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                          FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_ERSERR);  
 266:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 267:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 268:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 269:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /*Mass erase to be done*/
 270:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 271:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR_nDBANK)    
 272:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 273:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #else
 274:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 275:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR_nDBANK */    
 276:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 277:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else
 278:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 279:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /* Erase by sector to be done*/
 280:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 281:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /* Check the parameters */
 282:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 283:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 284:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 285:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 286:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.Sector = pEraseInit->Sector;
 287:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 288:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 289:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /*Erase 1st sector and wait for IT*/
 290:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 291:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 292:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 293:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 294:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 295:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 296:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 297:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Program option bytes
 298:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
 299:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 300:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * 
 301:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 302:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 303:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
 304:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 305:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 306:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 307:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Process Locked */
 308:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 309:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 310:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 311:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 312:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 313:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Write protection configuration */
 314:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 315:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 316:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     assert_param(IS_WRPSTATE(pOBInit->WRPState));
ARM GAS  /tmp/ccg5urG3.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 318:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     {
 319:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       /*Enable of Write protection on the selected Sector*/
 320:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 321:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     }
 322:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     else
 323:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     {
 324:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       /*Disable of Write protection on the selected Sector*/
 325:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       status = FLASH_OB_DisableWRP(pOBInit->WRPSector);
 326:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     }
 327:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 328:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 329:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Read protection configuration */
 330:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 331:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 332:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 333:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 334:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 335:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* USER  configuration */
 336:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 337:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 338:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR_nDBANK)
 339:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 340:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 341:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STOP_NO_RST,
 342:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STDBY_NO_RST, 
 343:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_STOP_ACTIVE,
 344:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_STDBY_ACTIVE,
 345:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_NDBANK_SINGLE_BANK,
 346:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_DUAL_BOOT_DISABLE);
 347:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #else
 348:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 349:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 350:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STOP_NO_RST,
 351:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STDBY_NO_RST, 
 352:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_STOP_ACTIVE,
 353:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_STDBY_ACTIVE);    
 354:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR_nDBANK */
 355:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 356:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 357:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* BOR Level  configuration */
 358:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 359:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 360:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 361:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 362:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 363:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Boot 0 Address configuration */
 364:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 365:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 366:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 367:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 368:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 369:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Boot 1 Address configuration */
 370:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 371:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 372:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 373:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
ARM GAS  /tmp/ccg5urG3.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 375:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR2_PCROP)
 376:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* PCROP configuration */
 377:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
 378:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 379:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_PCROP_Config(pOBInit->PCROPSector);
 380:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 381:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 382:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* PCROP_RDP configuration */
 383:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_PCROP_RDP) == OPTIONBYTE_PCROP_RDP)
 384:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 385:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     status = FLASH_OB_PCROP_RDP_Config(pOBInit->PCROPRdp);
 386:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 387:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR2_PCROP */
 388:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 389:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Process Unlocked */
 390:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 391:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 392:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 393:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 394:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 395:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 396:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Get the Option byte configuration
 397:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
 398:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 399:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * 
 400:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval None
 401:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 402:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
 403:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 404:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 405:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 	                OPTIONBYTE_BOR | OPTIONBYTE_BOOTADDR_0 | OPTIONBYTE_BOOTADDR_1;
 406:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 407:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /*Get WRP*/
 408:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->WRPSector = FLASH_OB_GetWRP();
 409:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 410:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /*Get RDP Level*/
 411:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->RDPLevel = FLASH_OB_GetRDP();
 412:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 413:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /*Get USER*/
 414:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->USERConfig = FLASH_OB_GetUser();
 415:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 416:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /*Get BOR Level*/
 417:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->BORLevel = FLASH_OB_GetBOR();
 418:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 419:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /*Get Boot Address when Boot pin = 0 */
 420:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 421:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 422:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /*Get Boot Address when Boot pin = 1 */
 423:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 424:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 425:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR2_PCROP)
 426:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /*Get PCROP Sectors */
 427:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->PCROPSector = FLASH_OB_GetPCROP();
 428:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 429:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /*Get PCROP_RDP Value */
 430:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->PCROPRdp = FLASH_OB_GetPCROPRDP();
ARM GAS  /tmp/ccg5urG3.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR2_PCROP */
 432:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 433:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 434:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @}
 435:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 436:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 437:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR_nDBANK)
 438:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 439:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Full erase of FLASH memory sectors 
 440:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  VoltageRange The device voltage range which defines the erase parallelism.  
 441:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 442:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 443:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 444:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 445:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 446:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 447:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 448:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 449:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 450:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Banks Banks to be erased
 451:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 452:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: Bank1 to be erased
 453:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: Bank2 to be erased
 454:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
 455:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *
 456:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 457:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 458:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
 459:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
  28              		.loc 1 459 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 460:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 461:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 462:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 463:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 464:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* if the previous operation is completed, proceed to erase all sectors */
 465:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR &= CR_PSIZE_MASK;
  34              		.loc 1 465 0
  35 0000 114A     		ldr	r2, .L5
  36 0002 1369     		ldr	r3, [r2, #16]
  37 0004 23F44073 		bic	r3, r3, #768
  38 0008 1361     		str	r3, [r2, #16]
 466:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(Banks == FLASH_BANK_BOTH)
  39              		.loc 1 466 0
  40 000a 0329     		cmp	r1, #3
  41 000c 05D1     		bne	.L2
 467:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 468:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /* bank1 & bank2 will be erased*/
 469:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_MER_BIT;
  42              		.loc 1 469 0
  43 000e 1169     		ldr	r1, [r2, #16]
  44              	.LVL1:
  45 0010 48F20403 		movw	r3, #32772
ARM GAS  /tmp/ccg5urG3.s 			page 10


  46 0014 0B43     		orrs	r3, r3, r1
  47 0016 1361     		str	r3, [r2, #16]
  48 0018 0CE0     		b	.L3
  49              	.LVL2:
  50              	.L2:
 470:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 471:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else if(Banks == FLASH_BANK_2)
  51              		.loc 1 471 0
  52 001a 0229     		cmp	r1, #2
  53 001c 05D1     		bne	.L4
 472:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 473:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /*Only bank2 will be erased*/
 474:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_CR_MER2;
  54              		.loc 1 474 0
  55 001e 0A4A     		ldr	r2, .L5
  56 0020 1369     		ldr	r3, [r2, #16]
  57 0022 43F40043 		orr	r3, r3, #32768
  58 0026 1361     		str	r3, [r2, #16]
  59 0028 04E0     		b	.L3
  60              	.L4:
 475:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 476:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else
 477:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 478:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /*Only bank1 will be erased*/
 479:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_CR_MER1;    
  61              		.loc 1 479 0
  62 002a 074A     		ldr	r2, .L5
  63 002c 1369     		ldr	r3, [r2, #16]
  64 002e 43F00403 		orr	r3, r3, #4
  65 0032 1361     		str	r3, [r2, #16]
  66              	.LVL3:
  67              	.L3:
 480:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 481:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
  68              		.loc 1 481 0
  69 0034 044A     		ldr	r2, .L5
  70 0036 1369     		ldr	r3, [r2, #16]
  71 0038 43EA0020 		orr	r0, r3, r0, lsl #8
  72              	.LVL4:
  73 003c 40F48030 		orr	r0, r0, #65536
  74 0040 1061     		str	r0, [r2, #16]
  75              	.LBB6:
  76              	.LBB7:
  77              		.file 2 "CORE/cmsis_gcc.h"
   1:CORE/cmsis_gcc.h **** /**************************************************************************//**
   2:CORE/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:CORE/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:CORE/cmsis_gcc.h ****  * @version  V4.30
   5:CORE/cmsis_gcc.h ****  * @date     20. October 2015
   6:CORE/cmsis_gcc.h ****  ******************************************************************************/
   7:CORE/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:CORE/cmsis_gcc.h **** 
   9:CORE/cmsis_gcc.h ****    All rights reserved.
  10:CORE/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:CORE/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:CORE/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:CORE/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
ARM GAS  /tmp/ccg5urG3.s 			page 11


  14:CORE/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:CORE/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:CORE/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:CORE/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:CORE/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:CORE/cmsis_gcc.h ****      specific prior written permission.
  20:CORE/cmsis_gcc.h ****    *
  21:CORE/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:CORE/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:CORE/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:CORE/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:CORE/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:CORE/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:CORE/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:CORE/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:CORE/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:CORE/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:CORE/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:CORE/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:CORE/cmsis_gcc.h **** 
  34:CORE/cmsis_gcc.h **** 
  35:CORE/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:CORE/cmsis_gcc.h **** 
  38:CORE/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:CORE/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:CORE/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:CORE/cmsis_gcc.h **** #endif
  45:CORE/cmsis_gcc.h **** 
  46:CORE/cmsis_gcc.h **** 
  47:CORE/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:CORE/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:CORE/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:CORE/cmsis_gcc.h ****   @{
  51:CORE/cmsis_gcc.h ****  */
  52:CORE/cmsis_gcc.h **** 
  53:CORE/cmsis_gcc.h **** /**
  54:CORE/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:CORE/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:CORE/cmsis_gcc.h ****  */
  58:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:CORE/cmsis_gcc.h **** {
  60:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:CORE/cmsis_gcc.h **** }
  62:CORE/cmsis_gcc.h **** 
  63:CORE/cmsis_gcc.h **** 
  64:CORE/cmsis_gcc.h **** /**
  65:CORE/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:CORE/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:CORE/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:CORE/cmsis_gcc.h ****  */
  69:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:CORE/cmsis_gcc.h **** {
ARM GAS  /tmp/ccg5urG3.s 			page 12


  71:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:CORE/cmsis_gcc.h **** }
  73:CORE/cmsis_gcc.h **** 
  74:CORE/cmsis_gcc.h **** 
  75:CORE/cmsis_gcc.h **** /**
  76:CORE/cmsis_gcc.h ****   \brief   Get Control Register
  77:CORE/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:CORE/cmsis_gcc.h ****   \return               Control Register value
  79:CORE/cmsis_gcc.h ****  */
  80:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:CORE/cmsis_gcc.h **** {
  82:CORE/cmsis_gcc.h ****   uint32_t result;
  83:CORE/cmsis_gcc.h **** 
  84:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:CORE/cmsis_gcc.h ****   return(result);
  86:CORE/cmsis_gcc.h **** }
  87:CORE/cmsis_gcc.h **** 
  88:CORE/cmsis_gcc.h **** 
  89:CORE/cmsis_gcc.h **** /**
  90:CORE/cmsis_gcc.h ****   \brief   Set Control Register
  91:CORE/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:CORE/cmsis_gcc.h ****  */
  94:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:CORE/cmsis_gcc.h **** {
  96:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:CORE/cmsis_gcc.h **** }
  98:CORE/cmsis_gcc.h **** 
  99:CORE/cmsis_gcc.h **** 
 100:CORE/cmsis_gcc.h **** /**
 101:CORE/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:CORE/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:CORE/cmsis_gcc.h ****   \return               IPSR Register value
 104:CORE/cmsis_gcc.h ****  */
 105:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:CORE/cmsis_gcc.h **** {
 107:CORE/cmsis_gcc.h ****   uint32_t result;
 108:CORE/cmsis_gcc.h **** 
 109:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:CORE/cmsis_gcc.h ****   return(result);
 111:CORE/cmsis_gcc.h **** }
 112:CORE/cmsis_gcc.h **** 
 113:CORE/cmsis_gcc.h **** 
 114:CORE/cmsis_gcc.h **** /**
 115:CORE/cmsis_gcc.h ****   \brief   Get APSR Register
 116:CORE/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:CORE/cmsis_gcc.h ****   \return               APSR Register value
 118:CORE/cmsis_gcc.h ****  */
 119:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:CORE/cmsis_gcc.h **** {
 121:CORE/cmsis_gcc.h ****   uint32_t result;
 122:CORE/cmsis_gcc.h **** 
 123:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:CORE/cmsis_gcc.h ****   return(result);
 125:CORE/cmsis_gcc.h **** }
 126:CORE/cmsis_gcc.h **** 
 127:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccg5urG3.s 			page 13


 128:CORE/cmsis_gcc.h **** /**
 129:CORE/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:CORE/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:CORE/cmsis_gcc.h **** 
 132:CORE/cmsis_gcc.h ****     \return               xPSR Register value
 133:CORE/cmsis_gcc.h ****  */
 134:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:CORE/cmsis_gcc.h **** {
 136:CORE/cmsis_gcc.h ****   uint32_t result;
 137:CORE/cmsis_gcc.h **** 
 138:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:CORE/cmsis_gcc.h ****   return(result);
 140:CORE/cmsis_gcc.h **** }
 141:CORE/cmsis_gcc.h **** 
 142:CORE/cmsis_gcc.h **** 
 143:CORE/cmsis_gcc.h **** /**
 144:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:CORE/cmsis_gcc.h ****   \return               PSP Register value
 147:CORE/cmsis_gcc.h ****  */
 148:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:CORE/cmsis_gcc.h **** {
 150:CORE/cmsis_gcc.h ****   register uint32_t result;
 151:CORE/cmsis_gcc.h **** 
 152:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:CORE/cmsis_gcc.h ****   return(result);
 154:CORE/cmsis_gcc.h **** }
 155:CORE/cmsis_gcc.h **** 
 156:CORE/cmsis_gcc.h **** 
 157:CORE/cmsis_gcc.h **** /**
 158:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:CORE/cmsis_gcc.h ****  */
 162:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:CORE/cmsis_gcc.h **** {
 164:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:CORE/cmsis_gcc.h **** }
 166:CORE/cmsis_gcc.h **** 
 167:CORE/cmsis_gcc.h **** 
 168:CORE/cmsis_gcc.h **** /**
 169:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:CORE/cmsis_gcc.h ****   \return               MSP Register value
 172:CORE/cmsis_gcc.h ****  */
 173:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:CORE/cmsis_gcc.h **** {
 175:CORE/cmsis_gcc.h ****   register uint32_t result;
 176:CORE/cmsis_gcc.h **** 
 177:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:CORE/cmsis_gcc.h ****   return(result);
 179:CORE/cmsis_gcc.h **** }
 180:CORE/cmsis_gcc.h **** 
 181:CORE/cmsis_gcc.h **** 
 182:CORE/cmsis_gcc.h **** /**
 183:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
ARM GAS  /tmp/ccg5urG3.s 			page 14


 185:CORE/cmsis_gcc.h **** 
 186:CORE/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:CORE/cmsis_gcc.h ****  */
 188:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:CORE/cmsis_gcc.h **** {
 190:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:CORE/cmsis_gcc.h **** }
 192:CORE/cmsis_gcc.h **** 
 193:CORE/cmsis_gcc.h **** 
 194:CORE/cmsis_gcc.h **** /**
 195:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:CORE/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 198:CORE/cmsis_gcc.h ****  */
 199:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:CORE/cmsis_gcc.h **** {
 201:CORE/cmsis_gcc.h ****   uint32_t result;
 202:CORE/cmsis_gcc.h **** 
 203:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:CORE/cmsis_gcc.h ****   return(result);
 205:CORE/cmsis_gcc.h **** }
 206:CORE/cmsis_gcc.h **** 
 207:CORE/cmsis_gcc.h **** 
 208:CORE/cmsis_gcc.h **** /**
 209:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:CORE/cmsis_gcc.h ****  */
 213:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:CORE/cmsis_gcc.h **** {
 215:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:CORE/cmsis_gcc.h **** }
 217:CORE/cmsis_gcc.h **** 
 218:CORE/cmsis_gcc.h **** 
 219:CORE/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:CORE/cmsis_gcc.h **** 
 221:CORE/cmsis_gcc.h **** /**
 222:CORE/cmsis_gcc.h ****   \brief   Enable FIQ
 223:CORE/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:CORE/cmsis_gcc.h ****  */
 226:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:CORE/cmsis_gcc.h **** {
 228:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:CORE/cmsis_gcc.h **** }
 230:CORE/cmsis_gcc.h **** 
 231:CORE/cmsis_gcc.h **** 
 232:CORE/cmsis_gcc.h **** /**
 233:CORE/cmsis_gcc.h ****   \brief   Disable FIQ
 234:CORE/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:CORE/cmsis_gcc.h ****  */
 237:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:CORE/cmsis_gcc.h **** {
 239:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:CORE/cmsis_gcc.h **** }
 241:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccg5urG3.s 			page 15


 242:CORE/cmsis_gcc.h **** 
 243:CORE/cmsis_gcc.h **** /**
 244:CORE/cmsis_gcc.h ****   \brief   Get Base Priority
 245:CORE/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 247:CORE/cmsis_gcc.h ****  */
 248:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:CORE/cmsis_gcc.h **** {
 250:CORE/cmsis_gcc.h ****   uint32_t result;
 251:CORE/cmsis_gcc.h **** 
 252:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:CORE/cmsis_gcc.h ****   return(result);
 254:CORE/cmsis_gcc.h **** }
 255:CORE/cmsis_gcc.h **** 
 256:CORE/cmsis_gcc.h **** 
 257:CORE/cmsis_gcc.h **** /**
 258:CORE/cmsis_gcc.h ****   \brief   Set Base Priority
 259:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:CORE/cmsis_gcc.h ****  */
 262:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:CORE/cmsis_gcc.h **** {
 264:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:CORE/cmsis_gcc.h **** }
 266:CORE/cmsis_gcc.h **** 
 267:CORE/cmsis_gcc.h **** 
 268:CORE/cmsis_gcc.h **** /**
 269:CORE/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:CORE/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:CORE/cmsis_gcc.h ****  */
 274:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:CORE/cmsis_gcc.h **** {
 276:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:CORE/cmsis_gcc.h **** }
 278:CORE/cmsis_gcc.h **** 
 279:CORE/cmsis_gcc.h **** 
 280:CORE/cmsis_gcc.h **** /**
 281:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:CORE/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 284:CORE/cmsis_gcc.h ****  */
 285:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:CORE/cmsis_gcc.h **** {
 287:CORE/cmsis_gcc.h ****   uint32_t result;
 288:CORE/cmsis_gcc.h **** 
 289:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:CORE/cmsis_gcc.h ****   return(result);
 291:CORE/cmsis_gcc.h **** }
 292:CORE/cmsis_gcc.h **** 
 293:CORE/cmsis_gcc.h **** 
 294:CORE/cmsis_gcc.h **** /**
 295:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:CORE/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccg5urG3.s 			page 16


 299:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:CORE/cmsis_gcc.h **** {
 301:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:CORE/cmsis_gcc.h **** }
 303:CORE/cmsis_gcc.h **** 
 304:CORE/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:CORE/cmsis_gcc.h **** 
 306:CORE/cmsis_gcc.h **** 
 307:CORE/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:CORE/cmsis_gcc.h **** 
 309:CORE/cmsis_gcc.h **** /**
 310:CORE/cmsis_gcc.h ****   \brief   Get FPSCR
 311:CORE/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:CORE/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:CORE/cmsis_gcc.h ****  */
 314:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:CORE/cmsis_gcc.h **** {
 316:CORE/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:CORE/cmsis_gcc.h ****   uint32_t result;
 318:CORE/cmsis_gcc.h **** 
 319:CORE/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 321:CORE/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 323:CORE/cmsis_gcc.h ****   return(result);
 324:CORE/cmsis_gcc.h **** #else
 325:CORE/cmsis_gcc.h ****    return(0);
 326:CORE/cmsis_gcc.h **** #endif
 327:CORE/cmsis_gcc.h **** }
 328:CORE/cmsis_gcc.h **** 
 329:CORE/cmsis_gcc.h **** 
 330:CORE/cmsis_gcc.h **** /**
 331:CORE/cmsis_gcc.h ****   \brief   Set FPSCR
 332:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:CORE/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:CORE/cmsis_gcc.h ****  */
 335:CORE/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:CORE/cmsis_gcc.h **** {
 337:CORE/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:CORE/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 340:CORE/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:CORE/cmsis_gcc.h ****   __ASM volatile ("");
 342:CORE/cmsis_gcc.h **** #endif
 343:CORE/cmsis_gcc.h **** }
 344:CORE/cmsis_gcc.h **** 
 345:CORE/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:CORE/cmsis_gcc.h **** 
 347:CORE/cmsis_gcc.h **** 
 348:CORE/cmsis_gcc.h **** 
 349:CORE/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:CORE/cmsis_gcc.h **** 
 351:CORE/cmsis_gcc.h **** 
 352:CORE/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:CORE/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:CORE/cmsis_gcc.h ****   Access to dedicated instructions
 355:CORE/cmsis_gcc.h ****   @{
ARM GAS  /tmp/ccg5urG3.s 			page 17


 356:CORE/cmsis_gcc.h **** */
 357:CORE/cmsis_gcc.h **** 
 358:CORE/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:CORE/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:CORE/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:CORE/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:CORE/cmsis_gcc.h **** #else
 365:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:CORE/cmsis_gcc.h **** #endif
 368:CORE/cmsis_gcc.h **** 
 369:CORE/cmsis_gcc.h **** /**
 370:CORE/cmsis_gcc.h ****   \brief   No Operation
 371:CORE/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:CORE/cmsis_gcc.h ****  */
 373:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:CORE/cmsis_gcc.h **** {
 375:CORE/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:CORE/cmsis_gcc.h **** }
 377:CORE/cmsis_gcc.h **** 
 378:CORE/cmsis_gcc.h **** 
 379:CORE/cmsis_gcc.h **** /**
 380:CORE/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:CORE/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:CORE/cmsis_gcc.h ****  */
 383:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:CORE/cmsis_gcc.h **** {
 385:CORE/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:CORE/cmsis_gcc.h **** }
 387:CORE/cmsis_gcc.h **** 
 388:CORE/cmsis_gcc.h **** 
 389:CORE/cmsis_gcc.h **** /**
 390:CORE/cmsis_gcc.h ****   \brief   Wait For Event
 391:CORE/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:CORE/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:CORE/cmsis_gcc.h ****  */
 394:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:CORE/cmsis_gcc.h **** {
 396:CORE/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:CORE/cmsis_gcc.h **** }
 398:CORE/cmsis_gcc.h **** 
 399:CORE/cmsis_gcc.h **** 
 400:CORE/cmsis_gcc.h **** /**
 401:CORE/cmsis_gcc.h ****   \brief   Send Event
 402:CORE/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:CORE/cmsis_gcc.h ****  */
 404:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:CORE/cmsis_gcc.h **** {
 406:CORE/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:CORE/cmsis_gcc.h **** }
 408:CORE/cmsis_gcc.h **** 
 409:CORE/cmsis_gcc.h **** 
 410:CORE/cmsis_gcc.h **** /**
 411:CORE/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:CORE/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
ARM GAS  /tmp/ccg5urG3.s 			page 18


 413:CORE/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:CORE/cmsis_gcc.h ****            after the instruction has been completed.
 415:CORE/cmsis_gcc.h ****  */
 416:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:CORE/cmsis_gcc.h **** {
 418:CORE/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:CORE/cmsis_gcc.h **** }
 420:CORE/cmsis_gcc.h **** 
 421:CORE/cmsis_gcc.h **** 
 422:CORE/cmsis_gcc.h **** /**
 423:CORE/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:CORE/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:CORE/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:CORE/cmsis_gcc.h ****  */
 427:CORE/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:CORE/cmsis_gcc.h **** {
 429:CORE/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  78              		.loc 2 429 0
  79              		.syntax unified
  80              	@ 429 "CORE/cmsis_gcc.h" 1
  81 0042 BFF34F8F 		dsb 0xF
  82              	@ 0 "" 2
  83              		.thumb
  84              		.syntax unified
  85 0046 7047     		bx	lr
  86              	.L6:
  87              		.align	2
  88              	.L5:
  89 0048 003C0240 		.word	1073888256
  90              	.LBE7:
  91              	.LBE6:
  92              		.cfi_endproc
  93              	.LFE140:
  95              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
  96              		.align	2
  97              		.thumb
  98              		.thumb_func
 100              	FLASH_OB_GetWRP:
 101              	.LFB142:
 482:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
 483:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 484:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __DSB();
 485:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 486:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 487:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 488:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Erase the specified FLASH memory sector
 489:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Sector FLASH sector to erase
 490:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series      
 491:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  VoltageRange The device voltage range which defines the erase parallelism.  
 492:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 493:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 494:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 495:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 496:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 497:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 498:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 499:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External
ARM GAS  /tmp/ccg5urG3.s 			page 19


 500:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 501:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * 
 502:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval None
 503:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 504:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
 505:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 506:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 507:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 508:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 509:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_FLASH_SECTOR(Sector));
 510:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 511:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 512:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 513:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 514:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 515:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 516:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 517:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 518:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 519:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 520:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 521:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 522:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_WORD;
 523:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 524:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else
 525:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 526:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 527:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 528:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 529:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
 530:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(Sector > FLASH_SECTOR_11) 
 531:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 532:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     Sector += 4;
 533:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }  
 534:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 535:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* If the previous operation is completed, proceed to erase the sector */
 536:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR &= CR_PSIZE_MASK;
 537:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
 538:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 539:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 540:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
 541:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 542:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
 543:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 544:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __DSB();
 545:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 546:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 547:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 548:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Return the FLASH Write Protection Option Bytes value.
 549:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t FLASH Write Protection Option Bytes value
 550:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 551:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetWRP(void)
 552:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 102              		.loc 1 552 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccg5urG3.s 			page 20


 106              		@ link register save eliminated.
 553:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Return the FLASH write protection Register value */
 554:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 107              		.loc 1 554 0
 108 0000 024B     		ldr	r3, .L8
 109 0002 5B69     		ldr	r3, [r3, #20]
 555:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 110              		.loc 1 555 0
 111 0004 0248     		ldr	r0, .L8+4
 112 0006 1840     		ands	r0, r0, r3
 113 0008 7047     		bx	lr
 114              	.L9:
 115 000a 00BF     		.align	2
 116              	.L8:
 117 000c 003C0240 		.word	1073888256
 118 0010 0000FF0F 		.word	268369920
 119              		.cfi_endproc
 120              	.LFE142:
 122              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 123              		.align	2
 124              		.thumb
 125              		.thumb_func
 127              	FLASH_OB_GetUser:
 128              	.LFB144:
 556:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 557:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 558:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Program the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
 559:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Wwdg Selects the IWDG mode
 560:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 561:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WWDG_SW: Software WWDG selected
 562:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WWDG_HW: Hardware WWDG selected
 563:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdg Selects the WWDG mode
 564:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 565:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
 566:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
 567:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Stop Reset event when entering STOP mode.
 568:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 569:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STOP_NO_RST: No reset generated when entering in STOP
 570:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
 571:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Stdby Reset event when entering Standby mode.
 572:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 573:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
 574:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
 575:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdgstop Independent watchdog counter freeze in Stop mode.
 576:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 577:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STOP_FREEZE: Freeze IWDG counter in STOP
 578:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STOP_ACTIVE: IWDG counter active in STOP
 579:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdgstdby Independent watchdog counter freeze in standby mode.
 580:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 581:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STDBY_FREEZE: Freeze IWDG counter in STANDBY
 582:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STDBY_ACTIVE: IWDG counter active in STANDBY
 583:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  NDBank Flash Single Bank mode enabled.
 584:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 585:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_NDBANK_SINGLE_BANK: enable 256 bits mode (Flash is a single bank)
 586:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_NDBANK_DUAL_BANK: disable 256 bits mode (Flash is a dual bank in 128 bits mo
 587:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  NDBoot Flash Dual boot mode disable.
 588:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
ARM GAS  /tmp/ccg5urG3.s 			page 21


 589:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_DUAL_BOOT_DISABLE: Disable Dual Boot
 590:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_DUAL_BOOT_ENABLE: Enable Dual Boot
 591:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 592:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 593:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 594:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t Wwdg, uint32_t Iwdg, uint32_t Stop, uint32_t 
 595:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                              uint32_t Iwdgstdby, uint32_t NDBank, uint32_t NDBoot)
 596:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 597:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t useroptionmask = 0x00;
 598:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t useroptionvalue = 0x00;
 599:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 600:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 601:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 602:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 603:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_WWDG_SOURCE(Wwdg));
 604:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_SOURCE(Iwdg));
 605:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_STOP_SOURCE(Stop));
 606:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_STDBY_SOURCE(Stdby));
 607:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_STOP_FREEZE(Iwdgstop));
 608:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_STDBY_FREEZE(Iwdgstdby));
 609:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_NDBANK(NDBank));
 610:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_NDBOOT(NDBoot));
 611:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 612:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 613:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 614:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 615:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 616:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 617:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     useroptionmask = (FLASH_OPTCR_WWDG_SW | FLASH_OPTCR_IWDG_SW | FLASH_OPTCR_nRST_STOP | \
 618:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                       FLASH_OPTCR_nRST_STDBY | FLASH_OPTCR_IWDG_STOP | FLASH_OPTCR_IWDG_STDBY | \
 619:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                       FLASH_OPTCR_nDBOOT | FLASH_OPTCR_nDBANK);
 620:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                       
 621:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 622:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         
 623:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /* Update User Option Byte */               
 624:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 625:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 626:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 627:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return status; 
 628:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 629:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 630:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 631:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Return the FLASH User Option Byte value.
 632:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t FLASH User Option Bytes values: WWDG_SW(Bit4), IWDG_SW(Bit5), nRST_STOP(Bit6),
 633:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         nRST_STDBY(Bit7), nDBOOT(Bit28), nDBANK(Bit29), IWDG_STDBY(Bit30) and IWDG_STOP(Bit31).
 634:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 635:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetUser(void)
 636:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 129              		.loc 1 636 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 637:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Return the User Option Byte */
 638:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 134              		.loc 1 638 0
 135 0000 024B     		ldr	r3, .L11
ARM GAS  /tmp/ccg5urG3.s 			page 22


 136 0002 5B69     		ldr	r3, [r3, #20]
 639:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 137              		.loc 1 639 0
 138 0004 0248     		ldr	r0, .L11+4
 139 0006 1840     		ands	r0, r0, r3
 140 0008 7047     		bx	lr
 141              	.L12:
 142 000a 00BF     		.align	2
 143              	.L11:
 144 000c 003C0240 		.word	1073888256
 145 0010 F00000F0 		.word	-268435216
 146              		.cfi_endproc
 147              	.LFE144:
 149              		.section	.text.FLASH_OB_BOR_LevelConfig,"ax",%progbits
 150              		.align	2
 151              		.thumb
 152              		.thumb_func
 154              	FLASH_OB_BOR_LevelConfig:
 155              	.LFB148:
 640:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #else
 641:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 642:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 643:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Full erase of FLASH memory sectors 
 644:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  VoltageRange The device voltage range which defines the erase parallelism.  
 645:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 646:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 647:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 648:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 649:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 650:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 651:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 652:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 653:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 654:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *
 655:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 656:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 657:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static void FLASH_MassErase(uint8_t VoltageRange)
 658:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 659:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 660:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 661:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 662:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* if the previous operation is completed, proceed to erase all sectors */
 663:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR &= CR_PSIZE_MASK;
 664:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_MER;
 665:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 666:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
 667:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 668:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __DSB();
 669:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 670:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 671:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 672:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Erase the specified FLASH memory sector
 673:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Sector FLASH sector to erase
 674:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series      
 675:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  VoltageRange The device voltage range which defines the erase parallelism.  
 676:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 677:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
ARM GAS  /tmp/ccg5urG3.s 			page 23


 678:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 679:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 680:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 681:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 682:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 683:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External
 684:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 685:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * 
 686:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval None
 687:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 688:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
 689:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 690:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 691:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 692:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 693:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_FLASH_SECTOR(Sector));
 694:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 695:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 696:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 697:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 698:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 699:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 700:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 701:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 702:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 703:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 704:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 705:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 706:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_WORD;
 707:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 708:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else
 709:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 710:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 711:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 712:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 713:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* If the previous operation is completed, proceed to erase the sector */
 714:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR &= CR_PSIZE_MASK;
 715:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
 716:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR &= SECTOR_MASK;
 717:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 718:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
 719:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 720:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Data synchronous Barrier (DSB) Just after the write operation
 721:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****      This will force the CPU to respect the sequence of instruction (no optimization).*/
 722:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   __DSB();
 723:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 724:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 725:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 726:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Return the FLASH Write Protection Option Bytes value.
 727:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t FLASH Write Protection Option Bytes value
 728:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 729:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetWRP(void)
 730:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 731:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Return the FLASH write protection Register value */
 732:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return ((uint32_t)(FLASH->OPTCR & 0x00FF0000));
 733:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 734:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
ARM GAS  /tmp/ccg5urG3.s 			page 24


 735:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 736:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Program the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
 737:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Wwdg Selects the IWDG mode
 738:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 739:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WWDG_SW: Software WWDG selected
 740:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WWDG_HW: Hardware WWDG selected
 741:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdg Selects the WWDG mode
 742:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 743:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
 744:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
 745:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Stop Reset event when entering STOP mode.
 746:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 747:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STOP_NO_RST: No reset generated when entering in STOP
 748:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
 749:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Stdby Reset event when entering Standby mode.
 750:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 751:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
 752:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
 753:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdgstop Independent watchdog counter freeze in Stop mode.
 754:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 755:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STOP_FREEZE: Freeze IWDG counter in STOP
 756:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STOP_ACTIVE: IWDG counter active in STOP
 757:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Iwdgstdby Independent watchdog counter freeze in standby mode.
 758:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
 759:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STDBY_FREEZE: Freeze IWDG counter in STANDBY
 760:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_IWDG_STDBY_ACTIVE: IWDG counter active in STANDBY           
 761:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 762:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 763:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t Wwdg, uint32_t Iwdg, uint32_t Stop, uint32_t 
 764:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 765:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t useroptionmask = 0x00;
 766:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t useroptionvalue = 0x00;
 767:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 768:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 769:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 770:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 771:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_WWDG_SOURCE(Wwdg));
 772:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_SOURCE(Iwdg));
 773:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_STOP_SOURCE(Stop));
 774:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_STDBY_SOURCE(Stdby));
 775:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_STOP_FREEZE(Iwdgstop));
 776:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_STDBY_FREEZE(Iwdgstdby));
 777:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 778:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 779:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 780:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 781:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 782:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 783:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     useroptionmask = (FLASH_OPTCR_WWDG_SW | FLASH_OPTCR_IWDG_SW | FLASH_OPTCR_nRST_STOP | \
 784:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                       FLASH_OPTCR_nRST_STDBY | FLASH_OPTCR_IWDG_STOP | FLASH_OPTCR_IWDG_STDBY);
 785:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                       
 786:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby);
 787:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         
 788:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /* Update User Option Byte */               
 789:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 790:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 791:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
ARM GAS  /tmp/ccg5urG3.s 			page 25


 792:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return status; 
 793:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 794:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 795:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 796:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 797:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Return the FLASH User Option Byte value.
 798:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t FLASH User Option Bytes values: WWDG_SW(Bit4), IWDG_SW(Bit5), nRST_STOP(Bit6),
 799:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         nRST_STDBY(Bit7), IWDG_STDBY(Bit30) and IWDG_STOP(Bit31).
 800:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 801:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetUser(void)
 802:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 803:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Return the User Option Byte */
 804:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return ((uint32_t)(FLASH->OPTCR & 0xC00000F0U));
 805:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 806:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #endif /* FLASH_OPTCR_nDBANK */
 807:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 808:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 809:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Enable the write protection of the desired bank1 or bank2 sectors
 810:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *
 811:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 812:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM7  
 813:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1    
 814:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * 
 815:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  WRPSector specifies the sector(s) to be write protected.
 816:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 817:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg WRPSector: A value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_7 (for STM32F74xxx
 818:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *              or a value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_11 (in Single Bank mode for S
 819:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *              or a value between OB_WRP_DB_SECTOR_0 and OB_WRP_DB_SECTOR_23 (in Dual Bank mode f
 820:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WRP_SECTOR_All
 821:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *
 822:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL FLASH State   
 823:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 824:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
 825:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 826:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 827:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 828:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 829:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
 830:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     
 831:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 832:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 833:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 834:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 835:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 836:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /*Write protection enabled on sectors */
 837:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     FLASH->OPTCR &= (~WRPSector);  
 838:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 839:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 840:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 841:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 842:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 843:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 844:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Disable the write protection of the desired bank1 or bank 2 sectors
 845:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *
 846:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 847:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
 848:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1  
ARM GAS  /tmp/ccg5urG3.s 			page 26


 849:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * 
 850:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  WRPSector specifies the sector(s) to be write protected.
 851:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 852:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg WRPSector: A value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_7 (for STM32F74xxx
 853:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *              or a value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_11 (in Single Bank mode for S
 854:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *              or a value between OB_WRP_DB_SECTOR_0 and OB_WRP_DB_SECTOR_23 (in Dual Bank mode f
 855:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_WRP_Sector_All
 856:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *
 857:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *
 858:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status   
 859:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 860:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
 861:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 862:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 863:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 864:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 865:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
 866:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     
 867:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 868:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 869:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 870:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 871:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 872:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     /* Write protection disabled on sectors */
 873:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     FLASH->OPTCR |= (WRPSector); 
 874:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 875:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 876:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 877:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 878:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 879:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 880:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Set the read protection level.
 881:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Level specifies the read protection level.
 882:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 883:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_0: No protection
 884:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_1: Read protection of the memory
 885:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_2: Full chip protection
 886:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *   
 887:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
 888:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *    
 889:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 890:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 891:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
 892:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 893:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 894:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 895:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 896:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_RDP_LEVEL(Level));
 897:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     
 898:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 899:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 900:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 901:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 902:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   { 
 903:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 904:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 905:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
ARM GAS  /tmp/ccg5urG3.s 			page 27


 906:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 907:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 908:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 909:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 910:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Set the BOR Level. 
 911:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param  Level specifies the Option Bytes BOR Reset Level.
 912:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 913:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
 914:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
 915:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
 916:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
 917:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 918:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 919:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
 920:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 156              		.loc 1 920 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161              	.LVL5:
 921:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 922:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_BOR_LEVEL(Level));
 923:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 924:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Set the BOR Level */
 925:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 162              		.loc 1 925 0
 163 0000 034A     		ldr	r2, .L14
 164 0002 5369     		ldr	r3, [r2, #20]
 165 0004 23F00C03 		bic	r3, r3, #12
 166 0008 1843     		orrs	r0, r0, r3
 167              	.LVL6:
 168 000a 5061     		str	r0, [r2, #20]
 926:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 927:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return HAL_OK;
 928:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 929:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 169              		.loc 1 929 0
 170 000c 0020     		movs	r0, #0
 171 000e 7047     		bx	lr
 172              	.L15:
 173              		.align	2
 174              	.L14:
 175 0010 003C0240 		.word	1073888256
 176              		.cfi_endproc
 177              	.LFE148:
 179              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 180              		.align	2
 181              		.thumb
 182              		.thumb_func
 184              	FLASH_OB_GetRDP:
 185              	.LFB150:
 930:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 931:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 932:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Configure Boot base address.
 933:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * 
 934:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param   BootOption  specifies Boot base address depending from Boot pin = 0 or pin = 1
ARM GAS  /tmp/ccg5urG3.s 			page 28


 935:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 936:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OPTIONBYTE_BOOTADDR_0 : Boot address based when Boot pin = 0                 
 937:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OPTIONBYTE_BOOTADDR_1 : Boot address based when Boot pin = 1  
 938:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param   Address specifies Boot base address
 939:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 940:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_ITCM_RAM : Boot from ITCM RAM (0x00000000)                 
 941:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_SYSTEM : Boot from System memory bootloader (0x00100000) 
 942:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_ITCM_FLASH : Boot from Flash on ITCM interface (0x00200000)  
 943:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_AXIM_FLASH : Boot from Flash on AXIM interface (0x08000000)  
 944:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_DTCM_RAM : Boot from DTCM RAM (0x20000000)                 
 945:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_SRAM1 : Boot from SRAM1 (0x20010000)                    
 946:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000)              
 947:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *    
 948:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval HAL Status
 949:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 950:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
 951:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 952:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 953:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 954:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Check the parameters */
 955:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   assert_param(IS_OB_BOOT_ADDRESS(Address));
 956:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     
 957:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 958:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 959:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 960:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(status == HAL_OK)
 961:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 962:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     if(BootOption == OPTIONBYTE_BOOTADDR_0)
 963:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     {			
 964:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 965:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     }
 966:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     else
 967:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     {
 968:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 969:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     }
 970:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 971:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 972:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return status;
 973:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 974:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 975:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
 976:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Returns the FLASH Read Protection level.
 977:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval FlagStatus FLASH ReadOut Protection Status:
 978:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *         This parameter can be one of the following values:
 979:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_0: No protection
 980:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_1: Read protection of the memory
 981:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_2: Full chip protection
 982:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
 983:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetRDP(void)
 984:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 186              		.loc 1 984 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191              	.LVL7:
 985:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   uint8_t readstatus = OB_RDP_LEVEL_0;
ARM GAS  /tmp/ccg5urG3.s 			page 29


 986:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 987:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 192              		.loc 1 987 0
 193 0000 074B     		ldr	r3, .L20
 194 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 195 0004 DBB2     		uxtb	r3, r3
 196 0006 AA2B     		cmp	r3, #170
 197 0008 06D0     		beq	.L18
 988:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 989:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     readstatus = OB_RDP_LEVEL_0;
 990:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 991:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 198              		.loc 1 991 0
 199 000a 054B     		ldr	r3, .L20
 200 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 201 000e DBB2     		uxtb	r3, r3
 202 0010 CC2B     		cmp	r3, #204
 203 0012 03D1     		bne	.L19
 992:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 993:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     readstatus = OB_RDP_LEVEL_2;
 204              		.loc 1 993 0
 205 0014 CC20     		movs	r0, #204
 206 0016 7047     		bx	lr
 207              	.L18:
 989:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 208              		.loc 1 989 0
 209 0018 AA20     		movs	r0, #170
 210 001a 7047     		bx	lr
 211              	.L19:
 994:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 995:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else 
 996:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 997:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     readstatus = OB_RDP_LEVEL_1;
 212              		.loc 1 997 0
 213 001c 5520     		movs	r0, #85
 214              	.LVL8:
 998:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 999:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
1000:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return readstatus;
1001:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 215              		.loc 1 1001 0
 216 001e 7047     		bx	lr
 217              	.L21:
 218              		.align	2
 219              	.L20:
 220 0020 153C0240 		.word	1073888277
 221              		.cfi_endproc
 222              	.LFE150:
 224              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
 225              		.align	2
 226              		.thumb
 227              		.thumb_func
 229              	FLASH_OB_GetBOR:
 230              	.LFB151:
1002:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
1003:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
1004:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Returns the FLASH BOR level.
ARM GAS  /tmp/ccg5urG3.s 			page 30


1005:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t The FLASH BOR level:
1006:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1007:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1008:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1009:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
1010:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
1011:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetBOR(void)
1012:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {
 231              		.loc 1 1012 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
1013:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   /* Return the FLASH BOR level */
1014:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return ((uint32_t)(FLASH->OPTCR & 0x0C));
 236              		.loc 1 1014 0
 237 0000 024B     		ldr	r3, .L23
 238 0002 5869     		ldr	r0, [r3, #20]
1015:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 239              		.loc 1 1015 0
 240 0004 00F00C00 		and	r0, r0, #12
 241 0008 7047     		bx	lr
 242              	.L24:
 243 000a 00BF     		.align	2
 244              	.L23:
 245 000c 003C0240 		.word	1073888256
 246              		.cfi_endproc
 247              	.LFE151:
 249              		.section	.text.FLASH_OB_GetBootAddress,"ax",%progbits
 250              		.align	2
 251              		.thumb
 252              		.thumb_func
 254              	FLASH_OB_GetBootAddress:
 255              	.LFB152:
1016:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
1017:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** /**
1018:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @brief  Configure Boot base address.
1019:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * 
1020:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @param   BootOption  specifies Boot base address depending from Boot pin = 0 or pin = 1
1021:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1022:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OPTIONBYTE_BOOTADDR_0 : Boot address based when Boot pin = 0                 
1023:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            @arg OPTIONBYTE_BOOTADDR_1 : Boot address based when Boot pin = 1       
1024:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *    
1025:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   * @retval uint32_t Boot Base Address:
1026:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_ITCM_RAM : Boot from ITCM RAM (0x00000000)                 
1027:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_SYSTEM : Boot from System memory bootloader (0x00100000) 
1028:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_ITCM_FLASH : Boot from Flash on ITCM interface (0x00200000)  
1029:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_AXIM_FLASH : Boot from Flash on AXIM interface (0x08000000)  
1030:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_DTCM_RAM : Boot from DTCM RAM (0x20000000)                 
1031:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_SRAM1 : Boot from SRAM1 (0x20010000)                    
1032:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   *            - OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000) 
1033:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   */
1034:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** static uint32_t FLASH_OB_GetBootAddress(uint32_t BootOption)
1035:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** {  
 256              		.loc 1 1035 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccg5urG3.s 			page 31


 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 261              	.LVL9:
1036:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t Address = 0;
1037:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     
1038:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 	/* Return the Boot base Address */
1039:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   if(BootOption == OPTIONBYTE_BOOTADDR_0)
 262              		.loc 1 1039 0
 263 0000 1028     		cmp	r0, #16
 264 0002 03D1     		bne	.L26
1040:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {			
1041:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 265              		.loc 1 1041 0
 266 0004 034B     		ldr	r3, .L28
 267 0006 9869     		ldr	r0, [r3, #24]
 268              	.LVL10:
 269 0008 80B2     		uxth	r0, r0
 270              	.LVL11:
 271 000a 7047     		bx	lr
 272              	.LVL12:
 273              	.L26:
1042:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 	}
1043:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   else
1044:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 	{
1045:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 274              		.loc 1 1045 0
 275 000c 014B     		ldr	r3, .L28
 276 000e 9869     		ldr	r0, [r3, #24]
 277              	.LVL13:
 278 0010 000C     		lsrs	r0, r0, #16
 279              	.LVL14:
1046:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 	}
1047:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
1048:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   return Address;
1049:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 280              		.loc 1 1049 0
 281 0012 7047     		bx	lr
 282              	.L29:
 283              		.align	2
 284              	.L28:
 285 0014 003C0240 		.word	1073888256
 286              		.cfi_endproc
 287              	.LFE152:
 289              		.section	.text.FLASH_OB_EnableWRP,"ax",%progbits
 290              		.align	2
 291              		.thumb
 292              		.thumb_func
 294              	FLASH_OB_EnableWRP:
 295              	.LFB145:
 825:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 296              		.loc 1 825 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              	.LVL15:
 301 0000 10B5     		push	{r4, lr}
 302              	.LCFI0:
ARM GAS  /tmp/ccg5urG3.s 			page 32


 303              		.cfi_def_cfa_offset 8
 304              		.cfi_offset 4, -8
 305              		.cfi_offset 14, -4
 306 0002 0446     		mov	r4, r0
 307              	.LVL16:
 832:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 308              		.loc 1 832 0
 309 0004 4CF25030 		movw	r0, #50000
 310              	.LVL17:
 311 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 312              	.LVL18:
 834:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 313              		.loc 1 834 0
 314 000c 0346     		mov	r3, r0
 315 000e 20B9     		cbnz	r0, .L31
 837:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 316              		.loc 1 837 0
 317 0010 034A     		ldr	r2, .L33
 318 0012 5069     		ldr	r0, [r2, #20]
 319              	.LVL19:
 320 0014 20EA0400 		bic	r0, r0, r4
 321 0018 5061     		str	r0, [r2, #20]
 322              	.L31:
 841:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 323              		.loc 1 841 0
 324 001a 1846     		mov	r0, r3
 325 001c 10BD     		pop	{r4, pc}
 326              	.LVL20:
 327              	.L34:
 328 001e 00BF     		.align	2
 329              	.L33:
 330 0020 003C0240 		.word	1073888256
 331              		.cfi_endproc
 332              	.LFE145:
 334              		.section	.text.FLASH_OB_DisableWRP,"ax",%progbits
 335              		.align	2
 336              		.thumb
 337              		.thumb_func
 339              	FLASH_OB_DisableWRP:
 340              	.LFB146:
 861:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 341              		.loc 1 861 0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345              	.LVL21:
 346 0000 10B5     		push	{r4, lr}
 347              	.LCFI1:
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 4, -8
 350              		.cfi_offset 14, -4
 351 0002 0446     		mov	r4, r0
 352              	.LVL22:
 868:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 353              		.loc 1 868 0
 354 0004 4CF25030 		movw	r0, #50000
 355              	.LVL23:
ARM GAS  /tmp/ccg5urG3.s 			page 33


 356 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 357              	.LVL24:
 870:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 358              		.loc 1 870 0
 359 000c 0346     		mov	r3, r0
 360 000e 18B9     		cbnz	r0, .L36
 873:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 361              		.loc 1 873 0
 362 0010 024A     		ldr	r2, .L38
 363 0012 5169     		ldr	r1, [r2, #20]
 364 0014 0C43     		orrs	r4, r4, r1
 365              	.LVL25:
 366 0016 5461     		str	r4, [r2, #20]
 367              	.L36:
 877:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 368              		.loc 1 877 0
 369 0018 1846     		mov	r0, r3
 370              	.LVL26:
 371 001a 10BD     		pop	{r4, pc}
 372              	.L39:
 373              		.align	2
 374              	.L38:
 375 001c 003C0240 		.word	1073888256
 376              		.cfi_endproc
 377              	.LFE146:
 379              		.section	.text.FLASH_OB_RDP_LevelConfig,"ax",%progbits
 380              		.align	2
 381              		.thumb
 382              		.thumb_func
 384              	FLASH_OB_RDP_LevelConfig:
 385              	.LFB147:
 892:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 386              		.loc 1 892 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390              	.LVL27:
 391 0000 10B5     		push	{r4, lr}
 392              	.LCFI2:
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 4, -8
 395              		.cfi_offset 14, -4
 396 0002 0446     		mov	r4, r0
 397              	.LVL28:
 899:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 398              		.loc 1 899 0
 399 0004 4CF25030 		movw	r0, #50000
 400              	.LVL29:
 401 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 402              	.LVL30:
 901:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   { 
 403              		.loc 1 901 0
 404 000c 0346     		mov	r3, r0
 405 000e 08B9     		cbnz	r0, .L41
 903:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 406              		.loc 1 903 0
 407 0010 014A     		ldr	r2, .L43
ARM GAS  /tmp/ccg5urG3.s 			page 34


 408 0012 1470     		strb	r4, [r2]
 409              	.L41:
 907:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 410              		.loc 1 907 0
 411 0014 1846     		mov	r0, r3
 412              	.LVL31:
 413 0016 10BD     		pop	{r4, pc}
 414              	.L44:
 415              		.align	2
 416              	.L43:
 417 0018 153C0240 		.word	1073888277
 418              		.cfi_endproc
 419              	.LFE147:
 421              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 422              		.align	2
 423              		.thumb
 424              		.thumb_func
 426              	FLASH_OB_UserConfig:
 427              	.LFB143:
 596:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t useroptionmask = 0x00;
 428              		.loc 1 596 0
 429              		.cfi_startproc
 430              		@ args = 16, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432              	.LVL32:
 433 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 434              	.LCFI3:
 435              		.cfi_def_cfa_offset 24
 436              		.cfi_offset 3, -24
 437              		.cfi_offset 4, -20
 438              		.cfi_offset 5, -16
 439              		.cfi_offset 6, -12
 440              		.cfi_offset 7, -8
 441              		.cfi_offset 14, -4
 442 0002 0646     		mov	r6, r0
 443 0004 0F46     		mov	r7, r1
 444 0006 1546     		mov	r5, r2
 445 0008 1C46     		mov	r4, r3
 446              	.LVL33:
 613:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 447              		.loc 1 613 0
 448 000a 4CF25030 		movw	r0, #50000
 449              	.LVL34:
 450 000e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 451              	.LVL35:
 615:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 452              		.loc 1 615 0
 453 0012 0246     		mov	r2, r0
 454 0014 80B9     		cbnz	r0, .L46
 455              	.LVL36:
 621:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         
 456              		.loc 1 621 0
 457 0016 3E43     		orrs	r6, r6, r7
 458              	.LVL37:
 459 0018 3543     		orrs	r5, r5, r6
 460              	.LVL38:
 461 001a 2C43     		orrs	r4, r4, r5
ARM GAS  /tmp/ccg5urG3.s 			page 35


 462              	.LVL39:
 463 001c 069B     		ldr	r3, [sp, #24]
 464 001e 1C43     		orrs	r4, r4, r3
 465 0020 079B     		ldr	r3, [sp, #28]
 466 0022 1C43     		orrs	r4, r4, r3
 467 0024 099B     		ldr	r3, [sp, #36]
 468 0026 1C43     		orrs	r4, r4, r3
 469 0028 089B     		ldr	r3, [sp, #32]
 470 002a 1C43     		orrs	r4, r4, r3
 471              	.LVL40:
 624:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 472              		.loc 1 624 0
 473 002c 0349     		ldr	r1, .L48
 474 002e 4869     		ldr	r0, [r1, #20]
 475              	.LVL41:
 476 0030 034B     		ldr	r3, .L48+4
 477 0032 0340     		ands	r3, r3, r0
 478 0034 2343     		orrs	r3, r3, r4
 479 0036 4B61     		str	r3, [r1, #20]
 480              	.LVL42:
 481              	.L46:
 628:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 482              		.loc 1 628 0
 483 0038 1046     		mov	r0, r2
 484 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 485              	.LVL43:
 486              	.L49:
 487              		.align	2
 488              	.L48:
 489 003c 003C0240 		.word	1073888256
 490 0040 0FFFFF0F 		.word	268435215
 491              		.cfi_endproc
 492              	.LFE143:
 494              		.section	.text.FLASH_OB_BootAddressConfig,"ax",%progbits
 495              		.align	2
 496              		.thumb
 497              		.thumb_func
 499              	FLASH_OB_BootAddressConfig:
 500              	.LFB149:
 951:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 501              		.loc 1 951 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              	.LVL44:
 506 0000 38B5     		push	{r3, r4, r5, lr}
 507              	.LCFI4:
 508              		.cfi_def_cfa_offset 16
 509              		.cfi_offset 3, -16
 510              		.cfi_offset 4, -12
 511              		.cfi_offset 5, -8
 512              		.cfi_offset 14, -4
 513 0002 0446     		mov	r4, r0
 514 0004 0D46     		mov	r5, r1
 515              	.LVL45:
 958:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 516              		.loc 1 958 0
ARM GAS  /tmp/ccg5urG3.s 			page 36


 517 0006 4CF25030 		movw	r0, #50000
 518              	.LVL46:
 519 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 520              	.LVL47:
 960:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 521              		.loc 1 960 0
 522 000e 0346     		mov	r3, r0
 523 0010 70B9     		cbnz	r0, .L51
 962:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     {			
 524              		.loc 1 962 0
 525 0012 102C     		cmp	r4, #16
 526 0014 06D1     		bne	.L52
 964:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     }
 527              		.loc 1 964 0
 528 0016 074A     		ldr	r2, .L54
 529 0018 9069     		ldr	r0, [r2, #24]
 530              	.LVL48:
 531 001a 0749     		ldr	r1, .L54+4
 532 001c 0140     		ands	r1, r1, r0
 533 001e 2943     		orrs	r1, r1, r5
 534 0020 9161     		str	r1, [r2, #24]
 535 0022 05E0     		b	.L51
 536              	.LVL49:
 537              	.L52:
 968:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     }
 538              		.loc 1 968 0
 539 0024 034A     		ldr	r2, .L54
 540 0026 9169     		ldr	r1, [r2, #24]
 541 0028 89B2     		uxth	r1, r1
 542 002a 41EA0541 		orr	r1, r1, r5, lsl #16
 543 002e 9161     		str	r1, [r2, #24]
 544              	.LVL50:
 545              	.L51:
 973:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 546              		.loc 1 973 0
 547 0030 1846     		mov	r0, r3
 548 0032 38BD     		pop	{r3, r4, r5, pc}
 549              	.LVL51:
 550              	.L55:
 551              		.align	2
 552              	.L54:
 553 0034 003C0240 		.word	1073888256
 554 0038 0000FFFF 		.word	-65536
 555              		.cfi_endproc
 556              	.LFE149:
 558              		.section	.text.HAL_FLASHEx_OBProgram,"ax",%progbits
 559              		.align	2
 560              		.global	HAL_FLASHEx_OBProgram
 561              		.thumb
 562              		.thumb_func
 564              	HAL_FLASHEx_OBProgram:
 565              	.LFB138:
 304:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 566              		.loc 1 304 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccg5urG3.s 			page 37


 570              	.LVL52:
 308:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 571              		.loc 1 308 0
 572 0000 2D4B     		ldr	r3, .L69
 573 0002 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 574 0004 012B     		cmp	r3, #1
 575 0006 52D0     		beq	.L65
 304:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 576              		.loc 1 304 0 discriminator 2
 577 0008 30B5     		push	{r4, r5, lr}
 578              	.LCFI5:
 579              		.cfi_def_cfa_offset 12
 580              		.cfi_offset 4, -12
 581              		.cfi_offset 5, -8
 582              		.cfi_offset 14, -4
 583 000a 85B0     		sub	sp, sp, #20
 584              	.LCFI6:
 585              		.cfi_def_cfa_offset 32
 586 000c 0446     		mov	r4, r0
 308:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 587              		.loc 1 308 0 discriminator 2
 588 000e 0122     		movs	r2, #1
 589 0010 294B     		ldr	r3, .L69
 590 0012 1A75     		strb	r2, [r3, #20]
 314:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 591              		.loc 1 314 0 discriminator 2
 592 0014 0368     		ldr	r3, [r0]
 593 0016 13F0010F 		tst	r3, #1
 594 001a 0AD0     		beq	.L66
 317:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     {
 595              		.loc 1 317 0
 596 001c 4368     		ldr	r3, [r0, #4]
 597 001e 9342     		cmp	r3, r2
 598 0020 03D1     		bne	.L59
 320:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     }
 599              		.loc 1 320 0
 600 0022 8068     		ldr	r0, [r0, #8]
 601              	.LVL53:
 602 0024 FFF7FEFF 		bl	FLASH_OB_EnableWRP
 603              	.LVL54:
 604 0028 04E0     		b	.L58
 605              	.LVL55:
 606              	.L59:
 325:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     }
 607              		.loc 1 325 0
 608 002a 8068     		ldr	r0, [r0, #8]
 609              	.LVL56:
 610 002c FFF7FEFF 		bl	FLASH_OB_DisableWRP
 611              	.LVL57:
 612 0030 00E0     		b	.L58
 613              	.LVL58:
 614              	.L66:
 305:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 615              		.loc 1 305 0
 616 0032 0120     		movs	r0, #1
 617              	.LVL59:
 618              	.L58:
ARM GAS  /tmp/ccg5urG3.s 			page 38


 330:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 619              		.loc 1 330 0
 620 0034 2368     		ldr	r3, [r4]
 621 0036 13F0020F 		tst	r3, #2
 622 003a 02D0     		beq	.L60
 332:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 623              		.loc 1 332 0
 624 003c 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 625              	.LVL60:
 626 003e FFF7FEFF 		bl	FLASH_OB_RDP_LevelConfig
 627              	.LVL61:
 628              	.L60:
 336:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 629              		.loc 1 336 0
 630 0042 2368     		ldr	r3, [r4]
 631 0044 13F0040F 		tst	r3, #4
 632 0048 16D0     		beq	.L61
 339:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_IWDG_SW,
 633              		.loc 1 339 0
 634 004a 6069     		ldr	r0, [r4, #20]
 635              	.LVL62:
 636 004c 00F00043 		and	r3, r0, #-2147483648
 637 0050 00F08042 		and	r2, r0, #1073741824
 638 0054 00F00051 		and	r1, r0, #536870912
 639 0058 00F08055 		and	r5, r0, #268435456
 640 005c 0395     		str	r5, [sp, #12]
 641 005e 0291     		str	r1, [sp, #8]
 642 0060 0192     		str	r2, [sp, #4]
 643 0062 0093     		str	r3, [sp]
 644 0064 00F08003 		and	r3, r0, #128
 645 0068 00F04002 		and	r2, r0, #64
 646 006c 00F02001 		and	r1, r0, #32
 647 0070 00F01000 		and	r0, r0, #16
 648 0074 FFF7FEFF 		bl	FLASH_OB_UserConfig
 649              	.LVL63:
 650              	.L61:
 358:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 651              		.loc 1 358 0
 652 0078 2368     		ldr	r3, [r4]
 653 007a 13F0080F 		tst	r3, #8
 654 007e 02D0     		beq	.L62
 360:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 655              		.loc 1 360 0
 656 0080 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 657              	.LVL64:
 658 0082 FFF7FEFF 		bl	FLASH_OB_BOR_LevelConfig
 659              	.LVL65:
 660              	.L62:
 364:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 661              		.loc 1 364 0
 662 0086 2368     		ldr	r3, [r4]
 663 0088 13F0100F 		tst	r3, #16
 664 008c 03D0     		beq	.L63
 366:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 665              		.loc 1 366 0
 666 008e A169     		ldr	r1, [r4, #24]
 667 0090 1020     		movs	r0, #16
ARM GAS  /tmp/ccg5urG3.s 			page 39


 668              	.LVL66:
 669 0092 FFF7FEFF 		bl	FLASH_OB_BootAddressConfig
 670              	.LVL67:
 671              	.L63:
 370:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 672              		.loc 1 370 0
 673 0096 2368     		ldr	r3, [r4]
 674 0098 13F0200F 		tst	r3, #32
 675 009c 03D0     		beq	.L64
 372:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 676              		.loc 1 372 0
 677 009e E169     		ldr	r1, [r4, #28]
 678 00a0 2020     		movs	r0, #32
 679              	.LVL68:
 680 00a2 FFF7FEFF 		bl	FLASH_OB_BootAddressConfig
 681              	.LVL69:
 682              	.L64:
 390:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 683              		.loc 1 390 0
 684 00a6 0022     		movs	r2, #0
 685 00a8 034B     		ldr	r3, .L69
 686 00aa 1A75     		strb	r2, [r3, #20]
 392:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 687              		.loc 1 392 0
 688 00ac 01E0     		b	.L57
 689              	.LVL70:
 690              	.L65:
 691              	.LCFI7:
 692              		.cfi_def_cfa_offset 0
 693              		.cfi_restore 4
 694              		.cfi_restore 5
 695              		.cfi_restore 14
 308:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 696              		.loc 1 308 0
 697 00ae 0220     		movs	r0, #2
 698              	.LVL71:
 699 00b0 7047     		bx	lr
 700              	.LVL72:
 701              	.L57:
 702              	.LCFI8:
 703              		.cfi_def_cfa_offset 32
 704              		.cfi_offset 4, -12
 705              		.cfi_offset 5, -8
 706              		.cfi_offset 14, -4
 393:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 707              		.loc 1 393 0
 708 00b2 05B0     		add	sp, sp, #20
 709              	.LCFI9:
 710              		.cfi_def_cfa_offset 12
 711              		@ sp needed
 712 00b4 30BD     		pop	{r4, r5, pc}
 713              	.LVL73:
 714              	.L70:
 715 00b6 00BF     		.align	2
 716              	.L69:
 717 00b8 00000000 		.word	pFlash
 718              		.cfi_endproc
ARM GAS  /tmp/ccg5urG3.s 			page 40


 719              	.LFE138:
 721              		.section	.text.HAL_FLASHEx_OBGetConfig,"ax",%progbits
 722              		.align	2
 723              		.global	HAL_FLASHEx_OBGetConfig
 724              		.thumb
 725              		.thumb_func
 727              	HAL_FLASHEx_OBGetConfig:
 728              	.LFB139:
 403:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 729              		.loc 1 403 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              	.LVL74:
 734 0000 10B5     		push	{r4, lr}
 735              	.LCFI10:
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 4, -8
 738              		.cfi_offset 14, -4
 739 0002 0446     		mov	r4, r0
 404:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 	                OPTIONBYTE_BOR | OPTIONBYTE_BOOTADDR_0 | OPTIONBYTE_BOOTADDR_1;
 740              		.loc 1 404 0
 741 0004 3F23     		movs	r3, #63
 742 0006 0360     		str	r3, [r0]
 408:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 743              		.loc 1 408 0
 744 0008 FFF7FEFF 		bl	FLASH_OB_GetWRP
 745              	.LVL75:
 746 000c A060     		str	r0, [r4, #8]
 411:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 747              		.loc 1 411 0
 748 000e FFF7FEFF 		bl	FLASH_OB_GetRDP
 749              	.LVL76:
 750 0012 E060     		str	r0, [r4, #12]
 414:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 751              		.loc 1 414 0
 752 0014 FFF7FEFF 		bl	FLASH_OB_GetUser
 753              	.LVL77:
 754 0018 6061     		str	r0, [r4, #20]
 417:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 755              		.loc 1 417 0
 756 001a FFF7FEFF 		bl	FLASH_OB_GetBOR
 757              	.LVL78:
 758 001e 2061     		str	r0, [r4, #16]
 420:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 759              		.loc 1 420 0
 760 0020 1020     		movs	r0, #16
 761 0022 FFF7FEFF 		bl	FLASH_OB_GetBootAddress
 762              	.LVL79:
 763 0026 A061     		str	r0, [r4, #24]
 423:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 764              		.loc 1 423 0
 765 0028 2020     		movs	r0, #32
 766 002a FFF7FEFF 		bl	FLASH_OB_GetBootAddress
 767              	.LVL80:
 768 002e E061     		str	r0, [r4, #28]
 769 0030 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccg5urG3.s 			page 41


 770              		.cfi_endproc
 771              	.LFE139:
 773 0032 00BF     		.section	.text.FLASH_Erase_Sector,"ax",%progbits
 774              		.align	2
 775              		.global	FLASH_Erase_Sector
 776              		.thumb
 777              		.thumb_func
 779              	FLASH_Erase_Sector:
 780              	.LFB141:
 505:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 781              		.loc 1 505 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785              		@ link register save eliminated.
 786              	.LVL81:
 787 0000 10B4     		push	{r4}
 788              	.LCFI11:
 789              		.cfi_def_cfa_offset 4
 790              		.cfi_offset 4, -4
 791              	.LVL82:
 512:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 792              		.loc 1 512 0
 793 0002 31B1     		cbz	r1, .L76
 516:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 794              		.loc 1 516 0
 795 0004 0129     		cmp	r1, #1
 796 0006 06D0     		beq	.L77
 520:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 797              		.loc 1 520 0
 798 0008 0229     		cmp	r1, #2
 799 000a 07D1     		bne	.L78
 522:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 800              		.loc 1 522 0
 801 000c 4FF40074 		mov	r4, #512
 802 0010 06E0     		b	.L74
 803              	.L76:
 514:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 804              		.loc 1 514 0
 805 0012 0024     		movs	r4, #0
 806 0014 04E0     		b	.L74
 807              	.L77:
 518:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 808              		.loc 1 518 0
 809 0016 4FF48074 		mov	r4, #256
 810 001a 01E0     		b	.L74
 811              	.L78:
 526:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 812              		.loc 1 526 0
 813 001c 4FF44074 		mov	r4, #768
 814              	.L74:
 815              	.LVL83:
 530:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 816              		.loc 1 530 0
 817 0020 0B28     		cmp	r0, #11
 818 0022 00D9     		bls	.L75
 532:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }  
ARM GAS  /tmp/ccg5urG3.s 			page 42


 819              		.loc 1 532 0
 820 0024 0430     		adds	r0, r0, #4
 821              	.LVL84:
 822              	.L75:
 536:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
 823              		.loc 1 536 0
 824 0026 0D4B     		ldr	r3, .L80
 825 0028 1969     		ldr	r1, [r3, #16]
 826              	.LVL85:
 827 002a 21F44071 		bic	r1, r1, #768
 828 002e 1961     		str	r1, [r3, #16]
 537:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 829              		.loc 1 537 0
 830 0030 1A69     		ldr	r2, [r3, #16]
 831 0032 2243     		orrs	r2, r2, r4
 832 0034 1A61     		str	r2, [r3, #16]
 538:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 833              		.loc 1 538 0
 834 0036 1A69     		ldr	r2, [r3, #16]
 835 0038 22F0F802 		bic	r2, r2, #248
 836 003c 1A61     		str	r2, [r3, #16]
 539:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
 837              		.loc 1 539 0
 838 003e 1A69     		ldr	r2, [r3, #16]
 839 0040 42EAC000 		orr	r0, r2, r0, lsl #3
 840              	.LVL86:
 841 0044 40F00200 		orr	r0, r0, #2
 842 0048 1861     		str	r0, [r3, #16]
 540:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 843              		.loc 1 540 0
 844 004a 1A69     		ldr	r2, [r3, #16]
 845 004c 42F48032 		orr	r2, r2, #65536
 846 0050 1A61     		str	r2, [r3, #16]
 847              	.LBB8:
 848              	.LBB9:
 849              		.loc 2 429 0
 850              		.syntax unified
 851              	@ 429 "CORE/cmsis_gcc.h" 1
 852 0052 BFF34F8F 		dsb 0xF
 853              	@ 0 "" 2
 854              		.thumb
 855              		.syntax unified
 856              	.LBE9:
 857              	.LBE8:
 545:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 858              		.loc 1 545 0
 859 0056 5DF8044B 		ldr	r4, [sp], #4
 860              	.LCFI12:
 861              		.cfi_restore 4
 862              		.cfi_def_cfa_offset 0
 863              	.LVL87:
 864 005a 7047     		bx	lr
 865              	.L81:
 866              		.align	2
 867              	.L80:
 868 005c 003C0240 		.word	1073888256
 869              		.cfi_endproc
ARM GAS  /tmp/ccg5urG3.s 			page 43


 870              	.LFE141:
 872              		.section	.text.HAL_FLASHEx_Erase,"ax",%progbits
 873              		.align	2
 874              		.global	HAL_FLASHEx_Erase
 875              		.thumb
 876              		.thumb_func
 878              	HAL_FLASHEx_Erase:
 879              	.LFB136:
 175:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 880              		.loc 1 175 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884              	.LVL88:
 180:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 885              		.loc 1 180 0
 886 0000 224B     		ldr	r3, .L92
 887 0002 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 888 0004 012B     		cmp	r3, #1
 889 0006 3ED0     		beq	.L89
 175:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 890              		.loc 1 175 0 discriminator 2
 891 0008 70B5     		push	{r4, r5, r6, lr}
 892              	.LCFI13:
 893              		.cfi_def_cfa_offset 16
 894              		.cfi_offset 4, -16
 895              		.cfi_offset 5, -12
 896              		.cfi_offset 6, -8
 897              		.cfi_offset 14, -4
 898 000a 0E46     		mov	r6, r1
 899 000c 0446     		mov	r4, r0
 180:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 900              		.loc 1 180 0 discriminator 2
 901 000e 0122     		movs	r2, #1
 902 0010 1E4B     		ldr	r3, .L92
 903 0012 1A75     		strb	r2, [r3, #20]
 186:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 904              		.loc 1 186 0 discriminator 2
 905 0014 4CF25030 		movw	r0, #50000
 906              	.LVL89:
 907 0018 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 908              	.LVL90:
 188:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 909              		.loc 1 188 0 discriminator 2
 910 001c 0246     		mov	r2, r0
 911 001e 68BB     		cbnz	r0, .L84
 191:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     
 912              		.loc 1 191 0
 913 0020 4FF0FF33 		mov	r3, #-1
 914 0024 3360     		str	r3, [r6]
 193:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     {
 915              		.loc 1 193 0
 916 0026 2368     		ldr	r3, [r4]
 917 0028 012B     		cmp	r3, #1
 918 002a 0ED1     		bne	.L85
 197:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #else
 919              		.loc 1 197 0
ARM GAS  /tmp/ccg5urG3.s 			page 44


 920 002c 6168     		ldr	r1, [r4, #4]
 921 002e 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 922              	.LVL91:
 923 0030 FFF7FEFF 		bl	FLASH_MassErase
 924              	.LVL92:
 203:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       
 925              		.loc 1 203 0
 926 0034 4CF25030 		movw	r0, #50000
 927 0038 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 928              	.LVL93:
 929 003c 0246     		mov	r2, r0
 930              	.LVL94:
 206:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     }
 931              		.loc 1 206 0
 932 003e 1449     		ldr	r1, .L92+4
 933 0040 0869     		ldr	r0, [r1, #16]
 934 0042 144B     		ldr	r3, .L92+8
 935 0044 0340     		ands	r3, r3, r0
 936 0046 0B61     		str	r3, [r1, #16]
 937 0048 18E0     		b	.L84
 938              	.LVL95:
 939              	.L85:
 214:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       {
 940              		.loc 1 214 0
 941 004a A568     		ldr	r5, [r4, #8]
 942              	.LVL96:
 943 004c 11E0     		b	.L86
 944              	.LVL97:
 945              	.L88:
 216:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 946              		.loc 1 216 0
 947 004e 217C     		ldrb	r1, [r4, #16]	@ zero_extendqisi2
 948 0050 2846     		mov	r0, r5
 949 0052 FFF7FEFF 		bl	FLASH_Erase_Sector
 950              	.LVL98:
 219:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         
 951              		.loc 1 219 0
 952 0056 4CF25030 		movw	r0, #50000
 953 005a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 954              	.LVL99:
 222:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 955              		.loc 1 222 0
 956 005e 0C4A     		ldr	r2, .L92+4
 957 0060 1369     		ldr	r3, [r2, #16]
 958 0062 23F0FA03 		bic	r3, r3, #250
 959 0066 1361     		str	r3, [r2, #16]
 224:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         {
 960              		.loc 1 224 0
 961 0068 0246     		mov	r2, r0
 962 006a 08B1     		cbz	r0, .L87
 227:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****           break;
 963              		.loc 1 227 0
 964 006c 3560     		str	r5, [r6]
 228:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****         }
 965              		.loc 1 228 0
 966 006e 05E0     		b	.L84
 967              	.L87:
ARM GAS  /tmp/ccg5urG3.s 			page 45


 214:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       {
 968              		.loc 1 214 0 discriminator 2
 969 0070 0135     		adds	r5, r5, #1
 970              	.LVL100:
 971              	.L86:
 214:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****       {
 972              		.loc 1 214 0 is_stmt 0 discriminator 1
 973 0072 E168     		ldr	r1, [r4, #12]
 974 0074 A368     		ldr	r3, [r4, #8]
 975 0076 0B44     		add	r3, r3, r1
 976 0078 9D42     		cmp	r5, r3
 977 007a E8D3     		bcc	.L88
 978              	.LVL101:
 979              	.L84:
 235:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 980              		.loc 1 235 0 is_stmt 1
 981 007c 0021     		movs	r1, #0
 982 007e 034B     		ldr	r3, .L92
 983 0080 1975     		strb	r1, [r3, #20]
 237:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 984              		.loc 1 237 0
 985 0082 1046     		mov	r0, r2
 986 0084 70BD     		pop	{r4, r5, r6, pc}
 987              	.LVL102:
 988              	.L89:
 989              	.LCFI14:
 990              		.cfi_def_cfa_offset 0
 991              		.cfi_restore 4
 992              		.cfi_restore 5
 993              		.cfi_restore 6
 994              		.cfi_restore 14
 180:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 995              		.loc 1 180 0
 996 0086 0220     		movs	r0, #2
 997              	.LVL103:
 998 0088 7047     		bx	lr
 999              	.L93:
 1000 008a 00BF     		.align	2
 1001              	.L92:
 1002 008c 00000000 		.word	pFlash
 1003 0090 003C0240 		.word	1073888256
 1004 0094 FB7FFFFF 		.word	-32773
 1005              		.cfi_endproc
 1006              	.LFE136:
 1008              		.section	.text.HAL_FLASHEx_Erase_IT,"ax",%progbits
 1009              		.align	2
 1010              		.global	HAL_FLASHEx_Erase_IT
 1011              		.thumb
 1012              		.thumb_func
 1014              	HAL_FLASHEx_Erase_IT:
 1015              	.LFB137:
 248:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1016              		.loc 1 248 0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 0
 1019              		@ frame_needed = 0, uses_anonymous_args = 0
 1020              	.LVL104:
ARM GAS  /tmp/ccg5urG3.s 			page 46


 1021 0000 08B5     		push	{r3, lr}
 1022              	.LCFI15:
 1023              		.cfi_def_cfa_offset 8
 1024              		.cfi_offset 3, -8
 1025              		.cfi_offset 14, -4
 1026              	.LVL105:
 252:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 1027              		.loc 1 252 0
 1028 0002 174B     		ldr	r3, .L99
 1029 0004 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1030 0006 012B     		cmp	r3, #1
 1031 0008 27D0     		beq	.L97
 252:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 1032              		.loc 1 252 0 is_stmt 0 discriminator 2
 1033 000a 0122     		movs	r2, #1
 1034 000c 144B     		ldr	r3, .L99
 1035 000e 1A75     		strb	r2, [r3, #20]
 258:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 1036              		.loc 1 258 0 is_stmt 1 discriminator 2
 1037 0010 144B     		ldr	r3, .L99+4
 1038 0012 1A69     		ldr	r2, [r3, #16]
 1039 0014 42F08072 		orr	r2, r2, #16777216
 1040 0018 1A61     		str	r2, [r3, #16]
 261:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   
 1041              		.loc 1 261 0 discriminator 2
 1042 001a 1A69     		ldr	r2, [r3, #16]
 1043 001c 42F00072 		orr	r2, r2, #33554432
 1044 0020 1A61     		str	r2, [r3, #16]
 264:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****                          FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_ERSERR);  
 1045              		.loc 1 264 0 discriminator 2
 1046 0022 F322     		movs	r2, #243
 1047 0024 DA60     		str	r2, [r3, #12]
 267:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   {
 1048              		.loc 1 267 0 discriminator 2
 1049 0026 0368     		ldr	r3, [r0]
 1050 0028 012B     		cmp	r3, #1
 1051 002a 08D1     		bne	.L96
 270:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #if defined (FLASH_OPTCR_nDBANK)    
 1052              		.loc 1 270 0
 1053 002c 0222     		movs	r2, #2
 1054 002e 0C4B     		ldr	r3, .L99
 1055 0030 1A70     		strb	r2, [r3]
 272:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** #else
 1056              		.loc 1 272 0
 1057 0032 4168     		ldr	r1, [r0, #4]
 1058 0034 007C     		ldrb	r0, [r0, #16]	@ zero_extendqisi2
 1059              	.LVL106:
 1060 0036 FFF7FEFF 		bl	FLASH_MassErase
 1061              	.LVL107:
 293:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 1062              		.loc 1 293 0
 1063 003a 0020     		movs	r0, #0
 1064 003c 08BD     		pop	{r3, pc}
 1065              	.LVL108:
 1066              	.L96:
 284:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 1067              		.loc 1 284 0
ARM GAS  /tmp/ccg5urG3.s 			page 47


 1068 003e 084B     		ldr	r3, .L99
 1069 0040 0122     		movs	r2, #1
 1070 0042 1A70     		strb	r2, [r3]
 285:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.Sector = pEraseInit->Sector;
 1071              		.loc 1 285 0
 1072 0044 C268     		ldr	r2, [r0, #12]
 1073 0046 5A60     		str	r2, [r3, #4]
 286:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****     pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 1074              		.loc 1 286 0
 1075 0048 8268     		ldr	r2, [r0, #8]
 1076 004a DA60     		str	r2, [r3, #12]
 287:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 1077              		.loc 1 287 0
 1078 004c 017C     		ldrb	r1, [r0, #16]	@ zero_extendqisi2
 1079 004e 1972     		strb	r1, [r3, #8]
 290:HALLIB/Src/stm32f7xx_hal_flash_ex.c ****   }
 1080              		.loc 1 290 0
 1081 0050 8068     		ldr	r0, [r0, #8]
 1082              	.LVL109:
 1083 0052 FFF7FEFF 		bl	FLASH_Erase_Sector
 1084              	.LVL110:
 293:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** }
 1085              		.loc 1 293 0
 1086 0056 0020     		movs	r0, #0
 1087 0058 08BD     		pop	{r3, pc}
 1088              	.LVL111:
 1089              	.L97:
 252:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 1090              		.loc 1 252 0
 1091 005a 0220     		movs	r0, #2
 1092              	.LVL112:
 294:HALLIB/Src/stm32f7xx_hal_flash_ex.c **** 
 1093              		.loc 1 294 0
 1094 005c 08BD     		pop	{r3, pc}
 1095              	.L100:
 1096 005e 00BF     		.align	2
 1097              	.L99:
 1098 0060 00000000 		.word	pFlash
 1099 0064 003C0240 		.word	1073888256
 1100              		.cfi_endproc
 1101              	.LFE137:
 1103              		.text
 1104              	.Letext0:
 1105              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 1106              		.file 4 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 1107              		.file 5 "Inc/stm32f767xx.h"
 1108              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 1109              		.file 7 "HALLIB/Inc/stm32f7xx_hal_flash.h"
 1110              		.file 8 "HALLIB/Inc/stm32f7xx_hal_flash_ex.h"
 1111              		.file 9 "CORE/core_cm7.h"
ARM GAS  /tmp/ccg5urG3.s 			page 48


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_flash_ex.c
     /tmp/ccg5urG3.s:21     .text.FLASH_MassErase:00000000 $t
     /tmp/ccg5urG3.s:25     .text.FLASH_MassErase:00000000 FLASH_MassErase
     /tmp/ccg5urG3.s:89     .text.FLASH_MassErase:00000048 $d
     /tmp/ccg5urG3.s:96     .text.FLASH_OB_GetWRP:00000000 $t
     /tmp/ccg5urG3.s:100    .text.FLASH_OB_GetWRP:00000000 FLASH_OB_GetWRP
     /tmp/ccg5urG3.s:117    .text.FLASH_OB_GetWRP:0000000c $d
     /tmp/ccg5urG3.s:123    .text.FLASH_OB_GetUser:00000000 $t
     /tmp/ccg5urG3.s:127    .text.FLASH_OB_GetUser:00000000 FLASH_OB_GetUser
     /tmp/ccg5urG3.s:144    .text.FLASH_OB_GetUser:0000000c $d
     /tmp/ccg5urG3.s:150    .text.FLASH_OB_BOR_LevelConfig:00000000 $t
     /tmp/ccg5urG3.s:154    .text.FLASH_OB_BOR_LevelConfig:00000000 FLASH_OB_BOR_LevelConfig
     /tmp/ccg5urG3.s:175    .text.FLASH_OB_BOR_LevelConfig:00000010 $d
     /tmp/ccg5urG3.s:180    .text.FLASH_OB_GetRDP:00000000 $t
     /tmp/ccg5urG3.s:184    .text.FLASH_OB_GetRDP:00000000 FLASH_OB_GetRDP
     /tmp/ccg5urG3.s:220    .text.FLASH_OB_GetRDP:00000020 $d
     /tmp/ccg5urG3.s:225    .text.FLASH_OB_GetBOR:00000000 $t
     /tmp/ccg5urG3.s:229    .text.FLASH_OB_GetBOR:00000000 FLASH_OB_GetBOR
     /tmp/ccg5urG3.s:245    .text.FLASH_OB_GetBOR:0000000c $d
     /tmp/ccg5urG3.s:250    .text.FLASH_OB_GetBootAddress:00000000 $t
     /tmp/ccg5urG3.s:254    .text.FLASH_OB_GetBootAddress:00000000 FLASH_OB_GetBootAddress
     /tmp/ccg5urG3.s:285    .text.FLASH_OB_GetBootAddress:00000014 $d
     /tmp/ccg5urG3.s:290    .text.FLASH_OB_EnableWRP:00000000 $t
     /tmp/ccg5urG3.s:294    .text.FLASH_OB_EnableWRP:00000000 FLASH_OB_EnableWRP
     /tmp/ccg5urG3.s:330    .text.FLASH_OB_EnableWRP:00000020 $d
     /tmp/ccg5urG3.s:335    .text.FLASH_OB_DisableWRP:00000000 $t
     /tmp/ccg5urG3.s:339    .text.FLASH_OB_DisableWRP:00000000 FLASH_OB_DisableWRP
     /tmp/ccg5urG3.s:375    .text.FLASH_OB_DisableWRP:0000001c $d
     /tmp/ccg5urG3.s:380    .text.FLASH_OB_RDP_LevelConfig:00000000 $t
     /tmp/ccg5urG3.s:384    .text.FLASH_OB_RDP_LevelConfig:00000000 FLASH_OB_RDP_LevelConfig
     /tmp/ccg5urG3.s:417    .text.FLASH_OB_RDP_LevelConfig:00000018 $d
     /tmp/ccg5urG3.s:422    .text.FLASH_OB_UserConfig:00000000 $t
     /tmp/ccg5urG3.s:426    .text.FLASH_OB_UserConfig:00000000 FLASH_OB_UserConfig
     /tmp/ccg5urG3.s:489    .text.FLASH_OB_UserConfig:0000003c $d
     /tmp/ccg5urG3.s:495    .text.FLASH_OB_BootAddressConfig:00000000 $t
     /tmp/ccg5urG3.s:499    .text.FLASH_OB_BootAddressConfig:00000000 FLASH_OB_BootAddressConfig
     /tmp/ccg5urG3.s:553    .text.FLASH_OB_BootAddressConfig:00000034 $d
     /tmp/ccg5urG3.s:559    .text.HAL_FLASHEx_OBProgram:00000000 $t
     /tmp/ccg5urG3.s:564    .text.HAL_FLASHEx_OBProgram:00000000 HAL_FLASHEx_OBProgram
     /tmp/ccg5urG3.s:717    .text.HAL_FLASHEx_OBProgram:000000b8 $d
     /tmp/ccg5urG3.s:722    .text.HAL_FLASHEx_OBGetConfig:00000000 $t
     /tmp/ccg5urG3.s:727    .text.HAL_FLASHEx_OBGetConfig:00000000 HAL_FLASHEx_OBGetConfig
     /tmp/ccg5urG3.s:774    .text.FLASH_Erase_Sector:00000000 $t
     /tmp/ccg5urG3.s:779    .text.FLASH_Erase_Sector:00000000 FLASH_Erase_Sector
     /tmp/ccg5urG3.s:868    .text.FLASH_Erase_Sector:0000005c $d
     /tmp/ccg5urG3.s:873    .text.HAL_FLASHEx_Erase:00000000 $t
     /tmp/ccg5urG3.s:878    .text.HAL_FLASHEx_Erase:00000000 HAL_FLASHEx_Erase
     /tmp/ccg5urG3.s:1002   .text.HAL_FLASHEx_Erase:0000008c $d
     /tmp/ccg5urG3.s:1009   .text.HAL_FLASHEx_Erase_IT:00000000 $t
     /tmp/ccg5urG3.s:1014   .text.HAL_FLASHEx_Erase_IT:00000000 HAL_FLASHEx_Erase_IT
     /tmp/ccg5urG3.s:1098   .text.HAL_FLASHEx_Erase_IT:00000060 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
FLASH_WaitForLastOperation
pFlash
ARM GAS  /tmp/ccg5urG3.s 			page 49


