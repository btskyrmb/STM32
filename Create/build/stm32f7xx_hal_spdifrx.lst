ARM GAS  /tmp/ccqWchYQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_spdifrx.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.SPDIFRX_WaitOnFlagUntilTimeout,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	SPDIFRX_WaitOnFlagUntilTimeout:
  26              	.LFB163:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_spdifrx.c"
   1:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @file    stm32f7xx_hal_spdifrx.c
   4:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief   This file provides firmware functions to manage the following 
   6:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *          functionalities of the SPDIFRX audio interface:
   7:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *           + Initialization and Configuration
   8:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *           + Data transfers functions
   9:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *           + DMA transfers management
  10:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *           + Interrupts and flags management 
  11:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   @verbatim
  12:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****  ===============================================================================
  13:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****                   ##### How to use this driver #####
  14:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****  ===============================================================================
  15:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****  [..]
  16:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     The SPDIFRX HAL driver can be used as follow:
  17:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
  18:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     (#) Declare SPDIFRX_HandleTypeDef handle structure.
  19:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     (#) Initialize the SPDIFRX low level resources by implement the HAL_SPDIFRX_MspInit() API:
  20:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (##) Enable the SPDIFRX interface clock.                      
  21:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (##) SPDIFRX pins configuration:
  22:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****             (+++) Enable the clock for the SPDIFRX GPIOs.
  23:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****             (+++) Configure these SPDIFRX pins as alternate function pull-up.
  24:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_SPDIFRX_ReceiveControlFlo
  25:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****             (+++) Configure the SPDIFRX interrupt priority.
  26:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****             (+++) Enable the NVIC SPDIFRX IRQ handle.
  27:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (##) DMA Configuration if you need to use DMA process (HAL_SPDIFRX_ReceiveDataFlow_DMA() an
  28:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****             (+++) Declare a DMA handle structure for the reception of the Data Flow channel.
  29:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****             (+++) Declare a DMA handle structure for the reception of the Control Flow channel.
  30:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****             (+++) Enable the DMAx interface clock.
  31:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****             (+++) Configure the declared DMA handle structure CtrlRx/DataRx with the required param
ARM GAS  /tmp/ccqWchYQ.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****             (+++) Configure the DMA Channel.
  33:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****             (+++) Associate the initialized DMA handle to the SPDIFRX DMA CtrlRx/DataRx handle.
  34:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  35:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****                 DMA CtrlRx/DataRx channel.
  36:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
  37:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    (#) Program the input selection, re-tries number, wait for activity, channel status selection, d
  38:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****        using HAL_SPDIFRX_Init() function.
  39:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
  40:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    -@- The specific SPDIFRX interrupts (RXNE/CSRNE and Error Interrupts) will be managed using the 
  41:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****        __SPDIFRX_ENABLE_IT() and __SPDIFRX_DISABLE_IT() inside the receive process.
  42:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    -@- Make sure that ck_spdif clock is configured. 
  43:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    
  44:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    (#) Three operation modes are available within this driver :
  45:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
  46:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    *** Polling mode for reception operation (for debug purpose) ***
  47:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    ================================================================
  48:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    [..]    
  49:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (+) Receive data flow in blocking mode using HAL_SPDIFRX_ReceiveDataFlow()
  50:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****          (+) Receive control flow of data in blocking mode using HAL_SPDIFRX_ReceiveControlFlow()
  51:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    
  52:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    *** Interrupt mode for reception operation ***
  53:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    =========================================
  54:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    [..]    
  55:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (+) Receive an amount of data (Data Flow) in non blocking mode using HAL_SPDIFRX_ReceiveDataFl
  56:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****          (+) Receive an amount of data (Control Flow) in non blocking mode using HAL_SPDIFRX_Receiv
  57:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (+) At reception end of half transfer HAL_SPDIFRX_RxHalfCpltCallback is executed and user can 
  58:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****          add his own code by customization of function pointer HAL_SPDIFRX_RxHalfCpltCallback 
  59:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (+) At reception end of transfer HAL_SPDIFRX_RxCpltCallback is executed and user can 
  60:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****          add his own code by customization of function pointer HAL_SPDIFRX_RxCpltCallback
  61:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (+) In case of transfer Error, HAL_SPDIFRX_ErrorCallback() function is executed and user can 
  62:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****          add his own code by customization of function pointer HAL_SPDIFRX_ErrorCallback
  63:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
  64:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    *** DMA mode for reception operation ***
  65:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    ========================================
  66:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    [..] 
  67:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (+) Receive an amount of data (Data Flow) in non blocking mode (DMA) using HAL_SPDIFRX_Receive
  68:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****          (+) Receive an amount of data (Control Flow) in non blocking mode (DMA) using HAL_SPDIFRX_
  69:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (+) At reception end of half transfer HAL_SPDIFRX_RxHalfCpltCallback is executed and user can 
  70:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****          add his own code by customization of function pointer HAL_SPDIFRX_RxHalfCpltCallback 
  71:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (+) At reception end of transfer HAL_SPDIFRX_RxCpltCallback is executed and user can 
  72:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****          add his own code by customization of function pointer HAL_SPDIFRX_RxCpltCallback
  73:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (+) In case of transfer Error, HAL_SPDIFRX_ErrorCallback() function is executed and user can 
  74:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****          add his own code by customization of function pointer HAL_SPDIFRX_ErrorCallback
  75:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (+) Stop the DMA Transfer using HAL_SPDIFRX_DMAStop()
  76:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
  77:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    *** SPDIFRX HAL driver macros list ***
  78:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    =============================================
  79:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****    [..]
  80:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      Below the list of most used macros in USART HAL driver.
  81:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       (+) __HAL_SPDIFRX_IDLE: Disable the specified SPDIFRX peripheral (IDEL State)
  82:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       (+) __HAL_SPDIFRX_SYNC: Enable the synchronization state of the specified SPDIFRX peripheral 
  83:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       (+) __HAL_SPDIFRX_RCV: Enable the receive state of the specified SPDIFRX peripheral (RCV Stat
  84:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       (+) __HAL_SPDIFRX_ENABLE_IT : Enable the specified SPDIFRX interrupts
  85:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       (+) __HAL_SPDIFRX_DISABLE_IT : Disable the specified SPDIFRX interrupts
  86:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       (+) __HAL_SPDIFRX_GET_FLAG: Check whether the specified SPDIFRX flag is set or not.
  87:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
  88:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     [..]
ARM GAS  /tmp/ccqWchYQ.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       (@) You can refer to the SPDIFRX HAL driver header file for more useful macros
  90:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
  91:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   @endverbatim
  92:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   ******************************************************************************
  93:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @attention
  94:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *
  95:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  96:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *
  97:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  98:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * are permitted provided that the following conditions are met:
  99:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 100:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *      this list of conditions and the following disclaimer.
 101:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 102:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *      this list of conditions and the following disclaimer in the documentation
 103:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *      and/or other materials provided with the distribution.
 104:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 105:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *      may be used to endorse or promote products derived from this software
 106:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *      without specific prior written permission.
 107:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *
 108:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 109:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 110:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 111:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 112:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 113:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 114:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 115:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 116:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 117:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 118:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *
 119:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   ******************************************************************************
 120:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */ 
 121:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 122:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /* Includes ------------------------------------------------------------------*/
 123:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** #include "stm32f7xx_hal.h"
 124:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 125:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /** @addtogroup STM32F7xx_HAL_Driver
 126:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @{
 127:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 128:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /** @defgroup SPDIFRX SPDIFRX
 129:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** * @brief SPDIFRX HAL module driver
 130:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** * @{
 131:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** */
 132:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 133:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** #ifdef HAL_SPDIFRX_MODULE_ENABLED
 134:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** #if defined (SPDIFRX)
 135:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 136:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /* Private typedef -----------------------------------------------------------*/
 137:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /* Private define ------------------------------------------------------------*/
 138:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** #define SPDIFRX_TIMEOUT_VALUE  0xFFFF
 139:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 140:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /* Private macro -------------------------------------------------------------*/
 141:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /* Private variables ---------------------------------------------------------*/
 142:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /* Private function prototypes -----------------------------------------------*/
 143:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /** @addtogroup SPDIFRX_Private_Functions
 144:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @{
 145:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
ARM GAS  /tmp/ccqWchYQ.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void  SPDIFRX_DMARxCplt(DMA_HandleTypeDef *hdma);
 147:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void  SPDIFRX_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 148:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void  SPDIFRX_DMACxCplt(DMA_HandleTypeDef *hdma);
 149:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void  SPDIFRX_DMACxHalfCplt(DMA_HandleTypeDef *hdma);
 150:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void  SPDIFRX_DMAError(DMA_HandleTypeDef *hdma);
 151:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void  SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif);
 152:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void  SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif);
 153:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static HAL_StatusTypeDef  SPDIFRX_WaitOnFlagUntilTimeout(SPDIFRX_HandleTypeDef *hspdif, uint32_t Fl
 154:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 155:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @}
 156:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 157:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /* Exported functions ---------------------------------------------------------*/
 158:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 159:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /** @defgroup SPDIFRX_Exported_Functions SPDIFRX Exported Functions
 160:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @{
 161:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 162:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 163:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /** @defgroup  SPDIFRX_Exported_Functions_Group1 Initialization and de-initialization functions 
 164:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *  @brief    Initialization and Configuration functions 
 165:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *
 166:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   @verbatim    
 167:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   ===============================================================================
 168:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   ##### Initialization and de-initialization functions #####
 169:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   ===============================================================================
 170:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   [..]  This subsection provides a set of functions allowing to initialize and 
 171:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   de-initialize the SPDIFRX peripheral:
 172:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 173:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (+) User must Implement HAL_SPDIFRX_MspInit() function in which he configures 
 174:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   all related peripherals resources (CLOCK, GPIO, DMA, IT and NVIC ).
 175:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 176:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (+) Call the function HAL_SPDIFRX_Init() to configure the SPDIFRX peripheral with 
 177:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   the selected configuration:
 178:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (++) Input Selection (IN0, IN1,...)
 179:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (++) Maximum allowed re-tries during synchronization phase
 180:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (++) Wait for activity on SPDIF selected input
 181:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (++) Channel status selection (from channel A or B)
 182:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (++) Data format (LSB, MSB, ...)
 183:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (++) Stereo mode
 184:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (++) User bits masking (PT,C,U,V,...)
 185:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 186:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (+) Call the function HAL_SPDIFRX_DeInit() to restore the default configuration 
 187:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   of the selected SPDIFRXx peripheral. 
 188:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   @endverbatim
 189:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @{
 190:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 191:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 192:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 193:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Initializes the SPDIFRX according to the specified parameters 
 194:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *        in the SPDIFRX_InitTypeDef and create the associated handle.
 195:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 196:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL status
 197:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 198:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
 199:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 200:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tmpreg = 0;
 201:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 202:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Check the SPDIFRX handle allocation */
ARM GAS  /tmp/ccqWchYQ.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if(hspdif == NULL)
 204:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 205:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_ERROR;
 206:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 207:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 208:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Check the SPDIFRX parameters */
 209:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_STEREO_MODE(hspdif->Init.StereoMode));
 210:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_SPDIFRX_INPUT_SELECT(hspdif->Init.InputSelection));
 211:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_SPDIFRX_MAX_RETRIES(hspdif->Init.Retries));
 212:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_SPDIFRX_WAIT_FOR_ACTIVITY(hspdif->Init.WaitForActivity));
 213:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_SPDIFRX_CHANNEL(hspdif->Init.ChannelSelection));
 214:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_SPDIFRX_DATA_FORMAT(hspdif->Init.DataFormat));
 215:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_PREAMBLE_TYPE_MASK(hspdif->Init.PreambleTypeMask));
 216:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_CHANNEL_STATUS_MASK(hspdif->Init.ChannelStatusMask));
 217:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_VALIDITY_MASK(hspdif->Init.ValidityBitMask));
 218:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_PARITY_ERROR_MASK(hspdif->Init.ParityErrorMask));
 219:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 220:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 221:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 222:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Allocate lock resource and initialize it */
 223:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->Lock = HAL_UNLOCKED;
 224:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 225:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     HAL_SPDIFRX_MspInit(hspdif);
 226:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 227:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 228:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* SPDIFRX peripheral state is BUSY*/
 229:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->State = HAL_SPDIFRX_STATE_BUSY;  
 230:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 231:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Disable SPDIFRX interface (IDLE State) */
 232:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   __HAL_SPDIFRX_IDLE(hspdif);
 233:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 234:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Reset the old SPDIFRX CR configuration */
 235:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   tmpreg = hspdif->Instance->CR;
 236:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 237:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   tmpreg &= ~((uint16_t) SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 238:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****               SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
 239:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****               SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA | SPDIFRX_CR_INSEL); 
 240:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 241:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Sets the new configuration of the SPDIFRX peripheral */
 242:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   tmpreg |= ((uint16_t) hspdif->Init.StereoMode |
 243:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.InputSelection |
 244:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.Retries |
 245:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.WaitForActivity |
 246:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ChannelSelection |
 247:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.DataFormat |
 248:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.PreambleTypeMask |
 249:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ChannelStatusMask |
 250:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ValidityBitMask |
 251:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ParityErrorMask);
 252:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 253:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->Instance->CR = tmpreg;  
 254:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 255:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 256:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 257:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* SPDIFRX peripheral state is READY*/
 258:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->State = HAL_SPDIFRX_STATE_READY;
 259:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
ARM GAS  /tmp/ccqWchYQ.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   return HAL_OK;
 261:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 262:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 263:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 264:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief DeInitializes the SPDIFRX peripheral 
 265:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 266:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL status
 267:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 268:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** HAL_StatusTypeDef HAL_SPDIFRX_DeInit(SPDIFRX_HandleTypeDef *hspdif)
 269:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 270:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Check the SPDIFRX handle allocation */
 271:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if(hspdif == NULL)
 272:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 273:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_ERROR;
 274:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 275:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 276:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Check the parameters */
 277:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_SPDIFRX_ALL_INSTANCE(hspdif->Instance));
 278:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 279:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 280:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 281:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Disable SPDIFRX interface (IDLE state) */
 282:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   __HAL_SPDIFRX_IDLE(hspdif);
 283:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 284:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
 285:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   HAL_SPDIFRX_MspDeInit(hspdif);
 286:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 287:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 288:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 289:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* SPDIFRX peripheral state is RESET*/
 290:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->State = HAL_SPDIFRX_STATE_RESET;
 291:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 292:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Release Lock */
 293:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   __HAL_UNLOCK(hspdif);
 294:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 295:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   return HAL_OK;
 296:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 297:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 298:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 299:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief SPDIFRX MSP Init
 300:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 301:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
 302:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 303:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** __weak void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef *hspdif)
 304:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 305:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 306:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   UNUSED(hspdif);
 307:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 308:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 309:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   the HAL_SPDIFRX_MspInit could be implemented in the user file
 310:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */ 
 311:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 312:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 313:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 314:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief SPDIFRX MSP DeInit
 315:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 316:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
ARM GAS  /tmp/ccqWchYQ.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 318:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** __weak void HAL_SPDIFRX_MspDeInit(SPDIFRX_HandleTypeDef *hspdif)
 319:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 320:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 321:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   UNUSED(hspdif);
 322:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 323:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 324:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   the HAL_SPDIFRX_MspDeInit could be implemented in the user file
 325:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */ 
 326:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 327:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 328:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 329:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Sets the SPDIFRX  dtat format according to the specified parameters 
 330:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *        in the SPDIFRX_InitTypeDef.
 331:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 332:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param sDataFormat SPDIFRX data format
 333:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL status
 334:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 335:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** HAL_StatusTypeDef HAL_SPDIFRX_SetDataFormat(SPDIFRX_HandleTypeDef *hspdif, SPDIFRX_SetDataFormatTyp
 336:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 337:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tmpreg = 0;
 338:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 339:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Check the SPDIFRX handle allocation */
 340:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if(hspdif == NULL)
 341:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 342:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_ERROR;
 343:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 344:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 345:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Check the SPDIFRX parameters */
 346:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_STEREO_MODE(sDataFormat.StereoMode));
 347:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_SPDIFRX_DATA_FORMAT(sDataFormat.DataFormat));
 348:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_PREAMBLE_TYPE_MASK(sDataFormat.PreambleTypeMask));
 349:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_CHANNEL_STATUS_MASK(sDataFormat.ChannelStatusMask));
 350:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_VALIDITY_MASK(sDataFormat.ValidityBitMask));
 351:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   assert_param(IS_PARITY_ERROR_MASK(sDataFormat.ParityErrorMask));
 352:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 353:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Reset the old SPDIFRX CR configuration */
 354:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   tmpreg = hspdif->Instance->CR;
 355:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 356:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if(((tmpreg & SPDIFRX_STATE_RCV) == SPDIFRX_STATE_RCV) &&
 357:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (((tmpreg & SPDIFRX_CR_DRFMT) != sDataFormat.DataFormat) ||
 358:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       ((tmpreg & SPDIFRX_CR_RXSTEO) != sDataFormat.StereoMode)))  
 359:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 360:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_ERROR;    
 361:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }  
 362:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 363:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   tmpreg &= ~((uint16_t) SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 364:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****               SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK);   
 365:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 366:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Sets the new configuration of the SPDIFRX peripheral */
 367:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   tmpreg |= ((uint16_t) sDataFormat.StereoMode |
 368:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.DataFormat |
 369:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.PreambleTypeMask |
 370:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.ChannelStatusMask |
 371:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.ValidityBitMask |
 372:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.ParityErrorMask);
 373:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
ARM GAS  /tmp/ccqWchYQ.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->Instance->CR = tmpreg;  
 375:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 376:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   return HAL_OK;
 377:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 378:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 379:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 380:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @}
 381:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 382:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 383:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /** @defgroup SPDIFRX_Exported_Functions_Group2 IO operation functions 
 384:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *  @brief Data transfers functions 
 385:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *
 386:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** @verbatim   
 387:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** ===============================================================================
 388:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****                      ##### IO operation functions #####
 389:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** ===============================================================================  
 390:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     [..]
 391:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     This subsection provides a set of functions allowing to manage the SPDIFRX data 
 392:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     transfers.
 393:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 394:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     (#) There is two mode of transfer:
 395:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (++) Blocking mode : The communication is performed in the polling mode. 
 396:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              The status of all data processing is returned by the same function 
 397:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              after finishing transfer.  
 398:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (++) No-Blocking mode : The communication is performed using Interrupts 
 399:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              or DMA. These functions return the status of the transfer start-up.
 400:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              The end of the data processing will be indicated through the 
 401:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              dedicated SPDIFRX IRQ when using Interrupt mode or the DMA IRQ when 
 402:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              using DMA mode.
 403:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 404:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     (#) Blocking mode functions are :
 405:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (++) HAL_SPDIFRX_ReceiveDataFlow()
 406:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (++) HAL_SPDIFRX_ReceiveControlFlow()
 407:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****                 (+@) Do not use blocking mode to receive both control and data flow at the same tim
 408:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 409:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     (#) No-Blocking mode functions with Interrupt are :
 410:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (++) HAL_SPDIFRX_ReceiveControlFlow_IT()
 411:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (++) HAL_SPDIFRX_ReceiveDataFlow_IT()
 412:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 413:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     (#) No-Blocking mode functions with DMA are :
 414:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (++) HAL_SPDIFRX_ReceiveControlFlow_DMA()
 415:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (++) HAL_SPDIFRX_ReceiveDataFlow_DMA()
 416:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 417:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     (#) A set of Transfer Complete Callbacks are provided in No_Blocking mode:
 418:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (++) HAL_SPDIFRX_RxCpltCallback()
 419:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         (++) HAL_SPDIFRX_ErrorCallback()
 420:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 421:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** @endverbatim
 422:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** * @{
 423:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** */
 424:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 425:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 426:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 427:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief  Receives an amount of data (Data Flow) in blocking mode. 
 428:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param  hspdif pointer to SPDIFRX_HandleTypeDef structure that contains
 429:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *                 the configuration information for SPDIFRX module.
 430:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param  pData Pointer to data buffer
ARM GAS  /tmp/ccqWchYQ.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param  Size Amount of data to be received
 432:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param  Timeout Timeout duration
 433:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL status
 434:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 435:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** HAL_StatusTypeDef HAL_SPDIFRX_ReceiveDataFlow(SPDIFRX_HandleTypeDef *hspdif, uint32_t *pData, uint1
 436:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 437:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 438:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 439:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((pData == NULL ) || (Size == 0U)) 
 440:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 441:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return  HAL_ERROR;
 442:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 443:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 444:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if(hspdif->State == HAL_SPDIFRX_STATE_READY)
 445:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   { 
 446:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Locked */
 447:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_LOCK(hspdif);
 448:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 449:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 450:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 451:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Start synchronisation */
 452:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_SYNC(hspdif);
 453:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 454:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Get tick */ 
 455:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     tickstart = HAL_GetTick();
 456:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 457:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Wait until SYNCD flag is set */
 458:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     if(SPDIFRX_WaitOnFlagUntilTimeout(hspdif, SPDIFRX_FLAG_SYNCD, RESET, Timeout, tickstart) != HAL
 459:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     { 
 460:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       return HAL_TIMEOUT;
 461:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }  
 462:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 463:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Start reception */    
 464:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_RCV(hspdif);
 465:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 466:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Receive data flow */
 467:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     while(Size > 0U)
 468:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {     
 469:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Get tick */ 
 470:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       tickstart = HAL_GetTick();
 471:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 472:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Wait until RXNE flag is set */
 473:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       if(SPDIFRX_WaitOnFlagUntilTimeout(hspdif, SPDIFRX_FLAG_RXNE, RESET, Timeout, tickstart) != HA
 474:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
 475:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         return HAL_TIMEOUT;
 476:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 477:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 478:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       (*pData++) = hspdif->Instance->DR;
 479:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       Size--; 
 480:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }      
 481:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 482:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* SPDIFRX ready */
 483:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_READY;
 484:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 485:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Unlocked */
 486:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_UNLOCK(hspdif);
 487:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
ARM GAS  /tmp/ccqWchYQ.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_OK;
 489:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 490:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   else
 491:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 492:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_BUSY;
 493:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 494:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 495:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 496:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 497:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief  Receives an amount of data (Control Flow) in blocking mode. 
 498:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param  hspdif pointer to a SPDIFRX_HandleTypeDef structure that contains
 499:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *                 the configuration information for SPDIFRX module.
 500:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param  pData Pointer to data buffer
 501:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param  Size Amount of data to be received
 502:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param  Timeout Timeout duration
 503:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL status
 504:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 505:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** HAL_StatusTypeDef HAL_SPDIFRX_ReceiveControlFlow(SPDIFRX_HandleTypeDef *hspdif, uint32_t *pData, ui
 506:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 507:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 508:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 509:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((pData == NULL ) || (Size == 0U)) 
 510:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 511:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return  HAL_ERROR;
 512:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 513:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 514:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if(hspdif->State == HAL_SPDIFRX_STATE_READY)
 515:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   { 
 516:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Locked */
 517:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_LOCK(hspdif);
 518:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 519:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 520:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 521:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Start synchronization */
 522:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_SYNC(hspdif);
 523:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 524:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Get tick */ 
 525:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     tickstart = HAL_GetTick();
 526:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 527:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Wait until SYNCD flag is set */
 528:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     if(SPDIFRX_WaitOnFlagUntilTimeout(hspdif, SPDIFRX_FLAG_SYNCD, RESET, Timeout, tickstart) != HAL
 529:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     { 
 530:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       return HAL_TIMEOUT;
 531:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }  
 532:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 533:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Start reception */    
 534:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_RCV(hspdif);
 535:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 536:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Receive control flow */
 537:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     while(Size > 0U)
 538:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {      
 539:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Get tick */ 
 540:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       tickstart = HAL_GetTick();
 541:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 542:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Wait until CSRNE flag is set */
 543:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       if(SPDIFRX_WaitOnFlagUntilTimeout(hspdif, SPDIFRX_FLAG_CSRNE, RESET, Timeout, tickstart) != H
 544:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
ARM GAS  /tmp/ccqWchYQ.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         return HAL_TIMEOUT;
 546:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 547:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 548:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       (*pData++) = hspdif->Instance->CSR;
 549:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       Size--; 
 550:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }      
 551:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 552:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* SPDIFRX ready */
 553:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_READY;
 554:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 555:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Unlocked */
 556:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_UNLOCK(hspdif);
 557:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 558:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_OK;
 559:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 560:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   else
 561:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 562:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_BUSY;
 563:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 564:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 565:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 566:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 567:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Receive an amount of data (Data Flow) in non-blocking mode with Interrupt
 568:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 569:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param pData a 32-bit pointer to the Receive data buffer.
 570:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param Size number of data sample to be received .
 571:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL status
 572:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 573:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** HAL_StatusTypeDef HAL_SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif, uint32_t *pData, ui
 574:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 575:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 576:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 577:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((hspdif->State == HAL_SPDIFRX_STATE_READY) || (hspdif->State == HAL_SPDIFRX_STATE_BUSY_CX))
 578:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 579:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     if((pData == NULL) || (Size == 0U)) 
 580:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 581:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       return HAL_ERROR;
 582:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
 583:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 584:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Locked */
 585:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_LOCK(hspdif);
 586:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 587:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->pRxBuffPtr = pData;
 588:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->RxXferSize = Size;
 589:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->RxXferCount = Size;
 590:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 591:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 592:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 593:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Check if a receive process is ongoing or not */
 594:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_BUSY_RX;
 595:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 596:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 597:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Enable the SPDIFRX  PE Error Interrupt */
 598:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_ENABLE_IT(hspdif, SPDIFRX_IT_PERRIE);
 599:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 600:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Enable the SPDIFRX  OVR Error Interrupt */
 601:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_ENABLE_IT(hspdif, SPDIFRX_IT_OVRIE);
ARM GAS  /tmp/ccqWchYQ.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 603:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Unlocked */
 604:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_UNLOCK(hspdif);
 605:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 606:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Enable the SPDIFRX RXNE interrupt */
 607:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_ENABLE_IT(hspdif, SPDIFRX_IT_RXNE);
 608:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 609:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     if (((SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != SPDIFRX_STATE_SYNC) || ((SPDIFRX->CR & SPDIFRX_CR_SP
 610:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 611:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Start synchronization */
 612:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       __HAL_SPDIFRX_SYNC(hspdif);
 613:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 614:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Get tick */ 
 615:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       tickstart = HAL_GetTick();
 616:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 617:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Wait until SYNCD flag is set */
 618:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       if(SPDIFRX_WaitOnFlagUntilTimeout(hspdif, SPDIFRX_FLAG_SYNCD, RESET, SPDIFRX_TIMEOUT_VALUE, t
 619:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
 620:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         return HAL_TIMEOUT;
 621:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 622:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 623:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Start reception */    
 624:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       __HAL_SPDIFRX_RCV(hspdif);
 625:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
 626:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 627:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_OK;
 628:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 629:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   else
 630:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 631:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_BUSY; 
 632:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 633:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 634:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 635:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 636:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Receive an amount of data (Control Flow) with Interrupt
 637:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 638:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param pData a 32-bit pointer to the Receive data buffer.
 639:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param Size number of data sample (Control Flow) to be received :
 640:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL status
 641:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 642:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** HAL_StatusTypeDef HAL_SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif, uint32_t *pData,
 643:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 644:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 645:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 646:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((hspdif->State == HAL_SPDIFRX_STATE_READY) || (hspdif->State == HAL_SPDIFRX_STATE_BUSY_RX))
 647:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 648:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     if((pData == NULL ) || (Size == 0U)) 
 649:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 650:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       return HAL_ERROR;
 651:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
 652:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 653:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Locked */
 654:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_LOCK(hspdif);
 655:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 656:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->pCsBuffPtr = pData;
 657:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->CsXferSize = Size;
 658:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->CsXferCount = Size;
ARM GAS  /tmp/ccqWchYQ.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 660:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 661:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 662:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Check if a receive process is ongoing or not */
 663:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_BUSY_CX;
 664:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 665:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 666:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Enable the SPDIFRX PE Error Interrupt */
 667:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_ENABLE_IT(hspdif, SPDIFRX_IT_PERRIE);
 668:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 669:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Enable the SPDIFRX OVR Error Interrupt */
 670:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_ENABLE_IT(hspdif, SPDIFRX_IT_OVRIE);
 671:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 672:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Unlocked */
 673:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_UNLOCK(hspdif);
 674:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 675:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Enable the SPDIFRX CSRNE interrupt */
 676:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_ENABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 677:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 678:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     if (((SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != SPDIFRX_STATE_SYNC) || ((SPDIFRX->CR & SPDIFRX_CR_SP
 679:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 680:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Start synchronization */
 681:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       __HAL_SPDIFRX_SYNC(hspdif);
 682:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 683:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Get tick */ 
 684:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       tickstart = HAL_GetTick();
 685:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 686:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Wait until SYNCD flag is set */
 687:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       if(SPDIFRX_WaitOnFlagUntilTimeout(hspdif, SPDIFRX_FLAG_SYNCD, RESET, SPDIFRX_TIMEOUT_VALUE, t
 688:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
 689:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         return HAL_TIMEOUT;
 690:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 691:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 692:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Start reception */    
 693:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       __HAL_SPDIFRX_RCV(hspdif);
 694:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
 695:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 696:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_OK;
 697:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 698:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   else
 699:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 700:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_BUSY; 
 701:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 702:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 703:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 704:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 705:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Receive an amount of data (Data Flow) mode with DMA 
 706:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 707:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param pData a 32-bit pointer to the Receive data buffer.
 708:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param Size number of data sample to be received :
 709:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL status
 710:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 711:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** HAL_StatusTypeDef HAL_SPDIFRX_ReceiveDataFlow_DMA(SPDIFRX_HandleTypeDef *hspdif, uint32_t *pData, u
 712:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 713:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 714:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 715:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((pData == NULL) || (Size == 0U)) 
ARM GAS  /tmp/ccqWchYQ.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 717:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return  HAL_ERROR;                                    
 718:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   } 
 719:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 720:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((hspdif->State == HAL_SPDIFRX_STATE_READY) || (hspdif->State == HAL_SPDIFRX_STATE_BUSY_CX))
 721:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {   
 722:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->pRxBuffPtr = pData;
 723:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->RxXferSize = Size;
 724:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->RxXferCount = Size;
 725:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 726:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Locked */
 727:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_LOCK(hspdif);
 728:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 729:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 730:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_BUSY_RX;
 731:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 732:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Set the SPDIFRX Rx DMA Half transfer complete callback */
 733:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->hdmaDrRx->XferHalfCpltCallback = SPDIFRX_DMARxHalfCplt;
 734:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 735:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Set the SPDIFRX Rx DMA transfer complete callback */
 736:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->hdmaDrRx->XferCpltCallback = SPDIFRX_DMARxCplt;
 737:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 738:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Set the DMA error callback */
 739:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->hdmaDrRx->XferErrorCallback = SPDIFRX_DMAError;
 740:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 741:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Enable the DMA request */
 742:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     HAL_DMA_Start_IT(hspdif->hdmaDrRx, (uint32_t)&hspdif->Instance->DR, (uint32_t)hspdif->pRxBuffPt
 743:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 744:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Enable RXDMAEN bit in SPDIFRX CR register for data flow reception*/
 745:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->Instance->CR |= SPDIFRX_CR_RXDMAEN;
 746:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 747:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     if (((SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != SPDIFRX_STATE_SYNC) || ((SPDIFRX->CR & SPDIFRX_CR_SP
 748:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 749:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Start synchronization */
 750:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       __HAL_SPDIFRX_SYNC(hspdif);
 751:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 752:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Get tick */ 
 753:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       tickstart = HAL_GetTick();
 754:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 755:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Wait until SYNCD flag is set */
 756:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       if(SPDIFRX_WaitOnFlagUntilTimeout(hspdif, SPDIFRX_FLAG_SYNCD, RESET, SPDIFRX_TIMEOUT_VALUE, t
 757:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
 758:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         return HAL_TIMEOUT;
 759:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 760:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 761:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Start reception */    
 762:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       __HAL_SPDIFRX_RCV(hspdif);
 763:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
 764:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 765:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Unlocked */
 766:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_UNLOCK(hspdif);
 767:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 768:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_OK;
 769:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 770:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   else
 771:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 772:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_BUSY; 
ARM GAS  /tmp/ccqWchYQ.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 774:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 775:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 776:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 777:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Receive an amount of data (Control Flow) with DMA 
 778:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 779:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param pData a 32-bit pointer to the Receive data buffer.
 780:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param Size number of data (Control Flow) sample to be received :
 781:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL status
 782:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 783:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** HAL_StatusTypeDef HAL_SPDIFRX_ReceiveControlFlow_DMA(SPDIFRX_HandleTypeDef *hspdif, uint32_t *pData
 784:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 785:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 786:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 787:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((pData == NULL) || (Size == 0U)) 
 788:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 789:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return  HAL_ERROR;                                    
 790:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   } 
 791:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 792:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((hspdif->State == HAL_SPDIFRX_STATE_READY) || (hspdif->State == HAL_SPDIFRX_STATE_BUSY_RX))
 793:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {    
 794:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->pCsBuffPtr = pData;
 795:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->CsXferSize = Size;
 796:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->CsXferCount = Size;
 797:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 798:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Locked */
 799:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_LOCK(hspdif);
 800:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 801:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 802:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_BUSY_CX;
 803:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 804:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Set the SPDIFRX Rx DMA Half transfer complete callback */
 805:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->hdmaCsRx->XferHalfCpltCallback = SPDIFRX_DMACxHalfCplt;
 806:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 807:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Set the SPDIFRX Rx DMA transfer complete callback */
 808:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->hdmaCsRx->XferCpltCallback = SPDIFRX_DMACxCplt;
 809:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 810:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Set the DMA error callback */
 811:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->hdmaCsRx->XferErrorCallback = SPDIFRX_DMAError;
 812:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 813:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Enable the DMA request */
 814:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     HAL_DMA_Start_IT(hspdif->hdmaCsRx, (uint32_t)&hspdif->Instance->CSR, (uint32_t)hspdif->pCsBuffP
 815:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 816:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Enable CBDMAEN bit in SPDIFRX CR register for control flow reception*/
 817:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->Instance->CR |= SPDIFRX_CR_CBDMAEN;
 818:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 819:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     if (((SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != SPDIFRX_STATE_SYNC) || ((SPDIFRX->CR & SPDIFRX_CR_SP
 820:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 821:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Start synchronization */
 822:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       __HAL_SPDIFRX_SYNC(hspdif);
 823:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 824:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Get tick */ 
 825:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       tickstart = HAL_GetTick();
 826:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 827:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Wait until SYNCD flag is set */
 828:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       if(SPDIFRX_WaitOnFlagUntilTimeout(hspdif, SPDIFRX_FLAG_SYNCD, RESET, SPDIFRX_TIMEOUT_VALUE, t
 829:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
ARM GAS  /tmp/ccqWchYQ.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         return HAL_TIMEOUT;
 831:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 832:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 833:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Start reception */    
 834:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       __HAL_SPDIFRX_RCV(hspdif);
 835:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
 836:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 837:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Unlocked */
 838:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_UNLOCK(hspdif);
 839:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 840:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_OK;
 841:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 842:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   else
 843:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 844:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     return HAL_BUSY; 
 845:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 846:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 847:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 848:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 849:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief stop the audio stream receive from the Media.
 850:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 851:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
 852:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 853:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** HAL_StatusTypeDef HAL_SPDIFRX_DMAStop(SPDIFRX_HandleTypeDef *hspdif)
 854:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 855:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Process Locked */
 856:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   __HAL_LOCK(hspdif);
 857:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 858:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Disable the SPDIFRX DMA requests */
 859:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_RXDMAEN);
 860:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_CBDMAEN);
 861:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 862:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Disable the SPDIFRX DMA channel */
 863:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   __HAL_DMA_DISABLE(hspdif->hdmaDrRx);
 864:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   __HAL_DMA_DISABLE(hspdif->hdmaCsRx);
 865:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 866:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Disable SPDIFRX peripheral */
 867:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   __HAL_SPDIFRX_IDLE(hspdif);
 868:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 869:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->State = HAL_SPDIFRX_STATE_READY;
 870:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 871:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Process Unlocked */
 872:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   __HAL_UNLOCK(hspdif);
 873:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 874:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   return HAL_OK;
 875:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 876:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 877:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 878:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief  This function handles SPDIFRX interrupt request.
 879:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param  hspdif SPDIFRX handle
 880:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL status
 881:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 882:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** void HAL_SPDIFRX_IRQHandler(SPDIFRX_HandleTypeDef *hspdif)
 883:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {  
 884:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* SPDIFRX in mode Data Flow Reception ------------------------------------------------*/
 885:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((__HAL_SPDIFRX_GET_FLAG(hspdif, SPDIFRX_FLAG_RXNE) != RESET) && (__HAL_SPDIFRX_GET_IT_SOURCE(h
 886:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
ARM GAS  /tmp/ccqWchYQ.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_RXNE);
 888:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     SPDIFRX_ReceiveDataFlow_IT(hspdif);
 889:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 890:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 891:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* SPDIFRX in mode Control Flow Reception ------------------------------------------------*/
 892:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((__HAL_SPDIFRX_GET_FLAG(hspdif, SPDIFRX_FLAG_CSRNE) != RESET) && (__HAL_SPDIFRX_GET_IT_SOURCE(
 893:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 894:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_CSRNE);
 895:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     SPDIFRX_ReceiveControlFlow_IT(hspdif);
 896:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 897:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 898:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* SPDIFRX Overrun error interrupt occurred ---------------------------------*/
 899:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((__HAL_SPDIFRX_GET_FLAG(hspdif, SPDIFRX_FLAG_OVR) != RESET) && (__HAL_SPDIFRX_GET_IT_SOURCE(hs
 900:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 901:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_FLAG_OVR);
 902:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 903:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Change the SPDIFRX error code */
 904:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_OVR;
 905:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 906:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* the transfer is not stopped */
 907:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     HAL_SPDIFRX_ErrorCallback(hspdif);
 908:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   } 
 909:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 910:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* SPDIFRX Parity error interrupt occurred ---------------------------------*/
 911:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((__HAL_SPDIFRX_GET_FLAG(hspdif, SPDIFRX_FLAG_PERR) != RESET) && (__HAL_SPDIFRX_GET_IT_SOURCE(h
 912:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 913:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_FLAG_PERR);
 914:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 915:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Change the SPDIFRX error code */
 916:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_PE;
 917:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 918:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* the transfer is not stopped */
 919:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     HAL_SPDIFRX_ErrorCallback(hspdif);
 920:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   } 
 921:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 922:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 923:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 924:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Rx Transfer (Data flow) half completed callbacks
 925:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 926:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
 927:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 928:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** __weak void HAL_SPDIFRX_RxHalfCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
 929:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 930:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 931:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   UNUSED(hspdif);
 932:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 933:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 934:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
 935:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 936:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 937:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 938:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 939:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Rx Transfer (Data flow) completed callbacks
 940:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 941:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
 942:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 943:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** __weak void HAL_SPDIFRX_RxCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
ARM GAS  /tmp/ccqWchYQ.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 945:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 946:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   UNUSED(hspdif);
 947:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 948:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 949:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
 950:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 951:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 952:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 953:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 954:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Rx (Control flow) Transfer half completed callbacks
 955:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 956:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
 957:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 958:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** __weak void HAL_SPDIFRX_CxHalfCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
 959:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 960:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 961:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   UNUSED(hspdif);
 962:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 963:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 964:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
 965:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 966:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 967:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 968:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 969:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Rx Transfer (Control flow) completed callbacks
 970:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 971:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
 972:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 973:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** __weak void HAL_SPDIFRX_CxCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
 974:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 975:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 976:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   UNUSED(hspdif);
 977:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 978:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 979:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
 980:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 981:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 982:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 983:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 984:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief SPDIFRX error callbacks
 985:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
 986:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
 987:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
 988:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** __weak void HAL_SPDIFRX_ErrorCallback(SPDIFRX_HandleTypeDef *hspdif)
 989:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
 990:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 991:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   UNUSED(hspdif);
 992:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 993:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 994:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   the HAL_SPDIFRX_ErrorCallback could be implemented in the user file
 995:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */ 
 996:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 997:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 998:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
 999:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @}
1000:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
ARM GAS  /tmp/ccqWchYQ.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1002:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /** @defgroup SPDIFRX_Exported_Functions_Group3 Peripheral State and Errors functions 
1003:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *  @brief   Peripheral State functions 
1004:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   *
1005:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** @verbatim   
1006:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** ===============================================================================
1007:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** ##### Peripheral State and Errors functions #####
1008:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** ===============================================================================  
1009:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** [..]
1010:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** This subsection permit to get in run-time the status of the peripheral 
1011:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** and the data flow.
1012:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1013:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** @endverbatim
1014:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @{
1015:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
1016:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1017:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
1018:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief  Return the SPDIFRX state
1019:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param  hspdif  SPDIFRX handle
1020:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL state
1021:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
1022:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** HAL_SPDIFRX_StateTypeDef HAL_SPDIFRX_GetState(SPDIFRX_HandleTypeDef *hspdif)
1023:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
1024:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   return hspdif->State;
1025:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
1026:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1027:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
1028:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief  Return the SPDIFRX error code
1029:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param  hspdif  SPDIFRX handle
1030:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval SPDIFRX Error Code
1031:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
1032:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** uint32_t HAL_SPDIFRX_GetError(SPDIFRX_HandleTypeDef *hspdif)
1033:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
1034:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   return hspdif->ErrorCode;
1035:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
1036:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1037:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
1038:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @}
1039:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */  
1040:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1041:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
1042:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief DMA SPDIFRX receive process (Data flow) complete callback 
1043:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hdma  DMA handle
1044:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
1045:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
1046:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void SPDIFRX_DMARxCplt(DMA_HandleTypeDef *hdma)
1047:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
1048:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1049:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
1050:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Disable Rx DMA Request */
1051:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
1052:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
1053:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_RXDMAEN);
1054:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->RxXferCount = 0;
1055:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_READY; 
1056:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
1057:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   HAL_SPDIFRX_RxCpltCallback(hspdif); 
ARM GAS  /tmp/ccqWchYQ.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
1059:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1060:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
1061:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief DMA SPDIFRX receive process (Data flow) half complete callback 
1062:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hdma  DMA handle
1063:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
1064:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
1065:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void SPDIFRX_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
1066:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
1067:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = (SPDIFRX_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
1068:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
1069:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   HAL_SPDIFRX_RxHalfCpltCallback(hspdif); 
1070:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
1071:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1072:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1073:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
1074:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief DMA SPDIFRX receive process (Control flow) complete callback 
1075:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hdma  DMA handle
1076:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
1077:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
1078:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void SPDIFRX_DMACxCplt(DMA_HandleTypeDef *hdma)
1079:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
1080:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1081:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
1082:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Disable Cb DMA Request */
1083:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_CBDMAEN);
1084:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->CsXferCount = 0;
1085:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
1086:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->State = HAL_SPDIFRX_STATE_READY; 
1087:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   HAL_SPDIFRX_CxCpltCallback(hspdif); 
1088:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
1089:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1090:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
1091:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief DMA SPDIFRX receive process (Control flow) half complete callback 
1092:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hdma  DMA handle
1093:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
1094:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
1095:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void SPDIFRX_DMACxHalfCplt(DMA_HandleTypeDef *hdma)
1096:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
1097:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = (SPDIFRX_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
1098:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
1099:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   HAL_SPDIFRX_CxHalfCpltCallback(hspdif); 
1100:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
1101:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1102:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
1103:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief DMA SPDIFRX communication error callback 
1104:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hdma  DMA handle
1105:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
1106:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
1107:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void SPDIFRX_DMAError(DMA_HandleTypeDef *hdma)
1108:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
1109:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1110:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
1111:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Disable Rx and Cb DMA Request */
1112:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->Instance->CR &= (uint16_t)(~(SPDIFRX_CR_RXDMAEN | SPDIFRX_CR_CBDMAEN));
1113:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->RxXferCount = 0;
1114:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
ARM GAS  /tmp/ccqWchYQ.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->State= HAL_SPDIFRX_STATE_READY;
1116:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
1117:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Set the error code and execute error callback*/
1118:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_DMA;
1119:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   HAL_SPDIFRX_ErrorCallback(hspdif);
1120:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
1121:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1122:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
1123:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Receive an amount of data (Data Flow) with Interrupt
1124:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
1125:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
1126:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
1127:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
1128:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
1129:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Receive data */
1130:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (*hspdif->pRxBuffPtr++) = hspdif->Instance->DR;
1131:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->RxXferCount--;
1132:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
1133:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if(hspdif->RxXferCount == 0)
1134:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {            
1135:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Disable RXNE/PE and OVR interrupts */
1136:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE | SPDIFRX_IT_PERRIE | SPDIFRX_IT_RXNE);
1137:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
1138:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_READY;
1139:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
1140:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Unlocked */
1141:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_UNLOCK(hspdif);
1142:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
1143:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     HAL_SPDIFRX_RxCpltCallback(hspdif);
1144:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
1145:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
1146:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
1147:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
1148:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief Receive an amount of data (Control Flow) with Interrupt
1149:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
1150:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval None
1151:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
1152:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static void SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
1153:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
1154:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Receive data */
1155:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   (*hspdif->pCsBuffPtr++) = hspdif->Instance->CSR;
1156:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->CsXferCount--;
1157:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
1158:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if(hspdif->CsXferCount == 0)
1159:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {        
1160:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Disable CSRNE interrupt */
1161:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
1162:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
1163:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_READY; 
1164:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
1165:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Process Unlocked */
1166:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     __HAL_UNLOCK(hspdif);
1167:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
1168:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     HAL_SPDIFRX_CxCpltCallback(hspdif);
1169:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
1170:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
1171:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
ARM GAS  /tmp/ccqWchYQ.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** /**
1173:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @brief This function handles SPDIFRX Communication Timeout.
1174:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param hspdif SPDIFRX handle
1175:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param Flag Flag checked
1176:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param Status Value of the flag expected
1177:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param Timeout Duration of the timeout
1178:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @param tickstart Tick start value
1179:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   * @retval HAL status
1180:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   */
1181:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** static HAL_StatusTypeDef SPDIFRX_WaitOnFlagUntilTimeout(SPDIFRX_HandleTypeDef *hspdif, uint32_t Fla
1182:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** {
  28              		.loc 1 1182 0
  29              		.cfi_startproc
  30              		@ args = 4, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0546     		mov	r5, r0
  41 0004 0E46     		mov	r6, r1
  42 0006 1C46     		mov	r4, r3
1183:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Wait until flag is set */
1184:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   if(Status == RESET)
  43              		.loc 1 1184 0
  44 0008 002A     		cmp	r2, #0
  45 000a 43D0     		beq	.L4
  46 000c 8CE0     		b	.L8
  47              	.LVL1:
  48              	.L7:
1185:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
1186:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     while(__HAL_SPDIFRX_GET_FLAG(hspdif, Flag) == RESET)
1187:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
1188:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Check for the Timeout */
1189:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       if(Timeout != HAL_MAX_DELAY)
  49              		.loc 1 1189 0
  50 000e B4F1FF3F 		cmp	r4, #-1
  51 0012 3FD0     		beq	.L4
1190:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       {
1191:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
  52              		.loc 1 1191 0
  53 0014 2CB1     		cbz	r4, .L5
  54              		.loc 1 1191 0 is_stmt 0 discriminator 1
  55 0016 FFF7FEFF 		bl	HAL_GetTick
  56              	.LVL2:
  57 001a 049B     		ldr	r3, [sp, #16]
  58 001c C01A     		subs	r0, r0, r3
  59 001e 8442     		cmp	r4, r0
  60 0020 38D2     		bcs	.L4
  61              	.L5:
1192:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         {
1193:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for
1194:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_RXNE);
ARM GAS  /tmp/ccqWchYQ.s 			page 23


  62              		.loc 1 1194 0 is_stmt 1
  63 0022 2A68     		ldr	r2, [r5]
  64 0024 5368     		ldr	r3, [r2, #4]
  65 0026 23F00103 		bic	r3, r3, #1
  66 002a 1B04     		lsls	r3, r3, #16
  67 002c 1B0C     		lsrs	r3, r3, #16
  68 002e 5360     		str	r3, [r2, #4]
1195:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
  69              		.loc 1 1195 0
  70 0030 2A68     		ldr	r2, [r5]
  71 0032 5368     		ldr	r3, [r2, #4]
  72 0034 23F00203 		bic	r3, r3, #2
  73 0038 1B04     		lsls	r3, r3, #16
  74 003a 1B0C     		lsrs	r3, r3, #16
  75 003c 5360     		str	r3, [r2, #4]
1196:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_PERRIE);
  76              		.loc 1 1196 0
  77 003e 2A68     		ldr	r2, [r5]
  78 0040 5368     		ldr	r3, [r2, #4]
  79 0042 23F00403 		bic	r3, r3, #4
  80 0046 1B04     		lsls	r3, r3, #16
  81 0048 1B0C     		lsrs	r3, r3, #16
  82 004a 5360     		str	r3, [r2, #4]
1197:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE);
  83              		.loc 1 1197 0
  84 004c 2A68     		ldr	r2, [r5]
  85 004e 5368     		ldr	r3, [r2, #4]
  86 0050 23F00803 		bic	r3, r3, #8
  87 0054 1B04     		lsls	r3, r3, #16
  88 0056 1B0C     		lsrs	r3, r3, #16
  89 0058 5360     		str	r3, [r2, #4]
1198:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SBLKIE);
  90              		.loc 1 1198 0
  91 005a 2A68     		ldr	r2, [r5]
  92 005c 5368     		ldr	r3, [r2, #4]
  93 005e 23F01003 		bic	r3, r3, #16
  94 0062 1B04     		lsls	r3, r3, #16
  95 0064 1B0C     		lsrs	r3, r3, #16
  96 0066 5360     		str	r3, [r2, #4]
1199:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SYNCDIE);
  97              		.loc 1 1199 0
  98 0068 2A68     		ldr	r2, [r5]
  99 006a 5368     		ldr	r3, [r2, #4]
 100 006c 23F02003 		bic	r3, r3, #32
 101 0070 1B04     		lsls	r3, r3, #16
 102 0072 1B0C     		lsrs	r3, r3, #16
 103 0074 5360     		str	r3, [r2, #4]
1200:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_IFEIE);
 104              		.loc 1 1200 0
 105 0076 2A68     		ldr	r2, [r5]
 106 0078 5368     		ldr	r3, [r2, #4]
 107 007a 23F04003 		bic	r3, r3, #64
 108 007e 1B04     		lsls	r3, r3, #16
 109 0080 1B0C     		lsrs	r3, r3, #16
 110 0082 5360     		str	r3, [r2, #4]
1201:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           
1202:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           hspdif->State= HAL_SPDIFRX_STATE_READY;
ARM GAS  /tmp/ccqWchYQ.s 			page 24


 111              		.loc 1 1202 0
 112 0084 0123     		movs	r3, #1
 113 0086 85F84530 		strb	r3, [r5, #69]
1203:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           
1204:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           /* Process Unlocked */
1205:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_UNLOCK(hspdif);
 114              		.loc 1 1205 0
 115 008a 0023     		movs	r3, #0
 116 008c 85F84430 		strb	r3, [r5, #68]
1206:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           
1207:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           return HAL_TIMEOUT;
 117              		.loc 1 1207 0
 118 0090 0320     		movs	r0, #3
 119 0092 70BD     		pop	{r4, r5, r6, pc}
 120              	.LVL3:
 121              	.L4:
1186:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 122              		.loc 1 1186 0
 123 0094 2B68     		ldr	r3, [r5]
 124 0096 9B68     		ldr	r3, [r3, #8]
 125 0098 36EA0303 		bics	r3, r6, r3
 126 009c B7D1     		bne	.L7
1208:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         }
1209:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }
1210:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
1211:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
1212:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   else
1213:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
1214:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     while(__HAL_SPDIFRX_GET_FLAG(hspdif, Flag) != RESET)
1215:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
1216:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       /* Check for the Timeout */
1217:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       if(Timeout != HAL_MAX_DELAY)
1218:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       {
1219:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
1220:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         {
1221:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for
1222:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_RXNE);
1223:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
1224:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_PERRIE);
1225:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE);
1226:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SBLKIE);
1227:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SYNCDIE);
1228:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_IFEIE);
1229:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           
1230:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           hspdif->State= HAL_SPDIFRX_STATE_READY;
1231:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           
1232:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           /* Process Unlocked */
1233:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_UNLOCK(hspdif);
1234:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           
1235:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           return HAL_TIMEOUT;
1236:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         }
1237:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }
1238:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
1239:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
1240:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   return HAL_OK;
 127              		.loc 1 1240 0
 128 009e 0020     		movs	r0, #0
ARM GAS  /tmp/ccqWchYQ.s 			page 25


 129 00a0 70BD     		pop	{r4, r5, r6, pc}
 130              	.LVL4:
 131              	.L10:
1217:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       {
 132              		.loc 1 1217 0
 133 00a2 B4F1FF3F 		cmp	r4, #-1
 134 00a6 3FD0     		beq	.L8
1219:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         {
 135              		.loc 1 1219 0
 136 00a8 2CB1     		cbz	r4, .L9
1219:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         {
 137              		.loc 1 1219 0 is_stmt 0 discriminator 1
 138 00aa FFF7FEFF 		bl	HAL_GetTick
 139              	.LVL5:
 140 00ae 049B     		ldr	r3, [sp, #16]
 141 00b0 C01A     		subs	r0, r0, r3
 142 00b2 8442     		cmp	r4, r0
 143 00b4 38D2     		bcs	.L8
 144              	.L9:
1222:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 145              		.loc 1 1222 0 is_stmt 1
 146 00b6 2A68     		ldr	r2, [r5]
 147 00b8 5368     		ldr	r3, [r2, #4]
 148 00ba 23F00103 		bic	r3, r3, #1
 149 00be 1B04     		lsls	r3, r3, #16
 150 00c0 1B0C     		lsrs	r3, r3, #16
 151 00c2 5360     		str	r3, [r2, #4]
1223:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_PERRIE);
 152              		.loc 1 1223 0
 153 00c4 2A68     		ldr	r2, [r5]
 154 00c6 5368     		ldr	r3, [r2, #4]
 155 00c8 23F00203 		bic	r3, r3, #2
 156 00cc 1B04     		lsls	r3, r3, #16
 157 00ce 1B0C     		lsrs	r3, r3, #16
 158 00d0 5360     		str	r3, [r2, #4]
1224:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE);
 159              		.loc 1 1224 0
 160 00d2 2A68     		ldr	r2, [r5]
 161 00d4 5368     		ldr	r3, [r2, #4]
 162 00d6 23F00403 		bic	r3, r3, #4
 163 00da 1B04     		lsls	r3, r3, #16
 164 00dc 1B0C     		lsrs	r3, r3, #16
 165 00de 5360     		str	r3, [r2, #4]
1225:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SBLKIE);
 166              		.loc 1 1225 0
 167 00e0 2A68     		ldr	r2, [r5]
 168 00e2 5368     		ldr	r3, [r2, #4]
 169 00e4 23F00803 		bic	r3, r3, #8
 170 00e8 1B04     		lsls	r3, r3, #16
 171 00ea 1B0C     		lsrs	r3, r3, #16
 172 00ec 5360     		str	r3, [r2, #4]
1226:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SYNCDIE);
 173              		.loc 1 1226 0
 174 00ee 2A68     		ldr	r2, [r5]
 175 00f0 5368     		ldr	r3, [r2, #4]
 176 00f2 23F01003 		bic	r3, r3, #16
 177 00f6 1B04     		lsls	r3, r3, #16
ARM GAS  /tmp/ccqWchYQ.s 			page 26


 178 00f8 1B0C     		lsrs	r3, r3, #16
 179 00fa 5360     		str	r3, [r2, #4]
1227:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_IFEIE);
 180              		.loc 1 1227 0
 181 00fc 2A68     		ldr	r2, [r5]
 182 00fe 5368     		ldr	r3, [r2, #4]
 183 0100 23F02003 		bic	r3, r3, #32
 184 0104 1B04     		lsls	r3, r3, #16
 185 0106 1B0C     		lsrs	r3, r3, #16
 186 0108 5360     		str	r3, [r2, #4]
1228:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           
 187              		.loc 1 1228 0
 188 010a 2A68     		ldr	r2, [r5]
 189 010c 5368     		ldr	r3, [r2, #4]
 190 010e 23F04003 		bic	r3, r3, #64
 191 0112 1B04     		lsls	r3, r3, #16
 192 0114 1B0C     		lsrs	r3, r3, #16
 193 0116 5360     		str	r3, [r2, #4]
1230:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           
 194              		.loc 1 1230 0
 195 0118 0123     		movs	r3, #1
 196 011a 85F84530 		strb	r3, [r5, #69]
1233:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****           
 197              		.loc 1 1233 0
 198 011e 0023     		movs	r3, #0
 199 0120 85F84430 		strb	r3, [r5, #68]
1235:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****         }
 200              		.loc 1 1235 0
 201 0124 0320     		movs	r0, #3
 202 0126 70BD     		pop	{r4, r5, r6, pc}
 203              	.LVL6:
 204              	.L8:
1214:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 205              		.loc 1 1214 0
 206 0128 2B68     		ldr	r3, [r5]
 207 012a 9B68     		ldr	r3, [r3, #8]
 208 012c 36EA0303 		bics	r3, r6, r3
 209 0130 B7D0     		beq	.L10
 210              		.loc 1 1240 0
 211 0132 0020     		movs	r0, #0
1241:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 212              		.loc 1 1241 0
 213 0134 70BD     		pop	{r4, r5, r6, pc}
 214              		.cfi_endproc
 215              	.LFE163:
 217 0136 00BF     		.section	.text.HAL_SPDIFRX_MspInit,"ax",%progbits
 218              		.align	2
 219              		.weak	HAL_SPDIFRX_MspInit
 220              		.thumb
 221              		.thumb_func
 223              	HAL_SPDIFRX_MspInit:
 224              	.LFB138:
 304:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 225              		.loc 1 304 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccqWchYQ.s 			page 27


 229              		@ link register save eliminated.
 230              	.LVL7:
 231 0000 7047     		bx	lr
 232              		.cfi_endproc
 233              	.LFE138:
 235 0002 00BF     		.section	.text.HAL_SPDIFRX_Init,"ax",%progbits
 236              		.align	2
 237              		.global	HAL_SPDIFRX_Init
 238              		.thumb
 239              		.thumb_func
 241              	HAL_SPDIFRX_Init:
 242              	.LFB136:
 199:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tmpreg = 0;
 243              		.loc 1 199 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              	.LVL8:
 203:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 248              		.loc 1 203 0
 249 0000 0028     		cmp	r0, #0
 250 0002 32D0     		beq	.L16
 199:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tmpreg = 0;
 251              		.loc 1 199 0
 252 0004 10B5     		push	{r4, lr}
 253              	.LCFI1:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 4, -8
 256              		.cfi_offset 14, -4
 257 0006 0446     		mov	r4, r0
 220:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 258              		.loc 1 220 0
 259 0008 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 260 000c 13F0FF0F 		tst	r3, #255
 261 0010 04D1     		bne	.L15
 223:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 262              		.loc 1 223 0
 263 0012 0023     		movs	r3, #0
 264 0014 80F84430 		strb	r3, [r0, #68]
 225:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 265              		.loc 1 225 0
 266 0018 FFF7FEFF 		bl	HAL_SPDIFRX_MspInit
 267              	.LVL9:
 268              	.L15:
 229:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 269              		.loc 1 229 0
 270 001c 0223     		movs	r3, #2
 271 001e 84F84530 		strb	r3, [r4, #69]
 232:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 272              		.loc 1 232 0
 273 0022 2268     		ldr	r2, [r4]
 274 0024 1368     		ldr	r3, [r2]
 275 0026 23F00303 		bic	r3, r3, #3
 276 002a 1360     		str	r3, [r2]
 235:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 277              		.loc 1 235 0
 278 002c 2068     		ldr	r0, [r4]
ARM GAS  /tmp/ccqWchYQ.s 			page 28


 279 002e 0368     		ldr	r3, [r0]
 280              	.LVL10:
 237:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****               SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
 281              		.loc 1 237 0
 282 0030 0F4A     		ldr	r2, .L19
 283 0032 1A40     		ands	r2, r2, r3
 284              	.LVL11:
 243:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.Retries |
 285              		.loc 1 243 0
 286 0034 6368     		ldr	r3, [r4, #4]
 242:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.InputSelection |
 287              		.loc 1 242 0
 288 0036 218B     		ldrh	r1, [r4, #24]
 289 0038 1943     		orrs	r1, r1, r3
 244:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.WaitForActivity |
 290              		.loc 1 244 0
 291 003a A368     		ldr	r3, [r4, #8]
 243:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.Retries |
 292              		.loc 1 243 0
 293 003c 1943     		orrs	r1, r1, r3
 245:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ChannelSelection |
 294              		.loc 1 245 0
 295 003e E368     		ldr	r3, [r4, #12]
 244:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.WaitForActivity |
 296              		.loc 1 244 0
 297 0040 1943     		orrs	r1, r1, r3
 246:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.DataFormat |
 298              		.loc 1 246 0
 299 0042 2369     		ldr	r3, [r4, #16]
 245:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ChannelSelection |
 300              		.loc 1 245 0
 301 0044 1943     		orrs	r1, r1, r3
 247:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.PreambleTypeMask |
 302              		.loc 1 247 0
 303 0046 6369     		ldr	r3, [r4, #20]
 246:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.DataFormat |
 304              		.loc 1 246 0
 305 0048 1943     		orrs	r1, r1, r3
 248:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ChannelStatusMask |
 306              		.loc 1 248 0
 307 004a E369     		ldr	r3, [r4, #28]
 247:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.PreambleTypeMask |
 308              		.loc 1 247 0
 309 004c 1943     		orrs	r1, r1, r3
 249:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ValidityBitMask |
 310              		.loc 1 249 0
 311 004e 236A     		ldr	r3, [r4, #32]
 248:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ChannelStatusMask |
 312              		.loc 1 248 0
 313 0050 1943     		orrs	r1, r1, r3
 250:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ParityErrorMask);
 314              		.loc 1 250 0
 315 0052 636A     		ldr	r3, [r4, #36]
 249:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ValidityBitMask |
 316              		.loc 1 249 0
 317 0054 1943     		orrs	r1, r1, r3
 251:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
ARM GAS  /tmp/ccqWchYQ.s 			page 29


 318              		.loc 1 251 0
 319 0056 A36A     		ldr	r3, [r4, #40]
 250:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.ParityErrorMask);
 320              		.loc 1 250 0
 321 0058 0B43     		orrs	r3, r3, r1
 242:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              hspdif->Init.InputSelection |
 322              		.loc 1 242 0
 323 005a 1343     		orrs	r3, r3, r2
 324              	.LVL12:
 253:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 325              		.loc 1 253 0
 326 005c 0360     		str	r3, [r0]
 255:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 327              		.loc 1 255 0
 328 005e 0020     		movs	r0, #0
 329 0060 A064     		str	r0, [r4, #72]
 258:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 330              		.loc 1 258 0
 331 0062 0123     		movs	r3, #1
 332              	.LVL13:
 333 0064 84F84530 		strb	r3, [r4, #69]
 260:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 334              		.loc 1 260 0
 335 0068 10BD     		pop	{r4, pc}
 336              	.LVL14:
 337              	.L16:
 338              	.LCFI2:
 339              		.cfi_def_cfa_offset 0
 340              		.cfi_restore 4
 341              		.cfi_restore 14
 205:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 342              		.loc 1 205 0
 343 006a 0120     		movs	r0, #1
 344              	.LVL15:
 345 006c 7047     		bx	lr
 346              	.L20:
 347 006e 00BF     		.align	2
 348              	.L19:
 349 0070 0784F8FF 		.word	-490489
 350              		.cfi_endproc
 351              	.LFE136:
 353              		.section	.text.HAL_SPDIFRX_MspDeInit,"ax",%progbits
 354              		.align	2
 355              		.weak	HAL_SPDIFRX_MspDeInit
 356              		.thumb
 357              		.thumb_func
 359              	HAL_SPDIFRX_MspDeInit:
 360              	.LFB139:
 319:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 361              		.loc 1 319 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              		@ link register save eliminated.
 366              	.LVL16:
 367 0000 7047     		bx	lr
 368              		.cfi_endproc
ARM GAS  /tmp/ccqWchYQ.s 			page 30


 369              	.LFE139:
 371 0002 00BF     		.section	.text.HAL_SPDIFRX_DeInit,"ax",%progbits
 372              		.align	2
 373              		.global	HAL_SPDIFRX_DeInit
 374              		.thumb
 375              		.thumb_func
 377              	HAL_SPDIFRX_DeInit:
 378              	.LFB137:
 269:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Check the SPDIFRX handle allocation */
 379              		.loc 1 269 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              	.LVL17:
 271:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 384              		.loc 1 271 0
 385 0000 90B1     		cbz	r0, .L24
 269:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Check the SPDIFRX handle allocation */
 386              		.loc 1 269 0
 387 0002 10B5     		push	{r4, lr}
 388              	.LCFI3:
 389              		.cfi_def_cfa_offset 8
 390              		.cfi_offset 4, -8
 391              		.cfi_offset 14, -4
 392 0004 0446     		mov	r4, r0
 279:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 393              		.loc 1 279 0
 394 0006 0223     		movs	r3, #2
 395 0008 80F84530 		strb	r3, [r0, #69]
 282:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 396              		.loc 1 282 0
 397 000c 0268     		ldr	r2, [r0]
 398 000e 1368     		ldr	r3, [r2]
 399 0010 23F00303 		bic	r3, r3, #3
 400 0014 1360     		str	r3, [r2]
 285:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 401              		.loc 1 285 0
 402 0016 FFF7FEFF 		bl	HAL_SPDIFRX_MspDeInit
 403              	.LVL18:
 287:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 404              		.loc 1 287 0
 405 001a 0020     		movs	r0, #0
 406 001c A064     		str	r0, [r4, #72]
 290:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 407              		.loc 1 290 0
 408 001e 84F84500 		strb	r0, [r4, #69]
 293:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 409              		.loc 1 293 0
 410 0022 84F84400 		strb	r0, [r4, #68]
 295:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 411              		.loc 1 295 0
 412 0026 10BD     		pop	{r4, pc}
 413              	.LVL19:
 414              	.L24:
 415              	.LCFI4:
 416              		.cfi_def_cfa_offset 0
 417              		.cfi_restore 4
ARM GAS  /tmp/ccqWchYQ.s 			page 31


 418              		.cfi_restore 14
 273:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 419              		.loc 1 273 0
 420 0028 0120     		movs	r0, #1
 421              	.LVL20:
 422 002a 7047     		bx	lr
 423              		.cfi_endproc
 424              	.LFE137:
 426              		.section	.text.HAL_SPDIFRX_SetDataFormat,"ax",%progbits
 427              		.align	2
 428              		.global	HAL_SPDIFRX_SetDataFormat
 429              		.thumb
 430              		.thumb_func
 432              	HAL_SPDIFRX_SetDataFormat:
 433              	.LFB140:
 336:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tmpreg = 0;
 434              		.loc 1 336 0
 435              		.cfi_startproc
 436              		@ args = 28, pretend = 16, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439              	.LVL21:
 440 0000 84B0     		sub	sp, sp, #16
 441              	.LCFI5:
 442              		.cfi_def_cfa_offset 16
 443 0002 10B4     		push	{r4}
 444              	.LCFI6:
 445              		.cfi_def_cfa_offset 20
 446              		.cfi_offset 4, -20
 447 0004 02AC     		add	r4, sp, #8
 448 0006 84E80E00 		stmia	r4, {r1, r2, r3}
 449              	.LVL22:
 340:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 450              		.loc 1 340 0
 451 000a 00B3     		cbz	r0, .L30
 354:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 452              		.loc 1 354 0
 453 000c 0068     		ldr	r0, [r0]
 454              	.LVL23:
 455 000e 0368     		ldr	r3, [r0]
 456              	.LVL24:
 356:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (((tmpreg & SPDIFRX_CR_DRFMT) != sDataFormat.DataFormat) ||
 457              		.loc 1 356 0
 458 0010 03F00302 		and	r2, r3, #3
 459 0014 032A     		cmp	r2, #3
 460 0016 08D1     		bne	.L29
 357:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       ((tmpreg & SPDIFRX_CR_RXSTEO) != sDataFormat.StereoMode)))  
 461              		.loc 1 357 0 discriminator 1
 462 0018 03F03002 		and	r2, r3, #48
 356:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****      (((tmpreg & SPDIFRX_CR_DRFMT) != sDataFormat.DataFormat) ||
 463              		.loc 1 356 0 discriminator 1
 464 001c 8A42     		cmp	r2, r1
 465 001e 18D1     		bne	.L31
 358:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 466              		.loc 1 358 0
 467 0020 03F00802 		and	r2, r3, #8
 468 0024 0399     		ldr	r1, [sp, #12]
ARM GAS  /tmp/ccqWchYQ.s 			page 32


 357:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       ((tmpreg & SPDIFRX_CR_RXSTEO) != sDataFormat.StereoMode)))  
 469              		.loc 1 357 0
 470 0026 8A42     		cmp	r2, r1
 471 0028 15D1     		bne	.L32
 472              	.L29:
 363:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****               SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK);   
 473              		.loc 1 363 0
 474 002a 23F47E73 		bic	r3, r3, #1016
 475              	.LVL25:
 367:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.DataFormat |
 476              		.loc 1 367 0
 477 002e BDF80C10 		ldrh	r1, [sp, #12]
 478 0032 029A     		ldr	r2, [sp, #8]
 479 0034 1143     		orrs	r1, r1, r2
 369:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.ChannelStatusMask |
 480              		.loc 1 369 0
 481 0036 049A     		ldr	r2, [sp, #16]
 368:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.PreambleTypeMask |
 482              		.loc 1 368 0
 483 0038 1143     		orrs	r1, r1, r2
 370:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.ValidityBitMask |
 484              		.loc 1 370 0
 485 003a 059A     		ldr	r2, [sp, #20]
 369:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.ChannelStatusMask |
 486              		.loc 1 369 0
 487 003c 1143     		orrs	r1, r1, r2
 371:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.ParityErrorMask);
 488              		.loc 1 371 0
 489 003e 069A     		ldr	r2, [sp, #24]
 370:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.ValidityBitMask |
 490              		.loc 1 370 0
 491 0040 1143     		orrs	r1, r1, r2
 372:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 492              		.loc 1 372 0
 493 0042 079A     		ldr	r2, [sp, #28]
 371:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.ParityErrorMask);
 494              		.loc 1 371 0
 495 0044 0A43     		orrs	r2, r2, r1
 367:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****              sDataFormat.DataFormat |
 496              		.loc 1 367 0
 497 0046 1343     		orrs	r3, r3, r2
 498              	.LVL26:
 374:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 499              		.loc 1 374 0
 500 0048 0360     		str	r3, [r0]
 376:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 501              		.loc 1 376 0
 502 004a 0020     		movs	r0, #0
 503 004c 04E0     		b	.L28
 504              	.LVL27:
 505              	.L30:
 342:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 506              		.loc 1 342 0
 507 004e 0120     		movs	r0, #1
 508              	.LVL28:
 509 0050 02E0     		b	.L28
 510              	.LVL29:
ARM GAS  /tmp/ccqWchYQ.s 			page 33


 511              	.L31:
 360:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }  
 512              		.loc 1 360 0
 513 0052 0120     		movs	r0, #1
 514 0054 00E0     		b	.L28
 515              	.L32:
 516 0056 0120     		movs	r0, #1
 517              	.LVL30:
 518              	.L28:
 377:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 519              		.loc 1 377 0
 520 0058 5DF8044B 		ldr	r4, [sp], #4
 521              	.LCFI7:
 522              		.cfi_restore 4
 523              		.cfi_def_cfa_offset 16
 524 005c 04B0     		add	sp, sp, #16
 525              	.LCFI8:
 526              		.cfi_def_cfa_offset 0
 527 005e 7047     		bx	lr
 528              		.cfi_endproc
 529              	.LFE140:
 531              		.section	.text.HAL_SPDIFRX_ReceiveDataFlow,"ax",%progbits
 532              		.align	2
 533              		.global	HAL_SPDIFRX_ReceiveDataFlow
 534              		.thumb
 535              		.thumb_func
 537              	HAL_SPDIFRX_ReceiveDataFlow:
 538              	.LFB141:
 436:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 539              		.loc 1 436 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543              	.LVL31:
 544 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 545              	.LCFI9:
 546              		.cfi_def_cfa_offset 24
 547              		.cfi_offset 4, -24
 548              		.cfi_offset 5, -20
 549              		.cfi_offset 6, -16
 550              		.cfi_offset 7, -12
 551              		.cfi_offset 8, -8
 552              		.cfi_offset 14, -4
 553 0004 82B0     		sub	sp, sp, #8
 554              	.LCFI10:
 555              		.cfi_def_cfa_offset 32
 556              	.LVL32:
 439:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 557              		.loc 1 439 0
 558 0006 002A     		cmp	r2, #0
 559 0008 18BF     		it	ne
 560 000a 0029     		cmpne	r1, #0
 561 000c 42D0     		beq	.L38
 562 000e 0446     		mov	r4, r0
 563 0010 9846     		mov	r8, r3
 564 0012 0F46     		mov	r7, r1
 565 0014 1646     		mov	r6, r2
ARM GAS  /tmp/ccqWchYQ.s 			page 34


 444:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   { 
 566              		.loc 1 444 0
 567 0016 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 568              	.LVL33:
 569 001a DBB2     		uxtb	r3, r3
 570 001c 012B     		cmp	r3, #1
 571 001e 3BD1     		bne	.L39
 447:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 572              		.loc 1 447 0
 573 0020 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 574 0024 DBB2     		uxtb	r3, r3
 575 0026 012B     		cmp	r3, #1
 576 0028 38D0     		beq	.L40
 447:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 577              		.loc 1 447 0 is_stmt 0 discriminator 2
 578 002a 0123     		movs	r3, #1
 579 002c 80F84430 		strb	r3, [r0, #68]
 449:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 580              		.loc 1 449 0 is_stmt 1 discriminator 2
 581 0030 0223     		movs	r3, #2
 582 0032 80F84530 		strb	r3, [r0, #69]
 452:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 583              		.loc 1 452 0 discriminator 2
 584 0036 0268     		ldr	r2, [r0]
 585              	.LVL34:
 586 0038 1368     		ldr	r3, [r2]
 587 003a 43F00103 		orr	r3, r3, #1
 588 003e 1360     		str	r3, [r2]
 455:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 589              		.loc 1 455 0 discriminator 2
 590 0040 FFF7FEFF 		bl	HAL_GetTick
 591              	.LVL35:
 458:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     { 
 592              		.loc 1 458 0 discriminator 2
 593 0044 0090     		str	r0, [sp]
 594 0046 4346     		mov	r3, r8
 595 0048 0022     		movs	r2, #0
 596 004a 2021     		movs	r1, #32
 597 004c 2046     		mov	r0, r4
 598              	.LVL36:
 599 004e FFF7FEFF 		bl	SPDIFRX_WaitOnFlagUntilTimeout
 600              	.LVL37:
 601 0052 0546     		mov	r5, r0
 602 0054 20BB     		cbnz	r0, .L41
 464:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 603              		.loc 1 464 0
 604 0056 2268     		ldr	r2, [r4]
 605 0058 1368     		ldr	r3, [r2]
 606 005a 43F00303 		orr	r3, r3, #3
 607 005e 1360     		str	r3, [r2]
 467:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {     
 608              		.loc 1 467 0
 609 0060 0FE0     		b	.L36
 610              	.LVL38:
 611              	.L37:
 470:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 612              		.loc 1 470 0
ARM GAS  /tmp/ccqWchYQ.s 			page 35


 613 0062 FFF7FEFF 		bl	HAL_GetTick
 614              	.LVL39:
 473:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
 615              		.loc 1 473 0
 616 0066 0090     		str	r0, [sp]
 617 0068 4346     		mov	r3, r8
 618 006a 0022     		movs	r2, #0
 619 006c 0121     		movs	r1, #1
 620 006e 2046     		mov	r0, r4
 621              	.LVL40:
 622 0070 FFF7FEFF 		bl	SPDIFRX_WaitOnFlagUntilTimeout
 623              	.LVL41:
 624 0074 B0B9     		cbnz	r0, .L42
 625              	.LVL42:
 478:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       Size--; 
 626              		.loc 1 478 0
 627 0076 2368     		ldr	r3, [r4]
 628 0078 1B69     		ldr	r3, [r3, #16]
 629 007a 3B60     		str	r3, [r7]
 479:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }      
 630              		.loc 1 479 0
 631 007c 013E     		subs	r6, r6, #1
 632              	.LVL43:
 633 007e B6B2     		uxth	r6, r6
 634              	.LVL44:
 478:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       Size--; 
 635              		.loc 1 478 0
 636 0080 0437     		adds	r7, r7, #4
 637              	.LVL45:
 638              	.L36:
 467:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {     
 639              		.loc 1 467 0
 640 0082 002E     		cmp	r6, #0
 641 0084 EDD1     		bne	.L37
 483:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 642              		.loc 1 483 0
 643 0086 0123     		movs	r3, #1
 644 0088 84F84530 		strb	r3, [r4, #69]
 486:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 645              		.loc 1 486 0
 646 008c 0023     		movs	r3, #0
 647 008e 84F84430 		strb	r3, [r4, #68]
 488:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 648              		.loc 1 488 0
 649 0092 08E0     		b	.L35
 650              	.LVL46:
 651              	.L38:
 441:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 652              		.loc 1 441 0
 653 0094 0125     		movs	r5, #1
 654 0096 06E0     		b	.L35
 655              	.LVL47:
 656              	.L39:
 492:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 657              		.loc 1 492 0
 658 0098 0225     		movs	r5, #2
 659 009a 04E0     		b	.L35
ARM GAS  /tmp/ccqWchYQ.s 			page 36


 660              	.L40:
 447:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 661              		.loc 1 447 0
 662 009c 0225     		movs	r5, #2
 663 009e 02E0     		b	.L35
 664              	.LVL48:
 665              	.L41:
 460:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }  
 666              		.loc 1 460 0
 667 00a0 0325     		movs	r5, #3
 668 00a2 00E0     		b	.L35
 669              	.LVL49:
 670              	.L42:
 475:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 671              		.loc 1 475 0
 672 00a4 0325     		movs	r5, #3
 673              	.LVL50:
 674              	.L35:
 494:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 675              		.loc 1 494 0
 676 00a6 2846     		mov	r0, r5
 677 00a8 02B0     		add	sp, sp, #8
 678              	.LCFI11:
 679              		.cfi_def_cfa_offset 24
 680              		@ sp needed
 681 00aa BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 682              		.cfi_endproc
 683              	.LFE141:
 685 00ae 00BF     		.section	.text.HAL_SPDIFRX_ReceiveControlFlow,"ax",%progbits
 686              		.align	2
 687              		.global	HAL_SPDIFRX_ReceiveControlFlow
 688              		.thumb
 689              		.thumb_func
 691              	HAL_SPDIFRX_ReceiveControlFlow:
 692              	.LFB142:
 506:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 693              		.loc 1 506 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              	.LVL51:
 698 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 699              	.LCFI12:
 700              		.cfi_def_cfa_offset 24
 701              		.cfi_offset 4, -24
 702              		.cfi_offset 5, -20
 703              		.cfi_offset 6, -16
 704              		.cfi_offset 7, -12
 705              		.cfi_offset 8, -8
 706              		.cfi_offset 14, -4
 707 0004 82B0     		sub	sp, sp, #8
 708              	.LCFI13:
 709              		.cfi_def_cfa_offset 32
 710              	.LVL52:
 509:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 711              		.loc 1 509 0
 712 0006 002A     		cmp	r2, #0
ARM GAS  /tmp/ccqWchYQ.s 			page 37


 713 0008 18BF     		it	ne
 714 000a 0029     		cmpne	r1, #0
 715 000c 42D0     		beq	.L48
 716 000e 0446     		mov	r4, r0
 717 0010 9846     		mov	r8, r3
 718 0012 0F46     		mov	r7, r1
 719 0014 1646     		mov	r6, r2
 514:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   { 
 720              		.loc 1 514 0
 721 0016 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 722              	.LVL53:
 723 001a DBB2     		uxtb	r3, r3
 724 001c 012B     		cmp	r3, #1
 725 001e 3BD1     		bne	.L49
 517:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 726              		.loc 1 517 0
 727 0020 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 728 0024 DBB2     		uxtb	r3, r3
 729 0026 012B     		cmp	r3, #1
 730 0028 38D0     		beq	.L50
 517:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 731              		.loc 1 517 0 is_stmt 0 discriminator 2
 732 002a 0123     		movs	r3, #1
 733 002c 80F84430 		strb	r3, [r0, #68]
 519:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 734              		.loc 1 519 0 is_stmt 1 discriminator 2
 735 0030 0223     		movs	r3, #2
 736 0032 80F84530 		strb	r3, [r0, #69]
 522:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 737              		.loc 1 522 0 discriminator 2
 738 0036 0268     		ldr	r2, [r0]
 739              	.LVL54:
 740 0038 1368     		ldr	r3, [r2]
 741 003a 43F00103 		orr	r3, r3, #1
 742 003e 1360     		str	r3, [r2]
 525:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 743              		.loc 1 525 0 discriminator 2
 744 0040 FFF7FEFF 		bl	HAL_GetTick
 745              	.LVL55:
 528:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     { 
 746              		.loc 1 528 0 discriminator 2
 747 0044 0090     		str	r0, [sp]
 748 0046 4346     		mov	r3, r8
 749 0048 0022     		movs	r2, #0
 750 004a 2021     		movs	r1, #32
 751 004c 2046     		mov	r0, r4
 752              	.LVL56:
 753 004e FFF7FEFF 		bl	SPDIFRX_WaitOnFlagUntilTimeout
 754              	.LVL57:
 755 0052 0546     		mov	r5, r0
 756 0054 20BB     		cbnz	r0, .L51
 534:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 757              		.loc 1 534 0
 758 0056 2268     		ldr	r2, [r4]
 759 0058 1368     		ldr	r3, [r2]
 760 005a 43F00303 		orr	r3, r3, #3
 761 005e 1360     		str	r3, [r2]
ARM GAS  /tmp/ccqWchYQ.s 			page 38


 537:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {      
 762              		.loc 1 537 0
 763 0060 0FE0     		b	.L46
 764              	.LVL58:
 765              	.L47:
 540:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 766              		.loc 1 540 0
 767 0062 FFF7FEFF 		bl	HAL_GetTick
 768              	.LVL59:
 543:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
 769              		.loc 1 543 0
 770 0066 0090     		str	r0, [sp]
 771 0068 4346     		mov	r3, r8
 772 006a 0022     		movs	r2, #0
 773 006c 0221     		movs	r1, #2
 774 006e 2046     		mov	r0, r4
 775              	.LVL60:
 776 0070 FFF7FEFF 		bl	SPDIFRX_WaitOnFlagUntilTimeout
 777              	.LVL61:
 778 0074 B0B9     		cbnz	r0, .L52
 779              	.LVL62:
 548:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       Size--; 
 780              		.loc 1 548 0
 781 0076 2368     		ldr	r3, [r4]
 782 0078 5B69     		ldr	r3, [r3, #20]
 783 007a 3B60     		str	r3, [r7]
 549:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }      
 784              		.loc 1 549 0
 785 007c 013E     		subs	r6, r6, #1
 786              	.LVL63:
 787 007e B6B2     		uxth	r6, r6
 788              	.LVL64:
 548:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       Size--; 
 789              		.loc 1 548 0
 790 0080 0437     		adds	r7, r7, #4
 791              	.LVL65:
 792              	.L46:
 537:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {      
 793              		.loc 1 537 0
 794 0082 002E     		cmp	r6, #0
 795 0084 EDD1     		bne	.L47
 553:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 796              		.loc 1 553 0
 797 0086 0123     		movs	r3, #1
 798 0088 84F84530 		strb	r3, [r4, #69]
 556:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 799              		.loc 1 556 0
 800 008c 0023     		movs	r3, #0
 801 008e 84F84430 		strb	r3, [r4, #68]
 558:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 802              		.loc 1 558 0
 803 0092 08E0     		b	.L45
 804              	.LVL66:
 805              	.L48:
 511:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 806              		.loc 1 511 0
 807 0094 0125     		movs	r5, #1
ARM GAS  /tmp/ccqWchYQ.s 			page 39


 808 0096 06E0     		b	.L45
 809              	.LVL67:
 810              	.L49:
 562:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 811              		.loc 1 562 0
 812 0098 0225     		movs	r5, #2
 813 009a 04E0     		b	.L45
 814              	.L50:
 517:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 815              		.loc 1 517 0
 816 009c 0225     		movs	r5, #2
 817 009e 02E0     		b	.L45
 818              	.LVL68:
 819              	.L51:
 530:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }  
 820              		.loc 1 530 0
 821 00a0 0325     		movs	r5, #3
 822 00a2 00E0     		b	.L45
 823              	.LVL69:
 824              	.L52:
 545:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 825              		.loc 1 545 0
 826 00a4 0325     		movs	r5, #3
 827              	.LVL70:
 828              	.L45:
 564:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 829              		.loc 1 564 0
 830 00a6 2846     		mov	r0, r5
 831 00a8 02B0     		add	sp, sp, #8
 832              	.LCFI14:
 833              		.cfi_def_cfa_offset 24
 834              		@ sp needed
 835 00aa BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 836              		.cfi_endproc
 837              	.LFE142:
 839 00ae 00BF     		.section	.text.HAL_SPDIFRX_ReceiveDataFlow_IT,"ax",%progbits
 840              		.align	2
 841              		.global	HAL_SPDIFRX_ReceiveDataFlow_IT
 842              		.thumb
 843              		.thumb_func
 845              	HAL_SPDIFRX_ReceiveDataFlow_IT:
 846              	.LFB143:
 574:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 847              		.loc 1 574 0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851              	.LVL71:
 852 0000 10B5     		push	{r4, lr}
 853              	.LCFI15:
 854              		.cfi_def_cfa_offset 8
 855              		.cfi_offset 4, -8
 856              		.cfi_offset 14, -4
 857 0002 82B0     		sub	sp, sp, #8
 858              	.LCFI16:
 859              		.cfi_def_cfa_offset 16
 860              	.LVL72:
ARM GAS  /tmp/ccqWchYQ.s 			page 40


 577:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 861              		.loc 1 577 0
 862 0004 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 863 0008 DBB2     		uxtb	r3, r3
 864 000a 012B     		cmp	r3, #1
 865 000c 04D0     		beq	.L55
 577:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 866              		.loc 1 577 0 is_stmt 0 discriminator 1
 867 000e 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 868 0012 DBB2     		uxtb	r3, r3
 869 0014 042B     		cmp	r3, #4
 870 0016 49D1     		bne	.L58
 871              	.L55:
 579:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 872              		.loc 1 579 0 is_stmt 1
 873 0018 002A     		cmp	r2, #0
 874 001a 18BF     		it	ne
 875 001c 0029     		cmpne	r1, #0
 876 001e 47D0     		beq	.L59
 585:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 877              		.loc 1 585 0
 878 0020 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 879 0024 DBB2     		uxtb	r3, r3
 880 0026 012B     		cmp	r3, #1
 881 0028 44D0     		beq	.L60
 585:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 882              		.loc 1 585 0 is_stmt 0 discriminator 2
 883 002a 0123     		movs	r3, #1
 884 002c 80F84430 		strb	r3, [r0, #68]
 587:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->RxXferSize = Size;
 885              		.loc 1 587 0 is_stmt 1 discriminator 2
 886 0030 C162     		str	r1, [r0, #44]
 588:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->RxXferCount = Size;
 887              		.loc 1 588 0 discriminator 2
 888 0032 8286     		strh	r2, [r0, #52]	@ movhi
 589:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 889              		.loc 1 589 0 discriminator 2
 890 0034 C286     		strh	r2, [r0, #54]	@ movhi
 591:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 891              		.loc 1 591 0 discriminator 2
 892 0036 0022     		movs	r2, #0
 893              	.LVL73:
 894 0038 8264     		str	r2, [r0, #72]
 895              	.LVL74:
 594:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 896              		.loc 1 594 0 discriminator 2
 897 003a 0323     		movs	r3, #3
 898 003c 80F84530 		strb	r3, [r0, #69]
 598:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 899              		.loc 1 598 0 discriminator 2
 900 0040 0168     		ldr	r1, [r0]
 901              	.LVL75:
 902 0042 4B68     		ldr	r3, [r1, #4]
 903 0044 43F00403 		orr	r3, r3, #4
 904 0048 4B60     		str	r3, [r1, #4]
 905              	.LVL76:
 601:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
ARM GAS  /tmp/ccqWchYQ.s 			page 41


 906              		.loc 1 601 0 discriminator 2
 907 004a 0168     		ldr	r1, [r0]
 908 004c 4B68     		ldr	r3, [r1, #4]
 909 004e 43F00803 		orr	r3, r3, #8
 910 0052 4B60     		str	r3, [r1, #4]
 604:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 911              		.loc 1 604 0 discriminator 2
 912 0054 80F84420 		strb	r2, [r0, #68]
 607:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 913              		.loc 1 607 0 discriminator 2
 914 0058 0268     		ldr	r2, [r0]
 915 005a 5368     		ldr	r3, [r2, #4]
 916 005c 43F00103 		orr	r3, r3, #1
 917 0060 5360     		str	r3, [r2, #4]
 609:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 918              		.loc 1 609 0 discriminator 2
 919 0062 4FF04023 		mov	r3, #1073758208
 920 0066 1B68     		ldr	r3, [r3]
 921 0068 03F00303 		and	r3, r3, #3
 922 006c 012B     		cmp	r3, #1
 923 006e 05D1     		bne	.L57
 609:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 924              		.loc 1 609 0 is_stmt 0 discriminator 1
 925 0070 4FF04023 		mov	r3, #1073758208
 926 0074 1B68     		ldr	r3, [r3]
 927 0076 13F0030F 		tst	r3, #3
 928 007a 1DD0     		beq	.L61
 929              	.L57:
 930 007c 0446     		mov	r4, r0
 612:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 931              		.loc 1 612 0 is_stmt 1
 932 007e 0268     		ldr	r2, [r0]
 933 0080 1368     		ldr	r3, [r2]
 934 0082 43F00103 		orr	r3, r3, #1
 935 0086 1360     		str	r3, [r2]
 615:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 936              		.loc 1 615 0
 937 0088 FFF7FEFF 		bl	HAL_GetTick
 938              	.LVL77:
 618:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
 939              		.loc 1 618 0
 940 008c 0090     		str	r0, [sp]
 941 008e 4FF6FF73 		movw	r3, #65535
 942 0092 0022     		movs	r2, #0
 943 0094 2021     		movs	r1, #32
 944 0096 2046     		mov	r0, r4
 945              	.LVL78:
 946 0098 FFF7FEFF 		bl	SPDIFRX_WaitOnFlagUntilTimeout
 947              	.LVL79:
 948 009c 0346     		mov	r3, r0
 949 009e 68B9     		cbnz	r0, .L62
 624:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
 950              		.loc 1 624 0
 951 00a0 2168     		ldr	r1, [r4]
 952 00a2 0A68     		ldr	r2, [r1]
 953 00a4 42F00302 		orr	r2, r2, #3
 954 00a8 0A60     		str	r2, [r1]
ARM GAS  /tmp/ccqWchYQ.s 			page 42


 955 00aa 08E0     		b	.L56
 956              	.LVL80:
 957              	.L58:
 631:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 958              		.loc 1 631 0
 959 00ac 0223     		movs	r3, #2
 960 00ae 06E0     		b	.L56
 961              	.L59:
 581:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
 962              		.loc 1 581 0
 963 00b0 0123     		movs	r3, #1
 964 00b2 04E0     		b	.L56
 965              	.L60:
 585:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 966              		.loc 1 585 0
 967 00b4 0223     		movs	r3, #2
 968 00b6 02E0     		b	.L56
 969              	.LVL81:
 970              	.L61:
 627:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 971              		.loc 1 627 0
 972 00b8 0023     		movs	r3, #0
 973 00ba 00E0     		b	.L56
 974              	.LVL82:
 975              	.L62:
 620:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 976              		.loc 1 620 0
 977 00bc 0323     		movs	r3, #3
 978              	.LVL83:
 979              	.L56:
 633:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 980              		.loc 1 633 0
 981 00be 1846     		mov	r0, r3
 982 00c0 02B0     		add	sp, sp, #8
 983              	.LCFI17:
 984              		.cfi_def_cfa_offset 8
 985              		@ sp needed
 986 00c2 10BD     		pop	{r4, pc}
 987              		.cfi_endproc
 988              	.LFE143:
 990              		.section	.text.HAL_SPDIFRX_ReceiveControlFlow_IT,"ax",%progbits
 991              		.align	2
 992              		.global	HAL_SPDIFRX_ReceiveControlFlow_IT
 993              		.thumb
 994              		.thumb_func
 996              	HAL_SPDIFRX_ReceiveControlFlow_IT:
 997              	.LFB144:
 643:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 998              		.loc 1 643 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 0
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002              	.LVL84:
 1003 0000 10B5     		push	{r4, lr}
 1004              	.LCFI18:
 1005              		.cfi_def_cfa_offset 8
 1006              		.cfi_offset 4, -8
ARM GAS  /tmp/ccqWchYQ.s 			page 43


 1007              		.cfi_offset 14, -4
 1008 0002 82B0     		sub	sp, sp, #8
 1009              	.LCFI19:
 1010              		.cfi_def_cfa_offset 16
 1011              	.LVL85:
 646:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 1012              		.loc 1 646 0
 1013 0004 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1014 0008 DBB2     		uxtb	r3, r3
 1015 000a 012B     		cmp	r3, #1
 1016 000c 04D0     		beq	.L65
 646:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 1017              		.loc 1 646 0 is_stmt 0 discriminator 1
 1018 000e 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1019 0012 DBB2     		uxtb	r3, r3
 1020 0014 032B     		cmp	r3, #3
 1021 0016 49D1     		bne	.L68
 1022              	.L65:
 648:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 1023              		.loc 1 648 0 is_stmt 1
 1024 0018 002A     		cmp	r2, #0
 1025 001a 18BF     		it	ne
 1026 001c 0029     		cmpne	r1, #0
 1027 001e 47D0     		beq	.L69
 654:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1028              		.loc 1 654 0
 1029 0020 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1030 0024 DBB2     		uxtb	r3, r3
 1031 0026 012B     		cmp	r3, #1
 1032 0028 44D0     		beq	.L70
 654:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1033              		.loc 1 654 0 is_stmt 0 discriminator 2
 1034 002a 0123     		movs	r3, #1
 1035 002c 80F84430 		strb	r3, [r0, #68]
 656:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->CsXferSize = Size;
 1036              		.loc 1 656 0 is_stmt 1 discriminator 2
 1037 0030 0163     		str	r1, [r0, #48]
 657:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->CsXferCount = Size;
 1038              		.loc 1 657 0 discriminator 2
 1039 0032 0287     		strh	r2, [r0, #56]	@ movhi
 658:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1040              		.loc 1 658 0 discriminator 2
 1041 0034 4287     		strh	r2, [r0, #58]	@ movhi
 660:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1042              		.loc 1 660 0 discriminator 2
 1043 0036 0022     		movs	r2, #0
 1044              	.LVL86:
 1045 0038 8264     		str	r2, [r0, #72]
 1046              	.LVL87:
 663:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1047              		.loc 1 663 0 discriminator 2
 1048 003a 0423     		movs	r3, #4
 1049 003c 80F84530 		strb	r3, [r0, #69]
 667:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1050              		.loc 1 667 0 discriminator 2
 1051 0040 0168     		ldr	r1, [r0]
 1052              	.LVL88:
ARM GAS  /tmp/ccqWchYQ.s 			page 44


 1053 0042 4B68     		ldr	r3, [r1, #4]
 1054 0044 43F00403 		orr	r3, r3, #4
 1055 0048 4B60     		str	r3, [r1, #4]
 1056              	.LVL89:
 670:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1057              		.loc 1 670 0 discriminator 2
 1058 004a 0168     		ldr	r1, [r0]
 1059 004c 4B68     		ldr	r3, [r1, #4]
 1060 004e 43F00803 		orr	r3, r3, #8
 1061 0052 4B60     		str	r3, [r1, #4]
 673:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1062              		.loc 1 673 0 discriminator 2
 1063 0054 80F84420 		strb	r2, [r0, #68]
 676:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1064              		.loc 1 676 0 discriminator 2
 1065 0058 0268     		ldr	r2, [r0]
 1066 005a 5368     		ldr	r3, [r2, #4]
 1067 005c 43F00203 		orr	r3, r3, #2
 1068 0060 5360     		str	r3, [r2, #4]
 678:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 1069              		.loc 1 678 0 discriminator 2
 1070 0062 4FF04023 		mov	r3, #1073758208
 1071 0066 1B68     		ldr	r3, [r3]
 1072 0068 03F00303 		and	r3, r3, #3
 1073 006c 012B     		cmp	r3, #1
 1074 006e 05D1     		bne	.L67
 678:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 1075              		.loc 1 678 0 is_stmt 0 discriminator 1
 1076 0070 4FF04023 		mov	r3, #1073758208
 1077 0074 1B68     		ldr	r3, [r3]
 1078 0076 13F0030F 		tst	r3, #3
 1079 007a 1DD0     		beq	.L71
 1080              	.L67:
 1081 007c 0446     		mov	r4, r0
 681:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 1082              		.loc 1 681 0 is_stmt 1
 1083 007e 0268     		ldr	r2, [r0]
 1084 0080 1368     		ldr	r3, [r2]
 1085 0082 43F00103 		orr	r3, r3, #1
 1086 0086 1360     		str	r3, [r2]
 684:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 1087              		.loc 1 684 0
 1088 0088 FFF7FEFF 		bl	HAL_GetTick
 1089              	.LVL90:
 687:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
 1090              		.loc 1 687 0
 1091 008c 0090     		str	r0, [sp]
 1092 008e 4FF6FF73 		movw	r3, #65535
 1093 0092 0022     		movs	r2, #0
 1094 0094 2021     		movs	r1, #32
 1095 0096 2046     		mov	r0, r4
 1096              	.LVL91:
 1097 0098 FFF7FEFF 		bl	SPDIFRX_WaitOnFlagUntilTimeout
 1098              	.LVL92:
 1099 009c 0346     		mov	r3, r0
 1100 009e 68B9     		cbnz	r0, .L72
 693:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
ARM GAS  /tmp/ccqWchYQ.s 			page 45


 1101              		.loc 1 693 0
 1102 00a0 2168     		ldr	r1, [r4]
 1103 00a2 0A68     		ldr	r2, [r1]
 1104 00a4 42F00302 		orr	r2, r2, #3
 1105 00a8 0A60     		str	r2, [r1]
 1106 00aa 08E0     		b	.L66
 1107              	.LVL93:
 1108              	.L68:
 700:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 1109              		.loc 1 700 0
 1110 00ac 0223     		movs	r3, #2
 1111 00ae 06E0     		b	.L66
 1112              	.L69:
 650:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
 1113              		.loc 1 650 0
 1114 00b0 0123     		movs	r3, #1
 1115 00b2 04E0     		b	.L66
 1116              	.L70:
 654:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1117              		.loc 1 654 0
 1118 00b4 0223     		movs	r3, #2
 1119 00b6 02E0     		b	.L66
 1120              	.LVL94:
 1121              	.L71:
 696:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 1122              		.loc 1 696 0
 1123 00b8 0023     		movs	r3, #0
 1124 00ba 00E0     		b	.L66
 1125              	.LVL95:
 1126              	.L72:
 689:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 1127              		.loc 1 689 0
 1128 00bc 0323     		movs	r3, #3
 1129              	.LVL96:
 1130              	.L66:
 702:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 1131              		.loc 1 702 0
 1132 00be 1846     		mov	r0, r3
 1133 00c0 02B0     		add	sp, sp, #8
 1134              	.LCFI20:
 1135              		.cfi_def_cfa_offset 8
 1136              		@ sp needed
 1137 00c2 10BD     		pop	{r4, pc}
 1138              		.cfi_endproc
 1139              	.LFE144:
 1141              		.section	.text.HAL_SPDIFRX_ReceiveDataFlow_DMA,"ax",%progbits
 1142              		.align	2
 1143              		.global	HAL_SPDIFRX_ReceiveDataFlow_DMA
 1144              		.thumb
 1145              		.thumb_func
 1147              	HAL_SPDIFRX_ReceiveDataFlow_DMA:
 1148              	.LFB145:
 712:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 1149              		.loc 1 712 0
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 0
 1152              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccqWchYQ.s 			page 46


 1153              	.LVL97:
 715:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 1154              		.loc 1 715 0
 1155 0000 002A     		cmp	r2, #0
 1156 0002 18BF     		it	ne
 1157 0004 0029     		cmpne	r1, #0
 1158 0006 58D0     		beq	.L79
 712:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 1159              		.loc 1 712 0
 1160 0008 10B5     		push	{r4, lr}
 1161              	.LCFI21:
 1162              		.cfi_def_cfa_offset 8
 1163              		.cfi_offset 4, -8
 1164              		.cfi_offset 14, -4
 1165 000a 82B0     		sub	sp, sp, #8
 1166              	.LCFI22:
 1167              		.cfi_def_cfa_offset 16
 1168 000c 0C46     		mov	r4, r1
 1169 000e 1346     		mov	r3, r2
 720:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {   
 1170              		.loc 1 720 0
 1171 0010 90F84520 		ldrb	r2, [r0, #69]	@ zero_extendqisi2
 1172              	.LVL98:
 1173 0014 D2B2     		uxtb	r2, r2
 1174 0016 012A     		cmp	r2, #1
 1175 0018 04D0     		beq	.L76
 720:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {   
 1176              		.loc 1 720 0 is_stmt 0 discriminator 1
 1177 001a 90F84520 		ldrb	r2, [r0, #69]	@ zero_extendqisi2
 1178 001e D2B2     		uxtb	r2, r2
 1179 0020 042A     		cmp	r2, #4
 1180 0022 4CD1     		bne	.L80
 1181              	.L76:
 722:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->RxXferSize = Size;
 1182              		.loc 1 722 0 is_stmt 1
 1183 0024 C462     		str	r4, [r0, #44]
 723:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->RxXferCount = Size;
 1184              		.loc 1 723 0
 1185 0026 8386     		strh	r3, [r0, #52]	@ movhi
 724:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1186              		.loc 1 724 0
 1187 0028 C386     		strh	r3, [r0, #54]	@ movhi
 727:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1188              		.loc 1 727 0
 1189 002a 90F84420 		ldrb	r2, [r0, #68]	@ zero_extendqisi2
 1190 002e D2B2     		uxtb	r2, r2
 1191 0030 012A     		cmp	r2, #1
 1192 0032 46D0     		beq	.L81
 1193 0034 0446     		mov	r4, r0
 727:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1194              		.loc 1 727 0 is_stmt 0 discriminator 2
 1195 0036 0122     		movs	r2, #1
 1196 0038 80F84420 		strb	r2, [r0, #68]
 729:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_BUSY_RX;
 1197              		.loc 1 729 0 is_stmt 1 discriminator 2
 1198 003c 0022     		movs	r2, #0
 1199 003e 8264     		str	r2, [r0, #72]
ARM GAS  /tmp/ccqWchYQ.s 			page 47


 730:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1200              		.loc 1 730 0 discriminator 2
 1201 0040 0322     		movs	r2, #3
 1202 0042 80F84520 		strb	r2, [r0, #69]
 733:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1203              		.loc 1 733 0 discriminator 2
 1204 0046 026C     		ldr	r2, [r0, #64]
 1205 0048 2049     		ldr	r1, .L84
 1206              	.LVL99:
 1207 004a 1164     		str	r1, [r2, #64]
 1208              	.LVL100:
 736:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1209              		.loc 1 736 0 discriminator 2
 1210 004c 026C     		ldr	r2, [r0, #64]
 1211 004e 2049     		ldr	r1, .L84+4
 1212 0050 D163     		str	r1, [r2, #60]
 739:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1213              		.loc 1 739 0 discriminator 2
 1214 0052 026C     		ldr	r2, [r0, #64]
 1215 0054 1F49     		ldr	r1, .L84+8
 1216 0056 D164     		str	r1, [r2, #76]
 742:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1217              		.loc 1 742 0 discriminator 2
 1218 0058 0168     		ldr	r1, [r0]
 1219 005a C26A     		ldr	r2, [r0, #44]
 1220 005c 1031     		adds	r1, r1, #16
 1221 005e 006C     		ldr	r0, [r0, #64]
 1222              	.LVL101:
 1223 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1224              	.LVL102:
 745:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1225              		.loc 1 745 0 discriminator 2
 1226 0064 2268     		ldr	r2, [r4]
 1227 0066 1368     		ldr	r3, [r2]
 1228 0068 43F00403 		orr	r3, r3, #4
 1229 006c 1360     		str	r3, [r2]
 747:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 1230              		.loc 1 747 0 discriminator 2
 1231 006e 4FF04023 		mov	r3, #1073758208
 1232 0072 1B68     		ldr	r3, [r3]
 1233 0074 03F00303 		and	r3, r3, #3
 1234 0078 012B     		cmp	r3, #1
 1235 007a 05D1     		bne	.L77
 747:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 1236              		.loc 1 747 0 is_stmt 0 discriminator 1
 1237 007c 4FF04023 		mov	r3, #1073758208
 1238 0080 1B68     		ldr	r3, [r3]
 1239 0082 13F0030F 		tst	r3, #3
 1240 0086 14D0     		beq	.L78
 1241              	.L77:
 750:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 1242              		.loc 1 750 0 is_stmt 1
 1243 0088 2268     		ldr	r2, [r4]
 1244 008a 1368     		ldr	r3, [r2]
 1245 008c 43F00103 		orr	r3, r3, #1
 1246 0090 1360     		str	r3, [r2]
 753:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
ARM GAS  /tmp/ccqWchYQ.s 			page 48


 1247              		.loc 1 753 0
 1248 0092 FFF7FEFF 		bl	HAL_GetTick
 1249              	.LVL103:
 756:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
 1250              		.loc 1 756 0
 1251 0096 0090     		str	r0, [sp]
 1252 0098 4FF6FF73 		movw	r3, #65535
 1253 009c 0022     		movs	r2, #0
 1254 009e 2021     		movs	r1, #32
 1255 00a0 2046     		mov	r0, r4
 1256              	.LVL104:
 1257 00a2 FFF7FEFF 		bl	SPDIFRX_WaitOnFlagUntilTimeout
 1258              	.LVL105:
 1259 00a6 70B9     		cbnz	r0, .L82
 762:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
 1260              		.loc 1 762 0
 1261 00a8 2268     		ldr	r2, [r4]
 1262 00aa 1368     		ldr	r3, [r2]
 1263 00ac 43F00303 		orr	r3, r3, #3
 1264 00b0 1360     		str	r3, [r2]
 1265              	.L78:
 766:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1266              		.loc 1 766 0
 1267 00b2 0020     		movs	r0, #0
 1268 00b4 84F84400 		strb	r0, [r4, #68]
 768:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 1269              		.loc 1 768 0
 1270 00b8 06E0     		b	.L75
 1271              	.LVL106:
 1272              	.L79:
 1273              	.LCFI23:
 1274              		.cfi_def_cfa_offset 0
 1275              		.cfi_restore 4
 1276              		.cfi_restore 14
 717:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   } 
 1277              		.loc 1 717 0
 1278 00ba 0120     		movs	r0, #1
 1279              	.LVL107:
 774:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 1280              		.loc 1 774 0
 1281 00bc 7047     		bx	lr
 1282              	.LVL108:
 1283              	.L80:
 1284              	.LCFI24:
 1285              		.cfi_def_cfa_offset 16
 1286              		.cfi_offset 4, -8
 1287              		.cfi_offset 14, -4
 772:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 1288              		.loc 1 772 0
 1289 00be 0220     		movs	r0, #2
 1290              	.LVL109:
 1291 00c0 02E0     		b	.L75
 1292              	.LVL110:
 1293              	.L81:
 727:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1294              		.loc 1 727 0
 1295 00c2 0220     		movs	r0, #2
ARM GAS  /tmp/ccqWchYQ.s 			page 49


 1296              	.LVL111:
 1297 00c4 00E0     		b	.L75
 1298              	.LVL112:
 1299              	.L82:
 758:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 1300              		.loc 1 758 0
 1301 00c6 0320     		movs	r0, #3
 1302              	.LVL113:
 1303              	.L75:
 774:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 1304              		.loc 1 774 0
 1305 00c8 02B0     		add	sp, sp, #8
 1306              	.LCFI25:
 1307              		.cfi_def_cfa_offset 8
 1308              		@ sp needed
 1309 00ca 10BD     		pop	{r4, pc}
 1310              	.L85:
 1311              		.align	2
 1312              	.L84:
 1313 00cc 00000000 		.word	SPDIFRX_DMARxHalfCplt
 1314 00d0 00000000 		.word	SPDIFRX_DMARxCplt
 1315 00d4 00000000 		.word	SPDIFRX_DMAError
 1316              		.cfi_endproc
 1317              	.LFE145:
 1319              		.section	.text.HAL_SPDIFRX_ReceiveControlFlow_DMA,"ax",%progbits
 1320              		.align	2
 1321              		.global	HAL_SPDIFRX_ReceiveControlFlow_DMA
 1322              		.thumb
 1323              		.thumb_func
 1325              	HAL_SPDIFRX_ReceiveControlFlow_DMA:
 1326              	.LFB146:
 784:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 1327              		.loc 1 784 0
 1328              		.cfi_startproc
 1329              		@ args = 0, pretend = 0, frame = 0
 1330              		@ frame_needed = 0, uses_anonymous_args = 0
 1331              	.LVL114:
 787:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 1332              		.loc 1 787 0
 1333 0000 002A     		cmp	r2, #0
 1334 0002 18BF     		it	ne
 1335 0004 0029     		cmpne	r1, #0
 1336 0006 58D0     		beq	.L91
 784:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   uint32_t tickstart = 0U;
 1337              		.loc 1 784 0
 1338 0008 10B5     		push	{r4, lr}
 1339              	.LCFI26:
 1340              		.cfi_def_cfa_offset 8
 1341              		.cfi_offset 4, -8
 1342              		.cfi_offset 14, -4
 1343 000a 82B0     		sub	sp, sp, #8
 1344              	.LCFI27:
 1345              		.cfi_def_cfa_offset 16
 1346 000c 0C46     		mov	r4, r1
 1347 000e 1346     		mov	r3, r2
 792:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {    
 1348              		.loc 1 792 0
ARM GAS  /tmp/ccqWchYQ.s 			page 50


 1349 0010 90F84520 		ldrb	r2, [r0, #69]	@ zero_extendqisi2
 1350              	.LVL115:
 1351 0014 D2B2     		uxtb	r2, r2
 1352 0016 012A     		cmp	r2, #1
 1353 0018 04D0     		beq	.L88
 792:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {    
 1354              		.loc 1 792 0 is_stmt 0 discriminator 1
 1355 001a 90F84520 		ldrb	r2, [r0, #69]	@ zero_extendqisi2
 1356 001e D2B2     		uxtb	r2, r2
 1357 0020 032A     		cmp	r2, #3
 1358 0022 4CD1     		bne	.L92
 1359              	.L88:
 794:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->CsXferSize = Size;
 1360              		.loc 1 794 0 is_stmt 1
 1361 0024 0463     		str	r4, [r0, #48]
 795:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->CsXferCount = Size;
 1362              		.loc 1 795 0
 1363 0026 0387     		strh	r3, [r0, #56]	@ movhi
 796:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1364              		.loc 1 796 0
 1365 0028 4387     		strh	r3, [r0, #58]	@ movhi
 799:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1366              		.loc 1 799 0
 1367 002a 90F84420 		ldrb	r2, [r0, #68]	@ zero_extendqisi2
 1368 002e D2B2     		uxtb	r2, r2
 1369 0030 012A     		cmp	r2, #1
 1370 0032 46D0     		beq	.L93
 1371 0034 0446     		mov	r4, r0
 799:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1372              		.loc 1 799 0 is_stmt 0 discriminator 2
 1373 0036 0122     		movs	r2, #1
 1374 0038 80F84420 		strb	r2, [r0, #68]
 801:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_BUSY_CX;
 1375              		.loc 1 801 0 is_stmt 1 discriminator 2
 1376 003c 0022     		movs	r2, #0
 1377 003e 8264     		str	r2, [r0, #72]
 802:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1378              		.loc 1 802 0 discriminator 2
 1379 0040 0422     		movs	r2, #4
 1380 0042 80F84520 		strb	r2, [r0, #69]
 805:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1381              		.loc 1 805 0 discriminator 2
 1382 0046 C26B     		ldr	r2, [r0, #60]
 1383 0048 2049     		ldr	r1, .L96
 1384              	.LVL116:
 1385 004a 1164     		str	r1, [r2, #64]
 1386              	.LVL117:
 808:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1387              		.loc 1 808 0 discriminator 2
 1388 004c C26B     		ldr	r2, [r0, #60]
 1389 004e 2049     		ldr	r1, .L96+4
 1390 0050 D163     		str	r1, [r2, #60]
 811:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1391              		.loc 1 811 0 discriminator 2
 1392 0052 C26B     		ldr	r2, [r0, #60]
 1393 0054 1F49     		ldr	r1, .L96+8
 1394 0056 D164     		str	r1, [r2, #76]
ARM GAS  /tmp/ccqWchYQ.s 			page 51


 814:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1395              		.loc 1 814 0 discriminator 2
 1396 0058 0168     		ldr	r1, [r0]
 1397 005a 026B     		ldr	r2, [r0, #48]
 1398 005c 1431     		adds	r1, r1, #20
 1399 005e C06B     		ldr	r0, [r0, #60]
 1400              	.LVL118:
 1401 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1402              	.LVL119:
 817:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1403              		.loc 1 817 0 discriminator 2
 1404 0064 2268     		ldr	r2, [r4]
 1405 0066 1368     		ldr	r3, [r2]
 1406 0068 43F48063 		orr	r3, r3, #1024
 1407 006c 1360     		str	r3, [r2]
 819:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 1408              		.loc 1 819 0 discriminator 2
 1409 006e 4FF04023 		mov	r3, #1073758208
 1410 0072 1B68     		ldr	r3, [r3]
 1411 0074 03F00303 		and	r3, r3, #3
 1412 0078 012B     		cmp	r3, #1
 1413 007a 05D1     		bne	.L89
 819:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     {
 1414              		.loc 1 819 0 is_stmt 0 discriminator 1
 1415 007c 4FF04023 		mov	r3, #1073758208
 1416 0080 1B68     		ldr	r3, [r3]
 1417 0082 13F0030F 		tst	r3, #3
 1418 0086 14D0     		beq	.L90
 1419              	.L89:
 822:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 1420              		.loc 1 822 0 is_stmt 1
 1421 0088 2268     		ldr	r2, [r4]
 1422 008a 1368     		ldr	r3, [r2]
 1423 008c 43F00103 		orr	r3, r3, #1
 1424 0090 1360     		str	r3, [r2]
 825:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       
 1425              		.loc 1 825 0
 1426 0092 FFF7FEFF 		bl	HAL_GetTick
 1427              	.LVL120:
 828:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       { 
 1428              		.loc 1 828 0
 1429 0096 0090     		str	r0, [sp]
 1430 0098 4FF6FF73 		movw	r3, #65535
 1431 009c 0022     		movs	r2, #0
 1432 009e 2021     		movs	r1, #32
 1433 00a0 2046     		mov	r0, r4
 1434              	.LVL121:
 1435 00a2 FFF7FEFF 		bl	SPDIFRX_WaitOnFlagUntilTimeout
 1436              	.LVL122:
 1437 00a6 70B9     		cbnz	r0, .L94
 834:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     }
 1438              		.loc 1 834 0
 1439 00a8 2268     		ldr	r2, [r4]
 1440 00aa 1368     		ldr	r3, [r2]
 1441 00ac 43F00303 		orr	r3, r3, #3
 1442 00b0 1360     		str	r3, [r2]
 1443              	.L90:
ARM GAS  /tmp/ccqWchYQ.s 			page 52


 838:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1444              		.loc 1 838 0
 1445 00b2 0020     		movs	r0, #0
 1446 00b4 84F84400 		strb	r0, [r4, #68]
 840:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 1447              		.loc 1 840 0
 1448 00b8 06E0     		b	.L87
 1449              	.LVL123:
 1450              	.L91:
 1451              	.LCFI28:
 1452              		.cfi_def_cfa_offset 0
 1453              		.cfi_restore 4
 1454              		.cfi_restore 14
 789:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   } 
 1455              		.loc 1 789 0
 1456 00ba 0120     		movs	r0, #1
 1457              	.LVL124:
 846:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 1458              		.loc 1 846 0
 1459 00bc 7047     		bx	lr
 1460              	.LVL125:
 1461              	.L92:
 1462              	.LCFI29:
 1463              		.cfi_def_cfa_offset 16
 1464              		.cfi_offset 4, -8
 1465              		.cfi_offset 14, -4
 844:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 1466              		.loc 1 844 0
 1467 00be 0220     		movs	r0, #2
 1468              	.LVL126:
 1469 00c0 02E0     		b	.L87
 1470              	.LVL127:
 1471              	.L93:
 799:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1472              		.loc 1 799 0
 1473 00c2 0220     		movs	r0, #2
 1474              	.LVL128:
 1475 00c4 00E0     		b	.L87
 1476              	.LVL129:
 1477              	.L94:
 830:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****       }  
 1478              		.loc 1 830 0
 1479 00c6 0320     		movs	r0, #3
 1480              	.LVL130:
 1481              	.L87:
 846:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 1482              		.loc 1 846 0
 1483 00c8 02B0     		add	sp, sp, #8
 1484              	.LCFI30:
 1485              		.cfi_def_cfa_offset 8
 1486              		@ sp needed
 1487 00ca 10BD     		pop	{r4, pc}
 1488              	.L97:
 1489              		.align	2
 1490              	.L96:
 1491 00cc 00000000 		.word	SPDIFRX_DMACxHalfCplt
 1492 00d0 00000000 		.word	SPDIFRX_DMACxCplt
ARM GAS  /tmp/ccqWchYQ.s 			page 53


 1493 00d4 00000000 		.word	SPDIFRX_DMAError
 1494              		.cfi_endproc
 1495              	.LFE146:
 1497              		.section	.text.HAL_SPDIFRX_DMAStop,"ax",%progbits
 1498              		.align	2
 1499              		.global	HAL_SPDIFRX_DMAStop
 1500              		.thumb
 1501              		.thumb_func
 1503              	HAL_SPDIFRX_DMAStop:
 1504              	.LFB147:
 854:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Process Locked */
 1505              		.loc 1 854 0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 0
 1508              		@ frame_needed = 0, uses_anonymous_args = 0
 1509              		@ link register save eliminated.
 1510              	.LVL131:
 856:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1511              		.loc 1 856 0
 1512 0000 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1513 0004 DBB2     		uxtb	r3, r3
 1514 0006 012B     		cmp	r3, #1
 1515 0008 28D0     		beq	.L100
 856:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1516              		.loc 1 856 0 is_stmt 0 discriminator 2
 1517 000a 0122     		movs	r2, #1
 1518 000c 80F84420 		strb	r2, [r0, #68]
 859:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_CBDMAEN);
 1519              		.loc 1 859 0 is_stmt 1 discriminator 2
 1520 0010 0168     		ldr	r1, [r0]
 1521 0012 0B68     		ldr	r3, [r1]
 1522 0014 23F00403 		bic	r3, r3, #4
 1523 0018 1B04     		lsls	r3, r3, #16
 1524 001a 1B0C     		lsrs	r3, r3, #16
 1525 001c 0B60     		str	r3, [r1]
 860:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1526              		.loc 1 860 0 discriminator 2
 1527 001e 0168     		ldr	r1, [r0]
 1528 0020 0B68     		ldr	r3, [r1]
 1529 0022 23F48063 		bic	r3, r3, #1024
 1530 0026 1B04     		lsls	r3, r3, #16
 1531 0028 1B0C     		lsrs	r3, r3, #16
 1532 002a 0B60     		str	r3, [r1]
 863:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   __HAL_DMA_DISABLE(hspdif->hdmaCsRx);
 1533              		.loc 1 863 0 discriminator 2
 1534 002c 036C     		ldr	r3, [r0, #64]
 1535 002e 1968     		ldr	r1, [r3]
 1536 0030 0B68     		ldr	r3, [r1]
 1537 0032 23F00103 		bic	r3, r3, #1
 1538 0036 0B60     		str	r3, [r1]
 864:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1539              		.loc 1 864 0 discriminator 2
 1540 0038 C36B     		ldr	r3, [r0, #60]
 1541 003a 1968     		ldr	r1, [r3]
 1542 003c 0B68     		ldr	r3, [r1]
 1543 003e 23F00103 		bic	r3, r3, #1
 1544 0042 0B60     		str	r3, [r1]
ARM GAS  /tmp/ccqWchYQ.s 			page 54


 867:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1545              		.loc 1 867 0 discriminator 2
 1546 0044 0168     		ldr	r1, [r0]
 1547 0046 0B68     		ldr	r3, [r1]
 1548 0048 23F00303 		bic	r3, r3, #3
 1549 004c 0B60     		str	r3, [r1]
 869:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1550              		.loc 1 869 0 discriminator 2
 1551 004e 80F84520 		strb	r2, [r0, #69]
 872:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1552              		.loc 1 872 0 discriminator 2
 1553 0052 0023     		movs	r3, #0
 1554 0054 80F84430 		strb	r3, [r0, #68]
 874:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 1555              		.loc 1 874 0 discriminator 2
 1556 0058 1846     		mov	r0, r3
 1557              	.LVL132:
 1558 005a 7047     		bx	lr
 1559              	.LVL133:
 1560              	.L100:
 856:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1561              		.loc 1 856 0
 1562 005c 0220     		movs	r0, #2
 1563              	.LVL134:
 875:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 1564              		.loc 1 875 0
 1565 005e 7047     		bx	lr
 1566              		.cfi_endproc
 1567              	.LFE147:
 1569              		.section	.text.HAL_SPDIFRX_RxHalfCpltCallback,"ax",%progbits
 1570              		.align	2
 1571              		.weak	HAL_SPDIFRX_RxHalfCpltCallback
 1572              		.thumb
 1573              		.thumb_func
 1575              	HAL_SPDIFRX_RxHalfCpltCallback:
 1576              	.LFB149:
 929:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 1577              		.loc 1 929 0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 0
 1580              		@ frame_needed = 0, uses_anonymous_args = 0
 1581              		@ link register save eliminated.
 1582              	.LVL135:
 1583 0000 7047     		bx	lr
 1584              		.cfi_endproc
 1585              	.LFE149:
 1587 0002 00BF     		.section	.text.SPDIFRX_DMARxHalfCplt,"ax",%progbits
 1588              		.align	2
 1589              		.thumb
 1590              		.thumb_func
 1592              	SPDIFRX_DMARxHalfCplt:
 1593              	.LFB157:
1066:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = (SPDIFRX_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 1594              		.loc 1 1066 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 0
 1597              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccqWchYQ.s 			page 55


 1598              	.LVL136:
1066:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = (SPDIFRX_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 1599              		.loc 1 1066 0
 1600 0000 08B5     		push	{r3, lr}
 1601              	.LCFI31:
 1602              		.cfi_def_cfa_offset 8
 1603              		.cfi_offset 3, -8
 1604              		.cfi_offset 14, -4
 1605              	.LVL137:
1069:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 1606              		.loc 1 1069 0
 1607 0002 806B     		ldr	r0, [r0, #56]
 1608              	.LVL138:
 1609 0004 FFF7FEFF 		bl	HAL_SPDIFRX_RxHalfCpltCallback
 1610              	.LVL139:
 1611 0008 08BD     		pop	{r3, pc}
 1612              		.cfi_endproc
 1613              	.LFE157:
 1615 000a 00BF     		.section	.text.HAL_SPDIFRX_RxCpltCallback,"ax",%progbits
 1616              		.align	2
 1617              		.weak	HAL_SPDIFRX_RxCpltCallback
 1618              		.thumb
 1619              		.thumb_func
 1621              	HAL_SPDIFRX_RxCpltCallback:
 1622              	.LFB150:
 944:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 1623              		.loc 1 944 0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 0
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
 1627              		@ link register save eliminated.
 1628              	.LVL140:
 1629 0000 7047     		bx	lr
 1630              		.cfi_endproc
 1631              	.LFE150:
 1633 0002 00BF     		.section	.text.SPDIFRX_DMARxCplt,"ax",%progbits
 1634              		.align	2
 1635              		.thumb
 1636              		.thumb_func
 1638              	SPDIFRX_DMARxCplt:
 1639              	.LFB156:
1047:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1640              		.loc 1 1047 0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 0
 1643              		@ frame_needed = 0, uses_anonymous_args = 0
 1644              	.LVL141:
1047:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1645              		.loc 1 1047 0
 1646 0000 08B5     		push	{r3, lr}
 1647              	.LCFI32:
 1648              		.cfi_def_cfa_offset 8
 1649              		.cfi_offset 3, -8
 1650              		.cfi_offset 14, -4
1048:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1651              		.loc 1 1048 0
 1652 0002 836B     		ldr	r3, [r0, #56]
ARM GAS  /tmp/ccqWchYQ.s 			page 56


 1653              	.LVL142:
1051:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 1654              		.loc 1 1051 0
 1655 0004 0268     		ldr	r2, [r0]
 1656 0006 1268     		ldr	r2, [r2]
 1657 0008 12F4807F 		tst	r2, #256
 1658 000c 0BD1     		bne	.L106
1053:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->RxXferCount = 0;
 1659              		.loc 1 1053 0
 1660 000e 1968     		ldr	r1, [r3]
 1661 0010 0A68     		ldr	r2, [r1]
 1662 0012 22F00402 		bic	r2, r2, #4
 1663 0016 1204     		lsls	r2, r2, #16
 1664 0018 120C     		lsrs	r2, r2, #16
 1665 001a 0A60     		str	r2, [r1]
1054:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     hspdif->State = HAL_SPDIFRX_STATE_READY; 
 1666              		.loc 1 1054 0
 1667 001c 0022     		movs	r2, #0
 1668 001e DA86     		strh	r2, [r3, #54]	@ movhi
1055:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 1669              		.loc 1 1055 0
 1670 0020 0122     		movs	r2, #1
 1671 0022 83F84520 		strb	r2, [r3, #69]
 1672              	.L106:
1057:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 1673              		.loc 1 1057 0
 1674 0026 1846     		mov	r0, r3
 1675              	.LVL143:
 1676 0028 FFF7FEFF 		bl	HAL_SPDIFRX_RxCpltCallback
 1677              	.LVL144:
 1678 002c 08BD     		pop	{r3, pc}
 1679              		.cfi_endproc
 1680              	.LFE156:
 1682 002e 00BF     		.section	.text.SPDIFRX_ReceiveDataFlow_IT,"ax",%progbits
 1683              		.align	2
 1684              		.thumb
 1685              		.thumb_func
 1687              	SPDIFRX_ReceiveDataFlow_IT:
 1688              	.LFB161:
1128:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Receive data */
 1689              		.loc 1 1128 0
 1690              		.cfi_startproc
 1691              		@ args = 0, pretend = 0, frame = 0
 1692              		@ frame_needed = 0, uses_anonymous_args = 0
 1693              	.LVL145:
 1694 0000 08B5     		push	{r3, lr}
 1695              	.LCFI33:
 1696              		.cfi_def_cfa_offset 8
 1697              		.cfi_offset 3, -8
 1698              		.cfi_offset 14, -4
1130:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->RxXferCount--;
 1699              		.loc 1 1130 0
 1700 0002 C36A     		ldr	r3, [r0, #44]
 1701 0004 1A1D     		adds	r2, r3, #4
 1702 0006 C262     		str	r2, [r0, #44]
 1703 0008 0268     		ldr	r2, [r0]
 1704 000a 1269     		ldr	r2, [r2, #16]
ARM GAS  /tmp/ccqWchYQ.s 			page 57


 1705 000c 1A60     		str	r2, [r3]
1131:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1706              		.loc 1 1131 0
 1707 000e C38E     		ldrh	r3, [r0, #54]
 1708 0010 9BB2     		uxth	r3, r3
 1709 0012 013B     		subs	r3, r3, #1
 1710 0014 9BB2     		uxth	r3, r3
 1711 0016 C386     		strh	r3, [r0, #54]	@ movhi
1133:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {            
 1712              		.loc 1 1133 0
 1713 0018 C38E     		ldrh	r3, [r0, #54]
 1714 001a 9BB2     		uxth	r3, r3
 1715 001c 73B9     		cbnz	r3, .L108
1136:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1716              		.loc 1 1136 0
 1717 001e 0268     		ldr	r2, [r0]
 1718 0020 5368     		ldr	r3, [r2, #4]
 1719 0022 23F00D03 		bic	r3, r3, #13
 1720 0026 1B04     		lsls	r3, r3, #16
 1721 0028 1B0C     		lsrs	r3, r3, #16
 1722 002a 5360     		str	r3, [r2, #4]
1138:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1723              		.loc 1 1138 0
 1724 002c 0123     		movs	r3, #1
 1725 002e 80F84530 		strb	r3, [r0, #69]
1141:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1726              		.loc 1 1141 0
 1727 0032 0023     		movs	r3, #0
 1728 0034 80F84430 		strb	r3, [r0, #68]
1143:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 1729              		.loc 1 1143 0
 1730 0038 FFF7FEFF 		bl	HAL_SPDIFRX_RxCpltCallback
 1731              	.LVL146:
 1732              	.L108:
 1733 003c 08BD     		pop	{r3, pc}
 1734              		.cfi_endproc
 1735              	.LFE161:
 1737 003e 00BF     		.section	.text.HAL_SPDIFRX_CxHalfCpltCallback,"ax",%progbits
 1738              		.align	2
 1739              		.weak	HAL_SPDIFRX_CxHalfCpltCallback
 1740              		.thumb
 1741              		.thumb_func
 1743              	HAL_SPDIFRX_CxHalfCpltCallback:
 1744              	.LFB151:
 959:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 1745              		.loc 1 959 0
 1746              		.cfi_startproc
 1747              		@ args = 0, pretend = 0, frame = 0
 1748              		@ frame_needed = 0, uses_anonymous_args = 0
 1749              		@ link register save eliminated.
 1750              	.LVL147:
 1751 0000 7047     		bx	lr
 1752              		.cfi_endproc
 1753              	.LFE151:
 1755 0002 00BF     		.section	.text.SPDIFRX_DMACxHalfCplt,"ax",%progbits
 1756              		.align	2
 1757              		.thumb
ARM GAS  /tmp/ccqWchYQ.s 			page 58


 1758              		.thumb_func
 1760              	SPDIFRX_DMACxHalfCplt:
 1761              	.LFB159:
1096:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = (SPDIFRX_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 1762              		.loc 1 1096 0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 0, uses_anonymous_args = 0
 1766              	.LVL148:
1096:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = (SPDIFRX_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 1767              		.loc 1 1096 0
 1768 0000 08B5     		push	{r3, lr}
 1769              	.LCFI34:
 1770              		.cfi_def_cfa_offset 8
 1771              		.cfi_offset 3, -8
 1772              		.cfi_offset 14, -4
 1773              	.LVL149:
1099:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 1774              		.loc 1 1099 0
 1775 0002 806B     		ldr	r0, [r0, #56]
 1776              	.LVL150:
 1777 0004 FFF7FEFF 		bl	HAL_SPDIFRX_CxHalfCpltCallback
 1778              	.LVL151:
 1779 0008 08BD     		pop	{r3, pc}
 1780              		.cfi_endproc
 1781              	.LFE159:
 1783 000a 00BF     		.section	.text.HAL_SPDIFRX_CxCpltCallback,"ax",%progbits
 1784              		.align	2
 1785              		.weak	HAL_SPDIFRX_CxCpltCallback
 1786              		.thumb
 1787              		.thumb_func
 1789              	HAL_SPDIFRX_CxCpltCallback:
 1790              	.LFB152:
 974:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 1791              		.loc 1 974 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 0
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 1795              		@ link register save eliminated.
 1796              	.LVL152:
 1797 0000 7047     		bx	lr
 1798              		.cfi_endproc
 1799              	.LFE152:
 1801 0002 00BF     		.section	.text.SPDIFRX_DMACxCplt,"ax",%progbits
 1802              		.align	2
 1803              		.thumb
 1804              		.thumb_func
 1806              	SPDIFRX_DMACxCplt:
 1807              	.LFB158:
1079:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1808              		.loc 1 1079 0
 1809              		.cfi_startproc
 1810              		@ args = 0, pretend = 0, frame = 0
 1811              		@ frame_needed = 0, uses_anonymous_args = 0
 1812              	.LVL153:
1079:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1813              		.loc 1 1079 0
ARM GAS  /tmp/ccqWchYQ.s 			page 59


 1814 0000 08B5     		push	{r3, lr}
 1815              	.LCFI35:
 1816              		.cfi_def_cfa_offset 8
 1817              		.cfi_offset 3, -8
 1818              		.cfi_offset 14, -4
1080:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1819              		.loc 1 1080 0
 1820 0002 806B     		ldr	r0, [r0, #56]
 1821              	.LVL154:
1083:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->CsXferCount = 0;
 1822              		.loc 1 1083 0
 1823 0004 0268     		ldr	r2, [r0]
 1824 0006 1368     		ldr	r3, [r2]
 1825 0008 23F48063 		bic	r3, r3, #1024
 1826 000c 1B04     		lsls	r3, r3, #16
 1827 000e 1B0C     		lsrs	r3, r3, #16
 1828 0010 1360     		str	r3, [r2]
1084:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1829              		.loc 1 1084 0
 1830 0012 0023     		movs	r3, #0
 1831 0014 4387     		strh	r3, [r0, #58]	@ movhi
1086:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   HAL_SPDIFRX_CxCpltCallback(hspdif); 
 1832              		.loc 1 1086 0
 1833 0016 0123     		movs	r3, #1
 1834 0018 80F84530 		strb	r3, [r0, #69]
1087:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 1835              		.loc 1 1087 0
 1836 001c FFF7FEFF 		bl	HAL_SPDIFRX_CxCpltCallback
 1837              	.LVL155:
 1838 0020 08BD     		pop	{r3, pc}
 1839              		.cfi_endproc
 1840              	.LFE158:
 1842 0022 00BF     		.section	.text.SPDIFRX_ReceiveControlFlow_IT,"ax",%progbits
 1843              		.align	2
 1844              		.thumb
 1845              		.thumb_func
 1847              	SPDIFRX_ReceiveControlFlow_IT:
 1848              	.LFB162:
1153:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Receive data */
 1849              		.loc 1 1153 0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 0
 1852              		@ frame_needed = 0, uses_anonymous_args = 0
 1853              	.LVL156:
 1854 0000 08B5     		push	{r3, lr}
 1855              	.LCFI36:
 1856              		.cfi_def_cfa_offset 8
 1857              		.cfi_offset 3, -8
 1858              		.cfi_offset 14, -4
1155:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->CsXferCount--;
 1859              		.loc 1 1155 0
 1860 0002 036B     		ldr	r3, [r0, #48]
 1861 0004 1A1D     		adds	r2, r3, #4
 1862 0006 0263     		str	r2, [r0, #48]
 1863 0008 0268     		ldr	r2, [r0]
 1864 000a 5269     		ldr	r2, [r2, #20]
 1865 000c 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccqWchYQ.s 			page 60


1156:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1866              		.loc 1 1156 0
 1867 000e 438F     		ldrh	r3, [r0, #58]
 1868 0010 9BB2     		uxth	r3, r3
 1869 0012 013B     		subs	r3, r3, #1
 1870 0014 9BB2     		uxth	r3, r3
 1871 0016 4387     		strh	r3, [r0, #58]	@ movhi
1158:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {        
 1872              		.loc 1 1158 0
 1873 0018 438F     		ldrh	r3, [r0, #58]
 1874 001a 9BB2     		uxth	r3, r3
 1875 001c 73B9     		cbnz	r3, .L117
1161:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1876              		.loc 1 1161 0
 1877 001e 0268     		ldr	r2, [r0]
 1878 0020 5368     		ldr	r3, [r2, #4]
 1879 0022 23F00203 		bic	r3, r3, #2
 1880 0026 1B04     		lsls	r3, r3, #16
 1881 0028 1B0C     		lsrs	r3, r3, #16
 1882 002a 5360     		str	r3, [r2, #4]
1163:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1883              		.loc 1 1163 0
 1884 002c 0123     		movs	r3, #1
 1885 002e 80F84530 		strb	r3, [r0, #69]
1166:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 1886              		.loc 1 1166 0
 1887 0032 0023     		movs	r3, #0
 1888 0034 80F84430 		strb	r3, [r0, #68]
1168:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 1889              		.loc 1 1168 0
 1890 0038 FFF7FEFF 		bl	HAL_SPDIFRX_CxCpltCallback
 1891              	.LVL157:
 1892              	.L117:
 1893 003c 08BD     		pop	{r3, pc}
 1894              		.cfi_endproc
 1895              	.LFE162:
 1897 003e 00BF     		.section	.text.HAL_SPDIFRX_ErrorCallback,"ax",%progbits
 1898              		.align	2
 1899              		.weak	HAL_SPDIFRX_ErrorCallback
 1900              		.thumb
 1901              		.thumb_func
 1903              	HAL_SPDIFRX_ErrorCallback:
 1904              	.LFB153:
 989:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* Prevent unused argument(s) compilation warning */
 1905              		.loc 1 989 0
 1906              		.cfi_startproc
 1907              		@ args = 0, pretend = 0, frame = 0
 1908              		@ frame_needed = 0, uses_anonymous_args = 0
 1909              		@ link register save eliminated.
 1910              	.LVL158:
 1911 0000 7047     		bx	lr
 1912              		.cfi_endproc
 1913              	.LFE153:
 1915 0002 00BF     		.section	.text.SPDIFRX_DMAError,"ax",%progbits
 1916              		.align	2
 1917              		.thumb
 1918              		.thumb_func
ARM GAS  /tmp/ccqWchYQ.s 			page 61


 1920              	SPDIFRX_DMAError:
 1921              	.LFB160:
1108:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1922              		.loc 1 1108 0
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 0
 1925              		@ frame_needed = 0, uses_anonymous_args = 0
 1926              	.LVL159:
1108:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1927              		.loc 1 1108 0
 1928 0000 08B5     		push	{r3, lr}
 1929              	.LCFI37:
 1930              		.cfi_def_cfa_offset 8
 1931              		.cfi_offset 3, -8
 1932              		.cfi_offset 14, -4
1109:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1933              		.loc 1 1109 0
 1934 0002 806B     		ldr	r0, [r0, #56]
 1935              	.LVL160:
1112:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   hspdif->RxXferCount = 0;
 1936              		.loc 1 1112 0
 1937 0004 0268     		ldr	r2, [r0]
 1938 0006 1368     		ldr	r3, [r2]
 1939 0008 23F48063 		bic	r3, r3, #1024
 1940 000c 23F00403 		bic	r3, r3, #4
 1941 0010 1B04     		lsls	r3, r3, #16
 1942 0012 1B0C     		lsrs	r3, r3, #16
 1943 0014 1360     		str	r3, [r2]
1113:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1944              		.loc 1 1113 0
 1945 0016 0023     		movs	r3, #0
 1946 0018 C386     		strh	r3, [r0, #54]	@ movhi
1115:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   
 1947              		.loc 1 1115 0
 1948 001a 0123     		movs	r3, #1
 1949 001c 80F84530 		strb	r3, [r0, #69]
1118:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   HAL_SPDIFRX_ErrorCallback(hspdif);
 1950              		.loc 1 1118 0
 1951 0020 836C     		ldr	r3, [r0, #72]
 1952 0022 43F00803 		orr	r3, r3, #8
 1953 0026 8364     		str	r3, [r0, #72]
1119:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 1954              		.loc 1 1119 0
 1955 0028 FFF7FEFF 		bl	HAL_SPDIFRX_ErrorCallback
 1956              	.LVL161:
 1957 002c 08BD     		pop	{r3, pc}
 1958              		.cfi_endproc
 1959              	.LFE160:
 1961 002e 00BF     		.section	.text.HAL_SPDIFRX_IRQHandler,"ax",%progbits
 1962              		.align	2
 1963              		.global	HAL_SPDIFRX_IRQHandler
 1964              		.thumb
 1965              		.thumb_func
 1967              	HAL_SPDIFRX_IRQHandler:
 1968              	.LFB148:
 883:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   /* SPDIFRX in mode Data Flow Reception ------------------------------------------------*/
 1969              		.loc 1 883 0
ARM GAS  /tmp/ccqWchYQ.s 			page 62


 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973              	.LVL162:
 1974 0000 10B5     		push	{r4, lr}
 1975              	.LCFI38:
 1976              		.cfi_def_cfa_offset 8
 1977              		.cfi_offset 4, -8
 1978              		.cfi_offset 14, -4
 1979 0002 0446     		mov	r4, r0
 885:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 1980              		.loc 1 885 0
 1981 0004 0368     		ldr	r3, [r0]
 1982 0006 9A68     		ldr	r2, [r3, #8]
 1983 0008 12F0010F 		tst	r2, #1
 1984 000c 07D0     		beq	.L124
 885:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 1985              		.loc 1 885 0 is_stmt 0 discriminator 1
 1986 000e 5A68     		ldr	r2, [r3, #4]
 1987 0010 12F0010F 		tst	r2, #1
 1988 0014 03D0     		beq	.L124
 887:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     SPDIFRX_ReceiveDataFlow_IT(hspdif);
 1989              		.loc 1 887 0 is_stmt 1
 1990 0016 0122     		movs	r2, #1
 1991 0018 DA60     		str	r2, [r3, #12]
 888:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 1992              		.loc 1 888 0
 1993 001a FFF7FEFF 		bl	SPDIFRX_ReceiveDataFlow_IT
 1994              	.LVL163:
 1995              	.L124:
 892:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 1996              		.loc 1 892 0
 1997 001e 2368     		ldr	r3, [r4]
 1998 0020 9A68     		ldr	r2, [r3, #8]
 1999 0022 12F0020F 		tst	r2, #2
 2000 0026 08D0     		beq	.L125
 892:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 2001              		.loc 1 892 0 is_stmt 0 discriminator 1
 2002 0028 5A68     		ldr	r2, [r3, #4]
 2003 002a 12F0020F 		tst	r2, #2
 2004 002e 04D0     		beq	.L125
 894:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     SPDIFRX_ReceiveControlFlow_IT(hspdif);
 2005              		.loc 1 894 0 is_stmt 1
 2006 0030 0222     		movs	r2, #2
 2007 0032 DA60     		str	r2, [r3, #12]
 895:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   }
 2008              		.loc 1 895 0
 2009 0034 2046     		mov	r0, r4
 2010 0036 FFF7FEFF 		bl	SPDIFRX_ReceiveControlFlow_IT
 2011              	.LVL164:
 2012              	.L125:
 899:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 2013              		.loc 1 899 0
 2014 003a 2368     		ldr	r3, [r4]
 2015 003c 9A68     		ldr	r2, [r3, #8]
 2016 003e 12F0080F 		tst	r2, #8
 2017 0042 0CD0     		beq	.L126
ARM GAS  /tmp/ccqWchYQ.s 			page 63


 899:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 2018              		.loc 1 899 0 is_stmt 0 discriminator 1
 2019 0044 5A68     		ldr	r2, [r3, #4]
 2020 0046 12F0080F 		tst	r2, #8
 2021 004a 08D0     		beq	.L126
 901:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 2022              		.loc 1 901 0 is_stmt 1
 2023 004c 0822     		movs	r2, #8
 2024 004e DA60     		str	r2, [r3, #12]
 904:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 2025              		.loc 1 904 0
 2026 0050 A36C     		ldr	r3, [r4, #72]
 2027 0052 43F00203 		orr	r3, r3, #2
 2028 0056 A364     		str	r3, [r4, #72]
 907:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   } 
 2029              		.loc 1 907 0
 2030 0058 2046     		mov	r0, r4
 2031 005a FFF7FEFF 		bl	HAL_SPDIFRX_ErrorCallback
 2032              	.LVL165:
 2033              	.L126:
 911:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 2034              		.loc 1 911 0
 2035 005e 2368     		ldr	r3, [r4]
 2036 0060 9A68     		ldr	r2, [r3, #8]
 2037 0062 12F0040F 		tst	r2, #4
 2038 0066 0BD0     		beq	.L123
 911:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   {
 2039              		.loc 1 911 0 is_stmt 0 discriminator 1
 2040 0068 5A68     		ldr	r2, [r3, #4]
 2041 006a 12F0040F 		tst	r2, #4
 2042 006e 07D0     		beq	.L123
 913:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 2043              		.loc 1 913 0 is_stmt 1
 2044 0070 0422     		movs	r2, #4
 2045 0072 DA60     		str	r2, [r3, #12]
 916:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****     
 2046              		.loc 1 916 0
 2047 0074 A36C     		ldr	r3, [r4, #72]
 2048 0076 1343     		orrs	r3, r3, r2
 2049 0078 A364     		str	r3, [r4, #72]
 919:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   } 
 2050              		.loc 1 919 0
 2051 007a 2046     		mov	r0, r4
 2052 007c FFF7FEFF 		bl	HAL_SPDIFRX_ErrorCallback
 2053              	.LVL166:
 2054              	.L123:
 2055 0080 10BD     		pop	{r4, pc}
 2056              		.cfi_endproc
 2057              	.LFE148:
 2059 0082 00BF     		.section	.text.HAL_SPDIFRX_GetState,"ax",%progbits
 2060              		.align	2
 2061              		.global	HAL_SPDIFRX_GetState
 2062              		.thumb
 2063              		.thumb_func
 2065              	HAL_SPDIFRX_GetState:
 2066              	.LFB154:
1023:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   return hspdif->State;
ARM GAS  /tmp/ccqWchYQ.s 			page 64


 2067              		.loc 1 1023 0
 2068              		.cfi_startproc
 2069              		@ args = 0, pretend = 0, frame = 0
 2070              		@ frame_needed = 0, uses_anonymous_args = 0
 2071              		@ link register save eliminated.
 2072              	.LVL167:
1024:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 2073              		.loc 1 1024 0
 2074 0000 90F84500 		ldrb	r0, [r0, #69]	@ zero_extendqisi2
 2075              	.LVL168:
1025:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 2076              		.loc 1 1025 0
 2077 0004 7047     		bx	lr
 2078              		.cfi_endproc
 2079              	.LFE154:
 2081 0006 00BF     		.section	.text.HAL_SPDIFRX_GetError,"ax",%progbits
 2082              		.align	2
 2083              		.global	HAL_SPDIFRX_GetError
 2084              		.thumb
 2085              		.thumb_func
 2087              	HAL_SPDIFRX_GetError:
 2088              	.LFB155:
1033:HALLIB/Src/stm32f7xx_hal_spdifrx.c ****   return hspdif->ErrorCode;
 2089              		.loc 1 1033 0
 2090              		.cfi_startproc
 2091              		@ args = 0, pretend = 0, frame = 0
 2092              		@ frame_needed = 0, uses_anonymous_args = 0
 2093              		@ link register save eliminated.
 2094              	.LVL169:
1034:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** }
 2095              		.loc 1 1034 0
 2096 0000 806C     		ldr	r0, [r0, #72]
 2097              	.LVL170:
1035:HALLIB/Src/stm32f7xx_hal_spdifrx.c **** 
 2098              		.loc 1 1035 0
 2099 0002 7047     		bx	lr
 2100              		.cfi_endproc
 2101              	.LFE155:
 2103              		.text
 2104              	.Letext0:
 2105              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 2106              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 2107              		.file 4 "Inc/stm32f767xx.h"
 2108              		.file 5 "Inc/stm32f7xx.h"
 2109              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 2110              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 2111              		.file 8 "HALLIB/Inc/stm32f7xx_hal_spdifrx.h"
 2112              		.file 9 "HALLIB/Inc/stm32f7xx_hal.h"
 2113              		.file 10 "CORE/core_cm7.h"
ARM GAS  /tmp/ccqWchYQ.s 			page 65


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_spdifrx.c
     /tmp/ccqWchYQ.s:21     .text.SPDIFRX_WaitOnFlagUntilTimeout:00000000 $t
     /tmp/ccqWchYQ.s:25     .text.SPDIFRX_WaitOnFlagUntilTimeout:00000000 SPDIFRX_WaitOnFlagUntilTimeout
     /tmp/ccqWchYQ.s:218    .text.HAL_SPDIFRX_MspInit:00000000 $t
     /tmp/ccqWchYQ.s:223    .text.HAL_SPDIFRX_MspInit:00000000 HAL_SPDIFRX_MspInit
     /tmp/ccqWchYQ.s:236    .text.HAL_SPDIFRX_Init:00000000 $t
     /tmp/ccqWchYQ.s:241    .text.HAL_SPDIFRX_Init:00000000 HAL_SPDIFRX_Init
     /tmp/ccqWchYQ.s:349    .text.HAL_SPDIFRX_Init:00000070 $d
     /tmp/ccqWchYQ.s:354    .text.HAL_SPDIFRX_MspDeInit:00000000 $t
     /tmp/ccqWchYQ.s:359    .text.HAL_SPDIFRX_MspDeInit:00000000 HAL_SPDIFRX_MspDeInit
     /tmp/ccqWchYQ.s:372    .text.HAL_SPDIFRX_DeInit:00000000 $t
     /tmp/ccqWchYQ.s:377    .text.HAL_SPDIFRX_DeInit:00000000 HAL_SPDIFRX_DeInit
     /tmp/ccqWchYQ.s:427    .text.HAL_SPDIFRX_SetDataFormat:00000000 $t
     /tmp/ccqWchYQ.s:432    .text.HAL_SPDIFRX_SetDataFormat:00000000 HAL_SPDIFRX_SetDataFormat
     /tmp/ccqWchYQ.s:532    .text.HAL_SPDIFRX_ReceiveDataFlow:00000000 $t
     /tmp/ccqWchYQ.s:537    .text.HAL_SPDIFRX_ReceiveDataFlow:00000000 HAL_SPDIFRX_ReceiveDataFlow
     /tmp/ccqWchYQ.s:686    .text.HAL_SPDIFRX_ReceiveControlFlow:00000000 $t
     /tmp/ccqWchYQ.s:691    .text.HAL_SPDIFRX_ReceiveControlFlow:00000000 HAL_SPDIFRX_ReceiveControlFlow
     /tmp/ccqWchYQ.s:840    .text.HAL_SPDIFRX_ReceiveDataFlow_IT:00000000 $t
     /tmp/ccqWchYQ.s:845    .text.HAL_SPDIFRX_ReceiveDataFlow_IT:00000000 HAL_SPDIFRX_ReceiveDataFlow_IT
     /tmp/ccqWchYQ.s:991    .text.HAL_SPDIFRX_ReceiveControlFlow_IT:00000000 $t
     /tmp/ccqWchYQ.s:996    .text.HAL_SPDIFRX_ReceiveControlFlow_IT:00000000 HAL_SPDIFRX_ReceiveControlFlow_IT
     /tmp/ccqWchYQ.s:1142   .text.HAL_SPDIFRX_ReceiveDataFlow_DMA:00000000 $t
     /tmp/ccqWchYQ.s:1147   .text.HAL_SPDIFRX_ReceiveDataFlow_DMA:00000000 HAL_SPDIFRX_ReceiveDataFlow_DMA
     /tmp/ccqWchYQ.s:1313   .text.HAL_SPDIFRX_ReceiveDataFlow_DMA:000000cc $d
     /tmp/ccqWchYQ.s:1592   .text.SPDIFRX_DMARxHalfCplt:00000000 SPDIFRX_DMARxHalfCplt
     /tmp/ccqWchYQ.s:1638   .text.SPDIFRX_DMARxCplt:00000000 SPDIFRX_DMARxCplt
     /tmp/ccqWchYQ.s:1920   .text.SPDIFRX_DMAError:00000000 SPDIFRX_DMAError
     /tmp/ccqWchYQ.s:1320   .text.HAL_SPDIFRX_ReceiveControlFlow_DMA:00000000 $t
     /tmp/ccqWchYQ.s:1325   .text.HAL_SPDIFRX_ReceiveControlFlow_DMA:00000000 HAL_SPDIFRX_ReceiveControlFlow_DMA
     /tmp/ccqWchYQ.s:1491   .text.HAL_SPDIFRX_ReceiveControlFlow_DMA:000000cc $d
     /tmp/ccqWchYQ.s:1760   .text.SPDIFRX_DMACxHalfCplt:00000000 SPDIFRX_DMACxHalfCplt
     /tmp/ccqWchYQ.s:1806   .text.SPDIFRX_DMACxCplt:00000000 SPDIFRX_DMACxCplt
     /tmp/ccqWchYQ.s:1498   .text.HAL_SPDIFRX_DMAStop:00000000 $t
     /tmp/ccqWchYQ.s:1503   .text.HAL_SPDIFRX_DMAStop:00000000 HAL_SPDIFRX_DMAStop
     /tmp/ccqWchYQ.s:1570   .text.HAL_SPDIFRX_RxHalfCpltCallback:00000000 $t
     /tmp/ccqWchYQ.s:1575   .text.HAL_SPDIFRX_RxHalfCpltCallback:00000000 HAL_SPDIFRX_RxHalfCpltCallback
     /tmp/ccqWchYQ.s:1588   .text.SPDIFRX_DMARxHalfCplt:00000000 $t
     /tmp/ccqWchYQ.s:1616   .text.HAL_SPDIFRX_RxCpltCallback:00000000 $t
     /tmp/ccqWchYQ.s:1621   .text.HAL_SPDIFRX_RxCpltCallback:00000000 HAL_SPDIFRX_RxCpltCallback
     /tmp/ccqWchYQ.s:1634   .text.SPDIFRX_DMARxCplt:00000000 $t
     /tmp/ccqWchYQ.s:1683   .text.SPDIFRX_ReceiveDataFlow_IT:00000000 $t
     /tmp/ccqWchYQ.s:1687   .text.SPDIFRX_ReceiveDataFlow_IT:00000000 SPDIFRX_ReceiveDataFlow_IT
     /tmp/ccqWchYQ.s:1738   .text.HAL_SPDIFRX_CxHalfCpltCallback:00000000 $t
     /tmp/ccqWchYQ.s:1743   .text.HAL_SPDIFRX_CxHalfCpltCallback:00000000 HAL_SPDIFRX_CxHalfCpltCallback
     /tmp/ccqWchYQ.s:1756   .text.SPDIFRX_DMACxHalfCplt:00000000 $t
     /tmp/ccqWchYQ.s:1784   .text.HAL_SPDIFRX_CxCpltCallback:00000000 $t
     /tmp/ccqWchYQ.s:1789   .text.HAL_SPDIFRX_CxCpltCallback:00000000 HAL_SPDIFRX_CxCpltCallback
     /tmp/ccqWchYQ.s:1802   .text.SPDIFRX_DMACxCplt:00000000 $t
     /tmp/ccqWchYQ.s:1843   .text.SPDIFRX_ReceiveControlFlow_IT:00000000 $t
     /tmp/ccqWchYQ.s:1847   .text.SPDIFRX_ReceiveControlFlow_IT:00000000 SPDIFRX_ReceiveControlFlow_IT
     /tmp/ccqWchYQ.s:1898   .text.HAL_SPDIFRX_ErrorCallback:00000000 $t
     /tmp/ccqWchYQ.s:1903   .text.HAL_SPDIFRX_ErrorCallback:00000000 HAL_SPDIFRX_ErrorCallback
     /tmp/ccqWchYQ.s:1916   .text.SPDIFRX_DMAError:00000000 $t
     /tmp/ccqWchYQ.s:1962   .text.HAL_SPDIFRX_IRQHandler:00000000 $t
     /tmp/ccqWchYQ.s:1967   .text.HAL_SPDIFRX_IRQHandler:00000000 HAL_SPDIFRX_IRQHandler
ARM GAS  /tmp/ccqWchYQ.s 			page 66


     /tmp/ccqWchYQ.s:2060   .text.HAL_SPDIFRX_GetState:00000000 $t
     /tmp/ccqWchYQ.s:2065   .text.HAL_SPDIFRX_GetState:00000000 HAL_SPDIFRX_GetState
     /tmp/ccqWchYQ.s:2082   .text.HAL_SPDIFRX_GetError:00000000 $t
     /tmp/ccqWchYQ.s:2087   .text.HAL_SPDIFRX_GetError:00000000 HAL_SPDIFRX_GetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
