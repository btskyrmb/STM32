ARM GAS  /tmp/cc9dopSr.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_rtc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
  21              		.align	2
  22              		.weak	HAL_RTC_MspInit
  23              		.thumb
  24              		.thumb_func
  26              	HAL_RTC_MspInit:
  27              	.LFB138:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal_rtc.c"
   1:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @file    stm32f7xx_hal_rtc.c
   4:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *          functionalities of the Real Time Clock (RTC) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *           + RTC Time and Date functions
  10:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *           + RTC Alarm functions
  11:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *           + Peripheral Control functions   
  12:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *           + Peripheral State functions
  13:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *         
  14:HALLIB/Src/stm32f7xx_hal_rtc.c ****   @verbatim
  15:HALLIB/Src/stm32f7xx_hal_rtc.c ****   ==============================================================================
  16:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ##### Backup Domain Operating Condition #####
  17:HALLIB/Src/stm32f7xx_hal_rtc.c ****   ==============================================================================
  18:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  19:HALLIB/Src/stm32f7xx_hal_rtc.c ****        SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  20:HALLIB/Src/stm32f7xx_hal_rtc.c ****        VDD supply is powered off.
  21:HALLIB/Src/stm32f7xx_hal_rtc.c ****        To retain the content of the RTC backup registers, backup SRAM, and supply 
  22:HALLIB/Src/stm32f7xx_hal_rtc.c ****        the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  23:HALLIB/Src/stm32f7xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  24:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
  25:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] To allow the RTC operating even when the main digital supply (VDD) is turned
  26:HALLIB/Src/stm32f7xx_hal_rtc.c ****        off, the VBAT pin powers the following blocks:
  27:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) The RTC
  28:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) The LSE oscillator
  29:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) The backup SRAM when the low power backup regulator is enabled
  30:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
ARM GAS  /tmp/cc9dopSr.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
  32:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  33:HALLIB/Src/stm32f7xx_hal_rtc.c ****        the following pins are available:
  34:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as either GPIO or LSE pins
  35:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  36:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  37:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
  38:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  39:HALLIB/Src/stm32f7xx_hal_rtc.c ****        because VDD is not present), the following pins are available:
  40:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as LSE pins only
  41:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 can be used as the RTC_AF1 pin 
  42:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) PI8 can be used as the RTC_AF2 pin
  43:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) PC1 can be used as the RTC_AF3 pin
  44:HALLIB/Src/stm32f7xx_hal_rtc.c ****              
  45:HALLIB/Src/stm32f7xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  46:HALLIB/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  47:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  48:HALLIB/Src/stm32f7xx_hal_rtc.c ****        to their reset values. The BKPSRAM is not affected by this reset. The only
  49:HALLIB/Src/stm32f7xx_hal_rtc.c ****        way to reset the BKPSRAM is through the Flash interface by requesting 
  50:HALLIB/Src/stm32f7xx_hal_rtc.c ****        a protection level change from 1 to 0.
  51:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] A backup domain reset is generated when one of the following events occurs:
  52:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the 
  53:HALLIB/Src/stm32f7xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR). 
  54:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.  
  55:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
  56:HALLIB/Src/stm32f7xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  57:HALLIB/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  58:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data 
  59:HALLIB/Src/stm32f7xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write 
  60:HALLIB/Src/stm32f7xx_hal_rtc.c ****        accesses. 
  61:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  62:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (+) Enable the Power Controller (PWR) APB1 interface clock using the
  63:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_RCC_PWR_CLK_ENABLE() function.
  64:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  65:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (+) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() function.
  66:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (+) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() function.
  67:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
  68:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
  69:HALLIB/Src/stm32f7xx_hal_rtc.c ****                   ##### How to use this driver #####
  70:HALLIB/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  71:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] 
  72:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  73:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  74:HALLIB/Src/stm32f7xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  75:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
  76:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *** Time and Date configuration ***
  77:HALLIB/Src/stm32f7xx_hal_rtc.c ****   ===================================
  78:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] 
  79:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime() 
  80:HALLIB/Src/stm32f7xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  81:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions. 
  82:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
  83:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *** Alarm configuration ***
  84:HALLIB/Src/stm32f7xx_hal_rtc.c ****   ===========================
  85:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..]
  86:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function. 
  87:HALLIB/Src/stm32f7xx_hal_rtc.c ****         You can also configure the RTC Alarm with interrupt mode using the HAL_RTC_SetAlarm_IT() fu
ARM GAS  /tmp/cc9dopSr.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  89:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
  90:HALLIB/Src/stm32f7xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  91:HALLIB/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  92:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate 
  93:HALLIB/Src/stm32f7xx_hal_rtc.c ****        function.
  94:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
  95:HALLIB/Src/stm32f7xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
  96:HALLIB/Src/stm32f7xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and 
  97:HALLIB/Src/stm32f7xx_hal_rtc.c ****        Standby low power modes.
  98:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending 
  99:HALLIB/Src/stm32f7xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 100:HALLIB/Src/stm32f7xx_hal_rtc.c ****        or the RTC wakeup events.
 101:HALLIB/Src/stm32f7xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the 
 102:HALLIB/Src/stm32f7xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
 103:HALLIB/Src/stm32f7xx_hal_rtc.c ****        Wakeup from STOP and STANDBY modes is possible only when the RTC clock source
 104:HALLIB/Src/stm32f7xx_hal_rtc.c ****        is LSE or LSI.
 105:HALLIB/Src/stm32f7xx_hal_rtc.c ****      
 106:HALLIB/Src/stm32f7xx_hal_rtc.c ****    @endverbatim
 107:HALLIB/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
 108:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @attention
 109:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *
 110:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 111:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *
 112:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 113:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * are permitted provided that the following conditions are met:
 114:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 115:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer.
 116:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 117:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer in the documentation
 118:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *      and/or other materials provided with the distribution.
 119:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 120:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *      may be used to endorse or promote products derived from this software
 121:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *      without specific prior written permission.
 122:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *
 123:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 124:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 125:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 126:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 127:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 128:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 129:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 130:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 131:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 132:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 133:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *
 134:HALLIB/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
 135:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */ 
 136:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 137:HALLIB/Src/stm32f7xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 138:HALLIB/Src/stm32f7xx_hal_rtc.c **** #include "stm32f7xx_hal.h"
 139:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 140:HALLIB/Src/stm32f7xx_hal_rtc.c **** /** @addtogroup STM32F7xx_HAL_Driver
 141:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @{
 142:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 143:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 144:HALLIB/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC RTC
ARM GAS  /tmp/cc9dopSr.s 			page 4


 145:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief RTC HAL module driver
 146:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @{
 147:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 148:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 149:HALLIB/Src/stm32f7xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 150:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 151:HALLIB/Src/stm32f7xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 152:HALLIB/Src/stm32f7xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 153:HALLIB/Src/stm32f7xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 154:HALLIB/Src/stm32f7xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 155:HALLIB/Src/stm32f7xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 156:HALLIB/Src/stm32f7xx_hal_rtc.c **** /* Private functions ---------------------------------------------------------*/
 157:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 158:HALLIB/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions RTC Exported Functions
 159:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @{
 160:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 161:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 162:HALLIB/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group1 Initialization and de-initialization functions 
 163:HALLIB/Src/stm32f7xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions 
 164:HALLIB/Src/stm32f7xx_hal_rtc.c ****  *
 165:HALLIB/Src/stm32f7xx_hal_rtc.c **** @verbatim    
 166:HALLIB/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 167:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 168:HALLIB/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 169:HALLIB/Src/stm32f7xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the 
 170:HALLIB/Src/stm32f7xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable 
 171:HALLIB/Src/stm32f7xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode, 
 172:HALLIB/Src/stm32f7xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 173:HALLIB/Src/stm32f7xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. 
 174:HALLIB/Src/stm32f7xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 175:HALLIB/Src/stm32f7xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 13-bit synchronous prescaler.
 176:HALLIB/Src/stm32f7xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the 
 177:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 178:HALLIB/Src/stm32f7xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 179:HALLIB/Src/stm32f7xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 180:HALLIB/Src/stm32f7xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter 
 181:HALLIB/Src/stm32f7xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped 
 182:HALLIB/Src/stm32f7xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is 
 183:HALLIB/Src/stm32f7xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 184:HALLIB/Src/stm32f7xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar 
 185:HALLIB/Src/stm32f7xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes 
 186:HALLIB/Src/stm32f7xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then 
 187:HALLIB/Src/stm32f7xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means 
 188:HALLIB/Src/stm32f7xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the 
 189:HALLIB/Src/stm32f7xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function 
 190:HALLIB/Src/stm32f7xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 191:HALLIB/Src/stm32f7xx_hal_rtc.c ****  
 192:HALLIB/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 193:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @{
 194:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 195:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 196:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 197:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Initializes the RTC peripheral 
 198:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 199:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 200:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 201:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
ARM GAS  /tmp/cc9dopSr.s 			page 5


 202:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 203:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 204:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 205:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(hrtc == NULL)
 206:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 207:HALLIB/Src/stm32f7xx_hal_rtc.c ****      return HAL_ERROR;
 208:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 209:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 210:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 211:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 212:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 213:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 214:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 215:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 216:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 217:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 218:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 219:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(hrtc->State == HAL_RTC_STATE_RESET)
 220:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 221:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 222:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
 223:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Initialize RTC MSP */
 224:HALLIB/Src/stm32f7xx_hal_rtc.c ****     HAL_RTC_MspInit(hrtc);
 225:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 226:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 227:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Set RTC state */  
 228:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;  
 229:HALLIB/Src/stm32f7xx_hal_rtc.c ****        
 230:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 231:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 232:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 233:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 234:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 235:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 236:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 237:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 238:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 239:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 240:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 241:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 242:HALLIB/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 243:HALLIB/Src/stm32f7xx_hal_rtc.c ****   } 
 244:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
 245:HALLIB/Src/stm32f7xx_hal_rtc.c ****   { 
 246:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Clear RTC_CR FMT, OSEL and POL Bits */
 247:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 248:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC_CR register */
 249:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutP
 250:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 251:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the RTC PRER */
 252:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 253:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 254:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 255:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 256:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 257:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 258:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
ARM GAS  /tmp/cc9dopSr.s 			page 6


 259:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 260:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 261:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 262:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 263:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 264:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 265:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 266:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 267:HALLIB/Src/stm32f7xx_hal_rtc.c ****     return HAL_OK;
 268:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 269:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 270:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 271:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 272:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  DeInitializes the RTC peripheral 
 273:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 274:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 275:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.   
 276:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 277:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 278:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 279:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 280:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 281:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 282:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 283:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 284:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 285:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Set RTC state */
 286:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 287:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 288:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 289:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 290:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 291:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 292:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 293:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 294:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 295:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 296:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 297:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 298:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 299:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 300:HALLIB/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 301:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }  
 302:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
 303:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 304:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Reset TR, DR and CR registers */
 305:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)0x00000000;
 306:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)0x00002101;
 307:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 308:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000007;
 309:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 310:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 311:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 312:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 313:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Wait till WUTWF flag is set and if Time out is reached exit */
 314:HALLIB/Src/stm32f7xx_hal_rtc.c ****     while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 315:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
ARM GAS  /tmp/cc9dopSr.s 			page 7


 316:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 317:HALLIB/Src/stm32f7xx_hal_rtc.c ****       { 
 318:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 319:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 320:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 321:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Set RTC state */
 322:HALLIB/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 323:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 324:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 325:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }      
 326:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 327:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 328:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Reset all RTC CR register bits */
 329:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000000;
 330:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->WUTR = (uint32_t)0x0000FFFF;
 331:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)0x007F00FF;
 332:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)0x00000000;
 333:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)0x00000000;
 334:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->SHIFTR = (uint32_t)0x00000000;
 335:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CALR = (uint32_t)0x00000000;
 336:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = (uint32_t)0x00000000;
 337:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = (uint32_t)0x00000000;
 338:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 339:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Reset ISR register and exit initialization mode */
 340:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)0x00000000;
 341:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 342:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
 343:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TAMPCR = 0x00000000;
 344:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 345:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Reset Option register */
 346:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR = 0x00000000;
 347:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 348:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 349:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 350:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 351:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 352:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
 353:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 354:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 355:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 356:HALLIB/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 357:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 358:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 359:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }
 360:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }    
 361:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 362:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 363:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 364:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 365:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 366:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* De-Initialize RTC MSP */
 367:HALLIB/Src/stm32f7xx_hal_rtc.c ****   HAL_RTC_MspDeInit(hrtc);
 368:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 369:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_RESET; 
 370:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 371:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Release Lock */
 372:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
ARM GAS  /tmp/cc9dopSr.s 			page 8


 373:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 374:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 375:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 376:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 377:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 378:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Initializes the RTC MSP.
 379:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 380:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.  
 381:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval None
 382:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 383:HALLIB/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
 384:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
  29              		.loc 1 384 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE138:
  39 0002 00BF     		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
  40              		.align	2
  41              		.weak	HAL_RTC_MspDeInit
  42              		.thumb
  43              		.thumb_func
  45              	HAL_RTC_MspDeInit:
  46              	.LFB139:
 385:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 386:HALLIB/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
 387:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 388:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 389:HALLIB/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 390:HALLIB/Src/stm32f7xx_hal_rtc.c ****    */ 
 391:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 392:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 393:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 394:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  DeInitializes the RTC MSP.
 395:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 396:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC. 
 397:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval None
 398:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 399:HALLIB/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
 400:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
  47              		.loc 1 400 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.LVL1:
  53 0000 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE139:
  57 0002 00BF     		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
  58              		.align	2
  59              		.global	HAL_RTC_DeactivateAlarm
  60              		.thumb
ARM GAS  /tmp/cc9dopSr.s 			page 9


  61              		.thumb_func
  63              	HAL_RTC_DeactivateAlarm:
  64              	.LFB146:
 401:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 402:HALLIB/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
 403:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 404:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 405:HALLIB/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 406:HALLIB/Src/stm32f7xx_hal_rtc.c ****    */ 
 407:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 408:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 409:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 410:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @}
 411:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 412:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 413:HALLIB/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group2 RTC Time and Date functions
 414:HALLIB/Src/stm32f7xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 415:HALLIB/Src/stm32f7xx_hal_rtc.c ****  *
 416:HALLIB/Src/stm32f7xx_hal_rtc.c **** @verbatim   
 417:HALLIB/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 418:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 419:HALLIB/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
 420:HALLIB/Src/stm32f7xx_hal_rtc.c ****  
 421:HALLIB/Src/stm32f7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 422:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 423:HALLIB/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 424:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @{
 425:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 426:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 427:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 428:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets RTC current time.
 429:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 430:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 431:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 432:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 433:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 434:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *            @arg FORMAT_BIN: Binary data format 
 435:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *            @arg FORMAT_BCD: BCD data format
 436:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 437:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 438:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 439:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 440:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 441:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 442:HALLIB/Src/stm32f7xx_hal_rtc.c ****  /* Check the parameters */
 443:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 444:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 445:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 446:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 447:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
 448:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 449:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 450:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 451:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 452:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 453:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 454:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
ARM GAS  /tmp/cc9dopSr.s 			page 10


 455:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 456:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sTime->Hours));
 457:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 458:HALLIB/Src/stm32f7xx_hal_rtc.c ****     } 
 459:HALLIB/Src/stm32f7xx_hal_rtc.c ****     else
 460:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 461:HALLIB/Src/stm32f7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 462:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 463:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 464:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 465:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 466:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 467:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 468:HALLIB/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 469:HALLIB/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 470:HALLIB/Src/stm32f7xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16));  
 471:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 472:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
 473:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 474:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 475:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 476:HALLIB/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 477:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 478:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
 479:HALLIB/Src/stm32f7xx_hal_rtc.c ****     } 
 480:HALLIB/Src/stm32f7xx_hal_rtc.c ****     else
 481:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 482:HALLIB/Src/stm32f7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 483:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 484:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 485:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 486:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 487:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 488:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 489:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 490:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16));   
 491:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 492:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 493:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 494:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 495:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 496:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 497:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 498:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 499:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 500:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 501:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 502:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 503:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 504:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 505:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 506:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 507:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 508:HALLIB/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 509:HALLIB/Src/stm32f7xx_hal_rtc.c ****   } 
 510:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
 511:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
ARM GAS  /tmp/cc9dopSr.s 			page 11


 512:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Set the RTC_TR register */
 513:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 514:HALLIB/Src/stm32f7xx_hal_rtc.c ****      
 515:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Clear the bits to be configured */
 516:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 517:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 518:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the RTC_CR register */
 519:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 520:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 521:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 522:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 523:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 524:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 525:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 526:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 527:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 528:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {        
 529:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 530:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 531:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 532:HALLIB/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 533:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 534:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 535:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 536:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 537:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 538:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }
 539:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 540:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 541:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 542:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 543:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 544:HALLIB/Src/stm32f7xx_hal_rtc.c ****    hrtc->State = HAL_RTC_STATE_READY;
 545:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 546:HALLIB/Src/stm32f7xx_hal_rtc.c ****    __HAL_UNLOCK(hrtc); 
 547:HALLIB/Src/stm32f7xx_hal_rtc.c ****      
 548:HALLIB/Src/stm32f7xx_hal_rtc.c ****    return HAL_OK;
 549:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 550:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 551:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 552:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 553:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets RTC current time.
 554:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 555:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure with Hours, Minutes and Seconds fields returned 
 556:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                with input format (BIN or BCD), also SubSeconds field returning the
 557:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
 558:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                factor to be used for second fraction ratio computation.
 559:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 560:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 561:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 562:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 563:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 564:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 565:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 566:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 567:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 568:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
ARM GAS  /tmp/cc9dopSr.s 			page 12


 569:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
 570:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
 571:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 572:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 573:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 574:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 575:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 576:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 577:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 578:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 579:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 580:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 581:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 582:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 583:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 584:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 585:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 586:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Get the TR register */
 587:HALLIB/Src/stm32f7xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 588:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 589:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 590:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 591:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 592:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 593:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 594:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 595:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the input parameters format */
 596:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 597:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 598:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 599:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 600:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 601:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 602:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 603:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 604:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 605:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 606:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 607:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 608:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets RTC current date.
 609:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 610:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 611:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 612:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
 613:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 614:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 615:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 616:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 617:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 618:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 619:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 620:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 621:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 622:HALLIB/Src/stm32f7xx_hal_rtc.c ****  /* Check the parameters */
 623:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 624:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 625:HALLIB/Src/stm32f7xx_hal_rtc.c ****  /* Process Locked */ 
ARM GAS  /tmp/cc9dopSr.s 			page 13


 626:HALLIB/Src/stm32f7xx_hal_rtc.c ****  __HAL_LOCK(hrtc);
 627:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 628:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 629:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 630:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 631:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 632:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 633:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 634:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 635:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 636:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 637:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 638:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {   
 639:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 640:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 641:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date)); 
 642:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 643:HALLIB/Src/stm32f7xx_hal_rtc.c ****    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 644:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 645:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 646:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << 13));   
 647:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 648:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
 649:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {   
 650:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 651:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 652:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
 653:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 654:HALLIB/Src/stm32f7xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 655:HALLIB/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 656:HALLIB/Src/stm32f7xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 657:HALLIB/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13));  
 658:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 659:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 660:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 661:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 662:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 663:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 664:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 665:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 666:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 667:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 668:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 669:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state*/
 670:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 671:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 672:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 673:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 674:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 675:HALLIB/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 676:HALLIB/Src/stm32f7xx_hal_rtc.c ****   } 
 677:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
 678:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 679:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Set the RTC_DR register */
 680:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 681:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 682:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
ARM GAS  /tmp/cc9dopSr.s 			page 14


 683:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 684:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 685:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 686:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 687:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 688:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 689:HALLIB/Src/stm32f7xx_hal_rtc.c ****       { 
 690:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 691:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 692:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 693:HALLIB/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 694:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 695:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 696:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 697:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 698:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 699:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }
 700:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 701:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 702:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 703:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 704:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 705:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
 706:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 707:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 708:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 709:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 710:HALLIB/Src/stm32f7xx_hal_rtc.c ****     return HAL_OK;    
 711:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 712:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 713:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 714:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 715:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets RTC current date.
 716:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 717:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 718:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
 719:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 720:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 721:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format 
 722:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
 723:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @note You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 724:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * in the higher-order calendar shadow registers to ensure consistency between the time and date v
 725:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * Reading RTC current time locks the values in calendar shadow registers until Current date is re
 726:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 727:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 728:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 729:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 730:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 731:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 732:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 733:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 734:HALLIB/Src/stm32f7xx_hal_rtc.c ****           
 735:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Get the DR register */
 736:HALLIB/Src/stm32f7xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 737:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 738:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 739:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
ARM GAS  /tmp/cc9dopSr.s 			page 15


 740:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 741:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 742:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 743:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 744:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the input parameters format */
 745:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 746:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {    
 747:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
 748:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 749:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 750:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 751:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 752:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 753:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 754:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 755:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 756:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @}
 757:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 758:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 759:HALLIB/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group3 RTC Alarm functions
 760:HALLIB/Src/stm32f7xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
 761:HALLIB/Src/stm32f7xx_hal_rtc.c ****  *
 762:HALLIB/Src/stm32f7xx_hal_rtc.c **** @verbatim   
 763:HALLIB/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 764:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
 765:HALLIB/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
 766:HALLIB/Src/stm32f7xx_hal_rtc.c ****  
 767:HALLIB/Src/stm32f7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
 768:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 769:HALLIB/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 770:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @{
 771:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 772:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 773:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm.
 774:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 775:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 776:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
 777:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 778:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 779:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BIN: Binary data format 
 780:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BCD: BCD data format
 781:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 782:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 783:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
 784:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 785:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 786:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
 787:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 788:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 789:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 790:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 791:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 792:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 793:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 794:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 795:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 796:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
ARM GAS  /tmp/cc9dopSr.s 			page 16


 797:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 798:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 799:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 800:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 801:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 802:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 803:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 804:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 805:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 806:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 807:HALLIB/Src/stm32f7xx_hal_rtc.c ****     } 
 808:HALLIB/Src/stm32f7xx_hal_rtc.c ****     else
 809:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 810:HALLIB/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 811:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 812:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 813:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 814:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 815:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 816:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 817:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 818:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 819:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 820:HALLIB/Src/stm32f7xx_hal_rtc.c ****     else
 821:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 822:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 823:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 824:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 825:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 826:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 827:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 828:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 829:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 830:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 831:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 832:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 833:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
 834:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 835:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 836:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 837:HALLIB/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 838:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 839:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 840:HALLIB/Src/stm32f7xx_hal_rtc.c ****     } 
 841:HALLIB/Src/stm32f7xx_hal_rtc.c ****     else
 842:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 843:HALLIB/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 844:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 845:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 846:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 847:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 848:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 849:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 850:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 851:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 852:HALLIB/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 853:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
ARM GAS  /tmp/cc9dopSr.s 			page 17


 854:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 855:HALLIB/Src/stm32f7xx_hal_rtc.c ****     else
 856:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 857:HALLIB/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 858:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
 859:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }  
 860:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 861:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 862:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 863:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 864:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 865:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 866:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 867:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));   
 868:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 869:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 870:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
 871:HALLIB/Src/stm32f7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 872:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 873:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 874:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 875:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 876:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm register */
 877:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 878:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 879:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
 880:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 881:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 882:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 883:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 884:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 885:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 886:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 887:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 888:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 889:HALLIB/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 890:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 891:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 892:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
 893:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 894:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 895:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 896:HALLIB/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 897:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 898:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 899:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 900:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 901:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 902:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }   
 903:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 904:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 905:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 906:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 907:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 908:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 909:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 910:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
ARM GAS  /tmp/cc9dopSr.s 			page 18


 911:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
 912:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 913:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
 914:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 915:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 916:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 917:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 918:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 919:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 920:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 921:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 922:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 923:HALLIB/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 924:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 925:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 926:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
 927:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 928:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 929:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 930:HALLIB/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 931:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 932:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 933:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 934:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 935:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 936:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }  
 937:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }    
 938:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 939:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 940:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 941:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 942:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 943:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc); 
 944:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 945:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 946:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 947:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 948:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 949:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
 950:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 951:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 952:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
 953:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 954:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 955:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 956:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 957:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 958:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
 959:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm with Interrupt 
 960:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 961:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 962:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
 963:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 964:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 965:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BIN: Binary data format 
 966:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BCD: BCD data format
 967:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
ARM GAS  /tmp/cc9dopSr.s 			page 19


 968:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).   
 969:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.   
 970:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 971:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
 972:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
 973:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 974:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 975:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 976:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 977:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 978:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 979:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 980:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 981:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 982:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 983:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 984:HALLIB/Src/stm32f7xx_hal_rtc.c ****       
 985:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
 986:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 987:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 988:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 989:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 990:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 991:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 992:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 993:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 994:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 995:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 996:HALLIB/Src/stm32f7xx_hal_rtc.c ****     } 
 997:HALLIB/Src/stm32f7xx_hal_rtc.c ****     else
 998:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 999:HALLIB/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1000:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1001:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1002:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1003:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1004:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
1005:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1006:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1007:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1008:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1009:HALLIB/Src/stm32f7xx_hal_rtc.c ****     else
1010:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1011:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1012:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1013:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
1014:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
1015:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
1016:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
1017:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
1018:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1019:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
1020:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1021:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
1022:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1023:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
1024:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
ARM GAS  /tmp/cc9dopSr.s 			page 20


1025:HALLIB/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
1026:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1027:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1028:HALLIB/Src/stm32f7xx_hal_rtc.c ****     } 
1029:HALLIB/Src/stm32f7xx_hal_rtc.c ****     else
1030:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1031:HALLIB/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1032:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1033:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1034:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
1035:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1036:HALLIB/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1037:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
1038:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1039:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1040:HALLIB/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
1041:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1042:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1043:HALLIB/Src/stm32f7xx_hal_rtc.c ****     else
1044:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1045:HALLIB/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
1046:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1047:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1048:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
1049:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
1050:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
1051:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
1052:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
1053:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1054:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));     
1055:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1056:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1057:HALLIB/Src/stm32f7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
1058:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1059:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1060:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1061:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1062:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm register */
1063:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
1064:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1065:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1066:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1067:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1068:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Clear flag alarm A */
1069:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1070:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1071:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1072:HALLIB/Src/stm32f7xx_hal_rtc.c ****     do
1073:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1074:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if (count-- == 0U)
1075:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
1076:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1077:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1078:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1079:HALLIB/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1080:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1081:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
ARM GAS  /tmp/cc9dopSr.s 			page 21


1082:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1083:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1084:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1085:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }
1086:HALLIB/Src/stm32f7xx_hal_rtc.c ****     } 
1087:HALLIB/Src/stm32f7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
1088:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1089:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
1090:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1091:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
1092:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1093:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
1094:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1095:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
1096:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1097:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
1098:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1099:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1100:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
1101:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1102:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Clear flag alarm B */
1103:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
1104:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1105:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1106:HALLIB/Src/stm32f7xx_hal_rtc.c ****     do
1107:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1108:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if (count-- == 0U)
1109:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
1110:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1111:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1112:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1113:HALLIB/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1114:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1115:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
1116:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1117:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1118:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1119:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }
1120:HALLIB/Src/stm32f7xx_hal_rtc.c ****     } 
1121:HALLIB/Src/stm32f7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
1122:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
1123:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
1124:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1125:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
1126:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1127:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
1128:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1129:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
1130:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1131:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1132:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1133:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
1134:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1135:HALLIB/Src/stm32f7xx_hal_rtc.c ****   EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
1136:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1137:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1138:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
ARM GAS  /tmp/cc9dopSr.s 			page 22


1139:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1140:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
1141:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1142:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
1143:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
1144:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1145:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
1146:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
1147:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1148:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1149:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Deactive the specified RTC Alarm 
1150:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1151:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1152:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1153:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1154:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1155:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
1156:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1157:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1158:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1159:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
  65              		.loc 1 1159 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              	.LVL2:
  70              		.loc 1 1159 0
  71 0000 38B5     		push	{r3, r4, r5, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 16
  74              		.cfi_offset 3, -16
  75              		.cfi_offset 4, -12
  76              		.cfi_offset 5, -8
  77              		.cfi_offset 14, -4
  78              	.LVL3:
1160:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
1161:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1162:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1163:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1164:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1165:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
1166:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
  79              		.loc 1 1166 0
  80 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
  81 0004 012B     		cmp	r3, #1
  82 0006 58D0     		beq	.L11
  83 0008 0446     		mov	r4, r0
  84              		.loc 1 1166 0 is_stmt 0 discriminator 2
  85 000a 0123     		movs	r3, #1
  86 000c 0377     		strb	r3, [r0, #28]
1167:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1168:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
  87              		.loc 1 1168 0 is_stmt 1 discriminator 2
  88 000e 0223     		movs	r3, #2
  89 0010 4377     		strb	r3, [r0, #29]
1169:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1170:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
ARM GAS  /tmp/cc9dopSr.s 			page 23


1171:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  90              		.loc 1 1171 0 discriminator 2
  91 0012 0368     		ldr	r3, [r0]
  92 0014 CA22     		movs	r2, #202
  93 0016 5A62     		str	r2, [r3, #36]
  94 0018 0368     		ldr	r3, [r0]
  95 001a 5322     		movs	r2, #83
  96 001c 5A62     		str	r2, [r3, #36]
1172:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1173:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
  97              		.loc 1 1173 0 discriminator 2
  98 001e B1F5807F 		cmp	r1, #256
  99 0022 21D1     		bne	.L5
1174:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1175:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* AlarmA */
1176:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 100              		.loc 1 1176 0
 101 0024 0268     		ldr	r2, [r0]
 102 0026 9368     		ldr	r3, [r2, #8]
 103 0028 23F48073 		bic	r3, r3, #256
 104 002c 9360     		str	r3, [r2, #8]
1177:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
1178:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1179:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 105              		.loc 1 1179 0
 106 002e 0268     		ldr	r2, [r0]
 107 0030 9368     		ldr	r3, [r2, #8]
 108 0032 23F48053 		bic	r3, r3, #4096
 109 0036 9360     		str	r3, [r2, #8]
1180:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1181:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1182:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 110              		.loc 1 1182 0
 111 0038 FFF7FEFF 		bl	HAL_GetTick
 112              	.LVL4:
 113 003c 0546     		mov	r5, r0
 114              	.LVL5:
1183:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1184:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1185:HALLIB/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 115              		.loc 1 1185 0
 116 003e 0DE0     		b	.L6
 117              	.LVL6:
 118              	.L7:
1186:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1187:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 119              		.loc 1 1187 0
 120 0040 FFF7FEFF 		bl	HAL_GetTick
 121              	.LVL7:
 122 0044 401B     		subs	r0, r0, r5
 123 0046 B0F57A7F 		cmp	r0, #1000
 124 004a 07D9     		bls	.L6
1188:HALLIB/Src/stm32f7xx_hal_rtc.c ****       { 
1189:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1190:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 125              		.loc 1 1190 0
 126 004c 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cc9dopSr.s 			page 24


 127 004e FF22     		movs	r2, #255
 128 0050 5A62     		str	r2, [r3, #36]
1191:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
1192:HALLIB/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 129              		.loc 1 1192 0
 130 0052 0320     		movs	r0, #3
 131 0054 6077     		strb	r0, [r4, #29]
1193:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
1194:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
1195:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 132              		.loc 1 1195 0
 133 0056 0023     		movs	r3, #0
 134 0058 2377     		strb	r3, [r4, #28]
1196:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
1197:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 135              		.loc 1 1197 0
 136 005a 38BD     		pop	{r3, r4, r5, pc}
 137              	.LVL8:
 138              	.L6:
1185:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 139              		.loc 1 1185 0
 140 005c 2368     		ldr	r3, [r4]
 141 005e DB68     		ldr	r3, [r3, #12]
 142 0060 13F0010F 		tst	r3, #1
 143 0064 ECD0     		beq	.L7
 144 0066 20E0     		b	.L8
 145              	.LVL9:
 146              	.L5:
1198:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }      
1199:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1200:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1201:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
1202:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1203:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* AlarmB */
1204:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 147              		.loc 1 1204 0
 148 0068 0268     		ldr	r2, [r0]
 149 006a 9368     		ldr	r3, [r2, #8]
 150 006c 23F40073 		bic	r3, r3, #512
 151 0070 9360     		str	r3, [r2, #8]
1205:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
1206:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1207:HALLIB/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 152              		.loc 1 1207 0
 153 0072 0268     		ldr	r2, [r0]
 154 0074 9368     		ldr	r3, [r2, #8]
 155 0076 23F40053 		bic	r3, r3, #8192
 156 007a 9360     		str	r3, [r2, #8]
1208:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1209:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1210:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 157              		.loc 1 1210 0
 158 007c FFF7FEFF 		bl	HAL_GetTick
 159              	.LVL10:
 160 0080 0546     		mov	r5, r0
 161              	.LVL11:
1211:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cc9dopSr.s 			page 25


1212:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1213:HALLIB/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 162              		.loc 1 1213 0
 163 0082 0DE0     		b	.L9
 164              	.LVL12:
 165              	.L10:
1214:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1215:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 166              		.loc 1 1215 0
 167 0084 FFF7FEFF 		bl	HAL_GetTick
 168              	.LVL13:
 169 0088 401B     		subs	r0, r0, r5
 170 008a B0F57A7F 		cmp	r0, #1000
 171 008e 07D9     		bls	.L9
1216:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
1217:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1218:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 172              		.loc 1 1218 0
 173 0090 2368     		ldr	r3, [r4]
 174 0092 FF22     		movs	r2, #255
 175 0094 5A62     		str	r2, [r3, #36]
1219:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
1220:HALLIB/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 176              		.loc 1 1220 0
 177 0096 0320     		movs	r0, #3
 178 0098 6077     		strb	r0, [r4, #29]
1221:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
1222:HALLIB/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
1223:HALLIB/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 179              		.loc 1 1223 0
 180 009a 0023     		movs	r3, #0
 181 009c 2377     		strb	r3, [r4, #28]
1224:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
1225:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 182              		.loc 1 1225 0
 183 009e 38BD     		pop	{r3, r4, r5, pc}
 184              	.LVL14:
 185              	.L9:
1213:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 186              		.loc 1 1213 0
 187 00a0 2368     		ldr	r3, [r4]
 188 00a2 DB68     		ldr	r3, [r3, #12]
 189 00a4 13F0020F 		tst	r3, #2
 190 00a8 ECD0     		beq	.L10
 191              	.L8:
1226:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }    
1227:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1228:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1229:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1230:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 192              		.loc 1 1230 0
 193 00aa 2368     		ldr	r3, [r4]
 194 00ac FF22     		movs	r2, #255
 195 00ae 5A62     		str	r2, [r3, #36]
1231:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1232:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 196              		.loc 1 1232 0
ARM GAS  /tmp/cc9dopSr.s 			page 26


 197 00b0 0123     		movs	r3, #1
 198 00b2 6377     		strb	r3, [r4, #29]
1233:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1234:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
1235:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 199              		.loc 1 1235 0
 200 00b4 0020     		movs	r0, #0
 201 00b6 2077     		strb	r0, [r4, #28]
1236:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1237:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK; 
 202              		.loc 1 1237 0
 203 00b8 38BD     		pop	{r3, r4, r5, pc}
 204              	.LVL15:
 205              	.L11:
1166:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 206              		.loc 1 1166 0
 207 00ba 0220     		movs	r0, #2
 208              	.LVL16:
1238:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 209              		.loc 1 1238 0
 210 00bc 38BD     		pop	{r3, r4, r5, pc}
 211              		.cfi_endproc
 212              	.LFE146:
 214 00be 00BF     		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 215              		.align	2
 216              		.weak	HAL_RTC_AlarmAEventCallback
 217              		.thumb
 218              		.thumb_func
 220              	HAL_RTC_AlarmAEventCallback:
 221              	.LFB149:
1239:HALLIB/Src/stm32f7xx_hal_rtc.c ****            
1240:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1241:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets the RTC Alarm value and masks.
1242:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1243:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1244:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1245:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1246:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1247:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
1248:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB  
1249:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1250:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1251:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format 
1252:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1253:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1254:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1255:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1256:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
1257:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
1258:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1259:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1260:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1261:HALLIB/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1262:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1263:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
1264:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1265:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* AlarmA */
ARM GAS  /tmp/cc9dopSr.s 			page 27


1266:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
1267:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
1268:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
1269:HALLIB/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
1270:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1271:HALLIB/Src/stm32f7xx_hal_rtc.c ****   else
1272:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1273:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
1274:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
1275:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
1276:HALLIB/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
1277:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1278:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
1279:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1280:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16);
1281:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8);
1282:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
1283:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1284:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
1285:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
1286:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1287:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
1288:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
1289:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1290:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1291:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
1292:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
1293:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
1294:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
1295:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }  
1296:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
1297:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
1298:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
1299:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1300:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1301:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  This function handles Alarm interrupt request.
1302:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1303:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1304:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval None
1305:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1306:HALLIB/Src/stm32f7xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
1307:HALLIB/Src/stm32f7xx_hal_rtc.c **** {  
1308:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
1309:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1310:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1311:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
1312:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1313:HALLIB/Src/stm32f7xx_hal_rtc.c ****       /* AlarmA callback */ 
1314:HALLIB/Src/stm32f7xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
1315:HALLIB/Src/stm32f7xx_hal_rtc.c ****       
1316:HALLIB/Src/stm32f7xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1317:HALLIB/Src/stm32f7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
1318:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1319:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1320:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1321:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
1322:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
ARM GAS  /tmp/cc9dopSr.s 			page 28


1323:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1324:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
1325:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1326:HALLIB/Src/stm32f7xx_hal_rtc.c ****       /* AlarmB callback */ 
1327:HALLIB/Src/stm32f7xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
1328:HALLIB/Src/stm32f7xx_hal_rtc.c ****       
1329:HALLIB/Src/stm32f7xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1330:HALLIB/Src/stm32f7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
1331:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1332:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1333:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1334:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1335:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
1336:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1337:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
1338:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1339:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
1340:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1341:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1342:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Alarm A callback.
1343:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1344:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1345:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval None
1346:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1347:HALLIB/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1348:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 222              		.loc 1 1348 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              		@ link register save eliminated.
 227              	.LVL17:
 228 0000 7047     		bx	lr
 229              		.cfi_endproc
 230              	.LFE149:
 232 0002 00BF     		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 233              		.align	2
 234              		.global	HAL_RTC_AlarmIRQHandler
 235              		.thumb
 236              		.thumb_func
 238              	HAL_RTC_AlarmIRQHandler:
 239              	.LFB148:
1307:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 240              		.loc 1 1307 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              	.LVL18:
1307:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 245              		.loc 1 1307 0
 246 0000 10B5     		push	{r4, lr}
 247              	.LCFI1:
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 4, -8
 250              		.cfi_offset 14, -4
 251 0002 0446     		mov	r4, r0
1308:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
ARM GAS  /tmp/cc9dopSr.s 			page 29


 252              		.loc 1 1308 0
 253 0004 0368     		ldr	r3, [r0]
 254 0006 DA68     		ldr	r2, [r3, #12]
 255 0008 12F4807F 		tst	r2, #256
 256 000c 0BD0     		beq	.L15
1311:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 257              		.loc 1 1311 0
 258 000e 9B68     		ldr	r3, [r3, #8]
 259 0010 13F4805F 		tst	r3, #4096
 260 0014 07D0     		beq	.L15
1314:HALLIB/Src/stm32f7xx_hal_rtc.c ****       
 261              		.loc 1 1314 0
 262 0016 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
 263              	.LVL19:
1317:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 264              		.loc 1 1317 0
 265 001a 2268     		ldr	r2, [r4]
 266 001c D368     		ldr	r3, [r2, #12]
 267 001e DBB2     		uxtb	r3, r3
 268 0020 63F4C073 		orn	r3, r3, #384
 269 0024 D360     		str	r3, [r2, #12]
 270              	.L15:
1321:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 271              		.loc 1 1321 0
 272 0026 2368     		ldr	r3, [r4]
 273 0028 DA68     		ldr	r2, [r3, #12]
 274 002a 12F4007F 		tst	r2, #512
 275 002e 0CD0     		beq	.L16
1324:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 276              		.loc 1 1324 0
 277 0030 9B68     		ldr	r3, [r3, #8]
 278 0032 13F4005F 		tst	r3, #8192
 279 0036 08D0     		beq	.L16
1327:HALLIB/Src/stm32f7xx_hal_rtc.c ****       
 280              		.loc 1 1327 0
 281 0038 2046     		mov	r0, r4
 282 003a FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
 283              	.LVL20:
1330:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
 284              		.loc 1 1330 0
 285 003e 2268     		ldr	r2, [r4]
 286 0040 D368     		ldr	r3, [r2, #12]
 287 0042 DBB2     		uxtb	r3, r3
 288 0044 63F42073 		orn	r3, r3, #640
 289 0048 D360     		str	r3, [r2, #12]
 290              	.L16:
1335:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 291              		.loc 1 1335 0
 292 004a 4FF40032 		mov	r2, #131072
 293 004e 024B     		ldr	r3, .L18
 294 0050 5A61     		str	r2, [r3, #20]
1338:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 295              		.loc 1 1338 0
 296 0052 0123     		movs	r3, #1
 297 0054 6377     		strb	r3, [r4, #29]
 298 0056 10BD     		pop	{r4, pc}
 299              	.LVL21:
ARM GAS  /tmp/cc9dopSr.s 			page 30


 300              	.L19:
 301              		.align	2
 302              	.L18:
 303 0058 003C0140 		.word	1073822720
 304              		.cfi_endproc
 305              	.LFE148:
 307              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 308              		.align	2
 309              		.global	HAL_RTC_PollForAlarmAEvent
 310              		.thumb
 311              		.thumb_func
 313              	HAL_RTC_PollForAlarmAEvent:
 314              	.LFB150:
1349:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1350:HALLIB/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
1351:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1352:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1353:HALLIB/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1354:HALLIB/Src/stm32f7xx_hal_rtc.c ****    */
1355:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
1356:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1357:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1358:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  This function handles AlarmA Polling request.
1359:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1360:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1361:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1362:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1363:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1364:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1365:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 315              		.loc 1 1365 0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 0
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 319              	.LVL22:
 320 0000 70B5     		push	{r4, r5, r6, lr}
 321              	.LCFI2:
 322              		.cfi_def_cfa_offset 16
 323              		.cfi_offset 4, -16
 324              		.cfi_offset 5, -12
 325              		.cfi_offset 6, -8
 326              		.cfi_offset 14, -4
 327 0002 0446     		mov	r4, r0
 328 0004 0D46     		mov	r5, r1
 329              	.LVL23:
1366:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0; 
1367:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1368:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1369:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 330              		.loc 1 1369 0
 331 0006 FFF7FEFF 		bl	HAL_GetTick
 332              	.LVL24:
 333 000a 0646     		mov	r6, r0
 334              	.LVL25:
1370:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1371:HALLIB/Src/stm32f7xx_hal_rtc.c ****   while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == RESET)
 335              		.loc 1 1371 0
ARM GAS  /tmp/cc9dopSr.s 			page 31


 336 000c 0BE0     		b	.L22
 337              	.LVL26:
 338              	.L25:
1372:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1373:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 339              		.loc 1 1373 0
 340 000e B5F1FF3F 		cmp	r5, #-1
 341 0012 08D0     		beq	.L22
1374:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1375:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 342              		.loc 1 1375 0
 343 0014 25B1     		cbz	r5, .L23
 344              		.loc 1 1375 0 is_stmt 0 discriminator 1
 345 0016 FFF7FEFF 		bl	HAL_GetTick
 346              	.LVL27:
 347 001a 801B     		subs	r0, r0, r6
 348 001c 8542     		cmp	r5, r0
 349 001e 02D2     		bcs	.L22
 350              	.L23:
1376:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
1377:HALLIB/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 351              		.loc 1 1377 0 is_stmt 1
 352 0020 0320     		movs	r0, #3
 353 0022 6077     		strb	r0, [r4, #29]
1378:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 354              		.loc 1 1378 0
 355 0024 70BD     		pop	{r4, r5, r6, pc}
 356              	.LVL28:
 357              	.L22:
1371:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 358              		.loc 1 1371 0
 359 0026 2368     		ldr	r3, [r4]
 360 0028 DA68     		ldr	r2, [r3, #12]
 361 002a 12F4807F 		tst	r2, #256
 362 002e EED0     		beq	.L25
1379:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }
1380:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1381:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1382:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1383:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1384:HALLIB/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 363              		.loc 1 1384 0
 364 0030 DA68     		ldr	r2, [r3, #12]
 365 0032 D2B2     		uxtb	r2, r2
 366 0034 62F4C072 		orn	r2, r2, #384
 367 0038 DA60     		str	r2, [r3, #12]
1385:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1386:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
1387:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 368              		.loc 1 1387 0
 369 003a 0123     		movs	r3, #1
 370 003c 6377     		strb	r3, [r4, #29]
1388:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1389:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;  
 371              		.loc 1 1389 0
 372 003e 0020     		movs	r0, #0
1390:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
ARM GAS  /tmp/cc9dopSr.s 			page 32


 373              		.loc 1 1390 0
 374 0040 70BD     		pop	{r4, r5, r6, pc}
 375              		.cfi_endproc
 376              	.LFE150:
 378 0042 00BF     		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 379              		.align	2
 380              		.global	HAL_RTC_WaitForSynchro
 381              		.thumb
 382              		.thumb_func
 384              	HAL_RTC_WaitForSynchro:
 385              	.LFB151:
1391:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1392:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1393:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @}
1394:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1395:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1396:HALLIB/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group4 Peripheral Control functions 
1397:HALLIB/Src/stm32f7xx_hal_rtc.c ****  *  @brief   Peripheral Control functions 
1398:HALLIB/Src/stm32f7xx_hal_rtc.c ****  *
1399:HALLIB/Src/stm32f7xx_hal_rtc.c **** @verbatim   
1400:HALLIB/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1401:HALLIB/Src/stm32f7xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1402:HALLIB/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
1403:HALLIB/Src/stm32f7xx_hal_rtc.c ****     [..]
1404:HALLIB/Src/stm32f7xx_hal_rtc.c ****     This subsection provides functions allowing to
1405:HALLIB/Src/stm32f7xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1406:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1407:HALLIB/Src/stm32f7xx_hal_rtc.c **** @endverbatim
1408:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @{
1409:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1410:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1411:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1412:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
1413:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1414:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
1415:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function. 
1416:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
1417:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
1418:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *         the software must first clear the RSF flag. 
1419:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading 
1420:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been 
1421:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
1422:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1423:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1424:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1425:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1426:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
1427:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 386              		.loc 1 1427 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390              	.LVL29:
 391 0000 38B5     		push	{r3, r4, r5, lr}
 392              	.LCFI3:
 393              		.cfi_def_cfa_offset 16
 394              		.cfi_offset 3, -16
ARM GAS  /tmp/cc9dopSr.s 			page 33


 395              		.cfi_offset 4, -12
 396              		.cfi_offset 5, -8
 397              		.cfi_offset 14, -4
 398 0002 0446     		mov	r4, r0
 399              	.LVL30:
1428:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
1429:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1430:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Clear RSF flag */
1431:HALLIB/Src/stm32f7xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 400              		.loc 1 1431 0
 401 0004 0268     		ldr	r2, [r0]
 402 0006 D368     		ldr	r3, [r2, #12]
 403 0008 23F0A003 		bic	r3, r3, #160
 404 000c D360     		str	r3, [r2, #12]
1432:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1433:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1434:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 405              		.loc 1 1434 0
 406 000e FFF7FEFF 		bl	HAL_GetTick
 407              	.LVL31:
 408 0012 0546     		mov	r5, r0
 409              	.LVL32:
1435:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1436:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1437:HALLIB/Src/stm32f7xx_hal_rtc.c ****   while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 410              		.loc 1 1437 0
 411 0014 05E0     		b	.L28
 412              	.LVL33:
 413              	.L30:
1438:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1439:HALLIB/Src/stm32f7xx_hal_rtc.c ****     if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 414              		.loc 1 1439 0
 415 0016 FFF7FEFF 		bl	HAL_GetTick
 416              	.LVL34:
 417 001a 401B     		subs	r0, r0, r5
 418 001c B0F57A7F 		cmp	r0, #1000
 419 0020 06D8     		bhi	.L31
 420              	.L28:
1437:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 421              		.loc 1 1437 0
 422 0022 2368     		ldr	r3, [r4]
 423 0024 DB68     		ldr	r3, [r3, #12]
 424 0026 13F0200F 		tst	r3, #32
 425 002a F4D0     		beq	.L30
1440:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {       
1441:HALLIB/Src/stm32f7xx_hal_rtc.c ****       return HAL_TIMEOUT;
1442:HALLIB/Src/stm32f7xx_hal_rtc.c ****     } 
1443:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1444:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1445:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 426              		.loc 1 1445 0
 427 002c 0020     		movs	r0, #0
 428 002e 38BD     		pop	{r3, r4, r5, pc}
 429              	.LVL35:
 430              	.L31:
1441:HALLIB/Src/stm32f7xx_hal_rtc.c ****     } 
 431              		.loc 1 1441 0
ARM GAS  /tmp/cc9dopSr.s 			page 34


 432 0030 0320     		movs	r0, #3
1446:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 433              		.loc 1 1446 0
 434 0032 38BD     		pop	{r3, r4, r5, pc}
 435              		.cfi_endproc
 436              	.LFE151:
 438              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 439              		.align	2
 440              		.global	HAL_RTC_GetState
 441              		.thumb
 442              		.thumb_func
 444              	HAL_RTC_GetState:
 445              	.LFB152:
1447:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1448:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1449:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @}
1450:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1451:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1452:HALLIB/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group5 Peripheral State functions 
1453:HALLIB/Src/stm32f7xx_hal_rtc.c ****  *  @brief   Peripheral State functions 
1454:HALLIB/Src/stm32f7xx_hal_rtc.c ****  *
1455:HALLIB/Src/stm32f7xx_hal_rtc.c **** @verbatim   
1456:HALLIB/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1457:HALLIB/Src/stm32f7xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1458:HALLIB/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
1459:HALLIB/Src/stm32f7xx_hal_rtc.c ****     [..]
1460:HALLIB/Src/stm32f7xx_hal_rtc.c ****     This subsection provides functions allowing to
1461:HALLIB/Src/stm32f7xx_hal_rtc.c ****       (+) Get RTC state
1462:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1463:HALLIB/Src/stm32f7xx_hal_rtc.c **** @endverbatim
1464:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @{
1465:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1466:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1467:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Returns the RTC state.
1468:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1469:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1470:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL state
1471:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1472:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
1473:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 446              		.loc 1 1473 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              		@ link register save eliminated.
 451              	.LVL36:
1474:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return hrtc->State;
 452              		.loc 1 1474 0
 453 0000 407F     		ldrb	r0, [r0, #29]	@ zero_extendqisi2
 454              	.LVL37:
1475:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 455              		.loc 1 1475 0
 456 0002 7047     		bx	lr
 457              		.cfi_endproc
 458              	.LFE152:
 460              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 461              		.align	2
ARM GAS  /tmp/cc9dopSr.s 			page 35


 462              		.global	RTC_EnterInitMode
 463              		.thumb
 464              		.thumb_func
 466              	RTC_EnterInitMode:
 467              	.LFB153:
1476:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1477:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1478:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @}
1479:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1480:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1481:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1482:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Enters the RTC Initialization mode.
1483:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1484:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1485:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1486:HALLIB/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1487:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1488:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1489:HALLIB/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
1490:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 468              		.loc 1 1490 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              	.LVL38:
 473 0000 38B5     		push	{r3, r4, r5, lr}
 474              	.LCFI4:
 475              		.cfi_def_cfa_offset 16
 476              		.cfi_offset 3, -16
 477              		.cfi_offset 4, -12
 478              		.cfi_offset 5, -8
 479              		.cfi_offset 14, -4
 480              	.LVL39:
1491:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0; 
1492:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1493:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1494:HALLIB/Src/stm32f7xx_hal_rtc.c ****   if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 481              		.loc 1 1494 0
 482 0002 0368     		ldr	r3, [r0]
 483 0004 DA68     		ldr	r2, [r3, #12]
 484 0006 12F0400F 		tst	r2, #64
 485 000a 14D1     		bne	.L38
 486 000c 0446     		mov	r4, r0
1495:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1496:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Set the Initialization mode */
1497:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 487              		.loc 1 1497 0
 488 000e 4FF0FF32 		mov	r2, #-1
 489 0012 DA60     		str	r2, [r3, #12]
1498:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1499:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1500:HALLIB/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 490              		.loc 1 1500 0
 491 0014 FFF7FEFF 		bl	HAL_GetTick
 492              	.LVL40:
 493 0018 0546     		mov	r5, r0
 494              	.LVL41:
ARM GAS  /tmp/cc9dopSr.s 			page 36


1501:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1502:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1503:HALLIB/Src/stm32f7xx_hal_rtc.c ****     while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 495              		.loc 1 1503 0
 496 001a 05E0     		b	.L36
 497              	.LVL42:
 498              	.L37:
1504:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
1505:HALLIB/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 499              		.loc 1 1505 0
 500 001c FFF7FEFF 		bl	HAL_GetTick
 501              	.LVL43:
 502 0020 401B     		subs	r0, r0, r5
 503 0022 B0F57A7F 		cmp	r0, #1000
 504 0026 08D8     		bhi	.L39
 505              	.L36:
1503:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 506              		.loc 1 1503 0
 507 0028 2368     		ldr	r3, [r4]
 508 002a DB68     		ldr	r3, [r3, #12]
 509 002c 13F0400F 		tst	r3, #64
 510 0030 F4D0     		beq	.L37
1506:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {       
1507:HALLIB/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1508:HALLIB/Src/stm32f7xx_hal_rtc.c ****       } 
1509:HALLIB/Src/stm32f7xx_hal_rtc.c ****     }
1510:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1511:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1512:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;  
 511              		.loc 1 1512 0
 512 0032 0020     		movs	r0, #0
 513 0034 38BD     		pop	{r3, r4, r5, pc}
 514              	.LVL44:
 515              	.L38:
 516 0036 0020     		movs	r0, #0
 517              	.LVL45:
 518 0038 38BD     		pop	{r3, r4, r5, pc}
 519              	.LVL46:
 520              	.L39:
1507:HALLIB/Src/stm32f7xx_hal_rtc.c ****       } 
 521              		.loc 1 1507 0
 522 003a 0320     		movs	r0, #3
1513:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 523              		.loc 1 1513 0
 524 003c 38BD     		pop	{r3, r4, r5, pc}
 525              		.cfi_endproc
 526              	.LFE153:
 528 003e 00BF     		.section	.text.HAL_RTC_Init,"ax",%progbits
 529              		.align	2
 530              		.global	HAL_RTC_Init
 531              		.thumb
 532              		.thumb_func
 534              	HAL_RTC_Init:
 535              	.LFB136:
 203:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 536              		.loc 1 203 0
 537              		.cfi_startproc
ARM GAS  /tmp/cc9dopSr.s 			page 37


 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              	.LVL47:
 205:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 541              		.loc 1 205 0
 542 0000 0028     		cmp	r0, #0
 543 0002 49D0     		beq	.L45
 203:HALLIB/Src/stm32f7xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 544              		.loc 1 203 0
 545 0004 38B5     		push	{r3, r4, r5, lr}
 546              	.LCFI5:
 547              		.cfi_def_cfa_offset 16
 548              		.cfi_offset 3, -16
 549              		.cfi_offset 4, -12
 550              		.cfi_offset 5, -8
 551              		.cfi_offset 14, -4
 552 0006 0446     		mov	r4, r0
 219:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 553              		.loc 1 219 0
 554 0008 437F     		ldrb	r3, [r0, #29]	@ zero_extendqisi2
 555 000a 13F0FF0F 		tst	r3, #255
 556 000e 03D1     		bne	.L43
 222:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Initialize RTC MSP */
 557              		.loc 1 222 0
 558 0010 0023     		movs	r3, #0
 559 0012 0377     		strb	r3, [r0, #28]
 224:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 560              		.loc 1 224 0
 561 0014 FFF7FEFF 		bl	HAL_RTC_MspInit
 562              	.LVL48:
 563              	.L43:
 228:HALLIB/Src/stm32f7xx_hal_rtc.c ****        
 564              		.loc 1 228 0
 565 0018 0223     		movs	r3, #2
 566 001a 6377     		strb	r3, [r4, #29]
 231:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 567              		.loc 1 231 0
 568 001c 2368     		ldr	r3, [r4]
 569 001e CA22     		movs	r2, #202
 570 0020 5A62     		str	r2, [r3, #36]
 571 0022 2368     		ldr	r3, [r4]
 572 0024 5322     		movs	r2, #83
 573 0026 5A62     		str	r2, [r3, #36]
 234:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 574              		.loc 1 234 0
 575 0028 2046     		mov	r0, r4
 576 002a FFF7FEFF 		bl	RTC_EnterInitMode
 577              	.LVL49:
 578 002e 0246     		mov	r2, r0
 579 0030 30B1     		cbz	r0, .L44
 237:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 580              		.loc 1 237 0
 581 0032 2368     		ldr	r3, [r4]
 582 0034 FF22     		movs	r2, #255
 583 0036 5A62     		str	r2, [r3, #36]
 240:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 584              		.loc 1 240 0
ARM GAS  /tmp/cc9dopSr.s 			page 38


 585 0038 0423     		movs	r3, #4
 586 003a 6377     		strb	r3, [r4, #29]
 242:HALLIB/Src/stm32f7xx_hal_rtc.c ****   } 
 587              		.loc 1 242 0
 588 003c 0122     		movs	r2, #1
 589 003e 2EE0     		b	.L42
 590              	.L44:
 247:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC_CR register */
 591              		.loc 1 247 0
 592 0040 2168     		ldr	r1, [r4]
 593 0042 8868     		ldr	r0, [r1, #8]
 594 0044 174B     		ldr	r3, .L48
 595 0046 0340     		ands	r3, r3, r0
 596 0048 8B60     		str	r3, [r1, #8]
 249:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 597              		.loc 1 249 0
 598 004a 2068     		ldr	r0, [r4]
 599 004c 8568     		ldr	r5, [r0, #8]
 600 004e 6368     		ldr	r3, [r4, #4]
 601 0050 2169     		ldr	r1, [r4, #16]
 602 0052 1943     		orrs	r1, r1, r3
 603 0054 6369     		ldr	r3, [r4, #20]
 604 0056 0B43     		orrs	r3, r3, r1
 605 0058 2B43     		orrs	r3, r3, r5
 606 005a 8360     		str	r3, [r0, #8]
 252:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 607              		.loc 1 252 0
 608 005c 2368     		ldr	r3, [r4]
 609 005e E168     		ldr	r1, [r4, #12]
 610 0060 1961     		str	r1, [r3, #16]
 253:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 611              		.loc 1 253 0
 612 0062 2168     		ldr	r1, [r4]
 613 0064 0B69     		ldr	r3, [r1, #16]
 614 0066 A068     		ldr	r0, [r4, #8]
 615 0068 43EA0043 		orr	r3, r3, r0, lsl #16
 616 006c 0B61     		str	r3, [r1, #16]
 256:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 617              		.loc 1 256 0
 618 006e 2168     		ldr	r1, [r4]
 619 0070 CB68     		ldr	r3, [r1, #12]
 620 0072 23F08003 		bic	r3, r3, #128
 621 0076 CB60     		str	r3, [r1, #12]
 258:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 622              		.loc 1 258 0
 623 0078 2168     		ldr	r1, [r4]
 624 007a CB6C     		ldr	r3, [r1, #76]
 625 007c 23F00803 		bic	r3, r3, #8
 626 0080 CB64     		str	r3, [r1, #76]
 259:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 627              		.loc 1 259 0
 628 0082 2168     		ldr	r1, [r4]
 629 0084 C86C     		ldr	r0, [r1, #76]
 630 0086 A369     		ldr	r3, [r4, #24]
 631 0088 0343     		orrs	r3, r3, r0
 632 008a CB64     		str	r3, [r1, #76]
 262:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
ARM GAS  /tmp/cc9dopSr.s 			page 39


 633              		.loc 1 262 0
 634 008c 2368     		ldr	r3, [r4]
 635 008e FF21     		movs	r1, #255
 636 0090 5962     		str	r1, [r3, #36]
 265:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 637              		.loc 1 265 0
 638 0092 0123     		movs	r3, #1
 639 0094 6377     		strb	r3, [r4, #29]
 267:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 640              		.loc 1 267 0
 641 0096 02E0     		b	.L42
 642              	.LVL50:
 643              	.L45:
 644              	.LCFI6:
 645              		.cfi_def_cfa_offset 0
 646              		.cfi_restore 3
 647              		.cfi_restore 4
 648              		.cfi_restore 5
 649              		.cfi_restore 14
 207:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 650              		.loc 1 207 0
 651 0098 0122     		movs	r2, #1
 269:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 652              		.loc 1 269 0
 653 009a 1046     		mov	r0, r2
 654              	.LVL51:
 655 009c 7047     		bx	lr
 656              	.LVL52:
 657              	.L42:
 658              	.LCFI7:
 659              		.cfi_def_cfa_offset 16
 660              		.cfi_offset 3, -16
 661              		.cfi_offset 4, -12
 662              		.cfi_offset 5, -8
 663              		.cfi_offset 14, -4
 664 009e 1046     		mov	r0, r2
 665 00a0 38BD     		pop	{r3, r4, r5, pc}
 666              	.LVL53:
 667              	.L49:
 668 00a2 00BF     		.align	2
 669              	.L48:
 670 00a4 BFFF8FFF 		.word	-7340097
 671              		.cfi_endproc
 672              	.LFE136:
 674              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 675              		.align	2
 676              		.global	HAL_RTC_DeInit
 677              		.thumb
 678              		.thumb_func
 680              	HAL_RTC_DeInit:
 681              	.LFB137:
 279:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 682              		.loc 1 279 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686              	.LVL54:
ARM GAS  /tmp/cc9dopSr.s 			page 40


 687 0000 70B5     		push	{r4, r5, r6, lr}
 688              	.LCFI8:
 689              		.cfi_def_cfa_offset 16
 690              		.cfi_offset 4, -16
 691              		.cfi_offset 5, -12
 692              		.cfi_offset 6, -8
 693              		.cfi_offset 14, -4
 694 0002 0446     		mov	r4, r0
 695              	.LVL55:
 286:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 696              		.loc 1 286 0
 697 0004 0223     		movs	r3, #2
 698 0006 4377     		strb	r3, [r0, #29]
 289:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 699              		.loc 1 289 0
 700 0008 0368     		ldr	r3, [r0]
 701 000a CA22     		movs	r2, #202
 702 000c 5A62     		str	r2, [r3, #36]
 703 000e 0368     		ldr	r3, [r0]
 704 0010 5322     		movs	r2, #83
 705 0012 5A62     		str	r2, [r3, #36]
 292:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 706              		.loc 1 292 0
 707 0014 FFF7FEFF 		bl	RTC_EnterInitMode
 708              	.LVL56:
 709 0018 30B1     		cbz	r0, .L51
 295:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 710              		.loc 1 295 0
 711 001a 2368     		ldr	r3, [r4]
 712 001c FF22     		movs	r2, #255
 713 001e 5A62     		str	r2, [r3, #36]
 298:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 714              		.loc 1 298 0
 715 0020 0423     		movs	r3, #4
 716 0022 6377     		strb	r3, [r4, #29]
 300:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }  
 717              		.loc 1 300 0
 718 0024 0126     		movs	r6, #1
 719 0026 56E0     		b	.L52
 720              	.L51:
 721 0028 0646     		mov	r6, r0
 305:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)0x00002101;
 722              		.loc 1 305 0
 723 002a 2368     		ldr	r3, [r4]
 724 002c 0022     		movs	r2, #0
 725 002e 1A60     		str	r2, [r3]
 306:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 726              		.loc 1 306 0
 727 0030 2368     		ldr	r3, [r4]
 728 0032 42F20112 		movw	r2, #8449
 729 0036 5A60     		str	r2, [r3, #4]
 308:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 730              		.loc 1 308 0
 731 0038 2268     		ldr	r2, [r4]
 732 003a 9368     		ldr	r3, [r2, #8]
 733 003c 03F00703 		and	r3, r3, #7
 734 0040 9360     		str	r3, [r2, #8]
ARM GAS  /tmp/cc9dopSr.s 			page 41


 311:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 735              		.loc 1 311 0
 736 0042 FFF7FEFF 		bl	HAL_GetTick
 737              	.LVL57:
 738 0046 0546     		mov	r5, r0
 739              	.LVL58:
 314:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 740              		.loc 1 314 0
 741 0048 0BE0     		b	.L53
 742              	.LVL59:
 743              	.L54:
 316:HALLIB/Src/stm32f7xx_hal_rtc.c ****       { 
 744              		.loc 1 316 0
 745 004a FFF7FEFF 		bl	HAL_GetTick
 746              	.LVL60:
 747 004e 401B     		subs	r0, r0, r5
 748 0050 B0F57A7F 		cmp	r0, #1000
 749 0054 05D9     		bls	.L53
 319:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 750              		.loc 1 319 0
 751 0056 2368     		ldr	r3, [r4]
 752 0058 FF22     		movs	r2, #255
 753 005a 5A62     		str	r2, [r3, #36]
 322:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 754              		.loc 1 322 0
 755 005c 0326     		movs	r6, #3
 756 005e 6677     		strb	r6, [r4, #29]
 324:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }      
 757              		.loc 1 324 0
 758 0060 39E0     		b	.L52
 759              	.L53:
 314:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 760              		.loc 1 314 0
 761 0062 2368     		ldr	r3, [r4]
 762 0064 DA68     		ldr	r2, [r3, #12]
 763 0066 12F0040F 		tst	r2, #4
 764 006a EED0     		beq	.L54
 329:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->WUTR = (uint32_t)0x0000FFFF;
 765              		.loc 1 329 0
 766 006c 9A68     		ldr	r2, [r3, #8]
 767 006e 0022     		movs	r2, #0
 768 0070 9A60     		str	r2, [r3, #8]
 330:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)0x007F00FF;
 769              		.loc 1 330 0
 770 0072 2368     		ldr	r3, [r4]
 771 0074 4FF6FF71 		movw	r1, #65535
 772 0078 5961     		str	r1, [r3, #20]
 331:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)0x00000000;
 773              		.loc 1 331 0
 774 007a 2368     		ldr	r3, [r4]
 775 007c 1749     		ldr	r1, .L57
 776 007e 1961     		str	r1, [r3, #16]
 332:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)0x00000000;
 777              		.loc 1 332 0
 778 0080 2368     		ldr	r3, [r4]
 779 0082 DA61     		str	r2, [r3, #28]
 333:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->SHIFTR = (uint32_t)0x00000000;
ARM GAS  /tmp/cc9dopSr.s 			page 42


 780              		.loc 1 333 0
 781 0084 2368     		ldr	r3, [r4]
 782 0086 1A62     		str	r2, [r3, #32]
 334:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CALR = (uint32_t)0x00000000;
 783              		.loc 1 334 0
 784 0088 2368     		ldr	r3, [r4]
 785 008a DA62     		str	r2, [r3, #44]
 335:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = (uint32_t)0x00000000;
 786              		.loc 1 335 0
 787 008c 2368     		ldr	r3, [r4]
 788 008e DA63     		str	r2, [r3, #60]
 336:HALLIB/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = (uint32_t)0x00000000;
 789              		.loc 1 336 0
 790 0090 2368     		ldr	r3, [r4]
 791 0092 5A64     		str	r2, [r3, #68]
 337:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 792              		.loc 1 337 0
 793 0094 2368     		ldr	r3, [r4]
 794 0096 9A64     		str	r2, [r3, #72]
 340:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 795              		.loc 1 340 0
 796 0098 2368     		ldr	r3, [r4]
 797 009a DA60     		str	r2, [r3, #12]
 343:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 798              		.loc 1 343 0
 799 009c 2368     		ldr	r3, [r4]
 800 009e 1A64     		str	r2, [r3, #64]
 346:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 801              		.loc 1 346 0
 802 00a0 2368     		ldr	r3, [r4]
 803 00a2 DA64     		str	r2, [r3, #76]
 349:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 804              		.loc 1 349 0
 805 00a4 2368     		ldr	r3, [r4]
 806 00a6 9B68     		ldr	r3, [r3, #8]
 807 00a8 13F0200F 		tst	r3, #32
 808 00ac 0AD1     		bne	.L55
 351:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
 809              		.loc 1 351 0
 810 00ae 2046     		mov	r0, r4
 811 00b0 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 812              	.LVL61:
 813 00b4 30B1     		cbz	r0, .L55
 354:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 814              		.loc 1 354 0
 815 00b6 2368     		ldr	r3, [r4]
 816 00b8 FF22     		movs	r2, #255
 817 00ba 5A62     		str	r2, [r3, #36]
 356:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 818              		.loc 1 356 0
 819 00bc 0423     		movs	r3, #4
 820 00be 6377     		strb	r3, [r4, #29]
 358:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }
 821              		.loc 1 358 0
 822 00c0 0126     		movs	r6, #1
 823 00c2 08E0     		b	.L52
 824              	.L55:
ARM GAS  /tmp/cc9dopSr.s 			page 43


 364:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 825              		.loc 1 364 0
 826 00c4 2368     		ldr	r3, [r4]
 827 00c6 FF22     		movs	r2, #255
 828 00c8 5A62     		str	r2, [r3, #36]
 367:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 829              		.loc 1 367 0
 830 00ca 2046     		mov	r0, r4
 831 00cc FFF7FEFF 		bl	HAL_RTC_MspDeInit
 832              	.LVL62:
 369:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 833              		.loc 1 369 0
 834 00d0 0023     		movs	r3, #0
 835 00d2 6377     		strb	r3, [r4, #29]
 372:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 836              		.loc 1 372 0
 837 00d4 2377     		strb	r3, [r4, #28]
 838              	.LVL63:
 839              	.L52:
 375:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 840              		.loc 1 375 0
 841 00d6 3046     		mov	r0, r6
 842 00d8 70BD     		pop	{r4, r5, r6, pc}
 843              	.LVL64:
 844              	.L58:
 845 00da 00BF     		.align	2
 846              	.L57:
 847 00dc FF007F00 		.word	8323327
 848              		.cfi_endproc
 849              	.LFE137:
 851              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 852              		.align	2
 853              		.global	RTC_ByteToBcd2
 854              		.thumb
 855              		.thumb_func
 857              	RTC_ByteToBcd2:
 858              	.LFB154:
1514:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1515:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1516:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1517:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
1518:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Value Byte to be converted
1519:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval Converted byte
1520:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1521:HALLIB/Src/stm32f7xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
1522:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 859              		.loc 1 1522 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              		@ link register save eliminated.
 864              	.LVL65:
1523:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t bcdhigh = 0;
 865              		.loc 1 1523 0
 866 0000 0023     		movs	r3, #0
1524:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1525:HALLIB/Src/stm32f7xx_hal_rtc.c ****   while(Value >= 10)
ARM GAS  /tmp/cc9dopSr.s 			page 44


 867              		.loc 1 1525 0
 868 0002 02E0     		b	.L60
 869              	.LVL66:
 870              	.L61:
1526:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
1527:HALLIB/Src/stm32f7xx_hal_rtc.c ****     bcdhigh++;
 871              		.loc 1 1527 0
 872 0004 0133     		adds	r3, r3, #1
 873              	.LVL67:
1528:HALLIB/Src/stm32f7xx_hal_rtc.c ****     Value -= 10;
 874              		.loc 1 1528 0
 875 0006 0A38     		subs	r0, r0, #10
 876              	.LVL68:
 877 0008 C0B2     		uxtb	r0, r0
 878              	.LVL69:
 879              	.L60:
1525:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 880              		.loc 1 1525 0
 881 000a 0928     		cmp	r0, #9
 882 000c FAD8     		bhi	.L61
1529:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
1530:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
1531:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 883              		.loc 1 1531 0
 884 000e 1B01     		lsls	r3, r3, #4
 885              	.LVL70:
 886 0010 DBB2     		uxtb	r3, r3
1532:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 887              		.loc 1 1532 0
 888 0012 1843     		orrs	r0, r0, r3
 889              	.LVL71:
 890 0014 7047     		bx	lr
 891              		.cfi_endproc
 892              	.LFE154:
 894 0016 00BF     		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 895              		.align	2
 896              		.global	HAL_RTC_SetDate
 897              		.thumb
 898              		.thumb_func
 900              	HAL_RTC_SetDate:
 901              	.LFB142:
 619:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 902              		.loc 1 619 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906              	.LVL72:
 907 0000 70B5     		push	{r4, r5, r6, lr}
 908              	.LCFI9:
 909              		.cfi_def_cfa_offset 16
 910              		.cfi_offset 4, -16
 911              		.cfi_offset 5, -12
 912              		.cfi_offset 6, -8
 913              		.cfi_offset 14, -4
 914              	.LVL73:
 626:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 915              		.loc 1 626 0
ARM GAS  /tmp/cc9dopSr.s 			page 45


 916 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 917 0004 012B     		cmp	r3, #1
 918 0006 61D0     		beq	.L69
 626:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 919              		.loc 1 626 0 is_stmt 0 discriminator 2
 920 0008 0123     		movs	r3, #1
 921 000a 0377     		strb	r3, [r0, #28]
 628:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 922              		.loc 1 628 0 is_stmt 1 discriminator 2
 923 000c 0223     		movs	r3, #2
 924 000e 4377     		strb	r3, [r0, #29]
 630:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 925              		.loc 1 630 0 discriminator 2
 926 0010 3AB9     		cbnz	r2, .L64
 630:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 927              		.loc 1 630 0 is_stmt 0 discriminator 1
 928 0012 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 929 0014 13F0100F 		tst	r3, #16
 930 0018 03D0     		beq	.L64
 632:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 931              		.loc 1 632 0 is_stmt 1
 932 001a 23F01003 		bic	r3, r3, #16
 933 001e 0A33     		adds	r3, r3, #10
 934 0020 4B70     		strb	r3, [r1, #1]
 935              	.L64:
 936 0022 0E46     		mov	r6, r1
 937 0024 0446     		mov	r4, r0
 637:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {   
 938              		.loc 1 637 0
 939 0026 82B9     		cbnz	r2, .L65
 643:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 940              		.loc 1 643 0
 941 0028 C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 942              	.LVL74:
 943 002a FFF7FEFF 		bl	RTC_ByteToBcd2
 944              	.LVL75:
 945 002e 0504     		lsls	r5, r0, #16
 644:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 946              		.loc 1 644 0
 947 0030 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 948 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 949              	.LVL76:
 643:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 950              		.loc 1 643 0
 951 0036 45EA0025 		orr	r5, r5, r0, lsl #8
 645:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << 13));   
 952              		.loc 1 645 0
 953 003a B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 954 003c FFF7FEFF 		bl	RTC_ByteToBcd2
 955              	.LVL77:
 644:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 956              		.loc 1 644 0
 957 0040 0543     		orrs	r5, r5, r0
 646:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 958              		.loc 1 646 0
 959 0042 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 643:HALLIB/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
ARM GAS  /tmp/cc9dopSr.s 			page 46


 960              		.loc 1 643 0
 961 0044 45EA4035 		orr	r5, r5, r0, lsl #13
 962              	.LVL78:
 963 0048 09E0     		b	.L66
 964              	.LVL79:
 965              	.L65:
 654:HALLIB/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 966              		.loc 1 654 0
 967 004a CD78     		ldrb	r5, [r1, #3]	@ zero_extendqisi2
 655:HALLIB/Src/stm32f7xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 968              		.loc 1 655 0
 969 004c 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 970 004e 1B02     		lsls	r3, r3, #8
 654:HALLIB/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 971              		.loc 1 654 0
 972 0050 43EA0543 		orr	r3, r3, r5, lsl #16
 656:HALLIB/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13));  
 973              		.loc 1 656 0
 974 0054 8D78     		ldrb	r5, [r1, #2]	@ zero_extendqisi2
 655:HALLIB/Src/stm32f7xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 975              		.loc 1 655 0
 976 0056 2B43     		orrs	r3, r3, r5
 657:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 977              		.loc 1 657 0
 978 0058 0D78     		ldrb	r5, [r1]	@ zero_extendqisi2
 654:HALLIB/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 979              		.loc 1 654 0
 980 005a 43EA4535 		orr	r5, r3, r5, lsl #13
 981              	.LVL80:
 982              	.L66:
 661:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 983              		.loc 1 661 0
 984 005e 2368     		ldr	r3, [r4]
 985 0060 CA22     		movs	r2, #202
 986 0062 5A62     		str	r2, [r3, #36]
 987 0064 2368     		ldr	r3, [r4]
 988 0066 5322     		movs	r2, #83
 989 0068 5A62     		str	r2, [r3, #36]
 664:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 990              		.loc 1 664 0
 991 006a 2046     		mov	r0, r4
 992 006c FFF7FEFF 		bl	RTC_EnterInitMode
 993              	.LVL81:
 994 0070 0646     		mov	r6, r0
 995              	.LVL82:
 996 0072 40B1     		cbz	r0, .L67
 667:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 997              		.loc 1 667 0
 998 0074 2368     		ldr	r3, [r4]
 999 0076 FF22     		movs	r2, #255
 1000 0078 5A62     		str	r2, [r3, #36]
 670:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1001              		.loc 1 670 0
 1002 007a 0423     		movs	r3, #4
 1003 007c 6377     		strb	r3, [r4, #29]
 673:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1004              		.loc 1 673 0
ARM GAS  /tmp/cc9dopSr.s 			page 47


 1005 007e 0023     		movs	r3, #0
 1006 0080 2377     		strb	r3, [r4, #28]
 675:HALLIB/Src/stm32f7xx_hal_rtc.c ****   } 
 1007              		.loc 1 675 0
 1008 0082 0126     		movs	r6, #1
 1009 0084 23E0     		b	.L63
 1010              	.L67:
 680:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1011              		.loc 1 680 0
 1012 0086 2268     		ldr	r2, [r4]
 1013 0088 124B     		ldr	r3, .L71
 1014 008a 2B40     		ands	r3, r3, r5
 1015 008c 5360     		str	r3, [r2, #4]
 683:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1016              		.loc 1 683 0
 1017 008e 2268     		ldr	r2, [r4]
 1018 0090 D368     		ldr	r3, [r2, #12]
 1019 0092 23F08003 		bic	r3, r3, #128
 1020 0096 D360     		str	r3, [r2, #12]
 686:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1021              		.loc 1 686 0
 1022 0098 2368     		ldr	r3, [r4]
 1023 009a 9B68     		ldr	r3, [r3, #8]
 1024 009c 13F0200F 		tst	r3, #32
 1025 00a0 0CD1     		bne	.L68
 688:HALLIB/Src/stm32f7xx_hal_rtc.c ****       { 
 1026              		.loc 1 688 0
 1027 00a2 2046     		mov	r0, r4
 1028 00a4 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1029              	.LVL83:
 1030 00a8 40B1     		cbz	r0, .L68
 691:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1031              		.loc 1 691 0
 1032 00aa 2368     		ldr	r3, [r4]
 1033 00ac FF22     		movs	r2, #255
 1034 00ae 5A62     		str	r2, [r3, #36]
 693:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1035              		.loc 1 693 0
 1036 00b0 0423     		movs	r3, #4
 1037 00b2 6377     		strb	r3, [r4, #29]
 696:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1038              		.loc 1 696 0
 1039 00b4 0023     		movs	r3, #0
 1040 00b6 2377     		strb	r3, [r4, #28]
 698:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }
 1041              		.loc 1 698 0
 1042 00b8 0126     		movs	r6, #1
 1043 00ba 08E0     		b	.L63
 1044              	.L68:
 703:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1045              		.loc 1 703 0
 1046 00bc 2368     		ldr	r3, [r4]
 1047 00be FF22     		movs	r2, #255
 1048 00c0 5A62     		str	r2, [r3, #36]
 705:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1049              		.loc 1 705 0
 1050 00c2 0123     		movs	r3, #1
ARM GAS  /tmp/cc9dopSr.s 			page 48


 1051 00c4 6377     		strb	r3, [r4, #29]
 708:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1052              		.loc 1 708 0
 1053 00c6 0023     		movs	r3, #0
 1054 00c8 2377     		strb	r3, [r4, #28]
 710:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1055              		.loc 1 710 0
 1056 00ca 00E0     		b	.L63
 1057              	.LVL84:
 1058              	.L69:
 626:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1059              		.loc 1 626 0
 1060 00cc 0226     		movs	r6, #2
 1061              	.LVL85:
 1062              	.L63:
 712:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1063              		.loc 1 712 0
 1064 00ce 3046     		mov	r0, r6
 1065 00d0 70BD     		pop	{r4, r5, r6, pc}
 1066              	.L72:
 1067 00d2 00BF     		.align	2
 1068              	.L71:
 1069 00d4 3FFFFF00 		.word	16777023
 1070              		.cfi_endproc
 1071              	.LFE142:
 1073              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 1074              		.align	2
 1075              		.global	HAL_RTC_SetTime
 1076              		.thumb
 1077              		.thumb_func
 1079              	HAL_RTC_SetTime:
 1080              	.LFB140:
 439:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 1081              		.loc 1 439 0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
 1085              	.LVL86:
 1086 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1087              	.LCFI10:
 1088              		.cfi_def_cfa_offset 24
 1089              		.cfi_offset 3, -24
 1090              		.cfi_offset 4, -20
 1091              		.cfi_offset 5, -16
 1092              		.cfi_offset 6, -12
 1093              		.cfi_offset 7, -8
 1094              		.cfi_offset 14, -4
 1095              	.LVL87:
 448:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1096              		.loc 1 448 0
 1097 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1098 0004 012B     		cmp	r3, #1
 1099 0006 72D0     		beq	.L81
 1100 0008 0D46     		mov	r5, r1
 1101 000a 0446     		mov	r4, r0
 448:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1102              		.loc 1 448 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/cc9dopSr.s 			page 49


 1103 000c 0123     		movs	r3, #1
 1104 000e 0377     		strb	r3, [r0, #28]
 450:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1105              		.loc 1 450 0 is_stmt 1 discriminator 2
 1106 0010 0223     		movs	r3, #2
 1107 0012 4377     		strb	r3, [r0, #29]
 452:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 1108              		.loc 1 452 0 discriminator 2
 1109 0014 BAB9     		cbnz	r2, .L75
 454:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1110              		.loc 1 454 0
 1111 0016 0368     		ldr	r3, [r0]
 1112 0018 9B68     		ldr	r3, [r3, #8]
 1113 001a 13F0400F 		tst	r3, #64
 1114 001e 01D1     		bne	.L76
 461:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 1115              		.loc 1 461 0
 1116 0020 0023     		movs	r3, #0
 1117 0022 0B73     		strb	r3, [r1, #12]
 1118              	.L76:
 467:HALLIB/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 1119              		.loc 1 467 0
 1120 0024 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1121              	.LVL88:
 1122 0026 FFF7FEFF 		bl	RTC_ByteToBcd2
 1123              	.LVL89:
 1124 002a 0604     		lsls	r6, r0, #16
 468:HALLIB/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 1125              		.loc 1 468 0
 1126 002c 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1127 002e FFF7FEFF 		bl	RTC_ByteToBcd2
 1128              	.LVL90:
 467:HALLIB/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 1129              		.loc 1 467 0
 1130 0032 46EA0026 		orr	r6, r6, r0, lsl #8
 469:HALLIB/Src/stm32f7xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16));  
 1131              		.loc 1 469 0
 1132 0036 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1133 0038 FFF7FEFF 		bl	RTC_ByteToBcd2
 1134              	.LVL91:
 468:HALLIB/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 1135              		.loc 1 468 0
 1136 003c 0643     		orrs	r6, r6, r0
 470:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1137              		.loc 1 470 0
 1138 003e 287B     		ldrb	r0, [r5, #12]	@ zero_extendqisi2
 467:HALLIB/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 1139              		.loc 1 467 0
 1140 0040 46EA0046 		orr	r6, r6, r0, lsl #16
 1141              	.LVL92:
 1142 0044 10E0     		b	.L77
 1143              	.LVL93:
 1144              	.L75:
 474:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1145              		.loc 1 474 0
 1146 0046 0368     		ldr	r3, [r0]
 1147 0048 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/cc9dopSr.s 			page 50


 1148 004a 13F0400F 		tst	r3, #64
 1149 004e 01D1     		bne	.L78
 482:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 1150              		.loc 1 482 0
 1151 0050 0023     		movs	r3, #0
 1152 0052 0B73     		strb	r3, [r1, #12]
 1153              	.L78:
 487:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 1154              		.loc 1 487 0
 1155 0054 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
 488:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 1156              		.loc 1 488 0
 1157 0056 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1158 0058 1B02     		lsls	r3, r3, #8
 487:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 1159              		.loc 1 487 0
 1160 005a 43EA0643 		orr	r3, r3, r6, lsl #16
 489:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16));   
 1161              		.loc 1 489 0
 1162 005e AE78     		ldrb	r6, [r5, #2]	@ zero_extendqisi2
 488:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 1163              		.loc 1 488 0
 1164 0060 3343     		orrs	r3, r3, r6
 490:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1165              		.loc 1 490 0
 1166 0062 2E7B     		ldrb	r6, [r5, #12]	@ zero_extendqisi2
 487:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 1167              		.loc 1 487 0
 1168 0064 43EA0646 		orr	r6, r3, r6, lsl #16
 1169              	.LVL94:
 1170              	.L77:
 494:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1171              		.loc 1 494 0
 1172 0068 2368     		ldr	r3, [r4]
 1173 006a CA22     		movs	r2, #202
 1174 006c 5A62     		str	r2, [r3, #36]
 1175 006e 2368     		ldr	r3, [r4]
 1176 0070 5322     		movs	r2, #83
 1177 0072 5A62     		str	r2, [r3, #36]
 497:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 1178              		.loc 1 497 0
 1179 0074 2046     		mov	r0, r4
 1180 0076 FFF7FEFF 		bl	RTC_EnterInitMode
 1181              	.LVL95:
 1182 007a 0746     		mov	r7, r0
 1183 007c 40B1     		cbz	r0, .L79
 500:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1184              		.loc 1 500 0
 1185 007e 2368     		ldr	r3, [r4]
 1186 0080 FF22     		movs	r2, #255
 1187 0082 5A62     		str	r2, [r3, #36]
 503:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1188              		.loc 1 503 0
 1189 0084 0423     		movs	r3, #4
 1190 0086 6377     		strb	r3, [r4, #29]
 506:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1191              		.loc 1 506 0
ARM GAS  /tmp/cc9dopSr.s 			page 51


 1192 0088 0023     		movs	r3, #0
 1193 008a 2377     		strb	r3, [r4, #28]
 508:HALLIB/Src/stm32f7xx_hal_rtc.c ****   } 
 1194              		.loc 1 508 0
 1195 008c 0127     		movs	r7, #1
 1196 008e 2FE0     		b	.L74
 1197              	.L79:
 513:HALLIB/Src/stm32f7xx_hal_rtc.c ****      
 1198              		.loc 1 513 0
 1199 0090 2268     		ldr	r2, [r4]
 1200 0092 184B     		ldr	r3, .L83
 1201 0094 3340     		ands	r3, r3, r6
 1202 0096 1360     		str	r3, [r2]
 516:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1203              		.loc 1 516 0
 1204 0098 2268     		ldr	r2, [r4]
 1205 009a 9368     		ldr	r3, [r2, #8]
 1206 009c 23F48023 		bic	r3, r3, #262144
 1207 00a0 9360     		str	r3, [r2, #8]
 519:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1208              		.loc 1 519 0
 1209 00a2 2168     		ldr	r1, [r4]
 1210 00a4 8868     		ldr	r0, [r1, #8]
 1211 00a6 2B69     		ldr	r3, [r5, #16]
 1212 00a8 6A69     		ldr	r2, [r5, #20]
 1213 00aa 1343     		orrs	r3, r3, r2
 1214 00ac 0343     		orrs	r3, r3, r0
 1215 00ae 8B60     		str	r3, [r1, #8]
 522:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1216              		.loc 1 522 0
 1217 00b0 2268     		ldr	r2, [r4]
 1218 00b2 D368     		ldr	r3, [r2, #12]
 1219 00b4 23F08003 		bic	r3, r3, #128
 1220 00b8 D360     		str	r3, [r2, #12]
 525:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1221              		.loc 1 525 0
 1222 00ba 2368     		ldr	r3, [r4]
 1223 00bc 9B68     		ldr	r3, [r3, #8]
 1224 00be 13F0200F 		tst	r3, #32
 1225 00c2 0CD1     		bne	.L80
 527:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {        
 1226              		.loc 1 527 0
 1227 00c4 2046     		mov	r0, r4
 1228 00c6 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1229              	.LVL96:
 1230 00ca 40B1     		cbz	r0, .L80
 530:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1231              		.loc 1 530 0
 1232 00cc 2368     		ldr	r3, [r4]
 1233 00ce FF22     		movs	r2, #255
 1234 00d0 5A62     		str	r2, [r3, #36]
 532:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1235              		.loc 1 532 0
 1236 00d2 0423     		movs	r3, #4
 1237 00d4 6377     		strb	r3, [r4, #29]
 535:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1238              		.loc 1 535 0
ARM GAS  /tmp/cc9dopSr.s 			page 52


 1239 00d6 0023     		movs	r3, #0
 1240 00d8 2377     		strb	r3, [r4, #28]
 537:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }
 1241              		.loc 1 537 0
 1242 00da 0127     		movs	r7, #1
 1243 00dc 08E0     		b	.L74
 1244              	.L80:
 542:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1245              		.loc 1 542 0
 1246 00de 2368     		ldr	r3, [r4]
 1247 00e0 FF22     		movs	r2, #255
 1248 00e2 5A62     		str	r2, [r3, #36]
 544:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1249              		.loc 1 544 0
 1250 00e4 0123     		movs	r3, #1
 1251 00e6 6377     		strb	r3, [r4, #29]
 546:HALLIB/Src/stm32f7xx_hal_rtc.c ****      
 1252              		.loc 1 546 0
 1253 00e8 0023     		movs	r3, #0
 1254 00ea 2377     		strb	r3, [r4, #28]
 548:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1255              		.loc 1 548 0
 1256 00ec 00E0     		b	.L74
 1257              	.LVL97:
 1258              	.L81:
 448:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1259              		.loc 1 448 0
 1260 00ee 0227     		movs	r7, #2
 1261              	.LVL98:
 1262              	.L74:
 550:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1263              		.loc 1 550 0
 1264 00f0 3846     		mov	r0, r7
 1265 00f2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1266              	.L84:
 1267              		.align	2
 1268              	.L83:
 1269 00f4 7F7F7F00 		.word	8355711
 1270              		.cfi_endproc
 1271              	.LFE140:
 1273              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1274              		.align	2
 1275              		.global	HAL_RTC_SetAlarm
 1276              		.thumb
 1277              		.thumb_func
 1279              	HAL_RTC_SetAlarm:
 1280              	.LFB144:
 784:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 1281              		.loc 1 784 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 0
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
 1285              	.LVL99:
 1286 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1287              	.LCFI11:
 1288              		.cfi_def_cfa_offset 24
 1289              		.cfi_offset 3, -24
ARM GAS  /tmp/cc9dopSr.s 			page 53


 1290              		.cfi_offset 4, -20
 1291              		.cfi_offset 5, -16
 1292              		.cfi_offset 6, -12
 1293              		.cfi_offset 7, -8
 1294              		.cfi_offset 14, -4
 1295              	.LVL100:
 797:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1296              		.loc 1 797 0
 1297 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1298 0004 012B     		cmp	r3, #1
 1299 0006 00F0AA80 		beq	.L97
 1300 000a 0D46     		mov	r5, r1
 1301 000c 0446     		mov	r4, r0
 797:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1302              		.loc 1 797 0 is_stmt 0 discriminator 2
 1303 000e 0123     		movs	r3, #1
 1304 0010 0377     		strb	r3, [r0, #28]
 799:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1305              		.loc 1 799 0 is_stmt 1 discriminator 2
 1306 0012 0223     		movs	r3, #2
 1307 0014 4377     		strb	r3, [r0, #29]
 801:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 1308              		.loc 1 801 0 discriminator 2
 1309 0016 0ABB     		cbnz	r2, .L87
 803:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1310              		.loc 1 803 0
 1311 0018 0368     		ldr	r3, [r0]
 1312 001a 9B68     		ldr	r3, [r3, #8]
 1313 001c 13F0400F 		tst	r3, #64
 1314 0020 01D1     		bne	.L88
 810:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1315              		.loc 1 810 0
 1316 0022 0023     		movs	r3, #0
 1317 0024 0B73     		strb	r3, [r1, #12]
 1318              	.L88:
 825:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1319              		.loc 1 825 0
 1320 0026 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1321              	.LVL101:
 1322 0028 FFF7FEFF 		bl	RTC_ByteToBcd2
 1323              	.LVL102:
 1324 002c 0604     		lsls	r6, r0, #16
 826:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1325              		.loc 1 826 0
 1326 002e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1327 0030 FFF7FEFF 		bl	RTC_ByteToBcd2
 1328              	.LVL103:
 825:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1329              		.loc 1 825 0
 1330 0034 46EA0026 		orr	r6, r6, r0, lsl #8
 827:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1331              		.loc 1 827 0
 1332 0038 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1333 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 1334              	.LVL104:
 826:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1335              		.loc 1 826 0
ARM GAS  /tmp/cc9dopSr.s 			page 54


 1336 003e 3043     		orrs	r0, r0, r6
 828:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1337              		.loc 1 828 0
 1338 0040 2E7B     		ldrb	r6, [r5, #12]	@ zero_extendqisi2
 827:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1339              		.loc 1 827 0
 1340 0042 40EA0646 		orr	r6, r0, r6, lsl #16
 829:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1341              		.loc 1 829 0
 1342 0046 95F82400 		ldrb	r0, [r5, #36]	@ zero_extendqisi2
 1343 004a FFF7FEFF 		bl	RTC_ByteToBcd2
 1344              	.LVL105:
 828:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1345              		.loc 1 828 0
 1346 004e 46EA0060 		orr	r0, r6, r0, lsl #24
 830:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1347              		.loc 1 830 0
 1348 0052 2E6A     		ldr	r6, [r5, #32]
 829:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1349              		.loc 1 829 0
 1350 0054 0643     		orrs	r6, r6, r0
 831:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1351              		.loc 1 831 0
 1352 0056 AF69     		ldr	r7, [r5, #24]
 825:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1353              		.loc 1 825 0
 1354 0058 3743     		orrs	r7, r7, r6
 1355              	.LVL106:
 1356 005a 18E0     		b	.L89
 1357              	.LVL107:
 1358              	.L87:
 835:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1359              		.loc 1 835 0
 1360 005c 0368     		ldr	r3, [r0]
 1361 005e 9B68     		ldr	r3, [r3, #8]
 1362 0060 13F0400F 		tst	r3, #64
 1363 0064 01D1     		bne	.L90
 843:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1364              		.loc 1 843 0
 1365 0066 0023     		movs	r3, #0
 1366 0068 0B73     		strb	r3, [r1, #12]
 1367              	.L90:
 850:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1368              		.loc 1 850 0
 1369 006a 2F6A     		ldr	r7, [r5, #32]
 861:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1370              		.loc 1 861 0
 1371 006c 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 1372              	.LVL108:
 862:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1373              		.loc 1 862 0
 1374 006e 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1375 0070 1B02     		lsls	r3, r3, #8
 861:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1376              		.loc 1 861 0
 1377 0072 43EA0241 		orr	r1, r3, r2, lsl #16
 1378              	.LVL109:
ARM GAS  /tmp/cc9dopSr.s 			page 55


 863:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1379              		.loc 1 863 0
 1380 0076 AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2
 862:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1381              		.loc 1 862 0
 1382 0078 0A43     		orrs	r2, r2, r1
 864:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1383              		.loc 1 864 0
 1384 007a 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 863:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1385              		.loc 1 863 0
 1386 007c 42EA0342 		orr	r2, r2, r3, lsl #16
 865:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1387              		.loc 1 865 0
 1388 0080 95F82430 		ldrb	r3, [r5, #36]	@ zero_extendqisi2
 864:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1389              		.loc 1 864 0
 1390 0084 42EA0363 		orr	r3, r2, r3, lsl #24
 865:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1391              		.loc 1 865 0
 1392 0088 3B43     		orrs	r3, r3, r7
 867:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1393              		.loc 1 867 0
 1394 008a AF69     		ldr	r7, [r5, #24]
 861:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1395              		.loc 1 861 0
 1396 008c 1F43     		orrs	r7, r7, r3
 1397              	.LVL110:
 1398              	.L89:
 871:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1399              		.loc 1 871 0
 1400 008e 6E68     		ldr	r6, [r5, #4]
 1401 0090 EB69     		ldr	r3, [r5, #28]
 1402 0092 1E43     		orrs	r6, r6, r3
 1403              	.LVL111:
 874:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1404              		.loc 1 874 0
 1405 0094 2368     		ldr	r3, [r4]
 1406 0096 CA22     		movs	r2, #202
 1407 0098 5A62     		str	r2, [r3, #36]
 1408 009a 2368     		ldr	r3, [r4]
 1409 009c 5322     		movs	r2, #83
 1410 009e 5A62     		str	r2, [r3, #36]
 877:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 1411              		.loc 1 877 0
 1412 00a0 AB6A     		ldr	r3, [r5, #40]
 1413 00a2 B3F5807F 		cmp	r3, #256
 1414 00a6 29D1     		bne	.L91
 880:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1415              		.loc 1 880 0
 1416 00a8 2268     		ldr	r2, [r4]
 1417 00aa 9368     		ldr	r3, [r2, #8]
 1418 00ac 23F48073 		bic	r3, r3, #256
 1419 00b0 9360     		str	r3, [r2, #8]
 883:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1420              		.loc 1 883 0
 1421 00b2 2268     		ldr	r2, [r4]
ARM GAS  /tmp/cc9dopSr.s 			page 56


 1422 00b4 9368     		ldr	r3, [r2, #8]
 1423 00b6 23F48053 		bic	r3, r3, #4096
 1424 00ba 9360     		str	r3, [r2, #8]
 886:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1425              		.loc 1 886 0
 1426 00bc FFF7FEFF 		bl	HAL_GetTick
 1427              	.LVL112:
 1428 00c0 0546     		mov	r5, r0
 1429              	.LVL113:
 889:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1430              		.loc 1 889 0
 1431 00c2 0DE0     		b	.L92
 1432              	.LVL114:
 1433              	.L93:
 891:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
 1434              		.loc 1 891 0
 1435 00c4 FFF7FEFF 		bl	HAL_GetTick
 1436              	.LVL115:
 1437 00c8 401B     		subs	r0, r0, r5
 1438 00ca B0F57A7F 		cmp	r0, #1000
 1439 00ce 07D9     		bls	.L92
 894:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1440              		.loc 1 894 0
 1441 00d0 2368     		ldr	r3, [r4]
 1442 00d2 FF22     		movs	r2, #255
 1443 00d4 5A62     		str	r2, [r3, #36]
 896:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1444              		.loc 1 896 0
 1445 00d6 0320     		movs	r0, #3
 1446 00d8 6077     		strb	r0, [r4, #29]
 899:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1447              		.loc 1 899 0
 1448 00da 0023     		movs	r3, #0
 1449 00dc 2377     		strb	r3, [r4, #28]
 901:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }   
 1450              		.loc 1 901 0
 1451 00de F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1452              	.LVL116:
 1453              	.L92:
 889:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1454              		.loc 1 889 0
 1455 00e0 2368     		ldr	r3, [r4]
 1456 00e2 DA68     		ldr	r2, [r3, #12]
 1457 00e4 12F0010F 		tst	r2, #1
 1458 00e8 ECD0     		beq	.L93
 905:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 1459              		.loc 1 905 0
 1460 00ea DF61     		str	r7, [r3, #28]
 907:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1461              		.loc 1 907 0
 1462 00ec 2368     		ldr	r3, [r4]
 1463 00ee 5E64     		str	r6, [r3, #68]
 909:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1464              		.loc 1 909 0
 1465 00f0 2268     		ldr	r2, [r4]
 1466 00f2 9368     		ldr	r3, [r2, #8]
 1467 00f4 43F48073 		orr	r3, r3, #256
ARM GAS  /tmp/cc9dopSr.s 			page 57


 1468 00f8 9360     		str	r3, [r2, #8]
 1469 00fa 28E0     		b	.L94
 1470              	.LVL117:
 1471              	.L91:
 914:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1472              		.loc 1 914 0
 1473 00fc 2268     		ldr	r2, [r4]
 1474 00fe 9368     		ldr	r3, [r2, #8]
 1475 0100 23F40073 		bic	r3, r3, #512
 1476 0104 9360     		str	r3, [r2, #8]
 917:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1477              		.loc 1 917 0
 1478 0106 2268     		ldr	r2, [r4]
 1479 0108 9368     		ldr	r3, [r2, #8]
 1480 010a 23F40053 		bic	r3, r3, #8192
 1481 010e 9360     		str	r3, [r2, #8]
 920:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1482              		.loc 1 920 0
 1483 0110 FFF7FEFF 		bl	HAL_GetTick
 1484              	.LVL118:
 1485 0114 0546     		mov	r5, r0
 1486              	.LVL119:
 923:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1487              		.loc 1 923 0
 1488 0116 0DE0     		b	.L95
 1489              	.LVL120:
 1490              	.L96:
 925:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
 1491              		.loc 1 925 0
 1492 0118 FFF7FEFF 		bl	HAL_GetTick
 1493              	.LVL121:
 1494 011c 401B     		subs	r0, r0, r5
 1495 011e B0F57A7F 		cmp	r0, #1000
 1496 0122 07D9     		bls	.L95
 928:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1497              		.loc 1 928 0
 1498 0124 2368     		ldr	r3, [r4]
 1499 0126 FF22     		movs	r2, #255
 1500 0128 5A62     		str	r2, [r3, #36]
 930:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1501              		.loc 1 930 0
 1502 012a 0320     		movs	r0, #3
 1503 012c 6077     		strb	r0, [r4, #29]
 933:HALLIB/Src/stm32f7xx_hal_rtc.c ****         
 1504              		.loc 1 933 0
 1505 012e 0023     		movs	r3, #0
 1506 0130 2377     		strb	r3, [r4, #28]
 935:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }  
 1507              		.loc 1 935 0
 1508 0132 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1509              	.LVL122:
 1510              	.L95:
 923:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1511              		.loc 1 923 0
 1512 0134 2368     		ldr	r3, [r4]
 1513 0136 DA68     		ldr	r2, [r3, #12]
 1514 0138 12F0020F 		tst	r2, #2
ARM GAS  /tmp/cc9dopSr.s 			page 58


 1515 013c ECD0     		beq	.L96
 939:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 1516              		.loc 1 939 0
 1517 013e 1F62     		str	r7, [r3, #32]
 941:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1518              		.loc 1 941 0
 1519 0140 2368     		ldr	r3, [r4]
 1520 0142 9E64     		str	r6, [r3, #72]
 943:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1521              		.loc 1 943 0
 1522 0144 2268     		ldr	r2, [r4]
 1523 0146 9368     		ldr	r3, [r2, #8]
 1524 0148 43F40073 		orr	r3, r3, #512
 1525 014c 9360     		str	r3, [r2, #8]
 1526              	.L94:
 947:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1527              		.loc 1 947 0
 1528 014e 2368     		ldr	r3, [r4]
 1529 0150 FF22     		movs	r2, #255
 1530 0152 5A62     		str	r2, [r3, #36]
 950:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1531              		.loc 1 950 0
 1532 0154 0123     		movs	r3, #1
 1533 0156 6377     		strb	r3, [r4, #29]
 953:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1534              		.loc 1 953 0
 1535 0158 0020     		movs	r0, #0
 1536 015a 2077     		strb	r0, [r4, #28]
 955:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 1537              		.loc 1 955 0
 1538 015c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1539              	.LVL123:
 1540              	.L97:
 797:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1541              		.loc 1 797 0
 1542 015e 0220     		movs	r0, #2
 1543              	.LVL124:
 956:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1544              		.loc 1 956 0
 1545 0160 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1546              		.cfi_endproc
 1547              	.LFE144:
 1549 0162 00BF     		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1550              		.align	2
 1551              		.global	HAL_RTC_SetAlarm_IT
 1552              		.thumb
 1553              		.thumb_func
 1555              	HAL_RTC_SetAlarm_IT:
 1556              	.LFB145:
 973:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 1557              		.loc 1 973 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 8
 1560              		@ frame_needed = 0, uses_anonymous_args = 0
 1561              	.LVL125:
 1562 0000 70B5     		push	{r4, r5, r6, lr}
 1563              	.LCFI12:
ARM GAS  /tmp/cc9dopSr.s 			page 59


 1564              		.cfi_def_cfa_offset 16
 1565              		.cfi_offset 4, -16
 1566              		.cfi_offset 5, -12
 1567              		.cfi_offset 6, -8
 1568              		.cfi_offset 14, -4
 1569 0002 82B0     		sub	sp, sp, #8
 1570              	.LCFI13:
 1571              		.cfi_def_cfa_offset 24
 1572              	.LVL126:
 975:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1573              		.loc 1 975 0
 1574 0004 624B     		ldr	r3, .L113
 1575 0006 1B68     		ldr	r3, [r3]
 1576 0008 624C     		ldr	r4, .L113+4
 1577 000a A4FB0343 		umull	r4, r3, r4, r3
 1578 000e DB0A     		lsrs	r3, r3, #11
 1579 0010 4FF47A76 		mov	r6, #1000
 1580 0014 06FB03F3 		mul	r3, r6, r3
 1581 0018 0193     		str	r3, [sp, #4]
 986:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1582              		.loc 1 986 0
 1583 001a 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1584 001c 012B     		cmp	r3, #1
 1585 001e 00F0B480 		beq	.L111
 1586 0022 0D46     		mov	r5, r1
 1587 0024 0446     		mov	r4, r0
 986:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1588              		.loc 1 986 0 is_stmt 0 discriminator 2
 1589 0026 0123     		movs	r3, #1
 1590 0028 0377     		strb	r3, [r0, #28]
 988:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1591              		.loc 1 988 0 is_stmt 1 discriminator 2
 1592 002a 0223     		movs	r3, #2
 1593 002c 4377     		strb	r3, [r0, #29]
 990:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 1594              		.loc 1 990 0 discriminator 2
 1595 002e 12BB     		cbnz	r2, .L101
 992:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1596              		.loc 1 992 0
 1597 0030 0368     		ldr	r3, [r0]
 1598 0032 9B68     		ldr	r3, [r3, #8]
 1599 0034 13F0400F 		tst	r3, #64
 1600 0038 01D1     		bne	.L102
 999:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1601              		.loc 1 999 0
 1602 003a 0023     		movs	r3, #0
 1603 003c 0B73     		strb	r3, [r1, #12]
 1604              	.L102:
1013:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1605              		.loc 1 1013 0
 1606 003e 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1607              	.LVL127:
 1608 0040 FFF7FEFF 		bl	RTC_ByteToBcd2
 1609              	.LVL128:
 1610 0044 0604     		lsls	r6, r0, #16
1014:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1611              		.loc 1 1014 0
ARM GAS  /tmp/cc9dopSr.s 			page 60


 1612 0046 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1613 0048 FFF7FEFF 		bl	RTC_ByteToBcd2
 1614              	.LVL129:
1013:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1615              		.loc 1 1013 0
 1616 004c 46EA0026 		orr	r6, r6, r0, lsl #8
1015:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1617              		.loc 1 1015 0
 1618 0050 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1619 0052 FFF7FEFF 		bl	RTC_ByteToBcd2
 1620              	.LVL130:
1014:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1621              		.loc 1 1014 0
 1622 0056 3043     		orrs	r0, r0, r6
1016:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1623              		.loc 1 1016 0
 1624 0058 2E7B     		ldrb	r6, [r5, #12]	@ zero_extendqisi2
1015:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1625              		.loc 1 1015 0
 1626 005a 40EA0646 		orr	r6, r0, r6, lsl #16
1017:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1627              		.loc 1 1017 0
 1628 005e 95F82400 		ldrb	r0, [r5, #36]	@ zero_extendqisi2
 1629 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 1630              	.LVL131:
1016:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1631              		.loc 1 1016 0
 1632 0066 46EA0060 		orr	r0, r6, r0, lsl #24
1018:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1633              		.loc 1 1018 0
 1634 006a 2E6A     		ldr	r6, [r5, #32]
1017:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1635              		.loc 1 1017 0
 1636 006c 0643     		orrs	r6, r6, r0
1019:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1637              		.loc 1 1019 0
 1638 006e AB69     		ldr	r3, [r5, #24]
1013:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1639              		.loc 1 1013 0
 1640 0070 46EA0300 		orr	r0, r6, r3
 1641              	.LVL132:
 1642 0074 18E0     		b	.L103
 1643              	.LVL133:
 1644              	.L101:
1023:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1645              		.loc 1 1023 0
 1646 0076 0368     		ldr	r3, [r0]
 1647 0078 9B68     		ldr	r3, [r3, #8]
 1648 007a 13F0400F 		tst	r3, #64
 1649 007e 01D1     		bne	.L104
1031:HALLIB/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1650              		.loc 1 1031 0
 1651 0080 0023     		movs	r3, #0
 1652 0082 0B73     		strb	r3, [r1, #12]
 1653              	.L104:
1038:HALLIB/Src/stm32f7xx_hal_rtc.c ****     {
 1654              		.loc 1 1038 0
ARM GAS  /tmp/cc9dopSr.s 			page 61


 1655 0084 286A     		ldr	r0, [r5, #32]
 1656              	.LVL134:
1048:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1657              		.loc 1 1048 0
 1658 0086 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 1659              	.LVL135:
1049:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1660              		.loc 1 1049 0
 1661 0088 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1662 008a 1B02     		lsls	r3, r3, #8
1048:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1663              		.loc 1 1048 0
 1664 008c 43EA0241 		orr	r1, r3, r2, lsl #16
 1665              	.LVL136:
1050:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1666              		.loc 1 1050 0
 1667 0090 AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2
1049:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1668              		.loc 1 1049 0
 1669 0092 0A43     		orrs	r2, r2, r1
1051:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1670              		.loc 1 1051 0
 1671 0094 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
1050:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1672              		.loc 1 1050 0
 1673 0096 42EA0342 		orr	r2, r2, r3, lsl #16
1052:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1674              		.loc 1 1052 0
 1675 009a 95F82430 		ldrb	r3, [r5, #36]	@ zero_extendqisi2
1051:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1676              		.loc 1 1051 0
 1677 009e 42EA0363 		orr	r3, r2, r3, lsl #24
1052:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1678              		.loc 1 1052 0
 1679 00a2 0343     		orrs	r3, r3, r0
1054:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1680              		.loc 1 1054 0
 1681 00a4 A869     		ldr	r0, [r5, #24]
1048:HALLIB/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1682              		.loc 1 1048 0
 1683 00a6 1843     		orrs	r0, r0, r3
 1684              	.LVL137:
 1685              	.L103:
1057:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1686              		.loc 1 1057 0
 1687 00a8 6968     		ldr	r1, [r5, #4]
 1688 00aa EB69     		ldr	r3, [r5, #28]
 1689 00ac 1943     		orrs	r1, r1, r3
 1690              	.LVL138:
1060:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1691              		.loc 1 1060 0
 1692 00ae 2368     		ldr	r3, [r4]
 1693 00b0 CA22     		movs	r2, #202
 1694 00b2 5A62     		str	r2, [r3, #36]
 1695 00b4 2368     		ldr	r3, [r4]
 1696 00b6 5322     		movs	r2, #83
 1697 00b8 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/cc9dopSr.s 			page 62


1063:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 1698              		.loc 1 1063 0
 1699 00ba AB6A     		ldr	r3, [r5, #40]
 1700 00bc B3F5807F 		cmp	r3, #256
 1701 00c0 29D1     		bne	.L105
1066:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1702              		.loc 1 1066 0
 1703 00c2 2268     		ldr	r2, [r4]
 1704 00c4 9368     		ldr	r3, [r2, #8]
 1705 00c6 23F48073 		bic	r3, r3, #256
 1706 00ca 9360     		str	r3, [r2, #8]
1069:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1707              		.loc 1 1069 0
 1708 00cc 2268     		ldr	r2, [r4]
 1709 00ce D368     		ldr	r3, [r2, #12]
 1710 00d0 DBB2     		uxtb	r3, r3
 1711 00d2 63F4C073 		orn	r3, r3, #384
 1712 00d6 D360     		str	r3, [r2, #12]
 1713              	.L107:
1074:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
 1714              		.loc 1 1074 0
 1715 00d8 019B     		ldr	r3, [sp, #4]
 1716 00da 5A1E     		subs	r2, r3, #1
 1717 00dc 0192     		str	r2, [sp, #4]
 1718 00de 3BB9     		cbnz	r3, .L106
1077:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1719              		.loc 1 1077 0
 1720 00e0 2368     		ldr	r3, [r4]
 1721 00e2 FF22     		movs	r2, #255
 1722 00e4 5A62     		str	r2, [r3, #36]
1079:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1723              		.loc 1 1079 0
 1724 00e6 0320     		movs	r0, #3
 1725              	.LVL139:
 1726 00e8 6077     		strb	r0, [r4, #29]
1082:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1727              		.loc 1 1082 0
 1728 00ea 0023     		movs	r3, #0
 1729 00ec 2377     		strb	r3, [r4, #28]
1084:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }
 1730              		.loc 1 1084 0
 1731 00ee 4DE0     		b	.L100
 1732              	.LVL140:
 1733              	.L106:
1087:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1734              		.loc 1 1087 0
 1735 00f0 2368     		ldr	r3, [r4]
 1736 00f2 DA68     		ldr	r2, [r3, #12]
 1737 00f4 12F0010F 		tst	r2, #1
 1738 00f8 EED0     		beq	.L107
1089:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 1739              		.loc 1 1089 0
 1740 00fa D861     		str	r0, [r3, #28]
1091:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1741              		.loc 1 1091 0
 1742 00fc 2368     		ldr	r3, [r4]
 1743 00fe 5964     		str	r1, [r3, #68]
ARM GAS  /tmp/cc9dopSr.s 			page 63


1093:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1744              		.loc 1 1093 0
 1745 0100 2268     		ldr	r2, [r4]
 1746 0102 9368     		ldr	r3, [r2, #8]
 1747 0104 43F48073 		orr	r3, r3, #256
 1748 0108 9360     		str	r3, [r2, #8]
1095:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1749              		.loc 1 1095 0
 1750 010a 2268     		ldr	r2, [r4]
 1751 010c 9368     		ldr	r3, [r2, #8]
 1752 010e 43F48053 		orr	r3, r3, #4096
 1753 0112 9360     		str	r3, [r2, #8]
 1754 0114 28E0     		b	.L108
 1755              	.L105:
1100:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1756              		.loc 1 1100 0
 1757 0116 2268     		ldr	r2, [r4]
 1758 0118 9368     		ldr	r3, [r2, #8]
 1759 011a 23F40073 		bic	r3, r3, #512
 1760 011e 9360     		str	r3, [r2, #8]
1103:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1761              		.loc 1 1103 0
 1762 0120 2368     		ldr	r3, [r4]
 1763 0122 DA68     		ldr	r2, [r3, #12]
 1764 0124 D2B2     		uxtb	r2, r2
 1765 0126 62F42072 		orn	r2, r2, #640
 1766 012a DA60     		str	r2, [r3, #12]
 1767              	.L110:
1108:HALLIB/Src/stm32f7xx_hal_rtc.c ****       {
 1768              		.loc 1 1108 0
 1769 012c 019B     		ldr	r3, [sp, #4]
 1770 012e 5A1E     		subs	r2, r3, #1
 1771 0130 0192     		str	r2, [sp, #4]
 1772 0132 3BB9     		cbnz	r3, .L109
1111:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1773              		.loc 1 1111 0
 1774 0134 2368     		ldr	r3, [r4]
 1775 0136 FF22     		movs	r2, #255
 1776 0138 5A62     		str	r2, [r3, #36]
1113:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1777              		.loc 1 1113 0
 1778 013a 0320     		movs	r0, #3
 1779              	.LVL141:
 1780 013c 6077     		strb	r0, [r4, #29]
1116:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1781              		.loc 1 1116 0
 1782 013e 0023     		movs	r3, #0
 1783 0140 2377     		strb	r3, [r4, #28]
1118:HALLIB/Src/stm32f7xx_hal_rtc.c ****       }
 1784              		.loc 1 1118 0
 1785 0142 23E0     		b	.L100
 1786              	.LVL142:
 1787              	.L109:
1121:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 1788              		.loc 1 1121 0
 1789 0144 2368     		ldr	r3, [r4]
 1790 0146 DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/cc9dopSr.s 			page 64


 1791 0148 12F0020F 		tst	r2, #2
 1792 014c EED0     		beq	.L110
1123:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 1793              		.loc 1 1123 0
 1794 014e 1862     		str	r0, [r3, #32]
1125:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1795              		.loc 1 1125 0
 1796 0150 2368     		ldr	r3, [r4]
 1797 0152 9964     		str	r1, [r3, #72]
1127:HALLIB/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1798              		.loc 1 1127 0
 1799 0154 2268     		ldr	r2, [r4]
 1800 0156 9368     		ldr	r3, [r2, #8]
 1801 0158 43F40073 		orr	r3, r3, #512
 1802 015c 9360     		str	r3, [r2, #8]
1129:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1803              		.loc 1 1129 0
 1804 015e 2268     		ldr	r2, [r4]
 1805 0160 9368     		ldr	r3, [r2, #8]
 1806 0162 43F40053 		orr	r3, r3, #8192
 1807 0166 9360     		str	r3, [r2, #8]
 1808              	.L108:
1133:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1809              		.loc 1 1133 0
 1810 0168 0B4B     		ldr	r3, .L113+8
 1811 016a 1A68     		ldr	r2, [r3]
 1812 016c 42F40032 		orr	r2, r2, #131072
 1813 0170 1A60     		str	r2, [r3]
1135:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1814              		.loc 1 1135 0
 1815 0172 9A68     		ldr	r2, [r3, #8]
 1816 0174 42F40032 		orr	r2, r2, #131072
 1817 0178 9A60     		str	r2, [r3, #8]
1138:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1818              		.loc 1 1138 0
 1819 017a 2368     		ldr	r3, [r4]
 1820 017c FF22     		movs	r2, #255
 1821 017e 5A62     		str	r2, [r3, #36]
1140:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1822              		.loc 1 1140 0
 1823 0180 0123     		movs	r3, #1
 1824 0182 6377     		strb	r3, [r4, #29]
1143:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1825              		.loc 1 1143 0
 1826 0184 0020     		movs	r0, #0
 1827              	.LVL143:
 1828 0186 2077     		strb	r0, [r4, #28]
1145:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 1829              		.loc 1 1145 0
 1830 0188 00E0     		b	.L100
 1831              	.LVL144:
 1832              	.L111:
 986:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1833              		.loc 1 986 0
 1834 018a 0220     		movs	r0, #2
 1835              	.LVL145:
 1836              	.L100:
ARM GAS  /tmp/cc9dopSr.s 			page 65


1146:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1837              		.loc 1 1146 0
 1838 018c 02B0     		add	sp, sp, #8
 1839              	.LCFI14:
 1840              		.cfi_def_cfa_offset 16
 1841              		@ sp needed
 1842 018e 70BD     		pop	{r4, r5, r6, pc}
 1843              	.L114:
 1844              		.align	2
 1845              	.L113:
 1846 0190 00000000 		.word	SystemCoreClock
 1847 0194 D34D6210 		.word	274877907
 1848 0198 003C0140 		.word	1073822720
 1849              		.cfi_endproc
 1850              	.LFE145:
 1852              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 1853              		.align	2
 1854              		.global	RTC_Bcd2ToByte
 1855              		.thumb
 1856              		.thumb_func
 1858              	RTC_Bcd2ToByte:
 1859              	.LFB155:
1533:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
1534:HALLIB/Src/stm32f7xx_hal_rtc.c **** /**
1535:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @brief  Converts from 2 digit BCD to Binary.
1536:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @param  Value BCD value to be converted
1537:HALLIB/Src/stm32f7xx_hal_rtc.c ****   * @retval Converted word
1538:HALLIB/Src/stm32f7xx_hal_rtc.c ****   */
1539:HALLIB/Src/stm32f7xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
1540:HALLIB/Src/stm32f7xx_hal_rtc.c **** {
 1860              		.loc 1 1540 0
 1861              		.cfi_startproc
 1862              		@ args = 0, pretend = 0, frame = 0
 1863              		@ frame_needed = 0, uses_anonymous_args = 0
 1864              		@ link register save eliminated.
 1865              	.LVL146:
1541:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmp = 0;
1542:HALLIB/Src/stm32f7xx_hal_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 1866              		.loc 1 1542 0
 1867 0000 0309     		lsrs	r3, r0, #4
 1868 0002 03EB8303 		add	r3, r3, r3, lsl #2
 1869 0006 5A00     		lsls	r2, r3, #1
 1870              	.LVL147:
1543:HALLIB/Src/stm32f7xx_hal_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 1871              		.loc 1 1543 0
 1872 0008 00F00F00 		and	r0, r0, #15
 1873              	.LVL148:
 1874 000c 1044     		add	r0, r0, r2
1544:HALLIB/Src/stm32f7xx_hal_rtc.c **** }
 1875              		.loc 1 1544 0
 1876 000e C0B2     		uxtb	r0, r0
 1877 0010 7047     		bx	lr
 1878              		.cfi_endproc
 1879              	.LFE155:
 1881 0012 00BF     		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 1882              		.align	2
 1883              		.global	HAL_RTC_GetTime
ARM GAS  /tmp/cc9dopSr.s 			page 66


 1884              		.thumb
 1885              		.thumb_func
 1887              	HAL_RTC_GetTime:
 1888              	.LFB141:
 574:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 1889              		.loc 1 574 0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 0
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893              	.LVL149:
 1894 0000 70B5     		push	{r4, r5, r6, lr}
 1895              	.LCFI15:
 1896              		.cfi_def_cfa_offset 16
 1897              		.cfi_offset 4, -16
 1898              		.cfi_offset 5, -12
 1899              		.cfi_offset 6, -8
 1900              		.cfi_offset 14, -4
 1901              	.LVL150:
 581:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1902              		.loc 1 581 0
 1903 0002 0368     		ldr	r3, [r0]
 1904 0004 9B6A     		ldr	r3, [r3, #40]
 1905 0006 4B60     		str	r3, [r1, #4]
 584:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1906              		.loc 1 584 0
 1907 0008 0368     		ldr	r3, [r0]
 1908 000a 1B69     		ldr	r3, [r3, #16]
 1909 000c C3F30E03 		ubfx	r3, r3, #0, #15
 1910 0010 8B60     		str	r3, [r1, #8]
 587:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1911              		.loc 1 587 0
 1912 0012 0368     		ldr	r3, [r0]
 1913 0014 1868     		ldr	r0, [r3]
 1914              	.LVL151:
 1915 0016 0F4B     		ldr	r3, .L119
 1916 0018 0340     		ands	r3, r3, r0
 1917              	.LVL152:
 590:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1918              		.loc 1 590 0
 1919 001a 1C0C     		lsrs	r4, r3, #16
 1920 001c 04F03F00 		and	r0, r4, #63
 1921 0020 0870     		strb	r0, [r1]
 591:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1922              		.loc 1 591 0
 1923 0022 C3F30626 		ubfx	r6, r3, #8, #7
 1924 0026 4E70     		strb	r6, [r1, #1]
 592:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 1925              		.loc 1 592 0
 1926 0028 03F07F05 		and	r5, r3, #127
 1927 002c 8D70     		strb	r5, [r1, #2]
 593:HALLIB/Src/stm32f7xx_hal_rtc.c ****   
 1928              		.loc 1 593 0
 1929 002e 04F04004 		and	r4, r4, #64
 1930 0032 0C73     		strb	r4, [r1, #12]
 596:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 1931              		.loc 1 596 0
 1932 0034 5AB9     		cbnz	r2, .L117
ARM GAS  /tmp/cc9dopSr.s 			page 67


 1933 0036 0C46     		mov	r4, r1
 599:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 1934              		.loc 1 599 0
 1935 0038 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1936              	.LVL153:
 1937 003c 2070     		strb	r0, [r4]
 600:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 1938              		.loc 1 600 0
 1939 003e 3046     		mov	r0, r6
 1940 0040 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1941              	.LVL154:
 1942 0044 6070     		strb	r0, [r4, #1]
 601:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 1943              		.loc 1 601 0
 1944 0046 2846     		mov	r0, r5
 1945 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1946              	.LVL155:
 1947 004c A070     		strb	r0, [r4, #2]
 1948              	.LVL156:
 1949              	.L117:
 605:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1950              		.loc 1 605 0
 1951 004e 0020     		movs	r0, #0
 1952 0050 70BD     		pop	{r4, r5, r6, pc}
 1953              	.L120:
 1954 0052 00BF     		.align	2
 1955              	.L119:
 1956 0054 7F7F7F00 		.word	8355711
 1957              		.cfi_endproc
 1958              	.LFE141:
 1960              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1961              		.align	2
 1962              		.global	HAL_RTC_GetDate
 1963              		.thumb
 1964              		.thumb_func
 1966              	HAL_RTC_GetDate:
 1967              	.LFB143:
 729:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 1968              		.loc 1 729 0
 1969              		.cfi_startproc
 1970              		@ args = 0, pretend = 0, frame = 0
 1971              		@ frame_needed = 0, uses_anonymous_args = 0
 1972              	.LVL157:
 1973 0000 70B5     		push	{r4, r5, r6, lr}
 1974              	.LCFI16:
 1975              		.cfi_def_cfa_offset 16
 1976              		.cfi_offset 4, -16
 1977              		.cfi_offset 5, -12
 1978              		.cfi_offset 6, -8
 1979              		.cfi_offset 14, -4
 1980              	.LVL158:
 736:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1981              		.loc 1 736 0
 1982 0002 0368     		ldr	r3, [r0]
 1983 0004 5868     		ldr	r0, [r3, #4]
 1984              	.LVL159:
 1985 0006 0E4B     		ldr	r3, .L124
ARM GAS  /tmp/cc9dopSr.s 			page 68


 1986 0008 0340     		ands	r3, r3, r0
 1987              	.LVL160:
 739:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1988              		.loc 1 739 0
 1989 000a 180C     		lsrs	r0, r3, #16
 1990 000c C870     		strb	r0, [r1, #3]
 740:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 1991              		.loc 1 740 0
 1992 000e C3F30426 		ubfx	r6, r3, #8, #5
 1993 0012 4E70     		strb	r6, [r1, #1]
 741:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 1994              		.loc 1 741 0
 1995 0014 03F03F05 		and	r5, r3, #63
 1996 0018 8D70     		strb	r5, [r1, #2]
 742:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 1997              		.loc 1 742 0
 1998 001a C3F34233 		ubfx	r3, r3, #13, #3
 1999              	.LVL161:
 2000 001e 0B70     		strb	r3, [r1]
 745:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {    
 2001              		.loc 1 745 0
 2002 0020 5AB9     		cbnz	r2, .L122
 2003 0022 0C46     		mov	r4, r1
 748:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 2004              		.loc 1 748 0
 2005 0024 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2006              	.LVL162:
 2007 0028 E070     		strb	r0, [r4, #3]
 749:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 2008              		.loc 1 749 0
 2009 002a 3046     		mov	r0, r6
 2010 002c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2011              	.LVL163:
 2012 0030 6070     		strb	r0, [r4, #1]
 750:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 2013              		.loc 1 750 0
 2014 0032 2846     		mov	r0, r5
 2015 0034 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2016              	.LVL164:
 2017 0038 A070     		strb	r0, [r4, #2]
 2018              	.LVL165:
 2019              	.L122:
 753:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 2020              		.loc 1 753 0
 2021 003a 0020     		movs	r0, #0
 2022 003c 70BD     		pop	{r4, r5, r6, pc}
 2023              	.L125:
 2024 003e 00BF     		.align	2
 2025              	.L124:
 2026 0040 3FFFFF00 		.word	16777023
 2027              		.cfi_endproc
 2028              	.LFE143:
 2030              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2031              		.align	2
 2032              		.global	HAL_RTC_GetAlarm
 2033              		.thumb
 2034              		.thumb_func
ARM GAS  /tmp/cc9dopSr.s 			page 69


 2036              	HAL_RTC_GetAlarm:
 2037              	.LFB147:
1256:HALLIB/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
 2038              		.loc 1 1256 0
 2039              		.cfi_startproc
 2040              		@ args = 0, pretend = 0, frame = 0
 2041              		@ frame_needed = 0, uses_anonymous_args = 0
 2042              	.LVL166:
 2043 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2044              	.LCFI17:
 2045              		.cfi_def_cfa_offset 24
 2046              		.cfi_offset 3, -24
 2047              		.cfi_offset 4, -20
 2048              		.cfi_offset 5, -16
 2049              		.cfi_offset 6, -12
 2050              		.cfi_offset 7, -8
 2051              		.cfi_offset 14, -4
 2052              	.LVL167:
1263:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 2053              		.loc 1 1263 0
 2054 0002 B2F5807F 		cmp	r2, #256
 2055 0006 06D1     		bne	.L127
1266:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 2056              		.loc 1 1266 0
 2057 0008 8A62     		str	r2, [r1, #40]
1268:HALLIB/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 2058              		.loc 1 1268 0
 2059 000a 0068     		ldr	r0, [r0]
 2060              	.LVL168:
 2061 000c C269     		ldr	r2, [r0, #28]
 2062              	.LVL169:
1269:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 2063              		.loc 1 1269 0
 2064 000e 476C     		ldr	r7, [r0, #68]
 2065 0010 C7F30E07 		ubfx	r7, r7, #0, #15
 2066              	.LVL170:
 2067 0014 07E0     		b	.L128
 2068              	.LVL171:
 2069              	.L127:
1273:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 2070              		.loc 1 1273 0
 2071 0016 4FF40072 		mov	r2, #512
 2072              	.LVL172:
 2073 001a 8A62     		str	r2, [r1, #40]
1275:HALLIB/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2074              		.loc 1 1275 0
 2075 001c 0068     		ldr	r0, [r0]
 2076              	.LVL173:
 2077 001e 026A     		ldr	r2, [r0, #32]
 2078              	.LVL174:
1276:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }
 2079              		.loc 1 1276 0
 2080 0020 876C     		ldr	r7, [r0, #72]
 2081 0022 C7F30E07 		ubfx	r7, r7, #0, #15
 2082              	.LVL175:
 2083              	.L128:
1280:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8);
ARM GAS  /tmp/cc9dopSr.s 			page 70


 2084              		.loc 1 1280 0
 2085 0026 C2F30744 		ubfx	r4, r2, #16, #8
 2086 002a 04F03F00 		and	r0, r4, #63
 2087 002e 0870     		strb	r0, [r1]
1281:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 2088              		.loc 1 1281 0
 2089 0030 C2F30626 		ubfx	r6, r2, #8, #7
 2090 0034 4E70     		strb	r6, [r1, #1]
1282:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 2091              		.loc 1 1282 0
 2092 0036 02F07F05 		and	r5, r2, #127
 2093 003a 8D70     		strb	r5, [r1, #2]
1283:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2094              		.loc 1 1283 0
 2095 003c 04F04004 		and	r4, r4, #64
 2096 0040 0C73     		strb	r4, [r1, #12]
1284:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 2097              		.loc 1 1284 0
 2098 0042 4F60     		str	r7, [r1, #4]
1285:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2099              		.loc 1 1285 0
 2100 0044 C2F30567 		ubfx	r7, r2, #24, #6
 2101              	.LVL176:
 2102 0048 81F82470 		strb	r7, [r1, #36]
1286:HALLIB/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 2103              		.loc 1 1286 0
 2104 004c 02F08044 		and	r4, r2, #1073741824
 2105 0050 0C62     		str	r4, [r1, #32]
1287:HALLIB/Src/stm32f7xx_hal_rtc.c ****     
 2106              		.loc 1 1287 0
 2107 0052 02F08032 		and	r2, r2, #-2139062144
 2108              	.LVL177:
 2109 0056 8A61     		str	r2, [r1, #24]
1289:HALLIB/Src/stm32f7xx_hal_rtc.c ****   {
 2110              		.loc 1 1289 0
 2111 0058 83B9     		cbnz	r3, .L129
 2112 005a 0C46     		mov	r4, r1
1291:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2113              		.loc 1 1291 0
 2114 005c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2115              	.LVL178:
 2116 0060 2070     		strb	r0, [r4]
1292:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2117              		.loc 1 1292 0
 2118 0062 3046     		mov	r0, r6
 2119 0064 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2120              	.LVL179:
 2121 0068 6070     		strb	r0, [r4, #1]
1293:HALLIB/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2122              		.loc 1 1293 0
 2123 006a 2846     		mov	r0, r5
 2124 006c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2125              	.LVL180:
 2126 0070 A070     		strb	r0, [r4, #2]
1294:HALLIB/Src/stm32f7xx_hal_rtc.c ****   }  
 2127              		.loc 1 1294 0
 2128 0072 3846     		mov	r0, r7
ARM GAS  /tmp/cc9dopSr.s 			page 71


 2129 0074 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2130              	.LVL181:
 2131 0078 84F82400 		strb	r0, [r4, #36]
 2132              	.LVL182:
 2133              	.L129:
1298:HALLIB/Src/stm32f7xx_hal_rtc.c **** 
 2134              		.loc 1 1298 0
 2135 007c 0020     		movs	r0, #0
 2136 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2137              		.cfi_endproc
 2138              	.LFE147:
 2140              		.text
 2141              	.Letext0:
 2142              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 2143              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 2144              		.file 4 "Inc/stm32f767xx.h"
 2145              		.file 5 "Inc/stm32f7xx.h"
 2146              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 2147              		.file 7 "HALLIB/Inc/stm32f7xx_hal_rtc.h"
 2148              		.file 8 "CORE/core_cm7.h"
 2149              		.file 9 "Inc/system_stm32f7xx.h"
 2150              		.file 10 "HALLIB/Inc/stm32f7xx_hal.h"
 2151              		.file 11 "HALLIB/Inc/stm32f7xx_hal_rtc_ex.h"
ARM GAS  /tmp/cc9dopSr.s 			page 72


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_rtc.c
     /tmp/cc9dopSr.s:21     .text.HAL_RTC_MspInit:00000000 $t
     /tmp/cc9dopSr.s:26     .text.HAL_RTC_MspInit:00000000 HAL_RTC_MspInit
     /tmp/cc9dopSr.s:40     .text.HAL_RTC_MspDeInit:00000000 $t
     /tmp/cc9dopSr.s:45     .text.HAL_RTC_MspDeInit:00000000 HAL_RTC_MspDeInit
     /tmp/cc9dopSr.s:58     .text.HAL_RTC_DeactivateAlarm:00000000 $t
     /tmp/cc9dopSr.s:63     .text.HAL_RTC_DeactivateAlarm:00000000 HAL_RTC_DeactivateAlarm
     /tmp/cc9dopSr.s:215    .text.HAL_RTC_AlarmAEventCallback:00000000 $t
     /tmp/cc9dopSr.s:220    .text.HAL_RTC_AlarmAEventCallback:00000000 HAL_RTC_AlarmAEventCallback
     /tmp/cc9dopSr.s:233    .text.HAL_RTC_AlarmIRQHandler:00000000 $t
     /tmp/cc9dopSr.s:238    .text.HAL_RTC_AlarmIRQHandler:00000000 HAL_RTC_AlarmIRQHandler
     /tmp/cc9dopSr.s:303    .text.HAL_RTC_AlarmIRQHandler:00000058 $d
     /tmp/cc9dopSr.s:308    .text.HAL_RTC_PollForAlarmAEvent:00000000 $t
     /tmp/cc9dopSr.s:313    .text.HAL_RTC_PollForAlarmAEvent:00000000 HAL_RTC_PollForAlarmAEvent
     /tmp/cc9dopSr.s:379    .text.HAL_RTC_WaitForSynchro:00000000 $t
     /tmp/cc9dopSr.s:384    .text.HAL_RTC_WaitForSynchro:00000000 HAL_RTC_WaitForSynchro
     /tmp/cc9dopSr.s:439    .text.HAL_RTC_GetState:00000000 $t
     /tmp/cc9dopSr.s:444    .text.HAL_RTC_GetState:00000000 HAL_RTC_GetState
     /tmp/cc9dopSr.s:461    .text.RTC_EnterInitMode:00000000 $t
     /tmp/cc9dopSr.s:466    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
     /tmp/cc9dopSr.s:529    .text.HAL_RTC_Init:00000000 $t
     /tmp/cc9dopSr.s:534    .text.HAL_RTC_Init:00000000 HAL_RTC_Init
     /tmp/cc9dopSr.s:670    .text.HAL_RTC_Init:000000a4 $d
     /tmp/cc9dopSr.s:675    .text.HAL_RTC_DeInit:00000000 $t
     /tmp/cc9dopSr.s:680    .text.HAL_RTC_DeInit:00000000 HAL_RTC_DeInit
     /tmp/cc9dopSr.s:847    .text.HAL_RTC_DeInit:000000dc $d
     /tmp/cc9dopSr.s:852    .text.RTC_ByteToBcd2:00000000 $t
     /tmp/cc9dopSr.s:857    .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
     /tmp/cc9dopSr.s:895    .text.HAL_RTC_SetDate:00000000 $t
     /tmp/cc9dopSr.s:900    .text.HAL_RTC_SetDate:00000000 HAL_RTC_SetDate
     /tmp/cc9dopSr.s:1069   .text.HAL_RTC_SetDate:000000d4 $d
     /tmp/cc9dopSr.s:1074   .text.HAL_RTC_SetTime:00000000 $t
     /tmp/cc9dopSr.s:1079   .text.HAL_RTC_SetTime:00000000 HAL_RTC_SetTime
     /tmp/cc9dopSr.s:1269   .text.HAL_RTC_SetTime:000000f4 $d
     /tmp/cc9dopSr.s:1274   .text.HAL_RTC_SetAlarm:00000000 $t
     /tmp/cc9dopSr.s:1279   .text.HAL_RTC_SetAlarm:00000000 HAL_RTC_SetAlarm
     /tmp/cc9dopSr.s:1550   .text.HAL_RTC_SetAlarm_IT:00000000 $t
     /tmp/cc9dopSr.s:1555   .text.HAL_RTC_SetAlarm_IT:00000000 HAL_RTC_SetAlarm_IT
     /tmp/cc9dopSr.s:1846   .text.HAL_RTC_SetAlarm_IT:00000190 $d
     /tmp/cc9dopSr.s:1853   .text.RTC_Bcd2ToByte:00000000 $t
     /tmp/cc9dopSr.s:1858   .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
     /tmp/cc9dopSr.s:1882   .text.HAL_RTC_GetTime:00000000 $t
     /tmp/cc9dopSr.s:1887   .text.HAL_RTC_GetTime:00000000 HAL_RTC_GetTime
     /tmp/cc9dopSr.s:1956   .text.HAL_RTC_GetTime:00000054 $d
     /tmp/cc9dopSr.s:1961   .text.HAL_RTC_GetDate:00000000 $t
     /tmp/cc9dopSr.s:1966   .text.HAL_RTC_GetDate:00000000 HAL_RTC_GetDate
     /tmp/cc9dopSr.s:2026   .text.HAL_RTC_GetDate:00000040 $d
     /tmp/cc9dopSr.s:2031   .text.HAL_RTC_GetAlarm:00000000 $t
     /tmp/cc9dopSr.s:2036   .text.HAL_RTC_GetAlarm:00000000 HAL_RTC_GetAlarm
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RTCEx_AlarmBEventCallback
SystemCoreClock
