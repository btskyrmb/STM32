ARM GAS  /tmp/ccrscn1F.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_lptim.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_LPTIM_MspInit,"ax",%progbits
  21              		.align	2
  22              		.weak	HAL_LPTIM_MspInit
  23              		.thumb
  24              		.thumb_func
  26              	HAL_LPTIM_MspInit:
  27              	.LFB138:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal_lptim.c"
   1:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @file    stm32f7xx_hal_lptim.c
   4:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief   LPTIM HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *          functionalities of the Low Power Timer (LPTIM) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *           + Initialization and de-initialization functions.
   9:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *           + Start/Stop operation functions in polling mode.
  10:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *           + Start/Stop operation functions in interrupt mode.
  11:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *           + Reading operation functions.
  12:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *           + Peripheral State functions.
  13:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         
  14:HALLIB/Src/stm32f7xx_hal_lptim.c ****   @verbatim
  15:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================
  16:HALLIB/Src/stm32f7xx_hal_lptim.c ****                      ##### How to use this driver #####
  17:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================
  18:HALLIB/Src/stm32f7xx_hal_lptim.c ****     [..]
  19:HALLIB/Src/stm32f7xx_hal_lptim.c ****       The LPTIM HAL driver can be used as follows:
  20:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
  21:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (#)Initialize the LPTIM low level resources by implementing the
  22:HALLIB/Src/stm32f7xx_hal_lptim.c ****         HAL_LPTIM_MspInit():
  23:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) Enable the LPTIM interface clock using __LPTIMx_CLK_ENABLE().
  24:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) In case of using interrupts (e.g. HAL_LPTIM_PWM_Start_IT()):
  25:HALLIB/Src/stm32f7xx_hal_lptim.c ****              (+++) Configure the LPTIM interrupt priority using HAL_NVIC_SetPriority().
  26:HALLIB/Src/stm32f7xx_hal_lptim.c ****              (+++) Enable the LPTIM IRQ handler using HAL_NVIC_EnableIRQ().
  27:HALLIB/Src/stm32f7xx_hal_lptim.c ****              (+++) In LPTIM IRQ handler, call HAL_LPTIM_IRQHandler().
  28:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
  29:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (#)Initialize the LPTIM HAL using HAL_LPTIM_Init(). This function
  30:HALLIB/Src/stm32f7xx_hal_lptim.c ****          configures mainly:
ARM GAS  /tmp/ccrscn1F.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) The instance: LPTIM1.
  32:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) Clock: the counter clock.
  33:HALLIB/Src/stm32f7xx_hal_lptim.c ****                (+++) Source: it can be either the ULPTIM input (IN1) or one of
  34:HALLIB/Src/stm32f7xx_hal_lptim.c ****                               the internal clock; (APB, LSE, LSI or MSI).
  35:HALLIB/Src/stm32f7xx_hal_lptim.c ****                (+++) Prescaler: select the clock divider.
  36:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##)  UltraLowPowerClock : To be used only if the ULPTIM is selected
  37:HALLIB/Src/stm32f7xx_hal_lptim.c ****                as counter clock source.
  38:HALLIB/Src/stm32f7xx_hal_lptim.c ****                (+++) Polarity:   polarity of the active edge for the counter unit
  39:HALLIB/Src/stm32f7xx_hal_lptim.c ****                                if the ULPTIM input is selected.
  40:HALLIB/Src/stm32f7xx_hal_lptim.c ****                (+++) SampleTime: clock sampling time to configure the clock glitch
  41:HALLIB/Src/stm32f7xx_hal_lptim.c ****                                filter.              
  42:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) Trigger: How the counter start.
  43:HALLIB/Src/stm32f7xx_hal_lptim.c ****               (+++) Source: trigger can be software or one of the hardware triggers.
  44:HALLIB/Src/stm32f7xx_hal_lptim.c ****               (+++) ActiveEdge: only for hardware trigger.
  45:HALLIB/Src/stm32f7xx_hal_lptim.c ****               (+++) SampleTime: trigger sampling time to configure the trigger
  46:HALLIB/Src/stm32f7xx_hal_lptim.c ****                                 glitch filter.
  47:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) OutputPolarity: 2 opposite polarities are possibles.
  48:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) UpdateMode: specifies whether the update of the autoreload and
  49:HALLIB/Src/stm32f7xx_hal_lptim.c ****               the compare values is done immediately or after the end of current
  50:HALLIB/Src/stm32f7xx_hal_lptim.c ****               period.   
  51:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
  52:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (#)Six modes are available:
  53:HALLIB/Src/stm32f7xx_hal_lptim.c ****       
  54:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) PWM Mode: To generate a PWM signal with specified period and pulse,
  55:HALLIB/Src/stm32f7xx_hal_lptim.c ****          call HAL_LPTIM_PWM_Start() or HAL_LPTIM_PWM_Start_IT() for interruption
  56:HALLIB/Src/stm32f7xx_hal_lptim.c ****          mode.
  57:HALLIB/Src/stm32f7xx_hal_lptim.c ****          
  58:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) One Pulse Mode: To generate pulse with specified width in response
  59:HALLIB/Src/stm32f7xx_hal_lptim.c ****          to a stimulus, call HAL_LPTIM_OnePulse_Start() or
  60:HALLIB/Src/stm32f7xx_hal_lptim.c ****          HAL_LPTIM_OnePulse_Start_IT() for interruption mode.
  61:HALLIB/Src/stm32f7xx_hal_lptim.c ****          
  62:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) Set once Mode: In this mode, the output changes the level (from
  63:HALLIB/Src/stm32f7xx_hal_lptim.c ****          low level to high level if the output polarity is configured high, else
  64:HALLIB/Src/stm32f7xx_hal_lptim.c ****          the opposite) when a compare match occurs. To start this mode, call 
  65:HALLIB/Src/stm32f7xx_hal_lptim.c ****          HAL_LPTIM_SetOnce_Start() or HAL_LPTIM_SetOnce_Start_IT() for
  66:HALLIB/Src/stm32f7xx_hal_lptim.c ****          interruption mode.
  67:HALLIB/Src/stm32f7xx_hal_lptim.c ****          
  68:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) Encoder Mode: To use the encoder interface call
  69:HALLIB/Src/stm32f7xx_hal_lptim.c ****          HAL_LPTIM_Encoder_Start() or HAL_LPTIM_Encoder_Start_IT() for 
  70:HALLIB/Src/stm32f7xx_hal_lptim.c ****          interruption mode.
  71:HALLIB/Src/stm32f7xx_hal_lptim.c ****          
  72:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) Time out Mode: an active edge on one selected trigger input rests
  73:HALLIB/Src/stm32f7xx_hal_lptim.c ****          the counter. The first trigger event will start the timer, any
  74:HALLIB/Src/stm32f7xx_hal_lptim.c ****          successive trigger event will reset the counter and the timer will
  75:HALLIB/Src/stm32f7xx_hal_lptim.c ****          restart. To start this mode call HAL_LPTIM_TimeOut_Start_IT() or 
  76:HALLIB/Src/stm32f7xx_hal_lptim.c ****          HAL_LPTIM_TimeOut_Start_IT() for interruption mode.
  77:HALLIB/Src/stm32f7xx_hal_lptim.c ****          
  78:HALLIB/Src/stm32f7xx_hal_lptim.c ****          (##) Counter Mode: counter can be used to count external events on
  79:HALLIB/Src/stm32f7xx_hal_lptim.c ****          the LPTIM Input1 or it can be used to count internal clock cycles.
  80:HALLIB/Src/stm32f7xx_hal_lptim.c ****          To start this mode, call HAL_LPTIM_Counter_Start() or 
  81:HALLIB/Src/stm32f7xx_hal_lptim.c ****          HAL_LPTIM_Counter_Start_IT() for interruption mode.             
  82:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
  83:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
  84:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (#) User can stop any process by calling the corresponding API:
  85:HALLIB/Src/stm32f7xx_hal_lptim.c ****           HAL_LPTIM_Xxx_Stop() or HAL_LPTIM_Xxx_Stop_IT() if the process is
  86:HALLIB/Src/stm32f7xx_hal_lptim.c ****           already started in interruption mode.
  87:HALLIB/Src/stm32f7xx_hal_lptim.c ****          
ARM GAS  /tmp/ccrscn1F.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (#) Call HAL_LPTIM_DeInit() to deinitialize the LPTIM peripheral.
  89:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
  90:HALLIB/Src/stm32f7xx_hal_lptim.c ****    *** Callback registration ***
  91:HALLIB/Src/stm32f7xx_hal_lptim.c ****   =============================================
  92:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
  93:HALLIB/Src/stm32f7xx_hal_lptim.c ****   The compilation define USE_HAL_LPTIM_REGISTER_CALLBACKS when set to 1
  94:HALLIB/Src/stm32f7xx_hal_lptim.c ****   allows the user to configure dynamically the driver callbacks.
  95:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
  96:HALLIB/Src/stm32f7xx_hal_lptim.c ****   Use Function @ref HAL_LPTIM_RegisterCallback() to register a callback.
  97:HALLIB/Src/stm32f7xx_hal_lptim.c ****   @ref HAL_LPTIM_RegisterCallback() takes as parameters the HAL peripheral handle,
  98:HALLIB/Src/stm32f7xx_hal_lptim.c ****   the Callback ID and a pointer to the user callback function.
  99:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 100:HALLIB/Src/stm32f7xx_hal_lptim.c ****   Use function @ref HAL_LPTIM_UnRegisterCallback() to reset a callback to the default
 101:HALLIB/Src/stm32f7xx_hal_lptim.c ****   weak function.
 102:HALLIB/Src/stm32f7xx_hal_lptim.c ****   @ref HAL_LPTIM_UnRegisterCallback takes as parameters the HAL peripheral handle,
 103:HALLIB/Src/stm32f7xx_hal_lptim.c ****   and the Callback ID.
 104:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 105:HALLIB/Src/stm32f7xx_hal_lptim.c ****   These functions allow to register/unregister following callbacks:
 106:HALLIB/Src/stm32f7xx_hal_lptim.c ****     (+) MspInitCallback         : LPTIM Msp Init Callback.
 107:HALLIB/Src/stm32f7xx_hal_lptim.c ****     (+) MspDeInitCallback       : LPTIM Msp DeInit Callback.
 108:HALLIB/Src/stm32f7xx_hal_lptim.c ****     (+) CompareMatchCallback    : LPTIM Compare Match Init Callback.
 109:HALLIB/Src/stm32f7xx_hal_lptim.c ****     (+) AutoReloadMatchCallback : LPTIM Auto Reload Match Callback.
 110:HALLIB/Src/stm32f7xx_hal_lptim.c ****     (+) TriggerCallback         : LPTIM Trigger Callback.
 111:HALLIB/Src/stm32f7xx_hal_lptim.c ****     (+) CompareWriteCallback    : LPTIM Compare Write Callback.
 112:HALLIB/Src/stm32f7xx_hal_lptim.c ****     (+) AutoReloadWriteCallback : LPTIM Auto Reload Write Callback.
 113:HALLIB/Src/stm32f7xx_hal_lptim.c ****     (+) DirectionUpCallback     : LPTIM Direction Up Callback.
 114:HALLIB/Src/stm32f7xx_hal_lptim.c ****     (+) DirectionDownCallback   : LPTIM Direction Down Callback.
 115:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 116:HALLIB/Src/stm32f7xx_hal_lptim.c ****   By default, after the @ref HAL_LPTIM_Init and when the state is HAL_LPTIM_STATE_RESET
 117:HALLIB/Src/stm32f7xx_hal_lptim.c ****   all interrupt callbacks are set to the corresponding weak functions:
 118:HALLIB/Src/stm32f7xx_hal_lptim.c ****   examples @ref HAL_LPTIM_CompareMatchCallback(), @ref HAL_LPTIM_AutoReloadMatchCallback().
 119:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 120:HALLIB/Src/stm32f7xx_hal_lptim.c ****   Exception done for MspInit and MspDeInit functions that are reset to the legacy weak
 121:HALLIB/Src/stm32f7xx_hal_lptim.c ****   functionalities in the @ref HAL_LPTIM_Init/@ref HAL_LPTIM_DeInit only when these
 122:HALLIB/Src/stm32f7xx_hal_lptim.c ****   callbacks are null (not registered beforehand). If not, MspInit or MspDeInit are not null,
 123:HALLIB/Src/stm32f7xx_hal_lptim.c ****   the @ref HAL_LPTIM_Init/@ref HAL_LPTIM_DeInit keep and use the user MspInit/MspDeInit
 124:HALLIB/Src/stm32f7xx_hal_lptim.c ****   callbacks (registered beforehand)
 125:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 126:HALLIB/Src/stm32f7xx_hal_lptim.c ****   Callbacks can be registered/unregistered in HAL_LPTIM_STATE_READY state only.
 127:HALLIB/Src/stm32f7xx_hal_lptim.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 128:HALLIB/Src/stm32f7xx_hal_lptim.c ****   in HAL_LPTIM_STATE_READY or HAL_LPTIM_STATE_RESET state, thus registered (user)
 129:HALLIB/Src/stm32f7xx_hal_lptim.c ****   MspInit/DeInit callbacks can be used during the @ref HAL_LPTIM_Init/@ref HAL_LPTIM_DeInit.
 130:HALLIB/Src/stm32f7xx_hal_lptim.c ****   In that case first register the MspInit/MspDeInit user callbacks using
 131:HALLIB/Src/stm32f7xx_hal_lptim.c ****   @ref HAL_LPTIM_RegisterCallback() before calling DeInit or Init function.
 132:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 133:HALLIB/Src/stm32f7xx_hal_lptim.c ****   When The compilation define USE_HAL_LPTIM_REGISTER_CALLBACKS is set to 0 or
 134:HALLIB/Src/stm32f7xx_hal_lptim.c ****   not defined, the callback registration feature is not available and all callbacks
 135:HALLIB/Src/stm32f7xx_hal_lptim.c ****   are set to the corresponding weak functions.
 136:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 137:HALLIB/Src/stm32f7xx_hal_lptim.c ****   @endverbatim
 138:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ******************************************************************************
 139:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @attention
 140:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *
 141:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 142:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *
 143:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * Redistribution and use in source and binary forms, with or without modification,
 144:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * are permitted provided that the following conditions are met:
ARM GAS  /tmp/ccrscn1F.s 			page 4


 145:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 146:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *      this list of conditions and the following disclaimer.
 147:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 148:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *      this list of conditions and the following disclaimer in the documentation
 149:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *      and/or other materials provided with the distribution.
 150:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 151:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *      may be used to endorse or promote products derived from this software
 152:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *      without specific prior written permission.
 153:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *
 154:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 155:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 156:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 157:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 158:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 159:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 160:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 161:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 162:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 163:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 164:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *
 165:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ******************************************************************************  
 166:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */ 
 167:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 168:HALLIB/Src/stm32f7xx_hal_lptim.c **** /* Includes ------------------------------------------------------------------*/
 169:HALLIB/Src/stm32f7xx_hal_lptim.c **** #include "stm32f7xx_hal.h"
 170:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 171:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @addtogroup STM32F7xx_HAL_Driver
 172:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
 173:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 174:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 175:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @defgroup LPTIM LPTIM
 176:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief LPTIM HAL module driver.
 177:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
 178:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 179:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 180:HALLIB/Src/stm32f7xx_hal_lptim.c **** #ifdef HAL_LPTIM_MODULE_ENABLED
 181:HALLIB/Src/stm32f7xx_hal_lptim.c **** /* Private types -------------------------------------------------------------*/
 182:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @defgroup LPTIM_Private_Types LPTIM Private Types
 183:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
 184:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 185:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 186:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 187:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @}
 188:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 189:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 190:HALLIB/Src/stm32f7xx_hal_lptim.c **** /* Private defines -----------------------------------------------------------*/
 191:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @defgroup LPTIM_Private_Defines LPTIM Private Defines
 192:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
 193:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 194:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 195:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 196:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @}
 197:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 198:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 199:HALLIB/Src/stm32f7xx_hal_lptim.c **** /* Private variables ---------------------------------------------------------*/
 200:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @addtogroup LPTIM_Private_Variables LPTIM Private Variables
 201:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
ARM GAS  /tmp/ccrscn1F.s 			page 5


 202:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 203:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 204:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 205:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @}
 206:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 207:HALLIB/Src/stm32f7xx_hal_lptim.c ****  
 208:HALLIB/Src/stm32f7xx_hal_lptim.c **** /* Private constants ---------------------------------------------------------*/
 209:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @addtogroup LPTIM_Private_Constants LPTIM Private Constants
 210:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
 211:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 212:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 213:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 214:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @}
 215:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 216:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 217:HALLIB/Src/stm32f7xx_hal_lptim.c **** /* Private macros ------------------------------------------------------------*/
 218:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @addtogroup LPTIM_Private_Macros LPTIM Private Macros
 219:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
 220:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 221:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 222:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 223:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @}
 224:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 225:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 226:HALLIB/Src/stm32f7xx_hal_lptim.c **** /* Private function prototypes -----------------------------------------------*/
 227:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @addtogroup LPTIM_Private_Functions_Prototypes LPTIM Private Functions Prototypes
 228:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
 229:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 230:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 231:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 232:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @}
 233:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 234:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 235:HALLIB/Src/stm32f7xx_hal_lptim.c **** /* Private functions ---------------------------------------------------------*/
 236:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @addtogroup LPTIM_Private_Functions LPTIM Private Functions
 237:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
 238:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 239:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 240:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 241:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @}
 242:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 243:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 244:HALLIB/Src/stm32f7xx_hal_lptim.c **** /* Exported functions ---------------------------------------------------------*/
 245:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @defgroup LPTIM_Exported_Functions LPTIM Exported Functions
 246:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
 247:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 248:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 249:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @defgroup LPTIM_Group1 Initialization/de-initialization functions 
 250:HALLIB/Src/stm32f7xx_hal_lptim.c ****  *  @brief    Initialization and Configuration functions. 
 251:HALLIB/Src/stm32f7xx_hal_lptim.c ****  *
 252:HALLIB/Src/stm32f7xx_hal_lptim.c **** @verbatim    
 253:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================
 254:HALLIB/Src/stm32f7xx_hal_lptim.c ****               ##### Initialization and de-initialization functions #####
 255:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================
 256:HALLIB/Src/stm32f7xx_hal_lptim.c ****     [..]  This section provides functions allowing to:
 257:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Initialize the LPTIM according to the specified parameters in the
 258:HALLIB/Src/stm32f7xx_hal_lptim.c ****           LPTIM_InitTypeDef and creates the associated handle.
ARM GAS  /tmp/ccrscn1F.s 			page 6


 259:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) DeInitialize the LPTIM peripheral.
 260:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Initialize the LPTIM MSP.
 261:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) DeInitialize LPTIM MSP. 
 262:HALLIB/Src/stm32f7xx_hal_lptim.c ****  
 263:HALLIB/Src/stm32f7xx_hal_lptim.c **** @endverbatim
 264:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
 265:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 266:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 267:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 268:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Initializes the LPTIM according to the specified parameters in the
 269:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         LPTIM_InitTypeDef and creates the associated handle.
 270:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim LPTIM handle
 271:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 272:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 273:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
 274:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 275:HALLIB/Src/stm32f7xx_hal_lptim.c ****   uint32_t tmpcfgr = 0;
 276:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 277:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the LPTIM handle allocation */
 278:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(hlptim == NULL)
 279:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 280:HALLIB/Src/stm32f7xx_hal_lptim.c ****     return HAL_ERROR;
 281:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 282:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 283:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 284:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 285:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 286:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
 287:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));  
 288:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 289:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 290:HALLIB/Src/stm32f7xx_hal_lptim.c ****     assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 291:HALLIB/Src/stm32f7xx_hal_lptim.c ****     assert_param(IS_LPTIM_CLOCK_SAMPLE_TIME(hlptim->Init.UltraLowPowerClock.SampleTime));
 292:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }  
 293:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_TRG_SOURCE(hlptim->Init.Trigger.Source));
 294:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 295:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 296:HALLIB/Src/stm32f7xx_hal_lptim.c ****     assert_param(IS_LPTIM_TRIG_SAMPLE_TIME(hlptim->Init.Trigger.SampleTime));
 297:HALLIB/Src/stm32f7xx_hal_lptim.c ****     assert_param(IS_LPTIM_EXT_TRG_POLARITY(hlptim->Init.Trigger.ActiveEdge));
 298:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }  
 299:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));  
 300:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
 301:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
 302:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 303:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(hlptim->State == HAL_LPTIM_STATE_RESET)
 304:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 305:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Allocate lock resource and initialize it */
 306:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->Lock = HAL_UNLOCKED;
 307:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 308:HALLIB/Src/stm32f7xx_hal_lptim.c **** #if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
 309:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Reset the LPTIM callback to the legacy weak callbacks */
 310:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 311:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 312:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 313:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 314:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 315:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
ARM GAS  /tmp/ccrscn1F.s 			page 7


 316:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 317:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 318:HALLIB/Src/stm32f7xx_hal_lptim.c ****     if(hlptim->MspInitCallback == NULL)
 319:HALLIB/Src/stm32f7xx_hal_lptim.c ****     {
 320:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 321:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
 322:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
 323:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->MspInitCallback(hlptim);
 324:HALLIB/Src/stm32f7xx_hal_lptim.c **** #else
 325:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Init the low level hardware */
 326:HALLIB/Src/stm32f7xx_hal_lptim.c ****     HAL_LPTIM_MspInit(hlptim);
 327:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
 328:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 329:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the LPTIM state */
 330:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State = HAL_LPTIM_STATE_BUSY;
 331:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 332:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Get the LPTIMx CFGR value */
 333:HALLIB/Src/stm32f7xx_hal_lptim.c ****   tmpcfgr = hlptim->Instance->CFGR;
 334:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 335:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 336:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 337:HALLIB/Src/stm32f7xx_hal_lptim.c ****     tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 338:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 339:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 340:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 341:HALLIB/Src/stm32f7xx_hal_lptim.c ****     tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 342:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 343:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
 344:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
 345:HALLIB/Src/stm32f7xx_hal_lptim.c ****   tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 346:HALLIB/Src/stm32f7xx_hal_lptim.c ****                           LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));
 347:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 348:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set initialization parameters */
 349:HALLIB/Src/stm32f7xx_hal_lptim.c ****   tmpcfgr |= (hlptim->Init.Clock.Source    |
 350:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.Clock.Prescaler |
 351:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.OutputPolarity  |
 352:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.UpdateMode      |
 353:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.CounterSource);
 354:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 355:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 356:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 357:HALLIB/Src/stm32f7xx_hal_lptim.c ****     tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 358:HALLIB/Src/stm32f7xx_hal_lptim.c ****                 hlptim->Init.UltraLowPowerClock.SampleTime);
 359:HALLIB/Src/stm32f7xx_hal_lptim.c ****   } 
 360:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 361:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 362:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 363:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Enable External trigger and set the trigger source */
 364:HALLIB/Src/stm32f7xx_hal_lptim.c ****     tmpcfgr |= (hlptim->Init.Trigger.Source     |
 365:HALLIB/Src/stm32f7xx_hal_lptim.c ****                 hlptim->Init.Trigger.ActiveEdge |
 366:HALLIB/Src/stm32f7xx_hal_lptim.c ****                 hlptim->Init.Trigger.SampleTime);
 367:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 368:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 369:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Write to LPTIMx CFGR */
 370:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR = tmpcfgr;
 371:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 372:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the LPTIM state */
ARM GAS  /tmp/ccrscn1F.s 			page 8


 373:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State = HAL_LPTIM_STATE_READY;
 374:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 375:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 376:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 377:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 378:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 379:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 380:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  DeInitializes the LPTIM peripheral. 
 381:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim LPTIM handle
 382:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 383:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 384:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_DeInit(LPTIM_HandleTypeDef *hlptim)
 385:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 386:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the LPTIM handle allocation */
 387:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(hlptim == NULL)
 388:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 389:HALLIB/Src/stm32f7xx_hal_lptim.c ****     return HAL_ERROR;
 390:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 391:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 392:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the LPTIM state */
 393:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State = HAL_LPTIM_STATE_BUSY;
 394:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 395:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the LPTIM Peripheral Clock */
 396:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 397:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 398:HALLIB/Src/stm32f7xx_hal_lptim.c **** #if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
 399:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(hlptim->MspDeInitCallback == NULL)
 400:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 401:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->MspDeInitCallback = HAL_LPTIM_MspDeInit;
 402:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 403:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* DeInit the low level hardware */
 404:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->MspDeInitCallback(hlptim);
 405:HALLIB/Src/stm32f7xx_hal_lptim.c **** #else
 406:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* DeInit the low level hardware: CLOCK, NVIC.*/
 407:HALLIB/Src/stm32f7xx_hal_lptim.c ****   HAL_LPTIM_MspDeInit(hlptim);
 408:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
 409:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 410:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the LPTIM state */
 411:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State = HAL_LPTIM_STATE_RESET;
 412:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 413:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Release Lock */
 414:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_UNLOCK(hlptim);
 415:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 416:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 417:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 418:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 419:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 420:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 421:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Initializes the LPTIM MSP.
 422:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim LPTIM handle
 423:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval None
 424:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 425:HALLIB/Src/stm32f7xx_hal_lptim.c **** __weak void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef *hlptim)
 426:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
  29              		.loc 1 426 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrscn1F.s 			page 9


  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE138:
  39 0002 00BF     		.section	.text.HAL_LPTIM_Init,"ax",%progbits
  40              		.align	2
  41              		.global	HAL_LPTIM_Init
  42              		.thumb
  43              		.thumb_func
  45              	HAL_LPTIM_Init:
  46              	.LFB136:
 274:HALLIB/Src/stm32f7xx_hal_lptim.c ****   uint32_t tmpcfgr = 0;
  47              		.loc 1 274 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              	.LVL1:
 278:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
  52              		.loc 1 278 0
  53 0000 0028     		cmp	r0, #0
  54 0002 40D0     		beq	.L9
 274:HALLIB/Src/stm32f7xx_hal_lptim.c ****   uint32_t tmpcfgr = 0;
  55              		.loc 1 274 0
  56 0004 70B5     		push	{r4, r5, r6, lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 16
  59              		.cfi_offset 4, -16
  60              		.cfi_offset 5, -12
  61              		.cfi_offset 6, -8
  62              		.cfi_offset 14, -4
  63 0006 0446     		mov	r4, r0
 303:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
  64              		.loc 1 303 0
  65 0008 90F82E30 		ldrb	r3, [r0, #46]	@ zero_extendqisi2
  66 000c 13F0FF0F 		tst	r3, #255
  67 0010 04D1     		bne	.L4
 306:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
  68              		.loc 1 306 0
  69 0012 0023     		movs	r3, #0
  70 0014 80F82D30 		strb	r3, [r0, #45]
 326:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  71              		.loc 1 326 0
  72 0018 FFF7FEFF 		bl	HAL_LPTIM_MspInit
  73              	.LVL2:
  74              	.L4:
 330:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
  75              		.loc 1 330 0
  76 001c 0223     		movs	r3, #2
  77 001e 84F82E30 		strb	r3, [r4, #46]
 333:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
  78              		.loc 1 333 0
  79 0022 2668     		ldr	r6, [r4]
  80 0024 F268     		ldr	r2, [r6, #12]
  81              	.LVL3:
 335:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
ARM GAS  /tmp/ccrscn1F.s 			page 10


  82              		.loc 1 335 0
  83 0026 6168     		ldr	r1, [r4, #4]
  84 0028 0129     		cmp	r1, #1
  85 002a 01D1     		bne	.L5
 337:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
  86              		.loc 1 337 0
  87 002c 22F01E02 		bic	r2, r2, #30
  88              	.LVL4:
  89              	.L5:
 339:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
  90              		.loc 1 339 0
  91 0030 6569     		ldr	r5, [r4, #20]
  92 0032 4FF6FF73 		movw	r3, #65535
  93 0036 9D42     		cmp	r5, r3
  94 0038 03D0     		beq	.L6
 341:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
  95              		.loc 1 341 0
  96 003a 22F46042 		bic	r2, r2, #57344
  97              	.LVL5:
  98 003e 22F0C002 		bic	r2, r2, #192
  99              	.LVL6:
 100              	.L6:
 345:HALLIB/Src/stm32f7xx_hal_lptim.c ****                           LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));
 101              		.loc 1 345 0
 102 0042 1248     		ldr	r0, .L12
 103 0044 1040     		ands	r0, r0, r2
 104              	.LVL7:
 350:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.OutputPolarity  |
 105              		.loc 1 350 0
 106 0046 A368     		ldr	r3, [r4, #8]
 349:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.Clock.Prescaler |
 107              		.loc 1 349 0
 108 0048 41EA0302 		orr	r2, r1, r3
 351:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.UpdateMode      |
 109              		.loc 1 351 0
 110 004c 236A     		ldr	r3, [r4, #32]
 350:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.OutputPolarity  |
 111              		.loc 1 350 0
 112 004e 1A43     		orrs	r2, r2, r3
 352:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.CounterSource);
 113              		.loc 1 352 0
 114 0050 636A     		ldr	r3, [r4, #36]
 351:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.UpdateMode      |
 115              		.loc 1 351 0
 116 0052 1343     		orrs	r3, r3, r2
 353:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 117              		.loc 1 353 0
 118 0054 A26A     		ldr	r2, [r4, #40]
 352:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.CounterSource);
 119              		.loc 1 352 0
 120 0056 1A43     		orrs	r2, r2, r3
 349:HALLIB/Src/stm32f7xx_hal_lptim.c ****               hlptim->Init.Clock.Prescaler |
 121              		.loc 1 349 0
 122 0058 40EA0203 		orr	r3, r0, r2
 123              	.LVL8:
 355:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 124              		.loc 1 355 0
ARM GAS  /tmp/ccrscn1F.s 			page 11


 125 005c 0129     		cmp	r1, #1
 126 005e 03D1     		bne	.L7
 357:HALLIB/Src/stm32f7xx_hal_lptim.c ****                 hlptim->Init.UltraLowPowerClock.SampleTime);
 127              		.loc 1 357 0
 128 0060 E168     		ldr	r1, [r4, #12]
 358:HALLIB/Src/stm32f7xx_hal_lptim.c ****   } 
 129              		.loc 1 358 0
 130 0062 2269     		ldr	r2, [r4, #16]
 357:HALLIB/Src/stm32f7xx_hal_lptim.c ****                 hlptim->Init.UltraLowPowerClock.SampleTime);
 131              		.loc 1 357 0
 132 0064 0A43     		orrs	r2, r2, r1
 133 0066 1343     		orrs	r3, r3, r2
 134              	.LVL9:
 135              	.L7:
 361:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 136              		.loc 1 361 0
 137 0068 4FF6FF72 		movw	r2, #65535
 138 006c 9542     		cmp	r5, r2
 139 006e 04D0     		beq	.L8
 365:HALLIB/Src/stm32f7xx_hal_lptim.c ****                 hlptim->Init.Trigger.SampleTime);
 140              		.loc 1 365 0
 141 0070 A269     		ldr	r2, [r4, #24]
 364:HALLIB/Src/stm32f7xx_hal_lptim.c ****                 hlptim->Init.Trigger.ActiveEdge |
 142              		.loc 1 364 0
 143 0072 1543     		orrs	r5, r5, r2
 366:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 144              		.loc 1 366 0
 145 0074 E269     		ldr	r2, [r4, #28]
 365:HALLIB/Src/stm32f7xx_hal_lptim.c ****                 hlptim->Init.Trigger.SampleTime);
 146              		.loc 1 365 0
 147 0076 2A43     		orrs	r2, r2, r5
 364:HALLIB/Src/stm32f7xx_hal_lptim.c ****                 hlptim->Init.Trigger.ActiveEdge |
 148              		.loc 1 364 0
 149 0078 1343     		orrs	r3, r3, r2
 150              	.LVL10:
 151              	.L8:
 370:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 152              		.loc 1 370 0
 153 007a F360     		str	r3, [r6, #12]
 373:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 154              		.loc 1 373 0
 155 007c 0123     		movs	r3, #1
 156              	.LVL11:
 157 007e 84F82E30 		strb	r3, [r4, #46]
 158              	.LVL12:
 376:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 159              		.loc 1 376 0
 160 0082 0020     		movs	r0, #0
 161 0084 70BD     		pop	{r4, r5, r6, pc}
 162              	.LVL13:
 163              	.L9:
 164              	.LCFI1:
 165              		.cfi_def_cfa_offset 0
 166              		.cfi_restore 4
 167              		.cfi_restore 5
 168              		.cfi_restore 6
 169              		.cfi_restore 14
ARM GAS  /tmp/ccrscn1F.s 			page 12


 280:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 170              		.loc 1 280 0
 171 0086 0120     		movs	r0, #1
 172              	.LVL14:
 173 0088 7047     		bx	lr
 174              	.L13:
 175 008a 00BF     		.align	2
 176              	.L12:
 177 008c FEF119FF 		.word	-15076866
 178              		.cfi_endproc
 179              	.LFE136:
 181              		.section	.text.HAL_LPTIM_MspDeInit,"ax",%progbits
 182              		.align	2
 183              		.weak	HAL_LPTIM_MspDeInit
 184              		.thumb
 185              		.thumb_func
 187              	HAL_LPTIM_MspDeInit:
 188              	.LFB139:
 427:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Prevent unused argument(s) compilation warning */
 428:HALLIB/Src/stm32f7xx_hal_lptim.c ****   UNUSED(hlptim);
 429:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 430:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 431:HALLIB/Src/stm32f7xx_hal_lptim.c ****             the HAL_LPTIM_MspInit could be implemented in the user file
 432:HALLIB/Src/stm32f7xx_hal_lptim.c ****    */
 433:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 434:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 435:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 436:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  DeInitializes LPTIM MSP.
 437:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim LPTIM handle
 438:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval None
 439:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 440:HALLIB/Src/stm32f7xx_hal_lptim.c **** __weak void HAL_LPTIM_MspDeInit(LPTIM_HandleTypeDef *hlptim)
 441:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 189              		.loc 1 441 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 194              	.LVL15:
 195 0000 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE139:
 199 0002 00BF     		.section	.text.HAL_LPTIM_DeInit,"ax",%progbits
 200              		.align	2
 201              		.global	HAL_LPTIM_DeInit
 202              		.thumb
 203              		.thumb_func
 205              	HAL_LPTIM_DeInit:
 206              	.LFB137:
 385:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the LPTIM handle allocation */
 207              		.loc 1 385 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              	.LVL16:
 387:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 212              		.loc 1 387 0
ARM GAS  /tmp/ccrscn1F.s 			page 13


 213 0000 88B1     		cbz	r0, .L17
 385:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the LPTIM handle allocation */
 214              		.loc 1 385 0
 215 0002 10B5     		push	{r4, lr}
 216              	.LCFI2:
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 4, -8
 219              		.cfi_offset 14, -4
 220 0004 0446     		mov	r4, r0
 393:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 221              		.loc 1 393 0
 222 0006 0223     		movs	r3, #2
 223 0008 80F82E30 		strb	r3, [r0, #46]
 396:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 224              		.loc 1 396 0
 225 000c 0268     		ldr	r2, [r0]
 226 000e 1369     		ldr	r3, [r2, #16]
 227 0010 23F00103 		bic	r3, r3, #1
 228 0014 1361     		str	r3, [r2, #16]
 407:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
 229              		.loc 1 407 0
 230 0016 FFF7FEFF 		bl	HAL_LPTIM_MspDeInit
 231              	.LVL17:
 411:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 232              		.loc 1 411 0
 233 001a 0020     		movs	r0, #0
 234 001c 84F82E00 		strb	r0, [r4, #46]
 414:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 235              		.loc 1 414 0
 236 0020 84F82D00 		strb	r0, [r4, #45]
 417:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 237              		.loc 1 417 0
 238 0024 10BD     		pop	{r4, pc}
 239              	.LVL18:
 240              	.L17:
 241              	.LCFI3:
 242              		.cfi_def_cfa_offset 0
 243              		.cfi_restore 4
 244              		.cfi_restore 14
 389:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 245              		.loc 1 389 0
 246 0026 0120     		movs	r0, #1
 247              	.LVL19:
 248 0028 7047     		bx	lr
 249              		.cfi_endproc
 250              	.LFE137:
 252 002a 00BF     		.section	.text.HAL_LPTIM_PWM_Start,"ax",%progbits
 253              		.align	2
 254              		.global	HAL_LPTIM_PWM_Start
 255              		.thumb
 256              		.thumb_func
 258              	HAL_LPTIM_PWM_Start:
 259              	.LFB140:
 442:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Prevent unused argument(s) compilation warning */
 443:HALLIB/Src/stm32f7xx_hal_lptim.c ****   UNUSED(hlptim);
 444:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 445:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
ARM GAS  /tmp/ccrscn1F.s 			page 14


 446:HALLIB/Src/stm32f7xx_hal_lptim.c ****             the HAL_LPTIM_MspDeInit could be implemented in the user file
 447:HALLIB/Src/stm32f7xx_hal_lptim.c ****    */
 448:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 449:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 450:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 451:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @}
 452:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 453:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 454:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @defgroup LPTIM_Group2 LPTIM Start-Stop operation functions 
 455:HALLIB/Src/stm32f7xx_hal_lptim.c ****  *  @brief   Start-Stop operation functions. 
 456:HALLIB/Src/stm32f7xx_hal_lptim.c ****  *
 457:HALLIB/Src/stm32f7xx_hal_lptim.c **** @verbatim   
 458:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================
 459:HALLIB/Src/stm32f7xx_hal_lptim.c ****                 ##### LPTIM Start Stop operation functions #####
 460:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================  
 461:HALLIB/Src/stm32f7xx_hal_lptim.c ****     [..]  This section provides functions allowing to:
 462:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Start the PWM mode.
 463:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Stop the PWM mode.
 464:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Start the One pulse mode.
 465:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Stop the One pulse mode.
 466:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Start the Set once mode.
 467:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Stop the Set once mode.
 468:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Start the Encoder mode.
 469:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Stop the Encoder mode.
 470:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Start the Timeout mode.
 471:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Stop the Timeout mode.      
 472:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Start the Counter mode.
 473:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Stop the Counter mode.
 474:HALLIB/Src/stm32f7xx_hal_lptim.c ****       
 475:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 476:HALLIB/Src/stm32f7xx_hal_lptim.c **** @endverbatim
 477:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
 478:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 479:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
 480:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 481:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the LPTIM PWM generation.
 482:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 483:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
 484:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
 485:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Pulse  Specifies the compare value.
 486:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
 487:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 488:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 489:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
 490:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 260              		.loc 1 490 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265              	.LVL20:
 266 0000 10B4     		push	{r4}
 267              	.LCFI4:
 268              		.cfi_def_cfa_offset 4
 269              		.cfi_offset 4, -4
 491:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 492:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
ARM GAS  /tmp/ccrscn1F.s 			page 15


 493:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
 494:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PULSE(Pulse));
 495:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 496:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 497:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 270              		.loc 1 497 0
 271 0002 0223     		movs	r3, #2
 272 0004 80F82E30 		strb	r3, [r0, #46]
 498:HALLIB/Src/stm32f7xx_hal_lptim.c ****  
 499:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Reset WAVE bit to set PWM mode */
 500:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 273              		.loc 1 500 0
 274 0008 0468     		ldr	r4, [r0]
 275 000a E368     		ldr	r3, [r4, #12]
 276 000c 23F48013 		bic	r3, r3, #1048576
 277 0010 E360     		str	r3, [r4, #12]
 501:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 502:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
 503:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 278              		.loc 1 503 0
 279 0012 0468     		ldr	r4, [r0]
 280 0014 2369     		ldr	r3, [r4, #16]
 281 0016 43F00103 		orr	r3, r3, #1
 282 001a 2361     		str	r3, [r4, #16]
 504:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 505:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
 506:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 283              		.loc 1 506 0
 284 001c 0368     		ldr	r3, [r0]
 285 001e 9961     		str	r1, [r3, #24]
 507:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 508:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the pulse value in the compare register */
 509:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 286              		.loc 1 509 0
 287 0020 0368     		ldr	r3, [r0]
 288 0022 5A61     		str	r2, [r3, #20]
 510:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 511:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
 512:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_CONTINUOUS(hlptim);
 289              		.loc 1 512 0
 290 0024 0268     		ldr	r2, [r0]
 291              	.LVL21:
 292 0026 1369     		ldr	r3, [r2, #16]
 293              	.LVL22:
 294 0028 43F00403 		orr	r3, r3, #4
 295 002c 1361     		str	r3, [r2, #16]
 513:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
 514:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 515:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 296              		.loc 1 515 0
 297 002e 0123     		movs	r3, #1
 298 0030 80F82E30 		strb	r3, [r0, #46]
 516:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 517:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 518:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 519:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 299              		.loc 1 519 0
ARM GAS  /tmp/ccrscn1F.s 			page 16


 300 0034 0020     		movs	r0, #0
 301              	.LVL23:
 302 0036 5DF8044B 		ldr	r4, [sp], #4
 303              	.LCFI5:
 304              		.cfi_restore 4
 305              		.cfi_def_cfa_offset 0
 306 003a 7047     		bx	lr
 307              		.cfi_endproc
 308              	.LFE140:
 310              		.section	.text.HAL_LPTIM_PWM_Stop,"ax",%progbits
 311              		.align	2
 312              		.global	HAL_LPTIM_PWM_Stop
 313              		.thumb
 314              		.thumb_func
 316              	HAL_LPTIM_PWM_Stop:
 317              	.LFB141:
 520:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 521:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 522:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the LPTIM PWM generation.
 523:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 524:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 525:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 526:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_PWM_Stop(LPTIM_HandleTypeDef *hlptim)
 527:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 318              		.loc 1 527 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323              	.LVL24:
 528:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 529:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 530:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 531:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 532:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 324              		.loc 1 532 0
 325 0000 0223     		movs	r3, #2
 326 0002 80F82E30 		strb	r3, [r0, #46]
 533:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 534:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
 535:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 327              		.loc 1 535 0
 328 0006 0268     		ldr	r2, [r0]
 329 0008 1369     		ldr	r3, [r2, #16]
 330 000a 23F00103 		bic	r3, r3, #1
 331 000e 1361     		str	r3, [r2, #16]
 536:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 537:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 538:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 332              		.loc 1 538 0
 333 0010 0123     		movs	r3, #1
 334 0012 80F82E30 		strb	r3, [r0, #46]
 539:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 540:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 541:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 542:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 335              		.loc 1 542 0
ARM GAS  /tmp/ccrscn1F.s 			page 17


 336 0016 0020     		movs	r0, #0
 337              	.LVL25:
 338 0018 7047     		bx	lr
 339              		.cfi_endproc
 340              	.LFE141:
 342 001a 00BF     		.section	.text.HAL_LPTIM_PWM_Start_IT,"ax",%progbits
 343              		.align	2
 344              		.global	HAL_LPTIM_PWM_Start_IT
 345              		.thumb
 346              		.thumb_func
 348              	HAL_LPTIM_PWM_Start_IT:
 349              	.LFB142:
 543:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 544:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 545:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the LPTIM PWM generation in interrupt mode.
 546:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 547:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
 548:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF
 549:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Pulse  Specifies the compare value.
 550:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF
 551:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 552:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 553:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_PWM_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pul
 554:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 350              		.loc 1 554 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 0
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354              		@ link register save eliminated.
 355              	.LVL26:
 356 0000 10B4     		push	{r4}
 357              	.LCFI6:
 358              		.cfi_def_cfa_offset 4
 359              		.cfi_offset 4, -4
 555:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 556:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 557:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
 558:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PULSE(Pulse));
 559:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 560:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 561:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 360              		.loc 1 561 0
 361 0002 0223     		movs	r3, #2
 362 0004 80F82E30 		strb	r3, [r0, #46]
 562:HALLIB/Src/stm32f7xx_hal_lptim.c ****  
 563:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Reset WAVE bit to set PWM mode */
 564:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 363              		.loc 1 564 0
 364 0008 0468     		ldr	r4, [r0]
 365 000a E368     		ldr	r3, [r4, #12]
 366 000c 23F48013 		bic	r3, r3, #1048576
 367 0010 E360     		str	r3, [r4, #12]
 565:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 566:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Autoreload write complete interrupt */
 567:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 368              		.loc 1 567 0
 369 0012 0468     		ldr	r4, [r0]
ARM GAS  /tmp/ccrscn1F.s 			page 18


 370 0014 A368     		ldr	r3, [r4, #8]
 371 0016 43F01003 		orr	r3, r3, #16
 372 001a A360     		str	r3, [r4, #8]
 568:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 569:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Compare write complete interrupt */
 570:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 373              		.loc 1 570 0
 374 001c 0468     		ldr	r4, [r0]
 375 001e A368     		ldr	r3, [r4, #8]
 376 0020 43F00803 		orr	r3, r3, #8
 377 0024 A360     		str	r3, [r4, #8]
 571:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 572:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Autoreload match interrupt */
 573:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 378              		.loc 1 573 0
 379 0026 0468     		ldr	r4, [r0]
 380 0028 A368     		ldr	r3, [r4, #8]
 381 002a 43F00203 		orr	r3, r3, #2
 382 002e A360     		str	r3, [r4, #8]
 574:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 575:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Compare match interrupt */
 576:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 383              		.loc 1 576 0
 384 0030 0468     		ldr	r4, [r0]
 385 0032 A368     		ldr	r3, [r4, #8]
 386 0034 43F00103 		orr	r3, r3, #1
 387 0038 A360     		str	r3, [r4, #8]
 577:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 578:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* If external trigger source is used, then enable external trigger interrupt */
 579:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 388              		.loc 1 579 0
 389 003a 4469     		ldr	r4, [r0, #20]
 390 003c 4FF6FF73 		movw	r3, #65535
 391 0040 9C42     		cmp	r4, r3
 392 0042 04D0     		beq	.L24
 580:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 581:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Enable external trigger interrupt */
 582:HALLIB/Src/stm32f7xx_hal_lptim.c ****     __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 393              		.loc 1 582 0
 394 0044 0468     		ldr	r4, [r0]
 395 0046 A368     		ldr	r3, [r4, #8]
 396 0048 43F00403 		orr	r3, r3, #4
 397 004c A360     		str	r3, [r4, #8]
 398              	.L24:
 583:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }  
 584:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 585:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
 586:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 399              		.loc 1 586 0
 400 004e 0468     		ldr	r4, [r0]
 401 0050 2369     		ldr	r3, [r4, #16]
 402 0052 43F00103 		orr	r3, r3, #1
 403 0056 2361     		str	r3, [r4, #16]
 587:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 588:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
 589:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 404              		.loc 1 589 0
ARM GAS  /tmp/ccrscn1F.s 			page 19


 405 0058 0368     		ldr	r3, [r0]
 406 005a 9961     		str	r1, [r3, #24]
 590:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 591:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the pulse value in the compare register */
 592:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 407              		.loc 1 592 0
 408 005c 0368     		ldr	r3, [r0]
 409 005e 5A61     		str	r2, [r3, #20]
 593:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 594:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
 595:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_CONTINUOUS(hlptim);
 410              		.loc 1 595 0
 411 0060 0268     		ldr	r2, [r0]
 412              	.LVL27:
 413 0062 1369     		ldr	r3, [r2, #16]
 414              	.LVL28:
 415 0064 43F00403 		orr	r3, r3, #4
 416 0068 1361     		str	r3, [r2, #16]
 596:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
 597:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 598:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 417              		.loc 1 598 0
 418 006a 0123     		movs	r3, #1
 419 006c 80F82E30 		strb	r3, [r0, #46]
 599:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 600:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 601:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 602:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 420              		.loc 1 602 0
 421 0070 0020     		movs	r0, #0
 422              	.LVL29:
 423 0072 5DF8044B 		ldr	r4, [sp], #4
 424              	.LCFI7:
 425              		.cfi_restore 4
 426              		.cfi_def_cfa_offset 0
 427 0076 7047     		bx	lr
 428              		.cfi_endproc
 429              	.LFE142:
 431              		.section	.text.HAL_LPTIM_PWM_Stop_IT,"ax",%progbits
 432              		.align	2
 433              		.global	HAL_LPTIM_PWM_Stop_IT
 434              		.thumb
 435              		.thumb_func
 437              	HAL_LPTIM_PWM_Stop_IT:
 438              	.LFB143:
 603:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 604:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 605:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the LPTIM PWM generation in interrupt mode.
 606:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 607:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 608:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 609:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_PWM_Stop_IT(LPTIM_HandleTypeDef *hlptim)
 610:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 439              		.loc 1 610 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccrscn1F.s 			page 20


 443              		@ link register save eliminated.
 444              	.LVL30:
 611:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 612:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 613:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 614:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 615:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 445              		.loc 1 615 0
 446 0000 0223     		movs	r3, #2
 447 0002 80F82E30 		strb	r3, [r0, #46]
 616:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 617:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
 618:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 448              		.loc 1 618 0
 449 0006 0268     		ldr	r2, [r0]
 450 0008 1369     		ldr	r3, [r2, #16]
 451 000a 23F00103 		bic	r3, r3, #1
 452 000e 1361     		str	r3, [r2, #16]
 619:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 620:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Disable Autoreload write complete interrupt */
 621:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 453              		.loc 1 621 0
 454 0010 0268     		ldr	r2, [r0]
 455 0012 9368     		ldr	r3, [r2, #8]
 456 0014 23F01003 		bic	r3, r3, #16
 457 0018 9360     		str	r3, [r2, #8]
 622:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 623:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Compare write complete interrupt */
 624:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPOK);
 458              		.loc 1 624 0
 459 001a 0268     		ldr	r2, [r0]
 460 001c 9368     		ldr	r3, [r2, #8]
 461 001e 23F00803 		bic	r3, r3, #8
 462 0022 9360     		str	r3, [r2, #8]
 625:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 626:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Autoreload match interrupt */
 627:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 463              		.loc 1 627 0
 464 0024 0268     		ldr	r2, [r0]
 465 0026 9368     		ldr	r3, [r2, #8]
 466 0028 23F00203 		bic	r3, r3, #2
 467 002c 9360     		str	r3, [r2, #8]
 628:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 629:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Compare match interrupt */
 630:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 468              		.loc 1 630 0
 469 002e 0268     		ldr	r2, [r0]
 470 0030 9368     		ldr	r3, [r2, #8]
 471 0032 23F00103 		bic	r3, r3, #1
 472 0036 9360     		str	r3, [r2, #8]
 631:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 632:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* If external trigger source is used, then disable external trigger interrupt */
 633:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 473              		.loc 1 633 0
 474 0038 4269     		ldr	r2, [r0, #20]
 475 003a 4FF6FF73 		movw	r3, #65535
 476 003e 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccrscn1F.s 			page 21


 477 0040 04D0     		beq	.L27
 634:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 635:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Disable external trigger interrupt */
 636:HALLIB/Src/stm32f7xx_hal_lptim.c ****     __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 478              		.loc 1 636 0
 479 0042 0268     		ldr	r2, [r0]
 480 0044 9368     		ldr	r3, [r2, #8]
 481 0046 23F00403 		bic	r3, r3, #4
 482 004a 9360     		str	r3, [r2, #8]
 483              	.L27:
 637:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }  
 638:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 639:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 640:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 484              		.loc 1 640 0
 485 004c 0123     		movs	r3, #1
 486 004e 80F82E30 		strb	r3, [r0, #46]
 641:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 642:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 643:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 644:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 487              		.loc 1 644 0
 488 0052 0020     		movs	r0, #0
 489              	.LVL31:
 490 0054 7047     		bx	lr
 491              		.cfi_endproc
 492              	.LFE143:
 494 0056 00BF     		.section	.text.HAL_LPTIM_OnePulse_Start,"ax",%progbits
 495              		.align	2
 496              		.global	HAL_LPTIM_OnePulse_Start
 497              		.thumb
 498              		.thumb_func
 500              	HAL_LPTIM_OnePulse_Start:
 501              	.LFB144:
 645:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 646:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 647:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the LPTIM One pulse generation.
 648:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 649:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
 650:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
 651:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Pulse  Specifies the compare value.
 652:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
 653:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 654:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 655:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_OnePulse_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t P
 656:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 502              		.loc 1 656 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507              	.LVL32:
 508 0000 10B4     		push	{r4}
 509              	.LCFI8:
 510              		.cfi_def_cfa_offset 4
 511              		.cfi_offset 4, -4
 657:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
ARM GAS  /tmp/ccrscn1F.s 			page 22


 658:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 659:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
 660:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PULSE(Pulse));
 661:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 662:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 663:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 512              		.loc 1 663 0
 513 0002 0223     		movs	r3, #2
 514 0004 80F82E30 		strb	r3, [r0, #46]
 664:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 665:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Reset WAVE bit to set one pulse mode */
 666:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 515              		.loc 1 666 0
 516 0008 0468     		ldr	r4, [r0]
 517 000a E368     		ldr	r3, [r4, #12]
 518 000c 23F48013 		bic	r3, r3, #1048576
 519 0010 E360     		str	r3, [r4, #12]
 667:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 668:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
 669:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 520              		.loc 1 669 0
 521 0012 0468     		ldr	r4, [r0]
 522 0014 2369     		ldr	r3, [r4, #16]
 523 0016 43F00103 		orr	r3, r3, #1
 524 001a 2361     		str	r3, [r4, #16]
 670:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 671:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
 672:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 525              		.loc 1 672 0
 526 001c 0368     		ldr	r3, [r0]
 527 001e 9961     		str	r1, [r3, #24]
 673:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 674:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the pulse value in the compare register */
 675:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 528              		.loc 1 675 0
 529 0020 0368     		ldr	r3, [r0]
 530 0022 5A61     		str	r2, [r3, #20]
 676:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 677:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
 678:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_SINGLE(hlptim);
 531              		.loc 1 678 0
 532 0024 0268     		ldr	r2, [r0]
 533              	.LVL33:
 534 0026 1369     		ldr	r3, [r2, #16]
 535              	.LVL34:
 536 0028 43F00203 		orr	r3, r3, #2
 537 002c 1361     		str	r3, [r2, #16]
 679:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
 680:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 681:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 538              		.loc 1 681 0
 539 002e 0123     		movs	r3, #1
 540 0030 80F82E30 		strb	r3, [r0, #46]
 682:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 683:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 684:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 685:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
ARM GAS  /tmp/ccrscn1F.s 			page 23


 541              		.loc 1 685 0
 542 0034 0020     		movs	r0, #0
 543              	.LVL35:
 544 0036 5DF8044B 		ldr	r4, [sp], #4
 545              	.LCFI9:
 546              		.cfi_restore 4
 547              		.cfi_def_cfa_offset 0
 548 003a 7047     		bx	lr
 549              		.cfi_endproc
 550              	.LFE144:
 552              		.section	.text.HAL_LPTIM_OnePulse_Stop,"ax",%progbits
 553              		.align	2
 554              		.global	HAL_LPTIM_OnePulse_Stop
 555              		.thumb
 556              		.thumb_func
 558              	HAL_LPTIM_OnePulse_Stop:
 559              	.LFB145:
 686:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 687:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 688:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the LPTIM One pulse generation.
 689:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 690:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 691:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 692:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_OnePulse_Stop(LPTIM_HandleTypeDef *hlptim)
 693:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 560              		.loc 1 693 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 565              	.LVL36:
 694:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 695:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 696:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 697:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 698:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 566              		.loc 1 698 0
 567 0000 0223     		movs	r3, #2
 568 0002 80F82E30 		strb	r3, [r0, #46]
 699:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 700:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
 701:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 569              		.loc 1 701 0
 570 0006 0268     		ldr	r2, [r0]
 571 0008 1369     		ldr	r3, [r2, #16]
 572 000a 23F00103 		bic	r3, r3, #1
 573 000e 1361     		str	r3, [r2, #16]
 702:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 703:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 704:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 574              		.loc 1 704 0
 575 0010 0123     		movs	r3, #1
 576 0012 80F82E30 		strb	r3, [r0, #46]
 705:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 706:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 707:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 708:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
ARM GAS  /tmp/ccrscn1F.s 			page 24


 577              		.loc 1 708 0
 578 0016 0020     		movs	r0, #0
 579              	.LVL37:
 580 0018 7047     		bx	lr
 581              		.cfi_endproc
 582              	.LFE145:
 584 001a 00BF     		.section	.text.HAL_LPTIM_OnePulse_Start_IT,"ax",%progbits
 585              		.align	2
 586              		.global	HAL_LPTIM_OnePulse_Start_IT
 587              		.thumb
 588              		.thumb_func
 590              	HAL_LPTIM_OnePulse_Start_IT:
 591              	.LFB146:
 709:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 710:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 711:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the LPTIM One pulse generation in interrupt mode.
 712:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 713:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
 714:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
 715:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Pulse  Specifies the compare value.
 716:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
 717:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 718:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 719:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_OnePulse_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_
 720:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 592              		.loc 1 720 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 597              	.LVL38:
 598 0000 10B4     		push	{r4}
 599              	.LCFI10:
 600              		.cfi_def_cfa_offset 4
 601              		.cfi_offset 4, -4
 721:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 722:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 723:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
 724:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PULSE(Pulse));
 725:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 726:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 727:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 602              		.loc 1 727 0
 603 0002 0223     		movs	r3, #2
 604 0004 80F82E30 		strb	r3, [r0, #46]
 728:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 729:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Reset WAVE bit to set one pulse mode */
 730:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 605              		.loc 1 730 0
 606 0008 0468     		ldr	r4, [r0]
 607 000a E368     		ldr	r3, [r4, #12]
 608 000c 23F48013 		bic	r3, r3, #1048576
 609 0010 E360     		str	r3, [r4, #12]
 731:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 732:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Autoreload write complete interrupt */
 733:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 610              		.loc 1 733 0
ARM GAS  /tmp/ccrscn1F.s 			page 25


 611 0012 0468     		ldr	r4, [r0]
 612 0014 A368     		ldr	r3, [r4, #8]
 613 0016 43F01003 		orr	r3, r3, #16
 614 001a A360     		str	r3, [r4, #8]
 734:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 735:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Compare write complete interrupt */
 736:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 615              		.loc 1 736 0
 616 001c 0468     		ldr	r4, [r0]
 617 001e A368     		ldr	r3, [r4, #8]
 618 0020 43F00803 		orr	r3, r3, #8
 619 0024 A360     		str	r3, [r4, #8]
 737:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 738:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Autoreload match interrupt */
 739:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 620              		.loc 1 739 0
 621 0026 0468     		ldr	r4, [r0]
 622 0028 A368     		ldr	r3, [r4, #8]
 623 002a 43F00203 		orr	r3, r3, #2
 624 002e A360     		str	r3, [r4, #8]
 740:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 741:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Compare match interrupt */
 742:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 625              		.loc 1 742 0
 626 0030 0468     		ldr	r4, [r0]
 627 0032 A368     		ldr	r3, [r4, #8]
 628 0034 43F00103 		orr	r3, r3, #1
 629 0038 A360     		str	r3, [r4, #8]
 743:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 744:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* If external trigger source is used, then enable external trigger interrupt */
 745:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 630              		.loc 1 745 0
 631 003a 4469     		ldr	r4, [r0, #20]
 632 003c 4FF6FF73 		movw	r3, #65535
 633 0040 9C42     		cmp	r4, r3
 634 0042 04D0     		beq	.L32
 746:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 747:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Enable external trigger interrupt */
 748:HALLIB/Src/stm32f7xx_hal_lptim.c ****     __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 635              		.loc 1 748 0
 636 0044 0468     		ldr	r4, [r0]
 637 0046 A368     		ldr	r3, [r4, #8]
 638 0048 43F00403 		orr	r3, r3, #4
 639 004c A360     		str	r3, [r4, #8]
 640              	.L32:
 749:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 750:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 751:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
 752:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 641              		.loc 1 752 0
 642 004e 0468     		ldr	r4, [r0]
 643 0050 2369     		ldr	r3, [r4, #16]
 644 0052 43F00103 		orr	r3, r3, #1
 645 0056 2361     		str	r3, [r4, #16]
 753:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 754:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
 755:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
ARM GAS  /tmp/ccrscn1F.s 			page 26


 646              		.loc 1 755 0
 647 0058 0368     		ldr	r3, [r0]
 648 005a 9961     		str	r1, [r3, #24]
 756:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 757:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the pulse value in the compare register */
 758:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 649              		.loc 1 758 0
 650 005c 0368     		ldr	r3, [r0]
 651 005e 5A61     		str	r2, [r3, #20]
 759:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 760:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
 761:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_SINGLE(hlptim);
 652              		.loc 1 761 0
 653 0060 0268     		ldr	r2, [r0]
 654              	.LVL39:
 655 0062 1369     		ldr	r3, [r2, #16]
 656              	.LVL40:
 657 0064 43F00203 		orr	r3, r3, #2
 658 0068 1361     		str	r3, [r2, #16]
 762:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
 763:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 764:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 659              		.loc 1 764 0
 660 006a 0123     		movs	r3, #1
 661 006c 80F82E30 		strb	r3, [r0, #46]
 765:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 766:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 767:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 768:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 662              		.loc 1 768 0
 663 0070 0020     		movs	r0, #0
 664              	.LVL41:
 665 0072 5DF8044B 		ldr	r4, [sp], #4
 666              	.LCFI11:
 667              		.cfi_restore 4
 668              		.cfi_def_cfa_offset 0
 669 0076 7047     		bx	lr
 670              		.cfi_endproc
 671              	.LFE146:
 673              		.section	.text.HAL_LPTIM_OnePulse_Stop_IT,"ax",%progbits
 674              		.align	2
 675              		.global	HAL_LPTIM_OnePulse_Stop_IT
 676              		.thumb
 677              		.thumb_func
 679              	HAL_LPTIM_OnePulse_Stop_IT:
 680              	.LFB147:
 769:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 770:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 771:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the LPTIM One pulse generation in interrupt mode.
 772:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 773:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 774:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 775:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_OnePulse_Stop_IT(LPTIM_HandleTypeDef *hlptim)
 776:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 681              		.loc 1 776 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrscn1F.s 			page 27


 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              		@ link register save eliminated.
 686              	.LVL42:
 777:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 778:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 779:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 780:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 781:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 687              		.loc 1 781 0
 688 0000 0223     		movs	r3, #2
 689 0002 80F82E30 		strb	r3, [r0, #46]
 782:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 783:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
 784:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 690              		.loc 1 784 0
 691 0006 0268     		ldr	r2, [r0]
 692 0008 1369     		ldr	r3, [r2, #16]
 693 000a 23F00103 		bic	r3, r3, #1
 694 000e 1361     		str	r3, [r2, #16]
 785:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 786:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Autoreload write complete interrupt */
 787:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 695              		.loc 1 787 0
 696 0010 0268     		ldr	r2, [r0]
 697 0012 9368     		ldr	r3, [r2, #8]
 698 0014 23F01003 		bic	r3, r3, #16
 699 0018 9360     		str	r3, [r2, #8]
 788:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 789:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Compare write complete interrupt */
 790:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPOK);
 700              		.loc 1 790 0
 701 001a 0268     		ldr	r2, [r0]
 702 001c 9368     		ldr	r3, [r2, #8]
 703 001e 23F00803 		bic	r3, r3, #8
 704 0022 9360     		str	r3, [r2, #8]
 791:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 792:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Autoreload match interrupt */
 793:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 705              		.loc 1 793 0
 706 0024 0268     		ldr	r2, [r0]
 707 0026 9368     		ldr	r3, [r2, #8]
 708 0028 23F00203 		bic	r3, r3, #2
 709 002c 9360     		str	r3, [r2, #8]
 794:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 795:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Compare match interrupt */
 796:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 710              		.loc 1 796 0
 711 002e 0268     		ldr	r2, [r0]
 712 0030 9368     		ldr	r3, [r2, #8]
 713 0032 23F00103 		bic	r3, r3, #1
 714 0036 9360     		str	r3, [r2, #8]
 797:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 798:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* If external trigger source is used, then disable external trigger interrupt */
 799:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 715              		.loc 1 799 0
 716 0038 4269     		ldr	r2, [r0, #20]
 717 003a 4FF6FF73 		movw	r3, #65535
ARM GAS  /tmp/ccrscn1F.s 			page 28


 718 003e 9A42     		cmp	r2, r3
 719 0040 04D0     		beq	.L35
 800:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 801:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Disable external trigger interrupt */
 802:HALLIB/Src/stm32f7xx_hal_lptim.c ****     __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 720              		.loc 1 802 0
 721 0042 0268     		ldr	r2, [r0]
 722 0044 9368     		ldr	r3, [r2, #8]
 723 0046 23F00403 		bic	r3, r3, #4
 724 004a 9360     		str	r3, [r2, #8]
 725              	.L35:
 803:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
 804:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 805:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 806:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 726              		.loc 1 806 0
 727 004c 0123     		movs	r3, #1
 728 004e 80F82E30 		strb	r3, [r0, #46]
 807:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 808:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 809:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 810:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 729              		.loc 1 810 0
 730 0052 0020     		movs	r0, #0
 731              	.LVL43:
 732 0054 7047     		bx	lr
 733              		.cfi_endproc
 734              	.LFE147:
 736 0056 00BF     		.section	.text.HAL_LPTIM_SetOnce_Start,"ax",%progbits
 737              		.align	2
 738              		.global	HAL_LPTIM_SetOnce_Start
 739              		.thumb
 740              		.thumb_func
 742              	HAL_LPTIM_SetOnce_Start:
 743              	.LFB148:
 811:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 812:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 813:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the LPTIM in Set once mode.
 814:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 815:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
 816:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
 817:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Pulse  Specifies the compare value.
 818:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
 819:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 820:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 821:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pu
 822:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 744              		.loc 1 822 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              		@ link register save eliminated.
 749              	.LVL44:
 750 0000 10B4     		push	{r4}
 751              	.LCFI12:
 752              		.cfi_def_cfa_offset 4
 753              		.cfi_offset 4, -4
ARM GAS  /tmp/ccrscn1F.s 			page 29


 823:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 824:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 825:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
 826:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PULSE(Pulse));
 827:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 828:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 829:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 754              		.loc 1 829 0
 755 0002 0223     		movs	r3, #2
 756 0004 80F82E30 		strb	r3, [r0, #46]
 830:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 831:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set WAVE bit to enable the set once mode */
 832:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 757              		.loc 1 832 0
 758 0008 0468     		ldr	r4, [r0]
 759 000a E368     		ldr	r3, [r4, #12]
 760 000c 43F48013 		orr	r3, r3, #1048576
 761 0010 E360     		str	r3, [r4, #12]
 833:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 834:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
 835:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 762              		.loc 1 835 0
 763 0012 0468     		ldr	r4, [r0]
 764 0014 2369     		ldr	r3, [r4, #16]
 765 0016 43F00103 		orr	r3, r3, #1
 766 001a 2361     		str	r3, [r4, #16]
 836:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 837:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
 838:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 767              		.loc 1 838 0
 768 001c 0368     		ldr	r3, [r0]
 769 001e 9961     		str	r1, [r3, #24]
 839:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 840:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the pulse value in the compare register */
 841:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 770              		.loc 1 841 0
 771 0020 0368     		ldr	r3, [r0]
 772 0022 5A61     		str	r2, [r3, #20]
 842:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 843:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
 844:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_SINGLE(hlptim);
 773              		.loc 1 844 0
 774 0024 0268     		ldr	r2, [r0]
 775              	.LVL45:
 776 0026 1369     		ldr	r3, [r2, #16]
 777              	.LVL46:
 778 0028 43F00203 		orr	r3, r3, #2
 779 002c 1361     		str	r3, [r2, #16]
 845:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
 846:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 847:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 780              		.loc 1 847 0
 781 002e 0123     		movs	r3, #1
 782 0030 80F82E30 		strb	r3, [r0, #46]
 848:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 849:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 850:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
ARM GAS  /tmp/ccrscn1F.s 			page 30


 851:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 783              		.loc 1 851 0
 784 0034 0020     		movs	r0, #0
 785              	.LVL47:
 786 0036 5DF8044B 		ldr	r4, [sp], #4
 787              	.LCFI13:
 788              		.cfi_restore 4
 789              		.cfi_def_cfa_offset 0
 790 003a 7047     		bx	lr
 791              		.cfi_endproc
 792              	.LFE148:
 794              		.section	.text.HAL_LPTIM_SetOnce_Stop,"ax",%progbits
 795              		.align	2
 796              		.global	HAL_LPTIM_SetOnce_Stop
 797              		.thumb
 798              		.thumb_func
 800              	HAL_LPTIM_SetOnce_Stop:
 801              	.LFB149:
 852:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 853:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 854:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the LPTIM Set once mode.
 855:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 856:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 857:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 858:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_SetOnce_Stop(LPTIM_HandleTypeDef *hlptim)
 859:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 802              		.loc 1 859 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806              		@ link register save eliminated.
 807              	.LVL48:
 860:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 861:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 862:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 863:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 864:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 808              		.loc 1 864 0
 809 0000 0223     		movs	r3, #2
 810 0002 80F82E30 		strb	r3, [r0, #46]
 865:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 866:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
 867:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 811              		.loc 1 867 0
 812 0006 0268     		ldr	r2, [r0]
 813 0008 1369     		ldr	r3, [r2, #16]
 814 000a 23F00103 		bic	r3, r3, #1
 815 000e 1361     		str	r3, [r2, #16]
 868:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 869:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 870:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 816              		.loc 1 870 0
 817 0010 0123     		movs	r3, #1
 818 0012 80F82E30 		strb	r3, [r0, #46]
 871:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 872:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 873:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
ARM GAS  /tmp/ccrscn1F.s 			page 31


 874:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 819              		.loc 1 874 0
 820 0016 0020     		movs	r0, #0
 821              	.LVL49:
 822 0018 7047     		bx	lr
 823              		.cfi_endproc
 824              	.LFE149:
 826 001a 00BF     		.section	.text.HAL_LPTIM_SetOnce_Start_IT,"ax",%progbits
 827              		.align	2
 828              		.global	HAL_LPTIM_SetOnce_Start_IT
 829              		.thumb
 830              		.thumb_func
 832              	HAL_LPTIM_SetOnce_Start_IT:
 833              	.LFB150:
 875:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 876:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 877:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the LPTIM Set once mode in interrupt mode.
 878:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 879:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
 880:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
 881:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Pulse  Specifies the compare value.
 882:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
 883:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 884:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 885:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t
 886:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 834              		.loc 1 886 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839              	.LVL50:
 840 0000 10B4     		push	{r4}
 841              	.LCFI14:
 842              		.cfi_def_cfa_offset 4
 843              		.cfi_offset 4, -4
 887:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 888:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 889:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
 890:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PULSE(Pulse));
 891:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 892:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 893:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 844              		.loc 1 893 0
 845 0002 0223     		movs	r3, #2
 846 0004 80F82E30 		strb	r3, [r0, #46]
 894:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 895:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set WAVE bit to enable the set once mode */
 896:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 847              		.loc 1 896 0
 848 0008 0468     		ldr	r4, [r0]
 849 000a E368     		ldr	r3, [r4, #12]
 850 000c 43F48013 		orr	r3, r3, #1048576
 851 0010 E360     		str	r3, [r4, #12]
 897:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 898:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Autoreload write complete interrupt */
 899:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
ARM GAS  /tmp/ccrscn1F.s 			page 32


 852              		.loc 1 899 0
 853 0012 0468     		ldr	r4, [r0]
 854 0014 A368     		ldr	r3, [r4, #8]
 855 0016 43F01003 		orr	r3, r3, #16
 856 001a A360     		str	r3, [r4, #8]
 900:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 901:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Compare write complete interrupt */
 902:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 857              		.loc 1 902 0
 858 001c 0468     		ldr	r4, [r0]
 859 001e A368     		ldr	r3, [r4, #8]
 860 0020 43F00803 		orr	r3, r3, #8
 861 0024 A360     		str	r3, [r4, #8]
 903:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 904:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Autoreload match interrupt */
 905:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 862              		.loc 1 905 0
 863 0026 0468     		ldr	r4, [r0]
 864 0028 A368     		ldr	r3, [r4, #8]
 865 002a 43F00203 		orr	r3, r3, #2
 866 002e A360     		str	r3, [r4, #8]
 906:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 907:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Compare match interrupt */
 908:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 867              		.loc 1 908 0
 868 0030 0468     		ldr	r4, [r0]
 869 0032 A368     		ldr	r3, [r4, #8]
 870 0034 43F00103 		orr	r3, r3, #1
 871 0038 A360     		str	r3, [r4, #8]
 909:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 910:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* If external trigger source is used, then enable external trigger interrupt */
 911:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 872              		.loc 1 911 0
 873 003a 4469     		ldr	r4, [r0, #20]
 874 003c 4FF6FF73 		movw	r3, #65535
 875 0040 9C42     		cmp	r4, r3
 876 0042 04D0     		beq	.L40
 912:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 913:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Enable external trigger interrupt */
 914:HALLIB/Src/stm32f7xx_hal_lptim.c ****     __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 877              		.loc 1 914 0
 878 0044 0468     		ldr	r4, [r0]
 879 0046 A368     		ldr	r3, [r4, #8]
 880 0048 43F00403 		orr	r3, r3, #4
 881 004c A360     		str	r3, [r4, #8]
 882              	.L40:
 915:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }  
 916:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 917:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
 918:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 883              		.loc 1 918 0
 884 004e 0468     		ldr	r4, [r0]
 885 0050 2369     		ldr	r3, [r4, #16]
 886 0052 43F00103 		orr	r3, r3, #1
 887 0056 2361     		str	r3, [r4, #16]
 919:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 920:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
ARM GAS  /tmp/ccrscn1F.s 			page 33


 921:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 888              		.loc 1 921 0
 889 0058 0368     		ldr	r3, [r0]
 890 005a 9961     		str	r1, [r3, #24]
 922:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 923:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the pulse value in the compare register */
 924:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 891              		.loc 1 924 0
 892 005c 0368     		ldr	r3, [r0]
 893 005e 5A61     		str	r2, [r3, #20]
 925:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 926:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
 927:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_SINGLE(hlptim);
 894              		.loc 1 927 0
 895 0060 0268     		ldr	r2, [r0]
 896              	.LVL51:
 897 0062 1369     		ldr	r3, [r2, #16]
 898              	.LVL52:
 899 0064 43F00203 		orr	r3, r3, #2
 900 0068 1361     		str	r3, [r2, #16]
 928:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
 929:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 930:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 901              		.loc 1 930 0
 902 006a 0123     		movs	r3, #1
 903 006c 80F82E30 		strb	r3, [r0, #46]
 931:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 932:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 933:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 934:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 904              		.loc 1 934 0
 905 0070 0020     		movs	r0, #0
 906              	.LVL53:
 907 0072 5DF8044B 		ldr	r4, [sp], #4
 908              	.LCFI15:
 909              		.cfi_restore 4
 910              		.cfi_def_cfa_offset 0
 911 0076 7047     		bx	lr
 912              		.cfi_endproc
 913              	.LFE150:
 915              		.section	.text.HAL_LPTIM_SetOnce_Stop_IT,"ax",%progbits
 916              		.align	2
 917              		.global	HAL_LPTIM_SetOnce_Stop_IT
 918              		.thumb
 919              		.thumb_func
 921              	HAL_LPTIM_SetOnce_Stop_IT:
 922              	.LFB151:
 935:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 936:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 937:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the LPTIM Set once mode in interrupt mode.
 938:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 939:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 940:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 941:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_SetOnce_Stop_IT(LPTIM_HandleTypeDef *hlptim)
 942:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 923              		.loc 1 942 0
 924              		.cfi_startproc
ARM GAS  /tmp/ccrscn1F.s 			page 34


 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927              		@ link register save eliminated.
 928              	.LVL54:
 943:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 944:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 945:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
 946:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 947:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 929              		.loc 1 947 0
 930 0000 0223     		movs	r3, #2
 931 0002 80F82E30 		strb	r3, [r0, #46]
 948:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 949:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
 950:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 932              		.loc 1 950 0
 933 0006 0268     		ldr	r2, [r0]
 934 0008 1369     		ldr	r3, [r2, #16]
 935 000a 23F00103 		bic	r3, r3, #1
 936 000e 1361     		str	r3, [r2, #16]
 951:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 952:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Autoreload write complete interrupt */
 953:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 937              		.loc 1 953 0
 938 0010 0268     		ldr	r2, [r0]
 939 0012 9368     		ldr	r3, [r2, #8]
 940 0014 23F01003 		bic	r3, r3, #16
 941 0018 9360     		str	r3, [r2, #8]
 954:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 955:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Compare write complete interrupt */
 956:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPOK);
 942              		.loc 1 956 0
 943 001a 0268     		ldr	r2, [r0]
 944 001c 9368     		ldr	r3, [r2, #8]
 945 001e 23F00803 		bic	r3, r3, #8
 946 0022 9360     		str	r3, [r2, #8]
 957:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 958:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Autoreload match interrupt */
 959:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 947              		.loc 1 959 0
 948 0024 0268     		ldr	r2, [r0]
 949 0026 9368     		ldr	r3, [r2, #8]
 950 0028 23F00203 		bic	r3, r3, #2
 951 002c 9360     		str	r3, [r2, #8]
 960:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 961:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Compare match interrupt */
 962:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 952              		.loc 1 962 0
 953 002e 0268     		ldr	r2, [r0]
 954 0030 9368     		ldr	r3, [r2, #8]
 955 0032 23F00103 		bic	r3, r3, #1
 956 0036 9360     		str	r3, [r2, #8]
 963:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 964:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* If external trigger source is used, then disable external trigger interrupt */
 965:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 957              		.loc 1 965 0
 958 0038 4269     		ldr	r2, [r0, #20]
ARM GAS  /tmp/ccrscn1F.s 			page 35


 959 003a 4FF6FF73 		movw	r3, #65535
 960 003e 9A42     		cmp	r2, r3
 961 0040 04D0     		beq	.L43
 966:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
 967:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Disable external trigger interrupt */
 968:HALLIB/Src/stm32f7xx_hal_lptim.c ****     __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 962              		.loc 1 968 0
 963 0042 0268     		ldr	r2, [r0]
 964 0044 9368     		ldr	r3, [r2, #8]
 965 0046 23F00403 		bic	r3, r3, #4
 966 004a 9360     		str	r3, [r2, #8]
 967              	.L43:
 969:HALLIB/Src/stm32f7xx_hal_lptim.c ****   } 
 970:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 971:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
 972:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 968              		.loc 1 972 0
 969 004c 0123     		movs	r3, #1
 970 004e 80F82E30 		strb	r3, [r0, #46]
 973:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
 974:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
 975:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
 976:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 971              		.loc 1 976 0
 972 0052 0020     		movs	r0, #0
 973              	.LVL55:
 974 0054 7047     		bx	lr
 975              		.cfi_endproc
 976              	.LFE151:
 978 0056 00BF     		.section	.text.HAL_LPTIM_Encoder_Start,"ax",%progbits
 979              		.align	2
 980              		.global	HAL_LPTIM_Encoder_Start
 981              		.thumb
 982              		.thumb_func
 984              	HAL_LPTIM_Encoder_Start:
 985              	.LFB152:
 977:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 978:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
 979:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the Encoder interface.
 980:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
 981:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
 982:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
 983:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
 984:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
 985:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
 986:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 986              		.loc 1 986 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 0
 989              		@ frame_needed = 0, uses_anonymous_args = 0
 990              		@ link register save eliminated.
 991              	.LVL56:
 992 0000 10B4     		push	{r4}
 993              	.LCFI16:
 994              		.cfi_def_cfa_offset 4
 995              		.cfi_offset 4, -4
 996              	.LVL57:
ARM GAS  /tmp/ccrscn1F.s 			page 36


 987:HALLIB/Src/stm32f7xx_hal_lptim.c ****   uint32_t tmpcfgr = 0;
 988:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 989:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
 990:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 991:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
 992:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
 993:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
 994:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 995:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 996:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
 997:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 997              		.loc 1 997 0
 998 0002 0223     		movs	r3, #2
 999 0004 80F82E30 		strb	r3, [r0, #46]
 998:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
 999:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Get the LPTIMx CFGR value */
1000:HALLIB/Src/stm32f7xx_hal_lptim.c ****   tmpcfgr = hlptim->Instance->CFGR;
 1000              		.loc 1 1000 0
 1001 0008 0468     		ldr	r4, [r0]
 1002 000a E368     		ldr	r3, [r4, #12]
 1003              	.LVL58:
1001:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1002:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Clear CKPOL bits */
1003:HALLIB/Src/stm32f7xx_hal_lptim.c ****   tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 1004              		.loc 1 1003 0
 1005 000c 23F00602 		bic	r2, r3, #6
 1006              	.LVL59:
1004:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1005:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set Input polarity */
1006:HALLIB/Src/stm32f7xx_hal_lptim.c ****   tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 1007              		.loc 1 1006 0
 1008 0010 C368     		ldr	r3, [r0, #12]
 1009 0012 1343     		orrs	r3, r3, r2
 1010              	.LVL60:
1007:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1008:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Write to LPTIMx CFGR */
1009:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR = tmpcfgr;
 1011              		.loc 1 1009 0
 1012 0014 E360     		str	r3, [r4, #12]
1010:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1011:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set ENC bit to enable the encoder interface */
1012:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 1013              		.loc 1 1012 0
 1014 0016 0268     		ldr	r2, [r0]
 1015 0018 D368     		ldr	r3, [r2, #12]
 1016              	.LVL61:
 1017 001a 43F08073 		orr	r3, r3, #16777216
 1018 001e D360     		str	r3, [r2, #12]
 1019              	.LVL62:
1013:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1014:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
1015:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 1020              		.loc 1 1015 0
 1021 0020 0268     		ldr	r2, [r0]
 1022 0022 1369     		ldr	r3, [r2, #16]
 1023 0024 43F00103 		orr	r3, r3, #1
 1024 0028 1361     		str	r3, [r2, #16]
ARM GAS  /tmp/ccrscn1F.s 			page 37


1016:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1017:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
1018:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 1025              		.loc 1 1018 0
 1026 002a 0368     		ldr	r3, [r0]
 1027 002c 9961     		str	r1, [r3, #24]
1019:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1020:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
1021:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_CONTINUOUS(hlptim);
 1028              		.loc 1 1021 0
 1029 002e 0268     		ldr	r2, [r0]
 1030 0030 1369     		ldr	r3, [r2, #16]
 1031 0032 43F00403 		orr	r3, r3, #4
 1032 0036 1361     		str	r3, [r2, #16]
1022:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1023:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
1024:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1033              		.loc 1 1024 0
 1034 0038 0123     		movs	r3, #1
 1035 003a 80F82E30 		strb	r3, [r0, #46]
1025:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1026:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1027:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1028:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1036              		.loc 1 1028 0
 1037 003e 0020     		movs	r0, #0
 1038              	.LVL63:
 1039 0040 5DF8044B 		ldr	r4, [sp], #4
 1040              	.LCFI17:
 1041              		.cfi_restore 4
 1042              		.cfi_def_cfa_offset 0
 1043 0044 7047     		bx	lr
 1044              		.cfi_endproc
 1045              	.LFE152:
 1047 0046 00BF     		.section	.text.HAL_LPTIM_Encoder_Stop,"ax",%progbits
 1048              		.align	2
 1049              		.global	HAL_LPTIM_Encoder_Stop
 1050              		.thumb
 1051              		.thumb_func
 1053              	HAL_LPTIM_Encoder_Stop:
 1054              	.LFB153:
1029:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1030:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1031:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the Encoder interface.
1032:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1033:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
1034:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1035:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop(LPTIM_HandleTypeDef *hlptim)
1036:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1055              		.loc 1 1036 0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 0
 1058              		@ frame_needed = 0, uses_anonymous_args = 0
 1059              		@ link register save eliminated.
 1060              	.LVL64:
1037:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
1038:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
ARM GAS  /tmp/ccrscn1F.s 			page 38


1039:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
1040:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
1041:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 1061              		.loc 1 1041 0
 1062 0000 0223     		movs	r3, #2
 1063 0002 80F82E30 		strb	r3, [r0, #46]
1042:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1043:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
1044:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 1064              		.loc 1 1044 0
 1065 0006 0268     		ldr	r2, [r0]
 1066 0008 1369     		ldr	r3, [r2, #16]
 1067 000a 23F00103 		bic	r3, r3, #1
 1068 000e 1361     		str	r3, [r2, #16]
1045:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1046:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Reset ENC bit to disable the encoder interface */
1047:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR &= ~LPTIM_CFGR_ENC;
 1069              		.loc 1 1047 0
 1070 0010 0268     		ldr	r2, [r0]
 1071 0012 D368     		ldr	r3, [r2, #12]
 1072 0014 23F08073 		bic	r3, r3, #16777216
 1073 0018 D360     		str	r3, [r2, #12]
1048:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1049:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
1050:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1074              		.loc 1 1050 0
 1075 001a 0123     		movs	r3, #1
 1076 001c 80F82E30 		strb	r3, [r0, #46]
1051:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1052:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1053:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1054:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1077              		.loc 1 1054 0
 1078 0020 0020     		movs	r0, #0
 1079              	.LVL65:
 1080 0022 7047     		bx	lr
 1081              		.cfi_endproc
 1082              	.LFE153:
 1084              		.section	.text.HAL_LPTIM_Encoder_Start_IT,"ax",%progbits
 1085              		.align	2
 1086              		.global	HAL_LPTIM_Encoder_Start_IT
 1087              		.thumb
 1088              		.thumb_func
 1090              	HAL_LPTIM_Encoder_Start_IT:
 1091              	.LFB154:
1055:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1056:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1057:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the Encoder interface in interrupt mode.
1058:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1059:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
1060:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
1061:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
1062:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1063:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
1064:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1092              		.loc 1 1064 0
 1093              		.cfi_startproc
ARM GAS  /tmp/ccrscn1F.s 			page 39


 1094              		@ args = 0, pretend = 0, frame = 0
 1095              		@ frame_needed = 0, uses_anonymous_args = 0
 1096              		@ link register save eliminated.
 1097              	.LVL66:
 1098 0000 10B4     		push	{r4}
 1099              	.LCFI18:
 1100              		.cfi_def_cfa_offset 4
 1101              		.cfi_offset 4, -4
 1102              	.LVL67:
1065:HALLIB/Src/stm32f7xx_hal_lptim.c ****   uint32_t tmpcfgr = 0;
1066:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1067:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
1068:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1069:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
1070:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
1071:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
1072:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
1073:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1074:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
1075:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 1103              		.loc 1 1075 0
 1104 0002 0223     		movs	r3, #2
 1105 0004 80F82E30 		strb	r3, [r0, #46]
1076:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1077:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Configure edge sensitivity for encoder mode */
1078:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Get the LPTIMx CFGR value */
1079:HALLIB/Src/stm32f7xx_hal_lptim.c ****   tmpcfgr = hlptim->Instance->CFGR;
 1106              		.loc 1 1079 0
 1107 0008 0468     		ldr	r4, [r0]
 1108 000a E368     		ldr	r3, [r4, #12]
 1109              	.LVL68:
1080:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1081:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Clear CKPOL bits */
1082:HALLIB/Src/stm32f7xx_hal_lptim.c ****   tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 1110              		.loc 1 1082 0
 1111 000c 23F00602 		bic	r2, r3, #6
 1112              	.LVL69:
1083:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1084:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set Input polarity */
1085:HALLIB/Src/stm32f7xx_hal_lptim.c ****   tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 1113              		.loc 1 1085 0
 1114 0010 C368     		ldr	r3, [r0, #12]
 1115 0012 1343     		orrs	r3, r3, r2
 1116              	.LVL70:
1086:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1087:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Write to LPTIMx CFGR */
1088:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR = tmpcfgr;
 1117              		.loc 1 1088 0
 1118 0014 E360     		str	r3, [r4, #12]
1089:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1090:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set ENC bit to enable the encoder interface */
1091:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 1119              		.loc 1 1091 0
 1120 0016 0268     		ldr	r2, [r0]
 1121 0018 D368     		ldr	r3, [r2, #12]
 1122              	.LVL71:
 1123 001a 43F08073 		orr	r3, r3, #16777216
ARM GAS  /tmp/ccrscn1F.s 			page 40


 1124 001e D360     		str	r3, [r2, #12]
 1125              	.LVL72:
1092:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1093:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable "switch to down direction" interrupt */
1094:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 1126              		.loc 1 1094 0
 1127 0020 0268     		ldr	r2, [r0]
 1128 0022 9368     		ldr	r3, [r2, #8]
 1129 0024 43F04003 		orr	r3, r3, #64
 1130 0028 9360     		str	r3, [r2, #8]
1095:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1096:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable "switch to up direction" interrupt */
1097:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);  
 1131              		.loc 1 1097 0
 1132 002a 0268     		ldr	r2, [r0]
 1133 002c 9368     		ldr	r3, [r2, #8]
 1134 002e 43F02003 		orr	r3, r3, #32
 1135 0032 9360     		str	r3, [r2, #8]
1098:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1099:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
1100:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 1136              		.loc 1 1100 0
 1137 0034 0268     		ldr	r2, [r0]
 1138 0036 1369     		ldr	r3, [r2, #16]
 1139 0038 43F00103 		orr	r3, r3, #1
 1140 003c 1361     		str	r3, [r2, #16]
1101:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1102:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
1103:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 1141              		.loc 1 1103 0
 1142 003e 0368     		ldr	r3, [r0]
 1143 0040 9961     		str	r1, [r3, #24]
1104:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1105:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
1106:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_CONTINUOUS(hlptim);
 1144              		.loc 1 1106 0
 1145 0042 0268     		ldr	r2, [r0]
 1146 0044 1369     		ldr	r3, [r2, #16]
 1147 0046 43F00403 		orr	r3, r3, #4
 1148 004a 1361     		str	r3, [r2, #16]
1107:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1108:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
1109:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1149              		.loc 1 1109 0
 1150 004c 0123     		movs	r3, #1
 1151 004e 80F82E30 		strb	r3, [r0, #46]
1110:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1111:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1112:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1113:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1152              		.loc 1 1113 0
 1153 0052 0020     		movs	r0, #0
 1154              	.LVL73:
 1155 0054 5DF8044B 		ldr	r4, [sp], #4
 1156              	.LCFI19:
 1157              		.cfi_restore 4
 1158              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccrscn1F.s 			page 41


 1159 0058 7047     		bx	lr
 1160              		.cfi_endproc
 1161              	.LFE154:
 1163 005a 00BF     		.section	.text.HAL_LPTIM_Encoder_Stop_IT,"ax",%progbits
 1164              		.align	2
 1165              		.global	HAL_LPTIM_Encoder_Stop_IT
 1166              		.thumb
 1167              		.thumb_func
 1169              	HAL_LPTIM_Encoder_Stop_IT:
 1170              	.LFB155:
1114:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1115:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1116:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the Encoder interface in interrupt mode.
1117:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1118:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
1119:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1120:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop_IT(LPTIM_HandleTypeDef *hlptim)
1121:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1171              		.loc 1 1121 0
 1172              		.cfi_startproc
 1173              		@ args = 0, pretend = 0, frame = 0
 1174              		@ frame_needed = 0, uses_anonymous_args = 0
 1175              		@ link register save eliminated.
 1176              	.LVL74:
1122:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
1123:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1124:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
1125:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
1126:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 1177              		.loc 1 1126 0
 1178 0000 0223     		movs	r3, #2
 1179 0002 80F82E30 		strb	r3, [r0, #46]
1127:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1128:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
1129:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 1180              		.loc 1 1129 0
 1181 0006 0268     		ldr	r2, [r0]
 1182 0008 1369     		ldr	r3, [r2, #16]
 1183 000a 23F00103 		bic	r3, r3, #1
 1184 000e 1361     		str	r3, [r2, #16]
1130:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1131:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Reset ENC bit to disable the encoder interface */
1132:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR &= ~LPTIM_CFGR_ENC;
 1185              		.loc 1 1132 0
 1186 0010 0268     		ldr	r2, [r0]
 1187 0012 D368     		ldr	r3, [r2, #12]
 1188 0014 23F08073 		bic	r3, r3, #16777216
 1189 0018 D360     		str	r3, [r2, #12]
1133:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1134:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable "switch to down direction" interrupt */
1135:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_DOWN);
 1190              		.loc 1 1135 0
 1191 001a 0268     		ldr	r2, [r0]
 1192 001c 9368     		ldr	r3, [r2, #8]
 1193 001e 23F04003 		bic	r3, r3, #64
 1194 0022 9360     		str	r3, [r2, #8]
1136:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
ARM GAS  /tmp/ccrscn1F.s 			page 42


1137:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable "switch to up direction" interrupt */
1138:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UP); 
 1195              		.loc 1 1138 0
 1196 0024 0268     		ldr	r2, [r0]
 1197 0026 9368     		ldr	r3, [r2, #8]
 1198 0028 23F02003 		bic	r3, r3, #32
 1199 002c 9360     		str	r3, [r2, #8]
1139:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1140:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
1141:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1200              		.loc 1 1141 0
 1201 002e 0123     		movs	r3, #1
 1202 0030 80F82E30 		strb	r3, [r0, #46]
1142:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1143:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1144:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1145:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1203              		.loc 1 1145 0
 1204 0034 0020     		movs	r0, #0
 1205              	.LVL75:
 1206 0036 7047     		bx	lr
 1207              		.cfi_endproc
 1208              	.LFE155:
 1210              		.section	.text.HAL_LPTIM_TimeOut_Start,"ax",%progbits
 1211              		.align	2
 1212              		.global	HAL_LPTIM_TimeOut_Start
 1213              		.thumb
 1214              		.thumb_func
 1216              	HAL_LPTIM_TimeOut_Start:
 1217              	.LFB156:
1146:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1147:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1148:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the Timeout function. The first trigger event will start the
1149:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         timer, any successive trigger event will reset the counter and
1150:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         the timer restarts.
1151:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1152:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
1153:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
1154:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Timeout  Specifies the TimeOut value to rest the counter.
1155:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
1156:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
1157:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1158:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Ti
1159:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1218              		.loc 1 1159 0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 0
 1221              		@ frame_needed = 0, uses_anonymous_args = 0
 1222              		@ link register save eliminated.
 1223              	.LVL76:
 1224 0000 10B4     		push	{r4}
 1225              	.LCFI20:
 1226              		.cfi_def_cfa_offset 4
 1227              		.cfi_offset 4, -4
1160:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
1161:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1162:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
ARM GAS  /tmp/ccrscn1F.s 			page 43


1163:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PULSE(Timeout));
1164:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
1165:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
1166:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 1228              		.loc 1 1166 0
 1229 0002 0223     		movs	r3, #2
 1230 0004 80F82E30 		strb	r3, [r0, #46]
1167:HALLIB/Src/stm32f7xx_hal_lptim.c ****  
1168:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set TIMOUT bit to enable the timeout function */
1169:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 1231              		.loc 1 1169 0
 1232 0008 0468     		ldr	r4, [r0]
 1233 000a E368     		ldr	r3, [r4, #12]
 1234 000c 43F40023 		orr	r3, r3, #524288
 1235 0010 E360     		str	r3, [r4, #12]
1170:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1171:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
1172:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 1236              		.loc 1 1172 0
 1237 0012 0468     		ldr	r4, [r0]
 1238 0014 2369     		ldr	r3, [r4, #16]
 1239 0016 43F00103 		orr	r3, r3, #1
 1240 001a 2361     		str	r3, [r4, #16]
1173:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1174:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
1175:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 1241              		.loc 1 1175 0
 1242 001c 0368     		ldr	r3, [r0]
 1243 001e 9961     		str	r1, [r3, #24]
1176:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1177:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the Timeout value in the compare register */
1178:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 1244              		.loc 1 1178 0
 1245 0020 0368     		ldr	r3, [r0]
 1246 0022 5A61     		str	r2, [r3, #20]
1179:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1180:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
1181:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_CONTINUOUS(hlptim);
 1247              		.loc 1 1181 0
 1248 0024 0268     		ldr	r2, [r0]
 1249              	.LVL77:
 1250 0026 1369     		ldr	r3, [r2, #16]
 1251              	.LVL78:
 1252 0028 43F00403 		orr	r3, r3, #4
 1253 002c 1361     		str	r3, [r2, #16]
1182:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
1183:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
1184:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1254              		.loc 1 1184 0
 1255 002e 0123     		movs	r3, #1
 1256 0030 80F82E30 		strb	r3, [r0, #46]
1185:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1186:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1187:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1188:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1257              		.loc 1 1188 0
 1258 0034 0020     		movs	r0, #0
ARM GAS  /tmp/ccrscn1F.s 			page 44


 1259              	.LVL79:
 1260 0036 5DF8044B 		ldr	r4, [sp], #4
 1261              	.LCFI21:
 1262              		.cfi_restore 4
 1263              		.cfi_def_cfa_offset 0
 1264 003a 7047     		bx	lr
 1265              		.cfi_endproc
 1266              	.LFE156:
 1268              		.section	.text.HAL_LPTIM_TimeOut_Stop,"ax",%progbits
 1269              		.align	2
 1270              		.global	HAL_LPTIM_TimeOut_Stop
 1271              		.thumb
 1272              		.thumb_func
 1274              	HAL_LPTIM_TimeOut_Stop:
 1275              	.LFB157:
1189:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1190:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1191:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the Timeout function.
1192:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1193:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
1194:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1195:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop(LPTIM_HandleTypeDef *hlptim)
1196:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1276              		.loc 1 1196 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 0, uses_anonymous_args = 0
 1280              		@ link register save eliminated.
 1281              	.LVL80:
1197:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
1198:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1199:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1200:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
1201:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 1282              		.loc 1 1201 0
 1283 0000 0223     		movs	r3, #2
 1284 0002 80F82E30 		strb	r3, [r0, #46]
1202:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1203:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
1204:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 1285              		.loc 1 1204 0
 1286 0006 0268     		ldr	r2, [r0]
 1287 0008 1369     		ldr	r3, [r2, #16]
 1288 000a 23F00103 		bic	r3, r3, #1
 1289 000e 1361     		str	r3, [r2, #16]
1205:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1206:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Reset TIMOUT bit to enable the timeout function */
1207:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 1290              		.loc 1 1207 0
 1291 0010 0268     		ldr	r2, [r0]
 1292 0012 D368     		ldr	r3, [r2, #12]
 1293 0014 23F40023 		bic	r3, r3, #524288
 1294 0018 D360     		str	r3, [r2, #12]
1208:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1209:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
1210:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1295              		.loc 1 1210 0
ARM GAS  /tmp/ccrscn1F.s 			page 45


 1296 001a 0123     		movs	r3, #1
 1297 001c 80F82E30 		strb	r3, [r0, #46]
1211:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1212:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1213:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1214:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1298              		.loc 1 1214 0
 1299 0020 0020     		movs	r0, #0
 1300              	.LVL81:
 1301 0022 7047     		bx	lr
 1302              		.cfi_endproc
 1303              	.LFE157:
 1305              		.section	.text.HAL_LPTIM_TimeOut_Start_IT,"ax",%progbits
 1306              		.align	2
 1307              		.global	HAL_LPTIM_TimeOut_Start_IT
 1308              		.thumb
 1309              		.thumb_func
 1311              	HAL_LPTIM_TimeOut_Start_IT:
 1312              	.LFB158:
1215:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1216:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1217:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the Timeout function in interrupt mode. The first trigger 
1218:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         event will start the timer, any successive trigger event will reset
1219:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         the counter and the timer restarts.
1220:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1221:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
1222:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
1223:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Timeout  Specifies the TimeOut value to rest the counter.
1224:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
1225:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
1226:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1227:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t
1228:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1313              		.loc 1 1228 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 0
 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 1317              		@ link register save eliminated.
 1318              	.LVL82:
 1319 0000 10B4     		push	{r4}
 1320              	.LCFI22:
 1321              		.cfi_def_cfa_offset 4
 1322              		.cfi_offset 4, -4
1229:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
1230:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1231:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
1232:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PULSE(Timeout));
1233:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
1234:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
1235:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 1323              		.loc 1 1235 0
 1324 0002 0223     		movs	r3, #2
 1325 0004 80F82E30 		strb	r3, [r0, #46]
1236:HALLIB/Src/stm32f7xx_hal_lptim.c ****  
1237:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
1238:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(); 
 1326              		.loc 1 1238 0
ARM GAS  /tmp/ccrscn1F.s 			page 46


 1327 0008 134B     		ldr	r3, .L55
 1328 000a 1C68     		ldr	r4, [r3]
 1329 000c 44F40004 		orr	r4, r4, #8388608
 1330 0010 1C60     		str	r4, [r3]
1239:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1240:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable rising edge trigger on the LPTIM Wake-up Timer Exti line */
1241:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 1331              		.loc 1 1241 0
 1332 0012 9C68     		ldr	r4, [r3, #8]
 1333 0014 44F40004 		orr	r4, r4, #8388608
 1334 0018 9C60     		str	r4, [r3, #8]
1242:HALLIB/Src/stm32f7xx_hal_lptim.c ****  
1243:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set TIMOUT bit to enable the timeout function */
1244:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 1335              		.loc 1 1244 0
 1336 001a 0468     		ldr	r4, [r0]
 1337 001c E368     		ldr	r3, [r4, #12]
 1338 001e 43F40023 		orr	r3, r3, #524288
 1339 0022 E360     		str	r3, [r4, #12]
1245:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1246:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Compare match interrupt */
1247:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 1340              		.loc 1 1247 0
 1341 0024 0468     		ldr	r4, [r0]
 1342 0026 A368     		ldr	r3, [r4, #8]
 1343 0028 43F00103 		orr	r3, r3, #1
 1344 002c A360     		str	r3, [r4, #8]
1248:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1249:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
1250:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 1345              		.loc 1 1250 0
 1346 002e 0468     		ldr	r4, [r0]
 1347 0030 2369     		ldr	r3, [r4, #16]
 1348 0032 43F00103 		orr	r3, r3, #1
 1349 0036 2361     		str	r3, [r4, #16]
1251:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1252:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
1253:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 1350              		.loc 1 1253 0
 1351 0038 0368     		ldr	r3, [r0]
 1352 003a 9961     		str	r1, [r3, #24]
1254:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1255:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the Timeout value in the compare register */
1256:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 1353              		.loc 1 1256 0
 1354 003c 0368     		ldr	r3, [r0]
 1355 003e 5A61     		str	r2, [r3, #20]
1257:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1258:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
1259:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_CONTINUOUS(hlptim);
 1356              		.loc 1 1259 0
 1357 0040 0268     		ldr	r2, [r0]
 1358              	.LVL83:
 1359 0042 1369     		ldr	r3, [r2, #16]
 1360              	.LVL84:
 1361 0044 43F00403 		orr	r3, r3, #4
 1362 0048 1361     		str	r3, [r2, #16]
ARM GAS  /tmp/ccrscn1F.s 			page 47


1260:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
1261:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
1262:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1363              		.loc 1 1262 0
 1364 004a 0123     		movs	r3, #1
 1365 004c 80F82E30 		strb	r3, [r0, #46]
1263:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1264:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1265:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1266:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1366              		.loc 1 1266 0
 1367 0050 0020     		movs	r0, #0
 1368              	.LVL85:
 1369 0052 5DF8044B 		ldr	r4, [sp], #4
 1370              	.LCFI23:
 1371              		.cfi_restore 4
 1372              		.cfi_def_cfa_offset 0
 1373 0056 7047     		bx	lr
 1374              	.L56:
 1375              		.align	2
 1376              	.L55:
 1377 0058 003C0140 		.word	1073822720
 1378              		.cfi_endproc
 1379              	.LFE158:
 1381              		.section	.text.HAL_LPTIM_TimeOut_Stop_IT,"ax",%progbits
 1382              		.align	2
 1383              		.global	HAL_LPTIM_TimeOut_Stop_IT
 1384              		.thumb
 1385              		.thumb_func
 1387              	HAL_LPTIM_TimeOut_Stop_IT:
 1388              	.LFB159:
1267:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1268:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1269:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the Timeout function in interrupt mode.
1270:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1271:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
1272:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1273:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop_IT(LPTIM_HandleTypeDef *hlptim)
1274:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1389              		.loc 1 1274 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 0
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393              		@ link register save eliminated.
 1394              	.LVL86:
1275:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
1276:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1277:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1278:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
1279:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 1395              		.loc 1 1279 0
 1396 0000 0223     		movs	r3, #2
 1397 0002 80F82E30 		strb	r3, [r0, #46]
1280:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1281:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable rising edge trigger on the LPTIM Wake-up Timer Exti line */ 
1282:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_RISING_EDGE();
 1398              		.loc 1 1282 0
ARM GAS  /tmp/ccrscn1F.s 			page 48


 1399 0006 0E4B     		ldr	r3, .L58
 1400 0008 9A68     		ldr	r2, [r3, #8]
 1401 000a 22F40002 		bic	r2, r2, #8388608
 1402 000e 9A60     		str	r2, [r3, #8]
1283:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1284:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
1285:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(); 
 1403              		.loc 1 1285 0
 1404 0010 1A68     		ldr	r2, [r3]
 1405 0012 22F40002 		bic	r2, r2, #8388608
 1406 0016 1A60     		str	r2, [r3]
1286:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1287:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
1288:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 1407              		.loc 1 1288 0
 1408 0018 0268     		ldr	r2, [r0]
 1409 001a 1369     		ldr	r3, [r2, #16]
 1410 001c 23F00103 		bic	r3, r3, #1
 1411 0020 1361     		str	r3, [r2, #16]
1289:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1290:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Reset TIMOUT bit to enable the timeout function */
1291:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 1412              		.loc 1 1291 0
 1413 0022 0268     		ldr	r2, [r0]
 1414 0024 D368     		ldr	r3, [r2, #12]
 1415 0026 23F40023 		bic	r3, r3, #524288
 1416 002a D360     		str	r3, [r2, #12]
1292:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1293:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Compare match interrupt */
1294:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 1417              		.loc 1 1294 0
 1418 002c 0268     		ldr	r2, [r0]
 1419 002e 9368     		ldr	r3, [r2, #8]
 1420 0030 23F00103 		bic	r3, r3, #1
 1421 0034 9360     		str	r3, [r2, #8]
1295:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1296:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
1297:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1422              		.loc 1 1297 0
 1423 0036 0123     		movs	r3, #1
 1424 0038 80F82E30 		strb	r3, [r0, #46]
1298:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1299:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1300:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1301:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1425              		.loc 1 1301 0
 1426 003c 0020     		movs	r0, #0
 1427              	.LVL87:
 1428 003e 7047     		bx	lr
 1429              	.L59:
 1430              		.align	2
 1431              	.L58:
 1432 0040 003C0140 		.word	1073822720
 1433              		.cfi_endproc
 1434              	.LFE159:
 1436              		.section	.text.HAL_LPTIM_Counter_Start,"ax",%progbits
 1437              		.align	2
ARM GAS  /tmp/ccrscn1F.s 			page 49


 1438              		.global	HAL_LPTIM_Counter_Start
 1439              		.thumb
 1440              		.thumb_func
 1442              	HAL_LPTIM_Counter_Start:
 1443              	.LFB160:
1302:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1303:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1304:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the Counter mode.
1305:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1306:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
1307:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
1308:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
1309:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1310:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
1311:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1444              		.loc 1 1311 0
 1445              		.cfi_startproc
 1446              		@ args = 0, pretend = 0, frame = 0
 1447              		@ frame_needed = 0, uses_anonymous_args = 0
 1448              		@ link register save eliminated.
 1449              	.LVL88:
1312:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
1313:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1314:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
1315:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
1316:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
1317:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 1450              		.loc 1 1317 0
 1451 0000 0223     		movs	r3, #2
 1452 0002 80F82E30 		strb	r3, [r0, #46]
1318:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1319:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* If clock source is not ULPTIM clock and counter source is external, then it must not be presca
1320:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTI
 1453              		.loc 1 1320 0
 1454 0006 4368     		ldr	r3, [r0, #4]
 1455 0008 012B     		cmp	r3, #1
 1456 000a 08D0     		beq	.L61
 1457              		.loc 1 1320 0 is_stmt 0 discriminator 1
 1458 000c 836A     		ldr	r3, [r0, #40]
 1459 000e B3F5000F 		cmp	r3, #8388608
 1460 0012 04D1     		bne	.L61
1321:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
1322:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Check if clock is prescaled */
1323:HALLIB/Src/stm32f7xx_hal_lptim.c ****     assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
1324:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Set clock prescaler to 0 */
1325:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 1461              		.loc 1 1325 0 is_stmt 1
 1462 0014 0268     		ldr	r2, [r0]
 1463 0016 D368     		ldr	r3, [r2, #12]
 1464 0018 23F46063 		bic	r3, r3, #3584
 1465 001c D360     		str	r3, [r2, #12]
 1466              	.L61:
1326:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1327:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1328:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
1329:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 1467              		.loc 1 1329 0
ARM GAS  /tmp/ccrscn1F.s 			page 50


 1468 001e 0268     		ldr	r2, [r0]
 1469 0020 1369     		ldr	r3, [r2, #16]
 1470 0022 43F00103 		orr	r3, r3, #1
 1471 0026 1361     		str	r3, [r2, #16]
1330:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1331:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
1332:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 1472              		.loc 1 1332 0
 1473 0028 0368     		ldr	r3, [r0]
 1474 002a 9961     		str	r1, [r3, #24]
1333:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1334:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
1335:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_CONTINUOUS(hlptim);
 1475              		.loc 1 1335 0
 1476 002c 0268     		ldr	r2, [r0]
 1477 002e 1369     		ldr	r3, [r2, #16]
 1478 0030 43F00403 		orr	r3, r3, #4
 1479 0034 1361     		str	r3, [r2, #16]
1336:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
1337:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
1338:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1480              		.loc 1 1338 0
 1481 0036 0123     		movs	r3, #1
 1482 0038 80F82E30 		strb	r3, [r0, #46]
1339:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1340:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1341:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1342:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1483              		.loc 1 1342 0
 1484 003c 0020     		movs	r0, #0
 1485              	.LVL89:
 1486 003e 7047     		bx	lr
 1487              		.cfi_endproc
 1488              	.LFE160:
 1490              		.section	.text.HAL_LPTIM_Counter_Stop,"ax",%progbits
 1491              		.align	2
 1492              		.global	HAL_LPTIM_Counter_Stop
 1493              		.thumb
 1494              		.thumb_func
 1496              	HAL_LPTIM_Counter_Stop:
 1497              	.LFB161:
1343:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1344:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1345:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the Counter mode.
1346:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1347:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
1348:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1349:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_Counter_Stop(LPTIM_HandleTypeDef *hlptim)
1350:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1498              		.loc 1 1350 0
 1499              		.cfi_startproc
 1500              		@ args = 0, pretend = 0, frame = 0
 1501              		@ frame_needed = 0, uses_anonymous_args = 0
 1502              		@ link register save eliminated.
 1503              	.LVL90:
1351:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
1352:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
ARM GAS  /tmp/ccrscn1F.s 			page 51


1353:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1354:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
1355:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 1504              		.loc 1 1355 0
 1505 0000 0223     		movs	r3, #2
 1506 0002 80F82E30 		strb	r3, [r0, #46]
1356:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1357:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
1358:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 1507              		.loc 1 1358 0
 1508 0006 0268     		ldr	r2, [r0]
 1509 0008 1369     		ldr	r3, [r2, #16]
 1510 000a 23F00103 		bic	r3, r3, #1
 1511 000e 1361     		str	r3, [r2, #16]
1359:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1360:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
1361:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1512              		.loc 1 1361 0
 1513 0010 0123     		movs	r3, #1
 1514 0012 80F82E30 		strb	r3, [r0, #46]
1362:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1363:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1364:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1365:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1515              		.loc 1 1365 0
 1516 0016 0020     		movs	r0, #0
 1517              	.LVL91:
 1518 0018 7047     		bx	lr
 1519              		.cfi_endproc
 1520              	.LFE161:
 1522 001a 00BF     		.section	.text.HAL_LPTIM_Counter_Start_IT,"ax",%progbits
 1523              		.align	2
 1524              		.global	HAL_LPTIM_Counter_Start_IT
 1525              		.thumb
 1526              		.thumb_func
 1528              	HAL_LPTIM_Counter_Start_IT:
 1529              	.LFB162:
1366:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1367:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1368:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Starts the Counter mode in interrupt mode.
1369:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1370:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  Period  Specifies the Autoreload value.
1371:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter must be a value between 0x0000 and 0xFFFF.
1372:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
1373:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1374:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
1375:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1530              		.loc 1 1375 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 0
 1533              		@ frame_needed = 0, uses_anonymous_args = 0
 1534              		@ link register save eliminated.
 1535              	.LVL92:
1376:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
1377:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1378:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_PERIOD(Period));
1379:HALLIB/Src/stm32f7xx_hal_lptim.c ****                
ARM GAS  /tmp/ccrscn1F.s 			page 52


1380:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
1381:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 1536              		.loc 1 1381 0
 1537 0000 0223     		movs	r3, #2
 1538 0002 80F82E30 		strb	r3, [r0, #46]
1382:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1383:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
1384:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(); 
 1539              		.loc 1 1384 0
 1540 0006 184B     		ldr	r3, .L65
 1541 0008 1A68     		ldr	r2, [r3]
 1542 000a 42F40002 		orr	r2, r2, #8388608
 1543 000e 1A60     		str	r2, [r3]
1385:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1386:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable rising edge trigger on the LPTIM Wake-up Timer Exti line */
1387:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();  
 1544              		.loc 1 1387 0
 1545 0010 9A68     		ldr	r2, [r3, #8]
 1546 0012 42F40002 		orr	r2, r2, #8388608
 1547 0016 9A60     		str	r2, [r3, #8]
1388:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1389:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* If clock source is not ULPTIM clock and counter source is external, then it must not be presca
1390:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTI
 1548              		.loc 1 1390 0
 1549 0018 4368     		ldr	r3, [r0, #4]
 1550 001a 012B     		cmp	r3, #1
 1551 001c 08D0     		beq	.L64
 1552              		.loc 1 1390 0 is_stmt 0 discriminator 1
 1553 001e 836A     		ldr	r3, [r0, #40]
 1554 0020 B3F5000F 		cmp	r3, #8388608
 1555 0024 04D1     		bne	.L64
1391:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
1392:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Check if clock is prescaled */
1393:HALLIB/Src/stm32f7xx_hal_lptim.c ****     assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
1394:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Set clock prescaler to 0 */
1395:HALLIB/Src/stm32f7xx_hal_lptim.c ****     hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 1556              		.loc 1 1395 0 is_stmt 1
 1557 0026 0268     		ldr	r2, [r0]
 1558 0028 D368     		ldr	r3, [r2, #12]
 1559 002a 23F46063 		bic	r3, r3, #3584
 1560 002e D360     		str	r3, [r2, #12]
 1561              	.L64:
1396:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1397:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1398:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Autoreload write complete interrupt */
1399:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 1562              		.loc 1 1399 0
 1563 0030 0268     		ldr	r2, [r0]
 1564 0032 9368     		ldr	r3, [r2, #8]
 1565 0034 43F01003 		orr	r3, r3, #16
 1566 0038 9360     		str	r3, [r2, #8]
1400:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1401:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable Autoreload match interrupt */
1402:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 1567              		.loc 1 1402 0
 1568 003a 0268     		ldr	r2, [r0]
 1569 003c 9368     		ldr	r3, [r2, #8]
ARM GAS  /tmp/ccrscn1F.s 			page 53


 1570 003e 43F00203 		orr	r3, r3, #2
 1571 0042 9360     		str	r3, [r2, #8]
1403:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1404:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Enable the Peripheral */
1405:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_ENABLE(hlptim);
 1572              		.loc 1 1405 0
 1573 0044 0268     		ldr	r2, [r0]
 1574 0046 1369     		ldr	r3, [r2, #16]
 1575 0048 43F00103 		orr	r3, r3, #1
 1576 004c 1361     		str	r3, [r2, #16]
1406:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1407:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Load the period value in the autoreload register */
1408:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 1577              		.loc 1 1408 0
 1578 004e 0368     		ldr	r3, [r0]
 1579 0050 9961     		str	r1, [r3, #24]
1409:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1410:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Start timer in continuous mode */
1411:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_START_CONTINUOUS(hlptim);
 1580              		.loc 1 1411 0
 1581 0052 0268     		ldr	r2, [r0]
 1582 0054 1369     		ldr	r3, [r2, #16]
 1583 0056 43F00403 		orr	r3, r3, #4
 1584 005a 1361     		str	r3, [r2, #16]
1412:HALLIB/Src/stm32f7xx_hal_lptim.c ****     
1413:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
1414:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1585              		.loc 1 1414 0
 1586 005c 0123     		movs	r3, #1
 1587 005e 80F82E30 		strb	r3, [r0, #46]
1415:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1416:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1417:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1418:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1588              		.loc 1 1418 0
 1589 0062 0020     		movs	r0, #0
 1590              	.LVL93:
 1591 0064 7047     		bx	lr
 1592              	.L66:
 1593 0066 00BF     		.align	2
 1594              	.L65:
 1595 0068 003C0140 		.word	1073822720
 1596              		.cfi_endproc
 1597              	.LFE162:
 1599              		.section	.text.HAL_LPTIM_Counter_Stop_IT,"ax",%progbits
 1600              		.align	2
 1601              		.global	HAL_LPTIM_Counter_Stop_IT
 1602              		.thumb
 1603              		.thumb_func
 1605              	HAL_LPTIM_Counter_Stop_IT:
 1606              	.LFB163:
1419:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1420:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1421:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Stops the Counter mode in interrupt mode.
1422:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1423:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL status
1424:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
ARM GAS  /tmp/ccrscn1F.s 			page 54


1425:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
1426:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1607              		.loc 1 1426 0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 0
 1610              		@ frame_needed = 0, uses_anonymous_args = 0
 1611              		@ link register save eliminated.
 1612              	.LVL94:
1427:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Check the parameters */
1428:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1429:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1430:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Set the LPTIM state */
1431:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_BUSY;
 1613              		.loc 1 1431 0
 1614 0000 0223     		movs	r3, #2
 1615 0002 80F82E30 		strb	r3, [r0, #46]
1432:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1433:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable rising edge trigger on the LPTIM Wake-up Timer Exti line */ 
1434:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_RISING_EDGE();
 1616              		.loc 1 1434 0
 1617 0006 0E4B     		ldr	r3, .L68
 1618 0008 9A68     		ldr	r2, [r3, #8]
 1619 000a 22F40002 		bic	r2, r2, #8388608
 1620 000e 9A60     		str	r2, [r3, #8]
1435:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1436:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
1437:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(); 
 1621              		.loc 1 1437 0
 1622 0010 1A68     		ldr	r2, [r3]
 1623 0012 22F40002 		bic	r2, r2, #8388608
 1624 0016 1A60     		str	r2, [r3]
1438:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1439:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable the Peripheral */
1440:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE(hlptim);
 1625              		.loc 1 1440 0
 1626 0018 0268     		ldr	r2, [r0]
 1627 001a 1369     		ldr	r3, [r2, #16]
 1628 001c 23F00103 		bic	r3, r3, #1
 1629 0020 1361     		str	r3, [r2, #16]
1441:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1442:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Autoreload write complete interrupt */
1443:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 1630              		.loc 1 1443 0
 1631 0022 0268     		ldr	r2, [r0]
 1632 0024 9368     		ldr	r3, [r2, #8]
 1633 0026 23F01003 		bic	r3, r3, #16
 1634 002a 9360     		str	r3, [r2, #8]
1444:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1445:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Disable Autoreload match interrupt */
1446:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 1635              		.loc 1 1446 0
 1636 002c 0268     		ldr	r2, [r0]
 1637 002e 9368     		ldr	r3, [r2, #8]
 1638 0030 23F00203 		bic	r3, r3, #2
 1639 0034 9360     		str	r3, [r2, #8]
1447:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1448:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Change the TIM state*/
ARM GAS  /tmp/ccrscn1F.s 			page 55


1449:HALLIB/Src/stm32f7xx_hal_lptim.c ****   hlptim->State= HAL_LPTIM_STATE_READY;
 1640              		.loc 1 1449 0
 1641 0036 0123     		movs	r3, #1
 1642 0038 80F82E30 		strb	r3, [r0, #46]
1450:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1451:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Return function status */
1452:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return HAL_OK;
1453:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1643              		.loc 1 1453 0
 1644 003c 0020     		movs	r0, #0
 1645              	.LVL95:
 1646 003e 7047     		bx	lr
 1647              	.L69:
 1648              		.align	2
 1649              	.L68:
 1650 0040 003C0140 		.word	1073822720
 1651              		.cfi_endproc
 1652              	.LFE163:
 1654              		.section	.text.HAL_LPTIM_ReadCounter,"ax",%progbits
 1655              		.align	2
 1656              		.global	HAL_LPTIM_ReadCounter
 1657              		.thumb
 1658              		.thumb_func
 1660              	HAL_LPTIM_ReadCounter:
 1661              	.LFB164:
1454:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1455:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1456:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @}
1457:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1458:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1459:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @defgroup LPTIM_Group3 LPTIM Read operation functions 
1460:HALLIB/Src/stm32f7xx_hal_lptim.c ****  *  @brief  Read operation functions.
1461:HALLIB/Src/stm32f7xx_hal_lptim.c ****  *
1462:HALLIB/Src/stm32f7xx_hal_lptim.c **** @verbatim   
1463:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================
1464:HALLIB/Src/stm32f7xx_hal_lptim.c ****                   ##### LPTIM Read operation functions #####
1465:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================  
1466:HALLIB/Src/stm32f7xx_hal_lptim.c **** [..]  This section provides LPTIM Reading functions.
1467:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Read the counter value.
1468:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Read the period (Auto-reload) value.
1469:HALLIB/Src/stm32f7xx_hal_lptim.c ****       (+) Read the pulse (Compare)value.
1470:HALLIB/Src/stm32f7xx_hal_lptim.c **** @endverbatim
1471:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
1472:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1473:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1474:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1475:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  This function returns the current counter value.
1476:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim LPTIM handle
1477:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval Counter value.
1478:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1479:HALLIB/Src/stm32f7xx_hal_lptim.c **** uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)
1480:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1662              		.loc 1 1480 0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 0
 1665              		@ frame_needed = 0, uses_anonymous_args = 0
 1666              		@ link register save eliminated.
ARM GAS  /tmp/ccrscn1F.s 			page 56


 1667              	.LVL96:
1481:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Check the parameters */
1482:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1483:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1484:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return (hlptim->Instance->CNT);
 1668              		.loc 1 1484 0
 1669 0000 0368     		ldr	r3, [r0]
 1670 0002 D869     		ldr	r0, [r3, #28]
 1671              	.LVL97:
1485:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1672              		.loc 1 1485 0
 1673 0004 7047     		bx	lr
 1674              		.cfi_endproc
 1675              	.LFE164:
 1677 0006 00BF     		.section	.text.HAL_LPTIM_ReadAutoReload,"ax",%progbits
 1678              		.align	2
 1679              		.global	HAL_LPTIM_ReadAutoReload
 1680              		.thumb
 1681              		.thumb_func
 1683              	HAL_LPTIM_ReadAutoReload:
 1684              	.LFB165:
1486:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1487:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1488:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  This function return the current Autoreload (Period) value.
1489:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim LPTIM handle
1490:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval Autoreload value.
1491:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1492:HALLIB/Src/stm32f7xx_hal_lptim.c **** uint32_t HAL_LPTIM_ReadAutoReload(LPTIM_HandleTypeDef *hlptim)
1493:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1685              		.loc 1 1493 0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 0
 1688              		@ frame_needed = 0, uses_anonymous_args = 0
 1689              		@ link register save eliminated.
 1690              	.LVL98:
1494:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Check the parameters */
1495:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1496:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1497:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return (hlptim->Instance->ARR);
 1691              		.loc 1 1497 0
 1692 0000 0368     		ldr	r3, [r0]
 1693 0002 9869     		ldr	r0, [r3, #24]
 1694              	.LVL99:
1498:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1695              		.loc 1 1498 0
 1696 0004 7047     		bx	lr
 1697              		.cfi_endproc
 1698              	.LFE165:
 1700 0006 00BF     		.section	.text.HAL_LPTIM_ReadCompare,"ax",%progbits
 1701              		.align	2
 1702              		.global	HAL_LPTIM_ReadCompare
 1703              		.thumb
 1704              		.thumb_func
 1706              	HAL_LPTIM_ReadCompare:
 1707              	.LFB166:
1499:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1500:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
ARM GAS  /tmp/ccrscn1F.s 			page 57


1501:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  This function return the current Compare (Pulse) value.
1502:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim LPTIM handle
1503:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval Compare value.
1504:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1505:HALLIB/Src/stm32f7xx_hal_lptim.c **** uint32_t HAL_LPTIM_ReadCompare(LPTIM_HandleTypeDef *hlptim)
1506:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1708              		.loc 1 1506 0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 0
 1711              		@ frame_needed = 0, uses_anonymous_args = 0
 1712              		@ link register save eliminated.
 1713              	.LVL100:
1507:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Check the parameters */
1508:HALLIB/Src/stm32f7xx_hal_lptim.c ****   assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
1509:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1510:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return (hlptim->Instance->CMP);
 1714              		.loc 1 1510 0
 1715 0000 0368     		ldr	r3, [r0]
 1716 0002 5869     		ldr	r0, [r3, #20]
 1717              	.LVL101:
1511:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1718              		.loc 1 1511 0
 1719 0004 7047     		bx	lr
 1720              		.cfi_endproc
 1721              	.LFE166:
 1723 0006 00BF     		.section	.text.HAL_LPTIM_CompareMatchCallback,"ax",%progbits
 1724              		.align	2
 1725              		.weak	HAL_LPTIM_CompareMatchCallback
 1726              		.thumb
 1727              		.thumb_func
 1729              	HAL_LPTIM_CompareMatchCallback:
 1730              	.LFB168:
1512:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1513:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1514:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @}
1515:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1516:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1517:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1518:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1519:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @defgroup LPTIM_Group4 LPTIM IRQ handler 
1520:HALLIB/Src/stm32f7xx_hal_lptim.c ****  *  @brief  LPTIM  IRQ handler.
1521:HALLIB/Src/stm32f7xx_hal_lptim.c ****  *
1522:HALLIB/Src/stm32f7xx_hal_lptim.c **** @verbatim   
1523:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================
1524:HALLIB/Src/stm32f7xx_hal_lptim.c ****                       ##### LPTIM IRQ handler  #####
1525:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================  
1526:HALLIB/Src/stm32f7xx_hal_lptim.c **** [..]  This section provides LPTIM IRQ handler function.
1527:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1528:HALLIB/Src/stm32f7xx_hal_lptim.c **** @endverbatim
1529:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
1530:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1531:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1532:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1533:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  This function handles LPTIM interrupt request.
1534:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim LPTIM handle
1535:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval None
1536:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
ARM GAS  /tmp/ccrscn1F.s 			page 58


1537:HALLIB/Src/stm32f7xx_hal_lptim.c **** void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
1538:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
1539:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Compare match interrupt */
1540:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
1541:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
1542:HALLIB/Src/stm32f7xx_hal_lptim.c ****     if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) !=RESET)
1543:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
1544:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Clear Compare match flag */
1545:HALLIB/Src/stm32f7xx_hal_lptim.c ****       __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
1546:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Compare match Callback */
1547:HALLIB/Src/stm32f7xx_hal_lptim.c **** #if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
1548:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->CompareMatchCallback(hlptim);
1549:HALLIB/Src/stm32f7xx_hal_lptim.c **** #else
1550:HALLIB/Src/stm32f7xx_hal_lptim.c ****       HAL_LPTIM_CompareMatchCallback(hlptim);      
1551:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
1552:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
1553:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1554:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1555:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Autoreload match interrupt */
1556:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
1557:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
1558:HALLIB/Src/stm32f7xx_hal_lptim.c ****     if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) !=RESET)
1559:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
1560:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Clear Autoreload match flag */
1561:HALLIB/Src/stm32f7xx_hal_lptim.c ****       __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
1562:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Autoreload match Callback */
1563:HALLIB/Src/stm32f7xx_hal_lptim.c **** #if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
1564:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->AutoReloadMatchCallback(hlptim);
1565:HALLIB/Src/stm32f7xx_hal_lptim.c **** #else
1566:HALLIB/Src/stm32f7xx_hal_lptim.c ****       HAL_LPTIM_AutoReloadMatchCallback(hlptim);      
1567:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
1568:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
1569:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1570:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1571:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Trigger detected interrupt */
1572:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
1573:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
1574:HALLIB/Src/stm32f7xx_hal_lptim.c ****     if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) !=RESET)
1575:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
1576:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Clear Trigger detected flag */
1577:HALLIB/Src/stm32f7xx_hal_lptim.c ****       __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
1578:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Trigger detected callback */
1579:HALLIB/Src/stm32f7xx_hal_lptim.c **** #if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
1580:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->TriggerCallback(hlptim);
1581:HALLIB/Src/stm32f7xx_hal_lptim.c **** #else
1582:HALLIB/Src/stm32f7xx_hal_lptim.c ****       HAL_LPTIM_TriggerCallback(hlptim);      
1583:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
1584:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
1585:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1586:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1587:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Compare write interrupt */
1588:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
1589:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
1590:HALLIB/Src/stm32f7xx_hal_lptim.c ****     if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CMPM) !=RESET)
1591:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
1592:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Clear Compare write flag */
1593:HALLIB/Src/stm32f7xx_hal_lptim.c ****       __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
ARM GAS  /tmp/ccrscn1F.s 			page 59


1594:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Compare write Callback */
1595:HALLIB/Src/stm32f7xx_hal_lptim.c **** #if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
1596:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->CompareWriteCallback(hlptim);
1597:HALLIB/Src/stm32f7xx_hal_lptim.c **** #else
1598:HALLIB/Src/stm32f7xx_hal_lptim.c ****       HAL_LPTIM_CompareWriteCallback(hlptim);      
1599:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
1600:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
1601:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1602:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1603:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Autoreload write interrupt */
1604:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
1605:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
1606:HALLIB/Src/stm32f7xx_hal_lptim.c ****     if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) !=RESET)
1607:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
1608:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Clear Autoreload write flag */
1609:HALLIB/Src/stm32f7xx_hal_lptim.c ****       __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
1610:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Autoreload write Callback */
1611:HALLIB/Src/stm32f7xx_hal_lptim.c **** #if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
1612:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->AutoReloadWriteCallback(hlptim);
1613:HALLIB/Src/stm32f7xx_hal_lptim.c **** #else
1614:HALLIB/Src/stm32f7xx_hal_lptim.c ****       HAL_LPTIM_AutoReloadWriteCallback(hlptim);      
1615:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
1616:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
1617:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1618:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1619:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Direction counter changed from Down to Up interrupt */
1620:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
1621:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
1622:HALLIB/Src/stm32f7xx_hal_lptim.c ****     if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) !=RESET)
1623:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
1624:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Clear Direction counter changed from Down to Up flag */
1625:HALLIB/Src/stm32f7xx_hal_lptim.c ****       __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
1626:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Direction counter changed from Down to Up Callback */
1627:HALLIB/Src/stm32f7xx_hal_lptim.c **** #if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
1628:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->DirectionUpCallback(hlptim);
1629:HALLIB/Src/stm32f7xx_hal_lptim.c **** #else
1630:HALLIB/Src/stm32f7xx_hal_lptim.c ****       HAL_LPTIM_DirectionUpCallback(hlptim);      
1631:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
1632:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
1633:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1634:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1635:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Direction counter changed from Up to Down interrupt */
1636:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
1637:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
1638:HALLIB/Src/stm32f7xx_hal_lptim.c ****     if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) !=RESET)
1639:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
1640:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Clear Direction counter changed from Up to Down flag */
1641:HALLIB/Src/stm32f7xx_hal_lptim.c ****       __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
1642:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Direction counter changed from Up to Down Callback */
1643:HALLIB/Src/stm32f7xx_hal_lptim.c **** #if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
1644:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->DirectionDownCallback(hlptim);
1645:HALLIB/Src/stm32f7xx_hal_lptim.c **** #else
1646:HALLIB/Src/stm32f7xx_hal_lptim.c ****       HAL_LPTIM_DirectionDownCallback(hlptim);      
1647:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
1648:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
1649:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1650:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
ARM GAS  /tmp/ccrscn1F.s 			page 60


1651:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LPTIM_WAKEUPTIMER_EXTI_CLEAR_FLAG();
1652:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
1653:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1654:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1655:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Compare match callback in non blocking mode 
1656:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1657:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval None
1658:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1659:HALLIB/Src/stm32f7xx_hal_lptim.c **** __weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
1660:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1731              		.loc 1 1660 0
 1732              		.cfi_startproc
 1733              		@ args = 0, pretend = 0, frame = 0
 1734              		@ frame_needed = 0, uses_anonymous_args = 0
 1735              		@ link register save eliminated.
 1736              	.LVL102:
 1737 0000 7047     		bx	lr
 1738              		.cfi_endproc
 1739              	.LFE168:
 1741 0002 00BF     		.section	.text.HAL_LPTIM_AutoReloadMatchCallback,"ax",%progbits
 1742              		.align	2
 1743              		.weak	HAL_LPTIM_AutoReloadMatchCallback
 1744              		.thumb
 1745              		.thumb_func
 1747              	HAL_LPTIM_AutoReloadMatchCallback:
 1748              	.LFB169:
1661:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Prevent unused argument(s) compilation warning */
1662:HALLIB/Src/stm32f7xx_hal_lptim.c ****   UNUSED(hlptim);
1663:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1664:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1665:HALLIB/Src/stm32f7xx_hal_lptim.c ****             the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
1666:HALLIB/Src/stm32f7xx_hal_lptim.c ****    */  
1667:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
1668:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1669:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1670:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Autoreload match callback in non blocking mode 
1671:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1672:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval None
1673:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1674:HALLIB/Src/stm32f7xx_hal_lptim.c **** __weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
1675:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1749              		.loc 1 1675 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 1753              		@ link register save eliminated.
 1754              	.LVL103:
 1755 0000 7047     		bx	lr
 1756              		.cfi_endproc
 1757              	.LFE169:
 1759 0002 00BF     		.section	.text.HAL_LPTIM_TriggerCallback,"ax",%progbits
 1760              		.align	2
 1761              		.weak	HAL_LPTIM_TriggerCallback
 1762              		.thumb
 1763              		.thumb_func
 1765              	HAL_LPTIM_TriggerCallback:
 1766              	.LFB170:
ARM GAS  /tmp/ccrscn1F.s 			page 61


1676:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Prevent unused argument(s) compilation warning */
1677:HALLIB/Src/stm32f7xx_hal_lptim.c ****   UNUSED(hlptim);
1678:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1679:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1680:HALLIB/Src/stm32f7xx_hal_lptim.c ****             the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
1681:HALLIB/Src/stm32f7xx_hal_lptim.c ****    */  
1682:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
1683:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1684:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1685:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Trigger detected callback in non blocking mode 
1686:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1687:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval None
1688:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1689:HALLIB/Src/stm32f7xx_hal_lptim.c **** __weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
1690:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1767              		.loc 1 1690 0
 1768              		.cfi_startproc
 1769              		@ args = 0, pretend = 0, frame = 0
 1770              		@ frame_needed = 0, uses_anonymous_args = 0
 1771              		@ link register save eliminated.
 1772              	.LVL104:
 1773 0000 7047     		bx	lr
 1774              		.cfi_endproc
 1775              	.LFE170:
 1777 0002 00BF     		.section	.text.HAL_LPTIM_CompareWriteCallback,"ax",%progbits
 1778              		.align	2
 1779              		.weak	HAL_LPTIM_CompareWriteCallback
 1780              		.thumb
 1781              		.thumb_func
 1783              	HAL_LPTIM_CompareWriteCallback:
 1784              	.LFB171:
1691:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Prevent unused argument(s) compilation warning */
1692:HALLIB/Src/stm32f7xx_hal_lptim.c ****   UNUSED(hlptim);
1693:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1694:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1695:HALLIB/Src/stm32f7xx_hal_lptim.c ****             the HAL_LPTIM_TriggerCallback could be implemented in the user file
1696:HALLIB/Src/stm32f7xx_hal_lptim.c ****    */  
1697:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
1698:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1699:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1700:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Compare write callback in non blocking mode 
1701:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1702:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval None
1703:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1704:HALLIB/Src/stm32f7xx_hal_lptim.c **** __weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
1705:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1785              		.loc 1 1705 0
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 0
 1788              		@ frame_needed = 0, uses_anonymous_args = 0
 1789              		@ link register save eliminated.
 1790              	.LVL105:
 1791 0000 7047     		bx	lr
 1792              		.cfi_endproc
 1793              	.LFE171:
 1795 0002 00BF     		.section	.text.HAL_LPTIM_AutoReloadWriteCallback,"ax",%progbits
 1796              		.align	2
ARM GAS  /tmp/ccrscn1F.s 			page 62


 1797              		.weak	HAL_LPTIM_AutoReloadWriteCallback
 1798              		.thumb
 1799              		.thumb_func
 1801              	HAL_LPTIM_AutoReloadWriteCallback:
 1802              	.LFB172:
1706:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Prevent unused argument(s) compilation warning */
1707:HALLIB/Src/stm32f7xx_hal_lptim.c ****   UNUSED(hlptim);
1708:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1709:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1710:HALLIB/Src/stm32f7xx_hal_lptim.c ****             the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
1711:HALLIB/Src/stm32f7xx_hal_lptim.c ****    */  
1712:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
1713:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1714:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1715:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Autoreload write callback in non blocking mode 
1716:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1717:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval None
1718:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1719:HALLIB/Src/stm32f7xx_hal_lptim.c **** __weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
1720:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1803              		.loc 1 1720 0
 1804              		.cfi_startproc
 1805              		@ args = 0, pretend = 0, frame = 0
 1806              		@ frame_needed = 0, uses_anonymous_args = 0
 1807              		@ link register save eliminated.
 1808              	.LVL106:
 1809 0000 7047     		bx	lr
 1810              		.cfi_endproc
 1811              	.LFE172:
 1813 0002 00BF     		.section	.text.HAL_LPTIM_DirectionUpCallback,"ax",%progbits
 1814              		.align	2
 1815              		.weak	HAL_LPTIM_DirectionUpCallback
 1816              		.thumb
 1817              		.thumb_func
 1819              	HAL_LPTIM_DirectionUpCallback:
 1820              	.LFB173:
1721:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Prevent unused argument(s) compilation warning */
1722:HALLIB/Src/stm32f7xx_hal_lptim.c ****   UNUSED(hlptim);
1723:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1724:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1725:HALLIB/Src/stm32f7xx_hal_lptim.c ****             the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
1726:HALLIB/Src/stm32f7xx_hal_lptim.c ****    */  
1727:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
1728:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1729:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1730:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Direction counter changed from Down to Up callback in non blocking mode 
1731:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1732:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval None
1733:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1734:HALLIB/Src/stm32f7xx_hal_lptim.c **** __weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
1735:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1821              		.loc 1 1735 0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 0
 1824              		@ frame_needed = 0, uses_anonymous_args = 0
 1825              		@ link register save eliminated.
 1826              	.LVL107:
ARM GAS  /tmp/ccrscn1F.s 			page 63


 1827 0000 7047     		bx	lr
 1828              		.cfi_endproc
 1829              	.LFE173:
 1831 0002 00BF     		.section	.text.HAL_LPTIM_DirectionDownCallback,"ax",%progbits
 1832              		.align	2
 1833              		.weak	HAL_LPTIM_DirectionDownCallback
 1834              		.thumb
 1835              		.thumb_func
 1837              	HAL_LPTIM_DirectionDownCallback:
 1838              	.LFB174:
1736:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Prevent unused argument(s) compilation warning */
1737:HALLIB/Src/stm32f7xx_hal_lptim.c ****   UNUSED(hlptim);
1738:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1739:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1740:HALLIB/Src/stm32f7xx_hal_lptim.c ****             the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
1741:HALLIB/Src/stm32f7xx_hal_lptim.c ****    */  
1742:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
1743:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1744:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1745:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Direction counter changed from Up to Down callback in non blocking mode 
1746:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim  LPTIM handle
1747:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval None
1748:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1749:HALLIB/Src/stm32f7xx_hal_lptim.c **** __weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
1750:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 1839              		.loc 1 1750 0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 0
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 1843              		@ link register save eliminated.
 1844              	.LVL108:
 1845 0000 7047     		bx	lr
 1846              		.cfi_endproc
 1847              	.LFE174:
 1849 0002 00BF     		.section	.text.HAL_LPTIM_IRQHandler,"ax",%progbits
 1850              		.align	2
 1851              		.global	HAL_LPTIM_IRQHandler
 1852              		.thumb
 1853              		.thumb_func
 1855              	HAL_LPTIM_IRQHandler:
 1856              	.LFB167:
1538:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Compare match interrupt */
 1857              		.loc 1 1538 0
 1858              		.cfi_startproc
 1859              		@ args = 0, pretend = 0, frame = 0
 1860              		@ frame_needed = 0, uses_anonymous_args = 0
 1861              	.LVL109:
1538:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Compare match interrupt */
 1862              		.loc 1 1538 0
 1863 0000 10B5     		push	{r4, lr}
 1864              	.LCFI24:
 1865              		.cfi_def_cfa_offset 8
 1866              		.cfi_offset 4, -8
 1867              		.cfi_offset 14, -4
 1868 0002 0446     		mov	r4, r0
1540:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
 1869              		.loc 1 1540 0
ARM GAS  /tmp/ccrscn1F.s 			page 64


 1870 0004 0368     		ldr	r3, [r0]
 1871 0006 1A68     		ldr	r2, [r3]
 1872 0008 12F0010F 		tst	r2, #1
 1873 000c 07D0     		beq	.L81
1542:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
 1874              		.loc 1 1542 0
 1875 000e 9A68     		ldr	r2, [r3, #8]
 1876 0010 12F0010F 		tst	r2, #1
 1877 0014 03D0     		beq	.L81
1545:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Compare match Callback */
 1878              		.loc 1 1545 0
 1879 0016 0122     		movs	r2, #1
 1880 0018 5A60     		str	r2, [r3, #4]
1550:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
 1881              		.loc 1 1550 0
 1882 001a FFF7FEFF 		bl	HAL_LPTIM_CompareMatchCallback
 1883              	.LVL110:
 1884              	.L81:
1556:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
 1885              		.loc 1 1556 0
 1886 001e 2368     		ldr	r3, [r4]
 1887 0020 1A68     		ldr	r2, [r3]
 1888 0022 12F0020F 		tst	r2, #2
 1889 0026 08D0     		beq	.L82
1558:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
 1890              		.loc 1 1558 0
 1891 0028 9A68     		ldr	r2, [r3, #8]
 1892 002a 12F0020F 		tst	r2, #2
 1893 002e 04D0     		beq	.L82
1561:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Autoreload match Callback */
 1894              		.loc 1 1561 0
 1895 0030 0222     		movs	r2, #2
 1896 0032 5A60     		str	r2, [r3, #4]
1566:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
 1897              		.loc 1 1566 0
 1898 0034 2046     		mov	r0, r4
 1899 0036 FFF7FEFF 		bl	HAL_LPTIM_AutoReloadMatchCallback
 1900              	.LVL111:
 1901              	.L82:
1572:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
 1902              		.loc 1 1572 0
 1903 003a 2368     		ldr	r3, [r4]
 1904 003c 1A68     		ldr	r2, [r3]
 1905 003e 12F0040F 		tst	r2, #4
 1906 0042 08D0     		beq	.L83
1574:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
 1907              		.loc 1 1574 0
 1908 0044 9A68     		ldr	r2, [r3, #8]
 1909 0046 12F0040F 		tst	r2, #4
 1910 004a 04D0     		beq	.L83
1577:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Trigger detected callback */
 1911              		.loc 1 1577 0
 1912 004c 0422     		movs	r2, #4
 1913 004e 5A60     		str	r2, [r3, #4]
1582:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
 1914              		.loc 1 1582 0
 1915 0050 2046     		mov	r0, r4
ARM GAS  /tmp/ccrscn1F.s 			page 65


 1916 0052 FFF7FEFF 		bl	HAL_LPTIM_TriggerCallback
 1917              	.LVL112:
 1918              	.L83:
1588:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
 1919              		.loc 1 1588 0
 1920 0056 2368     		ldr	r3, [r4]
 1921 0058 1A68     		ldr	r2, [r3]
 1922 005a 12F0080F 		tst	r2, #8
 1923 005e 08D0     		beq	.L84
1590:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
 1924              		.loc 1 1590 0
 1925 0060 9A68     		ldr	r2, [r3, #8]
 1926 0062 12F0010F 		tst	r2, #1
 1927 0066 04D0     		beq	.L84
1593:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Compare write Callback */
 1928              		.loc 1 1593 0
 1929 0068 0822     		movs	r2, #8
 1930 006a 5A60     		str	r2, [r3, #4]
1598:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
 1931              		.loc 1 1598 0
 1932 006c 2046     		mov	r0, r4
 1933 006e FFF7FEFF 		bl	HAL_LPTIM_CompareWriteCallback
 1934              	.LVL113:
 1935              	.L84:
1604:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
 1936              		.loc 1 1604 0
 1937 0072 2368     		ldr	r3, [r4]
 1938 0074 1A68     		ldr	r2, [r3]
 1939 0076 12F0100F 		tst	r2, #16
 1940 007a 08D0     		beq	.L85
1606:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
 1941              		.loc 1 1606 0
 1942 007c 9A68     		ldr	r2, [r3, #8]
 1943 007e 12F0100F 		tst	r2, #16
 1944 0082 04D0     		beq	.L85
1609:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Autoreload write Callback */
 1945              		.loc 1 1609 0
 1946 0084 1022     		movs	r2, #16
 1947 0086 5A60     		str	r2, [r3, #4]
1614:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
 1948              		.loc 1 1614 0
 1949 0088 2046     		mov	r0, r4
 1950 008a FFF7FEFF 		bl	HAL_LPTIM_AutoReloadWriteCallback
 1951              	.LVL114:
 1952              	.L85:
1620:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
 1953              		.loc 1 1620 0
 1954 008e 2368     		ldr	r3, [r4]
 1955 0090 1A68     		ldr	r2, [r3]
 1956 0092 12F0200F 		tst	r2, #32
 1957 0096 08D0     		beq	.L86
1622:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
 1958              		.loc 1 1622 0
 1959 0098 9A68     		ldr	r2, [r3, #8]
 1960 009a 12F0200F 		tst	r2, #32
 1961 009e 04D0     		beq	.L86
1625:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Direction counter changed from Down to Up Callback */
ARM GAS  /tmp/ccrscn1F.s 			page 66


 1962              		.loc 1 1625 0
 1963 00a0 2022     		movs	r2, #32
 1964 00a2 5A60     		str	r2, [r3, #4]
1630:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
 1965              		.loc 1 1630 0
 1966 00a4 2046     		mov	r0, r4
 1967 00a6 FFF7FEFF 		bl	HAL_LPTIM_DirectionUpCallback
 1968              	.LVL115:
 1969              	.L86:
1636:HALLIB/Src/stm32f7xx_hal_lptim.c **** 	{
 1970              		.loc 1 1636 0
 1971 00aa 2368     		ldr	r3, [r4]
 1972 00ac 1A68     		ldr	r2, [r3]
 1973 00ae 12F0400F 		tst	r2, #64
 1974 00b2 08D0     		beq	.L87
1638:HALLIB/Src/stm32f7xx_hal_lptim.c **** 		{
 1975              		.loc 1 1638 0
 1976 00b4 9A68     		ldr	r2, [r3, #8]
 1977 00b6 12F0400F 		tst	r2, #64
 1978 00ba 04D0     		beq	.L87
1641:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Direction counter changed from Up to Down Callback */
 1979              		.loc 1 1641 0
 1980 00bc 4022     		movs	r2, #64
 1981 00be 5A60     		str	r2, [r3, #4]
1646:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
 1982              		.loc 1 1646 0
 1983 00c0 2046     		mov	r0, r4
 1984 00c2 FFF7FEFF 		bl	HAL_LPTIM_DirectionDownCallback
 1985              	.LVL116:
 1986              	.L87:
1651:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 1987              		.loc 1 1651 0
 1988 00c6 4FF40002 		mov	r2, #8388608
 1989 00ca 014B     		ldr	r3, .L89
 1990 00cc 5A61     		str	r2, [r3, #20]
 1991 00ce 10BD     		pop	{r4, pc}
 1992              	.LVL117:
 1993              	.L90:
 1994              		.align	2
 1995              	.L89:
 1996 00d0 003C0140 		.word	1073822720
 1997              		.cfi_endproc
 1998              	.LFE167:
 2000              		.section	.text.HAL_LPTIM_GetState,"ax",%progbits
 2001              		.align	2
 2002              		.global	HAL_LPTIM_GetState
 2003              		.thumb
 2004              		.thumb_func
 2006              	HAL_LPTIM_GetState:
 2007              	.LFB175:
1751:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Prevent unused argument(s) compilation warning */
1752:HALLIB/Src/stm32f7xx_hal_lptim.c ****   UNUSED(hlptim);
1753:HALLIB/Src/stm32f7xx_hal_lptim.c ****   
1754:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1755:HALLIB/Src/stm32f7xx_hal_lptim.c ****             the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
1756:HALLIB/Src/stm32f7xx_hal_lptim.c ****    */  
1757:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
ARM GAS  /tmp/ccrscn1F.s 			page 67


1758:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1759:HALLIB/Src/stm32f7xx_hal_lptim.c **** #if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
1760:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1761:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Register user LPTIM callback to be used instead of the weak predefined callback
1762:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim lptim handle
1763:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  CallbackID ID of the callback to be registered
1764:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         This parameter can be one of the following values:
1765:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *          @arg @ref HAL_LPTIM_MSPINIT_CB_ID MspInit Callback ID
1766:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *          @arg @ref HAL_LPTIM_MSPDEINIT_CB_ID MspDeInit Callback ID
1767:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *          @arg @ref HAL_LPTIM_COMPARE_MATCH_CB_ID Compare Match Callback ID
1768:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *          @arg @ref HAL_LPTIM_AUTO_RELOAD_MATCH_CB_ID Auto Reload Match Callback ID
1769:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *          @arg @ref HAL_LPTIM_TRIGGER_CB_ID Trigger Callback ID
1770:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *          @arg @ref HAL_LPTIM_COMPARE_WRITE_CB_ID Compare Write Callback ID
1771:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *          @arg @ref HAL_LPTIM_AUTO_RELOAD_WRITE_CB_ID Auto Reload Write Callback ID
1772:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *          @arg @ref HAL_LPTIM_DIRECTION_UP_CB_ID Direction UP Callback ID
1773:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *          @arg @ref HAL_LPTIM_DIRECTION_DOWN_CB_ID Direction Down Callback ID
1774:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param pCallback pointer to the callback function
1775:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval status
1776:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1777:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef *hlptim, HAL_LPTIM_CallbackIDTypeD
1778:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
1779:HALLIB/Src/stm32f7xx_hal_lptim.c ****   HAL_StatusTypeDef status = HAL_OK;
1780:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1781:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(pCallback == NULL)
1782:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
1783:HALLIB/Src/stm32f7xx_hal_lptim.c ****     return HAL_ERROR;
1784:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1785:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Process locked */
1786:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LOCK(hlptim);
1787:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1788:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(hlptim->State == HAL_LPTIM_STATE_READY)
1789:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
1790:HALLIB/Src/stm32f7xx_hal_lptim.c ****     switch (CallbackID)
1791:HALLIB/Src/stm32f7xx_hal_lptim.c ****     {
1792:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_MSPINIT_CB_ID :
1793:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->MspInitCallback         = pCallback;
1794:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1795:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1796:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_MSPDEINIT_CB_ID :
1797:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->MspDeInitCallback       = pCallback;
1798:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1799:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1800:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_COMPARE_MATCH_CB_ID :
1801:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->CompareMatchCallback    = pCallback;
1802:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1803:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1804:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_AUTO_RELOAD_MATCH_CB_ID :
1805:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->AutoReloadMatchCallback = pCallback;
1806:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1807:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1808:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_TRIGGER_CB_ID :
1809:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->TriggerCallback         = pCallback;
1810:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1811:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1812:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_COMPARE_WRITE_CB_ID :
1813:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->CompareWriteCallback    = pCallback;
1814:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
ARM GAS  /tmp/ccrscn1F.s 			page 68


1815:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1816:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_AUTO_RELOAD_WRITE_CB_ID :
1817:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->AutoReloadWriteCallback = pCallback;
1818:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1819:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1820:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_DIRECTION_UP_CB_ID :
1821:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->DirectionUpCallback     = pCallback;
1822:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1823:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1824:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
1825:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->DirectionDownCallback   = pCallback;
1826:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1827:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1828:HALLIB/Src/stm32f7xx_hal_lptim.c ****     default :
1829:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Return error status */
1830:HALLIB/Src/stm32f7xx_hal_lptim.c ****       status =  HAL_ERROR;
1831:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1832:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
1833:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1834:HALLIB/Src/stm32f7xx_hal_lptim.c ****   else if(hlptim->State == HAL_LPTIM_STATE_RESET)
1835:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
1836:HALLIB/Src/stm32f7xx_hal_lptim.c ****     switch (CallbackID)
1837:HALLIB/Src/stm32f7xx_hal_lptim.c ****     {
1838:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_MSPINIT_CB_ID :
1839:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->MspInitCallback         = pCallback;
1840:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1841:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1842:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_MSPDEINIT_CB_ID :
1843:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->MspDeInitCallback       = pCallback;
1844:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1845:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1846:HALLIB/Src/stm32f7xx_hal_lptim.c ****     default :
1847:HALLIB/Src/stm32f7xx_hal_lptim.c ****       /* Return error status */
1848:HALLIB/Src/stm32f7xx_hal_lptim.c ****       status =  HAL_ERROR;
1849:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1850:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
1851:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1852:HALLIB/Src/stm32f7xx_hal_lptim.c ****   else
1853:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
1854:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Return error status */
1855:HALLIB/Src/stm32f7xx_hal_lptim.c ****     status =  HAL_ERROR;
1856:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1857:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1858:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Release Lock */
1859:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_UNLOCK(hlptim);
1860:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1861:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return status;
1862:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
1863:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1864:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1865:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  UnRegister user LPTIM callback
1866:HALLIB/Src/stm32f7xx_hal_lptim.c ****   *         LPTIM callback is redirected to the weak predefined callback
1867:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim lptim handle
1868:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  CallbackID ID of the callback to be unregistered
1869:HALLIB/Src/stm32f7xx_hal_lptim.c **** +  *         This parameter can be one of the following values:
1870:HALLIB/Src/stm32f7xx_hal_lptim.c **** +  *          @arg @ref HAL_LPTIM_MSPINIT_CB_ID MspInit Callback ID
1871:HALLIB/Src/stm32f7xx_hal_lptim.c **** +  *          @arg @ref HAL_LPTIM_MSPDEINIT_CB_ID MspDeInit Callback ID
ARM GAS  /tmp/ccrscn1F.s 			page 69


1872:HALLIB/Src/stm32f7xx_hal_lptim.c **** +  *          @arg @ref HAL_LPTIM_COMPARE_MATCH_CB_ID Compare Match Callback ID
1873:HALLIB/Src/stm32f7xx_hal_lptim.c **** +  *          @arg @ref HAL_LPTIM_AUTO_RELOAD_MATCH_CB_ID Auto Reload Match Callback ID
1874:HALLIB/Src/stm32f7xx_hal_lptim.c **** +  *          @arg @ref HAL_LPTIM_TRIGGER_CB_ID Trigger Callback ID
1875:HALLIB/Src/stm32f7xx_hal_lptim.c **** +  *          @arg @ref HAL_LPTIM_COMPARE_WRITE_CB_ID Compare Write Callback ID
1876:HALLIB/Src/stm32f7xx_hal_lptim.c **** +  *          @arg @ref HAL_LPTIM_AUTO_RELOAD_WRITE_CB_ID Auto Reload Write Callback ID
1877:HALLIB/Src/stm32f7xx_hal_lptim.c **** +  *          @arg @ref HAL_LPTIM_DIRECTION_UP_CB_ID Direction UP Callback ID
1878:HALLIB/Src/stm32f7xx_hal_lptim.c **** +  *          @arg @ref HAL_LPTIM_DIRECTION_DOWN_CB_ID Direction Down Callback ID
1879:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval status
1880:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1881:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_StatusTypeDef HAL_LPTIM_UnRegisterCallback(LPTIM_HandleTypeDef *hlptim, HAL_LPTIM_CallbackIDTyp
1882:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
1883:HALLIB/Src/stm32f7xx_hal_lptim.c ****   HAL_StatusTypeDef status = HAL_OK;
1884:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1885:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Process locked */
1886:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_LOCK(hlptim);
1887:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1888:HALLIB/Src/stm32f7xx_hal_lptim.c ****   if(hlptim->State == HAL_LPTIM_STATE_READY)
1889:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
1890:HALLIB/Src/stm32f7xx_hal_lptim.c ****     switch (CallbackID)
1891:HALLIB/Src/stm32f7xx_hal_lptim.c ****     {
1892:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_MSPINIT_CB_ID :
1893:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->MspInitCallback         = HAL_LPTIM_MspInit;                 /* Legacy weak MspInit C
1894:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1895:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1896:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_MSPDEINIT_CB_ID :
1897:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->MspDeInitCallback       = HAL_LPTIM_MspDeInit;               /* Legacy weak MspDeInit
1898:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1899:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1900:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_COMPARE_MATCH_CB_ID :
1901:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;    /* Legacy weak Compare M
1902:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1903:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1904:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_AUTO_RELOAD_MATCH_CB_ID :
1905:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback; /* Legacy weak Auto Relo
1906:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1907:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1908:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_TRIGGER_CB_ID :
1909:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;         /* Legacy weak Trigger C
1910:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1911:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1912:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_COMPARE_WRITE_CB_ID :
1913:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;    /* Legacy weak Compare W
1914:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1915:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1916:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_AUTO_RELOAD_WRITE_CB_ID :
1917:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback; /* Legacy weak Auto Relo
1918:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1919:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1920:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_DIRECTION_UP_CB_ID :
1921:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;     /* Legacy weak Direction
1922:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1923:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1924:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
1925:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;   /* Legacy weak Direction
1926:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1927:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1928:HALLIB/Src/stm32f7xx_hal_lptim.c ****     default :
ARM GAS  /tmp/ccrscn1F.s 			page 70


1929:HALLIB/Src/stm32f7xx_hal_lptim.c ****      /* Return error status */
1930:HALLIB/Src/stm32f7xx_hal_lptim.c ****       status =  HAL_ERROR;
1931:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1932:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
1933:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1934:HALLIB/Src/stm32f7xx_hal_lptim.c ****   else if(hlptim->State == HAL_LPTIM_STATE_RESET)
1935:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
1936:HALLIB/Src/stm32f7xx_hal_lptim.c ****     switch (CallbackID)
1937:HALLIB/Src/stm32f7xx_hal_lptim.c ****     {
1938:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_MSPINIT_CB_ID :
1939:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->MspInitCallback       = HAL_LPTIM_MspInit;                   /* Legacy weak MspInit C
1940:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1941:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1942:HALLIB/Src/stm32f7xx_hal_lptim.c ****     case HAL_LPTIM_MSPDEINIT_CB_ID :
1943:HALLIB/Src/stm32f7xx_hal_lptim.c ****       hlptim->MspDeInitCallback     = HAL_LPTIM_MspDeInit;                 /* Legacy weak MspDeInit
1944:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1945:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1946:HALLIB/Src/stm32f7xx_hal_lptim.c ****     default :
1947:HALLIB/Src/stm32f7xx_hal_lptim.c ****      /* Return error status */
1948:HALLIB/Src/stm32f7xx_hal_lptim.c ****       status =  HAL_ERROR;
1949:HALLIB/Src/stm32f7xx_hal_lptim.c ****       break;
1950:HALLIB/Src/stm32f7xx_hal_lptim.c ****     }
1951:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1952:HALLIB/Src/stm32f7xx_hal_lptim.c ****   else
1953:HALLIB/Src/stm32f7xx_hal_lptim.c ****   {
1954:HALLIB/Src/stm32f7xx_hal_lptim.c ****     /* Return error status */
1955:HALLIB/Src/stm32f7xx_hal_lptim.c ****     status =  HAL_ERROR;
1956:HALLIB/Src/stm32f7xx_hal_lptim.c ****   }
1957:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1958:HALLIB/Src/stm32f7xx_hal_lptim.c ****   /* Release Lock */
1959:HALLIB/Src/stm32f7xx_hal_lptim.c ****   __HAL_UNLOCK(hlptim);
1960:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1961:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return status;
1962:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
1963:HALLIB/Src/stm32f7xx_hal_lptim.c **** #endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
1964:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1965:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1966:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @}
1967:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1968:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1969:HALLIB/Src/stm32f7xx_hal_lptim.c **** /** @defgroup LPTIM_Group5 Peripheral State functions 
1970:HALLIB/Src/stm32f7xx_hal_lptim.c ****  *  @brief   Peripheral State functions. 
1971:HALLIB/Src/stm32f7xx_hal_lptim.c ****  *
1972:HALLIB/Src/stm32f7xx_hal_lptim.c **** @verbatim   
1973:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================
1974:HALLIB/Src/stm32f7xx_hal_lptim.c ****                       ##### Peripheral State functions #####
1975:HALLIB/Src/stm32f7xx_hal_lptim.c ****   ==============================================================================  
1976:HALLIB/Src/stm32f7xx_hal_lptim.c ****     [..]
1977:HALLIB/Src/stm32f7xx_hal_lptim.c ****     This subsection permits to get in run-time the status of the peripheral.
1978:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1979:HALLIB/Src/stm32f7xx_hal_lptim.c **** @endverbatim
1980:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @{
1981:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1982:HALLIB/Src/stm32f7xx_hal_lptim.c **** 
1983:HALLIB/Src/stm32f7xx_hal_lptim.c **** /**
1984:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @brief  Returns the LPTIM state.
1985:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @param  hlptim LPTIM handle
ARM GAS  /tmp/ccrscn1F.s 			page 71


1986:HALLIB/Src/stm32f7xx_hal_lptim.c ****   * @retval HAL state
1987:HALLIB/Src/stm32f7xx_hal_lptim.c ****   */
1988:HALLIB/Src/stm32f7xx_hal_lptim.c **** HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
1989:HALLIB/Src/stm32f7xx_hal_lptim.c **** {
 2008              		.loc 1 1989 0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 0
 2011              		@ frame_needed = 0, uses_anonymous_args = 0
 2012              		@ link register save eliminated.
 2013              	.LVL118:
1990:HALLIB/Src/stm32f7xx_hal_lptim.c ****   return hlptim->State;
 2014              		.loc 1 1990 0
 2015 0000 90F82E00 		ldrb	r0, [r0, #46]	@ zero_extendqisi2
 2016              	.LVL119:
1991:HALLIB/Src/stm32f7xx_hal_lptim.c **** }
 2017              		.loc 1 1991 0
 2018 0004 7047     		bx	lr
 2019              		.cfi_endproc
 2020              	.LFE175:
 2022 0006 00BF     		.text
 2023              	.Letext0:
 2024              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 2025              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 2026              		.file 4 "Inc/stm32f767xx.h"
 2027              		.file 5 "Inc/stm32f7xx.h"
 2028              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 2029              		.file 7 "HALLIB/Inc/stm32f7xx_hal_lptim.h"
 2030              		.file 8 "CORE/core_cm7.h"
ARM GAS  /tmp/ccrscn1F.s 			page 72


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_lptim.c
     /tmp/ccrscn1F.s:21     .text.HAL_LPTIM_MspInit:00000000 $t
     /tmp/ccrscn1F.s:26     .text.HAL_LPTIM_MspInit:00000000 HAL_LPTIM_MspInit
     /tmp/ccrscn1F.s:40     .text.HAL_LPTIM_Init:00000000 $t
     /tmp/ccrscn1F.s:45     .text.HAL_LPTIM_Init:00000000 HAL_LPTIM_Init
     /tmp/ccrscn1F.s:177    .text.HAL_LPTIM_Init:0000008c $d
     /tmp/ccrscn1F.s:182    .text.HAL_LPTIM_MspDeInit:00000000 $t
     /tmp/ccrscn1F.s:187    .text.HAL_LPTIM_MspDeInit:00000000 HAL_LPTIM_MspDeInit
     /tmp/ccrscn1F.s:200    .text.HAL_LPTIM_DeInit:00000000 $t
     /tmp/ccrscn1F.s:205    .text.HAL_LPTIM_DeInit:00000000 HAL_LPTIM_DeInit
     /tmp/ccrscn1F.s:253    .text.HAL_LPTIM_PWM_Start:00000000 $t
     /tmp/ccrscn1F.s:258    .text.HAL_LPTIM_PWM_Start:00000000 HAL_LPTIM_PWM_Start
     /tmp/ccrscn1F.s:311    .text.HAL_LPTIM_PWM_Stop:00000000 $t
     /tmp/ccrscn1F.s:316    .text.HAL_LPTIM_PWM_Stop:00000000 HAL_LPTIM_PWM_Stop
     /tmp/ccrscn1F.s:343    .text.HAL_LPTIM_PWM_Start_IT:00000000 $t
     /tmp/ccrscn1F.s:348    .text.HAL_LPTIM_PWM_Start_IT:00000000 HAL_LPTIM_PWM_Start_IT
     /tmp/ccrscn1F.s:432    .text.HAL_LPTIM_PWM_Stop_IT:00000000 $t
     /tmp/ccrscn1F.s:437    .text.HAL_LPTIM_PWM_Stop_IT:00000000 HAL_LPTIM_PWM_Stop_IT
     /tmp/ccrscn1F.s:495    .text.HAL_LPTIM_OnePulse_Start:00000000 $t
     /tmp/ccrscn1F.s:500    .text.HAL_LPTIM_OnePulse_Start:00000000 HAL_LPTIM_OnePulse_Start
     /tmp/ccrscn1F.s:553    .text.HAL_LPTIM_OnePulse_Stop:00000000 $t
     /tmp/ccrscn1F.s:558    .text.HAL_LPTIM_OnePulse_Stop:00000000 HAL_LPTIM_OnePulse_Stop
     /tmp/ccrscn1F.s:585    .text.HAL_LPTIM_OnePulse_Start_IT:00000000 $t
     /tmp/ccrscn1F.s:590    .text.HAL_LPTIM_OnePulse_Start_IT:00000000 HAL_LPTIM_OnePulse_Start_IT
     /tmp/ccrscn1F.s:674    .text.HAL_LPTIM_OnePulse_Stop_IT:00000000 $t
     /tmp/ccrscn1F.s:679    .text.HAL_LPTIM_OnePulse_Stop_IT:00000000 HAL_LPTIM_OnePulse_Stop_IT
     /tmp/ccrscn1F.s:737    .text.HAL_LPTIM_SetOnce_Start:00000000 $t
     /tmp/ccrscn1F.s:742    .text.HAL_LPTIM_SetOnce_Start:00000000 HAL_LPTIM_SetOnce_Start
     /tmp/ccrscn1F.s:795    .text.HAL_LPTIM_SetOnce_Stop:00000000 $t
     /tmp/ccrscn1F.s:800    .text.HAL_LPTIM_SetOnce_Stop:00000000 HAL_LPTIM_SetOnce_Stop
     /tmp/ccrscn1F.s:827    .text.HAL_LPTIM_SetOnce_Start_IT:00000000 $t
     /tmp/ccrscn1F.s:832    .text.HAL_LPTIM_SetOnce_Start_IT:00000000 HAL_LPTIM_SetOnce_Start_IT
     /tmp/ccrscn1F.s:916    .text.HAL_LPTIM_SetOnce_Stop_IT:00000000 $t
     /tmp/ccrscn1F.s:921    .text.HAL_LPTIM_SetOnce_Stop_IT:00000000 HAL_LPTIM_SetOnce_Stop_IT
     /tmp/ccrscn1F.s:979    .text.HAL_LPTIM_Encoder_Start:00000000 $t
     /tmp/ccrscn1F.s:984    .text.HAL_LPTIM_Encoder_Start:00000000 HAL_LPTIM_Encoder_Start
     /tmp/ccrscn1F.s:1048   .text.HAL_LPTIM_Encoder_Stop:00000000 $t
     /tmp/ccrscn1F.s:1053   .text.HAL_LPTIM_Encoder_Stop:00000000 HAL_LPTIM_Encoder_Stop
     /tmp/ccrscn1F.s:1085   .text.HAL_LPTIM_Encoder_Start_IT:00000000 $t
     /tmp/ccrscn1F.s:1090   .text.HAL_LPTIM_Encoder_Start_IT:00000000 HAL_LPTIM_Encoder_Start_IT
     /tmp/ccrscn1F.s:1164   .text.HAL_LPTIM_Encoder_Stop_IT:00000000 $t
     /tmp/ccrscn1F.s:1169   .text.HAL_LPTIM_Encoder_Stop_IT:00000000 HAL_LPTIM_Encoder_Stop_IT
     /tmp/ccrscn1F.s:1211   .text.HAL_LPTIM_TimeOut_Start:00000000 $t
     /tmp/ccrscn1F.s:1216   .text.HAL_LPTIM_TimeOut_Start:00000000 HAL_LPTIM_TimeOut_Start
     /tmp/ccrscn1F.s:1269   .text.HAL_LPTIM_TimeOut_Stop:00000000 $t
     /tmp/ccrscn1F.s:1274   .text.HAL_LPTIM_TimeOut_Stop:00000000 HAL_LPTIM_TimeOut_Stop
     /tmp/ccrscn1F.s:1306   .text.HAL_LPTIM_TimeOut_Start_IT:00000000 $t
     /tmp/ccrscn1F.s:1311   .text.HAL_LPTIM_TimeOut_Start_IT:00000000 HAL_LPTIM_TimeOut_Start_IT
     /tmp/ccrscn1F.s:1377   .text.HAL_LPTIM_TimeOut_Start_IT:00000058 $d
     /tmp/ccrscn1F.s:1382   .text.HAL_LPTIM_TimeOut_Stop_IT:00000000 $t
     /tmp/ccrscn1F.s:1387   .text.HAL_LPTIM_TimeOut_Stop_IT:00000000 HAL_LPTIM_TimeOut_Stop_IT
     /tmp/ccrscn1F.s:1432   .text.HAL_LPTIM_TimeOut_Stop_IT:00000040 $d
     /tmp/ccrscn1F.s:1437   .text.HAL_LPTIM_Counter_Start:00000000 $t
     /tmp/ccrscn1F.s:1442   .text.HAL_LPTIM_Counter_Start:00000000 HAL_LPTIM_Counter_Start
     /tmp/ccrscn1F.s:1491   .text.HAL_LPTIM_Counter_Stop:00000000 $t
     /tmp/ccrscn1F.s:1496   .text.HAL_LPTIM_Counter_Stop:00000000 HAL_LPTIM_Counter_Stop
ARM GAS  /tmp/ccrscn1F.s 			page 73


     /tmp/ccrscn1F.s:1523   .text.HAL_LPTIM_Counter_Start_IT:00000000 $t
     /tmp/ccrscn1F.s:1528   .text.HAL_LPTIM_Counter_Start_IT:00000000 HAL_LPTIM_Counter_Start_IT
     /tmp/ccrscn1F.s:1595   .text.HAL_LPTIM_Counter_Start_IT:00000068 $d
     /tmp/ccrscn1F.s:1600   .text.HAL_LPTIM_Counter_Stop_IT:00000000 $t
     /tmp/ccrscn1F.s:1605   .text.HAL_LPTIM_Counter_Stop_IT:00000000 HAL_LPTIM_Counter_Stop_IT
     /tmp/ccrscn1F.s:1650   .text.HAL_LPTIM_Counter_Stop_IT:00000040 $d
     /tmp/ccrscn1F.s:1655   .text.HAL_LPTIM_ReadCounter:00000000 $t
     /tmp/ccrscn1F.s:1660   .text.HAL_LPTIM_ReadCounter:00000000 HAL_LPTIM_ReadCounter
     /tmp/ccrscn1F.s:1678   .text.HAL_LPTIM_ReadAutoReload:00000000 $t
     /tmp/ccrscn1F.s:1683   .text.HAL_LPTIM_ReadAutoReload:00000000 HAL_LPTIM_ReadAutoReload
     /tmp/ccrscn1F.s:1701   .text.HAL_LPTIM_ReadCompare:00000000 $t
     /tmp/ccrscn1F.s:1706   .text.HAL_LPTIM_ReadCompare:00000000 HAL_LPTIM_ReadCompare
     /tmp/ccrscn1F.s:1724   .text.HAL_LPTIM_CompareMatchCallback:00000000 $t
     /tmp/ccrscn1F.s:1729   .text.HAL_LPTIM_CompareMatchCallback:00000000 HAL_LPTIM_CompareMatchCallback
     /tmp/ccrscn1F.s:1742   .text.HAL_LPTIM_AutoReloadMatchCallback:00000000 $t
     /tmp/ccrscn1F.s:1747   .text.HAL_LPTIM_AutoReloadMatchCallback:00000000 HAL_LPTIM_AutoReloadMatchCallback
     /tmp/ccrscn1F.s:1760   .text.HAL_LPTIM_TriggerCallback:00000000 $t
     /tmp/ccrscn1F.s:1765   .text.HAL_LPTIM_TriggerCallback:00000000 HAL_LPTIM_TriggerCallback
     /tmp/ccrscn1F.s:1778   .text.HAL_LPTIM_CompareWriteCallback:00000000 $t
     /tmp/ccrscn1F.s:1783   .text.HAL_LPTIM_CompareWriteCallback:00000000 HAL_LPTIM_CompareWriteCallback
     /tmp/ccrscn1F.s:1796   .text.HAL_LPTIM_AutoReloadWriteCallback:00000000 $t
     /tmp/ccrscn1F.s:1801   .text.HAL_LPTIM_AutoReloadWriteCallback:00000000 HAL_LPTIM_AutoReloadWriteCallback
     /tmp/ccrscn1F.s:1814   .text.HAL_LPTIM_DirectionUpCallback:00000000 $t
     /tmp/ccrscn1F.s:1819   .text.HAL_LPTIM_DirectionUpCallback:00000000 HAL_LPTIM_DirectionUpCallback
     /tmp/ccrscn1F.s:1832   .text.HAL_LPTIM_DirectionDownCallback:00000000 $t
     /tmp/ccrscn1F.s:1837   .text.HAL_LPTIM_DirectionDownCallback:00000000 HAL_LPTIM_DirectionDownCallback
     /tmp/ccrscn1F.s:1850   .text.HAL_LPTIM_IRQHandler:00000000 $t
     /tmp/ccrscn1F.s:1855   .text.HAL_LPTIM_IRQHandler:00000000 HAL_LPTIM_IRQHandler
     /tmp/ccrscn1F.s:1996   .text.HAL_LPTIM_IRQHandler:000000d0 $d
     /tmp/ccrscn1F.s:2001   .text.HAL_LPTIM_GetState:00000000 $t
     /tmp/ccrscn1F.s:2006   .text.HAL_LPTIM_GetState:00000000 HAL_LPTIM_GetState
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
