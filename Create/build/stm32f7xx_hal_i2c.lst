ARM GAS  /tmp/ccyfI9lR.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_i2c.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.I2C_Flush_TXDR,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	I2C_Flush_TXDR:
  26              	.LFB194:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_i2c.c"
   1:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_i2c.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @file    stm32f7xx_hal_i2c.c
   4:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief   I2C HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *          This file provides firmware functions to manage the following
   7:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *          functionalities of the Inter Integrated Circuit (I2C) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *           + IO operation functions
  10:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *           + Peripheral State and Errors functions
  11:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *
  12:HALLIB/Src/stm32f7xx_hal_i2c.c ****   @verbatim
  13:HALLIB/Src/stm32f7xx_hal_i2c.c ****   ==============================================================================
  14:HALLIB/Src/stm32f7xx_hal_i2c.c ****                         ##### How to use this driver #####
  15:HALLIB/Src/stm32f7xx_hal_i2c.c ****   ==============================================================================
  16:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]
  17:HALLIB/Src/stm32f7xx_hal_i2c.c ****     The I2C HAL driver can be used as follows:
  18:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  19:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (#) Declare a I2C_HandleTypeDef handle structure, for example:
  20:HALLIB/Src/stm32f7xx_hal_i2c.c ****         I2C_HandleTypeDef  hi2c;
  21:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  22:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (#)Initialize the I2C low level resources by implementing the HAL_I2C_MspInit() API:
  23:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (##) Enable the I2Cx interface clock
  24:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (##) I2C pins configuration
  25:HALLIB/Src/stm32f7xx_hal_i2c.c ****             (+++) Enable the clock for the I2C GPIOs
  26:HALLIB/Src/stm32f7xx_hal_i2c.c ****             (+++) Configure I2C pins as alternate function open-drain
  27:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (##) NVIC configuration if you need to use interrupt process
  28:HALLIB/Src/stm32f7xx_hal_i2c.c ****             (+++) Configure the I2Cx interrupt priority
  29:HALLIB/Src/stm32f7xx_hal_i2c.c ****             (+++) Enable the NVIC I2C IRQ Channel
  30:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (##) DMA Configuration if you need to use DMA process
  31:HALLIB/Src/stm32f7xx_hal_i2c.c ****             (+++) Declare a DMA_HandleTypeDef handle structure for the transmit or receive stream
ARM GAS  /tmp/ccyfI9lR.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_i2c.c ****             (+++) Enable the DMAx interface clock using
  33:HALLIB/Src/stm32f7xx_hal_i2c.c ****             (+++) Configure the DMA handle parameters
  34:HALLIB/Src/stm32f7xx_hal_i2c.c ****             (+++) Configure the DMA Tx or Rx stream
  35:HALLIB/Src/stm32f7xx_hal_i2c.c ****             (+++) Associate the initialized DMA handle to the hi2c DMA Tx or Rx handle
  36:HALLIB/Src/stm32f7xx_hal_i2c.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  37:HALLIB/Src/stm32f7xx_hal_i2c.c ****                   the DMA Tx or Rx stream
  38:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  39:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (#) Configure the Communication Clock Timing, Own Address1, Master Addressing mode, Dual Addres
  40:HALLIB/Src/stm32f7xx_hal_i2c.c ****         Own Address2, Own Address2 Mask, General call and Nostretch mode in the hi2c Init structure
  41:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  42:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (#) Initialize the I2C registers by calling the HAL_I2C_Init(), configures also the low level H
  43:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (GPIO, CLOCK, NVIC...etc) by calling the customized HAL_I2C_MspInit(&hi2c) API.
  44:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  45:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (#) To check if target device is ready for communication, use the function HAL_I2C_IsDeviceRead
  46:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  47:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (#) For I2C IO and IO MEM operations, three operation modes are available within this driver :
  48:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  49:HALLIB/Src/stm32f7xx_hal_i2c.c ****     *** Polling mode IO operation ***
  50:HALLIB/Src/stm32f7xx_hal_i2c.c ****     =================================
  51:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]
  52:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Transmit in master mode an amount of data in blocking mode using HAL_I2C_Master_Transmit(
  53:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Receive in master mode an amount of data in blocking mode using HAL_I2C_Master_Receive()
  54:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Transmit in slave mode an amount of data in blocking mode using HAL_I2C_Slave_Transmit()
  55:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Receive in slave mode an amount of data in blocking mode using HAL_I2C_Slave_Receive()
  56:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  57:HALLIB/Src/stm32f7xx_hal_i2c.c ****     *** Polling mode IO MEM operation ***
  58:HALLIB/Src/stm32f7xx_hal_i2c.c ****     =====================================
  59:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]
  60:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Write an amount of data in blocking mode to a specific memory address using HAL_I2C_Mem_W
  61:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Read an amount of data in blocking mode from a specific memory address using HAL_I2C_Mem_
  62:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  63:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  64:HALLIB/Src/stm32f7xx_hal_i2c.c ****     *** Interrupt mode IO operation ***
  65:HALLIB/Src/stm32f7xx_hal_i2c.c ****     ===================================
  66:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]
  67:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Transmit in master mode an amount of data in non-blocking mode using HAL_I2C_Master_Trans
  68:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At transmission end of transfer, HAL_I2C_MasterTxCpltCallback() is executed and user can
  69:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_MasterTxCpltCallback()
  70:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Receive in master mode an amount of data in non-blocking mode using HAL_I2C_Master_Receiv
  71:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At reception end of transfer, HAL_I2C_MasterRxCpltCallback() is executed and user can
  72:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_MasterRxCpltCallback()
  73:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Transmit in slave mode an amount of data in non-blocking mode using HAL_I2C_Slave_Transmi
  74:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At transmission end of transfer, HAL_I2C_SlaveTxCpltCallback() is executed and user can
  75:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_SlaveTxCpltCallback()
  76:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Receive in slave mode an amount of data in non-blocking mode using HAL_I2C_Slave_Receive_
  77:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At reception end of transfer, HAL_I2C_SlaveRxCpltCallback() is executed and user can
  78:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_SlaveRxCpltCallback()
  79:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) In case of transfer Error, HAL_I2C_ErrorCallback() function is executed and user can
  80:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_ErrorCallback()
  81:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Abort a master I2C process communication with Interrupt using HAL_I2C_Master_Abort_IT()
  82:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) End of abort process, HAL_I2C_AbortCpltCallback() is executed and user can
  83:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_AbortCpltCallback()
  84:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Discard a slave I2C process communication using __HAL_I2C_GENERATE_NACK() macro.
  85:HALLIB/Src/stm32f7xx_hal_i2c.c ****            This action will inform Master to generate a Stop condition to discard the communication
  86:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  87:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
  88:HALLIB/Src/stm32f7xx_hal_i2c.c ****     *** Interrupt mode IO sequential operation ***
ARM GAS  /tmp/ccyfI9lR.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_i2c.c ****     ==============================================
  90:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]
  91:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (@) These interfaces allow to manage a sequential transfer with a repeated start condition
  92:HALLIB/Src/stm32f7xx_hal_i2c.c ****           when a direction change during transfer
  93:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]
  94:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) A specific option field manage the different steps of a sequential transfer
  95:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Option field values are defined through @ref I2C_XFEROPTIONS and are listed below:
  96:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) I2C_FIRST_AND_LAST_FRAME: No sequential usage, functionnal is same as associated interfa
  97:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) I2C_FIRST_FRAME: Sequential usage, this option allow to manage a sequence with start con
  98:HALLIB/Src/stm32f7xx_hal_i2c.c ****                             and data to transfer without a final stop condition
  99:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) I2C_FIRST_AND_NEXT_FRAME: Sequential usage (Master only), this option allow to manage a 
 100:HALLIB/Src/stm32f7xx_hal_i2c.c ****                             and data to transfer without a final stop condition, an then permit a c
 101:HALLIB/Src/stm32f7xx_hal_i2c.c ****                             several times (like HAL_I2C_Master_Sequential_Transmit_IT() then HAL_I2
 102:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) I2C_NEXT_FRAME: Sequential usage, this option allow to manage a sequence with a restart 
 103:HALLIB/Src/stm32f7xx_hal_i2c.c ****                             and with new data to transfer if the direction change or manage only th
 104:HALLIB/Src/stm32f7xx_hal_i2c.c ****                             if no direction change and without a final stop condition in both cases
 105:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) I2C_LAST_FRAME: Sequential usage, this option allow to manage a sequance with a restart 
 106:HALLIB/Src/stm32f7xx_hal_i2c.c ****                             and with new data to transfer if the direction change or manage only th
 107:HALLIB/Src/stm32f7xx_hal_i2c.c ****                             if no direction change and with a final stop condition in both cases
 108:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) I2C_LAST_FRAME_NO_STOP: Sequential usage (Master only), this option allow to manage a re
 109:HALLIB/Src/stm32f7xx_hal_i2c.c ****                             interface several times (link with option I2C_FIRST_AND_NEXT_FRAME).
 110:HALLIB/Src/stm32f7xx_hal_i2c.c ****                             Usage can, transfer several bytes one by one using HAL_I2C_Master_Seque
 111:HALLIB/Src/stm32f7xx_hal_i2c.c ****                               or HAL_I2C_Master_Sequential_Receive_IT(option I2C_FIRST_AND_NEXT_FRA
 112:HALLIB/Src/stm32f7xx_hal_i2c.c ****                             Then usage of this option I2C_LAST_FRAME_NO_STOP at the last Transmit o
 113:HALLIB/Src/stm32f7xx_hal_i2c.c ****                               without stopping the communication and so generate a restart conditio
 114:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 115:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Differents sequential I2C interfaces are listed below:
 116:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) Sequential transmit in master I2C mode an amount of data in non-blocking mode using HAL_
 117:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+++) At transmission end of current frame transfer, HAL_I2C_MasterTxCpltCallback() is execut
 118:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_MasterTxCpltCallback()
 119:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) Sequential receive in master I2C mode an amount of data in non-blocking mode using HAL_I
 120:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+++) At reception end of current frame transfer, HAL_I2C_MasterRxCpltCallback() is executed 
 121:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_MasterRxCpltCallback()
 122:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) Abort a master I2C process communication with Interrupt using HAL_I2C_Master_Abort_IT()
 123:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+++) End of abort process, HAL_I2C_AbortCpltCallback() is executed and user can
 124:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_AbortCpltCallback()
 125:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) Enable/disable the Address listen mode in slave I2C mode using HAL_I2C_EnableListen_IT()
 126:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+++) When address slave I2C match, HAL_I2C_AddrCallback() is executed and user can
 127:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code to check the Address Match Code and the transmission direction request 
 128:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+++) At Listen mode end HAL_I2C_ListenCpltCallback() is executed and user can
 129:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_ListenCpltCallback()
 130:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) Sequential transmit in slave I2C mode an amount of data in non-blocking mode using HAL_I
 131:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+++) At transmission end of current frame transfer, HAL_I2C_SlaveTxCpltCallback() is execute
 132:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_SlaveTxCpltCallback()
 133:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) Sequential receive in slave I2C mode an amount of data in non-blocking mode using HAL_I2
 134:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+++) At reception end of current frame transfer, HAL_I2C_SlaveRxCpltCallback() is executed a
 135:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_SlaveRxCpltCallback()
 136:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) In case of transfer Error, HAL_I2C_ErrorCallback() function is executed and user can
 137:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_ErrorCallback()
 138:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) Abort a master I2C process communication with Interrupt using HAL_I2C_Master_Abort_IT()
 139:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) End of abort process, HAL_I2C_AbortCpltCallback() is executed and user can
 140:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_AbortCpltCallback()
 141:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (++) Discard a slave I2C process communication using __HAL_I2C_GENERATE_NACK() macro.
 142:HALLIB/Src/stm32f7xx_hal_i2c.c ****            This action will inform Master to generate a Stop condition to discard the communication
 143:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 144:HALLIB/Src/stm32f7xx_hal_i2c.c ****     *** Interrupt mode IO MEM operation ***
 145:HALLIB/Src/stm32f7xx_hal_i2c.c ****     =======================================
ARM GAS  /tmp/ccyfI9lR.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]
 147:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Write an amount of data in non-blocking mode with Interrupt to a specific memory address 
 148:HALLIB/Src/stm32f7xx_hal_i2c.c ****           HAL_I2C_Mem_Write_IT()
 149:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At Memory end of write transfer, HAL_I2C_MemTxCpltCallback() is executed and user can
 150:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_MemTxCpltCallback()
 151:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Read an amount of data in non-blocking mode with Interrupt from a specific memory address
 152:HALLIB/Src/stm32f7xx_hal_i2c.c ****           HAL_I2C_Mem_Read_IT()
 153:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At Memory end of read transfer, HAL_I2C_MemRxCpltCallback() is executed and user can
 154:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_MemRxCpltCallback()
 155:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) In case of transfer Error, HAL_I2C_ErrorCallback() function is executed and user can
 156:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_ErrorCallback()
 157:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 158:HALLIB/Src/stm32f7xx_hal_i2c.c ****     *** DMA mode IO operation ***
 159:HALLIB/Src/stm32f7xx_hal_i2c.c ****     ==============================
 160:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]
 161:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Transmit in master mode an amount of data in non-blocking mode (DMA) using
 162:HALLIB/Src/stm32f7xx_hal_i2c.c ****           HAL_I2C_Master_Transmit_DMA()
 163:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At transmission end of transfer, HAL_I2C_MasterTxCpltCallback() is executed and user can
 164:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_MasterTxCpltCallback()
 165:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Receive in master mode an amount of data in non-blocking mode (DMA) using
 166:HALLIB/Src/stm32f7xx_hal_i2c.c ****           HAL_I2C_Master_Receive_DMA()
 167:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At reception end of transfer, HAL_I2C_MasterRxCpltCallback() is executed and user can
 168:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_MasterRxCpltCallback()
 169:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Transmit in slave mode an amount of data in non-blocking mode (DMA) using
 170:HALLIB/Src/stm32f7xx_hal_i2c.c ****           HAL_I2C_Slave_Transmit_DMA()
 171:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At transmission end of transfer, HAL_I2C_SlaveTxCpltCallback() is executed and user can
 172:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_SlaveTxCpltCallback()
 173:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Receive in slave mode an amount of data in non-blocking mode (DMA) using
 174:HALLIB/Src/stm32f7xx_hal_i2c.c ****           HAL_I2C_Slave_Receive_DMA()
 175:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At reception end of transfer, HAL_I2C_SlaveRxCpltCallback() is executed and user can
 176:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_SlaveRxCpltCallback()
 177:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) In case of transfer Error, HAL_I2C_ErrorCallback() function is executed and user can
 178:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_ErrorCallback()
 179:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Abort a master I2C process communication with Interrupt using HAL_I2C_Master_Abort_IT()
 180:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) End of abort process, HAL_I2C_AbortCpltCallback() is executed and user can
 181:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_AbortCpltCallback()
 182:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Discard a slave I2C process communication using __HAL_I2C_GENERATE_NACK() macro.
 183:HALLIB/Src/stm32f7xx_hal_i2c.c ****            This action will inform Master to generate a Stop condition to discard the communication
 184:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 185:HALLIB/Src/stm32f7xx_hal_i2c.c ****     *** DMA mode IO MEM operation ***
 186:HALLIB/Src/stm32f7xx_hal_i2c.c ****     =================================
 187:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]
 188:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Write an amount of data in non-blocking mode with DMA to a specific memory address using
 189:HALLIB/Src/stm32f7xx_hal_i2c.c ****           HAL_I2C_Mem_Write_DMA()
 190:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At Memory end of write transfer, HAL_I2C_MemTxCpltCallback() is executed and user can
 191:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_MemTxCpltCallback()
 192:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Read an amount of data in non-blocking mode with DMA from a specific memory address using
 193:HALLIB/Src/stm32f7xx_hal_i2c.c ****           HAL_I2C_Mem_Read_DMA()
 194:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) At Memory end of read transfer, HAL_I2C_MemRxCpltCallback() is executed and user can
 195:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_MemRxCpltCallback()
 196:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) In case of transfer Error, HAL_I2C_ErrorCallback() function is executed and user can
 197:HALLIB/Src/stm32f7xx_hal_i2c.c ****            add his own code by customization of function pointer HAL_I2C_ErrorCallback()
 198:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 199:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 200:HALLIB/Src/stm32f7xx_hal_i2c.c ****      *** I2C HAL driver macros list ***
 201:HALLIB/Src/stm32f7xx_hal_i2c.c ****      ==================================
 202:HALLIB/Src/stm32f7xx_hal_i2c.c ****      [..]
ARM GAS  /tmp/ccyfI9lR.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_i2c.c ****        Below the list of most used macros in I2C HAL driver.
 204:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 205:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) __HAL_I2C_ENABLE: Enable the I2C peripheral
 206:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) __HAL_I2C_DISABLE: Disable the I2C peripheral
 207:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) __HAL_I2C_GENERATE_NACK: Generate a Non-Acknowledge I2C peripheral in Slave mode
 208:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) __HAL_I2C_GET_FLAG: Check whether the specified I2C flag is set or not
 209:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) __HAL_I2C_CLEAR_FLAG: Clear the specified I2C pending flag
 210:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) __HAL_I2C_ENABLE_IT: Enable the specified I2C interrupt
 211:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) __HAL_I2C_DISABLE_IT: Disable the specified I2C interrupt
 212:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 213:HALLIB/Src/stm32f7xx_hal_i2c.c ****      [..]
 214:HALLIB/Src/stm32f7xx_hal_i2c.c ****        (@) You can refer to the I2C HAL driver header file for more useful macros
 215:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 216:HALLIB/Src/stm32f7xx_hal_i2c.c ****   @endverbatim
 217:HALLIB/Src/stm32f7xx_hal_i2c.c ****   ******************************************************************************
 218:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @attention
 219:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *
 220:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 221:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *
 222:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * Redistribution and use in source and binary forms, with or without modification,
 223:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * are permitted provided that the following conditions are met:
 224:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 225:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *      this list of conditions and the following disclaimer.
 226:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 227:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *      this list of conditions and the following disclaimer in the documentation
 228:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *      and/or other materials provided with the distribution.
 229:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 230:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *      may be used to endorse or promote products derived from this software
 231:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *      without specific prior written permission.
 232:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *
 233:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 234:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 235:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 236:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 237:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 238:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 239:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 240:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 241:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 242:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 243:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *
 244:HALLIB/Src/stm32f7xx_hal_i2c.c ****   ******************************************************************************
 245:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 246:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 247:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Includes ------------------------------------------------------------------*/
 248:HALLIB/Src/stm32f7xx_hal_i2c.c **** #include "stm32f7xx_hal.h"
 249:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 250:HALLIB/Src/stm32f7xx_hal_i2c.c **** /** @addtogroup STM32F7xx_HAL_Driver
 251:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @{
 252:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 253:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 254:HALLIB/Src/stm32f7xx_hal_i2c.c **** /** @defgroup I2C I2C
 255:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief I2C HAL module driver
 256:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @{
 257:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 258:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 259:HALLIB/Src/stm32f7xx_hal_i2c.c **** #ifdef HAL_I2C_MODULE_ENABLED
ARM GAS  /tmp/ccyfI9lR.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 261:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 262:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private define ------------------------------------------------------------*/
 263:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 264:HALLIB/Src/stm32f7xx_hal_i2c.c **** /** @defgroup I2C_Private_Define I2C Private Define
 265:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @{
 266:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 267:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define TIMING_CLEAR_MASK   (0xF0FFFFFFU)  /*!< I2C TIMING clear register Mask */
 268:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_TIMEOUT_ADDR    (10000U)       /*!< 10 s  */
 269:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_TIMEOUT_BUSY    (25U)          /*!< 25 ms */
 270:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_TIMEOUT_DIR     (25U)          /*!< 25 ms */
 271:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_TIMEOUT_RXNE    (25U)          /*!< 25 ms */
 272:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_TIMEOUT_STOPF   (25U)          /*!< 25 ms */
 273:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_TIMEOUT_TC      (25U)          /*!< 25 ms */
 274:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_TIMEOUT_TCR     (25U)          /*!< 25 ms */
 275:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_TIMEOUT_TXIS    (25U)          /*!< 25 ms */
 276:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_TIMEOUT_FLAG    (25U)          /*!< 25 ms */
 277:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 278:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define MAX_NBYTE_SIZE      255U
 279:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define SlaveAddr_SHIFT     7U
 280:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define SlaveAddr_MSK       0x06U
 281:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 282:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private define for @ref PreviousState usage */
 283:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_STATE_MSK             ((uint32_t)((HAL_I2C_STATE_BUSY_TX | HAL_I2C_STATE_BUSY_RX) & (~(
 284:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_STATE_NONE            ((uint32_t)(HAL_I2C_MODE_NONE))                                  
 285:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_STATE_MASTER_BUSY_TX  ((uint32_t)((HAL_I2C_STATE_BUSY_TX & I2C_STATE_MSK) | HAL_I2C_MOD
 286:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_STATE_MASTER_BUSY_RX  ((uint32_t)((HAL_I2C_STATE_BUSY_RX & I2C_STATE_MSK) | HAL_I2C_MOD
 287:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_STATE_SLAVE_BUSY_TX   ((uint32_t)((HAL_I2C_STATE_BUSY_TX & I2C_STATE_MSK) | HAL_I2C_MOD
 288:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_STATE_SLAVE_BUSY_RX   ((uint32_t)((HAL_I2C_STATE_BUSY_RX & I2C_STATE_MSK) | HAL_I2C_MOD
 289:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_STATE_MEM_BUSY_TX     ((uint32_t)((HAL_I2C_STATE_BUSY_TX & I2C_STATE_MSK) | HAL_I2C_MOD
 290:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_STATE_MEM_BUSY_RX     ((uint32_t)((HAL_I2C_STATE_BUSY_RX & I2C_STATE_MSK) | HAL_I2C_MOD
 291:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 292:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 293:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private define to centralize the enable/disable of Interrupts */
 294:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_XFER_TX_IT          (0x00000001U)
 295:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_XFER_RX_IT          (0x00000002U)
 296:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_XFER_LISTEN_IT      (0x00000004U)
 297:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 298:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_XFER_ERROR_IT       (0x00000011U)
 299:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_XFER_CPLT_IT        (0x00000012U)
 300:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_XFER_RELOAD_IT      (0x00000012U)
 301:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 302:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private define Sequential Transfer Options default/reset value */
 303:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_NO_OPTION_FRAME     (0xFFFF0000U)
 304:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 305:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @}
 306:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 307:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 308:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private macro -------------------------------------------------------------*/
 309:HALLIB/Src/stm32f7xx_hal_i2c.c **** #define I2C_GET_DMA_REMAIN_DATA(__HANDLE__) ((((__HANDLE__)->State) == HAL_I2C_STATE_BUSY_TX)   ? \
 310:HALLIB/Src/stm32f7xx_hal_i2c.c ****                                               ((uint32_t)(((DMA_Stream_TypeDef *)(__HANDLE__)->hdma
 311:HALLIB/Src/stm32f7xx_hal_i2c.c ****                                               ((uint32_t)(((DMA_Stream_TypeDef *)(__HANDLE__)->hdma
 312:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 313:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private variables ---------------------------------------------------------*/
 314:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 315:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 316:HALLIB/Src/stm32f7xx_hal_i2c.c **** /** @defgroup I2C_Private_Functions I2C Private Functions
ARM GAS  /tmp/ccyfI9lR.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @{
 318:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 319:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private functions to handle DMA transfer */
 320:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma);
 321:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma);
 322:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma);
 323:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma);
 324:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMAError(DMA_HandleTypeDef *hdma);
 325:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMAAbort(DMA_HandleTypeDef *hdma);
 326:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 327:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private functions to handle IT transfer */
 328:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags);
 329:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITMasterSequentialCplt(I2C_HandleTypeDef *hi2c);
 330:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITSlaveSequentialCplt(I2C_HandleTypeDef *hi2c);
 331:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags);
 332:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags);
 333:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags);
 334:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode);
 335:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 336:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private functions to handle IT transfer */
 337:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint1
 338:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16
 339:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 340:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private functions for I2C transfer IRQ handler */
 341:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint
 342:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint3
 343:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uin
 344:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint
 345:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 346:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private functions to handle flags during polling transfer */
 347:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagSta
 348:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, 
 349:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, 
 350:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, 
 351:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_
 352:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 353:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private functions to centralize the enable/disable of Interrupts */
 354:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest);
 355:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest);
 356:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 357:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private functions to flush TXDR register */
 358:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c);
 359:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 360:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Private functions to handle  start, restart or stop a transfer */
 361:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_
 362:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 363:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @}
 364:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 365:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 366:HALLIB/Src/stm32f7xx_hal_i2c.c **** /* Exported functions --------------------------------------------------------*/
 367:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 368:HALLIB/Src/stm32f7xx_hal_i2c.c **** /** @defgroup I2C_Exported_Functions I2C Exported Functions
 369:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @{
 370:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 371:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 372:HALLIB/Src/stm32f7xx_hal_i2c.c **** /** @defgroup I2C_Exported_Functions_Group1 Initialization and de-initialization functions
 373:HALLIB/Src/stm32f7xx_hal_i2c.c ****  *  @brief    Initialization and Configuration functions
ARM GAS  /tmp/ccyfI9lR.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_i2c.c ****  *
 375:HALLIB/Src/stm32f7xx_hal_i2c.c **** @verbatim
 376:HALLIB/Src/stm32f7xx_hal_i2c.c ****  ===============================================================================
 377:HALLIB/Src/stm32f7xx_hal_i2c.c ****               ##### Initialization and de-initialization functions #####
 378:HALLIB/Src/stm32f7xx_hal_i2c.c ****  ===============================================================================
 379:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]  This subsection provides a set of functions allowing to initialize and
 380:HALLIB/Src/stm32f7xx_hal_i2c.c ****           deinitialize the I2Cx peripheral:
 381:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 382:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) User must Implement HAL_I2C_MspInit() function in which he configures
 383:HALLIB/Src/stm32f7xx_hal_i2c.c ****           all related peripherals resources (CLOCK, GPIO, DMA, IT and NVIC ).
 384:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 385:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Call the function HAL_I2C_Init() to configure the selected device with
 386:HALLIB/Src/stm32f7xx_hal_i2c.c ****           the selected configuration:
 387:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) Clock Timing
 388:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) Own Address 1
 389:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) Addressing mode (Master, Slave)
 390:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) Dual Addressing mode
 391:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) Own Address 2
 392:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) Own Address 2 Mask
 393:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) General call mode
 394:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) Nostretch mode
 395:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 396:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (+) Call the function HAL_I2C_DeInit() to restore the default configuration
 397:HALLIB/Src/stm32f7xx_hal_i2c.c ****           of the selected I2Cx peripheral.
 398:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 399:HALLIB/Src/stm32f7xx_hal_i2c.c **** @endverbatim
 400:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @{
 401:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 402:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 403:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 404:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Initializes the I2C according to the specified parameters
 405:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in the I2C_InitTypeDef and initialize the associated handle.
 406:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 407:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
 408:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
 409:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 410:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
 411:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
 412:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the I2C handle allocation */
 413:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c == NULL)
 414:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 415:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_ERROR;
 416:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 417:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 418:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
 419:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 420:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 421:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 422:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 423:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 424:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 425:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 426:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 427:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 428:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_RESET)
 429:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 430:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Allocate lock resource and initialize it */
ARM GAS  /tmp/ccyfI9lR.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Lock = HAL_UNLOCKED;
 432:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 433:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 434:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_MspInit(hi2c);
 435:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 436:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 437:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->State = HAL_I2C_STATE_BUSY;
 438:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 439:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable the selected I2C peripheral */
 440:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_I2C_DISABLE(hi2c);
 441:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 442:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
 443:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Configure I2Cx: Frequency range */
 444:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 445:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 446:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
 447:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable Own Address1 before set the Own Address1 configuration */
 448:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 449:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 450:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Configure I2Cx: Own Address1 and ack own address1 mode */
 451:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 452:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 453:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 454:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 455:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else /* I2C_ADDRESSINGMODE_10BIT */
 456:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 457:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 458:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 459:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 460:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /*---------------------------- I2Cx CR2 Configuration ----------------------*/
 461:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Configure I2Cx: Addressing Master mode */
 462:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 463:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 464:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 465:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 466:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
 467:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 468:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 469:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
 470:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable Own Address2 before set the Own Address2 configuration */
 471:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 472:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 473:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Configure I2Cx: Dual mode and Own Address2 */
 474:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddr
 475:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 476:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /*---------------------------- I2Cx CR1 Configuration ----------------------*/
 477:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Configure I2Cx: Generalcall and NoStretch mode */
 478:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 479:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 480:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Enable the selected I2C peripheral */
 481:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_I2C_ENABLE(hi2c);
 482:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 483:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 484:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->State = HAL_I2C_STATE_READY;
 485:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->PreviousState = I2C_STATE_NONE;
 486:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Mode = HAL_I2C_MODE_NONE;
 487:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
 489:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 490:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 491:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 492:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  DeInitialize the I2C peripheral.
 493:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 494:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
 495:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
 496:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 497:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
 498:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
 499:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the I2C handle allocation */
 500:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c == NULL)
 501:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 502:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_ERROR;
 503:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 504:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 505:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
 506:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 507:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 508:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->State = HAL_I2C_STATE_BUSY;
 509:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 510:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable the I2C Peripheral Clock */
 511:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_I2C_DISABLE(hi2c);
 512:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 513:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
 514:HALLIB/Src/stm32f7xx_hal_i2c.c ****   HAL_I2C_MspDeInit(hi2c);
 515:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 516:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 517:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->State = HAL_I2C_STATE_RESET;
 518:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->PreviousState = I2C_STATE_NONE;
 519:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Mode = HAL_I2C_MODE_NONE;
 520:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 521:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Release Lock */
 522:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_UNLOCK(hi2c);
 523:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 524:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
 525:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 526:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 527:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 528:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief Initialize the I2C MSP.
 529:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 530:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
 531:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
 532:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 533:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
 534:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
 535:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 536:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
 537:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 538:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 539:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_MspInit could be implemented in the user file
 540:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
 541:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 542:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 543:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 544:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief DeInitialize the I2C MSP.
ARM GAS  /tmp/ccyfI9lR.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 546:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
 547:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
 548:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 549:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 550:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
 551:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 552:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
 553:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 554:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 555:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_MspDeInit could be implemented in the user file
 556:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
 557:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 558:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 559:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 560:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @}
 561:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 562:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 563:HALLIB/Src/stm32f7xx_hal_i2c.c **** /** @defgroup I2C_Exported_Functions_Group2 Input and Output operation functions
 564:HALLIB/Src/stm32f7xx_hal_i2c.c ****  *  @brief   Data transfers functions
 565:HALLIB/Src/stm32f7xx_hal_i2c.c ****  *
 566:HALLIB/Src/stm32f7xx_hal_i2c.c **** @verbatim
 567:HALLIB/Src/stm32f7xx_hal_i2c.c ****  ===============================================================================
 568:HALLIB/Src/stm32f7xx_hal_i2c.c ****                       ##### IO operation functions #####
 569:HALLIB/Src/stm32f7xx_hal_i2c.c ****  ===============================================================================
 570:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]
 571:HALLIB/Src/stm32f7xx_hal_i2c.c ****     This subsection provides a set of functions allowing to manage the I2C data
 572:HALLIB/Src/stm32f7xx_hal_i2c.c ****     transfers.
 573:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 574:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (#) There are two modes of transfer:
 575:HALLIB/Src/stm32f7xx_hal_i2c.c ****        (++) Blocking mode : The communication is performed in the polling mode.
 576:HALLIB/Src/stm32f7xx_hal_i2c.c ****             The status of all data processing is returned by the same function
 577:HALLIB/Src/stm32f7xx_hal_i2c.c ****             after finishing transfer.
 578:HALLIB/Src/stm32f7xx_hal_i2c.c ****        (++) No-Blocking mode : The communication is performed using Interrupts
 579:HALLIB/Src/stm32f7xx_hal_i2c.c ****             or DMA. These functions return the status of the transfer startup.
 580:HALLIB/Src/stm32f7xx_hal_i2c.c ****             The end of the data processing will be indicated through the
 581:HALLIB/Src/stm32f7xx_hal_i2c.c ****             dedicated I2C IRQ when using Interrupt mode or the DMA IRQ when
 582:HALLIB/Src/stm32f7xx_hal_i2c.c ****             using DMA mode.
 583:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 584:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (#) Blocking mode functions are :
 585:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Master_Transmit()
 586:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Master_Receive()
 587:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Slave_Transmit()
 588:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Slave_Receive()
 589:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Mem_Write()
 590:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Mem_Read()
 591:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_IsDeviceReady()
 592:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 593:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (#) No-Blocking mode functions with Interrupt are :
 594:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Master_Transmit_IT()
 595:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Master_Receive_IT()
 596:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Slave_Transmit_IT()
 597:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Slave_Receive_IT()
 598:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Mem_Write_IT()
 599:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Mem_Read_IT()
 600:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 601:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (#) No-Blocking mode functions with DMA are :
ARM GAS  /tmp/ccyfI9lR.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Master_Transmit_DMA()
 603:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Master_Receive_DMA()
 604:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Slave_Transmit_DMA()
 605:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Slave_Receive_DMA()
 606:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Mem_Write_DMA()
 607:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_Mem_Read_DMA()
 608:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 609:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (#) A set of Transfer Complete Callbacks are provided in non Blocking mode:
 610:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_MemTxCpltCallback()
 611:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_MemRxCpltCallback()
 612:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_MasterTxCpltCallback()
 613:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_MasterRxCpltCallback()
 614:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_SlaveTxCpltCallback()
 615:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_SlaveRxCpltCallback()
 616:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (++) HAL_I2C_ErrorCallback()
 617:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 618:HALLIB/Src/stm32f7xx_hal_i2c.c **** @endverbatim
 619:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @{
 620:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 621:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 622:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 623:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Transmits in master mode an amount of data in blocking mode.
 624:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 625:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
 626:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
 627:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
 628:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
 629:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
 630:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
 631:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
 632:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 633:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pD
 634:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
 635:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 636:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 637:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
 638:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 639:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
 640:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
 641:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 642:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Init tickstart for timeout management*/
 643:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tickstart = HAL_GetTick();
 644:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 645:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK
 646:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 647:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
 648:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 649:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 650:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 651:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MASTER;
 652:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 653:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 654:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
 655:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr  = pData;
 656:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
 657:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
 658:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address */
 660:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
 661:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
 662:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 663:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
 664:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRIT
 665:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 666:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
 667:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 668:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
 669:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRI
 670:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 671:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 672:HALLIB/Src/stm32f7xx_hal_i2c.c ****     while (hi2c->XferCount > 0U)
 673:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 674:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Wait until TXIS flag is set */
 675:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 676:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 677:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 678:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 679:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_ERROR;
 680:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 681:HALLIB/Src/stm32f7xx_hal_i2c.c ****         else
 682:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 683:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
 684:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 685:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 686:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Write data to TXDR */
 687:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 688:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 689:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
 690:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 691:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 692:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 693:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Wait until TCR flag is set */
 694:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 695:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 696:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
 697:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 698:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 699:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->XferCount > MAX_NBYTE_SIZE)
 700:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 701:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->XferSize = MAX_NBYTE_SIZE;
 702:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 703:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 704:HALLIB/Src/stm32f7xx_hal_i2c.c ****         else
 705:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 706:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->XferSize = hi2c->XferCount;
 707:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 708:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 709:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 710:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 711:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 712:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
 713:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until STOPF flag is set */
 714:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 715:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
ARM GAS  /tmp/ccyfI9lR.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 717:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 718:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
 719:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 720:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
 721:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 722:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 723:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 724:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 725:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 726:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear STOP Flag */
 727:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 728:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 729:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear Configuration Register 2 */
 730:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_RESET_CR2(hi2c);
 731:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 732:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
 733:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
 734:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 735:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
 736:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
 737:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 738:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
 739:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 740:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
 741:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 742:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
 743:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 744:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 745:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 746:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 747:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Receives in master mode an amount of data in blocking mode.
 748:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 749:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
 750:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
 751:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
 752:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
 753:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
 754:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
 755:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
 756:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 757:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pDa
 758:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
 759:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 760:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 761:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
 762:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 763:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
 764:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
 765:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 766:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Init tickstart for timeout management*/
 767:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tickstart = HAL_GetTick();
 768:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 769:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK
 770:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 771:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
 772:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
ARM GAS  /tmp/ccyfI9lR.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 774:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 775:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MASTER;
 776:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 777:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 778:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
 779:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr  = pData;
 780:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
 781:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
 782:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 783:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address */
 784:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
 785:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
 786:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 787:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
 788:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ
 789:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 790:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
 791:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 792:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
 793:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_REA
 794:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 795:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 796:HALLIB/Src/stm32f7xx_hal_i2c.c ****     while (hi2c->XferCount > 0U)
 797:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 798:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Wait until RXNE flag is set */
 799:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 801:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 803:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_ERROR;
 804:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 805:HALLIB/Src/stm32f7xx_hal_i2c.c ****         else
 806:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 807:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
 808:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 809:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 810:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 811:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Read data from RXDR */
 812:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 813:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
 814:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 815:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 816:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 817:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 818:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Wait until TCR flag is set */
 819:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 820:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 821:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
 822:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 823:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 824:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->XferCount > MAX_NBYTE_SIZE)
 825:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 826:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->XferSize = MAX_NBYTE_SIZE;
 827:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 828:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 829:HALLIB/Src/stm32f7xx_hal_i2c.c ****         else
ARM GAS  /tmp/ccyfI9lR.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 831:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->XferSize = hi2c->XferCount;
 832:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 833:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 834:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 835:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 836:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 837:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
 838:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until STOPF flag is set */
 839:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 840:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 841:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 842:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 843:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
 844:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 845:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
 846:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 847:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 848:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 849:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 850:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 851:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear STOP Flag */
 852:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 853:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 854:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear Configuration Register 2 */
 855:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_RESET_CR2(hi2c);
 856:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 857:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
 858:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
 859:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 860:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
 861:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
 862:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 863:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
 864:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 865:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
 866:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 867:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
 868:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 869:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 870:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 871:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 872:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Transmits in slave mode an amount of data in blocking mode.
 873:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 874:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
 875:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
 876:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
 877:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
 878:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
 879:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
 880:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, ui
 881:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
 882:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 883:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 884:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
 885:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 886:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
ARM GAS  /tmp/ccyfI9lR.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 888:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
 889:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 890:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
 891:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
 892:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 893:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Init tickstart for timeout management*/
 894:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tickstart = HAL_GetTick();
 895:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 896:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 897:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 898:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 899:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 900:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
 901:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr  = pData;
 902:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
 903:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
 904:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 905:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable Address Acknowledge */
 906:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 907:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 908:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until ADDR flag is set */
 909:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 910:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 911:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable Address Acknowledge */
 912:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->CR2 |= I2C_CR2_NACK;
 913:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
 914:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 915:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 916:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear ADDR flag */
 917:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 918:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 919:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* If 10bit addressing mode is selected */
 920:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 921:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 922:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Wait until ADDR flag is set */
 923:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 924:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 925:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Disable Address Acknowledge */
 926:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Instance->CR2 |= I2C_CR2_NACK;
 927:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 928:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 929:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 930:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Clear ADDR flag */
 931:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 932:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 933:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 934:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until DIR flag is set Transmitter mode */
 935:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 936:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 937:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable Address Acknowledge */
 938:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->CR2 |= I2C_CR2_NACK;
 939:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
 940:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 941:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 942:HALLIB/Src/stm32f7xx_hal_i2c.c ****     while (hi2c->XferCount > 0U)
 943:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
ARM GAS  /tmp/ccyfI9lR.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Wait until TXIS flag is set */
 945:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 946:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 947:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Disable Address Acknowledge */
 948:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Instance->CR2 |= I2C_CR2_NACK;
 949:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 950:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 951:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 952:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_ERROR;
 953:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 954:HALLIB/Src/stm32f7xx_hal_i2c.c ****         else
 955:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 956:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
 957:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 958:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 959:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 960:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Write data to TXDR */
 961:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 962:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 963:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 964:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 965:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until STOP flag is set */
 966:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 967:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 968:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable Address Acknowledge */
 969:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->CR2 |= I2C_CR2_NACK;
 970:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 971:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 972:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 973:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Normal use case for Transmitter mode */
 974:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* A NACK is generated to confirm the end of transfer */
 975:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 976:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 977:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
 978:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 979:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 980:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 981:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 982:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 983:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear STOP flag */
 984:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 985:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 986:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until BUSY flag is reset */
 987:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 988:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 989:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable Address Acknowledge */
 990:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->CR2 |= I2C_CR2_NACK;
 991:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
 992:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 993:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 994:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable Address Acknowledge */
 995:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR2 |= I2C_CR2_NACK;
 996:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 997:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
 998:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
 999:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1000:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
ARM GAS  /tmp/ccyfI9lR.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
1002:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1003:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
1004:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1005:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
1006:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1007:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
1008:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1009:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
1010:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1011:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
1012:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Receive in slave mode an amount of data in blocking mode
1013:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
1014:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
1015:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
1016:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
1017:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
1018:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
1019:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
1020:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uin
1021:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
1022:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
1023:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1024:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
1025:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1026:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
1027:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1028:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
1029:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1030:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
1031:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
1032:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1033:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Init tickstart for timeout management*/
1034:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tickstart = HAL_GetTick();
1035:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1036:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State     = HAL_I2C_STATE_BUSY_RX;
1037:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_SLAVE;
1038:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
1039:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1040:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
1041:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr  = pData;
1042:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
1043:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
1044:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1045:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable Address Acknowledge */
1046:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
1047:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1048:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until ADDR flag is set */
1049:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
1050:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1051:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable Address Acknowledge */
1052:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->CR2 |= I2C_CR2_NACK;
1053:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
1054:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1055:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1056:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear ADDR flag */
1057:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
ARM GAS  /tmp/ccyfI9lR.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1059:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until DIR flag is reset Receiver mode */
1060:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
1061:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1062:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable Address Acknowledge */
1063:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->CR2 |= I2C_CR2_NACK;
1064:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
1065:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1066:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1067:HALLIB/Src/stm32f7xx_hal_i2c.c ****     while (hi2c->XferCount > 0U)
1068:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1069:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Wait until RXNE flag is set */
1070:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
1071:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1072:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Disable Address Acknowledge */
1073:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Instance->CR2 |= I2C_CR2_NACK;
1074:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1075:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Store Last receive data if any */
1076:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
1077:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
1078:HALLIB/Src/stm32f7xx_hal_i2c.c ****           /* Read data from RXDR */
1079:HALLIB/Src/stm32f7xx_hal_i2c.c ****           (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
1080:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->XferCount--;
1081:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
1082:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1083:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
1084:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
1085:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
1086:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
1087:HALLIB/Src/stm32f7xx_hal_i2c.c ****         else
1088:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
1089:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_ERROR;
1090:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
1091:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1092:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1093:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Read data from RXDR */
1094:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
1095:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
1096:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1097:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1098:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until STOP flag is set */
1099:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
1100:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1101:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable Address Acknowledge */
1102:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->CR2 |= I2C_CR2_NACK;
1103:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1104:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
1105:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1106:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
1107:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1108:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
1109:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1110:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
1111:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1112:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1113:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1114:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear STOP flag */
ARM GAS  /tmp/ccyfI9lR.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1116:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1117:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until BUSY flag is reset */
1118:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
1119:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1120:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable Address Acknowledge */
1121:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->CR2 |= I2C_CR2_NACK;
1122:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
1123:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1124:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1125:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable Address Acknowledge */
1126:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR2 |= I2C_CR2_NACK;
1127:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1128:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
1129:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
1130:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1131:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
1132:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
1133:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1134:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
1135:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1136:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
1137:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1138:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
1139:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1140:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
1141:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1142:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
1143:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Transmit in master mode an amount of data in non-blocking mode with Interrupt
1144:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
1145:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
1146:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
1147:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
1148:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
1149:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
1150:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
1151:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
1152:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t 
1153:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
1154:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
1155:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1156:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
1157:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1158:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
1159:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1160:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_BUSY;
1161:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1162:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1163:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
1164:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
1165:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1166:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_TX;
1167:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MASTER;
1168:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
1169:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1170:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
1171:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
ARM GAS  /tmp/ccyfI9lR.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
1173:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1174:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
1175:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1176:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
1177:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1178:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
1179:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
1180:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1181:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
1182:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1183:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
1184:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
1185:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1186:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1187:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address */
1188:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
1189:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
1190:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1191:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
1192:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
1193:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1194:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
1195:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
1196:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
1197:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1198:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable ERR, TC, STOP, NACK, TXI interrupt */
1199:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* possible to enable all of these */
1200:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TX
1201:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
1202:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1203:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
1204:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1205:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
1206:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1207:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
1208:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1209:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
1210:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1211:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
1212:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Receive in master mode an amount of data in non-blocking mode with Interrupt
1213:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
1214:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
1215:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
1216:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
1217:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
1218:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
1219:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
1220:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
1221:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *
1222:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
1223:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
1224:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1225:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
1226:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1227:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
1228:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
ARM GAS  /tmp/ccyfI9lR.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_BUSY;
1230:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1231:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1232:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
1233:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
1234:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1235:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_RX;
1236:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MASTER;
1237:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
1238:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1239:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
1240:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
1241:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
1242:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1243:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
1244:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1245:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
1246:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1247:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
1248:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
1249:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1250:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
1251:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1252:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
1253:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
1254:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1255:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1256:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address */
1257:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
1258:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
1259:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1260:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
1261:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
1262:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1263:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
1264:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
1265:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
1266:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1267:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable ERR, TC, STOP, NACK, RXI interrupt */
1268:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* possible to enable all of these */
1269:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TX
1270:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
1271:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1272:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
1273:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1274:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
1275:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1276:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
1277:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1278:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
1279:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1280:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
1281:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Transmit in slave mode an amount of data in non-blocking mode with Interrupt
1282:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
1283:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
1284:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
1285:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
ARM GAS  /tmp/ccyfI9lR.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
1287:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
1288:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
1289:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
1290:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
1291:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1292:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
1293:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
1294:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1295:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_TX;
1296:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_SLAVE;
1297:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
1298:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1299:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable Address Acknowledge */
1300:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
1301:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1302:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
1303:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
1304:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
1305:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
1306:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1307:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_IT;
1308:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1309:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
1310:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
1311:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1312:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
1313:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
1314:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
1315:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1316:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable ERR, TC, STOP, NACK, TXI interrupt */
1317:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* possible to enable all of these */
1318:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TX
1319:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
1320:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1321:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
1322:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1323:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
1324:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1325:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
1326:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1327:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
1328:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1329:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
1330:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Receive in slave mode an amount of data in non-blocking mode with Interrupt
1331:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
1332:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
1333:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
1334:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
1335:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
1336:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
1337:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
1338:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
1339:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
1340:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1341:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
1342:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
ARM GAS  /tmp/ccyfI9lR.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1344:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_RX;
1345:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_SLAVE;
1346:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
1347:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1348:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable Address Acknowledge */
1349:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
1350:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1351:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
1352:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
1353:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
1354:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
1355:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1356:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_IT;
1357:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1358:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
1359:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
1360:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1361:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
1362:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
1363:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
1364:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1365:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable ERR, TC, STOP, NACK, RXI interrupt */
1366:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* possible to enable all of these */
1367:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TX
1368:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
1369:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1370:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
1371:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1372:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
1373:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1374:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
1375:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1376:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
1377:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1378:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
1379:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Transmit in master mode an amount of data in non-blocking mode with DMA
1380:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
1381:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
1382:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
1383:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
1384:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
1385:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
1386:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
1387:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
1388:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t
1389:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
1390:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
1391:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1392:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
1393:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1394:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
1395:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1396:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_BUSY;
1397:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1398:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1399:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
ARM GAS  /tmp/ccyfI9lR.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
1401:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1402:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_TX;
1403:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MASTER;
1404:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
1405:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1406:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
1407:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
1408:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
1409:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1410:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_DMA;
1411:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1412:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
1413:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1414:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
1415:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
1416:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1417:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
1418:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1419:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
1420:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
1421:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1422:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1423:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferSize > 0U)
1424:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1425:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set the I2C DMA transfer complete callback */
1426:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
1427:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1428:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set the DMA error callback */
1429:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
1430:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1431:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set the unused DMA callbacks to NULL */
1432:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmatx->XferHalfCpltCallback = NULL;
1433:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmatx->XferAbortCallback = NULL;
1434:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1435:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable the DMA stream */
1436:HALLIB/Src/stm32f7xx_hal_i2c.c ****       HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSi
1437:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1438:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Send Slave Address */
1439:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
1440:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
1441:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1442:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Update XferCount value */
1443:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount -= hi2c->XferSize;
1444:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1445:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Process Unlocked */
1446:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_UNLOCK(hi2c);
1447:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1448:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Note : The I2C interrupts must be enabled after unlocking current process
1449:HALLIB/Src/stm32f7xx_hal_i2c.c ****                 to avoid the risk of I2C interrupt handle execution before current
1450:HALLIB/Src/stm32f7xx_hal_i2c.c ****                 process unlock */
1451:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable ERR and NACK interrupts */
1452:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
1453:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1454:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable DMA Request */
1455:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
1456:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
ARM GAS  /tmp/ccyfI9lR.s 			page 27


1457:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
1458:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1459:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Update Transfer ISR function pointer */
1460:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferISR = I2C_Master_ISR_IT;
1461:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1462:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Send Slave Address */
1463:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set NBYTES to write and generate START condition */
1464:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRI
1465:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1466:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Process Unlocked */
1467:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_UNLOCK(hi2c);
1468:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1469:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Note : The I2C interrupts must be enabled after unlocking current process
1470:HALLIB/Src/stm32f7xx_hal_i2c.c ****                 to avoid the risk of I2C interrupt handle execution before current
1471:HALLIB/Src/stm32f7xx_hal_i2c.c ****                 process unlock */
1472:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable ERR, TC, STOP, NACK, TXI interrupt */
1473:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* possible to enable all of these */
1474:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_
1475:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
1476:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1477:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1478:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
1479:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1480:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
1481:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1482:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
1483:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1484:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
1485:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1486:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
1487:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Receive in master mode an amount of data in non-blocking mode with DMA
1488:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
1489:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
1490:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
1491:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
1492:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
1493:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
1494:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
1495:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
1496:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t 
1497:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
1498:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
1499:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1500:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
1501:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1502:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
1503:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1504:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_BUSY;
1505:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1506:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1507:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
1508:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
1509:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1510:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_RX;
1511:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MASTER;
1512:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
1513:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 28


1514:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
1515:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
1516:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
1517:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1518:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_DMA;
1519:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1520:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
1521:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1522:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
1523:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
1524:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1525:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
1526:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1527:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
1528:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
1529:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1530:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1531:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferSize > 0U)
1532:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1533:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set the I2C DMA transfer complete callback */
1534:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
1535:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1536:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set the DMA error callback */
1537:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
1538:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1539:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set the unused DMA callbacks to NULL */
1540:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmarx->XferHalfCpltCallback = NULL;
1541:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmarx->XferAbortCallback = NULL;
1542:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1543:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable the DMA stream */
1544:HALLIB/Src/stm32f7xx_hal_i2c.c ****       HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSi
1545:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1546:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Send Slave Address */
1547:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
1548:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
1549:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1550:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Update XferCount value */
1551:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount -= hi2c->XferSize;
1552:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1553:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Process Unlocked */
1554:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_UNLOCK(hi2c);
1555:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1556:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Note : The I2C interrupts must be enabled after unlocking current process
1557:HALLIB/Src/stm32f7xx_hal_i2c.c ****                 to avoid the risk of I2C interrupt handle execution before current
1558:HALLIB/Src/stm32f7xx_hal_i2c.c ****                 process unlock */
1559:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable ERR and NACK interrupts */
1560:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
1561:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1562:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable DMA Request */
1563:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
1564:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1565:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
1566:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1567:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Update Transfer ISR function pointer */
1568:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferISR = I2C_Master_ISR_IT;
1569:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1570:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Send Slave Address */
ARM GAS  /tmp/ccyfI9lR.s 			page 29


1571:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set NBYTES to read and generate START condition */
1572:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_REA
1573:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1574:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Process Unlocked */
1575:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_UNLOCK(hi2c);
1576:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1577:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Note : The I2C interrupts must be enabled after unlocking current process
1578:HALLIB/Src/stm32f7xx_hal_i2c.c ****                 to avoid the risk of I2C interrupt handle execution before current
1579:HALLIB/Src/stm32f7xx_hal_i2c.c ****                 process unlock */
1580:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable ERR, TC, STOP, NACK, TXI interrupt */
1581:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* possible to enable all of these */
1582:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_
1583:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
1584:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1585:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
1586:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1587:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
1588:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1589:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
1590:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1591:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
1592:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1593:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
1594:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Transmit in slave mode an amount of data in non-blocking mode with DMA
1595:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
1596:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
1597:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
1598:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
1599:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
1600:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
1601:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size
1602:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
1603:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
1604:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1605:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
1606:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1607:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
1608:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1609:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
1610:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
1611:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1612:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_TX;
1613:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_SLAVE;
1614:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
1615:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1616:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
1617:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
1618:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
1619:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
1620:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1621:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_DMA;
1622:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1623:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the I2C DMA transfer complete callback */
1624:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
1625:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1626:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the DMA error callback */
1627:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
ARM GAS  /tmp/ccyfI9lR.s 			page 30


1628:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1629:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the unused DMA callbacks to NULL */
1630:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmatx->XferHalfCpltCallback = NULL;
1631:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmatx->XferAbortCallback = NULL;
1632:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1633:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable the DMA stream */
1634:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize
1635:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1636:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable Address Acknowledge */
1637:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
1638:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1639:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
1640:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
1641:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1642:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
1643:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
1644:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
1645:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable ERR, STOP, NACK, ADDR interrupts */
1646:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
1647:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1648:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable DMA Request */
1649:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
1650:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1651:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
1652:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1653:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
1654:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1655:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
1656:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1657:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
1658:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1659:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
1660:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Receive in slave mode an amount of data in non-blocking mode with DMA
1661:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
1662:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
1663:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
1664:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
1665:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
1666:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
1667:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
1668:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
1669:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
1670:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1671:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
1672:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1673:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
1674:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1675:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
1676:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
1677:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1678:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_RX;
1679:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_SLAVE;
1680:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
1681:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1682:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
1683:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
1684:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
ARM GAS  /tmp/ccyfI9lR.s 			page 31


1685:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
1686:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1687:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_DMA;
1688:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1689:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the I2C DMA transfer complete callback */
1690:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
1691:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1692:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the DMA error callback */
1693:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
1694:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1695:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the unused DMA callbacks to NULL */
1696:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmarx->XferHalfCpltCallback = NULL;
1697:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmarx->XferAbortCallback = NULL;
1698:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1699:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable the DMA stream */
1700:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize
1701:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1702:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable Address Acknowledge */
1703:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
1704:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1705:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
1706:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
1707:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1708:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
1709:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
1710:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
1711:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable ERR, STOP, NACK, ADDR interrupts */
1712:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
1713:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1714:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable DMA Request */
1715:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
1716:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1717:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
1718:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1719:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
1720:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1721:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
1722:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1723:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
1724:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
1725:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Write an amount of data in blocking mode to a specific memory address
1726:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
1727:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
1728:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
1729:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
1730:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddress Internal memory address
1731:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddSize Size of internal memory address
1732:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
1733:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
1734:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
1735:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
1736:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
1737:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddre
1738:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
1739:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
1740:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1741:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
ARM GAS  /tmp/ccyfI9lR.s 			page 32


1742:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
1743:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1744:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
1745:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1746:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
1747:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1748:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
1749:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1750:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1751:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
1752:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
1753:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1754:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Init tickstart for timeout management*/
1755:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tickstart = HAL_GetTick();
1756:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1757:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK
1758:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1759:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
1760:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1761:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1762:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State     = HAL_I2C_STATE_BUSY_TX;
1763:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MEM;
1764:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
1765:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1766:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
1767:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr  = pData;
1768:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
1769:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
1770:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1771:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address and Memory Address */
1772:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL
1773:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1774:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
1775:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1776:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
1777:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
1778:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
1779:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1780:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
1781:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1782:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
1783:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
1784:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
1785:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1786:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1787:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1788:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
1789:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
1790:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1791:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
1792:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
1793:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1794:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
1795:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1796:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
1797:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
1798:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
ARM GAS  /tmp/ccyfI9lR.s 			page 33


1799:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1800:HALLIB/Src/stm32f7xx_hal_i2c.c ****     do
1801:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1802:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Wait until TXIS flag is set */
1803:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
1804:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1805:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
1806:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
1807:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_ERROR;
1808:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
1809:HALLIB/Src/stm32f7xx_hal_i2c.c ****         else
1810:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
1811:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
1812:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
1813:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1814:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1815:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Write data to TXDR */
1816:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
1817:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
1818:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
1819:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1820:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
1821:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1822:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Wait until TCR flag is set */
1823:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
1824:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
1825:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
1826:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
1827:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1828:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->XferCount > MAX_NBYTE_SIZE)
1829:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
1830:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->XferSize = MAX_NBYTE_SIZE;
1831:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
1832:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
1833:HALLIB/Src/stm32f7xx_hal_i2c.c ****         else
1834:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
1835:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->XferSize = hi2c->XferCount;
1836:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
1837:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
1838:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1839:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1840:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1841:HALLIB/Src/stm32f7xx_hal_i2c.c ****     while (hi2c->XferCount > 0U);
1842:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1843:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
1844:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until STOPF flag is reset */
1845:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
1846:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1847:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
1848:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1849:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
1850:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1851:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
1852:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1853:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
1854:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1855:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
ARM GAS  /tmp/ccyfI9lR.s 			page 34


1856:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1857:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear STOP Flag */
1858:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1859:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1860:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear Configuration Register 2 */
1861:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_RESET_CR2(hi2c);
1862:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1863:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
1864:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
1865:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1866:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
1867:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
1868:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1869:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
1870:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1871:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
1872:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1873:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
1874:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
1875:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
1876:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1877:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
1878:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Read an amount of data in blocking mode from a specific memory address
1879:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
1880:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
1881:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
1882:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
1883:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddress Internal memory address
1884:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddSize Size of internal memory address
1885:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
1886:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
1887:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
1888:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
1889:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
1890:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddres
1891:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
1892:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
1893:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1894:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
1895:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
1896:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1897:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
1898:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
1899:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
1900:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1901:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
1902:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1903:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1904:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
1905:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
1906:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1907:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Init tickstart for timeout management*/
1908:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tickstart = HAL_GetTick();
1909:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1910:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK
1911:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1912:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
ARM GAS  /tmp/ccyfI9lR.s 			page 35


1913:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1914:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1915:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State     = HAL_I2C_STATE_BUSY_RX;
1916:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MEM;
1917:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
1918:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1919:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
1920:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr  = pData;
1921:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
1922:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
1923:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1924:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address and Memory Address */
1925:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_
1926:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1927:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
1928:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1929:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
1930:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
1931:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
1932:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1933:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
1934:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1935:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
1936:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
1937:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
1938:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1939:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1940:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1941:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address */
1942:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
1943:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
1944:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1945:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
1946:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ
1947:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1948:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
1949:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1950:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
1951:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_REA
1952:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1953:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1954:HALLIB/Src/stm32f7xx_hal_i2c.c ****     do
1955:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1956:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Wait until RXNE flag is set */
1957:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
1958:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1959:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
1960:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1961:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1962:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Read data from RXDR */
1963:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
1964:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
1965:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
1966:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1967:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
1968:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1969:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Wait until TCR flag is set */
ARM GAS  /tmp/ccyfI9lR.s 			page 36


1970:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
1971:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
1972:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
1973:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
1974:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1975:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->XferCount > MAX_NBYTE_SIZE)
1976:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
1977:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->XferSize = MAX_NBYTE_SIZE;
1978:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
1979:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
1980:HALLIB/Src/stm32f7xx_hal_i2c.c ****         else
1981:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
1982:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->XferSize = hi2c->XferCount;
1983:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
1984:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
1985:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1986:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
1987:HALLIB/Src/stm32f7xx_hal_i2c.c ****     while (hi2c->XferCount > 0U);
1988:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
1989:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
1990:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until STOPF flag is reset */
1991:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
1992:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
1993:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
1994:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1995:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
1996:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
1997:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
1998:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
1999:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
2000:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2001:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2002:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2003:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear STOP Flag */
2004:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2005:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2006:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear Configuration Register 2 */
2007:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_RESET_CR2(hi2c);
2008:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2009:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
2010:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
2011:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2012:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
2013:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
2014:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2015:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2016:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2017:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2018:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2019:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
2020:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2021:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2022:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2023:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Write an amount of data in non-blocking mode with Interrupt to a specific memory addres
2024:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2025:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2026:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
ARM GAS  /tmp/ccyfI9lR.s 			page 37


2027:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
2028:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddress Internal memory address
2029:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddSize Size of internal memory address
2030:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
2031:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
2032:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2033:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2034:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAd
2035:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2036:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
2037:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
2038:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2039:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
2040:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
2041:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2042:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
2043:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2044:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
2045:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2046:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
2047:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2048:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2049:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2050:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2051:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_BUSY;
2052:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2053:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2054:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
2055:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
2056:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2057:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Init tickstart for timeout management*/
2058:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tickstart = HAL_GetTick();
2059:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2060:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2061:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MEM;
2062:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2063:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2064:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
2065:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
2066:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
2067:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2068:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
2069:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2070:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
2071:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2072:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
2073:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
2074:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2075:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
2076:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2077:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
2078:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
2079:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2080:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2081:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address and Memory Address */
2082:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstar
2083:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
ARM GAS  /tmp/ccyfI9lR.s 			page 38


2084:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
2085:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2086:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
2087:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
2088:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
2089:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2090:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
2091:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2092:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
2093:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
2094:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
2095:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2096:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2097:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2098:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
2099:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2100:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2101:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
2102:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
2103:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2104:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
2105:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
2106:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
2107:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2108:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable ERR, TC, STOP, NACK, TXI interrupt */
2109:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* possible to enable all of these */
2110:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TX
2111:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2112:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2113:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2114:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2115:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2116:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2117:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
2118:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2119:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2120:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2121:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2122:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Read an amount of data in non-blocking mode with Interrupt from a specific memory addre
2123:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2124:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2125:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
2126:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
2127:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddress Internal memory address
2128:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddSize Size of internal memory address
2129:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
2130:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
2131:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2132:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2133:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAdd
2134:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2135:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
2136:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
2137:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2138:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
2139:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
2140:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 39


2141:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
2142:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2143:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
2144:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2145:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
2146:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2147:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2148:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2149:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2150:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_BUSY;
2151:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2152:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2153:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
2154:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
2155:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2156:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Init tickstart for timeout management*/
2157:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tickstart = HAL_GetTick();
2158:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2159:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2160:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MEM;
2161:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2162:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2163:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
2164:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
2165:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
2166:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2167:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
2168:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2169:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
2170:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2171:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
2172:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
2173:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2174:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
2175:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2176:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
2177:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
2178:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2179:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2180:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address and Memory Address */
2181:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart
2182:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2183:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
2184:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2185:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
2186:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
2187:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
2188:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2189:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
2190:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2191:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
2192:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
2193:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
2194:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2195:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2196:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2197:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
ARM GAS  /tmp/ccyfI9lR.s 			page 40


2198:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2199:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2200:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
2201:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
2202:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2203:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
2204:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
2205:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
2206:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2207:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable ERR, TC, STOP, NACK, RXI interrupt */
2208:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* possible to enable all of these */
2209:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TX
2210:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2211:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2212:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2213:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2214:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2215:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2216:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
2217:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2218:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2219:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2220:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Write an amount of data in non-blocking mode with DMA to a specific memory address
2221:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2222:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2223:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
2224:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
2225:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddress Internal memory address
2226:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddSize Size of internal memory address
2227:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
2228:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
2229:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2230:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2231:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemA
2232:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2233:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
2234:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
2235:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2236:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
2237:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
2238:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2239:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
2240:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2241:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
2242:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2243:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
2244:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2245:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2246:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2247:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2248:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_BUSY;
2249:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2250:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2251:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
2252:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
2253:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2254:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Init tickstart for timeout management*/
ARM GAS  /tmp/ccyfI9lR.s 			page 41


2255:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tickstart = HAL_GetTick();
2256:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2257:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2258:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MEM;
2259:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2260:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2261:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
2262:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
2263:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
2264:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2265:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_DMA;
2266:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2267:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
2268:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2269:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
2270:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
2271:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2272:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
2273:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2274:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
2275:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
2276:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2277:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2278:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address and Memory Address */
2279:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstar
2280:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2281:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
2282:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2283:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
2284:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
2285:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
2286:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2287:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
2288:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2289:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
2290:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
2291:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
2292:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2293:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2294:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2295:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the I2C DMA transfer complete callback */
2296:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2297:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2298:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the DMA error callback */
2299:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2300:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2301:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the unused DMA callbacks to NULL */
2302:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmatx->XferHalfCpltCallback = NULL;
2303:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmatx->XferAbortCallback = NULL;
2304:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2305:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable the DMA stream */
2306:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize
2307:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2308:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address */
2309:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
2310:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2311:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 42


2312:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Update XferCount value */
2313:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount -= hi2c->XferSize;
2314:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2315:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
2316:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
2317:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2318:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
2319:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
2320:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
2321:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable ERR and NACK interrupts */
2322:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2323:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2324:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable DMA Request */
2325:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2326:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2327:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2328:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2329:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2330:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2331:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
2332:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2333:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2334:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2335:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2336:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Reads an amount of data in non-blocking mode with DMA from a specific memory address.
2337:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2338:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2339:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
2340:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
2341:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddress Internal memory address
2342:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddSize Size of internal memory address
2343:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
2344:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be read
2345:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2346:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2347:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAd
2348:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2349:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
2350:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
2351:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2352:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
2353:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
2354:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2355:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
2356:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2357:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
2358:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2359:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
2360:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2361:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2362:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2363:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2364:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_BUSY;
2365:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2366:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2367:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
2368:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
ARM GAS  /tmp/ccyfI9lR.s 			page 43


2369:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2370:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Init tickstart for timeout management*/
2371:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tickstart = HAL_GetTick();
2372:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2373:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2374:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MEM;
2375:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2376:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2377:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
2378:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
2379:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
2380:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2381:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_DMA;
2382:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2383:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
2384:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2385:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
2386:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
2387:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2388:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
2389:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2390:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
2391:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
2392:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2393:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2394:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address and Memory Address */
2395:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart
2396:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2397:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
2398:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2399:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
2400:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
2401:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
2402:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2403:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
2404:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2405:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
2406:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
2407:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
2408:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2409:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2410:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2411:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the I2C DMA transfer complete callback */
2412:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2413:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2414:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the DMA error callback */
2415:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2416:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2417:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the unused DMA callbacks to NULL */
2418:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmarx->XferHalfCpltCallback = NULL;
2419:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmarx->XferAbortCallback = NULL;
2420:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2421:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable the DMA stream */
2422:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize
2423:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2424:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
2425:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
ARM GAS  /tmp/ccyfI9lR.s 			page 44


2426:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2427:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Update XferCount value */
2428:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount -= hi2c->XferSize;
2429:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2430:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
2431:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
2432:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2433:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable DMA Request */
2434:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2435:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2436:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
2437:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
2438:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
2439:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable ERR and NACK interrupts */
2440:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2441:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2442:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2443:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2444:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2445:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2446:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
2447:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2448:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2449:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2450:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2451:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Checks if target device is ready for communication.
2452:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @note   This function is used with Memory devices
2453:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2454:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2455:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
2456:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
2457:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Trials Number of trials
2458:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
2459:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2460:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2461:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Tria
2462:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2463:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
2464:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2465:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __IO uint32_t I2C_Trials = 0U;
2466:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2467:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
2468:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2469:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2470:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2471:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_BUSY;
2472:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2473:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2474:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
2475:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
2476:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2477:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_BUSY;
2478:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2479:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2480:HALLIB/Src/stm32f7xx_hal_i2c.c ****     do
2481:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2482:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Generate Start */
ARM GAS  /tmp/ccyfI9lR.s 			page 45


2483:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
2484:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2485:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
2486:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Wait until STOPF flag is set or a NACK flag is set*/
2487:HALLIB/Src/stm32f7xx_hal_i2c.c ****       tickstart = HAL_GetTick();
2488:HALLIB/Src/stm32f7xx_hal_i2c.c ****       while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_F
2489:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2490:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (Timeout != HAL_MAX_DELAY)
2491:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
2492:HALLIB/Src/stm32f7xx_hal_i2c.c ****           if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
2493:HALLIB/Src/stm32f7xx_hal_i2c.c ****           {
2494:HALLIB/Src/stm32f7xx_hal_i2c.c ****             /* Device is ready */
2495:HALLIB/Src/stm32f7xx_hal_i2c.c ****             hi2c->State = HAL_I2C_STATE_READY;
2496:HALLIB/Src/stm32f7xx_hal_i2c.c ****             /* Process Unlocked */
2497:HALLIB/Src/stm32f7xx_hal_i2c.c ****             __HAL_UNLOCK(hi2c);
2498:HALLIB/Src/stm32f7xx_hal_i2c.c ****             return HAL_TIMEOUT;
2499:HALLIB/Src/stm32f7xx_hal_i2c.c ****           }
2500:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
2501:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2502:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2503:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Check if the NACKF flag has not been set */
2504:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
2505:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2506:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Wait until STOPF flag is reset */
2507:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2508:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
2509:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
2510:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
2511:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2512:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Clear STOP Flag */
2513:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2514:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2515:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Device is ready */
2516:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->State = HAL_I2C_STATE_READY;
2517:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2518:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
2519:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
2520:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2521:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_OK;
2522:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2523:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
2524:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2525:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Wait until STOPF flag is reset */
2526:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2527:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
2528:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
2529:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
2530:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2531:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Clear NACK Flag */
2532:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2533:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2534:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Clear STOP Flag, auto generated with autoend*/
2535:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2536:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2537:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2538:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Check if the maximum allowed number of trials has been reached */
2539:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (I2C_Trials++ == Trials)
ARM GAS  /tmp/ccyfI9lR.s 			page 46


2540:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
2541:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Generate Stop */
2542:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Instance->CR2 |= I2C_CR2_STOP;
2543:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2544:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Wait until STOPF flag is reset */
2545:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2546:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
2547:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
2548:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
2549:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2550:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Clear STOP Flag */
2551:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2552:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
2553:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2554:HALLIB/Src/stm32f7xx_hal_i2c.c ****     while (I2C_Trials < Trials);
2555:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2556:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
2557:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2558:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
2559:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
2560:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2561:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_TIMEOUT;
2562:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2563:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2564:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2565:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
2566:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2567:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2568:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2569:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2570:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Sequential transmit in master I2C mode an amount of data in non-blocking mode with Inte
2571:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @note   This interface allow to manage repeated start condition when a direction change during 
2572:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2573:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2574:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
2575:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
2576:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
2577:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
2578:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
2579:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2580:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2581:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Master_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddres
2582:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2583:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
2584:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2585:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2586:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
2587:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
2588:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2589:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
2590:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2591:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
2592:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
2593:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2594:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2595:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MASTER;
2596:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
ARM GAS  /tmp/ccyfI9lR.s 			page 47


2597:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2598:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
2599:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
2600:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
2601:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = XferOptions;
2602:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
2603:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2604:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* If size > MAX_NBYTE_SIZE, use reload mode */
2605:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
2606:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2607:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
2608:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
2609:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2610:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
2611:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2612:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
2613:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = hi2c->XferOptions;
2614:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2615:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2616:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* If transfer direction not change, do not generate Restart Condition */
2617:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Mean Previous state is same as current state */
2618:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
2619:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2620:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xferrequest = I2C_NO_STARTSTOP;
2621:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2622:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2623:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address and set NBYTES to write */
2624:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, xferrequest);
2625:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2626:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
2627:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
2628:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2629:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
2630:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
2631:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
2632:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2633:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2634:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2635:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2636:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2637:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2638:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
2639:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2640:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2641:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2642:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2643:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Sequential receive in master I2C mode an amount of data in non-blocking mode with Inter
2644:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @note   This interface allow to manage repeated start condition when a direction change during 
2645:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2646:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2647:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
2648:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
2649:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
2650:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
2651:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
2652:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2653:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
ARM GAS  /tmp/ccyfI9lR.s 			page 48


2654:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Master_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress
2655:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2656:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
2657:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xferrequest = I2C_GENERATE_START_READ;
2658:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2659:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
2660:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
2661:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2662:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
2663:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2664:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
2665:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
2666:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2667:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2668:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MASTER;
2669:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2670:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2671:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
2672:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
2673:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
2674:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = XferOptions;
2675:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
2676:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2677:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
2678:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
2679:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2680:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
2681:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
2682:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2683:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
2684:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2685:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
2686:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = hi2c->XferOptions;
2687:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2688:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2689:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* If transfer direction not change, do not generate Restart Condition */
2690:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Mean Previous state is same as current state */
2691:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
2692:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2693:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xferrequest = I2C_NO_STARTSTOP;
2694:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2695:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2696:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Slave Address and set NBYTES to read */
2697:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, xferrequest);
2698:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2699:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
2700:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
2701:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2702:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
2703:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
2704:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
2705:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2706:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2707:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2708:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2709:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2710:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
ARM GAS  /tmp/ccyfI9lR.s 			page 49


2711:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
2712:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2713:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2714:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2715:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2716:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Sequential transmit in slave/device I2C mode an amount of data in non-blocking mode wit
2717:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @note   This interface allow to manage repeated start condition when a direction change during 
2718:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2719:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2720:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
2721:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
2722:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
2723:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2724:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2725:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uin
2726:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2727:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
2728:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
2729:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2730:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
2731:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2732:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
2733:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2734:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
2735:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2736:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2737:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
2738:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2739:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2740:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
2741:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
2742:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2743:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
2744:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* and then toggle the HAL slave RX state to TX state */
2745:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2746:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2747:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable associated Interrupts */
2748:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2749:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2750:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2751:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2752:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2753:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2754:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2755:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable Address Acknowledge */
2756:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2757:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2758:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
2759:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
2760:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
2761:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
2762:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = XferOptions;
2763:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_IT;
2764:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2765:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
2766:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2767:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Clear ADDR flag after prepare the transfer parameters */
ARM GAS  /tmp/ccyfI9lR.s 			page 50


2768:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* This action will generate an acknowledge to the Master */
2769:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2770:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2771:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2772:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
2773:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
2774:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2775:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
2776:HALLIB/Src/stm32f7xx_hal_i2c.c ****     to avoid the risk of I2C interrupt handle execution before current
2777:HALLIB/Src/stm32f7xx_hal_i2c.c ****     process unlock */
2778:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* REnable ADDR interrupt */
2779:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2780:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2781:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2782:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2783:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2784:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2785:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_ERROR;
2786:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2787:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2788:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2789:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2790:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Sequential receive in slave/device I2C mode an amount of data in non-blocking mode with
2791:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @note   This interface allow to manage repeated start condition when a direction change during 
2792:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2793:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2794:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  pData Pointer to data buffer
2795:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Amount of data to be sent
2796:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
2797:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2798:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2799:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint
2800:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2801:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
2802:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
2803:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2804:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
2805:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2806:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((pData == NULL) || (Size == 0U))
2807:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2808:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return  HAL_ERROR;
2809:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2810:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2811:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
2812:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2813:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2814:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
2815:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
2816:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2817:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
2818:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* and then toggle the HAL slave TX state to RX state */
2819:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2820:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2821:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable associated Interrupts */
2822:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2823:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2824:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 51


2825:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2826:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2827:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2828:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2829:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable Address Acknowledge */
2830:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2831:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2832:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Prepare transfer parameters */
2833:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr    = pData;
2834:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
2835:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
2836:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = XferOptions;
2837:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_IT;
2838:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2839:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
2840:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
2841:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Clear ADDR flag after prepare the transfer parameters */
2842:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* This action will generate an acknowledge to the Master */
2843:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2844:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
2845:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2846:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
2847:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
2848:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2849:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
2850:HALLIB/Src/stm32f7xx_hal_i2c.c ****     to avoid the risk of I2C interrupt handle execution before current
2851:HALLIB/Src/stm32f7xx_hal_i2c.c ****     process unlock */
2852:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* REnable ADDR interrupt */
2853:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2854:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2855:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2856:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2857:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2858:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2859:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_ERROR;
2860:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2861:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2862:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2863:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2864:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Enable the Address listen mode with Interrupt.
2865:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2866:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2867:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2868:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2869:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
2870:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2871:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
2872:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2873:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_LISTEN;
2874:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR = I2C_Slave_ISR_IT;
2875:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2876:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable the Address Match interrupt */
2877:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2878:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2879:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2880:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2881:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
ARM GAS  /tmp/ccyfI9lR.s 			page 52


2882:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2883:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
2884:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2885:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2886:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2887:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2888:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Disable the Address listen mode with Interrupt.
2889:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2890:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C
2891:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2892:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2893:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
2894:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2895:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Declaration of tmp to prevent undefined behavior of volatile usage */
2896:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tmp;
2897:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2898:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable Address listen mode only if a transfer is not ongoing */
2899:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_LISTEN)
2900:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2901:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
2902:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
2903:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
2904:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode = HAL_I2C_MODE_NONE;
2905:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR = NULL;
2906:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2907:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable the Address Match interrupt */
2908:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2909:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2910:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2911:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2912:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2913:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2914:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_BUSY;
2915:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2916:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2917:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2918:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2919:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Abort a master I2C IT or DMA process communication with Interrupt.
2920:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2921:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2922:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
2923:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
2924:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
2925:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2926:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
2927:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2928:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->Mode == HAL_I2C_MODE_MASTER)
2929:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2930:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Locked */
2931:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_LOCK(hi2c);
2932:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2933:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable Interrupts */
2934:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2935:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2936:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2937:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set State at HAL_I2C_STATE_ABORT */
2938:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_ABORT;
ARM GAS  /tmp/ccyfI9lR.s 			page 53


2939:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2940:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
2941:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfe
2942:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
2943:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2944:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
2945:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
2946:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2947:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Note : The I2C interrupts must be enabled after unlocking current process
2948:HALLIB/Src/stm32f7xx_hal_i2c.c ****               to avoid the risk of I2C interrupt handle execution before current
2949:HALLIB/Src/stm32f7xx_hal_i2c.c ****               process unlock */
2950:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2951:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2952:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_OK;
2953:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2954:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
2955:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2956:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wrong usage of abort function */
2957:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* This function should be used only in case of abort monitored by master device */
2958:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_ERROR;
2959:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2960:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2961:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2962:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2963:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @}
2964:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2965:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2966:HALLIB/Src/stm32f7xx_hal_i2c.c **** /** @defgroup I2C_IRQ_Handler_and_Callbacks IRQ Handler and Callbacks
2967:HALLIB/Src/stm32f7xx_hal_i2c.c ****  * @{
2968:HALLIB/Src/stm32f7xx_hal_i2c.c ****  */
2969:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2970:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2971:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  This function handles I2C event interrupt request.
2972:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2973:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2974:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
2975:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2976:HALLIB/Src/stm32f7xx_hal_i2c.c **** void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
2977:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2978:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Get current IT Flags and IT sources value */
2979:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2980:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2981:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2982:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* I2C events treatment -------------------------------------*/
2983:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->XferISR != NULL)
2984:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
2985:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR(hi2c, itflags, itsources);
2986:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
2987:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
2988:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
2989:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
2990:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  This function handles I2C error interrupt request.
2991:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
2992:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
2993:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
2994:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
2995:HALLIB/Src/stm32f7xx_hal_i2c.c **** void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
ARM GAS  /tmp/ccyfI9lR.s 			page 54


2996:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
2997:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2998:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2999:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3000:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* I2C Bus error interrupt occurred ------------------------------------*/
3001:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
3002:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3003:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
3004:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3005:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear BERR flag */
3006:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
3007:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3008:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3009:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
3010:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
3011:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3012:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
3013:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3014:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear OVR flag */
3015:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
3016:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3017:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3018:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
3019:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
3020:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3021:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
3022:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3023:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear ARLO flag */
3024:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
3025:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3026:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3027:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Call the Error Callback in case of Error detected */
3028:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C
3029:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3030:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_ITError(hi2c, hi2c->ErrorCode);
3031:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3032:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3033:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3034:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3035:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Master Tx Transfer completed callback.
3036:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3037:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3038:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3039:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3040:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
3041:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3042:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
3043:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
3044:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3045:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
3046:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
3047:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
3048:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3049:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3050:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3051:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Master Rx Transfer completed callback.
3052:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
ARM GAS  /tmp/ccyfI9lR.s 			page 55


3053:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3054:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3055:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3056:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
3057:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3058:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
3059:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
3060:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3061:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
3062:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
3063:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
3064:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3065:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3066:HALLIB/Src/stm32f7xx_hal_i2c.c **** /** @brief  Slave Tx Transfer completed callback.
3067:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3068:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3069:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3070:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3071:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
3072:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3073:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
3074:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
3075:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3076:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
3077:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
3078:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
3079:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3080:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3081:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3082:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Slave Rx Transfer completed callback.
3083:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3084:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3085:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3086:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3087:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
3088:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3089:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
3090:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
3091:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3092:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
3093:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
3094:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
3095:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3096:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3097:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3098:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Slave Address Match callback.
3099:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3100:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3101:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFE
3102:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  AddrMatchCode Address Match Code
3103:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3104:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3105:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrM
3106:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3107:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
3108:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
3109:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(TransferDirection);
ARM GAS  /tmp/ccyfI9lR.s 			page 56


3110:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(AddrMatchCode);
3111:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3112:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
3113:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_AddrCallback() could be implemented in the user file
3114:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
3115:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3116:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3117:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3118:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Listen Complete callback.
3119:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3120:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3121:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3122:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3123:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
3124:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3125:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
3126:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
3127:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3128:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
3129:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_ListenCpltCallback() could be implemented in the user file
3130:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
3131:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3132:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3133:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3134:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Memory Tx Transfer completed callback.
3135:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3136:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3137:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3138:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3139:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
3140:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3141:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
3142:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
3143:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3144:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
3145:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_MemTxCpltCallback could be implemented in the user file
3146:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
3147:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3148:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3149:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3150:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Memory Rx Transfer completed callback.
3151:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3152:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3153:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3154:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3155:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
3156:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3157:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
3158:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
3159:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3160:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
3161:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_MemRxCpltCallback could be implemented in the user file
3162:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
3163:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3164:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3165:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3166:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  I2C error callback.
ARM GAS  /tmp/ccyfI9lR.s 			page 57


3167:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3168:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3169:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3170:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3171:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
3172:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3173:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
3174:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
3175:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3176:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
3177:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_ErrorCallback could be implemented in the user file
3178:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
3179:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3180:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3181:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3182:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  I2C abort callback.
3183:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3184:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3185:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3186:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3187:HALLIB/Src/stm32f7xx_hal_i2c.c **** __weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
3188:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3189:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
3190:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hi2c);
3191:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3192:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* NOTE : This function should not be modified, when the callback is needed,
3193:HALLIB/Src/stm32f7xx_hal_i2c.c ****             the HAL_I2C_AbortCpltCallback could be implemented in the user file
3194:HALLIB/Src/stm32f7xx_hal_i2c.c ****    */
3195:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3196:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3197:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3198:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @}
3199:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3200:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3201:HALLIB/Src/stm32f7xx_hal_i2c.c **** /** @defgroup I2C_Exported_Functions_Group3 Peripheral State, Mode and Error functions
3202:HALLIB/Src/stm32f7xx_hal_i2c.c ****  *  @brief   Peripheral State, Mode and Error functions
3203:HALLIB/Src/stm32f7xx_hal_i2c.c ****  *
3204:HALLIB/Src/stm32f7xx_hal_i2c.c **** @verbatim
3205:HALLIB/Src/stm32f7xx_hal_i2c.c ****  ===============================================================================
3206:HALLIB/Src/stm32f7xx_hal_i2c.c ****             ##### Peripheral State, Mode and Error functions #####
3207:HALLIB/Src/stm32f7xx_hal_i2c.c ****  ===============================================================================
3208:HALLIB/Src/stm32f7xx_hal_i2c.c ****     [..]
3209:HALLIB/Src/stm32f7xx_hal_i2c.c ****     This subsection permit to get in run-time the status of the peripheral
3210:HALLIB/Src/stm32f7xx_hal_i2c.c ****     and the data flow.
3211:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3212:HALLIB/Src/stm32f7xx_hal_i2c.c **** @endverbatim
3213:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @{
3214:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3215:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3216:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3217:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Return the I2C handle state.
3218:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3219:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3220:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL state
3221:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3222:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
3223:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
ARM GAS  /tmp/ccyfI9lR.s 			page 58


3224:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Return I2C handle state */
3225:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return hi2c->State;
3226:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3227:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3228:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3229:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Returns the I2C Master, Slave, Memory or no mode.
3230:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3231:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         the configuration information for I2C module
3232:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL mode
3233:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3234:HALLIB/Src/stm32f7xx_hal_i2c.c **** HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
3235:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3236:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return hi2c->Mode;
3237:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3238:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3239:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3240:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Return the I2C error code.
3241:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3242:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *              the configuration information for the specified I2C.
3243:HALLIB/Src/stm32f7xx_hal_i2c.c **** * @retval I2C Error Code
3244:HALLIB/Src/stm32f7xx_hal_i2c.c **** */
3245:HALLIB/Src/stm32f7xx_hal_i2c.c **** uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
3246:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3247:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return hi2c->ErrorCode;
3248:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3249:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3250:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3251:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @}
3252:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3253:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3254:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3255:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @}
3256:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3257:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3258:HALLIB/Src/stm32f7xx_hal_i2c.c **** /** @addtogroup I2C_Private_Functions
3259:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @{
3260:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3261:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3262:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3263:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Interrupt Sub-Routine which handle the Interrupt Flags Master Mode with Interrupt.
3264:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3265:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3266:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITFlags Interrupt flags to handle.
3267:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITSources Interrupt sources enabled.
3268:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
3269:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3270:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint
3271:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3272:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint16_t devaddress = 0U;
3273:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3274:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process Locked */
3275:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_LOCK(hi2c);
3276:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3277:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
3278:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3279:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear NACK Flag */
3280:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
ARM GAS  /tmp/ccyfI9lR.s 			page 59


3281:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3282:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set corresponding Error Code */
3283:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* No need to generate STOP, it is automatically done */
3284:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Error callback will be send during stop flag treatment */
3285:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
3286:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3287:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Flush TX register */
3288:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Flush_TXDR(hi2c);
3289:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3290:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
3291:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3292:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Read data from RXDR */
3293:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
3294:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize--;
3295:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount--;
3296:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3297:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
3298:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3299:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Write data to TXDR */
3300:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
3301:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize--;
3302:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount--;
3303:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3304:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
3305:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3306:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
3307:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3308:HALLIB/Src/stm32f7xx_hal_i2c.c ****       devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
3309:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3310:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->XferCount > MAX_NBYTE_SIZE)
3311:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3312:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->XferSize = MAX_NBYTE_SIZE;
3313:HALLIB/Src/stm32f7xx_hal_i2c.c ****         I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
3314:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3315:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
3316:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3317:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->XferSize = hi2c->XferCount;
3318:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
3319:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
3320:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP)
3321:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
3322:HALLIB/Src/stm32f7xx_hal_i2c.c ****         else
3323:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
3324:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
3325:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
3326:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3327:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3328:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
3329:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3330:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Call TxCpltCallback() if no stop mode is set */
3331:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
3332:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3333:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Call I2C Master Sequential complete process */
3334:HALLIB/Src/stm32f7xx_hal_i2c.c ****         I2C_ITMasterSequentialCplt(hi2c);
3335:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3336:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
3337:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
ARM GAS  /tmp/ccyfI9lR.s 			page 60


3338:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Wrong size Status regarding TCR flag event */
3339:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Call the corresponding callback to inform upper layer of End of Transfer */
3340:HALLIB/Src/stm32f7xx_hal_i2c.c ****         I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
3341:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3342:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3343:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3344:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (((ITFlags & I2C_FLAG_TC) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
3345:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3346:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount == 0U)
3347:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3348:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
3349:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3350:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Generate a stop condition in case of no transfer option */
3351:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
3352:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
3353:HALLIB/Src/stm32f7xx_hal_i2c.c ****           /* Generate Stop */
3354:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->Instance->CR2 |= I2C_CR2_STOP;
3355:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
3356:HALLIB/Src/stm32f7xx_hal_i2c.c ****         else
3357:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
3358:HALLIB/Src/stm32f7xx_hal_i2c.c ****           /* Call I2C Master Sequential complete process */
3359:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_ITMasterSequentialCplt(hi2c);
3360:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
3361:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3362:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3363:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
3364:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3365:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Wrong size Status regarding TC flag event */
3366:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Call the corresponding callback to inform upper layer of End of Transfer */
3367:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
3368:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3369:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3370:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3371:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
3372:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3373:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call I2C Master complete process */
3374:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_ITMasterCplt(hi2c, ITFlags);
3375:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3376:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3377:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process Unlocked */
3378:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_UNLOCK(hi2c);
3379:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3380:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
3381:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3382:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3383:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3384:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Interrupt Sub-Routine which handle the Interrupt Flags Slave Mode with Interrupt.
3385:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3386:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3387:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITFlags Interrupt flags to handle.
3388:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITSources Interrupt sources enabled.
3389:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
3390:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3391:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint3
3392:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3393:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process locked */
3394:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_LOCK(hi2c);
ARM GAS  /tmp/ccyfI9lR.s 			page 61


3395:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3396:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
3397:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3398:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Check that I2C transfer finished */
3399:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
3400:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Mean XferCount == 0*/
3401:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* So clear Flag NACKF only */
3402:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount == 0U)
3403:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3404:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)
3405:HALLIB/Src/stm32f7xx_hal_i2c.c ****           (hi2c->State == HAL_I2C_STATE_LISTEN))
3406:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3407:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Call I2C Listen complete process */
3408:HALLIB/Src/stm32f7xx_hal_i2c.c ****         I2C_ITListenCplt(hi2c, ITFlags);
3409:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3410:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_
3411:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3412:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Clear NACK Flag */
3413:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
3414:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3415:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Flush TX register */
3416:HALLIB/Src/stm32f7xx_hal_i2c.c ****         I2C_Flush_TXDR(hi2c);
3417:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3418:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Last Byte is Transmitted */
3419:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Call I2C Slave Sequential complete process */
3420:HALLIB/Src/stm32f7xx_hal_i2c.c ****         I2C_ITSlaveSequentialCplt(hi2c);
3421:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3422:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
3423:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3424:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Clear NACK Flag */
3425:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
3426:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3427:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3428:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
3429:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3430:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
3431:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Clear NACK Flag */
3432:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
3433:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3434:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set ErrorCode corresponding to a Non-Acknowledge */
3435:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
3436:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3437:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3438:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
3439:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3440:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > 0U)
3441:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3442:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Read data from RXDR */
3443:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
3444:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
3445:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
3446:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3447:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3448:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((hi2c->XferCount == 0U) && \
3449:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
3450:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3451:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Call I2C Slave Sequential complete process */
ARM GAS  /tmp/ccyfI9lR.s 			page 62


3452:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_ITSlaveSequentialCplt(hi2c);
3453:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3454:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3455:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
3456:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3457:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_ITAddrCplt(hi2c, ITFlags);
3458:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3459:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
3460:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3461:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Write data to TXDR only if XferCount not reach "0" */
3462:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* A TXIS flag can be set, during STOP treatment      */
3463:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Check if all Datas have already been sent */
3464:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
3465:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > 0U)
3466:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3467:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Write data to TXDR */
3468:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
3469:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
3470:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
3471:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3472:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
3473:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3474:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
3475:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3476:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Last Byte is Transmitted */
3477:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Call I2C Slave Sequential complete process */
3478:HALLIB/Src/stm32f7xx_hal_i2c.c ****         I2C_ITSlaveSequentialCplt(hi2c);
3479:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3480:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3481:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3482:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3483:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check if STOPF is set */
3484:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
3485:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3486:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call I2C Slave complete process */
3487:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_ITSlaveCplt(hi2c, ITFlags);
3488:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3489:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3490:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process Unlocked */
3491:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_UNLOCK(hi2c);
3492:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3493:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
3494:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3495:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3496:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3497:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Interrupt Sub-Routine which handle the Interrupt Flags Master Mode with DMA.
3498:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3499:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3500:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITFlags Interrupt flags to handle.
3501:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITSources Interrupt sources enabled.
3502:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
3503:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3504:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uin
3505:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3506:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint16_t devaddress = 0U;
3507:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
3508:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 63


3509:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process Locked */
3510:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_LOCK(hi2c);
3511:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3512:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
3513:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3514:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear NACK Flag */
3515:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
3516:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3517:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set corresponding Error Code */
3518:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
3519:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3520:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* No need to generate STOP, it is automatically done */
3521:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* But enable STOP interrupt, to treat it */
3522:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Error callback will be send during stop flag treatment */
3523:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
3524:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3525:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Flush TX register */
3526:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Flush_TXDR(hi2c);
3527:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3528:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
3529:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3530:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable TC interrupt */
3531:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
3532:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3533:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount != 0U)
3534:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3535:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Recover Slave address */
3536:HALLIB/Src/stm32f7xx_hal_i2c.c ****       devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
3537:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3538:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Prepare the new XferSize to transfer */
3539:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->XferCount > MAX_NBYTE_SIZE)
3540:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3541:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->XferSize = MAX_NBYTE_SIZE;
3542:HALLIB/Src/stm32f7xx_hal_i2c.c ****         xfermode = I2C_RELOAD_MODE;
3543:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3544:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
3545:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3546:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->XferSize = hi2c->XferCount;
3547:HALLIB/Src/stm32f7xx_hal_i2c.c ****         xfermode = I2C_AUTOEND_MODE;
3548:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3549:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3550:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set the new XferSize in Nbytes register */
3551:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
3552:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3553:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Update XferCount value */
3554:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount -= hi2c->XferSize;
3555:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3556:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable DMA Request */
3557:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
3558:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3559:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
3560:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3561:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
3562:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3563:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
3564:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3565:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
ARM GAS  /tmp/ccyfI9lR.s 			page 64


3566:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
3567:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3568:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Wrong size Status regarding TCR flag event */
3569:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Call the corresponding callback to inform upper layer of End of Transfer */
3570:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
3571:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3572:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3573:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
3574:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3575:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call I2C Master complete process */
3576:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_ITMasterCplt(hi2c, ITFlags);
3577:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3578:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3579:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process Unlocked */
3580:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_UNLOCK(hi2c);
3581:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3582:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
3583:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3584:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3585:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3586:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Interrupt Sub-Routine which handle the Interrupt Flags Slave Mode with DMA.
3587:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3588:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3589:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITFlags Interrupt flags to handle.
3590:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITSources Interrupt sources enabled.
3591:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
3592:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3593:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint
3594:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3595:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process locked */
3596:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_LOCK(hi2c);
3597:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3598:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
3599:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3600:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Check that I2C transfer finished */
3601:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
3602:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Mean XferCount == 0 */
3603:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* So clear Flag NACKF only */
3604:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U)
3605:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3606:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Clear NACK Flag */
3607:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
3608:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3609:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
3610:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3611:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
3612:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Clear NACK Flag */
3613:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
3614:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3615:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set ErrorCode corresponding to a Non-Acknowledge */
3616:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
3617:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3618:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3619:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
3620:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3621:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear ADDR flag */
3622:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
ARM GAS  /tmp/ccyfI9lR.s 			page 65


3623:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3624:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
3625:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3626:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call I2C Slave complete process */
3627:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_ITSlaveCplt(hi2c, ITFlags);
3628:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3629:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3630:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process Unlocked */
3631:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_UNLOCK(hi2c);
3632:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3633:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
3634:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3635:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3636:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3637:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Master sends target device address followed by internal memory address for write reques
3638:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3639:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3640:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
3641:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
3642:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddress Internal memory address
3643:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddSize Size of internal memory address
3644:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
3645:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Tickstart Tick start value
3646:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
3647:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3648:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint1
3649:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3650:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
3651:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3652:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Wait until TXIS flag is set */
3653:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
3654:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3655:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
3656:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3657:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_ERROR;
3658:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3659:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
3660:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3661:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
3662:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3663:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3664:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3665:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* If Memory address size is 8Bit */
3666:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
3667:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3668:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Memory Address */
3669:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3670:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3671:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* If Memory address size is 16Bit */
3672:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
3673:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3674:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send MSB of Memory Address */
3675:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
3676:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3677:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until TXIS flag is set */
3678:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
3679:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
ARM GAS  /tmp/ccyfI9lR.s 			page 66


3680:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
3681:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3682:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
3683:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3684:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
3685:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3686:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
3687:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3688:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3689:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3690:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send LSB of Memory Address */
3691:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3692:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3693:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3694:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Wait until TCR flag is set */
3695:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
3696:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3697:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_TIMEOUT;
3698:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3699:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3700:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
3701:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3702:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3703:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3704:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Master sends target device address followed by internal memory address for read request
3705:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
3706:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
3707:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Target device address which contain device 7 or 10 bits address value
3708:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *         in datasheet must be shifted to the left before calling the interface
3709:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddress Internal memory address
3710:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  MemAddSize Size of internal memory address
3711:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
3712:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Tickstart Tick start value
3713:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
3714:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3715:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16
3716:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3717:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
3718:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3719:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Wait until TXIS flag is set */
3720:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
3721:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3722:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
3723:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3724:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_ERROR;
3725:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3726:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
3727:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3728:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
3729:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3730:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3731:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3732:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* If Memory address size is 8Bit */
3733:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
3734:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3735:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send Memory Address */
3736:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
ARM GAS  /tmp/ccyfI9lR.s 			page 67


3737:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3738:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* If Memory address size is 16Bit */
3739:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
3740:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3741:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send MSB of Memory Address */
3742:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
3743:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3744:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until TXIS flag is set */
3745:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
3746:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3747:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
3748:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3749:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
3750:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3751:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
3752:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3753:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
3754:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3755:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3756:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3757:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Send LSB of Memory Address */
3758:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3759:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3760:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3761:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Wait until TC flag is set */
3762:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
3763:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3764:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_TIMEOUT;
3765:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3766:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3767:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
3768:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3769:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3770:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3771:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  I2C Address complete process callback.
3772:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c I2C handle.
3773:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITFlags Interrupt flags to handle.
3774:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3775:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3776:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
3777:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3778:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint8_t transferdirection = 0U;
3779:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint16_t slaveaddrcode = 0U;
3780:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint16_t ownadd1code = 0U;
3781:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint16_t ownadd2code = 0U;
3782:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3783:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
3784:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(ITFlags);
3785:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3786:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* In case of Listen state, need to inform upper layer of address match code event */
3787:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
3788:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3789:HALLIB/Src/stm32f7xx_hal_i2c.c ****     transferdirection = I2C_GET_DIR(hi2c);
3790:HALLIB/Src/stm32f7xx_hal_i2c.c ****     slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
3791:HALLIB/Src/stm32f7xx_hal_i2c.c ****     ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
3792:HALLIB/Src/stm32f7xx_hal_i2c.c ****     ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
3793:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 68


3794:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* If 10bits addressing mode is selected */
3795:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
3796:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3797:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
3798:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3799:HALLIB/Src/stm32f7xx_hal_i2c.c ****         slaveaddrcode = ownadd1code;
3800:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->AddrEventCount++;
3801:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->AddrEventCount == 2U)
3802:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
3803:HALLIB/Src/stm32f7xx_hal_i2c.c ****           /* Reset Address Event counter */
3804:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->AddrEventCount = 0U;
3805:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3806:HALLIB/Src/stm32f7xx_hal_i2c.c ****           /* Clear ADDR flag */
3807:HALLIB/Src/stm32f7xx_hal_i2c.c ****           __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
3808:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3809:HALLIB/Src/stm32f7xx_hal_i2c.c ****           /* Process Unlocked */
3810:HALLIB/Src/stm32f7xx_hal_i2c.c ****           __HAL_UNLOCK(hi2c);
3811:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3812:HALLIB/Src/stm32f7xx_hal_i2c.c ****           /* Call Slave Addr callback */
3813:HALLIB/Src/stm32f7xx_hal_i2c.c ****           HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
3814:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
3815:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3816:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
3817:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
3818:HALLIB/Src/stm32f7xx_hal_i2c.c ****         slaveaddrcode = ownadd2code;
3819:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3820:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Disable ADDR Interrupts */
3821:HALLIB/Src/stm32f7xx_hal_i2c.c ****         I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
3822:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3823:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
3824:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
3825:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3826:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Call Slave Addr callback */
3827:HALLIB/Src/stm32f7xx_hal_i2c.c ****         HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
3828:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
3829:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3830:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* else 7 bits addressing mode is selected */
3831:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
3832:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3833:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable ADDR Interrupts */
3834:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
3835:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3836:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Process Unlocked */
3837:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_UNLOCK(hi2c);
3838:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3839:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Call Slave Addr callback */
3840:HALLIB/Src/stm32f7xx_hal_i2c.c ****       HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
3841:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3842:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3843:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Else clear address flag only */
3844:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
3845:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3846:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear ADDR flag */
3847:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
3848:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3849:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
3850:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
ARM GAS  /tmp/ccyfI9lR.s 			page 69


3851:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3852:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3853:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3854:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3855:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  I2C Master sequential complete process.
3856:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c I2C handle.
3857:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3858:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3859:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITMasterSequentialCplt(I2C_HandleTypeDef *hi2c)
3860:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3861:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset I2C handle mode */
3862:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Mode = HAL_I2C_MODE_NONE;
3863:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3864:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* No Generate Stop, to permit restart mode */
3865:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
3866:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
3867:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3868:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State         = HAL_I2C_STATE_READY;
3869:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
3870:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR       = NULL;
3871:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3872:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable Interrupts */
3873:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
3874:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3875:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
3876:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
3877:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3878:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the corresponding callback to inform upper layer of End of Transfer */
3879:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_MasterTxCpltCallback(hi2c);
3880:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3881:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* hi2c->State == HAL_I2C_STATE_BUSY_RX */
3882:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
3883:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3884:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State         = HAL_I2C_STATE_READY;
3885:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
3886:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR       = NULL;
3887:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3888:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable Interrupts */
3889:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
3890:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3891:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
3892:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
3893:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3894:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the corresponding callback to inform upper layer of End of Transfer */
3895:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_MasterRxCpltCallback(hi2c);
3896:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3897:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3898:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3899:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3900:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  I2C Slave sequential complete process.
3901:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c I2C handle.
3902:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3903:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3904:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITSlaveSequentialCplt(I2C_HandleTypeDef *hi2c)
3905:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3906:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset I2C handle mode */
3907:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Mode = HAL_I2C_MODE_NONE;
ARM GAS  /tmp/ccyfI9lR.s 			page 70


3908:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3909:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
3910:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3911:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
3912:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State         = HAL_I2C_STATE_LISTEN;
3913:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
3914:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3915:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable Interrupts */
3916:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
3917:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3918:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
3919:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
3920:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3921:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the Tx complete callback to inform upper layer of the end of transmit process */
3922:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_SlaveTxCpltCallback(hi2c);
3923:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3924:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3925:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
3926:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3927:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Remove HAL_I2C_STATE_SLAVE_BUSY_RX, keep only HAL_I2C_STATE_LISTEN */
3928:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State         = HAL_I2C_STATE_LISTEN;
3929:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
3930:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3931:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable Interrupts */
3932:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
3933:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3934:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
3935:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
3936:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3937:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the Rx complete callback to inform upper layer of the end of receive process */
3938:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_SlaveRxCpltCallback(hi2c);
3939:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3940:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
3941:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3942:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
3943:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  I2C Master complete process.
3944:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c I2C handle.
3945:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITFlags Interrupt flags to handle.
3946:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
3947:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
3948:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
3949:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
3950:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Clear STOP Flag */
3951:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
3952:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3953:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Clear Configuration Register 2 */
3954:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_RESET_CR2(hi2c);
3955:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3956:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset handle parameters */
3957:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->PreviousState = I2C_STATE_NONE;
3958:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferISR       = NULL;
3959:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
3960:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3961:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((ITFlags & I2C_FLAG_AF) != RESET)
3962:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3963:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear NACK Flag */
3964:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
ARM GAS  /tmp/ccyfI9lR.s 			page 71


3965:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3966:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set acknowledge error code */
3967:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
3968:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3969:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3970:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Flush TX register */
3971:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_Flush_TXDR(hi2c);
3972:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3973:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable Interrupts */
3974:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
3975:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3976:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Call the corresponding callback to inform upper layer of End of Transfer */
3977:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((hi2c->ErrorCode != HAL_I2C_ERROR_NONE) || (hi2c->State == HAL_I2C_STATE_ABORT))
3978:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3979:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the corresponding callback to inform upper layer of End of Transfer */
3980:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_ITError(hi2c, hi2c->ErrorCode);
3981:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
3982:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* hi2c->State == HAL_I2C_STATE_BUSY_TX */
3983:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
3984:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
3985:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
3986:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3987:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->Mode == HAL_I2C_MODE_MEM)
3988:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3989:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Mode = HAL_I2C_MODE_NONE;
3990:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3991:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Process Unlocked */
3992:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_UNLOCK(hi2c);
3993:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
3994:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Call the corresponding callback to inform upper layer of End of Transfer */
3995:HALLIB/Src/stm32f7xx_hal_i2c.c ****       HAL_I2C_MemTxCpltCallback(hi2c);
3996:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
3997:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
3998:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
3999:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Mode = HAL_I2C_MODE_NONE;
4000:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4001:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Process Unlocked */
4002:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_UNLOCK(hi2c);
4003:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4004:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Call the corresponding callback to inform upper layer of End of Transfer */
4005:HALLIB/Src/stm32f7xx_hal_i2c.c ****       HAL_I2C_MasterTxCpltCallback(hi2c);
4006:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4007:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4008:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* hi2c->State == HAL_I2C_STATE_BUSY_RX */
4009:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
4010:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4011:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
4012:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4013:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->Mode == HAL_I2C_MODE_MEM)
4014:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4015:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Mode = HAL_I2C_MODE_NONE;
4016:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4017:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Process Unlocked */
4018:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_UNLOCK(hi2c);
4019:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4020:HALLIB/Src/stm32f7xx_hal_i2c.c ****       HAL_I2C_MemRxCpltCallback(hi2c);
4021:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
ARM GAS  /tmp/ccyfI9lR.s 			page 72


4022:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
4023:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4024:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Mode = HAL_I2C_MODE_NONE;
4025:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4026:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Process Unlocked */
4027:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_UNLOCK(hi2c);
4028:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4029:HALLIB/Src/stm32f7xx_hal_i2c.c ****       HAL_I2C_MasterRxCpltCallback(hi2c);
4030:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4031:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4032:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4033:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4034:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4035:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  I2C Slave complete process.
4036:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c I2C handle.
4037:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITFlags Interrupt flags to handle.
4038:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
4039:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4040:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
4041:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
4042:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Clear STOP Flag */
4043:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
4044:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4045:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Clear ADDR flag */
4046:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
4047:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4048:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable all interrupts */
4049:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
4050:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4051:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable Address Acknowledge */
4052:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Instance->CR2 |= I2C_CR2_NACK;
4053:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4054:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Clear Configuration Register 2 */
4055:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_RESET_CR2(hi2c);
4056:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4057:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Flush TX register */
4058:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_Flush_TXDR(hi2c);
4059:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4060:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* If a DMA is ongoing, Update handle size context */
4061:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
4062:HALLIB/Src/stm32f7xx_hal_i2c.c ****       ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
4063:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4064:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
4065:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4066:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4067:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* All data are not transferred, so set error code accordingly */
4068:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->XferCount != 0U)
4069:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4070:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set ErrorCode corresponding to a Non-Acknowledge */
4071:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
4072:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4073:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4074:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Store Last receive data if any */
4075:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((ITFlags & I2C_FLAG_RXNE) != RESET))
4076:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4077:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Read data from RXDR */
4078:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
ARM GAS  /tmp/ccyfI9lR.s 			page 73


4079:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4080:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((hi2c->XferSize > 0U))
4081:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4082:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
4083:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
4084:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4085:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set ErrorCode corresponding to a Non-Acknowledge */
4086:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
4087:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4088:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4089:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4090:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->PreviousState = I2C_STATE_NONE;
4091:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Mode = HAL_I2C_MODE_NONE;
4092:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferISR = NULL;
4093:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4094:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
4095:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4096:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the corresponding callback to inform upper layer of End of Transfer */
4097:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_ITError(hi2c, hi2c->ErrorCode);
4098:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4099:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
4100:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->State == HAL_I2C_STATE_LISTEN)
4101:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4102:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Call I2C Listen complete process */
4103:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_ITListenCplt(hi2c, ITFlags);
4104:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4105:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4106:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
4107:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4108:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
4109:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
4110:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4111:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
4112:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
4113:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4114:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
4115:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_ListenCpltCallback(hi2c);
4116:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4117:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Call the corresponding callback to inform upper layer of End of Transfer */
4118:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
4119:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4120:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
4121:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4122:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
4123:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
4124:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4125:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the Slave Rx Complete callback */
4126:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_SlaveRxCpltCallback(hi2c);
4127:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4128:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
4129:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4130:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
4131:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4132:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
4133:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
4134:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4135:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the Slave Tx Complete callback */
ARM GAS  /tmp/ccyfI9lR.s 			page 74


4136:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_SlaveTxCpltCallback(hi2c);
4137:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4138:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4139:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4140:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4141:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  I2C Listen complete process.
4142:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c I2C handle.
4143:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ITFlags Interrupt flags to handle.
4144:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
4145:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4146:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
4147:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
4148:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset handle parameters */
4149:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferOptions = I2C_NO_OPTION_FRAME;
4150:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->PreviousState = I2C_STATE_NONE;
4151:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->State = HAL_I2C_STATE_READY;
4152:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Mode = HAL_I2C_MODE_NONE;
4153:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferISR = NULL;
4154:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4155:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Store Last receive data if any */
4156:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (((ITFlags & I2C_FLAG_RXNE) != RESET))
4157:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4158:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Read data from RXDR */
4159:HALLIB/Src/stm32f7xx_hal_i2c.c ****     (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
4160:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4161:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((hi2c->XferSize > 0U))
4162:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4163:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
4164:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
4165:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4166:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set ErrorCode corresponding to a Non-Acknowledge */
4167:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
4168:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4169:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4170:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4171:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable all Interrupts*/
4172:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
4173:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4174:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Clear NACK Flag */
4175:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
4176:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4177:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process Unlocked */
4178:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_UNLOCK(hi2c);
4179:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4180:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
4181:HALLIB/Src/stm32f7xx_hal_i2c.c ****   HAL_I2C_ListenCpltCallback(hi2c);
4182:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4183:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4184:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4185:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  I2C interrupts error process.
4186:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c I2C handle.
4187:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  ErrorCode Error code to handle.
4188:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
4189:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4190:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
4191:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
4192:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset handle parameters */
ARM GAS  /tmp/ccyfI9lR.s 			page 75


4193:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Mode          = HAL_I2C_MODE_NONE;
4194:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
4195:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferCount     = 0U;
4196:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4197:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Set new error code */
4198:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->ErrorCode |= ErrorCode;
4199:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4200:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable Interrupts */
4201:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
4202:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
4203:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
4204:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4205:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable all interrupts, except interrupts related to LISTEN state */
4206:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
4207:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4208:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* keep HAL_I2C_STATE_LISTEN if set */
4209:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State         = HAL_I2C_STATE_LISTEN;
4210:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = I2C_STATE_NONE;
4211:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR       = I2C_Slave_ISR_IT;
4212:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4213:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
4214:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4215:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable all interrupts */
4216:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
4217:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4218:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* If state is an abort treatment on goind, don't change state */
4219:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* This change will be do later */
4220:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->State != HAL_I2C_STATE_ABORT)
4221:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4222:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Set HAL_I2C_STATE_READY */
4223:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->State         = HAL_I2C_STATE_READY;
4224:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4225:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = I2C_STATE_NONE;
4226:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR       = NULL;
4227:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4228:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4229:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Abort DMA TX transfer if any */
4230:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
4231:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4232:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
4233:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4234:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the I2C DMA Abort callback :
4235:HALLIB/Src/stm32f7xx_hal_i2c.c ****        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
4236:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
4237:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4238:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
4239:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
4240:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4241:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Abort DMA TX */
4242:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
4243:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4244:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Call Directly XferAbortCallback function in case of error */
4245:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
4246:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4247:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4248:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Abort DMA RX transfer if any */
4249:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
ARM GAS  /tmp/ccyfI9lR.s 			page 76


4250:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4251:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
4252:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4253:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the I2C DMA Abort callback :
4254:HALLIB/Src/stm32f7xx_hal_i2c.c ****        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
4255:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
4256:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4257:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
4258:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
4259:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4260:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Abort DMA RX */
4261:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
4262:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4263:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
4264:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
4265:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4266:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4267:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else if (hi2c->State == HAL_I2C_STATE_ABORT)
4268:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4269:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
4270:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4271:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
4272:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
4273:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4274:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the corresponding callback to inform upper layer of End of Transfer */
4275:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_AbortCpltCallback(hi2c);
4276:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4277:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
4278:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4279:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
4280:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
4281:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4282:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the corresponding callback to inform upper layer of End of Transfer */
4283:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_ErrorCallback(hi2c);
4284:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4285:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4286:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4287:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4288:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  I2C Tx data register flush process.
4289:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c I2C handle.
4290:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
4291:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4292:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
4293:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
  28              		.loc 1 4293 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
4294:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* If a pending TXIS flag is set */
4295:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Write a dummy data in TXDR to clear it */
4296:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
  34              		.loc 1 4296 0
  35 0000 0368     		ldr	r3, [r0]
  36 0002 9A69     		ldr	r2, [r3, #24]
  37 0004 12F0020F 		tst	r2, #2
ARM GAS  /tmp/ccyfI9lR.s 			page 77


  38 0008 01D0     		beq	.L2
4297:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4298:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Instance->TXDR = 0x00U;
  39              		.loc 1 4298 0
  40 000a 0022     		movs	r2, #0
  41 000c 9A62     		str	r2, [r3, #40]
  42              	.L2:
4299:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4300:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4301:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Flush TX register if not empty */
4302:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
  43              		.loc 1 4302 0
  44 000e 0368     		ldr	r3, [r0]
  45 0010 9A69     		ldr	r2, [r3, #24]
  46 0012 12F0010F 		tst	r2, #1
  47 0016 03D1     		bne	.L1
4303:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4304:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
  48              		.loc 1 4304 0
  49 0018 9A69     		ldr	r2, [r3, #24]
  50 001a 42F00102 		orr	r2, r2, #1
  51 001e 9A61     		str	r2, [r3, #24]
  52              	.L1:
  53 0020 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE194:
  57 0022 00BF     		.section	.text.I2C_DMASlaveTransmitCplt,"ax",%progbits
  58              		.align	2
  59              		.thumb
  60              		.thumb_func
  62              	I2C_DMASlaveTransmitCplt:
  63              	.LFB196:
4305:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4306:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4307:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4308:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4309:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  DMA I2C master transmit process complete callback.
4310:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hdma DMA handle
4311:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
4312:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4313:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
4314:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
4315:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
4316:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4317:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable DMA Request */
4318:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
4319:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4320:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* If last transfer, enable STOP interrupt */
4321:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->XferCount == 0U)
4322:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4323:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable STOP interrupt */
4324:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
4325:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4326:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* else prepare a new DMA transfer and enable TCReload interrupt */
4327:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
4328:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4329:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Update Buffer pointer */
ARM GAS  /tmp/ccyfI9lR.s 			page 78


4330:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr += hi2c->XferSize;
4331:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4332:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the XferSize to transfer */
4333:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
4334:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4335:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
4336:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4337:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
4338:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4339:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
4340:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4341:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4342:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable the DMA stream */
4343:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c-
4344:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4345:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable TC interrupts */
4346:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
4347:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4348:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4349:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4350:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4351:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  DMA I2C slave transmit process complete callback.
4352:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hdma DMA handle
4353:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
4354:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4355:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
4356:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
  64              		.loc 1 4356 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69              	.LVL1:
  70 0000 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE196:
  74 0002 00BF     		.section	.text.I2C_DMASlaveReceiveCplt,"ax",%progbits
  75              		.align	2
  76              		.thumb
  77              		.thumb_func
  79              	I2C_DMASlaveReceiveCplt:
  80              	.LFB198:
4357:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
4358:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hdma);
4359:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4360:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* No specific action, Master fully manage the generation of STOP condition */
4361:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Mean that this generation can arrive at any time, at the end or during DMA process */
4362:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* So STOP condition should be manage through Interrupt treatment */
4363:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4364:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4365:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4366:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief DMA I2C master receive process complete callback.
4367:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hdma DMA handle
4368:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
4369:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4370:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
4371:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
ARM GAS  /tmp/ccyfI9lR.s 			page 79


4372:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
4373:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4374:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable DMA Request */
4375:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
4376:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4377:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* If last transfer, enable STOP interrupt */
4378:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->XferCount == 0U)
4379:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4380:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable STOP interrupt */
4381:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
4382:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4383:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* else prepare a new DMA transfer and enable TCReload interrupt */
4384:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
4385:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4386:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Update Buffer pointer */
4387:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->pBuffPtr += hi2c->XferSize;
4388:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4389:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Set the XferSize to transfer */
4390:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (hi2c->XferCount > MAX_NBYTE_SIZE)
4391:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4392:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = MAX_NBYTE_SIZE;
4393:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4394:HALLIB/Src/stm32f7xx_hal_i2c.c ****     else
4395:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4396:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize = hi2c->XferCount;
4397:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4398:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4399:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable the DMA stream */
4400:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c-
4401:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4402:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable TC interrupts */
4403:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
4404:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4405:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4406:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4407:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4408:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  DMA I2C slave receive process complete callback.
4409:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hdma DMA handle
4410:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
4411:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4412:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
4413:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
  81              		.loc 1 4413 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86              	.LVL2:
  87 0000 7047     		bx	lr
  88              		.cfi_endproc
  89              	.LFE198:
  91 0002 00BF     		.section	.text.I2C_TransferConfig,"ax",%progbits
  92              		.align	2
  93              		.thumb
  94              		.thumb_func
  96              	I2C_TransferConfig:
  97              	.LFB206:
ARM GAS  /tmp/ccyfI9lR.s 			page 80


4414:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
4415:HALLIB/Src/stm32f7xx_hal_i2c.c ****   UNUSED(hdma);
4416:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4417:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* No specific action, Master fully manage the generation of STOP condition */
4418:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Mean that this generation can arrive at any time, at the end or during DMA process */
4419:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* So STOP condition should be manage through Interrupt treatment */
4420:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4421:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4422:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4423:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  DMA I2C communication error callback.
4424:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param hdma DMA handle
4425:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
4426:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4427:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMAError(DMA_HandleTypeDef *hdma)
4428:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
4429:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
4430:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4431:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable Acknowledge */
4432:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Instance->CR2 |= I2C_CR2_NACK;
4433:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4434:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Call the corresponding callback to inform upper layer of End of Transfer */
4435:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
4436:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4437:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4438:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4439:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief DMA I2C communication abort callback
4440:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *        (To be called at end of DMA Abort procedure).
4441:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param hdma DMA handle.
4442:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
4443:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4444:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
4445:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
4446:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
4447:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4448:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable Acknowledge */
4449:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Instance->CR2 |= I2C_CR2_NACK;
4450:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4451:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset AbortCpltCallback */
4452:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->hdmatx->XferAbortCallback = NULL;
4453:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->hdmarx->XferAbortCallback = NULL;
4454:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4455:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check if come from abort from user */
4456:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_ABORT)
4457:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4458:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
4459:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4460:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the corresponding callback to inform upper layer of End of Transfer */
4461:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_AbortCpltCallback(hi2c);
4462:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4463:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
4464:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4465:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Call the corresponding callback to inform upper layer of End of Transfer */
4466:HALLIB/Src/stm32f7xx_hal_i2c.c ****     HAL_I2C_ErrorCallback(hi2c);
4467:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4468:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4469:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4470:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
ARM GAS  /tmp/ccyfI9lR.s 			page 81


4471:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  This function handles I2C Communication Timeout.
4472:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
4473:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
4474:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Flag Specifies the I2C flag to check.
4475:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Status The new Flag status (SET or RESET).
4476:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
4477:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Tickstart Tick start value
4478:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
4479:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4480:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagSta
4481:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
4482:HALLIB/Src/stm32f7xx_hal_i2c.c ****   while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
4483:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4484:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Check for the Timeout */
4485:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (Timeout != HAL_MAX_DELAY)
4486:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4487:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
4488:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
4489:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->State = HAL_I2C_STATE_READY;
4490:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Mode = HAL_I2C_MODE_NONE;
4491:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4492:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
4493:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
4494:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
4495:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
4496:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4497:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4498:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
4499:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4500:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4501:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4502:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  This function handles I2C Communication Timeout for specific usage of TXIS flag.
4503:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
4504:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
4505:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
4506:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Tickstart Tick start value
4507:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
4508:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4509:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, 
4510:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
4511:HALLIB/Src/stm32f7xx_hal_i2c.c ****   while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
4512:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4513:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Check if a NACK is detected */
4514:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
4515:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4516:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_ERROR;
4517:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4518:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4519:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Check for the Timeout */
4520:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (Timeout != HAL_MAX_DELAY)
4521:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4522:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
4523:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
4524:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
4525:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->State = HAL_I2C_STATE_READY;
4526:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Mode = HAL_I2C_MODE_NONE;
4527:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 82


4528:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
4529:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
4530:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4531:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
4532:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
4533:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4534:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4535:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
4536:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4537:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4538:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4539:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  This function handles I2C Communication Timeout for specific usage of STOP flag.
4540:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
4541:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
4542:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
4543:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Tickstart Tick start value
4544:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
4545:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4546:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, 
4547:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
4548:HALLIB/Src/stm32f7xx_hal_i2c.c ****   while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
4549:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4550:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Check if a NACK is detected */
4551:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
4552:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4553:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_ERROR;
4554:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4555:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4556:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Check for the Timeout */
4557:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
4558:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4559:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
4560:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->State = HAL_I2C_STATE_READY;
4561:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Mode = HAL_I2C_MODE_NONE;
4562:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4563:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Process Unlocked */
4564:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_UNLOCK(hi2c);
4565:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4566:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
4567:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4568:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4569:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
4570:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4571:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4572:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4573:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  This function handles I2C Communication Timeout for specific usage of RXNE flag.
4574:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
4575:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
4576:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
4577:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Tickstart Tick start value
4578:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
4579:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4580:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, 
4581:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
4582:HALLIB/Src/stm32f7xx_hal_i2c.c ****   while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
4583:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4584:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Check if a NACK is detected */
ARM GAS  /tmp/ccyfI9lR.s 			page 83


4585:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
4586:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4587:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_ERROR;
4588:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4589:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4590:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Check if a STOPF is detected */
4591:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
4592:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4593:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Check if an RXNE is pending */
4594:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Store Last receive data if any */
4595:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
4596:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
4597:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Return HAL_OK */
4598:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* The Reading of data from RXDR will be done in caller function */
4599:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_OK;
4600:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
4601:HALLIB/Src/stm32f7xx_hal_i2c.c ****       else
4602:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
4603:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Clear STOP Flag */
4604:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
4605:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4606:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Clear Configuration Register 2 */
4607:HALLIB/Src/stm32f7xx_hal_i2c.c ****         I2C_RESET_CR2(hi2c);
4608:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4609:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
4610:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->State = HAL_I2C_STATE_READY;
4611:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Mode = HAL_I2C_MODE_NONE;
4612:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4613:HALLIB/Src/stm32f7xx_hal_i2c.c ****         /* Process Unlocked */
4614:HALLIB/Src/stm32f7xx_hal_i2c.c ****         __HAL_UNLOCK(hi2c);
4615:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4616:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
4617:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
4618:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4619:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4620:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Check for the Timeout */
4621:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
4622:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4623:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
4624:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->State = HAL_I2C_STATE_READY;
4625:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4626:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Process Unlocked */
4627:HALLIB/Src/stm32f7xx_hal_i2c.c ****       __HAL_UNLOCK(hi2c);
4628:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4629:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
4630:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4631:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4632:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
4633:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4634:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4635:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4636:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  This function handles Acknowledge failed detection during an I2C Communication.
4637:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
4638:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
4639:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Timeout Timeout duration
4640:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Tickstart Tick start value
4641:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
ARM GAS  /tmp/ccyfI9lR.s 			page 84


4642:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4643:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_
4644:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
4645:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
4646:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4647:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Wait until STOP Flag is reset */
4648:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* AutoEnd should be initiate after AF */
4649:HALLIB/Src/stm32f7xx_hal_i2c.c ****     while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
4650:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4651:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Check for the Timeout */
4652:HALLIB/Src/stm32f7xx_hal_i2c.c ****       if (Timeout != HAL_MAX_DELAY)
4653:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
4654:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
4655:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
4656:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->State = HAL_I2C_STATE_READY;
4657:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->Mode = HAL_I2C_MODE_NONE;
4658:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4659:HALLIB/Src/stm32f7xx_hal_i2c.c ****           /* Process Unlocked */
4660:HALLIB/Src/stm32f7xx_hal_i2c.c ****           __HAL_UNLOCK(hi2c);
4661:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
4662:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
4663:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
4664:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4665:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4666:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear NACKF Flag */
4667:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
4668:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4669:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear STOP Flag */
4670:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
4671:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4672:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Flush TX register */
4673:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Flush_TXDR(hi2c);
4674:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4675:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Clear Configuration Register 2 */
4676:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_RESET_CR2(hi2c);
4677:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4678:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_AF;
4679:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
4680:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode = HAL_I2C_MODE_NONE;
4681:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4682:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Process Unlocked */
4683:HALLIB/Src/stm32f7xx_hal_i2c.c ****     __HAL_UNLOCK(hi2c);
4684:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4685:HALLIB/Src/stm32f7xx_hal_i2c.c ****     return HAL_ERROR;
4686:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4687:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
4688:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
4689:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4690:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4691:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Handles I2Cx communication when starting transfer or during transfer (TC or TCR flag ar
4692:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c I2C handle.
4693:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  DevAddress Specifies the slave address to be programmed.
4694:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Size Specifies the number of bytes to be programmed.
4695:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *   This parameter must be a value between 0 and 255.
4696:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Mode New state of the I2C START condition generation.
4697:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *   This parameter can be one of the following values:
4698:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *     @arg @ref I2C_RELOAD_MODE Enable Reload mode .
ARM GAS  /tmp/ccyfI9lR.s 			page 85


4699:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *     @arg @ref I2C_AUTOEND_MODE Enable Automatic end mode.
4700:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *     @arg @ref I2C_SOFTEND_MODE Enable Software end mode.
4701:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  Request New state of the I2C START condition generation.
4702:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *   This parameter can be one of the following values:
4703:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *     @arg @ref I2C_NO_STARTSTOP Don't Generate stop and start condition.
4704:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *     @arg @ref I2C_GENERATE_STOP Generate stop condition (Size should be set to 0).
4705:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
4706:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
4707:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval None
4708:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4709:HALLIB/Src/stm32f7xx_hal_i2c.c **** static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_
4710:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
  98              		.loc 1 4710 0
  99              		.cfi_startproc
 100              		@ args = 4, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103              	.LVL3:
 104              		.loc 1 4710 0
 105 0000 70B4     		push	{r4, r5, r6}
 106              	.LCFI0:
 107              		.cfi_def_cfa_offset 12
 108              		.cfi_offset 4, -12
 109              		.cfi_offset 5, -8
 110              		.cfi_offset 6, -4
 111 0002 039E     		ldr	r6, [sp, #12]
4711:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
4712:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
4713:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_TRANSFER_MODE(Mode));
4714:HALLIB/Src/stm32f7xx_hal_i2c.c ****   assert_param(IS_TRANSFER_REQUEST(Request));
4715:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4716:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* update CR2 register */
4717:HALLIB/Src/stm32f7xx_hal_i2c.c ****   MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEN
 112              		.loc 1 4717 0
 113 0004 0568     		ldr	r5, [r0]
 114 0006 6C68     		ldr	r4, [r5, #4]
 115 0008 700D     		lsrs	r0, r6, #21
 116              	.LVL4:
 117 000a 00F48060 		and	r0, r0, #1024
 118 000e 40F07F70 		orr	r0, r0, #66846720
 119 0012 40F45830 		orr	r0, r0, #221184
 120 0016 40F47F70 		orr	r0, r0, #1020
 121 001a 40F00300 		orr	r0, r0, #3
 122 001e 24EA0000 		bic	r0, r4, r0
 123 0022 C1F30901 		ubfx	r1, r1, #0, #10
 124              	.LVL5:
 125 0026 41EA0242 		orr	r2, r1, r2, lsl #16
 126              	.LVL6:
 127 002a 1343     		orrs	r3, r3, r2
 128              	.LVL7:
 129 002c 46EA0302 		orr	r2, r6, r3
 130 0030 0243     		orrs	r2, r2, r0
 131 0032 6A60     		str	r2, [r5, #4]
4718:HALLIB/Src/stm32f7xx_hal_i2c.c ****              (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_
4719:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 132              		.loc 1 4719 0
 133 0034 70BC     		pop	{r4, r5, r6}
ARM GAS  /tmp/ccyfI9lR.s 			page 86


 134              	.LCFI1:
 135              		.cfi_restore 6
 136              		.cfi_restore 5
 137              		.cfi_restore 4
 138              		.cfi_def_cfa_offset 0
 139              	.LVL8:
 140 0036 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE206:
 144              		.section	.text.I2C_Enable_IRQ,"ax",%progbits
 145              		.align	2
 146              		.thumb
 147              		.thumb_func
 149              	I2C_Enable_IRQ:
 150              	.LFB207:
4720:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4721:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4722:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Manage the enabling of Interrupts.
4723:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
4724:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
4725:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
4726:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
4727:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4728:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
4729:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
 151              		.loc 1 4729 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156              	.LVL9:
4730:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tmpisr = 0U;
4731:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4732:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 157              		.loc 1 4732 0
 158 0000 436B     		ldr	r3, [r0, #52]
 159 0002 1C4A     		ldr	r2, .L20
 160 0004 9342     		cmp	r3, r2
 161 0006 02D0     		beq	.L9
 162              		.loc 1 4732 0 is_stmt 0 discriminator 1
 163 0008 1B4A     		ldr	r2, .L20+4
 164 000a 9342     		cmp	r3, r2
 165 000c 15D1     		bne	.L10
 166              	.L9:
4733:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (hi2c->XferISR == I2C_Slave_ISR_DMA))
4734:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4735:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 167              		.loc 1 4735 0 is_stmt 1
 168 000e 01F00403 		and	r3, r1, #4
 169 0012 9BB2     		uxth	r3, r3
 170 0014 03B1     		cbz	r3, .L11
4736:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4737:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable ERR, STOP, NACK and ADDR interrupts */
4738:HALLIB/Src/stm32f7xx_hal_i2c.c ****       tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 171              		.loc 1 4738 0
 172 0016 B823     		movs	r3, #184
 173              	.L11:
ARM GAS  /tmp/ccyfI9lR.s 			page 87


 174              	.LVL10:
4739:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4740:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4741:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 175              		.loc 1 4741 0
 176 0018 01F01102 		and	r2, r1, #17
 177 001c 112A     		cmp	r2, #17
 178 001e 01D1     		bne	.L12
4742:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4743:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable ERR and NACK interrupts */
4744:HALLIB/Src/stm32f7xx_hal_i2c.c ****       tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 179              		.loc 1 4744 0
 180 0020 43F09003 		orr	r3, r3, #144
 181              	.LVL11:
 182              	.L12:
 183 0024 01F01201 		and	r1, r1, #18
 184              	.LVL12:
4745:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4746:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4747:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 185              		.loc 1 4747 0
 186 0028 1229     		cmp	r1, #18
 187 002a 01D1     		bne	.L13
4748:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4749:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable STOP interrupts */
4750:HALLIB/Src/stm32f7xx_hal_i2c.c ****       tmpisr |= I2C_IT_STOPI;
 188              		.loc 1 4750 0
 189 002c 43F02003 		orr	r3, r3, #32
 190              	.LVL13:
 191              	.L13:
4751:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4752:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4753:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 192              		.loc 1 4753 0
 193 0030 1229     		cmp	r1, #18
 194 0032 18D1     		bne	.L14
4754:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4755:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable TC interrupts */
4756:HALLIB/Src/stm32f7xx_hal_i2c.c ****       tmpisr |= I2C_IT_TCI;
 195              		.loc 1 4756 0
 196 0034 43F04003 		orr	r3, r3, #64
 197              	.LVL14:
 198 0038 15E0     		b	.L14
 199              	.LVL15:
 200              	.L10:
4757:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4758:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4759:HALLIB/Src/stm32f7xx_hal_i2c.c ****   else
4760:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4761:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 201              		.loc 1 4761 0
 202 003a 01F00403 		and	r3, r1, #4
 203 003e 9BB2     		uxth	r3, r3
 204 0040 03B1     		cbz	r3, .L15
4762:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4763:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable ERR, STOP, NACK, and ADDR interrupts */
4764:HALLIB/Src/stm32f7xx_hal_i2c.c ****       tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
ARM GAS  /tmp/ccyfI9lR.s 			page 88


 205              		.loc 1 4764 0
 206 0042 B823     		movs	r3, #184
 207              	.L15:
 208              	.LVL16:
4765:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4766:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4767:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 209              		.loc 1 4767 0
 210 0044 11F0010F 		tst	r1, #1
 211 0048 01D0     		beq	.L16
4768:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4769:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable ERR, TC, STOP, NACK and RXI interrupts */
4770:HALLIB/Src/stm32f7xx_hal_i2c.c ****       tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 212              		.loc 1 4770 0
 213 004a 43F0F203 		orr	r3, r3, #242
 214              	.LVL17:
 215              	.L16:
4771:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4772:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4773:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 216              		.loc 1 4773 0
 217 004e 01F00202 		and	r2, r1, #2
 218 0052 92B2     		uxth	r2, r2
 219 0054 0AB1     		cbz	r2, .L17
4774:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4775:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable ERR, TC, STOP, NACK and TXI interrupts */
4776:HALLIB/Src/stm32f7xx_hal_i2c.c ****       tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 220              		.loc 1 4776 0
 221 0056 43F0F403 		orr	r3, r3, #244
 222              	.LVL18:
 223              	.L17:
4777:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4778:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4779:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 224              		.loc 1 4779 0
 225 005a 01F01201 		and	r1, r1, #18
 226              	.LVL19:
 227 005e 1229     		cmp	r1, #18
 228 0060 01D1     		bne	.L14
4780:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4781:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Enable STOP interrupts */
4782:HALLIB/Src/stm32f7xx_hal_i2c.c ****       tmpisr |= I2C_IT_STOPI;
 229              		.loc 1 4782 0
 230 0062 43F02003 		orr	r3, r3, #32
 231              	.LVL20:
 232              	.L14:
4783:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4784:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4785:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4786:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Enable interrupts only at the end */
4787:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* to avoid the risk of I2C interrupt handle execution before */
4788:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* all interrupts requested done */
4789:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 233              		.loc 1 4789 0
 234 0066 0168     		ldr	r1, [r0]
 235 0068 0A68     		ldr	r2, [r1]
 236 006a 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccyfI9lR.s 			page 89


 237              	.LVL21:
 238 006c 0B60     		str	r3, [r1]
4790:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4791:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
4792:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 239              		.loc 1 4792 0
 240 006e 0020     		movs	r0, #0
 241              	.LVL22:
 242 0070 7047     		bx	lr
 243              	.L21:
 244 0072 00BF     		.align	2
 245              	.L20:
 246 0074 00000000 		.word	I2C_Master_ISR_DMA
 247 0078 00000000 		.word	I2C_Slave_ISR_DMA
 248              		.cfi_endproc
 249              	.LFE207:
 251              		.section	.text.I2C_Disable_IRQ,"ax",%progbits
 252              		.align	2
 253              		.thumb
 254              		.thumb_func
 256              	I2C_Disable_IRQ:
 257              	.LFB208:
4793:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4794:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
4795:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @brief  Manage the disabling of Interrupts.
4796:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
4797:HALLIB/Src/stm32f7xx_hal_i2c.c ****   *                the configuration information for the specified I2C.
4798:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
4799:HALLIB/Src/stm32f7xx_hal_i2c.c ****   * @retval HAL status
4800:HALLIB/Src/stm32f7xx_hal_i2c.c ****   */
4801:HALLIB/Src/stm32f7xx_hal_i2c.c **** static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
4802:HALLIB/Src/stm32f7xx_hal_i2c.c **** {
 258              		.loc 1 4802 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263              	.LVL23:
 264 0000 10B4     		push	{r4}
 265              	.LCFI2:
 266              		.cfi_def_cfa_offset 4
 267              		.cfi_offset 4, -4
 268              	.LVL24:
4803:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tmpisr = 0U;
4804:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4805:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 269              		.loc 1 4805 0
 270 0002 11F0010F 		tst	r1, #1
 271 0006 07D0     		beq	.L29
 272              	.LVL25:
4806:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4807:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable TC and TXI interrupts */
4808:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
4809:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4810:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 273              		.loc 1 4810 0
 274 0008 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
ARM GAS  /tmp/ccyfI9lR.s 			page 90


 275 000c 03F02803 		and	r3, r3, #40
 276 0010 282B     		cmp	r3, #40
 277 0012 03D1     		bne	.L30
4808:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 278              		.loc 1 4808 0
 279 0014 4223     		movs	r3, #66
 280 0016 02E0     		b	.L23
 281              	.LVL26:
 282              	.L29:
4803:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tmpisr = 0U;
 283              		.loc 1 4803 0
 284 0018 0023     		movs	r3, #0
 285 001a 00E0     		b	.L23
 286              	.LVL27:
 287              	.L30:
4811:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4812:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable NACK and STOP interrupts */
4813:HALLIB/Src/stm32f7xx_hal_i2c.c ****       tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 288              		.loc 1 4813 0
 289 001c F223     		movs	r3, #242
 290              	.LVL28:
 291              	.L23:
4814:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4815:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4816:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4817:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 292              		.loc 1 4817 0
 293 001e 01F00202 		and	r2, r1, #2
 294 0022 92B2     		uxth	r2, r2
 295 0024 5AB1     		cbz	r2, .L24
4818:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4819:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable TC and RXI interrupts */
4820:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 296              		.loc 1 4820 0
 297 0026 43F04404 		orr	r4, r3, #68
 298              	.LVL29:
4821:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4822:HALLIB/Src/stm32f7xx_hal_i2c.c ****     if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 299              		.loc 1 4822 0
 300 002a 90F84120 		ldrb	r2, [r0, #65]	@ zero_extendqisi2
 301 002e 02F02802 		and	r2, r2, #40
 302 0032 282A     		cmp	r2, #40
 303 0034 02D0     		beq	.L31
4823:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
4824:HALLIB/Src/stm32f7xx_hal_i2c.c ****       /* Disable NACK and STOP interrupts */
4825:HALLIB/Src/stm32f7xx_hal_i2c.c ****       tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 304              		.loc 1 4825 0
 305 0036 43F0F403 		orr	r3, r3, #244
 306              	.LVL30:
 307 003a 00E0     		b	.L24
 308              	.LVL31:
 309              	.L31:
4820:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 310              		.loc 1 4820 0
 311 003c 2346     		mov	r3, r4
 312              	.LVL32:
 313              	.L24:
ARM GAS  /tmp/ccyfI9lR.s 			page 91


4826:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
4827:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4828:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4829:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 314              		.loc 1 4829 0
 315 003e 01F00402 		and	r2, r1, #4
 316 0042 92B2     		uxth	r2, r2
 317 0044 0AB1     		cbz	r2, .L25
4830:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4831:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Disable ADDR, NACK and STOP interrupts */
4832:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 318              		.loc 1 4832 0
 319 0046 43F0B803 		orr	r3, r3, #184
 320              	.LVL33:
 321              	.L25:
4833:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4834:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4835:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 322              		.loc 1 4835 0
 323 004a 01F01102 		and	r2, r1, #17
 324 004e 112A     		cmp	r2, #17
 325 0050 01D1     		bne	.L26
4836:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4837:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable ERR and NACK interrupts */
4838:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 326              		.loc 1 4838 0
 327 0052 43F09003 		orr	r3, r3, #144
 328              	.LVL34:
 329              	.L26:
 330 0056 01F01201 		and	r1, r1, #18
 331              	.LVL35:
4839:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4840:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4841:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 332              		.loc 1 4841 0
 333 005a 1229     		cmp	r1, #18
 334 005c 01D1     		bne	.L27
4842:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4843:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable STOP interrupts */
4844:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tmpisr |= I2C_IT_STOPI;
 335              		.loc 1 4844 0
 336 005e 43F02003 		orr	r3, r3, #32
 337              	.LVL36:
 338              	.L27:
4845:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4846:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4847:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 339              		.loc 1 4847 0
 340 0062 1229     		cmp	r1, #18
 341 0064 01D1     		bne	.L28
4848:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
4849:HALLIB/Src/stm32f7xx_hal_i2c.c ****     /* Enable TC interrupts */
4850:HALLIB/Src/stm32f7xx_hal_i2c.c ****     tmpisr |= I2C_IT_TCI;
 342              		.loc 1 4850 0
 343 0066 43F04003 		orr	r3, r3, #64
 344              	.LVL37:
 345              	.L28:
ARM GAS  /tmp/ccyfI9lR.s 			page 92


4851:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
4852:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4853:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Disable interrupts only at the end */
4854:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* to avoid a breaking situation like at "t" time */
4855:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* all disable interrupts request are not done */
4856:HALLIB/Src/stm32f7xx_hal_i2c.c ****   __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 346              		.loc 1 4856 0
 347 006a 0168     		ldr	r1, [r0]
 348 006c 0A68     		ldr	r2, [r1]
 349 006e 22EA0303 		bic	r3, r2, r3
 350              	.LVL38:
 351 0072 0B60     		str	r3, [r1]
4857:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
4858:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return HAL_OK;
4859:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 352              		.loc 1 4859 0
 353 0074 0020     		movs	r0, #0
 354              	.LVL39:
 355 0076 5DF8044B 		ldr	r4, [sp], #4
 356              	.LCFI3:
 357              		.cfi_restore 4
 358              		.cfi_def_cfa_offset 0
 359 007a 7047     		bx	lr
 360              		.cfi_endproc
 361              	.LFE208:
 363              		.section	.text.I2C_IsAcknowledgeFailed,"ax",%progbits
 364              		.align	2
 365              		.thumb
 366              		.thumb_func
 368              	I2C_IsAcknowledgeFailed:
 369              	.LFB205:
4644:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 370              		.loc 1 4644 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              	.LVL40:
 375 0000 70B5     		push	{r4, r5, r6, lr}
 376              	.LCFI4:
 377              		.cfi_def_cfa_offset 16
 378              		.cfi_offset 4, -16
 379              		.cfi_offset 5, -12
 380              		.cfi_offset 6, -8
 381              		.cfi_offset 14, -4
 382 0002 0446     		mov	r4, r0
 383 0004 0D46     		mov	r5, r1
 384 0006 1646     		mov	r6, r2
4645:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 385              		.loc 1 4645 0
 386 0008 0368     		ldr	r3, [r0]
 387 000a 9B69     		ldr	r3, [r3, #24]
 388 000c 13F0100F 		tst	r3, #16
 389 0010 14D1     		bne	.L36
4687:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 390              		.loc 1 4687 0
 391 0012 0020     		movs	r0, #0
 392              	.LVL41:
ARM GAS  /tmp/ccyfI9lR.s 			page 93


 393 0014 70BD     		pop	{r4, r5, r6, pc}
 394              	.LVL42:
 395              	.L38:
4652:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 396              		.loc 1 4652 0
 397 0016 B5F1FF3F 		cmp	r5, #-1
 398 001a 0FD0     		beq	.L36
4654:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 399              		.loc 1 4654 0
 400 001c 25B1     		cbz	r5, .L37
4654:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 401              		.loc 1 4654 0 is_stmt 0 discriminator 1
 402 001e FFF7FEFF 		bl	HAL_GetTick
 403              	.LVL43:
 404 0022 801B     		subs	r0, r0, r6
 405 0024 8542     		cmp	r5, r0
 406 0026 09D2     		bcs	.L36
 407              	.L37:
4656:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->Mode = HAL_I2C_MODE_NONE;
 408              		.loc 1 4656 0 is_stmt 1
 409 0028 2023     		movs	r3, #32
 410 002a 84F84130 		strb	r3, [r4, #65]
4657:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 411              		.loc 1 4657 0
 412 002e 0023     		movs	r3, #0
 413 0030 84F84230 		strb	r3, [r4, #66]
4660:HALLIB/Src/stm32f7xx_hal_i2c.c ****           return HAL_TIMEOUT;
 414              		.loc 1 4660 0
 415 0034 84F84030 		strb	r3, [r4, #64]
4661:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 416              		.loc 1 4661 0
 417 0038 0320     		movs	r0, #3
 418 003a 70BD     		pop	{r4, r5, r6, pc}
 419              	.LVL44:
 420              	.L36:
4649:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 421              		.loc 1 4649 0
 422 003c 2368     		ldr	r3, [r4]
 423 003e 9A69     		ldr	r2, [r3, #24]
 424 0040 12F0200F 		tst	r2, #32
 425 0044 E7D0     		beq	.L38
4667:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 426              		.loc 1 4667 0
 427 0046 1022     		movs	r2, #16
 428 0048 DA61     		str	r2, [r3, #28]
4670:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 429              		.loc 1 4670 0
 430 004a 2368     		ldr	r3, [r4]
 431 004c 2025     		movs	r5, #32
 432              	.LVL45:
 433 004e DD61     		str	r5, [r3, #28]
4673:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 434              		.loc 1 4673 0
 435 0050 2046     		mov	r0, r4
 436 0052 FFF7FEFF 		bl	I2C_Flush_TXDR
 437              	.LVL46:
4676:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 94


 438              		.loc 1 4676 0
 439 0056 2268     		ldr	r2, [r4]
 440 0058 5368     		ldr	r3, [r2, #4]
 441 005a 23F0FF73 		bic	r3, r3, #33423360
 442 005e 23F48B33 		bic	r3, r3, #71168
 443 0062 23F4FF73 		bic	r3, r3, #510
 444 0066 23F00103 		bic	r3, r3, #1
 445 006a 5360     		str	r3, [r2, #4]
4678:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
 446              		.loc 1 4678 0
 447 006c 0423     		movs	r3, #4
 448 006e 6364     		str	r3, [r4, #68]
4679:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode = HAL_I2C_MODE_NONE;
 449              		.loc 1 4679 0
 450 0070 84F84150 		strb	r5, [r4, #65]
4680:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 451              		.loc 1 4680 0
 452 0074 0023     		movs	r3, #0
 453 0076 84F84230 		strb	r3, [r4, #66]
4683:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 454              		.loc 1 4683 0
 455 007a 84F84030 		strb	r3, [r4, #64]
4685:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 456              		.loc 1 4685 0
 457 007e 0120     		movs	r0, #1
4688:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 458              		.loc 1 4688 0
 459 0080 70BD     		pop	{r4, r5, r6, pc}
 460              		.cfi_endproc
 461              	.LFE205:
 463 0082 00BF     		.section	.text.I2C_WaitOnTXISFlagUntilTimeout,"ax",%progbits
 464              		.align	2
 465              		.thumb
 466              		.thumb_func
 468              	I2C_WaitOnTXISFlagUntilTimeout:
 469              	.LFB202:
4510:HALLIB/Src/stm32f7xx_hal_i2c.c ****   while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 470              		.loc 1 4510 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              	.LVL47:
 475 0000 70B5     		push	{r4, r5, r6, lr}
 476              	.LCFI5:
 477              		.cfi_def_cfa_offset 16
 478              		.cfi_offset 4, -16
 479              		.cfi_offset 5, -12
 480              		.cfi_offset 6, -8
 481              		.cfi_offset 14, -4
 482 0002 0446     		mov	r4, r0
 483 0004 0D46     		mov	r5, r1
 484 0006 1646     		mov	r6, r2
4511:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 485              		.loc 1 4511 0
 486 0008 1CE0     		b	.L43
 487              	.LVL48:
 488              	.L45:
ARM GAS  /tmp/ccyfI9lR.s 			page 95


4514:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 489              		.loc 1 4514 0
 490 000a 3246     		mov	r2, r6
 491 000c 2946     		mov	r1, r5
 492 000e 2046     		mov	r0, r4
 493 0010 FFF7FEFF 		bl	I2C_IsAcknowledgeFailed
 494              	.LVL49:
 495 0014 E8B9     		cbnz	r0, .L46
4520:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 496              		.loc 1 4520 0
 497 0016 B5F1FF3F 		cmp	r5, #-1
 498 001a 13D0     		beq	.L43
4522:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 499              		.loc 1 4522 0
 500 001c 25B1     		cbz	r5, .L44
4522:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 501              		.loc 1 4522 0 is_stmt 0 discriminator 1
 502 001e FFF7FEFF 		bl	HAL_GetTick
 503              	.LVL50:
 504 0022 801B     		subs	r0, r0, r6
 505 0024 8542     		cmp	r5, r0
 506 0026 0DD2     		bcs	.L43
 507              	.L44:
4524:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->State = HAL_I2C_STATE_READY;
 508              		.loc 1 4524 0 is_stmt 1
 509 0028 636C     		ldr	r3, [r4, #68]
 510 002a 43F02003 		orr	r3, r3, #32
 511 002e 6364     		str	r3, [r4, #68]
4525:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Mode = HAL_I2C_MODE_NONE;
 512              		.loc 1 4525 0
 513 0030 2023     		movs	r3, #32
 514 0032 84F84130 		strb	r3, [r4, #65]
4526:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 515              		.loc 1 4526 0
 516 0036 0023     		movs	r3, #0
 517 0038 84F84230 		strb	r3, [r4, #66]
4529:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 518              		.loc 1 4529 0
 519 003c 84F84030 		strb	r3, [r4, #64]
4531:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 520              		.loc 1 4531 0
 521 0040 0320     		movs	r0, #3
 522 0042 70BD     		pop	{r4, r5, r6, pc}
 523              	.LVL51:
 524              	.L43:
4511:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 525              		.loc 1 4511 0
 526 0044 2368     		ldr	r3, [r4]
 527 0046 9B69     		ldr	r3, [r3, #24]
 528 0048 13F0020F 		tst	r3, #2
 529 004c DDD0     		beq	.L45
4535:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 530              		.loc 1 4535 0
 531 004e 0020     		movs	r0, #0
 532 0050 70BD     		pop	{r4, r5, r6, pc}
 533              	.LVL52:
 534              	.L46:
ARM GAS  /tmp/ccyfI9lR.s 			page 96


4516:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 535              		.loc 1 4516 0
 536 0052 0120     		movs	r0, #1
4536:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 537              		.loc 1 4536 0
 538 0054 70BD     		pop	{r4, r5, r6, pc}
 539              		.cfi_endproc
 540              	.LFE202:
 542 0056 00BF     		.section	.text.I2C_WaitOnFlagUntilTimeout,"ax",%progbits
 543              		.align	2
 544              		.thumb
 545              		.thumb_func
 547              	I2C_WaitOnFlagUntilTimeout:
 548              	.LFB201:
4481:HALLIB/Src/stm32f7xx_hal_i2c.c ****   while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 549              		.loc 1 4481 0
 550              		.cfi_startproc
 551              		@ args = 4, pretend = 0, frame = 0
 552              		@ frame_needed = 0, uses_anonymous_args = 0
 553              	.LVL53:
 554 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 555              	.LCFI6:
 556              		.cfi_def_cfa_offset 24
 557              		.cfi_offset 3, -24
 558              		.cfi_offset 4, -20
 559              		.cfi_offset 5, -16
 560              		.cfi_offset 6, -12
 561              		.cfi_offset 7, -8
 562              		.cfi_offset 14, -4
 563 0002 0546     		mov	r5, r0
 564 0004 0F46     		mov	r7, r1
 565 0006 1646     		mov	r6, r2
 566 0008 1C46     		mov	r4, r3
4482:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 567              		.loc 1 4482 0
 568 000a 13E0     		b	.L50
 569              	.LVL54:
 570              	.L53:
4485:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 571              		.loc 1 4485 0
 572 000c B4F1FF3F 		cmp	r4, #-1
 573 0010 10D0     		beq	.L50
4487:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 574              		.loc 1 4487 0
 575 0012 2CB1     		cbz	r4, .L51
4487:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 576              		.loc 1 4487 0 is_stmt 0 discriminator 1
 577 0014 FFF7FEFF 		bl	HAL_GetTick
 578              	.LVL55:
 579 0018 069B     		ldr	r3, [sp, #24]
 580 001a C01A     		subs	r0, r0, r3
 581 001c 8442     		cmp	r4, r0
 582 001e 09D2     		bcs	.L50
 583              	.L51:
4489:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Mode = HAL_I2C_MODE_NONE;
 584              		.loc 1 4489 0 is_stmt 1
 585 0020 2023     		movs	r3, #32
ARM GAS  /tmp/ccyfI9lR.s 			page 97


 586 0022 85F84130 		strb	r3, [r5, #65]
4490:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 587              		.loc 1 4490 0
 588 0026 0023     		movs	r3, #0
 589 0028 85F84230 		strb	r3, [r5, #66]
4493:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 590              		.loc 1 4493 0
 591 002c 85F84030 		strb	r3, [r5, #64]
4494:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 592              		.loc 1 4494 0
 593 0030 0320     		movs	r0, #3
 594 0032 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 595              	.LVL56:
 596              	.L50:
4482:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 597              		.loc 1 4482 0
 598 0034 2B68     		ldr	r3, [r5]
 599 0036 9B69     		ldr	r3, [r3, #24]
 600 0038 37EA0303 		bics	r3, r7, r3
 601 003c 0CBF     		ite	eq
 602 003e 0123     		moveq	r3, #1
 603 0040 0023     		movne	r3, #0
 604 0042 B342     		cmp	r3, r6
 605 0044 E2D0     		beq	.L53
4498:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 606              		.loc 1 4498 0
 607 0046 0020     		movs	r0, #0
4499:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 608              		.loc 1 4499 0
 609 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 610              		.cfi_endproc
 611              	.LFE201:
 613 004a 00BF     		.section	.text.I2C_RequestMemoryWrite,"ax",%progbits
 614              		.align	2
 615              		.thumb
 616              		.thumb_func
 618              	I2C_RequestMemoryWrite:
 619              	.LFB185:
3649:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 620              		.loc 1 3649 0
 621              		.cfi_startproc
 622              		@ args = 8, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              	.LVL57:
 625 0000 70B5     		push	{r4, r5, r6, lr}
 626              	.LCFI7:
 627              		.cfi_def_cfa_offset 16
 628              		.cfi_offset 4, -16
 629              		.cfi_offset 5, -12
 630              		.cfi_offset 6, -8
 631              		.cfi_offset 14, -4
 632 0002 82B0     		sub	sp, sp, #8
 633              	.LCFI8:
 634              		.cfi_def_cfa_offset 24
 635 0004 0446     		mov	r4, r0
 636 0006 1646     		mov	r6, r2
 637 0008 1D46     		mov	r5, r3
ARM GAS  /tmp/ccyfI9lR.s 			page 98


3650:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 638              		.loc 1 3650 0
 639 000a 1D4B     		ldr	r3, .L64
 640              	.LVL58:
 641 000c 0093     		str	r3, [sp]
 642 000e 4FF08073 		mov	r3, #16777216
 643 0012 EAB2     		uxtb	r2, r5
 644              	.LVL59:
 645 0014 FFF7FEFF 		bl	I2C_TransferConfig
 646              	.LVL60:
3653:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 647              		.loc 1 3653 0
 648 0018 079A     		ldr	r2, [sp, #28]
 649 001a 0699     		ldr	r1, [sp, #24]
 650 001c 2046     		mov	r0, r4
 651 001e FFF7FEFF 		bl	I2C_WaitOnTXISFlagUntilTimeout
 652              	.LVL61:
 653 0022 20B1     		cbz	r0, .L56
3655:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 654              		.loc 1 3655 0
 655 0024 636C     		ldr	r3, [r4, #68]
 656 0026 042B     		cmp	r3, #4
 657 0028 24D1     		bne	.L61
3657:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 658              		.loc 1 3657 0
 659 002a 0123     		movs	r3, #1
 660 002c 25E0     		b	.L57
 661              	.L56:
3666:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 662              		.loc 1 3666 0
 663 002e 012D     		cmp	r5, #1
 664 0030 03D1     		bne	.L58
3669:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 665              		.loc 1 3669 0
 666 0032 2368     		ldr	r3, [r4]
 667 0034 F6B2     		uxtb	r6, r6
 668 0036 9E62     		str	r6, [r3, #40]
 669 0038 10E0     		b	.L59
 670              	.L58:
3675:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 671              		.loc 1 3675 0
 672 003a 2368     		ldr	r3, [r4]
 673 003c 320A     		lsrs	r2, r6, #8
 674 003e 9A62     		str	r2, [r3, #40]
3678:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 675              		.loc 1 3678 0
 676 0040 079A     		ldr	r2, [sp, #28]
 677 0042 0699     		ldr	r1, [sp, #24]
 678 0044 2046     		mov	r0, r4
 679 0046 FFF7FEFF 		bl	I2C_WaitOnTXISFlagUntilTimeout
 680              	.LVL62:
 681 004a 20B1     		cbz	r0, .L60
3680:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 682              		.loc 1 3680 0
 683 004c 636C     		ldr	r3, [r4, #68]
 684 004e 042B     		cmp	r3, #4
 685 0050 12D1     		bne	.L62
ARM GAS  /tmp/ccyfI9lR.s 			page 99


3682:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 686              		.loc 1 3682 0
 687 0052 0123     		movs	r3, #1
 688 0054 11E0     		b	.L57
 689              	.L60:
3691:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 690              		.loc 1 3691 0
 691 0056 2368     		ldr	r3, [r4]
 692 0058 F6B2     		uxtb	r6, r6
 693 005a 9E62     		str	r6, [r3, #40]
 694              	.L59:
3695:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 695              		.loc 1 3695 0
 696 005c 079B     		ldr	r3, [sp, #28]
 697 005e 0093     		str	r3, [sp]
 698 0060 069B     		ldr	r3, [sp, #24]
 699 0062 0022     		movs	r2, #0
 700 0064 8021     		movs	r1, #128
 701 0066 2046     		mov	r0, r4
 702 0068 FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 703              	.LVL63:
 704 006c 0346     		mov	r3, r0
 705 006e 20B1     		cbz	r0, .L57
3697:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 706              		.loc 1 3697 0
 707 0070 0323     		movs	r3, #3
 708 0072 02E0     		b	.L57
 709              	.L61:
3661:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 710              		.loc 1 3661 0
 711 0074 0323     		movs	r3, #3
 712 0076 00E0     		b	.L57
 713              	.L62:
3686:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 714              		.loc 1 3686 0
 715 0078 0323     		movs	r3, #3
 716              	.L57:
3701:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 717              		.loc 1 3701 0
 718 007a 1846     		mov	r0, r3
 719 007c 02B0     		add	sp, sp, #8
 720              	.LCFI9:
 721              		.cfi_def_cfa_offset 16
 722              		@ sp needed
 723 007e 70BD     		pop	{r4, r5, r6, pc}
 724              	.LVL64:
 725              	.L65:
 726              		.align	2
 727              	.L64:
 728 0080 00200080 		.word	-2147475456
 729              		.cfi_endproc
 730              	.LFE185:
 732              		.section	.text.I2C_RequestMemoryRead,"ax",%progbits
 733              		.align	2
 734              		.thumb
 735              		.thumb_func
 737              	I2C_RequestMemoryRead:
ARM GAS  /tmp/ccyfI9lR.s 			page 100


 738              	.LFB186:
3716:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 739              		.loc 1 3716 0
 740              		.cfi_startproc
 741              		@ args = 8, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              	.LVL65:
 744 0000 70B5     		push	{r4, r5, r6, lr}
 745              	.LCFI10:
 746              		.cfi_def_cfa_offset 16
 747              		.cfi_offset 4, -16
 748              		.cfi_offset 5, -12
 749              		.cfi_offset 6, -8
 750              		.cfi_offset 14, -4
 751 0002 82B0     		sub	sp, sp, #8
 752              	.LCFI11:
 753              		.cfi_def_cfa_offset 24
 754 0004 0446     		mov	r4, r0
 755 0006 1646     		mov	r6, r2
 756 0008 1D46     		mov	r5, r3
3717:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 757              		.loc 1 3717 0
 758 000a 1D4B     		ldr	r3, .L75
 759              	.LVL66:
 760 000c 0093     		str	r3, [sp]
 761 000e 0023     		movs	r3, #0
 762 0010 EAB2     		uxtb	r2, r5
 763              	.LVL67:
 764 0012 FFF7FEFF 		bl	I2C_TransferConfig
 765              	.LVL68:
3720:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 766              		.loc 1 3720 0
 767 0016 079A     		ldr	r2, [sp, #28]
 768 0018 0699     		ldr	r1, [sp, #24]
 769 001a 2046     		mov	r0, r4
 770 001c FFF7FEFF 		bl	I2C_WaitOnTXISFlagUntilTimeout
 771              	.LVL69:
 772 0020 20B1     		cbz	r0, .L67
3722:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 773              		.loc 1 3722 0
 774 0022 636C     		ldr	r3, [r4, #68]
 775 0024 042B     		cmp	r3, #4
 776 0026 24D1     		bne	.L72
3724:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 777              		.loc 1 3724 0
 778 0028 0123     		movs	r3, #1
 779 002a 25E0     		b	.L68
 780              	.L67:
3733:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 781              		.loc 1 3733 0
 782 002c 012D     		cmp	r5, #1
 783 002e 03D1     		bne	.L69
3736:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 784              		.loc 1 3736 0
 785 0030 2368     		ldr	r3, [r4]
 786 0032 F6B2     		uxtb	r6, r6
 787 0034 9E62     		str	r6, [r3, #40]
ARM GAS  /tmp/ccyfI9lR.s 			page 101


 788 0036 10E0     		b	.L70
 789              	.L69:
3742:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 790              		.loc 1 3742 0
 791 0038 2368     		ldr	r3, [r4]
 792 003a 320A     		lsrs	r2, r6, #8
 793 003c 9A62     		str	r2, [r3, #40]
3745:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 794              		.loc 1 3745 0
 795 003e 079A     		ldr	r2, [sp, #28]
 796 0040 0699     		ldr	r1, [sp, #24]
 797 0042 2046     		mov	r0, r4
 798 0044 FFF7FEFF 		bl	I2C_WaitOnTXISFlagUntilTimeout
 799              	.LVL70:
 800 0048 20B1     		cbz	r0, .L71
3747:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 801              		.loc 1 3747 0
 802 004a 636C     		ldr	r3, [r4, #68]
 803 004c 042B     		cmp	r3, #4
 804 004e 12D1     		bne	.L73
3749:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 805              		.loc 1 3749 0
 806 0050 0123     		movs	r3, #1
 807 0052 11E0     		b	.L68
 808              	.L71:
3758:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 809              		.loc 1 3758 0
 810 0054 2368     		ldr	r3, [r4]
 811 0056 F6B2     		uxtb	r6, r6
 812 0058 9E62     		str	r6, [r3, #40]
 813              	.L70:
3762:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 814              		.loc 1 3762 0
 815 005a 079B     		ldr	r3, [sp, #28]
 816 005c 0093     		str	r3, [sp]
 817 005e 069B     		ldr	r3, [sp, #24]
 818 0060 0022     		movs	r2, #0
 819 0062 4021     		movs	r1, #64
 820 0064 2046     		mov	r0, r4
 821 0066 FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 822              	.LVL71:
 823 006a 0346     		mov	r3, r0
 824 006c 20B1     		cbz	r0, .L68
3764:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 825              		.loc 1 3764 0
 826 006e 0323     		movs	r3, #3
 827 0070 02E0     		b	.L68
 828              	.L72:
3728:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 829              		.loc 1 3728 0
 830 0072 0323     		movs	r3, #3
 831 0074 00E0     		b	.L68
 832              	.L73:
3753:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 833              		.loc 1 3753 0
 834 0076 0323     		movs	r3, #3
 835              	.L68:
ARM GAS  /tmp/ccyfI9lR.s 			page 102


3768:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 836              		.loc 1 3768 0
 837 0078 1846     		mov	r0, r3
 838 007a 02B0     		add	sp, sp, #8
 839              	.LCFI12:
 840              		.cfi_def_cfa_offset 16
 841              		@ sp needed
 842 007c 70BD     		pop	{r4, r5, r6, pc}
 843              	.LVL72:
 844              	.L76:
 845 007e 00BF     		.align	2
 846              	.L75:
 847 0080 00200080 		.word	-2147475456
 848              		.cfi_endproc
 849              	.LFE186:
 851              		.section	.text.I2C_WaitOnSTOPFlagUntilTimeout,"ax",%progbits
 852              		.align	2
 853              		.thumb
 854              		.thumb_func
 856              	I2C_WaitOnSTOPFlagUntilTimeout:
 857              	.LFB203:
4547:HALLIB/Src/stm32f7xx_hal_i2c.c ****   while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 858              		.loc 1 4547 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              	.LVL73:
 863 0000 70B5     		push	{r4, r5, r6, lr}
 864              	.LCFI13:
 865              		.cfi_def_cfa_offset 16
 866              		.cfi_offset 4, -16
 867              		.cfi_offset 5, -12
 868              		.cfi_offset 6, -8
 869              		.cfi_offset 14, -4
 870 0002 0546     		mov	r5, r0
 871 0004 0C46     		mov	r4, r1
 872 0006 1646     		mov	r6, r2
4548:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 873              		.loc 1 4548 0
 874 0008 19E0     		b	.L78
 875              	.LVL74:
 876              	.L81:
4551:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 877              		.loc 1 4551 0
 878 000a 3246     		mov	r2, r6
 879 000c 2146     		mov	r1, r4
 880 000e 2846     		mov	r0, r5
 881 0010 FFF7FEFF 		bl	I2C_IsAcknowledgeFailed
 882              	.LVL75:
 883 0014 D0B9     		cbnz	r0, .L82
4557:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 884              		.loc 1 4557 0
 885 0016 24B1     		cbz	r4, .L80
4557:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 886              		.loc 1 4557 0 is_stmt 0 discriminator 1
 887 0018 FFF7FEFF 		bl	HAL_GetTick
 888              	.LVL76:
ARM GAS  /tmp/ccyfI9lR.s 			page 103


 889 001c 801B     		subs	r0, r0, r6
 890 001e 8442     		cmp	r4, r0
 891 0020 0DD2     		bcs	.L78
 892              	.L80:
4559:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->State = HAL_I2C_STATE_READY;
 893              		.loc 1 4559 0 is_stmt 1
 894 0022 6B6C     		ldr	r3, [r5, #68]
 895 0024 43F02003 		orr	r3, r3, #32
 896 0028 6B64     		str	r3, [r5, #68]
4560:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->Mode = HAL_I2C_MODE_NONE;
 897              		.loc 1 4560 0
 898 002a 2023     		movs	r3, #32
 899 002c 85F84130 		strb	r3, [r5, #65]
4561:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 900              		.loc 1 4561 0
 901 0030 0023     		movs	r3, #0
 902 0032 85F84230 		strb	r3, [r5, #66]
4564:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 903              		.loc 1 4564 0
 904 0036 85F84030 		strb	r3, [r5, #64]
4566:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 905              		.loc 1 4566 0
 906 003a 0320     		movs	r0, #3
 907 003c 70BD     		pop	{r4, r5, r6, pc}
 908              	.LVL77:
 909              	.L78:
4548:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 910              		.loc 1 4548 0
 911 003e 2B68     		ldr	r3, [r5]
 912 0040 9B69     		ldr	r3, [r3, #24]
 913 0042 13F0200F 		tst	r3, #32
 914 0046 E0D0     		beq	.L81
4569:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 915              		.loc 1 4569 0
 916 0048 0020     		movs	r0, #0
 917 004a 70BD     		pop	{r4, r5, r6, pc}
 918              	.LVL78:
 919              	.L82:
4553:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 920              		.loc 1 4553 0
 921 004c 0120     		movs	r0, #1
4570:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 922              		.loc 1 4570 0
 923 004e 70BD     		pop	{r4, r5, r6, pc}
 924              		.cfi_endproc
 925              	.LFE203:
 927              		.section	.text.I2C_WaitOnRXNEFlagUntilTimeout,"ax",%progbits
 928              		.align	2
 929              		.thumb
 930              		.thumb_func
 932              	I2C_WaitOnRXNEFlagUntilTimeout:
 933              	.LFB204:
4581:HALLIB/Src/stm32f7xx_hal_i2c.c ****   while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 934              		.loc 1 4581 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
 937              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccyfI9lR.s 			page 104


 938              	.LVL79:
 939 0000 70B5     		push	{r4, r5, r6, lr}
 940              	.LCFI14:
 941              		.cfi_def_cfa_offset 16
 942              		.cfi_offset 4, -16
 943              		.cfi_offset 5, -12
 944              		.cfi_offset 6, -8
 945              		.cfi_offset 14, -4
 946 0002 0446     		mov	r4, r0
 947 0004 0D46     		mov	r5, r1
 948 0006 1646     		mov	r6, r2
4582:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 949              		.loc 1 4582 0
 950 0008 3BE0     		b	.L85
 951              	.LVL80:
 952              	.L90:
4585:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 953              		.loc 1 4585 0
 954 000a 3246     		mov	r2, r6
 955 000c 2946     		mov	r1, r5
 956 000e 2046     		mov	r0, r4
 957 0010 FFF7FEFF 		bl	I2C_IsAcknowledgeFailed
 958              	.LVL81:
 959 0014 0146     		mov	r1, r0
 960 0016 0028     		cmp	r0, #0
 961 0018 3AD1     		bne	.L91
4591:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 962              		.loc 1 4591 0
 963 001a 2368     		ldr	r3, [r4]
 964 001c 9A69     		ldr	r2, [r3, #24]
 965 001e 12F0200F 		tst	r2, #32
 966 0022 1CD0     		beq	.L87
4595:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 967              		.loc 1 4595 0
 968 0024 9A69     		ldr	r2, [r3, #24]
 969 0026 12F0040F 		tst	r2, #4
 970 002a 01D0     		beq	.L88
4595:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 971              		.loc 1 4595 0 is_stmt 0 discriminator 1
 972 002c 228D     		ldrh	r2, [r4, #40]
 973 002e 82BB     		cbnz	r2, .L86
 974              	.L88:
4604:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 975              		.loc 1 4604 0 is_stmt 1
 976 0030 2022     		movs	r2, #32
 977 0032 DA61     		str	r2, [r3, #28]
4607:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 978              		.loc 1 4607 0
 979 0034 2168     		ldr	r1, [r4]
 980 0036 4B68     		ldr	r3, [r1, #4]
 981 0038 23F0FF73 		bic	r3, r3, #33423360
 982 003c 23F48B33 		bic	r3, r3, #71168
 983 0040 23F4FF73 		bic	r3, r3, #510
 984 0044 23F00103 		bic	r3, r3, #1
 985 0048 4B60     		str	r3, [r1, #4]
4609:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->State = HAL_I2C_STATE_READY;
 986              		.loc 1 4609 0
ARM GAS  /tmp/ccyfI9lR.s 			page 105


 987 004a 0023     		movs	r3, #0
 988 004c 6364     		str	r3, [r4, #68]
4610:HALLIB/Src/stm32f7xx_hal_i2c.c ****         hi2c->Mode = HAL_I2C_MODE_NONE;
 989              		.loc 1 4610 0
 990 004e 84F84120 		strb	r2, [r4, #65]
4611:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 991              		.loc 1 4611 0
 992 0052 84F84230 		strb	r3, [r4, #66]
4614:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 993              		.loc 1 4614 0
 994 0056 84F84030 		strb	r3, [r4, #64]
4616:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 995              		.loc 1 4616 0
 996 005a 0121     		movs	r1, #1
 997 005c 19E0     		b	.L86
 998              	.L87:
4621:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 999              		.loc 1 4621 0
 1000 005e 25B1     		cbz	r5, .L89
4621:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 1001              		.loc 1 4621 0 is_stmt 0 discriminator 1
 1002 0060 FFF7FEFF 		bl	HAL_GetTick
 1003              	.LVL82:
 1004 0064 801B     		subs	r0, r0, r6
 1005 0066 8542     		cmp	r5, r0
 1006 0068 0BD2     		bcs	.L85
 1007              	.L89:
4623:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->State = HAL_I2C_STATE_READY;
 1008              		.loc 1 4623 0 is_stmt 1
 1009 006a 636C     		ldr	r3, [r4, #68]
 1010 006c 43F02003 		orr	r3, r3, #32
 1011 0070 6364     		str	r3, [r4, #68]
4624:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1012              		.loc 1 4624 0
 1013 0072 2023     		movs	r3, #32
 1014 0074 84F84130 		strb	r3, [r4, #65]
4627:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1015              		.loc 1 4627 0
 1016 0078 0023     		movs	r3, #0
 1017 007a 84F84030 		strb	r3, [r4, #64]
4629:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 1018              		.loc 1 4629 0
 1019 007e 0321     		movs	r1, #3
 1020 0080 07E0     		b	.L86
 1021              	.L85:
4582:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 1022              		.loc 1 4582 0
 1023 0082 2368     		ldr	r3, [r4]
 1024 0084 9B69     		ldr	r3, [r3, #24]
 1025 0086 13F0040F 		tst	r3, #4
 1026 008a BED0     		beq	.L90
4632:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 1027              		.loc 1 4632 0
 1028 008c 0021     		movs	r1, #0
 1029 008e 00E0     		b	.L86
 1030              	.L91:
4587:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
ARM GAS  /tmp/ccyfI9lR.s 			page 106


 1031              		.loc 1 4587 0
 1032 0090 0121     		movs	r1, #1
 1033              	.L86:
4633:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1034              		.loc 1 4633 0
 1035 0092 0846     		mov	r0, r1
 1036 0094 70BD     		pop	{r4, r5, r6, pc}
 1037              		.cfi_endproc
 1038              	.LFE204:
 1040 0096 00BF     		.section	.text.I2C_DMAMasterTransmitCplt,"ax",%progbits
 1041              		.align	2
 1042              		.thumb
 1043              		.thumb_func
 1045              	I2C_DMAMasterTransmitCplt:
 1046              	.LFB195:
4314:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1047              		.loc 1 4314 0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 0
 1050              		@ frame_needed = 0, uses_anonymous_args = 0
 1051              	.LVL83:
 1052 0000 10B5     		push	{r4, lr}
 1053              	.LCFI15:
 1054              		.cfi_def_cfa_offset 8
 1055              		.cfi_offset 4, -8
 1056              		.cfi_offset 14, -4
4315:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1057              		.loc 1 4315 0
 1058 0002 846B     		ldr	r4, [r0, #56]
 1059              	.LVL84:
4318:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1060              		.loc 1 4318 0
 1061 0004 2268     		ldr	r2, [r4]
 1062 0006 1368     		ldr	r3, [r2]
 1063 0008 23F48043 		bic	r3, r3, #16384
 1064 000c 1360     		str	r3, [r2]
4321:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 1065              		.loc 1 4321 0
 1066 000e 638D     		ldrh	r3, [r4, #42]
 1067 0010 9BB2     		uxth	r3, r3
 1068 0012 23B9     		cbnz	r3, .L94
4324:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1069              		.loc 1 4324 0
 1070 0014 1221     		movs	r1, #18
 1071 0016 2046     		mov	r0, r4
 1072              	.LVL85:
 1073 0018 FFF7FEFF 		bl	I2C_Enable_IRQ
 1074              	.LVL86:
 1075 001c 10BD     		pop	{r4, pc}
 1076              	.LVL87:
 1077              	.L94:
4330:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1078              		.loc 1 4330 0
 1079 001e 238D     		ldrh	r3, [r4, #40]
 1080 0020 616A     		ldr	r1, [r4, #36]
 1081 0022 1944     		add	r1, r1, r3
 1082 0024 6162     		str	r1, [r4, #36]
ARM GAS  /tmp/ccyfI9lR.s 			page 107


4333:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 1083              		.loc 1 4333 0
 1084 0026 638D     		ldrh	r3, [r4, #42]
 1085 0028 9BB2     		uxth	r3, r3
 1086 002a FF2B     		cmp	r3, #255
 1087 002c 02D9     		bls	.L96
4335:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 1088              		.loc 1 4335 0
 1089 002e FF23     		movs	r3, #255
 1090 0030 2385     		strh	r3, [r4, #40]	@ movhi
 1091 0032 01E0     		b	.L97
 1092              	.L96:
4339:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 1093              		.loc 1 4339 0
 1094 0034 638D     		ldrh	r3, [r4, #42]
 1095 0036 2385     		strh	r3, [r4, #40]	@ movhi
 1096              	.L97:
4343:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1097              		.loc 1 4343 0
 1098 0038 2268     		ldr	r2, [r4]
 1099 003a 238D     		ldrh	r3, [r4, #40]
 1100 003c 2832     		adds	r2, r2, #40
 1101 003e A06B     		ldr	r0, [r4, #56]
 1102              	.LVL88:
 1103 0040 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1104              	.LVL89:
4346:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1105              		.loc 1 4346 0
 1106 0044 1221     		movs	r1, #18
 1107 0046 2046     		mov	r0, r4
 1108 0048 FFF7FEFF 		bl	I2C_Enable_IRQ
 1109              	.LVL90:
 1110 004c 10BD     		pop	{r4, pc}
 1111              		.cfi_endproc
 1112              	.LFE195:
 1114 004e 00BF     		.section	.text.I2C_DMAMasterReceiveCplt,"ax",%progbits
 1115              		.align	2
 1116              		.thumb
 1117              		.thumb_func
 1119              	I2C_DMAMasterReceiveCplt:
 1120              	.LFB197:
4371:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1121              		.loc 1 4371 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 0
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 1125              	.LVL91:
 1126 0000 10B5     		push	{r4, lr}
 1127              	.LCFI16:
 1128              		.cfi_def_cfa_offset 8
 1129              		.cfi_offset 4, -8
 1130              		.cfi_offset 14, -4
4372:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1131              		.loc 1 4372 0
 1132 0002 846B     		ldr	r4, [r0, #56]
 1133              	.LVL92:
4375:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 108


 1134              		.loc 1 4375 0
 1135 0004 2268     		ldr	r2, [r4]
 1136 0006 1368     		ldr	r3, [r2]
 1137 0008 23F40043 		bic	r3, r3, #32768
 1138 000c 1360     		str	r3, [r2]
4378:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 1139              		.loc 1 4378 0
 1140 000e 638D     		ldrh	r3, [r4, #42]
 1141 0010 9BB2     		uxth	r3, r3
 1142 0012 23B9     		cbnz	r3, .L100
4381:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1143              		.loc 1 4381 0
 1144 0014 1221     		movs	r1, #18
 1145 0016 2046     		mov	r0, r4
 1146              	.LVL93:
 1147 0018 FFF7FEFF 		bl	I2C_Enable_IRQ
 1148              	.LVL94:
 1149 001c 10BD     		pop	{r4, pc}
 1150              	.LVL95:
 1151              	.L100:
4387:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1152              		.loc 1 4387 0
 1153 001e 238D     		ldrh	r3, [r4, #40]
 1154 0020 626A     		ldr	r2, [r4, #36]
 1155 0022 1A44     		add	r2, r2, r3
 1156 0024 6262     		str	r2, [r4, #36]
4390:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 1157              		.loc 1 4390 0
 1158 0026 638D     		ldrh	r3, [r4, #42]
 1159 0028 9BB2     		uxth	r3, r3
 1160 002a FF2B     		cmp	r3, #255
 1161 002c 02D9     		bls	.L102
4392:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 1162              		.loc 1 4392 0
 1163 002e FF23     		movs	r3, #255
 1164 0030 2385     		strh	r3, [r4, #40]	@ movhi
 1165 0032 01E0     		b	.L103
 1166              	.L102:
4396:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 1167              		.loc 1 4396 0
 1168 0034 638D     		ldrh	r3, [r4, #42]
 1169 0036 2385     		strh	r3, [r4, #40]	@ movhi
 1170              	.L103:
4400:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1171              		.loc 1 4400 0
 1172 0038 2168     		ldr	r1, [r4]
 1173 003a 238D     		ldrh	r3, [r4, #40]
 1174 003c 2431     		adds	r1, r1, #36
 1175 003e E06B     		ldr	r0, [r4, #60]
 1176              	.LVL96:
 1177 0040 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1178              	.LVL97:
4403:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1179              		.loc 1 4403 0
 1180 0044 1221     		movs	r1, #18
 1181 0046 2046     		mov	r0, r4
 1182 0048 FFF7FEFF 		bl	I2C_Enable_IRQ
ARM GAS  /tmp/ccyfI9lR.s 			page 109


 1183              	.LVL98:
 1184 004c 10BD     		pop	{r4, pc}
 1185              		.cfi_endproc
 1186              	.LFE197:
 1188 004e 00BF     		.section	.text.HAL_I2C_MspInit,"ax",%progbits
 1189              		.align	2
 1190              		.weak	HAL_I2C_MspInit
 1191              		.thumb
 1192              		.thumb_func
 1194              	HAL_I2C_MspInit:
 1195              	.LFB138:
 534:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 1196              		.loc 1 534 0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 0
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
 1200              		@ link register save eliminated.
 1201              	.LVL99:
 1202 0000 7047     		bx	lr
 1203              		.cfi_endproc
 1204              	.LFE138:
 1206 0002 00BF     		.section	.text.HAL_I2C_Init,"ax",%progbits
 1207              		.align	2
 1208              		.global	HAL_I2C_Init
 1209              		.thumb
 1210              		.thumb_func
 1212              	HAL_I2C_Init:
 1213              	.LFB136:
 411:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the I2C handle allocation */
 1214              		.loc 1 411 0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 0
 1217              		@ frame_needed = 0, uses_anonymous_args = 0
 1218              	.LVL100:
 413:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 1219              		.loc 1 413 0
 1220 0000 0028     		cmp	r0, #0
 1221 0002 57D0     		beq	.L112
 411:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the I2C handle allocation */
 1222              		.loc 1 411 0
 1223 0004 10B5     		push	{r4, lr}
 1224              	.LCFI17:
 1225              		.cfi_def_cfa_offset 8
 1226              		.cfi_offset 4, -8
 1227              		.cfi_offset 14, -4
 1228 0006 0446     		mov	r4, r0
 428:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 1229              		.loc 1 428 0
 1230 0008 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 1231 000c 13F0FF0F 		tst	r3, #255
 1232 0010 04D1     		bne	.L108
 431:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1233              		.loc 1 431 0
 1234 0012 0023     		movs	r3, #0
 1235 0014 80F84030 		strb	r3, [r0, #64]
 434:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1236              		.loc 1 434 0
ARM GAS  /tmp/ccyfI9lR.s 			page 110


 1237 0018 FFF7FEFF 		bl	HAL_I2C_MspInit
 1238              	.LVL101:
 1239              	.L108:
 437:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1240              		.loc 1 437 0
 1241 001c 2423     		movs	r3, #36
 1242 001e 84F84130 		strb	r3, [r4, #65]
 440:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1243              		.loc 1 440 0
 1244 0022 2268     		ldr	r2, [r4]
 1245 0024 1368     		ldr	r3, [r2]
 1246 0026 23F00103 		bic	r3, r3, #1
 1247 002a 1360     		str	r3, [r2]
 444:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1248              		.loc 1 444 0
 1249 002c 2268     		ldr	r2, [r4]
 1250 002e 6368     		ldr	r3, [r4, #4]
 1251 0030 23F07063 		bic	r3, r3, #251658240
 1252 0034 1361     		str	r3, [r2, #16]
 448:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1253              		.loc 1 448 0
 1254 0036 2268     		ldr	r2, [r4]
 1255 0038 9368     		ldr	r3, [r2, #8]
 1256 003a 23F40043 		bic	r3, r3, #32768
 1257 003e 9360     		str	r3, [r2, #8]
 451:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 1258              		.loc 1 451 0
 1259 0040 E368     		ldr	r3, [r4, #12]
 1260 0042 012B     		cmp	r3, #1
 1261 0044 05D1     		bne	.L109
 453:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1262              		.loc 1 453 0
 1263 0046 2268     		ldr	r2, [r4]
 1264 0048 A368     		ldr	r3, [r4, #8]
 1265 004a 43F40043 		orr	r3, r3, #32768
 1266 004e 9360     		str	r3, [r2, #8]
 1267 0050 04E0     		b	.L110
 1268              	.L109:
 457:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1269              		.loc 1 457 0
 1270 0052 2268     		ldr	r2, [r4]
 1271 0054 A368     		ldr	r3, [r4, #8]
 1272 0056 43F40443 		orr	r3, r3, #33792
 1273 005a 9360     		str	r3, [r2, #8]
 1274              	.L110:
 462:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 1275              		.loc 1 462 0
 1276 005c E368     		ldr	r3, [r4, #12]
 1277 005e 022B     		cmp	r3, #2
 1278 0060 03D1     		bne	.L111
 464:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1279              		.loc 1 464 0
 1280 0062 2368     		ldr	r3, [r4]
 1281 0064 4FF40062 		mov	r2, #2048
 1282 0068 5A60     		str	r2, [r3, #4]
 1283              	.L111:
 467:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 111


 1284              		.loc 1 467 0
 1285 006a 2268     		ldr	r2, [r4]
 1286 006c 5168     		ldr	r1, [r2, #4]
 1287 006e 124B     		ldr	r3, .L115
 1288 0070 0B43     		orrs	r3, r3, r1
 1289 0072 5360     		str	r3, [r2, #4]
 471:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1290              		.loc 1 471 0
 1291 0074 2268     		ldr	r2, [r4]
 1292 0076 D368     		ldr	r3, [r2, #12]
 1293 0078 23F40043 		bic	r3, r3, #32768
 1294 007c D360     		str	r3, [r2, #12]
 474:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1295              		.loc 1 474 0
 1296 007e 2268     		ldr	r2, [r4]
 1297 0080 2169     		ldr	r1, [r4, #16]
 1298 0082 6369     		ldr	r3, [r4, #20]
 1299 0084 0B43     		orrs	r3, r3, r1
 1300 0086 A169     		ldr	r1, [r4, #24]
 1301 0088 43EA0123 		orr	r3, r3, r1, lsl #8
 1302 008c D360     		str	r3, [r2, #12]
 478:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1303              		.loc 1 478 0
 1304 008e 2268     		ldr	r2, [r4]
 1305 0090 E169     		ldr	r1, [r4, #28]
 1306 0092 236A     		ldr	r3, [r4, #32]
 1307 0094 0B43     		orrs	r3, r3, r1
 1308 0096 1360     		str	r3, [r2]
 481:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1309              		.loc 1 481 0
 1310 0098 2268     		ldr	r2, [r4]
 1311 009a 1368     		ldr	r3, [r2]
 1312 009c 43F00103 		orr	r3, r3, #1
 1313 00a0 1360     		str	r3, [r2]
 483:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->State = HAL_I2C_STATE_READY;
 1314              		.loc 1 483 0
 1315 00a2 0020     		movs	r0, #0
 1316 00a4 6064     		str	r0, [r4, #68]
 484:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->PreviousState = I2C_STATE_NONE;
 1317              		.loc 1 484 0
 1318 00a6 2023     		movs	r3, #32
 1319 00a8 84F84130 		strb	r3, [r4, #65]
 485:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Mode = HAL_I2C_MODE_NONE;
 1320              		.loc 1 485 0
 1321 00ac 2063     		str	r0, [r4, #48]
 486:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1322              		.loc 1 486 0
 1323 00ae 84F84200 		strb	r0, [r4, #66]
 488:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 1324              		.loc 1 488 0
 1325 00b2 10BD     		pop	{r4, pc}
 1326              	.LVL102:
 1327              	.L112:
 1328              	.LCFI18:
 1329              		.cfi_def_cfa_offset 0
 1330              		.cfi_restore 4
 1331              		.cfi_restore 14
ARM GAS  /tmp/ccyfI9lR.s 			page 112


 415:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1332              		.loc 1 415 0
 1333 00b4 0120     		movs	r0, #1
 1334              	.LVL103:
 1335 00b6 7047     		bx	lr
 1336              	.L116:
 1337              		.align	2
 1338              	.L115:
 1339 00b8 00800002 		.word	33587200
 1340              		.cfi_endproc
 1341              	.LFE136:
 1343              		.section	.text.HAL_I2C_MspDeInit,"ax",%progbits
 1344              		.align	2
 1345              		.weak	HAL_I2C_MspDeInit
 1346              		.thumb
 1347              		.thumb_func
 1349              	HAL_I2C_MspDeInit:
 1350              	.LFB139:
 550:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 1351              		.loc 1 550 0
 1352              		.cfi_startproc
 1353              		@ args = 0, pretend = 0, frame = 0
 1354              		@ frame_needed = 0, uses_anonymous_args = 0
 1355              		@ link register save eliminated.
 1356              	.LVL104:
 1357 0000 7047     		bx	lr
 1358              		.cfi_endproc
 1359              	.LFE139:
 1361 0002 00BF     		.section	.text.HAL_I2C_DeInit,"ax",%progbits
 1362              		.align	2
 1363              		.global	HAL_I2C_DeInit
 1364              		.thumb
 1365              		.thumb_func
 1367              	HAL_I2C_DeInit:
 1368              	.LFB137:
 498:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the I2C handle allocation */
 1369              		.loc 1 498 0
 1370              		.cfi_startproc
 1371              		@ args = 0, pretend = 0, frame = 0
 1372              		@ frame_needed = 0, uses_anonymous_args = 0
 1373              	.LVL105:
 500:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 1374              		.loc 1 500 0
 1375 0000 A8B1     		cbz	r0, .L120
 498:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the I2C handle allocation */
 1376              		.loc 1 498 0
 1377 0002 10B5     		push	{r4, lr}
 1378              	.LCFI19:
 1379              		.cfi_def_cfa_offset 8
 1380              		.cfi_offset 4, -8
 1381              		.cfi_offset 14, -4
 1382 0004 0446     		mov	r4, r0
 508:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1383              		.loc 1 508 0
 1384 0006 2423     		movs	r3, #36
 1385 0008 80F84130 		strb	r3, [r0, #65]
 511:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 113


 1386              		.loc 1 511 0
 1387 000c 0268     		ldr	r2, [r0]
 1388 000e 1368     		ldr	r3, [r2]
 1389 0010 23F00103 		bic	r3, r3, #1
 1390 0014 1360     		str	r3, [r2]
 514:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1391              		.loc 1 514 0
 1392 0016 FFF7FEFF 		bl	HAL_I2C_MspDeInit
 1393              	.LVL106:
 516:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->State = HAL_I2C_STATE_RESET;
 1394              		.loc 1 516 0
 1395 001a 0020     		movs	r0, #0
 1396 001c 6064     		str	r0, [r4, #68]
 517:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->PreviousState = I2C_STATE_NONE;
 1397              		.loc 1 517 0
 1398 001e 84F84100 		strb	r0, [r4, #65]
 518:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Mode = HAL_I2C_MODE_NONE;
 1399              		.loc 1 518 0
 1400 0022 2063     		str	r0, [r4, #48]
 519:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1401              		.loc 1 519 0
 1402 0024 84F84200 		strb	r0, [r4, #66]
 522:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1403              		.loc 1 522 0
 1404 0028 84F84000 		strb	r0, [r4, #64]
 524:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 1405              		.loc 1 524 0
 1406 002c 10BD     		pop	{r4, pc}
 1407              	.LVL107:
 1408              	.L120:
 1409              	.LCFI20:
 1410              		.cfi_def_cfa_offset 0
 1411              		.cfi_restore 4
 1412              		.cfi_restore 14
 502:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1413              		.loc 1 502 0
 1414 002e 0120     		movs	r0, #1
 1415              	.LVL108:
 1416 0030 7047     		bx	lr
 1417              		.cfi_endproc
 1418              	.LFE137:
 1420 0032 00BF     		.section	.text.HAL_I2C_Master_Transmit,"ax",%progbits
 1421              		.align	2
 1422              		.global	HAL_I2C_Master_Transmit
 1423              		.thumb
 1424              		.thumb_func
 1426              	HAL_I2C_Master_Transmit:
 1427              	.LFB140:
 634:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 1428              		.loc 1 634 0
 1429              		.cfi_startproc
 1430              		@ args = 4, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              	.LVL109:
 1433 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1434              	.LCFI21:
 1435              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/ccyfI9lR.s 			page 114


 1436              		.cfi_offset 4, -28
 1437              		.cfi_offset 5, -24
 1438              		.cfi_offset 6, -20
 1439              		.cfi_offset 7, -16
 1440              		.cfi_offset 8, -12
 1441              		.cfi_offset 9, -8
 1442              		.cfi_offset 14, -4
 1443 0004 83B0     		sub	sp, sp, #12
 1444              	.LCFI22:
 1445              		.cfi_def_cfa_offset 40
 1446              	.LVL110:
 637:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 1447              		.loc 1 637 0
 1448 0006 90F84150 		ldrb	r5, [r0, #65]	@ zero_extendqisi2
 1449 000a EDB2     		uxtb	r5, r5
 1450 000c 202D     		cmp	r5, #32
 1451 000e 40F0AB80 		bne	.L133
 640:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1452              		.loc 1 640 0
 1453 0012 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 1454 0016 012C     		cmp	r4, #1
 1455 0018 00F0A880 		beq	.L134
 1456 001c 9846     		mov	r8, r3
 1457 001e 1746     		mov	r7, r2
 1458 0020 0D46     		mov	r5, r1
 1459 0022 0446     		mov	r4, r0
 640:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1460              		.loc 1 640 0 is_stmt 0 discriminator 2
 1461 0024 4FF00109 		mov	r9, #1
 1462 0028 80F84090 		strb	r9, [r0, #64]
 643:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1463              		.loc 1 643 0 is_stmt 1 discriminator 2
 1464 002c FFF7FEFF 		bl	HAL_GetTick
 1465              	.LVL111:
 1466 0030 0646     		mov	r6, r0
 1467              	.LVL112:
 645:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 1468              		.loc 1 645 0 discriminator 2
 1469 0032 0090     		str	r0, [sp]
 1470 0034 1923     		movs	r3, #25
 1471 0036 4A46     		mov	r2, r9
 1472 0038 4FF40041 		mov	r1, #32768
 1473 003c 2046     		mov	r0, r4
 1474              	.LVL113:
 1475 003e FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 1476              	.LVL114:
 1477 0042 0028     		cmp	r0, #0
 1478 0044 40F09480 		bne	.L135
 650:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MASTER;
 1479              		.loc 1 650 0
 1480 0048 2123     		movs	r3, #33
 1481 004a 84F84130 		strb	r3, [r4, #65]
 651:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 1482              		.loc 1 651 0
 1483 004e 1023     		movs	r3, #16
 1484 0050 84F84230 		strb	r3, [r4, #66]
 652:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 115


 1485              		.loc 1 652 0
 1486 0054 0023     		movs	r3, #0
 1487 0056 6364     		str	r3, [r4, #68]
 655:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
 1488              		.loc 1 655 0
 1489 0058 6762     		str	r7, [r4, #36]
 656:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
 1490              		.loc 1 656 0
 1491 005a A4F82A80 		strh	r8, [r4, #42]	@ movhi
 657:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1492              		.loc 1 657 0
 1493 005e 6363     		str	r3, [r4, #52]
 661:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 1494              		.loc 1 661 0
 1495 0060 638D     		ldrh	r3, [r4, #42]
 1496 0062 9BB2     		uxth	r3, r3
 1497 0064 FF2B     		cmp	r3, #255
 1498 0066 0AD9     		bls	.L125
 663:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRIT
 1499              		.loc 1 663 0
 1500 0068 FF22     		movs	r2, #255
 1501 006a 2285     		strh	r2, [r4, #40]	@ movhi
 664:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 1502              		.loc 1 664 0
 1503 006c 464B     		ldr	r3, .L140
 1504 006e 0093     		str	r3, [sp]
 1505 0070 4FF08073 		mov	r3, #16777216
 1506 0074 2946     		mov	r1, r5
 1507 0076 2046     		mov	r0, r4
 1508 0078 FFF7FEFF 		bl	I2C_TransferConfig
 1509              	.LVL115:
 1510 007c 4EE0     		b	.L126
 1511              	.L125:
 668:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRI
 1512              		.loc 1 668 0
 1513 007e 628D     		ldrh	r2, [r4, #42]
 1514 0080 92B2     		uxth	r2, r2
 1515 0082 2285     		strh	r2, [r4, #40]	@ movhi
 669:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 1516              		.loc 1 669 0
 1517 0084 404B     		ldr	r3, .L140
 1518 0086 0093     		str	r3, [sp]
 1519 0088 4FF00073 		mov	r3, #33554432
 1520 008c D2B2     		uxtb	r2, r2
 1521 008e 2946     		mov	r1, r5
 1522 0090 2046     		mov	r0, r4
 1523 0092 FFF7FEFF 		bl	I2C_TransferConfig
 1524              	.LVL116:
 1525 0096 41E0     		b	.L126
 1526              	.L131:
 675:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 1527              		.loc 1 675 0
 1528 0098 3246     		mov	r2, r6
 1529 009a 0A99     		ldr	r1, [sp, #40]
 1530 009c 2046     		mov	r0, r4
 1531 009e FFF7FEFF 		bl	I2C_WaitOnTXISFlagUntilTimeout
 1532              	.LVL117:
ARM GAS  /tmp/ccyfI9lR.s 			page 116


 1533 00a2 20B1     		cbz	r0, .L128
 677:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 1534              		.loc 1 677 0
 1535 00a4 636C     		ldr	r3, [r4, #68]
 1536 00a6 042B     		cmp	r3, #4
 1537 00a8 64D1     		bne	.L136
 679:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 1538              		.loc 1 679 0
 1539 00aa 0123     		movs	r3, #1
 1540 00ac 67E0     		b	.L124
 1541              	.L128:
 687:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 1542              		.loc 1 687 0
 1543 00ae 2268     		ldr	r2, [r4]
 1544 00b0 636A     		ldr	r3, [r4, #36]
 1545 00b2 591C     		adds	r1, r3, #1
 1546 00b4 6162     		str	r1, [r4, #36]
 1547 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1548 00b8 9362     		str	r3, [r2, #40]
 688:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
 1549              		.loc 1 688 0
 1550 00ba 638D     		ldrh	r3, [r4, #42]
 1551 00bc 9BB2     		uxth	r3, r3
 1552 00be 013B     		subs	r3, r3, #1
 1553 00c0 9BB2     		uxth	r3, r3
 1554 00c2 6385     		strh	r3, [r4, #42]	@ movhi
 689:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1555              		.loc 1 689 0
 1556 00c4 238D     		ldrh	r3, [r4, #40]
 1557 00c6 013B     		subs	r3, r3, #1
 1558 00c8 9BB2     		uxth	r3, r3
 1559 00ca 2385     		strh	r3, [r4, #40]	@ movhi
 691:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 1560              		.loc 1 691 0
 1561 00cc 33BB     		cbnz	r3, .L126
 691:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 1562              		.loc 1 691 0 is_stmt 0 discriminator 1
 1563 00ce 638D     		ldrh	r3, [r4, #42]
 1564 00d0 9BB2     		uxth	r3, r3
 1565 00d2 1BB3     		cbz	r3, .L126
 694:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 1566              		.loc 1 694 0 is_stmt 1
 1567 00d4 0096     		str	r6, [sp]
 1568 00d6 0A9B     		ldr	r3, [sp, #40]
 1569 00d8 0022     		movs	r2, #0
 1570 00da 8021     		movs	r1, #128
 1571 00dc 2046     		mov	r0, r4
 1572 00de FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 1573              	.LVL118:
 1574 00e2 0028     		cmp	r0, #0
 1575 00e4 48D1     		bne	.L137
 699:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 1576              		.loc 1 699 0
 1577 00e6 638D     		ldrh	r3, [r4, #42]
 1578 00e8 9BB2     		uxth	r3, r3
 1579 00ea FF2B     		cmp	r3, #255
 1580 00ec 0AD9     		bls	.L130
ARM GAS  /tmp/ccyfI9lR.s 			page 117


 701:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 1581              		.loc 1 701 0
 1582 00ee FF22     		movs	r2, #255
 1583 00f0 2285     		strh	r2, [r4, #40]	@ movhi
 702:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 1584              		.loc 1 702 0
 1585 00f2 0023     		movs	r3, #0
 1586 00f4 0093     		str	r3, [sp]
 1587 00f6 4FF08073 		mov	r3, #16777216
 1588 00fa 2946     		mov	r1, r5
 1589 00fc 2046     		mov	r0, r4
 1590 00fe FFF7FEFF 		bl	I2C_TransferConfig
 1591              	.LVL119:
 1592 0102 0BE0     		b	.L126
 1593              	.L130:
 706:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 1594              		.loc 1 706 0
 1595 0104 628D     		ldrh	r2, [r4, #42]
 1596 0106 92B2     		uxth	r2, r2
 1597 0108 2285     		strh	r2, [r4, #40]	@ movhi
 707:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 1598              		.loc 1 707 0
 1599 010a 0023     		movs	r3, #0
 1600 010c 0093     		str	r3, [sp]
 1601 010e 4FF00073 		mov	r3, #33554432
 1602 0112 D2B2     		uxtb	r2, r2
 1603 0114 2946     		mov	r1, r5
 1604 0116 2046     		mov	r0, r4
 1605 0118 FFF7FEFF 		bl	I2C_TransferConfig
 1606              	.LVL120:
 1607              	.L126:
 672:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 1608              		.loc 1 672 0
 1609 011c 638D     		ldrh	r3, [r4, #42]
 1610 011e 9BB2     		uxth	r3, r3
 1611 0120 002B     		cmp	r3, #0
 1612 0122 B9D1     		bne	.L131
 714:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 1613              		.loc 1 714 0
 1614 0124 3246     		mov	r2, r6
 1615 0126 0A99     		ldr	r1, [sp, #40]
 1616 0128 2046     		mov	r0, r4
 1617 012a FFF7FEFF 		bl	I2C_WaitOnSTOPFlagUntilTimeout
 1618              	.LVL121:
 1619 012e 0346     		mov	r3, r0
 1620 0130 20B1     		cbz	r0, .L132
 716:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 1621              		.loc 1 716 0
 1622 0132 636C     		ldr	r3, [r4, #68]
 1623 0134 042B     		cmp	r3, #4
 1624 0136 21D1     		bne	.L138
 718:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 1625              		.loc 1 718 0
 1626 0138 0123     		movs	r3, #1
 1627 013a 20E0     		b	.L124
 1628              	.L132:
 727:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 118


 1629              		.loc 1 727 0
 1630 013c 2268     		ldr	r2, [r4]
 1631 013e 2021     		movs	r1, #32
 1632 0140 D161     		str	r1, [r2, #28]
 730:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1633              		.loc 1 730 0
 1634 0142 2068     		ldr	r0, [r4]
 1635 0144 4268     		ldr	r2, [r0, #4]
 1636 0146 22F0FF72 		bic	r2, r2, #33423360
 1637 014a 22F48B32 		bic	r2, r2, #71168
 1638 014e 22F4FF72 		bic	r2, r2, #510
 1639 0152 22F00102 		bic	r2, r2, #1
 1640 0156 4260     		str	r2, [r0, #4]
 732:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
 1641              		.loc 1 732 0
 1642 0158 84F84110 		strb	r1, [r4, #65]
 733:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1643              		.loc 1 733 0
 1644 015c 0022     		movs	r2, #0
 1645 015e 84F84220 		strb	r2, [r4, #66]
 736:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1646              		.loc 1 736 0
 1647 0162 84F84020 		strb	r2, [r4, #64]
 738:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1648              		.loc 1 738 0
 1649 0166 0AE0     		b	.L124
 1650              	.LVL122:
 1651              	.L133:
 742:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1652              		.loc 1 742 0
 1653 0168 0223     		movs	r3, #2
 1654              	.LVL123:
 1655 016a 08E0     		b	.L124
 1656              	.LVL124:
 1657              	.L134:
 640:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1658              		.loc 1 640 0
 1659 016c 0223     		movs	r3, #2
 1660              	.LVL125:
 1661 016e 06E0     		b	.L124
 1662              	.LVL126:
 1663              	.L135:
 647:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 1664              		.loc 1 647 0
 1665 0170 0323     		movs	r3, #3
 1666 0172 04E0     		b	.L124
 1667              	.L136:
 683:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 1668              		.loc 1 683 0
 1669 0174 0323     		movs	r3, #3
 1670 0176 02E0     		b	.L124
 1671              	.L137:
 696:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 1672              		.loc 1 696 0
 1673 0178 0323     		movs	r3, #3
 1674 017a 00E0     		b	.L124
 1675              	.L138:
ARM GAS  /tmp/ccyfI9lR.s 			page 119


 722:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 1676              		.loc 1 722 0
 1677 017c 0323     		movs	r3, #3
 1678              	.LVL127:
 1679              	.L124:
 744:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1680              		.loc 1 744 0
 1681 017e 1846     		mov	r0, r3
 1682 0180 03B0     		add	sp, sp, #12
 1683              	.LCFI23:
 1684              		.cfi_def_cfa_offset 28
 1685              		@ sp needed
 1686 0182 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1687              	.LVL128:
 1688              	.L141:
 1689 0186 00BF     		.align	2
 1690              	.L140:
 1691 0188 00200080 		.word	-2147475456
 1692              		.cfi_endproc
 1693              	.LFE140:
 1695              		.section	.text.HAL_I2C_Master_Receive,"ax",%progbits
 1696              		.align	2
 1697              		.global	HAL_I2C_Master_Receive
 1698              		.thumb
 1699              		.thumb_func
 1701              	HAL_I2C_Master_Receive:
 1702              	.LFB141:
 758:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 1703              		.loc 1 758 0
 1704              		.cfi_startproc
 1705              		@ args = 4, pretend = 0, frame = 0
 1706              		@ frame_needed = 0, uses_anonymous_args = 0
 1707              	.LVL129:
 1708 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1709              	.LCFI24:
 1710              		.cfi_def_cfa_offset 28
 1711              		.cfi_offset 4, -28
 1712              		.cfi_offset 5, -24
 1713              		.cfi_offset 6, -20
 1714              		.cfi_offset 7, -16
 1715              		.cfi_offset 8, -12
 1716              		.cfi_offset 9, -8
 1717              		.cfi_offset 14, -4
 1718 0004 83B0     		sub	sp, sp, #12
 1719              	.LCFI25:
 1720              		.cfi_def_cfa_offset 40
 1721              	.LVL130:
 761:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 1722              		.loc 1 761 0
 1723 0006 90F84150 		ldrb	r5, [r0, #65]	@ zero_extendqisi2
 1724 000a EDB2     		uxtb	r5, r5
 1725 000c 202D     		cmp	r5, #32
 1726 000e 40F0AA80 		bne	.L152
 764:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1727              		.loc 1 764 0
 1728 0012 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 1729 0016 012C     		cmp	r4, #1
ARM GAS  /tmp/ccyfI9lR.s 			page 120


 1730 0018 00F0A780 		beq	.L153
 1731 001c 9846     		mov	r8, r3
 1732 001e 1746     		mov	r7, r2
 1733 0020 0D46     		mov	r5, r1
 1734 0022 0446     		mov	r4, r0
 764:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1735              		.loc 1 764 0 is_stmt 0 discriminator 2
 1736 0024 4FF00109 		mov	r9, #1
 1737 0028 80F84090 		strb	r9, [r0, #64]
 767:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1738              		.loc 1 767 0 is_stmt 1 discriminator 2
 1739 002c FFF7FEFF 		bl	HAL_GetTick
 1740              	.LVL131:
 1741 0030 0646     		mov	r6, r0
 1742              	.LVL132:
 769:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 1743              		.loc 1 769 0 discriminator 2
 1744 0032 0090     		str	r0, [sp]
 1745 0034 1923     		movs	r3, #25
 1746 0036 4A46     		mov	r2, r9
 1747 0038 4FF40041 		mov	r1, #32768
 1748 003c 2046     		mov	r0, r4
 1749              	.LVL133:
 1750 003e FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 1751              	.LVL134:
 1752 0042 0028     		cmp	r0, #0
 1753 0044 40F09380 		bne	.L154
 774:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MASTER;
 1754              		.loc 1 774 0
 1755 0048 2223     		movs	r3, #34
 1756 004a 84F84130 		strb	r3, [r4, #65]
 775:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 1757              		.loc 1 775 0
 1758 004e 1023     		movs	r3, #16
 1759 0050 84F84230 		strb	r3, [r4, #66]
 776:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1760              		.loc 1 776 0
 1761 0054 0023     		movs	r3, #0
 1762 0056 6364     		str	r3, [r4, #68]
 779:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
 1763              		.loc 1 779 0
 1764 0058 6762     		str	r7, [r4, #36]
 780:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
 1765              		.loc 1 780 0
 1766 005a A4F82A80 		strh	r8, [r4, #42]	@ movhi
 781:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1767              		.loc 1 781 0
 1768 005e 6363     		str	r3, [r4, #52]
 785:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 1769              		.loc 1 785 0
 1770 0060 638D     		ldrh	r3, [r4, #42]
 1771 0062 9BB2     		uxth	r3, r3
 1772 0064 FF2B     		cmp	r3, #255
 1773 0066 0AD9     		bls	.L144
 787:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ
 1774              		.loc 1 787 0
 1775 0068 FF22     		movs	r2, #255
ARM GAS  /tmp/ccyfI9lR.s 			page 121


 1776 006a 2285     		strh	r2, [r4, #40]	@ movhi
 788:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 1777              		.loc 1 788 0
 1778 006c 454B     		ldr	r3, .L159
 1779 006e 0093     		str	r3, [sp]
 1780 0070 4FF08073 		mov	r3, #16777216
 1781 0074 2946     		mov	r1, r5
 1782 0076 2046     		mov	r0, r4
 1783 0078 FFF7FEFF 		bl	I2C_TransferConfig
 1784              	.LVL135:
 1785 007c 4DE0     		b	.L145
 1786              	.L144:
 792:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_REA
 1787              		.loc 1 792 0
 1788 007e 628D     		ldrh	r2, [r4, #42]
 1789 0080 92B2     		uxth	r2, r2
 1790 0082 2285     		strh	r2, [r4, #40]	@ movhi
 793:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 1791              		.loc 1 793 0
 1792 0084 3F4B     		ldr	r3, .L159
 1793 0086 0093     		str	r3, [sp]
 1794 0088 4FF00073 		mov	r3, #33554432
 1795 008c D2B2     		uxtb	r2, r2
 1796 008e 2946     		mov	r1, r5
 1797 0090 2046     		mov	r0, r4
 1798 0092 FFF7FEFF 		bl	I2C_TransferConfig
 1799              	.LVL136:
 1800 0096 40E0     		b	.L145
 1801              	.L150:
 799:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 1802              		.loc 1 799 0
 1803 0098 3246     		mov	r2, r6
 1804 009a 0A99     		ldr	r1, [sp, #40]
 1805 009c 2046     		mov	r0, r4
 1806 009e FFF7FEFF 		bl	I2C_WaitOnRXNEFlagUntilTimeout
 1807              	.LVL137:
 1808 00a2 20B1     		cbz	r0, .L147
 801:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 1809              		.loc 1 801 0
 1810 00a4 636C     		ldr	r3, [r4, #68]
 1811 00a6 042B     		cmp	r3, #4
 1812 00a8 63D1     		bne	.L155
 803:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 1813              		.loc 1 803 0
 1814 00aa 0123     		movs	r3, #1
 1815 00ac 66E0     		b	.L143
 1816              	.L147:
 812:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
 1817              		.loc 1 812 0
 1818 00ae 636A     		ldr	r3, [r4, #36]
 1819 00b0 5A1C     		adds	r2, r3, #1
 1820 00b2 6262     		str	r2, [r4, #36]
 1821 00b4 2268     		ldr	r2, [r4]
 1822 00b6 526A     		ldr	r2, [r2, #36]
 1823 00b8 1A70     		strb	r2, [r3]
 813:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 1824              		.loc 1 813 0
ARM GAS  /tmp/ccyfI9lR.s 			page 122


 1825 00ba 228D     		ldrh	r2, [r4, #40]
 1826 00bc 013A     		subs	r2, r2, #1
 1827 00be 92B2     		uxth	r2, r2
 1828 00c0 2285     		strh	r2, [r4, #40]	@ movhi
 814:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1829              		.loc 1 814 0
 1830 00c2 638D     		ldrh	r3, [r4, #42]
 1831 00c4 9BB2     		uxth	r3, r3
 1832 00c6 013B     		subs	r3, r3, #1
 1833 00c8 9BB2     		uxth	r3, r3
 1834 00ca 6385     		strh	r3, [r4, #42]	@ movhi
 816:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 1835              		.loc 1 816 0
 1836 00cc 2ABB     		cbnz	r2, .L145
 816:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 1837              		.loc 1 816 0 is_stmt 0 discriminator 1
 1838 00ce 638D     		ldrh	r3, [r4, #42]
 1839 00d0 9BB2     		uxth	r3, r3
 1840 00d2 13B3     		cbz	r3, .L145
 819:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 1841              		.loc 1 819 0 is_stmt 1
 1842 00d4 0096     		str	r6, [sp]
 1843 00d6 0A9B     		ldr	r3, [sp, #40]
 1844 00d8 8021     		movs	r1, #128
 1845 00da 2046     		mov	r0, r4
 1846 00dc FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 1847              	.LVL138:
 1848 00e0 0028     		cmp	r0, #0
 1849 00e2 48D1     		bne	.L156
 824:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 1850              		.loc 1 824 0
 1851 00e4 638D     		ldrh	r3, [r4, #42]
 1852 00e6 9BB2     		uxth	r3, r3
 1853 00e8 FF2B     		cmp	r3, #255
 1854 00ea 0AD9     		bls	.L149
 826:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 1855              		.loc 1 826 0
 1856 00ec FF22     		movs	r2, #255
 1857 00ee 2285     		strh	r2, [r4, #40]	@ movhi
 827:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 1858              		.loc 1 827 0
 1859 00f0 0023     		movs	r3, #0
 1860 00f2 0093     		str	r3, [sp]
 1861 00f4 4FF08073 		mov	r3, #16777216
 1862 00f8 2946     		mov	r1, r5
 1863 00fa 2046     		mov	r0, r4
 1864 00fc FFF7FEFF 		bl	I2C_TransferConfig
 1865              	.LVL139:
 1866 0100 0BE0     		b	.L145
 1867              	.L149:
 831:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 1868              		.loc 1 831 0
 1869 0102 628D     		ldrh	r2, [r4, #42]
 1870 0104 92B2     		uxth	r2, r2
 1871 0106 2285     		strh	r2, [r4, #40]	@ movhi
 832:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 1872              		.loc 1 832 0
ARM GAS  /tmp/ccyfI9lR.s 			page 123


 1873 0108 0023     		movs	r3, #0
 1874 010a 0093     		str	r3, [sp]
 1875 010c 4FF00073 		mov	r3, #33554432
 1876 0110 D2B2     		uxtb	r2, r2
 1877 0112 2946     		mov	r1, r5
 1878 0114 2046     		mov	r0, r4
 1879 0116 FFF7FEFF 		bl	I2C_TransferConfig
 1880              	.LVL140:
 1881              	.L145:
 796:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 1882              		.loc 1 796 0
 1883 011a 638D     		ldrh	r3, [r4, #42]
 1884 011c 9BB2     		uxth	r3, r3
 1885 011e 002B     		cmp	r3, #0
 1886 0120 BAD1     		bne	.L150
 839:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 1887              		.loc 1 839 0
 1888 0122 3246     		mov	r2, r6
 1889 0124 0A99     		ldr	r1, [sp, #40]
 1890 0126 2046     		mov	r0, r4
 1891 0128 FFF7FEFF 		bl	I2C_WaitOnSTOPFlagUntilTimeout
 1892              	.LVL141:
 1893 012c 0346     		mov	r3, r0
 1894 012e 20B1     		cbz	r0, .L151
 841:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 1895              		.loc 1 841 0
 1896 0130 636C     		ldr	r3, [r4, #68]
 1897 0132 042B     		cmp	r3, #4
 1898 0134 21D1     		bne	.L157
 843:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 1899              		.loc 1 843 0
 1900 0136 0123     		movs	r3, #1
 1901 0138 20E0     		b	.L143
 1902              	.L151:
 852:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1903              		.loc 1 852 0
 1904 013a 2268     		ldr	r2, [r4]
 1905 013c 2021     		movs	r1, #32
 1906 013e D161     		str	r1, [r2, #28]
 855:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1907              		.loc 1 855 0
 1908 0140 2068     		ldr	r0, [r4]
 1909 0142 4268     		ldr	r2, [r0, #4]
 1910 0144 22F0FF72 		bic	r2, r2, #33423360
 1911 0148 22F48B32 		bic	r2, r2, #71168
 1912 014c 22F4FF72 		bic	r2, r2, #510
 1913 0150 22F00102 		bic	r2, r2, #1
 1914 0154 4260     		str	r2, [r0, #4]
 857:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
 1915              		.loc 1 857 0
 1916 0156 84F84110 		strb	r1, [r4, #65]
 858:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1917              		.loc 1 858 0
 1918 015a 0022     		movs	r2, #0
 1919 015c 84F84220 		strb	r2, [r4, #66]
 861:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1920              		.loc 1 861 0
ARM GAS  /tmp/ccyfI9lR.s 			page 124


 1921 0160 84F84020 		strb	r2, [r4, #64]
 863:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1922              		.loc 1 863 0
 1923 0164 0AE0     		b	.L143
 1924              	.LVL142:
 1925              	.L152:
 867:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 1926              		.loc 1 867 0
 1927 0166 0223     		movs	r3, #2
 1928              	.LVL143:
 1929 0168 08E0     		b	.L143
 1930              	.LVL144:
 1931              	.L153:
 764:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1932              		.loc 1 764 0
 1933 016a 0223     		movs	r3, #2
 1934              	.LVL145:
 1935 016c 06E0     		b	.L143
 1936              	.LVL146:
 1937              	.L154:
 771:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 1938              		.loc 1 771 0
 1939 016e 0323     		movs	r3, #3
 1940 0170 04E0     		b	.L143
 1941              	.L155:
 807:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 1942              		.loc 1 807 0
 1943 0172 0323     		movs	r3, #3
 1944 0174 02E0     		b	.L143
 1945              	.L156:
 821:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 1946              		.loc 1 821 0
 1947 0176 0323     		movs	r3, #3
 1948 0178 00E0     		b	.L143
 1949              	.L157:
 847:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 1950              		.loc 1 847 0
 1951 017a 0323     		movs	r3, #3
 1952              	.LVL147:
 1953              	.L143:
 869:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 1954              		.loc 1 869 0
 1955 017c 1846     		mov	r0, r3
 1956 017e 03B0     		add	sp, sp, #12
 1957              	.LCFI26:
 1958              		.cfi_def_cfa_offset 28
 1959              		@ sp needed
 1960 0180 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1961              	.LVL148:
 1962              	.L160:
 1963              		.align	2
 1964              	.L159:
 1965 0184 00240080 		.word	-2147474432
 1966              		.cfi_endproc
 1967              	.LFE141:
 1969              		.section	.text.HAL_I2C_Slave_Transmit,"ax",%progbits
 1970              		.align	2
ARM GAS  /tmp/ccyfI9lR.s 			page 125


 1971              		.global	HAL_I2C_Slave_Transmit
 1972              		.thumb
 1973              		.thumb_func
 1975              	HAL_I2C_Slave_Transmit:
 1976              	.LFB142:
 881:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 1977              		.loc 1 881 0
 1978              		.cfi_startproc
 1979              		@ args = 0, pretend = 0, frame = 0
 1980              		@ frame_needed = 0, uses_anonymous_args = 0
 1981              	.LVL149:
 1982 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1983              	.LCFI27:
 1984              		.cfi_def_cfa_offset 24
 1985              		.cfi_offset 4, -24
 1986              		.cfi_offset 5, -20
 1987              		.cfi_offset 6, -16
 1988              		.cfi_offset 7, -12
 1989              		.cfi_offset 8, -8
 1990              		.cfi_offset 14, -4
 1991 0004 82B0     		sub	sp, sp, #8
 1992              	.LCFI28:
 1993              		.cfi_def_cfa_offset 32
 1994              	.LVL150:
 884:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 1995              		.loc 1 884 0
 1996 0006 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 1997 000a E4B2     		uxtb	r4, r4
 1998 000c 202C     		cmp	r4, #32
 1999 000e 40F0AE80 		bne	.L171
 886:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2000              		.loc 1 886 0
 2001 0012 002A     		cmp	r2, #0
 2002 0014 18BF     		it	ne
 2003 0016 0029     		cmpne	r1, #0
 2004 0018 00F0AB80 		beq	.L172
 891:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2005              		.loc 1 891 0
 2006 001c 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 2007 0020 012C     		cmp	r4, #1
 2008 0022 00F0A880 		beq	.L173
 2009 0026 1F46     		mov	r7, r3
 2010 0028 1646     		mov	r6, r2
 2011 002a 0D46     		mov	r5, r1
 2012 002c 0446     		mov	r4, r0
 891:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2013              		.loc 1 891 0 is_stmt 0 discriminator 2
 2014 002e 0123     		movs	r3, #1
 2015              	.LVL151:
 2016 0030 80F84030 		strb	r3, [r0, #64]
 894:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2017              		.loc 1 894 0 is_stmt 1 discriminator 2
 2018 0034 FFF7FEFF 		bl	HAL_GetTick
 2019              	.LVL152:
 2020 0038 8046     		mov	r8, r0
 2021              	.LVL153:
 896:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_SLAVE;
ARM GAS  /tmp/ccyfI9lR.s 			page 126


 2022              		.loc 1 896 0 discriminator 2
 2023 003a 2123     		movs	r3, #33
 2024 003c 84F84130 		strb	r3, [r4, #65]
 897:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 2025              		.loc 1 897 0 discriminator 2
 2026 0040 2023     		movs	r3, #32
 2027 0042 84F84230 		strb	r3, [r4, #66]
 898:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2028              		.loc 1 898 0 discriminator 2
 2029 0046 0022     		movs	r2, #0
 2030 0048 6264     		str	r2, [r4, #68]
 901:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
 2031              		.loc 1 901 0 discriminator 2
 2032 004a 6562     		str	r5, [r4, #36]
 902:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
 2033              		.loc 1 902 0 discriminator 2
 2034 004c 6685     		strh	r6, [r4, #42]	@ movhi
 903:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2035              		.loc 1 903 0 discriminator 2
 2036 004e 6263     		str	r2, [r4, #52]
 906:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2037              		.loc 1 906 0 discriminator 2
 2038 0050 2168     		ldr	r1, [r4]
 2039 0052 4B68     		ldr	r3, [r1, #4]
 2040 0054 23F40043 		bic	r3, r3, #32768
 2041 0058 4B60     		str	r3, [r1, #4]
 909:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2042              		.loc 1 909 0 discriminator 2
 2043 005a 0090     		str	r0, [sp]
 2044 005c 3B46     		mov	r3, r7
 2045 005e 0821     		movs	r1, #8
 2046 0060 2046     		mov	r0, r4
 2047              	.LVL154:
 2048 0062 FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 2049              	.LVL155:
 2050 0066 30B1     		cbz	r0, .L163
 912:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
 2051              		.loc 1 912 0
 2052 0068 2268     		ldr	r2, [r4]
 2053 006a 5368     		ldr	r3, [r2, #4]
 2054 006c 43F40043 		orr	r3, r3, #32768
 2055 0070 5360     		str	r3, [r2, #4]
 913:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2056              		.loc 1 913 0
 2057 0072 0323     		movs	r3, #3
 2058 0074 84E0     		b	.L162
 2059              	.L163:
 917:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2060              		.loc 1 917 0
 2061 0076 2368     		ldr	r3, [r4]
 2062 0078 0822     		movs	r2, #8
 2063 007a DA61     		str	r2, [r3, #28]
 920:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2064              		.loc 1 920 0
 2065 007c E368     		ldr	r3, [r4, #12]
 2066 007e 022B     		cmp	r3, #2
 2067 0080 12D1     		bne	.L164
ARM GAS  /tmp/ccyfI9lR.s 			page 127


 923:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 2068              		.loc 1 923 0
 2069 0082 CDF80080 		str	r8, [sp]
 2070 0086 3B46     		mov	r3, r7
 2071 0088 0022     		movs	r2, #0
 2072 008a 0821     		movs	r1, #8
 2073 008c 2046     		mov	r0, r4
 2074 008e FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 2075              	.LVL156:
 2076 0092 30B1     		cbz	r0, .L165
 926:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 2077              		.loc 1 926 0
 2078 0094 2268     		ldr	r2, [r4]
 2079 0096 5368     		ldr	r3, [r2, #4]
 2080 0098 43F40043 		orr	r3, r3, #32768
 2081 009c 5360     		str	r3, [r2, #4]
 927:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 2082              		.loc 1 927 0
 2083 009e 0323     		movs	r3, #3
 2084 00a0 6EE0     		b	.L162
 2085              	.L165:
 931:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2086              		.loc 1 931 0
 2087 00a2 2368     		ldr	r3, [r4]
 2088 00a4 0822     		movs	r2, #8
 2089 00a6 DA61     		str	r2, [r3, #28]
 2090              	.L164:
 935:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2091              		.loc 1 935 0
 2092 00a8 CDF80080 		str	r8, [sp]
 2093 00ac 3B46     		mov	r3, r7
 2094 00ae 0022     		movs	r2, #0
 2095 00b0 4FF48031 		mov	r1, #65536
 2096 00b4 2046     		mov	r0, r4
 2097 00b6 FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 2098              	.LVL157:
 2099 00ba 08B3     		cbz	r0, .L166
 938:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
 2100              		.loc 1 938 0
 2101 00bc 2268     		ldr	r2, [r4]
 2102 00be 5368     		ldr	r3, [r2, #4]
 2103 00c0 43F40043 		orr	r3, r3, #32768
 2104 00c4 5360     		str	r3, [r2, #4]
 939:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2105              		.loc 1 939 0
 2106 00c6 0323     		movs	r3, #3
 2107 00c8 5AE0     		b	.L162
 2108              	.L168:
 945:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 2109              		.loc 1 945 0
 2110 00ca 4246     		mov	r2, r8
 2111 00cc 3946     		mov	r1, r7
 2112 00ce 2046     		mov	r0, r4
 2113 00d0 FFF7FEFF 		bl	I2C_WaitOnTXISFlagUntilTimeout
 2114              	.LVL158:
 2115 00d4 48B1     		cbz	r0, .L167
 948:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 128


 2116              		.loc 1 948 0
 2117 00d6 2268     		ldr	r2, [r4]
 2118 00d8 5368     		ldr	r3, [r2, #4]
 2119 00da 43F40043 		orr	r3, r3, #32768
 2120 00de 5360     		str	r3, [r2, #4]
 950:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 2121              		.loc 1 950 0
 2122 00e0 636C     		ldr	r3, [r4, #68]
 2123 00e2 042B     		cmp	r3, #4
 2124 00e4 49D1     		bne	.L174
 952:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 2125              		.loc 1 952 0
 2126 00e6 0123     		movs	r3, #1
 2127 00e8 4AE0     		b	.L162
 2128              	.L167:
 961:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 2129              		.loc 1 961 0
 2130 00ea 2268     		ldr	r2, [r4]
 2131 00ec 636A     		ldr	r3, [r4, #36]
 2132 00ee 591C     		adds	r1, r3, #1
 2133 00f0 6162     		str	r1, [r4, #36]
 2134 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2135 00f4 9362     		str	r3, [r2, #40]
 962:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2136              		.loc 1 962 0
 2137 00f6 638D     		ldrh	r3, [r4, #42]
 2138 00f8 9BB2     		uxth	r3, r3
 2139 00fa 013B     		subs	r3, r3, #1
 2140 00fc 9BB2     		uxth	r3, r3
 2141 00fe 6385     		strh	r3, [r4, #42]	@ movhi
 2142              	.L166:
 942:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2143              		.loc 1 942 0
 2144 0100 638D     		ldrh	r3, [r4, #42]
 2145 0102 9BB2     		uxth	r3, r3
 2146 0104 002B     		cmp	r3, #0
 2147 0106 E0D1     		bne	.L168
 966:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2148              		.loc 1 966 0
 2149 0108 4246     		mov	r2, r8
 2150 010a 3946     		mov	r1, r7
 2151 010c 2046     		mov	r0, r4
 2152 010e FFF7FEFF 		bl	I2C_WaitOnSTOPFlagUntilTimeout
 2153              	.LVL159:
 2154 0112 48B1     		cbz	r0, .L169
 969:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2155              		.loc 1 969 0
 2156 0114 2268     		ldr	r2, [r4]
 2157 0116 5368     		ldr	r3, [r2, #4]
 2158 0118 43F40043 		orr	r3, r3, #32768
 2159 011c 5360     		str	r3, [r2, #4]
 971:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 2160              		.loc 1 971 0
 2161 011e 636C     		ldr	r3, [r4, #68]
 2162 0120 042B     		cmp	r3, #4
 2163 0122 2CD1     		bne	.L175
 975:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
ARM GAS  /tmp/ccyfI9lR.s 			page 129


 2164              		.loc 1 975 0
 2165 0124 0023     		movs	r3, #0
 2166 0126 6364     		str	r3, [r4, #68]
 2167              	.L169:
 984:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2168              		.loc 1 984 0
 2169 0128 2368     		ldr	r3, [r4]
 2170 012a 2022     		movs	r2, #32
 2171 012c DA61     		str	r2, [r3, #28]
 987:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2172              		.loc 1 987 0
 2173 012e CDF80080 		str	r8, [sp]
 2174 0132 3B46     		mov	r3, r7
 2175 0134 0122     		movs	r2, #1
 2176 0136 4FF40041 		mov	r1, #32768
 2177 013a 2046     		mov	r0, r4
 2178 013c FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 2179              	.LVL160:
 2180 0140 0346     		mov	r3, r0
 2181 0142 30B1     		cbz	r0, .L170
 990:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
 2182              		.loc 1 990 0
 2183 0144 2268     		ldr	r2, [r4]
 2184 0146 5368     		ldr	r3, [r2, #4]
 2185 0148 43F40043 		orr	r3, r3, #32768
 2186 014c 5360     		str	r3, [r2, #4]
 991:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2187              		.loc 1 991 0
 2188 014e 0323     		movs	r3, #3
 2189 0150 16E0     		b	.L162
 2190              	.L170:
 995:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2191              		.loc 1 995 0
 2192 0152 2168     		ldr	r1, [r4]
 2193 0154 4A68     		ldr	r2, [r1, #4]
 2194 0156 42F40042 		orr	r2, r2, #32768
 2195 015a 4A60     		str	r2, [r1, #4]
 997:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
 2196              		.loc 1 997 0
 2197 015c 2022     		movs	r2, #32
 2198 015e 84F84120 		strb	r2, [r4, #65]
 998:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2199              		.loc 1 998 0
 2200 0162 0022     		movs	r2, #0
 2201 0164 84F84220 		strb	r2, [r4, #66]
1001:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2202              		.loc 1 1001 0
 2203 0168 84F84020 		strb	r2, [r4, #64]
1003:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2204              		.loc 1 1003 0
 2205 016c 08E0     		b	.L162
 2206              	.LVL161:
 2207              	.L171:
1007:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2208              		.loc 1 1007 0
 2209 016e 0223     		movs	r3, #2
 2210              	.LVL162:
ARM GAS  /tmp/ccyfI9lR.s 			page 130


 2211 0170 06E0     		b	.L162
 2212              	.LVL163:
 2213              	.L172:
 888:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2214              		.loc 1 888 0
 2215 0172 0123     		movs	r3, #1
 2216              	.LVL164:
 2217 0174 04E0     		b	.L162
 2218              	.LVL165:
 2219              	.L173:
 891:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2220              		.loc 1 891 0
 2221 0176 0223     		movs	r3, #2
 2222              	.LVL166:
 2223 0178 02E0     		b	.L162
 2224              	.LVL167:
 2225              	.L174:
 956:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 2226              		.loc 1 956 0
 2227 017a 0323     		movs	r3, #3
 2228 017c 00E0     		b	.L162
 2229              	.L175:
 979:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 2230              		.loc 1 979 0
 2231 017e 0323     		movs	r3, #3
 2232              	.LVL168:
 2233              	.L162:
1009:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2234              		.loc 1 1009 0
 2235 0180 1846     		mov	r0, r3
 2236 0182 02B0     		add	sp, sp, #8
 2237              	.LCFI29:
 2238              		.cfi_def_cfa_offset 24
 2239              		@ sp needed
 2240 0184 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2241              		.cfi_endproc
 2242              	.LFE142:
 2244              		.section	.text.HAL_I2C_Slave_Receive,"ax",%progbits
 2245              		.align	2
 2246              		.global	HAL_I2C_Slave_Receive
 2247              		.thumb
 2248              		.thumb_func
 2250              	HAL_I2C_Slave_Receive:
 2251              	.LFB143:
1021:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 2252              		.loc 1 1021 0
 2253              		.cfi_startproc
 2254              		@ args = 0, pretend = 0, frame = 0
 2255              		@ frame_needed = 0, uses_anonymous_args = 0
 2256              	.LVL169:
 2257 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2258              	.LCFI30:
 2259              		.cfi_def_cfa_offset 24
 2260              		.cfi_offset 4, -24
 2261              		.cfi_offset 5, -20
 2262              		.cfi_offset 6, -16
 2263              		.cfi_offset 7, -12
ARM GAS  /tmp/ccyfI9lR.s 			page 131


 2264              		.cfi_offset 8, -8
 2265              		.cfi_offset 14, -4
 2266 0004 82B0     		sub	sp, sp, #8
 2267              	.LCFI31:
 2268              		.cfi_def_cfa_offset 32
 2269              	.LVL170:
1024:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 2270              		.loc 1 1024 0
 2271 0006 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 2272 000a E4B2     		uxtb	r4, r4
 2273 000c 202C     		cmp	r4, #32
 2274 000e 40F0A880 		bne	.L186
1026:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2275              		.loc 1 1026 0
 2276 0012 002A     		cmp	r2, #0
 2277 0014 18BF     		it	ne
 2278 0016 0029     		cmpne	r1, #0
 2279 0018 00F0A580 		beq	.L187
1031:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2280              		.loc 1 1031 0
 2281 001c 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 2282 0020 012C     		cmp	r4, #1
 2283 0022 00F0A280 		beq	.L188
 2284 0026 1F46     		mov	r7, r3
 2285 0028 1646     		mov	r6, r2
 2286 002a 0D46     		mov	r5, r1
 2287 002c 0446     		mov	r4, r0
1031:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2288              		.loc 1 1031 0 is_stmt 0 discriminator 2
 2289 002e 0123     		movs	r3, #1
 2290              	.LVL171:
 2291 0030 80F84030 		strb	r3, [r0, #64]
1034:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2292              		.loc 1 1034 0 is_stmt 1 discriminator 2
 2293 0034 FFF7FEFF 		bl	HAL_GetTick
 2294              	.LVL172:
 2295 0038 8046     		mov	r8, r0
 2296              	.LVL173:
1036:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 2297              		.loc 1 1036 0 discriminator 2
 2298 003a 2223     		movs	r3, #34
 2299 003c 84F84130 		strb	r3, [r4, #65]
1037:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 2300              		.loc 1 1037 0 discriminator 2
 2301 0040 2023     		movs	r3, #32
 2302 0042 84F84230 		strb	r3, [r4, #66]
1038:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2303              		.loc 1 1038 0 discriminator 2
 2304 0046 0022     		movs	r2, #0
 2305 0048 6264     		str	r2, [r4, #68]
1041:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
 2306              		.loc 1 1041 0 discriminator 2
 2307 004a 6562     		str	r5, [r4, #36]
1042:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
 2308              		.loc 1 1042 0 discriminator 2
 2309 004c 6685     		strh	r6, [r4, #42]	@ movhi
1043:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 132


 2310              		.loc 1 1043 0 discriminator 2
 2311 004e 6263     		str	r2, [r4, #52]
1046:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2312              		.loc 1 1046 0 discriminator 2
 2313 0050 2168     		ldr	r1, [r4]
 2314 0052 4B68     		ldr	r3, [r1, #4]
 2315 0054 23F40043 		bic	r3, r3, #32768
 2316 0058 4B60     		str	r3, [r1, #4]
1049:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2317              		.loc 1 1049 0 discriminator 2
 2318 005a 0090     		str	r0, [sp]
 2319 005c 3B46     		mov	r3, r7
 2320 005e 0821     		movs	r1, #8
 2321 0060 2046     		mov	r0, r4
 2322              	.LVL174:
 2323 0062 FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 2324              	.LVL175:
 2325 0066 30B1     		cbz	r0, .L179
1052:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
 2326              		.loc 1 1052 0
 2327 0068 2268     		ldr	r2, [r4]
 2328 006a 5368     		ldr	r3, [r2, #4]
 2329 006c 43F40043 		orr	r3, r3, #32768
 2330 0070 5360     		str	r3, [r2, #4]
1053:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2331              		.loc 1 1053 0
 2332 0072 0323     		movs	r3, #3
 2333 0074 7EE0     		b	.L178
 2334              	.L179:
1057:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2335              		.loc 1 1057 0
 2336 0076 2368     		ldr	r3, [r4]
 2337 0078 0822     		movs	r2, #8
 2338 007a DA61     		str	r2, [r3, #28]
1060:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2339              		.loc 1 1060 0
 2340 007c CDF80080 		str	r8, [sp]
 2341 0080 3B46     		mov	r3, r7
 2342 0082 0122     		movs	r2, #1
 2343 0084 4FF48031 		mov	r1, #65536
 2344 0088 2046     		mov	r0, r4
 2345 008a FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 2346              	.LVL176:
 2347 008e 0028     		cmp	r0, #0
 2348 0090 30D0     		beq	.L180
1063:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
 2349              		.loc 1 1063 0
 2350 0092 2268     		ldr	r2, [r4]
 2351 0094 5368     		ldr	r3, [r2, #4]
 2352 0096 43F40043 		orr	r3, r3, #32768
 2353 009a 5360     		str	r3, [r2, #4]
1064:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2354              		.loc 1 1064 0
 2355 009c 0323     		movs	r3, #3
 2356 009e 69E0     		b	.L178
 2357              	.L183:
1070:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
ARM GAS  /tmp/ccyfI9lR.s 			page 133


 2358              		.loc 1 1070 0
 2359 00a0 4246     		mov	r2, r8
 2360 00a2 3946     		mov	r1, r7
 2361 00a4 2046     		mov	r0, r4
 2362 00a6 FFF7FEFF 		bl	I2C_WaitOnRXNEFlagUntilTimeout
 2363              	.LVL177:
 2364 00aa C0B1     		cbz	r0, .L181
1073:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2365              		.loc 1 1073 0
 2366 00ac 2268     		ldr	r2, [r4]
 2367 00ae 5368     		ldr	r3, [r2, #4]
 2368 00b0 43F40043 		orr	r3, r3, #32768
 2369 00b4 5360     		str	r3, [r2, #4]
1076:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 2370              		.loc 1 1076 0
 2371 00b6 2268     		ldr	r2, [r4]
 2372 00b8 9369     		ldr	r3, [r2, #24]
 2373 00ba 13F0040F 		tst	r3, #4
 2374 00be 09D0     		beq	.L182
1079:HALLIB/Src/stm32f7xx_hal_i2c.c ****           hi2c->XferCount--;
 2375              		.loc 1 1079 0
 2376 00c0 636A     		ldr	r3, [r4, #36]
 2377 00c2 591C     		adds	r1, r3, #1
 2378 00c4 6162     		str	r1, [r4, #36]
 2379 00c6 526A     		ldr	r2, [r2, #36]
 2380 00c8 1A70     		strb	r2, [r3]
1080:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 2381              		.loc 1 1080 0
 2382 00ca 638D     		ldrh	r3, [r4, #42]
 2383 00cc 9BB2     		uxth	r3, r3
 2384 00ce 013B     		subs	r3, r3, #1
 2385 00d0 9BB2     		uxth	r3, r3
 2386 00d2 6385     		strh	r3, [r4, #42]	@ movhi
 2387              	.L182:
1083:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 2388              		.loc 1 1083 0
 2389 00d4 636C     		ldr	r3, [r4, #68]
 2390 00d6 202B     		cmp	r3, #32
 2391 00d8 49D1     		bne	.L189
1085:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 2392              		.loc 1 1085 0
 2393 00da 0323     		movs	r3, #3
 2394 00dc 4AE0     		b	.L178
 2395              	.L181:
1094:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 2396              		.loc 1 1094 0
 2397 00de 636A     		ldr	r3, [r4, #36]
 2398 00e0 5A1C     		adds	r2, r3, #1
 2399 00e2 6262     		str	r2, [r4, #36]
 2400 00e4 2268     		ldr	r2, [r4]
 2401 00e6 526A     		ldr	r2, [r2, #36]
 2402 00e8 1A70     		strb	r2, [r3]
1095:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2403              		.loc 1 1095 0
 2404 00ea 638D     		ldrh	r3, [r4, #42]
 2405 00ec 9BB2     		uxth	r3, r3
 2406 00ee 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccyfI9lR.s 			page 134


 2407 00f0 9BB2     		uxth	r3, r3
 2408 00f2 6385     		strh	r3, [r4, #42]	@ movhi
 2409              	.L180:
1067:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2410              		.loc 1 1067 0
 2411 00f4 638D     		ldrh	r3, [r4, #42]
 2412 00f6 9BB2     		uxth	r3, r3
 2413 00f8 002B     		cmp	r3, #0
 2414 00fa D1D1     		bne	.L183
1099:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2415              		.loc 1 1099 0
 2416 00fc 4246     		mov	r2, r8
 2417 00fe 3946     		mov	r1, r7
 2418 0100 2046     		mov	r0, r4
 2419 0102 FFF7FEFF 		bl	I2C_WaitOnSTOPFlagUntilTimeout
 2420              	.LVL178:
 2421 0106 48B1     		cbz	r0, .L184
1102:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2422              		.loc 1 1102 0
 2423 0108 2268     		ldr	r2, [r4]
 2424 010a 5368     		ldr	r3, [r2, #4]
 2425 010c 43F40043 		orr	r3, r3, #32768
 2426 0110 5360     		str	r3, [r2, #4]
1104:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 2427              		.loc 1 1104 0
 2428 0112 636C     		ldr	r3, [r4, #68]
 2429 0114 042B     		cmp	r3, #4
 2430 0116 2CD1     		bne	.L190
1106:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 2431              		.loc 1 1106 0
 2432 0118 0123     		movs	r3, #1
 2433 011a 2BE0     		b	.L178
 2434              	.L184:
1115:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2435              		.loc 1 1115 0
 2436 011c 2368     		ldr	r3, [r4]
 2437 011e 2022     		movs	r2, #32
 2438 0120 DA61     		str	r2, [r3, #28]
1118:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2439              		.loc 1 1118 0
 2440 0122 CDF80080 		str	r8, [sp]
 2441 0126 3B46     		mov	r3, r7
 2442 0128 0122     		movs	r2, #1
 2443 012a 4FF40041 		mov	r1, #32768
 2444 012e 2046     		mov	r0, r4
 2445 0130 FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 2446              	.LVL179:
 2447 0134 0346     		mov	r3, r0
 2448 0136 30B1     		cbz	r0, .L185
1121:HALLIB/Src/stm32f7xx_hal_i2c.c ****       return HAL_TIMEOUT;
 2449              		.loc 1 1121 0
 2450 0138 2268     		ldr	r2, [r4]
 2451 013a 5368     		ldr	r3, [r2, #4]
 2452 013c 43F40043 		orr	r3, r3, #32768
 2453 0140 5360     		str	r3, [r2, #4]
1122:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2454              		.loc 1 1122 0
ARM GAS  /tmp/ccyfI9lR.s 			page 135


 2455 0142 0323     		movs	r3, #3
 2456 0144 16E0     		b	.L178
 2457              	.L185:
1126:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2458              		.loc 1 1126 0
 2459 0146 2168     		ldr	r1, [r4]
 2460 0148 4A68     		ldr	r2, [r1, #4]
 2461 014a 42F40042 		orr	r2, r2, #32768
 2462 014e 4A60     		str	r2, [r1, #4]
1128:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
 2463              		.loc 1 1128 0
 2464 0150 2022     		movs	r2, #32
 2465 0152 84F84120 		strb	r2, [r4, #65]
1129:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2466              		.loc 1 1129 0
 2467 0156 0022     		movs	r2, #0
 2468 0158 84F84220 		strb	r2, [r4, #66]
1132:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2469              		.loc 1 1132 0
 2470 015c 84F84020 		strb	r2, [r4, #64]
1134:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2471              		.loc 1 1134 0
 2472 0160 08E0     		b	.L178
 2473              	.LVL180:
 2474              	.L186:
1138:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2475              		.loc 1 1138 0
 2476 0162 0223     		movs	r3, #2
 2477              	.LVL181:
 2478 0164 06E0     		b	.L178
 2479              	.LVL182:
 2480              	.L187:
1028:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2481              		.loc 1 1028 0
 2482 0166 0123     		movs	r3, #1
 2483              	.LVL183:
 2484 0168 04E0     		b	.L178
 2485              	.LVL184:
 2486              	.L188:
1031:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2487              		.loc 1 1031 0
 2488 016a 0223     		movs	r3, #2
 2489              	.LVL185:
 2490 016c 02E0     		b	.L178
 2491              	.LVL186:
 2492              	.L189:
1089:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 2493              		.loc 1 1089 0
 2494 016e 0123     		movs	r3, #1
 2495 0170 00E0     		b	.L178
 2496              	.L190:
1110:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 2497              		.loc 1 1110 0
 2498 0172 0323     		movs	r3, #3
 2499              	.LVL187:
 2500              	.L178:
1140:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 136


 2501              		.loc 1 1140 0
 2502 0174 1846     		mov	r0, r3
 2503 0176 02B0     		add	sp, sp, #8
 2504              	.LCFI32:
 2505              		.cfi_def_cfa_offset 24
 2506              		@ sp needed
 2507 0178 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2508              		.cfi_endproc
 2509              	.LFE143:
 2511              		.section	.text.HAL_I2C_Master_Transmit_IT,"ax",%progbits
 2512              		.align	2
 2513              		.global	HAL_I2C_Master_Transmit_IT
 2514              		.thumb
 2515              		.thumb_func
 2517              	HAL_I2C_Master_Transmit_IT:
 2518              	.LFB144:
1153:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
 2519              		.loc 1 1153 0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 0
 2522              		@ frame_needed = 0, uses_anonymous_args = 0
 2523              	.LVL188:
 2524 0000 30B5     		push	{r4, r5, lr}
 2525              	.LCFI33:
 2526              		.cfi_def_cfa_offset 12
 2527              		.cfi_offset 4, -12
 2528              		.cfi_offset 5, -8
 2529              		.cfi_offset 14, -4
 2530 0002 83B0     		sub	sp, sp, #12
 2531              	.LCFI34:
 2532              		.cfi_def_cfa_offset 24
 2533              	.LVL189:
1156:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 2534              		.loc 1 1156 0
 2535 0004 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 2536 0008 E4B2     		uxtb	r4, r4
 2537 000a 202C     		cmp	r4, #32
 2538 000c 37D1     		bne	.L196
1158:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2539              		.loc 1 1158 0
 2540 000e 0468     		ldr	r4, [r0]
 2541 0010 A469     		ldr	r4, [r4, #24]
 2542 0012 14F4004F 		tst	r4, #32768
 2543 0016 34D1     		bne	.L197
1164:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2544              		.loc 1 1164 0
 2545 0018 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 2546 001c 012C     		cmp	r4, #1
 2547 001e 32D0     		beq	.L198
1164:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2548              		.loc 1 1164 0 is_stmt 0 discriminator 2
 2549 0020 0124     		movs	r4, #1
 2550 0022 80F84040 		strb	r4, [r0, #64]
1166:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MASTER;
 2551              		.loc 1 1166 0 is_stmt 1 discriminator 2
 2552 0026 2124     		movs	r4, #33
 2553 0028 80F84140 		strb	r4, [r0, #65]
ARM GAS  /tmp/ccyfI9lR.s 			page 137


1167:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 2554              		.loc 1 1167 0 discriminator 2
 2555 002c 1024     		movs	r4, #16
 2556 002e 80F84240 		strb	r4, [r0, #66]
1168:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2557              		.loc 1 1168 0 discriminator 2
 2558 0032 0024     		movs	r4, #0
 2559 0034 4464     		str	r4, [r0, #68]
1171:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 2560              		.loc 1 1171 0 discriminator 2
 2561 0036 4262     		str	r2, [r0, #36]
1172:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 2562              		.loc 1 1172 0 discriminator 2
 2563 0038 4385     		strh	r3, [r0, #42]	@ movhi
1173:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
 2564              		.loc 1 1173 0 discriminator 2
 2565 003a 144B     		ldr	r3, .L200
 2566              	.LVL190:
 2567 003c C362     		str	r3, [r0, #44]
 2568              	.LVL191:
1174:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2569              		.loc 1 1174 0 discriminator 2
 2570 003e 144B     		ldr	r3, .L200+4
 2571 0040 4363     		str	r3, [r0, #52]
1176:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2572              		.loc 1 1176 0 discriminator 2
 2573 0042 438D     		ldrh	r3, [r0, #42]
 2574 0044 9BB2     		uxth	r3, r3
 2575 0046 FF2B     		cmp	r3, #255
 2576 0048 04D9     		bls	.L194
1178:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
 2577              		.loc 1 1178 0
 2578 004a FF23     		movs	r3, #255
 2579 004c 0385     		strh	r3, [r0, #40]	@ movhi
 2580              	.LVL192:
1179:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2581              		.loc 1 1179 0
 2582 004e 4FF08073 		mov	r3, #16777216
 2583 0052 03E0     		b	.L195
 2584              	.LVL193:
 2585              	.L194:
1183:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
 2586              		.loc 1 1183 0
 2587 0054 438D     		ldrh	r3, [r0, #42]
 2588 0056 0385     		strh	r3, [r0, #40]	@ movhi
 2589              	.LVL194:
1184:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2590              		.loc 1 1184 0
 2591 0058 4FF00073 		mov	r3, #33554432
 2592              	.LVL195:
 2593              	.L195:
 2594 005c 0446     		mov	r4, r0
 2595              	.LVL196:
1189:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2596              		.loc 1 1189 0
 2597 005e 90F82820 		ldrb	r2, [r0, #40]	@ zero_extendqisi2
 2598              	.LVL197:
ARM GAS  /tmp/ccyfI9lR.s 			page 138


 2599 0062 0C48     		ldr	r0, .L200+8
 2600              	.LVL198:
 2601 0064 0090     		str	r0, [sp]
 2602              	.LVL199:
 2603 0066 2046     		mov	r0, r4
 2604 0068 FFF7FEFF 		bl	I2C_TransferConfig
 2605              	.LVL200:
1192:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2606              		.loc 1 1192 0
 2607 006c 0025     		movs	r5, #0
 2608 006e 84F84050 		strb	r5, [r4, #64]
1201:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2609              		.loc 1 1201 0
 2610 0072 0121     		movs	r1, #1
 2611 0074 2046     		mov	r0, r4
 2612 0076 FFF7FEFF 		bl	I2C_Enable_IRQ
 2613              	.LVL201:
1203:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2614              		.loc 1 1203 0
 2615 007a 2846     		mov	r0, r5
 2616 007c 04E0     		b	.L193
 2617              	.LVL202:
 2618              	.L196:
1207:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2619              		.loc 1 1207 0
 2620 007e 0220     		movs	r0, #2
 2621              	.LVL203:
 2622 0080 02E0     		b	.L193
 2623              	.LVL204:
 2624              	.L197:
1160:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2625              		.loc 1 1160 0
 2626 0082 0220     		movs	r0, #2
 2627              	.LVL205:
 2628 0084 00E0     		b	.L193
 2629              	.LVL206:
 2630              	.L198:
1164:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2631              		.loc 1 1164 0
 2632 0086 0220     		movs	r0, #2
 2633              	.LVL207:
 2634              	.L193:
1209:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2635              		.loc 1 1209 0
 2636 0088 03B0     		add	sp, sp, #12
 2637              	.LCFI35:
 2638              		.cfi_def_cfa_offset 12
 2639              		@ sp needed
 2640 008a 30BD     		pop	{r4, r5, pc}
 2641              	.L201:
 2642              		.align	2
 2643              	.L200:
 2644 008c 0000FFFF 		.word	-65536
 2645 0090 00000000 		.word	I2C_Master_ISR_IT
 2646 0094 00200080 		.word	-2147475456
 2647              		.cfi_endproc
 2648              	.LFE144:
ARM GAS  /tmp/ccyfI9lR.s 			page 139


 2650              		.section	.text.HAL_I2C_Master_Receive_IT,"ax",%progbits
 2651              		.align	2
 2652              		.global	HAL_I2C_Master_Receive_IT
 2653              		.thumb
 2654              		.thumb_func
 2656              	HAL_I2C_Master_Receive_IT:
 2657              	.LFB145:
1222:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
 2658              		.loc 1 1222 0
 2659              		.cfi_startproc
 2660              		@ args = 0, pretend = 0, frame = 0
 2661              		@ frame_needed = 0, uses_anonymous_args = 0
 2662              	.LVL208:
 2663 0000 30B5     		push	{r4, r5, lr}
 2664              	.LCFI36:
 2665              		.cfi_def_cfa_offset 12
 2666              		.cfi_offset 4, -12
 2667              		.cfi_offset 5, -8
 2668              		.cfi_offset 14, -4
 2669 0002 83B0     		sub	sp, sp, #12
 2670              	.LCFI37:
 2671              		.cfi_def_cfa_offset 24
 2672              	.LVL209:
1225:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 2673              		.loc 1 1225 0
 2674 0004 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 2675 0008 E4B2     		uxtb	r4, r4
 2676 000a 202C     		cmp	r4, #32
 2677 000c 37D1     		bne	.L206
1227:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2678              		.loc 1 1227 0
 2679 000e 0468     		ldr	r4, [r0]
 2680 0010 A469     		ldr	r4, [r4, #24]
 2681 0012 14F4004F 		tst	r4, #32768
 2682 0016 34D1     		bne	.L207
1233:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2683              		.loc 1 1233 0
 2684 0018 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 2685 001c 012C     		cmp	r4, #1
 2686 001e 32D0     		beq	.L208
1233:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2687              		.loc 1 1233 0 is_stmt 0 discriminator 2
 2688 0020 0124     		movs	r4, #1
 2689 0022 80F84040 		strb	r4, [r0, #64]
1235:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MASTER;
 2690              		.loc 1 1235 0 is_stmt 1 discriminator 2
 2691 0026 2224     		movs	r4, #34
 2692 0028 80F84140 		strb	r4, [r0, #65]
1236:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 2693              		.loc 1 1236 0 discriminator 2
 2694 002c 1024     		movs	r4, #16
 2695 002e 80F84240 		strb	r4, [r0, #66]
1237:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2696              		.loc 1 1237 0 discriminator 2
 2697 0032 0024     		movs	r4, #0
 2698 0034 4464     		str	r4, [r0, #68]
1240:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
ARM GAS  /tmp/ccyfI9lR.s 			page 140


 2699              		.loc 1 1240 0 discriminator 2
 2700 0036 4262     		str	r2, [r0, #36]
1241:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 2701              		.loc 1 1241 0 discriminator 2
 2702 0038 4385     		strh	r3, [r0, #42]	@ movhi
1242:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
 2703              		.loc 1 1242 0 discriminator 2
 2704 003a 144B     		ldr	r3, .L210
 2705              	.LVL210:
 2706 003c C362     		str	r3, [r0, #44]
 2707              	.LVL211:
1243:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2708              		.loc 1 1243 0 discriminator 2
 2709 003e 144B     		ldr	r3, .L210+4
 2710 0040 4363     		str	r3, [r0, #52]
1245:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2711              		.loc 1 1245 0 discriminator 2
 2712 0042 438D     		ldrh	r3, [r0, #42]
 2713 0044 9BB2     		uxth	r3, r3
 2714 0046 FF2B     		cmp	r3, #255
 2715 0048 04D9     		bls	.L204
1247:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
 2716              		.loc 1 1247 0
 2717 004a FF23     		movs	r3, #255
 2718 004c 0385     		strh	r3, [r0, #40]	@ movhi
 2719              	.LVL212:
1248:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2720              		.loc 1 1248 0
 2721 004e 4FF08073 		mov	r3, #16777216
 2722 0052 03E0     		b	.L205
 2723              	.LVL213:
 2724              	.L204:
1252:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
 2725              		.loc 1 1252 0
 2726 0054 438D     		ldrh	r3, [r0, #42]
 2727 0056 0385     		strh	r3, [r0, #40]	@ movhi
 2728              	.LVL214:
1253:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2729              		.loc 1 1253 0
 2730 0058 4FF00073 		mov	r3, #33554432
 2731              	.LVL215:
 2732              	.L205:
 2733 005c 0446     		mov	r4, r0
 2734              	.LVL216:
1258:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2735              		.loc 1 1258 0
 2736 005e 90F82820 		ldrb	r2, [r0, #40]	@ zero_extendqisi2
 2737              	.LVL217:
 2738 0062 0C48     		ldr	r0, .L210+8
 2739              	.LVL218:
 2740 0064 0090     		str	r0, [sp]
 2741              	.LVL219:
 2742 0066 2046     		mov	r0, r4
 2743 0068 FFF7FEFF 		bl	I2C_TransferConfig
 2744              	.LVL220:
1261:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2745              		.loc 1 1261 0
ARM GAS  /tmp/ccyfI9lR.s 			page 141


 2746 006c 0025     		movs	r5, #0
 2747 006e 84F84050 		strb	r5, [r4, #64]
1270:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2748              		.loc 1 1270 0
 2749 0072 0221     		movs	r1, #2
 2750 0074 2046     		mov	r0, r4
 2751 0076 FFF7FEFF 		bl	I2C_Enable_IRQ
 2752              	.LVL221:
1272:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2753              		.loc 1 1272 0
 2754 007a 2846     		mov	r0, r5
 2755 007c 04E0     		b	.L203
 2756              	.LVL222:
 2757              	.L206:
1276:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2758              		.loc 1 1276 0
 2759 007e 0220     		movs	r0, #2
 2760              	.LVL223:
 2761 0080 02E0     		b	.L203
 2762              	.LVL224:
 2763              	.L207:
1229:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 2764              		.loc 1 1229 0
 2765 0082 0220     		movs	r0, #2
 2766              	.LVL225:
 2767 0084 00E0     		b	.L203
 2768              	.LVL226:
 2769              	.L208:
1233:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2770              		.loc 1 1233 0
 2771 0086 0220     		movs	r0, #2
 2772              	.LVL227:
 2773              	.L203:
1278:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2774              		.loc 1 1278 0
 2775 0088 03B0     		add	sp, sp, #12
 2776              	.LCFI38:
 2777              		.cfi_def_cfa_offset 12
 2778              		@ sp needed
 2779 008a 30BD     		pop	{r4, r5, pc}
 2780              	.L211:
 2781              		.align	2
 2782              	.L210:
 2783 008c 0000FFFF 		.word	-65536
 2784 0090 00000000 		.word	I2C_Master_ISR_IT
 2785 0094 00240080 		.word	-2147474432
 2786              		.cfi_endproc
 2787              	.LFE145:
 2789              		.section	.text.HAL_I2C_Slave_Transmit_IT,"ax",%progbits
 2790              		.align	2
 2791              		.global	HAL_I2C_Slave_Transmit_IT
 2792              		.thumb
 2793              		.thumb_func
 2795              	HAL_I2C_Slave_Transmit_IT:
 2796              	.LFB146:
1289:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
 2797              		.loc 1 1289 0
ARM GAS  /tmp/ccyfI9lR.s 			page 142


 2798              		.cfi_startproc
 2799              		@ args = 0, pretend = 0, frame = 0
 2800              		@ frame_needed = 0, uses_anonymous_args = 0
 2801              	.LVL228:
 2802 0000 38B5     		push	{r3, r4, r5, lr}
 2803              	.LCFI39:
 2804              		.cfi_def_cfa_offset 16
 2805              		.cfi_offset 3, -16
 2806              		.cfi_offset 4, -12
 2807              		.cfi_offset 5, -8
 2808              		.cfi_offset 14, -4
1290:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 2809              		.loc 1 1290 0
 2810 0002 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 2811 0006 DBB2     		uxtb	r3, r3
 2812 0008 202B     		cmp	r3, #32
 2813 000a 22D1     		bne	.L214
1293:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2814              		.loc 1 1293 0
 2815 000c 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 2816 0010 012B     		cmp	r3, #1
 2817 0012 20D0     		beq	.L215
1293:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2818              		.loc 1 1293 0 is_stmt 0 discriminator 2
 2819 0014 0123     		movs	r3, #1
 2820 0016 80F84030 		strb	r3, [r0, #64]
1295:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 2821              		.loc 1 1295 0 is_stmt 1 discriminator 2
 2822 001a 2123     		movs	r3, #33
 2823 001c 80F84130 		strb	r3, [r0, #65]
1296:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 2824              		.loc 1 1296 0 discriminator 2
 2825 0020 2023     		movs	r3, #32
 2826 0022 80F84230 		strb	r3, [r0, #66]
1297:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2827              		.loc 1 1297 0 discriminator 2
 2828 0026 0024     		movs	r4, #0
 2829 0028 4464     		str	r4, [r0, #68]
1300:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2830              		.loc 1 1300 0 discriminator 2
 2831 002a 0568     		ldr	r5, [r0]
 2832 002c 6B68     		ldr	r3, [r5, #4]
 2833 002e 23F40043 		bic	r3, r3, #32768
 2834 0032 6B60     		str	r3, [r5, #4]
1303:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 2835              		.loc 1 1303 0 discriminator 2
 2836 0034 4162     		str	r1, [r0, #36]
1304:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
 2837              		.loc 1 1304 0 discriminator 2
 2838 0036 4285     		strh	r2, [r0, #42]	@ movhi
1305:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 2839              		.loc 1 1305 0 discriminator 2
 2840 0038 438D     		ldrh	r3, [r0, #42]
 2841 003a 0385     		strh	r3, [r0, #40]	@ movhi
1306:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_IT;
 2842              		.loc 1 1306 0 discriminator 2
 2843 003c 074B     		ldr	r3, .L217
ARM GAS  /tmp/ccyfI9lR.s 			page 143


 2844 003e C362     		str	r3, [r0, #44]
1307:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2845              		.loc 1 1307 0 discriminator 2
 2846 0040 074B     		ldr	r3, .L217+4
 2847 0042 4363     		str	r3, [r0, #52]
1310:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2848              		.loc 1 1310 0 discriminator 2
 2849 0044 80F84040 		strb	r4, [r0, #64]
1319:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2850              		.loc 1 1319 0 discriminator 2
 2851 0048 0521     		movs	r1, #5
 2852              	.LVL229:
 2853 004a FFF7FEFF 		bl	I2C_Enable_IRQ
 2854              	.LVL230:
1321:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2855              		.loc 1 1321 0 discriminator 2
 2856 004e 2046     		mov	r0, r4
 2857 0050 38BD     		pop	{r3, r4, r5, pc}
 2858              	.LVL231:
 2859              	.L214:
1325:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2860              		.loc 1 1325 0
 2861 0052 0220     		movs	r0, #2
 2862              	.LVL232:
 2863 0054 38BD     		pop	{r3, r4, r5, pc}
 2864              	.LVL233:
 2865              	.L215:
1293:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2866              		.loc 1 1293 0
 2867 0056 0220     		movs	r0, #2
 2868              	.LVL234:
1327:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2869              		.loc 1 1327 0
 2870 0058 38BD     		pop	{r3, r4, r5, pc}
 2871              	.L218:
 2872 005a 00BF     		.align	2
 2873              	.L217:
 2874 005c 0000FFFF 		.word	-65536
 2875 0060 00000000 		.word	I2C_Slave_ISR_IT
 2876              		.cfi_endproc
 2877              	.LFE146:
 2879              		.section	.text.HAL_I2C_Slave_Receive_IT,"ax",%progbits
 2880              		.align	2
 2881              		.global	HAL_I2C_Slave_Receive_IT
 2882              		.thumb
 2883              		.thumb_func
 2885              	HAL_I2C_Slave_Receive_IT:
 2886              	.LFB147:
1338:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
 2887              		.loc 1 1338 0
 2888              		.cfi_startproc
 2889              		@ args = 0, pretend = 0, frame = 0
 2890              		@ frame_needed = 0, uses_anonymous_args = 0
 2891              	.LVL235:
 2892 0000 38B5     		push	{r3, r4, r5, lr}
 2893              	.LCFI40:
 2894              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccyfI9lR.s 			page 144


 2895              		.cfi_offset 3, -16
 2896              		.cfi_offset 4, -12
 2897              		.cfi_offset 5, -8
 2898              		.cfi_offset 14, -4
1339:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 2899              		.loc 1 1339 0
 2900 0002 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 2901 0006 DBB2     		uxtb	r3, r3
 2902 0008 202B     		cmp	r3, #32
 2903 000a 22D1     		bne	.L221
1342:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2904              		.loc 1 1342 0
 2905 000c 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 2906 0010 012B     		cmp	r3, #1
 2907 0012 20D0     		beq	.L222
1342:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2908              		.loc 1 1342 0 is_stmt 0 discriminator 2
 2909 0014 0123     		movs	r3, #1
 2910 0016 80F84030 		strb	r3, [r0, #64]
1344:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 2911              		.loc 1 1344 0 is_stmt 1 discriminator 2
 2912 001a 2223     		movs	r3, #34
 2913 001c 80F84130 		strb	r3, [r0, #65]
1345:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 2914              		.loc 1 1345 0 discriminator 2
 2915 0020 2023     		movs	r3, #32
 2916 0022 80F84230 		strb	r3, [r0, #66]
1346:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2917              		.loc 1 1346 0 discriminator 2
 2918 0026 0024     		movs	r4, #0
 2919 0028 4464     		str	r4, [r0, #68]
1349:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2920              		.loc 1 1349 0 discriminator 2
 2921 002a 0568     		ldr	r5, [r0]
 2922 002c 6B68     		ldr	r3, [r5, #4]
 2923 002e 23F40043 		bic	r3, r3, #32768
 2924 0032 6B60     		str	r3, [r5, #4]
1352:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 2925              		.loc 1 1352 0 discriminator 2
 2926 0034 4162     		str	r1, [r0, #36]
1353:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
 2927              		.loc 1 1353 0 discriminator 2
 2928 0036 4285     		strh	r2, [r0, #42]	@ movhi
1354:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 2929              		.loc 1 1354 0 discriminator 2
 2930 0038 438D     		ldrh	r3, [r0, #42]
 2931 003a 0385     		strh	r3, [r0, #40]	@ movhi
1355:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_IT;
 2932              		.loc 1 1355 0 discriminator 2
 2933 003c 074B     		ldr	r3, .L224
 2934 003e C362     		str	r3, [r0, #44]
1356:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2935              		.loc 1 1356 0 discriminator 2
 2936 0040 074B     		ldr	r3, .L224+4
 2937 0042 4363     		str	r3, [r0, #52]
1359:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2938              		.loc 1 1359 0 discriminator 2
ARM GAS  /tmp/ccyfI9lR.s 			page 145


 2939 0044 80F84040 		strb	r4, [r0, #64]
1368:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2940              		.loc 1 1368 0 discriminator 2
 2941 0048 0621     		movs	r1, #6
 2942              	.LVL236:
 2943 004a FFF7FEFF 		bl	I2C_Enable_IRQ
 2944              	.LVL237:
1370:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2945              		.loc 1 1370 0 discriminator 2
 2946 004e 2046     		mov	r0, r4
 2947 0050 38BD     		pop	{r3, r4, r5, pc}
 2948              	.LVL238:
 2949              	.L221:
1374:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 2950              		.loc 1 1374 0
 2951 0052 0220     		movs	r0, #2
 2952              	.LVL239:
 2953 0054 38BD     		pop	{r3, r4, r5, pc}
 2954              	.LVL240:
 2955              	.L222:
1342:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2956              		.loc 1 1342 0
 2957 0056 0220     		movs	r0, #2
 2958              	.LVL241:
1376:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 2959              		.loc 1 1376 0
 2960 0058 38BD     		pop	{r3, r4, r5, pc}
 2961              	.L225:
 2962 005a 00BF     		.align	2
 2963              	.L224:
 2964 005c 0000FFFF 		.word	-65536
 2965 0060 00000000 		.word	I2C_Slave_ISR_IT
 2966              		.cfi_endproc
 2967              	.LFE147:
 2969              		.section	.text.HAL_I2C_Master_Transmit_DMA,"ax",%progbits
 2970              		.align	2
 2971              		.global	HAL_I2C_Master_Transmit_DMA
 2972              		.thumb
 2973              		.thumb_func
 2975              	HAL_I2C_Master_Transmit_DMA:
 2976              	.LFB148:
1389:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
 2977              		.loc 1 1389 0
 2978              		.cfi_startproc
 2979              		@ args = 0, pretend = 0, frame = 0
 2980              		@ frame_needed = 0, uses_anonymous_args = 0
 2981              	.LVL242:
 2982 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2983              	.LCFI41:
 2984              		.cfi_def_cfa_offset 20
 2985              		.cfi_offset 4, -20
 2986              		.cfi_offset 5, -16
 2987              		.cfi_offset 6, -12
 2988              		.cfi_offset 7, -8
 2989              		.cfi_offset 14, -4
 2990 0002 83B0     		sub	sp, sp, #12
 2991              	.LCFI42:
ARM GAS  /tmp/ccyfI9lR.s 			page 146


 2992              		.cfi_def_cfa_offset 32
 2993              	.LVL243:
1392:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 2994              		.loc 1 1392 0
 2995 0004 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 2996 0008 E4B2     		uxtb	r4, r4
 2997 000a 202C     		cmp	r4, #32
 2998 000c 6CD1     		bne	.L231
1394:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 2999              		.loc 1 1394 0
 3000 000e 0468     		ldr	r4, [r0]
 3001 0010 A469     		ldr	r4, [r4, #24]
 3002 0012 14F4004F 		tst	r4, #32768
 3003 0016 69D1     		bne	.L232
1400:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3004              		.loc 1 1400 0
 3005 0018 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 3006 001c 012C     		cmp	r4, #1
 3007 001e 67D0     		beq	.L233
1400:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3008              		.loc 1 1400 0 is_stmt 0 discriminator 2
 3009 0020 0124     		movs	r4, #1
 3010 0022 80F84040 		strb	r4, [r0, #64]
1402:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MASTER;
 3011              		.loc 1 1402 0 is_stmt 1 discriminator 2
 3012 0026 2124     		movs	r4, #33
 3013 0028 80F84140 		strb	r4, [r0, #65]
1403:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 3014              		.loc 1 1403 0 discriminator 2
 3015 002c 1024     		movs	r4, #16
 3016 002e 80F84240 		strb	r4, [r0, #66]
1404:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3017              		.loc 1 1404 0 discriminator 2
 3018 0032 0024     		movs	r4, #0
 3019 0034 4464     		str	r4, [r0, #68]
1407:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 3020              		.loc 1 1407 0 discriminator 2
 3021 0036 4262     		str	r2, [r0, #36]
1408:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 3022              		.loc 1 1408 0 discriminator 2
 3023 0038 4385     		strh	r3, [r0, #42]	@ movhi
1409:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_DMA;
 3024              		.loc 1 1409 0 discriminator 2
 3025 003a 2F4B     		ldr	r3, .L235
 3026              	.LVL244:
 3027 003c C362     		str	r3, [r0, #44]
 3028              	.LVL245:
1410:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3029              		.loc 1 1410 0 discriminator 2
 3030 003e 2F4B     		ldr	r3, .L235+4
 3031 0040 4363     		str	r3, [r0, #52]
1412:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3032              		.loc 1 1412 0 discriminator 2
 3033 0042 438D     		ldrh	r3, [r0, #42]
 3034 0044 9BB2     		uxth	r3, r3
 3035 0046 FF2B     		cmp	r3, #255
 3036 0048 04D9     		bls	.L228
ARM GAS  /tmp/ccyfI9lR.s 			page 147


1414:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
 3037              		.loc 1 1414 0
 3038 004a FF23     		movs	r3, #255
 3039 004c 0385     		strh	r3, [r0, #40]	@ movhi
 3040              	.LVL246:
1415:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3041              		.loc 1 1415 0
 3042 004e 4FF08077 		mov	r7, #16777216
 3043 0052 03E0     		b	.L229
 3044              	.LVL247:
 3045              	.L228:
1419:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
 3046              		.loc 1 1419 0
 3047 0054 438D     		ldrh	r3, [r0, #42]
 3048 0056 0385     		strh	r3, [r0, #40]	@ movhi
 3049              	.LVL248:
1420:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3050              		.loc 1 1420 0
 3051 0058 4FF00077 		mov	r7, #33554432
 3052              	.LVL249:
 3053              	.L229:
 3054 005c 9646     		mov	lr, r2
 3055 005e 0E46     		mov	r6, r1
 3056 0060 0546     		mov	r5, r0
 3057              	.LVL250:
1423:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3058              		.loc 1 1423 0
 3059 0062 028D     		ldrh	r2, [r0, #40]
 3060              	.LVL251:
 3061 0064 002A     		cmp	r2, #0
 3062 0066 2DD0     		beq	.L230
 3063              	.LVL252:
1426:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3064              		.loc 1 1426 0
 3065 0068 836B     		ldr	r3, [r0, #56]
 3066 006a 254A     		ldr	r2, .L235+8
 3067 006c DA63     		str	r2, [r3, #60]
1429:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3068              		.loc 1 1429 0
 3069 006e 836B     		ldr	r3, [r0, #56]
 3070 0070 244A     		ldr	r2, .L235+12
 3071 0072 DA64     		str	r2, [r3, #76]
1432:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmatx->XferAbortCallback = NULL;
 3072              		.loc 1 1432 0
 3073 0074 836B     		ldr	r3, [r0, #56]
 3074 0076 0024     		movs	r4, #0
 3075 0078 1C64     		str	r4, [r3, #64]
1433:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3076              		.loc 1 1433 0
 3077 007a 836B     		ldr	r3, [r0, #56]
 3078 007c 1C65     		str	r4, [r3, #80]
1436:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3079              		.loc 1 1436 0
 3080 007e 0268     		ldr	r2, [r0]
 3081 0080 038D     		ldrh	r3, [r0, #40]
 3082 0082 2832     		adds	r2, r2, #40
 3083 0084 7146     		mov	r1, lr
ARM GAS  /tmp/ccyfI9lR.s 			page 148


 3084              	.LVL253:
 3085 0086 806B     		ldr	r0, [r0, #56]
 3086              	.LVL254:
 3087 0088 FFF7FEFF 		bl	HAL_DMA_Start_IT
 3088              	.LVL255:
1440:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3089              		.loc 1 1440 0
 3090 008c 95F82820 		ldrb	r2, [r5, #40]	@ zero_extendqisi2
 3091 0090 1D4B     		ldr	r3, .L235+16
 3092 0092 0093     		str	r3, [sp]
 3093 0094 3B46     		mov	r3, r7
 3094 0096 3146     		mov	r1, r6
 3095 0098 2846     		mov	r0, r5
 3096 009a FFF7FEFF 		bl	I2C_TransferConfig
 3097              	.LVL256:
1443:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3098              		.loc 1 1443 0
 3099 009e 6B8D     		ldrh	r3, [r5, #42]
 3100 00a0 9BB2     		uxth	r3, r3
 3101 00a2 2A8D     		ldrh	r2, [r5, #40]
 3102 00a4 9B1A     		subs	r3, r3, r2
 3103 00a6 9BB2     		uxth	r3, r3
 3104 00a8 6B85     		strh	r3, [r5, #42]	@ movhi
1446:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3105              		.loc 1 1446 0
 3106 00aa 85F84040 		strb	r4, [r5, #64]
1452:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3107              		.loc 1 1452 0
 3108 00ae 1121     		movs	r1, #17
 3109 00b0 2846     		mov	r0, r5
 3110 00b2 FFF7FEFF 		bl	I2C_Enable_IRQ
 3111              	.LVL257:
1455:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3112              		.loc 1 1455 0
 3113 00b6 2A68     		ldr	r2, [r5]
 3114 00b8 1368     		ldr	r3, [r2]
 3115 00ba 43F48043 		orr	r3, r3, #16384
 3116 00be 1360     		str	r3, [r2]
1478:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3117              		.loc 1 1478 0
 3118 00c0 2046     		mov	r0, r4
 3119 00c2 16E0     		b	.L227
 3120              	.LVL258:
 3121              	.L230:
1460:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3122              		.loc 1 1460 0
 3123 00c4 114B     		ldr	r3, .L235+20
 3124 00c6 4363     		str	r3, [r0, #52]
1464:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3125              		.loc 1 1464 0
 3126 00c8 0F4B     		ldr	r3, .L235+16
 3127 00ca 0093     		str	r3, [sp]
 3128 00cc 4FF00073 		mov	r3, #33554432
 3129 00d0 D2B2     		uxtb	r2, r2
 3130 00d2 FFF7FEFF 		bl	I2C_TransferConfig
 3131              	.LVL259:
1467:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 149


 3132              		.loc 1 1467 0
 3133 00d6 0024     		movs	r4, #0
 3134 00d8 85F84040 		strb	r4, [r5, #64]
1475:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3135              		.loc 1 1475 0
 3136 00dc 0121     		movs	r1, #1
 3137 00de 2846     		mov	r0, r5
 3138 00e0 FFF7FEFF 		bl	I2C_Enable_IRQ
 3139              	.LVL260:
1478:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3140              		.loc 1 1478 0
 3141 00e4 2046     		mov	r0, r4
 3142 00e6 04E0     		b	.L227
 3143              	.LVL261:
 3144              	.L231:
1482:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3145              		.loc 1 1482 0
 3146 00e8 0220     		movs	r0, #2
 3147              	.LVL262:
 3148 00ea 02E0     		b	.L227
 3149              	.LVL263:
 3150              	.L232:
1396:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3151              		.loc 1 1396 0
 3152 00ec 0220     		movs	r0, #2
 3153              	.LVL264:
 3154 00ee 00E0     		b	.L227
 3155              	.LVL265:
 3156              	.L233:
1400:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3157              		.loc 1 1400 0
 3158 00f0 0220     		movs	r0, #2
 3159              	.LVL266:
 3160              	.L227:
1484:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3161              		.loc 1 1484 0
 3162 00f2 03B0     		add	sp, sp, #12
 3163              	.LCFI43:
 3164              		.cfi_def_cfa_offset 20
 3165              		@ sp needed
 3166 00f4 F0BD     		pop	{r4, r5, r6, r7, pc}
 3167              	.L236:
 3168 00f6 00BF     		.align	2
 3169              	.L235:
 3170 00f8 0000FFFF 		.word	-65536
 3171 00fc 00000000 		.word	I2C_Master_ISR_DMA
 3172 0100 00000000 		.word	I2C_DMAMasterTransmitCplt
 3173 0104 00000000 		.word	I2C_DMAError
 3174 0108 00200080 		.word	-2147475456
 3175 010c 00000000 		.word	I2C_Master_ISR_IT
 3176              		.cfi_endproc
 3177              	.LFE148:
 3179              		.section	.text.HAL_I2C_Master_Receive_DMA,"ax",%progbits
 3180              		.align	2
 3181              		.global	HAL_I2C_Master_Receive_DMA
 3182              		.thumb
 3183              		.thumb_func
ARM GAS  /tmp/ccyfI9lR.s 			page 150


 3185              	HAL_I2C_Master_Receive_DMA:
 3186              	.LFB149:
1497:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
 3187              		.loc 1 1497 0
 3188              		.cfi_startproc
 3189              		@ args = 0, pretend = 0, frame = 0
 3190              		@ frame_needed = 0, uses_anonymous_args = 0
 3191              	.LVL267:
 3192 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3193              	.LCFI44:
 3194              		.cfi_def_cfa_offset 20
 3195              		.cfi_offset 4, -20
 3196              		.cfi_offset 5, -16
 3197              		.cfi_offset 6, -12
 3198              		.cfi_offset 7, -8
 3199              		.cfi_offset 14, -4
 3200 0002 83B0     		sub	sp, sp, #12
 3201              	.LCFI45:
 3202              		.cfi_def_cfa_offset 32
 3203              	.LVL268:
1500:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 3204              		.loc 1 1500 0
 3205 0004 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 3206 0008 E4B2     		uxtb	r4, r4
 3207 000a 202C     		cmp	r4, #32
 3208 000c 6BD1     		bne	.L242
1502:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3209              		.loc 1 1502 0
 3210 000e 0468     		ldr	r4, [r0]
 3211 0010 A469     		ldr	r4, [r4, #24]
 3212 0012 14F4004F 		tst	r4, #32768
 3213 0016 68D1     		bne	.L243
1508:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3214              		.loc 1 1508 0
 3215 0018 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 3216 001c 012C     		cmp	r4, #1
 3217 001e 66D0     		beq	.L244
1508:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3218              		.loc 1 1508 0 is_stmt 0 discriminator 2
 3219 0020 0124     		movs	r4, #1
 3220 0022 80F84040 		strb	r4, [r0, #64]
1510:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MASTER;
 3221              		.loc 1 1510 0 is_stmt 1 discriminator 2
 3222 0026 2224     		movs	r4, #34
 3223 0028 80F84140 		strb	r4, [r0, #65]
1511:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 3224              		.loc 1 1511 0 discriminator 2
 3225 002c 1024     		movs	r4, #16
 3226 002e 80F84240 		strb	r4, [r0, #66]
1512:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3227              		.loc 1 1512 0 discriminator 2
 3228 0032 0024     		movs	r4, #0
 3229 0034 4464     		str	r4, [r0, #68]
1515:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 3230              		.loc 1 1515 0 discriminator 2
 3231 0036 4262     		str	r2, [r0, #36]
1516:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
ARM GAS  /tmp/ccyfI9lR.s 			page 151


 3232              		.loc 1 1516 0 discriminator 2
 3233 0038 4385     		strh	r3, [r0, #42]	@ movhi
1517:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_DMA;
 3234              		.loc 1 1517 0 discriminator 2
 3235 003a 2E4B     		ldr	r3, .L246
 3236              	.LVL269:
 3237 003c C362     		str	r3, [r0, #44]
 3238              	.LVL270:
1518:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3239              		.loc 1 1518 0 discriminator 2
 3240 003e 2E4B     		ldr	r3, .L246+4
 3241 0040 4363     		str	r3, [r0, #52]
1520:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3242              		.loc 1 1520 0 discriminator 2
 3243 0042 438D     		ldrh	r3, [r0, #42]
 3244 0044 9BB2     		uxth	r3, r3
 3245 0046 FF2B     		cmp	r3, #255
 3246 0048 04D9     		bls	.L239
1522:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
 3247              		.loc 1 1522 0
 3248 004a FF23     		movs	r3, #255
 3249 004c 0385     		strh	r3, [r0, #40]	@ movhi
 3250              	.LVL271:
1523:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3251              		.loc 1 1523 0
 3252 004e 4FF08077 		mov	r7, #16777216
 3253 0052 03E0     		b	.L240
 3254              	.LVL272:
 3255              	.L239:
1527:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
 3256              		.loc 1 1527 0
 3257 0054 438D     		ldrh	r3, [r0, #42]
 3258 0056 0385     		strh	r3, [r0, #40]	@ movhi
 3259              	.LVL273:
1528:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3260              		.loc 1 1528 0
 3261 0058 4FF00077 		mov	r7, #33554432
 3262              	.LVL274:
 3263              	.L240:
 3264 005c 0E46     		mov	r6, r1
 3265 005e 0546     		mov	r5, r0
 3266              	.LVL275:
1531:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3267              		.loc 1 1531 0
 3268 0060 018D     		ldrh	r1, [r0, #40]
 3269              	.LVL276:
 3270 0062 0029     		cmp	r1, #0
 3271 0064 2CD0     		beq	.L241
1534:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3272              		.loc 1 1534 0
 3273 0066 C36B     		ldr	r3, [r0, #60]
 3274 0068 2449     		ldr	r1, .L246+8
 3275 006a D963     		str	r1, [r3, #60]
1537:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3276              		.loc 1 1537 0
 3277 006c C36B     		ldr	r3, [r0, #60]
 3278 006e 2449     		ldr	r1, .L246+12
ARM GAS  /tmp/ccyfI9lR.s 			page 152


 3279 0070 D964     		str	r1, [r3, #76]
1540:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->hdmarx->XferAbortCallback = NULL;
 3280              		.loc 1 1540 0
 3281 0072 C36B     		ldr	r3, [r0, #60]
 3282 0074 0024     		movs	r4, #0
 3283 0076 1C64     		str	r4, [r3, #64]
1541:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3284              		.loc 1 1541 0
 3285 0078 C36B     		ldr	r3, [r0, #60]
 3286 007a 1C65     		str	r4, [r3, #80]
1544:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3287              		.loc 1 1544 0
 3288 007c 0168     		ldr	r1, [r0]
 3289 007e 038D     		ldrh	r3, [r0, #40]
 3290 0080 2431     		adds	r1, r1, #36
 3291 0082 C06B     		ldr	r0, [r0, #60]
 3292              	.LVL277:
 3293 0084 FFF7FEFF 		bl	HAL_DMA_Start_IT
 3294              	.LVL278:
1548:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3295              		.loc 1 1548 0
 3296 0088 95F82820 		ldrb	r2, [r5, #40]	@ zero_extendqisi2
 3297 008c 1D4B     		ldr	r3, .L246+16
 3298 008e 0093     		str	r3, [sp]
 3299 0090 3B46     		mov	r3, r7
 3300 0092 3146     		mov	r1, r6
 3301 0094 2846     		mov	r0, r5
 3302 0096 FFF7FEFF 		bl	I2C_TransferConfig
 3303              	.LVL279:
1551:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3304              		.loc 1 1551 0
 3305 009a 6B8D     		ldrh	r3, [r5, #42]
 3306 009c 9BB2     		uxth	r3, r3
 3307 009e 2A8D     		ldrh	r2, [r5, #40]
 3308 00a0 9B1A     		subs	r3, r3, r2
 3309 00a2 9BB2     		uxth	r3, r3
 3310 00a4 6B85     		strh	r3, [r5, #42]	@ movhi
1554:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3311              		.loc 1 1554 0
 3312 00a6 85F84040 		strb	r4, [r5, #64]
1560:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3313              		.loc 1 1560 0
 3314 00aa 1121     		movs	r1, #17
 3315 00ac 2846     		mov	r0, r5
 3316 00ae FFF7FEFF 		bl	I2C_Enable_IRQ
 3317              	.LVL280:
1563:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3318              		.loc 1 1563 0
 3319 00b2 2A68     		ldr	r2, [r5]
 3320 00b4 1368     		ldr	r3, [r2]
 3321 00b6 43F40043 		orr	r3, r3, #32768
 3322 00ba 1360     		str	r3, [r2]
1585:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3323              		.loc 1 1585 0
 3324 00bc 2046     		mov	r0, r4
 3325 00be 17E0     		b	.L238
 3326              	.LVL281:
ARM GAS  /tmp/ccyfI9lR.s 			page 153


 3327              	.L241:
1568:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3328              		.loc 1 1568 0
 3329 00c0 114B     		ldr	r3, .L246+20
 3330 00c2 4363     		str	r3, [r0, #52]
1572:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3331              		.loc 1 1572 0
 3332 00c4 0F4B     		ldr	r3, .L246+16
 3333 00c6 0093     		str	r3, [sp]
 3334 00c8 4FF00073 		mov	r3, #33554432
 3335 00cc CAB2     		uxtb	r2, r1
 3336              	.LVL282:
 3337 00ce 3146     		mov	r1, r6
 3338 00d0 FFF7FEFF 		bl	I2C_TransferConfig
 3339              	.LVL283:
1575:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3340              		.loc 1 1575 0
 3341 00d4 0024     		movs	r4, #0
 3342 00d6 85F84040 		strb	r4, [r5, #64]
1583:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3343              		.loc 1 1583 0
 3344 00da 0121     		movs	r1, #1
 3345 00dc 2846     		mov	r0, r5
 3346 00de FFF7FEFF 		bl	I2C_Enable_IRQ
 3347              	.LVL284:
1585:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3348              		.loc 1 1585 0
 3349 00e2 2046     		mov	r0, r4
 3350 00e4 04E0     		b	.L238
 3351              	.LVL285:
 3352              	.L242:
1589:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3353              		.loc 1 1589 0
 3354 00e6 0220     		movs	r0, #2
 3355              	.LVL286:
 3356 00e8 02E0     		b	.L238
 3357              	.LVL287:
 3358              	.L243:
1504:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3359              		.loc 1 1504 0
 3360 00ea 0220     		movs	r0, #2
 3361              	.LVL288:
 3362 00ec 00E0     		b	.L238
 3363              	.LVL289:
 3364              	.L244:
1508:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3365              		.loc 1 1508 0
 3366 00ee 0220     		movs	r0, #2
 3367              	.LVL290:
 3368              	.L238:
1591:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3369              		.loc 1 1591 0
 3370 00f0 03B0     		add	sp, sp, #12
 3371              	.LCFI46:
 3372              		.cfi_def_cfa_offset 20
 3373              		@ sp needed
 3374 00f2 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccyfI9lR.s 			page 154


 3375              	.L247:
 3376              		.align	2
 3377              	.L246:
 3378 00f4 0000FFFF 		.word	-65536
 3379 00f8 00000000 		.word	I2C_Master_ISR_DMA
 3380 00fc 00000000 		.word	I2C_DMAMasterReceiveCplt
 3381 0100 00000000 		.word	I2C_DMAError
 3382 0104 00240080 		.word	-2147474432
 3383 0108 00000000 		.word	I2C_Master_ISR_IT
 3384              		.cfi_endproc
 3385              	.LFE149:
 3387              		.section	.text.HAL_I2C_Slave_Transmit_DMA,"ax",%progbits
 3388              		.align	2
 3389              		.global	HAL_I2C_Slave_Transmit_DMA
 3390              		.thumb
 3391              		.thumb_func
 3393              	HAL_I2C_Slave_Transmit_DMA:
 3394              	.LFB150:
1602:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
 3395              		.loc 1 1602 0
 3396              		.cfi_startproc
 3397              		@ args = 0, pretend = 0, frame = 0
 3398              		@ frame_needed = 0, uses_anonymous_args = 0
 3399              	.LVL291:
 3400 0000 38B5     		push	{r3, r4, r5, lr}
 3401              	.LCFI47:
 3402              		.cfi_def_cfa_offset 16
 3403              		.cfi_offset 3, -16
 3404              		.cfi_offset 4, -12
 3405              		.cfi_offset 5, -8
 3406              		.cfi_offset 14, -4
1603:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 3407              		.loc 1 1603 0
 3408 0002 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 3409 0006 DBB2     		uxtb	r3, r3
 3410 0008 202B     		cmp	r3, #32
 3411 000a 3DD1     		bne	.L250
1605:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3412              		.loc 1 1605 0
 3413 000c 002A     		cmp	r2, #0
 3414 000e 18BF     		it	ne
 3415 0010 0029     		cmpne	r1, #0
 3416 0012 3BD0     		beq	.L251
1610:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3417              		.loc 1 1610 0
 3418 0014 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 3419 0018 012B     		cmp	r3, #1
 3420 001a 39D0     		beq	.L252
 3421 001c 0446     		mov	r4, r0
1610:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3422              		.loc 1 1610 0 is_stmt 0 discriminator 2
 3423 001e 0123     		movs	r3, #1
 3424 0020 80F84030 		strb	r3, [r0, #64]
1612:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 3425              		.loc 1 1612 0 is_stmt 1 discriminator 2
 3426 0024 2123     		movs	r3, #33
 3427 0026 80F84130 		strb	r3, [r0, #65]
ARM GAS  /tmp/ccyfI9lR.s 			page 155


1613:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 3428              		.loc 1 1613 0 discriminator 2
 3429 002a 2023     		movs	r3, #32
 3430 002c 80F84230 		strb	r3, [r0, #66]
1614:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3431              		.loc 1 1614 0 discriminator 2
 3432 0030 0025     		movs	r5, #0
 3433 0032 4564     		str	r5, [r0, #68]
1617:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 3434              		.loc 1 1617 0 discriminator 2
 3435 0034 4162     		str	r1, [r0, #36]
1618:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
 3436              		.loc 1 1618 0 discriminator 2
 3437 0036 4285     		strh	r2, [r0, #42]	@ movhi
1619:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 3438              		.loc 1 1619 0 discriminator 2
 3439 0038 438D     		ldrh	r3, [r0, #42]
 3440 003a 0385     		strh	r3, [r0, #40]	@ movhi
1620:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_DMA;
 3441              		.loc 1 1620 0 discriminator 2
 3442 003c 154B     		ldr	r3, .L254
 3443 003e C362     		str	r3, [r0, #44]
1621:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3444              		.loc 1 1621 0 discriminator 2
 3445 0040 154B     		ldr	r3, .L254+4
 3446 0042 4363     		str	r3, [r0, #52]
1624:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3447              		.loc 1 1624 0 discriminator 2
 3448 0044 836B     		ldr	r3, [r0, #56]
 3449 0046 154A     		ldr	r2, .L254+8
 3450              	.LVL292:
 3451 0048 DA63     		str	r2, [r3, #60]
1627:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3452              		.loc 1 1627 0 discriminator 2
 3453 004a 836B     		ldr	r3, [r0, #56]
 3454 004c 144A     		ldr	r2, .L254+12
 3455 004e DA64     		str	r2, [r3, #76]
1630:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmatx->XferAbortCallback = NULL;
 3456              		.loc 1 1630 0 discriminator 2
 3457 0050 836B     		ldr	r3, [r0, #56]
 3458 0052 1D64     		str	r5, [r3, #64]
1631:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3459              		.loc 1 1631 0 discriminator 2
 3460 0054 836B     		ldr	r3, [r0, #56]
 3461 0056 1D65     		str	r5, [r3, #80]
1634:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3462              		.loc 1 1634 0 discriminator 2
 3463 0058 0268     		ldr	r2, [r0]
 3464 005a 038D     		ldrh	r3, [r0, #40]
 3465 005c 2832     		adds	r2, r2, #40
 3466 005e 806B     		ldr	r0, [r0, #56]
 3467              	.LVL293:
 3468 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 3469              	.LVL294:
1637:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3470              		.loc 1 1637 0 discriminator 2
 3471 0064 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccyfI9lR.s 			page 156


 3472 0066 5368     		ldr	r3, [r2, #4]
 3473 0068 23F40043 		bic	r3, r3, #32768
 3474 006c 5360     		str	r3, [r2, #4]
1640:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3475              		.loc 1 1640 0 discriminator 2
 3476 006e 84F84050 		strb	r5, [r4, #64]
1646:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3477              		.loc 1 1646 0 discriminator 2
 3478 0072 0421     		movs	r1, #4
 3479 0074 2046     		mov	r0, r4
 3480 0076 FFF7FEFF 		bl	I2C_Enable_IRQ
 3481              	.LVL295:
1649:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3482              		.loc 1 1649 0 discriminator 2
 3483 007a 2268     		ldr	r2, [r4]
 3484 007c 1368     		ldr	r3, [r2]
 3485 007e 43F48043 		orr	r3, r3, #16384
 3486 0082 1360     		str	r3, [r2]
1651:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3487              		.loc 1 1651 0 discriminator 2
 3488 0084 2846     		mov	r0, r5
 3489 0086 38BD     		pop	{r3, r4, r5, pc}
 3490              	.LVL296:
 3491              	.L250:
1655:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3492              		.loc 1 1655 0
 3493 0088 0220     		movs	r0, #2
 3494              	.LVL297:
 3495 008a 38BD     		pop	{r3, r4, r5, pc}
 3496              	.LVL298:
 3497              	.L251:
1607:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3498              		.loc 1 1607 0
 3499 008c 0120     		movs	r0, #1
 3500              	.LVL299:
 3501 008e 38BD     		pop	{r3, r4, r5, pc}
 3502              	.LVL300:
 3503              	.L252:
1610:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3504              		.loc 1 1610 0
 3505 0090 0220     		movs	r0, #2
 3506              	.LVL301:
1657:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3507              		.loc 1 1657 0
 3508 0092 38BD     		pop	{r3, r4, r5, pc}
 3509              	.L255:
 3510              		.align	2
 3511              	.L254:
 3512 0094 0000FFFF 		.word	-65536
 3513 0098 00000000 		.word	I2C_Slave_ISR_DMA
 3514 009c 00000000 		.word	I2C_DMASlaveTransmitCplt
 3515 00a0 00000000 		.word	I2C_DMAError
 3516              		.cfi_endproc
 3517              	.LFE150:
 3519              		.section	.text.HAL_I2C_Slave_Receive_DMA,"ax",%progbits
 3520              		.align	2
 3521              		.global	HAL_I2C_Slave_Receive_DMA
ARM GAS  /tmp/ccyfI9lR.s 			page 157


 3522              		.thumb
 3523              		.thumb_func
 3525              	HAL_I2C_Slave_Receive_DMA:
 3526              	.LFB151:
1668:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
 3527              		.loc 1 1668 0
 3528              		.cfi_startproc
 3529              		@ args = 0, pretend = 0, frame = 0
 3530              		@ frame_needed = 0, uses_anonymous_args = 0
 3531              	.LVL302:
 3532 0000 38B5     		push	{r3, r4, r5, lr}
 3533              	.LCFI48:
 3534              		.cfi_def_cfa_offset 16
 3535              		.cfi_offset 3, -16
 3536              		.cfi_offset 4, -12
 3537              		.cfi_offset 5, -8
 3538              		.cfi_offset 14, -4
1669:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 3539              		.loc 1 1669 0
 3540 0002 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 3541 0006 DBB2     		uxtb	r3, r3
 3542 0008 202B     		cmp	r3, #32
 3543 000a 3FD1     		bne	.L258
1671:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3544              		.loc 1 1671 0
 3545 000c 002A     		cmp	r2, #0
 3546 000e 18BF     		it	ne
 3547 0010 0029     		cmpne	r1, #0
 3548 0012 3DD0     		beq	.L259
1676:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3549              		.loc 1 1676 0
 3550 0014 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 3551 0018 012B     		cmp	r3, #1
 3552 001a 3BD0     		beq	.L260
 3553 001c 1346     		mov	r3, r2
 3554 001e 0A46     		mov	r2, r1
 3555              	.LVL303:
 3556 0020 0446     		mov	r4, r0
1676:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3557              		.loc 1 1676 0 is_stmt 0 discriminator 2
 3558 0022 0121     		movs	r1, #1
 3559              	.LVL304:
 3560 0024 80F84010 		strb	r1, [r0, #64]
1678:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 3561              		.loc 1 1678 0 is_stmt 1 discriminator 2
 3562 0028 2221     		movs	r1, #34
 3563 002a 80F84110 		strb	r1, [r0, #65]
1679:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 3564              		.loc 1 1679 0 discriminator 2
 3565 002e 2021     		movs	r1, #32
 3566 0030 80F84210 		strb	r1, [r0, #66]
1680:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3567              		.loc 1 1680 0 discriminator 2
 3568 0034 0025     		movs	r5, #0
 3569 0036 4564     		str	r5, [r0, #68]
1683:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 3570              		.loc 1 1683 0 discriminator 2
ARM GAS  /tmp/ccyfI9lR.s 			page 158


 3571 0038 4262     		str	r2, [r0, #36]
1684:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
 3572              		.loc 1 1684 0 discriminator 2
 3573 003a 4385     		strh	r3, [r0, #42]	@ movhi
1685:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 3574              		.loc 1 1685 0 discriminator 2
 3575 003c 438D     		ldrh	r3, [r0, #42]
 3576 003e 0385     		strh	r3, [r0, #40]	@ movhi
1686:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_DMA;
 3577              		.loc 1 1686 0 discriminator 2
 3578 0040 154B     		ldr	r3, .L262
 3579 0042 C362     		str	r3, [r0, #44]
1687:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3580              		.loc 1 1687 0 discriminator 2
 3581 0044 154B     		ldr	r3, .L262+4
 3582 0046 4363     		str	r3, [r0, #52]
1690:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3583              		.loc 1 1690 0 discriminator 2
 3584 0048 C36B     		ldr	r3, [r0, #60]
 3585 004a 1549     		ldr	r1, .L262+8
 3586 004c D963     		str	r1, [r3, #60]
1693:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3587              		.loc 1 1693 0 discriminator 2
 3588 004e C36B     		ldr	r3, [r0, #60]
 3589 0050 1449     		ldr	r1, .L262+12
 3590 0052 D964     		str	r1, [r3, #76]
1696:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmarx->XferAbortCallback = NULL;
 3591              		.loc 1 1696 0 discriminator 2
 3592 0054 C36B     		ldr	r3, [r0, #60]
 3593 0056 1D64     		str	r5, [r3, #64]
1697:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3594              		.loc 1 1697 0 discriminator 2
 3595 0058 C36B     		ldr	r3, [r0, #60]
 3596 005a 1D65     		str	r5, [r3, #80]
1700:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3597              		.loc 1 1700 0 discriminator 2
 3598 005c 0168     		ldr	r1, [r0]
 3599 005e 038D     		ldrh	r3, [r0, #40]
 3600 0060 2431     		adds	r1, r1, #36
 3601 0062 C06B     		ldr	r0, [r0, #60]
 3602              	.LVL305:
 3603 0064 FFF7FEFF 		bl	HAL_DMA_Start_IT
 3604              	.LVL306:
1703:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3605              		.loc 1 1703 0 discriminator 2
 3606 0068 2268     		ldr	r2, [r4]
 3607 006a 5368     		ldr	r3, [r2, #4]
 3608 006c 23F40043 		bic	r3, r3, #32768
 3609 0070 5360     		str	r3, [r2, #4]
1706:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3610              		.loc 1 1706 0 discriminator 2
 3611 0072 84F84050 		strb	r5, [r4, #64]
1712:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3612              		.loc 1 1712 0 discriminator 2
 3613 0076 0421     		movs	r1, #4
 3614 0078 2046     		mov	r0, r4
 3615 007a FFF7FEFF 		bl	I2C_Enable_IRQ
ARM GAS  /tmp/ccyfI9lR.s 			page 159


 3616              	.LVL307:
1715:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3617              		.loc 1 1715 0 discriminator 2
 3618 007e 2268     		ldr	r2, [r4]
 3619 0080 1368     		ldr	r3, [r2]
 3620 0082 43F40043 		orr	r3, r3, #32768
 3621 0086 1360     		str	r3, [r2]
1717:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3622              		.loc 1 1717 0 discriminator 2
 3623 0088 2846     		mov	r0, r5
 3624 008a 38BD     		pop	{r3, r4, r5, pc}
 3625              	.LVL308:
 3626              	.L258:
1721:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3627              		.loc 1 1721 0
 3628 008c 0220     		movs	r0, #2
 3629              	.LVL309:
 3630 008e 38BD     		pop	{r3, r4, r5, pc}
 3631              	.LVL310:
 3632              	.L259:
1673:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3633              		.loc 1 1673 0
 3634 0090 0120     		movs	r0, #1
 3635              	.LVL311:
 3636 0092 38BD     		pop	{r3, r4, r5, pc}
 3637              	.LVL312:
 3638              	.L260:
1676:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3639              		.loc 1 1676 0
 3640 0094 0220     		movs	r0, #2
 3641              	.LVL313:
1723:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 3642              		.loc 1 1723 0
 3643 0096 38BD     		pop	{r3, r4, r5, pc}
 3644              	.L263:
 3645              		.align	2
 3646              	.L262:
 3647 0098 0000FFFF 		.word	-65536
 3648 009c 00000000 		.word	I2C_Slave_ISR_DMA
 3649 00a0 00000000 		.word	I2C_DMASlaveReceiveCplt
 3650 00a4 00000000 		.word	I2C_DMAError
 3651              		.cfi_endproc
 3652              	.LFE151:
 3654              		.section	.text.HAL_I2C_Mem_Write,"ax",%progbits
 3655              		.align	2
 3656              		.global	HAL_I2C_Mem_Write
 3657              		.thumb
 3658              		.thumb_func
 3660              	HAL_I2C_Mem_Write:
 3661              	.LFB152:
1738:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 3662              		.loc 1 1738 0
 3663              		.cfi_startproc
 3664              		@ args = 12, pretend = 0, frame = 0
 3665              		@ frame_needed = 0, uses_anonymous_args = 0
 3666              	.LVL314:
 3667 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
ARM GAS  /tmp/ccyfI9lR.s 			page 160


 3668              	.LCFI49:
 3669              		.cfi_def_cfa_offset 32
 3670              		.cfi_offset 4, -32
 3671              		.cfi_offset 5, -28
 3672              		.cfi_offset 6, -24
 3673              		.cfi_offset 7, -20
 3674              		.cfi_offset 8, -16
 3675              		.cfi_offset 9, -12
 3676              		.cfi_offset 10, -8
 3677              		.cfi_offset 14, -4
 3678 0004 82B0     		sub	sp, sp, #8
 3679              	.LCFI50:
 3680              		.cfi_def_cfa_offset 40
 3681 0006 BDF82C50 		ldrh	r5, [sp, #44]
 3682              	.LVL315:
1744:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 3683              		.loc 1 1744 0
 3684 000a 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 3685 000e E4B2     		uxtb	r4, r4
 3686 0010 202C     		cmp	r4, #32
 3687 0012 40F0C780 		bne	.L275
1746:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3688              		.loc 1 1746 0
 3689 0016 0A9C     		ldr	r4, [sp, #40]
 3690 0018 002D     		cmp	r5, #0
 3691 001a 18BF     		it	ne
 3692 001c 002C     		cmpne	r4, #0
 3693 001e 00F0C380 		beq	.L276
1752:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3694              		.loc 1 1752 0
 3695 0022 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 3696 0026 012C     		cmp	r4, #1
 3697 0028 00F0C080 		beq	.L277
 3698 002c 9846     		mov	r8, r3
 3699 002e 9146     		mov	r9, r2
 3700 0030 0E46     		mov	r6, r1
 3701 0032 0446     		mov	r4, r0
1752:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3702              		.loc 1 1752 0 is_stmt 0 discriminator 2
 3703 0034 4FF0010A 		mov	r10, #1
 3704 0038 80F840A0 		strb	r10, [r0, #64]
1755:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3705              		.loc 1 1755 0 is_stmt 1 discriminator 2
 3706 003c FFF7FEFF 		bl	HAL_GetTick
 3707              	.LVL316:
 3708 0040 0746     		mov	r7, r0
 3709              	.LVL317:
1757:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3710              		.loc 1 1757 0 discriminator 2
 3711 0042 0090     		str	r0, [sp]
 3712 0044 1923     		movs	r3, #25
 3713 0046 5246     		mov	r2, r10
 3714 0048 4FF40041 		mov	r1, #32768
 3715 004c 2046     		mov	r0, r4
 3716              	.LVL318:
 3717 004e FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 3718              	.LVL319:
ARM GAS  /tmp/ccyfI9lR.s 			page 161


 3719 0052 0028     		cmp	r0, #0
 3720 0054 40F0AC80 		bne	.L278
1762:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MEM;
 3721              		.loc 1 1762 0
 3722 0058 2123     		movs	r3, #33
 3723 005a 84F84130 		strb	r3, [r4, #65]
1763:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 3724              		.loc 1 1763 0
 3725 005e 4023     		movs	r3, #64
 3726 0060 84F84230 		strb	r3, [r4, #66]
1764:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3727              		.loc 1 1764 0
 3728 0064 0023     		movs	r3, #0
 3729 0066 6364     		str	r3, [r4, #68]
1767:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
 3730              		.loc 1 1767 0
 3731 0068 0A9A     		ldr	r2, [sp, #40]
 3732 006a 6262     		str	r2, [r4, #36]
1768:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
 3733              		.loc 1 1768 0
 3734 006c 6585     		strh	r5, [r4, #42]	@ movhi
1769:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3735              		.loc 1 1769 0
 3736 006e 6363     		str	r3, [r4, #52]
1772:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3737              		.loc 1 1772 0
 3738 0070 0197     		str	r7, [sp, #4]
 3739 0072 0C9B     		ldr	r3, [sp, #48]
 3740 0074 0093     		str	r3, [sp]
 3741 0076 4346     		mov	r3, r8
 3742 0078 4A46     		mov	r2, r9
 3743 007a 3146     		mov	r1, r6
 3744 007c 2046     		mov	r0, r4
 3745 007e FFF7FEFF 		bl	I2C_RequestMemoryWrite
 3746              	.LVL320:
 3747 0082 60B1     		cbz	r0, .L266
1774:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 3748              		.loc 1 1774 0
 3749 0084 636C     		ldr	r3, [r4, #68]
 3750 0086 042B     		cmp	r3, #4
 3751 0088 04D1     		bne	.L267
1777:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
 3752              		.loc 1 1777 0
 3753 008a 0023     		movs	r3, #0
 3754 008c 84F84030 		strb	r3, [r4, #64]
1778:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 3755              		.loc 1 1778 0
 3756 0090 5346     		mov	r3, r10
 3757 0092 94E0     		b	.L265
 3758              	.L267:
1783:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 3759              		.loc 1 1783 0
 3760 0094 0023     		movs	r3, #0
 3761 0096 84F84030 		strb	r3, [r4, #64]
1784:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 3762              		.loc 1 1784 0
 3763 009a 0323     		movs	r3, #3
ARM GAS  /tmp/ccyfI9lR.s 			page 162


 3764 009c 8FE0     		b	.L265
 3765              	.L266:
1789:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3766              		.loc 1 1789 0
 3767 009e 638D     		ldrh	r3, [r4, #42]
 3768 00a0 9BB2     		uxth	r3, r3
 3769 00a2 FF2B     		cmp	r3, #255
 3770 00a4 0AD9     		bls	.L268
1791:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 3771              		.loc 1 1791 0
 3772 00a6 FF22     		movs	r2, #255
 3773 00a8 2285     		strh	r2, [r4, #40]	@ movhi
1792:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3774              		.loc 1 1792 0
 3775 00aa 0023     		movs	r3, #0
 3776 00ac 0093     		str	r3, [sp]
 3777 00ae 4FF08073 		mov	r3, #16777216
 3778 00b2 3146     		mov	r1, r6
 3779 00b4 2046     		mov	r0, r4
 3780 00b6 FFF7FEFF 		bl	I2C_TransferConfig
 3781              	.LVL321:
 3782 00ba 0BE0     		b	.L273
 3783              	.L268:
1796:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 3784              		.loc 1 1796 0
 3785 00bc 628D     		ldrh	r2, [r4, #42]
 3786 00be 92B2     		uxth	r2, r2
 3787 00c0 2285     		strh	r2, [r4, #40]	@ movhi
1797:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3788              		.loc 1 1797 0
 3789 00c2 0023     		movs	r3, #0
 3790 00c4 0093     		str	r3, [sp]
 3791 00c6 4FF00073 		mov	r3, #33554432
 3792 00ca D2B2     		uxtb	r2, r2
 3793 00cc 3146     		mov	r1, r6
 3794 00ce 2046     		mov	r0, r4
 3795 00d0 FFF7FEFF 		bl	I2C_TransferConfig
 3796              	.LVL322:
 3797              	.L273:
1803:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 3798              		.loc 1 1803 0
 3799 00d4 3A46     		mov	r2, r7
 3800 00d6 0C99     		ldr	r1, [sp, #48]
 3801 00d8 2046     		mov	r0, r4
 3802 00da FFF7FEFF 		bl	I2C_WaitOnTXISFlagUntilTimeout
 3803              	.LVL323:
 3804 00de 20B1     		cbz	r0, .L270
1805:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 3805              		.loc 1 1805 0
 3806 00e0 636C     		ldr	r3, [r4, #68]
 3807 00e2 042B     		cmp	r3, #4
 3808 00e4 66D1     		bne	.L279
1807:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 3809              		.loc 1 1807 0
 3810 00e6 0123     		movs	r3, #1
 3811 00e8 69E0     		b	.L265
 3812              	.L270:
ARM GAS  /tmp/ccyfI9lR.s 			page 163


1816:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 3813              		.loc 1 1816 0
 3814 00ea 2268     		ldr	r2, [r4]
 3815 00ec 636A     		ldr	r3, [r4, #36]
 3816 00ee 591C     		adds	r1, r3, #1
 3817 00f0 6162     		str	r1, [r4, #36]
 3818 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3819 00f4 9362     		str	r3, [r2, #40]
1817:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
 3820              		.loc 1 1817 0
 3821 00f6 638D     		ldrh	r3, [r4, #42]
 3822 00f8 9BB2     		uxth	r3, r3
 3823 00fa 013B     		subs	r3, r3, #1
 3824 00fc 9BB2     		uxth	r3, r3
 3825 00fe 6385     		strh	r3, [r4, #42]	@ movhi
1818:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3826              		.loc 1 1818 0
 3827 0100 238D     		ldrh	r3, [r4, #40]
 3828 0102 013B     		subs	r3, r3, #1
 3829 0104 9BB2     		uxth	r3, r3
 3830 0106 2385     		strh	r3, [r4, #40]	@ movhi
1820:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 3831              		.loc 1 1820 0
 3832 0108 33BB     		cbnz	r3, .L271
1820:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 3833              		.loc 1 1820 0 is_stmt 0 discriminator 1
 3834 010a 638D     		ldrh	r3, [r4, #42]
 3835 010c 9BB2     		uxth	r3, r3
 3836 010e 1BB3     		cbz	r3, .L271
1823:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 3837              		.loc 1 1823 0 is_stmt 1
 3838 0110 0097     		str	r7, [sp]
 3839 0112 0C9B     		ldr	r3, [sp, #48]
 3840 0114 0022     		movs	r2, #0
 3841 0116 8021     		movs	r1, #128
 3842 0118 2046     		mov	r0, r4
 3843 011a FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 3844              	.LVL324:
 3845 011e 0028     		cmp	r0, #0
 3846 0120 4AD1     		bne	.L280
1828:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 3847              		.loc 1 1828 0
 3848 0122 638D     		ldrh	r3, [r4, #42]
 3849 0124 9BB2     		uxth	r3, r3
 3850 0126 FF2B     		cmp	r3, #255
 3851 0128 0AD9     		bls	.L272
1830:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 3852              		.loc 1 1830 0
 3853 012a FF22     		movs	r2, #255
 3854 012c 2285     		strh	r2, [r4, #40]	@ movhi
1831:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 3855              		.loc 1 1831 0
 3856 012e 0023     		movs	r3, #0
 3857 0130 0093     		str	r3, [sp]
 3858 0132 4FF08073 		mov	r3, #16777216
 3859 0136 3146     		mov	r1, r6
 3860 0138 2046     		mov	r0, r4
ARM GAS  /tmp/ccyfI9lR.s 			page 164


 3861 013a FFF7FEFF 		bl	I2C_TransferConfig
 3862              	.LVL325:
 3863 013e 0BE0     		b	.L271
 3864              	.L272:
1835:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 3865              		.loc 1 1835 0
 3866 0140 628D     		ldrh	r2, [r4, #42]
 3867 0142 92B2     		uxth	r2, r2
 3868 0144 2285     		strh	r2, [r4, #40]	@ movhi
1836:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 3869              		.loc 1 1836 0
 3870 0146 0023     		movs	r3, #0
 3871 0148 0093     		str	r3, [sp]
 3872 014a 4FF00073 		mov	r3, #33554432
 3873 014e D2B2     		uxtb	r2, r2
 3874 0150 3146     		mov	r1, r6
 3875 0152 2046     		mov	r0, r4
 3876 0154 FFF7FEFF 		bl	I2C_TransferConfig
 3877              	.LVL326:
 3878              	.L271:
1841:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3879              		.loc 1 1841 0
 3880 0158 638D     		ldrh	r3, [r4, #42]
 3881 015a 9BB2     		uxth	r3, r3
 3882 015c 002B     		cmp	r3, #0
 3883 015e B9D1     		bne	.L273
1845:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 3884              		.loc 1 1845 0
 3885 0160 3A46     		mov	r2, r7
 3886 0162 0C99     		ldr	r1, [sp, #48]
 3887 0164 2046     		mov	r0, r4
 3888 0166 FFF7FEFF 		bl	I2C_WaitOnSTOPFlagUntilTimeout
 3889              	.LVL327:
 3890 016a 0346     		mov	r3, r0
 3891 016c 20B1     		cbz	r0, .L274
1847:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 3892              		.loc 1 1847 0
 3893 016e 636C     		ldr	r3, [r4, #68]
 3894 0170 042B     		cmp	r3, #4
 3895 0172 23D1     		bne	.L281
1849:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 3896              		.loc 1 1849 0
 3897 0174 0123     		movs	r3, #1
 3898 0176 22E0     		b	.L265
 3899              	.L274:
1858:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3900              		.loc 1 1858 0
 3901 0178 2268     		ldr	r2, [r4]
 3902 017a 2021     		movs	r1, #32
 3903 017c D161     		str	r1, [r2, #28]
1861:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3904              		.loc 1 1861 0
 3905 017e 2068     		ldr	r0, [r4]
 3906 0180 4268     		ldr	r2, [r0, #4]
 3907 0182 22F0FF72 		bic	r2, r2, #33423360
 3908 0186 22F48B32 		bic	r2, r2, #71168
 3909 018a 22F4FF72 		bic	r2, r2, #510
ARM GAS  /tmp/ccyfI9lR.s 			page 165


 3910 018e 22F00102 		bic	r2, r2, #1
 3911 0192 4260     		str	r2, [r0, #4]
1863:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
 3912              		.loc 1 1863 0
 3913 0194 84F84110 		strb	r1, [r4, #65]
1864:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3914              		.loc 1 1864 0
 3915 0198 0022     		movs	r2, #0
 3916 019a 84F84220 		strb	r2, [r4, #66]
1867:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3917              		.loc 1 1867 0
 3918 019e 84F84020 		strb	r2, [r4, #64]
1869:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3919              		.loc 1 1869 0
 3920 01a2 0CE0     		b	.L265
 3921              	.LVL328:
 3922              	.L275:
1873:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 3923              		.loc 1 1873 0
 3924 01a4 0223     		movs	r3, #2
 3925              	.LVL329:
 3926 01a6 0AE0     		b	.L265
 3927              	.LVL330:
 3928              	.L276:
1748:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3929              		.loc 1 1748 0
 3930 01a8 0123     		movs	r3, #1
 3931              	.LVL331:
 3932 01aa 08E0     		b	.L265
 3933              	.LVL332:
 3934              	.L277:
1752:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3935              		.loc 1 1752 0
 3936 01ac 0223     		movs	r3, #2
 3937              	.LVL333:
 3938 01ae 06E0     		b	.L265
 3939              	.LVL334:
 3940              	.L278:
1759:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 3941              		.loc 1 1759 0
 3942 01b0 0323     		movs	r3, #3
 3943 01b2 04E0     		b	.L265
 3944              	.L279:
1811:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 3945              		.loc 1 1811 0
 3946 01b4 0323     		movs	r3, #3
 3947 01b6 02E0     		b	.L265
 3948              	.L280:
1825:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 3949              		.loc 1 1825 0
 3950 01b8 0323     		movs	r3, #3
 3951 01ba 00E0     		b	.L265
 3952              	.L281:
1853:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 3953              		.loc 1 1853 0
 3954 01bc 0323     		movs	r3, #3
 3955              	.LVL335:
ARM GAS  /tmp/ccyfI9lR.s 			page 166


 3956              	.L265:
1875:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 3957              		.loc 1 1875 0
 3958 01be 1846     		mov	r0, r3
 3959 01c0 02B0     		add	sp, sp, #8
 3960              	.LCFI51:
 3961              		.cfi_def_cfa_offset 32
 3962              		@ sp needed
 3963 01c2 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3964              		.cfi_endproc
 3965              	.LFE152:
 3967 01c6 00BF     		.section	.text.HAL_I2C_Mem_Read,"ax",%progbits
 3968              		.align	2
 3969              		.global	HAL_I2C_Mem_Read
 3970              		.thumb
 3971              		.thumb_func
 3973              	HAL_I2C_Mem_Read:
 3974              	.LFB153:
1891:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 3975              		.loc 1 1891 0
 3976              		.cfi_startproc
 3977              		@ args = 12, pretend = 0, frame = 0
 3978              		@ frame_needed = 0, uses_anonymous_args = 0
 3979              	.LVL336:
 3980 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3981              	.LCFI52:
 3982              		.cfi_def_cfa_offset 32
 3983              		.cfi_offset 4, -32
 3984              		.cfi_offset 5, -28
 3985              		.cfi_offset 6, -24
 3986              		.cfi_offset 7, -20
 3987              		.cfi_offset 8, -16
 3988              		.cfi_offset 9, -12
 3989              		.cfi_offset 10, -8
 3990              		.cfi_offset 14, -4
 3991 0004 82B0     		sub	sp, sp, #8
 3992              	.LCFI53:
 3993              		.cfi_def_cfa_offset 40
 3994 0006 BDF82C50 		ldrh	r5, [sp, #44]
 3995              	.LVL337:
1897:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 3996              		.loc 1 1897 0
 3997 000a 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 3998 000e E4B2     		uxtb	r4, r4
 3999 0010 202C     		cmp	r4, #32
 4000 0012 40F0C480 		bne	.L293
1899:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4001              		.loc 1 1899 0
 4002 0016 0A9C     		ldr	r4, [sp, #40]
 4003 0018 002D     		cmp	r5, #0
 4004 001a 18BF     		it	ne
 4005 001c 002C     		cmpne	r4, #0
 4006 001e 00F0C080 		beq	.L294
1905:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4007              		.loc 1 1905 0
 4008 0022 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 4009 0026 012C     		cmp	r4, #1
ARM GAS  /tmp/ccyfI9lR.s 			page 167


 4010 0028 00F0BD80 		beq	.L295
 4011 002c 9846     		mov	r8, r3
 4012 002e 9146     		mov	r9, r2
 4013 0030 0E46     		mov	r6, r1
 4014 0032 0446     		mov	r4, r0
1905:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4015              		.loc 1 1905 0 is_stmt 0 discriminator 2
 4016 0034 4FF0010A 		mov	r10, #1
 4017 0038 80F840A0 		strb	r10, [r0, #64]
1908:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4018              		.loc 1 1908 0 is_stmt 1 discriminator 2
 4019 003c FFF7FEFF 		bl	HAL_GetTick
 4020              	.LVL338:
 4021 0040 0746     		mov	r7, r0
 4022              	.LVL339:
1910:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4023              		.loc 1 1910 0 discriminator 2
 4024 0042 0090     		str	r0, [sp]
 4025 0044 1923     		movs	r3, #25
 4026 0046 5246     		mov	r2, r10
 4027 0048 4FF40041 		mov	r1, #32768
 4028 004c 2046     		mov	r0, r4
 4029              	.LVL340:
 4030 004e FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 4031              	.LVL341:
 4032 0052 0028     		cmp	r0, #0
 4033 0054 40F0A980 		bne	.L296
1915:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MEM;
 4034              		.loc 1 1915 0
 4035 0058 2223     		movs	r3, #34
 4036 005a 84F84130 		strb	r3, [r4, #65]
1916:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 4037              		.loc 1 1916 0
 4038 005e 4023     		movs	r3, #64
 4039 0060 84F84230 		strb	r3, [r4, #66]
1917:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4040              		.loc 1 1917 0
 4041 0064 0023     		movs	r3, #0
 4042 0066 6364     		str	r3, [r4, #68]
1920:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount = Size;
 4043              		.loc 1 1920 0
 4044 0068 0A9A     		ldr	r2, [sp, #40]
 4045 006a 6262     		str	r2, [r4, #36]
1921:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR   = NULL;
 4046              		.loc 1 1921 0
 4047 006c 6585     		strh	r5, [r4, #42]	@ movhi
1922:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4048              		.loc 1 1922 0
 4049 006e 6363     		str	r3, [r4, #52]
1925:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4050              		.loc 1 1925 0
 4051 0070 0197     		str	r7, [sp, #4]
 4052 0072 0C9B     		ldr	r3, [sp, #48]
 4053 0074 0093     		str	r3, [sp]
 4054 0076 4346     		mov	r3, r8
 4055 0078 4A46     		mov	r2, r9
 4056 007a 3146     		mov	r1, r6
ARM GAS  /tmp/ccyfI9lR.s 			page 168


 4057 007c 2046     		mov	r0, r4
 4058 007e FFF7FEFF 		bl	I2C_RequestMemoryRead
 4059              	.LVL342:
 4060 0082 60B1     		cbz	r0, .L285
1927:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 4061              		.loc 1 1927 0
 4062 0084 636C     		ldr	r3, [r4, #68]
 4063 0086 042B     		cmp	r3, #4
 4064 0088 04D1     		bne	.L286
1930:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
 4065              		.loc 1 1930 0
 4066 008a 0023     		movs	r3, #0
 4067 008c 84F84030 		strb	r3, [r4, #64]
1931:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4068              		.loc 1 1931 0
 4069 0090 5346     		mov	r3, r10
 4070 0092 91E0     		b	.L284
 4071              	.L286:
1936:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 4072              		.loc 1 1936 0
 4073 0094 0023     		movs	r3, #0
 4074 0096 84F84030 		strb	r3, [r4, #64]
1937:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4075              		.loc 1 1937 0
 4076 009a 0323     		movs	r3, #3
 4077 009c 8CE0     		b	.L284
 4078              	.L285:
1943:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4079              		.loc 1 1943 0
 4080 009e 638D     		ldrh	r3, [r4, #42]
 4081 00a0 9BB2     		uxth	r3, r3
 4082 00a2 FF2B     		cmp	r3, #255
 4083 00a4 0AD9     		bls	.L287
1945:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ
 4084              		.loc 1 1945 0
 4085 00a6 FF22     		movs	r2, #255
 4086 00a8 2285     		strh	r2, [r4, #40]	@ movhi
1946:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4087              		.loc 1 1946 0
 4088 00aa 454B     		ldr	r3, .L301
 4089 00ac 0093     		str	r3, [sp]
 4090 00ae 4FF08073 		mov	r3, #16777216
 4091 00b2 3146     		mov	r1, r6
 4092 00b4 2046     		mov	r0, r4
 4093 00b6 FFF7FEFF 		bl	I2C_TransferConfig
 4094              	.LVL343:
 4095 00ba 0BE0     		b	.L291
 4096              	.L287:
1950:HALLIB/Src/stm32f7xx_hal_i2c.c ****       I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_REA
 4097              		.loc 1 1950 0
 4098 00bc 628D     		ldrh	r2, [r4, #42]
 4099 00be 92B2     		uxth	r2, r2
 4100 00c0 2285     		strh	r2, [r4, #40]	@ movhi
1951:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4101              		.loc 1 1951 0
 4102 00c2 3F4B     		ldr	r3, .L301
 4103 00c4 0093     		str	r3, [sp]
ARM GAS  /tmp/ccyfI9lR.s 			page 169


 4104 00c6 4FF00073 		mov	r3, #33554432
 4105 00ca D2B2     		uxtb	r2, r2
 4106 00cc 3146     		mov	r1, r6
 4107 00ce 2046     		mov	r0, r4
 4108 00d0 FFF7FEFF 		bl	I2C_TransferConfig
 4109              	.LVL344:
 4110              	.L291:
1957:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 4111              		.loc 1 1957 0
 4112 00d4 0097     		str	r7, [sp]
 4113 00d6 0C9B     		ldr	r3, [sp, #48]
 4114 00d8 0022     		movs	r2, #0
 4115 00da 0421     		movs	r1, #4
 4116 00dc 2046     		mov	r0, r4
 4117 00de FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 4118              	.LVL345:
 4119 00e2 0028     		cmp	r0, #0
 4120 00e4 63D1     		bne	.L297
1963:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
 4121              		.loc 1 1963 0
 4122 00e6 636A     		ldr	r3, [r4, #36]
 4123 00e8 5A1C     		adds	r2, r3, #1
 4124 00ea 6262     		str	r2, [r4, #36]
 4125 00ec 2268     		ldr	r2, [r4]
 4126 00ee 526A     		ldr	r2, [r2, #36]
 4127 00f0 1A70     		strb	r2, [r3]
1964:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 4128              		.loc 1 1964 0
 4129 00f2 228D     		ldrh	r2, [r4, #40]
 4130 00f4 013A     		subs	r2, r2, #1
 4131 00f6 92B2     		uxth	r2, r2
 4132 00f8 2285     		strh	r2, [r4, #40]	@ movhi
1965:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4133              		.loc 1 1965 0
 4134 00fa 638D     		ldrh	r3, [r4, #42]
 4135 00fc 9BB2     		uxth	r3, r3
 4136 00fe 013B     		subs	r3, r3, #1
 4137 0100 9BB2     		uxth	r3, r3
 4138 0102 6385     		strh	r3, [r4, #42]	@ movhi
1967:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 4139              		.loc 1 1967 0
 4140 0104 2ABB     		cbnz	r2, .L289
1967:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 4141              		.loc 1 1967 0 is_stmt 0 discriminator 1
 4142 0106 638D     		ldrh	r3, [r4, #42]
 4143 0108 9BB2     		uxth	r3, r3
 4144 010a 13B3     		cbz	r3, .L289
1970:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 4145              		.loc 1 1970 0 is_stmt 1
 4146 010c 0097     		str	r7, [sp]
 4147 010e 0C9B     		ldr	r3, [sp, #48]
 4148 0110 8021     		movs	r1, #128
 4149 0112 2046     		mov	r0, r4
 4150 0114 FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 4151              	.LVL346:
 4152 0118 0028     		cmp	r0, #0
 4153 011a 4AD1     		bne	.L298
ARM GAS  /tmp/ccyfI9lR.s 			page 170


1975:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 4154              		.loc 1 1975 0
 4155 011c 638D     		ldrh	r3, [r4, #42]
 4156 011e 9BB2     		uxth	r3, r3
 4157 0120 FF2B     		cmp	r3, #255
 4158 0122 0AD9     		bls	.L290
1977:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 4159              		.loc 1 1977 0
 4160 0124 FF22     		movs	r2, #255
 4161 0126 2285     		strh	r2, [r4, #40]	@ movhi
1978:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 4162              		.loc 1 1978 0
 4163 0128 0023     		movs	r3, #0
 4164 012a 0093     		str	r3, [sp]
 4165 012c 4FF08073 		mov	r3, #16777216
 4166 0130 3146     		mov	r1, r6
 4167 0132 2046     		mov	r0, r4
 4168 0134 FFF7FEFF 		bl	I2C_TransferConfig
 4169              	.LVL347:
 4170 0138 0BE0     		b	.L289
 4171              	.L290:
1982:HALLIB/Src/stm32f7xx_hal_i2c.c ****           I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 4172              		.loc 1 1982 0
 4173 013a 628D     		ldrh	r2, [r4, #42]
 4174 013c 92B2     		uxth	r2, r2
 4175 013e 2285     		strh	r2, [r4, #40]	@ movhi
1983:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 4176              		.loc 1 1983 0
 4177 0140 0023     		movs	r3, #0
 4178 0142 0093     		str	r3, [sp]
 4179 0144 4FF00073 		mov	r3, #33554432
 4180 0148 D2B2     		uxtb	r2, r2
 4181 014a 3146     		mov	r1, r6
 4182 014c 2046     		mov	r0, r4
 4183 014e FFF7FEFF 		bl	I2C_TransferConfig
 4184              	.LVL348:
 4185              	.L289:
1987:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4186              		.loc 1 1987 0
 4187 0152 638D     		ldrh	r3, [r4, #42]
 4188 0154 9BB2     		uxth	r3, r3
 4189 0156 002B     		cmp	r3, #0
 4190 0158 BCD1     		bne	.L291
1991:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4191              		.loc 1 1991 0
 4192 015a 3A46     		mov	r2, r7
 4193 015c 0C99     		ldr	r1, [sp, #48]
 4194 015e 2046     		mov	r0, r4
 4195 0160 FFF7FEFF 		bl	I2C_WaitOnSTOPFlagUntilTimeout
 4196              	.LVL349:
 4197 0164 0346     		mov	r3, r0
 4198 0166 20B1     		cbz	r0, .L292
1993:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 4199              		.loc 1 1993 0
 4200 0168 636C     		ldr	r3, [r4, #68]
 4201 016a 042B     		cmp	r3, #4
 4202 016c 23D1     		bne	.L299
ARM GAS  /tmp/ccyfI9lR.s 			page 171


1995:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4203              		.loc 1 1995 0
 4204 016e 0123     		movs	r3, #1
 4205 0170 22E0     		b	.L284
 4206              	.L292:
2004:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4207              		.loc 1 2004 0
 4208 0172 2268     		ldr	r2, [r4]
 4209 0174 2021     		movs	r1, #32
 4210 0176 D161     		str	r1, [r2, #28]
2007:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4211              		.loc 1 2007 0
 4212 0178 2068     		ldr	r0, [r4]
 4213 017a 4268     		ldr	r2, [r0, #4]
 4214 017c 22F0FF72 		bic	r2, r2, #33423360
 4215 0180 22F48B32 		bic	r2, r2, #71168
 4216 0184 22F4FF72 		bic	r2, r2, #510
 4217 0188 22F00102 		bic	r2, r2, #1
 4218 018c 4260     		str	r2, [r0, #4]
2009:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode  = HAL_I2C_MODE_NONE;
 4219              		.loc 1 2009 0
 4220 018e 84F84110 		strb	r1, [r4, #65]
2010:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4221              		.loc 1 2010 0
 4222 0192 0022     		movs	r2, #0
 4223 0194 84F84220 		strb	r2, [r4, #66]
2013:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4224              		.loc 1 2013 0
 4225 0198 84F84020 		strb	r2, [r4, #64]
2015:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 4226              		.loc 1 2015 0
 4227 019c 0CE0     		b	.L284
 4228              	.LVL350:
 4229              	.L293:
2019:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 4230              		.loc 1 2019 0
 4231 019e 0223     		movs	r3, #2
 4232              	.LVL351:
 4233 01a0 0AE0     		b	.L284
 4234              	.LVL352:
 4235              	.L294:
1901:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4236              		.loc 1 1901 0
 4237 01a2 0123     		movs	r3, #1
 4238              	.LVL353:
 4239 01a4 08E0     		b	.L284
 4240              	.LVL354:
 4241              	.L295:
1905:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4242              		.loc 1 1905 0
 4243 01a6 0223     		movs	r3, #2
 4244              	.LVL355:
 4245 01a8 06E0     		b	.L284
 4246              	.LVL356:
 4247              	.L296:
1912:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4248              		.loc 1 1912 0
ARM GAS  /tmp/ccyfI9lR.s 			page 172


 4249 01aa 0323     		movs	r3, #3
 4250 01ac 04E0     		b	.L284
 4251              	.L297:
1959:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4252              		.loc 1 1959 0
 4253 01ae 0323     		movs	r3, #3
 4254 01b0 02E0     		b	.L284
 4255              	.L298:
1972:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 4256              		.loc 1 1972 0
 4257 01b2 0323     		movs	r3, #3
 4258 01b4 00E0     		b	.L284
 4259              	.L299:
1999:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4260              		.loc 1 1999 0
 4261 01b6 0323     		movs	r3, #3
 4262              	.LVL357:
 4263              	.L284:
2021:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 4264              		.loc 1 2021 0
 4265 01b8 1846     		mov	r0, r3
 4266 01ba 02B0     		add	sp, sp, #8
 4267              	.LCFI54:
 4268              		.cfi_def_cfa_offset 32
 4269              		@ sp needed
 4270 01bc BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4271              	.LVL358:
 4272              	.L302:
 4273              		.align	2
 4274              	.L301:
 4275 01c0 00240080 		.word	-2147474432
 4276              		.cfi_endproc
 4277              	.LFE153:
 4279              		.section	.text.HAL_I2C_Mem_Write_IT,"ax",%progbits
 4280              		.align	2
 4281              		.global	HAL_I2C_Mem_Write_IT
 4282              		.thumb
 4283              		.thumb_func
 4285              	HAL_I2C_Mem_Write_IT:
 4286              	.LFB154:
2035:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 4287              		.loc 1 2035 0
 4288              		.cfi_startproc
 4289              		@ args = 8, pretend = 0, frame = 0
 4290              		@ frame_needed = 0, uses_anonymous_args = 0
 4291              	.LVL359:
 4292 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4293              	.LCFI55:
 4294              		.cfi_def_cfa_offset 24
 4295              		.cfi_offset 4, -24
 4296              		.cfi_offset 5, -20
 4297              		.cfi_offset 6, -16
 4298              		.cfi_offset 7, -12
 4299              		.cfi_offset 8, -8
 4300              		.cfi_offset 14, -4
 4301 0004 82B0     		sub	sp, sp, #8
 4302              	.LCFI56:
ARM GAS  /tmp/ccyfI9lR.s 			page 173


 4303              		.cfi_def_cfa_offset 32
 4304 0006 BDF82450 		ldrh	r5, [sp, #36]
 4305              	.LVL360:
2042:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 4306              		.loc 1 2042 0
 4307 000a 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 4308 000e E4B2     		uxtb	r4, r4
 4309 0010 202C     		cmp	r4, #32
 4310 0012 64D1     		bne	.L309
2044:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4311              		.loc 1 2044 0
 4312 0014 089C     		ldr	r4, [sp, #32]
 4313 0016 002D     		cmp	r5, #0
 4314 0018 18BF     		it	ne
 4315 001a 002C     		cmpne	r4, #0
 4316 001c 61D0     		beq	.L310
2049:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4317              		.loc 1 2049 0
 4318 001e 0468     		ldr	r4, [r0]
 4319 0020 A469     		ldr	r4, [r4, #24]
 4320 0022 14F4004F 		tst	r4, #32768
 4321 0026 5ED1     		bne	.L311
2055:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4322              		.loc 1 2055 0
 4323 0028 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 4324 002c 012C     		cmp	r4, #1
 4325 002e 5CD0     		beq	.L312
 4326 0030 1F46     		mov	r7, r3
 4327 0032 1446     		mov	r4, r2
 4328 0034 0E46     		mov	r6, r1
 4329 0036 8046     		mov	r8, r0
2055:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4330              		.loc 1 2055 0 is_stmt 0 discriminator 2
 4331 0038 0123     		movs	r3, #1
 4332              	.LVL361:
 4333 003a 80F84030 		strb	r3, [r0, #64]
2058:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4334              		.loc 1 2058 0 is_stmt 1 discriminator 2
 4335 003e FFF7FEFF 		bl	HAL_GetTick
 4336              	.LVL362:
2060:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MEM;
 4337              		.loc 1 2060 0 discriminator 2
 4338 0042 2123     		movs	r3, #33
 4339 0044 88F84130 		strb	r3, [r8, #65]
2061:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 4340              		.loc 1 2061 0 discriminator 2
 4341 0048 4023     		movs	r3, #64
 4342 004a 88F84230 		strb	r3, [r8, #66]
2062:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4343              		.loc 1 2062 0 discriminator 2
 4344 004e 0023     		movs	r3, #0
 4345 0050 C8F84430 		str	r3, [r8, #68]
2065:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 4346              		.loc 1 2065 0 discriminator 2
 4347 0054 089B     		ldr	r3, [sp, #32]
 4348 0056 C8F82430 		str	r3, [r8, #36]
2066:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
ARM GAS  /tmp/ccyfI9lR.s 			page 174


 4349              		.loc 1 2066 0 discriminator 2
 4350 005a A8F82A50 		strh	r5, [r8, #42]	@ movhi
2067:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
 4351              		.loc 1 2067 0 discriminator 2
 4352 005e 254B     		ldr	r3, .L314
 4353 0060 C8F82C30 		str	r3, [r8, #44]
2068:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4354              		.loc 1 2068 0 discriminator 2
 4355 0064 244B     		ldr	r3, .L314+4
 4356 0066 C8F83430 		str	r3, [r8, #52]
2070:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4357              		.loc 1 2070 0 discriminator 2
 4358 006a B8F82A30 		ldrh	r3, [r8, #42]
 4359 006e 9BB2     		uxth	r3, r3
 4360 0070 FF2B     		cmp	r3, #255
 4361 0072 05D9     		bls	.L305
2072:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
 4362              		.loc 1 2072 0
 4363 0074 FF23     		movs	r3, #255
 4364 0076 A8F82830 		strh	r3, [r8, #40]	@ movhi
 4365              	.LVL363:
2073:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4366              		.loc 1 2073 0
 4367 007a 4FF08075 		mov	r5, #16777216
 4368 007e 05E0     		b	.L306
 4369              	.LVL364:
 4370              	.L305:
2077:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
 4371              		.loc 1 2077 0
 4372 0080 B8F82A30 		ldrh	r3, [r8, #42]
 4373 0084 A8F82830 		strh	r3, [r8, #40]	@ movhi
 4374              	.LVL365:
2078:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4375              		.loc 1 2078 0
 4376 0088 4FF00075 		mov	r5, #33554432
 4377              	.LVL366:
 4378              	.L306:
2082:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4379              		.loc 1 2082 0
 4380 008c 0190     		str	r0, [sp, #4]
 4381 008e 1923     		movs	r3, #25
 4382 0090 0093     		str	r3, [sp]
 4383 0092 3B46     		mov	r3, r7
 4384 0094 2246     		mov	r2, r4
 4385 0096 3146     		mov	r1, r6
 4386 0098 4046     		mov	r0, r8
 4387              	.LVL367:
 4388 009a FFF7FEFF 		bl	I2C_RequestMemoryWrite
 4389              	.LVL368:
 4390 009e 0446     		mov	r4, r0
 4391 00a0 68B1     		cbz	r0, .L307
2084:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 4392              		.loc 1 2084 0
 4393 00a2 D8F84430 		ldr	r3, [r8, #68]
 4394 00a6 042B     		cmp	r3, #4
 4395 00a8 04D1     		bne	.L308
2087:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
ARM GAS  /tmp/ccyfI9lR.s 			page 175


 4396              		.loc 1 2087 0
 4397 00aa 0023     		movs	r3, #0
 4398 00ac 88F84030 		strb	r3, [r8, #64]
2088:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4399              		.loc 1 2088 0
 4400 00b0 0124     		movs	r4, #1
 4401 00b2 1BE0     		b	.L304
 4402              	.L308:
2093:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 4403              		.loc 1 2093 0
 4404 00b4 0023     		movs	r3, #0
 4405 00b6 88F84030 		strb	r3, [r8, #64]
2094:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4406              		.loc 1 2094 0
 4407 00ba 0324     		movs	r4, #3
 4408 00bc 16E0     		b	.L304
 4409              	.L307:
2099:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4410              		.loc 1 2099 0
 4411 00be 98F82820 		ldrb	r2, [r8, #40]	@ zero_extendqisi2
 4412 00c2 0027     		movs	r7, #0
 4413 00c4 0097     		str	r7, [sp]
 4414 00c6 2B46     		mov	r3, r5
 4415 00c8 3146     		mov	r1, r6
 4416 00ca 4046     		mov	r0, r8
 4417 00cc FFF7FEFF 		bl	I2C_TransferConfig
 4418              	.LVL369:
2102:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4419              		.loc 1 2102 0
 4420 00d0 88F84070 		strb	r7, [r8, #64]
2111:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4421              		.loc 1 2111 0
 4422 00d4 0121     		movs	r1, #1
 4423 00d6 4046     		mov	r0, r8
 4424 00d8 FFF7FEFF 		bl	I2C_Enable_IRQ
 4425              	.LVL370:
2113:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 4426              		.loc 1 2113 0
 4427 00dc 06E0     		b	.L304
 4428              	.LVL371:
 4429              	.L309:
2117:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 4430              		.loc 1 2117 0
 4431 00de 0224     		movs	r4, #2
 4432 00e0 04E0     		b	.L304
 4433              	.L310:
2046:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4434              		.loc 1 2046 0
 4435 00e2 0124     		movs	r4, #1
 4436 00e4 02E0     		b	.L304
 4437              	.L311:
2051:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4438              		.loc 1 2051 0
 4439 00e6 0224     		movs	r4, #2
 4440 00e8 00E0     		b	.L304
 4441              	.L312:
2055:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 176


 4442              		.loc 1 2055 0
 4443 00ea 0224     		movs	r4, #2
 4444              	.LVL372:
 4445              	.L304:
2119:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4446              		.loc 1 2119 0
 4447 00ec 2046     		mov	r0, r4
 4448 00ee 02B0     		add	sp, sp, #8
 4449              	.LCFI57:
 4450              		.cfi_def_cfa_offset 24
 4451              		@ sp needed
 4452 00f0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4453              	.LVL373:
 4454              	.L315:
 4455              		.align	2
 4456              	.L314:
 4457 00f4 0000FFFF 		.word	-65536
 4458 00f8 00000000 		.word	I2C_Master_ISR_IT
 4459              		.cfi_endproc
 4460              	.LFE154:
 4462              		.section	.text.HAL_I2C_Mem_Read_IT,"ax",%progbits
 4463              		.align	2
 4464              		.global	HAL_I2C_Mem_Read_IT
 4465              		.thumb
 4466              		.thumb_func
 4468              	HAL_I2C_Mem_Read_IT:
 4469              	.LFB155:
2134:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 4470              		.loc 1 2134 0
 4471              		.cfi_startproc
 4472              		@ args = 8, pretend = 0, frame = 0
 4473              		@ frame_needed = 0, uses_anonymous_args = 0
 4474              	.LVL374:
 4475 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4476              	.LCFI58:
 4477              		.cfi_def_cfa_offset 24
 4478              		.cfi_offset 4, -24
 4479              		.cfi_offset 5, -20
 4480              		.cfi_offset 6, -16
 4481              		.cfi_offset 7, -12
 4482              		.cfi_offset 8, -8
 4483              		.cfi_offset 14, -4
 4484 0004 82B0     		sub	sp, sp, #8
 4485              	.LCFI59:
 4486              		.cfi_def_cfa_offset 32
 4487 0006 BDF82450 		ldrh	r5, [sp, #36]
 4488              	.LVL375:
2141:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 4489              		.loc 1 2141 0
 4490 000a 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 4491 000e E4B2     		uxtb	r4, r4
 4492 0010 202C     		cmp	r4, #32
 4493 0012 65D1     		bne	.L322
2143:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4494              		.loc 1 2143 0
 4495 0014 089C     		ldr	r4, [sp, #32]
 4496 0016 002D     		cmp	r5, #0
ARM GAS  /tmp/ccyfI9lR.s 			page 177


 4497 0018 18BF     		it	ne
 4498 001a 002C     		cmpne	r4, #0
 4499 001c 62D0     		beq	.L323
2148:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4500              		.loc 1 2148 0
 4501 001e 0468     		ldr	r4, [r0]
 4502 0020 A469     		ldr	r4, [r4, #24]
 4503 0022 14F4004F 		tst	r4, #32768
 4504 0026 5FD1     		bne	.L324
2154:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4505              		.loc 1 2154 0
 4506 0028 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 4507 002c 012C     		cmp	r4, #1
 4508 002e 5DD0     		beq	.L325
 4509 0030 1F46     		mov	r7, r3
 4510 0032 1446     		mov	r4, r2
 4511 0034 0E46     		mov	r6, r1
 4512 0036 8046     		mov	r8, r0
2154:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4513              		.loc 1 2154 0 is_stmt 0 discriminator 2
 4514 0038 0123     		movs	r3, #1
 4515              	.LVL376:
 4516 003a 80F84030 		strb	r3, [r0, #64]
2157:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4517              		.loc 1 2157 0 is_stmt 1 discriminator 2
 4518 003e FFF7FEFF 		bl	HAL_GetTick
 4519              	.LVL377:
2159:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MEM;
 4520              		.loc 1 2159 0 discriminator 2
 4521 0042 2223     		movs	r3, #34
 4522 0044 88F84130 		strb	r3, [r8, #65]
2160:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 4523              		.loc 1 2160 0 discriminator 2
 4524 0048 4023     		movs	r3, #64
 4525 004a 88F84230 		strb	r3, [r8, #66]
2161:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4526              		.loc 1 2161 0 discriminator 2
 4527 004e 0023     		movs	r3, #0
 4528 0050 C8F84430 		str	r3, [r8, #68]
2164:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 4529              		.loc 1 2164 0 discriminator 2
 4530 0054 089B     		ldr	r3, [sp, #32]
 4531 0056 C8F82430 		str	r3, [r8, #36]
2165:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 4532              		.loc 1 2165 0 discriminator 2
 4533 005a A8F82A50 		strh	r5, [r8, #42]	@ movhi
2166:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
 4534              		.loc 1 2166 0 discriminator 2
 4535 005e 264B     		ldr	r3, .L327
 4536 0060 C8F82C30 		str	r3, [r8, #44]
2167:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4537              		.loc 1 2167 0 discriminator 2
 4538 0064 254B     		ldr	r3, .L327+4
 4539 0066 C8F83430 		str	r3, [r8, #52]
2169:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4540              		.loc 1 2169 0 discriminator 2
 4541 006a B8F82A30 		ldrh	r3, [r8, #42]
ARM GAS  /tmp/ccyfI9lR.s 			page 178


 4542 006e 9BB2     		uxth	r3, r3
 4543 0070 FF2B     		cmp	r3, #255
 4544 0072 05D9     		bls	.L318
2171:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
 4545              		.loc 1 2171 0
 4546 0074 FF23     		movs	r3, #255
 4547 0076 A8F82830 		strh	r3, [r8, #40]	@ movhi
 4548              	.LVL378:
2172:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4549              		.loc 1 2172 0
 4550 007a 4FF08075 		mov	r5, #16777216
 4551 007e 05E0     		b	.L319
 4552              	.LVL379:
 4553              	.L318:
2176:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
 4554              		.loc 1 2176 0
 4555 0080 B8F82A30 		ldrh	r3, [r8, #42]
 4556 0084 A8F82830 		strh	r3, [r8, #40]	@ movhi
 4557              	.LVL380:
2177:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4558              		.loc 1 2177 0
 4559 0088 4FF00075 		mov	r5, #33554432
 4560              	.LVL381:
 4561              	.L319:
2181:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4562              		.loc 1 2181 0
 4563 008c 0190     		str	r0, [sp, #4]
 4564 008e 1923     		movs	r3, #25
 4565 0090 0093     		str	r3, [sp]
 4566 0092 3B46     		mov	r3, r7
 4567 0094 2246     		mov	r2, r4
 4568 0096 3146     		mov	r1, r6
 4569 0098 4046     		mov	r0, r8
 4570              	.LVL382:
 4571 009a FFF7FEFF 		bl	I2C_RequestMemoryRead
 4572              	.LVL383:
 4573 009e 0446     		mov	r4, r0
 4574 00a0 68B1     		cbz	r0, .L320
2183:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 4575              		.loc 1 2183 0
 4576 00a2 D8F84430 		ldr	r3, [r8, #68]
 4577 00a6 042B     		cmp	r3, #4
 4578 00a8 04D1     		bne	.L321
2186:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
 4579              		.loc 1 2186 0
 4580 00aa 0023     		movs	r3, #0
 4581 00ac 88F84030 		strb	r3, [r8, #64]
2187:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4582              		.loc 1 2187 0
 4583 00b0 0124     		movs	r4, #1
 4584 00b2 1CE0     		b	.L317
 4585              	.L321:
2192:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 4586              		.loc 1 2192 0
 4587 00b4 0023     		movs	r3, #0
 4588 00b6 88F84030 		strb	r3, [r8, #64]
2193:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
ARM GAS  /tmp/ccyfI9lR.s 			page 179


 4589              		.loc 1 2193 0
 4590 00ba 0324     		movs	r4, #3
 4591 00bc 17E0     		b	.L317
 4592              	.L320:
2198:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4593              		.loc 1 2198 0
 4594 00be 98F82820 		ldrb	r2, [r8, #40]	@ zero_extendqisi2
 4595 00c2 0F4B     		ldr	r3, .L327+8
 4596 00c4 0093     		str	r3, [sp]
 4597 00c6 2B46     		mov	r3, r5
 4598 00c8 3146     		mov	r1, r6
 4599 00ca 4046     		mov	r0, r8
 4600 00cc FFF7FEFF 		bl	I2C_TransferConfig
 4601              	.LVL384:
2201:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4602              		.loc 1 2201 0
 4603 00d0 0023     		movs	r3, #0
 4604 00d2 88F84030 		strb	r3, [r8, #64]
2210:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4605              		.loc 1 2210 0
 4606 00d6 0221     		movs	r1, #2
 4607 00d8 4046     		mov	r0, r8
 4608 00da FFF7FEFF 		bl	I2C_Enable_IRQ
 4609              	.LVL385:
2212:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 4610              		.loc 1 2212 0
 4611 00de 06E0     		b	.L317
 4612              	.LVL386:
 4613              	.L322:
2216:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 4614              		.loc 1 2216 0
 4615 00e0 0224     		movs	r4, #2
 4616 00e2 04E0     		b	.L317
 4617              	.L323:
2145:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4618              		.loc 1 2145 0
 4619 00e4 0124     		movs	r4, #1
 4620 00e6 02E0     		b	.L317
 4621              	.L324:
2150:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4622              		.loc 1 2150 0
 4623 00e8 0224     		movs	r4, #2
 4624 00ea 00E0     		b	.L317
 4625              	.L325:
2154:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4626              		.loc 1 2154 0
 4627 00ec 0224     		movs	r4, #2
 4628              	.LVL387:
 4629              	.L317:
2218:HALLIB/Src/stm32f7xx_hal_i2c.c **** /**
 4630              		.loc 1 2218 0
 4631 00ee 2046     		mov	r0, r4
 4632 00f0 02B0     		add	sp, sp, #8
 4633              	.LCFI60:
 4634              		.cfi_def_cfa_offset 24
 4635              		@ sp needed
 4636 00f2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/ccyfI9lR.s 			page 180


 4637              	.LVL388:
 4638              	.L328:
 4639 00f6 00BF     		.align	2
 4640              	.L327:
 4641 00f8 0000FFFF 		.word	-65536
 4642 00fc 00000000 		.word	I2C_Master_ISR_IT
 4643 0100 00240080 		.word	-2147474432
 4644              		.cfi_endproc
 4645              	.LFE155:
 4647              		.section	.text.HAL_I2C_Mem_Write_DMA,"ax",%progbits
 4648              		.align	2
 4649              		.global	HAL_I2C_Mem_Write_DMA
 4650              		.thumb
 4651              		.thumb_func
 4653              	HAL_I2C_Mem_Write_DMA:
 4654              	.LFB156:
2232:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 4655              		.loc 1 2232 0
 4656              		.cfi_startproc
 4657              		@ args = 8, pretend = 0, frame = 0
 4658              		@ frame_needed = 0, uses_anonymous_args = 0
 4659              	.LVL389:
 4660 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4661              	.LCFI61:
 4662              		.cfi_def_cfa_offset 28
 4663              		.cfi_offset 4, -28
 4664              		.cfi_offset 5, -24
 4665              		.cfi_offset 6, -20
 4666              		.cfi_offset 7, -16
 4667              		.cfi_offset 8, -12
 4668              		.cfi_offset 9, -8
 4669              		.cfi_offset 14, -4
 4670 0004 83B0     		sub	sp, sp, #12
 4671              	.LCFI62:
 4672              		.cfi_def_cfa_offset 40
 4673 0006 BDF82C50 		ldrh	r5, [sp, #44]
 4674              	.LVL390:
2239:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 4675              		.loc 1 2239 0
 4676 000a 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 4677 000e E4B2     		uxtb	r4, r4
 4678 0010 202C     		cmp	r4, #32
 4679 0012 40F08F80 		bne	.L335
2241:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4680              		.loc 1 2241 0
 4681 0016 0A9C     		ldr	r4, [sp, #40]
 4682 0018 002D     		cmp	r5, #0
 4683 001a 18BF     		it	ne
 4684 001c 002C     		cmpne	r4, #0
 4685 001e 00F08B80 		beq	.L336
2246:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4686              		.loc 1 2246 0
 4687 0022 0468     		ldr	r4, [r0]
 4688 0024 A469     		ldr	r4, [r4, #24]
 4689 0026 14F4004F 		tst	r4, #32768
 4690 002a 40F08780 		bne	.L337
2252:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 181


 4691              		.loc 1 2252 0
 4692 002e 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 4693 0032 012C     		cmp	r4, #1
 4694 0034 00F08480 		beq	.L338
 4695 0038 1F46     		mov	r7, r3
 4696 003a 1446     		mov	r4, r2
 4697 003c 0E46     		mov	r6, r1
 4698 003e 8046     		mov	r8, r0
2252:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4699              		.loc 1 2252 0 is_stmt 0 discriminator 2
 4700 0040 0123     		movs	r3, #1
 4701              	.LVL391:
 4702 0042 80F84030 		strb	r3, [r0, #64]
2255:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4703              		.loc 1 2255 0 is_stmt 1 discriminator 2
 4704 0046 FFF7FEFF 		bl	HAL_GetTick
 4705              	.LVL392:
2257:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MEM;
 4706              		.loc 1 2257 0 discriminator 2
 4707 004a 2123     		movs	r3, #33
 4708 004c 88F84130 		strb	r3, [r8, #65]
2258:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 4709              		.loc 1 2258 0 discriminator 2
 4710 0050 4023     		movs	r3, #64
 4711 0052 88F84230 		strb	r3, [r8, #66]
2259:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4712              		.loc 1 2259 0 discriminator 2
 4713 0056 0023     		movs	r3, #0
 4714 0058 C8F84430 		str	r3, [r8, #68]
2262:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 4715              		.loc 1 2262 0 discriminator 2
 4716 005c 0A9B     		ldr	r3, [sp, #40]
 4717 005e C8F82430 		str	r3, [r8, #36]
2263:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 4718              		.loc 1 2263 0 discriminator 2
 4719 0062 A8F82A50 		strh	r5, [r8, #42]	@ movhi
2264:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_DMA;
 4720              		.loc 1 2264 0 discriminator 2
 4721 0066 394B     		ldr	r3, .L340
 4722 0068 C8F82C30 		str	r3, [r8, #44]
2265:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4723              		.loc 1 2265 0 discriminator 2
 4724 006c 384B     		ldr	r3, .L340+4
 4725 006e C8F83430 		str	r3, [r8, #52]
2267:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4726              		.loc 1 2267 0 discriminator 2
 4727 0072 B8F82A30 		ldrh	r3, [r8, #42]
 4728 0076 9BB2     		uxth	r3, r3
 4729 0078 FF2B     		cmp	r3, #255
 4730 007a 05D9     		bls	.L331
2269:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
 4731              		.loc 1 2269 0
 4732 007c FF23     		movs	r3, #255
 4733 007e A8F82830 		strh	r3, [r8, #40]	@ movhi
 4734              	.LVL393:
2270:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4735              		.loc 1 2270 0
ARM GAS  /tmp/ccyfI9lR.s 			page 182


 4736 0082 4FF08079 		mov	r9, #16777216
 4737 0086 05E0     		b	.L332
 4738              	.LVL394:
 4739              	.L331:
2274:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
 4740              		.loc 1 2274 0
 4741 0088 B8F82A30 		ldrh	r3, [r8, #42]
 4742 008c A8F82830 		strh	r3, [r8, #40]	@ movhi
 4743              	.LVL395:
2275:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4744              		.loc 1 2275 0
 4745 0090 4FF00079 		mov	r9, #33554432
 4746              	.LVL396:
 4747              	.L332:
2279:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4748              		.loc 1 2279 0
 4749 0094 0190     		str	r0, [sp, #4]
 4750 0096 1923     		movs	r3, #25
 4751 0098 0093     		str	r3, [sp]
 4752 009a 3B46     		mov	r3, r7
 4753 009c 2246     		mov	r2, r4
 4754 009e 3146     		mov	r1, r6
 4755 00a0 4046     		mov	r0, r8
 4756              	.LVL397:
 4757 00a2 FFF7FEFF 		bl	I2C_RequestMemoryWrite
 4758              	.LVL398:
 4759 00a6 0446     		mov	r4, r0
 4760 00a8 68B1     		cbz	r0, .L333
2281:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 4761              		.loc 1 2281 0
 4762 00aa D8F84430 		ldr	r3, [r8, #68]
 4763 00ae 042B     		cmp	r3, #4
 4764 00b0 04D1     		bne	.L334
2284:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
 4765              		.loc 1 2284 0
 4766 00b2 0023     		movs	r3, #0
 4767 00b4 88F84030 		strb	r3, [r8, #64]
2285:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4768              		.loc 1 2285 0
 4769 00b8 0124     		movs	r4, #1
 4770 00ba 42E0     		b	.L330
 4771              	.L334:
2290:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 4772              		.loc 1 2290 0
 4773 00bc 0023     		movs	r3, #0
 4774 00be 88F84030 		strb	r3, [r8, #64]
2291:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4775              		.loc 1 2291 0
 4776 00c2 0324     		movs	r4, #3
 4777 00c4 3DE0     		b	.L330
 4778              	.L333:
2296:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4779              		.loc 1 2296 0
 4780 00c6 D8F83830 		ldr	r3, [r8, #56]
 4781 00ca 224A     		ldr	r2, .L340+8
 4782 00cc DA63     		str	r2, [r3, #60]
2299:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 183


 4783              		.loc 1 2299 0
 4784 00ce D8F83830 		ldr	r3, [r8, #56]
 4785 00d2 214A     		ldr	r2, .L340+12
 4786 00d4 DA64     		str	r2, [r3, #76]
2302:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmatx->XferAbortCallback = NULL;
 4787              		.loc 1 2302 0
 4788 00d6 D8F83830 		ldr	r3, [r8, #56]
 4789 00da 0025     		movs	r5, #0
 4790 00dc 1D64     		str	r5, [r3, #64]
2303:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4791              		.loc 1 2303 0
 4792 00de D8F83830 		ldr	r3, [r8, #56]
 4793 00e2 1D65     		str	r5, [r3, #80]
2306:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4794              		.loc 1 2306 0
 4795 00e4 D8F80020 		ldr	r2, [r8]
 4796 00e8 B8F82830 		ldrh	r3, [r8, #40]
 4797 00ec 2832     		adds	r2, r2, #40
 4798 00ee 0A99     		ldr	r1, [sp, #40]
 4799 00f0 D8F83800 		ldr	r0, [r8, #56]
 4800 00f4 FFF7FEFF 		bl	HAL_DMA_Start_IT
 4801              	.LVL399:
2310:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4802              		.loc 1 2310 0
 4803 00f8 98F82820 		ldrb	r2, [r8, #40]	@ zero_extendqisi2
 4804 00fc 0095     		str	r5, [sp]
 4805 00fe 4B46     		mov	r3, r9
 4806 0100 3146     		mov	r1, r6
 4807 0102 4046     		mov	r0, r8
 4808 0104 FFF7FEFF 		bl	I2C_TransferConfig
 4809              	.LVL400:
2313:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4810              		.loc 1 2313 0
 4811 0108 B8F82A30 		ldrh	r3, [r8, #42]
 4812 010c 9BB2     		uxth	r3, r3
 4813 010e B8F82820 		ldrh	r2, [r8, #40]
 4814 0112 9B1A     		subs	r3, r3, r2
 4815 0114 9BB2     		uxth	r3, r3
 4816 0116 A8F82A30 		strh	r3, [r8, #42]	@ movhi
2316:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4817              		.loc 1 2316 0
 4818 011a 88F84050 		strb	r5, [r8, #64]
2322:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4819              		.loc 1 2322 0
 4820 011e 1121     		movs	r1, #17
 4821 0120 4046     		mov	r0, r8
 4822 0122 FFF7FEFF 		bl	I2C_Enable_IRQ
 4823              	.LVL401:
2325:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4824              		.loc 1 2325 0
 4825 0126 D8F80020 		ldr	r2, [r8]
 4826 012a 1368     		ldr	r3, [r2]
 4827 012c 43F48043 		orr	r3, r3, #16384
 4828 0130 1360     		str	r3, [r2]
2327:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 4829              		.loc 1 2327 0
 4830 0132 06E0     		b	.L330
ARM GAS  /tmp/ccyfI9lR.s 			page 184


 4831              	.LVL402:
 4832              	.L335:
2331:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 4833              		.loc 1 2331 0
 4834 0134 0224     		movs	r4, #2
 4835 0136 04E0     		b	.L330
 4836              	.L336:
2243:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4837              		.loc 1 2243 0
 4838 0138 0124     		movs	r4, #1
 4839 013a 02E0     		b	.L330
 4840              	.L337:
2248:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4841              		.loc 1 2248 0
 4842 013c 0224     		movs	r4, #2
 4843 013e 00E0     		b	.L330
 4844              	.L338:
2252:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4845              		.loc 1 2252 0
 4846 0140 0224     		movs	r4, #2
 4847              	.LVL403:
 4848              	.L330:
2333:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4849              		.loc 1 2333 0
 4850 0142 2046     		mov	r0, r4
 4851 0144 03B0     		add	sp, sp, #12
 4852              	.LCFI63:
 4853              		.cfi_def_cfa_offset 28
 4854              		@ sp needed
 4855 0146 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4856              	.LVL404:
 4857              	.L341:
 4858 014a 00BF     		.align	2
 4859              	.L340:
 4860 014c 0000FFFF 		.word	-65536
 4861 0150 00000000 		.word	I2C_Master_ISR_DMA
 4862 0154 00000000 		.word	I2C_DMAMasterTransmitCplt
 4863 0158 00000000 		.word	I2C_DMAError
 4864              		.cfi_endproc
 4865              	.LFE156:
 4867              		.section	.text.HAL_I2C_Mem_Read_DMA,"ax",%progbits
 4868              		.align	2
 4869              		.global	HAL_I2C_Mem_Read_DMA
 4870              		.thumb
 4871              		.thumb_func
 4873              	HAL_I2C_Mem_Read_DMA:
 4874              	.LFB157:
2348:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 4875              		.loc 1 2348 0
 4876              		.cfi_startproc
 4877              		@ args = 8, pretend = 0, frame = 0
 4878              		@ frame_needed = 0, uses_anonymous_args = 0
 4879              	.LVL405:
 4880 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4881              	.LCFI64:
 4882              		.cfi_def_cfa_offset 28
 4883              		.cfi_offset 4, -28
ARM GAS  /tmp/ccyfI9lR.s 			page 185


 4884              		.cfi_offset 5, -24
 4885              		.cfi_offset 6, -20
 4886              		.cfi_offset 7, -16
 4887              		.cfi_offset 8, -12
 4888              		.cfi_offset 9, -8
 4889              		.cfi_offset 14, -4
 4890 0004 83B0     		sub	sp, sp, #12
 4891              	.LCFI65:
 4892              		.cfi_def_cfa_offset 40
 4893 0006 BDF82C50 		ldrh	r5, [sp, #44]
 4894              	.LVL406:
2355:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 4895              		.loc 1 2355 0
 4896 000a 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 4897 000e E4B2     		uxtb	r4, r4
 4898 0010 202C     		cmp	r4, #32
 4899 0012 40F09080 		bne	.L348
2357:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4900              		.loc 1 2357 0
 4901 0016 0A9C     		ldr	r4, [sp, #40]
 4902 0018 002D     		cmp	r5, #0
 4903 001a 18BF     		it	ne
 4904 001c 002C     		cmpne	r4, #0
 4905 001e 00F08C80 		beq	.L349
2362:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4906              		.loc 1 2362 0
 4907 0022 0468     		ldr	r4, [r0]
 4908 0024 A469     		ldr	r4, [r4, #24]
 4909 0026 14F4004F 		tst	r4, #32768
 4910 002a 40F08880 		bne	.L350
2368:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4911              		.loc 1 2368 0
 4912 002e 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 4913 0032 012C     		cmp	r4, #1
 4914 0034 00F08580 		beq	.L351
 4915 0038 1F46     		mov	r7, r3
 4916 003a 1446     		mov	r4, r2
 4917 003c 0E46     		mov	r6, r1
 4918 003e 8046     		mov	r8, r0
2368:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4919              		.loc 1 2368 0 is_stmt 0 discriminator 2
 4920 0040 0123     		movs	r3, #1
 4921              	.LVL407:
 4922 0042 80F84030 		strb	r3, [r0, #64]
2371:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4923              		.loc 1 2371 0 is_stmt 1 discriminator 2
 4924 0046 FFF7FEFF 		bl	HAL_GetTick
 4925              	.LVL408:
2373:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode        = HAL_I2C_MODE_MEM;
 4926              		.loc 1 2373 0 discriminator 2
 4927 004a 2223     		movs	r3, #34
 4928 004c 88F84130 		strb	r3, [r8, #65]
2374:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 4929              		.loc 1 2374 0 discriminator 2
 4930 0050 4023     		movs	r3, #64
 4931 0052 88F84230 		strb	r3, [r8, #66]
2375:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 186


 4932              		.loc 1 2375 0 discriminator 2
 4933 0056 0023     		movs	r3, #0
 4934 0058 C8F84430 		str	r3, [r8, #68]
2378:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 4935              		.loc 1 2378 0 discriminator 2
 4936 005c 0A9B     		ldr	r3, [sp, #40]
 4937 005e C8F82430 		str	r3, [r8, #36]
2379:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 4938              		.loc 1 2379 0 discriminator 2
 4939 0062 A8F82A50 		strh	r5, [r8, #42]	@ movhi
2380:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_DMA;
 4940              		.loc 1 2380 0 discriminator 2
 4941 0066 394B     		ldr	r3, .L353
 4942 0068 C8F82C30 		str	r3, [r8, #44]
2381:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4943              		.loc 1 2381 0 discriminator 2
 4944 006c 384B     		ldr	r3, .L353+4
 4945 006e C8F83430 		str	r3, [r8, #52]
2383:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4946              		.loc 1 2383 0 discriminator 2
 4947 0072 B8F82A30 		ldrh	r3, [r8, #42]
 4948 0076 9BB2     		uxth	r3, r3
 4949 0078 FF2B     		cmp	r3, #255
 4950 007a 05D9     		bls	.L344
2385:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
 4951              		.loc 1 2385 0
 4952 007c FF23     		movs	r3, #255
 4953 007e A8F82830 		strh	r3, [r8, #40]	@ movhi
 4954              	.LVL409:
2386:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4955              		.loc 1 2386 0
 4956 0082 4FF08079 		mov	r9, #16777216
 4957 0086 05E0     		b	.L345
 4958              	.LVL410:
 4959              	.L344:
2390:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_AUTOEND_MODE;
 4960              		.loc 1 2390 0
 4961 0088 B8F82A30 		ldrh	r3, [r8, #42]
 4962 008c A8F82830 		strh	r3, [r8, #40]	@ movhi
 4963              	.LVL411:
2391:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 4964              		.loc 1 2391 0
 4965 0090 4FF00079 		mov	r9, #33554432
 4966              	.LVL412:
 4967              	.L345:
2395:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 4968              		.loc 1 2395 0
 4969 0094 0190     		str	r0, [sp, #4]
 4970 0096 1923     		movs	r3, #25
 4971 0098 0093     		str	r3, [sp]
 4972 009a 3B46     		mov	r3, r7
 4973 009c 2246     		mov	r2, r4
 4974 009e 3146     		mov	r1, r6
 4975 00a0 4046     		mov	r0, r8
 4976              	.LVL413:
 4977 00a2 FFF7FEFF 		bl	I2C_RequestMemoryRead
 4978              	.LVL414:
ARM GAS  /tmp/ccyfI9lR.s 			page 187


 4979 00a6 0446     		mov	r4, r0
 4980 00a8 68B1     		cbz	r0, .L346
2397:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 4981              		.loc 1 2397 0
 4982 00aa D8F84430 		ldr	r3, [r8, #68]
 4983 00ae 042B     		cmp	r3, #4
 4984 00b0 04D1     		bne	.L347
2400:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_ERROR;
 4985              		.loc 1 2400 0
 4986 00b2 0023     		movs	r3, #0
 4987 00b4 88F84030 		strb	r3, [r8, #64]
2401:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4988              		.loc 1 2401 0
 4989 00b8 0124     		movs	r4, #1
 4990 00ba 43E0     		b	.L343
 4991              	.L347:
2406:HALLIB/Src/stm32f7xx_hal_i2c.c ****         return HAL_TIMEOUT;
 4992              		.loc 1 2406 0
 4993 00bc 0023     		movs	r3, #0
 4994 00be 88F84030 		strb	r3, [r8, #64]
2407:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 4995              		.loc 1 2407 0
 4996 00c2 0324     		movs	r4, #3
 4997 00c4 3EE0     		b	.L343
 4998              	.L346:
2412:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 4999              		.loc 1 2412 0
 5000 00c6 D8F83C30 		ldr	r3, [r8, #60]
 5001 00ca 224A     		ldr	r2, .L353+8
 5002 00cc DA63     		str	r2, [r3, #60]
2415:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5003              		.loc 1 2415 0
 5004 00ce D8F83C30 		ldr	r3, [r8, #60]
 5005 00d2 214A     		ldr	r2, .L353+12
 5006 00d4 DA64     		str	r2, [r3, #76]
2418:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->hdmarx->XferAbortCallback = NULL;
 5007              		.loc 1 2418 0
 5008 00d6 D8F83C30 		ldr	r3, [r8, #60]
 5009 00da 0025     		movs	r5, #0
 5010 00dc 1D64     		str	r5, [r3, #64]
2419:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5011              		.loc 1 2419 0
 5012 00de D8F83C30 		ldr	r3, [r8, #60]
 5013 00e2 1D65     		str	r5, [r3, #80]
2422:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5014              		.loc 1 2422 0
 5015 00e4 D8F80010 		ldr	r1, [r8]
 5016 00e8 B8F82830 		ldrh	r3, [r8, #40]
 5017 00ec 0A9A     		ldr	r2, [sp, #40]
 5018 00ee 2431     		adds	r1, r1, #36
 5019 00f0 D8F83C00 		ldr	r0, [r8, #60]
 5020 00f4 FFF7FEFF 		bl	HAL_DMA_Start_IT
 5021              	.LVL415:
2425:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5022              		.loc 1 2425 0
 5023 00f8 98F82820 		ldrb	r2, [r8, #40]	@ zero_extendqisi2
 5024 00fc 174B     		ldr	r3, .L353+16
ARM GAS  /tmp/ccyfI9lR.s 			page 188


 5025 00fe 0093     		str	r3, [sp]
 5026 0100 4B46     		mov	r3, r9
 5027 0102 3146     		mov	r1, r6
 5028 0104 4046     		mov	r0, r8
 5029 0106 FFF7FEFF 		bl	I2C_TransferConfig
 5030              	.LVL416:
2428:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5031              		.loc 1 2428 0
 5032 010a B8F82A30 		ldrh	r3, [r8, #42]
 5033 010e 9BB2     		uxth	r3, r3
 5034 0110 B8F82820 		ldrh	r2, [r8, #40]
 5035 0114 9B1A     		subs	r3, r3, r2
 5036 0116 9BB2     		uxth	r3, r3
 5037 0118 A8F82A30 		strh	r3, [r8, #42]	@ movhi
2431:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5038              		.loc 1 2431 0
 5039 011c 88F84050 		strb	r5, [r8, #64]
2434:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5040              		.loc 1 2434 0
 5041 0120 D8F80020 		ldr	r2, [r8]
 5042 0124 1368     		ldr	r3, [r2]
 5043 0126 43F40043 		orr	r3, r3, #32768
 5044 012a 1360     		str	r3, [r2]
2440:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5045              		.loc 1 2440 0
 5046 012c 1121     		movs	r1, #17
 5047 012e 4046     		mov	r0, r8
 5048 0130 FFF7FEFF 		bl	I2C_Enable_IRQ
 5049              	.LVL417:
2442:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5050              		.loc 1 2442 0
 5051 0134 06E0     		b	.L343
 5052              	.LVL418:
 5053              	.L348:
2446:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5054              		.loc 1 2446 0
 5055 0136 0224     		movs	r4, #2
 5056 0138 04E0     		b	.L343
 5057              	.L349:
2359:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5058              		.loc 1 2359 0
 5059 013a 0124     		movs	r4, #1
 5060 013c 02E0     		b	.L343
 5061              	.L350:
2364:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5062              		.loc 1 2364 0
 5063 013e 0224     		movs	r4, #2
 5064 0140 00E0     		b	.L343
 5065              	.L351:
2368:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5066              		.loc 1 2368 0
 5067 0142 0224     		movs	r4, #2
 5068              	.LVL419:
 5069              	.L343:
2448:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5070              		.loc 1 2448 0
 5071 0144 2046     		mov	r0, r4
ARM GAS  /tmp/ccyfI9lR.s 			page 189


 5072 0146 03B0     		add	sp, sp, #12
 5073              	.LCFI66:
 5074              		.cfi_def_cfa_offset 28
 5075              		@ sp needed
 5076 0148 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 5077              	.LVL420:
 5078              	.L354:
 5079              		.align	2
 5080              	.L353:
 5081 014c 0000FFFF 		.word	-65536
 5082 0150 00000000 		.word	I2C_Master_ISR_DMA
 5083 0154 00000000 		.word	I2C_DMAMasterReceiveCplt
 5084 0158 00000000 		.word	I2C_DMAError
 5085 015c 00240080 		.word	-2147474432
 5086              		.cfi_endproc
 5087              	.LFE157:
 5089              		.section	.text.HAL_I2C_IsDeviceReady,"ax",%progbits
 5090              		.align	2
 5091              		.global	HAL_I2C_IsDeviceReady
 5092              		.thumb
 5093              		.thumb_func
 5095              	HAL_I2C_IsDeviceReady:
 5096              	.LFB158:
2462:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t tickstart = 0U;
 5097              		.loc 1 2462 0
 5098              		.cfi_startproc
 5099              		@ args = 0, pretend = 0, frame = 8
 5100              		@ frame_needed = 0, uses_anonymous_args = 0
 5101              	.LVL421:
 5102 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5103              	.LCFI67:
 5104              		.cfi_def_cfa_offset 32
 5105              		.cfi_offset 4, -32
 5106              		.cfi_offset 5, -28
 5107              		.cfi_offset 6, -24
 5108              		.cfi_offset 7, -20
 5109              		.cfi_offset 8, -16
 5110              		.cfi_offset 9, -12
 5111              		.cfi_offset 10, -8
 5112              		.cfi_offset 14, -4
 5113 0004 84B0     		sub	sp, sp, #16
 5114              	.LCFI68:
 5115              		.cfi_def_cfa_offset 48
 5116              	.LVL422:
2465:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5117              		.loc 1 2465 0
 5118 0006 0024     		movs	r4, #0
 5119 0008 0394     		str	r4, [sp, #12]
2467:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 5120              		.loc 1 2467 0
 5121 000a 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 5122 000e E4B2     		uxtb	r4, r4
 5123 0010 202C     		cmp	r4, #32
 5124 0012 40F09180 		bne	.L367
2469:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 5125              		.loc 1 2469 0
 5126 0016 0468     		ldr	r4, [r0]
ARM GAS  /tmp/ccyfI9lR.s 			page 190


 5127 0018 A469     		ldr	r4, [r4, #24]
 5128 001a 14F4004F 		tst	r4, #32768
 5129 001e 40F08D80 		bne	.L368
2475:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5130              		.loc 1 2475 0
 5131 0022 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 5132 0026 012C     		cmp	r4, #1
 5133 0028 00F08A80 		beq	.L369
 5134 002c 1F46     		mov	r7, r3
 5135 002e 9046     		mov	r8, r2
 5136 0030 8946     		mov	r9, r1
 5137 0032 0646     		mov	r6, r0
2475:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5138              		.loc 1 2475 0 is_stmt 0 discriminator 2
 5139 0034 0123     		movs	r3, #1
 5140              	.LVL423:
 5141 0036 80F84030 		strb	r3, [r0, #64]
2477:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 5142              		.loc 1 2477 0 is_stmt 1 discriminator 2
 5143 003a 2423     		movs	r3, #36
 5144 003c 80F84130 		strb	r3, [r0, #65]
2478:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5145              		.loc 1 2478 0 discriminator 2
 5146 0040 0023     		movs	r3, #0
 5147 0042 4364     		str	r3, [r0, #68]
 5148              	.LVL424:
 5149              	.L366:
2483:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5150              		.loc 1 2483 0
 5151 0044 3268     		ldr	r2, [r6]
 5152 0046 F368     		ldr	r3, [r6, #12]
 5153 0048 012B     		cmp	r3, #1
 5154 004a 04D1     		bne	.L357
2483:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5155              		.loc 1 2483 0 is_stmt 0 discriminator 1
 5156 004c C9F30901 		ubfx	r1, r9, #0, #10
 5157 0050 414B     		ldr	r3, .L374
 5158 0052 0B43     		orrs	r3, r3, r1
 5159 0054 03E0     		b	.L358
 5160              	.L357:
2483:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5161              		.loc 1 2483 0 discriminator 2
 5162 0056 C9F30903 		ubfx	r3, r9, #0, #10
 5163 005a 43F42053 		orr	r3, r3, #10240
 5164              	.L358:
2483:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5165              		.loc 1 2483 0 discriminator 4
 5166 005e 5360     		str	r3, [r2, #4]
2487:HALLIB/Src/stm32f7xx_hal_i2c.c ****       while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_F
 5167              		.loc 1 2487 0 is_stmt 1 discriminator 4
 5168 0060 FFF7FEFF 		bl	HAL_GetTick
 5169              	.LVL425:
 5170 0064 8246     		mov	r10, r0
 5171              	.LVL426:
2488:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 5172              		.loc 1 2488 0 discriminator 4
 5173 0066 11E0     		b	.L360
ARM GAS  /tmp/ccyfI9lR.s 			page 191


 5174              	.LVL427:
 5175              	.L363:
2490:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 5176              		.loc 1 2490 0
 5177 0068 B7F1FF3F 		cmp	r7, #-1
 5178 006c 0ED0     		beq	.L360
2492:HALLIB/Src/stm32f7xx_hal_i2c.c ****           {
 5179              		.loc 1 2492 0
 5180 006e 2FB1     		cbz	r7, .L361
2492:HALLIB/Src/stm32f7xx_hal_i2c.c ****           {
 5181              		.loc 1 2492 0 is_stmt 0 discriminator 1
 5182 0070 FFF7FEFF 		bl	HAL_GetTick
 5183              	.LVL428:
 5184 0074 CAEB0000 		rsb	r0, r10, r0
 5185 0078 8742     		cmp	r7, r0
 5186 007a 07D2     		bcs	.L360
 5187              	.L361:
2495:HALLIB/Src/stm32f7xx_hal_i2c.c ****             /* Process Unlocked */
 5188              		.loc 1 2495 0 is_stmt 1
 5189 007c 2023     		movs	r3, #32
 5190 007e 86F84130 		strb	r3, [r6, #65]
2497:HALLIB/Src/stm32f7xx_hal_i2c.c ****             return HAL_TIMEOUT;
 5191              		.loc 1 2497 0
 5192 0082 0023     		movs	r3, #0
 5193 0084 86F84030 		strb	r3, [r6, #64]
2498:HALLIB/Src/stm32f7xx_hal_i2c.c ****           }
 5194              		.loc 1 2498 0
 5195 0088 0323     		movs	r3, #3
 5196 008a 60E0     		b	.L356
 5197              	.L360:
2488:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 5198              		.loc 1 2488 0
 5199 008c 3568     		ldr	r5, [r6]
 5200 008e AB69     		ldr	r3, [r5, #24]
 5201 0090 13F0200F 		tst	r3, #32
 5202 0094 08D1     		bne	.L362
2488:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 5203              		.loc 1 2488 0 is_stmt 0 discriminator 1
 5204 0096 AB69     		ldr	r3, [r5, #24]
 5205 0098 13F0100F 		tst	r3, #16
 5206 009c 04D1     		bne	.L362
2488:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 5207              		.loc 1 2488 0 discriminator 2
 5208 009e 96F84140 		ldrb	r4, [r6, #65]	@ zero_extendqisi2
 5209 00a2 E4B2     		uxtb	r4, r4
 5210 00a4 A02C     		cmp	r4, #160
 5211 00a6 DFD1     		bne	.L363
 5212              	.L362:
2504:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 5213              		.loc 1 2504 0 is_stmt 1
 5214 00a8 AB69     		ldr	r3, [r5, #24]
 5215 00aa 13F0100F 		tst	r3, #16
 5216 00ae 13D1     		bne	.L364
2507:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 5217              		.loc 1 2507 0
 5218 00b0 CDF800A0 		str	r10, [sp]
 5219 00b4 3B46     		mov	r3, r7
ARM GAS  /tmp/ccyfI9lR.s 			page 192


 5220 00b6 0022     		movs	r2, #0
 5221 00b8 2021     		movs	r1, #32
 5222 00ba 3046     		mov	r0, r6
 5223 00bc FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 5224              	.LVL429:
 5225 00c0 0346     		mov	r3, r0
 5226 00c2 0028     		cmp	r0, #0
 5227 00c4 3ED1     		bne	.L370
2513:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5228              		.loc 1 2513 0
 5229 00c6 3168     		ldr	r1, [r6]
 5230 00c8 2022     		movs	r2, #32
 5231 00ca CA61     		str	r2, [r1, #28]
2516:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5232              		.loc 1 2516 0
 5233 00cc 86F84120 		strb	r2, [r6, #65]
2519:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5234              		.loc 1 2519 0
 5235 00d0 0022     		movs	r2, #0
 5236 00d2 86F84020 		strb	r2, [r6, #64]
2521:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 5237              		.loc 1 2521 0
 5238 00d6 3AE0     		b	.L356
 5239              	.L364:
2526:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 5240              		.loc 1 2526 0
 5241 00d8 CDF800A0 		str	r10, [sp]
 5242 00dc 3B46     		mov	r3, r7
 5243 00de 0022     		movs	r2, #0
 5244 00e0 2021     		movs	r1, #32
 5245 00e2 3046     		mov	r0, r6
 5246 00e4 FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 5247              	.LVL430:
 5248 00e8 70BB     		cbnz	r0, .L371
2532:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5249              		.loc 1 2532 0
 5250 00ea 3368     		ldr	r3, [r6]
 5251 00ec 1022     		movs	r2, #16
 5252 00ee DA61     		str	r2, [r3, #28]
2535:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 5253              		.loc 1 2535 0
 5254 00f0 3368     		ldr	r3, [r6]
 5255 00f2 2022     		movs	r2, #32
 5256 00f4 DA61     		str	r2, [r3, #28]
2539:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 5257              		.loc 1 2539 0
 5258 00f6 039B     		ldr	r3, [sp, #12]
 5259 00f8 5A1C     		adds	r2, r3, #1
 5260 00fa 0392     		str	r2, [sp, #12]
 5261 00fc 4345     		cmp	r3, r8
 5262 00fe 10D1     		bne	.L365
2542:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5263              		.loc 1 2542 0
 5264 0100 3268     		ldr	r2, [r6]
 5265 0102 5368     		ldr	r3, [r2, #4]
 5266 0104 43F48043 		orr	r3, r3, #16384
 5267 0108 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/ccyfI9lR.s 			page 193


2545:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 5268              		.loc 1 2545 0
 5269 010a CDF800A0 		str	r10, [sp]
 5270 010e 3B46     		mov	r3, r7
 5271 0110 0022     		movs	r2, #0
 5272 0112 2021     		movs	r1, #32
 5273 0114 3046     		mov	r0, r6
 5274 0116 FFF7FEFF 		bl	I2C_WaitOnFlagUntilTimeout
 5275              	.LVL431:
 5276 011a B8B9     		cbnz	r0, .L372
2551:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 5277              		.loc 1 2551 0
 5278 011c 3368     		ldr	r3, [r6]
 5279 011e 2022     		movs	r2, #32
 5280 0120 DA61     		str	r2, [r3, #28]
 5281              	.L365:
2554:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5282              		.loc 1 2554 0
 5283 0122 039B     		ldr	r3, [sp, #12]
 5284 0124 9845     		cmp	r8, r3
 5285 0126 8DD8     		bhi	.L366
2556:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5286              		.loc 1 2556 0
 5287 0128 2023     		movs	r3, #32
 5288 012a 86F84130 		strb	r3, [r6, #65]
2559:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5289              		.loc 1 2559 0
 5290 012e 0023     		movs	r3, #0
 5291 0130 86F84030 		strb	r3, [r6, #64]
2561:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5292              		.loc 1 2561 0
 5293 0134 0323     		movs	r3, #3
 5294 0136 0AE0     		b	.L356
 5295              	.LVL432:
 5296              	.L367:
2565:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5297              		.loc 1 2565 0
 5298 0138 0223     		movs	r3, #2
 5299              	.LVL433:
 5300 013a 08E0     		b	.L356
 5301              	.LVL434:
 5302              	.L368:
2471:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5303              		.loc 1 2471 0
 5304 013c 0223     		movs	r3, #2
 5305              	.LVL435:
 5306 013e 06E0     		b	.L356
 5307              	.LVL436:
 5308              	.L369:
2475:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5309              		.loc 1 2475 0
 5310 0140 0223     		movs	r3, #2
 5311              	.LVL437:
 5312 0142 04E0     		b	.L356
 5313              	.LVL438:
 5314              	.L370:
2509:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
ARM GAS  /tmp/ccyfI9lR.s 			page 194


 5315              		.loc 1 2509 0
 5316 0144 0323     		movs	r3, #3
 5317 0146 02E0     		b	.L356
 5318              	.L371:
2528:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 5319              		.loc 1 2528 0
 5320 0148 0323     		movs	r3, #3
 5321 014a 00E0     		b	.L356
 5322              	.L372:
2547:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 5323              		.loc 1 2547 0
 5324 014c 0323     		movs	r3, #3
 5325              	.LVL439:
 5326              	.L356:
2567:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5327              		.loc 1 2567 0
 5328 014e 1846     		mov	r0, r3
 5329 0150 04B0     		add	sp, sp, #16
 5330              	.LCFI69:
 5331              		.cfi_def_cfa_offset 32
 5332              		@ sp needed
 5333 0152 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5334              	.L375:
 5335 0156 00BF     		.align	2
 5336              	.L374:
 5337 0158 00200002 		.word	33562624
 5338              		.cfi_endproc
 5339              	.LFE158:
 5341              		.section	.text.HAL_I2C_Master_Sequential_Transmit_IT,"ax",%progbits
 5342              		.align	2
 5343              		.global	HAL_I2C_Master_Sequential_Transmit_IT
 5344              		.thumb
 5345              		.thumb_func
 5347              	HAL_I2C_Master_Sequential_Transmit_IT:
 5348              	.LFB159:
2582:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
 5349              		.loc 1 2582 0
 5350              		.cfi_startproc
 5351              		@ args = 4, pretend = 0, frame = 0
 5352              		@ frame_needed = 0, uses_anonymous_args = 0
 5353              	.LVL440:
 5354 0000 30B5     		push	{r4, r5, lr}
 5355              	.LCFI70:
 5356              		.cfi_def_cfa_offset 12
 5357              		.cfi_offset 4, -12
 5358              		.cfi_offset 5, -8
 5359              		.cfi_offset 14, -4
 5360 0002 83B0     		sub	sp, sp, #12
 5361              	.LCFI71:
 5362              		.cfi_def_cfa_offset 24
 5363              	.LVL441:
2589:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 5364              		.loc 1 2589 0
 5365 0004 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 5366 0008 E4B2     		uxtb	r4, r4
 5367 000a 202C     		cmp	r4, #32
 5368 000c 35D1     		bne	.L381
ARM GAS  /tmp/ccyfI9lR.s 			page 195


2592:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5369              		.loc 1 2592 0
 5370 000e 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 5371 0012 012C     		cmp	r4, #1
 5372 0014 33D0     		beq	.L382
2592:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5373              		.loc 1 2592 0 is_stmt 0 discriminator 2
 5374 0016 0124     		movs	r4, #1
 5375 0018 80F84040 		strb	r4, [r0, #64]
2594:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MASTER;
 5376              		.loc 1 2594 0 is_stmt 1 discriminator 2
 5377 001c 2124     		movs	r4, #33
 5378 001e 80F84140 		strb	r4, [r0, #65]
2595:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 5379              		.loc 1 2595 0 discriminator 2
 5380 0022 1024     		movs	r4, #16
 5381 0024 80F84240 		strb	r4, [r0, #66]
2596:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5382              		.loc 1 2596 0 discriminator 2
 5383 0028 0024     		movs	r4, #0
 5384 002a 4464     		str	r4, [r0, #68]
2599:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 5385              		.loc 1 2599 0 discriminator 2
 5386 002c 4262     		str	r2, [r0, #36]
2600:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = XferOptions;
 5387              		.loc 1 2600 0 discriminator 2
 5388 002e 4385     		strh	r3, [r0, #42]	@ movhi
2601:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
 5389              		.loc 1 2601 0 discriminator 2
 5390 0030 069B     		ldr	r3, [sp, #24]
 5391              	.LVL442:
 5392 0032 C362     		str	r3, [r0, #44]
 5393              	.LVL443:
2602:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5394              		.loc 1 2602 0 discriminator 2
 5395 0034 134B     		ldr	r3, .L385
 5396 0036 4363     		str	r3, [r0, #52]
2605:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 5397              		.loc 1 2605 0 discriminator 2
 5398 0038 438D     		ldrh	r3, [r0, #42]
 5399 003a 9BB2     		uxth	r3, r3
 5400 003c FF2B     		cmp	r3, #255
 5401 003e 04D9     		bls	.L378
2607:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
 5402              		.loc 1 2607 0
 5403 0040 FF23     		movs	r3, #255
 5404 0042 0385     		strh	r3, [r0, #40]	@ movhi
 5405              	.LVL444:
2608:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5406              		.loc 1 2608 0
 5407 0044 4FF08073 		mov	r3, #16777216
 5408 0048 02E0     		b	.L379
 5409              	.LVL445:
 5410              	.L378:
2612:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = hi2c->XferOptions;
 5411              		.loc 1 2612 0
 5412 004a 438D     		ldrh	r3, [r0, #42]
ARM GAS  /tmp/ccyfI9lR.s 			page 196


 5413 004c 0385     		strh	r3, [r0, #40]	@ movhi
2613:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5414              		.loc 1 2613 0
 5415 004e C36A     		ldr	r3, [r0, #44]
 5416              	.LVL446:
 5417              	.L379:
2618:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 5418              		.loc 1 2618 0
 5419 0050 026B     		ldr	r2, [r0, #48]
 5420              	.LVL447:
 5421 0052 112A     		cmp	r2, #17
 5422 0054 01D0     		beq	.L383
2584:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5423              		.loc 1 2584 0
 5424 0056 0C4D     		ldr	r5, .L385+4
 5425 0058 00E0     		b	.L380
 5426              	.L383:
2620:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5427              		.loc 1 2620 0
 5428 005a 0025     		movs	r5, #0
 5429              	.L380:
 5430 005c 0446     		mov	r4, r0
 5431              	.LVL448:
2624:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5432              		.loc 1 2624 0
 5433 005e 90F82820 		ldrb	r2, [r0, #40]	@ zero_extendqisi2
 5434 0062 0095     		str	r5, [sp]
 5435              	.LVL449:
 5436 0064 FFF7FEFF 		bl	I2C_TransferConfig
 5437              	.LVL450:
2627:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5438              		.loc 1 2627 0
 5439 0068 0025     		movs	r5, #0
 5440              	.LVL451:
 5441 006a 84F84050 		strb	r5, [r4, #64]
2632:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5442              		.loc 1 2632 0
 5443 006e 0121     		movs	r1, #1
 5444 0070 2046     		mov	r0, r4
 5445 0072 FFF7FEFF 		bl	I2C_Enable_IRQ
 5446              	.LVL452:
2634:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5447              		.loc 1 2634 0
 5448 0076 2846     		mov	r0, r5
 5449 0078 02E0     		b	.L377
 5450              	.LVL453:
 5451              	.L381:
2638:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5452              		.loc 1 2638 0
 5453 007a 0220     		movs	r0, #2
 5454              	.LVL454:
 5455 007c 00E0     		b	.L377
 5456              	.LVL455:
 5457              	.L382:
2592:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5458              		.loc 1 2592 0
 5459 007e 0220     		movs	r0, #2
ARM GAS  /tmp/ccyfI9lR.s 			page 197


 5460              	.LVL456:
 5461              	.L377:
2640:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5462              		.loc 1 2640 0
 5463 0080 03B0     		add	sp, sp, #12
 5464              	.LCFI72:
 5465              		.cfi_def_cfa_offset 12
 5466              		@ sp needed
 5467 0082 30BD     		pop	{r4, r5, pc}
 5468              	.LVL457:
 5469              	.L386:
 5470              		.align	2
 5471              	.L385:
 5472 0084 00000000 		.word	I2C_Master_ISR_IT
 5473 0088 00200080 		.word	-2147475456
 5474              		.cfi_endproc
 5475              	.LFE159:
 5477              		.section	.text.HAL_I2C_Master_Sequential_Receive_IT,"ax",%progbits
 5478              		.align	2
 5479              		.global	HAL_I2C_Master_Sequential_Receive_IT
 5480              		.thumb
 5481              		.thumb_func
 5483              	HAL_I2C_Master_Sequential_Receive_IT:
 5484              	.LFB160:
2655:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t xfermode = 0U;
 5485              		.loc 1 2655 0
 5486              		.cfi_startproc
 5487              		@ args = 4, pretend = 0, frame = 0
 5488              		@ frame_needed = 0, uses_anonymous_args = 0
 5489              	.LVL458:
 5490 0000 30B5     		push	{r4, r5, lr}
 5491              	.LCFI73:
 5492              		.cfi_def_cfa_offset 12
 5493              		.cfi_offset 4, -12
 5494              		.cfi_offset 5, -8
 5495              		.cfi_offset 14, -4
 5496 0002 83B0     		sub	sp, sp, #12
 5497              	.LCFI74:
 5498              		.cfi_def_cfa_offset 24
 5499              	.LVL459:
2662:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 5500              		.loc 1 2662 0
 5501 0004 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 5502 0008 E4B2     		uxtb	r4, r4
 5503 000a 202C     		cmp	r4, #32
 5504 000c 35D1     		bne	.L392
2665:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5505              		.loc 1 2665 0
 5506 000e 90F84040 		ldrb	r4, [r0, #64]	@ zero_extendqisi2
 5507 0012 012C     		cmp	r4, #1
 5508 0014 33D0     		beq	.L393
2665:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5509              		.loc 1 2665 0 is_stmt 0 discriminator 2
 5510 0016 0124     		movs	r4, #1
 5511 0018 80F84040 		strb	r4, [r0, #64]
2667:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_MASTER;
 5512              		.loc 1 2667 0 is_stmt 1 discriminator 2
ARM GAS  /tmp/ccyfI9lR.s 			page 198


 5513 001c 2224     		movs	r4, #34
 5514 001e 80F84140 		strb	r4, [r0, #65]
2668:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 5515              		.loc 1 2668 0 discriminator 2
 5516 0022 1024     		movs	r4, #16
 5517 0024 80F84240 		strb	r4, [r0, #66]
2669:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5518              		.loc 1 2669 0 discriminator 2
 5519 0028 0024     		movs	r4, #0
 5520 002a 4464     		str	r4, [r0, #68]
2672:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 5521              		.loc 1 2672 0 discriminator 2
 5522 002c 4262     		str	r2, [r0, #36]
2673:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = XferOptions;
 5523              		.loc 1 2673 0 discriminator 2
 5524 002e 4385     		strh	r3, [r0, #42]	@ movhi
2674:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Master_ISR_IT;
 5525              		.loc 1 2674 0 discriminator 2
 5526 0030 069B     		ldr	r3, [sp, #24]
 5527              	.LVL460:
 5528 0032 C362     		str	r3, [r0, #44]
 5529              	.LVL461:
2675:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5530              		.loc 1 2675 0 discriminator 2
 5531 0034 134B     		ldr	r3, .L396
 5532 0036 4363     		str	r3, [r0, #52]
2678:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 5533              		.loc 1 2678 0 discriminator 2
 5534 0038 438D     		ldrh	r3, [r0, #42]
 5535 003a 9BB2     		uxth	r3, r3
 5536 003c FF2B     		cmp	r3, #255
 5537 003e 04D9     		bls	.L389
2680:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = I2C_RELOAD_MODE;
 5538              		.loc 1 2680 0
 5539 0040 FF23     		movs	r3, #255
 5540 0042 0385     		strh	r3, [r0, #40]	@ movhi
 5541              	.LVL462:
2681:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5542              		.loc 1 2681 0
 5543 0044 4FF08073 		mov	r3, #16777216
 5544 0048 02E0     		b	.L390
 5545              	.LVL463:
 5546              	.L389:
2685:HALLIB/Src/stm32f7xx_hal_i2c.c ****       xfermode = hi2c->XferOptions;
 5547              		.loc 1 2685 0
 5548 004a 438D     		ldrh	r3, [r0, #42]
 5549 004c 0385     		strh	r3, [r0, #40]	@ movhi
2686:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5550              		.loc 1 2686 0
 5551 004e C36A     		ldr	r3, [r0, #44]
 5552              	.LVL464:
 5553              	.L390:
2691:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 5554              		.loc 1 2691 0
 5555 0050 026B     		ldr	r2, [r0, #48]
 5556              	.LVL465:
 5557 0052 122A     		cmp	r2, #18
ARM GAS  /tmp/ccyfI9lR.s 			page 199


 5558 0054 01D0     		beq	.L394
2657:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5559              		.loc 1 2657 0
 5560 0056 0C4D     		ldr	r5, .L396+4
 5561 0058 00E0     		b	.L391
 5562              	.L394:
2693:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5563              		.loc 1 2693 0
 5564 005a 0025     		movs	r5, #0
 5565              	.L391:
 5566 005c 0446     		mov	r4, r0
 5567              	.LVL466:
2697:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5568              		.loc 1 2697 0
 5569 005e 90F82820 		ldrb	r2, [r0, #40]	@ zero_extendqisi2
 5570 0062 0095     		str	r5, [sp]
 5571              	.LVL467:
 5572 0064 FFF7FEFF 		bl	I2C_TransferConfig
 5573              	.LVL468:
2700:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5574              		.loc 1 2700 0
 5575 0068 0025     		movs	r5, #0
 5576              	.LVL469:
 5577 006a 84F84050 		strb	r5, [r4, #64]
2705:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5578              		.loc 1 2705 0
 5579 006e 0221     		movs	r1, #2
 5580 0070 2046     		mov	r0, r4
 5581 0072 FFF7FEFF 		bl	I2C_Enable_IRQ
 5582              	.LVL470:
2707:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5583              		.loc 1 2707 0
 5584 0076 2846     		mov	r0, r5
 5585 0078 02E0     		b	.L388
 5586              	.LVL471:
 5587              	.L392:
2711:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5588              		.loc 1 2711 0
 5589 007a 0220     		movs	r0, #2
 5590              	.LVL472:
 5591 007c 00E0     		b	.L388
 5592              	.LVL473:
 5593              	.L393:
2665:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5594              		.loc 1 2665 0
 5595 007e 0220     		movs	r0, #2
 5596              	.LVL474:
 5597              	.L388:
2713:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5598              		.loc 1 2713 0
 5599 0080 03B0     		add	sp, sp, #12
 5600              	.LCFI75:
 5601              		.cfi_def_cfa_offset 12
 5602              		@ sp needed
 5603 0082 30BD     		pop	{r4, r5, pc}
 5604              	.LVL475:
 5605              	.L397:
ARM GAS  /tmp/ccyfI9lR.s 			page 200


 5606              		.align	2
 5607              	.L396:
 5608 0084 00000000 		.word	I2C_Master_ISR_IT
 5609 0088 00240080 		.word	-2147474432
 5610              		.cfi_endproc
 5611              	.LFE160:
 5613              		.section	.text.HAL_I2C_Slave_Sequential_Transmit_IT,"ax",%progbits
 5614              		.align	2
 5615              		.global	HAL_I2C_Slave_Sequential_Transmit_IT
 5616              		.thumb
 5617              		.thumb_func
 5619              	HAL_I2C_Slave_Sequential_Transmit_IT:
 5620              	.LFB161:
2726:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
 5621              		.loc 1 2726 0
 5622              		.cfi_startproc
 5623              		@ args = 0, pretend = 0, frame = 0
 5624              		@ frame_needed = 0, uses_anonymous_args = 0
 5625              	.LVL476:
 5626 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5627              	.LCFI76:
 5628              		.cfi_def_cfa_offset 24
 5629              		.cfi_offset 3, -24
 5630              		.cfi_offset 4, -20
 5631              		.cfi_offset 5, -16
 5632              		.cfi_offset 6, -12
 5633              		.cfi_offset 7, -8
 5634              		.cfi_offset 14, -4
2730:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 5635              		.loc 1 2730 0
 5636 0002 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 5637 0006 04F02804 		and	r4, r4, #40
 5638 000a 282C     		cmp	r4, #40
 5639 000c 3ED1     		bne	.L402
2732:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 5640              		.loc 1 2732 0
 5641 000e 002A     		cmp	r2, #0
 5642 0010 18BF     		it	ne
 5643 0012 0029     		cmpne	r1, #0
 5644 0014 3CD0     		beq	.L403
 5645 0016 1F46     		mov	r7, r3
 5646 0018 1646     		mov	r6, r2
 5647 001a 0C46     		mov	r4, r1
 5648 001c 0546     		mov	r5, r0
2738:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5649              		.loc 1 2738 0
 5650 001e 0521     		movs	r1, #5
 5651              	.LVL477:
 5652 0020 FFF7FEFF 		bl	I2C_Disable_IRQ
 5653              	.LVL478:
2741:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5654              		.loc 1 2741 0
 5655 0024 95F84030 		ldrb	r3, [r5, #64]	@ zero_extendqisi2
 5656 0028 012B     		cmp	r3, #1
 5657 002a 33D0     		beq	.L404
2741:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5658              		.loc 1 2741 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/ccyfI9lR.s 			page 201


 5659 002c 0123     		movs	r3, #1
 5660 002e 85F84030 		strb	r3, [r5, #64]
2745:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 5661              		.loc 1 2745 0 is_stmt 1 discriminator 2
 5662 0032 95F84130 		ldrb	r3, [r5, #65]	@ zero_extendqisi2
 5663 0036 DBB2     		uxtb	r3, r3
 5664 0038 2A2B     		cmp	r3, #42
 5665 003a 03D1     		bne	.L400
2748:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5666              		.loc 1 2748 0
 5667 003c 0221     		movs	r1, #2
 5668 003e 2846     		mov	r0, r5
 5669 0040 FFF7FEFF 		bl	I2C_Disable_IRQ
 5670              	.LVL479:
 5671              	.L400:
2751:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 5672              		.loc 1 2751 0
 5673 0044 2923     		movs	r3, #41
 5674 0046 85F84130 		strb	r3, [r5, #65]
2752:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 5675              		.loc 1 2752 0
 5676 004a 2023     		movs	r3, #32
 5677 004c 85F84230 		strb	r3, [r5, #66]
2753:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5678              		.loc 1 2753 0
 5679 0050 0023     		movs	r3, #0
 5680 0052 6B64     		str	r3, [r5, #68]
2756:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5681              		.loc 1 2756 0
 5682 0054 2A68     		ldr	r2, [r5]
 5683 0056 5368     		ldr	r3, [r2, #4]
 5684 0058 23F40043 		bic	r3, r3, #32768
 5685 005c 5360     		str	r3, [r2, #4]
2759:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 5686              		.loc 1 2759 0
 5687 005e 6C62     		str	r4, [r5, #36]
2760:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
 5688              		.loc 1 2760 0
 5689 0060 6E85     		strh	r6, [r5, #42]	@ movhi
2761:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = XferOptions;
 5690              		.loc 1 2761 0
 5691 0062 6B8D     		ldrh	r3, [r5, #42]
 5692 0064 2B85     		strh	r3, [r5, #40]	@ movhi
2762:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_IT;
 5693              		.loc 1 2762 0
 5694 0066 EF62     		str	r7, [r5, #44]
2763:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5695              		.loc 1 2763 0
 5696 0068 0B4B     		ldr	r3, .L406
 5697 006a 6B63     		str	r3, [r5, #52]
2765:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 5698              		.loc 1 2765 0
 5699 006c 2B68     		ldr	r3, [r5]
 5700 006e 9A69     		ldr	r2, [r3, #24]
 5701 0070 12F4803F 		tst	r2, #65536
 5702 0074 01D0     		beq	.L401
2769:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
ARM GAS  /tmp/ccyfI9lR.s 			page 202


 5703              		.loc 1 2769 0
 5704 0076 0822     		movs	r2, #8
 5705 0078 DA61     		str	r2, [r3, #28]
 5706              	.L401:
2773:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5707              		.loc 1 2773 0
 5708 007a 0024     		movs	r4, #0
 5709              	.LVL480:
 5710 007c 85F84040 		strb	r4, [r5, #64]
2779:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5711              		.loc 1 2779 0
 5712 0080 0521     		movs	r1, #5
 5713 0082 2846     		mov	r0, r5
 5714 0084 FFF7FEFF 		bl	I2C_Enable_IRQ
 5715              	.LVL481:
2781:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5716              		.loc 1 2781 0
 5717 0088 2046     		mov	r0, r4
 5718 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5719              	.LVL482:
 5720              	.L402:
2785:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5721              		.loc 1 2785 0
 5722 008c 0120     		movs	r0, #1
 5723              	.LVL483:
 5724 008e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5725              	.LVL484:
 5726              	.L403:
2734:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5727              		.loc 1 2734 0
 5728 0090 0120     		movs	r0, #1
 5729              	.LVL485:
 5730 0092 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5731              	.LVL486:
 5732              	.L404:
2741:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5733              		.loc 1 2741 0
 5734 0094 0220     		movs	r0, #2
2787:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5735              		.loc 1 2787 0
 5736 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5737              	.LVL487:
 5738              	.L407:
 5739              		.align	2
 5740              	.L406:
 5741 0098 00000000 		.word	I2C_Slave_ISR_IT
 5742              		.cfi_endproc
 5743              	.LFE161:
 5745              		.section	.text.HAL_I2C_Slave_Sequential_Receive_IT,"ax",%progbits
 5746              		.align	2
 5747              		.global	HAL_I2C_Slave_Sequential_Receive_IT
 5748              		.thumb
 5749              		.thumb_func
 5751              	HAL_I2C_Slave_Sequential_Receive_IT:
 5752              	.LFB162:
2800:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Check the parameters */
 5753              		.loc 1 2800 0
ARM GAS  /tmp/ccyfI9lR.s 			page 203


 5754              		.cfi_startproc
 5755              		@ args = 0, pretend = 0, frame = 0
 5756              		@ frame_needed = 0, uses_anonymous_args = 0
 5757              	.LVL488:
 5758 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5759              	.LCFI77:
 5760              		.cfi_def_cfa_offset 24
 5761              		.cfi_offset 3, -24
 5762              		.cfi_offset 4, -20
 5763              		.cfi_offset 5, -16
 5764              		.cfi_offset 6, -12
 5765              		.cfi_offset 7, -8
 5766              		.cfi_offset 14, -4
2804:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 5767              		.loc 1 2804 0
 5768 0002 90F84140 		ldrb	r4, [r0, #65]	@ zero_extendqisi2
 5769 0006 04F02804 		and	r4, r4, #40
 5770 000a 282C     		cmp	r4, #40
 5771 000c 3ED1     		bne	.L412
2806:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 5772              		.loc 1 2806 0
 5773 000e 002A     		cmp	r2, #0
 5774 0010 18BF     		it	ne
 5775 0012 0029     		cmpne	r1, #0
 5776 0014 3CD0     		beq	.L413
 5777 0016 1F46     		mov	r7, r3
 5778 0018 1646     		mov	r6, r2
 5779 001a 0C46     		mov	r4, r1
 5780 001c 0546     		mov	r5, r0
2812:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5781              		.loc 1 2812 0
 5782 001e 0621     		movs	r1, #6
 5783              	.LVL489:
 5784 0020 FFF7FEFF 		bl	I2C_Disable_IRQ
 5785              	.LVL490:
2815:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5786              		.loc 1 2815 0
 5787 0024 95F84030 		ldrb	r3, [r5, #64]	@ zero_extendqisi2
 5788 0028 012B     		cmp	r3, #1
 5789 002a 33D0     		beq	.L414
2815:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5790              		.loc 1 2815 0 is_stmt 0 discriminator 2
 5791 002c 0123     		movs	r3, #1
 5792 002e 85F84030 		strb	r3, [r5, #64]
2819:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 5793              		.loc 1 2819 0 is_stmt 1 discriminator 2
 5794 0032 95F84130 		ldrb	r3, [r5, #65]	@ zero_extendqisi2
 5795 0036 DBB2     		uxtb	r3, r3
 5796 0038 292B     		cmp	r3, #41
 5797 003a 03D1     		bne	.L410
2822:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5798              		.loc 1 2822 0
 5799 003c 0121     		movs	r1, #1
 5800 003e 2846     		mov	r0, r5
 5801 0040 FFF7FEFF 		bl	I2C_Disable_IRQ
 5802              	.LVL491:
 5803              	.L410:
ARM GAS  /tmp/ccyfI9lR.s 			page 204


2825:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 5804              		.loc 1 2825 0
 5805 0044 2A23     		movs	r3, #42
 5806 0046 85F84130 		strb	r3, [r5, #65]
2826:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 5807              		.loc 1 2826 0
 5808 004a 2023     		movs	r3, #32
 5809 004c 85F84230 		strb	r3, [r5, #66]
2827:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5810              		.loc 1 2827 0
 5811 0050 0023     		movs	r3, #0
 5812 0052 6B64     		str	r3, [r5, #68]
2830:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5813              		.loc 1 2830 0
 5814 0054 2A68     		ldr	r2, [r5]
 5815 0056 5368     		ldr	r3, [r2, #4]
 5816 0058 23F40043 		bic	r3, r3, #32768
 5817 005c 5360     		str	r3, [r2, #4]
2833:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount   = Size;
 5818              		.loc 1 2833 0
 5819 005e 6C62     		str	r4, [r5, #36]
2834:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize    = hi2c->XferCount;
 5820              		.loc 1 2834 0
 5821 0060 6E85     		strh	r6, [r5, #42]	@ movhi
2835:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferOptions = XferOptions;
 5822              		.loc 1 2835 0
 5823 0062 6B8D     		ldrh	r3, [r5, #42]
 5824 0064 2B85     		strh	r3, [r5, #40]	@ movhi
2836:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR     = I2C_Slave_ISR_IT;
 5825              		.loc 1 2836 0
 5826 0066 EF62     		str	r7, [r5, #44]
2837:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5827              		.loc 1 2837 0
 5828 0068 0B4B     		ldr	r3, .L416
 5829 006a 6B63     		str	r3, [r5, #52]
2839:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 5830              		.loc 1 2839 0
 5831 006c 2B68     		ldr	r3, [r5]
 5832 006e 9A69     		ldr	r2, [r3, #24]
 5833 0070 12F4803F 		tst	r2, #65536
 5834 0074 01D1     		bne	.L411
2843:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5835              		.loc 1 2843 0
 5836 0076 0822     		movs	r2, #8
 5837 0078 DA61     		str	r2, [r3, #28]
 5838              	.L411:
2847:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5839              		.loc 1 2847 0
 5840 007a 0024     		movs	r4, #0
 5841              	.LVL492:
 5842 007c 85F84040 		strb	r4, [r5, #64]
2853:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5843              		.loc 1 2853 0
 5844 0080 0621     		movs	r1, #6
 5845 0082 2846     		mov	r0, r5
 5846 0084 FFF7FEFF 		bl	I2C_Enable_IRQ
 5847              	.LVL493:
ARM GAS  /tmp/ccyfI9lR.s 			page 205


2855:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5848              		.loc 1 2855 0
 5849 0088 2046     		mov	r0, r4
 5850 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5851              	.LVL494:
 5852              	.L412:
2859:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5853              		.loc 1 2859 0
 5854 008c 0120     		movs	r0, #1
 5855              	.LVL495:
 5856 008e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5857              	.LVL496:
 5858              	.L413:
2808:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 5859              		.loc 1 2808 0
 5860 0090 0120     		movs	r0, #1
 5861              	.LVL497:
 5862 0092 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5863              	.LVL498:
 5864              	.L414:
2815:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5865              		.loc 1 2815 0
 5866 0094 0220     		movs	r0, #2
2861:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5867              		.loc 1 2861 0
 5868 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5869              	.LVL499:
 5870              	.L417:
 5871              		.align	2
 5872              	.L416:
 5873 0098 00000000 		.word	I2C_Slave_ISR_IT
 5874              		.cfi_endproc
 5875              	.LFE162:
 5877              		.section	.text.HAL_I2C_EnableListen_IT,"ax",%progbits
 5878              		.align	2
 5879              		.global	HAL_I2C_EnableListen_IT
 5880              		.thumb
 5881              		.thumb_func
 5883              	HAL_I2C_EnableListen_IT:
 5884              	.LFB163:
2870:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->State == HAL_I2C_STATE_READY)
 5885              		.loc 1 2870 0
 5886              		.cfi_startproc
 5887              		@ args = 0, pretend = 0, frame = 0
 5888              		@ frame_needed = 0, uses_anonymous_args = 0
 5889              	.LVL500:
 5890 0000 08B5     		push	{r3, lr}
 5891              	.LCFI78:
 5892              		.cfi_def_cfa_offset 8
 5893              		.cfi_offset 3, -8
 5894              		.cfi_offset 14, -4
2871:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 5895              		.loc 1 2871 0
 5896 0002 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 5897 0006 DBB2     		uxtb	r3, r3
 5898 0008 202B     		cmp	r3, #32
 5899 000a 09D1     		bne	.L420
ARM GAS  /tmp/ccyfI9lR.s 			page 206


2873:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR = I2C_Slave_ISR_IT;
 5900              		.loc 1 2873 0
 5901 000c 2823     		movs	r3, #40
 5902 000e 80F84130 		strb	r3, [r0, #65]
2874:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5903              		.loc 1 2874 0
 5904 0012 044B     		ldr	r3, .L422
 5905 0014 4363     		str	r3, [r0, #52]
2877:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5906              		.loc 1 2877 0
 5907 0016 0421     		movs	r1, #4
 5908 0018 FFF7FEFF 		bl	I2C_Enable_IRQ
 5909              	.LVL501:
2879:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5910              		.loc 1 2879 0
 5911 001c 0020     		movs	r0, #0
 5912 001e 08BD     		pop	{r3, pc}
 5913              	.LVL502:
 5914              	.L420:
2883:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5915              		.loc 1 2883 0
 5916 0020 0220     		movs	r0, #2
 5917              	.LVL503:
2885:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5918              		.loc 1 2885 0
 5919 0022 08BD     		pop	{r3, pc}
 5920              	.L423:
 5921              		.align	2
 5922              	.L422:
 5923 0024 00000000 		.word	I2C_Slave_ISR_IT
 5924              		.cfi_endproc
 5925              	.LFE163:
 5927              		.section	.text.HAL_I2C_DisableListen_IT,"ax",%progbits
 5928              		.align	2
 5929              		.global	HAL_I2C_DisableListen_IT
 5930              		.thumb
 5931              		.thumb_func
 5933              	HAL_I2C_DisableListen_IT:
 5934              	.LFB164:
2894:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Declaration of tmp to prevent undefined behavior of volatile usage */
 5935              		.loc 1 2894 0
 5936              		.cfi_startproc
 5937              		@ args = 0, pretend = 0, frame = 0
 5938              		@ frame_needed = 0, uses_anonymous_args = 0
 5939              	.LVL504:
2899:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 5940              		.loc 1 2899 0
 5941 0000 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 5942 0004 DBB2     		uxtb	r3, r3
 5943 0006 282B     		cmp	r3, #40
 5944 0008 14D1     		bne	.L426
2894:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Declaration of tmp to prevent undefined behavior of volatile usage */
 5945              		.loc 1 2894 0
 5946 000a 10B5     		push	{r4, lr}
 5947              	.LCFI79:
 5948              		.cfi_def_cfa_offset 8
 5949              		.cfi_offset 4, -8
ARM GAS  /tmp/ccyfI9lR.s 			page 207


 5950              		.cfi_offset 14, -4
2901:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 5951              		.loc 1 2901 0
 5952 000c 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 5953              	.LVL505:
2902:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
 5954              		.loc 1 2902 0
 5955 0010 90F84220 		ldrb	r2, [r0, #66]	@ zero_extendqisi2
 5956 0014 03F00303 		and	r3, r3, #3
 5957              	.LVL506:
 5958 0018 1343     		orrs	r3, r3, r2
 5959 001a 0363     		str	r3, [r0, #48]
2903:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->Mode = HAL_I2C_MODE_NONE;
 5960              		.loc 1 2903 0
 5961 001c 2023     		movs	r3, #32
 5962 001e 80F84130 		strb	r3, [r0, #65]
2904:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR = NULL;
 5963              		.loc 1 2904 0
 5964 0022 0024     		movs	r4, #0
 5965 0024 80F84240 		strb	r4, [r0, #66]
2905:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5966              		.loc 1 2905 0
 5967 0028 4463     		str	r4, [r0, #52]
2908:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 5968              		.loc 1 2908 0
 5969 002a 0421     		movs	r1, #4
 5970 002c FFF7FEFF 		bl	I2C_Disable_IRQ
 5971              	.LVL507:
2910:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5972              		.loc 1 2910 0
 5973 0030 2046     		mov	r0, r4
 5974 0032 10BD     		pop	{r4, pc}
 5975              	.LVL508:
 5976              	.L426:
 5977              	.LCFI80:
 5978              		.cfi_def_cfa_offset 0
 5979              		.cfi_restore 4
 5980              		.cfi_restore 14
2914:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 5981              		.loc 1 2914 0
 5982 0034 0220     		movs	r0, #2
 5983              	.LVL509:
 5984 0036 7047     		bx	lr
 5985              		.cfi_endproc
 5986              	.LFE164:
 5988              		.section	.text.HAL_I2C_Master_Abort_IT,"ax",%progbits
 5989              		.align	2
 5990              		.global	HAL_I2C_Master_Abort_IT
 5991              		.thumb
 5992              		.thumb_func
 5994              	HAL_I2C_Master_Abort_IT:
 5995              	.LFB165:
2927:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 5996              		.loc 1 2927 0
 5997              		.cfi_startproc
 5998              		@ args = 0, pretend = 0, frame = 0
 5999              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccyfI9lR.s 			page 208


 6000              	.LVL510:
2928:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6001              		.loc 1 2928 0
 6002 0000 90F84230 		ldrb	r3, [r0, #66]	@ zero_extendqisi2
 6003 0004 DBB2     		uxtb	r3, r3
 6004 0006 102B     		cmp	r3, #16
 6005 0008 26D1     		bne	.L431
2931:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6006              		.loc 1 2931 0
 6007 000a 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 6008 000e 012B     		cmp	r3, #1
 6009 0010 24D0     		beq	.L432
2927:HALLIB/Src/stm32f7xx_hal_i2c.c ****   if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 6010              		.loc 1 2927 0 discriminator 2
 6011 0012 70B5     		push	{r4, r5, r6, lr}
 6012              	.LCFI81:
 6013              		.cfi_def_cfa_offset 16
 6014              		.cfi_offset 4, -16
 6015              		.cfi_offset 5, -12
 6016              		.cfi_offset 6, -8
 6017              		.cfi_offset 14, -4
 6018 0014 82B0     		sub	sp, sp, #8
 6019              	.LCFI82:
 6020              		.cfi_def_cfa_offset 24
 6021 0016 0D46     		mov	r5, r1
 6022 0018 0446     		mov	r4, r0
2931:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6023              		.loc 1 2931 0 discriminator 2
 6024 001a 0126     		movs	r6, #1
 6025 001c 80F84060 		strb	r6, [r0, #64]
2934:HALLIB/Src/stm32f7xx_hal_i2c.c ****     I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 6026              		.loc 1 2934 0 discriminator 2
 6027 0020 0221     		movs	r1, #2
 6028              	.LVL511:
 6029 0022 FFF7FEFF 		bl	I2C_Disable_IRQ
 6030              	.LVL512:
2935:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6031              		.loc 1 2935 0 discriminator 2
 6032 0026 3146     		mov	r1, r6
 6033 0028 2046     		mov	r0, r4
 6034 002a FFF7FEFF 		bl	I2C_Disable_IRQ
 6035              	.LVL513:
2938:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6036              		.loc 1 2938 0 discriminator 2
 6037 002e 6023     		movs	r3, #96
 6038 0030 84F84130 		strb	r3, [r4, #65]
2942:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6039              		.loc 1 2942 0 discriminator 2
 6040 0034 0B4B     		ldr	r3, .L435
 6041 0036 0093     		str	r3, [sp]
 6042 0038 4FF00073 		mov	r3, #33554432
 6043 003c 3246     		mov	r2, r6
 6044 003e 2946     		mov	r1, r5
 6045 0040 2046     		mov	r0, r4
 6046 0042 FFF7FEFF 		bl	I2C_TransferConfig
 6047              	.LVL514:
2945:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 209


 6048              		.loc 1 2945 0 discriminator 2
 6049 0046 0025     		movs	r5, #0
 6050 0048 84F84050 		strb	r5, [r4, #64]
2950:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6051              		.loc 1 2950 0 discriminator 2
 6052 004c 1221     		movs	r1, #18
 6053 004e 2046     		mov	r0, r4
 6054 0050 FFF7FEFF 		bl	I2C_Enable_IRQ
 6055              	.LVL515:
2952:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6056              		.loc 1 2952 0 discriminator 2
 6057 0054 2846     		mov	r0, r5
 6058 0056 03E0     		b	.L430
 6059              	.LVL516:
 6060              	.L431:
 6061              	.LCFI83:
 6062              		.cfi_def_cfa_offset 0
 6063              		.cfi_restore 4
 6064              		.cfi_restore 5
 6065              		.cfi_restore 6
 6066              		.cfi_restore 14
2958:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6067              		.loc 1 2958 0
 6068 0058 0120     		movs	r0, #1
 6069              	.LVL517:
 6070 005a 7047     		bx	lr
 6071              	.LVL518:
 6072              	.L432:
2931:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6073              		.loc 1 2931 0
 6074 005c 0220     		movs	r0, #2
 6075              	.LVL519:
 6076 005e 7047     		bx	lr
 6077              	.LVL520:
 6078              	.L430:
 6079              	.LCFI84:
 6080              		.cfi_def_cfa_offset 24
 6081              		.cfi_offset 4, -16
 6082              		.cfi_offset 5, -12
 6083              		.cfi_offset 6, -8
 6084              		.cfi_offset 14, -4
2960:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6085              		.loc 1 2960 0
 6086 0060 02B0     		add	sp, sp, #8
 6087              	.LCFI85:
 6088              		.cfi_def_cfa_offset 16
 6089              		@ sp needed
 6090 0062 70BD     		pop	{r4, r5, r6, pc}
 6091              	.LVL521:
 6092              	.L436:
 6093              		.align	2
 6094              	.L435:
 6095 0064 00400080 		.word	-2147467264
 6096              		.cfi_endproc
 6097              	.LFE165:
 6099              		.section	.text.HAL_I2C_EV_IRQHandler,"ax",%progbits
 6100              		.align	2
ARM GAS  /tmp/ccyfI9lR.s 			page 210


 6101              		.global	HAL_I2C_EV_IRQHandler
 6102              		.thumb
 6103              		.thumb_func
 6105              	HAL_I2C_EV_IRQHandler:
 6106              	.LFB166:
2977:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Get current IT Flags and IT sources value */
 6107              		.loc 1 2977 0
 6108              		.cfi_startproc
 6109              		@ args = 0, pretend = 0, frame = 0
 6110              		@ frame_needed = 0, uses_anonymous_args = 0
 6111              	.LVL522:
 6112 0000 08B5     		push	{r3, lr}
 6113              	.LCFI86:
 6114              		.cfi_def_cfa_offset 8
 6115              		.cfi_offset 3, -8
 6116              		.cfi_offset 14, -4
2979:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 6117              		.loc 1 2979 0
 6118 0002 0368     		ldr	r3, [r0]
 6119 0004 9969     		ldr	r1, [r3, #24]
 6120              	.LVL523:
2980:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6121              		.loc 1 2980 0
 6122 0006 1A68     		ldr	r2, [r3]
 6123              	.LVL524:
2983:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6124              		.loc 1 2983 0
 6125 0008 436B     		ldr	r3, [r0, #52]
 6126 000a 03B1     		cbz	r3, .L437
2985:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6127              		.loc 1 2985 0
 6128 000c 9847     		blx	r3
 6129              	.LVL525:
 6130              	.L437:
 6131 000e 08BD     		pop	{r3, pc}
 6132              		.cfi_endproc
 6133              	.LFE166:
 6135              		.section	.text.HAL_I2C_MasterTxCpltCallback,"ax",%progbits
 6136              		.align	2
 6137              		.weak	HAL_I2C_MasterTxCpltCallback
 6138              		.thumb
 6139              		.thumb_func
 6141              	HAL_I2C_MasterTxCpltCallback:
 6142              	.LFB168:
3041:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 6143              		.loc 1 3041 0
 6144              		.cfi_startproc
 6145              		@ args = 0, pretend = 0, frame = 0
 6146              		@ frame_needed = 0, uses_anonymous_args = 0
 6147              		@ link register save eliminated.
 6148              	.LVL526:
 6149 0000 7047     		bx	lr
 6150              		.cfi_endproc
 6151              	.LFE168:
 6153 0002 00BF     		.section	.text.HAL_I2C_MasterRxCpltCallback,"ax",%progbits
 6154              		.align	2
 6155              		.weak	HAL_I2C_MasterRxCpltCallback
ARM GAS  /tmp/ccyfI9lR.s 			page 211


 6156              		.thumb
 6157              		.thumb_func
 6159              	HAL_I2C_MasterRxCpltCallback:
 6160              	.LFB169:
3057:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 6161              		.loc 1 3057 0
 6162              		.cfi_startproc
 6163              		@ args = 0, pretend = 0, frame = 0
 6164              		@ frame_needed = 0, uses_anonymous_args = 0
 6165              		@ link register save eliminated.
 6166              	.LVL527:
 6167 0000 7047     		bx	lr
 6168              		.cfi_endproc
 6169              	.LFE169:
 6171 0002 00BF     		.section	.text.I2C_ITMasterSequentialCplt,"ax",%progbits
 6172              		.align	2
 6173              		.thumb
 6174              		.thumb_func
 6176              	I2C_ITMasterSequentialCplt:
 6177              	.LFB188:
3860:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset I2C handle mode */
 6178              		.loc 1 3860 0
 6179              		.cfi_startproc
 6180              		@ args = 0, pretend = 0, frame = 0
 6181              		@ frame_needed = 0, uses_anonymous_args = 0
 6182              	.LVL528:
3860:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset I2C handle mode */
 6183              		.loc 1 3860 0
 6184 0000 38B5     		push	{r3, r4, r5, lr}
 6185              	.LCFI87:
 6186              		.cfi_def_cfa_offset 16
 6187              		.cfi_offset 3, -16
 6188              		.cfi_offset 4, -12
 6189              		.cfi_offset 5, -8
 6190              		.cfi_offset 14, -4
 6191 0002 0446     		mov	r4, r0
3862:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6192              		.loc 1 3862 0
 6193 0004 0023     		movs	r3, #0
 6194 0006 80F84230 		strb	r3, [r0, #66]
3866:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6195              		.loc 1 3866 0
 6196 000a 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 6197 000e DBB2     		uxtb	r3, r3
 6198 0010 212B     		cmp	r3, #33
 6199 0012 0FD1     		bne	.L443
3868:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 6200              		.loc 1 3868 0
 6201 0014 2023     		movs	r3, #32
 6202 0016 80F84130 		strb	r3, [r0, #65]
3869:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR       = NULL;
 6203              		.loc 1 3869 0
 6204 001a 1123     		movs	r3, #17
 6205 001c 0363     		str	r3, [r0, #48]
3870:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6206              		.loc 1 3870 0
 6207 001e 0025     		movs	r5, #0
ARM GAS  /tmp/ccyfI9lR.s 			page 212


 6208 0020 4563     		str	r5, [r0, #52]
3873:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6209              		.loc 1 3873 0
 6210 0022 0121     		movs	r1, #1
 6211 0024 FFF7FEFF 		bl	I2C_Disable_IRQ
 6212              	.LVL529:
3876:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6213              		.loc 1 3876 0
 6214 0028 84F84050 		strb	r5, [r4, #64]
3879:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6215              		.loc 1 3879 0
 6216 002c 2046     		mov	r0, r4
 6217 002e FFF7FEFF 		bl	HAL_I2C_MasterTxCpltCallback
 6218              	.LVL530:
 6219 0032 38BD     		pop	{r3, r4, r5, pc}
 6220              	.LVL531:
 6221              	.L443:
3884:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 6222              		.loc 1 3884 0
 6223 0034 2023     		movs	r3, #32
 6224 0036 80F84130 		strb	r3, [r0, #65]
3885:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR       = NULL;
 6225              		.loc 1 3885 0
 6226 003a 1223     		movs	r3, #18
 6227 003c 0363     		str	r3, [r0, #48]
3886:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6228              		.loc 1 3886 0
 6229 003e 0025     		movs	r5, #0
 6230 0040 4563     		str	r5, [r0, #52]
3889:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6231              		.loc 1 3889 0
 6232 0042 0221     		movs	r1, #2
 6233 0044 FFF7FEFF 		bl	I2C_Disable_IRQ
 6234              	.LVL532:
3892:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6235              		.loc 1 3892 0
 6236 0048 84F84050 		strb	r5, [r4, #64]
3895:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6237              		.loc 1 3895 0
 6238 004c 2046     		mov	r0, r4
 6239 004e FFF7FEFF 		bl	HAL_I2C_MasterRxCpltCallback
 6240              	.LVL533:
 6241 0052 38BD     		pop	{r3, r4, r5, pc}
 6242              		.cfi_endproc
 6243              	.LFE188:
 6245              		.section	.text.HAL_I2C_SlaveTxCpltCallback,"ax",%progbits
 6246              		.align	2
 6247              		.weak	HAL_I2C_SlaveTxCpltCallback
 6248              		.thumb
 6249              		.thumb_func
 6251              	HAL_I2C_SlaveTxCpltCallback:
 6252              	.LFB170:
3072:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 6253              		.loc 1 3072 0
 6254              		.cfi_startproc
 6255              		@ args = 0, pretend = 0, frame = 0
 6256              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccyfI9lR.s 			page 213


 6257              		@ link register save eliminated.
 6258              	.LVL534:
 6259 0000 7047     		bx	lr
 6260              		.cfi_endproc
 6261              	.LFE170:
 6263 0002 00BF     		.section	.text.HAL_I2C_SlaveRxCpltCallback,"ax",%progbits
 6264              		.align	2
 6265              		.weak	HAL_I2C_SlaveRxCpltCallback
 6266              		.thumb
 6267              		.thumb_func
 6269              	HAL_I2C_SlaveRxCpltCallback:
 6270              	.LFB171:
3088:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 6271              		.loc 1 3088 0
 6272              		.cfi_startproc
 6273              		@ args = 0, pretend = 0, frame = 0
 6274              		@ frame_needed = 0, uses_anonymous_args = 0
 6275              		@ link register save eliminated.
 6276              	.LVL535:
 6277 0000 7047     		bx	lr
 6278              		.cfi_endproc
 6279              	.LFE171:
 6281 0002 00BF     		.section	.text.I2C_ITSlaveSequentialCplt,"ax",%progbits
 6282              		.align	2
 6283              		.thumb
 6284              		.thumb_func
 6286              	I2C_ITSlaveSequentialCplt:
 6287              	.LFB189:
3905:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset I2C handle mode */
 6288              		.loc 1 3905 0
 6289              		.cfi_startproc
 6290              		@ args = 0, pretend = 0, frame = 0
 6291              		@ frame_needed = 0, uses_anonymous_args = 0
 6292              	.LVL536:
3905:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset I2C handle mode */
 6293              		.loc 1 3905 0
 6294 0000 10B5     		push	{r4, lr}
 6295              	.LCFI88:
 6296              		.cfi_def_cfa_offset 8
 6297              		.cfi_offset 4, -8
 6298              		.cfi_offset 14, -4
 6299 0002 0446     		mov	r4, r0
3907:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6300              		.loc 1 3907 0
 6301 0004 0023     		movs	r3, #0
 6302 0006 80F84230 		strb	r3, [r0, #66]
3909:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6303              		.loc 1 3909 0
 6304 000a 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 6305 000e DBB2     		uxtb	r3, r3
 6306 0010 292B     		cmp	r3, #41
 6307 0012 0ED1     		bne	.L449
3912:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 6308              		.loc 1 3912 0
 6309 0014 2823     		movs	r3, #40
 6310 0016 80F84130 		strb	r3, [r0, #65]
3913:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
ARM GAS  /tmp/ccyfI9lR.s 			page 214


 6311              		.loc 1 3913 0
 6312 001a 2123     		movs	r3, #33
 6313 001c 0363     		str	r3, [r0, #48]
3916:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6314              		.loc 1 3916 0
 6315 001e 0121     		movs	r1, #1
 6316 0020 FFF7FEFF 		bl	I2C_Disable_IRQ
 6317              	.LVL537:
3919:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6318              		.loc 1 3919 0
 6319 0024 0023     		movs	r3, #0
 6320 0026 84F84030 		strb	r3, [r4, #64]
3922:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6321              		.loc 1 3922 0
 6322 002a 2046     		mov	r0, r4
 6323 002c FFF7FEFF 		bl	HAL_I2C_SlaveTxCpltCallback
 6324              	.LVL538:
 6325 0030 10BD     		pop	{r4, pc}
 6326              	.LVL539:
 6327              	.L449:
3925:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6328              		.loc 1 3925 0
 6329 0032 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 6330 0036 DBB2     		uxtb	r3, r3
 6331 0038 2A2B     		cmp	r3, #42
 6332 003a 0DD1     		bne	.L448
3928:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 6333              		.loc 1 3928 0
 6334 003c 2823     		movs	r3, #40
 6335 003e 80F84130 		strb	r3, [r0, #65]
3929:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6336              		.loc 1 3929 0
 6337 0042 2223     		movs	r3, #34
 6338 0044 0363     		str	r3, [r0, #48]
3932:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6339              		.loc 1 3932 0
 6340 0046 0221     		movs	r1, #2
 6341 0048 FFF7FEFF 		bl	I2C_Disable_IRQ
 6342              	.LVL540:
3935:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6343              		.loc 1 3935 0
 6344 004c 0023     		movs	r3, #0
 6345 004e 84F84030 		strb	r3, [r4, #64]
3938:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6346              		.loc 1 3938 0
 6347 0052 2046     		mov	r0, r4
 6348 0054 FFF7FEFF 		bl	HAL_I2C_SlaveRxCpltCallback
 6349              	.LVL541:
 6350              	.L448:
 6351 0058 10BD     		pop	{r4, pc}
 6352              		.cfi_endproc
 6353              	.LFE189:
 6355 005a 00BF     		.section	.text.HAL_I2C_AddrCallback,"ax",%progbits
 6356              		.align	2
 6357              		.weak	HAL_I2C_AddrCallback
 6358              		.thumb
 6359              		.thumb_func
ARM GAS  /tmp/ccyfI9lR.s 			page 215


 6361              	HAL_I2C_AddrCallback:
 6362              	.LFB172:
3106:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 6363              		.loc 1 3106 0
 6364              		.cfi_startproc
 6365              		@ args = 0, pretend = 0, frame = 0
 6366              		@ frame_needed = 0, uses_anonymous_args = 0
 6367              		@ link register save eliminated.
 6368              	.LVL542:
 6369 0000 7047     		bx	lr
 6370              		.cfi_endproc
 6371              	.LFE172:
 6373 0002 00BF     		.section	.text.I2C_ITAddrCplt,"ax",%progbits
 6374              		.align	2
 6375              		.thumb
 6376              		.thumb_func
 6378              	I2C_ITAddrCplt:
 6379              	.LFB187:
3777:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint8_t transferdirection = 0U;
 6380              		.loc 1 3777 0
 6381              		.cfi_startproc
 6382              		@ args = 0, pretend = 0, frame = 0
 6383              		@ frame_needed = 0, uses_anonymous_args = 0
 6384              	.LVL543:
3777:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint8_t transferdirection = 0U;
 6385              		.loc 1 3777 0
 6386 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6387              	.LCFI89:
 6388              		.cfi_def_cfa_offset 24
 6389              		.cfi_offset 3, -24
 6390              		.cfi_offset 4, -20
 6391              		.cfi_offset 5, -16
 6392              		.cfi_offset 6, -12
 6393              		.cfi_offset 7, -8
 6394              		.cfi_offset 14, -4
 6395              	.LVL544:
3787:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6396              		.loc 1 3787 0
 6397 0002 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 6398 0006 03F02803 		and	r3, r3, #40
 6399 000a 282B     		cmp	r3, #40
 6400 000c 42D1     		bne	.L454
 6401 000e 0446     		mov	r4, r0
3789:HALLIB/Src/stm32f7xx_hal_i2c.c ****     slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 6402              		.loc 1 3789 0
 6403 0010 0068     		ldr	r0, [r0]
 6404              	.LVL545:
 6405 0012 8569     		ldr	r5, [r0, #24]
 6406 0014 C5F30045 		ubfx	r5, r5, #16, #1
 6407              	.LVL546:
3790:HALLIB/Src/stm32f7xx_hal_i2c.c ****     ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 6408              		.loc 1 3790 0
 6409 0018 8369     		ldr	r3, [r0, #24]
 6410 001a 1B0C     		lsrs	r3, r3, #16
 6411 001c 03F0FE03 		and	r3, r3, #254
 6412 0020 9EB2     		uxth	r6, r3
 6413              	.LVL547:
ARM GAS  /tmp/ccyfI9lR.s 			page 216


3791:HALLIB/Src/stm32f7xx_hal_i2c.c ****     ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 6414              		.loc 1 3791 0
 6415 0022 8268     		ldr	r2, [r0, #8]
 6416 0024 C2F30902 		ubfx	r2, r2, #0, #10
 6417              	.LVL548:
3792:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6418              		.loc 1 3792 0
 6419 0028 C168     		ldr	r1, [r0, #12]
 6420              	.LVL549:
 6421 002a 01F0FE07 		and	r7, r1, #254
 6422              	.LVL550:
3795:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 6423              		.loc 1 3795 0
 6424 002e E168     		ldr	r1, [r4, #12]
 6425 0030 0229     		cmp	r1, #2
 6426 0032 22D1     		bne	.L455
3797:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 6427              		.loc 1 3797 0
 6428 0034 83EAD213 		eor	r3, r3, r2, lsr #7
 6429 0038 13F0060F 		tst	r3, #6
 6430 003c 10D1     		bne	.L456
 6431              	.LVL551:
3800:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->AddrEventCount == 2U)
 6432              		.loc 1 3800 0
 6433 003e A36C     		ldr	r3, [r4, #72]
 6434 0040 0133     		adds	r3, r3, #1
 6435 0042 A364     		str	r3, [r4, #72]
3801:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 6436              		.loc 1 3801 0
 6437 0044 A36C     		ldr	r3, [r4, #72]
 6438 0046 022B     		cmp	r3, #2
 6439 0048 2AD1     		bne	.L453
3804:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6440              		.loc 1 3804 0
 6441 004a 0023     		movs	r3, #0
 6442 004c A364     		str	r3, [r4, #72]
3807:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6443              		.loc 1 3807 0
 6444 004e 0821     		movs	r1, #8
 6445 0050 C161     		str	r1, [r0, #28]
3810:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6446              		.loc 1 3810 0
 6447 0052 84F84030 		strb	r3, [r4, #64]
3813:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 6448              		.loc 1 3813 0
 6449 0056 2946     		mov	r1, r5
 6450 0058 2046     		mov	r0, r4
 6451 005a FFF7FEFF 		bl	HAL_I2C_AddrCallback
 6452              	.LVL552:
 6453 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6454              	.LVL553:
 6455              	.L456:
3821:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6456              		.loc 1 3821 0
 6457 0060 0421     		movs	r1, #4
 6458 0062 2046     		mov	r0, r4
 6459 0064 FFF7FEFF 		bl	I2C_Disable_IRQ
ARM GAS  /tmp/ccyfI9lR.s 			page 217


 6460              	.LVL554:
3824:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6461              		.loc 1 3824 0
 6462 0068 0023     		movs	r3, #0
 6463 006a 84F84030 		strb	r3, [r4, #64]
3827:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 6464              		.loc 1 3827 0
 6465 006e 3A46     		mov	r2, r7
 6466 0070 2946     		mov	r1, r5
 6467 0072 2046     		mov	r0, r4
 6468 0074 FFF7FEFF 		bl	HAL_I2C_AddrCallback
 6469              	.LVL555:
 6470 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6471              	.LVL556:
 6472              	.L455:
3834:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6473              		.loc 1 3834 0
 6474 007a 0421     		movs	r1, #4
 6475 007c 2046     		mov	r0, r4
 6476 007e FFF7FEFF 		bl	I2C_Disable_IRQ
 6477              	.LVL557:
3837:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6478              		.loc 1 3837 0
 6479 0082 0023     		movs	r3, #0
 6480 0084 84F84030 		strb	r3, [r4, #64]
3840:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 6481              		.loc 1 3840 0
 6482 0088 3246     		mov	r2, r6
 6483 008a 2946     		mov	r1, r5
 6484 008c 2046     		mov	r0, r4
 6485 008e FFF7FEFF 		bl	HAL_I2C_AddrCallback
 6486              	.LVL558:
 6487 0092 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6488              	.LVL559:
 6489              	.L454:
3847:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6490              		.loc 1 3847 0
 6491 0094 0368     		ldr	r3, [r0]
 6492 0096 0822     		movs	r2, #8
 6493 0098 DA61     		str	r2, [r3, #28]
3850:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6494              		.loc 1 3850 0
 6495 009a 0023     		movs	r3, #0
 6496 009c 80F84030 		strb	r3, [r0, #64]
 6497              	.LVL560:
 6498              	.L453:
 6499 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6500              		.cfi_endproc
 6501              	.LFE187:
 6503 00a2 00BF     		.section	.text.HAL_I2C_ListenCpltCallback,"ax",%progbits
 6504              		.align	2
 6505              		.weak	HAL_I2C_ListenCpltCallback
 6506              		.thumb
 6507              		.thumb_func
 6509              	HAL_I2C_ListenCpltCallback:
 6510              	.LFB173:
3124:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/ccyfI9lR.s 			page 218


 6511              		.loc 1 3124 0
 6512              		.cfi_startproc
 6513              		@ args = 0, pretend = 0, frame = 0
 6514              		@ frame_needed = 0, uses_anonymous_args = 0
 6515              		@ link register save eliminated.
 6516              	.LVL561:
 6517 0000 7047     		bx	lr
 6518              		.cfi_endproc
 6519              	.LFE173:
 6521 0002 00BF     		.section	.text.I2C_ITListenCplt,"ax",%progbits
 6522              		.align	2
 6523              		.thumb
 6524              		.thumb_func
 6526              	I2C_ITListenCplt:
 6527              	.LFB192:
4147:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset handle parameters */
 6528              		.loc 1 4147 0
 6529              		.cfi_startproc
 6530              		@ args = 0, pretend = 0, frame = 0
 6531              		@ frame_needed = 0, uses_anonymous_args = 0
 6532              	.LVL562:
4147:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset handle parameters */
 6533              		.loc 1 4147 0
 6534 0000 10B5     		push	{r4, lr}
 6535              	.LCFI90:
 6536              		.cfi_def_cfa_offset 8
 6537              		.cfi_offset 4, -8
 6538              		.cfi_offset 14, -4
 6539 0002 0446     		mov	r4, r0
4149:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->PreviousState = I2C_STATE_NONE;
 6540              		.loc 1 4149 0
 6541 0004 164B     		ldr	r3, .L463
 6542 0006 C362     		str	r3, [r0, #44]
4150:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->State = HAL_I2C_STATE_READY;
 6543              		.loc 1 4150 0
 6544 0008 0023     		movs	r3, #0
 6545 000a 0363     		str	r3, [r0, #48]
4151:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Mode = HAL_I2C_MODE_NONE;
 6546              		.loc 1 4151 0
 6547 000c 2022     		movs	r2, #32
 6548 000e 80F84120 		strb	r2, [r0, #65]
4152:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferISR = NULL;
 6549              		.loc 1 4152 0
 6550 0012 80F84230 		strb	r3, [r0, #66]
4153:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6551              		.loc 1 4153 0
 6552 0016 4363     		str	r3, [r0, #52]
4156:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6553              		.loc 1 4156 0
 6554 0018 11F0040F 		tst	r1, #4
 6555 001c 12D0     		beq	.L461
4159:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6556              		.loc 1 4159 0
 6557 001e 436A     		ldr	r3, [r0, #36]
 6558 0020 5A1C     		adds	r2, r3, #1
 6559 0022 4262     		str	r2, [r0, #36]
 6560 0024 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccyfI9lR.s 			page 219


 6561 0026 526A     		ldr	r2, [r2, #36]
 6562 0028 1A70     		strb	r2, [r3]
4161:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 6563              		.loc 1 4161 0
 6564 002a 038D     		ldrh	r3, [r0, #40]
 6565 002c 53B1     		cbz	r3, .L461
4163:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 6566              		.loc 1 4163 0
 6567 002e 013B     		subs	r3, r3, #1
 6568 0030 0385     		strh	r3, [r0, #40]	@ movhi
4164:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6569              		.loc 1 4164 0
 6570 0032 438D     		ldrh	r3, [r0, #42]
 6571 0034 9BB2     		uxth	r3, r3
 6572 0036 013B     		subs	r3, r3, #1
 6573 0038 9BB2     		uxth	r3, r3
 6574 003a 4385     		strh	r3, [r0, #42]	@ movhi
4167:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 6575              		.loc 1 4167 0
 6576 003c 436C     		ldr	r3, [r0, #68]
 6577 003e 43F00403 		orr	r3, r3, #4
 6578 0042 4364     		str	r3, [r0, #68]
 6579              	.L461:
4172:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6580              		.loc 1 4172 0
 6581 0044 0721     		movs	r1, #7
 6582              	.LVL563:
 6583 0046 2046     		mov	r0, r4
 6584              	.LVL564:
 6585 0048 FFF7FEFF 		bl	I2C_Disable_IRQ
 6586              	.LVL565:
4175:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6587              		.loc 1 4175 0
 6588 004c 2368     		ldr	r3, [r4]
 6589 004e 1022     		movs	r2, #16
 6590 0050 DA61     		str	r2, [r3, #28]
4178:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6591              		.loc 1 4178 0
 6592 0052 0023     		movs	r3, #0
 6593 0054 84F84030 		strb	r3, [r4, #64]
4181:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 6594              		.loc 1 4181 0
 6595 0058 2046     		mov	r0, r4
 6596 005a FFF7FEFF 		bl	HAL_I2C_ListenCpltCallback
 6597              	.LVL566:
 6598 005e 10BD     		pop	{r4, pc}
 6599              	.LVL567:
 6600              	.L464:
 6601              		.align	2
 6602              	.L463:
 6603 0060 0000FFFF 		.word	-65536
 6604              		.cfi_endproc
 6605              	.LFE192:
 6607              		.section	.text.HAL_I2C_MemTxCpltCallback,"ax",%progbits
 6608              		.align	2
 6609              		.weak	HAL_I2C_MemTxCpltCallback
 6610              		.thumb
ARM GAS  /tmp/ccyfI9lR.s 			page 220


 6611              		.thumb_func
 6613              	HAL_I2C_MemTxCpltCallback:
 6614              	.LFB174:
3140:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 6615              		.loc 1 3140 0
 6616              		.cfi_startproc
 6617              		@ args = 0, pretend = 0, frame = 0
 6618              		@ frame_needed = 0, uses_anonymous_args = 0
 6619              		@ link register save eliminated.
 6620              	.LVL568:
 6621 0000 7047     		bx	lr
 6622              		.cfi_endproc
 6623              	.LFE174:
 6625 0002 00BF     		.section	.text.HAL_I2C_MemRxCpltCallback,"ax",%progbits
 6626              		.align	2
 6627              		.weak	HAL_I2C_MemRxCpltCallback
 6628              		.thumb
 6629              		.thumb_func
 6631              	HAL_I2C_MemRxCpltCallback:
 6632              	.LFB175:
3156:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 6633              		.loc 1 3156 0
 6634              		.cfi_startproc
 6635              		@ args = 0, pretend = 0, frame = 0
 6636              		@ frame_needed = 0, uses_anonymous_args = 0
 6637              		@ link register save eliminated.
 6638              	.LVL569:
 6639 0000 7047     		bx	lr
 6640              		.cfi_endproc
 6641              	.LFE175:
 6643 0002 00BF     		.section	.text.HAL_I2C_ErrorCallback,"ax",%progbits
 6644              		.align	2
 6645              		.weak	HAL_I2C_ErrorCallback
 6646              		.thumb
 6647              		.thumb_func
 6649              	HAL_I2C_ErrorCallback:
 6650              	.LFB176:
3172:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 6651              		.loc 1 3172 0
 6652              		.cfi_startproc
 6653              		@ args = 0, pretend = 0, frame = 0
 6654              		@ frame_needed = 0, uses_anonymous_args = 0
 6655              		@ link register save eliminated.
 6656              	.LVL570:
 6657 0000 7047     		bx	lr
 6658              		.cfi_endproc
 6659              	.LFE176:
 6661 0002 00BF     		.section	.text.HAL_I2C_AbortCpltCallback,"ax",%progbits
 6662              		.align	2
 6663              		.weak	HAL_I2C_AbortCpltCallback
 6664              		.thumb
 6665              		.thumb_func
 6667              	HAL_I2C_AbortCpltCallback:
 6668              	.LFB177:
3188:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Prevent unused argument(s) compilation warning */
 6669              		.loc 1 3188 0
 6670              		.cfi_startproc
ARM GAS  /tmp/ccyfI9lR.s 			page 221


 6671              		@ args = 0, pretend = 0, frame = 0
 6672              		@ frame_needed = 0, uses_anonymous_args = 0
 6673              		@ link register save eliminated.
 6674              	.LVL571:
 6675 0000 7047     		bx	lr
 6676              		.cfi_endproc
 6677              	.LFE177:
 6679 0002 00BF     		.section	.text.I2C_ITError,"ax",%progbits
 6680              		.align	2
 6681              		.thumb
 6682              		.thumb_func
 6684              	I2C_ITError:
 6685              	.LFB193:
4191:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset handle parameters */
 6686              		.loc 1 4191 0
 6687              		.cfi_startproc
 6688              		@ args = 0, pretend = 0, frame = 0
 6689              		@ frame_needed = 0, uses_anonymous_args = 0
 6690              	.LVL572:
4191:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Reset handle parameters */
 6691              		.loc 1 4191 0
 6692 0000 10B5     		push	{r4, lr}
 6693              	.LCFI91:
 6694              		.cfi_def_cfa_offset 8
 6695              		.cfi_offset 4, -8
 6696              		.cfi_offset 14, -4
 6697 0002 0446     		mov	r4, r0
4193:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 6698              		.loc 1 4193 0
 6699 0004 0023     		movs	r3, #0
 6700 0006 80F84230 		strb	r3, [r0, #66]
4194:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferCount     = 0U;
 6701              		.loc 1 4194 0
 6702 000a 394A     		ldr	r2, .L479
 6703 000c C262     		str	r2, [r0, #44]
4195:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6704              		.loc 1 4195 0
 6705 000e 4385     		strh	r3, [r0, #42]	@ movhi
4198:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6706              		.loc 1 4198 0
 6707 0010 436C     		ldr	r3, [r0, #68]
 6708 0012 1943     		orrs	r1, r1, r3
 6709              	.LVL573:
 6710 0014 4164     		str	r1, [r0, #68]
4201:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 6711              		.loc 1 4201 0
 6712 0016 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 6713 001a DBB2     		uxtb	r3, r3
 6714 001c 282B     		cmp	r3, #40
 6715 001e 09D0     		beq	.L470
4202:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 6716              		.loc 1 4202 0 discriminator 1
 6717 0020 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 6718 0024 DBB2     		uxtb	r3, r3
4201:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 6719              		.loc 1 4201 0 discriminator 1
 6720 0026 292B     		cmp	r3, #41
ARM GAS  /tmp/ccyfI9lR.s 			page 222


 6721 0028 04D0     		beq	.L470
4203:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6722              		.loc 1 4203 0
 6723 002a 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 6724 002e DBB2     		uxtb	r3, r3
4202:HALLIB/Src/stm32f7xx_hal_i2c.c ****       (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 6725              		.loc 1 4202 0
 6726 0030 2A2B     		cmp	r3, #42
 6727 0032 0BD1     		bne	.L471
 6728              	.L470:
4206:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6729              		.loc 1 4206 0
 6730 0034 0321     		movs	r1, #3
 6731 0036 2046     		mov	r0, r4
 6732              	.LVL574:
 6733 0038 FFF7FEFF 		bl	I2C_Disable_IRQ
 6734              	.LVL575:
4209:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->PreviousState = I2C_STATE_NONE;
 6735              		.loc 1 4209 0
 6736 003c 2823     		movs	r3, #40
 6737 003e 84F84130 		strb	r3, [r4, #65]
4210:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR       = I2C_Slave_ISR_IT;
 6738              		.loc 1 4210 0
 6739 0042 0023     		movs	r3, #0
 6740 0044 2363     		str	r3, [r4, #48]
4211:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6741              		.loc 1 4211 0
 6742 0046 2B4B     		ldr	r3, .L479+4
 6743 0048 6363     		str	r3, [r4, #52]
 6744 004a 0DE0     		b	.L472
 6745              	.LVL576:
 6746              	.L471:
4216:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6747              		.loc 1 4216 0
 6748 004c 0721     		movs	r1, #7
 6749 004e FFF7FEFF 		bl	I2C_Disable_IRQ
 6750              	.LVL577:
4220:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 6751              		.loc 1 4220 0
 6752 0052 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 6753 0056 DBB2     		uxtb	r3, r3
 6754 0058 602B     		cmp	r3, #96
 6755 005a 02D0     		beq	.L473
4223:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 6756              		.loc 1 4223 0
 6757 005c 2023     		movs	r3, #32
 6758 005e 84F84130 		strb	r3, [r4, #65]
 6759              	.L473:
4225:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferISR       = NULL;
 6760              		.loc 1 4225 0
 6761 0062 0023     		movs	r3, #0
 6762 0064 2363     		str	r3, [r4, #48]
4226:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6763              		.loc 1 4226 0
 6764 0066 6363     		str	r3, [r4, #52]
 6765              	.L472:
4230:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
ARM GAS  /tmp/ccyfI9lR.s 			page 223


 6766              		.loc 1 4230 0
 6767 0068 2368     		ldr	r3, [r4]
 6768 006a 1A68     		ldr	r2, [r3]
 6769 006c 12F4804F 		tst	r2, #16384
 6770 0070 11D0     		beq	.L474
4232:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6771              		.loc 1 4232 0
 6772 0072 1A68     		ldr	r2, [r3]
 6773 0074 22F48042 		bic	r2, r2, #16384
 6774 0078 1A60     		str	r2, [r3]
4236:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6775              		.loc 1 4236 0
 6776 007a A36B     		ldr	r3, [r4, #56]
 6777 007c 1E4A     		ldr	r2, .L479+8
 6778 007e 1A65     		str	r2, [r3, #80]
4239:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6779              		.loc 1 4239 0
 6780 0080 0023     		movs	r3, #0
 6781 0082 84F84030 		strb	r3, [r4, #64]
4242:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 6782              		.loc 1 4242 0
 6783 0086 A06B     		ldr	r0, [r4, #56]
 6784 0088 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 6785              	.LVL578:
 6786 008c 70B3     		cbz	r0, .L469
4245:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 6787              		.loc 1 4245 0
 6788 008e A06B     		ldr	r0, [r4, #56]
 6789 0090 036D     		ldr	r3, [r0, #80]
 6790 0092 9847     		blx	r3
 6791              	.LVL579:
 6792 0094 10BD     		pop	{r4, pc}
 6793              	.LVL580:
 6794              	.L474:
4249:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6795              		.loc 1 4249 0
 6796 0096 1A68     		ldr	r2, [r3]
 6797 0098 12F4004F 		tst	r2, #32768
 6798 009c 11D0     		beq	.L476
4251:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6799              		.loc 1 4251 0
 6800 009e 1A68     		ldr	r2, [r3]
 6801 00a0 22F40042 		bic	r2, r2, #32768
 6802 00a4 1A60     		str	r2, [r3]
4255:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6803              		.loc 1 4255 0
 6804 00a6 E36B     		ldr	r3, [r4, #60]
 6805 00a8 134A     		ldr	r2, .L479+8
 6806 00aa 1A65     		str	r2, [r3, #80]
4258:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6807              		.loc 1 4258 0
 6808 00ac 0023     		movs	r3, #0
 6809 00ae 84F84030 		strb	r3, [r4, #64]
4261:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 6810              		.loc 1 4261 0
 6811 00b2 E06B     		ldr	r0, [r4, #60]
 6812 00b4 FFF7FEFF 		bl	HAL_DMA_Abort_IT
ARM GAS  /tmp/ccyfI9lR.s 			page 224


 6813              	.LVL581:
 6814 00b8 C0B1     		cbz	r0, .L469
4264:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 6815              		.loc 1 4264 0
 6816 00ba E06B     		ldr	r0, [r4, #60]
 6817 00bc 036D     		ldr	r3, [r0, #80]
 6818 00be 9847     		blx	r3
 6819              	.LVL582:
 6820 00c0 10BD     		pop	{r4, pc}
 6821              	.LVL583:
 6822              	.L476:
4267:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6823              		.loc 1 4267 0
 6824 00c2 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 6825 00c6 DBB2     		uxtb	r3, r3
 6826 00c8 602B     		cmp	r3, #96
 6827 00ca 09D1     		bne	.L477
4269:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6828              		.loc 1 4269 0
 6829 00cc 2023     		movs	r3, #32
 6830 00ce 84F84130 		strb	r3, [r4, #65]
4272:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6831              		.loc 1 4272 0
 6832 00d2 0023     		movs	r3, #0
 6833 00d4 84F84030 		strb	r3, [r4, #64]
4275:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6834              		.loc 1 4275 0
 6835 00d8 2046     		mov	r0, r4
 6836 00da FFF7FEFF 		bl	HAL_I2C_AbortCpltCallback
 6837              	.LVL584:
 6838 00de 10BD     		pop	{r4, pc}
 6839              	.LVL585:
 6840              	.L477:
4280:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6841              		.loc 1 4280 0
 6842 00e0 0023     		movs	r3, #0
 6843 00e2 84F84030 		strb	r3, [r4, #64]
4283:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6844              		.loc 1 4283 0
 6845 00e6 2046     		mov	r0, r4
 6846 00e8 FFF7FEFF 		bl	HAL_I2C_ErrorCallback
 6847              	.LVL586:
 6848              	.L469:
 6849 00ec 10BD     		pop	{r4, pc}
 6850              	.LVL587:
 6851              	.L480:
 6852 00ee 00BF     		.align	2
 6853              	.L479:
 6854 00f0 0000FFFF 		.word	-65536
 6855 00f4 00000000 		.word	I2C_Slave_ISR_IT
 6856 00f8 00000000 		.word	I2C_DMAAbort
 6857              		.cfi_endproc
 6858              	.LFE193:
 6860              		.section	.text.I2C_ITSlaveCplt,"ax",%progbits
 6861              		.align	2
 6862              		.thumb
 6863              		.thumb_func
ARM GAS  /tmp/ccyfI9lR.s 			page 225


 6865              	I2C_ITSlaveCplt:
 6866              	.LFB191:
4041:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Clear STOP Flag */
 6867              		.loc 1 4041 0
 6868              		.cfi_startproc
 6869              		@ args = 0, pretend = 0, frame = 0
 6870              		@ frame_needed = 0, uses_anonymous_args = 0
 6871              	.LVL588:
 6872 0000 38B5     		push	{r3, r4, r5, lr}
 6873              	.LCFI92:
 6874              		.cfi_def_cfa_offset 16
 6875              		.cfi_offset 3, -16
 6876              		.cfi_offset 4, -12
 6877              		.cfi_offset 5, -8
 6878              		.cfi_offset 14, -4
 6879 0002 0446     		mov	r4, r0
 6880 0004 0D46     		mov	r5, r1
4043:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6881              		.loc 1 4043 0
 6882 0006 0368     		ldr	r3, [r0]
 6883 0008 2022     		movs	r2, #32
 6884 000a DA61     		str	r2, [r3, #28]
4046:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6885              		.loc 1 4046 0
 6886 000c 0368     		ldr	r3, [r0]
 6887 000e 0822     		movs	r2, #8
 6888 0010 DA61     		str	r2, [r3, #28]
4049:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6889              		.loc 1 4049 0
 6890 0012 0721     		movs	r1, #7
 6891              	.LVL589:
 6892 0014 FFF7FEFF 		bl	I2C_Disable_IRQ
 6893              	.LVL590:
4052:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6894              		.loc 1 4052 0
 6895 0018 2268     		ldr	r2, [r4]
 6896 001a 5368     		ldr	r3, [r2, #4]
 6897 001c 43F40043 		orr	r3, r3, #32768
 6898 0020 5360     		str	r3, [r2, #4]
4055:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6899              		.loc 1 4055 0
 6900 0022 2268     		ldr	r2, [r4]
 6901 0024 5368     		ldr	r3, [r2, #4]
 6902 0026 23F0FF73 		bic	r3, r3, #33423360
 6903 002a 23F48B33 		bic	r3, r3, #71168
 6904 002e 23F4FF73 		bic	r3, r3, #510
 6905 0032 23F00103 		bic	r3, r3, #1
 6906 0036 5360     		str	r3, [r2, #4]
4058:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6907              		.loc 1 4058 0
 6908 0038 2046     		mov	r0, r4
 6909 003a FFF7FEFF 		bl	I2C_Flush_TXDR
 6910              	.LVL591:
4061:HALLIB/Src/stm32f7xx_hal_i2c.c ****       ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 6911              		.loc 1 4061 0
 6912 003e 2268     		ldr	r2, [r4]
 6913 0040 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccyfI9lR.s 			page 226


 6914 0042 13F4804F 		tst	r3, #16384
 6915 0046 03D1     		bne	.L482
4062:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6916              		.loc 1 4062 0 discriminator 1
 6917 0048 1368     		ldr	r3, [r2]
4061:HALLIB/Src/stm32f7xx_hal_i2c.c ****       ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 6918              		.loc 1 4061 0 discriminator 1
 6919 004a 13F4004F 		tst	r3, #32768
 6920 004e 0ED0     		beq	.L483
 6921              	.L482:
4064:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6922              		.loc 1 4064 0
 6923 0050 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 6924 0054 DBB2     		uxtb	r3, r3
 6925 0056 212B     		cmp	r3, #33
 6926 0058 04D1     		bne	.L484
4064:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6927              		.loc 1 4064 0 is_stmt 0 discriminator 1
 6928 005a A36B     		ldr	r3, [r4, #56]
 6929 005c 1B68     		ldr	r3, [r3]
 6930 005e 5B68     		ldr	r3, [r3, #4]
 6931 0060 9BB2     		uxth	r3, r3
 6932 0062 03E0     		b	.L485
 6933              	.L484:
4064:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6934              		.loc 1 4064 0 discriminator 2
 6935 0064 E36B     		ldr	r3, [r4, #60]
 6936 0066 1B68     		ldr	r3, [r3]
 6937 0068 5B68     		ldr	r3, [r3, #4]
 6938 006a 9BB2     		uxth	r3, r3
 6939              	.L485:
4064:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6940              		.loc 1 4064 0 discriminator 4
 6941 006c 6385     		strh	r3, [r4, #42]	@ movhi
 6942              	.L483:
4068:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6943              		.loc 1 4068 0 is_stmt 1
 6944 006e 638D     		ldrh	r3, [r4, #42]
 6945 0070 9BB2     		uxth	r3, r3
 6946 0072 1BB1     		cbz	r3, .L486
4071:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 6947              		.loc 1 4071 0
 6948 0074 636C     		ldr	r3, [r4, #68]
 6949 0076 43F00403 		orr	r3, r3, #4
 6950 007a 6364     		str	r3, [r4, #68]
 6951              	.L486:
4075:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6952              		.loc 1 4075 0
 6953 007c 15F0040F 		tst	r5, #4
 6954 0080 11D0     		beq	.L487
4078:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6955              		.loc 1 4078 0
 6956 0082 636A     		ldr	r3, [r4, #36]
 6957 0084 591C     		adds	r1, r3, #1
 6958 0086 6162     		str	r1, [r4, #36]
 6959 0088 526A     		ldr	r2, [r2, #36]
 6960 008a 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccyfI9lR.s 			page 227


4080:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 6961              		.loc 1 4080 0
 6962 008c 238D     		ldrh	r3, [r4, #40]
 6963 008e 53B1     		cbz	r3, .L487
4082:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 6964              		.loc 1 4082 0
 6965 0090 013B     		subs	r3, r3, #1
 6966 0092 2385     		strh	r3, [r4, #40]	@ movhi
4083:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6967              		.loc 1 4083 0
 6968 0094 638D     		ldrh	r3, [r4, #42]
 6969 0096 9BB2     		uxth	r3, r3
 6970 0098 013B     		subs	r3, r3, #1
 6971 009a 9BB2     		uxth	r3, r3
 6972 009c 6385     		strh	r3, [r4, #42]	@ movhi
4086:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 6973              		.loc 1 4086 0
 6974 009e 636C     		ldr	r3, [r4, #68]
 6975 00a0 43F00403 		orr	r3, r3, #4
 6976 00a4 6364     		str	r3, [r4, #68]
 6977              	.L487:
4090:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->Mode = HAL_I2C_MODE_NONE;
 6978              		.loc 1 4090 0
 6979 00a6 0023     		movs	r3, #0
 6980 00a8 2363     		str	r3, [r4, #48]
4091:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferISR = NULL;
 6981              		.loc 1 4091 0
 6982 00aa 84F84230 		strb	r3, [r4, #66]
4092:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6983              		.loc 1 4092 0
 6984 00ae 6363     		str	r3, [r4, #52]
4094:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 6985              		.loc 1 4094 0
 6986 00b0 636C     		ldr	r3, [r4, #68]
 6987 00b2 6BB1     		cbz	r3, .L488
4097:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 6988              		.loc 1 4097 0
 6989 00b4 616C     		ldr	r1, [r4, #68]
 6990 00b6 2046     		mov	r0, r4
 6991 00b8 FFF7FEFF 		bl	I2C_ITError
 6992              	.LVL592:
4100:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 6993              		.loc 1 4100 0
 6994 00bc 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 6995 00c0 DBB2     		uxtb	r3, r3
 6996 00c2 282B     		cmp	r3, #40
 6997 00c4 2CD1     		bne	.L481
4103:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 6998              		.loc 1 4103 0
 6999 00c6 2946     		mov	r1, r5
 7000 00c8 2046     		mov	r0, r4
 7001 00ca FFF7FEFF 		bl	I2C_ITListenCplt
 7002              	.LVL593:
 7003 00ce 38BD     		pop	{r3, r4, r5, pc}
 7004              	.LVL594:
 7005              	.L488:
4106:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
ARM GAS  /tmp/ccyfI9lR.s 			page 228


 7006              		.loc 1 4106 0
 7007 00d0 E36A     		ldr	r3, [r4, #44]
 7008 00d2 13F5803F 		cmn	r3, #65536
 7009 00d6 0BD0     		beq	.L490
4108:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->State = HAL_I2C_STATE_READY;
 7010              		.loc 1 4108 0
 7011 00d8 124B     		ldr	r3, .L493
 7012 00da E362     		str	r3, [r4, #44]
4109:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7013              		.loc 1 4109 0
 7014 00dc 2023     		movs	r3, #32
 7015 00de 84F84130 		strb	r3, [r4, #65]
4112:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7016              		.loc 1 4112 0
 7017 00e2 0023     		movs	r3, #0
 7018 00e4 84F84030 		strb	r3, [r4, #64]
4115:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7019              		.loc 1 4115 0
 7020 00e8 2046     		mov	r0, r4
 7021 00ea FFF7FEFF 		bl	HAL_I2C_ListenCpltCallback
 7022              	.LVL595:
 7023 00ee 38BD     		pop	{r3, r4, r5, pc}
 7024              	.LVL596:
 7025              	.L490:
4118:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7026              		.loc 1 4118 0
 7027 00f0 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 7028 00f4 DBB2     		uxtb	r3, r3
 7029 00f6 222B     		cmp	r3, #34
 7030 00f8 09D1     		bne	.L491
4120:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7031              		.loc 1 4120 0
 7032 00fa 2023     		movs	r3, #32
 7033 00fc 84F84130 		strb	r3, [r4, #65]
4123:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7034              		.loc 1 4123 0
 7035 0100 0023     		movs	r3, #0
 7036 0102 84F84030 		strb	r3, [r4, #64]
4126:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7037              		.loc 1 4126 0
 7038 0106 2046     		mov	r0, r4
 7039 0108 FFF7FEFF 		bl	HAL_I2C_SlaveRxCpltCallback
 7040              	.LVL597:
 7041 010c 38BD     		pop	{r3, r4, r5, pc}
 7042              	.LVL598:
 7043              	.L491:
4130:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7044              		.loc 1 4130 0
 7045 010e 2023     		movs	r3, #32
 7046 0110 84F84130 		strb	r3, [r4, #65]
4133:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7047              		.loc 1 4133 0
 7048 0114 0023     		movs	r3, #0
 7049 0116 84F84030 		strb	r3, [r4, #64]
4136:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7050              		.loc 1 4136 0
 7051 011a 2046     		mov	r0, r4
ARM GAS  /tmp/ccyfI9lR.s 			page 229


 7052 011c FFF7FEFF 		bl	HAL_I2C_SlaveTxCpltCallback
 7053              	.LVL599:
 7054              	.L481:
 7055 0120 38BD     		pop	{r3, r4, r5, pc}
 7056              	.LVL600:
 7057              	.L494:
 7058 0122 00BF     		.align	2
 7059              	.L493:
 7060 0124 0000FFFF 		.word	-65536
 7061              		.cfi_endproc
 7062              	.LFE191:
 7064              		.section	.text.I2C_Slave_ISR_IT,"ax",%progbits
 7065              		.align	2
 7066              		.thumb
 7067              		.thumb_func
 7069              	I2C_Slave_ISR_IT:
 7070              	.LFB182:
3392:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process locked */
 7071              		.loc 1 3392 0
 7072              		.cfi_startproc
 7073              		@ args = 0, pretend = 0, frame = 0
 7074              		@ frame_needed = 0, uses_anonymous_args = 0
 7075              	.LVL601:
3394:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7076              		.loc 1 3394 0
 7077 0000 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 7078 0004 012B     		cmp	r3, #1
 7079 0006 00F09E80 		beq	.L509
3392:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process locked */
 7080              		.loc 1 3392 0 discriminator 2
 7081 000a 70B5     		push	{r4, r5, r6, lr}
 7082              	.LCFI93:
 7083              		.cfi_def_cfa_offset 16
 7084              		.cfi_offset 4, -16
 7085              		.cfi_offset 5, -12
 7086              		.cfi_offset 6, -8
 7087              		.cfi_offset 14, -4
 7088 000c 1646     		mov	r6, r2
 7089 000e 0D46     		mov	r5, r1
 7090 0010 0446     		mov	r4, r0
3394:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7091              		.loc 1 3394 0 discriminator 2
 7092 0012 0123     		movs	r3, #1
 7093 0014 80F84030 		strb	r3, [r0, #64]
3396:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7094              		.loc 1 3396 0 discriminator 2
 7095 0018 11F0100F 		tst	r1, #16
 7096 001c 36D0     		beq	.L497
3396:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7097              		.loc 1 3396 0 is_stmt 0 discriminator 1
 7098 001e 12F0100F 		tst	r2, #16
 7099 0022 33D0     		beq	.L497
3402:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7100              		.loc 1 3402 0 is_stmt 1
 7101 0024 438D     		ldrh	r3, [r0, #42]
 7102 0026 9BB2     		uxth	r3, r3
 7103 0028 43BB     		cbnz	r3, .L498
ARM GAS  /tmp/ccyfI9lR.s 			page 230


3404:HALLIB/Src/stm32f7xx_hal_i2c.c ****           (hi2c->State == HAL_I2C_STATE_LISTEN))
 7104              		.loc 1 3404 0
 7105 002a C36A     		ldr	r3, [r0, #44]
 7106 002c B3F1007F 		cmp	r3, #33554432
 7107 0030 03D0     		beq	.L499
3404:HALLIB/Src/stm32f7xx_hal_i2c.c ****           (hi2c->State == HAL_I2C_STATE_LISTEN))
 7108              		.loc 1 3404 0 is_stmt 0 discriminator 2
 7109 0032 C36A     		ldr	r3, [r0, #44]
 7110 0034 B3F1007F 		cmp	r3, #33554432
 7111 0038 09D1     		bne	.L500
 7112              	.L499:
3405:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 7113              		.loc 1 3405 0 is_stmt 1 discriminator 3
 7114 003a 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 7115 003e DBB2     		uxtb	r3, r3
3404:HALLIB/Src/stm32f7xx_hal_i2c.c ****           (hi2c->State == HAL_I2C_STATE_LISTEN))
 7116              		.loc 1 3404 0 discriminator 3
 7117 0040 282B     		cmp	r3, #40
 7118 0042 04D1     		bne	.L500
3408:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 7119              		.loc 1 3408 0
 7120 0044 2946     		mov	r1, r5
 7121              	.LVL602:
 7122 0046 2046     		mov	r0, r4
 7123              	.LVL603:
 7124 0048 FFF7FEFF 		bl	I2C_ITListenCplt
 7125              	.LVL604:
 7126 004c 6DE0     		b	.L501
 7127              	.LVL605:
 7128              	.L500:
3410:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 7129              		.loc 1 3410 0
 7130 004e E36A     		ldr	r3, [r4, #44]
 7131 0050 13F5803F 		cmn	r3, #65536
 7132 0054 0ED0     		beq	.L502
3410:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 7133              		.loc 1 3410 0 is_stmt 0 discriminator 1
 7134 0056 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 7135 005a DBB2     		uxtb	r3, r3
 7136 005c 292B     		cmp	r3, #41
 7137 005e 09D1     		bne	.L502
3413:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7138              		.loc 1 3413 0 is_stmt 1
 7139 0060 2368     		ldr	r3, [r4]
 7140 0062 1022     		movs	r2, #16
 7141              	.LVL606:
 7142 0064 DA61     		str	r2, [r3, #28]
3416:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7143              		.loc 1 3416 0
 7144 0066 2046     		mov	r0, r4
 7145              	.LVL607:
 7146 0068 FFF7FEFF 		bl	I2C_Flush_TXDR
 7147              	.LVL608:
3420:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 7148              		.loc 1 3420 0
 7149 006c 2046     		mov	r0, r4
 7150 006e FFF7FEFF 		bl	I2C_ITSlaveSequentialCplt
ARM GAS  /tmp/ccyfI9lR.s 			page 231


 7151              	.LVL609:
 7152 0072 5AE0     		b	.L501
 7153              	.LVL610:
 7154              	.L502:
3425:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 7155              		.loc 1 3425 0
 7156 0074 2368     		ldr	r3, [r4]
 7157 0076 1022     		movs	r2, #16
 7158              	.LVL611:
 7159 0078 DA61     		str	r2, [r3, #28]
 7160 007a 56E0     		b	.L501
 7161              	.LVL612:
 7162              	.L498:
3432:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7163              		.loc 1 3432 0
 7164 007c 0368     		ldr	r3, [r0]
 7165 007e 1022     		movs	r2, #16
 7166              	.LVL613:
 7167 0080 DA61     		str	r2, [r3, #28]
3435:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 7168              		.loc 1 3435 0
 7169 0082 436C     		ldr	r3, [r0, #68]
 7170 0084 43F00403 		orr	r3, r3, #4
 7171 0088 4364     		str	r3, [r0, #68]
 7172 008a 4EE0     		b	.L501
 7173              	.LVL614:
 7174              	.L497:
3438:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7175              		.loc 1 3438 0
 7176 008c 15F0040F 		tst	r5, #4
 7177 0090 1FD0     		beq	.L503
3438:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7178              		.loc 1 3438 0 is_stmt 0 discriminator 1
 7179 0092 16F0040F 		tst	r6, #4
 7180 0096 1CD0     		beq	.L503
3440:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7181              		.loc 1 3440 0 is_stmt 1
 7182 0098 638D     		ldrh	r3, [r4, #42]
 7183 009a 9BB2     		uxth	r3, r3
 7184 009c 6BB1     		cbz	r3, .L504
3443:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
 7185              		.loc 1 3443 0
 7186 009e 636A     		ldr	r3, [r4, #36]
 7187 00a0 5A1C     		adds	r2, r3, #1
 7188              	.LVL615:
 7189 00a2 6262     		str	r2, [r4, #36]
 7190 00a4 2268     		ldr	r2, [r4]
 7191 00a6 526A     		ldr	r2, [r2, #36]
 7192 00a8 1A70     		strb	r2, [r3]
3444:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 7193              		.loc 1 3444 0
 7194 00aa 238D     		ldrh	r3, [r4, #40]
 7195 00ac 013B     		subs	r3, r3, #1
 7196 00ae 2385     		strh	r3, [r4, #40]	@ movhi
3445:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 7197              		.loc 1 3445 0
 7198 00b0 638D     		ldrh	r3, [r4, #42]
ARM GAS  /tmp/ccyfI9lR.s 			page 232


 7199 00b2 9BB2     		uxth	r3, r3
 7200 00b4 013B     		subs	r3, r3, #1
 7201 00b6 9BB2     		uxth	r3, r3
 7202 00b8 6385     		strh	r3, [r4, #42]	@ movhi
 7203              	.L504:
3448:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 7204              		.loc 1 3448 0
 7205 00ba 638D     		ldrh	r3, [r4, #42]
 7206 00bc 9BB2     		uxth	r3, r3
 7207 00be 002B     		cmp	r3, #0
 7208 00c0 33D1     		bne	.L501
3449:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7209              		.loc 1 3449 0 discriminator 1
 7210 00c2 E36A     		ldr	r3, [r4, #44]
3448:HALLIB/Src/stm32f7xx_hal_i2c.c ****         (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 7211              		.loc 1 3448 0 discriminator 1
 7212 00c4 13F5803F 		cmn	r3, #65536
 7213 00c8 2FD0     		beq	.L501
3452:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 7214              		.loc 1 3452 0
 7215 00ca 2046     		mov	r0, r4
 7216              	.LVL616:
 7217 00cc FFF7FEFF 		bl	I2C_ITSlaveSequentialCplt
 7218              	.LVL617:
 7219 00d0 2BE0     		b	.L501
 7220              	.LVL618:
 7221              	.L503:
3455:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7222              		.loc 1 3455 0
 7223 00d2 15F0080F 		tst	r5, #8
 7224 00d6 07D0     		beq	.L505
3455:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7225              		.loc 1 3455 0 is_stmt 0 discriminator 1
 7226 00d8 16F0080F 		tst	r6, #8
 7227 00dc 04D0     		beq	.L505
3457:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7228              		.loc 1 3457 0 is_stmt 1
 7229 00de 2946     		mov	r1, r5
 7230              	.LVL619:
 7231 00e0 2046     		mov	r0, r4
 7232              	.LVL620:
 7233 00e2 FFF7FEFF 		bl	I2C_ITAddrCplt
 7234              	.LVL621:
 7235 00e6 20E0     		b	.L501
 7236              	.LVL622:
 7237              	.L505:
3459:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7238              		.loc 1 3459 0
 7239 00e8 15F0020F 		tst	r5, #2
 7240 00ec 1DD0     		beq	.L501
3459:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7241              		.loc 1 3459 0 is_stmt 0 discriminator 1
 7242 00ee 16F0020F 		tst	r6, #2
 7243 00f2 1AD0     		beq	.L501
3465:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7244              		.loc 1 3465 0 is_stmt 1
 7245 00f4 638D     		ldrh	r3, [r4, #42]
ARM GAS  /tmp/ccyfI9lR.s 			page 233


 7246 00f6 9BB2     		uxth	r3, r3
 7247 00f8 73B1     		cbz	r3, .L506
3468:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferCount--;
 7248              		.loc 1 3468 0
 7249 00fa 2268     		ldr	r2, [r4]
 7250              	.LVL623:
 7251 00fc 636A     		ldr	r3, [r4, #36]
 7252 00fe 591C     		adds	r1, r3, #1
 7253              	.LVL624:
 7254 0100 6162     		str	r1, [r4, #36]
 7255 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7256 0104 9362     		str	r3, [r2, #40]
3469:HALLIB/Src/stm32f7xx_hal_i2c.c ****       hi2c->XferSize--;
 7257              		.loc 1 3469 0
 7258 0106 638D     		ldrh	r3, [r4, #42]
 7259 0108 9BB2     		uxth	r3, r3
 7260 010a 013B     		subs	r3, r3, #1
 7261 010c 9BB2     		uxth	r3, r3
 7262 010e 6385     		strh	r3, [r4, #42]	@ movhi
3470:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 7263              		.loc 1 3470 0
 7264 0110 238D     		ldrh	r3, [r4, #40]
 7265 0112 013B     		subs	r3, r3, #1
 7266 0114 2385     		strh	r3, [r4, #40]	@ movhi
 7267 0116 08E0     		b	.L501
 7268              	.LVL625:
 7269              	.L506:
3474:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 7270              		.loc 1 3474 0
 7271 0118 E36A     		ldr	r3, [r4, #44]
 7272 011a B3F1807F 		cmp	r3, #16777216
 7273 011e 01D0     		beq	.L507
3474:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 7274              		.loc 1 3474 0 is_stmt 0 discriminator 1
 7275 0120 E36A     		ldr	r3, [r4, #44]
 7276 0122 13B9     		cbnz	r3, .L501
 7277              	.L507:
3478:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 7278              		.loc 1 3478 0 is_stmt 1
 7279 0124 2046     		mov	r0, r4
 7280              	.LVL626:
 7281 0126 FFF7FEFF 		bl	I2C_ITSlaveSequentialCplt
 7282              	.LVL627:
 7283              	.L501:
3484:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7284              		.loc 1 3484 0
 7285 012a 15F0200F 		tst	r5, #32
 7286 012e 06D0     		beq	.L508
3484:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7287              		.loc 1 3484 0 is_stmt 0 discriminator 1
 7288 0130 16F0200F 		tst	r6, #32
 7289 0134 03D0     		beq	.L508
3487:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7290              		.loc 1 3487 0 is_stmt 1
 7291 0136 2946     		mov	r1, r5
 7292 0138 2046     		mov	r0, r4
 7293 013a FFF7FEFF 		bl	I2C_ITSlaveCplt
ARM GAS  /tmp/ccyfI9lR.s 			page 234


 7294              	.LVL628:
 7295              	.L508:
3491:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7296              		.loc 1 3491 0
 7297 013e 0020     		movs	r0, #0
 7298 0140 84F84000 		strb	r0, [r4, #64]
3493:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 7299              		.loc 1 3493 0
 7300 0144 70BD     		pop	{r4, r5, r6, pc}
 7301              	.LVL629:
 7302              	.L509:
 7303              	.LCFI94:
 7304              		.cfi_def_cfa_offset 0
 7305              		.cfi_restore 4
 7306              		.cfi_restore 5
 7307              		.cfi_restore 6
 7308              		.cfi_restore 14
3394:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7309              		.loc 1 3394 0
 7310 0146 0220     		movs	r0, #2
 7311              	.LVL630:
 7312 0148 7047     		bx	lr
 7313              		.cfi_endproc
 7314              	.LFE182:
 7316 014a 00BF     		.section	.text.I2C_Slave_ISR_DMA,"ax",%progbits
 7317              		.align	2
 7318              		.thumb
 7319              		.thumb_func
 7321              	I2C_Slave_ISR_DMA:
 7322              	.LFB184:
3594:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process locked */
 7323              		.loc 1 3594 0
 7324              		.cfi_startproc
 7325              		@ args = 0, pretend = 0, frame = 0
 7326              		@ frame_needed = 0, uses_anonymous_args = 0
 7327              	.LVL631:
3596:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7328              		.loc 1 3596 0
 7329 0000 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 7330 0004 012B     		cmp	r3, #1
 7331 0006 40D0     		beq	.L520
3594:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Process locked */
 7332              		.loc 1 3594 0 discriminator 2
 7333 0008 10B5     		push	{r4, lr}
 7334              	.LCFI95:
 7335              		.cfi_def_cfa_offset 8
 7336              		.cfi_offset 4, -8
 7337              		.cfi_offset 14, -4
 7338 000a 0446     		mov	r4, r0
3596:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7339              		.loc 1 3596 0 discriminator 2
 7340 000c 0123     		movs	r3, #1
 7341 000e 80F84030 		strb	r3, [r0, #64]
3598:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7342              		.loc 1 3598 0 discriminator 2
 7343 0012 11F0100F 		tst	r1, #16
 7344 0016 21D0     		beq	.L514
ARM GAS  /tmp/ccyfI9lR.s 			page 235


3598:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7345              		.loc 1 3598 0 is_stmt 0 discriminator 1
 7346 0018 12F0100F 		tst	r2, #16
 7347 001c 1ED0     		beq	.L514
3604:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7348              		.loc 1 3604 0 is_stmt 1
 7349 001e 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 7350 0022 DBB2     		uxtb	r3, r3
 7351 0024 212B     		cmp	r3, #33
 7352 0026 06D1     		bne	.L515
3604:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7353              		.loc 1 3604 0 is_stmt 0 discriminator 1
 7354 0028 836B     		ldr	r3, [r0, #56]
 7355 002a 1B68     		ldr	r3, [r3]
 7356 002c 5B68     		ldr	r3, [r3, #4]
 7357 002e B3FA83F3 		clz	r3, r3
 7358 0032 5B09     		lsrs	r3, r3, #5
 7359 0034 05E0     		b	.L516
 7360              	.L515:
3604:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7361              		.loc 1 3604 0 discriminator 2
 7362 0036 C36B     		ldr	r3, [r0, #60]
 7363 0038 1B68     		ldr	r3, [r3]
 7364 003a 5B68     		ldr	r3, [r3, #4]
 7365 003c B3FA83F3 		clz	r3, r3
 7366 0040 5B09     		lsrs	r3, r3, #5
 7367              	.L516:
3604:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7368              		.loc 1 3604 0 discriminator 4
 7369 0042 1BB1     		cbz	r3, .L517
3607:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 7370              		.loc 1 3607 0 is_stmt 1
 7371 0044 2368     		ldr	r3, [r4]
 7372 0046 1022     		movs	r2, #16
 7373              	.LVL632:
 7374 0048 DA61     		str	r2, [r3, #28]
 7375 004a 1AE0     		b	.L518
 7376              	.LVL633:
 7377              	.L517:
3613:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7378              		.loc 1 3613 0
 7379 004c 2368     		ldr	r3, [r4]
 7380 004e 1022     		movs	r2, #16
 7381              	.LVL634:
 7382 0050 DA61     		str	r2, [r3, #28]
3616:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 7383              		.loc 1 3616 0
 7384 0052 636C     		ldr	r3, [r4, #68]
 7385 0054 43F00403 		orr	r3, r3, #4
 7386 0058 6364     		str	r3, [r4, #68]
 7387 005a 12E0     		b	.L518
 7388              	.LVL635:
 7389              	.L514:
3619:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7390              		.loc 1 3619 0
 7391 005c 11F0080F 		tst	r1, #8
 7392 0060 06D0     		beq	.L519
ARM GAS  /tmp/ccyfI9lR.s 			page 236


3619:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7393              		.loc 1 3619 0 is_stmt 0 discriminator 1
 7394 0062 12F0080F 		tst	r2, #8
 7395 0066 03D0     		beq	.L519
3622:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7396              		.loc 1 3622 0 is_stmt 1
 7397 0068 2368     		ldr	r3, [r4]
 7398 006a 0822     		movs	r2, #8
 7399              	.LVL636:
 7400 006c DA61     		str	r2, [r3, #28]
 7401 006e 08E0     		b	.L518
 7402              	.LVL637:
 7403              	.L519:
3624:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7404              		.loc 1 3624 0
 7405 0070 11F0200F 		tst	r1, #32
 7406 0074 05D0     		beq	.L518
3624:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7407              		.loc 1 3624 0 is_stmt 0 discriminator 1
 7408 0076 12F0200F 		tst	r2, #32
 7409 007a 02D0     		beq	.L518
3627:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7410              		.loc 1 3627 0 is_stmt 1
 7411 007c 2046     		mov	r0, r4
 7412              	.LVL638:
 7413 007e FFF7FEFF 		bl	I2C_ITSlaveCplt
 7414              	.LVL639:
 7415              	.L518:
3631:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7416              		.loc 1 3631 0
 7417 0082 0020     		movs	r0, #0
 7418 0084 84F84000 		strb	r0, [r4, #64]
3633:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 7419              		.loc 1 3633 0
 7420 0088 10BD     		pop	{r4, pc}
 7421              	.LVL640:
 7422              	.L520:
 7423              	.LCFI96:
 7424              		.cfi_def_cfa_offset 0
 7425              		.cfi_restore 4
 7426              		.cfi_restore 14
3596:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7427              		.loc 1 3596 0
 7428 008a 0220     		movs	r0, #2
 7429              	.LVL641:
 7430 008c 7047     		bx	lr
 7431              		.cfi_endproc
 7432              	.LFE184:
 7434 008e 00BF     		.section	.text.I2C_ITMasterCplt,"ax",%progbits
 7435              		.align	2
 7436              		.thumb
 7437              		.thumb_func
 7439              	I2C_ITMasterCplt:
 7440              	.LFB190:
3949:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Clear STOP Flag */
 7441              		.loc 1 3949 0
 7442              		.cfi_startproc
ARM GAS  /tmp/ccyfI9lR.s 			page 237


 7443              		@ args = 0, pretend = 0, frame = 0
 7444              		@ frame_needed = 0, uses_anonymous_args = 0
 7445              	.LVL642:
 7446 0000 10B5     		push	{r4, lr}
 7447              	.LCFI97:
 7448              		.cfi_def_cfa_offset 8
 7449              		.cfi_offset 4, -8
 7450              		.cfi_offset 14, -4
 7451 0002 0446     		mov	r4, r0
3951:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7452              		.loc 1 3951 0
 7453 0004 0368     		ldr	r3, [r0]
 7454 0006 2022     		movs	r2, #32
 7455 0008 DA61     		str	r2, [r3, #28]
3954:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7456              		.loc 1 3954 0
 7457 000a 0268     		ldr	r2, [r0]
 7458 000c 5368     		ldr	r3, [r2, #4]
 7459 000e 23F0FF73 		bic	r3, r3, #33423360
 7460 0012 23F48B33 		bic	r3, r3, #71168
 7461 0016 23F4FF73 		bic	r3, r3, #510
 7462 001a 23F00103 		bic	r3, r3, #1
 7463 001e 5360     		str	r3, [r2, #4]
3957:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferISR       = NULL;
 7464              		.loc 1 3957 0
 7465 0020 0023     		movs	r3, #0
 7466 0022 0363     		str	r3, [r0, #48]
3958:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 7467              		.loc 1 3958 0
 7468 0024 4363     		str	r3, [r0, #52]
3959:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7469              		.loc 1 3959 0
 7470 0026 A3F58033 		sub	r3, r3, #65536
 7471 002a C362     		str	r3, [r0, #44]
3961:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7472              		.loc 1 3961 0
 7473 002c 11F0100F 		tst	r1, #16
 7474 0030 06D0     		beq	.L524
3964:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7475              		.loc 1 3964 0
 7476 0032 0368     		ldr	r3, [r0]
 7477 0034 1022     		movs	r2, #16
 7478 0036 DA61     		str	r2, [r3, #28]
3967:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7479              		.loc 1 3967 0
 7480 0038 436C     		ldr	r3, [r0, #68]
 7481 003a 43F00403 		orr	r3, r3, #4
 7482 003e 4364     		str	r3, [r0, #68]
 7483              	.L524:
3971:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7484              		.loc 1 3971 0
 7485 0040 2046     		mov	r0, r4
 7486              	.LVL643:
 7487 0042 FFF7FEFF 		bl	I2C_Flush_TXDR
 7488              	.LVL644:
3974:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7489              		.loc 1 3974 0
ARM GAS  /tmp/ccyfI9lR.s 			page 238


 7490 0046 0321     		movs	r1, #3
 7491 0048 2046     		mov	r0, r4
 7492 004a FFF7FEFF 		bl	I2C_Disable_IRQ
 7493              	.LVL645:
3977:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7494              		.loc 1 3977 0
 7495 004e 636C     		ldr	r3, [r4, #68]
 7496 0050 23B9     		cbnz	r3, .L525
3977:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7497              		.loc 1 3977 0 is_stmt 0 discriminator 1
 7498 0052 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 7499 0056 DBB2     		uxtb	r3, r3
 7500 0058 602B     		cmp	r3, #96
 7501 005a 04D1     		bne	.L526
 7502              	.L525:
3980:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7503              		.loc 1 3980 0 is_stmt 1
 7504 005c 616C     		ldr	r1, [r4, #68]
 7505 005e 2046     		mov	r0, r4
 7506 0060 FFF7FEFF 		bl	I2C_ITError
 7507              	.LVL646:
 7508 0064 10BD     		pop	{r4, pc}
 7509              	.LVL647:
 7510              	.L526:
3983:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7511              		.loc 1 3983 0
 7512 0066 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 7513 006a DBB2     		uxtb	r3, r3
 7514 006c 212B     		cmp	r3, #33
 7515 006e 19D1     		bne	.L528
3985:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7516              		.loc 1 3985 0
 7517 0070 2023     		movs	r3, #32
 7518 0072 84F84130 		strb	r3, [r4, #65]
3987:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7519              		.loc 1 3987 0
 7520 0076 94F84230 		ldrb	r3, [r4, #66]	@ zero_extendqisi2
 7521 007a DBB2     		uxtb	r3, r3
 7522 007c 402B     		cmp	r3, #64
 7523 007e 08D1     		bne	.L529
3989:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7524              		.loc 1 3989 0
 7525 0080 0023     		movs	r3, #0
 7526 0082 84F84230 		strb	r3, [r4, #66]
3992:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7527              		.loc 1 3992 0
 7528 0086 84F84030 		strb	r3, [r4, #64]
3995:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 7529              		.loc 1 3995 0
 7530 008a 2046     		mov	r0, r4
 7531 008c FFF7FEFF 		bl	HAL_I2C_MemTxCpltCallback
 7532              	.LVL648:
 7533 0090 10BD     		pop	{r4, pc}
 7534              	.LVL649:
 7535              	.L529:
3999:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7536              		.loc 1 3999 0
ARM GAS  /tmp/ccyfI9lR.s 			page 239


 7537 0092 0023     		movs	r3, #0
 7538 0094 84F84230 		strb	r3, [r4, #66]
4002:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7539              		.loc 1 4002 0
 7540 0098 84F84030 		strb	r3, [r4, #64]
4005:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 7541              		.loc 1 4005 0
 7542 009c 2046     		mov	r0, r4
 7543 009e FFF7FEFF 		bl	HAL_I2C_MasterTxCpltCallback
 7544              	.LVL650:
 7545 00a2 10BD     		pop	{r4, pc}
 7546              	.LVL651:
 7547              	.L528:
4009:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7548              		.loc 1 4009 0
 7549 00a4 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 7550 00a8 DBB2     		uxtb	r3, r3
 7551 00aa 222B     		cmp	r3, #34
 7552 00ac 18D1     		bne	.L523
4011:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7553              		.loc 1 4011 0
 7554 00ae 2023     		movs	r3, #32
 7555 00b0 84F84130 		strb	r3, [r4, #65]
4013:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7556              		.loc 1 4013 0
 7557 00b4 94F84230 		ldrb	r3, [r4, #66]	@ zero_extendqisi2
 7558 00b8 DBB2     		uxtb	r3, r3
 7559 00ba 402B     		cmp	r3, #64
 7560 00bc 08D1     		bne	.L530
4015:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7561              		.loc 1 4015 0
 7562 00be 0023     		movs	r3, #0
 7563 00c0 84F84230 		strb	r3, [r4, #66]
4018:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7564              		.loc 1 4018 0
 7565 00c4 84F84030 		strb	r3, [r4, #64]
4020:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 7566              		.loc 1 4020 0
 7567 00c8 2046     		mov	r0, r4
 7568 00ca FFF7FEFF 		bl	HAL_I2C_MemRxCpltCallback
 7569              	.LVL652:
 7570 00ce 10BD     		pop	{r4, pc}
 7571              	.LVL653:
 7572              	.L530:
4024:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7573              		.loc 1 4024 0
 7574 00d0 0023     		movs	r3, #0
 7575 00d2 84F84230 		strb	r3, [r4, #66]
4027:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7576              		.loc 1 4027 0
 7577 00d6 84F84030 		strb	r3, [r4, #64]
4029:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 7578              		.loc 1 4029 0
 7579 00da 2046     		mov	r0, r4
 7580 00dc FFF7FEFF 		bl	HAL_I2C_MasterRxCpltCallback
 7581              	.LVL654:
 7582              	.L523:
ARM GAS  /tmp/ccyfI9lR.s 			page 240


 7583 00e0 10BD     		pop	{r4, pc}
 7584              		.cfi_endproc
 7585              	.LFE190:
 7587 00e2 00BF     		.section	.text.I2C_Master_ISR_IT,"ax",%progbits
 7588              		.align	2
 7589              		.thumb
 7590              		.thumb_func
 7592              	I2C_Master_ISR_IT:
 7593              	.LFB181:
3271:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint16_t devaddress = 0U;
 7594              		.loc 1 3271 0
 7595              		.cfi_startproc
 7596              		@ args = 0, pretend = 0, frame = 0
 7597              		@ frame_needed = 0, uses_anonymous_args = 0
 7598              	.LVL655:
3275:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7599              		.loc 1 3275 0
 7600 0000 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 7601 0004 012B     		cmp	r3, #1
 7602 0006 00F0B280 		beq	.L546
3271:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint16_t devaddress = 0U;
 7603              		.loc 1 3271 0 discriminator 2
 7604 000a 70B5     		push	{r4, r5, r6, lr}
 7605              	.LCFI98:
 7606              		.cfi_def_cfa_offset 16
 7607              		.cfi_offset 4, -16
 7608              		.cfi_offset 5, -12
 7609              		.cfi_offset 6, -8
 7610              		.cfi_offset 14, -4
 7611 000c 82B0     		sub	sp, sp, #8
 7612              	.LCFI99:
 7613              		.cfi_def_cfa_offset 24
 7614 000e 1646     		mov	r6, r2
 7615 0010 0D46     		mov	r5, r1
 7616 0012 0446     		mov	r4, r0
3275:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7617              		.loc 1 3275 0 discriminator 2
 7618 0014 0123     		movs	r3, #1
 7619 0016 80F84030 		strb	r3, [r0, #64]
3277:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7620              		.loc 1 3277 0 discriminator 2
 7621 001a 11F0100F 		tst	r1, #16
 7622 001e 0CD0     		beq	.L534
3277:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7623              		.loc 1 3277 0 is_stmt 0 discriminator 1
 7624 0020 12F0100F 		tst	r2, #16
 7625 0024 09D0     		beq	.L534
3280:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7626              		.loc 1 3280 0 is_stmt 1
 7627 0026 0368     		ldr	r3, [r0]
 7628 0028 1022     		movs	r2, #16
 7629              	.LVL656:
 7630 002a DA61     		str	r2, [r3, #28]
3285:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7631              		.loc 1 3285 0
 7632 002c 436C     		ldr	r3, [r0, #68]
 7633 002e 43F00403 		orr	r3, r3, #4
ARM GAS  /tmp/ccyfI9lR.s 			page 241


 7634 0032 4364     		str	r3, [r0, #68]
3288:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7635              		.loc 1 3288 0
 7636 0034 FFF7FEFF 		bl	I2C_Flush_TXDR
 7637              	.LVL657:
 7638 0038 8BE0     		b	.L535
 7639              	.LVL658:
 7640              	.L534:
3290:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7641              		.loc 1 3290 0
 7642 003a 15F0040F 		tst	r5, #4
 7643 003e 11D0     		beq	.L536
3290:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7644              		.loc 1 3290 0 is_stmt 0 discriminator 1
 7645 0040 16F0040F 		tst	r6, #4
 7646 0044 0ED0     		beq	.L536
3293:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize--;
 7647              		.loc 1 3293 0 is_stmt 1
 7648 0046 636A     		ldr	r3, [r4, #36]
 7649 0048 5A1C     		adds	r2, r3, #1
 7650              	.LVL659:
 7651 004a 6262     		str	r2, [r4, #36]
 7652 004c 2268     		ldr	r2, [r4]
 7653 004e 526A     		ldr	r2, [r2, #36]
 7654 0050 1A70     		strb	r2, [r3]
3294:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount--;
 7655              		.loc 1 3294 0
 7656 0052 238D     		ldrh	r3, [r4, #40]
 7657 0054 013B     		subs	r3, r3, #1
 7658 0056 2385     		strh	r3, [r4, #40]	@ movhi
3295:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7659              		.loc 1 3295 0
 7660 0058 638D     		ldrh	r3, [r4, #42]
 7661 005a 9BB2     		uxth	r3, r3
 7662 005c 013B     		subs	r3, r3, #1
 7663 005e 9BB2     		uxth	r3, r3
 7664 0060 6385     		strh	r3, [r4, #42]	@ movhi
 7665 0062 76E0     		b	.L535
 7666              	.LVL660:
 7667              	.L536:
3297:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7668              		.loc 1 3297 0
 7669 0064 15F0020F 		tst	r5, #2
 7670 0068 11D0     		beq	.L537
3297:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7671              		.loc 1 3297 0 is_stmt 0 discriminator 1
 7672 006a 16F0020F 		tst	r6, #2
 7673 006e 0ED0     		beq	.L537
3300:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferSize--;
 7674              		.loc 1 3300 0 is_stmt 1
 7675 0070 2268     		ldr	r2, [r4]
 7676              	.LVL661:
 7677 0072 636A     		ldr	r3, [r4, #36]
 7678 0074 591C     		adds	r1, r3, #1
 7679              	.LVL662:
 7680 0076 6162     		str	r1, [r4, #36]
 7681 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccyfI9lR.s 			page 242


 7682 007a 9362     		str	r3, [r2, #40]
3301:HALLIB/Src/stm32f7xx_hal_i2c.c ****     hi2c->XferCount--;
 7683              		.loc 1 3301 0
 7684 007c 238D     		ldrh	r3, [r4, #40]
 7685 007e 013B     		subs	r3, r3, #1
 7686 0080 2385     		strh	r3, [r4, #40]	@ movhi
3302:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7687              		.loc 1 3302 0
 7688 0082 638D     		ldrh	r3, [r4, #42]
 7689 0084 9BB2     		uxth	r3, r3
 7690 0086 013B     		subs	r3, r3, #1
 7691 0088 9BB2     		uxth	r3, r3
 7692 008a 6385     		strh	r3, [r4, #42]	@ movhi
 7693 008c 61E0     		b	.L535
 7694              	.LVL663:
 7695              	.L537:
3304:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7696              		.loc 1 3304 0
 7697 008e 15F0800F 		tst	r5, #128
 7698 0092 3FD0     		beq	.L538
3304:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7699              		.loc 1 3304 0 is_stmt 0 discriminator 1
 7700 0094 16F0400F 		tst	r6, #64
 7701 0098 3CD0     		beq	.L538
3306:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7702              		.loc 1 3306 0 is_stmt 1
 7703 009a 238D     		ldrh	r3, [r4, #40]
 7704 009c 63BB     		cbnz	r3, .L539
3306:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7705              		.loc 1 3306 0 is_stmt 0 discriminator 1
 7706 009e 638D     		ldrh	r3, [r4, #42]
 7707 00a0 9BB2     		uxth	r3, r3
 7708 00a2 4BB3     		cbz	r3, .L539
3308:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7709              		.loc 1 3308 0 is_stmt 1
 7710 00a4 2368     		ldr	r3, [r4]
 7711 00a6 5968     		ldr	r1, [r3, #4]
 7712              	.LVL664:
 7713 00a8 C1F30901 		ubfx	r1, r1, #0, #10
 7714              	.LVL665:
3310:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 7715              		.loc 1 3310 0
 7716 00ac 638D     		ldrh	r3, [r4, #42]
 7717 00ae 9BB2     		uxth	r3, r3
 7718 00b0 FF2B     		cmp	r3, #255
 7719 00b2 09D9     		bls	.L540
3312:HALLIB/Src/stm32f7xx_hal_i2c.c ****         I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 7720              		.loc 1 3312 0
 7721 00b4 FF22     		movs	r2, #255
 7722              	.LVL666:
 7723 00b6 2285     		strh	r2, [r4, #40]	@ movhi
3313:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 7724              		.loc 1 3313 0
 7725 00b8 0023     		movs	r3, #0
 7726 00ba 0093     		str	r3, [sp]
 7727 00bc 4FF08073 		mov	r3, #16777216
 7728 00c0 2046     		mov	r0, r4
ARM GAS  /tmp/ccyfI9lR.s 			page 243


 7729              	.LVL667:
 7730 00c2 FFF7FEFF 		bl	I2C_TransferConfig
 7731              	.LVL668:
 7732 00c6 44E0     		b	.L535
 7733              	.LVL669:
 7734              	.L540:
3317:HALLIB/Src/stm32f7xx_hal_i2c.c ****         if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 7735              		.loc 1 3317 0
 7736 00c8 628D     		ldrh	r2, [r4, #42]
 7737              	.LVL670:
 7738 00ca 92B2     		uxth	r2, r2
 7739 00cc 2285     		strh	r2, [r4, #40]	@ movhi
3318:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 7740              		.loc 1 3318 0
 7741 00ce E36A     		ldr	r3, [r4, #44]
 7742 00d0 13F5803F 		cmn	r3, #65536
 7743 00d4 07D0     		beq	.L541
3320:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 7744              		.loc 1 3320 0
 7745 00d6 E36A     		ldr	r3, [r4, #44]
 7746 00d8 0020     		movs	r0, #0
 7747              	.LVL671:
 7748 00da 0090     		str	r0, [sp]
 7749 00dc D2B2     		uxtb	r2, r2
 7750 00de 2046     		mov	r0, r4
 7751 00e0 FFF7FEFF 		bl	I2C_TransferConfig
 7752              	.LVL672:
 7753 00e4 35E0     		b	.L535
 7754              	.LVL673:
 7755              	.L541:
3324:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 7756              		.loc 1 3324 0
 7757 00e6 0023     		movs	r3, #0
 7758 00e8 0093     		str	r3, [sp]
 7759 00ea 4FF00073 		mov	r3, #33554432
 7760 00ee D2B2     		uxtb	r2, r2
 7761 00f0 2046     		mov	r0, r4
 7762              	.LVL674:
 7763 00f2 FFF7FEFF 		bl	I2C_TransferConfig
 7764              	.LVL675:
 7765 00f6 2CE0     		b	.L535
 7766              	.LVL676:
 7767              	.L539:
3331:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 7768              		.loc 1 3331 0
 7769 00f8 2368     		ldr	r3, [r4]
 7770 00fa 5B68     		ldr	r3, [r3, #4]
 7771 00fc 13F0007F 		tst	r3, #33554432
 7772 0100 03D1     		bne	.L542
3334:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 7773              		.loc 1 3334 0
 7774 0102 2046     		mov	r0, r4
 7775              	.LVL677:
 7776 0104 FFF7FEFF 		bl	I2C_ITMasterSequentialCplt
 7777              	.LVL678:
 7778 0108 23E0     		b	.L535
 7779              	.LVL679:
ARM GAS  /tmp/ccyfI9lR.s 			page 244


 7780              	.L542:
3340:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 7781              		.loc 1 3340 0
 7782 010a 4021     		movs	r1, #64
 7783              	.LVL680:
 7784 010c 2046     		mov	r0, r4
 7785              	.LVL681:
 7786 010e FFF7FEFF 		bl	I2C_ITError
 7787              	.LVL682:
 7788 0112 1EE0     		b	.L535
 7789              	.LVL683:
 7790              	.L538:
3344:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7791              		.loc 1 3344 0
 7792 0114 15F0400F 		tst	r5, #64
 7793 0118 1BD0     		beq	.L535
3344:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7794              		.loc 1 3344 0 is_stmt 0 discriminator 1
 7795 011a 16F0400F 		tst	r6, #64
 7796 011e 18D0     		beq	.L535
3346:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7797              		.loc 1 3346 0 is_stmt 1
 7798 0120 638D     		ldrh	r3, [r4, #42]
 7799 0122 9BB2     		uxth	r3, r3
 7800 0124 8BB9     		cbnz	r3, .L543
3348:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 7801              		.loc 1 3348 0
 7802 0126 2368     		ldr	r3, [r4]
 7803 0128 5A68     		ldr	r2, [r3, #4]
 7804              	.LVL684:
 7805 012a 12F0007F 		tst	r2, #33554432
 7806 012e 10D1     		bne	.L535
3351:HALLIB/Src/stm32f7xx_hal_i2c.c ****         {
 7807              		.loc 1 3351 0
 7808 0130 E26A     		ldr	r2, [r4, #44]
 7809 0132 12F5803F 		cmn	r2, #65536
 7810 0136 04D1     		bne	.L544
3354:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 7811              		.loc 1 3354 0
 7812 0138 5A68     		ldr	r2, [r3, #4]
 7813 013a 42F48042 		orr	r2, r2, #16384
 7814 013e 5A60     		str	r2, [r3, #4]
 7815 0140 07E0     		b	.L535
 7816              	.L544:
3359:HALLIB/Src/stm32f7xx_hal_i2c.c ****         }
 7817              		.loc 1 3359 0
 7818 0142 2046     		mov	r0, r4
 7819              	.LVL685:
 7820 0144 FFF7FEFF 		bl	I2C_ITMasterSequentialCplt
 7821              	.LVL686:
 7822 0148 03E0     		b	.L535
 7823              	.LVL687:
 7824              	.L543:
3367:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 7825              		.loc 1 3367 0
 7826 014a 4021     		movs	r1, #64
 7827              	.LVL688:
ARM GAS  /tmp/ccyfI9lR.s 			page 245


 7828 014c 2046     		mov	r0, r4
 7829              	.LVL689:
 7830 014e FFF7FEFF 		bl	I2C_ITError
 7831              	.LVL690:
 7832              	.L535:
3371:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7833              		.loc 1 3371 0
 7834 0152 15F0200F 		tst	r5, #32
 7835 0156 06D0     		beq	.L545
3371:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7836              		.loc 1 3371 0 is_stmt 0 discriminator 1
 7837 0158 16F0200F 		tst	r6, #32
 7838 015c 03D0     		beq	.L545
3374:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7839              		.loc 1 3374 0 is_stmt 1
 7840 015e 2946     		mov	r1, r5
 7841 0160 2046     		mov	r0, r4
 7842 0162 FFF7FEFF 		bl	I2C_ITMasterCplt
 7843              	.LVL691:
 7844              	.L545:
3378:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7845              		.loc 1 3378 0
 7846 0166 0020     		movs	r0, #0
 7847 0168 84F84000 		strb	r0, [r4, #64]
3380:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 7848              		.loc 1 3380 0
 7849 016c 01E0     		b	.L533
 7850              	.LVL692:
 7851              	.L546:
 7852              	.LCFI100:
 7853              		.cfi_def_cfa_offset 0
 7854              		.cfi_restore 4
 7855              		.cfi_restore 5
 7856              		.cfi_restore 6
 7857              		.cfi_restore 14
3275:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7858              		.loc 1 3275 0
 7859 016e 0220     		movs	r0, #2
 7860              	.LVL693:
 7861 0170 7047     		bx	lr
 7862              	.LVL694:
 7863              	.L533:
 7864              	.LCFI101:
 7865              		.cfi_def_cfa_offset 24
 7866              		.cfi_offset 4, -16
 7867              		.cfi_offset 5, -12
 7868              		.cfi_offset 6, -8
 7869              		.cfi_offset 14, -4
3381:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7870              		.loc 1 3381 0
 7871 0172 02B0     		add	sp, sp, #8
 7872              	.LCFI102:
 7873              		.cfi_def_cfa_offset 16
 7874              		@ sp needed
 7875 0174 70BD     		pop	{r4, r5, r6, pc}
 7876              		.cfi_endproc
 7877              	.LFE181:
ARM GAS  /tmp/ccyfI9lR.s 			page 246


 7879 0176 00BF     		.section	.text.I2C_Master_ISR_DMA,"ax",%progbits
 7880              		.align	2
 7881              		.thumb
 7882              		.thumb_func
 7884              	I2C_Master_ISR_DMA:
 7885              	.LFB183:
3505:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint16_t devaddress = 0U;
 7886              		.loc 1 3505 0
 7887              		.cfi_startproc
 7888              		@ args = 0, pretend = 0, frame = 0
 7889              		@ frame_needed = 0, uses_anonymous_args = 0
 7890              	.LVL695:
3510:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7891              		.loc 1 3510 0
 7892 0000 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 7893 0004 012B     		cmp	r3, #1
 7894 0006 69D0     		beq	.L558
3505:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint16_t devaddress = 0U;
 7895              		.loc 1 3505 0 discriminator 2
 7896 0008 10B5     		push	{r4, lr}
 7897              	.LCFI103:
 7898              		.cfi_def_cfa_offset 8
 7899              		.cfi_offset 4, -8
 7900              		.cfi_offset 14, -4
 7901 000a 82B0     		sub	sp, sp, #8
 7902              	.LCFI104:
 7903              		.cfi_def_cfa_offset 16
 7904 000c 0446     		mov	r4, r0
3510:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7905              		.loc 1 3510 0 discriminator 2
 7906 000e 0123     		movs	r3, #1
 7907 0010 80F84030 		strb	r3, [r0, #64]
3512:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7908              		.loc 1 3512 0 discriminator 2
 7909 0014 11F0100F 		tst	r1, #16
 7910 0018 10D0     		beq	.L551
3512:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7911              		.loc 1 3512 0 is_stmt 0 discriminator 1
 7912 001a 12F0100F 		tst	r2, #16
 7913 001e 0DD0     		beq	.L551
3515:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7914              		.loc 1 3515 0 is_stmt 1
 7915 0020 0368     		ldr	r3, [r0]
 7916 0022 1022     		movs	r2, #16
 7917              	.LVL696:
 7918 0024 DA61     		str	r2, [r3, #28]
3518:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7919              		.loc 1 3518 0
 7920 0026 436C     		ldr	r3, [r0, #68]
 7921 0028 43F00403 		orr	r3, r3, #4
 7922 002c 4364     		str	r3, [r0, #68]
3523:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7923              		.loc 1 3523 0
 7924 002e 1221     		movs	r1, #18
 7925              	.LVL697:
 7926 0030 FFF7FEFF 		bl	I2C_Enable_IRQ
 7927              	.LVL698:
ARM GAS  /tmp/ccyfI9lR.s 			page 247


3526:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 7928              		.loc 1 3526 0
 7929 0034 2046     		mov	r0, r4
 7930 0036 FFF7FEFF 		bl	I2C_Flush_TXDR
 7931              	.LVL699:
 7932 003a 4BE0     		b	.L552
 7933              	.LVL700:
 7934              	.L551:
3528:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7935              		.loc 1 3528 0
 7936 003c 11F0800F 		tst	r1, #128
 7937 0040 3FD0     		beq	.L553
3528:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 7938              		.loc 1 3528 0 is_stmt 0 discriminator 1
 7939 0042 12F0400F 		tst	r2, #64
 7940 0046 3CD0     		beq	.L553
3531:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7941              		.loc 1 3531 0 is_stmt 1
 7942 0048 2268     		ldr	r2, [r4]
 7943              	.LVL701:
 7944 004a 1368     		ldr	r3, [r2]
 7945 004c 23F04003 		bic	r3, r3, #64
 7946 0050 1360     		str	r3, [r2]
3533:HALLIB/Src/stm32f7xx_hal_i2c.c ****     {
 7947              		.loc 1 3533 0
 7948 0052 638D     		ldrh	r3, [r4, #42]
 7949 0054 9BB2     		uxth	r3, r3
 7950 0056 002B     		cmp	r3, #0
 7951 0058 2ED0     		beq	.L554
3536:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7952              		.loc 1 3536 0
 7953 005a 2368     		ldr	r3, [r4]
 7954 005c 5968     		ldr	r1, [r3, #4]
 7955              	.LVL702:
 7956 005e C1F30901 		ubfx	r1, r1, #0, #10
 7957              	.LVL703:
3539:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 7958              		.loc 1 3539 0
 7959 0062 638D     		ldrh	r3, [r4, #42]
 7960 0064 9BB2     		uxth	r3, r3
 7961 0066 FF2B     		cmp	r3, #255
 7962 0068 04D9     		bls	.L555
3541:HALLIB/Src/stm32f7xx_hal_i2c.c ****         xfermode = I2C_RELOAD_MODE;
 7963              		.loc 1 3541 0
 7964 006a FF23     		movs	r3, #255
 7965 006c 2385     		strh	r3, [r4, #40]	@ movhi
 7966              	.LVL704:
3542:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 7967              		.loc 1 3542 0
 7968 006e 4FF08073 		mov	r3, #16777216
 7969 0072 03E0     		b	.L556
 7970              	.LVL705:
 7971              	.L555:
3546:HALLIB/Src/stm32f7xx_hal_i2c.c ****         xfermode = I2C_AUTOEND_MODE;
 7972              		.loc 1 3546 0
 7973 0074 638D     		ldrh	r3, [r4, #42]
 7974 0076 2385     		strh	r3, [r4, #40]	@ movhi
ARM GAS  /tmp/ccyfI9lR.s 			page 248


 7975              	.LVL706:
3547:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 7976              		.loc 1 3547 0
 7977 0078 4FF00073 		mov	r3, #33554432
 7978              	.LVL707:
 7979              	.L556:
3551:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7980              		.loc 1 3551 0
 7981 007c 94F82820 		ldrb	r2, [r4, #40]	@ zero_extendqisi2
 7982 0080 0020     		movs	r0, #0
 7983              	.LVL708:
 7984 0082 0090     		str	r0, [sp]
 7985 0084 2046     		mov	r0, r4
 7986 0086 FFF7FEFF 		bl	I2C_TransferConfig
 7987              	.LVL709:
3554:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 7988              		.loc 1 3554 0
 7989 008a 638D     		ldrh	r3, [r4, #42]
 7990 008c 9BB2     		uxth	r3, r3
 7991 008e 228D     		ldrh	r2, [r4, #40]
 7992 0090 9B1A     		subs	r3, r3, r2
 7993 0092 9BB2     		uxth	r3, r3
 7994 0094 6385     		strh	r3, [r4, #42]	@ movhi
3557:HALLIB/Src/stm32f7xx_hal_i2c.c ****       {
 7995              		.loc 1 3557 0
 7996 0096 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 7997 009a DBB2     		uxtb	r3, r3
 7998 009c 222B     		cmp	r3, #34
 7999 009e 05D1     		bne	.L557
3559:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 8000              		.loc 1 3559 0
 8001 00a0 2268     		ldr	r2, [r4]
 8002 00a2 1368     		ldr	r3, [r2]
 8003 00a4 43F40043 		orr	r3, r3, #32768
 8004 00a8 1360     		str	r3, [r2]
 8005 00aa 13E0     		b	.L552
 8006              	.L557:
3563:HALLIB/Src/stm32f7xx_hal_i2c.c ****       }
 8007              		.loc 1 3563 0
 8008 00ac 2268     		ldr	r2, [r4]
 8009 00ae 1368     		ldr	r3, [r2]
 8010 00b0 43F48043 		orr	r3, r3, #16384
 8011 00b4 1360     		str	r3, [r2]
 8012 00b6 0DE0     		b	.L552
 8013              	.LVL710:
 8014              	.L554:
3570:HALLIB/Src/stm32f7xx_hal_i2c.c ****     }
 8015              		.loc 1 3570 0
 8016 00b8 4021     		movs	r1, #64
 8017              	.LVL711:
 8018 00ba 2046     		mov	r0, r4
 8019              	.LVL712:
 8020 00bc FFF7FEFF 		bl	I2C_ITError
 8021              	.LVL713:
 8022 00c0 08E0     		b	.L552
 8023              	.LVL714:
 8024              	.L553:
ARM GAS  /tmp/ccyfI9lR.s 			page 249


3573:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 8025              		.loc 1 3573 0
 8026 00c2 11F0200F 		tst	r1, #32
 8027 00c6 05D0     		beq	.L552
3573:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 8028              		.loc 1 3573 0 is_stmt 0 discriminator 1
 8029 00c8 12F0200F 		tst	r2, #32
 8030 00cc 02D0     		beq	.L552
3576:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 8031              		.loc 1 3576 0 is_stmt 1
 8032 00ce 2046     		mov	r0, r4
 8033              	.LVL715:
 8034 00d0 FFF7FEFF 		bl	I2C_ITMasterCplt
 8035              	.LVL716:
 8036              	.L552:
3580:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8037              		.loc 1 3580 0
 8038 00d4 0020     		movs	r0, #0
 8039 00d6 84F84000 		strb	r0, [r4, #64]
3582:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 8040              		.loc 1 3582 0
 8041 00da 01E0     		b	.L550
 8042              	.LVL717:
 8043              	.L558:
 8044              	.LCFI105:
 8045              		.cfi_def_cfa_offset 0
 8046              		.cfi_restore 4
 8047              		.cfi_restore 14
3510:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8048              		.loc 1 3510 0
 8049 00dc 0220     		movs	r0, #2
 8050              	.LVL718:
 8051 00de 7047     		bx	lr
 8052              	.LVL719:
 8053              	.L550:
 8054              	.LCFI106:
 8055              		.cfi_def_cfa_offset 16
 8056              		.cfi_offset 4, -8
 8057              		.cfi_offset 14, -4
3583:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8058              		.loc 1 3583 0
 8059 00e0 02B0     		add	sp, sp, #8
 8060              	.LCFI107:
 8061              		.cfi_def_cfa_offset 8
 8062              		@ sp needed
 8063 00e2 10BD     		pop	{r4, pc}
 8064              		.cfi_endproc
 8065              	.LFE183:
 8067              		.section	.text.I2C_DMAError,"ax",%progbits
 8068              		.align	2
 8069              		.thumb
 8070              		.thumb_func
 8072              	I2C_DMAError:
 8073              	.LFB199:
4428:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8074              		.loc 1 4428 0
 8075              		.cfi_startproc
ARM GAS  /tmp/ccyfI9lR.s 			page 250


 8076              		@ args = 0, pretend = 0, frame = 0
 8077              		@ frame_needed = 0, uses_anonymous_args = 0
 8078              	.LVL720:
 8079 0000 08B5     		push	{r3, lr}
 8080              	.LCFI108:
 8081              		.cfi_def_cfa_offset 8
 8082              		.cfi_offset 3, -8
 8083              		.cfi_offset 14, -4
4429:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8084              		.loc 1 4429 0
 8085 0002 806B     		ldr	r0, [r0, #56]
 8086              	.LVL721:
4432:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8087              		.loc 1 4432 0
 8088 0004 0268     		ldr	r2, [r0]
 8089 0006 5368     		ldr	r3, [r2, #4]
 8090 0008 43F40043 		orr	r3, r3, #32768
 8091 000c 5360     		str	r3, [r2, #4]
4435:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 8092              		.loc 1 4435 0
 8093 000e 1021     		movs	r1, #16
 8094 0010 FFF7FEFF 		bl	I2C_ITError
 8095              	.LVL722:
 8096 0014 08BD     		pop	{r3, pc}
 8097              		.cfi_endproc
 8098              	.LFE199:
 8100 0016 00BF     		.section	.text.HAL_I2C_ER_IRQHandler,"ax",%progbits
 8101              		.align	2
 8102              		.global	HAL_I2C_ER_IRQHandler
 8103              		.thumb
 8104              		.thumb_func
 8106              	HAL_I2C_ER_IRQHandler:
 8107              	.LFB167:
2996:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8108              		.loc 1 2996 0
 8109              		.cfi_startproc
 8110              		@ args = 0, pretend = 0, frame = 0
 8111              		@ frame_needed = 0, uses_anonymous_args = 0
 8112              	.LVL723:
 8113 0000 10B5     		push	{r4, lr}
 8114              	.LCFI109:
 8115              		.cfi_def_cfa_offset 8
 8116              		.cfi_offset 4, -8
 8117              		.cfi_offset 14, -4
2997:HALLIB/Src/stm32f7xx_hal_i2c.c ****   uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8118              		.loc 1 2997 0
 8119 0002 0268     		ldr	r2, [r0]
 8120 0004 9369     		ldr	r3, [r2, #24]
 8121              	.LVL724:
2998:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8122              		.loc 1 2998 0
 8123 0006 1168     		ldr	r1, [r2]
 8124              	.LVL725:
3001:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 8125              		.loc 1 3001 0
 8126 0008 13F4807F 		tst	r3, #256
 8127 000c 09D0     		beq	.L564
ARM GAS  /tmp/ccyfI9lR.s 			page 251


3001:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 8128              		.loc 1 3001 0 is_stmt 0 discriminator 1
 8129 000e 11F0800F 		tst	r1, #128
 8130 0012 06D0     		beq	.L564
3003:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8131              		.loc 1 3003 0 is_stmt 1
 8132 0014 446C     		ldr	r4, [r0, #68]
 8133 0016 44F00104 		orr	r4, r4, #1
 8134 001a 4464     		str	r4, [r0, #68]
3006:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 8135              		.loc 1 3006 0
 8136 001c 4FF48074 		mov	r4, #256
 8137 0020 D461     		str	r4, [r2, #28]
 8138              	.L564:
3010:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 8139              		.loc 1 3010 0
 8140 0022 13F4806F 		tst	r3, #1024
 8141 0026 0AD0     		beq	.L565
3010:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 8142              		.loc 1 3010 0 is_stmt 0 discriminator 1
 8143 0028 11F0800F 		tst	r1, #128
 8144 002c 07D0     		beq	.L565
3012:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8145              		.loc 1 3012 0 is_stmt 1
 8146 002e 426C     		ldr	r2, [r0, #68]
 8147 0030 42F00802 		orr	r2, r2, #8
 8148 0034 4264     		str	r2, [r0, #68]
3015:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 8149              		.loc 1 3015 0
 8150 0036 0268     		ldr	r2, [r0]
 8151 0038 4FF48064 		mov	r4, #1024
 8152 003c D461     		str	r4, [r2, #28]
 8153              	.L565:
3019:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 8154              		.loc 1 3019 0
 8155 003e 13F4007F 		tst	r3, #512
 8156 0042 0AD0     		beq	.L566
3019:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 8157              		.loc 1 3019 0 is_stmt 0 discriminator 1
 8158 0044 11F0800F 		tst	r1, #128
 8159 0048 07D0     		beq	.L566
3021:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8160              		.loc 1 3021 0 is_stmt 1
 8161 004a 436C     		ldr	r3, [r0, #68]
 8162              	.LVL726:
 8163 004c 43F00203 		orr	r3, r3, #2
 8164 0050 4364     		str	r3, [r0, #68]
3024:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 8165              		.loc 1 3024 0
 8166 0052 0368     		ldr	r3, [r0]
 8167 0054 4FF40072 		mov	r2, #512
 8168 0058 DA61     		str	r2, [r3, #28]
 8169              	.L566:
3028:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 8170              		.loc 1 3028 0
 8171 005a 436C     		ldr	r3, [r0, #68]
 8172 005c 13F00B0F 		tst	r3, #11
ARM GAS  /tmp/ccyfI9lR.s 			page 252


 8173 0060 02D0     		beq	.L563
3030:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 8174              		.loc 1 3030 0
 8175 0062 416C     		ldr	r1, [r0, #68]
 8176              	.LVL727:
 8177 0064 FFF7FEFF 		bl	I2C_ITError
 8178              	.LVL728:
 8179              	.L563:
 8180 0068 10BD     		pop	{r4, pc}
 8181              		.cfi_endproc
 8182              	.LFE167:
 8184 006a 00BF     		.section	.text.I2C_DMAAbort,"ax",%progbits
 8185              		.align	2
 8186              		.thumb
 8187              		.thumb_func
 8189              	I2C_DMAAbort:
 8190              	.LFB200:
4445:HALLIB/Src/stm32f7xx_hal_i2c.c ****   I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8191              		.loc 1 4445 0
 8192              		.cfi_startproc
 8193              		@ args = 0, pretend = 0, frame = 0
 8194              		@ frame_needed = 0, uses_anonymous_args = 0
 8195              	.LVL729:
 8196 0000 08B5     		push	{r3, lr}
 8197              	.LCFI110:
 8198              		.cfi_def_cfa_offset 8
 8199              		.cfi_offset 3, -8
 8200              		.cfi_offset 14, -4
4446:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8201              		.loc 1 4446 0
 8202 0002 806B     		ldr	r0, [r0, #56]
 8203              	.LVL730:
4449:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8204              		.loc 1 4449 0
 8205 0004 0268     		ldr	r2, [r0]
 8206 0006 5368     		ldr	r3, [r2, #4]
 8207 0008 43F40043 		orr	r3, r3, #32768
 8208 000c 5360     		str	r3, [r2, #4]
4452:HALLIB/Src/stm32f7xx_hal_i2c.c ****   hi2c->hdmarx->XferAbortCallback = NULL;
 8209              		.loc 1 4452 0
 8210 000e 826B     		ldr	r2, [r0, #56]
 8211 0010 0023     		movs	r3, #0
 8212 0012 1365     		str	r3, [r2, #80]
4453:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8213              		.loc 1 4453 0
 8214 0014 C26B     		ldr	r2, [r0, #60]
 8215 0016 1365     		str	r3, [r2, #80]
4456:HALLIB/Src/stm32f7xx_hal_i2c.c ****   {
 8216              		.loc 1 4456 0
 8217 0018 90F84130 		ldrb	r3, [r0, #65]	@ zero_extendqisi2
 8218 001c DBB2     		uxtb	r3, r3
 8219 001e 602B     		cmp	r3, #96
 8220 0020 05D1     		bne	.L570
4458:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8221              		.loc 1 4458 0
 8222 0022 2023     		movs	r3, #32
 8223 0024 80F84130 		strb	r3, [r0, #65]
ARM GAS  /tmp/ccyfI9lR.s 			page 253


4461:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 8224              		.loc 1 4461 0
 8225 0028 FFF7FEFF 		bl	HAL_I2C_AbortCpltCallback
 8226              	.LVL731:
 8227 002c 08BD     		pop	{r3, pc}
 8228              	.LVL732:
 8229              	.L570:
4466:HALLIB/Src/stm32f7xx_hal_i2c.c ****   }
 8230              		.loc 1 4466 0
 8231 002e FFF7FEFF 		bl	HAL_I2C_ErrorCallback
 8232              	.LVL733:
 8233 0032 08BD     		pop	{r3, pc}
 8234              		.cfi_endproc
 8235              	.LFE200:
 8237              		.section	.text.HAL_I2C_GetState,"ax",%progbits
 8238              		.align	2
 8239              		.global	HAL_I2C_GetState
 8240              		.thumb
 8241              		.thumb_func
 8243              	HAL_I2C_GetState:
 8244              	.LFB178:
3223:HALLIB/Src/stm32f7xx_hal_i2c.c ****   /* Return I2C handle state */
 8245              		.loc 1 3223 0
 8246              		.cfi_startproc
 8247              		@ args = 0, pretend = 0, frame = 0
 8248              		@ frame_needed = 0, uses_anonymous_args = 0
 8249              		@ link register save eliminated.
 8250              	.LVL734:
3225:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 8251              		.loc 1 3225 0
 8252 0000 90F84100 		ldrb	r0, [r0, #65]	@ zero_extendqisi2
 8253              	.LVL735:
3226:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8254              		.loc 1 3226 0
 8255 0004 7047     		bx	lr
 8256              		.cfi_endproc
 8257              	.LFE178:
 8259 0006 00BF     		.section	.text.HAL_I2C_GetMode,"ax",%progbits
 8260              		.align	2
 8261              		.global	HAL_I2C_GetMode
 8262              		.thumb
 8263              		.thumb_func
 8265              	HAL_I2C_GetMode:
 8266              	.LFB179:
3235:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return hi2c->Mode;
 8267              		.loc 1 3235 0
 8268              		.cfi_startproc
 8269              		@ args = 0, pretend = 0, frame = 0
 8270              		@ frame_needed = 0, uses_anonymous_args = 0
 8271              		@ link register save eliminated.
 8272              	.LVL736:
3236:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 8273              		.loc 1 3236 0
 8274 0000 90F84200 		ldrb	r0, [r0, #66]	@ zero_extendqisi2
 8275              	.LVL737:
3237:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8276              		.loc 1 3237 0
ARM GAS  /tmp/ccyfI9lR.s 			page 254


 8277 0004 7047     		bx	lr
 8278              		.cfi_endproc
 8279              	.LFE179:
 8281 0006 00BF     		.section	.text.HAL_I2C_GetError,"ax",%progbits
 8282              		.align	2
 8283              		.global	HAL_I2C_GetError
 8284              		.thumb
 8285              		.thumb_func
 8287              	HAL_I2C_GetError:
 8288              	.LFB180:
3246:HALLIB/Src/stm32f7xx_hal_i2c.c ****   return hi2c->ErrorCode;
 8289              		.loc 1 3246 0
 8290              		.cfi_startproc
 8291              		@ args = 0, pretend = 0, frame = 0
 8292              		@ frame_needed = 0, uses_anonymous_args = 0
 8293              		@ link register save eliminated.
 8294              	.LVL738:
3247:HALLIB/Src/stm32f7xx_hal_i2c.c **** }
 8295              		.loc 1 3247 0
 8296 0000 406C     		ldr	r0, [r0, #68]
 8297              	.LVL739:
3248:HALLIB/Src/stm32f7xx_hal_i2c.c **** 
 8298              		.loc 1 3248 0
 8299 0002 7047     		bx	lr
 8300              		.cfi_endproc
 8301              	.LFE180:
 8303              		.text
 8304              	.Letext0:
 8305              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 8306              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 8307              		.file 4 "Inc/stm32f767xx.h"
 8308              		.file 5 "Inc/stm32f7xx.h"
 8309              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 8310              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 8311              		.file 8 "HALLIB/Inc/stm32f7xx_hal_i2c.h"
 8312              		.file 9 "HALLIB/Inc/stm32f7xx_hal.h"
 8313              		.file 10 "CORE/core_cm7.h"
ARM GAS  /tmp/ccyfI9lR.s 			page 255


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_i2c.c
     /tmp/ccyfI9lR.s:21     .text.I2C_Flush_TXDR:00000000 $t
     /tmp/ccyfI9lR.s:25     .text.I2C_Flush_TXDR:00000000 I2C_Flush_TXDR
     /tmp/ccyfI9lR.s:58     .text.I2C_DMASlaveTransmitCplt:00000000 $t
     /tmp/ccyfI9lR.s:62     .text.I2C_DMASlaveTransmitCplt:00000000 I2C_DMASlaveTransmitCplt
     /tmp/ccyfI9lR.s:75     .text.I2C_DMASlaveReceiveCplt:00000000 $t
     /tmp/ccyfI9lR.s:79     .text.I2C_DMASlaveReceiveCplt:00000000 I2C_DMASlaveReceiveCplt
     /tmp/ccyfI9lR.s:92     .text.I2C_TransferConfig:00000000 $t
     /tmp/ccyfI9lR.s:96     .text.I2C_TransferConfig:00000000 I2C_TransferConfig
     /tmp/ccyfI9lR.s:145    .text.I2C_Enable_IRQ:00000000 $t
     /tmp/ccyfI9lR.s:149    .text.I2C_Enable_IRQ:00000000 I2C_Enable_IRQ
     /tmp/ccyfI9lR.s:246    .text.I2C_Enable_IRQ:00000074 $d
     /tmp/ccyfI9lR.s:7884   .text.I2C_Master_ISR_DMA:00000000 I2C_Master_ISR_DMA
     /tmp/ccyfI9lR.s:7321   .text.I2C_Slave_ISR_DMA:00000000 I2C_Slave_ISR_DMA
     /tmp/ccyfI9lR.s:252    .text.I2C_Disable_IRQ:00000000 $t
     /tmp/ccyfI9lR.s:256    .text.I2C_Disable_IRQ:00000000 I2C_Disable_IRQ
     /tmp/ccyfI9lR.s:364    .text.I2C_IsAcknowledgeFailed:00000000 $t
     /tmp/ccyfI9lR.s:368    .text.I2C_IsAcknowledgeFailed:00000000 I2C_IsAcknowledgeFailed
     /tmp/ccyfI9lR.s:464    .text.I2C_WaitOnTXISFlagUntilTimeout:00000000 $t
     /tmp/ccyfI9lR.s:468    .text.I2C_WaitOnTXISFlagUntilTimeout:00000000 I2C_WaitOnTXISFlagUntilTimeout
     /tmp/ccyfI9lR.s:543    .text.I2C_WaitOnFlagUntilTimeout:00000000 $t
     /tmp/ccyfI9lR.s:547    .text.I2C_WaitOnFlagUntilTimeout:00000000 I2C_WaitOnFlagUntilTimeout
     /tmp/ccyfI9lR.s:614    .text.I2C_RequestMemoryWrite:00000000 $t
     /tmp/ccyfI9lR.s:618    .text.I2C_RequestMemoryWrite:00000000 I2C_RequestMemoryWrite
     /tmp/ccyfI9lR.s:728    .text.I2C_RequestMemoryWrite:00000080 $d
     /tmp/ccyfI9lR.s:733    .text.I2C_RequestMemoryRead:00000000 $t
     /tmp/ccyfI9lR.s:737    .text.I2C_RequestMemoryRead:00000000 I2C_RequestMemoryRead
     /tmp/ccyfI9lR.s:847    .text.I2C_RequestMemoryRead:00000080 $d
     /tmp/ccyfI9lR.s:852    .text.I2C_WaitOnSTOPFlagUntilTimeout:00000000 $t
     /tmp/ccyfI9lR.s:856    .text.I2C_WaitOnSTOPFlagUntilTimeout:00000000 I2C_WaitOnSTOPFlagUntilTimeout
     /tmp/ccyfI9lR.s:928    .text.I2C_WaitOnRXNEFlagUntilTimeout:00000000 $t
     /tmp/ccyfI9lR.s:932    .text.I2C_WaitOnRXNEFlagUntilTimeout:00000000 I2C_WaitOnRXNEFlagUntilTimeout
     /tmp/ccyfI9lR.s:1041   .text.I2C_DMAMasterTransmitCplt:00000000 $t
     /tmp/ccyfI9lR.s:1045   .text.I2C_DMAMasterTransmitCplt:00000000 I2C_DMAMasterTransmitCplt
     /tmp/ccyfI9lR.s:1115   .text.I2C_DMAMasterReceiveCplt:00000000 $t
     /tmp/ccyfI9lR.s:1119   .text.I2C_DMAMasterReceiveCplt:00000000 I2C_DMAMasterReceiveCplt
     /tmp/ccyfI9lR.s:1189   .text.HAL_I2C_MspInit:00000000 $t
     /tmp/ccyfI9lR.s:1194   .text.HAL_I2C_MspInit:00000000 HAL_I2C_MspInit
     /tmp/ccyfI9lR.s:1207   .text.HAL_I2C_Init:00000000 $t
     /tmp/ccyfI9lR.s:1212   .text.HAL_I2C_Init:00000000 HAL_I2C_Init
     /tmp/ccyfI9lR.s:1339   .text.HAL_I2C_Init:000000b8 $d
     /tmp/ccyfI9lR.s:1344   .text.HAL_I2C_MspDeInit:00000000 $t
     /tmp/ccyfI9lR.s:1349   .text.HAL_I2C_MspDeInit:00000000 HAL_I2C_MspDeInit
     /tmp/ccyfI9lR.s:1362   .text.HAL_I2C_DeInit:00000000 $t
     /tmp/ccyfI9lR.s:1367   .text.HAL_I2C_DeInit:00000000 HAL_I2C_DeInit
     /tmp/ccyfI9lR.s:1421   .text.HAL_I2C_Master_Transmit:00000000 $t
     /tmp/ccyfI9lR.s:1426   .text.HAL_I2C_Master_Transmit:00000000 HAL_I2C_Master_Transmit
     /tmp/ccyfI9lR.s:1691   .text.HAL_I2C_Master_Transmit:00000188 $d
     /tmp/ccyfI9lR.s:1696   .text.HAL_I2C_Master_Receive:00000000 $t
     /tmp/ccyfI9lR.s:1701   .text.HAL_I2C_Master_Receive:00000000 HAL_I2C_Master_Receive
     /tmp/ccyfI9lR.s:1965   .text.HAL_I2C_Master_Receive:00000184 $d
     /tmp/ccyfI9lR.s:1970   .text.HAL_I2C_Slave_Transmit:00000000 $t
     /tmp/ccyfI9lR.s:1975   .text.HAL_I2C_Slave_Transmit:00000000 HAL_I2C_Slave_Transmit
     /tmp/ccyfI9lR.s:2245   .text.HAL_I2C_Slave_Receive:00000000 $t
     /tmp/ccyfI9lR.s:2250   .text.HAL_I2C_Slave_Receive:00000000 HAL_I2C_Slave_Receive
     /tmp/ccyfI9lR.s:2512   .text.HAL_I2C_Master_Transmit_IT:00000000 $t
ARM GAS  /tmp/ccyfI9lR.s 			page 256


     /tmp/ccyfI9lR.s:2517   .text.HAL_I2C_Master_Transmit_IT:00000000 HAL_I2C_Master_Transmit_IT
     /tmp/ccyfI9lR.s:2644   .text.HAL_I2C_Master_Transmit_IT:0000008c $d
     /tmp/ccyfI9lR.s:7592   .text.I2C_Master_ISR_IT:00000000 I2C_Master_ISR_IT
     /tmp/ccyfI9lR.s:2651   .text.HAL_I2C_Master_Receive_IT:00000000 $t
     /tmp/ccyfI9lR.s:2656   .text.HAL_I2C_Master_Receive_IT:00000000 HAL_I2C_Master_Receive_IT
     /tmp/ccyfI9lR.s:2783   .text.HAL_I2C_Master_Receive_IT:0000008c $d
     /tmp/ccyfI9lR.s:2790   .text.HAL_I2C_Slave_Transmit_IT:00000000 $t
     /tmp/ccyfI9lR.s:2795   .text.HAL_I2C_Slave_Transmit_IT:00000000 HAL_I2C_Slave_Transmit_IT
     /tmp/ccyfI9lR.s:2874   .text.HAL_I2C_Slave_Transmit_IT:0000005c $d
     /tmp/ccyfI9lR.s:7069   .text.I2C_Slave_ISR_IT:00000000 I2C_Slave_ISR_IT
     /tmp/ccyfI9lR.s:2880   .text.HAL_I2C_Slave_Receive_IT:00000000 $t
     /tmp/ccyfI9lR.s:2885   .text.HAL_I2C_Slave_Receive_IT:00000000 HAL_I2C_Slave_Receive_IT
     /tmp/ccyfI9lR.s:2964   .text.HAL_I2C_Slave_Receive_IT:0000005c $d
     /tmp/ccyfI9lR.s:2970   .text.HAL_I2C_Master_Transmit_DMA:00000000 $t
     /tmp/ccyfI9lR.s:2975   .text.HAL_I2C_Master_Transmit_DMA:00000000 HAL_I2C_Master_Transmit_DMA
     /tmp/ccyfI9lR.s:3170   .text.HAL_I2C_Master_Transmit_DMA:000000f8 $d
     /tmp/ccyfI9lR.s:8072   .text.I2C_DMAError:00000000 I2C_DMAError
     /tmp/ccyfI9lR.s:3180   .text.HAL_I2C_Master_Receive_DMA:00000000 $t
     /tmp/ccyfI9lR.s:3185   .text.HAL_I2C_Master_Receive_DMA:00000000 HAL_I2C_Master_Receive_DMA
     /tmp/ccyfI9lR.s:3378   .text.HAL_I2C_Master_Receive_DMA:000000f4 $d
     /tmp/ccyfI9lR.s:3388   .text.HAL_I2C_Slave_Transmit_DMA:00000000 $t
     /tmp/ccyfI9lR.s:3393   .text.HAL_I2C_Slave_Transmit_DMA:00000000 HAL_I2C_Slave_Transmit_DMA
     /tmp/ccyfI9lR.s:3512   .text.HAL_I2C_Slave_Transmit_DMA:00000094 $d
     /tmp/ccyfI9lR.s:3520   .text.HAL_I2C_Slave_Receive_DMA:00000000 $t
     /tmp/ccyfI9lR.s:3525   .text.HAL_I2C_Slave_Receive_DMA:00000000 HAL_I2C_Slave_Receive_DMA
     /tmp/ccyfI9lR.s:3647   .text.HAL_I2C_Slave_Receive_DMA:00000098 $d
     /tmp/ccyfI9lR.s:3655   .text.HAL_I2C_Mem_Write:00000000 $t
     /tmp/ccyfI9lR.s:3660   .text.HAL_I2C_Mem_Write:00000000 HAL_I2C_Mem_Write
     /tmp/ccyfI9lR.s:3968   .text.HAL_I2C_Mem_Read:00000000 $t
     /tmp/ccyfI9lR.s:3973   .text.HAL_I2C_Mem_Read:00000000 HAL_I2C_Mem_Read
     /tmp/ccyfI9lR.s:4275   .text.HAL_I2C_Mem_Read:000001c0 $d
     /tmp/ccyfI9lR.s:4280   .text.HAL_I2C_Mem_Write_IT:00000000 $t
     /tmp/ccyfI9lR.s:4285   .text.HAL_I2C_Mem_Write_IT:00000000 HAL_I2C_Mem_Write_IT
     /tmp/ccyfI9lR.s:4457   .text.HAL_I2C_Mem_Write_IT:000000f4 $d
     /tmp/ccyfI9lR.s:4463   .text.HAL_I2C_Mem_Read_IT:00000000 $t
     /tmp/ccyfI9lR.s:4468   .text.HAL_I2C_Mem_Read_IT:00000000 HAL_I2C_Mem_Read_IT
     /tmp/ccyfI9lR.s:4641   .text.HAL_I2C_Mem_Read_IT:000000f8 $d
     /tmp/ccyfI9lR.s:4648   .text.HAL_I2C_Mem_Write_DMA:00000000 $t
     /tmp/ccyfI9lR.s:4653   .text.HAL_I2C_Mem_Write_DMA:00000000 HAL_I2C_Mem_Write_DMA
     /tmp/ccyfI9lR.s:4860   .text.HAL_I2C_Mem_Write_DMA:0000014c $d
     /tmp/ccyfI9lR.s:4868   .text.HAL_I2C_Mem_Read_DMA:00000000 $t
     /tmp/ccyfI9lR.s:4873   .text.HAL_I2C_Mem_Read_DMA:00000000 HAL_I2C_Mem_Read_DMA
     /tmp/ccyfI9lR.s:5081   .text.HAL_I2C_Mem_Read_DMA:0000014c $d
     /tmp/ccyfI9lR.s:5090   .text.HAL_I2C_IsDeviceReady:00000000 $t
     /tmp/ccyfI9lR.s:5095   .text.HAL_I2C_IsDeviceReady:00000000 HAL_I2C_IsDeviceReady
     /tmp/ccyfI9lR.s:5337   .text.HAL_I2C_IsDeviceReady:00000158 $d
     /tmp/ccyfI9lR.s:5342   .text.HAL_I2C_Master_Sequential_Transmit_IT:00000000 $t
     /tmp/ccyfI9lR.s:5347   .text.HAL_I2C_Master_Sequential_Transmit_IT:00000000 HAL_I2C_Master_Sequential_Transmit_IT
     /tmp/ccyfI9lR.s:5472   .text.HAL_I2C_Master_Sequential_Transmit_IT:00000084 $d
     /tmp/ccyfI9lR.s:5478   .text.HAL_I2C_Master_Sequential_Receive_IT:00000000 $t
     /tmp/ccyfI9lR.s:5483   .text.HAL_I2C_Master_Sequential_Receive_IT:00000000 HAL_I2C_Master_Sequential_Receive_IT
     /tmp/ccyfI9lR.s:5608   .text.HAL_I2C_Master_Sequential_Receive_IT:00000084 $d
     /tmp/ccyfI9lR.s:5614   .text.HAL_I2C_Slave_Sequential_Transmit_IT:00000000 $t
     /tmp/ccyfI9lR.s:5619   .text.HAL_I2C_Slave_Sequential_Transmit_IT:00000000 HAL_I2C_Slave_Sequential_Transmit_IT
     /tmp/ccyfI9lR.s:5741   .text.HAL_I2C_Slave_Sequential_Transmit_IT:00000098 $d
     /tmp/ccyfI9lR.s:5746   .text.HAL_I2C_Slave_Sequential_Receive_IT:00000000 $t
     /tmp/ccyfI9lR.s:5751   .text.HAL_I2C_Slave_Sequential_Receive_IT:00000000 HAL_I2C_Slave_Sequential_Receive_IT
ARM GAS  /tmp/ccyfI9lR.s 			page 257


     /tmp/ccyfI9lR.s:5873   .text.HAL_I2C_Slave_Sequential_Receive_IT:00000098 $d
     /tmp/ccyfI9lR.s:5878   .text.HAL_I2C_EnableListen_IT:00000000 $t
     /tmp/ccyfI9lR.s:5883   .text.HAL_I2C_EnableListen_IT:00000000 HAL_I2C_EnableListen_IT
     /tmp/ccyfI9lR.s:5923   .text.HAL_I2C_EnableListen_IT:00000024 $d
     /tmp/ccyfI9lR.s:5928   .text.HAL_I2C_DisableListen_IT:00000000 $t
     /tmp/ccyfI9lR.s:5933   .text.HAL_I2C_DisableListen_IT:00000000 HAL_I2C_DisableListen_IT
     /tmp/ccyfI9lR.s:5989   .text.HAL_I2C_Master_Abort_IT:00000000 $t
     /tmp/ccyfI9lR.s:5994   .text.HAL_I2C_Master_Abort_IT:00000000 HAL_I2C_Master_Abort_IT
     /tmp/ccyfI9lR.s:6095   .text.HAL_I2C_Master_Abort_IT:00000064 $d
     /tmp/ccyfI9lR.s:6100   .text.HAL_I2C_EV_IRQHandler:00000000 $t
     /tmp/ccyfI9lR.s:6105   .text.HAL_I2C_EV_IRQHandler:00000000 HAL_I2C_EV_IRQHandler
     /tmp/ccyfI9lR.s:6136   .text.HAL_I2C_MasterTxCpltCallback:00000000 $t
     /tmp/ccyfI9lR.s:6141   .text.HAL_I2C_MasterTxCpltCallback:00000000 HAL_I2C_MasterTxCpltCallback
     /tmp/ccyfI9lR.s:6154   .text.HAL_I2C_MasterRxCpltCallback:00000000 $t
     /tmp/ccyfI9lR.s:6159   .text.HAL_I2C_MasterRxCpltCallback:00000000 HAL_I2C_MasterRxCpltCallback
     /tmp/ccyfI9lR.s:6172   .text.I2C_ITMasterSequentialCplt:00000000 $t
     /tmp/ccyfI9lR.s:6176   .text.I2C_ITMasterSequentialCplt:00000000 I2C_ITMasterSequentialCplt
     /tmp/ccyfI9lR.s:6246   .text.HAL_I2C_SlaveTxCpltCallback:00000000 $t
     /tmp/ccyfI9lR.s:6251   .text.HAL_I2C_SlaveTxCpltCallback:00000000 HAL_I2C_SlaveTxCpltCallback
     /tmp/ccyfI9lR.s:6264   .text.HAL_I2C_SlaveRxCpltCallback:00000000 $t
     /tmp/ccyfI9lR.s:6269   .text.HAL_I2C_SlaveRxCpltCallback:00000000 HAL_I2C_SlaveRxCpltCallback
     /tmp/ccyfI9lR.s:6282   .text.I2C_ITSlaveSequentialCplt:00000000 $t
     /tmp/ccyfI9lR.s:6286   .text.I2C_ITSlaveSequentialCplt:00000000 I2C_ITSlaveSequentialCplt
     /tmp/ccyfI9lR.s:6356   .text.HAL_I2C_AddrCallback:00000000 $t
     /tmp/ccyfI9lR.s:6361   .text.HAL_I2C_AddrCallback:00000000 HAL_I2C_AddrCallback
     /tmp/ccyfI9lR.s:6374   .text.I2C_ITAddrCplt:00000000 $t
     /tmp/ccyfI9lR.s:6378   .text.I2C_ITAddrCplt:00000000 I2C_ITAddrCplt
     /tmp/ccyfI9lR.s:6504   .text.HAL_I2C_ListenCpltCallback:00000000 $t
     /tmp/ccyfI9lR.s:6509   .text.HAL_I2C_ListenCpltCallback:00000000 HAL_I2C_ListenCpltCallback
     /tmp/ccyfI9lR.s:6522   .text.I2C_ITListenCplt:00000000 $t
     /tmp/ccyfI9lR.s:6526   .text.I2C_ITListenCplt:00000000 I2C_ITListenCplt
     /tmp/ccyfI9lR.s:6603   .text.I2C_ITListenCplt:00000060 $d
     /tmp/ccyfI9lR.s:6608   .text.HAL_I2C_MemTxCpltCallback:00000000 $t
     /tmp/ccyfI9lR.s:6613   .text.HAL_I2C_MemTxCpltCallback:00000000 HAL_I2C_MemTxCpltCallback
     /tmp/ccyfI9lR.s:6626   .text.HAL_I2C_MemRxCpltCallback:00000000 $t
     /tmp/ccyfI9lR.s:6631   .text.HAL_I2C_MemRxCpltCallback:00000000 HAL_I2C_MemRxCpltCallback
     /tmp/ccyfI9lR.s:6644   .text.HAL_I2C_ErrorCallback:00000000 $t
     /tmp/ccyfI9lR.s:6649   .text.HAL_I2C_ErrorCallback:00000000 HAL_I2C_ErrorCallback
     /tmp/ccyfI9lR.s:6662   .text.HAL_I2C_AbortCpltCallback:00000000 $t
     /tmp/ccyfI9lR.s:6667   .text.HAL_I2C_AbortCpltCallback:00000000 HAL_I2C_AbortCpltCallback
     /tmp/ccyfI9lR.s:6680   .text.I2C_ITError:00000000 $t
     /tmp/ccyfI9lR.s:6684   .text.I2C_ITError:00000000 I2C_ITError
     /tmp/ccyfI9lR.s:6854   .text.I2C_ITError:000000f0 $d
     /tmp/ccyfI9lR.s:8189   .text.I2C_DMAAbort:00000000 I2C_DMAAbort
     /tmp/ccyfI9lR.s:6861   .text.I2C_ITSlaveCplt:00000000 $t
     /tmp/ccyfI9lR.s:6865   .text.I2C_ITSlaveCplt:00000000 I2C_ITSlaveCplt
     /tmp/ccyfI9lR.s:7060   .text.I2C_ITSlaveCplt:00000124 $d
     /tmp/ccyfI9lR.s:7065   .text.I2C_Slave_ISR_IT:00000000 $t
     /tmp/ccyfI9lR.s:7317   .text.I2C_Slave_ISR_DMA:00000000 $t
     /tmp/ccyfI9lR.s:7435   .text.I2C_ITMasterCplt:00000000 $t
     /tmp/ccyfI9lR.s:7439   .text.I2C_ITMasterCplt:00000000 I2C_ITMasterCplt
     /tmp/ccyfI9lR.s:7588   .text.I2C_Master_ISR_IT:00000000 $t
     /tmp/ccyfI9lR.s:7880   .text.I2C_Master_ISR_DMA:00000000 $t
     /tmp/ccyfI9lR.s:8068   .text.I2C_DMAError:00000000 $t
     /tmp/ccyfI9lR.s:8101   .text.HAL_I2C_ER_IRQHandler:00000000 $t
     /tmp/ccyfI9lR.s:8106   .text.HAL_I2C_ER_IRQHandler:00000000 HAL_I2C_ER_IRQHandler
     /tmp/ccyfI9lR.s:8185   .text.I2C_DMAAbort:00000000 $t
ARM GAS  /tmp/ccyfI9lR.s 			page 258


     /tmp/ccyfI9lR.s:8238   .text.HAL_I2C_GetState:00000000 $t
     /tmp/ccyfI9lR.s:8243   .text.HAL_I2C_GetState:00000000 HAL_I2C_GetState
     /tmp/ccyfI9lR.s:8260   .text.HAL_I2C_GetMode:00000000 $t
     /tmp/ccyfI9lR.s:8265   .text.HAL_I2C_GetMode:00000000 HAL_I2C_GetMode
     /tmp/ccyfI9lR.s:8282   .text.HAL_I2C_GetError:00000000 $t
     /tmp/ccyfI9lR.s:8287   .text.HAL_I2C_GetError:00000000 HAL_I2C_GetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort_IT
