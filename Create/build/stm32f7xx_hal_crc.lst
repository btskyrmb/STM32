ARM GAS  /tmp/cc5YpQyF.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_crc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.CRC_Handle_8,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	CRC_Handle_8:
  26              	.LFB142:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_crc.c"
   1:HALLIB/Src/stm32f7xx_hal_crc.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_crc.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @file    stm32f7xx_hal_crc.c
   4:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @brief   CRC HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_crc.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_crc.c ****   *          functionalities of the Cyclic Redundancy Check (CRC) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_crc.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_crc.c ****   *           + Peripheral Control functions 
  10:HALLIB/Src/stm32f7xx_hal_crc.c ****   *           + Peripheral State functions
  11:HALLIB/Src/stm32f7xx_hal_crc.c ****   *
  12:HALLIB/Src/stm32f7xx_hal_crc.c ****   @verbatim
  13:HALLIB/Src/stm32f7xx_hal_crc.c ****  ===============================================================================
  14:HALLIB/Src/stm32f7xx_hal_crc.c ****                      ##### CRC How to use this driver #####
  15:HALLIB/Src/stm32f7xx_hal_crc.c ****  ===============================================================================
  16:HALLIB/Src/stm32f7xx_hal_crc.c ****     [..]
  17:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  18:HALLIB/Src/stm32f7xx_hal_crc.c ****     (#) Enable CRC AHB clock using __HAL_RCC_CRC_CLK_ENABLE();
  19:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  20:HALLIB/Src/stm32f7xx_hal_crc.c ****     (#) Initialize CRC calculator
  21:HALLIB/Src/stm32f7xx_hal_crc.c ****          (++) specify generating polynomial (IP default or non-default one)
  22:HALLIB/Src/stm32f7xx_hal_crc.c ****          (++) specify initialization value (IP default or non-default one)
  23:HALLIB/Src/stm32f7xx_hal_crc.c ****          (++) specify input data format
  24:HALLIB/Src/stm32f7xx_hal_crc.c ****          (++) specify input or output data inversion mode if any
  25:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  26:HALLIB/Src/stm32f7xx_hal_crc.c ****     (#) Use HAL_CRC_Accumulate() function to compute the CRC value of the 
  27:HALLIB/Src/stm32f7xx_hal_crc.c ****         input data buffer starting with the previously computed CRC as 
  28:HALLIB/Src/stm32f7xx_hal_crc.c ****         initialization value
  29:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  30:HALLIB/Src/stm32f7xx_hal_crc.c ****     (#) Use HAL_CRC_Calculate() function to compute the CRC value of the 
  31:HALLIB/Src/stm32f7xx_hal_crc.c ****         input data buffer starting with the defined initialization value 
ARM GAS  /tmp/cc5YpQyF.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_crc.c ****         (default or non-default) to initiate CRC calculation
  33:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  34:HALLIB/Src/stm32f7xx_hal_crc.c ****   @endverbatim
  35:HALLIB/Src/stm32f7xx_hal_crc.c ****   ******************************************************************************
  36:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @attention
  37:HALLIB/Src/stm32f7xx_hal_crc.c ****   *
  38:HALLIB/Src/stm32f7xx_hal_crc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  39:HALLIB/Src/stm32f7xx_hal_crc.c ****   *
  40:HALLIB/Src/stm32f7xx_hal_crc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  41:HALLIB/Src/stm32f7xx_hal_crc.c ****   * are permitted provided that the following conditions are met:
  42:HALLIB/Src/stm32f7xx_hal_crc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  43:HALLIB/Src/stm32f7xx_hal_crc.c ****   *      this list of conditions and the following disclaimer.
  44:HALLIB/Src/stm32f7xx_hal_crc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  45:HALLIB/Src/stm32f7xx_hal_crc.c ****   *      this list of conditions and the following disclaimer in the documentation
  46:HALLIB/Src/stm32f7xx_hal_crc.c ****   *      and/or other materials provided with the distribution.
  47:HALLIB/Src/stm32f7xx_hal_crc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  48:HALLIB/Src/stm32f7xx_hal_crc.c ****   *      may be used to endorse or promote products derived from this software
  49:HALLIB/Src/stm32f7xx_hal_crc.c ****   *      without specific prior written permission.
  50:HALLIB/Src/stm32f7xx_hal_crc.c ****   *
  51:HALLIB/Src/stm32f7xx_hal_crc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  52:HALLIB/Src/stm32f7xx_hal_crc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  53:HALLIB/Src/stm32f7xx_hal_crc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  54:HALLIB/Src/stm32f7xx_hal_crc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  55:HALLIB/Src/stm32f7xx_hal_crc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  56:HALLIB/Src/stm32f7xx_hal_crc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  57:HALLIB/Src/stm32f7xx_hal_crc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  58:HALLIB/Src/stm32f7xx_hal_crc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  59:HALLIB/Src/stm32f7xx_hal_crc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  60:HALLIB/Src/stm32f7xx_hal_crc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  61:HALLIB/Src/stm32f7xx_hal_crc.c ****   *
  62:HALLIB/Src/stm32f7xx_hal_crc.c ****   ******************************************************************************
  63:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
  64:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  65:HALLIB/Src/stm32f7xx_hal_crc.c **** /* Includes ------------------------------------------------------------------*/
  66:HALLIB/Src/stm32f7xx_hal_crc.c **** #include "stm32f7xx_hal.h"
  67:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  68:HALLIB/Src/stm32f7xx_hal_crc.c **** /** @addtogroup STM32F7xx_HAL_Driver
  69:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @{
  70:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
  71:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  72:HALLIB/Src/stm32f7xx_hal_crc.c **** /** @defgroup CRC CRC
  73:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @brief CRC HAL module driver.
  74:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @{
  75:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
  76:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  77:HALLIB/Src/stm32f7xx_hal_crc.c **** #ifdef HAL_CRC_MODULE_ENABLED
  78:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  79:HALLIB/Src/stm32f7xx_hal_crc.c **** /* Private typedef -----------------------------------------------------------*/
  80:HALLIB/Src/stm32f7xx_hal_crc.c **** /* Private define ------------------------------------------------------------*/
  81:HALLIB/Src/stm32f7xx_hal_crc.c **** /* Private macro -------------------------------------------------------------*/
  82:HALLIB/Src/stm32f7xx_hal_crc.c **** /* Private variables ---------------------------------------------------------*/
  83:HALLIB/Src/stm32f7xx_hal_crc.c **** /* Private function prototypes -----------------------------------------------*/
  84:HALLIB/Src/stm32f7xx_hal_crc.c **** static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength);
  85:HALLIB/Src/stm32f7xx_hal_crc.c **** static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength);
  86:HALLIB/Src/stm32f7xx_hal_crc.c **** /* Exported functions --------------------------------------------------------*/
  87:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  88:HALLIB/Src/stm32f7xx_hal_crc.c **** /** @defgroup CRC_Exported_Functions CRC Exported Functions
ARM GAS  /tmp/cc5YpQyF.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @{
  90:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
  91:HALLIB/Src/stm32f7xx_hal_crc.c **** 
  92:HALLIB/Src/stm32f7xx_hal_crc.c **** /** @defgroup HAL_CRC_Group1 Initialization/de-initialization functions 
  93:HALLIB/Src/stm32f7xx_hal_crc.c ****   *  @brief    Initialization and Configuration functions. 
  94:HALLIB/Src/stm32f7xx_hal_crc.c ****   *
  95:HALLIB/Src/stm32f7xx_hal_crc.c **** @verbatim    
  96:HALLIB/Src/stm32f7xx_hal_crc.c ****  ===============================================================================
  97:HALLIB/Src/stm32f7xx_hal_crc.c ****             ##### Initialization and de-initialization functions #####
  98:HALLIB/Src/stm32f7xx_hal_crc.c ****  ===============================================================================
  99:HALLIB/Src/stm32f7xx_hal_crc.c ****     [..]  This section provides functions allowing to:
 100:HALLIB/Src/stm32f7xx_hal_crc.c ****       (+) Initialize the CRC according to the specified parameters 
 101:HALLIB/Src/stm32f7xx_hal_crc.c ****           in the CRC_InitTypeDef and create the associated handle
 102:HALLIB/Src/stm32f7xx_hal_crc.c ****       (+) DeInitialize the CRC peripheral
 103:HALLIB/Src/stm32f7xx_hal_crc.c ****       (+) Initialize the CRC MSP
 104:HALLIB/Src/stm32f7xx_hal_crc.c ****       (+) DeInitialize CRC MSP 
 105:HALLIB/Src/stm32f7xx_hal_crc.c ****  
 106:HALLIB/Src/stm32f7xx_hal_crc.c **** @endverbatim
 107:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @{
 108:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 109:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 110:HALLIB/Src/stm32f7xx_hal_crc.c **** /**
 111:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @brief  Initialize the CRC according to the specified
 112:HALLIB/Src/stm32f7xx_hal_crc.c ****   *         parameters in the CRC_InitTypeDef and create the associated handle.
 113:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  hcrc CRC handle
 114:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @retval HAL status
 115:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 116:HALLIB/Src/stm32f7xx_hal_crc.c **** HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
 117:HALLIB/Src/stm32f7xx_hal_crc.c **** {
 118:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Check the CRC handle allocation */
 119:HALLIB/Src/stm32f7xx_hal_crc.c ****   if(hcrc == NULL)
 120:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 121:HALLIB/Src/stm32f7xx_hal_crc.c ****     return HAL_ERROR;
 122:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 123:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 124:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Check the parameters */
 125:HALLIB/Src/stm32f7xx_hal_crc.c ****   assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 126:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 127:HALLIB/Src/stm32f7xx_hal_crc.c ****   if(hcrc->State == HAL_CRC_STATE_RESET)
 128:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 129:HALLIB/Src/stm32f7xx_hal_crc.c ****     /* Allocate lock resource and initialize it */
 130:HALLIB/Src/stm32f7xx_hal_crc.c ****     hcrc->Lock = HAL_UNLOCKED;
 131:HALLIB/Src/stm32f7xx_hal_crc.c ****     /* Init the low level hardware */
 132:HALLIB/Src/stm32f7xx_hal_crc.c ****     HAL_CRC_MspInit(hcrc);
 133:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 134:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 135:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Change CRC peripheral state */
 136:HALLIB/Src/stm32f7xx_hal_crc.c ****   hcrc->State = HAL_CRC_STATE_BUSY;
 137:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 138:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* check whether or not non-default generating polynomial has been 
 139:HALLIB/Src/stm32f7xx_hal_crc.c ****    * picked up by user */
 140:HALLIB/Src/stm32f7xx_hal_crc.c ****   assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
 141:HALLIB/Src/stm32f7xx_hal_crc.c ****   if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 142:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 143:HALLIB/Src/stm32f7xx_hal_crc.c ****     /* initialize IP with default generating polynomial */
 144:HALLIB/Src/stm32f7xx_hal_crc.c ****     WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 145:HALLIB/Src/stm32f7xx_hal_crc.c ****     MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
ARM GAS  /tmp/cc5YpQyF.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 147:HALLIB/Src/stm32f7xx_hal_crc.c ****   else
 148:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 149:HALLIB/Src/stm32f7xx_hal_crc.c ****     /* initialize CRC IP with generating polynomial defined by user */
 150:HALLIB/Src/stm32f7xx_hal_crc.c ****     if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL
 151:HALLIB/Src/stm32f7xx_hal_crc.c ****     {
 152:HALLIB/Src/stm32f7xx_hal_crc.c ****       return HAL_ERROR;
 153:HALLIB/Src/stm32f7xx_hal_crc.c ****     }
 154:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 155:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 156:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* check whether or not non-default CRC initial value has been 
 157:HALLIB/Src/stm32f7xx_hal_crc.c ****    * picked up by user */
 158:HALLIB/Src/stm32f7xx_hal_crc.c ****   assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 159:HALLIB/Src/stm32f7xx_hal_crc.c ****   if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 160:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 161:HALLIB/Src/stm32f7xx_hal_crc.c ****     WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 162:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 163:HALLIB/Src/stm32f7xx_hal_crc.c ****   else
 164:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 165:HALLIB/Src/stm32f7xx_hal_crc.c ****     WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 166:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 167:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 168:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 169:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* set input data inversion mode */
 170:HALLIB/Src/stm32f7xx_hal_crc.c ****   assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
 171:HALLIB/Src/stm32f7xx_hal_crc.c ****   MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 172:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 173:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* set output data inversion mode */
 174:HALLIB/Src/stm32f7xx_hal_crc.c ****   assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
 175:HALLIB/Src/stm32f7xx_hal_crc.c ****   MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 176:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 177:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* makes sure the input data format (bytes, halfwords or words stream)
 178:HALLIB/Src/stm32f7xx_hal_crc.c ****    * is properly specified by user */
 179:HALLIB/Src/stm32f7xx_hal_crc.c ****   assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 180:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 181:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Change CRC peripheral state */
 182:HALLIB/Src/stm32f7xx_hal_crc.c ****   hcrc->State = HAL_CRC_STATE_READY;
 183:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 184:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Return function status */
 185:HALLIB/Src/stm32f7xx_hal_crc.c ****   return HAL_OK;
 186:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 187:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 188:HALLIB/Src/stm32f7xx_hal_crc.c **** /**
 189:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @brief  DeInitialize the CRC peripheral.
 190:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  hcrc CRC handle
 191:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @retval HAL status
 192:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 193:HALLIB/Src/stm32f7xx_hal_crc.c **** HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
 194:HALLIB/Src/stm32f7xx_hal_crc.c **** {
 195:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Check the CRC handle allocation */
 196:HALLIB/Src/stm32f7xx_hal_crc.c ****   if(hcrc == NULL)
 197:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 198:HALLIB/Src/stm32f7xx_hal_crc.c ****     return HAL_ERROR;
 199:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 200:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 201:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Check the parameters */
 202:HALLIB/Src/stm32f7xx_hal_crc.c ****   assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
ARM GAS  /tmp/cc5YpQyF.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 204:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Check the CRC peripheral state */
 205:HALLIB/Src/stm32f7xx_hal_crc.c ****   if(hcrc->State == HAL_CRC_STATE_BUSY)
 206:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 207:HALLIB/Src/stm32f7xx_hal_crc.c ****     return HAL_BUSY;
 208:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 209:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 210:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Change CRC peripheral state */
 211:HALLIB/Src/stm32f7xx_hal_crc.c ****   hcrc->State = HAL_CRC_STATE_BUSY;
 212:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 213:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Reset CRC calculation unit */
 214:HALLIB/Src/stm32f7xx_hal_crc.c ****   __HAL_CRC_DR_RESET(hcrc);
 215:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 216:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Reset IDR register content */
 217:HALLIB/Src/stm32f7xx_hal_crc.c ****   CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 218:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 219:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* DeInit the low level hardware */
 220:HALLIB/Src/stm32f7xx_hal_crc.c ****   HAL_CRC_MspDeInit(hcrc);
 221:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 222:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Change CRC peripheral state */
 223:HALLIB/Src/stm32f7xx_hal_crc.c ****   hcrc->State = HAL_CRC_STATE_RESET;
 224:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 225:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Process unlocked */
 226:HALLIB/Src/stm32f7xx_hal_crc.c ****   __HAL_UNLOCK(hcrc);
 227:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 228:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Return function status */
 229:HALLIB/Src/stm32f7xx_hal_crc.c ****   return HAL_OK;
 230:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 231:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 232:HALLIB/Src/stm32f7xx_hal_crc.c **** /**
 233:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @brief  Initialize the CRC MSP.
 234:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  hcrc CRC handle
 235:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @retval None
 236:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 237:HALLIB/Src/stm32f7xx_hal_crc.c **** __weak void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
 238:HALLIB/Src/stm32f7xx_hal_crc.c **** {
 239:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Prevent unused argument(s) compilation warning */
 240:HALLIB/Src/stm32f7xx_hal_crc.c ****   UNUSED(hcrc);
 241:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 242:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 243:HALLIB/Src/stm32f7xx_hal_crc.c ****             the HAL_CRC_MspInit can be implemented in the user file
 244:HALLIB/Src/stm32f7xx_hal_crc.c ****    */
 245:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 246:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 247:HALLIB/Src/stm32f7xx_hal_crc.c **** /**
 248:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @brief  DeInitialize the CRC MSP.
 249:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  hcrc CRC handle
 250:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @retval None
 251:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 252:HALLIB/Src/stm32f7xx_hal_crc.c **** __weak void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc)
 253:HALLIB/Src/stm32f7xx_hal_crc.c **** {
 254:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Prevent unused argument(s) compilation warning */
 255:HALLIB/Src/stm32f7xx_hal_crc.c ****   UNUSED(hcrc);
 256:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 257:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 258:HALLIB/Src/stm32f7xx_hal_crc.c ****             the HAL_CRC_MspDeInit can be implemented in the user file
 259:HALLIB/Src/stm32f7xx_hal_crc.c ****    */
ARM GAS  /tmp/cc5YpQyF.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 261:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 262:HALLIB/Src/stm32f7xx_hal_crc.c **** /**
 263:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @}
 264:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 265:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 266:HALLIB/Src/stm32f7xx_hal_crc.c **** /** @defgroup HAL_CRC_Group2 Peripheral Control functions 
 267:HALLIB/Src/stm32f7xx_hal_crc.c ****   *  @brief   Peripheral Control functions 
 268:HALLIB/Src/stm32f7xx_hal_crc.c ****   *
 269:HALLIB/Src/stm32f7xx_hal_crc.c **** @verbatim  
 270:HALLIB/Src/stm32f7xx_hal_crc.c ****  ==============================================================================
 271:HALLIB/Src/stm32f7xx_hal_crc.c ****                       ##### Peripheral Control functions #####
 272:HALLIB/Src/stm32f7xx_hal_crc.c ****  ==============================================================================  
 273:HALLIB/Src/stm32f7xx_hal_crc.c ****     [..]  This section provides functions allowing to:
 274:HALLIB/Src/stm32f7xx_hal_crc.c ****       (+) Compute the 7, 8, 16 or 32-bit CRC value of an 8, 16 or 32-bit data buffer
 275:HALLIB/Src/stm32f7xx_hal_crc.c ****           using combination of the previous CRC value and the new one.
 276:HALLIB/Src/stm32f7xx_hal_crc.c ****           
 277:HALLIB/Src/stm32f7xx_hal_crc.c ****           or
 278:HALLIB/Src/stm32f7xx_hal_crc.c ****           
 279:HALLIB/Src/stm32f7xx_hal_crc.c ****       (+) Compute the 7, 8, 16 or 32-bit CRC value of an 8, 16 or 32-bit data buffer
 280:HALLIB/Src/stm32f7xx_hal_crc.c ****           independently of the previous CRC value.
 281:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 282:HALLIB/Src/stm32f7xx_hal_crc.c **** @endverbatim
 283:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @{
 284:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 285:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 286:HALLIB/Src/stm32f7xx_hal_crc.c **** /**                  
 287:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @brief  Compute the 7, 8, 16 or 32-bit CRC value of an 8, 16 or 32-bit data buffer
 288:HALLIB/Src/stm32f7xx_hal_crc.c ****   *         starting with the previously computed CRC as initialization value.
 289:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  hcrc CRC handle
 290:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  pBuffer pointer to the input data buffer, exact input data format is
 291:HALLIB/Src/stm32f7xx_hal_crc.c ****   *         provided by hcrc->InputDataFormat.  
 292:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  BufferLength input data buffer length (number of bytes if pBuffer
 293:HALLIB/Src/stm32f7xx_hal_crc.c ****   *         type is * uint8_t, number of half-words if pBuffer type is * uint16_t,
 294:HALLIB/Src/stm32f7xx_hal_crc.c ****   *         number of words if pBuffer type is * uint32_t).
 295:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @note  By default, the API expects a uint32_t pointer as input buffer parameter.
 296:HALLIB/Src/stm32f7xx_hal_crc.c ****   *        Input buffer pointers with other types simply need to be cast in uint32_t
 297:HALLIB/Src/stm32f7xx_hal_crc.c ****   *        and the API will internally adjust its input data processing based on the  
 298:HALLIB/Src/stm32f7xx_hal_crc.c ****   *        handle field hcrc->InputDataFormat.  
 299:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
 300:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 301:HALLIB/Src/stm32f7xx_hal_crc.c **** uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
 302:HALLIB/Src/stm32f7xx_hal_crc.c **** {
 303:HALLIB/Src/stm32f7xx_hal_crc.c ****   uint32_t index = 0; /* CRC input data buffer index */
 304:HALLIB/Src/stm32f7xx_hal_crc.c ****   uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 305:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 306:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Process locked */
 307:HALLIB/Src/stm32f7xx_hal_crc.c ****   __HAL_LOCK(hcrc); 
 308:HALLIB/Src/stm32f7xx_hal_crc.c ****     
 309:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Change CRC peripheral state */  
 310:HALLIB/Src/stm32f7xx_hal_crc.c ****   hcrc->State = HAL_CRC_STATE_BUSY;
 311:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 312:HALLIB/Src/stm32f7xx_hal_crc.c ****   switch (hcrc->InputDataFormat)
 313:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 314:HALLIB/Src/stm32f7xx_hal_crc.c ****     case CRC_INPUTDATA_FORMAT_WORDS:  
 315:HALLIB/Src/stm32f7xx_hal_crc.c ****       /* Enter Data to the CRC calculator */
 316:HALLIB/Src/stm32f7xx_hal_crc.c ****       for(index = 0; index < BufferLength; index++)
ARM GAS  /tmp/cc5YpQyF.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_crc.c ****       {
 318:HALLIB/Src/stm32f7xx_hal_crc.c ****         hcrc->Instance->DR = pBuffer[index];
 319:HALLIB/Src/stm32f7xx_hal_crc.c ****       }
 320:HALLIB/Src/stm32f7xx_hal_crc.c ****       temp = hcrc->Instance->DR;
 321:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 322:HALLIB/Src/stm32f7xx_hal_crc.c ****       
 323:HALLIB/Src/stm32f7xx_hal_crc.c ****     case CRC_INPUTDATA_FORMAT_BYTES: 
 324:HALLIB/Src/stm32f7xx_hal_crc.c ****       temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 325:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 326:HALLIB/Src/stm32f7xx_hal_crc.c ****       
 327:HALLIB/Src/stm32f7xx_hal_crc.c ****     case CRC_INPUTDATA_FORMAT_HALFWORDS: 
 328:HALLIB/Src/stm32f7xx_hal_crc.c ****       temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 329:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 330:HALLIB/Src/stm32f7xx_hal_crc.c ****     default:
 331:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;  
 332:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 333:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 334:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Change CRC peripheral state */    
 335:HALLIB/Src/stm32f7xx_hal_crc.c ****   hcrc->State = HAL_CRC_STATE_READY; 
 336:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 337:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Process unlocked */
 338:HALLIB/Src/stm32f7xx_hal_crc.c ****   __HAL_UNLOCK(hcrc);
 339:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 340:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Return the CRC computed value */ 
 341:HALLIB/Src/stm32f7xx_hal_crc.c ****   return temp;
 342:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 343:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 344:HALLIB/Src/stm32f7xx_hal_crc.c **** /**                  
 345:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @brief  Compute the 7, 8, 16 or 32-bit CRC value of an 8, 16 or 32-bit data buffer
 346:HALLIB/Src/stm32f7xx_hal_crc.c ****   *         starting with hcrc->Instance->INIT as initialization value.
 347:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  hcrc CRC handle
 348:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  pBuffer pointer to the input data buffer, exact input data format is
 349:HALLIB/Src/stm32f7xx_hal_crc.c ****   *         provided by hcrc->InputDataFormat.  
 350:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  BufferLength input data buffer length (number of bytes if pBuffer
 351:HALLIB/Src/stm32f7xx_hal_crc.c ****   *         type is * uint8_t, number of half-words if pBuffer type is * uint16_t,
 352:HALLIB/Src/stm32f7xx_hal_crc.c ****   *         number of words if pBuffer type is * uint32_t).
 353:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @note  By default, the API expects a uint32_t pointer as input buffer parameter.
 354:HALLIB/Src/stm32f7xx_hal_crc.c ****   *        Input buffer pointers with other types simply need to be cast in uint32_t
 355:HALLIB/Src/stm32f7xx_hal_crc.c ****   *        and the API will internally adjust its input data processing based on the  
 356:HALLIB/Src/stm32f7xx_hal_crc.c ****   *        handle field hcrc->InputDataFormat.   
 357:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
 358:HALLIB/Src/stm32f7xx_hal_crc.c ****   */  
 359:HALLIB/Src/stm32f7xx_hal_crc.c **** uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
 360:HALLIB/Src/stm32f7xx_hal_crc.c **** {
 361:HALLIB/Src/stm32f7xx_hal_crc.c ****   uint32_t index = 0; /* CRC input data buffer index */
 362:HALLIB/Src/stm32f7xx_hal_crc.c ****   uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 363:HALLIB/Src/stm32f7xx_hal_crc.c ****     
 364:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Process locked */
 365:HALLIB/Src/stm32f7xx_hal_crc.c ****   __HAL_LOCK(hcrc); 
 366:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 367:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Change CRC peripheral state */  
 368:HALLIB/Src/stm32f7xx_hal_crc.c ****   hcrc->State = HAL_CRC_STATE_BUSY;
 369:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 370:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Reset CRC Calculation Unit (hcrc->Instance->INIT is 
 371:HALLIB/Src/stm32f7xx_hal_crc.c ****   *  written in hcrc->Instance->DR) */
 372:HALLIB/Src/stm32f7xx_hal_crc.c ****   __HAL_CRC_DR_RESET(hcrc);
 373:HALLIB/Src/stm32f7xx_hal_crc.c ****   
ARM GAS  /tmp/cc5YpQyF.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_crc.c ****   switch (hcrc->InputDataFormat)
 375:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 376:HALLIB/Src/stm32f7xx_hal_crc.c ****     case CRC_INPUTDATA_FORMAT_WORDS:  
 377:HALLIB/Src/stm32f7xx_hal_crc.c ****       /* Enter 32-bit input data to the CRC calculator */
 378:HALLIB/Src/stm32f7xx_hal_crc.c ****       for(index = 0; index < BufferLength; index++)
 379:HALLIB/Src/stm32f7xx_hal_crc.c ****       {
 380:HALLIB/Src/stm32f7xx_hal_crc.c ****         hcrc->Instance->DR = pBuffer[index];
 381:HALLIB/Src/stm32f7xx_hal_crc.c ****       }
 382:HALLIB/Src/stm32f7xx_hal_crc.c ****       temp = hcrc->Instance->DR;
 383:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 384:HALLIB/Src/stm32f7xx_hal_crc.c ****       
 385:HALLIB/Src/stm32f7xx_hal_crc.c ****     case CRC_INPUTDATA_FORMAT_BYTES: 
 386:HALLIB/Src/stm32f7xx_hal_crc.c ****       /* Specific 8-bit input data handling  */
 387:HALLIB/Src/stm32f7xx_hal_crc.c ****       temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 388:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 389:HALLIB/Src/stm32f7xx_hal_crc.c ****       
 390:HALLIB/Src/stm32f7xx_hal_crc.c ****     case CRC_INPUTDATA_FORMAT_HALFWORDS: 
 391:HALLIB/Src/stm32f7xx_hal_crc.c ****       /* Specific 16-bit input data handling  */
 392:HALLIB/Src/stm32f7xx_hal_crc.c ****       temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 393:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 394:HALLIB/Src/stm32f7xx_hal_crc.c ****     default:
 395:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 396:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 397:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 398:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Change CRC peripheral state */
 399:HALLIB/Src/stm32f7xx_hal_crc.c ****   hcrc->State = HAL_CRC_STATE_READY;
 400:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 401:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Process unlocked */
 402:HALLIB/Src/stm32f7xx_hal_crc.c ****   __HAL_UNLOCK(hcrc);
 403:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 404:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Return the CRC computed value */ 
 405:HALLIB/Src/stm32f7xx_hal_crc.c ****   return temp;
 406:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 407:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 408:HALLIB/Src/stm32f7xx_hal_crc.c **** /**             
 409:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @brief  Enter 8-bit input data to the CRC calculator.
 410:HALLIB/Src/stm32f7xx_hal_crc.c ****   *         Specific data handling to optimize processing time.  
 411:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  hcrc CRC handle
 412:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  pBuffer pointer to the input data buffer
 413:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  BufferLength input data buffer length
 414:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
 415:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 416:HALLIB/Src/stm32f7xx_hal_crc.c **** static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
 417:HALLIB/Src/stm32f7xx_hal_crc.c **** {
  28              		.loc 1 417 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 F0B4     		push	{r4, r5, r6, r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 4, -16
  38              		.cfi_offset 5, -12
  39              		.cfi_offset 6, -8
  40              		.cfi_offset 7, -4
ARM GAS  /tmp/cc5YpQyF.s 			page 9


  41              	.LVL1:
 418:HALLIB/Src/stm32f7xx_hal_crc.c ****   uint32_t i = 0; /* input data buffer index */
 419:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 420:HALLIB/Src/stm32f7xx_hal_crc.c ****    /* Processing time optimization: 4 bytes are entered in a row with a single word write,
 421:HALLIB/Src/stm32f7xx_hal_crc.c ****     * last bytes must be carefully fed to the CRC calculator to ensure a correct type
 422:HALLIB/Src/stm32f7xx_hal_crc.c ****     * handling by the IP */
 423:HALLIB/Src/stm32f7xx_hal_crc.c ****    for(i = 0; i < (BufferLength/4); i++)
  42              		.loc 1 423 0
  43 0002 0024     		movs	r4, #0
  44 0004 0FE0     		b	.L2
  45              	.LVL2:
  46              	.L3:
 424:HALLIB/Src/stm32f7xx_hal_crc.c ****    {
 425:HALLIB/Src/stm32f7xx_hal_crc.c ****      hcrc->Instance->DR = (uint32_t)(((uint32_t)(pBuffer[4*i])<<24) | ((uint32_t)(pBuffer[4*i+1])<<
  47              		.loc 1 425 0 discriminator 3
  48 0006 0668     		ldr	r6, [r0]
  49 0008 11F82470 		ldrb	r7, [r1, r4, lsl #2]	@ zero_extendqisi2
  50 000c 01EB8405 		add	r5, r1, r4, lsl #2
  51 0010 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
  52 0012 1B04     		lsls	r3, r3, #16
  53 0014 43EA0763 		orr	r3, r3, r7, lsl #24
  54 0018 AF78     		ldrb	r7, [r5, #2]	@ zero_extendqisi2
  55 001a 43EA0723 		orr	r3, r3, r7, lsl #8
  56 001e ED78     		ldrb	r5, [r5, #3]	@ zero_extendqisi2
  57 0020 2B43     		orrs	r3, r3, r5
  58 0022 3360     		str	r3, [r6]
 423:HALLIB/Src/stm32f7xx_hal_crc.c ****    {
  59              		.loc 1 423 0 discriminator 3
  60 0024 0134     		adds	r4, r4, #1
  61              	.LVL3:
  62              	.L2:
 423:HALLIB/Src/stm32f7xx_hal_crc.c ****    {
  63              		.loc 1 423 0 is_stmt 0 discriminator 1
  64 0026 B4EB920F 		cmp	r4, r2, lsr #2
  65 002a ECD3     		bcc	.L3
 426:HALLIB/Src/stm32f7xx_hal_crc.c ****    }
 427:HALLIB/Src/stm32f7xx_hal_crc.c ****    /* last bytes specific handling */
 428:HALLIB/Src/stm32f7xx_hal_crc.c ****    if((BufferLength%4) != 0)
  66              		.loc 1 428 0 is_stmt 1
  67 002c 12F00302 		ands	r2, r2, #3
  68              	.LVL4:
  69 0030 1ED0     		beq	.L4
 429:HALLIB/Src/stm32f7xx_hal_crc.c ****    {
 430:HALLIB/Src/stm32f7xx_hal_crc.c ****      if(BufferLength%4 == 1)
  70              		.loc 1 430 0
  71 0032 012A     		cmp	r2, #1
  72 0034 03D1     		bne	.L5
 431:HALLIB/Src/stm32f7xx_hal_crc.c ****      {
 432:HALLIB/Src/stm32f7xx_hal_crc.c ****        *(__IO uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
  73              		.loc 1 432 0
  74 0036 0368     		ldr	r3, [r0]
  75 0038 11F82450 		ldrb	r5, [r1, r4, lsl #2]	@ zero_extendqisi2
  76 003c 1D70     		strb	r5, [r3]
  77              	.L5:
 433:HALLIB/Src/stm32f7xx_hal_crc.c ****      }
 434:HALLIB/Src/stm32f7xx_hal_crc.c ****      if(BufferLength%4 == 2)
  78              		.loc 1 434 0
ARM GAS  /tmp/cc5YpQyF.s 			page 10


  79 003e 022A     		cmp	r2, #2
  80 0040 08D1     		bne	.L6
 435:HALLIB/Src/stm32f7xx_hal_crc.c ****      {
 436:HALLIB/Src/stm32f7xx_hal_crc.c ****        *(__IO uint16_t*) (&hcrc->Instance->DR) = (uint16_t)((uint16_t)((uint16_t)(pBuffer[4*i])<<8)
  81              		.loc 1 436 0
  82 0042 0568     		ldr	r5, [r0]
  83 0044 11F82460 		ldrb	r6, [r1, r4, lsl #2]	@ zero_extendqisi2
  84 0048 01EB8403 		add	r3, r1, r4, lsl #2
  85 004c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  86 004e 43EA0623 		orr	r3, r3, r6, lsl #8
  87 0052 2B80     		strh	r3, [r5]	@ movhi
  88              	.L6:
 437:HALLIB/Src/stm32f7xx_hal_crc.c ****      }
 438:HALLIB/Src/stm32f7xx_hal_crc.c ****      if(BufferLength%4 == 3)
  89              		.loc 1 438 0
  90 0054 032A     		cmp	r2, #3
  91 0056 0BD1     		bne	.L4
 439:HALLIB/Src/stm32f7xx_hal_crc.c ****      {
 440:HALLIB/Src/stm32f7xx_hal_crc.c ****        *(__IO uint16_t*) (&hcrc->Instance->DR) = (uint16_t)((uint16_t)((uint16_t)(pBuffer[4*i])<<8)
  92              		.loc 1 440 0
  93 0058 0268     		ldr	r2, [r0]
  94 005a 11F82450 		ldrb	r5, [r1, r4, lsl #2]	@ zero_extendqisi2
  95 005e 01EB8401 		add	r1, r1, r4, lsl #2
  96              	.LVL5:
  97 0062 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
  98 0064 43EA0523 		orr	r3, r3, r5, lsl #8
  99 0068 1380     		strh	r3, [r2]	@ movhi
 441:HALLIB/Src/stm32f7xx_hal_crc.c ****        *(__IO uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 100              		.loc 1 441 0
 101 006a 0368     		ldr	r3, [r0]
 102 006c 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 103 006e 1A70     		strb	r2, [r3]
 104              	.L4:
 442:HALLIB/Src/stm32f7xx_hal_crc.c ****      }
 443:HALLIB/Src/stm32f7xx_hal_crc.c ****    }
 444:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 445:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Return the CRC computed value */ 
 446:HALLIB/Src/stm32f7xx_hal_crc.c ****   return hcrc->Instance->DR;
 105              		.loc 1 446 0
 106 0070 0368     		ldr	r3, [r0]
 107 0072 1868     		ldr	r0, [r3]
 108              	.LVL6:
 447:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 109              		.loc 1 447 0
 110 0074 F0BC     		pop	{r4, r5, r6, r7}
 111              	.LCFI1:
 112              		.cfi_restore 7
 113              		.cfi_restore 6
 114              		.cfi_restore 5
 115              		.cfi_restore 4
 116              		.cfi_def_cfa_offset 0
 117              	.LVL7:
 118 0076 7047     		bx	lr
 119              		.cfi_endproc
 120              	.LFE142:
 122              		.section	.text.CRC_Handle_16,"ax",%progbits
 123              		.align	2
ARM GAS  /tmp/cc5YpQyF.s 			page 11


 124              		.thumb
 125              		.thumb_func
 127              	CRC_Handle_16:
 128              	.LFB143:
 448:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 449:HALLIB/Src/stm32f7xx_hal_crc.c **** /**             
 450:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @brief  Enter 16-bit input data to the CRC calculator.
 451:HALLIB/Src/stm32f7xx_hal_crc.c ****   *         Specific data handling to optimize processing time.  
 452:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  hcrc CRC handle
 453:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  pBuffer pointer to the input data buffer
 454:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  BufferLength input data buffer length
 455:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
 456:HALLIB/Src/stm32f7xx_hal_crc.c ****   */  
 457:HALLIB/Src/stm32f7xx_hal_crc.c **** static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
 458:HALLIB/Src/stm32f7xx_hal_crc.c **** {
 129              		.loc 1 458 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134              	.LVL8:
 135 0000 70B4     		push	{r4, r5, r6}
 136              	.LCFI2:
 137              		.cfi_def_cfa_offset 12
 138              		.cfi_offset 4, -12
 139              		.cfi_offset 5, -8
 140              		.cfi_offset 6, -4
 141              	.LVL9:
 459:HALLIB/Src/stm32f7xx_hal_crc.c ****   uint32_t i = 0;  /* input data buffer index */
 460:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 461:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
 462:HALLIB/Src/stm32f7xx_hal_crc.c ****    * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
 463:HALLIB/Src/stm32f7xx_hal_crc.c ****    * a correct type handling by the IP */
 464:HALLIB/Src/stm32f7xx_hal_crc.c ****   for(i = 0; i < (BufferLength/2); i++)
 142              		.loc 1 464 0
 143 0002 0023     		movs	r3, #0
 144 0004 09E0     		b	.L9
 145              	.LVL10:
 146              	.L10:
 465:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 466:HALLIB/Src/stm32f7xx_hal_crc.c ****     hcrc->Instance->DR = (((uint32_t)(pBuffer[2*i])<<16) | (uint32_t)(pBuffer[2*i+1]));
 147              		.loc 1 466 0 discriminator 3
 148 0006 0568     		ldr	r5, [r0]
 149 0008 31F82360 		ldrh	r6, [r1, r3, lsl #2]
 150 000c 01EB8304 		add	r4, r1, r3, lsl #2
 151 0010 6488     		ldrh	r4, [r4, #2]
 152 0012 44EA0644 		orr	r4, r4, r6, lsl #16
 153 0016 2C60     		str	r4, [r5]
 464:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 154              		.loc 1 464 0 discriminator 3
 155 0018 0133     		adds	r3, r3, #1
 156              	.LVL11:
 157              	.L9:
 464:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 158              		.loc 1 464 0 is_stmt 0 discriminator 1
 159 001a B3EB520F 		cmp	r3, r2, lsr #1
 160 001e F2D3     		bcc	.L10
ARM GAS  /tmp/cc5YpQyF.s 			page 12


 467:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 468:HALLIB/Src/stm32f7xx_hal_crc.c ****   if((BufferLength%2) != 0)
 161              		.loc 1 468 0 is_stmt 1
 162 0020 12F0010F 		tst	r2, #1
 163 0024 03D0     		beq	.L11
 469:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 470:HALLIB/Src/stm32f7xx_hal_crc.c ****      *(__IO uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 164              		.loc 1 470 0
 165 0026 0268     		ldr	r2, [r0]
 166              	.LVL12:
 167 0028 31F82330 		ldrh	r3, [r1, r3, lsl #2]
 168              	.LVL13:
 169 002c 1380     		strh	r3, [r2]	@ movhi
 170              	.L11:
 471:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 472:HALLIB/Src/stm32f7xx_hal_crc.c ****    
 473:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Return the CRC computed value */ 
 474:HALLIB/Src/stm32f7xx_hal_crc.c ****   return hcrc->Instance->DR;
 171              		.loc 1 474 0
 172 002e 0368     		ldr	r3, [r0]
 173 0030 1868     		ldr	r0, [r3]
 174              	.LVL14:
 475:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 175              		.loc 1 475 0
 176 0032 70BC     		pop	{r4, r5, r6}
 177              	.LCFI3:
 178              		.cfi_restore 6
 179              		.cfi_restore 5
 180              		.cfi_restore 4
 181              		.cfi_def_cfa_offset 0
 182 0034 7047     		bx	lr
 183              		.cfi_endproc
 184              	.LFE143:
 186 0036 00BF     		.section	.text.HAL_CRC_MspInit,"ax",%progbits
 187              		.align	2
 188              		.weak	HAL_CRC_MspInit
 189              		.thumb
 190              		.thumb_func
 192              	HAL_CRC_MspInit:
 193              	.LFB138:
 238:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Prevent unused argument(s) compilation warning */
 194              		.loc 1 238 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              		@ link register save eliminated.
 199              	.LVL15:
 200 0000 7047     		bx	lr
 201              		.cfi_endproc
 202              	.LFE138:
 204 0002 00BF     		.section	.text.HAL_CRC_Init,"ax",%progbits
 205              		.align	2
 206              		.global	HAL_CRC_Init
 207              		.thumb
 208              		.thumb_func
 210              	HAL_CRC_Init:
 211              	.LFB136:
ARM GAS  /tmp/cc5YpQyF.s 			page 13


 117:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Check the CRC handle allocation */
 212              		.loc 1 117 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              	.LVL16:
 119:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 217              		.loc 1 119 0
 218 0000 0028     		cmp	r0, #0
 219 0002 38D0     		beq	.L21
 117:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Check the CRC handle allocation */
 220              		.loc 1 117 0
 221 0004 10B5     		push	{r4, lr}
 222              	.LCFI4:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 4, -8
 225              		.cfi_offset 14, -4
 226 0006 0446     		mov	r4, r0
 127:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 227              		.loc 1 127 0
 228 0008 437F     		ldrb	r3, [r0, #29]	@ zero_extendqisi2
 229 000a 13F0FF0F 		tst	r3, #255
 230 000e 03D1     		bne	.L16
 130:HALLIB/Src/stm32f7xx_hal_crc.c ****     /* Init the low level hardware */
 231              		.loc 1 130 0
 232 0010 0023     		movs	r3, #0
 233 0012 0377     		strb	r3, [r0, #28]
 132:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 234              		.loc 1 132 0
 235 0014 FFF7FEFF 		bl	HAL_CRC_MspInit
 236              	.LVL17:
 237              	.L16:
 136:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 238              		.loc 1 136 0
 239 0018 0223     		movs	r3, #2
 240 001a 6377     		strb	r3, [r4, #29]
 141:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 241              		.loc 1 141 0
 242 001c 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 243 001e 43B9     		cbnz	r3, .L17
 144:HALLIB/Src/stm32f7xx_hal_crc.c ****     MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 244              		.loc 1 144 0
 245 0020 2368     		ldr	r3, [r4]
 246 0022 174A     		ldr	r2, .L24
 247 0024 5A61     		str	r2, [r3, #20]
 145:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 248              		.loc 1 145 0
 249 0026 2268     		ldr	r2, [r4]
 250 0028 9368     		ldr	r3, [r2, #8]
 251 002a 23F01803 		bic	r3, r3, #24
 252 002e 9360     		str	r3, [r2, #8]
 253 0030 05E0     		b	.L18
 254              	.L17:
 150:HALLIB/Src/stm32f7xx_hal_crc.c ****     {
 255              		.loc 1 150 0
 256 0032 E268     		ldr	r2, [r4, #12]
 257 0034 A168     		ldr	r1, [r4, #8]
ARM GAS  /tmp/cc5YpQyF.s 			page 14


 258 0036 2046     		mov	r0, r4
 259 0038 FFF7FEFF 		bl	HAL_CRCEx_Polynomial_Set
 260              	.LVL18:
 261 003c E8B9     		cbnz	r0, .L22
 262              	.L18:
 159:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 263              		.loc 1 159 0
 264 003e 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 265 0040 23B9     		cbnz	r3, .L19
 161:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 266              		.loc 1 161 0
 267 0042 2368     		ldr	r3, [r4]
 268 0044 4FF0FF32 		mov	r2, #-1
 269 0048 1A61     		str	r2, [r3, #16]
 270 004a 02E0     		b	.L20
 271              	.L19:
 165:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 272              		.loc 1 165 0
 273 004c 2368     		ldr	r3, [r4]
 274 004e 2269     		ldr	r2, [r4, #16]
 275 0050 1A61     		str	r2, [r3, #16]
 276              	.L20:
 171:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 277              		.loc 1 171 0
 278 0052 2168     		ldr	r1, [r4]
 279 0054 8B68     		ldr	r3, [r1, #8]
 280 0056 23F06002 		bic	r2, r3, #96
 281 005a 6369     		ldr	r3, [r4, #20]
 282 005c 1343     		orrs	r3, r3, r2
 283 005e 8B60     		str	r3, [r1, #8]
 175:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 284              		.loc 1 175 0
 285 0060 2168     		ldr	r1, [r4]
 286 0062 8B68     		ldr	r3, [r1, #8]
 287 0064 23F08002 		bic	r2, r3, #128
 288 0068 A369     		ldr	r3, [r4, #24]
 289 006a 1343     		orrs	r3, r3, r2
 290 006c 8B60     		str	r3, [r1, #8]
 182:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 291              		.loc 1 182 0
 292 006e 0123     		movs	r3, #1
 293 0070 6377     		strb	r3, [r4, #29]
 185:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 294              		.loc 1 185 0
 295 0072 0020     		movs	r0, #0
 296 0074 10BD     		pop	{r4, pc}
 297              	.LVL19:
 298              	.L21:
 299              	.LCFI5:
 300              		.cfi_def_cfa_offset 0
 301              		.cfi_restore 4
 302              		.cfi_restore 14
 121:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 303              		.loc 1 121 0
 304 0076 0120     		movs	r0, #1
 305              	.LVL20:
 186:HALLIB/Src/stm32f7xx_hal_crc.c **** 
ARM GAS  /tmp/cc5YpQyF.s 			page 15


 306              		.loc 1 186 0
 307 0078 7047     		bx	lr
 308              	.LVL21:
 309              	.L22:
 310              	.LCFI6:
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 4, -8
 313              		.cfi_offset 14, -4
 152:HALLIB/Src/stm32f7xx_hal_crc.c ****     }
 314              		.loc 1 152 0
 315 007a 0120     		movs	r0, #1
 186:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 316              		.loc 1 186 0
 317 007c 10BD     		pop	{r4, pc}
 318              	.LVL22:
 319              	.L25:
 320 007e 00BF     		.align	2
 321              	.L24:
 322 0080 B71DC104 		.word	79764919
 323              		.cfi_endproc
 324              	.LFE136:
 326              		.section	.text.HAL_CRC_MspDeInit,"ax",%progbits
 327              		.align	2
 328              		.weak	HAL_CRC_MspDeInit
 329              		.thumb
 330              		.thumb_func
 332              	HAL_CRC_MspDeInit:
 333              	.LFB139:
 253:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Prevent unused argument(s) compilation warning */
 334              		.loc 1 253 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339              	.LVL23:
 340 0000 7047     		bx	lr
 341              		.cfi_endproc
 342              	.LFE139:
 344 0002 00BF     		.section	.text.HAL_CRC_DeInit,"ax",%progbits
 345              		.align	2
 346              		.global	HAL_CRC_DeInit
 347              		.thumb
 348              		.thumb_func
 350              	HAL_CRC_DeInit:
 351              	.LFB137:
 194:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Check the CRC handle allocation */
 352              		.loc 1 194 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              	.LVL24:
 196:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 357              		.loc 1 196 0
 358 0000 B0B1     		cbz	r0, .L29
 194:HALLIB/Src/stm32f7xx_hal_crc.c ****   /* Check the CRC handle allocation */
 359              		.loc 1 194 0
 360 0002 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/cc5YpQyF.s 			page 16


 361              	.LCFI7:
 362              		.cfi_def_cfa_offset 16
 363              		.cfi_offset 3, -16
 364              		.cfi_offset 4, -12
 365              		.cfi_offset 5, -8
 366              		.cfi_offset 14, -4
 205:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 367              		.loc 1 205 0
 368 0004 427F     		ldrb	r2, [r0, #29]	@ zero_extendqisi2
 369 0006 D2B2     		uxtb	r2, r2
 370 0008 022A     		cmp	r2, #2
 371 000a 13D0     		beq	.L30
 372 000c 0446     		mov	r4, r0
 211:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 373              		.loc 1 211 0
 374 000e 0223     		movs	r3, #2
 375 0010 4377     		strb	r3, [r0, #29]
 214:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 376              		.loc 1 214 0
 377 0012 0268     		ldr	r2, [r0]
 378 0014 9368     		ldr	r3, [r2, #8]
 379 0016 43F00103 		orr	r3, r3, #1
 380 001a 9360     		str	r3, [r2, #8]
 217:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 381              		.loc 1 217 0
 382 001c 0368     		ldr	r3, [r0]
 383 001e 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 384 0020 0025     		movs	r5, #0
 385 0022 1D71     		strb	r5, [r3, #4]
 220:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 386              		.loc 1 220 0
 387 0024 FFF7FEFF 		bl	HAL_CRC_MspDeInit
 388              	.LVL25:
 223:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 389              		.loc 1 223 0
 390 0028 6577     		strb	r5, [r4, #29]
 226:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 391              		.loc 1 226 0
 392 002a 2577     		strb	r5, [r4, #28]
 229:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 393              		.loc 1 229 0
 394 002c 2846     		mov	r0, r5
 395 002e 38BD     		pop	{r3, r4, r5, pc}
 396              	.LVL26:
 397              	.L29:
 398              	.LCFI8:
 399              		.cfi_def_cfa_offset 0
 400              		.cfi_restore 3
 401              		.cfi_restore 4
 402              		.cfi_restore 5
 403              		.cfi_restore 14
 198:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 404              		.loc 1 198 0
 405 0030 0120     		movs	r0, #1
 406              	.LVL27:
 230:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 407              		.loc 1 230 0
ARM GAS  /tmp/cc5YpQyF.s 			page 17


 408 0032 7047     		bx	lr
 409              	.LVL28:
 410              	.L30:
 411              	.LCFI9:
 412              		.cfi_def_cfa_offset 16
 413              		.cfi_offset 3, -16
 414              		.cfi_offset 4, -12
 415              		.cfi_offset 5, -8
 416              		.cfi_offset 14, -4
 207:HALLIB/Src/stm32f7xx_hal_crc.c ****   }
 417              		.loc 1 207 0
 418 0034 0220     		movs	r0, #2
 419              	.LVL29:
 230:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 420              		.loc 1 230 0
 421 0036 38BD     		pop	{r3, r4, r5, pc}
 422              		.cfi_endproc
 423              	.LFE137:
 425              		.section	.text.HAL_CRC_Accumulate,"ax",%progbits
 426              		.align	2
 427              		.global	HAL_CRC_Accumulate
 428              		.thumb
 429              		.thumb_func
 431              	HAL_CRC_Accumulate:
 432              	.LFB140:
 302:HALLIB/Src/stm32f7xx_hal_crc.c ****   uint32_t index = 0; /* CRC input data buffer index */
 433              		.loc 1 302 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437              	.LVL30:
 438 0000 38B5     		push	{r3, r4, r5, lr}
 439              	.LCFI10:
 440              		.cfi_def_cfa_offset 16
 441              		.cfi_offset 3, -16
 442              		.cfi_offset 4, -12
 443              		.cfi_offset 5, -8
 444              		.cfi_offset 14, -4
 445              	.LVL31:
 307:HALLIB/Src/stm32f7xx_hal_crc.c ****     
 446              		.loc 1 307 0
 447 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 448 0004 012B     		cmp	r3, #1
 449 0006 24D0     		beq	.L39
 450 0008 0446     		mov	r4, r0
 307:HALLIB/Src/stm32f7xx_hal_crc.c ****     
 451              		.loc 1 307 0 is_stmt 0 discriminator 2
 452 000a 0123     		movs	r3, #1
 453 000c 0377     		strb	r3, [r0, #28]
 310:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 454              		.loc 1 310 0 is_stmt 1 discriminator 2
 455 000e 0223     		movs	r3, #2
 456 0010 4377     		strb	r3, [r0, #29]
 312:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 457              		.loc 1 312 0 discriminator 2
 458 0012 036A     		ldr	r3, [r0, #32]
 459 0014 022B     		cmp	r3, #2
ARM GAS  /tmp/cc5YpQyF.s 			page 18


 460 0016 13D0     		beq	.L35
 461 0018 032B     		cmp	r3, #3
 462 001a 08D0     		beq	.L41
 463 001c 012B     		cmp	r3, #1
 464 001e 12D1     		bne	.L42
 465 0020 0BE0     		b	.L37
 466              	.LVL32:
 467              	.L38:
 318:HALLIB/Src/stm32f7xx_hal_crc.c ****       }
 468              		.loc 1 318 0 discriminator 3
 469 0022 2068     		ldr	r0, [r4]
 470 0024 51F82350 		ldr	r5, [r1, r3, lsl #2]
 471 0028 0560     		str	r5, [r0]
 316:HALLIB/Src/stm32f7xx_hal_crc.c ****       {
 472              		.loc 1 316 0 discriminator 3
 473 002a 0133     		adds	r3, r3, #1
 474              	.LVL33:
 475 002c 00E0     		b	.L36
 476              	.LVL34:
 477              	.L41:
 312:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 478              		.loc 1 312 0
 479 002e 0023     		movs	r3, #0
 480              	.LVL35:
 481              	.L36:
 316:HALLIB/Src/stm32f7xx_hal_crc.c ****       {
 482              		.loc 1 316 0 discriminator 1
 483 0030 9342     		cmp	r3, r2
 484 0032 F6D3     		bcc	.L38
 320:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 485              		.loc 1 320 0
 486 0034 2368     		ldr	r3, [r4]
 487              	.LVL36:
 488 0036 1868     		ldr	r0, [r3]
 489              	.LVL37:
 321:HALLIB/Src/stm32f7xx_hal_crc.c ****       
 490              		.loc 1 321 0
 491 0038 06E0     		b	.L34
 492              	.LVL38:
 493              	.L37:
 324:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 494              		.loc 1 324 0
 495 003a FFF7FEFF 		bl	CRC_Handle_8
 496              	.LVL39:
 325:HALLIB/Src/stm32f7xx_hal_crc.c ****       
 497              		.loc 1 325 0
 498 003e 03E0     		b	.L34
 499              	.LVL40:
 500              	.L35:
 328:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 501              		.loc 1 328 0
 502 0040 FFF7FEFF 		bl	CRC_Handle_16
 503              	.LVL41:
 329:HALLIB/Src/stm32f7xx_hal_crc.c ****     default:
 504              		.loc 1 329 0
 505 0044 00E0     		b	.L34
 506              	.LVL42:
ARM GAS  /tmp/cc5YpQyF.s 			page 19


 507              	.L42:
 304:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 508              		.loc 1 304 0
 509 0046 0020     		movs	r0, #0
 510              	.LVL43:
 511              	.L34:
 335:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 512              		.loc 1 335 0
 513 0048 0123     		movs	r3, #1
 514 004a 6377     		strb	r3, [r4, #29]
 338:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 515              		.loc 1 338 0
 516 004c 0023     		movs	r3, #0
 517 004e 2377     		strb	r3, [r4, #28]
 341:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 518              		.loc 1 341 0
 519 0050 38BD     		pop	{r3, r4, r5, pc}
 520              	.LVL44:
 521              	.L39:
 307:HALLIB/Src/stm32f7xx_hal_crc.c ****     
 522              		.loc 1 307 0
 523 0052 0220     		movs	r0, #2
 524              	.LVL45:
 342:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 525              		.loc 1 342 0
 526 0054 38BD     		pop	{r3, r4, r5, pc}
 527              		.cfi_endproc
 528              	.LFE140:
 530 0056 00BF     		.section	.text.HAL_CRC_Calculate,"ax",%progbits
 531              		.align	2
 532              		.global	HAL_CRC_Calculate
 533              		.thumb
 534              		.thumb_func
 536              	HAL_CRC_Calculate:
 537              	.LFB141:
 360:HALLIB/Src/stm32f7xx_hal_crc.c ****   uint32_t index = 0; /* CRC input data buffer index */
 538              		.loc 1 360 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              	.LVL46:
 543 0000 38B5     		push	{r3, r4, r5, lr}
 544              	.LCFI11:
 545              		.cfi_def_cfa_offset 16
 546              		.cfi_offset 3, -16
 547              		.cfi_offset 4, -12
 548              		.cfi_offset 5, -8
 549              		.cfi_offset 14, -4
 550              	.LVL47:
 365:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 551              		.loc 1 365 0
 552 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 553 0004 012B     		cmp	r3, #1
 554 0006 2BD0     		beq	.L51
 555 0008 0446     		mov	r4, r0
 365:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 556              		.loc 1 365 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/cc5YpQyF.s 			page 20


 557 000a 0123     		movs	r3, #1
 558 000c 0377     		strb	r3, [r0, #28]
 368:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 559              		.loc 1 368 0 is_stmt 1 discriminator 2
 560 000e 0223     		movs	r3, #2
 561 0010 4377     		strb	r3, [r0, #29]
 372:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 562              		.loc 1 372 0 discriminator 2
 563 0012 0068     		ldr	r0, [r0]
 564              	.LVL48:
 565 0014 8368     		ldr	r3, [r0, #8]
 566 0016 43F00103 		orr	r3, r3, #1
 567 001a 8360     		str	r3, [r0, #8]
 374:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 568              		.loc 1 374 0 discriminator 2
 569 001c 236A     		ldr	r3, [r4, #32]
 570 001e 022B     		cmp	r3, #2
 571 0020 14D0     		beq	.L47
 572 0022 032B     		cmp	r3, #3
 573 0024 08D0     		beq	.L53
 574 0026 012B     		cmp	r3, #1
 575 0028 14D1     		bne	.L54
 576 002a 0BE0     		b	.L49
 577              	.LVL49:
 578              	.L50:
 380:HALLIB/Src/stm32f7xx_hal_crc.c ****       }
 579              		.loc 1 380 0 discriminator 3
 580 002c 2068     		ldr	r0, [r4]
 581 002e 51F82350 		ldr	r5, [r1, r3, lsl #2]
 582 0032 0560     		str	r5, [r0]
 378:HALLIB/Src/stm32f7xx_hal_crc.c ****       {
 583              		.loc 1 378 0 discriminator 3
 584 0034 0133     		adds	r3, r3, #1
 585              	.LVL50:
 586 0036 00E0     		b	.L48
 587              	.LVL51:
 588              	.L53:
 374:HALLIB/Src/stm32f7xx_hal_crc.c ****   {
 589              		.loc 1 374 0
 590 0038 0023     		movs	r3, #0
 591              	.LVL52:
 592              	.L48:
 378:HALLIB/Src/stm32f7xx_hal_crc.c ****       {
 593              		.loc 1 378 0 discriminator 1
 594 003a 9342     		cmp	r3, r2
 595 003c F6D3     		bcc	.L50
 382:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 596              		.loc 1 382 0
 597 003e 2368     		ldr	r3, [r4]
 598              	.LVL53:
 599 0040 1868     		ldr	r0, [r3]
 600              	.LVL54:
 383:HALLIB/Src/stm32f7xx_hal_crc.c ****       
 601              		.loc 1 383 0
 602 0042 08E0     		b	.L46
 603              	.LVL55:
 604              	.L49:
ARM GAS  /tmp/cc5YpQyF.s 			page 21


 387:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 605              		.loc 1 387 0
 606 0044 2046     		mov	r0, r4
 607 0046 FFF7FEFF 		bl	CRC_Handle_8
 608              	.LVL56:
 388:HALLIB/Src/stm32f7xx_hal_crc.c ****       
 609              		.loc 1 388 0
 610 004a 04E0     		b	.L46
 611              	.LVL57:
 612              	.L47:
 392:HALLIB/Src/stm32f7xx_hal_crc.c ****       break;
 613              		.loc 1 392 0
 614 004c 2046     		mov	r0, r4
 615 004e FFF7FEFF 		bl	CRC_Handle_16
 616              	.LVL58:
 393:HALLIB/Src/stm32f7xx_hal_crc.c ****     default:
 617              		.loc 1 393 0
 618 0052 00E0     		b	.L46
 619              	.LVL59:
 620              	.L54:
 362:HALLIB/Src/stm32f7xx_hal_crc.c ****     
 621              		.loc 1 362 0
 622 0054 0020     		movs	r0, #0
 623              	.LVL60:
 624              	.L46:
 399:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 625              		.loc 1 399 0
 626 0056 0123     		movs	r3, #1
 627 0058 6377     		strb	r3, [r4, #29]
 402:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 628              		.loc 1 402 0
 629 005a 0023     		movs	r3, #0
 630 005c 2377     		strb	r3, [r4, #28]
 405:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 631              		.loc 1 405 0
 632 005e 38BD     		pop	{r3, r4, r5, pc}
 633              	.LVL61:
 634              	.L51:
 365:HALLIB/Src/stm32f7xx_hal_crc.c ****   
 635              		.loc 1 365 0
 636 0060 0220     		movs	r0, #2
 637              	.LVL62:
 406:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 638              		.loc 1 406 0
 639 0062 38BD     		pop	{r3, r4, r5, pc}
 640              		.cfi_endproc
 641              	.LFE141:
 643              		.section	.text.HAL_CRC_GetState,"ax",%progbits
 644              		.align	2
 645              		.global	HAL_CRC_GetState
 646              		.thumb
 647              		.thumb_func
 649              	HAL_CRC_GetState:
 650              	.LFB144:
 476:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 477:HALLIB/Src/stm32f7xx_hal_crc.c **** /**
 478:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @}
ARM GAS  /tmp/cc5YpQyF.s 			page 22


 479:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 480:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 481:HALLIB/Src/stm32f7xx_hal_crc.c **** /** @defgroup HAL_CRC_Group3 Peripheral State functions 
 482:HALLIB/Src/stm32f7xx_hal_crc.c ****   *  @brief    Peripheral State functions. 
 483:HALLIB/Src/stm32f7xx_hal_crc.c ****   *
 484:HALLIB/Src/stm32f7xx_hal_crc.c **** @verbatim   
 485:HALLIB/Src/stm32f7xx_hal_crc.c ****  ==============================================================================
 486:HALLIB/Src/stm32f7xx_hal_crc.c ****                       ##### Peripheral State functions #####
 487:HALLIB/Src/stm32f7xx_hal_crc.c ****  ==============================================================================  
 488:HALLIB/Src/stm32f7xx_hal_crc.c ****     [..]
 489:HALLIB/Src/stm32f7xx_hal_crc.c ****     This subsection permits to get in run-time the status of the peripheral 
 490:HALLIB/Src/stm32f7xx_hal_crc.c ****     and the data flow.
 491:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 492:HALLIB/Src/stm32f7xx_hal_crc.c **** @endverbatim
 493:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @{
 494:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 495:HALLIB/Src/stm32f7xx_hal_crc.c **** 
 496:HALLIB/Src/stm32f7xx_hal_crc.c **** /**
 497:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @brief  Return the CRC state.
 498:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @param  hcrc CRC handle
 499:HALLIB/Src/stm32f7xx_hal_crc.c ****   * @retval HAL state
 500:HALLIB/Src/stm32f7xx_hal_crc.c ****   */
 501:HALLIB/Src/stm32f7xx_hal_crc.c **** HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
 502:HALLIB/Src/stm32f7xx_hal_crc.c **** {
 651              		.loc 1 502 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              		@ link register save eliminated.
 656              	.LVL63:
 503:HALLIB/Src/stm32f7xx_hal_crc.c ****   return hcrc->State;
 657              		.loc 1 503 0
 658 0000 407F     		ldrb	r0, [r0, #29]	@ zero_extendqisi2
 659              	.LVL64:
 504:HALLIB/Src/stm32f7xx_hal_crc.c **** }
 660              		.loc 1 504 0
 661 0002 7047     		bx	lr
 662              		.cfi_endproc
 663              	.LFE144:
 665              		.text
 666              	.Letext0:
 667              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 668              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 669              		.file 4 "Inc/stm32f767xx.h"
 670              		.file 5 "HALLIB/Inc/stm32f7xx_hal_def.h"
 671              		.file 6 "HALLIB/Inc/stm32f7xx_hal_crc.h"
 672              		.file 7 "CORE/core_cm7.h"
 673              		.file 8 "HALLIB/Inc/stm32f7xx_hal_crc_ex.h"
ARM GAS  /tmp/cc5YpQyF.s 			page 23


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_crc.c
     /tmp/cc5YpQyF.s:21     .text.CRC_Handle_8:00000000 $t
     /tmp/cc5YpQyF.s:25     .text.CRC_Handle_8:00000000 CRC_Handle_8
     /tmp/cc5YpQyF.s:123    .text.CRC_Handle_16:00000000 $t
     /tmp/cc5YpQyF.s:127    .text.CRC_Handle_16:00000000 CRC_Handle_16
     /tmp/cc5YpQyF.s:187    .text.HAL_CRC_MspInit:00000000 $t
     /tmp/cc5YpQyF.s:192    .text.HAL_CRC_MspInit:00000000 HAL_CRC_MspInit
     /tmp/cc5YpQyF.s:205    .text.HAL_CRC_Init:00000000 $t
     /tmp/cc5YpQyF.s:210    .text.HAL_CRC_Init:00000000 HAL_CRC_Init
     /tmp/cc5YpQyF.s:322    .text.HAL_CRC_Init:00000080 $d
     /tmp/cc5YpQyF.s:327    .text.HAL_CRC_MspDeInit:00000000 $t
     /tmp/cc5YpQyF.s:332    .text.HAL_CRC_MspDeInit:00000000 HAL_CRC_MspDeInit
     /tmp/cc5YpQyF.s:345    .text.HAL_CRC_DeInit:00000000 $t
     /tmp/cc5YpQyF.s:350    .text.HAL_CRC_DeInit:00000000 HAL_CRC_DeInit
     /tmp/cc5YpQyF.s:426    .text.HAL_CRC_Accumulate:00000000 $t
     /tmp/cc5YpQyF.s:431    .text.HAL_CRC_Accumulate:00000000 HAL_CRC_Accumulate
     /tmp/cc5YpQyF.s:531    .text.HAL_CRC_Calculate:00000000 $t
     /tmp/cc5YpQyF.s:536    .text.HAL_CRC_Calculate:00000000 HAL_CRC_Calculate
     /tmp/cc5YpQyF.s:644    .text.HAL_CRC_GetState:00000000 $t
     /tmp/cc5YpQyF.s:649    .text.HAL_CRC_GetState:00000000 HAL_CRC_GetState
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_CRCEx_Polynomial_Set
