ARM GAS  /tmp/ccmep3G5.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_adc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.ADC_Init,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	ADC_Init:
  26              	.LFB158:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_adc.c"
   1:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_adc.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @file    stm32f7xx_hal_adc.c
   4:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:HALLIB/Src/stm32f7xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   7:HALLIB/Src/stm32f7xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   8:HALLIB/Src/stm32f7xx_hal_adc.c ****   *           + IO operation functions
   9:HALLIB/Src/stm32f7xx_hal_adc.c ****   *           + State and errors functions
  10:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         
  11:HALLIB/Src/stm32f7xx_hal_adc.c ****   @verbatim
  12:HALLIB/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  13:HALLIB/Src/stm32f7xx_hal_adc.c ****                     ##### ADC Peripheral features #####
  14:HALLIB/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_adc.c ****   [..] 
  16:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  17:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Interrupt generation at the end of conversion, end of injected conversion,  
  18:HALLIB/Src/stm32f7xx_hal_adc.c ****       and in case of analog watchdog or overrun events
  19:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Single and continuous conversion modes.
  20:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Scan mode for automatic conversion of channel 0 to channel x.
  21:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Data alignment with in-built data coherency.
  22:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Channel-wise programmable sampling time.
  23:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) External trigger option with configurable polarity for both regular and 
  24:HALLIB/Src/stm32f7xx_hal_adc.c ****       injected conversion.
  25:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Dual/Triple mode (on devices with 2 ADCs or more).
  26:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Configurable DMA data storage in Dual/Triple ADC mode. 
  27:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Configurable delay between conversions in Dual/Triple interleaved mode.
  28:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) ADC conversion type (refer to the datasheets).
  29:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  30:HALLIB/Src/stm32f7xx_hal_adc.c ****       slower speed.
  31:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) ADC input range: VREF(minus) = VIN = VREF(plus).
ARM GAS  /tmp/ccmep3G5.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) DMA request generation during regular channel conversion.
  33:HALLIB/Src/stm32f7xx_hal_adc.c **** 
  34:HALLIB/Src/stm32f7xx_hal_adc.c **** 
  35:HALLIB/Src/stm32f7xx_hal_adc.c ****                      ##### How to use this driver #####
  36:HALLIB/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  37:HALLIB/Src/stm32f7xx_hal_adc.c ****   [..]
  38:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#)Initialize the ADC low level resources by implementing the HAL_ADC_MspInit():
  39:HALLIB/Src/stm32f7xx_hal_adc.c ****        (##) Enable the ADC interface clock using __HAL_RCC_ADC_CLK_ENABLE()
  40:HALLIB/Src/stm32f7xx_hal_adc.c ****        (##) ADC pins configuration
  41:HALLIB/Src/stm32f7xx_hal_adc.c ****              (+++) Enable the clock for the ADC GPIOs using the following function:
  42:HALLIB/Src/stm32f7xx_hal_adc.c ****                    __HAL_RCC_GPIOx_CLK_ENABLE()  
  43:HALLIB/Src/stm32f7xx_hal_adc.c ****              (+++) Configure these ADC pins in analog mode using HAL_GPIO_Init() 
  44:HALLIB/Src/stm32f7xx_hal_adc.c ****        (##) In case of using interrupts (e.g. HAL_ADC_Start_IT())
  45:HALLIB/Src/stm32f7xx_hal_adc.c ****              (+++) Configure the ADC interrupt priority using HAL_NVIC_SetPriority()
  46:HALLIB/Src/stm32f7xx_hal_adc.c ****              (+++) Enable the ADC IRQ handler using HAL_NVIC_EnableIRQ()
  47:HALLIB/Src/stm32f7xx_hal_adc.c ****              (+++) In ADC IRQ handler, call HAL_ADC_IRQHandler()
  48:HALLIB/Src/stm32f7xx_hal_adc.c ****        (##) In case of using DMA to control data transfer (e.g. HAL_ADC_Start_DMA())
  49:HALLIB/Src/stm32f7xx_hal_adc.c ****              (+++) Enable the DMAx interface clock using __HAL_RCC_DMAx_CLK_ENABLE()
  50:HALLIB/Src/stm32f7xx_hal_adc.c ****              (+++) Configure and enable two DMA streams stream for managing data
  51:HALLIB/Src/stm32f7xx_hal_adc.c ****                  transfer from peripheral to memory (output stream)
  52:HALLIB/Src/stm32f7xx_hal_adc.c ****              (+++) Associate the initialized DMA handle to the CRYP DMA handle
  53:HALLIB/Src/stm32f7xx_hal_adc.c ****                  using  __HAL_LINKDMA()
  54:HALLIB/Src/stm32f7xx_hal_adc.c ****              (+++) Configure the priority and enable the NVIC for the transfer complete
  55:HALLIB/Src/stm32f7xx_hal_adc.c ****                  interrupt on the two DMA Streams. The output stream should have higher
  56:HALLIB/Src/stm32f7xx_hal_adc.c ****                  priority than the input stream.
  57:HALLIB/Src/stm32f7xx_hal_adc.c ****                        
  58:HALLIB/Src/stm32f7xx_hal_adc.c ****     *** Configuration of ADC, groups regular/injected, channels parameters ***
  59:HALLIB/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  60:HALLIB/Src/stm32f7xx_hal_adc.c ****   [..]
  61:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Configure the ADC parameters (resolution, data alignment, ...)
  62:HALLIB/Src/stm32f7xx_hal_adc.c ****       and regular group parameters (conversion trigger, sequencer, ...)
  63:HALLIB/Src/stm32f7xx_hal_adc.c ****       using function HAL_ADC_Init().
  64:HALLIB/Src/stm32f7xx_hal_adc.c **** 
  65:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Configure the channels for regular group parameters (channel number, 
  66:HALLIB/Src/stm32f7xx_hal_adc.c ****       channel rank into sequencer, ..., into regular group)
  67:HALLIB/Src/stm32f7xx_hal_adc.c ****       using function HAL_ADC_ConfigChannel().
  68:HALLIB/Src/stm32f7xx_hal_adc.c **** 
  69:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, configure the injected group parameters (conversion trigger, 
  70:HALLIB/Src/stm32f7xx_hal_adc.c ****       sequencer, ..., of injected group)
  71:HALLIB/Src/stm32f7xx_hal_adc.c ****       and the channels for injected group parameters (channel number, 
  72:HALLIB/Src/stm32f7xx_hal_adc.c ****       channel rank into sequencer, ..., into injected group)
  73:HALLIB/Src/stm32f7xx_hal_adc.c ****       using function HAL_ADCEx_InjectedConfigChannel().
  74:HALLIB/Src/stm32f7xx_hal_adc.c **** 
  75:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, configure the analog watchdog parameters (channels
  76:HALLIB/Src/stm32f7xx_hal_adc.c ****       monitored, thresholds, ...) using function HAL_ADC_AnalogWDGConfig().
  77:HALLIB/Src/stm32f7xx_hal_adc.c **** 
  78:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, for devices with several ADC instances: configure the 
  79:HALLIB/Src/stm32f7xx_hal_adc.c ****       multimode parameters using function HAL_ADCEx_MultiModeConfigChannel().
  80:HALLIB/Src/stm32f7xx_hal_adc.c **** 
  81:HALLIB/Src/stm32f7xx_hal_adc.c ****                        *** Execution of ADC conversions ***
  82:HALLIB/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  83:HALLIB/Src/stm32f7xx_hal_adc.c ****   [..]  
  84:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) ADC driver can be used among three modes: polling, interruption,
  85:HALLIB/Src/stm32f7xx_hal_adc.c ****       transfer by DMA.    
  86:HALLIB/Src/stm32f7xx_hal_adc.c **** 
  87:HALLIB/Src/stm32f7xx_hal_adc.c ****      *** Polling mode IO operation ***
  88:HALLIB/Src/stm32f7xx_hal_adc.c ****      =================================
ARM GAS  /tmp/ccmep3G5.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_adc.c ****      [..]    
  90:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start() 
  91:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) Wait for end of conversion using HAL_ADC_PollForConversion(), at this stage
  92:HALLIB/Src/stm32f7xx_hal_adc.c ****            user can specify the value of timeout according to his end application      
  93:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) To read the ADC converted values, use the HAL_ADC_GetValue() function.
  94:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop()
  95:HALLIB/Src/stm32f7xx_hal_adc.c ****        
  96:HALLIB/Src/stm32f7xx_hal_adc.c ****      *** Interrupt mode IO operation ***    
  97:HALLIB/Src/stm32f7xx_hal_adc.c ****      ===================================
  98:HALLIB/Src/stm32f7xx_hal_adc.c ****      [..]    
  99:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_IT() 
 100:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) Use HAL_ADC_IRQHandler() called under ADC_IRQHandler() Interrupt subroutine
 101:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) At ADC end of conversion HAL_ADC_ConvCpltCallback() function is executed and user can 
 102:HALLIB/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 103:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) In case of ADC Error, HAL_ADC_ErrorCallback() function is executed and user can 
 104:HALLIB/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 105:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_IT()     
 106:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 107:HALLIB/Src/stm32f7xx_hal_adc.c ****      *** DMA mode IO operation ***    
 108:HALLIB/Src/stm32f7xx_hal_adc.c ****      ==============================
 109:HALLIB/Src/stm32f7xx_hal_adc.c ****      [..]    
 110:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_DMA(), at this stage the user specify the l
 111:HALLIB/Src/stm32f7xx_hal_adc.c ****            of data to be transferred at each end of conversion 
 112:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) At The end of data transfer by HAL_ADC_ConvCpltCallback() function is executed and user 
 113:HALLIB/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 114:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) In case of transfer Error, HAL_ADC_ErrorCallback() function is executed and user can 
 115:HALLIB/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 116:HALLIB/Src/stm32f7xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_DMA()
 117:HALLIB/Src/stm32f7xx_hal_adc.c ****                     
 118:HALLIB/Src/stm32f7xx_hal_adc.c ****      *** ADC HAL driver macros list ***
 119:HALLIB/Src/stm32f7xx_hal_adc.c ****      ============================================= 
 120:HALLIB/Src/stm32f7xx_hal_adc.c ****      [..]
 121:HALLIB/Src/stm32f7xx_hal_adc.c ****        Below the list of most used macros in ADC HAL driver.
 122:HALLIB/Src/stm32f7xx_hal_adc.c ****        
 123:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE : Enable the ADC peripheral
 124:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE : Disable the ADC peripheral
 125:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE_IT: Enable the ADC end of conversion interrupt
 126:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE_IT: Disable the ADC end of conversion interrupt
 127:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_GET_IT_SOURCE: Check if the specified ADC interrupt source is enabled or disabl
 128:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_CLEAR_FLAG: Clear the ADC's pending flags
 129:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_GET_FLAG: Get the selected ADC's flag status
 130:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) ADC_GET_RESOLUTION: Return resolution bits in CR1 register 
 131:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 132:HALLIB/Src/stm32f7xx_hal_adc.c ****      [..] 
 133:HALLIB/Src/stm32f7xx_hal_adc.c ****        (@) You can refer to the ADC HAL driver header file for more useful macros 
 134:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 135:HALLIB/Src/stm32f7xx_hal_adc.c ****                       *** Deinitialization of ADC ***
 136:HALLIB/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
 137:HALLIB/Src/stm32f7xx_hal_adc.c ****   [..]
 138:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Disable the ADC interface
 139:HALLIB/Src/stm32f7xx_hal_adc.c ****      (++) ADC clock can be hard reset and disabled at RCC top level.
 140:HALLIB/Src/stm32f7xx_hal_adc.c ****      (++) Hard reset of ADC peripherals
 141:HALLIB/Src/stm32f7xx_hal_adc.c ****           using macro __HAL_RCC_ADC_FORCE_RESET(), __HAL_RCC_ADC_RELEASE_RESET().
 142:HALLIB/Src/stm32f7xx_hal_adc.c ****      (++) ADC clock disable using the equivalent macro/functions as configuration step.
 143:HALLIB/Src/stm32f7xx_hal_adc.c ****                (+++) Example:
 144:HALLIB/Src/stm32f7xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 145:HALLIB/Src/stm32f7xx_hal_adc.c ****                    other device clock parameters configuration:
ARM GAS  /tmp/ccmep3G5.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_adc.c ****                (+++) HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
 147:HALLIB/Src/stm32f7xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 148:HALLIB/Src/stm32f7xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
 149:HALLIB/Src/stm32f7xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 150:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 151:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) ADC pins configuration
 152:HALLIB/Src/stm32f7xx_hal_adc.c ****      (++) Disable the clock for the ADC GPIOs using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 153:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 154:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, in case of usage of ADC with interruptions:
 155:HALLIB/Src/stm32f7xx_hal_adc.c ****      (++) Disable the NVIC for ADC using function HAL_NVIC_DisableIRQ(ADCx_IRQn)
 156:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 157:HALLIB/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, in case of usage of DMA:
 158:HALLIB/Src/stm32f7xx_hal_adc.c ****         (++) Deinitialize the DMA using function HAL_DMA_DeInit().
 159:HALLIB/Src/stm32f7xx_hal_adc.c ****         (++) Disable the NVIC for DMA using function HAL_NVIC_DisableIRQ(DMAx_Channelx_IRQn)   
 160:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 161:HALLIB/Src/stm32f7xx_hal_adc.c ****     @endverbatim
 162:HALLIB/Src/stm32f7xx_hal_adc.c ****   ******************************************************************************
 163:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @attention
 164:HALLIB/Src/stm32f7xx_hal_adc.c ****   *
 165:HALLIB/Src/stm32f7xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 166:HALLIB/Src/stm32f7xx_hal_adc.c ****   *
 167:HALLIB/Src/stm32f7xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 168:HALLIB/Src/stm32f7xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 169:HALLIB/Src/stm32f7xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 170:HALLIB/Src/stm32f7xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 171:HALLIB/Src/stm32f7xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 172:HALLIB/Src/stm32f7xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 173:HALLIB/Src/stm32f7xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 174:HALLIB/Src/stm32f7xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 175:HALLIB/Src/stm32f7xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 176:HALLIB/Src/stm32f7xx_hal_adc.c ****   *      without specific prior written permission.
 177:HALLIB/Src/stm32f7xx_hal_adc.c ****   *
 178:HALLIB/Src/stm32f7xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 179:HALLIB/Src/stm32f7xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 180:HALLIB/Src/stm32f7xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 181:HALLIB/Src/stm32f7xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 182:HALLIB/Src/stm32f7xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 183:HALLIB/Src/stm32f7xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 184:HALLIB/Src/stm32f7xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 185:HALLIB/Src/stm32f7xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 186:HALLIB/Src/stm32f7xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 187:HALLIB/Src/stm32f7xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 188:HALLIB/Src/stm32f7xx_hal_adc.c ****   *
 189:HALLIB/Src/stm32f7xx_hal_adc.c ****   ******************************************************************************
 190:HALLIB/Src/stm32f7xx_hal_adc.c ****   */ 
 191:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 192:HALLIB/Src/stm32f7xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 193:HALLIB/Src/stm32f7xx_hal_adc.c **** #include "stm32f7xx_hal.h"
 194:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 195:HALLIB/Src/stm32f7xx_hal_adc.c **** /** @addtogroup STM32F7xx_HAL_Driver
 196:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @{
 197:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 198:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 199:HALLIB/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC ADC
 200:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief ADC driver modules
 201:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @{
 202:HALLIB/Src/stm32f7xx_hal_adc.c ****   */ 
ARM GAS  /tmp/ccmep3G5.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 204:HALLIB/Src/stm32f7xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 205:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 206:HALLIB/Src/stm32f7xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 207:HALLIB/Src/stm32f7xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 208:HALLIB/Src/stm32f7xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 209:HALLIB/Src/stm32f7xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 210:HALLIB/Src/stm32f7xx_hal_adc.c **** /** @addtogroup ADC_Private_Functions
 211:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @{
 212:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 213:HALLIB/Src/stm32f7xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 214:HALLIB/Src/stm32f7xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc);
 215:HALLIB/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 216:HALLIB/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 217:HALLIB/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 218:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 219:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @}
 220:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 221:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 222:HALLIB/Src/stm32f7xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 223:HALLIB/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 224:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @{
 225:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 226:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 227:HALLIB/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions 
 228:HALLIB/Src/stm32f7xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 229:HALLIB/Src/stm32f7xx_hal_adc.c ****  *
 230:HALLIB/Src/stm32f7xx_hal_adc.c **** @verbatim    
 231:HALLIB/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
 232:HALLIB/Src/stm32f7xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 233:HALLIB/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
 234:HALLIB/Src/stm32f7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 235:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 236:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) De-initialize the ADC. 
 237:HALLIB/Src/stm32f7xx_hal_adc.c ****          
 238:HALLIB/Src/stm32f7xx_hal_adc.c **** @endverbatim
 239:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @{
 240:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 241:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 242:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 243:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 244:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         in the ADC_InitStruct and initializes the ADC MSP.
 245:HALLIB/Src/stm32f7xx_hal_adc.c ****   *           
 246:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 247:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         ClockPrescaler, Resolution, Data Alignment and number of conversion), however,
 248:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the rest of the configuration parameters are specific to the regular
 249:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         channels group (scan mode activation, continuous mode activation,
 250:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         External trigger source and edge, DMA continuous request after the  
 251:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         last transfer and End of conversion selection).
 252:HALLIB/Src/stm32f7xx_hal_adc.c ****   *             
 253:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 254:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 255:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 256:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 257:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 258:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 259:HALLIB/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
ARM GAS  /tmp/ccmep3G5.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 261:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check ADC handle */
 262:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(hadc == NULL)
 263:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 264:HALLIB/Src/stm32f7xx_hal_adc.c ****     return HAL_ERROR;
 265:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 266:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 267:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 268:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 269:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 270:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 271:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 272:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 273:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 274:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 275:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 276:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 277:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 278:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 279:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 280:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 281:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 282:HALLIB/Src/stm32f7xx_hal_adc.c ****     assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 283:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 284:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 285:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
 286:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 287:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Initialize ADC error code */
 288:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 289:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 290:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 291:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 292:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Init the low level hardware */
 293:HALLIB/Src/stm32f7xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 294:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 295:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 296:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 297:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* correctly completed.                                                     */
 298:HALLIB/Src/stm32f7xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 299:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 300:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 301:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 302:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 303:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 304:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 305:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC parameters */
 306:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_Init(hadc);
 307:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 308:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to none */
 309:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 310:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 311:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set the ADC state */
 312:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 313:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 314:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 315:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 316:HALLIB/Src/stm32f7xx_hal_adc.c ****   else
ARM GAS  /tmp/ccmep3G5.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 318:HALLIB/Src/stm32f7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 319:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 320:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 321:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Release Lock */
 322:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 323:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 324:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 325:HALLIB/Src/stm32f7xx_hal_adc.c ****   return tmp_hal_status;
 326:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 327:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 328:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 329:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values. 
 330:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 331:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 332:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 333:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 334:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 335:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 336:HALLIB/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 337:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 338:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check ADC handle */
 339:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(hadc == NULL)
 340:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 341:HALLIB/Src/stm32f7xx_hal_adc.c ****     return HAL_ERROR;
 342:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 343:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 344:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 345:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 346:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 347:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set ADC state */
 348:HALLIB/Src/stm32f7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 349:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 350:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 351:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
 352:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 353:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 354:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 355:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* correctly completed.                                                     */
 356:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 357:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 358:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* DeInit the low level hardware */
 359:HALLIB/Src/stm32f7xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 360:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 361:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to none */
 362:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 363:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 364:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 365:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 366:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 367:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 368:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
 369:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 370:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 371:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 372:HALLIB/Src/stm32f7xx_hal_adc.c ****   return tmp_hal_status;
 373:HALLIB/Src/stm32f7xx_hal_adc.c **** }
ARM GAS  /tmp/ccmep3G5.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 375:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 376:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 377:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 378:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 379:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval None
 380:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 381:HALLIB/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 382:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 383:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 384:HALLIB/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
 385:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 386:HALLIB/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_MspInit could be implemented in the user file
 387:HALLIB/Src/stm32f7xx_hal_adc.c ****    */ 
 388:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 389:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 390:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 391:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 392:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 393:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 394:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval None
 395:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 396:HALLIB/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 397:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 398:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 399:HALLIB/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
 400:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 401:HALLIB/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_MspDeInit could be implemented in the user file
 402:HALLIB/Src/stm32f7xx_hal_adc.c ****    */ 
 403:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 404:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 405:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 406:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @}
 407:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 408:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 409:HALLIB/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 410:HALLIB/Src/stm32f7xx_hal_adc.c ****  *  @brief    IO operation functions 
 411:HALLIB/Src/stm32f7xx_hal_adc.c ****  *
 412:HALLIB/Src/stm32f7xx_hal_adc.c **** @verbatim   
 413:HALLIB/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
 414:HALLIB/Src/stm32f7xx_hal_adc.c ****              ##### IO operation functions #####
 415:HALLIB/Src/stm32f7xx_hal_adc.c ****  ===============================================================================  
 416:HALLIB/Src/stm32f7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 417:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Start conversion of regular channel.
 418:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Stop conversion of regular channel.
 419:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Start conversion of regular channel and enable interrupt.
 420:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable interrupt.
 421:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Start conversion of regular channel and enable DMA transfer.
 422:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable DMA transfer.
 423:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Handle ADC interrupt request. 
 424:HALLIB/Src/stm32f7xx_hal_adc.c ****                
 425:HALLIB/Src/stm32f7xx_hal_adc.c **** @endverbatim
 426:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @{
 427:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 428:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 429:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 430:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Enables ADC and starts conversion of the regular channels.
ARM GAS  /tmp/ccmep3G5.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 432:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 433:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 434:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 435:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 436:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 437:HALLIB/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 438:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 439:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 440:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 441:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 442:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 443:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
 444:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 445:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 446:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Enable the ADC peripheral */
 447:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 448:HALLIB/Src/stm32f7xx_hal_adc.c ****   Tstab time the ADC's stabilization */
 449:HALLIB/Src/stm32f7xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 450:HALLIB/Src/stm32f7xx_hal_adc.c ****   {  
 451:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Enable the Peripheral */
 452:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 453:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 454:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Delay for ADC stabilization time */
 455:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
 456:HALLIB/Src/stm32f7xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 457:HALLIB/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 458:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 459:HALLIB/Src/stm32f7xx_hal_adc.c ****       counter--;
 460:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 461:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 462:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 463:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 464:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 465:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 466:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state                                                          */
 467:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 468:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
 469:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 470:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 471:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 472:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 473:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
 474:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* update ADC state.                                                      */
 475:HALLIB/Src/stm32f7xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 476:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 477:HALLIB/Src/stm32f7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 478:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 479:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 480:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 481:HALLIB/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 482:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 483:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 484:HALLIB/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 485:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 486:HALLIB/Src/stm32f7xx_hal_adc.c ****     else
 487:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
ARM GAS  /tmp/ccmep3G5.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC all error code fields */
 489:HALLIB/Src/stm32f7xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 490:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 491:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 492:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
 493:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 494:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 495:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 496:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 497:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
 498:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 499:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 500:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 501:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Check if Multimode enabled */
 502:HALLIB/Src/stm32f7xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 503:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 504:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
 505:HALLIB/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 506:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 507:HALLIB/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 508:HALLIB/Src/stm32f7xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 509:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 510:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 511:HALLIB/Src/stm32f7xx_hal_adc.c ****     else
 512:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 513:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
 514:HALLIB/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 515:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 516:HALLIB/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 517:HALLIB/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 518:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 519:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 520:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 521:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 522:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 523:HALLIB/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
 524:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 525:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 526:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 527:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Disables ADC and stop conversion of regular channels.
 528:HALLIB/Src/stm32f7xx_hal_adc.c ****   * 
 529:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 530:HALLIB/Src/stm32f7xx_hal_adc.c ****   *
 531:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 532:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 533:HALLIB/Src/stm32f7xx_hal_adc.c ****   *
 534:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status.
 535:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 536:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 537:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 538:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 539:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 540:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 541:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
 542:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 543:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 544:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
ARM GAS  /tmp/ccmep3G5.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
 546:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 547:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 548:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 549:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 550:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 551:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 552:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 553:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 554:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 555:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 556:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 557:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
 558:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 559:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 560:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 561:HALLIB/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
 562:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 563:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 564:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 565:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Poll for regular conversion complete
 566:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 567:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         conversion) are cleared by this function.
 568:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 569:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 570:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 571:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 572:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 573:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         be performed on the complete sequence.
 574:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 575:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 576:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.  
 577:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 578:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 579:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 580:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 581:HALLIB/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 582:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 583:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for      */
 584:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* each conversion:                                                       */
 585:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 586:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* several ranks and polling for end of each conversion.                  */
 587:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* For code simplicity sake, this particular case is generalized to       */
 588:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* ADC configured in DMA mode and polling for end of each conversion.     */
 589:HALLIB/Src/stm32f7xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 590:HALLIB/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 591:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 592:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Update ADC state machine to error */
 593:HALLIB/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 594:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 595:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
 596:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 597:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 598:HALLIB/Src/stm32f7xx_hal_adc.c ****     return HAL_ERROR;
 599:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 600:HALLIB/Src/stm32f7xx_hal_adc.c ****  
 601:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Get tick */ 
ARM GAS  /tmp/ccmep3G5.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 603:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 604:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag */
 605:HALLIB/Src/stm32f7xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 606:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 607:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 608:HALLIB/Src/stm32f7xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 609:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 610:HALLIB/Src/stm32f7xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 611:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 612:HALLIB/Src/stm32f7xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 613:HALLIB/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 614:HALLIB/Src/stm32f7xx_hal_adc.c ****         
 615:HALLIB/Src/stm32f7xx_hal_adc.c ****         /* Process unlocked */
 616:HALLIB/Src/stm32f7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 617:HALLIB/Src/stm32f7xx_hal_adc.c ****         
 618:HALLIB/Src/stm32f7xx_hal_adc.c ****         return HAL_TIMEOUT;
 619:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 620:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 621:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 622:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 623:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Clear regular group conversion flag */
 624:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 625:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 626:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Update ADC state machine */
 627:HALLIB/Src/stm32f7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 628:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 629:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 630:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 631:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Note: On STM32F7, there is no independent flag of end of sequence.       */
 632:HALLIB/Src/stm32f7xx_hal_adc.c ****   /*       The test of scan sequence on going is done either with scan        */
 633:HALLIB/Src/stm32f7xx_hal_adc.c ****   /*       sequence disabled or with end of conversion flag set to            */
 634:HALLIB/Src/stm32f7xx_hal_adc.c ****   /*       of end of sequence.                                                */
 635:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 636:HALLIB/Src/stm32f7xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 637:HALLIB/Src/stm32f7xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 638:HALLIB/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 639:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 640:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 641:HALLIB/Src/stm32f7xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 642:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 643:HALLIB/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 644:HALLIB/Src/stm32f7xx_hal_adc.c ****     { 
 645:HALLIB/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 646:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 647:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 648:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 649:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
 650:HALLIB/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
 651:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 652:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 653:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 654:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Poll for conversion event
 655:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 656:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 657:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  EventType the ADC event type.
 658:HALLIB/Src/stm32f7xx_hal_adc.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccmep3G5.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watch Dog event.
 660:HALLIB/Src/stm32f7xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event.
 661:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.   
 662:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 663:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 664:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
 665:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 666:HALLIB/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 667:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 668:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 669:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 670:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
 671:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 672:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Get tick */
 673:HALLIB/Src/stm32f7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 674:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 675:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check selected event flag */
 676:HALLIB/Src/stm32f7xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc,EventType)))
 677:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 678:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Check for the Timeout */
 679:HALLIB/Src/stm32f7xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 680:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 681:HALLIB/Src/stm32f7xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 682:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 683:HALLIB/Src/stm32f7xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 684:HALLIB/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 685:HALLIB/Src/stm32f7xx_hal_adc.c ****         
 686:HALLIB/Src/stm32f7xx_hal_adc.c ****         /* Process unlocked */
 687:HALLIB/Src/stm32f7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 688:HALLIB/Src/stm32f7xx_hal_adc.c ****         
 689:HALLIB/Src/stm32f7xx_hal_adc.c ****         return HAL_TIMEOUT;
 690:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 691:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 692:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 693:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 694:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
 695:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(EventType == ADC_AWD_EVENT)
 696:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 697:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 698:HALLIB/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 699:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 700:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
 701:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 702:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 703:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Overrun event */
 704:HALLIB/Src/stm32f7xx_hal_adc.c ****   else
 705:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 706:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 707:HALLIB/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 708:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to overrun */
 709:HALLIB/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 710:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 711:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear ADC overrun flag */
 712:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 713:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 714:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 715:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
ARM GAS  /tmp/ccmep3G5.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
 717:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 718:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 719:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 720:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 721:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Enables the interrupt and starts ADC conversion of regular channels.
 722:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 723:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 724:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status.
 725:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 726:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
 727:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 728:HALLIB/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 729:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 730:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 731:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 732:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 733:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 734:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
 735:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 736:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 737:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Enable the ADC peripheral */
 738:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 739:HALLIB/Src/stm32f7xx_hal_adc.c ****      Tstab time the ADC's stabilization */
 740:HALLIB/Src/stm32f7xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 741:HALLIB/Src/stm32f7xx_hal_adc.c ****   {  
 742:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Enable the Peripheral */
 743:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 744:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 745:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Delay for ADC stabilization time */
 746:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
 747:HALLIB/Src/stm32f7xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 748:HALLIB/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 749:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 750:HALLIB/Src/stm32f7xx_hal_adc.c ****       counter--;
 751:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 752:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 753:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 754:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 755:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 756:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 757:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state                                                          */
 758:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 759:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
 760:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 761:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 762:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 763:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 764:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
 765:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* update ADC state.                                                      */
 766:HALLIB/Src/stm32f7xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 767:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 768:HALLIB/Src/stm32f7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 769:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 770:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 771:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 772:HALLIB/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
ARM GAS  /tmp/ccmep3G5.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 774:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 775:HALLIB/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 776:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 777:HALLIB/Src/stm32f7xx_hal_adc.c ****     else
 778:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 779:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC all error code fields */
 780:HALLIB/Src/stm32f7xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 781:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 782:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 783:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
 784:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 785:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 786:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 787:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 788:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
 789:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 790:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 791:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 792:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
 793:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 794:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 795:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Check if Multimode enabled */
 796:HALLIB/Src/stm32f7xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 797:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 798:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
 799:HALLIB/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 801:HALLIB/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 802:HALLIB/Src/stm32f7xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 803:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 804:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 805:HALLIB/Src/stm32f7xx_hal_adc.c ****     else
 806:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 807:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
 808:HALLIB/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 809:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 810:HALLIB/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 811:HALLIB/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 812:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 813:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 814:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 815:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 816:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 817:HALLIB/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
 818:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 819:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 820:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 821:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Disables the interrupt and stop ADC conversion of regular channels.
 822:HALLIB/Src/stm32f7xx_hal_adc.c ****   * 
 823:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 824:HALLIB/Src/stm32f7xx_hal_adc.c ****   *
 825:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 826:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 827:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status.
 828:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 829:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/ccmep3G5.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 831:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 832:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 833:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 834:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
 835:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 836:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 837:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 838:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
 839:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 840:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 841:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 842:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 843:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 844:HALLIB/Src/stm32f7xx_hal_adc.c ****   	/* Disable ADC end of conversion interrupt for regular group */
 845:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 846:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 847:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 848:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 849:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 850:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 851:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 852:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 853:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
 854:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 855:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 856:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 857:HALLIB/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
 858:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 859:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 860:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
 861:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
 862:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 863:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 864:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval None
 865:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
 866:HALLIB/Src/stm32f7xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
 867:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 868:HALLIB/Src/stm32f7xx_hal_adc.c ****   uint32_t tmp1 = 0, tmp2 = 0;
 869:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 870:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 871:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 872:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 873:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 874:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 875:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 876:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 877:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
 878:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
 879:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 880:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
 881:HALLIB/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 882:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 883:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
 884:HALLIB/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 885:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 886:HALLIB/Src/stm32f7xx_hal_adc.c ****     
ARM GAS  /tmp/ccmep3G5.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
 888:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
 889:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Note: On STM32F7, there is no independent flag of end of sequence.   */
 890:HALLIB/Src/stm32f7xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
 891:HALLIB/Src/stm32f7xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
 892:HALLIB/Src/stm32f7xx_hal_adc.c ****     /*       of end of sequence.                                            */
 893:HALLIB/Src/stm32f7xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 894:HALLIB/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 895:HALLIB/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 896:HALLIB/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 897:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 898:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
 899:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
 900:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
 901:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
 902:HALLIB/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 903:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 904:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
 905:HALLIB/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 906:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 907:HALLIB/Src/stm32f7xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 908:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 909:HALLIB/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 910:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 911:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 912:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 913:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Conversion complete callback */ 
 914:HALLIB/Src/stm32f7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 915:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 916:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag */
 917:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 918:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 919:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 920:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 921:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 922:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
 923:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
 924:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 925:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
 926:HALLIB/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 927:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 928:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
 929:HALLIB/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 930:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 931:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 932:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group injected  */
 933:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* by external trigger, scan sequence on going or by automatic injected */
 934:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* conversion from group regular (same conditions as group regular      */
 935:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* interruption disabling above).                                       */
 936:HALLIB/Src/stm32f7xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 937:HALLIB/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 938:HALLIB/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 939:HALLIB/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 940:HALLIB/Src/stm32f7xx_hal_adc.c ****        (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 941:HALLIB/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE))))
 942:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 943:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group injected */
ARM GAS  /tmp/ccmep3G5.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 945:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 946:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
 947:HALLIB/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 948:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 949:HALLIB/Src/stm32f7xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 950:HALLIB/Src/stm32f7xx_hal_adc.c ****       { 
 951:HALLIB/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 952:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 953:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 954:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 955:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Conversion complete callback */ 
 956:HALLIB/Src/stm32f7xx_hal_adc.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
 957:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 958:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear injected group conversion flag */
 959:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 960:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 961:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 962:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 963:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 964:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check Analog watchdog flag */
 965:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
 966:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 967:HALLIB/Src/stm32f7xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 968:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 969:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
 970:HALLIB/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 971:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 972:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Level out of window callback */ 
 973:HALLIB/Src/stm32f7xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
 974:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 975:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
 976:HALLIB/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 977:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 978:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 979:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 980:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 981:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 982:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check Overrun flag */
 983:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
 984:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 985:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Note: On STM32F7, ADC overrun can be set through other parameters    */
 986:HALLIB/Src/stm32f7xx_hal_adc.c ****     /*       refer to description of parameter "EOCSelection" for more      */
 987:HALLIB/Src/stm32f7xx_hal_adc.c ****     /*       details.                                                       */
 988:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 989:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to overrun */
 990:HALLIB/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 991:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 992:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear ADC overrun flag */
 993:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 994:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 995:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Error callback */ 
 996:HALLIB/Src/stm32f7xx_hal_adc.c ****     HAL_ADC_ErrorCallback(hadc);
 997:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 998:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear the Overrun flag */
 999:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1000:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
ARM GAS  /tmp/ccmep3G5.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1002:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1003:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1004:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Enables ADC DMA request after last transfer (Single-ADC mode) and enables ADC periphera
1005:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1006:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1007:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  pData The destination Buffer address.
1008:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  Length The length of data to be transferred from ADC peripheral to memory.
1009:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
1010:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1011:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1012:HALLIB/Src/stm32f7xx_hal_adc.c **** {
1013:HALLIB/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
1014:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1015:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1016:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1017:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
1018:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1019:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1020:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1021:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1022:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Enable the ADC peripheral */
1023:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
1024:HALLIB/Src/stm32f7xx_hal_adc.c ****      Tstab time the ADC's stabilization */
1025:HALLIB/Src/stm32f7xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
1026:HALLIB/Src/stm32f7xx_hal_adc.c ****   {  
1027:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Enable the Peripheral */
1028:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1029:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1030:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1031:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1032:HALLIB/Src/stm32f7xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
1033:HALLIB/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
1034:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
1035:HALLIB/Src/stm32f7xx_hal_adc.c ****       counter--;
1036:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
1037:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1038:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1039:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1040:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
1041:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1042:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state                                                          */
1043:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1044:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1045:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1046:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1047:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1048:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1049:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1050:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* update ADC state.                                                      */
1051:HALLIB/Src/stm32f7xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1052:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
1053:HALLIB/Src/stm32f7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1054:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
1055:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1056:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1057:HALLIB/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
ARM GAS  /tmp/ccmep3G5.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
1059:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1060:HALLIB/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1061:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
1062:HALLIB/Src/stm32f7xx_hal_adc.c ****     else
1063:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
1064:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC all error code fields */
1065:HALLIB/Src/stm32f7xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1066:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
1067:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1068:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
1069:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1070:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1071:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);   
1072:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1073:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set the DMA transfer complete callback */
1074:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1075:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1076:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set the DMA half transfer complete callback */
1077:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1078:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1079:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set the DMA error callback */
1080:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1081:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1082:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1083:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
1084:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* start (in case of SW start):                                           */
1085:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1086:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1087:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1088:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1089:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1090:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Enable ADC overrun interrupt */
1091:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1092:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1093:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Enable ADC DMA mode */
1094:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 |= ADC_CR2_DMA;
1095:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1096:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Start the DMA channel */
1097:HALLIB/Src/stm32f7xx_hal_adc.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1098:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1099:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Check if Multimode enabled */
1100:HALLIB/Src/stm32f7xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
1101:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
1102:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
1103:HALLIB/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
1104:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
1105:HALLIB/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1106:HALLIB/Src/stm32f7xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1107:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
1108:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
1109:HALLIB/Src/stm32f7xx_hal_adc.c ****     else
1110:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
1111:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
1112:HALLIB/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
1113:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
1114:HALLIB/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
ARM GAS  /tmp/ccmep3G5.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1116:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
1117:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
1118:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1119:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1120:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1121:HALLIB/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1122:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1123:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1124:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1125:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Disables ADC DMA (Single-ADC mode) and disables ADC peripheral    
1126:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1127:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1128:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
1129:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1130:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1131:HALLIB/Src/stm32f7xx_hal_adc.c **** {
1132:HALLIB/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1133:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1134:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1135:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1136:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1137:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1138:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1139:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1140:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1141:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
1142:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
1143:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1144:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1145:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
1146:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1147:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Disable the selected ADC DMA mode */
1148:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~ADC_CR2_DMA;
1149:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1150:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1151:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1152:HALLIB/Src/stm32f7xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1153:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1154:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1155:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1156:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1157:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
1158:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1159:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1160:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1161:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1162:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1163:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
1164:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1165:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1166:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1167:HALLIB/Src/stm32f7xx_hal_adc.c ****   return tmp_hal_status;
1168:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1169:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1170:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1171:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Gets the converted value from data register of regular channel.
ARM GAS  /tmp/ccmep3G5.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1173:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1174:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval Converted value
1175:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1176:HALLIB/Src/stm32f7xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1177:HALLIB/Src/stm32f7xx_hal_adc.c **** {       
1178:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
1179:HALLIB/Src/stm32f7xx_hal_adc.c ****   return hadc->Instance->DR;
1180:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1181:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1182:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1183:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Regular conversion complete callback in non blocking mode 
1184:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1185:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1186:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval None
1187:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1188:HALLIB/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1189:HALLIB/Src/stm32f7xx_hal_adc.c **** {
1190:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1191:HALLIB/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1192:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1193:HALLIB/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_ConvCpltCallback could be implemented in the user file
1194:HALLIB/Src/stm32f7xx_hal_adc.c ****    */
1195:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1196:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1197:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1198:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Regular conversion half DMA transfer callback in non blocking mode 
1199:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1200:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1201:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval None
1202:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1203:HALLIB/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1204:HALLIB/Src/stm32f7xx_hal_adc.c **** {
1205:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1206:HALLIB/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1207:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1208:HALLIB/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
1209:HALLIB/Src/stm32f7xx_hal_adc.c ****    */
1210:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1211:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1212:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1213:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode 
1214:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1215:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1216:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval None
1217:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1218:HALLIB/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1219:HALLIB/Src/stm32f7xx_hal_adc.c **** {
1220:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1221:HALLIB/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1222:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1223:HALLIB/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
1224:HALLIB/Src/stm32f7xx_hal_adc.c ****    */
1225:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1226:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1227:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1228:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Error ADC callback.
ARM GAS  /tmp/ccmep3G5.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1230:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1231:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
1232:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1233:HALLIB/Src/stm32f7xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1234:HALLIB/Src/stm32f7xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1235:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1236:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1237:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval None
1238:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1239:HALLIB/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1240:HALLIB/Src/stm32f7xx_hal_adc.c **** {
1241:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1242:HALLIB/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1243:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1244:HALLIB/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_ErrorCallback could be implemented in the user file
1245:HALLIB/Src/stm32f7xx_hal_adc.c ****    */
1246:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1247:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1248:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1249:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @}
1250:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1251:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1252:HALLIB/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1253:HALLIB/Src/stm32f7xx_hal_adc.c ****  *  @brief   	Peripheral Control functions 
1254:HALLIB/Src/stm32f7xx_hal_adc.c ****  *
1255:HALLIB/Src/stm32f7xx_hal_adc.c **** @verbatim   
1256:HALLIB/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
1257:HALLIB/Src/stm32f7xx_hal_adc.c ****              ##### Peripheral Control functions #####
1258:HALLIB/Src/stm32f7xx_hal_adc.c ****  ===============================================================================  
1259:HALLIB/Src/stm32f7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1260:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Configure regular channels. 
1261:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Configure injected channels.
1262:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Configure multimode.
1263:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Configure the analog watch dog.
1264:HALLIB/Src/stm32f7xx_hal_adc.c ****       
1265:HALLIB/Src/stm32f7xx_hal_adc.c **** @endverbatim
1266:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @{
1267:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1268:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1269:HALLIB/Src/stm32f7xx_hal_adc.c ****   /**
1270:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
1271:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         rank in the sequencer and its sample time.
1272:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1273:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1274:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  sConfig ADC configuration structure. 
1275:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
1276:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1277:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1278:HALLIB/Src/stm32f7xx_hal_adc.c **** {
1279:HALLIB/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
1280:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1281:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1282:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1283:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1284:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1285:HALLIB/Src/stm32f7xx_hal_adc.c ****   
ARM GAS  /tmp/ccmep3G5.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1287:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1288:HALLIB/Src/stm32f7xx_hal_adc.c **** 			
1289:HALLIB/Src/stm32f7xx_hal_adc.c **** 	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1290:HALLIB/Src/stm32f7xx_hal_adc.c **** 	if (sConfig->Channel > ADC_CHANNEL_9)
1291:HALLIB/Src/stm32f7xx_hal_adc.c **** 	{
1292:HALLIB/Src/stm32f7xx_hal_adc.c **** 		/* Clear the old sample time */
1293:HALLIB/Src/stm32f7xx_hal_adc.c **** 		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
1294:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1295:HALLIB/Src/stm32f7xx_hal_adc.c **** 		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
1296:HALLIB/Src/stm32f7xx_hal_adc.c **** 		{
1297:HALLIB/Src/stm32f7xx_hal_adc.c **** 			/* Set the new sample time */
1298:HALLIB/Src/stm32f7xx_hal_adc.c **** 			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
1299:HALLIB/Src/stm32f7xx_hal_adc.c **** 		}
1300:HALLIB/Src/stm32f7xx_hal_adc.c **** 	  else
1301:HALLIB/Src/stm32f7xx_hal_adc.c **** 	  {	
1302:HALLIB/Src/stm32f7xx_hal_adc.c **** 		  /* Set the new sample time */
1303:HALLIB/Src/stm32f7xx_hal_adc.c **** 		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
1304:HALLIB/Src/stm32f7xx_hal_adc.c **** 	  }
1305:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1306:HALLIB/Src/stm32f7xx_hal_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1307:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1308:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear the old sample time */
1309:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
1310:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1311:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set the new sample time */
1312:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
1313:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1314:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1315:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* For Rank 1 to 6 */
1316:HALLIB/Src/stm32f7xx_hal_adc.c ****   if (sConfig->Rank < 7)
1317:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1318:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1319:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
1320:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1321:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1322:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
1323:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1324:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* For Rank 7 to 12 */
1325:HALLIB/Src/stm32f7xx_hal_adc.c ****   else if (sConfig->Rank < 13)
1326:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1327:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1328:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
1329:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1330:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1331:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
1332:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1333:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* For Rank 13 to 16 */
1334:HALLIB/Src/stm32f7xx_hal_adc.c ****   else
1335:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1336:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1337:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
1338:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1339:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1340:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
1341:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1342:HALLIB/Src/stm32f7xx_hal_adc.c ****   
ARM GAS  /tmp/ccmep3G5.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* if ADC1 Channel_18 is selected enable VBAT Channel */
1344:HALLIB/Src/stm32f7xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
1345:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1346:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Enable the VBAT channel*/
1347:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_VBATE;
1348:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1349:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1350:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VRE
1351:HALLIB/Src/stm32f7xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channe
1352:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1353:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Enable the TSVREFE channel*/
1354:HALLIB/Src/stm32f7xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_TSVREFE;
1355:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1356:HALLIB/Src/stm32f7xx_hal_adc.c ****     if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
1357:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
1358:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Delay for temperature sensor stabilization time */
1359:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Compute number of CPU cycles to wait for */
1360:HALLIB/Src/stm32f7xx_hal_adc.c ****       counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
1361:HALLIB/Src/stm32f7xx_hal_adc.c ****       while(counter != 0)
1362:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
1363:HALLIB/Src/stm32f7xx_hal_adc.c ****         counter--;
1364:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
1365:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
1366:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1367:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1368:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
1369:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1370:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1371:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1372:HALLIB/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1373:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1374:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1375:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1376:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1377:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1378:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         is on going.
1379:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1380:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
1381:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
1382:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1383:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
1384:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1385:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1386:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1387:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
1388:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         that contains the configuration information of ADC analog watchdog.
1389:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status	  
1390:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1391:HALLIB/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1392:HALLIB/Src/stm32f7xx_hal_adc.c **** {
1393:HALLIB/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1394:HALLIB/Src/stm32f7xx_hal_adc.c ****   uint32_t tmp = 0;
1395:HALLIB/Src/stm32f7xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */  
1396:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1397:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1398:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(AnalogWDGConfig->WatchdogMode));
1399:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
ARM GAS  /tmp/ccmep3G5.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1401:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1402:HALLIB/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1403:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp = ADC_GET_RESOLUTION(hadc);
1404:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
1405:HALLIB/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
1406:HALLIB/Src/stm32f7xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */
1407:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1408:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1409:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1410:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1411:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
1412:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1413:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1414:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1415:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1416:HALLIB/Src/stm32f7xx_hal_adc.c ****   else
1417:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1418:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1419:HALLIB/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1420:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1421:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1422:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
1423:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
1424:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1425:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set the analog watchdog enable mode */
1426:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
1427:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1428:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set the high threshold */
1429:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
1430:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1431:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set the low threshold */
1432:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
1433:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1434:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Clear the Analog watchdog channel select bits */
1435:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
1436:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1437:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set the Analog watchdog channel */
1438:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
1439:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1440:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
1441:HALLIB/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1442:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1443:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1444:HALLIB/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1445:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1446:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1447:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1448:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @}
1449:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1450:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1451:HALLIB/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 ADC Peripheral State functions
1452:HALLIB/Src/stm32f7xx_hal_adc.c ****  *  @brief   ADC Peripheral State functions 
1453:HALLIB/Src/stm32f7xx_hal_adc.c ****  *
1454:HALLIB/Src/stm32f7xx_hal_adc.c **** @verbatim   
1455:HALLIB/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
1456:HALLIB/Src/stm32f7xx_hal_adc.c ****             ##### Peripheral State and errors functions #####
ARM GAS  /tmp/ccmep3G5.s 			page 27


1457:HALLIB/Src/stm32f7xx_hal_adc.c ****  ===============================================================================  
1458:HALLIB/Src/stm32f7xx_hal_adc.c ****     [..]
1459:HALLIB/Src/stm32f7xx_hal_adc.c ****     This subsection provides functions allowing to
1460:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Check the ADC state
1461:HALLIB/Src/stm32f7xx_hal_adc.c ****       (+) Check the ADC Error
1462:HALLIB/Src/stm32f7xx_hal_adc.c ****          
1463:HALLIB/Src/stm32f7xx_hal_adc.c **** @endverbatim
1464:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @{
1465:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1466:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1467:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1468:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  return the ADC state
1469:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1470:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1471:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval HAL state
1472:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1473:HALLIB/Src/stm32f7xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1474:HALLIB/Src/stm32f7xx_hal_adc.c **** {
1475:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
1476:HALLIB/Src/stm32f7xx_hal_adc.c ****   return hadc->State;
1477:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1478:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1479:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1480:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Return the ADC error code
1481:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1482:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1483:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval ADC Error Code
1484:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1485:HALLIB/Src/stm32f7xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1486:HALLIB/Src/stm32f7xx_hal_adc.c **** {
1487:HALLIB/Src/stm32f7xx_hal_adc.c ****   return hadc->ErrorCode;
1488:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1489:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1490:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1491:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @}
1492:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1493:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1494:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1495:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @}
1496:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1497:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1498:HALLIB/Src/stm32f7xx_hal_adc.c **** /* Private functions ---------------------------------------------------------*/
1499:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1500:HALLIB/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1501:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @{
1502:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1503:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1504:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1505:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
1506:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         in the ADC_InitStruct without initializing the ADC MSP.       
1507:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1508:HALLIB/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
1509:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval None
1510:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1511:HALLIB/Src/stm32f7xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc)
1512:HALLIB/Src/stm32f7xx_hal_adc.c **** {
  28              		.loc 1 1512 0
ARM GAS  /tmp/ccmep3G5.s 			page 28


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
1513:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set ADC parameters */
1514:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set the ADC clock prescaler */
1515:HALLIB/Src/stm32f7xx_hal_adc.c ****   ADC->CCR &= ~(ADC_CCR_ADCPRE);
  34              		.loc 1 1515 0
  35 0000 484B     		ldr	r3, .L6
  36 0002 5A68     		ldr	r2, [r3, #4]
  37 0004 22F44032 		bic	r2, r2, #196608
  38 0008 5A60     		str	r2, [r3, #4]
1516:HALLIB/Src/stm32f7xx_hal_adc.c ****   ADC->CCR |=  hadc->Init.ClockPrescaler;
  39              		.loc 1 1516 0
  40 000a 5968     		ldr	r1, [r3, #4]
  41 000c 4268     		ldr	r2, [r0, #4]
  42 000e 0A43     		orrs	r2, r2, r1
  43 0010 5A60     		str	r2, [r3, #4]
1517:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1518:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set ADC scan mode */
1519:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
  44              		.loc 1 1519 0
  45 0012 0268     		ldr	r2, [r0]
  46 0014 5368     		ldr	r3, [r2, #4]
  47 0016 23F48073 		bic	r3, r3, #256
  48 001a 5360     		str	r3, [r2, #4]
1520:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
  49              		.loc 1 1520 0
  50 001c 0268     		ldr	r2, [r0]
  51 001e 5368     		ldr	r3, [r2, #4]
  52 0020 0169     		ldr	r1, [r0, #16]
  53 0022 43EA0123 		orr	r3, r3, r1, lsl #8
  54 0026 5360     		str	r3, [r2, #4]
1521:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1522:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set ADC resolution */
1523:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  55              		.loc 1 1523 0
  56 0028 0268     		ldr	r2, [r0]
  57 002a 5368     		ldr	r3, [r2, #4]
  58 002c 23F04073 		bic	r3, r3, #50331648
  59 0030 5360     		str	r3, [r2, #4]
1524:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |=  hadc->Init.Resolution;
  60              		.loc 1 1524 0
  61 0032 0268     		ldr	r2, [r0]
  62 0034 5168     		ldr	r1, [r2, #4]
  63 0036 8368     		ldr	r3, [r0, #8]
  64 0038 0B43     		orrs	r3, r3, r1
  65 003a 5360     		str	r3, [r2, #4]
1525:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1526:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set ADC data alignment */
1527:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  66              		.loc 1 1527 0
  67 003c 0268     		ldr	r2, [r0]
  68 003e 9368     		ldr	r3, [r2, #8]
  69 0040 23F40063 		bic	r3, r3, #2048
  70 0044 9360     		str	r3, [r2, #8]
ARM GAS  /tmp/ccmep3G5.s 			page 29


1528:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= hadc->Init.DataAlign;
  71              		.loc 1 1528 0
  72 0046 0268     		ldr	r2, [r0]
  73 0048 9168     		ldr	r1, [r2, #8]
  74 004a C368     		ldr	r3, [r0, #12]
  75 004c 0B43     		orrs	r3, r3, r1
  76 004e 9360     		str	r3, [r2, #8]
1529:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1530:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Enable external trigger if trigger selection is different of software  */
1531:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* start.                                                                 */
1532:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Note: This configuration keeps the hardware feature of parameter       */
1533:HALLIB/Src/stm32f7xx_hal_adc.c ****   /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
1534:HALLIB/Src/stm32f7xx_hal_adc.c ****   /*       software start.                                                  */
1535:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  77              		.loc 1 1535 0
  78 0050 826A     		ldr	r2, [r0, #40]
  79 0052 354B     		ldr	r3, .L6+4
  80 0054 9A42     		cmp	r2, r3
  81 0056 14D0     		beq	.L2
1536:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1537:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Select external trigger to start conversion */
1538:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
  82              		.loc 1 1538 0
  83 0058 0268     		ldr	r2, [r0]
  84 005a 9368     		ldr	r3, [r2, #8]
  85 005c 23F07063 		bic	r3, r3, #251658240
  86 0060 9360     		str	r3, [r2, #8]
1539:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
  87              		.loc 1 1539 0
  88 0062 0268     		ldr	r2, [r0]
  89 0064 9168     		ldr	r1, [r2, #8]
  90 0066 836A     		ldr	r3, [r0, #40]
  91 0068 0B43     		orrs	r3, r3, r1
  92 006a 9360     		str	r3, [r2, #8]
1540:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1541:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Select external trigger polarity */
1542:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  93              		.loc 1 1542 0
  94 006c 0268     		ldr	r2, [r0]
  95 006e 9368     		ldr	r3, [r2, #8]
  96 0070 23F04053 		bic	r3, r3, #805306368
  97 0074 9360     		str	r3, [r2, #8]
1543:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
  98              		.loc 1 1543 0
  99 0076 0268     		ldr	r2, [r0]
 100 0078 9168     		ldr	r1, [r2, #8]
 101 007a C36A     		ldr	r3, [r0, #44]
 102 007c 0B43     		orrs	r3, r3, r1
 103 007e 9360     		str	r3, [r2, #8]
 104 0080 09E0     		b	.L3
 105              	.L2:
1544:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1545:HALLIB/Src/stm32f7xx_hal_adc.c ****   else
1546:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1547:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Reset the external trigger */
1548:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 106              		.loc 1 1548 0
ARM GAS  /tmp/ccmep3G5.s 			page 30


 107 0082 0268     		ldr	r2, [r0]
 108 0084 9368     		ldr	r3, [r2, #8]
 109 0086 23F07063 		bic	r3, r3, #251658240
 110 008a 9360     		str	r3, [r2, #8]
1549:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 111              		.loc 1 1549 0
 112 008c 0268     		ldr	r2, [r0]
 113 008e 9368     		ldr	r3, [r2, #8]
 114 0090 23F04053 		bic	r3, r3, #805306368
 115 0094 9360     		str	r3, [r2, #8]
 116              	.L3:
1550:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1551:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1552:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Enable or disable ADC continuous conversion mode */
1553:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 117              		.loc 1 1553 0
 118 0096 0268     		ldr	r2, [r0]
 119 0098 9368     		ldr	r3, [r2, #8]
 120 009a 23F00203 		bic	r3, r3, #2
 121 009e 9360     		str	r3, [r2, #8]
1554:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 122              		.loc 1 1554 0
 123 00a0 0268     		ldr	r2, [r0]
 124 00a2 9368     		ldr	r3, [r2, #8]
 125 00a4 8169     		ldr	r1, [r0, #24]
 126 00a6 43EA4103 		orr	r3, r3, r1, lsl #1
 127 00aa 9360     		str	r3, [r2, #8]
1555:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1556:HALLIB/Src/stm32f7xx_hal_adc.c ****   if(hadc->Init.DiscontinuousConvMode != DISABLE)
 128              		.loc 1 1556 0
 129 00ac 036A     		ldr	r3, [r0, #32]
 130 00ae 8BB1     		cbz	r3, .L4
1557:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1558:HALLIB/Src/stm32f7xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
1559:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1560:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
1561:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 131              		.loc 1 1561 0
 132 00b0 0268     		ldr	r2, [r0]
 133 00b2 5368     		ldr	r3, [r2, #4]
 134 00b4 43F40063 		orr	r3, r3, #2048
 135 00b8 5360     		str	r3, [r2, #4]
1562:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1563:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set the number of channels to be converted in discontinuous mode */
1564:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 136              		.loc 1 1564 0
 137 00ba 0268     		ldr	r2, [r0]
 138 00bc 5368     		ldr	r3, [r2, #4]
 139 00be 23F46043 		bic	r3, r3, #57344
 140 00c2 5360     		str	r3, [r2, #4]
1565:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 141              		.loc 1 1565 0
 142 00c4 0168     		ldr	r1, [r0]
 143 00c6 4A68     		ldr	r2, [r1, #4]
 144 00c8 436A     		ldr	r3, [r0, #36]
 145 00ca 013B     		subs	r3, r3, #1
 146 00cc 42EA4333 		orr	r3, r2, r3, lsl #13
ARM GAS  /tmp/ccmep3G5.s 			page 31


 147 00d0 4B60     		str	r3, [r1, #4]
 148 00d2 04E0     		b	.L5
 149              	.L4:
1566:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1567:HALLIB/Src/stm32f7xx_hal_adc.c ****   else
1568:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1569:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
1570:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 150              		.loc 1 1570 0
 151 00d4 0268     		ldr	r2, [r0]
 152 00d6 5368     		ldr	r3, [r2, #4]
 153 00d8 23F40063 		bic	r3, r3, #2048
 154 00dc 5360     		str	r3, [r2, #4]
 155              	.L5:
1571:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1572:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1573:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set ADC number of conversion */
1574:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 156              		.loc 1 1574 0
 157 00de 0268     		ldr	r2, [r0]
 158 00e0 D36A     		ldr	r3, [r2, #44]
 159 00e2 23F47003 		bic	r3, r3, #15728640
 160 00e6 D362     		str	r3, [r2, #44]
1575:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 161              		.loc 1 1575 0
 162 00e8 0168     		ldr	r1, [r0]
 163 00ea CA6A     		ldr	r2, [r1, #44]
 164 00ec C369     		ldr	r3, [r0, #28]
 165 00ee 013B     		subs	r3, r3, #1
 166 00f0 42EA0353 		orr	r3, r2, r3, lsl #20
 167 00f4 CB62     		str	r3, [r1, #44]
1576:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1577:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Enable or disable ADC DMA continuous request */
1578:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 168              		.loc 1 1578 0
 169 00f6 0268     		ldr	r2, [r0]
 170 00f8 9368     		ldr	r3, [r2, #8]
 171 00fa 23F40073 		bic	r3, r3, #512
 172 00fe 9360     		str	r3, [r2, #8]
1579:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 173              		.loc 1 1579 0
 174 0100 0268     		ldr	r2, [r0]
 175 0102 9368     		ldr	r3, [r2, #8]
 176 0104 016B     		ldr	r1, [r0, #48]
 177 0106 43EA4123 		orr	r3, r3, r1, lsl #9
 178 010a 9360     		str	r3, [r2, #8]
1580:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1581:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Enable or disable ADC end of conversion selection */
1582:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 179              		.loc 1 1582 0
 180 010c 0268     		ldr	r2, [r0]
 181 010e 9368     		ldr	r3, [r2, #8]
 182 0110 23F48063 		bic	r3, r3, #1024
 183 0114 9360     		str	r3, [r2, #8]
1583:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 184              		.loc 1 1583 0
 185 0116 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccmep3G5.s 			page 32


 186 0118 9368     		ldr	r3, [r2, #8]
 187 011a 4169     		ldr	r1, [r0, #20]
 188 011c 43EA8123 		orr	r3, r3, r1, lsl #10
 189 0120 9360     		str	r3, [r2, #8]
 190 0122 7047     		bx	lr
 191              	.L7:
 192              		.align	2
 193              	.L6:
 194 0124 00230140 		.word	1073816320
 195 0128 0100000F 		.word	251658241
 196              		.cfi_endproc
 197              	.LFE158:
 199              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 200              		.align	2
 201              		.weak	HAL_ADC_MspInit
 202              		.thumb
 203              		.thumb_func
 205              	HAL_ADC_MspInit:
 206              	.LFB138:
 382:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 207              		.loc 1 382 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              		@ link register save eliminated.
 212              	.LVL1:
 213 0000 7047     		bx	lr
 214              		.cfi_endproc
 215              	.LFE138:
 217 0002 00BF     		.section	.text.HAL_ADC_Init,"ax",%progbits
 218              		.align	2
 219              		.global	HAL_ADC_Init
 220              		.thumb
 221              		.thumb_func
 223              	HAL_ADC_Init:
 224              	.LFB136:
 258:HALLIB/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 225              		.loc 1 258 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              	.LVL2:
 262:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 230              		.loc 1 262 0
 231 0000 18B3     		cbz	r0, .L13
 258:HALLIB/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 232              		.loc 1 258 0
 233 0002 10B5     		push	{r4, lr}
 234              	.LCFI0:
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 4, -8
 237              		.cfi_offset 14, -4
 238 0004 0446     		mov	r4, r0
 285:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 239              		.loc 1 285 0
 240 0006 036C     		ldr	r3, [r0, #64]
 241 0008 23B9     		cbnz	r3, .L11
ARM GAS  /tmp/ccmep3G5.s 			page 33


 288:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 242              		.loc 1 288 0
 243 000a 4364     		str	r3, [r0, #68]
 291:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Init the low level hardware */
 244              		.loc 1 291 0
 245 000c 80F83C30 		strb	r3, [r0, #60]
 293:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 246              		.loc 1 293 0
 247 0010 FFF7FEFF 		bl	HAL_ADC_MspInit
 248              	.LVL3:
 249              	.L11:
 298:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 250              		.loc 1 298 0
 251 0014 236C     		ldr	r3, [r4, #64]
 252 0016 13F0100F 		tst	r3, #16
 253 001a 11D1     		bne	.L14
 301:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 254              		.loc 1 301 0
 255 001c 226C     		ldr	r2, [r4, #64]
 256 001e 0C4B     		ldr	r3, .L17
 257 0020 1340     		ands	r3, r3, r2
 258 0022 43F00203 		orr	r3, r3, #2
 259 0026 2364     		str	r3, [r4, #64]
 306:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 260              		.loc 1 306 0
 261 0028 2046     		mov	r0, r4
 262 002a FFF7FEFF 		bl	ADC_Init
 263              	.LVL4:
 309:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 264              		.loc 1 309 0
 265 002e 0020     		movs	r0, #0
 266 0030 6064     		str	r0, [r4, #68]
 312:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 267              		.loc 1 312 0
 268 0032 236C     		ldr	r3, [r4, #64]
 269 0034 23F00303 		bic	r3, r3, #3
 270 0038 43F00103 		orr	r3, r3, #1
 271 003c 2364     		str	r3, [r4, #64]
 272 003e 00E0     		b	.L12
 273              	.L14:
 318:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 274              		.loc 1 318 0
 275 0040 0120     		movs	r0, #1
 276              	.L12:
 277              	.LVL5:
 322:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 278              		.loc 1 322 0
 279 0042 0023     		movs	r3, #0
 280 0044 84F83C30 		strb	r3, [r4, #60]
 325:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 281              		.loc 1 325 0
 282 0048 10BD     		pop	{r4, pc}
 283              	.LVL6:
 284              	.L13:
 285              	.LCFI1:
 286              		.cfi_def_cfa_offset 0
 287              		.cfi_restore 4
ARM GAS  /tmp/ccmep3G5.s 			page 34


 288              		.cfi_restore 14
 264:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 289              		.loc 1 264 0
 290 004a 0120     		movs	r0, #1
 291              	.LVL7:
 292 004c 7047     		bx	lr
 293              	.L18:
 294 004e 00BF     		.align	2
 295              	.L17:
 296 0050 FDEEFFFF 		.word	-4355
 297              		.cfi_endproc
 298              	.LFE136:
 300              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 301              		.align	2
 302              		.weak	HAL_ADC_MspDeInit
 303              		.thumb
 304              		.thumb_func
 306              	HAL_ADC_MspDeInit:
 307              	.LFB139:
 397:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 308              		.loc 1 397 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 313              	.LVL8:
 314 0000 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE139:
 318 0002 00BF     		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 319              		.align	2
 320              		.global	HAL_ADC_DeInit
 321              		.thumb
 322              		.thumb_func
 324              	HAL_ADC_DeInit:
 325              	.LFB137:
 335:HALLIB/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 326              		.loc 1 335 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330              	.LVL9:
 339:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 331              		.loc 1 339 0
 332 0000 C0B1     		cbz	r0, .L23
 335:HALLIB/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 333              		.loc 1 335 0
 334 0002 10B5     		push	{r4, lr}
 335              	.LCFI2:
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 4, -8
 338              		.cfi_offset 14, -4
 339 0004 0446     		mov	r4, r0
 348:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 340              		.loc 1 348 0
 341 0006 036C     		ldr	r3, [r0, #64]
 342 0008 43F00203 		orr	r3, r3, #2
ARM GAS  /tmp/ccmep3G5.s 			page 35


 343 000c 0364     		str	r3, [r0, #64]
 352:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 344              		.loc 1 352 0
 345 000e 0268     		ldr	r2, [r0]
 346 0010 9368     		ldr	r3, [r2, #8]
 347 0012 23F00103 		bic	r3, r3, #1
 348 0016 9360     		str	r3, [r2, #8]
 356:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 349              		.loc 1 356 0
 350 0018 0368     		ldr	r3, [r0]
 351 001a 9B68     		ldr	r3, [r3, #8]
 352 001c 13F0010F 		tst	r3, #1
 353 0020 04D1     		bne	.L22
 359:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 354              		.loc 1 359 0
 355 0022 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 356              	.LVL10:
 362:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 357              		.loc 1 362 0
 358 0026 0023     		movs	r3, #0
 359 0028 6364     		str	r3, [r4, #68]
 365:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 360              		.loc 1 365 0
 361 002a 2364     		str	r3, [r4, #64]
 362              	.L22:
 369:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 363              		.loc 1 369 0
 364 002c 0020     		movs	r0, #0
 365 002e 84F83C00 		strb	r0, [r4, #60]
 372:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 366              		.loc 1 372 0
 367 0032 10BD     		pop	{r4, pc}
 368              	.LVL11:
 369              	.L23:
 370              	.LCFI3:
 371              		.cfi_def_cfa_offset 0
 372              		.cfi_restore 4
 373              		.cfi_restore 14
 341:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 374              		.loc 1 341 0
 375 0034 0120     		movs	r0, #1
 376              	.LVL12:
 377 0036 7047     		bx	lr
 378              		.cfi_endproc
 379              	.LFE137:
 381              		.section	.text.HAL_ADC_Start,"ax",%progbits
 382              		.align	2
 383              		.global	HAL_ADC_Start
 384              		.thumb
 385              		.thumb_func
 387              	HAL_ADC_Start:
 388              	.LFB140:
 436:HALLIB/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 389              		.loc 1 436 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 8
 392              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccmep3G5.s 			page 36


 393              		@ link register save eliminated.
 394              	.LVL13:
 395 0000 82B0     		sub	sp, sp, #8
 396              	.LCFI4:
 397              		.cfi_def_cfa_offset 8
 437:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 398              		.loc 1 437 0
 399 0002 0023     		movs	r3, #0
 400 0004 0193     		str	r3, [sp, #4]
 444:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 401              		.loc 1 444 0
 402 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 403 000a 012B     		cmp	r3, #1
 404 000c 5FD0     		beq	.L35
 444:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 405              		.loc 1 444 0 is_stmt 0 discriminator 2
 406 000e 0123     		movs	r3, #1
 407 0010 80F83C30 		strb	r3, [r0, #60]
 449:HALLIB/Src/stm32f7xx_hal_adc.c ****   {  
 408              		.loc 1 449 0 is_stmt 1 discriminator 2
 409 0014 0368     		ldr	r3, [r0]
 410 0016 9A68     		ldr	r2, [r3, #8]
 411 0018 12F0010F 		tst	r2, #1
 412 001c 13D1     		bne	.L28
 452:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 413              		.loc 1 452 0
 414 001e 9A68     		ldr	r2, [r3, #8]
 415 0020 42F00102 		orr	r2, r2, #1
 416 0024 9A60     		str	r2, [r3, #8]
 456:HALLIB/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 417              		.loc 1 456 0
 418 0026 2F4B     		ldr	r3, .L41
 419 0028 1B68     		ldr	r3, [r3]
 420 002a 2F4A     		ldr	r2, .L41+4
 421 002c A2FB0323 		umull	r2, r3, r2, r3
 422 0030 9B0C     		lsrs	r3, r3, #18
 423 0032 03EB4303 		add	r3, r3, r3, lsl #1
 424 0036 0193     		str	r3, [sp, #4]
 457:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 425              		.loc 1 457 0
 426 0038 02E0     		b	.L29
 427              	.L30:
 459:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 428              		.loc 1 459 0
 429 003a 019B     		ldr	r3, [sp, #4]
 430 003c 013B     		subs	r3, r3, #1
 431 003e 0193     		str	r3, [sp, #4]
 432              	.L29:
 457:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 433              		.loc 1 457 0
 434 0040 019B     		ldr	r3, [sp, #4]
 435 0042 002B     		cmp	r3, #0
 436 0044 F9D1     		bne	.L30
 437              	.L28:
 464:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 438              		.loc 1 464 0
 439 0046 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccmep3G5.s 			page 37


 440 0048 9368     		ldr	r3, [r2, #8]
 441 004a 13F0010F 		tst	r3, #1
 442 004e 40D0     		beq	.L36
 469:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 443              		.loc 1 469 0
 444 0050 016C     		ldr	r1, [r0, #64]
 445 0052 264B     		ldr	r3, .L41+8
 446 0054 0B40     		ands	r3, r3, r1
 447 0056 43F48073 		orr	r3, r3, #256
 448 005a 0364     		str	r3, [r0, #64]
 475:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 449              		.loc 1 475 0
 450 005c 5368     		ldr	r3, [r2, #4]
 451 005e 13F4806F 		tst	r3, #1024
 452 0062 05D0     		beq	.L31
 477:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 453              		.loc 1 477 0
 454 0064 036C     		ldr	r3, [r0, #64]
 455 0066 23F44053 		bic	r3, r3, #12288
 456 006a 43F48053 		orr	r3, r3, #4096
 457 006e 0364     		str	r3, [r0, #64]
 458              	.L31:
 481:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 459              		.loc 1 481 0
 460 0070 036C     		ldr	r3, [r0, #64]
 461 0072 13F4805F 		tst	r3, #4096
 462 0076 04D0     		beq	.L32
 484:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 463              		.loc 1 484 0
 464 0078 436C     		ldr	r3, [r0, #68]
 465 007a 23F00603 		bic	r3, r3, #6
 466 007e 4364     		str	r3, [r0, #68]
 467 0080 01E0     		b	.L33
 468              	.L32:
 489:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 469              		.loc 1 489 0
 470 0082 0023     		movs	r3, #0
 471 0084 4364     		str	r3, [r0, #68]
 472              	.L33:
 495:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 473              		.loc 1 495 0
 474 0086 0023     		movs	r3, #0
 475 0088 80F83C30 		strb	r3, [r0, #60]
 499:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 476              		.loc 1 499 0
 477 008c 6FF02203 		mvn	r3, #34
 478 0090 1360     		str	r3, [r2]
 502:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 479              		.loc 1 502 0
 480 0092 174B     		ldr	r3, .L41+12
 481 0094 5B68     		ldr	r3, [r3, #4]
 482 0096 13F01F0F 		tst	r3, #31
 483 009a 0AD1     		bne	.L34
 505:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 484              		.loc 1 505 0
 485 009c 0368     		ldr	r3, [r0]
 486 009e 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccmep3G5.s 			page 38


 487 00a0 12F0405F 		tst	r2, #805306368
 488 00a4 17D1     		bne	.L37
 508:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 489              		.loc 1 508 0
 490 00a6 9A68     		ldr	r2, [r3, #8]
 491 00a8 42F08042 		orr	r2, r2, #1073741824
 492 00ac 9A60     		str	r2, [r3, #8]
 523:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 493              		.loc 1 523 0
 494 00ae 0020     		movs	r0, #0
 495              	.LVL14:
 496 00b0 16E0     		b	.L27
 497              	.LVL15:
 498              	.L34:
 514:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 499              		.loc 1 514 0
 500 00b2 0368     		ldr	r3, [r0]
 501 00b4 0F4A     		ldr	r2, .L41+16
 502 00b6 9342     		cmp	r3, r2
 503 00b8 0FD1     		bne	.L38
 514:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 504              		.loc 1 514 0 is_stmt 0 discriminator 1
 505 00ba 9A68     		ldr	r2, [r3, #8]
 506 00bc 12F0405F 		tst	r2, #805306368
 507 00c0 0DD1     		bne	.L39
 517:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 508              		.loc 1 517 0 is_stmt 1
 509 00c2 9A68     		ldr	r2, [r3, #8]
 510 00c4 42F08042 		orr	r2, r2, #1073741824
 511 00c8 9A60     		str	r2, [r3, #8]
 523:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 512              		.loc 1 523 0
 513 00ca 0020     		movs	r0, #0
 514              	.LVL16:
 515 00cc 08E0     		b	.L27
 516              	.LVL17:
 517              	.L35:
 444:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 518              		.loc 1 444 0
 519 00ce 0220     		movs	r0, #2
 520              	.LVL18:
 521 00d0 06E0     		b	.L27
 522              	.LVL19:
 523              	.L36:
 523:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 524              		.loc 1 523 0
 525 00d2 0020     		movs	r0, #0
 526              	.LVL20:
 527 00d4 04E0     		b	.L27
 528              	.LVL21:
 529              	.L37:
 530 00d6 0020     		movs	r0, #0
 531              	.LVL22:
 532 00d8 02E0     		b	.L27
 533              	.LVL23:
 534              	.L38:
 535 00da 0020     		movs	r0, #0
ARM GAS  /tmp/ccmep3G5.s 			page 39


 536              	.LVL24:
 537 00dc 00E0     		b	.L27
 538              	.LVL25:
 539              	.L39:
 540 00de 0020     		movs	r0, #0
 541              	.LVL26:
 542              	.L27:
 524:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 543              		.loc 1 524 0
 544 00e0 02B0     		add	sp, sp, #8
 545              	.LCFI5:
 546              		.cfi_def_cfa_offset 0
 547              		@ sp needed
 548 00e2 7047     		bx	lr
 549              	.L42:
 550              		.align	2
 551              	.L41:
 552 00e4 00000000 		.word	SystemCoreClock
 553 00e8 83DE1B43 		.word	1125899907
 554 00ec FEF8FFFF 		.word	-1794
 555 00f0 00230140 		.word	1073816320
 556 00f4 00200140 		.word	1073815552
 557              		.cfi_endproc
 558              	.LFE140:
 560              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 561              		.align	2
 562              		.global	HAL_ADC_Stop
 563              		.thumb
 564              		.thumb_func
 566              	HAL_ADC_Stop:
 567              	.LFB141:
 537:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 568              		.loc 1 537 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 572              		@ link register save eliminated.
 573              	.LVL27:
 542:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 574              		.loc 1 542 0
 575 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 576 0004 012B     		cmp	r3, #1
 577 0006 17D0     		beq	.L46
 542:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 578              		.loc 1 542 0 is_stmt 0 discriminator 2
 579 0008 0123     		movs	r3, #1
 580 000a 80F83C30 		strb	r3, [r0, #60]
 546:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 581              		.loc 1 546 0 is_stmt 1 discriminator 2
 582 000e 0268     		ldr	r2, [r0]
 583 0010 9368     		ldr	r3, [r2, #8]
 584 0012 23F00103 		bic	r3, r3, #1
 585 0016 9360     		str	r3, [r2, #8]
 549:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 586              		.loc 1 549 0 discriminator 2
 587 0018 0368     		ldr	r3, [r0]
 588 001a 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccmep3G5.s 			page 40


 589 001c 13F0010F 		tst	r3, #1
 590 0020 05D1     		bne	.L45
 552:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 591              		.loc 1 552 0
 592 0022 026C     		ldr	r2, [r0, #64]
 593 0024 054B     		ldr	r3, .L47
 594 0026 1340     		ands	r3, r3, r2
 595 0028 43F00103 		orr	r3, r3, #1
 596 002c 0364     		str	r3, [r0, #64]
 597              	.L45:
 558:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 598              		.loc 1 558 0
 599 002e 0023     		movs	r3, #0
 600 0030 80F83C30 		strb	r3, [r0, #60]
 561:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 601              		.loc 1 561 0
 602 0034 1846     		mov	r0, r3
 603              	.LVL28:
 604 0036 7047     		bx	lr
 605              	.LVL29:
 606              	.L46:
 542:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 607              		.loc 1 542 0
 608 0038 0220     		movs	r0, #2
 609              	.LVL30:
 562:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 610              		.loc 1 562 0
 611 003a 7047     		bx	lr
 612              	.L48:
 613              		.align	2
 614              	.L47:
 615 003c FEEEFFFF 		.word	-4354
 616              		.cfi_endproc
 617              	.LFE141:
 619              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 620              		.align	2
 621              		.global	HAL_ADC_PollForConversion
 622              		.thumb
 623              		.thumb_func
 625              	HAL_ADC_PollForConversion:
 626              	.LFB142:
 580:HALLIB/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 627              		.loc 1 580 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              	.LVL31:
 632 0000 70B5     		push	{r4, r5, r6, lr}
 633              	.LCFI6:
 634              		.cfi_def_cfa_offset 16
 635              		.cfi_offset 4, -16
 636              		.cfi_offset 5, -12
 637              		.cfi_offset 6, -8
 638              		.cfi_offset 14, -4
 639              	.LVL32:
 589:HALLIB/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 640              		.loc 1 589 0
ARM GAS  /tmp/ccmep3G5.s 			page 41


 641 0002 0368     		ldr	r3, [r0]
 642 0004 9A68     		ldr	r2, [r3, #8]
 643 0006 12F4806F 		tst	r2, #1024
 644 000a 0CD0     		beq	.L50
 590:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 645              		.loc 1 590 0 discriminator 1
 646 000c 9B68     		ldr	r3, [r3, #8]
 589:HALLIB/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 647              		.loc 1 589 0 discriminator 1
 648 000e 13F4807F 		tst	r3, #256
 649 0012 08D0     		beq	.L50
 593:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 650              		.loc 1 593 0
 651 0014 036C     		ldr	r3, [r0, #64]
 652 0016 43F02003 		orr	r3, r3, #32
 653 001a 0364     		str	r3, [r0, #64]
 596:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 654              		.loc 1 596 0
 655 001c 0023     		movs	r3, #0
 656 001e 80F83C30 		strb	r3, [r0, #60]
 598:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 657              		.loc 1 598 0
 658 0022 0120     		movs	r0, #1
 659              	.LVL33:
 660 0024 70BD     		pop	{r4, r5, r6, pc}
 661              	.LVL34:
 662              	.L50:
 663 0026 0D46     		mov	r5, r1
 664 0028 0446     		mov	r4, r0
 602:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 665              		.loc 1 602 0
 666 002a FFF7FEFF 		bl	HAL_GetTick
 667              	.LVL35:
 668 002e 0646     		mov	r6, r0
 669              	.LVL36:
 605:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 670              		.loc 1 605 0
 671 0030 11E0     		b	.L53
 672              	.LVL37:
 673              	.L55:
 608:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 674              		.loc 1 608 0
 675 0032 B5F1FF3F 		cmp	r5, #-1
 676 0036 0ED0     		beq	.L53
 610:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 677              		.loc 1 610 0
 678 0038 25B1     		cbz	r5, .L54
 610:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 679              		.loc 1 610 0 is_stmt 0 discriminator 1
 680 003a FFF7FEFF 		bl	HAL_GetTick
 681              	.LVL38:
 682 003e 801B     		subs	r0, r0, r6
 683 0040 8542     		cmp	r5, r0
 684 0042 08D2     		bcs	.L53
 685              	.L54:
 613:HALLIB/Src/stm32f7xx_hal_adc.c ****         
 686              		.loc 1 613 0 is_stmt 1
ARM GAS  /tmp/ccmep3G5.s 			page 42


 687 0044 236C     		ldr	r3, [r4, #64]
 688 0046 43F00403 		orr	r3, r3, #4
 689 004a 2364     		str	r3, [r4, #64]
 616:HALLIB/Src/stm32f7xx_hal_adc.c ****         
 690              		.loc 1 616 0
 691 004c 0023     		movs	r3, #0
 692 004e 84F83C30 		strb	r3, [r4, #60]
 618:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 693              		.loc 1 618 0
 694 0052 0320     		movs	r0, #3
 695 0054 70BD     		pop	{r4, r5, r6, pc}
 696              	.LVL39:
 697              	.L53:
 605:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 698              		.loc 1 605 0
 699 0056 2368     		ldr	r3, [r4]
 700 0058 1A68     		ldr	r2, [r3]
 701 005a 12F0020F 		tst	r2, #2
 702 005e E8D0     		beq	.L55
 624:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 703              		.loc 1 624 0
 704 0060 6FF01202 		mvn	r2, #18
 705 0064 1A60     		str	r2, [r3]
 627:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 706              		.loc 1 627 0
 707 0066 236C     		ldr	r3, [r4, #64]
 708 0068 43F40073 		orr	r3, r3, #512
 709 006c 2364     		str	r3, [r4, #64]
 635:HALLIB/Src/stm32f7xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 710              		.loc 1 635 0
 711 006e 2368     		ldr	r3, [r4]
 712 0070 9A68     		ldr	r2, [r3, #8]
 713 0072 12F0405F 		tst	r2, #805306368
 714 0076 17D1     		bne	.L57
 636:HALLIB/Src/stm32f7xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 715              		.loc 1 636 0 discriminator 1
 716 0078 A269     		ldr	r2, [r4, #24]
 635:HALLIB/Src/stm32f7xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 717              		.loc 1 635 0 discriminator 1
 718 007a BAB9     		cbnz	r2, .L58
 637:HALLIB/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 719              		.loc 1 637 0
 720 007c DA6A     		ldr	r2, [r3, #44]
 636:HALLIB/Src/stm32f7xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 721              		.loc 1 636 0
 722 007e 12F4700F 		tst	r2, #15728640
 723 0082 03D0     		beq	.L56
 638:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 724              		.loc 1 638 0
 725 0084 9B68     		ldr	r3, [r3, #8]
 637:HALLIB/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 726              		.loc 1 637 0
 727 0086 13F4806F 		tst	r3, #1024
 728 008a 11D1     		bne	.L59
 729              	.L56:
 641:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 730              		.loc 1 641 0
ARM GAS  /tmp/ccmep3G5.s 			page 43


 731 008c 236C     		ldr	r3, [r4, #64]
 732 008e 23F48073 		bic	r3, r3, #256
 733 0092 2364     		str	r3, [r4, #64]
 643:HALLIB/Src/stm32f7xx_hal_adc.c ****     { 
 734              		.loc 1 643 0
 735 0094 236C     		ldr	r3, [r4, #64]
 736 0096 13F4805F 		tst	r3, #4096
 737 009a 0BD1     		bne	.L60
 645:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 738              		.loc 1 645 0
 739 009c 236C     		ldr	r3, [r4, #64]
 740 009e 43F00103 		orr	r3, r3, #1
 741 00a2 2364     		str	r3, [r4, #64]
 650:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 742              		.loc 1 650 0
 743 00a4 0020     		movs	r0, #0
 744 00a6 70BD     		pop	{r4, r5, r6, pc}
 745              	.LVL40:
 746              	.L57:
 747 00a8 0020     		movs	r0, #0
 748 00aa 70BD     		pop	{r4, r5, r6, pc}
 749              	.LVL41:
 750              	.L58:
 751 00ac 0020     		movs	r0, #0
 752 00ae 70BD     		pop	{r4, r5, r6, pc}
 753              	.LVL42:
 754              	.L59:
 755 00b0 0020     		movs	r0, #0
 756 00b2 70BD     		pop	{r4, r5, r6, pc}
 757              	.LVL43:
 758              	.L60:
 759 00b4 0020     		movs	r0, #0
 651:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 760              		.loc 1 651 0
 761 00b6 70BD     		pop	{r4, r5, r6, pc}
 762              		.cfi_endproc
 763              	.LFE142:
 765              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 766              		.align	2
 767              		.global	HAL_ADC_PollForEvent
 768              		.thumb
 769              		.thumb_func
 771              	HAL_ADC_PollForEvent:
 772              	.LFB143:
 665:HALLIB/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 773              		.loc 1 665 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              	.LVL44:
 778 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 779              	.LCFI7:
 780              		.cfi_def_cfa_offset 24
 781              		.cfi_offset 3, -24
 782              		.cfi_offset 4, -20
 783              		.cfi_offset 5, -16
 784              		.cfi_offset 6, -12
ARM GAS  /tmp/ccmep3G5.s 			page 44


 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 0002 0446     		mov	r4, r0
 788 0004 0D46     		mov	r5, r1
 789 0006 1646     		mov	r6, r2
 790              	.LVL45:
 673:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 791              		.loc 1 673 0
 792 0008 FFF7FEFF 		bl	HAL_GetTick
 793              	.LVL46:
 794 000c 0746     		mov	r7, r0
 795              	.LVL47:
 676:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 796              		.loc 1 676 0
 797 000e 11E0     		b	.L64
 798              	.LVL48:
 799              	.L67:
 679:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 800              		.loc 1 679 0
 801 0010 B6F1FF3F 		cmp	r6, #-1
 802 0014 0ED0     		beq	.L64
 681:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 803              		.loc 1 681 0
 804 0016 26B1     		cbz	r6, .L65
 681:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 805              		.loc 1 681 0 is_stmt 0 discriminator 1
 806 0018 FFF7FEFF 		bl	HAL_GetTick
 807              	.LVL49:
 808 001c C01B     		subs	r0, r0, r7
 809 001e 8642     		cmp	r6, r0
 810 0020 08D2     		bcs	.L64
 811              	.L65:
 684:HALLIB/Src/stm32f7xx_hal_adc.c ****         
 812              		.loc 1 684 0 is_stmt 1
 813 0022 236C     		ldr	r3, [r4, #64]
 814 0024 43F00403 		orr	r3, r3, #4
 815 0028 2364     		str	r3, [r4, #64]
 687:HALLIB/Src/stm32f7xx_hal_adc.c ****         
 816              		.loc 1 687 0
 817 002a 0023     		movs	r3, #0
 818 002c 84F83C30 		strb	r3, [r4, #60]
 689:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 819              		.loc 1 689 0
 820 0030 0320     		movs	r0, #3
 821 0032 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 822              	.LVL50:
 823              	.L64:
 676:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 824              		.loc 1 676 0
 825 0034 2368     		ldr	r3, [r4]
 826 0036 1A68     		ldr	r2, [r3]
 827 0038 35EA0202 		bics	r2, r5, r2
 828 003c E8D1     		bne	.L67
 695:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 829              		.loc 1 695 0
 830 003e 012D     		cmp	r5, #1
 831 0040 08D1     		bne	.L68
ARM GAS  /tmp/ccmep3G5.s 			page 45


 698:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 832              		.loc 1 698 0
 833 0042 226C     		ldr	r2, [r4, #64]
 834 0044 42F48032 		orr	r2, r2, #65536
 835 0048 2264     		str	r2, [r4, #64]
 701:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 836              		.loc 1 701 0
 837 004a 6FF00102 		mvn	r2, #1
 838 004e 1A60     		str	r2, [r3]
 716:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 839              		.loc 1 716 0
 840 0050 0020     		movs	r0, #0
 841 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 842              	.LVL51:
 843              	.L68:
 707:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to overrun */
 844              		.loc 1 707 0
 845 0054 226C     		ldr	r2, [r4, #64]
 846 0056 42F48062 		orr	r2, r2, #1024
 847 005a 2264     		str	r2, [r4, #64]
 709:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 848              		.loc 1 709 0
 849 005c 626C     		ldr	r2, [r4, #68]
 850 005e 42F00202 		orr	r2, r2, #2
 851 0062 6264     		str	r2, [r4, #68]
 712:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 852              		.loc 1 712 0
 853 0064 6FF02002 		mvn	r2, #32
 854 0068 1A60     		str	r2, [r3]
 716:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 855              		.loc 1 716 0
 856 006a 0020     		movs	r0, #0
 717:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 857              		.loc 1 717 0
 858 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 859              		.cfi_endproc
 860              	.LFE143:
 862 006e 00BF     		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 863              		.align	2
 864              		.global	HAL_ADC_Start_IT
 865              		.thumb
 866              		.thumb_func
 868              	HAL_ADC_Start_IT:
 869              	.LFB144:
 727:HALLIB/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 870              		.loc 1 727 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 8
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              		@ link register save eliminated.
 875              	.LVL52:
 876 0000 82B0     		sub	sp, sp, #8
 877              	.LCFI8:
 878              		.cfi_def_cfa_offset 8
 728:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 879              		.loc 1 728 0
 880 0002 0023     		movs	r3, #0
ARM GAS  /tmp/ccmep3G5.s 			page 46


 881 0004 0193     		str	r3, [sp, #4]
 735:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 882              		.loc 1 735 0
 883 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 884 000a 012B     		cmp	r3, #1
 885 000c 64D0     		beq	.L79
 735:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 886              		.loc 1 735 0 is_stmt 0 discriminator 2
 887 000e 0123     		movs	r3, #1
 888 0010 80F83C30 		strb	r3, [r0, #60]
 740:HALLIB/Src/stm32f7xx_hal_adc.c ****   {  
 889              		.loc 1 740 0 is_stmt 1 discriminator 2
 890 0014 0368     		ldr	r3, [r0]
 891 0016 9A68     		ldr	r2, [r3, #8]
 892 0018 12F0010F 		tst	r2, #1
 893 001c 13D1     		bne	.L72
 743:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 894              		.loc 1 743 0
 895 001e 9A68     		ldr	r2, [r3, #8]
 896 0020 42F00102 		orr	r2, r2, #1
 897 0024 9A60     		str	r2, [r3, #8]
 747:HALLIB/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 898              		.loc 1 747 0
 899 0026 324B     		ldr	r3, .L85
 900 0028 1B68     		ldr	r3, [r3]
 901 002a 324A     		ldr	r2, .L85+4
 902 002c A2FB0323 		umull	r2, r3, r2, r3
 903 0030 9B0C     		lsrs	r3, r3, #18
 904 0032 03EB4303 		add	r3, r3, r3, lsl #1
 905 0036 0193     		str	r3, [sp, #4]
 748:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 906              		.loc 1 748 0
 907 0038 02E0     		b	.L73
 908              	.L74:
 750:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 909              		.loc 1 750 0
 910 003a 019B     		ldr	r3, [sp, #4]
 911 003c 013B     		subs	r3, r3, #1
 912 003e 0193     		str	r3, [sp, #4]
 913              	.L73:
 748:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 914              		.loc 1 748 0
 915 0040 019B     		ldr	r3, [sp, #4]
 916 0042 002B     		cmp	r3, #0
 917 0044 F9D1     		bne	.L74
 918              	.L72:
 755:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 919              		.loc 1 755 0
 920 0046 0268     		ldr	r2, [r0]
 921 0048 9368     		ldr	r3, [r2, #8]
 922 004a 13F0010F 		tst	r3, #1
 923 004e 45D0     		beq	.L80
 760:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 924              		.loc 1 760 0
 925 0050 016C     		ldr	r1, [r0, #64]
 926 0052 294B     		ldr	r3, .L85+8
 927 0054 0B40     		ands	r3, r3, r1
ARM GAS  /tmp/ccmep3G5.s 			page 47


 928 0056 43F48073 		orr	r3, r3, #256
 929 005a 0364     		str	r3, [r0, #64]
 766:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 930              		.loc 1 766 0
 931 005c 5368     		ldr	r3, [r2, #4]
 932 005e 13F4806F 		tst	r3, #1024
 933 0062 05D0     		beq	.L75
 768:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 934              		.loc 1 768 0
 935 0064 036C     		ldr	r3, [r0, #64]
 936 0066 23F44053 		bic	r3, r3, #12288
 937 006a 43F48053 		orr	r3, r3, #4096
 938 006e 0364     		str	r3, [r0, #64]
 939              	.L75:
 772:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 940              		.loc 1 772 0
 941 0070 036C     		ldr	r3, [r0, #64]
 942 0072 13F4805F 		tst	r3, #4096
 943 0076 04D0     		beq	.L76
 775:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 944              		.loc 1 775 0
 945 0078 436C     		ldr	r3, [r0, #68]
 946 007a 23F00603 		bic	r3, r3, #6
 947 007e 4364     		str	r3, [r0, #68]
 948 0080 01E0     		b	.L77
 949              	.L76:
 780:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 950              		.loc 1 780 0
 951 0082 0023     		movs	r3, #0
 952 0084 4364     		str	r3, [r0, #68]
 953              	.L77:
 786:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 954              		.loc 1 786 0
 955 0086 0023     		movs	r3, #0
 956 0088 80F83C30 		strb	r3, [r0, #60]
 790:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 957              		.loc 1 790 0
 958 008c 6FF02203 		mvn	r3, #34
 959 0090 1360     		str	r3, [r2]
 793:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 960              		.loc 1 793 0
 961 0092 0268     		ldr	r2, [r0]
 962 0094 5168     		ldr	r1, [r2, #4]
 963 0096 194B     		ldr	r3, .L85+12
 964 0098 0B43     		orrs	r3, r3, r1
 965 009a 5360     		str	r3, [r2, #4]
 796:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 966              		.loc 1 796 0
 967 009c 184B     		ldr	r3, .L85+16
 968 009e 5B68     		ldr	r3, [r3, #4]
 969 00a0 13F01F0F 		tst	r3, #31
 970 00a4 0AD1     		bne	.L78
 799:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 971              		.loc 1 799 0
 972 00a6 0368     		ldr	r3, [r0]
 973 00a8 9A68     		ldr	r2, [r3, #8]
 974 00aa 12F0405F 		tst	r2, #805306368
ARM GAS  /tmp/ccmep3G5.s 			page 48


 975 00ae 17D1     		bne	.L81
 802:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 976              		.loc 1 802 0
 977 00b0 9A68     		ldr	r2, [r3, #8]
 978 00b2 42F08042 		orr	r2, r2, #1073741824
 979 00b6 9A60     		str	r2, [r3, #8]
 817:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 980              		.loc 1 817 0
 981 00b8 0020     		movs	r0, #0
 982              	.LVL53:
 983 00ba 16E0     		b	.L71
 984              	.LVL54:
 985              	.L78:
 808:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 986              		.loc 1 808 0
 987 00bc 0368     		ldr	r3, [r0]
 988 00be 114A     		ldr	r2, .L85+20
 989 00c0 9342     		cmp	r3, r2
 990 00c2 0FD1     		bne	.L82
 808:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 991              		.loc 1 808 0 is_stmt 0 discriminator 1
 992 00c4 9A68     		ldr	r2, [r3, #8]
 993 00c6 12F0405F 		tst	r2, #805306368
 994 00ca 0DD1     		bne	.L83
 811:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 995              		.loc 1 811 0 is_stmt 1
 996 00cc 9A68     		ldr	r2, [r3, #8]
 997 00ce 42F08042 		orr	r2, r2, #1073741824
 998 00d2 9A60     		str	r2, [r3, #8]
 817:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 999              		.loc 1 817 0
 1000 00d4 0020     		movs	r0, #0
 1001              	.LVL55:
 1002 00d6 08E0     		b	.L71
 1003              	.LVL56:
 1004              	.L79:
 735:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1005              		.loc 1 735 0
 1006 00d8 0220     		movs	r0, #2
 1007              	.LVL57:
 1008 00da 06E0     		b	.L71
 1009              	.LVL58:
 1010              	.L80:
 817:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 1011              		.loc 1 817 0
 1012 00dc 0020     		movs	r0, #0
 1013              	.LVL59:
 1014 00de 04E0     		b	.L71
 1015              	.LVL60:
 1016              	.L81:
 1017 00e0 0020     		movs	r0, #0
 1018              	.LVL61:
 1019 00e2 02E0     		b	.L71
 1020              	.LVL62:
 1021              	.L82:
 1022 00e4 0020     		movs	r0, #0
 1023              	.LVL63:
ARM GAS  /tmp/ccmep3G5.s 			page 49


 1024 00e6 00E0     		b	.L71
 1025              	.LVL64:
 1026              	.L83:
 1027 00e8 0020     		movs	r0, #0
 1028              	.LVL65:
 1029              	.L71:
 818:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1030              		.loc 1 818 0
 1031 00ea 02B0     		add	sp, sp, #8
 1032              	.LCFI9:
 1033              		.cfi_def_cfa_offset 0
 1034              		@ sp needed
 1035 00ec 7047     		bx	lr
 1036              	.L86:
 1037 00ee 00BF     		.align	2
 1038              	.L85:
 1039 00f0 00000000 		.word	SystemCoreClock
 1040 00f4 83DE1B43 		.word	1125899907
 1041 00f8 FEF8FFFF 		.word	-1794
 1042 00fc 20000004 		.word	67108896
 1043 0100 00230140 		.word	1073816320
 1044 0104 00200140 		.word	1073815552
 1045              		.cfi_endproc
 1046              	.LFE144:
 1048              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1049              		.align	2
 1050              		.global	HAL_ADC_Stop_IT
 1051              		.thumb
 1052              		.thumb_func
 1054              	HAL_ADC_Stop_IT:
 1055              	.LFB145:
 830:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 1056              		.loc 1 830 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 0
 1059              		@ frame_needed = 0, uses_anonymous_args = 0
 1060              		@ link register save eliminated.
 1061              	.LVL66:
 835:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1062              		.loc 1 835 0
 1063 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1064 0004 012B     		cmp	r3, #1
 1065 0006 1BD0     		beq	.L90
 835:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1066              		.loc 1 835 0 is_stmt 0 discriminator 2
 1067 0008 0123     		movs	r3, #1
 1068 000a 80F83C30 		strb	r3, [r0, #60]
 839:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1069              		.loc 1 839 0 is_stmt 1 discriminator 2
 1070 000e 0268     		ldr	r2, [r0]
 1071 0010 9368     		ldr	r3, [r2, #8]
 1072 0012 23F00103 		bic	r3, r3, #1
 1073 0016 9360     		str	r3, [r2, #8]
 842:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 1074              		.loc 1 842 0 discriminator 2
 1075 0018 0368     		ldr	r3, [r0]
 1076 001a 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccmep3G5.s 			page 50


 1077 001c 12F0010F 		tst	r2, #1
 1078 0020 09D1     		bne	.L89
 845:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1079              		.loc 1 845 0
 1080 0022 5968     		ldr	r1, [r3, #4]
 1081 0024 074A     		ldr	r2, .L91
 1082 0026 0A40     		ands	r2, r2, r1
 1083 0028 5A60     		str	r2, [r3, #4]
 848:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1084              		.loc 1 848 0
 1085 002a 026C     		ldr	r2, [r0, #64]
 1086 002c 064B     		ldr	r3, .L91+4
 1087 002e 1340     		ands	r3, r3, r2
 1088 0030 43F00103 		orr	r3, r3, #1
 1089 0034 0364     		str	r3, [r0, #64]
 1090              	.L89:
 854:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1091              		.loc 1 854 0
 1092 0036 0023     		movs	r3, #0
 1093 0038 80F83C30 		strb	r3, [r0, #60]
 857:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 1094              		.loc 1 857 0
 1095 003c 1846     		mov	r0, r3
 1096              	.LVL67:
 1097 003e 7047     		bx	lr
 1098              	.LVL68:
 1099              	.L90:
 835:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1100              		.loc 1 835 0
 1101 0040 0220     		movs	r0, #2
 1102              	.LVL69:
 858:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1103              		.loc 1 858 0
 1104 0042 7047     		bx	lr
 1105              	.L92:
 1106              		.align	2
 1107              	.L91:
 1108 0044 DFFFFFFB 		.word	-67108897
 1109 0048 FEEEFFFF 		.word	-4354
 1110              		.cfi_endproc
 1111              	.LFE145:
 1113              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1114              		.align	2
 1115              		.global	HAL_ADC_Start_DMA
 1116              		.thumb
 1117              		.thumb_func
 1119              	HAL_ADC_Start_DMA:
 1120              	.LFB147:
1012:HALLIB/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 1121              		.loc 1 1012 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 8
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 1125              	.LVL70:
 1126 0000 30B5     		push	{r4, r5, lr}
 1127              	.LCFI10:
 1128              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccmep3G5.s 			page 51


 1129              		.cfi_offset 4, -12
 1130              		.cfi_offset 5, -8
 1131              		.cfi_offset 14, -4
 1132 0002 83B0     		sub	sp, sp, #12
 1133              	.LCFI11:
 1134              		.cfi_def_cfa_offset 24
1013:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1135              		.loc 1 1013 0
 1136 0004 0023     		movs	r3, #0
 1137 0006 0193     		str	r3, [sp, #4]
1020:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1138              		.loc 1 1020 0
 1139 0008 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1140 000c 012B     		cmp	r3, #1
 1141 000e 7CD0     		beq	.L102
1020:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1142              		.loc 1 1020 0 is_stmt 0 discriminator 2
 1143 0010 0123     		movs	r3, #1
 1144 0012 80F83C30 		strb	r3, [r0, #60]
1025:HALLIB/Src/stm32f7xx_hal_adc.c ****   {  
 1145              		.loc 1 1025 0 is_stmt 1 discriminator 2
 1146 0016 0368     		ldr	r3, [r0]
 1147 0018 9C68     		ldr	r4, [r3, #8]
 1148 001a 14F0010F 		tst	r4, #1
 1149 001e 13D1     		bne	.L95
1028:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1150              		.loc 1 1028 0
 1151 0020 9C68     		ldr	r4, [r3, #8]
 1152 0022 44F00104 		orr	r4, r4, #1
 1153 0026 9C60     		str	r4, [r3, #8]
1032:HALLIB/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 1154              		.loc 1 1032 0
 1155 0028 3D4B     		ldr	r3, .L108
 1156 002a 1C68     		ldr	r4, [r3]
 1157 002c 3D4B     		ldr	r3, .L108+4
 1158 002e A3FB0434 		umull	r3, r4, r3, r4
 1159 0032 A40C     		lsrs	r4, r4, #18
 1160 0034 04EB4404 		add	r4, r4, r4, lsl #1
 1161 0038 0194     		str	r4, [sp, #4]
1033:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 1162              		.loc 1 1033 0
 1163 003a 02E0     		b	.L96
 1164              	.L97:
1035:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 1165              		.loc 1 1035 0
 1166 003c 019C     		ldr	r4, [sp, #4]
 1167 003e 013C     		subs	r4, r4, #1
 1168 0040 0194     		str	r4, [sp, #4]
 1169              	.L96:
1033:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 1170              		.loc 1 1033 0
 1171 0042 019C     		ldr	r4, [sp, #4]
 1172 0044 002C     		cmp	r4, #0
 1173 0046 F9D1     		bne	.L97
 1174              	.L95:
1040:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 1175              		.loc 1 1040 0
ARM GAS  /tmp/ccmep3G5.s 			page 52


 1176 0048 0368     		ldr	r3, [r0]
 1177 004a 9C68     		ldr	r4, [r3, #8]
 1178 004c 14F0010F 		tst	r4, #1
 1179 0050 5DD0     		beq	.L103
1045:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 1180              		.loc 1 1045 0
 1181 0052 056C     		ldr	r5, [r0, #64]
 1182 0054 344C     		ldr	r4, .L108+8
 1183 0056 2C40     		ands	r4, r4, r5
 1184 0058 44F48074 		orr	r4, r4, #256
 1185 005c 0464     		str	r4, [r0, #64]
1051:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 1186              		.loc 1 1051 0
 1187 005e 5B68     		ldr	r3, [r3, #4]
 1188 0060 13F4806F 		tst	r3, #1024
 1189 0064 05D0     		beq	.L98
1053:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 1190              		.loc 1 1053 0
 1191 0066 036C     		ldr	r3, [r0, #64]
 1192 0068 23F44053 		bic	r3, r3, #12288
 1193 006c 43F48053 		orr	r3, r3, #4096
 1194 0070 0364     		str	r3, [r0, #64]
 1195              	.L98:
1057:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 1196              		.loc 1 1057 0
 1197 0072 036C     		ldr	r3, [r0, #64]
 1198 0074 13F4805F 		tst	r3, #4096
 1199 0078 04D0     		beq	.L99
1060:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 1200              		.loc 1 1060 0
 1201 007a 436C     		ldr	r3, [r0, #68]
 1202 007c 23F00603 		bic	r3, r3, #6
 1203 0080 4364     		str	r3, [r0, #68]
 1204 0082 01E0     		b	.L100
 1205              	.L99:
1065:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 1206              		.loc 1 1065 0
 1207 0084 0023     		movs	r3, #0
 1208 0086 4364     		str	r3, [r0, #68]
 1209              	.L100:
 1210 0088 1346     		mov	r3, r2
 1211 008a 0446     		mov	r4, r0
1071:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1212              		.loc 1 1071 0
 1213 008c 0022     		movs	r2, #0
 1214              	.LVL71:
 1215 008e 80F83C20 		strb	r2, [r0, #60]
1074:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1216              		.loc 1 1074 0
 1217 0092 826B     		ldr	r2, [r0, #56]
 1218 0094 2548     		ldr	r0, .L108+12
 1219              	.LVL72:
 1220 0096 D063     		str	r0, [r2, #60]
1077:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1221              		.loc 1 1077 0
 1222 0098 A26B     		ldr	r2, [r4, #56]
 1223 009a 2548     		ldr	r0, .L108+16
ARM GAS  /tmp/ccmep3G5.s 			page 53


 1224 009c 1064     		str	r0, [r2, #64]
1080:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1225              		.loc 1 1080 0
 1226 009e A26B     		ldr	r2, [r4, #56]
 1227 00a0 2448     		ldr	r0, .L108+20
 1228 00a2 D064     		str	r0, [r2, #76]
1088:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1229              		.loc 1 1088 0
 1230 00a4 2268     		ldr	r2, [r4]
 1231 00a6 6FF02200 		mvn	r0, #34
 1232 00aa 1060     		str	r0, [r2]
1091:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1233              		.loc 1 1091 0
 1234 00ac 2568     		ldr	r5, [r4]
 1235 00ae 6868     		ldr	r0, [r5, #4]
 1236 00b0 40F08060 		orr	r0, r0, #67108864
 1237 00b4 6860     		str	r0, [r5, #4]
1094:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1238              		.loc 1 1094 0
 1239 00b6 2568     		ldr	r5, [r4]
 1240 00b8 A868     		ldr	r0, [r5, #8]
 1241 00ba 40F48070 		orr	r0, r0, #256
 1242 00be A860     		str	r0, [r5, #8]
1097:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1243              		.loc 1 1097 0
 1244 00c0 2068     		ldr	r0, [r4]
 1245 00c2 0A46     		mov	r2, r1
 1246 00c4 00F14C01 		add	r1, r0, #76
 1247              	.LVL73:
 1248 00c8 A06B     		ldr	r0, [r4, #56]
 1249 00ca FFF7FEFF 		bl	HAL_DMA_Start_IT
 1250              	.LVL74:
1100:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 1251              		.loc 1 1100 0
 1252 00ce 1A4B     		ldr	r3, .L108+24
 1253 00d0 5B68     		ldr	r3, [r3, #4]
 1254 00d2 13F01F0F 		tst	r3, #31
 1255 00d6 0AD1     		bne	.L101
1103:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 1256              		.loc 1 1103 0
 1257 00d8 2368     		ldr	r3, [r4]
 1258 00da 9A68     		ldr	r2, [r3, #8]
 1259 00dc 12F0405F 		tst	r2, #805306368
 1260 00e0 17D1     		bne	.L104
1106:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 1261              		.loc 1 1106 0
 1262 00e2 9A68     		ldr	r2, [r3, #8]
 1263 00e4 42F08042 		orr	r2, r2, #1073741824
 1264 00e8 9A60     		str	r2, [r3, #8]
1121:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 1265              		.loc 1 1121 0
 1266 00ea 0020     		movs	r0, #0
 1267 00ec 16E0     		b	.L94
 1268              	.L101:
1112:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 1269              		.loc 1 1112 0
 1270 00ee 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccmep3G5.s 			page 54


 1271 00f0 124A     		ldr	r2, .L108+28
 1272 00f2 9342     		cmp	r3, r2
 1273 00f4 0FD1     		bne	.L105
1112:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 1274              		.loc 1 1112 0 is_stmt 0 discriminator 1
 1275 00f6 9A68     		ldr	r2, [r3, #8]
 1276 00f8 12F0405F 		tst	r2, #805306368
 1277 00fc 0DD1     		bne	.L106
1115:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 1278              		.loc 1 1115 0 is_stmt 1
 1279 00fe 9A68     		ldr	r2, [r3, #8]
 1280 0100 42F08042 		orr	r2, r2, #1073741824
 1281 0104 9A60     		str	r2, [r3, #8]
1121:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 1282              		.loc 1 1121 0
 1283 0106 0020     		movs	r0, #0
 1284 0108 08E0     		b	.L94
 1285              	.LVL75:
 1286              	.L102:
1020:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1287              		.loc 1 1020 0
 1288 010a 0220     		movs	r0, #2
 1289              	.LVL76:
 1290 010c 06E0     		b	.L94
 1291              	.LVL77:
 1292              	.L103:
1121:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 1293              		.loc 1 1121 0
 1294 010e 0020     		movs	r0, #0
 1295              	.LVL78:
 1296 0110 04E0     		b	.L94
 1297              	.LVL79:
 1298              	.L104:
 1299 0112 0020     		movs	r0, #0
 1300 0114 02E0     		b	.L94
 1301              	.L105:
 1302 0116 0020     		movs	r0, #0
 1303 0118 00E0     		b	.L94
 1304              	.L106:
 1305 011a 0020     		movs	r0, #0
 1306              	.LVL80:
 1307              	.L94:
1122:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1308              		.loc 1 1122 0
 1309 011c 03B0     		add	sp, sp, #12
 1310              	.LCFI12:
 1311              		.cfi_def_cfa_offset 12
 1312              		@ sp needed
 1313 011e 30BD     		pop	{r4, r5, pc}
 1314              	.L109:
 1315              		.align	2
 1316              	.L108:
 1317 0120 00000000 		.word	SystemCoreClock
 1318 0124 83DE1B43 		.word	1125899907
 1319 0128 FEF8FFFF 		.word	-1794
 1320 012c 00000000 		.word	ADC_DMAConvCplt
 1321 0130 00000000 		.word	ADC_DMAHalfConvCplt
ARM GAS  /tmp/ccmep3G5.s 			page 55


 1322 0134 00000000 		.word	ADC_DMAError
 1323 0138 00230140 		.word	1073816320
 1324 013c 00200140 		.word	1073815552
 1325              		.cfi_endproc
 1326              	.LFE147:
 1328              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1329              		.align	2
 1330              		.global	HAL_ADC_Stop_DMA
 1331              		.thumb
 1332              		.thumb_func
 1334              	HAL_ADC_Stop_DMA:
 1335              	.LFB148:
1131:HALLIB/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1336              		.loc 1 1131 0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 0
 1339              		@ frame_needed = 0, uses_anonymous_args = 0
 1340              	.LVL81:
1138:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1341              		.loc 1 1138 0
 1342 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1343 0004 012B     		cmp	r3, #1
 1344 0006 26D0     		beq	.L113
1131:HALLIB/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1345              		.loc 1 1131 0 discriminator 2
 1346 0008 10B5     		push	{r4, lr}
 1347              	.LCFI13:
 1348              		.cfi_def_cfa_offset 8
 1349              		.cfi_offset 4, -8
 1350              		.cfi_offset 14, -4
 1351 000a 0446     		mov	r4, r0
1138:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1352              		.loc 1 1138 0 discriminator 2
 1353 000c 0123     		movs	r3, #1
 1354 000e 80F83C30 		strb	r3, [r0, #60]
1142:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1355              		.loc 1 1142 0 discriminator 2
 1356 0012 0268     		ldr	r2, [r0]
 1357 0014 9368     		ldr	r3, [r2, #8]
 1358 0016 23F00103 		bic	r3, r3, #1
 1359 001a 9360     		str	r3, [r2, #8]
1145:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 1360              		.loc 1 1145 0 discriminator 2
 1361 001c 0368     		ldr	r3, [r0]
 1362 001e 9A68     		ldr	r2, [r3, #8]
 1363 0020 12F0010F 		tst	r2, #1
 1364 0024 12D1     		bne	.L114
1148:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1365              		.loc 1 1148 0
 1366 0026 9A68     		ldr	r2, [r3, #8]
 1367 0028 22F48072 		bic	r2, r2, #256
 1368 002c 9A60     		str	r2, [r3, #8]
1152:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1369              		.loc 1 1152 0
 1370 002e 806B     		ldr	r0, [r0, #56]
 1371              	.LVL82:
 1372 0030 FFF7FEFF 		bl	HAL_DMA_Abort
ARM GAS  /tmp/ccmep3G5.s 			page 56


 1373              	.LVL83:
1155:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1374              		.loc 1 1155 0
 1375 0034 2268     		ldr	r2, [r4]
 1376 0036 5368     		ldr	r3, [r2, #4]
 1377 0038 23F08063 		bic	r3, r3, #67108864
 1378 003c 5360     		str	r3, [r2, #4]
1158:HALLIB/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1379              		.loc 1 1158 0
 1380 003e 226C     		ldr	r2, [r4, #64]
 1381 0040 064B     		ldr	r3, .L117
 1382 0042 1340     		ands	r3, r3, r2
 1383 0044 43F00103 		orr	r3, r3, #1
 1384 0048 2364     		str	r3, [r4, #64]
 1385 004a 00E0     		b	.L112
 1386              	.LVL84:
 1387              	.L114:
1132:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1388              		.loc 1 1132 0
 1389 004c 0020     		movs	r0, #0
 1390              	.LVL85:
 1391              	.L112:
1164:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1392              		.loc 1 1164 0
 1393 004e 0023     		movs	r3, #0
 1394 0050 84F83C30 		strb	r3, [r4, #60]
1167:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 1395              		.loc 1 1167 0
 1396 0054 10BD     		pop	{r4, pc}
 1397              	.LVL86:
 1398              	.L113:
 1399              	.LCFI14:
 1400              		.cfi_def_cfa_offset 0
 1401              		.cfi_restore 4
 1402              		.cfi_restore 14
1138:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 1403              		.loc 1 1138 0
 1404 0056 0220     		movs	r0, #2
 1405              	.LVL87:
 1406 0058 7047     		bx	lr
 1407              	.L118:
 1408 005a 00BF     		.align	2
 1409              	.L117:
 1410 005c FEEEFFFF 		.word	-4354
 1411              		.cfi_endproc
 1412              	.LFE148:
 1414              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1415              		.align	2
 1416              		.global	HAL_ADC_GetValue
 1417              		.thumb
 1418              		.thumb_func
 1420              	HAL_ADC_GetValue:
 1421              	.LFB149:
1177:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
 1422              		.loc 1 1177 0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccmep3G5.s 			page 57


 1425              		@ frame_needed = 0, uses_anonymous_args = 0
 1426              		@ link register save eliminated.
 1427              	.LVL88:
1179:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 1428              		.loc 1 1179 0
 1429 0000 0368     		ldr	r3, [r0]
 1430 0002 D86C     		ldr	r0, [r3, #76]
 1431              	.LVL89:
1180:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1432              		.loc 1 1180 0
 1433 0004 7047     		bx	lr
 1434              		.cfi_endproc
 1435              	.LFE149:
 1437 0006 00BF     		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1438              		.align	2
 1439              		.weak	HAL_ADC_ConvCpltCallback
 1440              		.thumb
 1441              		.thumb_func
 1443              	HAL_ADC_ConvCpltCallback:
 1444              	.LFB150:
1189:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1445              		.loc 1 1189 0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 0, uses_anonymous_args = 0
 1449              		@ link register save eliminated.
 1450              	.LVL90:
 1451 0000 7047     		bx	lr
 1452              		.cfi_endproc
 1453              	.LFE150:
 1455 0002 00BF     		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1456              		.align	2
 1457              		.thumb
 1458              		.thumb_func
 1460              	ADC_DMAConvCplt:
 1461              	.LFB159:
1584:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1585:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1586:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1587:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
1588:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1589:HALLIB/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1590:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval None
1591:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1592:HALLIB/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
1593:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 1462              		.loc 1 1593 0
 1463              		.cfi_startproc
 1464              		@ args = 0, pretend = 0, frame = 0
 1465              		@ frame_needed = 0, uses_anonymous_args = 0
 1466              	.LVL91:
 1467              		.loc 1 1593 0
 1468 0000 08B5     		push	{r3, lr}
 1469              	.LCFI15:
 1470              		.cfi_def_cfa_offset 8
 1471              		.cfi_offset 3, -8
 1472              		.cfi_offset 14, -4
ARM GAS  /tmp/ccmep3G5.s 			page 58


1594:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
1595:HALLIB/Src/stm32f7xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1473              		.loc 1 1595 0
 1474 0002 836B     		ldr	r3, [r0, #56]
 1475              	.LVL92:
1596:HALLIB/Src/stm32f7xx_hal_adc.c ****   
1597:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
1598:HALLIB/Src/stm32f7xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 1476              		.loc 1 1598 0
 1477 0004 1A6C     		ldr	r2, [r3, #64]
 1478 0006 12F0500F 		tst	r2, #80
 1479 000a 26D1     		bne	.L122
1599:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1600:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Update ADC state machine */
1601:HALLIB/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1480              		.loc 1 1601 0
 1481 000c 1A6C     		ldr	r2, [r3, #64]
 1482 000e 42F40072 		orr	r2, r2, #512
 1483 0012 1A64     		str	r2, [r3, #64]
1602:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1603:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
1604:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
1605:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Note: On STM32F7, there is no independent flag of end of sequence.   */
1606:HALLIB/Src/stm32f7xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
1607:HALLIB/Src/stm32f7xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
1608:HALLIB/Src/stm32f7xx_hal_adc.c ****     /*       of end of sequence.                                            */
1609:HALLIB/Src/stm32f7xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 1484              		.loc 1 1609 0
 1485 0014 1A68     		ldr	r2, [r3]
 1486 0016 9168     		ldr	r1, [r2, #8]
 1487 0018 11F0405F 		tst	r1, #805306368
 1488 001c 19D1     		bne	.L123
1610:HALLIB/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1489              		.loc 1 1610 0 discriminator 1
 1490 001e 9969     		ldr	r1, [r3, #24]
1609:HALLIB/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1491              		.loc 1 1609 0 discriminator 1
 1492 0020 B9B9     		cbnz	r1, .L123
1611:HALLIB/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1493              		.loc 1 1611 0
 1494 0022 D16A     		ldr	r1, [r2, #44]
1610:HALLIB/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1495              		.loc 1 1610 0
 1496 0024 11F4700F 		tst	r1, #15728640
 1497 0028 03D0     		beq	.L124
1612:HALLIB/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1498              		.loc 1 1612 0
 1499 002a 9168     		ldr	r1, [r2, #8]
1611:HALLIB/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1500              		.loc 1 1611 0
 1501 002c 11F4806F 		tst	r1, #1024
 1502 0030 0FD1     		bne	.L123
 1503              	.L124:
1613:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
1614:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
1615:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1616:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
ARM GAS  /tmp/ccmep3G5.s 			page 59


1617:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
1618:HALLIB/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1504              		.loc 1 1618 0
 1505 0032 5168     		ldr	r1, [r2, #4]
 1506 0034 21F02001 		bic	r1, r1, #32
 1507 0038 5160     		str	r1, [r2, #4]
1619:HALLIB/Src/stm32f7xx_hal_adc.c ****       
1620:HALLIB/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1621:HALLIB/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 1508              		.loc 1 1621 0
 1509 003a 1A6C     		ldr	r2, [r3, #64]
 1510 003c 22F48072 		bic	r2, r2, #256
 1511 0040 1A64     		str	r2, [r3, #64]
1622:HALLIB/Src/stm32f7xx_hal_adc.c ****       
1623:HALLIB/Src/stm32f7xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1512              		.loc 1 1623 0
 1513 0042 1A6C     		ldr	r2, [r3, #64]
 1514 0044 12F4805F 		tst	r2, #4096
 1515 0048 03D1     		bne	.L123
1624:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
1625:HALLIB/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1516              		.loc 1 1625 0
 1517 004a 1A6C     		ldr	r2, [r3, #64]
 1518 004c 42F00102 		orr	r2, r2, #1
 1519 0050 1A64     		str	r2, [r3, #64]
 1520              	.L123:
1626:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
1627:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
1628:HALLIB/Src/stm32f7xx_hal_adc.c ****     
1629:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Conversion complete callback */
1630:HALLIB/Src/stm32f7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 1521              		.loc 1 1630 0
 1522 0052 1846     		mov	r0, r3
 1523              	.LVL93:
 1524 0054 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1525              	.LVL94:
 1526 0058 08BD     		pop	{r3, pc}
 1527              	.LVL95:
 1528              	.L122:
1631:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1632:HALLIB/Src/stm32f7xx_hal_adc.c ****   else
1633:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
1634:HALLIB/Src/stm32f7xx_hal_adc.c ****     /* Call DMA error callback */
1635:HALLIB/Src/stm32f7xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 1529              		.loc 1 1635 0
 1530 005a 9B6B     		ldr	r3, [r3, #56]
 1531              	.LVL96:
 1532 005c DB6C     		ldr	r3, [r3, #76]
 1533 005e 9847     		blx	r3
 1534              	.LVL97:
 1535 0060 08BD     		pop	{r3, pc}
 1536              		.cfi_endproc
 1537              	.LFE159:
 1539 0062 00BF     		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1540              		.align	2
 1541              		.weak	HAL_ADC_ConvHalfCpltCallback
 1542              		.thumb
ARM GAS  /tmp/ccmep3G5.s 			page 60


 1543              		.thumb_func
 1545              	HAL_ADC_ConvHalfCpltCallback:
 1546              	.LFB151:
1204:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1547              		.loc 1 1204 0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 0
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551              		@ link register save eliminated.
 1552              	.LVL98:
 1553 0000 7047     		bx	lr
 1554              		.cfi_endproc
 1555              	.LFE151:
 1557 0002 00BF     		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 1558              		.align	2
 1559              		.thumb
 1560              		.thumb_func
 1562              	ADC_DMAHalfConvCplt:
 1563              	.LFB160:
1636:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
1637:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1638:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1639:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1640:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
1641:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1642:HALLIB/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1643:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval None
1644:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1645:HALLIB/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
1646:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 1564              		.loc 1 1646 0
 1565              		.cfi_startproc
 1566              		@ args = 0, pretend = 0, frame = 0
 1567              		@ frame_needed = 0, uses_anonymous_args = 0
 1568              	.LVL99:
 1569              		.loc 1 1646 0
 1570 0000 08B5     		push	{r3, lr}
 1571              	.LCFI16:
 1572              		.cfi_def_cfa_offset 8
 1573              		.cfi_offset 3, -8
 1574              		.cfi_offset 14, -4
 1575              	.LVL100:
1647:HALLIB/Src/stm32f7xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1648:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Conversion complete callback */
1649:HALLIB/Src/stm32f7xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 1576              		.loc 1 1649 0
 1577 0002 806B     		ldr	r0, [r0, #56]
 1578              	.LVL101:
 1579 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 1580              	.LVL102:
 1581 0008 08BD     		pop	{r3, pc}
 1582              		.cfi_endproc
 1583              	.LFE160:
 1585 000a 00BF     		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 1586              		.align	2
 1587              		.weak	HAL_ADC_LevelOutOfWindowCallback
 1588              		.thumb
ARM GAS  /tmp/ccmep3G5.s 			page 61


 1589              		.thumb_func
 1591              	HAL_ADC_LevelOutOfWindowCallback:
 1592              	.LFB152:
1219:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1593              		.loc 1 1219 0
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 0
 1596              		@ frame_needed = 0, uses_anonymous_args = 0
 1597              		@ link register save eliminated.
 1598              	.LVL103:
 1599 0000 7047     		bx	lr
 1600              		.cfi_endproc
 1601              	.LFE152:
 1603 0002 00BF     		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 1604              		.align	2
 1605              		.weak	HAL_ADC_ErrorCallback
 1606              		.thumb
 1607              		.thumb_func
 1609              	HAL_ADC_ErrorCallback:
 1610              	.LFB153:
1240:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1611              		.loc 1 1240 0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 0
 1614              		@ frame_needed = 0, uses_anonymous_args = 0
 1615              		@ link register save eliminated.
 1616              	.LVL104:
 1617 0000 7047     		bx	lr
 1618              		.cfi_endproc
 1619              	.LFE153:
 1621 0002 00BF     		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 1622              		.align	2
 1623              		.global	HAL_ADC_IRQHandler
 1624              		.thumb
 1625              		.thumb_func
 1627              	HAL_ADC_IRQHandler:
 1628              	.LFB146:
 867:HALLIB/Src/stm32f7xx_hal_adc.c ****   uint32_t tmp1 = 0, tmp2 = 0;
 1629              		.loc 1 867 0
 1630              		.cfi_startproc
 1631              		@ args = 0, pretend = 0, frame = 0
 1632              		@ frame_needed = 0, uses_anonymous_args = 0
 1633              	.LVL105:
 867:HALLIB/Src/stm32f7xx_hal_adc.c ****   uint32_t tmp1 = 0, tmp2 = 0;
 1634              		.loc 1 867 0
 1635 0000 38B5     		push	{r3, r4, r5, lr}
 1636              	.LCFI17:
 1637              		.cfi_def_cfa_offset 16
 1638              		.cfi_offset 3, -16
 1639              		.cfi_offset 4, -12
 1640              		.cfi_offset 5, -8
 1641              		.cfi_offset 14, -4
 1642 0002 0446     		mov	r4, r0
 1643              	.LVL106:
 875:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 1644              		.loc 1 875 0
 1645 0004 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccmep3G5.s 			page 62


 1646 0006 1168     		ldr	r1, [r2]
 1647              	.LVL107:
 876:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
 1648              		.loc 1 876 0
 1649 0008 5368     		ldr	r3, [r2, #4]
 1650 000a C3F34013 		ubfx	r3, r3, #5, #1
 1651              	.LVL108:
 878:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 1652              		.loc 1 878 0
 1653 000e 13EA5103 		ands	r3, r3, r1, lsr #1
 1654              	.LVL109:
 1655 0012 2CD0     		beq	.L133
 881:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 1656              		.loc 1 881 0
 1657 0014 036C     		ldr	r3, [r0, #64]
 1658 0016 13F0100F 		tst	r3, #16
 1659 001a 03D1     		bne	.L134
 884:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 1660              		.loc 1 884 0
 1661 001c 036C     		ldr	r3, [r0, #64]
 1662 001e 43F40073 		orr	r3, r3, #512
 1663 0022 0364     		str	r3, [r0, #64]
 1664              	.L134:
 893:HALLIB/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1665              		.loc 1 893 0
 1666 0024 9368     		ldr	r3, [r2, #8]
 1667 0026 13F0405F 		tst	r3, #805306368
 1668 002a 19D1     		bne	.L135
 894:HALLIB/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1669              		.loc 1 894 0 discriminator 1
 1670 002c A369     		ldr	r3, [r4, #24]
 893:HALLIB/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1671              		.loc 1 893 0 discriminator 1
 1672 002e BBB9     		cbnz	r3, .L135
 895:HALLIB/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1673              		.loc 1 895 0
 1674 0030 D36A     		ldr	r3, [r2, #44]
 894:HALLIB/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1675              		.loc 1 894 0
 1676 0032 13F4700F 		tst	r3, #15728640
 1677 0036 03D0     		beq	.L136
 896:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 1678              		.loc 1 896 0
 1679 0038 9368     		ldr	r3, [r2, #8]
 895:HALLIB/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1680              		.loc 1 895 0
 1681 003a 13F4806F 		tst	r3, #1024
 1682 003e 0FD1     		bne	.L135
 1683              	.L136:
 902:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 1684              		.loc 1 902 0
 1685 0040 5368     		ldr	r3, [r2, #4]
 1686 0042 23F02003 		bic	r3, r3, #32
 1687 0046 5360     		str	r3, [r2, #4]
 905:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 1688              		.loc 1 905 0
 1689 0048 236C     		ldr	r3, [r4, #64]
ARM GAS  /tmp/ccmep3G5.s 			page 63


 1690 004a 23F48073 		bic	r3, r3, #256
 1691 004e 2364     		str	r3, [r4, #64]
 907:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 1692              		.loc 1 907 0
 1693 0050 236C     		ldr	r3, [r4, #64]
 1694 0052 13F4805F 		tst	r3, #4096
 1695 0056 03D1     		bne	.L135
 909:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 1696              		.loc 1 909 0
 1697 0058 236C     		ldr	r3, [r4, #64]
 1698 005a 43F00103 		orr	r3, r3, #1
 1699 005e 2364     		str	r3, [r4, #64]
 1700              	.L135:
 914:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1701              		.loc 1 914 0
 1702 0060 2046     		mov	r0, r4
 1703              	.LVL110:
 1704 0062 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1705              	.LVL111:
 917:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 1706              		.loc 1 917 0
 1707 0066 2368     		ldr	r3, [r4]
 1708 0068 6FF01202 		mvn	r2, #18
 1709 006c 1A60     		str	r2, [r3]
 1710              	.L133:
 920:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 1711              		.loc 1 920 0
 1712 006e 2368     		ldr	r3, [r4]
 1713 0070 1968     		ldr	r1, [r3]
 1714              	.LVL112:
 921:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
 1715              		.loc 1 921 0
 1716 0072 5A68     		ldr	r2, [r3, #4]
 1717 0074 C2F3C012 		ubfx	r2, r2, #7, #1
 1718              	.LVL113:
 923:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 1719              		.loc 1 923 0
 1720 0078 12EA9102 		ands	r2, r2, r1, lsr #2
 1721              	.LVL114:
 1722 007c 34D0     		beq	.L137
 926:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 1723              		.loc 1 926 0
 1724 007e 226C     		ldr	r2, [r4, #64]
 1725 0080 12F0100F 		tst	r2, #16
 1726 0084 03D1     		bne	.L138
 929:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 1727              		.loc 1 929 0
 1728 0086 226C     		ldr	r2, [r4, #64]
 1729 0088 42F40052 		orr	r2, r2, #8192
 1730 008c 2264     		str	r2, [r4, #64]
 1731              	.L138:
 936:HALLIB/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 1732              		.loc 1 936 0
 1733 008e 9A68     		ldr	r2, [r3, #8]
 1734 0090 12F4401F 		tst	r2, #3145728
 1735 0094 21D1     		bne	.L139
 937:HALLIB/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
ARM GAS  /tmp/ccmep3G5.s 			page 64


 1736              		.loc 1 937 0 discriminator 1
 1737 0096 9A6B     		ldr	r2, [r3, #56]
 936:HALLIB/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 1738              		.loc 1 936 0 discriminator 1
 1739 0098 12F4401F 		tst	r2, #3145728
 1740 009c 03D0     		beq	.L140
 938:HALLIB/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1741              		.loc 1 938 0
 1742 009e 9A68     		ldr	r2, [r3, #8]
 937:HALLIB/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 1743              		.loc 1 937 0
 1744 00a0 12F4806F 		tst	r2, #1024
 1745 00a4 19D1     		bne	.L139
 1746              	.L140:
 939:HALLIB/Src/stm32f7xx_hal_adc.c ****        (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 1747              		.loc 1 939 0
 1748 00a6 5A68     		ldr	r2, [r3, #4]
 938:HALLIB/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1749              		.loc 1 938 0
 1750 00a8 12F4806F 		tst	r2, #1024
 1751 00ac 15D1     		bne	.L139
 940:HALLIB/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE))))
 1752              		.loc 1 940 0
 1753 00ae 9A68     		ldr	r2, [r3, #8]
 939:HALLIB/Src/stm32f7xx_hal_adc.c ****        (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 1754              		.loc 1 939 0
 1755 00b0 12F0405F 		tst	r2, #805306368
 1756 00b4 11D1     		bne	.L139
 941:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 1757              		.loc 1 941 0
 1758 00b6 A269     		ldr	r2, [r4, #24]
 940:HALLIB/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE))))
 1759              		.loc 1 940 0
 1760 00b8 7AB9     		cbnz	r2, .L139
 944:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 1761              		.loc 1 944 0
 1762 00ba 5A68     		ldr	r2, [r3, #4]
 1763 00bc 22F08002 		bic	r2, r2, #128
 1764 00c0 5A60     		str	r2, [r3, #4]
 947:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1765              		.loc 1 947 0
 1766 00c2 236C     		ldr	r3, [r4, #64]
 1767 00c4 23F48053 		bic	r3, r3, #4096
 1768 00c8 2364     		str	r3, [r4, #64]
 949:HALLIB/Src/stm32f7xx_hal_adc.c ****       { 
 1769              		.loc 1 949 0
 1770 00ca 236C     		ldr	r3, [r4, #64]
 1771 00cc 13F4807F 		tst	r3, #256
 1772 00d0 03D1     		bne	.L139
 951:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 1773              		.loc 1 951 0
 1774 00d2 236C     		ldr	r3, [r4, #64]
 1775 00d4 43F00103 		orr	r3, r3, #1
 1776 00d8 2364     		str	r3, [r4, #64]
 1777              	.L139:
 956:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1778              		.loc 1 956 0
ARM GAS  /tmp/ccmep3G5.s 			page 65


 1779 00da 2046     		mov	r0, r4
 1780 00dc FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 1781              	.LVL115:
 959:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 1782              		.loc 1 959 0
 1783 00e0 2368     		ldr	r3, [r4]
 1784 00e2 6FF00C02 		mvn	r2, #12
 1785 00e6 1A60     		str	r2, [r3]
 1786              	.L137:
 962:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 1787              		.loc 1 962 0
 1788 00e8 2268     		ldr	r2, [r4]
 1789 00ea 1168     		ldr	r1, [r2]
 1790              	.LVL116:
 963:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check Analog watchdog flag */
 1791              		.loc 1 963 0
 1792 00ec 5368     		ldr	r3, [r2, #4]
 1793 00ee C3F38013 		ubfx	r3, r3, #6, #1
 1794              	.LVL117:
 965:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 1795              		.loc 1 965 0
 1796 00f2 1942     		tst	r1, r3
 1797 00f4 0ED0     		beq	.L141
 967:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 1798              		.loc 1 967 0
 1799 00f6 1368     		ldr	r3, [r2]
 1800              	.LVL118:
 1801 00f8 13F0010F 		tst	r3, #1
 1802 00fc 0AD0     		beq	.L141
 970:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 1803              		.loc 1 970 0
 1804 00fe 236C     		ldr	r3, [r4, #64]
 1805 0100 43F48033 		orr	r3, r3, #65536
 1806 0104 2364     		str	r3, [r4, #64]
 973:HALLIB/Src/stm32f7xx_hal_adc.c ****       
 1807              		.loc 1 973 0
 1808 0106 2046     		mov	r0, r4
 1809 0108 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1810              	.LVL119:
 976:HALLIB/Src/stm32f7xx_hal_adc.c ****     }
 1811              		.loc 1 976 0
 1812 010c 2368     		ldr	r3, [r4]
 1813 010e 6FF00102 		mvn	r2, #1
 1814 0112 1A60     		str	r2, [r3]
 1815              	.L141:
 980:HALLIB/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 1816              		.loc 1 980 0
 1817 0114 2268     		ldr	r2, [r4]
 1818 0116 1168     		ldr	r1, [r2]
 1819              	.LVL120:
 981:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Check Overrun flag */
 1820              		.loc 1 981 0
 1821 0118 5368     		ldr	r3, [r2, #4]
 1822 011a C3F38063 		ubfx	r3, r3, #26, #1
 1823              	.LVL121:
 983:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 1824              		.loc 1 983 0
ARM GAS  /tmp/ccmep3G5.s 			page 66


 1825 011e 13EA5113 		ands	r3, r3, r1, lsr #5
 1826              	.LVL122:
 1827 0122 0BD0     		beq	.L132
 990:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1828              		.loc 1 990 0
 1829 0124 636C     		ldr	r3, [r4, #68]
 1830 0126 43F00203 		orr	r3, r3, #2
 1831 012a 6364     		str	r3, [r4, #68]
 993:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1832              		.loc 1 993 0
 1833 012c 6FF02005 		mvn	r5, #32
 1834 0130 1560     		str	r5, [r2]
 996:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1835              		.loc 1 996 0
 1836 0132 2046     		mov	r0, r4
 1837 0134 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1838              	.LVL123:
 999:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 1839              		.loc 1 999 0
 1840 0138 2368     		ldr	r3, [r4]
 1841 013a 1D60     		str	r5, [r3]
 1842              	.L132:
 1843 013c 38BD     		pop	{r3, r4, r5, pc}
 1844              		.cfi_endproc
 1845              	.LFE146:
 1847 013e 00BF     		.section	.text.ADC_DMAError,"ax",%progbits
 1848              		.align	2
 1849              		.thumb
 1850              		.thumb_func
 1852              	ADC_DMAError:
 1853              	.LFB161:
1650:HALLIB/Src/stm32f7xx_hal_adc.c **** }
1651:HALLIB/Src/stm32f7xx_hal_adc.c **** 
1652:HALLIB/Src/stm32f7xx_hal_adc.c **** /**
1653:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @brief  DMA error callback 
1654:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1655:HALLIB/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1656:HALLIB/Src/stm32f7xx_hal_adc.c ****   * @retval None
1657:HALLIB/Src/stm32f7xx_hal_adc.c ****   */
1658:HALLIB/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
1659:HALLIB/Src/stm32f7xx_hal_adc.c **** {
 1854              		.loc 1 1659 0
 1855              		.cfi_startproc
 1856              		@ args = 0, pretend = 0, frame = 0
 1857              		@ frame_needed = 0, uses_anonymous_args = 0
 1858              	.LVL124:
 1859 0000 08B5     		push	{r3, lr}
 1860              	.LCFI18:
 1861              		.cfi_def_cfa_offset 8
 1862              		.cfi_offset 3, -8
 1863              		.cfi_offset 14, -4
1660:HALLIB/Src/stm32f7xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1864              		.loc 1 1660 0
 1865 0002 806B     		ldr	r0, [r0, #56]
 1866              	.LVL125:
1661:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->State= HAL_ADC_STATE_ERROR_DMA;
 1867              		.loc 1 1661 0
ARM GAS  /tmp/ccmep3G5.s 			page 67


 1868 0004 4023     		movs	r3, #64
 1869 0006 0364     		str	r3, [r0, #64]
1662:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Set ADC error code to DMA error */
1663:HALLIB/Src/stm32f7xx_hal_adc.c ****   hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 1870              		.loc 1 1663 0
 1871 0008 436C     		ldr	r3, [r0, #68]
 1872 000a 43F00403 		orr	r3, r3, #4
 1873 000e 4364     		str	r3, [r0, #68]
1664:HALLIB/Src/stm32f7xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 1874              		.loc 1 1664 0
 1875 0010 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1876              	.LVL126:
 1877 0014 08BD     		pop	{r3, pc}
 1878              		.cfi_endproc
 1879              	.LFE161:
 1881 0016 00BF     		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 1882              		.align	2
 1883              		.global	HAL_ADC_ConfigChannel
 1884              		.thumb
 1885              		.thumb_func
 1887              	HAL_ADC_ConfigChannel:
 1888              	.LFB154:
1278:HALLIB/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 1889              		.loc 1 1278 0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 8
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893              		@ link register save eliminated.
 1894              	.LVL127:
 1895 0000 30B4     		push	{r4, r5}
 1896              	.LCFI19:
 1897              		.cfi_def_cfa_offset 8
 1898              		.cfi_offset 4, -8
 1899              		.cfi_offset 5, -4
 1900 0002 82B0     		sub	sp, sp, #8
 1901              	.LCFI20:
 1902              		.cfi_def_cfa_offset 16
1279:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1903              		.loc 1 1279 0
 1904 0004 0023     		movs	r3, #0
 1905 0006 0193     		str	r3, [sp, #4]
1287:HALLIB/Src/stm32f7xx_hal_adc.c **** 			
 1906              		.loc 1 1287 0
 1907 0008 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1908 000c 012B     		cmp	r3, #1
 1909 000e 00F0BB80 		beq	.L158
1287:HALLIB/Src/stm32f7xx_hal_adc.c **** 			
 1910              		.loc 1 1287 0 is_stmt 0 discriminator 2
 1911 0012 0123     		movs	r3, #1
 1912 0014 80F83C30 		strb	r3, [r0, #60]
1290:HALLIB/Src/stm32f7xx_hal_adc.c **** 	{
 1913              		.loc 1 1290 0 is_stmt 1 discriminator 2
 1914 0018 0B68     		ldr	r3, [r1]
 1915 001a 092B     		cmp	r3, #9
 1916 001c 22D9     		bls	.L148
1293:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 1917              		.loc 1 1293 0
ARM GAS  /tmp/ccmep3G5.s 			page 68


 1918 001e 0568     		ldr	r5, [r0]
 1919 0020 EA68     		ldr	r2, [r5, #12]
 1920 0022 9BB2     		uxth	r3, r3
 1921 0024 03EB4303 		add	r3, r3, r3, lsl #1
 1922 0028 1E3B     		subs	r3, r3, #30
 1923 002a 0724     		movs	r4, #7
 1924 002c 04FA03F3 		lsl	r3, r4, r3
 1925 0030 22EA0303 		bic	r3, r2, r3
 1926 0034 EB60     		str	r3, [r5, #12]
1295:HALLIB/Src/stm32f7xx_hal_adc.c **** 		{
 1927              		.loc 1 1295 0
 1928 0036 0B68     		ldr	r3, [r1]
 1929 0038 554A     		ldr	r2, .L160
 1930 003a 9342     		cmp	r3, r2
 1931 003c 06D1     		bne	.L149
1298:HALLIB/Src/stm32f7xx_hal_adc.c **** 		}
 1932              		.loc 1 1298 0
 1933 003e 0268     		ldr	r2, [r0]
 1934 0040 D368     		ldr	r3, [r2, #12]
 1935 0042 8C68     		ldr	r4, [r1, #8]
 1936 0044 43EA0463 		orr	r3, r3, r4, lsl #24
 1937 0048 D360     		str	r3, [r2, #12]
 1938 004a 1FE0     		b	.L150
 1939              	.L149:
1303:HALLIB/Src/stm32f7xx_hal_adc.c **** 	  }
 1940              		.loc 1 1303 0
 1941 004c 0468     		ldr	r4, [r0]
 1942 004e E568     		ldr	r5, [r4, #12]
 1943 0050 8A68     		ldr	r2, [r1, #8]
 1944 0052 9BB2     		uxth	r3, r3
 1945 0054 03EB4303 		add	r3, r3, r3, lsl #1
 1946 0058 1E3B     		subs	r3, r3, #30
 1947 005a 02FA03F3 		lsl	r3, r2, r3
 1948 005e 2B43     		orrs	r3, r3, r5
 1949 0060 E360     		str	r3, [r4, #12]
 1950 0062 13E0     		b	.L150
 1951              	.L148:
1309:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1952              		.loc 1 1309 0
 1953 0064 0568     		ldr	r5, [r0]
 1954 0066 2A69     		ldr	r2, [r5, #16]
 1955 0068 9BB2     		uxth	r3, r3
 1956 006a 03EB4303 		add	r3, r3, r3, lsl #1
 1957 006e 0724     		movs	r4, #7
 1958 0070 04FA03F3 		lsl	r3, r4, r3
 1959 0074 22EA0303 		bic	r3, r2, r3
 1960 0078 2B61     		str	r3, [r5, #16]
1312:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 1961              		.loc 1 1312 0
 1962 007a 0468     		ldr	r4, [r0]
 1963 007c 2569     		ldr	r5, [r4, #16]
 1964 007e 8B68     		ldr	r3, [r1, #8]
 1965 0080 0A88     		ldrh	r2, [r1]
 1966 0082 02EB4202 		add	r2, r2, r2, lsl #1
 1967 0086 9340     		lsls	r3, r3, r2
 1968 0088 2B43     		orrs	r3, r3, r5
 1969 008a 2361     		str	r3, [r4, #16]
ARM GAS  /tmp/ccmep3G5.s 			page 69


 1970              	.L150:
1316:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 1971              		.loc 1 1316 0
 1972 008c 4B68     		ldr	r3, [r1, #4]
 1973 008e 062B     		cmp	r3, #6
 1974 0090 16D8     		bhi	.L151
1319:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1975              		.loc 1 1319 0
 1976 0092 0568     		ldr	r5, [r0]
 1977 0094 6A6B     		ldr	r2, [r5, #52]
 1978 0096 03EB8303 		add	r3, r3, r3, lsl #2
 1979 009a 053B     		subs	r3, r3, #5
 1980 009c 1F24     		movs	r4, #31
 1981 009e 04FA03F3 		lsl	r3, r4, r3
 1982 00a2 22EA0303 		bic	r3, r2, r3
 1983 00a6 6B63     		str	r3, [r5, #52]
1322:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 1984              		.loc 1 1322 0
 1985 00a8 0468     		ldr	r4, [r0]
 1986 00aa 656B     		ldr	r5, [r4, #52]
 1987 00ac 4B68     		ldr	r3, [r1, #4]
 1988 00ae 03EB8303 		add	r3, r3, r3, lsl #2
 1989 00b2 053B     		subs	r3, r3, #5
 1990 00b4 0A88     		ldrh	r2, [r1]
 1991 00b6 02FA03F3 		lsl	r3, r2, r3
 1992 00ba 2B43     		orrs	r3, r3, r5
 1993 00bc 6363     		str	r3, [r4, #52]
 1994 00be 2EE0     		b	.L152
 1995              	.L151:
1325:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 1996              		.loc 1 1325 0
 1997 00c0 0C2B     		cmp	r3, #12
 1998 00c2 16D8     		bhi	.L153
1328:HALLIB/Src/stm32f7xx_hal_adc.c ****     
 1999              		.loc 1 1328 0
 2000 00c4 0568     		ldr	r5, [r0]
 2001 00c6 2A6B     		ldr	r2, [r5, #48]
 2002 00c8 03EB8303 		add	r3, r3, r3, lsl #2
 2003 00cc 233B     		subs	r3, r3, #35
 2004 00ce 1F24     		movs	r4, #31
 2005 00d0 04FA03F3 		lsl	r3, r4, r3
 2006 00d4 22EA0303 		bic	r3, r2, r3
 2007 00d8 2B63     		str	r3, [r5, #48]
1331:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 2008              		.loc 1 1331 0
 2009 00da 0468     		ldr	r4, [r0]
 2010 00dc 256B     		ldr	r5, [r4, #48]
 2011 00de 4B68     		ldr	r3, [r1, #4]
 2012 00e0 03EB8303 		add	r3, r3, r3, lsl #2
 2013 00e4 233B     		subs	r3, r3, #35
 2014 00e6 0A88     		ldrh	r2, [r1]
 2015 00e8 02FA03F3 		lsl	r3, r2, r3
 2016 00ec 2B43     		orrs	r3, r3, r5
 2017 00ee 2363     		str	r3, [r4, #48]
 2018 00f0 15E0     		b	.L152
 2019              	.L153:
1337:HALLIB/Src/stm32f7xx_hal_adc.c ****     
ARM GAS  /tmp/ccmep3G5.s 			page 70


 2020              		.loc 1 1337 0
 2021 00f2 0568     		ldr	r5, [r0]
 2022 00f4 EA6A     		ldr	r2, [r5, #44]
 2023 00f6 03EB8303 		add	r3, r3, r3, lsl #2
 2024 00fa 413B     		subs	r3, r3, #65
 2025 00fc 1F24     		movs	r4, #31
 2026 00fe 04FA03F3 		lsl	r3, r4, r3
 2027 0102 22EA0303 		bic	r3, r2, r3
 2028 0106 EB62     		str	r3, [r5, #44]
1340:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 2029              		.loc 1 1340 0
 2030 0108 0468     		ldr	r4, [r0]
 2031 010a E56A     		ldr	r5, [r4, #44]
 2032 010c 4B68     		ldr	r3, [r1, #4]
 2033 010e 03EB8303 		add	r3, r3, r3, lsl #2
 2034 0112 413B     		subs	r3, r3, #65
 2035 0114 0A88     		ldrh	r2, [r1]
 2036 0116 02FA03F3 		lsl	r3, r2, r3
 2037 011a 2B43     		orrs	r3, r3, r5
 2038 011c E362     		str	r3, [r4, #44]
 2039              	.L152:
1344:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 2040              		.loc 1 1344 0
 2041 011e 0268     		ldr	r2, [r0]
 2042 0120 1C4B     		ldr	r3, .L160+4
 2043 0122 9A42     		cmp	r2, r3
 2044 0124 07D1     		bne	.L154
1344:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 2045              		.loc 1 1344 0 is_stmt 0 discriminator 1
 2046 0126 0B68     		ldr	r3, [r1]
 2047 0128 122B     		cmp	r3, #18
 2048 012a 04D1     		bne	.L154
1347:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 2049              		.loc 1 1347 0 is_stmt 1
 2050 012c 1A4A     		ldr	r2, .L160+8
 2051 012e 5368     		ldr	r3, [r2, #4]
 2052 0130 43F48003 		orr	r3, r3, #4194304
 2053 0134 5360     		str	r3, [r2, #4]
 2054              	.L154:
1351:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 2055              		.loc 1 1351 0
 2056 0136 0268     		ldr	r2, [r0]
 2057 0138 164B     		ldr	r3, .L160+4
 2058 013a 9A42     		cmp	r2, r3
 2059 013c 1FD1     		bne	.L155
1351:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 2060              		.loc 1 1351 0 is_stmt 0 discriminator 1
 2061 013e 0B68     		ldr	r3, [r1]
 2062 0140 134A     		ldr	r2, .L160
 2063 0142 112B     		cmp	r3, #17
 2064 0144 18BF     		it	ne
 2065 0146 9342     		cmpne	r3, r2
 2066 0148 19D1     		bne	.L155
1354:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 2067              		.loc 1 1354 0 is_stmt 1
 2068 014a 134A     		ldr	r2, .L160+8
 2069 014c 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/ccmep3G5.s 			page 71


 2070 014e 43F40003 		orr	r3, r3, #8388608
 2071 0152 5360     		str	r3, [r2, #4]
1356:HALLIB/Src/stm32f7xx_hal_adc.c ****     {
 2072              		.loc 1 1356 0
 2073 0154 0A68     		ldr	r2, [r1]
 2074 0156 0E4B     		ldr	r3, .L160
 2075 0158 9A42     		cmp	r2, r3
 2076 015a 10D1     		bne	.L155
1360:HALLIB/Src/stm32f7xx_hal_adc.c ****       while(counter != 0)
 2077              		.loc 1 1360 0
 2078 015c 0F4B     		ldr	r3, .L160+12
 2079 015e 1B68     		ldr	r3, [r3]
 2080 0160 0F4A     		ldr	r2, .L160+16
 2081 0162 A2FB0323 		umull	r2, r3, r2, r3
 2082 0166 9B0C     		lsrs	r3, r3, #18
 2083 0168 03EB8303 		add	r3, r3, r3, lsl #2
 2084 016c 5A00     		lsls	r2, r3, #1
 2085 016e 0192     		str	r2, [sp, #4]
1361:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 2086              		.loc 1 1361 0
 2087 0170 02E0     		b	.L156
 2088              	.L157:
1363:HALLIB/Src/stm32f7xx_hal_adc.c ****       }
 2089              		.loc 1 1363 0
 2090 0172 019B     		ldr	r3, [sp, #4]
 2091 0174 013B     		subs	r3, r3, #1
 2092 0176 0193     		str	r3, [sp, #4]
 2093              	.L156:
1361:HALLIB/Src/stm32f7xx_hal_adc.c ****       {
 2094              		.loc 1 1361 0
 2095 0178 019B     		ldr	r3, [sp, #4]
 2096 017a 002B     		cmp	r3, #0
 2097 017c F9D1     		bne	.L157
 2098              	.L155:
1369:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 2099              		.loc 1 1369 0
 2100 017e 0023     		movs	r3, #0
 2101 0180 80F83C30 		strb	r3, [r0, #60]
1372:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 2102              		.loc 1 1372 0
 2103 0184 1846     		mov	r0, r3
 2104              	.LVL128:
 2105 0186 00E0     		b	.L147
 2106              	.LVL129:
 2107              	.L158:
1287:HALLIB/Src/stm32f7xx_hal_adc.c **** 			
 2108              		.loc 1 1287 0
 2109 0188 0220     		movs	r0, #2
 2110              	.LVL130:
 2111              	.L147:
1373:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 2112              		.loc 1 1373 0
 2113 018a 02B0     		add	sp, sp, #8
 2114              	.LCFI21:
 2115              		.cfi_def_cfa_offset 8
 2116              		@ sp needed
 2117 018c 30BC     		pop	{r4, r5}
ARM GAS  /tmp/ccmep3G5.s 			page 72


 2118              	.LCFI22:
 2119              		.cfi_restore 5
 2120              		.cfi_restore 4
 2121              		.cfi_def_cfa_offset 0
 2122 018e 7047     		bx	lr
 2123              	.L161:
 2124              		.align	2
 2125              	.L160:
 2126 0190 12000010 		.word	268435474
 2127 0194 00200140 		.word	1073815552
 2128 0198 00230140 		.word	1073816320
 2129 019c 00000000 		.word	SystemCoreClock
 2130 01a0 83DE1B43 		.word	1125899907
 2131              		.cfi_endproc
 2132              	.LFE154:
 2134              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2135              		.align	2
 2136              		.global	HAL_ADC_AnalogWDGConfig
 2137              		.thumb
 2138              		.thumb_func
 2140              	HAL_ADC_AnalogWDGConfig:
 2141              	.LFB155:
1392:HALLIB/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
 2142              		.loc 1 1392 0
 2143              		.cfi_startproc
 2144              		@ args = 0, pretend = 0, frame = 0
 2145              		@ frame_needed = 0, uses_anonymous_args = 0
 2146              		@ link register save eliminated.
 2147              	.LVL131:
1409:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 2148              		.loc 1 1409 0
 2149 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2150 0004 012B     		cmp	r3, #1
 2151 0006 30D0     		beq	.L166
1392:HALLIB/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
 2152              		.loc 1 1392 0 discriminator 2
 2153 0008 10B4     		push	{r4}
 2154              	.LCFI23:
 2155              		.cfi_def_cfa_offset 4
 2156              		.cfi_offset 4, -4
1409:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 2157              		.loc 1 1409 0 discriminator 2
 2158 000a 0123     		movs	r3, #1
 2159 000c 80F83C30 		strb	r3, [r0, #60]
1411:HALLIB/Src/stm32f7xx_hal_adc.c ****   {
 2160              		.loc 1 1411 0 discriminator 2
 2161 0010 0B69     		ldr	r3, [r1, #16]
 2162 0012 012B     		cmp	r3, #1
 2163 0014 05D1     		bne	.L164
1414:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 2164              		.loc 1 1414 0
 2165 0016 0268     		ldr	r2, [r0]
 2166 0018 5368     		ldr	r3, [r2, #4]
 2167 001a 43F04003 		orr	r3, r3, #64
 2168 001e 5360     		str	r3, [r2, #4]
 2169 0020 04E0     		b	.L165
 2170              	.L164:
ARM GAS  /tmp/ccmep3G5.s 			page 73


1419:HALLIB/Src/stm32f7xx_hal_adc.c ****   }
 2171              		.loc 1 1419 0
 2172 0022 0268     		ldr	r2, [r0]
 2173 0024 5368     		ldr	r3, [r2, #4]
 2174 0026 23F04003 		bic	r3, r3, #64
 2175 002a 5360     		str	r3, [r2, #4]
 2176              	.L165:
1423:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 2177              		.loc 1 1423 0
 2178 002c 0268     		ldr	r2, [r0]
 2179 002e 5468     		ldr	r4, [r2, #4]
 2180 0030 104B     		ldr	r3, .L169
 2181 0032 2340     		ands	r3, r3, r4
 2182 0034 5360     		str	r3, [r2, #4]
1426:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 2183              		.loc 1 1426 0
 2184 0036 0268     		ldr	r2, [r0]
 2185 0038 5468     		ldr	r4, [r2, #4]
 2186 003a 0B68     		ldr	r3, [r1]
 2187 003c 2343     		orrs	r3, r3, r4
 2188 003e 5360     		str	r3, [r2, #4]
1429:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 2189              		.loc 1 1429 0
 2190 0040 0368     		ldr	r3, [r0]
 2191 0042 4A68     		ldr	r2, [r1, #4]
 2192 0044 5A62     		str	r2, [r3, #36]
1432:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 2193              		.loc 1 1432 0
 2194 0046 0368     		ldr	r3, [r0]
 2195 0048 8A68     		ldr	r2, [r1, #8]
 2196 004a 9A62     		str	r2, [r3, #40]
1435:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 2197              		.loc 1 1435 0
 2198 004c 0268     		ldr	r2, [r0]
 2199 004e 5368     		ldr	r3, [r2, #4]
 2200 0050 23F01F03 		bic	r3, r3, #31
 2201 0054 5360     		str	r3, [r2, #4]
1438:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 2202              		.loc 1 1438 0
 2203 0056 0268     		ldr	r2, [r0]
 2204 0058 5368     		ldr	r3, [r2, #4]
 2205 005a 8989     		ldrh	r1, [r1, #12]
 2206              	.LVL132:
 2207 005c 0B43     		orrs	r3, r3, r1
 2208 005e 5360     		str	r3, [r2, #4]
1441:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 2209              		.loc 1 1441 0
 2210 0060 0023     		movs	r3, #0
 2211 0062 80F83C30 		strb	r3, [r0, #60]
1444:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 2212              		.loc 1 1444 0
 2213 0066 1846     		mov	r0, r3
 2214              	.LVL133:
 2215 0068 01E0     		b	.L163
 2216              	.LVL134:
 2217              	.L166:
 2218              	.LCFI24:
ARM GAS  /tmp/ccmep3G5.s 			page 74


 2219              		.cfi_def_cfa_offset 0
 2220              		.cfi_restore 4
1409:HALLIB/Src/stm32f7xx_hal_adc.c ****   
 2221              		.loc 1 1409 0
 2222 006a 0220     		movs	r0, #2
 2223              	.LVL135:
 2224 006c 7047     		bx	lr
 2225              	.LVL136:
 2226              	.L163:
 2227              	.LCFI25:
 2228              		.cfi_def_cfa_offset 4
 2229              		.cfi_offset 4, -4
1445:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 2230              		.loc 1 1445 0
 2231 006e 5DF8044B 		ldr	r4, [sp], #4
 2232              	.LCFI26:
 2233              		.cfi_restore 4
 2234              		.cfi_def_cfa_offset 0
 2235 0072 7047     		bx	lr
 2236              	.L170:
 2237              		.align	2
 2238              	.L169:
 2239 0074 FFFD3FFF 		.word	-12583425
 2240              		.cfi_endproc
 2241              	.LFE155:
 2243              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2244              		.align	2
 2245              		.global	HAL_ADC_GetState
 2246              		.thumb
 2247              		.thumb_func
 2249              	HAL_ADC_GetState:
 2250              	.LFB156:
1474:HALLIB/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
 2251              		.loc 1 1474 0
 2252              		.cfi_startproc
 2253              		@ args = 0, pretend = 0, frame = 0
 2254              		@ frame_needed = 0, uses_anonymous_args = 0
 2255              		@ link register save eliminated.
 2256              	.LVL137:
1476:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 2257              		.loc 1 1476 0
 2258 0000 006C     		ldr	r0, [r0, #64]
 2259              	.LVL138:
1477:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 2260              		.loc 1 1477 0
 2261 0002 7047     		bx	lr
 2262              		.cfi_endproc
 2263              	.LFE156:
 2265              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2266              		.align	2
 2267              		.global	HAL_ADC_GetError
 2268              		.thumb
 2269              		.thumb_func
 2271              	HAL_ADC_GetError:
 2272              	.LFB157:
1486:HALLIB/Src/stm32f7xx_hal_adc.c ****   return hadc->ErrorCode;
 2273              		.loc 1 1486 0
ARM GAS  /tmp/ccmep3G5.s 			page 75


 2274              		.cfi_startproc
 2275              		@ args = 0, pretend = 0, frame = 0
 2276              		@ frame_needed = 0, uses_anonymous_args = 0
 2277              		@ link register save eliminated.
 2278              	.LVL139:
1487:HALLIB/Src/stm32f7xx_hal_adc.c **** }
 2279              		.loc 1 1487 0
 2280 0000 406C     		ldr	r0, [r0, #68]
 2281              	.LVL140:
1488:HALLIB/Src/stm32f7xx_hal_adc.c **** 
 2282              		.loc 1 1488 0
 2283 0002 7047     		bx	lr
 2284              		.cfi_endproc
 2285              	.LFE157:
 2287              		.text
 2288              	.Letext0:
 2289              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 2290              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 2291              		.file 4 "Inc/stm32f767xx.h"
 2292              		.file 5 "Inc/stm32f7xx.h"
 2293              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 2294              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 2295              		.file 8 "HALLIB/Inc/stm32f7xx_hal_adc.h"
 2296              		.file 9 "CORE/core_cm7.h"
 2297              		.file 10 "Inc/system_stm32f7xx.h"
 2298              		.file 11 "HALLIB/Inc/stm32f7xx_hal.h"
 2299              		.file 12 "HALLIB/Inc/stm32f7xx_hal_adc_ex.h"
ARM GAS  /tmp/ccmep3G5.s 			page 76


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_adc.c
     /tmp/ccmep3G5.s:21     .text.ADC_Init:00000000 $t
     /tmp/ccmep3G5.s:25     .text.ADC_Init:00000000 ADC_Init
     /tmp/ccmep3G5.s:194    .text.ADC_Init:00000124 $d
     /tmp/ccmep3G5.s:200    .text.HAL_ADC_MspInit:00000000 $t
     /tmp/ccmep3G5.s:205    .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
     /tmp/ccmep3G5.s:218    .text.HAL_ADC_Init:00000000 $t
     /tmp/ccmep3G5.s:223    .text.HAL_ADC_Init:00000000 HAL_ADC_Init
     /tmp/ccmep3G5.s:296    .text.HAL_ADC_Init:00000050 $d
     /tmp/ccmep3G5.s:301    .text.HAL_ADC_MspDeInit:00000000 $t
     /tmp/ccmep3G5.s:306    .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
     /tmp/ccmep3G5.s:319    .text.HAL_ADC_DeInit:00000000 $t
     /tmp/ccmep3G5.s:324    .text.HAL_ADC_DeInit:00000000 HAL_ADC_DeInit
     /tmp/ccmep3G5.s:382    .text.HAL_ADC_Start:00000000 $t
     /tmp/ccmep3G5.s:387    .text.HAL_ADC_Start:00000000 HAL_ADC_Start
     /tmp/ccmep3G5.s:552    .text.HAL_ADC_Start:000000e4 $d
     /tmp/ccmep3G5.s:561    .text.HAL_ADC_Stop:00000000 $t
     /tmp/ccmep3G5.s:566    .text.HAL_ADC_Stop:00000000 HAL_ADC_Stop
     /tmp/ccmep3G5.s:615    .text.HAL_ADC_Stop:0000003c $d
     /tmp/ccmep3G5.s:620    .text.HAL_ADC_PollForConversion:00000000 $t
     /tmp/ccmep3G5.s:625    .text.HAL_ADC_PollForConversion:00000000 HAL_ADC_PollForConversion
     /tmp/ccmep3G5.s:766    .text.HAL_ADC_PollForEvent:00000000 $t
     /tmp/ccmep3G5.s:771    .text.HAL_ADC_PollForEvent:00000000 HAL_ADC_PollForEvent
     /tmp/ccmep3G5.s:863    .text.HAL_ADC_Start_IT:00000000 $t
     /tmp/ccmep3G5.s:868    .text.HAL_ADC_Start_IT:00000000 HAL_ADC_Start_IT
     /tmp/ccmep3G5.s:1039   .text.HAL_ADC_Start_IT:000000f0 $d
     /tmp/ccmep3G5.s:1049   .text.HAL_ADC_Stop_IT:00000000 $t
     /tmp/ccmep3G5.s:1054   .text.HAL_ADC_Stop_IT:00000000 HAL_ADC_Stop_IT
     /tmp/ccmep3G5.s:1108   .text.HAL_ADC_Stop_IT:00000044 $d
     /tmp/ccmep3G5.s:1114   .text.HAL_ADC_Start_DMA:00000000 $t
     /tmp/ccmep3G5.s:1119   .text.HAL_ADC_Start_DMA:00000000 HAL_ADC_Start_DMA
     /tmp/ccmep3G5.s:1317   .text.HAL_ADC_Start_DMA:00000120 $d
     /tmp/ccmep3G5.s:1460   .text.ADC_DMAConvCplt:00000000 ADC_DMAConvCplt
     /tmp/ccmep3G5.s:1562   .text.ADC_DMAHalfConvCplt:00000000 ADC_DMAHalfConvCplt
     /tmp/ccmep3G5.s:1852   .text.ADC_DMAError:00000000 ADC_DMAError
     /tmp/ccmep3G5.s:1329   .text.HAL_ADC_Stop_DMA:00000000 $t
     /tmp/ccmep3G5.s:1334   .text.HAL_ADC_Stop_DMA:00000000 HAL_ADC_Stop_DMA
     /tmp/ccmep3G5.s:1410   .text.HAL_ADC_Stop_DMA:0000005c $d
     /tmp/ccmep3G5.s:1415   .text.HAL_ADC_GetValue:00000000 $t
     /tmp/ccmep3G5.s:1420   .text.HAL_ADC_GetValue:00000000 HAL_ADC_GetValue
     /tmp/ccmep3G5.s:1438   .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccmep3G5.s:1443   .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccmep3G5.s:1456   .text.ADC_DMAConvCplt:00000000 $t
     /tmp/ccmep3G5.s:1540   .text.HAL_ADC_ConvHalfCpltCallback:00000000 $t
     /tmp/ccmep3G5.s:1545   .text.HAL_ADC_ConvHalfCpltCallback:00000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccmep3G5.s:1558   .text.ADC_DMAHalfConvCplt:00000000 $t
     /tmp/ccmep3G5.s:1586   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 $t
     /tmp/ccmep3G5.s:1591   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccmep3G5.s:1604   .text.HAL_ADC_ErrorCallback:00000000 $t
     /tmp/ccmep3G5.s:1609   .text.HAL_ADC_ErrorCallback:00000000 HAL_ADC_ErrorCallback
     /tmp/ccmep3G5.s:1622   .text.HAL_ADC_IRQHandler:00000000 $t
     /tmp/ccmep3G5.s:1627   .text.HAL_ADC_IRQHandler:00000000 HAL_ADC_IRQHandler
     /tmp/ccmep3G5.s:1848   .text.ADC_DMAError:00000000 $t
     /tmp/ccmep3G5.s:1882   .text.HAL_ADC_ConfigChannel:00000000 $t
     /tmp/ccmep3G5.s:1887   .text.HAL_ADC_ConfigChannel:00000000 HAL_ADC_ConfigChannel
     /tmp/ccmep3G5.s:2126   .text.HAL_ADC_ConfigChannel:00000190 $d
ARM GAS  /tmp/ccmep3G5.s 			page 77


     /tmp/ccmep3G5.s:2135   .text.HAL_ADC_AnalogWDGConfig:00000000 $t
     /tmp/ccmep3G5.s:2140   .text.HAL_ADC_AnalogWDGConfig:00000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccmep3G5.s:2239   .text.HAL_ADC_AnalogWDGConfig:00000074 $d
     /tmp/ccmep3G5.s:2244   .text.HAL_ADC_GetState:00000000 $t
     /tmp/ccmep3G5.s:2249   .text.HAL_ADC_GetState:00000000 HAL_ADC_GetState
     /tmp/ccmep3G5.s:2266   .text.HAL_ADC_GetError:00000000 $t
     /tmp/ccmep3G5.s:2271   .text.HAL_ADC_GetError:00000000 HAL_ADC_GetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_InjectedConvCpltCallback
