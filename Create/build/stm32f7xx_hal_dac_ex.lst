ARM GAS  /tmp/ccQWUcki.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_dac_ex.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_DACEx_DualGetValue,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_DACEx_DualGetValue
  23              		.thumb
  24              		.thumb_func
  26              	HAL_DACEx_DualGetValue:
  27              	.LFB136:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal_dac_ex.c"
   1:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @file    stm32f7xx_hal_dac_ex.c
   4:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief   Extended DAC HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *         This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *         functionalities of DAC extension peripheral:
   8:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *           + Extended features functions
   9:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *     
  10:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *
  11:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   @verbatim      
  12:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   ==============================================================================
  13:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****                       ##### How to use this driver #####
  14:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****     [..]          
  16:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****       (+) When Dual mode is enabled (i.e DAC Channel1 and Channel2 are used simultaneously) :
  17:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****           Use HAL_DACEx_DualGetValue() to get digital data to be converted and use
  18:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****           HAL_DACEx_DualSetValue() to set digital value to converted simultaneously in Channel 1 an
  19:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****       (+) Use HAL_DACEx_TriangleWaveGenerate() to generate Triangle signal.
  20:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****       (+) Use HAL_DACEx_NoiseWaveGenerate() to generate Noise signal.
  21:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****    
  22:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****  @endverbatim    
  23:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   ******************************************************************************
  24:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @attention
  25:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *
  26:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  27:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *
  28:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  29:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * are permitted provided that the following conditions are met:
  30:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
ARM GAS  /tmp/ccQWUcki.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *      this list of conditions and the following disclaimer.
  32:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  33:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  34:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *      and/or other materials provided with the distribution.
  35:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  36:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *      may be used to endorse or promote products derived from this software
  37:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *      without specific prior written permission.
  38:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *
  39:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  40:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  41:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  42:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  43:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  44:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  45:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  46:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  47:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  48:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  49:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *
  50:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   ******************************************************************************
  51:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */ 
  52:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
  53:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
  54:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /* Includes ------------------------------------------------------------------*/
  55:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** #include "stm32f7xx_hal.h"
  56:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
  57:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /** @addtogroup STM32F7xx_HAL_Driver
  58:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @{
  59:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
  60:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
  61:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /** @defgroup DACEx DACEx
  62:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief DAC driver modules
  63:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @{
  64:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */ 
  65:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
  66:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** #ifdef HAL_DAC_MODULE_ENABLED
  67:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
  68:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /* Private typedef -----------------------------------------------------------*/
  69:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /* Private define ------------------------------------------------------------*/
  70:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /* Private macro -------------------------------------------------------------*/
  71:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /* Private variables ---------------------------------------------------------*/
  72:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /* Private function prototypes -----------------------------------------------*/
  73:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /* Private functions ---------------------------------------------------------*/
  74:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /* Exported functions --------------------------------------------------------*/
  75:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /** @defgroup DACEx_Exported_Functions DAC Exported Functions
  76:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @{
  77:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
  78:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
  79:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /** @defgroup DACEx_Exported_Functions_Group1 Extended features functions
  80:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****  *  @brief    Extended features functions 
  81:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****  *
  82:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** @verbatim   
  83:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   ==============================================================================
  84:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****                  ##### Extended features functions #####
  85:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   ==============================================================================  
  86:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****     [..]  This section provides functions allowing to:
  87:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****       (+) Start conversion.
ARM GAS  /tmp/ccQWUcki.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****       (+) Stop conversion.
  89:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****       (+) Start conversion and enable DMA transfer.
  90:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****       (+) Stop conversion and disable DMA transfer.
  91:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****       (+) Get result of conversion.
  92:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****       (+) Get result of dual mode conversion.
  93:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****                      
  94:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** @endverbatim
  95:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @{
  96:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
  97:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
  98:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
  99:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief  Returns the last data output value of the selected DAC channel.
 100:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 101:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *         the configuration information for the specified DAC.
 102:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @retval The selected DAC channel data output value.
 103:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 104:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef* hdac)
 105:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** {
  29              		.loc 1 105 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
 106:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   uint32_t tmp = 0;
 107:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 108:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   tmp |= hdac->Instance->DOR1;
  35              		.loc 1 108 0
  36 0000 0368     		ldr	r3, [r0]
  37 0002 DA6A     		ldr	r2, [r3, #44]
  38              	.LVL1:
 109:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 110:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   tmp |= hdac->Instance->DOR2 << 16;
  39              		.loc 1 110 0
  40 0004 186B     		ldr	r0, [r3, #48]
  41              	.LVL2:
 111:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 112:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Returns the DAC channel data output register value */
 113:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   return tmp;
 114:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** }
  42              		.loc 1 114 0
  43 0006 42EA0040 		orr	r0, r2, r0, lsl #16
  44              	.LVL3:
  45 000a 7047     		bx	lr
  46              		.cfi_endproc
  47              	.LFE136:
  49              		.section	.text.HAL_DACEx_TriangleWaveGenerate,"ax",%progbits
  50              		.align	2
  51              		.global	HAL_DACEx_TriangleWaveGenerate
  52              		.thumb
  53              		.thumb_func
  55              	HAL_DACEx_TriangleWaveGenerate:
  56              	.LFB137:
 115:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 116:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
 117:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief  Enables or disables the selected DAC channel wave generation.
 118:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
ARM GAS  /tmp/ccQWUcki.s 			page 4


 119:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *         the configuration information for the specified DAC.
 120:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  Channel The selected DAC channel. 
 121:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *          This parameter can be one of the following values:
 122:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_CHANNEL_1: DAC Channel1 selected 
 123:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_CHANNEL_2: DAC Channel2 selected
 124:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  Amplitude Select max triangle amplitude. 
 125:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *          This parameter can be one of the following values:
 126:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_1: Select max triangle amplitude of 1
 127:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_3: Select max triangle amplitude of 3
 128:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_7: Select max triangle amplitude of 7
 129:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_15: Select max triangle amplitude of 15
 130:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_31: Select max triangle amplitude of 31
 131:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_63: Select max triangle amplitude of 63
 132:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_127: Select max triangle amplitude of 127
 133:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_255: Select max triangle amplitude of 255
 134:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_511: Select max triangle amplitude of 511
 135:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_1023: Select max triangle amplitude of 1023
 136:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
 137:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095              
 138:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @retval HAL status
 139:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 140:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_
 141:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** {  
  57              		.loc 1 141 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  62              	.LVL4:
 142:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Check the parameters */
 143:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   assert_param(IS_DAC_CHANNEL(Channel));
 144:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
 145:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 146:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Process locked */
 147:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   __HAL_LOCK(hdac);
  63              		.loc 1 147 0
  64 0000 4379     		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  65 0002 012B     		cmp	r3, #1
  66 0004 17D0     		beq	.L4
 141:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Check the parameters */
  67              		.loc 1 141 0 discriminator 2
  68 0006 70B4     		push	{r4, r5, r6}
  69              	.LCFI0:
  70              		.cfi_def_cfa_offset 12
  71              		.cfi_offset 4, -12
  72              		.cfi_offset 5, -8
  73              		.cfi_offset 6, -4
  74              		.loc 1 147 0 discriminator 2
  75 0008 0125     		movs	r5, #1
  76 000a 4571     		strb	r5, [r0, #5]
 148:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 149:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Change DAC state */
 150:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   hdac->State = HAL_DAC_STATE_BUSY;
  77              		.loc 1 150 0 discriminator 2
  78 000c 0223     		movs	r3, #2
  79 000e 0371     		strb	r3, [r0, #4]
 151:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
ARM GAS  /tmp/ccQWUcki.s 			page 5


 152:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Enable the selected wave generation for the selected DAC channel */
 153:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_1 | Amplit
  80              		.loc 1 153 0 discriminator 2
  81 0010 0668     		ldr	r6, [r0]
  82 0012 3468     		ldr	r4, [r6]
  83 0014 4FF47C63 		mov	r3, #4032
  84 0018 8B40     		lsls	r3, r3, r1
  85 001a 24EA0303 		bic	r3, r4, r3
  86 001e 42F08002 		orr	r2, r2, #128
  87              	.LVL5:
  88 0022 02FA01F1 		lsl	r1, r2, r1
  89              	.LVL6:
  90 0026 43EA0102 		orr	r2, r3, r1
  91 002a 3260     		str	r2, [r6]
 154:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 155:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Change DAC state */
 156:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   hdac->State = HAL_DAC_STATE_READY;
  92              		.loc 1 156 0 discriminator 2
  93 002c 0571     		strb	r5, [r0, #4]
 157:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 158:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Process unlocked */
 159:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   __HAL_UNLOCK(hdac);
  94              		.loc 1 159 0 discriminator 2
  95 002e 0023     		movs	r3, #0
  96 0030 4371     		strb	r3, [r0, #5]
 160:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 161:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Return function status */
 162:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   return HAL_OK;
  97              		.loc 1 162 0 discriminator 2
  98 0032 1846     		mov	r0, r3
  99              	.LVL7:
 100 0034 01E0     		b	.L3
 101              	.LVL8:
 102              	.L4:
 103              	.LCFI1:
 104              		.cfi_def_cfa_offset 0
 105              		.cfi_restore 4
 106              		.cfi_restore 5
 107              		.cfi_restore 6
 147:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 108              		.loc 1 147 0
 109 0036 0220     		movs	r0, #2
 110              	.LVL9:
 111 0038 7047     		bx	lr
 112              	.LVL10:
 113              	.L3:
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 12
 116              		.cfi_offset 4, -12
 117              		.cfi_offset 5, -8
 118              		.cfi_offset 6, -4
 163:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** }
 119              		.loc 1 163 0
 120 003a 70BC     		pop	{r4, r5, r6}
 121              	.LCFI3:
 122              		.cfi_restore 6
 123              		.cfi_restore 5
ARM GAS  /tmp/ccQWUcki.s 			page 6


 124              		.cfi_restore 4
 125              		.cfi_def_cfa_offset 0
 126 003c 7047     		bx	lr
 127              		.cfi_endproc
 128              	.LFE137:
 130 003e 00BF     		.section	.text.HAL_DACEx_NoiseWaveGenerate,"ax",%progbits
 131              		.align	2
 132              		.global	HAL_DACEx_NoiseWaveGenerate
 133              		.thumb
 134              		.thumb_func
 136              	HAL_DACEx_NoiseWaveGenerate:
 137              	.LFB138:
 164:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 165:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
 166:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief  Enables or disables the selected DAC channel wave generation.
 167:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 168:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *         the configuration information for the specified DAC. 
 169:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  Channel The selected DAC channel. 
 170:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *          This parameter can be one of the following values:
 171:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_CHANNEL_1: DAC Channel1 selected 
 172:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_CHANNEL_2: DAC Channel2 selected
 173:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  Amplitude Unmask DAC channel LFSR for noise wave generation. 
 174:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *          This parameter can be one of the following values: 
 175:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BIT0: Unmask DAC channel LFSR bit0 for noise wave generation
 176:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BITS1_0: Unmask DAC channel LFSR bit[1:0] for noise wave generat
 177:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BITS2_0: Unmask DAC channel LFSR bit[2:0] for noise wave generat
 178:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BITS3_0: Unmask DAC channel LFSR bit[3:0] for noise wave generat
 179:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BITS4_0: Unmask DAC channel LFSR bit[4:0] for noise wave generat
 180:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BITS5_0: Unmask DAC channel LFSR bit[5:0] for noise wave generat
 181:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BITS6_0: Unmask DAC channel LFSR bit[6:0] for noise wave generat
 182:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BITS7_0: Unmask DAC channel LFSR bit[7:0] for noise wave generat
 183:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BITS8_0: Unmask DAC channel LFSR bit[8:0] for noise wave generat
 184:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BITS9_0: Unmask DAC channel LFSR bit[9:0] for noise wave generat
 185:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave gener
 186:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave gener
 187:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @retval HAL status
 188:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 189:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t A
 190:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** {  
 138              		.loc 1 190 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 143              	.LVL11:
 191:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Check the parameters */
 192:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   assert_param(IS_DAC_CHANNEL(Channel));
 193:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
 194:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 195:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Process locked */
 196:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   __HAL_LOCK(hdac);
 144              		.loc 1 196 0
 145 0000 4379     		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 146 0002 012B     		cmp	r3, #1
 147 0004 17D0     		beq	.L9
 190:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Check the parameters */
 148              		.loc 1 190 0 discriminator 2
ARM GAS  /tmp/ccQWUcki.s 			page 7


 149 0006 70B4     		push	{r4, r5, r6}
 150              	.LCFI4:
 151              		.cfi_def_cfa_offset 12
 152              		.cfi_offset 4, -12
 153              		.cfi_offset 5, -8
 154              		.cfi_offset 6, -4
 155              		.loc 1 196 0 discriminator 2
 156 0008 0125     		movs	r5, #1
 157 000a 4571     		strb	r5, [r0, #5]
 197:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 198:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Change DAC state */
 199:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   hdac->State = HAL_DAC_STATE_BUSY;
 158              		.loc 1 199 0 discriminator 2
 159 000c 0223     		movs	r3, #2
 160 000e 0371     		strb	r3, [r0, #4]
 200:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 201:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Enable the selected wave generation for the selected DAC channel */
 202:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_0 | Amplit
 161              		.loc 1 202 0 discriminator 2
 162 0010 0668     		ldr	r6, [r0]
 163 0012 3468     		ldr	r4, [r6]
 164 0014 4FF47C63 		mov	r3, #4032
 165 0018 8B40     		lsls	r3, r3, r1
 166 001a 24EA0303 		bic	r3, r4, r3
 167 001e 42F04002 		orr	r2, r2, #64
 168              	.LVL12:
 169 0022 02FA01F1 		lsl	r1, r2, r1
 170              	.LVL13:
 171 0026 43EA0102 		orr	r2, r3, r1
 172 002a 3260     		str	r2, [r6]
 203:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 204:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Change DAC state */
 205:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   hdac->State = HAL_DAC_STATE_READY;
 173              		.loc 1 205 0 discriminator 2
 174 002c 0571     		strb	r5, [r0, #4]
 206:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 207:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Process unlocked */
 208:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   __HAL_UNLOCK(hdac);
 175              		.loc 1 208 0 discriminator 2
 176 002e 0023     		movs	r3, #0
 177 0030 4371     		strb	r3, [r0, #5]
 209:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 210:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Return function status */
 211:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   return HAL_OK;
 178              		.loc 1 211 0 discriminator 2
 179 0032 1846     		mov	r0, r3
 180              	.LVL14:
 181 0034 01E0     		b	.L8
 182              	.LVL15:
 183              	.L9:
 184              	.LCFI5:
 185              		.cfi_def_cfa_offset 0
 186              		.cfi_restore 4
 187              		.cfi_restore 5
 188              		.cfi_restore 6
 196:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 189              		.loc 1 196 0
ARM GAS  /tmp/ccQWUcki.s 			page 8


 190 0036 0220     		movs	r0, #2
 191              	.LVL16:
 192 0038 7047     		bx	lr
 193              	.LVL17:
 194              	.L8:
 195              	.LCFI6:
 196              		.cfi_def_cfa_offset 12
 197              		.cfi_offset 4, -12
 198              		.cfi_offset 5, -8
 199              		.cfi_offset 6, -4
 212:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** }
 200              		.loc 1 212 0
 201 003a 70BC     		pop	{r4, r5, r6}
 202              	.LCFI7:
 203              		.cfi_restore 6
 204              		.cfi_restore 5
 205              		.cfi_restore 4
 206              		.cfi_def_cfa_offset 0
 207 003c 7047     		bx	lr
 208              		.cfi_endproc
 209              	.LFE138:
 211 003e 00BF     		.section	.text.HAL_DACEx_DualSetValue,"ax",%progbits
 212              		.align	2
 213              		.global	HAL_DACEx_DualSetValue
 214              		.thumb
 215              		.thumb_func
 217              	HAL_DACEx_DualSetValue:
 218              	.LFB139:
 213:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 214:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
 215:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief  Set the specified data holding register value for dual DAC channel.
 216:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 217:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *               the configuration information for the specified DAC.
 218:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  Alignment Specifies the data alignment for dual channel DAC.
 219:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *          This parameter can be one of the following values:
 220:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            DAC_ALIGN_8B_R: 8bit right data alignment selected
 221:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            DAC_ALIGN_12B_L: 12bit left data alignment selected
 222:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *            DAC_ALIGN_12B_R: 12bit right data alignment selected
 223:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  Data1 Data for DAC Channel2 to be loaded in the selected data holding register.
 224:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  Data2 Data for DAC Channel1 to be loaded in the selected data  holding register.
 225:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @note   In dual mode, a unique register access is required to write in both
 226:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *          DAC channels at the same time.
 227:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @retval HAL status
 228:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 229:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef* hdac, uint32_t Alignment, uint32_t Data
 230:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** {  
 219              		.loc 1 230 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 224              	.LVL18:
 231:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   uint32_t data = 0, tmp = 0;
 232:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 233:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Check the parameters */
 234:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   assert_param(IS_DAC_ALIGN(Alignment));
 235:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   assert_param(IS_DAC_DATA(Data1));
ARM GAS  /tmp/ccQWUcki.s 			page 9


 236:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   assert_param(IS_DAC_DATA(Data2));
 237:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 238:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Calculate and set dual DAC data holding register value */
 239:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   if (Alignment == DAC_ALIGN_8B_R)
 225              		.loc 1 239 0
 226 0000 0829     		cmp	r1, #8
 227 0002 02D1     		bne	.L13
 240:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   {
 241:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****     data = ((uint32_t)Data2 << 8) | Data1; 
 228              		.loc 1 241 0
 229 0004 42EA0322 		orr	r2, r2, r3, lsl #8
 230              	.LVL19:
 231 0008 01E0     		b	.L14
 232              	.LVL20:
 233              	.L13:
 242:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   }
 243:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   else
 244:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   {
 245:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****     data = ((uint32_t)Data2 << 16) | Data1;
 234              		.loc 1 245 0
 235 000a 42EA0342 		orr	r2, r2, r3, lsl #16
 236              	.LVL21:
 237              	.L14:
 246:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   }
 247:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 248:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   tmp = (uint32_t)hdac->Instance;
 238              		.loc 1 248 0
 239 000e 0068     		ldr	r0, [r0]
 240              	.LVL22:
 249:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 241              		.loc 1 249 0
 242 0010 0144     		add	r1, r1, r0
 243              	.LVL23:
 250:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 251:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Set the dual DAC selected data holding register */
 252:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *(__IO uint32_t *)tmp = data;
 244              		.loc 1 252 0
 245 0012 0A62     		str	r2, [r1, #32]
 253:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 254:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Return function status */
 255:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   return HAL_OK;
 256:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** }
 246              		.loc 1 256 0
 247 0014 0020     		movs	r0, #0
 248 0016 7047     		bx	lr
 249              		.cfi_endproc
 250              	.LFE139:
 252              		.section	.text.HAL_DACEx_ConvCpltCallbackCh2,"ax",%progbits
 253              		.align	2
 254              		.weak	HAL_DACEx_ConvCpltCallbackCh2
 255              		.thumb
 256              		.thumb_func
 258              	HAL_DACEx_ConvCpltCallbackCh2:
 259              	.LFB140:
 257:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 258:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
 259:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @}
ARM GAS  /tmp/ccQWUcki.s 			page 10


 260:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 261:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 262:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
 263:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief  Conversion complete callback in non blocking mode for Channel2 
 264:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 265:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *         the configuration information for the specified DAC.
 266:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @retval None
 267:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 268:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** __weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
 269:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** {
 260              		.loc 1 269 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265              	.LVL24:
 266 0000 7047     		bx	lr
 267              		.cfi_endproc
 268              	.LFE140:
 270 0002 00BF     		.section	.text.HAL_DACEx_ConvHalfCpltCallbackCh2,"ax",%progbits
 271              		.align	2
 272              		.weak	HAL_DACEx_ConvHalfCpltCallbackCh2
 273              		.thumb
 274              		.thumb_func
 276              	HAL_DACEx_ConvHalfCpltCallbackCh2:
 277              	.LFB141:
 270:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Prevent unused argument(s) compilation warning */
 271:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   UNUSED(hdac);
 272:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****  
 273:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 274:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****             the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
 275:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****    */
 276:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** }
 277:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 278:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
 279:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief  Conversion half DMA transfer callback in non blocking mode for Channel2 
 280:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 281:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *         the configuration information for the specified DAC.
 282:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @retval None
 283:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 284:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** __weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
 285:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** {
 278              		.loc 1 285 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 283              	.LVL25:
 284 0000 7047     		bx	lr
 285              		.cfi_endproc
 286              	.LFE141:
 288 0002 00BF     		.section	.text.HAL_DACEx_ErrorCallbackCh2,"ax",%progbits
 289              		.align	2
 290              		.weak	HAL_DACEx_ErrorCallbackCh2
 291              		.thumb
 292              		.thumb_func
 294              	HAL_DACEx_ErrorCallbackCh2:
ARM GAS  /tmp/ccQWUcki.s 			page 11


 295              	.LFB142:
 286:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Prevent unused argument(s) compilation warning */
 287:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   UNUSED(hdac);
 288:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****  
 289:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 290:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****             the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
 291:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****    */
 292:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** }
 293:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 294:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
 295:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief  Error DAC callback for Channel2.
 296:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 297:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *         the configuration information for the specified DAC.
 298:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @retval None
 299:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 300:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** __weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 301:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** {
 296              		.loc 1 301 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301              	.LVL26:
 302 0000 7047     		bx	lr
 303              		.cfi_endproc
 304              	.LFE142:
 306 0002 00BF     		.section	.text.HAL_DACEx_DMAUnderrunCallbackCh2,"ax",%progbits
 307              		.align	2
 308              		.weak	HAL_DACEx_DMAUnderrunCallbackCh2
 309              		.thumb
 310              		.thumb_func
 312              	HAL_DACEx_DMAUnderrunCallbackCh2:
 313              	.LFB143:
 302:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Prevent unused argument(s) compilation warning */
 303:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   UNUSED(hdac);
 304:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****  
 305:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 306:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****             the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
 307:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****    */
 308:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** }
 309:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 310:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
 311:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief  DMA underrun DAC callback for channel2.
 312:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 313:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *         the configuration information for the specified DAC.
 314:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @retval None
 315:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 316:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** __weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 317:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** {
 314              		.loc 1 317 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319              	.LVL27:
 320 0000 7047     		bx	lr
 321              		.cfi_endproc
ARM GAS  /tmp/ccQWUcki.s 			page 12


 322              	.LFE143:
 324 0002 00BF     		.section	.text.DAC_DMAConvCpltCh2,"ax",%progbits
 325              		.align	2
 326              		.global	DAC_DMAConvCpltCh2
 327              		.thumb
 328              		.thumb_func
 330              	DAC_DMAConvCpltCh2:
 331              	.LFB144:
 318:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Prevent unused argument(s) compilation warning */
 319:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   UNUSED(hdac);
 320:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****  
 321:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 322:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****             the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
 323:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****    */
 324:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** }
 325:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 326:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
 327:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief  DMA conversion complete callback. 
 328:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 329:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *                the configuration information for the specified DMA module.
 330:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @retval None
 331:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 332:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
 333:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** {
 332              		.loc 1 333 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              	.LVL28:
 337              		.loc 1 333 0
 338 0000 10B5     		push	{r4, lr}
 339              	.LCFI8:
 340              		.cfi_def_cfa_offset 8
 341              		.cfi_offset 4, -8
 342              		.cfi_offset 14, -4
 334:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 343              		.loc 1 334 0
 344 0002 846B     		ldr	r4, [r0, #56]
 345              	.LVL29:
 335:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 336:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 346              		.loc 1 336 0
 347 0004 2046     		mov	r0, r4
 348              	.LVL30:
 349 0006 FFF7FEFF 		bl	HAL_DACEx_ConvCpltCallbackCh2
 350              	.LVL31:
 337:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   
 338:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   hdac->State= HAL_DAC_STATE_READY;
 351              		.loc 1 338 0
 352 000a 0123     		movs	r3, #1
 353 000c 2371     		strb	r3, [r4, #4]
 354 000e 10BD     		pop	{r4, pc}
 355              		.cfi_endproc
 356              	.LFE144:
 358              		.section	.text.DAC_DMAHalfConvCpltCh2,"ax",%progbits
 359              		.align	2
 360              		.global	DAC_DMAHalfConvCpltCh2
ARM GAS  /tmp/ccQWUcki.s 			page 13


 361              		.thumb
 362              		.thumb_func
 364              	DAC_DMAHalfConvCpltCh2:
 365              	.LFB145:
 339:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** }
 340:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 341:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
 342:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief  DMA half transfer complete callback. 
 343:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 344:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *                the configuration information for the specified DMA module.
 345:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @retval None
 346:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 347:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
 348:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** {
 366              		.loc 1 348 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              	.LVL32:
 371 0000 08B5     		push	{r3, lr}
 372              	.LCFI9:
 373              		.cfi_def_cfa_offset 8
 374              		.cfi_offset 3, -8
 375              		.cfi_offset 14, -4
 376              	.LVL33:
 349:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****     DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 350:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****     /* Conversion complete callback */
 351:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****     HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 377              		.loc 1 351 0
 378 0002 806B     		ldr	r0, [r0, #56]
 379              	.LVL34:
 380 0004 FFF7FEFF 		bl	HAL_DACEx_ConvHalfCpltCallbackCh2
 381              	.LVL35:
 382 0008 08BD     		pop	{r3, pc}
 383              		.cfi_endproc
 384              	.LFE145:
 386 000a 00BF     		.section	.text.DAC_DMAErrorCh2,"ax",%progbits
 387              		.align	2
 388              		.global	DAC_DMAErrorCh2
 389              		.thumb
 390              		.thumb_func
 392              	DAC_DMAErrorCh2:
 393              	.LFB146:
 352:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** }
 353:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** 
 354:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** /**
 355:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @brief  DMA error callback 
 356:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 357:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   *                the configuration information for the specified DMA module.
 358:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   * @retval None
 359:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   */
 360:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
 361:HALLIB/Src/stm32f7xx_hal_dac_ex.c **** {
 394              		.loc 1 361 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQWUcki.s 			page 14


 398              	.LVL36:
 399 0000 10B5     		push	{r4, lr}
 400              	.LCFI10:
 401              		.cfi_def_cfa_offset 8
 402              		.cfi_offset 4, -8
 403              		.cfi_offset 14, -4
 362:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 404              		.loc 1 362 0
 405 0002 846B     		ldr	r4, [r0, #56]
 406              	.LVL37:
 363:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****     
 364:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   /* Set DAC error code to DMA error */
 365:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 407              		.loc 1 365 0
 408 0004 2369     		ldr	r3, [r4, #16]
 409 0006 43F00403 		orr	r3, r3, #4
 410 000a 2361     		str	r3, [r4, #16]
 366:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****     
 367:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   HAL_DACEx_ErrorCallbackCh2(hdac); 
 411              		.loc 1 367 0
 412 000c 2046     		mov	r0, r4
 413              	.LVL38:
 414 000e FFF7FEFF 		bl	HAL_DACEx_ErrorCallbackCh2
 415              	.LVL39:
 368:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****     
 369:HALLIB/Src/stm32f7xx_hal_dac_ex.c ****   hdac->State= HAL_DAC_STATE_READY;
 416              		.loc 1 369 0
 417 0012 0123     		movs	r3, #1
 418 0014 2371     		strb	r3, [r4, #4]
 419 0016 10BD     		pop	{r4, pc}
 420              		.cfi_endproc
 421              	.LFE146:
 423              		.text
 424              	.Letext0:
 425              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 426              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 427              		.file 4 "Inc/stm32f767xx.h"
 428              		.file 5 "HALLIB/Inc/stm32f7xx_hal_def.h"
 429              		.file 6 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 430              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dac.h"
 431              		.file 8 "CORE/core_cm7.h"
ARM GAS  /tmp/ccQWUcki.s 			page 15


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_dac_ex.c
     /tmp/ccQWUcki.s:21     .text.HAL_DACEx_DualGetValue:00000000 $t
     /tmp/ccQWUcki.s:26     .text.HAL_DACEx_DualGetValue:00000000 HAL_DACEx_DualGetValue
     /tmp/ccQWUcki.s:50     .text.HAL_DACEx_TriangleWaveGenerate:00000000 $t
     /tmp/ccQWUcki.s:55     .text.HAL_DACEx_TriangleWaveGenerate:00000000 HAL_DACEx_TriangleWaveGenerate
     /tmp/ccQWUcki.s:131    .text.HAL_DACEx_NoiseWaveGenerate:00000000 $t
     /tmp/ccQWUcki.s:136    .text.HAL_DACEx_NoiseWaveGenerate:00000000 HAL_DACEx_NoiseWaveGenerate
     /tmp/ccQWUcki.s:212    .text.HAL_DACEx_DualSetValue:00000000 $t
     /tmp/ccQWUcki.s:217    .text.HAL_DACEx_DualSetValue:00000000 HAL_DACEx_DualSetValue
     /tmp/ccQWUcki.s:253    .text.HAL_DACEx_ConvCpltCallbackCh2:00000000 $t
     /tmp/ccQWUcki.s:258    .text.HAL_DACEx_ConvCpltCallbackCh2:00000000 HAL_DACEx_ConvCpltCallbackCh2
     /tmp/ccQWUcki.s:271    .text.HAL_DACEx_ConvHalfCpltCallbackCh2:00000000 $t
     /tmp/ccQWUcki.s:276    .text.HAL_DACEx_ConvHalfCpltCallbackCh2:00000000 HAL_DACEx_ConvHalfCpltCallbackCh2
     /tmp/ccQWUcki.s:289    .text.HAL_DACEx_ErrorCallbackCh2:00000000 $t
     /tmp/ccQWUcki.s:294    .text.HAL_DACEx_ErrorCallbackCh2:00000000 HAL_DACEx_ErrorCallbackCh2
     /tmp/ccQWUcki.s:307    .text.HAL_DACEx_DMAUnderrunCallbackCh2:00000000 $t
     /tmp/ccQWUcki.s:312    .text.HAL_DACEx_DMAUnderrunCallbackCh2:00000000 HAL_DACEx_DMAUnderrunCallbackCh2
     /tmp/ccQWUcki.s:325    .text.DAC_DMAConvCpltCh2:00000000 $t
     /tmp/ccQWUcki.s:330    .text.DAC_DMAConvCpltCh2:00000000 DAC_DMAConvCpltCh2
     /tmp/ccQWUcki.s:359    .text.DAC_DMAHalfConvCpltCh2:00000000 $t
     /tmp/ccQWUcki.s:364    .text.DAC_DMAHalfConvCpltCh2:00000000 DAC_DMAHalfConvCpltCh2
     /tmp/ccQWUcki.s:387    .text.DAC_DMAErrorCh2:00000000 $t
     /tmp/ccQWUcki.s:392    .text.DAC_DMAErrorCh2:00000000 DAC_DMAErrorCh2
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
