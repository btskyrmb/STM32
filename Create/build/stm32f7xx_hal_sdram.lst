ARM GAS  /tmp/ccp0DnOh.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_sdram.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_SDRAM_DMA_XferCpltCallback,"ax",%progbits
  21              		.align	2
  22              		.weak	HAL_SDRAM_DMA_XferCpltCallback
  23              		.thumb
  24              		.thumb_func
  26              	HAL_SDRAM_DMA_XferCpltCallback:
  27              	.LFB142:
  28              		.file 1 "HALLIB/Src/stm32f7xx_hal_sdram.c"
   1:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @file    stm32f7xx_hal_sdram.c
   4:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief   SDRAM HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *          This file provides a generic firmware to drive SDRAM memories mounted 
   7:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *          as external device.
   8:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *         
   9:HALLIB/Src/stm32f7xx_hal_sdram.c ****   @verbatim
  10:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ==============================================================================
  11:HALLIB/Src/stm32f7xx_hal_sdram.c ****                        ##### How to use this driver #####
  12:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ============================================================================== 
  13:HALLIB/Src/stm32f7xx_hal_sdram.c ****   [..]
  14:HALLIB/Src/stm32f7xx_hal_sdram.c ****     This driver is a generic layered driver which contains a set of APIs used to 
  15:HALLIB/Src/stm32f7xx_hal_sdram.c ****     control SDRAM memories. It uses the FMC layer functions to interface 
  16:HALLIB/Src/stm32f7xx_hal_sdram.c ****     with SDRAM devices.  
  17:HALLIB/Src/stm32f7xx_hal_sdram.c ****     The following sequence should be followed to configure the FMC to interface
  18:HALLIB/Src/stm32f7xx_hal_sdram.c ****     with SDRAM memories: 
  19:HALLIB/Src/stm32f7xx_hal_sdram.c ****       
  20:HALLIB/Src/stm32f7xx_hal_sdram.c ****    (#) Declare a SDRAM_HandleTypeDef handle structure, for example:
  21:HALLIB/Src/stm32f7xx_hal_sdram.c ****           SDRAM_HandleTypeDef  hdsram 
  22:HALLIB/Src/stm32f7xx_hal_sdram.c ****           
  23:HALLIB/Src/stm32f7xx_hal_sdram.c ****        (++) Fill the SDRAM_HandleTypeDef handle "Init" field with the allowed 
  24:HALLIB/Src/stm32f7xx_hal_sdram.c ****             values of the structure member.
  25:HALLIB/Src/stm32f7xx_hal_sdram.c ****             
  26:HALLIB/Src/stm32f7xx_hal_sdram.c ****        (++) Fill the SDRAM_HandleTypeDef handle "Instance" field with a predefined 
  27:HALLIB/Src/stm32f7xx_hal_sdram.c ****             base register instance for NOR or SDRAM device 
  28:HALLIB/Src/stm32f7xx_hal_sdram.c ****              
  29:HALLIB/Src/stm32f7xx_hal_sdram.c ****    (#) Declare a FMC_SDRAM_TimingTypeDef structure; for example:
  30:HALLIB/Src/stm32f7xx_hal_sdram.c ****           FMC_SDRAM_TimingTypeDef  Timing;
ARM GAS  /tmp/ccp0DnOh.s 			page 2


  31:HALLIB/Src/stm32f7xx_hal_sdram.c ****       and fill its fields with the allowed values of the structure member.
  32:HALLIB/Src/stm32f7xx_hal_sdram.c ****       
  33:HALLIB/Src/stm32f7xx_hal_sdram.c ****    (#) Initialize the SDRAM Controller by calling the function HAL_SDRAM_Init(). This function
  34:HALLIB/Src/stm32f7xx_hal_sdram.c ****        performs the following sequence:
  35:HALLIB/Src/stm32f7xx_hal_sdram.c ****           
  36:HALLIB/Src/stm32f7xx_hal_sdram.c ****        (##) MSP hardware layer configuration using the function HAL_SDRAM_MspInit()
  37:HALLIB/Src/stm32f7xx_hal_sdram.c ****        (##) Control register configuration using the FMC SDRAM interface function 
  38:HALLIB/Src/stm32f7xx_hal_sdram.c ****             FMC_SDRAM_Init()
  39:HALLIB/Src/stm32f7xx_hal_sdram.c ****        (##) Timing register configuration using the FMC SDRAM interface function 
  40:HALLIB/Src/stm32f7xx_hal_sdram.c ****             FMC_SDRAM_Timing_Init()
  41:HALLIB/Src/stm32f7xx_hal_sdram.c ****        (##) Program the SDRAM external device by applying its initialization sequence
  42:HALLIB/Src/stm32f7xx_hal_sdram.c ****             according to the device plugged in your hardware. This step is mandatory
  43:HALLIB/Src/stm32f7xx_hal_sdram.c ****             for accessing the SDRAM device.   
  44:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
  45:HALLIB/Src/stm32f7xx_hal_sdram.c ****    (#) At this stage you can perform read/write accesses from/to the memory connected 
  46:HALLIB/Src/stm32f7xx_hal_sdram.c ****        to the SDRAM Bank. You can perform either polling or DMA transfer using the
  47:HALLIB/Src/stm32f7xx_hal_sdram.c ****        following APIs:
  48:HALLIB/Src/stm32f7xx_hal_sdram.c ****        (++) HAL_SDRAM_Read()/HAL_SDRAM_Write() for polling read/write access
  49:HALLIB/Src/stm32f7xx_hal_sdram.c ****        (++) HAL_SDRAM_Read_DMA()/HAL_SDRAM_Write_DMA() for DMA read/write transfer
  50:HALLIB/Src/stm32f7xx_hal_sdram.c ****        
  51:HALLIB/Src/stm32f7xx_hal_sdram.c ****    (#) You can also control the SDRAM device by calling the control APIs HAL_SDRAM_WriteOperation_E
  52:HALLIB/Src/stm32f7xx_hal_sdram.c ****        HAL_SDRAM_WriteOperation_Disable() to respectively enable/disable the SDRAM write operation 
  53:HALLIB/Src/stm32f7xx_hal_sdram.c ****        the function HAL_SDRAM_SendCommand() to send a specified command to the SDRAM
  54:HALLIB/Src/stm32f7xx_hal_sdram.c ****        device. The command to be sent must be configured with the FMC_SDRAM_CommandTypeDef 
  55:HALLIB/Src/stm32f7xx_hal_sdram.c ****        structure.   
  56:HALLIB/Src/stm32f7xx_hal_sdram.c ****        
  57:HALLIB/Src/stm32f7xx_hal_sdram.c ****    (#) You can continuously monitor the SDRAM device HAL state by calling the function
  58:HALLIB/Src/stm32f7xx_hal_sdram.c ****        HAL_SDRAM_GetState()         
  59:HALLIB/Src/stm32f7xx_hal_sdram.c ****       
  60:HALLIB/Src/stm32f7xx_hal_sdram.c ****   @endverbatim
  61:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ******************************************************************************
  62:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @attention
  63:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *
  64:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  65:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *
  66:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * Redistribution and use in source and binary forms, with or without modification,
  67:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * are permitted provided that the following conditions are met:
  68:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  69:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *      this list of conditions and the following disclaimer.
  70:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  71:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *      this list of conditions and the following disclaimer in the documentation
  72:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *      and/or other materials provided with the distribution.
  73:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  74:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *      may be used to endorse or promote products derived from this software
  75:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *      without specific prior written permission.
  76:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *
  77:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  78:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  79:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  80:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  81:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  82:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  83:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  84:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  85:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  86:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  87:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *
ARM GAS  /tmp/ccp0DnOh.s 			page 3


  88:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ******************************************************************************
  89:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */ 
  90:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
  91:HALLIB/Src/stm32f7xx_hal_sdram.c **** /* Includes ------------------------------------------------------------------*/
  92:HALLIB/Src/stm32f7xx_hal_sdram.c **** #include "stm32f7xx_hal.h"
  93:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
  94:HALLIB/Src/stm32f7xx_hal_sdram.c **** /** @addtogroup STM32F7xx_HAL_Driver
  95:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @{
  96:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
  97:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
  98:HALLIB/Src/stm32f7xx_hal_sdram.c **** /** @defgroup SDRAM SDRAM
  99:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief SDRAM driver modules
 100:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @{
 101:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 102:HALLIB/Src/stm32f7xx_hal_sdram.c **** #ifdef HAL_SDRAM_MODULE_ENABLED
 103:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 104:HALLIB/Src/stm32f7xx_hal_sdram.c **** /* Private typedef -----------------------------------------------------------*/
 105:HALLIB/Src/stm32f7xx_hal_sdram.c **** /* Private define ------------------------------------------------------------*/
 106:HALLIB/Src/stm32f7xx_hal_sdram.c **** /* Private macro -------------------------------------------------------------*/    
 107:HALLIB/Src/stm32f7xx_hal_sdram.c **** /* Private variables ---------------------------------------------------------*/
 108:HALLIB/Src/stm32f7xx_hal_sdram.c **** /* Private functions ---------------------------------------------------------*/
 109:HALLIB/Src/stm32f7xx_hal_sdram.c **** /* Exported functions --------------------------------------------------------*/
 110:HALLIB/Src/stm32f7xx_hal_sdram.c **** /** @defgroup SDRAM_Exported_Functions SDRAM Exported Functions
 111:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @{
 112:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 113:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 114:HALLIB/Src/stm32f7xx_hal_sdram.c **** /** @defgroup SDRAM_Exported_Functions_Group1 Initialization and de-initialization functions 
 115:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief    Initialization and Configuration functions 
 116:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *
 117:HALLIB/Src/stm32f7xx_hal_sdram.c ****   @verbatim    
 118:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ==============================================================================
 119:HALLIB/Src/stm32f7xx_hal_sdram.c ****            ##### SDRAM Initialization and de_initialization functions #####
 120:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ==============================================================================
 121:HALLIB/Src/stm32f7xx_hal_sdram.c ****   [..]  
 122:HALLIB/Src/stm32f7xx_hal_sdram.c ****     This section provides functions allowing to initialize/de-initialize
 123:HALLIB/Src/stm32f7xx_hal_sdram.c ****     the SDRAM memory
 124:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 125:HALLIB/Src/stm32f7xx_hal_sdram.c **** @endverbatim
 126:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @{
 127:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 128:HALLIB/Src/stm32f7xx_hal_sdram.c ****     
 129:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 130:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Performs the SDRAM device initialization sequence.
 131:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 132:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 133:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  Timing Pointer to SDRAM control timing structure 
 134:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 135:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 136:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
 137:HALLIB/Src/stm32f7xx_hal_sdram.c **** {   
 138:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM handle parameter */
 139:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(hsdram == NULL)
 140:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 141:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_ERROR;
 142:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 143:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 144:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_RESET)
ARM GAS  /tmp/ccp0DnOh.s 			page 4


 145:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {  
 146:HALLIB/Src/stm32f7xx_hal_sdram.c ****     /* Allocate lock resource and initialize it */
 147:HALLIB/Src/stm32f7xx_hal_sdram.c ****     hsdram->Lock = HAL_UNLOCKED;
 148:HALLIB/Src/stm32f7xx_hal_sdram.c ****     /* Initialize the low level hardware (MSP) */
 149:HALLIB/Src/stm32f7xx_hal_sdram.c ****     HAL_SDRAM_MspInit(hsdram);
 150:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 151:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 152:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Initialize the SDRAM controller state */
 153:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
 154:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 155:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Initialize SDRAM control Interface */
 156:HALLIB/Src/stm32f7xx_hal_sdram.c ****   FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 157:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 158:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Initialize SDRAM timing Interface */
 159:HALLIB/Src/stm32f7xx_hal_sdram.c ****   FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 160:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 161:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Update the SDRAM controller state */
 162:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_READY;
 163:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 164:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK;
 165:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 166:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 167:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 168:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Perform the SDRAM device initialization sequence.
 169:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 170:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 171:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 172:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 173:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
 174:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 175:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Initialize the low level hardware (MSP) */
 176:HALLIB/Src/stm32f7xx_hal_sdram.c ****   HAL_SDRAM_MspDeInit(hsdram);
 177:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 178:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Configure the SDRAM registers with their reset values */
 179:HALLIB/Src/stm32f7xx_hal_sdram.c ****   FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 180:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 181:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Reset the SDRAM controller state */
 182:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_RESET;
 183:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 184:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Release Lock */
 185:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);
 186:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 187:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK;
 188:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 189:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 190:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 191:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  SDRAM MSP Init.
 192:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 193:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 194:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval None
 195:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 196:HALLIB/Src/stm32f7xx_hal_sdram.c **** __weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
 197:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 198:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 199:HALLIB/Src/stm32f7xx_hal_sdram.c ****   UNUSED(hsdram);
 200:HALLIB/Src/stm32f7xx_hal_sdram.c ****  
 201:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
ARM GAS  /tmp/ccp0DnOh.s 			page 5


 202:HALLIB/Src/stm32f7xx_hal_sdram.c ****             the HAL_SDRAM_MspInit could be implemented in the user file
 203:HALLIB/Src/stm32f7xx_hal_sdram.c ****    */ 
 204:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 205:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 206:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 207:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  SDRAM MSP DeInit.
 208:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 209:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 210:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval None
 211:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 212:HALLIB/Src/stm32f7xx_hal_sdram.c **** __weak void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef *hsdram)
 213:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 214:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 215:HALLIB/Src/stm32f7xx_hal_sdram.c ****   UNUSED(hsdram);
 216:HALLIB/Src/stm32f7xx_hal_sdram.c ****  
 217:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 218:HALLIB/Src/stm32f7xx_hal_sdram.c ****             the HAL_SDRAM_MspDeInit could be implemented in the user file
 219:HALLIB/Src/stm32f7xx_hal_sdram.c ****    */ 
 220:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 221:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 222:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 223:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  This function handles SDRAM refresh error interrupt request.
 224:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 225:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 226:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 227:HALLIB/Src/stm32f7xx_hal_sdram.c **** */
 228:HALLIB/Src/stm32f7xx_hal_sdram.c **** void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
 229:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 230:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check SDRAM interrupt Rising edge flag */
 231:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 232:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 233:HALLIB/Src/stm32f7xx_hal_sdram.c ****     /* SDRAM refresh error interrupt callback */
 234:HALLIB/Src/stm32f7xx_hal_sdram.c ****     HAL_SDRAM_RefreshErrorCallback(hsdram);
 235:HALLIB/Src/stm32f7xx_hal_sdram.c ****     
 236:HALLIB/Src/stm32f7xx_hal_sdram.c ****     /* Clear SDRAM refresh error interrupt pending bit */
 237:HALLIB/Src/stm32f7xx_hal_sdram.c ****     __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 238:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 239:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 240:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 241:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 242:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  SDRAM Refresh error callback.
 243:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 244:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module. 
 245:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval None
 246:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 247:HALLIB/Src/stm32f7xx_hal_sdram.c **** __weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
 248:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 249:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 250:HALLIB/Src/stm32f7xx_hal_sdram.c ****   UNUSED(hsdram);
 251:HALLIB/Src/stm32f7xx_hal_sdram.c ****  
 252:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 253:HALLIB/Src/stm32f7xx_hal_sdram.c ****             the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
 254:HALLIB/Src/stm32f7xx_hal_sdram.c ****    */ 
 255:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 256:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 257:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 258:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  DMA transfer complete callback.
ARM GAS  /tmp/ccp0DnOh.s 			page 6


 259:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 260:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for the specified DMA module.
 261:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval None
 262:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 263:HALLIB/Src/stm32f7xx_hal_sdram.c **** __weak void HAL_SDRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
 264:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
  29              		.loc 1 264 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE142:
  39 0002 00BF     		.section	.text.HAL_SDRAM_DMA_XferErrorCallback,"ax",%progbits
  40              		.align	2
  41              		.weak	HAL_SDRAM_DMA_XferErrorCallback
  42              		.thumb
  43              		.thumb_func
  45              	HAL_SDRAM_DMA_XferErrorCallback:
  46              	.LFB143:
 265:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 266:HALLIB/Src/stm32f7xx_hal_sdram.c ****   UNUSED(hdma);
 267:HALLIB/Src/stm32f7xx_hal_sdram.c ****  
 268:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 269:HALLIB/Src/stm32f7xx_hal_sdram.c ****             the HAL_SDRAM_DMA_XferCpltCallback could be implemented in the user file
 270:HALLIB/Src/stm32f7xx_hal_sdram.c ****    */ 
 271:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 272:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 273:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 274:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  DMA transfer complete error callback.
 275:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hdma DMA handle
 276:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval None
 277:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 278:HALLIB/Src/stm32f7xx_hal_sdram.c **** __weak void HAL_SDRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
 279:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
  47              		.loc 1 279 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.LVL1:
  53 0000 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE143:
  57 0002 00BF     		.section	.text.HAL_SDRAM_MspInit,"ax",%progbits
  58              		.align	2
  59              		.weak	HAL_SDRAM_MspInit
  60              		.thumb
  61              		.thumb_func
  63              	HAL_SDRAM_MspInit:
  64              	.LFB138:
 197:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
  65              		.loc 1 197 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccp0DnOh.s 			page 7


  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70              	.LVL2:
  71 0000 7047     		bx	lr
  72              		.cfi_endproc
  73              	.LFE138:
  75 0002 00BF     		.section	.text.HAL_SDRAM_Init,"ax",%progbits
  76              		.align	2
  77              		.global	HAL_SDRAM_Init
  78              		.thumb
  79              		.thumb_func
  81              	HAL_SDRAM_Init:
  82              	.LFB136:
 137:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM handle parameter */
  83              		.loc 1 137 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              	.LVL3:
 139:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
  88              		.loc 1 139 0
  89 0000 E8B1     		cbz	r0, .L7
 137:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM handle parameter */
  90              		.loc 1 137 0
  91 0002 38B5     		push	{r3, r4, r5, lr}
  92              	.LCFI0:
  93              		.cfi_def_cfa_offset 16
  94              		.cfi_offset 3, -16
  95              		.cfi_offset 4, -12
  96              		.cfi_offset 5, -8
  97              		.cfi_offset 14, -4
  98 0004 0446     		mov	r4, r0
  99 0006 0D46     		mov	r5, r1
 144:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {  
 100              		.loc 1 144 0
 101 0008 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 102 000c 13F0FF0F 		tst	r3, #255
 103 0010 04D1     		bne	.L6
 147:HALLIB/Src/stm32f7xx_hal_sdram.c ****     /* Initialize the low level hardware (MSP) */
 104              		.loc 1 147 0
 105 0012 0023     		movs	r3, #0
 106 0014 80F82D30 		strb	r3, [r0, #45]
 149:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 107              		.loc 1 149 0
 108 0018 FFF7FEFF 		bl	HAL_SDRAM_MspInit
 109              	.LVL4:
 110              	.L6:
 153:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 111              		.loc 1 153 0
 112 001c 0223     		movs	r3, #2
 113 001e 84F82C30 		strb	r3, [r4, #44]
 156:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 114              		.loc 1 156 0
 115 0022 211D     		adds	r1, r4, #4
 116 0024 2068     		ldr	r0, [r4]
 117 0026 FFF7FEFF 		bl	FMC_SDRAM_Init
 118              	.LVL5:
ARM GAS  /tmp/ccp0DnOh.s 			page 8


 159:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 119              		.loc 1 159 0
 120 002a 6268     		ldr	r2, [r4, #4]
 121 002c 2946     		mov	r1, r5
 122 002e 2068     		ldr	r0, [r4]
 123 0030 FFF7FEFF 		bl	FMC_SDRAM_Timing_Init
 124              	.LVL6:
 162:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 125              		.loc 1 162 0
 126 0034 0123     		movs	r3, #1
 127 0036 84F82C30 		strb	r3, [r4, #44]
 164:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 128              		.loc 1 164 0
 129 003a 0020     		movs	r0, #0
 130 003c 38BD     		pop	{r3, r4, r5, pc}
 131              	.LVL7:
 132              	.L7:
 133              	.LCFI1:
 134              		.cfi_def_cfa_offset 0
 135              		.cfi_restore 3
 136              		.cfi_restore 4
 137              		.cfi_restore 5
 138              		.cfi_restore 14
 141:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 139              		.loc 1 141 0
 140 003e 0120     		movs	r0, #1
 141              	.LVL8:
 142 0040 7047     		bx	lr
 143              		.cfi_endproc
 144              	.LFE136:
 146 0042 00BF     		.section	.text.HAL_SDRAM_MspDeInit,"ax",%progbits
 147              		.align	2
 148              		.weak	HAL_SDRAM_MspDeInit
 149              		.thumb
 150              		.thumb_func
 152              	HAL_SDRAM_MspDeInit:
 153              	.LFB139:
 213:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 154              		.loc 1 213 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              		@ link register save eliminated.
 159              	.LVL9:
 160 0000 7047     		bx	lr
 161              		.cfi_endproc
 162              	.LFE139:
 164 0002 00BF     		.section	.text.HAL_SDRAM_DeInit,"ax",%progbits
 165              		.align	2
 166              		.global	HAL_SDRAM_DeInit
 167              		.thumb
 168              		.thumb_func
 170              	HAL_SDRAM_DeInit:
 171              	.LFB137:
 174:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Initialize the low level hardware (MSP) */
 172              		.loc 1 174 0
 173              		.cfi_startproc
ARM GAS  /tmp/ccp0DnOh.s 			page 9


 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              	.LVL10:
 174:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Initialize the low level hardware (MSP) */
 177              		.loc 1 174 0
 178 0000 10B5     		push	{r4, lr}
 179              	.LCFI2:
 180              		.cfi_def_cfa_offset 8
 181              		.cfi_offset 4, -8
 182              		.cfi_offset 14, -4
 183 0002 0446     		mov	r4, r0
 176:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 184              		.loc 1 176 0
 185 0004 FFF7FEFF 		bl	HAL_SDRAM_MspDeInit
 186              	.LVL11:
 179:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 187              		.loc 1 179 0
 188 0008 6168     		ldr	r1, [r4, #4]
 189 000a 2068     		ldr	r0, [r4]
 190 000c FFF7FEFF 		bl	FMC_SDRAM_DeInit
 191              	.LVL12:
 182:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 192              		.loc 1 182 0
 193 0010 0020     		movs	r0, #0
 194 0012 84F82C00 		strb	r0, [r4, #44]
 185:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 195              		.loc 1 185 0
 196 0016 84F82D00 		strb	r0, [r4, #45]
 188:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 197              		.loc 1 188 0
 198 001a 10BD     		pop	{r4, pc}
 199              		.cfi_endproc
 200              	.LFE137:
 202              		.section	.text.HAL_SDRAM_RefreshErrorCallback,"ax",%progbits
 203              		.align	2
 204              		.weak	HAL_SDRAM_RefreshErrorCallback
 205              		.thumb
 206              		.thumb_func
 208              	HAL_SDRAM_RefreshErrorCallback:
 209              	.LFB141:
 248:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 210              		.loc 1 248 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215              	.LVL13:
 216 0000 7047     		bx	lr
 217              		.cfi_endproc
 218              	.LFE141:
 220 0002 00BF     		.section	.text.HAL_SDRAM_IRQHandler,"ax",%progbits
 221              		.align	2
 222              		.global	HAL_SDRAM_IRQHandler
 223              		.thumb
 224              		.thumb_func
 226              	HAL_SDRAM_IRQHandler:
 227              	.LFB140:
ARM GAS  /tmp/ccp0DnOh.s 			page 10


 229:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check SDRAM interrupt Rising edge flag */
 228              		.loc 1 229 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              	.LVL14:
 231:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 233              		.loc 1 231 0
 234 0000 0368     		ldr	r3, [r0]
 235 0002 9B69     		ldr	r3, [r3, #24]
 236 0004 13F0010F 		tst	r3, #1
 237 0008 09D0     		beq	.L17
 229:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check SDRAM interrupt Rising edge flag */
 238              		.loc 1 229 0
 239 000a 10B5     		push	{r4, lr}
 240              	.LCFI3:
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 4, -8
 243              		.cfi_offset 14, -4
 244 000c 0446     		mov	r4, r0
 234:HALLIB/Src/stm32f7xx_hal_sdram.c ****     
 245              		.loc 1 234 0
 246 000e FFF7FEFF 		bl	HAL_SDRAM_RefreshErrorCallback
 247              	.LVL15:
 237:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 248              		.loc 1 237 0
 249 0012 2268     		ldr	r2, [r4]
 250 0014 5369     		ldr	r3, [r2, #20]
 251 0016 43F00103 		orr	r3, r3, #1
 252 001a 5361     		str	r3, [r2, #20]
 253 001c 10BD     		pop	{r4, pc}
 254              	.LVL16:
 255              	.L17:
 256              	.LCFI4:
 257              		.cfi_def_cfa_offset 0
 258              		.cfi_restore 4
 259              		.cfi_restore 14
 260 001e 7047     		bx	lr
 261              		.cfi_endproc
 262              	.LFE140:
 264              		.section	.text.HAL_SDRAM_Read_8b,"ax",%progbits
 265              		.align	2
 266              		.global	HAL_SDRAM_Read_8b
 267              		.thumb
 268              		.thumb_func
 270              	HAL_SDRAM_Read_8b:
 271              	.LFB144:
 280:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 281:HALLIB/Src/stm32f7xx_hal_sdram.c ****   UNUSED(hdma);
 282:HALLIB/Src/stm32f7xx_hal_sdram.c ****  
 283:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 284:HALLIB/Src/stm32f7xx_hal_sdram.c ****             the HAL_SDRAM_DMA_XferErrorCallback could be implemented in the user file
 285:HALLIB/Src/stm32f7xx_hal_sdram.c ****    */ 
 286:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 287:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 288:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 289:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @}
ARM GAS  /tmp/ccp0DnOh.s 			page 11


 290:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 291:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 292:HALLIB/Src/stm32f7xx_hal_sdram.c **** /** @defgroup SDRAM_Exported_Functions_Group2 Input and Output functions 
 293:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief    Input Output and memory control functions 
 294:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *
 295:HALLIB/Src/stm32f7xx_hal_sdram.c ****   @verbatim    
 296:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ==============================================================================
 297:HALLIB/Src/stm32f7xx_hal_sdram.c ****                     ##### SDRAM Input and Output functions #####
 298:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ==============================================================================
 299:HALLIB/Src/stm32f7xx_hal_sdram.c ****   [..]  
 300:HALLIB/Src/stm32f7xx_hal_sdram.c ****     This section provides functions allowing to use and control the SDRAM memory
 301:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 302:HALLIB/Src/stm32f7xx_hal_sdram.c **** @endverbatim
 303:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @{
 304:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 305:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 306:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 307:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Reads 8-bit data buffer from the SDRAM memory.
 308:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 309:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 310:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pAddress Pointer to read start address
 311:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pDstBuffer Pointer to destination buffer  
 312:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to read from memory
 313:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 314:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 315:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Read_8b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint8_t *pDstB
 316:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 272              		.loc 1 316 0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 276              		@ link register save eliminated.
 277              	.LVL17:
 278 0000 10B4     		push	{r4}
 279              	.LCFI5:
 280              		.cfi_def_cfa_offset 4
 281              		.cfi_offset 4, -4
 282              	.LVL18:
 317:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __IO uint8_t *pSdramAddress = (uint8_t *)pAddress;
 318:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 319:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Locked */
 320:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 283              		.loc 1 320 0
 284 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 285 0006 012C     		cmp	r4, #1
 286 0008 18D0     		beq	.L22
 287              		.loc 1 320 0 is_stmt 0 discriminator 2
 288 000a 0124     		movs	r4, #1
 289 000c 80F82D40 		strb	r4, [r0, #45]
 321:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 322:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 323:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 290              		.loc 1 323 0 is_stmt 1 discriminator 2
 291 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 292 0014 E4B2     		uxtb	r4, r4
 293 0016 022C     		cmp	r4, #2
 294 0018 12D0     		beq	.L23
ARM GAS  /tmp/ccp0DnOh.s 			page 12


 324:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 325:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 326:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 327:HALLIB/Src/stm32f7xx_hal_sdram.c ****   else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 295              		.loc 1 327 0
 296 001a 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 297 001e E4B2     		uxtb	r4, r4
 298 0020 052C     		cmp	r4, #5
 299 0022 05D1     		bne	.L20
 300 0024 0EE0     		b	.L24
 301              	.LVL19:
 302              	.L21:
 328:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 329:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return  HAL_ERROR; 
 330:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }  
 331:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 332:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Read data from source */
 333:HALLIB/Src/stm32f7xx_hal_sdram.c ****   for(; BufferSize != 0; BufferSize--)
 334:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 335:HALLIB/Src/stm32f7xx_hal_sdram.c ****     *pDstBuffer = *(__IO uint8_t *)pSdramAddress;  
 303              		.loc 1 335 0 discriminator 2
 304 0026 11F8014B 		ldrb	r4, [r1], #1	@ zero_extendqisi2
 305              	.LVL20:
 306 002a 02F8014B 		strb	r4, [r2], #1
 307              	.LVL21:
 333:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 308              		.loc 1 333 0 discriminator 2
 309 002e 013B     		subs	r3, r3, #1
 310              	.LVL22:
 311              	.L20:
 333:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 312              		.loc 1 333 0 is_stmt 0 discriminator 1
 313 0030 002B     		cmp	r3, #0
 314 0032 F8D1     		bne	.L21
 336:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pDstBuffer++;
 337:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pSdramAddress++;
 338:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 339:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 340:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Unlocked */
 341:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);
 315              		.loc 1 341 0 is_stmt 1
 316 0034 80F82D30 		strb	r3, [r0, #45]
 342:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 343:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK; 
 317              		.loc 1 343 0
 318 0038 1846     		mov	r0, r3
 319              	.LVL23:
 320 003a 04E0     		b	.L19
 321              	.LVL24:
 322              	.L22:
 320:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 323              		.loc 1 320 0
 324 003c 0220     		movs	r0, #2
 325              	.LVL25:
 326 003e 02E0     		b	.L19
 327              	.LVL26:
 328              	.L23:
ARM GAS  /tmp/ccp0DnOh.s 			page 13


 325:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 329              		.loc 1 325 0
 330 0040 0220     		movs	r0, #2
 331              	.LVL27:
 332 0042 00E0     		b	.L19
 333              	.LVL28:
 334              	.L24:
 329:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }  
 335              		.loc 1 329 0
 336 0044 0120     		movs	r0, #1
 337              	.LVL29:
 338              	.L19:
 344:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 339              		.loc 1 344 0
 340 0046 5DF8044B 		ldr	r4, [sp], #4
 341              	.LCFI6:
 342              		.cfi_restore 4
 343              		.cfi_def_cfa_offset 0
 344 004a 7047     		bx	lr
 345              		.cfi_endproc
 346              	.LFE144:
 348              		.section	.text.HAL_SDRAM_Write_8b,"ax",%progbits
 349              		.align	2
 350              		.global	HAL_SDRAM_Write_8b
 351              		.thumb
 352              		.thumb_func
 354              	HAL_SDRAM_Write_8b:
 355              	.LFB145:
 345:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 346:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 347:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 348:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Writes 8-bit data buffer to SDRAM memory.
 349:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 350:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 351:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pAddress Pointer to write start address
 352:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pSrcBuffer Pointer to source buffer to write  
 353:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to write to memory
 354:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 355:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 356:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Write_8b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint8_t *pSrc
 357:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 356              		.loc 1 357 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 361              	.LVL30:
 362 0000 10B4     		push	{r4}
 363              	.LCFI7:
 364              		.cfi_def_cfa_offset 4
 365              		.cfi_offset 4, -4
 366              	.LVL31:
 358:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __IO uint8_t *pSdramAddress = (uint8_t *)pAddress;
 359:HALLIB/Src/stm32f7xx_hal_sdram.c ****   uint32_t tmp = 0;
 360:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 361:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Locked */
 362:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
ARM GAS  /tmp/ccp0DnOh.s 			page 14


 367              		.loc 1 362 0
 368 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 369 0006 012C     		cmp	r4, #1
 370 0008 16D0     		beq	.L30
 371              		.loc 1 362 0 is_stmt 0 discriminator 2
 372 000a 0124     		movs	r4, #1
 373 000c 80F82D40 		strb	r4, [r0, #45]
 363:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 364:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 365:HALLIB/Src/stm32f7xx_hal_sdram.c ****   tmp = hsdram->State;
 374              		.loc 1 365 0 is_stmt 1 discriminator 2
 375 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 376 0014 E4B2     		uxtb	r4, r4
 377              	.LVL32:
 366:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 367:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(tmp == HAL_SDRAM_STATE_BUSY)
 378              		.loc 1 367 0 discriminator 2
 379 0016 022C     		cmp	r4, #2
 380 0018 10D0     		beq	.L31
 368:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 369:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 370:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 371:HALLIB/Src/stm32f7xx_hal_sdram.c ****   else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 381              		.loc 1 371 0
 382 001a 043C     		subs	r4, r4, #4
 383              	.LVL33:
 384 001c 012C     		cmp	r4, #1
 385 001e 05D8     		bhi	.L28
 386 0020 0EE0     		b	.L32
 387              	.LVL34:
 388              	.L29:
 372:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 373:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return  HAL_ERROR; 
 374:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 375:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 376:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Write data to memory */
 377:HALLIB/Src/stm32f7xx_hal_sdram.c ****   for(; BufferSize != 0; BufferSize--)
 378:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 379:HALLIB/Src/stm32f7xx_hal_sdram.c ****     *(__IO uint8_t *)pSdramAddress = *pSrcBuffer;
 389              		.loc 1 379 0 discriminator 2
 390 0022 12F8014B 		ldrb	r4, [r2], #1	@ zero_extendqisi2
 391              	.LVL35:
 392 0026 01F8014B 		strb	r4, [r1], #1
 393              	.LVL36:
 377:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 394              		.loc 1 377 0 discriminator 2
 395 002a 013B     		subs	r3, r3, #1
 396              	.LVL37:
 397              	.L28:
 377:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 398              		.loc 1 377 0 is_stmt 0 discriminator 1
 399 002c 002B     		cmp	r3, #0
 400 002e F8D1     		bne	.L29
 380:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pSrcBuffer++;
 381:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pSdramAddress++;
 382:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 383:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
ARM GAS  /tmp/ccp0DnOh.s 			page 15


 384:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Unlocked */
 385:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);    
 401              		.loc 1 385 0 is_stmt 1
 402 0030 80F82D30 		strb	r3, [r0, #45]
 386:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 387:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK;   
 403              		.loc 1 387 0
 404 0034 1846     		mov	r0, r3
 405              	.LVL38:
 406 0036 04E0     		b	.L27
 407              	.LVL39:
 408              	.L30:
 362:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 409              		.loc 1 362 0
 410 0038 0220     		movs	r0, #2
 411              	.LVL40:
 412 003a 02E0     		b	.L27
 413              	.LVL41:
 414              	.L31:
 369:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 415              		.loc 1 369 0
 416 003c 0220     		movs	r0, #2
 417              	.LVL42:
 418 003e 00E0     		b	.L27
 419              	.LVL43:
 420              	.L32:
 373:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 421              		.loc 1 373 0
 422 0040 0120     		movs	r0, #1
 423              	.LVL44:
 424              	.L27:
 388:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 425              		.loc 1 388 0
 426 0042 5DF8044B 		ldr	r4, [sp], #4
 427              	.LCFI8:
 428              		.cfi_restore 4
 429              		.cfi_def_cfa_offset 0
 430 0046 7047     		bx	lr
 431              		.cfi_endproc
 432              	.LFE145:
 434              		.section	.text.HAL_SDRAM_Read_16b,"ax",%progbits
 435              		.align	2
 436              		.global	HAL_SDRAM_Read_16b
 437              		.thumb
 438              		.thumb_func
 440              	HAL_SDRAM_Read_16b:
 441              	.LFB146:
 389:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 390:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 391:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 392:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Reads 16-bit data buffer from the SDRAM memory. 
 393:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 394:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 395:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pAddress Pointer to read start address
 396:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pDstBuffer Pointer to destination buffer  
 397:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to read from memory
 398:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
ARM GAS  /tmp/ccp0DnOh.s 			page 16


 399:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 400:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Read_16b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint16_t *pDs
 401:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 442              		.loc 1 401 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447              	.LVL45:
 448 0000 10B4     		push	{r4}
 449              	.LCFI9:
 450              		.cfi_def_cfa_offset 4
 451              		.cfi_offset 4, -4
 452              	.LVL46:
 402:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __IO uint16_t *pSdramAddress = (uint16_t *)pAddress;
 403:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 404:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Locked */
 405:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 453              		.loc 1 405 0
 454 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 455 0006 012C     		cmp	r4, #1
 456 0008 18D0     		beq	.L38
 457              		.loc 1 405 0 is_stmt 0 discriminator 2
 458 000a 0124     		movs	r4, #1
 459 000c 80F82D40 		strb	r4, [r0, #45]
 406:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 407:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 408:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 460              		.loc 1 408 0 is_stmt 1 discriminator 2
 461 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 462 0014 E4B2     		uxtb	r4, r4
 463 0016 022C     		cmp	r4, #2
 464 0018 12D0     		beq	.L39
 409:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 410:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 411:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 412:HALLIB/Src/stm32f7xx_hal_sdram.c ****   else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 465              		.loc 1 412 0
 466 001a 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 467 001e E4B2     		uxtb	r4, r4
 468 0020 052C     		cmp	r4, #5
 469 0022 05D1     		bne	.L36
 470 0024 0EE0     		b	.L40
 471              	.LVL47:
 472              	.L37:
 413:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 414:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return  HAL_ERROR; 
 415:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }  
 416:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 417:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Read data from source */
 418:HALLIB/Src/stm32f7xx_hal_sdram.c ****   for(; BufferSize != 0; BufferSize--)
 419:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 420:HALLIB/Src/stm32f7xx_hal_sdram.c ****     *pDstBuffer = *(__IO uint16_t *)pSdramAddress;  
 473              		.loc 1 420 0 discriminator 2
 474 0026 31F8024B 		ldrh	r4, [r1], #2
 475              	.LVL48:
 476 002a 22F8024B 		strh	r4, [r2], #2	@ movhi
ARM GAS  /tmp/ccp0DnOh.s 			page 17


 477              	.LVL49:
 418:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 478              		.loc 1 418 0 discriminator 2
 479 002e 013B     		subs	r3, r3, #1
 480              	.LVL50:
 481              	.L36:
 418:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 482              		.loc 1 418 0 is_stmt 0 discriminator 1
 483 0030 002B     		cmp	r3, #0
 484 0032 F8D1     		bne	.L37
 421:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pDstBuffer++;
 422:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pSdramAddress++;               
 423:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 424:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 425:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Unlocked */
 426:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);       
 485              		.loc 1 426 0 is_stmt 1
 486 0034 80F82D30 		strb	r3, [r0, #45]
 427:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 428:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK; 
 487              		.loc 1 428 0
 488 0038 1846     		mov	r0, r3
 489              	.LVL51:
 490 003a 04E0     		b	.L35
 491              	.LVL52:
 492              	.L38:
 405:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 493              		.loc 1 405 0
 494 003c 0220     		movs	r0, #2
 495              	.LVL53:
 496 003e 02E0     		b	.L35
 497              	.LVL54:
 498              	.L39:
 410:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 499              		.loc 1 410 0
 500 0040 0220     		movs	r0, #2
 501              	.LVL55:
 502 0042 00E0     		b	.L35
 503              	.LVL56:
 504              	.L40:
 414:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }  
 505              		.loc 1 414 0
 506 0044 0120     		movs	r0, #1
 507              	.LVL57:
 508              	.L35:
 429:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 509              		.loc 1 429 0
 510 0046 5DF8044B 		ldr	r4, [sp], #4
 511              	.LCFI10:
 512              		.cfi_restore 4
 513              		.cfi_def_cfa_offset 0
 514 004a 7047     		bx	lr
 515              		.cfi_endproc
 516              	.LFE146:
 518              		.section	.text.HAL_SDRAM_Write_16b,"ax",%progbits
 519              		.align	2
 520              		.global	HAL_SDRAM_Write_16b
ARM GAS  /tmp/ccp0DnOh.s 			page 18


 521              		.thumb
 522              		.thumb_func
 524              	HAL_SDRAM_Write_16b:
 525              	.LFB147:
 430:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 431:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 432:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Writes 16-bit data buffer to SDRAM memory. 
 433:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 434:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 435:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pAddress Pointer to write start address
 436:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pSrcBuffer Pointer to source buffer to write  
 437:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to write to memory
 438:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 439:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 440:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Write_16b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint16_t *pS
 441:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 526              		.loc 1 441 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 0
 529              		@ frame_needed = 0, uses_anonymous_args = 0
 530              		@ link register save eliminated.
 531              	.LVL58:
 532 0000 10B4     		push	{r4}
 533              	.LCFI11:
 534              		.cfi_def_cfa_offset 4
 535              		.cfi_offset 4, -4
 536              	.LVL59:
 442:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __IO uint16_t *pSdramAddress = (uint16_t *)pAddress;
 443:HALLIB/Src/stm32f7xx_hal_sdram.c ****   uint32_t tmp = 0;
 444:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 445:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Locked */
 446:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 537              		.loc 1 446 0
 538 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 539 0006 012C     		cmp	r4, #1
 540 0008 16D0     		beq	.L46
 541              		.loc 1 446 0 is_stmt 0 discriminator 2
 542 000a 0124     		movs	r4, #1
 543 000c 80F82D40 		strb	r4, [r0, #45]
 447:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 448:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 449:HALLIB/Src/stm32f7xx_hal_sdram.c ****   tmp = hsdram->State;
 544              		.loc 1 449 0 is_stmt 1 discriminator 2
 545 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 546 0014 E4B2     		uxtb	r4, r4
 547              	.LVL60:
 450:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 451:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(tmp == HAL_SDRAM_STATE_BUSY)
 548              		.loc 1 451 0 discriminator 2
 549 0016 022C     		cmp	r4, #2
 550 0018 10D0     		beq	.L47
 452:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 453:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 454:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 455:HALLIB/Src/stm32f7xx_hal_sdram.c ****   else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 551              		.loc 1 455 0
 552 001a 043C     		subs	r4, r4, #4
ARM GAS  /tmp/ccp0DnOh.s 			page 19


 553              	.LVL61:
 554 001c 012C     		cmp	r4, #1
 555 001e 05D8     		bhi	.L44
 556 0020 0EE0     		b	.L48
 557              	.LVL62:
 558              	.L45:
 456:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 457:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return  HAL_ERROR; 
 458:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 459:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 460:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Write data to memory */
 461:HALLIB/Src/stm32f7xx_hal_sdram.c ****   for(; BufferSize != 0; BufferSize--)
 462:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 463:HALLIB/Src/stm32f7xx_hal_sdram.c ****     *(__IO uint16_t *)pSdramAddress = *pSrcBuffer;
 559              		.loc 1 463 0 discriminator 2
 560 0022 32F8024B 		ldrh	r4, [r2], #2
 561              	.LVL63:
 562 0026 21F8024B 		strh	r4, [r1], #2	@ movhi
 563              	.LVL64:
 461:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 564              		.loc 1 461 0 discriminator 2
 565 002a 013B     		subs	r3, r3, #1
 566              	.LVL65:
 567              	.L44:
 461:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 568              		.loc 1 461 0 is_stmt 0 discriminator 1
 569 002c 002B     		cmp	r3, #0
 570 002e F8D1     		bne	.L45
 464:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pSrcBuffer++;
 465:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pSdramAddress++;            
 466:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 467:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 468:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Unlocked */
 469:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);    
 571              		.loc 1 469 0 is_stmt 1
 572 0030 80F82D30 		strb	r3, [r0, #45]
 470:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 471:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK;   
 573              		.loc 1 471 0
 574 0034 1846     		mov	r0, r3
 575              	.LVL66:
 576 0036 04E0     		b	.L43
 577              	.LVL67:
 578              	.L46:
 446:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 579              		.loc 1 446 0
 580 0038 0220     		movs	r0, #2
 581              	.LVL68:
 582 003a 02E0     		b	.L43
 583              	.LVL69:
 584              	.L47:
 453:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 585              		.loc 1 453 0
 586 003c 0220     		movs	r0, #2
 587              	.LVL70:
 588 003e 00E0     		b	.L43
 589              	.LVL71:
ARM GAS  /tmp/ccp0DnOh.s 			page 20


 590              	.L48:
 457:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 591              		.loc 1 457 0
 592 0040 0120     		movs	r0, #1
 593              	.LVL72:
 594              	.L43:
 472:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 595              		.loc 1 472 0
 596 0042 5DF8044B 		ldr	r4, [sp], #4
 597              	.LCFI12:
 598              		.cfi_restore 4
 599              		.cfi_def_cfa_offset 0
 600 0046 7047     		bx	lr
 601              		.cfi_endproc
 602              	.LFE147:
 604              		.section	.text.HAL_SDRAM_Read_32b,"ax",%progbits
 605              		.align	2
 606              		.global	HAL_SDRAM_Read_32b
 607              		.thumb
 608              		.thumb_func
 610              	HAL_SDRAM_Read_32b:
 611              	.LFB148:
 473:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 474:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 475:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Reads 32-bit data buffer from the SDRAM memory. 
 476:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 477:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 478:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pAddress Pointer to read start address
 479:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pDstBuffer Pointer to destination buffer  
 480:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to read from memory
 481:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 482:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 483:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDs
 484:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 612              		.loc 1 484 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              		@ link register save eliminated.
 617              	.LVL73:
 618 0000 10B4     		push	{r4}
 619              	.LCFI13:
 620              		.cfi_def_cfa_offset 4
 621              		.cfi_offset 4, -4
 622              	.LVL74:
 485:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 486:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 487:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Locked */
 488:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 623              		.loc 1 488 0
 624 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 625 0006 012C     		cmp	r4, #1
 626 0008 18D0     		beq	.L54
 627              		.loc 1 488 0 is_stmt 0 discriminator 2
 628 000a 0124     		movs	r4, #1
 629 000c 80F82D40 		strb	r4, [r0, #45]
 489:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
ARM GAS  /tmp/ccp0DnOh.s 			page 21


 490:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 491:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 630              		.loc 1 491 0 is_stmt 1 discriminator 2
 631 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 632 0014 E4B2     		uxtb	r4, r4
 633 0016 022C     		cmp	r4, #2
 634 0018 12D0     		beq	.L55
 492:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 493:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 494:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 495:HALLIB/Src/stm32f7xx_hal_sdram.c ****   else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 635              		.loc 1 495 0
 636 001a 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 637 001e E4B2     		uxtb	r4, r4
 638 0020 052C     		cmp	r4, #5
 639 0022 05D1     		bne	.L52
 640 0024 0EE0     		b	.L56
 641              	.LVL75:
 642              	.L53:
 496:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 497:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return  HAL_ERROR; 
 498:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }  
 499:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 500:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Read data from source */
 501:HALLIB/Src/stm32f7xx_hal_sdram.c ****   for(; BufferSize != 0; BufferSize--)
 502:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 503:HALLIB/Src/stm32f7xx_hal_sdram.c ****     *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 643              		.loc 1 503 0 discriminator 2
 644 0026 51F8044B 		ldr	r4, [r1], #4
 645              	.LVL76:
 646 002a 42F8044B 		str	r4, [r2], #4
 647              	.LVL77:
 501:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 648              		.loc 1 501 0 discriminator 2
 649 002e 013B     		subs	r3, r3, #1
 650              	.LVL78:
 651              	.L52:
 501:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 652              		.loc 1 501 0 is_stmt 0 discriminator 1
 653 0030 002B     		cmp	r3, #0
 654 0032 F8D1     		bne	.L53
 504:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pDstBuffer++;
 505:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pSdramAddress++;               
 506:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 507:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 508:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Unlocked */
 509:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);       
 655              		.loc 1 509 0 is_stmt 1
 656 0034 80F82D30 		strb	r3, [r0, #45]
 510:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 511:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK; 
 657              		.loc 1 511 0
 658 0038 1846     		mov	r0, r3
 659              	.LVL79:
 660 003a 04E0     		b	.L51
 661              	.LVL80:
 662              	.L54:
ARM GAS  /tmp/ccp0DnOh.s 			page 22


 488:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 663              		.loc 1 488 0
 664 003c 0220     		movs	r0, #2
 665              	.LVL81:
 666 003e 02E0     		b	.L51
 667              	.LVL82:
 668              	.L55:
 493:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 669              		.loc 1 493 0
 670 0040 0220     		movs	r0, #2
 671              	.LVL83:
 672 0042 00E0     		b	.L51
 673              	.LVL84:
 674              	.L56:
 497:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }  
 675              		.loc 1 497 0
 676 0044 0120     		movs	r0, #1
 677              	.LVL85:
 678              	.L51:
 512:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 679              		.loc 1 512 0
 680 0046 5DF8044B 		ldr	r4, [sp], #4
 681              	.LCFI14:
 682              		.cfi_restore 4
 683              		.cfi_def_cfa_offset 0
 684 004a 7047     		bx	lr
 685              		.cfi_endproc
 686              	.LFE148:
 688              		.section	.text.HAL_SDRAM_Write_32b,"ax",%progbits
 689              		.align	2
 690              		.global	HAL_SDRAM_Write_32b
 691              		.thumb
 692              		.thumb_func
 694              	HAL_SDRAM_Write_32b:
 695              	.LFB149:
 513:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 514:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 515:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Writes 32-bit data buffer to SDRAM memory. 
 516:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 517:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 518:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pAddress Pointer to write start address
 519:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pSrcBuffer Pointer to source buffer to write  
 520:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to write to memory
 521:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 522:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 523:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pS
 524:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 696              		.loc 1 524 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700              		@ link register save eliminated.
 701              	.LVL86:
 702 0000 10B4     		push	{r4}
 703              	.LCFI15:
 704              		.cfi_def_cfa_offset 4
 705              		.cfi_offset 4, -4
ARM GAS  /tmp/ccp0DnOh.s 			page 23


 706              	.LVL87:
 525:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 526:HALLIB/Src/stm32f7xx_hal_sdram.c ****   uint32_t tmp = 0;
 527:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 528:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Locked */
 529:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 707              		.loc 1 529 0
 708 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 709 0006 012C     		cmp	r4, #1
 710 0008 16D0     		beq	.L62
 711              		.loc 1 529 0 is_stmt 0 discriminator 2
 712 000a 0124     		movs	r4, #1
 713 000c 80F82D40 		strb	r4, [r0, #45]
 530:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 531:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 532:HALLIB/Src/stm32f7xx_hal_sdram.c ****   tmp = hsdram->State;
 714              		.loc 1 532 0 is_stmt 1 discriminator 2
 715 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 716 0014 E4B2     		uxtb	r4, r4
 717              	.LVL88:
 533:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 534:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(tmp == HAL_SDRAM_STATE_BUSY)
 718              		.loc 1 534 0 discriminator 2
 719 0016 022C     		cmp	r4, #2
 720 0018 10D0     		beq	.L63
 535:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 536:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 537:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 538:HALLIB/Src/stm32f7xx_hal_sdram.c ****   else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 721              		.loc 1 538 0
 722 001a 043C     		subs	r4, r4, #4
 723              	.LVL89:
 724 001c 012C     		cmp	r4, #1
 725 001e 05D8     		bhi	.L60
 726 0020 0EE0     		b	.L64
 727              	.LVL90:
 728              	.L61:
 539:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 540:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return  HAL_ERROR; 
 541:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 542:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 543:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Write data to memory */
 544:HALLIB/Src/stm32f7xx_hal_sdram.c ****   for(; BufferSize != 0; BufferSize--)
 545:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 546:HALLIB/Src/stm32f7xx_hal_sdram.c ****     *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 729              		.loc 1 546 0 discriminator 2
 730 0022 52F8044B 		ldr	r4, [r2], #4
 731              	.LVL91:
 732 0026 41F8044B 		str	r4, [r1], #4
 733              	.LVL92:
 544:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 734              		.loc 1 544 0 discriminator 2
 735 002a 013B     		subs	r3, r3, #1
 736              	.LVL93:
 737              	.L60:
 544:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 738              		.loc 1 544 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccp0DnOh.s 			page 24


 739 002c 002B     		cmp	r3, #0
 740 002e F8D1     		bne	.L61
 547:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pSrcBuffer++;
 548:HALLIB/Src/stm32f7xx_hal_sdram.c ****     pSdramAddress++;          
 549:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 550:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 551:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Unlocked */
 552:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);    
 741              		.loc 1 552 0 is_stmt 1
 742 0030 80F82D30 		strb	r3, [r0, #45]
 553:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 554:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK;  
 743              		.loc 1 554 0
 744 0034 1846     		mov	r0, r3
 745              	.LVL94:
 746 0036 04E0     		b	.L59
 747              	.LVL95:
 748              	.L62:
 529:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 749              		.loc 1 529 0
 750 0038 0220     		movs	r0, #2
 751              	.LVL96:
 752 003a 02E0     		b	.L59
 753              	.LVL97:
 754              	.L63:
 536:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 755              		.loc 1 536 0
 756 003c 0220     		movs	r0, #2
 757              	.LVL98:
 758 003e 00E0     		b	.L59
 759              	.LVL99:
 760              	.L64:
 540:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 761              		.loc 1 540 0
 762 0040 0120     		movs	r0, #1
 763              	.LVL100:
 764              	.L59:
 555:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 765              		.loc 1 555 0
 766 0042 5DF8044B 		ldr	r4, [sp], #4
 767              	.LCFI16:
 768              		.cfi_restore 4
 769              		.cfi_def_cfa_offset 0
 770 0046 7047     		bx	lr
 771              		.cfi_endproc
 772              	.LFE149:
 774              		.section	.text.HAL_SDRAM_Read_DMA,"ax",%progbits
 775              		.align	2
 776              		.global	HAL_SDRAM_Read_DMA
 777              		.thumb
 778              		.thumb_func
 780              	HAL_SDRAM_Read_DMA:
 781              	.LFB150:
 556:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 557:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 558:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Reads a Words data from the SDRAM memory using DMA transfer. 
 559:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
ARM GAS  /tmp/ccp0DnOh.s 			page 25


 560:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 561:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pAddress Pointer to read start address
 562:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pDstBuffer Pointer to destination buffer  
 563:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to read from memory
 564:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 565:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 566:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Read_DMA(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDs
 567:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 782              		.loc 1 567 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 0
 785              		@ frame_needed = 0, uses_anonymous_args = 0
 786              	.LVL101:
 787 0000 38B5     		push	{r3, r4, r5, lr}
 788              	.LCFI17:
 789              		.cfi_def_cfa_offset 16
 790              		.cfi_offset 3, -16
 791              		.cfi_offset 4, -12
 792              		.cfi_offset 5, -8
 793              		.cfi_offset 14, -4
 794              	.LVL102:
 568:HALLIB/Src/stm32f7xx_hal_sdram.c ****   uint32_t tmp = 0;
 569:HALLIB/Src/stm32f7xx_hal_sdram.c ****     
 570:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Locked */
 571:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 795              		.loc 1 571 0
 796 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 797 0006 012C     		cmp	r4, #1
 798 0008 17D0     		beq	.L68
 799              		.loc 1 571 0 is_stmt 0 discriminator 2
 800 000a 0124     		movs	r4, #1
 801 000c 80F82D40 		strb	r4, [r0, #45]
 572:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 573:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */  
 574:HALLIB/Src/stm32f7xx_hal_sdram.c ****   tmp = hsdram->State;
 802              		.loc 1 574 0 is_stmt 1 discriminator 2
 803 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 804 0014 E4B2     		uxtb	r4, r4
 805              	.LVL103:
 575:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 576:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(tmp == HAL_SDRAM_STATE_BUSY)
 806              		.loc 1 576 0 discriminator 2
 807 0016 022C     		cmp	r4, #2
 808 0018 11D0     		beq	.L69
 577:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 578:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 579:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 580:HALLIB/Src/stm32f7xx_hal_sdram.c ****   else if(tmp == HAL_SDRAM_STATE_PRECHARGED)
 809              		.loc 1 580 0
 810 001a 052C     		cmp	r4, #5
 811 001c 11D0     		beq	.L70
 812 001e 0446     		mov	r4, r0
 813              	.LVL104:
 581:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 582:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return  HAL_ERROR; 
 583:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }  
 584:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
ARM GAS  /tmp/ccp0DnOh.s 			page 26


 585:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Configure DMA user callbacks */
 586:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->hdma->XferCpltCallback  = HAL_SDRAM_DMA_XferCpltCallback;
 814              		.loc 1 586 0
 815 0020 006B     		ldr	r0, [r0, #48]
 816              	.LVL105:
 817 0022 094D     		ldr	r5, .L72
 818 0024 C563     		str	r5, [r0, #60]
 587:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->hdma->XferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 819              		.loc 1 587 0
 820 0026 206B     		ldr	r0, [r4, #48]
 821 0028 084D     		ldr	r5, .L72+4
 822 002a C564     		str	r5, [r0, #76]
 588:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 589:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Enable the DMA Stream */
 590:HALLIB/Src/stm32f7xx_hal_sdram.c ****   HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 823              		.loc 1 590 0
 824 002c 206B     		ldr	r0, [r4, #48]
 825 002e FFF7FEFF 		bl	HAL_DMA_Start_IT
 826              	.LVL106:
 591:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 592:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Unlocked */
 593:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);  
 827              		.loc 1 593 0
 828 0032 0020     		movs	r0, #0
 829 0034 84F82D00 		strb	r0, [r4, #45]
 594:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 595:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK; 
 830              		.loc 1 595 0
 831 0038 38BD     		pop	{r3, r4, r5, pc}
 832              	.LVL107:
 833              	.L68:
 571:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 834              		.loc 1 571 0
 835 003a 0220     		movs	r0, #2
 836              	.LVL108:
 837 003c 38BD     		pop	{r3, r4, r5, pc}
 838              	.LVL109:
 839              	.L69:
 578:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 840              		.loc 1 578 0
 841 003e 0220     		movs	r0, #2
 842              	.LVL110:
 843 0040 38BD     		pop	{r3, r4, r5, pc}
 844              	.LVL111:
 845              	.L70:
 582:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }  
 846              		.loc 1 582 0
 847 0042 0120     		movs	r0, #1
 848              	.LVL112:
 596:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 849              		.loc 1 596 0
 850 0044 38BD     		pop	{r3, r4, r5, pc}
 851              	.LVL113:
 852              	.L73:
 853 0046 00BF     		.align	2
 854              	.L72:
 855 0048 00000000 		.word	HAL_SDRAM_DMA_XferCpltCallback
ARM GAS  /tmp/ccp0DnOh.s 			page 27


 856 004c 00000000 		.word	HAL_SDRAM_DMA_XferErrorCallback
 857              		.cfi_endproc
 858              	.LFE150:
 860              		.section	.text.HAL_SDRAM_Write_DMA,"ax",%progbits
 861              		.align	2
 862              		.global	HAL_SDRAM_Write_DMA
 863              		.thumb
 864              		.thumb_func
 866              	HAL_SDRAM_Write_DMA:
 867              	.LFB151:
 597:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 598:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 599:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Writes a Words data buffer to SDRAM memory using DMA transfer.
 600:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 601:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 602:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pAddress Pointer to write start address
 603:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  pSrcBuffer Pointer to source buffer to write  
 604:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to write to memory
 605:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 606:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 607:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Write_DMA(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pS
 608:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 868              		.loc 1 608 0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 872              	.LVL114:
 873 0000 38B5     		push	{r3, r4, r5, lr}
 874              	.LCFI18:
 875              		.cfi_def_cfa_offset 16
 876              		.cfi_offset 3, -16
 877              		.cfi_offset 4, -12
 878              		.cfi_offset 5, -8
 879              		.cfi_offset 14, -4
 880              	.LVL115:
 609:HALLIB/Src/stm32f7xx_hal_sdram.c ****   uint32_t tmp = 0;
 610:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 611:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Locked */
 612:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 881              		.loc 1 612 0
 882 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 883 0006 012C     		cmp	r4, #1
 884 0008 1BD0     		beq	.L76
 885              		.loc 1 612 0 is_stmt 0 discriminator 2
 886 000a 0124     		movs	r4, #1
 887 000c 80F82D40 		strb	r4, [r0, #45]
 613:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 614:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */  
 615:HALLIB/Src/stm32f7xx_hal_sdram.c ****   tmp = hsdram->State;
 888              		.loc 1 615 0 is_stmt 1 discriminator 2
 889 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 890 0014 E4B2     		uxtb	r4, r4
 891              	.LVL116:
 616:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 617:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(tmp == HAL_SDRAM_STATE_BUSY)
 892              		.loc 1 617 0 discriminator 2
 893 0016 022C     		cmp	r4, #2
ARM GAS  /tmp/ccp0DnOh.s 			page 28


 894 0018 15D0     		beq	.L77
 618:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 619:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 620:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 621:HALLIB/Src/stm32f7xx_hal_sdram.c ****   else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 895              		.loc 1 621 0
 896 001a 043C     		subs	r4, r4, #4
 897              	.LVL117:
 898 001c 012C     		cmp	r4, #1
 899 001e 14D9     		bls	.L78
 900 0020 1446     		mov	r4, r2
 901              	.LVL118:
 902 0022 0A46     		mov	r2, r1
 903              	.LVL119:
 904 0024 0546     		mov	r5, r0
 622:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 623:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return  HAL_ERROR; 
 624:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }  
 625:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 626:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Configure DMA user callbacks */
 627:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->hdma->XferCpltCallback  = HAL_SDRAM_DMA_XferCpltCallback;
 905              		.loc 1 627 0
 906 0026 016B     		ldr	r1, [r0, #48]
 907              	.LVL120:
 908 0028 0948     		ldr	r0, .L80
 909              	.LVL121:
 910 002a C863     		str	r0, [r1, #60]
 628:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->hdma->XferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 911              		.loc 1 628 0
 912 002c 296B     		ldr	r1, [r5, #48]
 913 002e 0948     		ldr	r0, .L80+4
 914 0030 C864     		str	r0, [r1, #76]
 629:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 630:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Enable the DMA Stream */
 631:HALLIB/Src/stm32f7xx_hal_sdram.c ****   HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 915              		.loc 1 631 0
 916 0032 2146     		mov	r1, r4
 917 0034 286B     		ldr	r0, [r5, #48]
 918 0036 FFF7FEFF 		bl	HAL_DMA_Start_IT
 919              	.LVL122:
 632:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 633:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Process Unlocked */
 634:HALLIB/Src/stm32f7xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);
 920              		.loc 1 634 0
 921 003a 0020     		movs	r0, #0
 922 003c 85F82D00 		strb	r0, [r5, #45]
 635:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 636:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK;
 923              		.loc 1 636 0
 924 0040 38BD     		pop	{r3, r4, r5, pc}
 925              	.LVL123:
 926              	.L76:
 612:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 927              		.loc 1 612 0
 928 0042 0220     		movs	r0, #2
 929              	.LVL124:
 930 0044 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccp0DnOh.s 			page 29


 931              	.LVL125:
 932              	.L77:
 619:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 933              		.loc 1 619 0
 934 0046 0220     		movs	r0, #2
 935              	.LVL126:
 936 0048 38BD     		pop	{r3, r4, r5, pc}
 937              	.LVL127:
 938              	.L78:
 623:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }  
 939              		.loc 1 623 0
 940 004a 0120     		movs	r0, #1
 941              	.LVL128:
 637:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 942              		.loc 1 637 0
 943 004c 38BD     		pop	{r3, r4, r5, pc}
 944              	.LVL129:
 945              	.L81:
 946 004e 00BF     		.align	2
 947              	.L80:
 948 0050 00000000 		.word	HAL_SDRAM_DMA_XferCpltCallback
 949 0054 00000000 		.word	HAL_SDRAM_DMA_XferErrorCallback
 950              		.cfi_endproc
 951              	.LFE151:
 953              		.section	.text.HAL_SDRAM_WriteProtection_Enable,"ax",%progbits
 954              		.align	2
 955              		.global	HAL_SDRAM_WriteProtection_Enable
 956              		.thumb
 957              		.thumb_func
 959              	HAL_SDRAM_WriteProtection_Enable:
 960              	.LFB152:
 638:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 639:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 640:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @}
 641:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 642:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 643:HALLIB/Src/stm32f7xx_hal_sdram.c **** /** @defgroup SDRAM_Exported_Functions_Group3 Control functions 
 644:HALLIB/Src/stm32f7xx_hal_sdram.c ****  *  @brief   management functions 
 645:HALLIB/Src/stm32f7xx_hal_sdram.c ****  *
 646:HALLIB/Src/stm32f7xx_hal_sdram.c **** @verbatim   
 647:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ==============================================================================
 648:HALLIB/Src/stm32f7xx_hal_sdram.c ****                          ##### SDRAM Control functions #####
 649:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ==============================================================================  
 650:HALLIB/Src/stm32f7xx_hal_sdram.c ****   [..]
 651:HALLIB/Src/stm32f7xx_hal_sdram.c ****     This subsection provides a set of functions allowing to control dynamically
 652:HALLIB/Src/stm32f7xx_hal_sdram.c ****     the SDRAM interface.
 653:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 654:HALLIB/Src/stm32f7xx_hal_sdram.c **** @endverbatim
 655:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @{
 656:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 657:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 658:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 659:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Enables dynamically SDRAM write protection.
 660:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 661:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 662:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 663:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
ARM GAS  /tmp/ccp0DnOh.s 			page 30


 664:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_WriteProtection_Enable(SDRAM_HandleTypeDef *hsdram)
 665:HALLIB/Src/stm32f7xx_hal_sdram.c **** { 
 961              		.loc 1 665 0
 962              		.cfi_startproc
 963              		@ args = 0, pretend = 0, frame = 0
 964              		@ frame_needed = 0, uses_anonymous_args = 0
 965              	.LVL130:
 666:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */ 
 667:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 966              		.loc 1 667 0
 967 0000 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 968 0004 DBB2     		uxtb	r3, r3
 969 0006 022B     		cmp	r3, #2
 970 0008 0DD0     		beq	.L84
 665:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */ 
 971              		.loc 1 665 0
 972 000a 10B5     		push	{r4, lr}
 973              	.LCFI19:
 974              		.cfi_def_cfa_offset 8
 975              		.cfi_offset 4, -8
 976              		.cfi_offset 14, -4
 977 000c 0446     		mov	r4, r0
 668:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 669:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 670:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 671:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 672:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Update the SDRAM state */
 673:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
 978              		.loc 1 673 0
 979 000e 0223     		movs	r3, #2
 980 0010 80F82C30 		strb	r3, [r0, #44]
 674:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 675:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Enable write protection */
 676:HALLIB/Src/stm32f7xx_hal_sdram.c ****   FMC_SDRAM_WriteProtection_Enable(hsdram->Instance, hsdram->Init.SDBank);
 981              		.loc 1 676 0
 982 0014 4168     		ldr	r1, [r0, #4]
 983 0016 0068     		ldr	r0, [r0]
 984              	.LVL131:
 985 0018 FFF7FEFF 		bl	FMC_SDRAM_WriteProtection_Enable
 986              	.LVL132:
 677:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 678:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Update the SDRAM state */
 679:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_WRITE_PROTECTED;
 987              		.loc 1 679 0
 988 001c 0423     		movs	r3, #4
 989 001e 84F82C30 		strb	r3, [r4, #44]
 680:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 681:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK;  
 990              		.loc 1 681 0
 991 0022 0020     		movs	r0, #0
 992 0024 10BD     		pop	{r4, pc}
 993              	.LVL133:
 994              	.L84:
 995              	.LCFI20:
 996              		.cfi_def_cfa_offset 0
 997              		.cfi_restore 4
 998              		.cfi_restore 14
ARM GAS  /tmp/ccp0DnOh.s 			page 31


 669:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 999              		.loc 1 669 0
 1000 0026 0220     		movs	r0, #2
 1001              	.LVL134:
 1002 0028 7047     		bx	lr
 1003              		.cfi_endproc
 1004              	.LFE152:
 1006 002a 00BF     		.section	.text.HAL_SDRAM_WriteProtection_Disable,"ax",%progbits
 1007              		.align	2
 1008              		.global	HAL_SDRAM_WriteProtection_Disable
 1009              		.thumb
 1010              		.thumb_func
 1012              	HAL_SDRAM_WriteProtection_Disable:
 1013              	.LFB153:
 682:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 683:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 684:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 685:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Disables dynamically SDRAM write protection.
 686:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 687:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 688:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 689:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 690:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_WriteProtection_Disable(SDRAM_HandleTypeDef *hsdram)
 691:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 1014              		.loc 1 691 0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 0
 1017              		@ frame_needed = 0, uses_anonymous_args = 0
 1018              	.LVL135:
 692:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 693:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 1019              		.loc 1 693 0
 1020 0000 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 1021 0004 DBB2     		uxtb	r3, r3
 1022 0006 022B     		cmp	r3, #2
 1023 0008 0DD0     		beq	.L89
 691:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 1024              		.loc 1 691 0
 1025 000a 10B5     		push	{r4, lr}
 1026              	.LCFI21:
 1027              		.cfi_def_cfa_offset 8
 1028              		.cfi_offset 4, -8
 1029              		.cfi_offset 14, -4
 1030 000c 0446     		mov	r4, r0
 694:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 695:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 696:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 697:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 698:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Update the SDRAM state */
 699:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
 1031              		.loc 1 699 0
 1032 000e 0223     		movs	r3, #2
 1033 0010 80F82C30 		strb	r3, [r0, #44]
 700:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 701:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Disable write protection */
 702:HALLIB/Src/stm32f7xx_hal_sdram.c ****   FMC_SDRAM_WriteProtection_Disable(hsdram->Instance, hsdram->Init.SDBank);
 1034              		.loc 1 702 0
ARM GAS  /tmp/ccp0DnOh.s 			page 32


 1035 0014 4168     		ldr	r1, [r0, #4]
 1036 0016 0068     		ldr	r0, [r0]
 1037              	.LVL136:
 1038 0018 FFF7FEFF 		bl	FMC_SDRAM_WriteProtection_Disable
 1039              	.LVL137:
 703:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 704:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Update the SDRAM state */
 705:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_READY;
 1040              		.loc 1 705 0
 1041 001c 0123     		movs	r3, #1
 1042 001e 84F82C30 		strb	r3, [r4, #44]
 706:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 707:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK;
 1043              		.loc 1 707 0
 1044 0022 0020     		movs	r0, #0
 1045 0024 10BD     		pop	{r4, pc}
 1046              	.LVL138:
 1047              	.L89:
 1048              	.LCFI22:
 1049              		.cfi_def_cfa_offset 0
 1050              		.cfi_restore 4
 1051              		.cfi_restore 14
 695:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 1052              		.loc 1 695 0
 1053 0026 0220     		movs	r0, #2
 1054              	.LVL139:
 1055 0028 7047     		bx	lr
 1056              		.cfi_endproc
 1057              	.LFE153:
 1059 002a 00BF     		.section	.text.HAL_SDRAM_SendCommand,"ax",%progbits
 1060              		.align	2
 1061              		.global	HAL_SDRAM_SendCommand
 1062              		.thumb
 1063              		.thumb_func
 1065              	HAL_SDRAM_SendCommand:
 1066              	.LFB154:
 708:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 709:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 710:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 711:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Sends Command to the SDRAM bank.
 712:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 713:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 714:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  Command SDRAM command structure
 715:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  Timeout Timeout duration
 716:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 717:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */  
 718:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Comm
 719:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 1067              		.loc 1 719 0
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 0
 1070              		@ frame_needed = 0, uses_anonymous_args = 0
 1071              	.LVL140:
 1072 0000 38B5     		push	{r3, r4, r5, lr}
 1073              	.LCFI23:
 1074              		.cfi_def_cfa_offset 16
 1075              		.cfi_offset 3, -16
ARM GAS  /tmp/ccp0DnOh.s 			page 33


 1076              		.cfi_offset 4, -12
 1077              		.cfi_offset 5, -8
 1078              		.cfi_offset 14, -4
 720:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 721:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 1079              		.loc 1 721 0
 1080 0002 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 1081 0006 DBB2     		uxtb	r3, r3
 1082 0008 022B     		cmp	r3, #2
 1083 000a 14D0     		beq	.L95
 1084 000c 0D46     		mov	r5, r1
 1085 000e 0446     		mov	r4, r0
 722:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 723:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 724:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 725:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 726:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Update the SDRAM state */
 727:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
 1086              		.loc 1 727 0
 1087 0010 0223     		movs	r3, #2
 1088 0012 80F82C30 		strb	r3, [r0, #44]
 728:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 729:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Send SDRAM command */
 730:HALLIB/Src/stm32f7xx_hal_sdram.c ****   FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 1089              		.loc 1 730 0
 1090 0016 0068     		ldr	r0, [r0]
 1091              	.LVL141:
 1092 0018 FFF7FEFF 		bl	FMC_SDRAM_SendCommand
 1093              	.LVL142:
 731:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 732:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Update the SDRAM controller state state */
 733:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 1094              		.loc 1 733 0
 1095 001c 2B68     		ldr	r3, [r5]
 1096 001e 022B     		cmp	r3, #2
 1097 0020 04D1     		bne	.L94
 734:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 735:HALLIB/Src/stm32f7xx_hal_sdram.c ****     hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 1098              		.loc 1 735 0
 1099 0022 0523     		movs	r3, #5
 1100 0024 84F82C30 		strb	r3, [r4, #44]
 736:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 737:HALLIB/Src/stm32f7xx_hal_sdram.c ****   else
 738:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 739:HALLIB/Src/stm32f7xx_hal_sdram.c ****     hsdram->State = HAL_SDRAM_STATE_READY;
 740:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 741:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 742:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK;  
 1101              		.loc 1 742 0
 1102 0028 0020     		movs	r0, #0
 1103 002a 38BD     		pop	{r3, r4, r5, pc}
 1104              	.LVL143:
 1105              	.L94:
 739:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 1106              		.loc 1 739 0
 1107 002c 0123     		movs	r3, #1
 1108 002e 84F82C30 		strb	r3, [r4, #44]
ARM GAS  /tmp/ccp0DnOh.s 			page 34


 1109              		.loc 1 742 0
 1110 0032 0020     		movs	r0, #0
 1111 0034 38BD     		pop	{r3, r4, r5, pc}
 1112              	.LVL144:
 1113              	.L95:
 723:HALLIB/Src/stm32f7xx_hal_sdram.c ****   }
 1114              		.loc 1 723 0
 1115 0036 0220     		movs	r0, #2
 1116              	.LVL145:
 743:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 1117              		.loc 1 743 0
 1118 0038 38BD     		pop	{r3, r4, r5, pc}
 1119              		.cfi_endproc
 1120              	.LFE154:
 1122 003a 00BF     		.section	.text.HAL_SDRAM_ProgramRefreshRate,"ax",%progbits
 1123              		.align	2
 1124              		.global	HAL_SDRAM_ProgramRefreshRate
 1125              		.thumb
 1126              		.thumb_func
 1128              	HAL_SDRAM_ProgramRefreshRate:
 1129              	.LFB155:
 744:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 745:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 746:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Programs the SDRAM Memory Refresh rate.
 747:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 748:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.  
 749:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  RefreshRate The SDRAM refresh rate value       
 750:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 751:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 752:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
 753:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 1130              		.loc 1 753 0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134              	.LVL146:
 754:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 755:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 1135              		.loc 1 755 0
 1136 0000 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 1137 0004 DBB2     		uxtb	r3, r3
 1138 0006 022B     		cmp	r3, #2
 1139 0008 0CD0     		beq	.L99
 753:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 1140              		.loc 1 753 0
 1141 000a 10B5     		push	{r4, lr}
 1142              	.LCFI24:
 1143              		.cfi_def_cfa_offset 8
 1144              		.cfi_offset 4, -8
 1145              		.cfi_offset 14, -4
 1146 000c 0446     		mov	r4, r0
 756:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 757:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 758:HALLIB/Src/stm32f7xx_hal_sdram.c ****   } 
 759:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 760:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Update the SDRAM state */
 761:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
ARM GAS  /tmp/ccp0DnOh.s 			page 35


 1147              		.loc 1 761 0
 1148 000e 0223     		movs	r3, #2
 1149 0010 80F82C30 		strb	r3, [r0, #44]
 762:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 763:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Program the refresh rate */
 764:HALLIB/Src/stm32f7xx_hal_sdram.c ****   FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 1150              		.loc 1 764 0
 1151 0014 0068     		ldr	r0, [r0]
 1152              	.LVL147:
 1153 0016 FFF7FEFF 		bl	FMC_SDRAM_ProgramRefreshRate
 1154              	.LVL148:
 765:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 766:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Update the SDRAM state */
 767:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_READY;
 1155              		.loc 1 767 0
 1156 001a 0123     		movs	r3, #1
 1157 001c 84F82C30 		strb	r3, [r4, #44]
 768:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 769:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK;   
 1158              		.loc 1 769 0
 1159 0020 0020     		movs	r0, #0
 1160 0022 10BD     		pop	{r4, pc}
 1161              	.LVL149:
 1162              	.L99:
 1163              	.LCFI25:
 1164              		.cfi_def_cfa_offset 0
 1165              		.cfi_restore 4
 1166              		.cfi_restore 14
 757:HALLIB/Src/stm32f7xx_hal_sdram.c ****   } 
 1167              		.loc 1 757 0
 1168 0024 0220     		movs	r0, #2
 1169              	.LVL150:
 1170 0026 7047     		bx	lr
 1171              		.cfi_endproc
 1172              	.LFE155:
 1174              		.section	.text.HAL_SDRAM_SetAutoRefreshNumber,"ax",%progbits
 1175              		.align	2
 1176              		.global	HAL_SDRAM_SetAutoRefreshNumber
 1177              		.thumb
 1178              		.thumb_func
 1180              	HAL_SDRAM_SetAutoRefreshNumber:
 1181              	.LFB156:
 770:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 771:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 772:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 773:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Sets the Number of consecutive SDRAM Memory auto Refresh commands.
 774:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 775:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.  
 776:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  AutoRefreshNumber The SDRAM auto Refresh number       
 777:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL status
 778:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 779:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshN
 780:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 1182              		.loc 1 780 0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 0
 1185              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccp0DnOh.s 			page 36


 1186              	.LVL151:
 781:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 782:HALLIB/Src/stm32f7xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 1187              		.loc 1 782 0
 1188 0000 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 1189 0004 DBB2     		uxtb	r3, r3
 1190 0006 022B     		cmp	r3, #2
 1191 0008 0CD0     		beq	.L104
 780:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 1192              		.loc 1 780 0
 1193 000a 10B5     		push	{r4, lr}
 1194              	.LCFI26:
 1195              		.cfi_def_cfa_offset 8
 1196              		.cfi_offset 4, -8
 1197              		.cfi_offset 14, -4
 1198 000c 0446     		mov	r4, r0
 783:HALLIB/Src/stm32f7xx_hal_sdram.c ****   {
 784:HALLIB/Src/stm32f7xx_hal_sdram.c ****     return HAL_BUSY;
 785:HALLIB/Src/stm32f7xx_hal_sdram.c ****   } 
 786:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 787:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Update the SDRAM state */
 788:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
 1199              		.loc 1 788 0
 1200 000e 0223     		movs	r3, #2
 1201 0010 80F82C30 		strb	r3, [r0, #44]
 789:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 790:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Set the Auto-Refresh number */
 791:HALLIB/Src/stm32f7xx_hal_sdram.c ****   FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 1202              		.loc 1 791 0
 1203 0014 0068     		ldr	r0, [r0]
 1204              	.LVL152:
 1205 0016 FFF7FEFF 		bl	FMC_SDRAM_SetAutoRefreshNumber
 1206              	.LVL153:
 792:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 793:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Update the SDRAM state */
 794:HALLIB/Src/stm32f7xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_READY;
 1207              		.loc 1 794 0
 1208 001a 0123     		movs	r3, #1
 1209 001c 84F82C30 		strb	r3, [r4, #44]
 795:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 796:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return HAL_OK;
 1210              		.loc 1 796 0
 1211 0020 0020     		movs	r0, #0
 1212 0022 10BD     		pop	{r4, pc}
 1213              	.LVL154:
 1214              	.L104:
 1215              	.LCFI27:
 1216              		.cfi_def_cfa_offset 0
 1217              		.cfi_restore 4
 1218              		.cfi_restore 14
 784:HALLIB/Src/stm32f7xx_hal_sdram.c ****   } 
 1219              		.loc 1 784 0
 1220 0024 0220     		movs	r0, #2
 1221              	.LVL155:
 1222 0026 7047     		bx	lr
 1223              		.cfi_endproc
 1224              	.LFE156:
ARM GAS  /tmp/ccp0DnOh.s 			page 37


 1226              		.section	.text.HAL_SDRAM_GetModeStatus,"ax",%progbits
 1227              		.align	2
 1228              		.global	HAL_SDRAM_GetModeStatus
 1229              		.thumb
 1230              		.thumb_func
 1232              	HAL_SDRAM_GetModeStatus:
 1233              	.LFB157:
 797:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 798:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 799:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 800:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Returns the SDRAM memory current mode.
 801:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 802:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 803:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval The SDRAM memory mode.        
 804:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 805:HALLIB/Src/stm32f7xx_hal_sdram.c **** uint32_t HAL_SDRAM_GetModeStatus(SDRAM_HandleTypeDef *hsdram)
 806:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 1234              		.loc 1 806 0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 1238              	.LVL156:
 1239 0000 08B5     		push	{r3, lr}
 1240              	.LCFI28:
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 3, -8
 1243              		.cfi_offset 14, -4
 807:HALLIB/Src/stm32f7xx_hal_sdram.c ****   /* Return the SDRAM memory current mode */
 808:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return(FMC_SDRAM_GetModeStatus(hsdram->Instance, hsdram->Init.SDBank));
 1244              		.loc 1 808 0
 1245 0002 4168     		ldr	r1, [r0, #4]
 1246 0004 0068     		ldr	r0, [r0]
 1247              	.LVL157:
 1248 0006 FFF7FEFF 		bl	FMC_SDRAM_GetModeStatus
 1249              	.LVL158:
 809:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 1250              		.loc 1 809 0
 1251 000a 08BD     		pop	{r3, pc}
 1252              		.cfi_endproc
 1253              	.LFE157:
 1255              		.section	.text.HAL_SDRAM_GetState,"ax",%progbits
 1256              		.align	2
 1257              		.global	HAL_SDRAM_GetState
 1258              		.thumb
 1259              		.thumb_func
 1261              	HAL_SDRAM_GetState:
 1262              	.LFB158:
 810:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 811:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 812:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @}
 813:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 814:HALLIB/Src/stm32f7xx_hal_sdram.c ****   
 815:HALLIB/Src/stm32f7xx_hal_sdram.c **** /** @defgroup SDRAM_Exported_Functions_Group4 State functions 
 816:HALLIB/Src/stm32f7xx_hal_sdram.c ****  *  @brief   Peripheral State functions 
 817:HALLIB/Src/stm32f7xx_hal_sdram.c ****  *
 818:HALLIB/Src/stm32f7xx_hal_sdram.c **** @verbatim   
 819:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ==============================================================================
ARM GAS  /tmp/ccp0DnOh.s 			page 38


 820:HALLIB/Src/stm32f7xx_hal_sdram.c ****                       ##### SDRAM State functions #####
 821:HALLIB/Src/stm32f7xx_hal_sdram.c ****   ==============================================================================  
 822:HALLIB/Src/stm32f7xx_hal_sdram.c ****   [..]
 823:HALLIB/Src/stm32f7xx_hal_sdram.c ****     This subsection permits to get in run-time the status of the SDRAM controller 
 824:HALLIB/Src/stm32f7xx_hal_sdram.c ****     and the data flow.
 825:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 826:HALLIB/Src/stm32f7xx_hal_sdram.c **** @endverbatim
 827:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @{
 828:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 829:HALLIB/Src/stm32f7xx_hal_sdram.c **** 
 830:HALLIB/Src/stm32f7xx_hal_sdram.c **** /**
 831:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @brief  Returns the SDRAM state.
 832:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 833:HALLIB/Src/stm32f7xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 834:HALLIB/Src/stm32f7xx_hal_sdram.c ****   * @retval HAL state
 835:HALLIB/Src/stm32f7xx_hal_sdram.c ****   */
 836:HALLIB/Src/stm32f7xx_hal_sdram.c **** HAL_SDRAM_StateTypeDef HAL_SDRAM_GetState(SDRAM_HandleTypeDef *hsdram)
 837:HALLIB/Src/stm32f7xx_hal_sdram.c **** {
 1263              		.loc 1 837 0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 1268              	.LVL159:
 838:HALLIB/Src/stm32f7xx_hal_sdram.c ****   return hsdram->State;
 1269              		.loc 1 838 0
 1270 0000 90F82C00 		ldrb	r0, [r0, #44]	@ zero_extendqisi2
 1271              	.LVL160:
 839:HALLIB/Src/stm32f7xx_hal_sdram.c **** }
 1272              		.loc 1 839 0
 1273 0004 7047     		bx	lr
 1274              		.cfi_endproc
 1275              	.LFE158:
 1277 0006 00BF     		.text
 1278              	.Letext0:
 1279              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 1280              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 1281              		.file 4 "Inc/stm32f767xx.h"
 1282              		.file 5 "HALLIB/Inc/stm32f7xx_hal_def.h"
 1283              		.file 6 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 1284              		.file 7 "HALLIB/Inc/stm32f7xx_ll_fmc.h"
 1285              		.file 8 "HALLIB/Inc/stm32f7xx_hal_sdram.h"
 1286              		.file 9 "CORE/core_cm7.h"
ARM GAS  /tmp/ccp0DnOh.s 			page 39


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_sdram.c
     /tmp/ccp0DnOh.s:21     .text.HAL_SDRAM_DMA_XferCpltCallback:00000000 $t
     /tmp/ccp0DnOh.s:26     .text.HAL_SDRAM_DMA_XferCpltCallback:00000000 HAL_SDRAM_DMA_XferCpltCallback
     /tmp/ccp0DnOh.s:40     .text.HAL_SDRAM_DMA_XferErrorCallback:00000000 $t
     /tmp/ccp0DnOh.s:45     .text.HAL_SDRAM_DMA_XferErrorCallback:00000000 HAL_SDRAM_DMA_XferErrorCallback
     /tmp/ccp0DnOh.s:58     .text.HAL_SDRAM_MspInit:00000000 $t
     /tmp/ccp0DnOh.s:63     .text.HAL_SDRAM_MspInit:00000000 HAL_SDRAM_MspInit
     /tmp/ccp0DnOh.s:76     .text.HAL_SDRAM_Init:00000000 $t
     /tmp/ccp0DnOh.s:81     .text.HAL_SDRAM_Init:00000000 HAL_SDRAM_Init
     /tmp/ccp0DnOh.s:147    .text.HAL_SDRAM_MspDeInit:00000000 $t
     /tmp/ccp0DnOh.s:152    .text.HAL_SDRAM_MspDeInit:00000000 HAL_SDRAM_MspDeInit
     /tmp/ccp0DnOh.s:165    .text.HAL_SDRAM_DeInit:00000000 $t
     /tmp/ccp0DnOh.s:170    .text.HAL_SDRAM_DeInit:00000000 HAL_SDRAM_DeInit
     /tmp/ccp0DnOh.s:203    .text.HAL_SDRAM_RefreshErrorCallback:00000000 $t
     /tmp/ccp0DnOh.s:208    .text.HAL_SDRAM_RefreshErrorCallback:00000000 HAL_SDRAM_RefreshErrorCallback
     /tmp/ccp0DnOh.s:221    .text.HAL_SDRAM_IRQHandler:00000000 $t
     /tmp/ccp0DnOh.s:226    .text.HAL_SDRAM_IRQHandler:00000000 HAL_SDRAM_IRQHandler
     /tmp/ccp0DnOh.s:265    .text.HAL_SDRAM_Read_8b:00000000 $t
     /tmp/ccp0DnOh.s:270    .text.HAL_SDRAM_Read_8b:00000000 HAL_SDRAM_Read_8b
     /tmp/ccp0DnOh.s:349    .text.HAL_SDRAM_Write_8b:00000000 $t
     /tmp/ccp0DnOh.s:354    .text.HAL_SDRAM_Write_8b:00000000 HAL_SDRAM_Write_8b
     /tmp/ccp0DnOh.s:435    .text.HAL_SDRAM_Read_16b:00000000 $t
     /tmp/ccp0DnOh.s:440    .text.HAL_SDRAM_Read_16b:00000000 HAL_SDRAM_Read_16b
     /tmp/ccp0DnOh.s:519    .text.HAL_SDRAM_Write_16b:00000000 $t
     /tmp/ccp0DnOh.s:524    .text.HAL_SDRAM_Write_16b:00000000 HAL_SDRAM_Write_16b
     /tmp/ccp0DnOh.s:605    .text.HAL_SDRAM_Read_32b:00000000 $t
     /tmp/ccp0DnOh.s:610    .text.HAL_SDRAM_Read_32b:00000000 HAL_SDRAM_Read_32b
     /tmp/ccp0DnOh.s:689    .text.HAL_SDRAM_Write_32b:00000000 $t
     /tmp/ccp0DnOh.s:694    .text.HAL_SDRAM_Write_32b:00000000 HAL_SDRAM_Write_32b
     /tmp/ccp0DnOh.s:775    .text.HAL_SDRAM_Read_DMA:00000000 $t
     /tmp/ccp0DnOh.s:780    .text.HAL_SDRAM_Read_DMA:00000000 HAL_SDRAM_Read_DMA
     /tmp/ccp0DnOh.s:855    .text.HAL_SDRAM_Read_DMA:00000048 $d
     /tmp/ccp0DnOh.s:861    .text.HAL_SDRAM_Write_DMA:00000000 $t
     /tmp/ccp0DnOh.s:866    .text.HAL_SDRAM_Write_DMA:00000000 HAL_SDRAM_Write_DMA
     /tmp/ccp0DnOh.s:948    .text.HAL_SDRAM_Write_DMA:00000050 $d
     /tmp/ccp0DnOh.s:954    .text.HAL_SDRAM_WriteProtection_Enable:00000000 $t
     /tmp/ccp0DnOh.s:959    .text.HAL_SDRAM_WriteProtection_Enable:00000000 HAL_SDRAM_WriteProtection_Enable
     /tmp/ccp0DnOh.s:1007   .text.HAL_SDRAM_WriteProtection_Disable:00000000 $t
     /tmp/ccp0DnOh.s:1012   .text.HAL_SDRAM_WriteProtection_Disable:00000000 HAL_SDRAM_WriteProtection_Disable
     /tmp/ccp0DnOh.s:1060   .text.HAL_SDRAM_SendCommand:00000000 $t
     /tmp/ccp0DnOh.s:1065   .text.HAL_SDRAM_SendCommand:00000000 HAL_SDRAM_SendCommand
     /tmp/ccp0DnOh.s:1123   .text.HAL_SDRAM_ProgramRefreshRate:00000000 $t
     /tmp/ccp0DnOh.s:1128   .text.HAL_SDRAM_ProgramRefreshRate:00000000 HAL_SDRAM_ProgramRefreshRate
     /tmp/ccp0DnOh.s:1175   .text.HAL_SDRAM_SetAutoRefreshNumber:00000000 $t
     /tmp/ccp0DnOh.s:1180   .text.HAL_SDRAM_SetAutoRefreshNumber:00000000 HAL_SDRAM_SetAutoRefreshNumber
     /tmp/ccp0DnOh.s:1227   .text.HAL_SDRAM_GetModeStatus:00000000 $t
     /tmp/ccp0DnOh.s:1232   .text.HAL_SDRAM_GetModeStatus:00000000 HAL_SDRAM_GetModeStatus
     /tmp/ccp0DnOh.s:1256   .text.HAL_SDRAM_GetState:00000000 $t
     /tmp/ccp0DnOh.s:1261   .text.HAL_SDRAM_GetState:00000000 HAL_SDRAM_GetState
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
FMC_SDRAM_Init
FMC_SDRAM_Timing_Init
FMC_SDRAM_DeInit
HAL_DMA_Start_IT
ARM GAS  /tmp/ccp0DnOh.s 			page 40


FMC_SDRAM_WriteProtection_Enable
FMC_SDRAM_WriteProtection_Disable
FMC_SDRAM_SendCommand
FMC_SDRAM_ProgramRefreshRate
FMC_SDRAM_SetAutoRefreshNumber
FMC_SDRAM_GetModeStatus
