ARM GAS  /tmp/ccyKUF0t.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_ll_sdmmc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.SDMMC_GetCmdError,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	SDMMC_GetCmdError:
  26              	.LFB174:
  27              		.file 1 "HALLIB/Src/stm32f7xx_ll_sdmmc.c"
   1:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
   2:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @file    stm32f7xx_ll_sdmmc.c
   4:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief   SDMMC Low Layer HAL module driver.
   6:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *    
   7:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *          This file provides firmware functions to manage the following 
   8:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *          functionalities of the SDMMC peripheral:
   9:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *           + Initialization/de-initialization functions
  10:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *           + I/O operation functions
  11:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *           + Peripheral Control functions 
  12:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *           + Peripheral State functions
  13:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         
  14:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   @verbatim
  15:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   ==============================================================================
  16:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        ##### SDMMC peripheral features #####
  17:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   ==============================================================================        
  18:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     [..] The SD/SDMMC MMC card host interface (SDMMC) provides an interface between the APB2
  19:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          peripheral bus and MultiMedia cards (MMCs), SD memory cards, SDMMC cards and CE-ATA
  20:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          devices.
  21:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
  22:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     [..] The SDMMC features include the following:
  23:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          (+) Full compliance with MultiMedia Card System Specification Version 4.2. Card support
  24:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              for three different databus modes: 1-bit (default), 4-bit and 8-bit
  25:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          (+) Full compatibility with previous versions of MultiMedia Cards (forward compatibility)
  26:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          (+) Full compliance with SD Memory Card Specifications Version 2.0
  27:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          (+) Full compliance with SD I/O Card Specification Version 2.0: card support for two
  28:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              different data bus modes: 1-bit (default) and 4-bit
  29:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          (+) Full support of the CE-ATA features (full compliance with CE-ATA digital protocol
  30:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Rev1.1)
  31:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          (+) Data transfer up to 48 MHz for the 8 bit mode
ARM GAS  /tmp/ccyKUF0t.s 			page 2


  32:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          (+) Data and command output enable signals to control external bidirectional drivers.
  33:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                  
  34:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****    
  35:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                            ##### How to use this driver #####
  36:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   ==============================================================================
  37:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     [..]
  38:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       This driver is a considered as a driver of service for external devices drivers 
  39:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       that interfaces with the SDMMC peripheral.
  40:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       According to the device used (SD card/ MMC card / SDMMC card ...), a set of APIs 
  41:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       is used in the device's driver to perform SDMMC operations and functionalities.
  42:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****    
  43:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       This driver is almost transparent for the final user, it is only used to implement other
  44:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       functionalities of the external device.
  45:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****    
  46:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     [..]
  47:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (+) The SDMMC clock (SDMMCCLK = 48 MHz) is coming from a specific output of PLL 
  48:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (PLL48CLK). Before start working with SDMMC peripheral make sure that the
  49:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           PLL is well configured.
  50:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           The SDMMC peripheral uses two clock signals:
  51:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (++) SDMMC adapter clock (SDMMCCLK = 48 MHz)
  52:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (++) APB2 bus clock (PCLK2)
  53:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****        
  54:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           -@@- PCLK2 and SDMMC_CK clock frequencies must respect the following condition:
  55:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                Frequency(PCLK2) >= (3 / 8 x Frequency(SDMMC_CK))
  56:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
  57:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (+) Enable/Disable peripheral clock using RCC peripheral macros related to SDMMC
  58:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           peripheral.
  59:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
  60:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (+) Enable the Power ON State using the SDMMC_PowerState_ON(SDMMCx) 
  61:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           function and disable it using the function SDMMC_PowerState_OFF(SDMMCx).
  62:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                 
  63:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (+) Enable/Disable the clock using the __SDMMC_ENABLE()/__SDMMC_DISABLE() macros.
  64:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
  65:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (+) Enable/Disable the peripheral interrupts using the macros __SDMMC_ENABLE_IT(hSDMMC, IT) 
  66:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           and __SDMMC_DISABLE_IT(hSDMMC, IT) if you need to use interrupt mode. 
  67:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
  68:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (+) When using the DMA mode 
  69:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (++) Configure the DMA in the MSP layer of the external device
  70:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (++) Active the needed channel Request 
  71:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (++) Enable the DMA using __SDMMC_DMA_ENABLE() macro or Disable it using the macro
  72:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                __SDMMC_DMA_DISABLE().
  73:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
  74:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (+) To control the CPSM (Command Path State Machine) and send 
  75:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           commands to the card use the SDMMC_SendCommand(SDMMCx), 
  76:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           SDMMC_GetCommandResponse() and SDMMC_GetResponse() functions. First, user has
  77:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           to fill the command structure (pointer to SDMMC_CmdInitTypeDef) according 
  78:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           to the selected command to be sent.
  79:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           The parameters that should be filled are:
  80:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            (++) Command Argument
  81:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            (++) Command Index
  82:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            (++) Command Response type
  83:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            (++) Command Wait
  84:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            (++) CPSM Status (Enable or Disable).
  85:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
  86:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           -@@- To check if the command is well received, read the SDMMC_CMDRESP
  87:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****               register using the SDMMC_GetCommandResponse().
  88:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****               The SDMMC responses registers (SDMMC_RESP1 to SDMMC_RESP2), use the
ARM GAS  /tmp/ccyKUF0t.s 			page 3


  89:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****               SDMMC_GetResponse() function.
  90:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
  91:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (+) To control the DPSM (Data Path State Machine) and send/receive 
  92:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            data to/from the card use the SDMMC_DataConfig(), SDMMC_GetDataCounter(), 
  93:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           SDMMC_ReadFIFO(), SDMMC_WriteFIFO() and SDMMC_GetFIFOCount() functions.
  94:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
  95:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     *** Read Operations ***
  96:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     =======================
  97:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     [..]
  98:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (#) First, user has to fill the data structure (pointer to
  99:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           SDMMC_DataInitTypeDef) according to the selected data type to be received.
 100:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           The parameters that should be filled are:
 101:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            (++) Data TimeOut
 102:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            (++) Data Length
 103:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            (++) Data Block size
 104:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            (++) Data Transfer direction: should be from card (To SDMMC)
 105:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            (++) Data Transfer mode
 106:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****            (++) DPSM Status (Enable or Disable)
 107:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                                      
 108:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (#) Configure the SDMMC resources to receive the data from the card
 109:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           according to selected transfer mode (Refer to Step 8, 9 and 10).
 110:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 111:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (#) Send the selected Read command (refer to step 11).
 112:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                     
 113:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       (#) Use the SDMMC flags/interrupts to check the transfer status.
 114:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 115:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     *** Write Operations ***
 116:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     ========================
 117:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     [..]
 118:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****      (#) First, user has to fill the data structure (pointer to
 119:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          SDMMC_DataInitTypeDef) according to the selected data type to be received.
 120:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          The parameters that should be filled are:
 121:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (++) Data TimeOut
 122:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (++) Data Length
 123:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (++) Data Block size
 124:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (++) Data Transfer direction:  should be to card (To CARD)
 125:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (++) Data Transfer mode
 126:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****           (++) DPSM Status (Enable or Disable)
 127:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 128:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****      (#) Configure the SDMMC resources to send the data to the card according to 
 129:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          selected transfer mode.
 130:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                      
 131:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****      (#) Send the selected Write command.
 132:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                     
 133:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****      (#) Use the SDMMC flags/interrupts to check the transfer status.
 134:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****        
 135:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     *** Command management operations ***
 136:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     =====================================
 137:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     [..]
 138:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****      (#) The commands used for Read/Write//Erase operations are managed in 
 139:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          separate functions. 
 140:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          Each function allows to send the needed command with the related argument,
 141:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          then check the response.
 142:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****          By the same approach, you could implement a command and check the response.
 143:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 144:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   @endverbatim
 145:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   ******************************************************************************
ARM GAS  /tmp/ccyKUF0t.s 			page 4


 146:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @attention
 147:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *
 148:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 149:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *
 150:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 151:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * are permitted provided that the following conditions are met:
 152:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 153:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *      this list of conditions and the following disclaimer.
 154:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 155:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *      this list of conditions and the following disclaimer in the documentation
 156:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *      and/or other materials provided with the distribution.
 157:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 158:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *      may be used to endorse or promote products derived from this software
 159:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *      without specific prior written permission.
 160:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *
 161:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 162:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 163:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 164:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 165:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 166:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 167:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 168:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 169:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 170:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 171:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *
 172:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   ******************************************************************************
 173:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */ 
 174:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 175:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /* Includes ------------------------------------------------------------------*/
 176:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** #include "stm32f7xx_hal.h"
 177:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 178:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /** @addtogroup STM32F7xx_HAL_Driver
 179:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @{
 180:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 181:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 182:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /** @defgroup SDMMC_LL SDMMC Low Layer
 183:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief Low layer module for SD
 184:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @{
 185:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 186:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 187:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** #if defined (HAL_SD_MODULE_ENABLED) || defined(HAL_MMC_MODULE_ENABLED)
 188:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 189:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /* Private typedef -----------------------------------------------------------*/
 190:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /* Private define ------------------------------------------------------------*/
 191:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /* Private macro -------------------------------------------------------------*/
 192:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /* Private variables ---------------------------------------------------------*/
 193:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /* Private function prototypes -----------------------------------------------*/
 194:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx);
 195:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout);
 196:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx);
 197:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx);
 198:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx);
 199:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA);
 200:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 201:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /* Exported functions --------------------------------------------------------*/
 202:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
ARM GAS  /tmp/ccyKUF0t.s 			page 5


 203:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /** @defgroup SDMMC_LL_Exported_Functions SDMMC Low Layer Exported Functions
 204:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @{
 205:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 206:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 207:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /** @defgroup HAL_SDMMC_LL_Group1 Initialization de-initialization functions 
 208:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  *  @brief    Initialization and Configuration functions 
 209:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  *
 210:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** @verbatim    
 211:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  ===============================================================================
 212:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****               ##### Initialization/de-initialization functions #####
 213:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  ===============================================================================
 214:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     [..]  This section provides functions allowing to:
 215:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  
 216:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** @endverbatim
 217:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @{
 218:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 219:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 220:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 221:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Initializes the SDMMC according to the specified
 222:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         parameters in the SDMMC_InitTypeDef and create the associated handle.
 223:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base
 224:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  Init SDMMC initialization structure   
 225:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 226:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 227:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
 228:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 229:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t tmpreg = 0;
 230:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 231:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check the parameters */
 232:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 233:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 234:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 235:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 236:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 237:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 238:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 239:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 240:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set SDMMC configuration parameters */
 241:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   tmpreg |= (Init.ClockEdge           |\
 242:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.ClockBypass         |\
 243:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.ClockPowerSave      |\
 244:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.BusWide             |\
 245:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.HardwareFlowControl |\
 246:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.ClockDiv
 247:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              ); 
 248:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 249:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Write to SDMMC CLKCR */
 250:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 251:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 252:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return HAL_OK;
 253:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 254:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 255:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 256:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 257:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @}
 258:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 259:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
ARM GAS  /tmp/ccyKUF0t.s 			page 6


 260:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /** @defgroup HAL_SDMMC_LL_Group2 IO operation functions 
 261:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  *  @brief   Data transfers functions 
 262:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  *
 263:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** @verbatim   
 264:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  ===============================================================================
 265:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                       ##### I/O operation functions #####
 266:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  ===============================================================================  
 267:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     [..]
 268:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     This subsection provides a set of functions allowing to manage the SDMMC data 
 269:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     transfers.
 270:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 271:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** @endverbatim
 272:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @{
 273:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 274:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 275:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 276:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
 277:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base
 278:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 279:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 280:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
 281:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 282:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Read data from Rx FIFO */ 
 283:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return (SDMMCx->FIFO);
 284:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 285:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 286:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 287:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Write data (word) to Tx FIFO in blocking mode (polling) 
 288:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base
 289:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  pWriteData pointer to data to write
 290:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 291:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 292:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
 293:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** { 
 294:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Write data to FIFO */ 
 295:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMCx->FIFO = *pWriteData;
 296:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 297:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return HAL_OK;
 298:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 299:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 300:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 301:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @}
 302:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 303:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 304:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /** @defgroup HAL_SDMMC_LL_Group3 Peripheral Control functions 
 305:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  *  @brief   management functions 
 306:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  *
 307:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** @verbatim   
 308:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  ===============================================================================
 309:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                       ##### Peripheral Control functions #####
 310:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  ===============================================================================  
 311:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     [..]
 312:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     This subsection provides a set of functions allowing to control the SDMMC data 
 313:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     transfers.
 314:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 315:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** @endverbatim
 316:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @{
ARM GAS  /tmp/ccyKUF0t.s 			page 7


 317:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 318:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 319:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 320:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Set SDMMC Power state to ON. 
 321:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base
 322:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 323:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 324:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
 325:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {  
 326:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set power state to ON */ 
 327:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 328:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 329:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return HAL_OK; 
 330:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 331:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 332:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 333:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Set SDMMC Power state to OFF. 
 334:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base
 335:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 336:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 337:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
 338:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 339:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set power state to OFF */
 340:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMCx->POWER = (uint32_t)0x00000000;
 341:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 342:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return HAL_OK;
 343:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 344:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 345:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 346:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Get SDMMC Power state. 
 347:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base
 348:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval Power status of the controller. The returned value can be one of the 
 349:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         following values:
 350:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *            - 0x00: Power OFF
 351:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *            - 0x02: Power UP
 352:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *            - 0x03: Power ON 
 353:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 354:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
 355:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 356:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 357:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 358:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 359:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 360:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Configure the SDMMC command path according to the specified parameters in
 361:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         SDMMC_CmdInitTypeDef structure and send the command 
 362:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base
 363:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
 364:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         the configuration information for the SDMMC command
 365:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 366:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 367:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
 368:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 369:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t tmpreg = 0;
 370:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 371:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check the parameters */
 372:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 373:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_RESPONSE(Command->Response));
ARM GAS  /tmp/ccyKUF0t.s 			page 8


 374:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 375:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_CPSM(Command->CPSM));
 376:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 377:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set the SDMMC Argument value */
 378:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMCx->ARG = Command->Argument;
 379:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 380:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set SDMMC command parameters */
 381:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   tmpreg |= (uint32_t)(Command->CmdIndex         |\
 382:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Command->Response         |\
 383:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Command->WaitForInterrupt |\
 384:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Command->CPSM);
 385:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 386:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Write to SDMMC CMD register */
 387:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 388:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 389:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return HAL_OK;  
 390:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 391:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 392:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 393:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Return the command index of last command for which response received
 394:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base
 395:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval Command index of the last command response received
 396:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 397:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
 398:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 399:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return (uint8_t)(SDMMCx->RESPCMD);
 400:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 401:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 402:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 403:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 404:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Return the response received from the card for the last command
 405:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base    
 406:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  Response Specifies the SDMMC response register. 
 407:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *          This parameter can be one of the following values:
 408:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *            @arg SDMMC_RESP1: Response Register 1
 409:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *            @arg SDMMC_RESP2: Response Register 2
 410:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *            @arg SDMMC_RESP3: Response Register 3
 411:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *            @arg SDMMC_RESP4: Response Register 4  
 412:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval The Corresponding response register value
 413:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 414:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
 415:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 416:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   __IO uint32_t tmp = 0;
 417:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 418:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check the parameters */
 419:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_RESP(Response));
 420:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 421:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Get the response */
 422:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 423:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 424:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return (*(__IO uint32_t *) tmp);
 425:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }  
 426:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 427:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 428:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Configure the SDMMC data path according to the specified 
 429:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         parameters in the SDMMC_DataInitTypeDef.
 430:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base  
ARM GAS  /tmp/ccyKUF0t.s 			page 9


 431:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
 432:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         that contains the configuration information for the SDMMC data.
 433:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 434:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 435:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
 436:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 437:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t tmpreg = 0;
 438:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 439:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check the parameters */
 440:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 441:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 442:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 443:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 444:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_DPSM(Data->DPSM));
 445:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 446:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set the SDMMC Data TimeOut value */
 447:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMCx->DTIMER = Data->DataTimeOut;
 448:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 449:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set the SDMMC DataLength value */
 450:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMCx->DLEN = Data->DataLength;
 451:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 452:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set the SDMMC data configuration parameters */
 453:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   tmpreg |= (uint32_t)(Data->DataBlockSize |\
 454:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Data->TransferDir   |\
 455:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Data->TransferMode  |\
 456:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Data->DPSM);
 457:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 458:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Write to SDMMC DCTRL */
 459:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 460:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 461:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return HAL_OK;
 462:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 463:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 464:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 465:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 466:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Returns number of remaining data bytes to be transferred.
 467:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base
 468:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval Number of remaining data bytes to be transferred
 469:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 470:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_GetDataCounter(SDMMC_TypeDef *SDMMCx)
 471:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 472:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return (SDMMCx->DCOUNT);
 473:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 474:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 475:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 476:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Get the FIFO data
 477:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 478:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval Data received
 479:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 480:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_GetFIFOCount(SDMMC_TypeDef *SDMMCx)
 481:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 482:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return (SDMMCx->FIFO);
 483:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 484:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 485:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 486:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Sets one of the two options of inserting read wait interval.
 487:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base   
ARM GAS  /tmp/ccyKUF0t.s 			page 10


 488:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMC_ReadWaitMode SDMMC Read Wait operation mode.
 489:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *          This parameter can be:
 490:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *            @arg SDMMC_READ_WAIT_MODE_CLK: Read Wait control by stopping SDMMCCLK
 491:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *            @arg SDMMC_READ_WAIT_MODE_DATA2: Read Wait control using SDMMC_DATA2
 492:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval None
 493:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 494:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** HAL_StatusTypeDef SDMMC_SetSDMMCReadWaitMode(SDMMC_TypeDef *SDMMCx, uint32_t SDMMC_ReadWaitMode)
 495:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 496:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check the parameters */
 497:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   assert_param(IS_SDMMC_READWAIT_MODE(SDMMC_ReadWaitMode));
 498:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 499:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set SDMMC read wait mode */
 500:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   MODIFY_REG(SDMMCx->DCTRL, SDMMC_DCTRL_RWMOD, SDMMC_ReadWaitMode);
 501:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 502:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return HAL_OK;  
 503:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 504:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 505:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 506:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @}
 507:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 508:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 509:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 510:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /** @defgroup HAL_SDMMC_LL_Group4 Command management functions 
 511:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  *  @brief   Data transfers functions 
 512:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  *
 513:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** @verbatim   
 514:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  ===============================================================================
 515:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                    ##### Commands management functions #####
 516:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  ===============================================================================  
 517:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     [..]
 518:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     This subsection provides a set of functions allowing to manage the needed commands.
 519:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 520:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** @endverbatim
 521:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @{
 522:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 523:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 524:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 525:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Data Block Lenght command and check the response
 526:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 527:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 528:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 529:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
 530:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 531:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 532:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 533:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 534:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set Block Size for Card */ 
 535:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 536:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 537:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 538:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 539:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 540:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 541:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 542:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 543:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 544:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
ARM GAS  /tmp/ccyKUF0t.s 			page 11


 545:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 546:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 547:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 548:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 549:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Read Single Block command and check the response
 550:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 551:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 552:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 553:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
 554:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 555:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 556:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 557:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 558:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set Block Size for Card */ 
 559:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 560:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 561:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 562:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 563:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 564:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 565:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 566:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 567:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 568:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 569:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 570:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 571:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 572:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 573:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Read Multi Block command and check the response
 574:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 575:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 576:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 577:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
 578:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 579:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 580:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 581:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 582:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set Block Size for Card */ 
 583:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 584:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 585:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 586:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 587:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 588:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 589:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 590:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 591:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 592:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 593:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 594:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 595:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 596:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 597:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Write Single Block command and check the response
 598:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 599:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 600:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 601:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
ARM GAS  /tmp/ccyKUF0t.s 			page 12


 602:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 603:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 604:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 605:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 606:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set Block Size for Card */ 
 607:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 608:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 609:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 610:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 611:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 612:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 613:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 614:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 615:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 616:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 617:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 618:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 619:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 620:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 621:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Write Multi Block command and check the response
 622:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 623:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 624:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 625:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
 626:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 627:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 628:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 629:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 630:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set Block Size for Card */ 
 631:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 632:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 633:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 634:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 635:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 636:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 637:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 638:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 639:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 640:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 641:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 642:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 643:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 644:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 645:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Start Address Erase command for SD and check the response
 646:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 647:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 648:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 649:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdSDEraseStartAdd(SDMMC_TypeDef *SDMMCx, uint32_t StartAdd)
 650:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 651:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 652:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 653:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 654:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set Block Size for Card */ 
 655:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)StartAdd;
 656:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_ERASE_GRP_START;
 657:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 658:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
ARM GAS  /tmp/ccyKUF0t.s 			page 13


 659:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 660:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 661:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 662:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 663:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_START, SDMMC_CMDTIMEOUT);
 664:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 665:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 666:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 667:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 668:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 669:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the End Address Erase command for SD and check the response
 670:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 671:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 672:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 673:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdSDEraseEndAdd(SDMMC_TypeDef *SDMMCx, uint32_t EndAdd)
 674:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 675:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 676:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 677:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 678:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set Block Size for Card */ 
 679:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)EndAdd;
 680:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_ERASE_GRP_END;
 681:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 682:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 683:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 684:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 685:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 686:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 687:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_END, SDMMC_CMDTIMEOUT);
 688:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 689:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 690:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 691:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 692:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 693:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Start Address Erase command and check the response
 694:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 695:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 696:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 697:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdEraseStartAdd(SDMMC_TypeDef *SDMMCx, uint32_t StartAdd)
 698:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 699:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 700:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 701:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 702:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set Block Size for Card */ 
 703:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)StartAdd;
 704:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE_GRP_START;
 705:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 706:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 707:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 708:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 709:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 710:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 711:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE_GRP_START, SDMMC_CMDTIMEOUT);
 712:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 713:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 714:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 715:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
ARM GAS  /tmp/ccyKUF0t.s 			page 14


 716:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 717:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the End Address Erase command and check the response
 718:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 719:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 720:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 721:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdEraseEndAdd(SDMMC_TypeDef *SDMMCx, uint32_t EndAdd)
 722:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 723:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 724:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 725:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 726:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set Block Size for Card */ 
 727:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)EndAdd;
 728:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE_GRP_END;
 729:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 730:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 731:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 732:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 733:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 734:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 735:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE_GRP_END, SDMMC_CMDTIMEOUT);
 736:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 737:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 738:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 739:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 740:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 741:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Erase command and check the response
 742:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 743:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 744:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 745:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdErase(SDMMC_TypeDef *SDMMCx)
 746:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 747:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 748:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 749:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 750:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set Block Size for Card */ 
 751:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = 0;
 752:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 753:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 754:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 755:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 756:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 757:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 758:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 759:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE, SDMMC_MAXERASETIMEOUT);
 760:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 761:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 762:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 763:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 764:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 765:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Stop Transfer command and check the response.
 766:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 767:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 768:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 769:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
 770:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 771:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 772:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
ARM GAS  /tmp/ccyKUF0t.s 			page 15


 773:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 774:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Send CMD12 STOP_TRANSMISSION  */
 775:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = 0;
 776:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 777:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 778:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 779:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 780:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 781:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 782:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 783:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/
 784:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 785:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 786:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 787:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 788:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 789:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Select Deselect command and check the response.
 790:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 791:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  addr Address of the card to be selected  
 792:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 793:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 794:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
 795:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 796:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 797:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 798:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 799:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Send CMD7 SDMMC_SEL_DESEL_CARD */
 800:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 802:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 803:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 804:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 805:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 806:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 807:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 808:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 809:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 810:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 811:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 812:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 813:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 814:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Go Idle State command and check the response.
 815:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 816:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 817:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 818:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
 819:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 820:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 821:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 822:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 823:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = 0;
 824:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 825:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 826:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 827:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 828:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 829:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
ARM GAS  /tmp/ccyKUF0t.s 			page 16


 830:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 831:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdError(SDMMCx);
 832:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 833:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 834:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 835:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 836:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 837:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Operating Condition command and check the response.
 838:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 839:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 840:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 841:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
 842:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 843:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 844:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 845:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 846:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Send CMD8 to verify SD card interface operating condition */
 847:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Argument: - [31:12]: Reserved (shall be set to '0')
 848:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
 849:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   - [7:0]: Check Pattern (recommended 0xAA) */
 850:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* CMD Response: R7 */
 851:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 852:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 853:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 854:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 855:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 856:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 857:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 858:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 859:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp7(SDMMCx);
 860:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 861:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 862:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 863:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 864:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 865:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Application command to verify that that the next command 
 866:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         is an application specific com-mand rather than a standard command
 867:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         and check the response.
 868:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 869:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 870:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 871:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
 872:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 873:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 874:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 875:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 876:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 877:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 878:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 879:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 880:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 881:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 882:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 883:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 884:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* If there is a HAL_ERROR, it is a MMC card, else
 885:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   it is a SD card: SD card 2.0 (voltage range mismatch)
 886:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****      or SD card 1.x */
ARM GAS  /tmp/ccyKUF0t.s 			page 17


 887:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 888:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 889:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 890:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 891:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 892:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 893:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the command asking the accessed card to send its operating 
 894:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         condition register (OCR)
 895:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 896:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 897:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 898:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
 899:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 900:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 901:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 902:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 903:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 904:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 905:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 906:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 907:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 908:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 909:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 910:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 911:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp3(SDMMCx);
 912:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 913:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 914:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 915:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 916:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 917:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Bus Width command and check the response.
 918:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 919:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 920:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 921:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
 922:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 923:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 924:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 925:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 926:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 927:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 928:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 929:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 930:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 931:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 932:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 933:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 934:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 935:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 936:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 937:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 938:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 939:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 940:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Send SCR command and check the response.
 941:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 942:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 943:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
ARM GAS  /tmp/ccyKUF0t.s 			page 18


 944:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
 945:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 946:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 947:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 948:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 949:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Send CMD51 SD_APP_SEND_SCR */
 950:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = 0;
 951:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 952:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 953:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 954:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 955:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 956:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 957:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 958:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 959:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 960:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 961:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 962:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 963:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 964:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Send CID command and check the response.
 965:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 966:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 967:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 968:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
 969:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 970:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 971:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 972:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 973:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Send CMD2 ALL_SEND_CID */
 974:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = 0;
 975:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 976:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 977:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 978:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 979:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 980:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 981:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
 982:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp2(SDMMCx);
 983:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 984:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
 985:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 986:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 987:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
 988:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Send CSD command and check the response.
 989:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
 990:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
 991:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
 992:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
 993:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 994:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 995:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
 996:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 997:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Send CMD9 SEND_CSD */
 998:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 999:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
1000:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
ARM GAS  /tmp/ccyKUF0t.s 			page 19


1001:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
1002:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
1003:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
1004:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1005:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
1006:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp2(SDMMCx);
1007:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1008:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
1009:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
1010:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1011:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1012:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Send CSD command and check the response.
1013:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
1014:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
1015:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1016:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
1017:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
1018:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
1019:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
1020:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1021:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Send CMD3 SD_CMD_SET_REL_ADDR */
1022:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = 0;
1023:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
1024:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
1025:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
1026:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
1027:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
1028:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1029:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
1030:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
1031:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1032:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
1033:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
1034:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1035:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1036:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Status command and check the response.
1037:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
1038:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
1039:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1040:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
1041:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
1042:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
1043:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
1044:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1045:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = (uint32_t)Argument;
1046:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
1047:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
1048:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
1049:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
1050:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
1051:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1052:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
1053:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
1054:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1055:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
1056:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
1057:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
ARM GAS  /tmp/ccyKUF0t.s 			page 20


1058:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1059:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Send the Status register command and check the response.
1060:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDMMCx Pointer to SDMMC register base 
1061:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
1062:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1063:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
1064:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
1065:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
1066:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
1067:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1068:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = 0;
1069:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
1070:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
1071:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
1072:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
1073:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
1074:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1075:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
1076:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
1077:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1078:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
1079:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
1080:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1081:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1082:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Sends host capacity support information and activates the card's 
1083:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         initialization process. Send SDMMC_CMD_SEND_OP_COND command
1084:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDIOx Pointer to SDIO register base 
1085:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @parame Argument Argument used for the command
1086:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
1087:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1088:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
1089:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
1090:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
1091:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
1092:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1093:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = Argument;
1094:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
1095:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
1096:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
1097:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
1098:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
1099:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1100:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
1101:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp3(SDMMCx);
1102:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1103:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
1104:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
1105:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1106:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1107:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Checks switchable function and switch card function. SDMMC_CMD_HS_SWITCH comand
1108:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SDIOx Pointer to SDIO register base 
1109:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @parame Argument Argument used for the command
1110:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval HAL status
1111:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1112:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
1113:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
1114:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
ARM GAS  /tmp/ccyKUF0t.s 			page 21


1115:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t errorstate = SDMMC_ERROR_NONE;
1116:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1117:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Argument         = Argument;
1118:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
1119:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
1120:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
1121:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
1122:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
1123:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1124:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check for error conditions */
1125:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
1126:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1127:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return errorstate;
1128:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
1129:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1130:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1131:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @}
1132:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1133:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1134:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /* Private function ----------------------------------------------------------*/  
1135:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /** @addtogroup SD_Private_Functions
1136:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @{
1137:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1138:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1139:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1140:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Checks for error conditions for CMD0.
1141:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  hsd SD handle
1142:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval SD Card error state
1143:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1144:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
1145:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
  28              		.loc 1 1145 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
1146:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* 8 is the number of required instructions cycles for the below loop statement.
1147:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   The SDMMC_CMDTIMEOUT is expressed in ms */
1148:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
  34              		.loc 1 1148 0
  35 0000 0C4B     		ldr	r3, .L5
  36 0002 1B68     		ldr	r3, [r3]
  37 0004 0C4A     		ldr	r2, .L5+4
  38 0006 A2FB0323 		umull	r2, r3, r2, r3
  39 000a 5A0A     		lsrs	r2, r3, #9
  40 000c 41F28833 		movw	r3, #5000
  41 0010 03FB02F3 		mul	r3, r3, r2
  42              	.LVL1:
  43              	.L3:
1149:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1150:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   do
1151:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1152:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     if (count-- == 0)
  44              		.loc 1 1152 0
  45 0014 5A1E     		subs	r2, r3, #1
  46              	.LVL2:
ARM GAS  /tmp/ccyKUF0t.s 			page 22


  47 0016 4BB1     		cbz	r3, .L4
1153:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
1154:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       return SDMMC_ERROR_TIMEOUT;
1155:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
1156:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1157:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
  48              		.loc 1 1157 0
  49 0018 416B     		ldr	r1, [r0, #52]
1152:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
  50              		.loc 1 1152 0
  51 001a 1346     		mov	r3, r2
  52              		.loc 1 1157 0
  53 001c 11F0800F 		tst	r1, #128
  54 0020 F8D0     		beq	.L3
1158:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1159:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Clear all the static flags */
1160:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  55              		.loc 1 1160 0
  56 0022 40F2FF53 		movw	r3, #1535
  57 0026 8363     		str	r3, [r0, #56]
1161:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1162:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return SDMMC_ERROR_NONE;
  58              		.loc 1 1162 0
  59 0028 0020     		movs	r0, #0
  60              	.LVL3:
  61 002a 7047     		bx	lr
  62              	.LVL4:
  63              	.L4:
1154:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
  64              		.loc 1 1154 0
  65 002c 4FF00040 		mov	r0, #-2147483648
  66              	.LVL5:
1163:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
  67              		.loc 1 1163 0
  68 0030 7047     		bx	lr
  69              	.L6:
  70 0032 00BF     		.align	2
  71              	.L5:
  72 0034 00000000 		.word	SystemCoreClock
  73 0038 D34D6210 		.word	274877907
  74              		.cfi_endproc
  75              	.LFE174:
  77              		.section	.text.SDMMC_GetCmdResp2,"ax",%progbits
  78              		.align	2
  79              		.thumb
  80              		.thumb_func
  82              	SDMMC_GetCmdResp2:
  83              	.LFB176:
1164:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1165:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1166:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Checks for error conditions for R1 response.
1167:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  hsd SD handle
1168:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SD_CMD The sent command index  
1169:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval SD Card error state
1170:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1171:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
1172:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
ARM GAS  /tmp/ccyKUF0t.s 			page 23


1173:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t response_r1;
1174:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1175:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* 8 is the number of required instructions cycles for the below loop statement.
1176:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   The Timeout is expressed in ms */
1177:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
1178:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1179:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   do
1180:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1181:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     if (count-- == 0)
1182:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
1183:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       return SDMMC_ERROR_TIMEOUT;
1184:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
1185:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1186:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
1187:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1188:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
1189:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1190:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
1191:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1192:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CMD_RSP_TIMEOUT;
1193:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1194:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
1195:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1196:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
1197:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1198:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CMD_CRC_FAIL;
1199:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1200:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1201:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check response received is of desired command */
1202:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
1203:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1204:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CMD_CRC_FAIL;
1205:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1206:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1207:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Clear all the static flags */
1208:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
1209:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1210:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* We have received response, retrieve it for analysis  */
1211:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
1212:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1213:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
1214:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1215:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_NONE;
1216:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1217:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
1218:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1219:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
1220:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1221:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
1222:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1223:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_ADDR_MISALIGNED;
1224:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1225:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
1226:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1227:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_BLOCK_LEN_ERR;
1228:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1229:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
ARM GAS  /tmp/ccyKUF0t.s 			page 24


1230:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1231:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_ERASE_SEQ_ERR;
1232:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1233:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
1234:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1235:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_BAD_ERASE_PARAM;
1236:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1237:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
1238:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1239:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_WRITE_PROT_VIOLATION;
1240:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1241:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
1242:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1243:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
1244:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1245:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
1246:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1247:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_COM_CRC_FAILED;
1248:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1249:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
1250:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1251:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_ILLEGAL_CMD;
1252:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1253:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
1254:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1255:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CARD_ECC_FAILED;
1256:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1257:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
1258:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1259:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CC_ERR;
1260:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1261:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
1262:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1263:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_STREAM_READ_UNDERRUN;
1264:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1265:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
1266:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1267:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
1268:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1269:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
1270:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1271:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CID_CSD_OVERWRITE;
1272:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1273:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
1274:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1275:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_WP_ERASE_SKIP;
1276:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1277:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
1278:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1279:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CARD_ECC_DISABLED;
1280:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1281:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
1282:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1283:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_ERASE_RESET;
1284:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1285:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
1286:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
ARM GAS  /tmp/ccyKUF0t.s 			page 25


1287:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_AKE_SEQ_ERR;
1288:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1289:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else
1290:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1291:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
1292:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1293:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
1294:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1295:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1296:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Checks for error conditions for R2 (CID or CSD) response.
1297:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  hsd SD handle
1298:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval SD Card error state
1299:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1300:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
1301:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
  84              		.loc 1 1301 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.LVL6:
  90 0000 10B4     		push	{r4}
  91              	.LCFI0:
  92              		.cfi_def_cfa_offset 4
  93              		.cfi_offset 4, -4
  94 0002 0446     		mov	r4, r0
1302:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* 8 is the number of required instructions cycles for the below loop statement.
1303:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   The SDMMC_CMDTIMEOUT is expressed in ms */
1304:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
  95              		.loc 1 1304 0
  96 0004 134B     		ldr	r3, .L14
  97 0006 1B68     		ldr	r3, [r3]
  98 0008 134A     		ldr	r2, .L14+4
  99 000a A2FB0323 		umull	r2, r3, r2, r3
 100 000e 5A0A     		lsrs	r2, r3, #9
 101 0010 41F28833 		movw	r3, #5000
 102 0014 03FB02F3 		mul	r3, r3, r2
 103              	.LVL7:
 104              	.L9:
1305:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1306:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   do
1307:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1308:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     if (count-- == 0)
 105              		.loc 1 1308 0
 106 0018 5A1E     		subs	r2, r3, #1
 107              	.LVL8:
 108 001a B3B1     		cbz	r3, .L12
1309:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
1310:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       return SDMMC_ERROR_TIMEOUT;
1311:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
1312:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1313:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 109              		.loc 1 1313 0
 110 001c 616B     		ldr	r1, [r4, #52]
1308:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
 111              		.loc 1 1308 0
 112 001e 1346     		mov	r3, r2
ARM GAS  /tmp/ccyKUF0t.s 			page 26


 113              		.loc 1 1313 0
 114 0020 11F0450F 		tst	r1, #69
 115 0024 F8D0     		beq	.L9
1314:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1315:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 116              		.loc 1 1315 0
 117 0026 636B     		ldr	r3, [r4, #52]
 118 0028 13F0040F 		tst	r3, #4
 119 002c 02D0     		beq	.L10
1316:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1317:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 120              		.loc 1 1317 0
 121 002e 0420     		movs	r0, #4
 122              	.LVL9:
 123 0030 A063     		str	r0, [r4, #56]
1318:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1319:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 124              		.loc 1 1319 0
 125 0032 0CE0     		b	.L8
 126              	.LVL10:
 127              	.L10:
1320:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1321:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 128              		.loc 1 1321 0
 129 0034 606B     		ldr	r0, [r4, #52]
 130              	.LVL11:
 131 0036 10F00100 		ands	r0, r0, #1
 132 003a 02D0     		beq	.L11
1322:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1323:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 133              		.loc 1 1323 0
 134 003c 0120     		movs	r0, #1
 135 003e A063     		str	r0, [r4, #56]
1324:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1325:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CMD_CRC_FAIL;
 136              		.loc 1 1325 0
 137 0040 05E0     		b	.L8
 138              	.L11:
1326:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1327:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else
1328:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1329:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     /* No error flag set */
1330:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     /* Clear all the static flags */
1331:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 139              		.loc 1 1331 0
 140 0042 40F2FF53 		movw	r3, #1535
 141 0046 A363     		str	r3, [r4, #56]
1332:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1333:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1334:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return SDMMC_ERROR_NONE;
 142              		.loc 1 1334 0
 143 0048 01E0     		b	.L8
 144              	.LVL12:
 145              	.L12:
1310:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
 146              		.loc 1 1310 0
 147 004a 4FF00040 		mov	r0, #-2147483648
ARM GAS  /tmp/ccyKUF0t.s 			page 27


 148              	.LVL13:
 149              	.L8:
1335:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 150              		.loc 1 1335 0
 151 004e 5DF8044B 		ldr	r4, [sp], #4
 152              	.LCFI1:
 153              		.cfi_restore 4
 154              		.cfi_def_cfa_offset 0
 155              	.LVL14:
 156 0052 7047     		bx	lr
 157              	.L15:
 158              		.align	2
 159              	.L14:
 160 0054 00000000 		.word	SystemCoreClock
 161 0058 D34D6210 		.word	274877907
 162              		.cfi_endproc
 163              	.LFE176:
 165              		.section	.text.SDMMC_GetCmdResp3,"ax",%progbits
 166              		.align	2
 167              		.thumb
 168              		.thumb_func
 170              	SDMMC_GetCmdResp3:
 171              	.LFB177:
1336:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1337:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1338:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Checks for error conditions for R3 (OCR) response.
1339:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  hsd SD handle
1340:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval SD Card error state
1341:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1342:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
1343:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 172              		.loc 1 1343 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              		@ link register save eliminated.
 177              	.LVL15:
 178 0000 10B4     		push	{r4}
 179              	.LCFI2:
 180              		.cfi_def_cfa_offset 4
 181              		.cfi_offset 4, -4
 182 0002 0446     		mov	r4, r0
1344:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* 8 is the number of required instructions cycles for the below loop statement.
1345:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   The SDMMC_CMDTIMEOUT is expressed in ms */
1346:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 183              		.loc 1 1346 0
 184 0004 104B     		ldr	r3, .L22
 185 0006 1B68     		ldr	r3, [r3]
 186 0008 104A     		ldr	r2, .L22+4
 187 000a A2FB0323 		umull	r2, r3, r2, r3
 188 000e 5A0A     		lsrs	r2, r3, #9
 189 0010 41F28833 		movw	r3, #5000
 190 0014 03FB02F3 		mul	r3, r3, r2
 191              	.LVL16:
 192              	.L18:
1347:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1348:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   do
ARM GAS  /tmp/ccyKUF0t.s 			page 28


1349:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1350:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     if (count-- == 0)
 193              		.loc 1 1350 0
 194 0018 5A1E     		subs	r2, r3, #1
 195              	.LVL17:
 196 001a 7BB1     		cbz	r3, .L20
1351:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
1352:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       return SDMMC_ERROR_TIMEOUT;
1353:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
1354:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1355:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 197              		.loc 1 1355 0
 198 001c 616B     		ldr	r1, [r4, #52]
1350:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
 199              		.loc 1 1350 0
 200 001e 1346     		mov	r3, r2
 201              		.loc 1 1355 0
 202 0020 11F0450F 		tst	r1, #69
 203 0024 F8D0     		beq	.L18
1356:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1357:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 204              		.loc 1 1357 0
 205 0026 606B     		ldr	r0, [r4, #52]
 206              	.LVL18:
 207 0028 10F00400 		ands	r0, r0, #4
 208 002c 02D0     		beq	.L19
1358:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1359:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 209              		.loc 1 1359 0
 210 002e 0420     		movs	r0, #4
 211 0030 A063     		str	r0, [r4, #56]
1360:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1361:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 212              		.loc 1 1361 0
 213 0032 05E0     		b	.L17
 214              	.L19:
1362:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1363:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else
1364:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****  
1365:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {  
1366:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     /* Clear all the static flags */
1367:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 215              		.loc 1 1367 0
 216 0034 40F2FF53 		movw	r3, #1535
 217 0038 A363     		str	r3, [r4, #56]
1368:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1369:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1370:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return SDMMC_ERROR_NONE;
 218              		.loc 1 1370 0
 219 003a 01E0     		b	.L17
 220              	.LVL19:
 221              	.L20:
1352:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
 222              		.loc 1 1352 0
 223 003c 4FF00040 		mov	r0, #-2147483648
 224              	.LVL20:
 225              	.L17:
ARM GAS  /tmp/ccyKUF0t.s 			page 29


1371:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 226              		.loc 1 1371 0
 227 0040 5DF8044B 		ldr	r4, [sp], #4
 228              	.LCFI3:
 229              		.cfi_restore 4
 230              		.cfi_def_cfa_offset 0
 231              	.LVL21:
 232 0044 7047     		bx	lr
 233              	.L23:
 234 0046 00BF     		.align	2
 235              	.L22:
 236 0048 00000000 		.word	SystemCoreClock
 237 004c D34D6210 		.word	274877907
 238              		.cfi_endproc
 239              	.LFE177:
 241              		.section	.text.SDMMC_GetCmdResp7,"ax",%progbits
 242              		.align	2
 243              		.thumb
 244              		.thumb_func
 246              	SDMMC_GetCmdResp7:
 247              	.LFB179:
1372:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1373:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1374:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Checks for error conditions for R6 (RCA) response.
1375:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  hsd SD handle
1376:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  SD_CMD The sent command index
1377:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  pRCA Pointer to the variable that will contain the SD card relative 
1378:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   *         address RCA   
1379:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval SD Card error state
1380:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1381:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
1382:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
1383:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t response_r1;
1384:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1385:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* 8 is the number of required instructions cycles for the below loop statement.
1386:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   The SDMMC_CMDTIMEOUT is expressed in ms */
1387:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
1388:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1389:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   do
1390:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1391:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     if (count-- == 0)
1392:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
1393:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       return SDMMC_ERROR_TIMEOUT;
1394:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
1395:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1396:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
1397:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1398:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
1399:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1400:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
1401:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1402:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CMD_RSP_TIMEOUT;
1403:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1404:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
1405:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1406:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
1407:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
ARM GAS  /tmp/ccyKUF0t.s 			page 30


1408:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CMD_CRC_FAIL;
1409:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1410:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1411:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check response received is of desired command */
1412:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
1413:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1414:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CMD_CRC_FAIL;
1415:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1416:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1417:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Clear all the static flags */
1418:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
1419:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1420:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* We have received response, retrieve it.  */
1421:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
1422:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1423:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILE
1424:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1425:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     *pRCA = (uint16_t) (response_r1 >> 16);
1426:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1427:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_NONE;
1428:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1429:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
1430:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1431:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_ILLEGAL_CMD;
1432:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1433:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
1434:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1435:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_COM_CRC_FAILED;
1436:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1437:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   else
1438:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1439:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
1440:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1441:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
1442:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1443:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** /**
1444:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @brief  Checks for error conditions for R7 response.
1445:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @param  hsd SD handle
1446:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   * @retval SD Card error state
1447:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   */
1448:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
1449:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** {
 248              		.loc 1 1449 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 253              	.LVL22:
1450:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* 8 is the number of required instructions cycles for the below loop statement.
1451:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   The SDMMC_CMDTIMEOUT is expressed in ms */
1452:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 254              		.loc 1 1452 0
 255 0000 124B     		ldr	r3, .L29
 256 0002 1B68     		ldr	r3, [r3]
 257 0004 124A     		ldr	r2, .L29+4
 258 0006 A2FB0323 		umull	r2, r3, r2, r3
 259 000a 5A0A     		lsrs	r2, r3, #9
ARM GAS  /tmp/ccyKUF0t.s 			page 31


 260 000c 41F28833 		movw	r3, #5000
 261 0010 03FB02F3 		mul	r3, r3, r2
 262              	.LVL23:
 263              	.L26:
1453:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1454:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   do
1455:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1456:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     if (count-- == 0)
 264              		.loc 1 1456 0
 265 0014 5A1E     		subs	r2, r3, #1
 266              	.LVL24:
 267 0016 A3B1     		cbz	r3, .L28
1457:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
1458:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****       return SDMMC_ERROR_TIMEOUT;
1459:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
1460:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1461:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 268              		.loc 1 1461 0
 269 0018 416B     		ldr	r1, [r0, #52]
1456:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
 270              		.loc 1 1456 0
 271 001a 1346     		mov	r3, r2
 272              		.loc 1 1461 0
 273 001c 11F0450F 		tst	r1, #69
 274 0020 F8D0     		beq	.L26
1462:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
1463:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 275              		.loc 1 1463 0
 276 0022 436B     		ldr	r3, [r0, #52]
 277 0024 13F00402 		ands	r2, r3, #4
 278              	.LVL25:
 279 0028 03D0     		beq	.L27
1464:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1465:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     /* Card is SD V2.0 compliant */
1466:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 280              		.loc 1 1466 0
 281 002a 4023     		movs	r3, #64
 282 002c 8363     		str	r3, [r0, #56]
1467:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
1468:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 283              		.loc 1 1468 0
 284 002e 0423     		movs	r3, #4
 285 0030 09E0     		b	.L25
 286              	.L27:
1469:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1470:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1471:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 287              		.loc 1 1471 0
 288 0032 436B     		ldr	r3, [r0, #52]
 289 0034 13F04003 		ands	r3, r3, #64
 290 0038 05D0     		beq	.L25
1472:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
1473:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     /* Card is SD V2.0 compliant */
1474:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 291              		.loc 1 1474 0
 292 003a 4023     		movs	r3, #64
 293 003c 8363     		str	r3, [r0, #56]
ARM GAS  /tmp/ccyKUF0t.s 			page 32


1475:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
1476:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1477:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return SDMMC_ERROR_NONE;
 294              		.loc 1 1477 0
 295 003e 1346     		mov	r3, r2
 296 0040 01E0     		b	.L25
 297              	.LVL26:
 298              	.L28:
1458:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
 299              		.loc 1 1458 0
 300 0042 4FF00043 		mov	r3, #-2147483648
 301              	.LVL27:
 302              	.L25:
1478:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
1479:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 303              		.loc 1 1479 0
 304 0046 1846     		mov	r0, r3
 305              	.LVL28:
 306 0048 7047     		bx	lr
 307              	.L30:
 308 004a 00BF     		.align	2
 309              	.L29:
 310 004c 00000000 		.word	SystemCoreClock
 311 0050 D34D6210 		.word	274877907
 312              		.cfi_endproc
 313              	.LFE179:
 315              		.section	.text.SDMMC_Init,"ax",%progbits
 316              		.align	2
 317              		.global	SDMMC_Init
 318              		.thumb
 319              		.thumb_func
 321              	SDMMC_Init:
 322              	.LFB136:
 228:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t tmpreg = 0;
 323              		.loc 1 228 0
 324              		.cfi_startproc
 325              		@ args = 28, pretend = 16, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328              	.LVL29:
 329 0000 84B0     		sub	sp, sp, #16
 330              	.LCFI4:
 331              		.cfi_def_cfa_offset 16
 332 0002 10B4     		push	{r4}
 333              	.LCFI5:
 334              		.cfi_def_cfa_offset 20
 335              		.cfi_offset 4, -20
 336 0004 02AC     		add	r4, sp, #8
 337 0006 84E80E00 		stmia	r4, {r1, r2, r3}
 338              	.LVL30:
 242:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.ClockPowerSave      |\
 339              		.loc 1 242 0
 340 000a 039B     		ldr	r3, [sp, #12]
 241:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.ClockBypass         |\
 341              		.loc 1 241 0
 342 000c 0A46     		mov	r2, r1
 343 000e 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/ccyKUF0t.s 			page 33


 243:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.BusWide             |\
 344              		.loc 1 243 0
 345 0010 049B     		ldr	r3, [sp, #16]
 242:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.ClockPowerSave      |\
 346              		.loc 1 242 0
 347 0012 1A43     		orrs	r2, r2, r3
 244:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.HardwareFlowControl |\
 348              		.loc 1 244 0
 349 0014 059B     		ldr	r3, [sp, #20]
 243:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.BusWide             |\
 350              		.loc 1 243 0
 351 0016 1A43     		orrs	r2, r2, r3
 245:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.ClockDiv
 352              		.loc 1 245 0
 353 0018 069B     		ldr	r3, [sp, #24]
 244:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.HardwareFlowControl |\
 354              		.loc 1 244 0
 355 001a 1A43     		orrs	r2, r2, r3
 246:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              ); 
 356              		.loc 1 246 0
 357 001c 079B     		ldr	r3, [sp, #28]
 245:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****              Init.ClockDiv
 358              		.loc 1 245 0
 359 001e 1A43     		orrs	r2, r2, r3
 360              	.LVL31:
 250:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 361              		.loc 1 250 0
 362 0020 4168     		ldr	r1, [r0, #4]
 363 0022 044B     		ldr	r3, .L33
 364 0024 0B40     		ands	r3, r3, r1
 365 0026 1343     		orrs	r3, r3, r2
 366 0028 4360     		str	r3, [r0, #4]
 253:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 367              		.loc 1 253 0
 368 002a 0020     		movs	r0, #0
 369              	.LVL32:
 370 002c 5DF8044B 		ldr	r4, [sp], #4
 371              	.LCFI6:
 372              		.cfi_restore 4
 373              		.cfi_def_cfa_offset 16
 374 0030 04B0     		add	sp, sp, #16
 375              	.LCFI7:
 376              		.cfi_def_cfa_offset 0
 377 0032 7047     		bx	lr
 378              	.L34:
 379              		.align	2
 380              	.L33:
 381 0034 0081FFFF 		.word	-32512
 382              		.cfi_endproc
 383              	.LFE136:
 385              		.section	.text.SDMMC_ReadFIFO,"ax",%progbits
 386              		.align	2
 387              		.global	SDMMC_ReadFIFO
 388              		.thumb
 389              		.thumb_func
 391              	SDMMC_ReadFIFO:
 392              	.LFB137:
ARM GAS  /tmp/ccyKUF0t.s 			page 34


 281:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Read data from Rx FIFO */ 
 393              		.loc 1 281 0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 398              	.LVL33:
 283:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 399              		.loc 1 283 0
 400 0000 D0F88000 		ldr	r0, [r0, #128]
 401              	.LVL34:
 284:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 402              		.loc 1 284 0
 403 0004 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE137:
 407 0006 00BF     		.section	.text.SDMMC_WriteFIFO,"ax",%progbits
 408              		.align	2
 409              		.global	SDMMC_WriteFIFO
 410              		.thumb
 411              		.thumb_func
 413              	SDMMC_WriteFIFO:
 414              	.LFB138:
 293:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Write data to FIFO */ 
 415              		.loc 1 293 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 420              	.LVL35:
 295:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 421              		.loc 1 295 0
 422 0000 0B68     		ldr	r3, [r1]
 423 0002 C0F88030 		str	r3, [r0, #128]
 298:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 424              		.loc 1 298 0
 425 0006 0020     		movs	r0, #0
 426              	.LVL36:
 427 0008 7047     		bx	lr
 428              		.cfi_endproc
 429              	.LFE138:
 431 000a 00BF     		.section	.text.SDMMC_PowerState_ON,"ax",%progbits
 432              		.align	2
 433              		.global	SDMMC_PowerState_ON
 434              		.thumb
 435              		.thumb_func
 437              	SDMMC_PowerState_ON:
 438              	.LFB139:
 325:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set power state to ON */ 
 439              		.loc 1 325 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 444              	.LVL37:
 327:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 445              		.loc 1 327 0
ARM GAS  /tmp/ccyKUF0t.s 			page 35


 446 0000 0323     		movs	r3, #3
 447 0002 0360     		str	r3, [r0]
 330:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 448              		.loc 1 330 0
 449 0004 0020     		movs	r0, #0
 450              	.LVL38:
 451 0006 7047     		bx	lr
 452              		.cfi_endproc
 453              	.LFE139:
 455              		.section	.text.SDMMC_PowerState_OFF,"ax",%progbits
 456              		.align	2
 457              		.global	SDMMC_PowerState_OFF
 458              		.thumb
 459              		.thumb_func
 461              	SDMMC_PowerState_OFF:
 462              	.LFB140:
 338:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Set power state to OFF */
 463              		.loc 1 338 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468              	.LVL39:
 340:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 469              		.loc 1 340 0
 470 0000 0023     		movs	r3, #0
 471 0002 0360     		str	r3, [r0]
 343:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 472              		.loc 1 343 0
 473 0004 1846     		mov	r0, r3
 474              	.LVL40:
 475 0006 7047     		bx	lr
 476              		.cfi_endproc
 477              	.LFE140:
 479              		.section	.text.SDMMC_GetPowerState,"ax",%progbits
 480              		.align	2
 481              		.global	SDMMC_GetPowerState
 482              		.thumb
 483              		.thumb_func
 485              	SDMMC_GetPowerState:
 486              	.LFB141:
 355:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 487              		.loc 1 355 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492              	.LVL41:
 356:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 493              		.loc 1 356 0
 494 0000 0068     		ldr	r0, [r0]
 495              	.LVL42:
 357:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 496              		.loc 1 357 0
 497 0002 00F00300 		and	r0, r0, #3
 498 0006 7047     		bx	lr
 499              		.cfi_endproc
ARM GAS  /tmp/ccyKUF0t.s 			page 36


 500              	.LFE141:
 502              		.section	.text.SDMMC_SendCommand,"ax",%progbits
 503              		.align	2
 504              		.global	SDMMC_SendCommand
 505              		.thumb
 506              		.thumb_func
 508              	SDMMC_SendCommand:
 509              	.LFB142:
 368:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t tmpreg = 0;
 510              		.loc 1 368 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514              		@ link register save eliminated.
 515              	.LVL43:
 378:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 516              		.loc 1 378 0
 517 0000 0B68     		ldr	r3, [r1]
 518 0002 8360     		str	r3, [r0, #8]
 381:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Command->Response         |\
 519              		.loc 1 381 0
 520 0004 4A68     		ldr	r2, [r1, #4]
 382:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Command->WaitForInterrupt |\
 521              		.loc 1 382 0
 522 0006 8B68     		ldr	r3, [r1, #8]
 381:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Command->Response         |\
 523              		.loc 1 381 0
 524 0008 1A43     		orrs	r2, r2, r3
 383:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Command->CPSM);
 525              		.loc 1 383 0
 526 000a CB68     		ldr	r3, [r1, #12]
 382:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Command->WaitForInterrupt |\
 527              		.loc 1 382 0
 528 000c 1343     		orrs	r3, r3, r2
 384:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 529              		.loc 1 384 0
 530 000e 0A69     		ldr	r2, [r1, #16]
 383:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Command->CPSM);
 531              		.loc 1 383 0
 532 0010 1A43     		orrs	r2, r2, r3
 533              	.LVL44:
 387:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 534              		.loc 1 387 0
 535 0012 C168     		ldr	r1, [r0, #12]
 536              	.LVL45:
 537 0014 024B     		ldr	r3, .L41
 538 0016 0B40     		ands	r3, r3, r1
 539 0018 1343     		orrs	r3, r3, r2
 540 001a C360     		str	r3, [r0, #12]
 390:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 541              		.loc 1 390 0
 542 001c 0020     		movs	r0, #0
 543              	.LVL46:
 544 001e 7047     		bx	lr
 545              	.L42:
 546              		.align	2
 547              	.L41:
ARM GAS  /tmp/ccyKUF0t.s 			page 37


 548 0020 00F0FFFF 		.word	-4096
 549              		.cfi_endproc
 550              	.LFE142:
 552              		.section	.text.SDMMC_GetCommandResponse,"ax",%progbits
 553              		.align	2
 554              		.global	SDMMC_GetCommandResponse
 555              		.thumb
 556              		.thumb_func
 558              	SDMMC_GetCommandResponse:
 559              	.LFB143:
 398:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return (uint8_t)(SDMMCx->RESPCMD);
 560              		.loc 1 398 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 565              	.LVL47:
 399:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 566              		.loc 1 399 0
 567 0000 0069     		ldr	r0, [r0, #16]
 568              	.LVL48:
 400:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 569              		.loc 1 400 0
 570 0002 C0B2     		uxtb	r0, r0
 571 0004 7047     		bx	lr
 572              		.cfi_endproc
 573              	.LFE143:
 575 0006 00BF     		.section	.text.SDMMC_GetResponse,"ax",%progbits
 576              		.align	2
 577              		.global	SDMMC_GetResponse
 578              		.thumb
 579              		.thumb_func
 581              	SDMMC_GetResponse:
 582              	.LFB144:
 415:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   __IO uint32_t tmp = 0;
 583              		.loc 1 415 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 8
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587              		@ link register save eliminated.
 588              	.LVL49:
 589 0000 82B0     		sub	sp, sp, #8
 590              	.LCFI8:
 591              		.cfi_def_cfa_offset 8
 416:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 592              		.loc 1 416 0
 593 0002 0023     		movs	r3, #0
 594 0004 0193     		str	r3, [sp, #4]
 422:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 595              		.loc 1 422 0
 596 0006 1430     		adds	r0, r0, #20
 597              	.LVL50:
 598 0008 0144     		add	r1, r1, r0
 599              	.LVL51:
 600 000a 0191     		str	r1, [sp, #4]
 424:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }  
 601              		.loc 1 424 0
ARM GAS  /tmp/ccyKUF0t.s 			page 38


 602 000c 019B     		ldr	r3, [sp, #4]
 603 000e 1868     		ldr	r0, [r3]
 604              	.LVL52:
 425:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 605              		.loc 1 425 0
 606 0010 02B0     		add	sp, sp, #8
 607              	.LCFI9:
 608              		.cfi_def_cfa_offset 0
 609              		@ sp needed
 610 0012 7047     		bx	lr
 611              		.cfi_endproc
 612              	.LFE144:
 614              		.section	.text.SDMMC_GetCmdResp1,"ax",%progbits
 615              		.align	2
 616              		.thumb
 617              		.thumb_func
 619              	SDMMC_GetCmdResp1:
 620              	.LFB175:
1172:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t response_r1;
 621              		.loc 1 1172 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              	.LVL53:
 626 0000 38B5     		push	{r3, r4, r5, lr}
 627              	.LCFI10:
 628              		.cfi_def_cfa_offset 16
 629              		.cfi_offset 3, -16
 630              		.cfi_offset 4, -12
 631              		.cfi_offset 5, -8
 632              		.cfi_offset 14, -4
1177:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 633              		.loc 1 1177 0
 634 0002 514B     		ldr	r3, .L72
 635 0004 1B68     		ldr	r3, [r3]
 636 0006 514C     		ldr	r4, .L72+4
 637 0008 A4FB0343 		umull	r4, r3, r4, r3
 638 000c 5B0A     		lsrs	r3, r3, #9
 639 000e 02FB03F2 		mul	r2, r2, r3
 640              	.LVL54:
 641              	.L48:
1181:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
 642              		.loc 1 1181 0
 643 0012 531E     		subs	r3, r2, #1
 644              	.LVL55:
 645 0014 002A     		cmp	r2, #0
 646 0016 5ED0     		beq	.L51
1186:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 647              		.loc 1 1186 0
 648 0018 446B     		ldr	r4, [r0, #52]
1181:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
 649              		.loc 1 1181 0
 650 001a 1A46     		mov	r2, r3
1186:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 651              		.loc 1 1186 0
 652 001c 14F0450F 		tst	r4, #69
 653 0020 F7D0     		beq	.L48
ARM GAS  /tmp/ccyKUF0t.s 			page 39


1188:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 654              		.loc 1 1188 0
 655 0022 436B     		ldr	r3, [r0, #52]
 656              	.LVL56:
 657 0024 13F0040F 		tst	r3, #4
 658 0028 03D0     		beq	.L49
1190:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
 659              		.loc 1 1190 0
 660 002a 0423     		movs	r3, #4
 661 002c 8363     		str	r3, [r0, #56]
1192:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 662              		.loc 1 1192 0
 663 002e 1846     		mov	r0, r3
 664              	.LVL57:
 665 0030 38BD     		pop	{r3, r4, r5, pc}
 666              	.LVL58:
 667              	.L49:
1194:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 668              		.loc 1 1194 0
 669 0032 436B     		ldr	r3, [r0, #52]
 670 0034 13F0010F 		tst	r3, #1
 671 0038 03D0     		beq	.L50
1196:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
 672              		.loc 1 1196 0
 673 003a 0123     		movs	r3, #1
 674 003c 8363     		str	r3, [r0, #56]
1198:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 675              		.loc 1 1198 0
 676 003e 1846     		mov	r0, r3
 677              	.LVL59:
 678 0040 38BD     		pop	{r3, r4, r5, pc}
 679              	.LVL60:
 680              	.L50:
 681 0042 0D46     		mov	r5, r1
 682 0044 0446     		mov	r4, r0
1202:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 683              		.loc 1 1202 0
 684 0046 FFF7FEFF 		bl	SDMMC_GetCommandResponse
 685              	.LVL61:
 686 004a A842     		cmp	r0, r5
 687 004c 46D1     		bne	.L52
1208:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 688              		.loc 1 1208 0
 689 004e 40F2FF53 		movw	r3, #1535
 690 0052 A363     		str	r3, [r4, #56]
1211:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 691              		.loc 1 1211 0
 692 0054 0021     		movs	r1, #0
 693 0056 2046     		mov	r0, r4
 694 0058 FFF7FEFF 		bl	SDMMC_GetResponse
 695              	.LVL62:
 696 005c 0346     		mov	r3, r0
 697              	.LVL63:
1213:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 698              		.loc 1 1213 0
 699 005e 3C48     		ldr	r0, .L72+8
 700              	.LVL64:
ARM GAS  /tmp/ccyKUF0t.s 			page 40


 701 0060 1840     		ands	r0, r0, r3
 702 0062 0028     		cmp	r0, #0
 703 0064 6FD0     		beq	.L47
1217:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 704              		.loc 1 1217 0
 705 0066 002B     		cmp	r3, #0
 706 0068 3ADB     		blt	.L53
1221:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 707              		.loc 1 1221 0
 708 006a 13F0804F 		tst	r3, #1073741824
 709 006e 3AD1     		bne	.L54
1225:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 710              		.loc 1 1225 0
 711 0070 13F0005F 		tst	r3, #536870912
 712 0074 39D1     		bne	.L55
1229:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 713              		.loc 1 1229 0
 714 0076 13F0805F 		tst	r3, #268435456
 715 007a 38D1     		bne	.L56
1233:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 716              		.loc 1 1233 0
 717 007c 13F0006F 		tst	r3, #134217728
 718 0080 38D1     		bne	.L57
1237:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 719              		.loc 1 1237 0
 720 0082 13F0806F 		tst	r3, #67108864
 721 0086 38D1     		bne	.L58
1241:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 722              		.loc 1 1241 0
 723 0088 13F0807F 		tst	r3, #16777216
 724 008c 38D1     		bne	.L59
1245:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 725              		.loc 1 1245 0
 726 008e 13F4000F 		tst	r3, #8388608
 727 0092 38D1     		bne	.L60
1249:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 728              		.loc 1 1249 0
 729 0094 13F4800F 		tst	r3, #4194304
 730 0098 38D1     		bne	.L61
1253:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 731              		.loc 1 1253 0
 732 009a 13F4001F 		tst	r3, #2097152
 733 009e 38D1     		bne	.L62
1257:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 734              		.loc 1 1257 0
 735 00a0 13F4801F 		tst	r3, #1048576
 736 00a4 38D1     		bne	.L63
1261:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 737              		.loc 1 1261 0
 738 00a6 13F4802F 		tst	r3, #262144
 739 00aa 38D1     		bne	.L64
1265:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 740              		.loc 1 1265 0
 741 00ac 13F4003F 		tst	r3, #131072
 742 00b0 38D1     		bne	.L65
1269:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 743              		.loc 1 1269 0
ARM GAS  /tmp/ccyKUF0t.s 			page 41


 744 00b2 13F4803F 		tst	r3, #65536
 745 00b6 38D1     		bne	.L66
1273:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 746              		.loc 1 1273 0
 747 00b8 13F4004F 		tst	r3, #32768
 748 00bc 38D1     		bne	.L67
1277:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 749              		.loc 1 1277 0
 750 00be 13F4804F 		tst	r3, #16384
 751 00c2 38D1     		bne	.L68
1281:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 752              		.loc 1 1281 0
 753 00c4 13F4005F 		tst	r3, #8192
 754 00c8 38D1     		bne	.L69
1285:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 755              		.loc 1 1285 0
 756 00ca 13F0080F 		tst	r3, #8
 757 00ce 38D0     		beq	.L70
1287:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 758              		.loc 1 1287 0
 759 00d0 4FF40000 		mov	r0, #8388608
 760 00d4 38BD     		pop	{r3, r4, r5, pc}
 761              	.LVL65:
 762              	.L51:
1183:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
 763              		.loc 1 1183 0
 764 00d6 4FF00040 		mov	r0, #-2147483648
 765              	.LVL66:
 766 00da 38BD     		pop	{r3, r4, r5, pc}
 767              	.LVL67:
 768              	.L52:
1204:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 769              		.loc 1 1204 0
 770 00dc 0120     		movs	r0, #1
 771 00de 38BD     		pop	{r3, r4, r5, pc}
 772              	.LVL68:
 773              	.L53:
1219:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 774              		.loc 1 1219 0
 775 00e0 4FF00070 		mov	r0, #33554432
 776 00e4 38BD     		pop	{r3, r4, r5, pc}
 777              	.LVL69:
 778              	.L54:
1223:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 779              		.loc 1 1223 0
 780 00e6 4020     		movs	r0, #64
 781 00e8 38BD     		pop	{r3, r4, r5, pc}
 782              	.LVL70:
 783              	.L55:
1227:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 784              		.loc 1 1227 0
 785 00ea 8020     		movs	r0, #128
 786 00ec 38BD     		pop	{r3, r4, r5, pc}
 787              	.LVL71:
 788              	.L56:
1231:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 789              		.loc 1 1231 0
ARM GAS  /tmp/ccyKUF0t.s 			page 42


 790 00ee 4FF48070 		mov	r0, #256
 791 00f2 38BD     		pop	{r3, r4, r5, pc}
 792              	.LVL72:
 793              	.L57:
1235:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 794              		.loc 1 1235 0
 795 00f4 4FF40070 		mov	r0, #512
 796 00f8 38BD     		pop	{r3, r4, r5, pc}
 797              	.LVL73:
 798              	.L58:
1239:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 799              		.loc 1 1239 0
 800 00fa 4FF48060 		mov	r0, #1024
 801 00fe 38BD     		pop	{r3, r4, r5, pc}
 802              	.LVL74:
 803              	.L59:
1243:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 804              		.loc 1 1243 0
 805 0100 4FF40060 		mov	r0, #2048
 806 0104 38BD     		pop	{r3, r4, r5, pc}
 807              	.LVL75:
 808              	.L60:
1247:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 809              		.loc 1 1247 0
 810 0106 4FF48050 		mov	r0, #4096
 811 010a 38BD     		pop	{r3, r4, r5, pc}
 812              	.LVL76:
 813              	.L61:
1251:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 814              		.loc 1 1251 0
 815 010c 4FF40050 		mov	r0, #8192
 816 0110 38BD     		pop	{r3, r4, r5, pc}
 817              	.LVL77:
 818              	.L62:
1255:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 819              		.loc 1 1255 0
 820 0112 4FF48040 		mov	r0, #16384
 821 0116 38BD     		pop	{r3, r4, r5, pc}
 822              	.LVL78:
 823              	.L63:
1259:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 824              		.loc 1 1259 0
 825 0118 4FF40040 		mov	r0, #32768
 826 011c 38BD     		pop	{r3, r4, r5, pc}
 827              	.LVL79:
 828              	.L64:
1263:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 829              		.loc 1 1263 0
 830 011e 4FF40030 		mov	r0, #131072
 831 0122 38BD     		pop	{r3, r4, r5, pc}
 832              	.LVL80:
 833              	.L65:
1267:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 834              		.loc 1 1267 0
 835 0124 4FF48020 		mov	r0, #262144
 836 0128 38BD     		pop	{r3, r4, r5, pc}
 837              	.LVL81:
ARM GAS  /tmp/ccyKUF0t.s 			page 43


 838              	.L66:
1271:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 839              		.loc 1 1271 0
 840 012a 4FF40020 		mov	r0, #524288
 841 012e 38BD     		pop	{r3, r4, r5, pc}
 842              	.LVL82:
 843              	.L67:
1275:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 844              		.loc 1 1275 0
 845 0130 4FF48010 		mov	r0, #1048576
 846 0134 38BD     		pop	{r3, r4, r5, pc}
 847              	.LVL83:
 848              	.L68:
1279:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 849              		.loc 1 1279 0
 850 0136 4FF40010 		mov	r0, #2097152
 851 013a 38BD     		pop	{r3, r4, r5, pc}
 852              	.LVL84:
 853              	.L69:
1283:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 854              		.loc 1 1283 0
 855 013c 4FF48000 		mov	r0, #4194304
 856 0140 38BD     		pop	{r3, r4, r5, pc}
 857              	.LVL85:
 858              	.L70:
1291:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 859              		.loc 1 1291 0
 860 0142 4FF48030 		mov	r0, #65536
 861              	.L47:
1293:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 862              		.loc 1 1293 0
 863 0146 38BD     		pop	{r3, r4, r5, pc}
 864              	.LVL86:
 865              	.L73:
 866              		.align	2
 867              	.L72:
 868 0148 00000000 		.word	SystemCoreClock
 869 014c D34D6210 		.word	274877907
 870 0150 08E0FFFD 		.word	-33562616
 871              		.cfi_endproc
 872              	.LFE175:
 874              		.section	.text.SDMMC_GetCmdResp6,"ax",%progbits
 875              		.align	2
 876              		.thumb
 877              		.thumb_func
 879              	SDMMC_GetCmdResp6:
 880              	.LFB178:
1382:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t response_r1;
 881              		.loc 1 1382 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 885              	.LVL87:
 886 0000 70B5     		push	{r4, r5, r6, lr}
 887              	.LCFI11:
 888              		.cfi_def_cfa_offset 16
 889              		.cfi_offset 4, -16
ARM GAS  /tmp/ccyKUF0t.s 			page 44


 890              		.cfi_offset 5, -12
 891              		.cfi_offset 6, -8
 892              		.cfi_offset 14, -4
1387:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 893              		.loc 1 1387 0
 894 0002 254B     		ldr	r3, .L85
 895 0004 1B68     		ldr	r3, [r3]
 896 0006 254C     		ldr	r4, .L85+4
 897 0008 A4FB0343 		umull	r4, r3, r4, r3
 898 000c 5C0A     		lsrs	r4, r3, #9
 899 000e 41F28833 		movw	r3, #5000
 900 0012 03FB04F3 		mul	r3, r3, r4
 901              	.LVL88:
 902              	.L76:
1391:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
 903              		.loc 1 1391 0
 904 0016 5C1E     		subs	r4, r3, #1
 905              	.LVL89:
 906 0018 93B3     		cbz	r3, .L80
1396:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 907              		.loc 1 1396 0
 908 001a 456B     		ldr	r5, [r0, #52]
1391:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     {
 909              		.loc 1 1391 0
 910 001c 2346     		mov	r3, r4
1396:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 911              		.loc 1 1396 0
 912 001e 15F0450F 		tst	r5, #69
 913 0022 F8D0     		beq	.L76
1398:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 914              		.loc 1 1398 0
 915 0024 436B     		ldr	r3, [r0, #52]
 916 0026 13F0040F 		tst	r3, #4
 917 002a 03D0     		beq	.L77
1400:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
 918              		.loc 1 1400 0
 919 002c 0423     		movs	r3, #4
 920 002e 8363     		str	r3, [r0, #56]
1402:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 921              		.loc 1 1402 0
 922 0030 1846     		mov	r0, r3
 923              	.LVL90:
 924 0032 70BD     		pop	{r4, r5, r6, pc}
 925              	.LVL91:
 926              	.L77:
1404:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 927              		.loc 1 1404 0
 928 0034 436B     		ldr	r3, [r0, #52]
 929 0036 13F0010F 		tst	r3, #1
 930 003a 03D0     		beq	.L78
1406:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
 931              		.loc 1 1406 0
 932 003c 0123     		movs	r3, #1
 933 003e 8363     		str	r3, [r0, #56]
1408:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 934              		.loc 1 1408 0
 935 0040 1846     		mov	r0, r3
ARM GAS  /tmp/ccyKUF0t.s 			page 45


 936              	.LVL92:
 937 0042 70BD     		pop	{r4, r5, r6, pc}
 938              	.LVL93:
 939              	.L78:
 940 0044 1646     		mov	r6, r2
 941 0046 0D46     		mov	r5, r1
 942 0048 0446     		mov	r4, r0
 943              	.LVL94:
1412:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 944              		.loc 1 1412 0
 945 004a FFF7FEFF 		bl	SDMMC_GetCommandResponse
 946              	.LVL95:
 947 004e A842     		cmp	r0, r5
 948 0050 19D1     		bne	.L81
1418:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 949              		.loc 1 1418 0
 950 0052 40F2FF53 		movw	r3, #1535
 951 0056 A363     		str	r3, [r4, #56]
1421:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 952              		.loc 1 1421 0
 953 0058 0021     		movs	r1, #0
 954 005a 2046     		mov	r0, r4
 955 005c FFF7FEFF 		bl	SDMMC_GetResponse
 956              	.LVL96:
 957 0060 0346     		mov	r3, r0
 958              	.LVL97:
1423:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 959              		.loc 1 1423 0
 960 0062 10F46040 		ands	r0, r0, #57344
 961              	.LVL98:
 962 0066 02D1     		bne	.L79
1425:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     
 963              		.loc 1 1425 0
 964 0068 1B0C     		lsrs	r3, r3, #16
 965              	.LVL99:
 966 006a 3380     		strh	r3, [r6]	@ movhi
1427:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 967              		.loc 1 1427 0
 968 006c 70BD     		pop	{r4, r5, r6, pc}
 969              	.LVL100:
 970              	.L79:
1429:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 971              		.loc 1 1429 0
 972 006e 13F4804F 		tst	r3, #16384
 973 0072 0AD1     		bne	.L82
1433:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   {
 974              		.loc 1 1433 0
 975 0074 13F4004F 		tst	r3, #32768
 976 0078 0AD0     		beq	.L83
1435:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 977              		.loc 1 1435 0
 978 007a 4FF48050 		mov	r0, #4096
 979 007e 70BD     		pop	{r4, r5, r6, pc}
 980              	.LVL101:
 981              	.L80:
1393:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****     }
 982              		.loc 1 1393 0
ARM GAS  /tmp/ccyKUF0t.s 			page 46


 983 0080 4FF00040 		mov	r0, #-2147483648
 984              	.LVL102:
 985 0084 70BD     		pop	{r4, r5, r6, pc}
 986              	.LVL103:
 987              	.L81:
1414:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 988              		.loc 1 1414 0
 989 0086 0120     		movs	r0, #1
 990 0088 70BD     		pop	{r4, r5, r6, pc}
 991              	.LVL104:
 992              	.L82:
1431:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 993              		.loc 1 1431 0
 994 008a 4FF40050 		mov	r0, #8192
 995 008e 70BD     		pop	{r4, r5, r6, pc}
 996              	.LVL105:
 997              	.L83:
1439:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   }
 998              		.loc 1 1439 0
 999 0090 4FF48030 		mov	r0, #65536
1441:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1000              		.loc 1 1441 0
 1001 0094 70BD     		pop	{r4, r5, r6, pc}
 1002              	.LVL106:
 1003              	.L86:
 1004 0096 00BF     		.align	2
 1005              	.L85:
 1006 0098 00000000 		.word	SystemCoreClock
 1007 009c D34D6210 		.word	274877907
 1008              		.cfi_endproc
 1009              	.LFE178:
 1011              		.section	.text.SDMMC_ConfigData,"ax",%progbits
 1012              		.align	2
 1013              		.global	SDMMC_ConfigData
 1014              		.thumb
 1015              		.thumb_func
 1017              	SDMMC_ConfigData:
 1018              	.LFB145:
 436:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   uint32_t tmpreg = 0;
 1019              		.loc 1 436 0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 0
 1022              		@ frame_needed = 0, uses_anonymous_args = 0
 1023              		@ link register save eliminated.
 1024              	.LVL107:
 447:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1025              		.loc 1 447 0
 1026 0000 0B68     		ldr	r3, [r1]
 1027 0002 4362     		str	r3, [r0, #36]
 450:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1028              		.loc 1 450 0
 1029 0004 4B68     		ldr	r3, [r1, #4]
 1030 0006 8362     		str	r3, [r0, #40]
 453:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Data->TransferDir   |\
 1031              		.loc 1 453 0
 1032 0008 8A68     		ldr	r2, [r1, #8]
 454:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Data->TransferMode  |\
ARM GAS  /tmp/ccyKUF0t.s 			page 47


 1033              		.loc 1 454 0
 1034 000a CB68     		ldr	r3, [r1, #12]
 453:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Data->TransferDir   |\
 1035              		.loc 1 453 0
 1036 000c 1A43     		orrs	r2, r2, r3
 455:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Data->DPSM);
 1037              		.loc 1 455 0
 1038 000e 0B69     		ldr	r3, [r1, #16]
 454:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Data->TransferMode  |\
 1039              		.loc 1 454 0
 1040 0010 1343     		orrs	r3, r3, r2
 456:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1041              		.loc 1 456 0
 1042 0012 4A69     		ldr	r2, [r1, #20]
 455:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****                        Data->DPSM);
 1043              		.loc 1 455 0
 1044 0014 1A43     		orrs	r2, r2, r3
 1045              	.LVL108:
 459:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1046              		.loc 1 459 0
 1047 0016 C36A     		ldr	r3, [r0, #44]
 1048 0018 23F0F703 		bic	r3, r3, #247
 1049 001c 1343     		orrs	r3, r3, r2
 1050 001e C362     		str	r3, [r0, #44]
 463:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1051              		.loc 1 463 0
 1052 0020 0020     		movs	r0, #0
 1053              	.LVL109:
 1054 0022 7047     		bx	lr
 1055              		.cfi_endproc
 1056              	.LFE145:
 1058              		.section	.text.SDMMC_GetDataCounter,"ax",%progbits
 1059              		.align	2
 1060              		.global	SDMMC_GetDataCounter
 1061              		.thumb
 1062              		.thumb_func
 1064              	SDMMC_GetDataCounter:
 1065              	.LFB146:
 471:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return (SDMMCx->DCOUNT);
 1066              		.loc 1 471 0
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 0
 1069              		@ frame_needed = 0, uses_anonymous_args = 0
 1070              		@ link register save eliminated.
 1071              	.LVL110:
 472:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 1072              		.loc 1 472 0
 1073 0000 006B     		ldr	r0, [r0, #48]
 1074              	.LVL111:
 473:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1075              		.loc 1 473 0
 1076 0002 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE146:
 1080              		.section	.text.SDMMC_GetFIFOCount,"ax",%progbits
 1081              		.align	2
 1082              		.global	SDMMC_GetFIFOCount
ARM GAS  /tmp/ccyKUF0t.s 			page 48


 1083              		.thumb
 1084              		.thumb_func
 1086              	SDMMC_GetFIFOCount:
 1087              	.LFB147:
 481:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   return (SDMMCx->FIFO);
 1088              		.loc 1 481 0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092              		@ link register save eliminated.
 1093              	.LVL112:
 482:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** }
 1094              		.loc 1 482 0
 1095 0000 D0F88000 		ldr	r0, [r0, #128]
 1096              	.LVL113:
 483:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1097              		.loc 1 483 0
 1098 0004 7047     		bx	lr
 1099              		.cfi_endproc
 1100              	.LFE147:
 1102 0006 00BF     		.section	.text.SDMMC_SetSDMMCReadWaitMode,"ax",%progbits
 1103              		.align	2
 1104              		.global	SDMMC_SetSDMMCReadWaitMode
 1105              		.thumb
 1106              		.thumb_func
 1108              	SDMMC_SetSDMMCReadWaitMode:
 1109              	.LFB148:
 495:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   /* Check the parameters */
 1110              		.loc 1 495 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              		@ link register save eliminated.
 1115              	.LVL114:
 500:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1116              		.loc 1 500 0
 1117 0000 C36A     		ldr	r3, [r0, #44]
 1118 0002 23F48063 		bic	r3, r3, #1024
 1119 0006 1943     		orrs	r1, r1, r3
 1120              	.LVL115:
 1121 0008 C162     		str	r1, [r0, #44]
 503:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1122              		.loc 1 503 0
 1123 000a 0020     		movs	r0, #0
 1124              	.LVL116:
 1125 000c 7047     		bx	lr
 1126              		.cfi_endproc
 1127              	.LFE148:
 1129 000e 00BF     		.section	.text.SDMMC_CmdBlockLength,"ax",%progbits
 1130              		.align	2
 1131              		.global	SDMMC_CmdBlockLength
 1132              		.thumb
 1133              		.thumb_func
 1135              	SDMMC_CmdBlockLength:
 1136              	.LFB149:
 530:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1137              		.loc 1 530 0
ARM GAS  /tmp/ccyKUF0t.s 			page 49


 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 24
 1140              		@ frame_needed = 0, uses_anonymous_args = 0
 1141              	.LVL117:
 1142 0000 30B5     		push	{r4, r5, lr}
 1143              	.LCFI12:
 1144              		.cfi_def_cfa_offset 12
 1145              		.cfi_offset 4, -12
 1146              		.cfi_offset 5, -8
 1147              		.cfi_offset 14, -4
 1148 0002 87B0     		sub	sp, sp, #28
 1149              	.LCFI13:
 1150              		.cfi_def_cfa_offset 40
 1151 0004 0546     		mov	r5, r0
 1152              	.LVL118:
 535:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 1153              		.loc 1 535 0
 1154 0006 0191     		str	r1, [sp, #4]
 536:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1155              		.loc 1 536 0
 1156 0008 1024     		movs	r4, #16
 1157 000a 0294     		str	r4, [sp, #8]
 537:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1158              		.loc 1 537 0
 1159 000c 4023     		movs	r3, #64
 1160 000e 0393     		str	r3, [sp, #12]
 538:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1161              		.loc 1 538 0
 1162 0010 0023     		movs	r3, #0
 1163 0012 0493     		str	r3, [sp, #16]
 539:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1164              		.loc 1 539 0
 1165 0014 4FF48063 		mov	r3, #1024
 1166 0018 0593     		str	r3, [sp, #20]
 540:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1167              		.loc 1 540 0
 1168 001a 01A9     		add	r1, sp, #4
 1169              	.LVL119:
 1170 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1171              	.LVL120:
 543:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1172              		.loc 1 543 0
 1173 0020 41F28832 		movw	r2, #5000
 1174 0024 2146     		mov	r1, r4
 1175 0026 2846     		mov	r0, r5
 1176 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1177              	.LVL121:
 546:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1178              		.loc 1 546 0
 1179 002c 07B0     		add	sp, sp, #28
 1180              	.LCFI14:
 1181              		.cfi_def_cfa_offset 12
 1182              		@ sp needed
 1183 002e 30BD     		pop	{r4, r5, pc}
 1184              		.cfi_endproc
 1185              	.LFE149:
 1187              		.section	.text.SDMMC_CmdReadSingleBlock,"ax",%progbits
ARM GAS  /tmp/ccyKUF0t.s 			page 50


 1188              		.align	2
 1189              		.global	SDMMC_CmdReadSingleBlock
 1190              		.thumb
 1191              		.thumb_func
 1193              	SDMMC_CmdReadSingleBlock:
 1194              	.LFB150:
 554:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1195              		.loc 1 554 0
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 24
 1198              		@ frame_needed = 0, uses_anonymous_args = 0
 1199              	.LVL122:
 1200 0000 30B5     		push	{r4, r5, lr}
 1201              	.LCFI15:
 1202              		.cfi_def_cfa_offset 12
 1203              		.cfi_offset 4, -12
 1204              		.cfi_offset 5, -8
 1205              		.cfi_offset 14, -4
 1206 0002 87B0     		sub	sp, sp, #28
 1207              	.LCFI16:
 1208              		.cfi_def_cfa_offset 40
 1209 0004 0546     		mov	r5, r0
 1210              	.LVL123:
 559:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 1211              		.loc 1 559 0
 1212 0006 0191     		str	r1, [sp, #4]
 560:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1213              		.loc 1 560 0
 1214 0008 1124     		movs	r4, #17
 1215 000a 0294     		str	r4, [sp, #8]
 561:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1216              		.loc 1 561 0
 1217 000c 4023     		movs	r3, #64
 1218 000e 0393     		str	r3, [sp, #12]
 562:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1219              		.loc 1 562 0
 1220 0010 0023     		movs	r3, #0
 1221 0012 0493     		str	r3, [sp, #16]
 563:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1222              		.loc 1 563 0
 1223 0014 4FF48063 		mov	r3, #1024
 1224 0018 0593     		str	r3, [sp, #20]
 564:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1225              		.loc 1 564 0
 1226 001a 01A9     		add	r1, sp, #4
 1227              	.LVL124:
 1228 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1229              	.LVL125:
 567:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1230              		.loc 1 567 0
 1231 0020 41F28832 		movw	r2, #5000
 1232 0024 2146     		mov	r1, r4
 1233 0026 2846     		mov	r0, r5
 1234 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1235              	.LVL126:
 570:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1236              		.loc 1 570 0
ARM GAS  /tmp/ccyKUF0t.s 			page 51


 1237 002c 07B0     		add	sp, sp, #28
 1238              	.LCFI17:
 1239              		.cfi_def_cfa_offset 12
 1240              		@ sp needed
 1241 002e 30BD     		pop	{r4, r5, pc}
 1242              		.cfi_endproc
 1243              	.LFE150:
 1245              		.section	.text.SDMMC_CmdReadMultiBlock,"ax",%progbits
 1246              		.align	2
 1247              		.global	SDMMC_CmdReadMultiBlock
 1248              		.thumb
 1249              		.thumb_func
 1251              	SDMMC_CmdReadMultiBlock:
 1252              	.LFB151:
 578:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1253              		.loc 1 578 0
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 24
 1256              		@ frame_needed = 0, uses_anonymous_args = 0
 1257              	.LVL127:
 1258 0000 30B5     		push	{r4, r5, lr}
 1259              	.LCFI18:
 1260              		.cfi_def_cfa_offset 12
 1261              		.cfi_offset 4, -12
 1262              		.cfi_offset 5, -8
 1263              		.cfi_offset 14, -4
 1264 0002 87B0     		sub	sp, sp, #28
 1265              	.LCFI19:
 1266              		.cfi_def_cfa_offset 40
 1267 0004 0546     		mov	r5, r0
 1268              	.LVL128:
 583:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 1269              		.loc 1 583 0
 1270 0006 0191     		str	r1, [sp, #4]
 584:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1271              		.loc 1 584 0
 1272 0008 1224     		movs	r4, #18
 1273 000a 0294     		str	r4, [sp, #8]
 585:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1274              		.loc 1 585 0
 1275 000c 4023     		movs	r3, #64
 1276 000e 0393     		str	r3, [sp, #12]
 586:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1277              		.loc 1 586 0
 1278 0010 0023     		movs	r3, #0
 1279 0012 0493     		str	r3, [sp, #16]
 587:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1280              		.loc 1 587 0
 1281 0014 4FF48063 		mov	r3, #1024
 1282 0018 0593     		str	r3, [sp, #20]
 588:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1283              		.loc 1 588 0
 1284 001a 01A9     		add	r1, sp, #4
 1285              	.LVL129:
 1286 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1287              	.LVL130:
 591:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
ARM GAS  /tmp/ccyKUF0t.s 			page 52


 1288              		.loc 1 591 0
 1289 0020 41F28832 		movw	r2, #5000
 1290 0024 2146     		mov	r1, r4
 1291 0026 2846     		mov	r0, r5
 1292 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1293              	.LVL131:
 594:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1294              		.loc 1 594 0
 1295 002c 07B0     		add	sp, sp, #28
 1296              	.LCFI20:
 1297              		.cfi_def_cfa_offset 12
 1298              		@ sp needed
 1299 002e 30BD     		pop	{r4, r5, pc}
 1300              		.cfi_endproc
 1301              	.LFE151:
 1303              		.section	.text.SDMMC_CmdWriteSingleBlock,"ax",%progbits
 1304              		.align	2
 1305              		.global	SDMMC_CmdWriteSingleBlock
 1306              		.thumb
 1307              		.thumb_func
 1309              	SDMMC_CmdWriteSingleBlock:
 1310              	.LFB152:
 602:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1311              		.loc 1 602 0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 24
 1314              		@ frame_needed = 0, uses_anonymous_args = 0
 1315              	.LVL132:
 1316 0000 30B5     		push	{r4, r5, lr}
 1317              	.LCFI21:
 1318              		.cfi_def_cfa_offset 12
 1319              		.cfi_offset 4, -12
 1320              		.cfi_offset 5, -8
 1321              		.cfi_offset 14, -4
 1322 0002 87B0     		sub	sp, sp, #28
 1323              	.LCFI22:
 1324              		.cfi_def_cfa_offset 40
 1325 0004 0546     		mov	r5, r0
 1326              	.LVL133:
 607:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 1327              		.loc 1 607 0
 1328 0006 0191     		str	r1, [sp, #4]
 608:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1329              		.loc 1 608 0
 1330 0008 1824     		movs	r4, #24
 1331 000a 0294     		str	r4, [sp, #8]
 609:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1332              		.loc 1 609 0
 1333 000c 4023     		movs	r3, #64
 1334 000e 0393     		str	r3, [sp, #12]
 610:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1335              		.loc 1 610 0
 1336 0010 0023     		movs	r3, #0
 1337 0012 0493     		str	r3, [sp, #16]
 611:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1338              		.loc 1 611 0
 1339 0014 4FF48063 		mov	r3, #1024
ARM GAS  /tmp/ccyKUF0t.s 			page 53


 1340 0018 0593     		str	r3, [sp, #20]
 612:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1341              		.loc 1 612 0
 1342 001a 01A9     		add	r1, sp, #4
 1343              	.LVL134:
 1344 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1345              	.LVL135:
 615:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1346              		.loc 1 615 0
 1347 0020 41F28832 		movw	r2, #5000
 1348 0024 2146     		mov	r1, r4
 1349 0026 2846     		mov	r0, r5
 1350 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1351              	.LVL136:
 618:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1352              		.loc 1 618 0
 1353 002c 07B0     		add	sp, sp, #28
 1354              	.LCFI23:
 1355              		.cfi_def_cfa_offset 12
 1356              		@ sp needed
 1357 002e 30BD     		pop	{r4, r5, pc}
 1358              		.cfi_endproc
 1359              	.LFE152:
 1361              		.section	.text.SDMMC_CmdWriteMultiBlock,"ax",%progbits
 1362              		.align	2
 1363              		.global	SDMMC_CmdWriteMultiBlock
 1364              		.thumb
 1365              		.thumb_func
 1367              	SDMMC_CmdWriteMultiBlock:
 1368              	.LFB153:
 626:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1369              		.loc 1 626 0
 1370              		.cfi_startproc
 1371              		@ args = 0, pretend = 0, frame = 24
 1372              		@ frame_needed = 0, uses_anonymous_args = 0
 1373              	.LVL137:
 1374 0000 30B5     		push	{r4, r5, lr}
 1375              	.LCFI24:
 1376              		.cfi_def_cfa_offset 12
 1377              		.cfi_offset 4, -12
 1378              		.cfi_offset 5, -8
 1379              		.cfi_offset 14, -4
 1380 0002 87B0     		sub	sp, sp, #28
 1381              	.LCFI25:
 1382              		.cfi_def_cfa_offset 40
 1383 0004 0546     		mov	r5, r0
 1384              	.LVL138:
 631:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 1385              		.loc 1 631 0
 1386 0006 0191     		str	r1, [sp, #4]
 632:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1387              		.loc 1 632 0
 1388 0008 1924     		movs	r4, #25
 1389 000a 0294     		str	r4, [sp, #8]
 633:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1390              		.loc 1 633 0
 1391 000c 4023     		movs	r3, #64
ARM GAS  /tmp/ccyKUF0t.s 			page 54


 1392 000e 0393     		str	r3, [sp, #12]
 634:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1393              		.loc 1 634 0
 1394 0010 0023     		movs	r3, #0
 1395 0012 0493     		str	r3, [sp, #16]
 635:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1396              		.loc 1 635 0
 1397 0014 4FF48063 		mov	r3, #1024
 1398 0018 0593     		str	r3, [sp, #20]
 636:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1399              		.loc 1 636 0
 1400 001a 01A9     		add	r1, sp, #4
 1401              	.LVL139:
 1402 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1403              	.LVL140:
 639:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1404              		.loc 1 639 0
 1405 0020 41F28832 		movw	r2, #5000
 1406 0024 2146     		mov	r1, r4
 1407 0026 2846     		mov	r0, r5
 1408 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1409              	.LVL141:
 642:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1410              		.loc 1 642 0
 1411 002c 07B0     		add	sp, sp, #28
 1412              	.LCFI26:
 1413              		.cfi_def_cfa_offset 12
 1414              		@ sp needed
 1415 002e 30BD     		pop	{r4, r5, pc}
 1416              		.cfi_endproc
 1417              	.LFE153:
 1419              		.section	.text.SDMMC_CmdSDEraseStartAdd,"ax",%progbits
 1420              		.align	2
 1421              		.global	SDMMC_CmdSDEraseStartAdd
 1422              		.thumb
 1423              		.thumb_func
 1425              	SDMMC_CmdSDEraseStartAdd:
 1426              	.LFB154:
 650:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1427              		.loc 1 650 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 24
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              	.LVL142:
 1432 0000 30B5     		push	{r4, r5, lr}
 1433              	.LCFI27:
 1434              		.cfi_def_cfa_offset 12
 1435              		.cfi_offset 4, -12
 1436              		.cfi_offset 5, -8
 1437              		.cfi_offset 14, -4
 1438 0002 87B0     		sub	sp, sp, #28
 1439              	.LCFI28:
 1440              		.cfi_def_cfa_offset 40
 1441 0004 0546     		mov	r5, r0
 1442              	.LVL143:
 655:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_ERASE_GRP_START;
 1443              		.loc 1 655 0
ARM GAS  /tmp/ccyKUF0t.s 			page 55


 1444 0006 0191     		str	r1, [sp, #4]
 656:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1445              		.loc 1 656 0
 1446 0008 2024     		movs	r4, #32
 1447 000a 0294     		str	r4, [sp, #8]
 657:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1448              		.loc 1 657 0
 1449 000c 4023     		movs	r3, #64
 1450 000e 0393     		str	r3, [sp, #12]
 658:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1451              		.loc 1 658 0
 1452 0010 0023     		movs	r3, #0
 1453 0012 0493     		str	r3, [sp, #16]
 659:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1454              		.loc 1 659 0
 1455 0014 4FF48063 		mov	r3, #1024
 1456 0018 0593     		str	r3, [sp, #20]
 660:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1457              		.loc 1 660 0
 1458 001a 01A9     		add	r1, sp, #4
 1459              	.LVL144:
 1460 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1461              	.LVL145:
 663:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1462              		.loc 1 663 0
 1463 0020 41F28832 		movw	r2, #5000
 1464 0024 2146     		mov	r1, r4
 1465 0026 2846     		mov	r0, r5
 1466 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1467              	.LVL146:
 666:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1468              		.loc 1 666 0
 1469 002c 07B0     		add	sp, sp, #28
 1470              	.LCFI29:
 1471              		.cfi_def_cfa_offset 12
 1472              		@ sp needed
 1473 002e 30BD     		pop	{r4, r5, pc}
 1474              		.cfi_endproc
 1475              	.LFE154:
 1477              		.section	.text.SDMMC_CmdSDEraseEndAdd,"ax",%progbits
 1478              		.align	2
 1479              		.global	SDMMC_CmdSDEraseEndAdd
 1480              		.thumb
 1481              		.thumb_func
 1483              	SDMMC_CmdSDEraseEndAdd:
 1484              	.LFB155:
 674:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1485              		.loc 1 674 0
 1486              		.cfi_startproc
 1487              		@ args = 0, pretend = 0, frame = 24
 1488              		@ frame_needed = 0, uses_anonymous_args = 0
 1489              	.LVL147:
 1490 0000 30B5     		push	{r4, r5, lr}
 1491              	.LCFI30:
 1492              		.cfi_def_cfa_offset 12
 1493              		.cfi_offset 4, -12
 1494              		.cfi_offset 5, -8
ARM GAS  /tmp/ccyKUF0t.s 			page 56


 1495              		.cfi_offset 14, -4
 1496 0002 87B0     		sub	sp, sp, #28
 1497              	.LCFI31:
 1498              		.cfi_def_cfa_offset 40
 1499 0004 0546     		mov	r5, r0
 1500              	.LVL148:
 679:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_ERASE_GRP_END;
 1501              		.loc 1 679 0
 1502 0006 0191     		str	r1, [sp, #4]
 680:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1503              		.loc 1 680 0
 1504 0008 2124     		movs	r4, #33
 1505 000a 0294     		str	r4, [sp, #8]
 681:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1506              		.loc 1 681 0
 1507 000c 4023     		movs	r3, #64
 1508 000e 0393     		str	r3, [sp, #12]
 682:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1509              		.loc 1 682 0
 1510 0010 0023     		movs	r3, #0
 1511 0012 0493     		str	r3, [sp, #16]
 683:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1512              		.loc 1 683 0
 1513 0014 4FF48063 		mov	r3, #1024
 1514 0018 0593     		str	r3, [sp, #20]
 684:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1515              		.loc 1 684 0
 1516 001a 01A9     		add	r1, sp, #4
 1517              	.LVL149:
 1518 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1519              	.LVL150:
 687:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1520              		.loc 1 687 0
 1521 0020 41F28832 		movw	r2, #5000
 1522 0024 2146     		mov	r1, r4
 1523 0026 2846     		mov	r0, r5
 1524 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1525              	.LVL151:
 690:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1526              		.loc 1 690 0
 1527 002c 07B0     		add	sp, sp, #28
 1528              	.LCFI32:
 1529              		.cfi_def_cfa_offset 12
 1530              		@ sp needed
 1531 002e 30BD     		pop	{r4, r5, pc}
 1532              		.cfi_endproc
 1533              	.LFE155:
 1535              		.section	.text.SDMMC_CmdEraseStartAdd,"ax",%progbits
 1536              		.align	2
 1537              		.global	SDMMC_CmdEraseStartAdd
 1538              		.thumb
 1539              		.thumb_func
 1541              	SDMMC_CmdEraseStartAdd:
 1542              	.LFB156:
 698:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1543              		.loc 1 698 0
 1544              		.cfi_startproc
ARM GAS  /tmp/ccyKUF0t.s 			page 57


 1545              		@ args = 0, pretend = 0, frame = 24
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 1547              	.LVL152:
 1548 0000 30B5     		push	{r4, r5, lr}
 1549              	.LCFI33:
 1550              		.cfi_def_cfa_offset 12
 1551              		.cfi_offset 4, -12
 1552              		.cfi_offset 5, -8
 1553              		.cfi_offset 14, -4
 1554 0002 87B0     		sub	sp, sp, #28
 1555              	.LCFI34:
 1556              		.cfi_def_cfa_offset 40
 1557 0004 0546     		mov	r5, r0
 1558              	.LVL153:
 703:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE_GRP_START;
 1559              		.loc 1 703 0
 1560 0006 0191     		str	r1, [sp, #4]
 704:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1561              		.loc 1 704 0
 1562 0008 2324     		movs	r4, #35
 1563 000a 0294     		str	r4, [sp, #8]
 705:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1564              		.loc 1 705 0
 1565 000c 4023     		movs	r3, #64
 1566 000e 0393     		str	r3, [sp, #12]
 706:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1567              		.loc 1 706 0
 1568 0010 0023     		movs	r3, #0
 1569 0012 0493     		str	r3, [sp, #16]
 707:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1570              		.loc 1 707 0
 1571 0014 4FF48063 		mov	r3, #1024
 1572 0018 0593     		str	r3, [sp, #20]
 708:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1573              		.loc 1 708 0
 1574 001a 01A9     		add	r1, sp, #4
 1575              	.LVL154:
 1576 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1577              	.LVL155:
 711:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1578              		.loc 1 711 0
 1579 0020 41F28832 		movw	r2, #5000
 1580 0024 2146     		mov	r1, r4
 1581 0026 2846     		mov	r0, r5
 1582 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1583              	.LVL156:
 714:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1584              		.loc 1 714 0
 1585 002c 07B0     		add	sp, sp, #28
 1586              	.LCFI35:
 1587              		.cfi_def_cfa_offset 12
 1588              		@ sp needed
 1589 002e 30BD     		pop	{r4, r5, pc}
 1590              		.cfi_endproc
 1591              	.LFE156:
 1593              		.section	.text.SDMMC_CmdEraseEndAdd,"ax",%progbits
 1594              		.align	2
ARM GAS  /tmp/ccyKUF0t.s 			page 58


 1595              		.global	SDMMC_CmdEraseEndAdd
 1596              		.thumb
 1597              		.thumb_func
 1599              	SDMMC_CmdEraseEndAdd:
 1600              	.LFB157:
 722:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1601              		.loc 1 722 0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 24
 1604              		@ frame_needed = 0, uses_anonymous_args = 0
 1605              	.LVL157:
 1606 0000 30B5     		push	{r4, r5, lr}
 1607              	.LCFI36:
 1608              		.cfi_def_cfa_offset 12
 1609              		.cfi_offset 4, -12
 1610              		.cfi_offset 5, -8
 1611              		.cfi_offset 14, -4
 1612 0002 87B0     		sub	sp, sp, #28
 1613              	.LCFI37:
 1614              		.cfi_def_cfa_offset 40
 1615 0004 0546     		mov	r5, r0
 1616              	.LVL158:
 727:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE_GRP_END;
 1617              		.loc 1 727 0
 1618 0006 0191     		str	r1, [sp, #4]
 728:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1619              		.loc 1 728 0
 1620 0008 2424     		movs	r4, #36
 1621 000a 0294     		str	r4, [sp, #8]
 729:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1622              		.loc 1 729 0
 1623 000c 4023     		movs	r3, #64
 1624 000e 0393     		str	r3, [sp, #12]
 730:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1625              		.loc 1 730 0
 1626 0010 0023     		movs	r3, #0
 1627 0012 0493     		str	r3, [sp, #16]
 731:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1628              		.loc 1 731 0
 1629 0014 4FF48063 		mov	r3, #1024
 1630 0018 0593     		str	r3, [sp, #20]
 732:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1631              		.loc 1 732 0
 1632 001a 01A9     		add	r1, sp, #4
 1633              	.LVL159:
 1634 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1635              	.LVL160:
 735:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1636              		.loc 1 735 0
 1637 0020 41F28832 		movw	r2, #5000
 1638 0024 2146     		mov	r1, r4
 1639 0026 2846     		mov	r0, r5
 1640 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1641              	.LVL161:
 738:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1642              		.loc 1 738 0
 1643 002c 07B0     		add	sp, sp, #28
ARM GAS  /tmp/ccyKUF0t.s 			page 59


 1644              	.LCFI38:
 1645              		.cfi_def_cfa_offset 12
 1646              		@ sp needed
 1647 002e 30BD     		pop	{r4, r5, pc}
 1648              		.cfi_endproc
 1649              	.LFE157:
 1651              		.section	.text.SDMMC_CmdErase,"ax",%progbits
 1652              		.align	2
 1653              		.global	SDMMC_CmdErase
 1654              		.thumb
 1655              		.thumb_func
 1657              	SDMMC_CmdErase:
 1658              	.LFB158:
 746:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1659              		.loc 1 746 0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 24
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 1663              	.LVL162:
 1664 0000 30B5     		push	{r4, r5, lr}
 1665              	.LCFI39:
 1666              		.cfi_def_cfa_offset 12
 1667              		.cfi_offset 4, -12
 1668              		.cfi_offset 5, -8
 1669              		.cfi_offset 14, -4
 1670 0002 87B0     		sub	sp, sp, #28
 1671              	.LCFI40:
 1672              		.cfi_def_cfa_offset 40
 1673 0004 0546     		mov	r5, r0
 1674              	.LVL163:
 751:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 1675              		.loc 1 751 0
 1676 0006 0023     		movs	r3, #0
 1677 0008 0193     		str	r3, [sp, #4]
 752:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1678              		.loc 1 752 0
 1679 000a 2624     		movs	r4, #38
 1680 000c 0294     		str	r4, [sp, #8]
 753:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1681              		.loc 1 753 0
 1682 000e 4022     		movs	r2, #64
 1683 0010 0392     		str	r2, [sp, #12]
 754:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1684              		.loc 1 754 0
 1685 0012 0493     		str	r3, [sp, #16]
 755:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1686              		.loc 1 755 0
 1687 0014 4FF48063 		mov	r3, #1024
 1688 0018 0593     		str	r3, [sp, #20]
 756:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1689              		.loc 1 756 0
 1690 001a 01A9     		add	r1, sp, #4
 1691 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1692              	.LVL164:
 759:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1693              		.loc 1 759 0
 1694 0020 4FF21862 		movw	r2, #63000
ARM GAS  /tmp/ccyKUF0t.s 			page 60


 1695 0024 2146     		mov	r1, r4
 1696 0026 2846     		mov	r0, r5
 1697 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1698              	.LVL165:
 762:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1699              		.loc 1 762 0
 1700 002c 07B0     		add	sp, sp, #28
 1701              	.LCFI41:
 1702              		.cfi_def_cfa_offset 12
 1703              		@ sp needed
 1704 002e 30BD     		pop	{r4, r5, pc}
 1705              		.cfi_endproc
 1706              	.LFE158:
 1708              		.section	.text.SDMMC_CmdStopTransfer,"ax",%progbits
 1709              		.align	2
 1710              		.global	SDMMC_CmdStopTransfer
 1711              		.thumb
 1712              		.thumb_func
 1714              	SDMMC_CmdStopTransfer:
 1715              	.LFB159:
 770:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1716              		.loc 1 770 0
 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 24
 1719              		@ frame_needed = 0, uses_anonymous_args = 0
 1720              	.LVL166:
 1721 0000 30B5     		push	{r4, r5, lr}
 1722              	.LCFI42:
 1723              		.cfi_def_cfa_offset 12
 1724              		.cfi_offset 4, -12
 1725              		.cfi_offset 5, -8
 1726              		.cfi_offset 14, -4
 1727 0002 87B0     		sub	sp, sp, #28
 1728              	.LCFI43:
 1729              		.cfi_def_cfa_offset 40
 1730 0004 0546     		mov	r5, r0
 1731              	.LVL167:
 775:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 1732              		.loc 1 775 0
 1733 0006 0023     		movs	r3, #0
 1734 0008 0193     		str	r3, [sp, #4]
 776:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1735              		.loc 1 776 0
 1736 000a 0C24     		movs	r4, #12
 1737 000c 0294     		str	r4, [sp, #8]
 777:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1738              		.loc 1 777 0
 1739 000e 4022     		movs	r2, #64
 1740 0010 0392     		str	r2, [sp, #12]
 778:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1741              		.loc 1 778 0
 1742 0012 0493     		str	r3, [sp, #16]
 779:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1743              		.loc 1 779 0
 1744 0014 4FF48063 		mov	r3, #1024
 1745 0018 0593     		str	r3, [sp, #20]
 780:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
ARM GAS  /tmp/ccyKUF0t.s 			page 61


 1746              		.loc 1 780 0
 1747 001a 01A9     		add	r1, sp, #4
 1748 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1749              	.LVL168:
 783:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1750              		.loc 1 783 0
 1751 0020 034A     		ldr	r2, .L113
 1752 0022 2146     		mov	r1, r4
 1753 0024 2846     		mov	r0, r5
 1754 0026 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1755              	.LVL169:
 786:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1756              		.loc 1 786 0
 1757 002a 07B0     		add	sp, sp, #28
 1758              	.LCFI44:
 1759              		.cfi_def_cfa_offset 12
 1760              		@ sp needed
 1761 002c 30BD     		pop	{r4, r5, pc}
 1762              	.LVL170:
 1763              	.L114:
 1764 002e 00BF     		.align	2
 1765              	.L113:
 1766 0030 00E1F505 		.word	100000000
 1767              		.cfi_endproc
 1768              	.LFE159:
 1770              		.section	.text.SDMMC_CmdSelDesel,"ax",%progbits
 1771              		.align	2
 1772              		.global	SDMMC_CmdSelDesel
 1773              		.thumb
 1774              		.thumb_func
 1776              	SDMMC_CmdSelDesel:
 1777              	.LFB160:
 795:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1778              		.loc 1 795 0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 24
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782              	.LVL171:
 1783 0000 30B5     		push	{r4, r5, lr}
 1784              	.LCFI45:
 1785              		.cfi_def_cfa_offset 12
 1786              		.cfi_offset 4, -12
 1787              		.cfi_offset 5, -8
 1788              		.cfi_offset 14, -4
 1789 0002 87B0     		sub	sp, sp, #28
 1790              	.LCFI46:
 1791              		.cfi_def_cfa_offset 40
 1792 0004 0546     		mov	r5, r0
 1793              	.LVL172:
 800:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 1794              		.loc 1 800 0
 1795 0006 0192     		str	r2, [sp, #4]
 801:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1796              		.loc 1 801 0
 1797 0008 0724     		movs	r4, #7
 1798 000a 0294     		str	r4, [sp, #8]
 802:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
ARM GAS  /tmp/ccyKUF0t.s 			page 62


 1799              		.loc 1 802 0
 1800 000c 4023     		movs	r3, #64
 1801 000e 0393     		str	r3, [sp, #12]
 803:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1802              		.loc 1 803 0
 1803 0010 0023     		movs	r3, #0
 1804 0012 0493     		str	r3, [sp, #16]
 804:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1805              		.loc 1 804 0
 1806 0014 4FF48063 		mov	r3, #1024
 1807 0018 0593     		str	r3, [sp, #20]
 805:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1808              		.loc 1 805 0
 1809 001a 01A9     		add	r1, sp, #4
 1810 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1811              	.LVL173:
 808:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1812              		.loc 1 808 0
 1813 0020 41F28832 		movw	r2, #5000
 1814 0024 2146     		mov	r1, r4
 1815 0026 2846     		mov	r0, r5
 1816 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1817              	.LVL174:
 811:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1818              		.loc 1 811 0
 1819 002c 07B0     		add	sp, sp, #28
 1820              	.LCFI47:
 1821              		.cfi_def_cfa_offset 12
 1822              		@ sp needed
 1823 002e 30BD     		pop	{r4, r5, pc}
 1824              		.cfi_endproc
 1825              	.LFE160:
 1827              		.section	.text.SDMMC_CmdGoIdleState,"ax",%progbits
 1828              		.align	2
 1829              		.global	SDMMC_CmdGoIdleState
 1830              		.thumb
 1831              		.thumb_func
 1833              	SDMMC_CmdGoIdleState:
 1834              	.LFB161:
 819:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1835              		.loc 1 819 0
 1836              		.cfi_startproc
 1837              		@ args = 0, pretend = 0, frame = 24
 1838              		@ frame_needed = 0, uses_anonymous_args = 0
 1839              	.LVL175:
 1840 0000 10B5     		push	{r4, lr}
 1841              	.LCFI48:
 1842              		.cfi_def_cfa_offset 8
 1843              		.cfi_offset 4, -8
 1844              		.cfi_offset 14, -4
 1845 0002 86B0     		sub	sp, sp, #24
 1846              	.LCFI49:
 1847              		.cfi_def_cfa_offset 32
 1848 0004 0446     		mov	r4, r0
 1849              	.LVL176:
 823:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 1850              		.loc 1 823 0
ARM GAS  /tmp/ccyKUF0t.s 			page 63


 1851 0006 0023     		movs	r3, #0
 1852 0008 0193     		str	r3, [sp, #4]
 824:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 1853              		.loc 1 824 0
 1854 000a 0293     		str	r3, [sp, #8]
 825:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1855              		.loc 1 825 0
 1856 000c 0393     		str	r3, [sp, #12]
 826:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1857              		.loc 1 826 0
 1858 000e 0493     		str	r3, [sp, #16]
 827:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1859              		.loc 1 827 0
 1860 0010 4FF48063 		mov	r3, #1024
 1861 0014 0593     		str	r3, [sp, #20]
 828:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1862              		.loc 1 828 0
 1863 0016 01A9     		add	r1, sp, #4
 1864 0018 FFF7FEFF 		bl	SDMMC_SendCommand
 1865              	.LVL177:
 831:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1866              		.loc 1 831 0
 1867 001c 2046     		mov	r0, r4
 1868 001e FFF7FEFF 		bl	SDMMC_GetCmdError
 1869              	.LVL178:
 834:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1870              		.loc 1 834 0
 1871 0022 06B0     		add	sp, sp, #24
 1872              	.LCFI50:
 1873              		.cfi_def_cfa_offset 8
 1874              		@ sp needed
 1875 0024 10BD     		pop	{r4, pc}
 1876              		.cfi_endproc
 1877              	.LFE161:
 1879 0026 00BF     		.section	.text.SDMMC_CmdOperCond,"ax",%progbits
 1880              		.align	2
 1881              		.global	SDMMC_CmdOperCond
 1882              		.thumb
 1883              		.thumb_func
 1885              	SDMMC_CmdOperCond:
 1886              	.LFB162:
 842:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1887              		.loc 1 842 0
 1888              		.cfi_startproc
 1889              		@ args = 0, pretend = 0, frame = 24
 1890              		@ frame_needed = 0, uses_anonymous_args = 0
 1891              	.LVL179:
 1892 0000 10B5     		push	{r4, lr}
 1893              	.LCFI51:
 1894              		.cfi_def_cfa_offset 8
 1895              		.cfi_offset 4, -8
 1896              		.cfi_offset 14, -4
 1897 0002 86B0     		sub	sp, sp, #24
 1898              	.LCFI52:
 1899              		.cfi_def_cfa_offset 32
 1900 0004 0446     		mov	r4, r0
 1901              	.LVL180:
ARM GAS  /tmp/ccyKUF0t.s 			page 64


 851:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 1902              		.loc 1 851 0
 1903 0006 4FF4D573 		mov	r3, #426
 1904 000a 0193     		str	r3, [sp, #4]
 852:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1905              		.loc 1 852 0
 1906 000c 0823     		movs	r3, #8
 1907 000e 0293     		str	r3, [sp, #8]
 853:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1908              		.loc 1 853 0
 1909 0010 4023     		movs	r3, #64
 1910 0012 0393     		str	r3, [sp, #12]
 854:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1911              		.loc 1 854 0
 1912 0014 0023     		movs	r3, #0
 1913 0016 0493     		str	r3, [sp, #16]
 855:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1914              		.loc 1 855 0
 1915 0018 4FF48063 		mov	r3, #1024
 1916 001c 0593     		str	r3, [sp, #20]
 856:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1917              		.loc 1 856 0
 1918 001e 01A9     		add	r1, sp, #4
 1919 0020 FFF7FEFF 		bl	SDMMC_SendCommand
 1920              	.LVL181:
 859:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1921              		.loc 1 859 0
 1922 0024 2046     		mov	r0, r4
 1923 0026 FFF7FEFF 		bl	SDMMC_GetCmdResp7
 1924              	.LVL182:
 862:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1925              		.loc 1 862 0
 1926 002a 06B0     		add	sp, sp, #24
 1927              	.LCFI53:
 1928              		.cfi_def_cfa_offset 8
 1929              		@ sp needed
 1930 002c 10BD     		pop	{r4, pc}
 1931              		.cfi_endproc
 1932              	.LFE162:
 1934 002e 00BF     		.section	.text.SDMMC_CmdAppCommand,"ax",%progbits
 1935              		.align	2
 1936              		.global	SDMMC_CmdAppCommand
 1937              		.thumb
 1938              		.thumb_func
 1940              	SDMMC_CmdAppCommand:
 1941              	.LFB163:
 872:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 1942              		.loc 1 872 0
 1943              		.cfi_startproc
 1944              		@ args = 0, pretend = 0, frame = 24
 1945              		@ frame_needed = 0, uses_anonymous_args = 0
 1946              	.LVL183:
 1947 0000 30B5     		push	{r4, r5, lr}
 1948              	.LCFI54:
 1949              		.cfi_def_cfa_offset 12
 1950              		.cfi_offset 4, -12
 1951              		.cfi_offset 5, -8
ARM GAS  /tmp/ccyKUF0t.s 			page 65


 1952              		.cfi_offset 14, -4
 1953 0002 87B0     		sub	sp, sp, #28
 1954              	.LCFI55:
 1955              		.cfi_def_cfa_offset 40
 1956 0004 0546     		mov	r5, r0
 1957              	.LVL184:
 876:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 1958              		.loc 1 876 0
 1959 0006 0191     		str	r1, [sp, #4]
 877:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 1960              		.loc 1 877 0
 1961 0008 3724     		movs	r4, #55
 1962 000a 0294     		str	r4, [sp, #8]
 878:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 1963              		.loc 1 878 0
 1964 000c 4023     		movs	r3, #64
 1965 000e 0393     		str	r3, [sp, #12]
 879:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 1966              		.loc 1 879 0
 1967 0010 0023     		movs	r3, #0
 1968 0012 0493     		str	r3, [sp, #16]
 880:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 1969              		.loc 1 880 0
 1970 0014 4FF48063 		mov	r3, #1024
 1971 0018 0593     		str	r3, [sp, #20]
 881:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 1972              		.loc 1 881 0
 1973 001a 01A9     		add	r1, sp, #4
 1974              	.LVL185:
 1975 001c FFF7FEFF 		bl	SDMMC_SendCommand
 1976              	.LVL186:
 887:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1977              		.loc 1 887 0
 1978 0020 41F28832 		movw	r2, #5000
 1979 0024 2146     		mov	r1, r4
 1980 0026 2846     		mov	r0, r5
 1981 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 1982              	.LVL187:
 890:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 1983              		.loc 1 890 0
 1984 002c 07B0     		add	sp, sp, #28
 1985              	.LCFI56:
 1986              		.cfi_def_cfa_offset 12
 1987              		@ sp needed
 1988 002e 30BD     		pop	{r4, r5, pc}
 1989              		.cfi_endproc
 1990              	.LFE163:
 1992              		.section	.text.SDMMC_CmdAppOperCommand,"ax",%progbits
 1993              		.align	2
 1994              		.global	SDMMC_CmdAppOperCommand
 1995              		.thumb
 1996              		.thumb_func
 1998              	SDMMC_CmdAppOperCommand:
 1999              	.LFB164:
 899:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 2000              		.loc 1 899 0
 2001              		.cfi_startproc
ARM GAS  /tmp/ccyKUF0t.s 			page 66


 2002              		@ args = 0, pretend = 0, frame = 24
 2003              		@ frame_needed = 0, uses_anonymous_args = 0
 2004              	.LVL188:
 2005 0000 10B5     		push	{r4, lr}
 2006              	.LCFI57:
 2007              		.cfi_def_cfa_offset 8
 2008              		.cfi_offset 4, -8
 2009              		.cfi_offset 14, -4
 2010 0002 86B0     		sub	sp, sp, #24
 2011              	.LCFI58:
 2012              		.cfi_def_cfa_offset 32
 2013 0004 0446     		mov	r4, r0
 2014              	.LVL189:
 903:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 2015              		.loc 1 903 0
 2016 0006 0A4B     		ldr	r3, .L125
 2017 0008 0B43     		orrs	r3, r3, r1
 2018 000a 0193     		str	r3, [sp, #4]
 904:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 2019              		.loc 1 904 0
 2020 000c 2923     		movs	r3, #41
 2021 000e 0293     		str	r3, [sp, #8]
 905:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 2022              		.loc 1 905 0
 2023 0010 4023     		movs	r3, #64
 2024 0012 0393     		str	r3, [sp, #12]
 906:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 2025              		.loc 1 906 0
 2026 0014 0023     		movs	r3, #0
 2027 0016 0493     		str	r3, [sp, #16]
 907:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 2028              		.loc 1 907 0
 2029 0018 4FF48063 		mov	r3, #1024
 2030 001c 0593     		str	r3, [sp, #20]
 908:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 2031              		.loc 1 908 0
 2032 001e 01A9     		add	r1, sp, #4
 2033              	.LVL190:
 2034 0020 FFF7FEFF 		bl	SDMMC_SendCommand
 2035              	.LVL191:
 911:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2036              		.loc 1 911 0
 2037 0024 2046     		mov	r0, r4
 2038 0026 FFF7FEFF 		bl	SDMMC_GetCmdResp3
 2039              	.LVL192:
 914:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2040              		.loc 1 914 0
 2041 002a 06B0     		add	sp, sp, #24
 2042              	.LCFI59:
 2043              		.cfi_def_cfa_offset 8
 2044              		@ sp needed
 2045 002c 10BD     		pop	{r4, pc}
 2046              	.LVL193:
 2047              	.L126:
 2048 002e 00BF     		.align	2
 2049              	.L125:
 2050 0030 00001080 		.word	-2146435072
ARM GAS  /tmp/ccyKUF0t.s 			page 67


 2051              		.cfi_endproc
 2052              	.LFE164:
 2054              		.section	.text.SDMMC_CmdBusWidth,"ax",%progbits
 2055              		.align	2
 2056              		.global	SDMMC_CmdBusWidth
 2057              		.thumb
 2058              		.thumb_func
 2060              	SDMMC_CmdBusWidth:
 2061              	.LFB165:
 922:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 2062              		.loc 1 922 0
 2063              		.cfi_startproc
 2064              		@ args = 0, pretend = 0, frame = 24
 2065              		@ frame_needed = 0, uses_anonymous_args = 0
 2066              	.LVL194:
 2067 0000 30B5     		push	{r4, r5, lr}
 2068              	.LCFI60:
 2069              		.cfi_def_cfa_offset 12
 2070              		.cfi_offset 4, -12
 2071              		.cfi_offset 5, -8
 2072              		.cfi_offset 14, -4
 2073 0002 87B0     		sub	sp, sp, #28
 2074              	.LCFI61:
 2075              		.cfi_def_cfa_offset 40
 2076 0004 0546     		mov	r5, r0
 2077              	.LVL195:
 926:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 2078              		.loc 1 926 0
 2079 0006 0191     		str	r1, [sp, #4]
 927:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 2080              		.loc 1 927 0
 2081 0008 0624     		movs	r4, #6
 2082 000a 0294     		str	r4, [sp, #8]
 928:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 2083              		.loc 1 928 0
 2084 000c 4023     		movs	r3, #64
 2085 000e 0393     		str	r3, [sp, #12]
 929:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 2086              		.loc 1 929 0
 2087 0010 0023     		movs	r3, #0
 2088 0012 0493     		str	r3, [sp, #16]
 930:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 2089              		.loc 1 930 0
 2090 0014 4FF48063 		mov	r3, #1024
 2091 0018 0593     		str	r3, [sp, #20]
 931:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 2092              		.loc 1 931 0
 2093 001a 01A9     		add	r1, sp, #4
 2094              	.LVL196:
 2095 001c FFF7FEFF 		bl	SDMMC_SendCommand
 2096              	.LVL197:
 934:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2097              		.loc 1 934 0
 2098 0020 41F28832 		movw	r2, #5000
 2099 0024 2146     		mov	r1, r4
 2100 0026 2846     		mov	r0, r5
 2101 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
ARM GAS  /tmp/ccyKUF0t.s 			page 68


 2102              	.LVL198:
 937:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2103              		.loc 1 937 0
 2104 002c 07B0     		add	sp, sp, #28
 2105              	.LCFI62:
 2106              		.cfi_def_cfa_offset 12
 2107              		@ sp needed
 2108 002e 30BD     		pop	{r4, r5, pc}
 2109              		.cfi_endproc
 2110              	.LFE165:
 2112              		.section	.text.SDMMC_CmdSendSCR,"ax",%progbits
 2113              		.align	2
 2114              		.global	SDMMC_CmdSendSCR
 2115              		.thumb
 2116              		.thumb_func
 2118              	SDMMC_CmdSendSCR:
 2119              	.LFB166:
 945:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 2120              		.loc 1 945 0
 2121              		.cfi_startproc
 2122              		@ args = 0, pretend = 0, frame = 24
 2123              		@ frame_needed = 0, uses_anonymous_args = 0
 2124              	.LVL199:
 2125 0000 30B5     		push	{r4, r5, lr}
 2126              	.LCFI63:
 2127              		.cfi_def_cfa_offset 12
 2128              		.cfi_offset 4, -12
 2129              		.cfi_offset 5, -8
 2130              		.cfi_offset 14, -4
 2131 0002 87B0     		sub	sp, sp, #28
 2132              	.LCFI64:
 2133              		.cfi_def_cfa_offset 40
 2134 0004 0546     		mov	r5, r0
 2135              	.LVL200:
 950:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 2136              		.loc 1 950 0
 2137 0006 0023     		movs	r3, #0
 2138 0008 0193     		str	r3, [sp, #4]
 951:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 2139              		.loc 1 951 0
 2140 000a 3324     		movs	r4, #51
 2141 000c 0294     		str	r4, [sp, #8]
 952:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 2142              		.loc 1 952 0
 2143 000e 4022     		movs	r2, #64
 2144 0010 0392     		str	r2, [sp, #12]
 953:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 2145              		.loc 1 953 0
 2146 0012 0493     		str	r3, [sp, #16]
 954:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 2147              		.loc 1 954 0
 2148 0014 4FF48063 		mov	r3, #1024
 2149 0018 0593     		str	r3, [sp, #20]
 955:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 2150              		.loc 1 955 0
 2151 001a 01A9     		add	r1, sp, #4
 2152 001c FFF7FEFF 		bl	SDMMC_SendCommand
ARM GAS  /tmp/ccyKUF0t.s 			page 69


 2153              	.LVL201:
 958:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2154              		.loc 1 958 0
 2155 0020 41F28832 		movw	r2, #5000
 2156 0024 2146     		mov	r1, r4
 2157 0026 2846     		mov	r0, r5
 2158 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 2159              	.LVL202:
 961:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2160              		.loc 1 961 0
 2161 002c 07B0     		add	sp, sp, #28
 2162              	.LCFI65:
 2163              		.cfi_def_cfa_offset 12
 2164              		@ sp needed
 2165 002e 30BD     		pop	{r4, r5, pc}
 2166              		.cfi_endproc
 2167              	.LFE166:
 2169              		.section	.text.SDMMC_CmdSendCID,"ax",%progbits
 2170              		.align	2
 2171              		.global	SDMMC_CmdSendCID
 2172              		.thumb
 2173              		.thumb_func
 2175              	SDMMC_CmdSendCID:
 2176              	.LFB167:
 969:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 2177              		.loc 1 969 0
 2178              		.cfi_startproc
 2179              		@ args = 0, pretend = 0, frame = 24
 2180              		@ frame_needed = 0, uses_anonymous_args = 0
 2181              	.LVL203:
 2182 0000 10B5     		push	{r4, lr}
 2183              	.LCFI66:
 2184              		.cfi_def_cfa_offset 8
 2185              		.cfi_offset 4, -8
 2186              		.cfi_offset 14, -4
 2187 0002 86B0     		sub	sp, sp, #24
 2188              	.LCFI67:
 2189              		.cfi_def_cfa_offset 32
 2190 0004 0446     		mov	r4, r0
 2191              	.LVL204:
 974:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 2192              		.loc 1 974 0
 2193 0006 0023     		movs	r3, #0
 2194 0008 0193     		str	r3, [sp, #4]
 975:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 2195              		.loc 1 975 0
 2196 000a 0222     		movs	r2, #2
 2197 000c 0292     		str	r2, [sp, #8]
 976:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 2198              		.loc 1 976 0
 2199 000e C022     		movs	r2, #192
 2200 0010 0392     		str	r2, [sp, #12]
 977:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 2201              		.loc 1 977 0
 2202 0012 0493     		str	r3, [sp, #16]
 978:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 2203              		.loc 1 978 0
ARM GAS  /tmp/ccyKUF0t.s 			page 70


 2204 0014 4FF48063 		mov	r3, #1024
 2205 0018 0593     		str	r3, [sp, #20]
 979:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 2206              		.loc 1 979 0
 2207 001a 01A9     		add	r1, sp, #4
 2208 001c FFF7FEFF 		bl	SDMMC_SendCommand
 2209              	.LVL205:
 982:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2210              		.loc 1 982 0
 2211 0020 2046     		mov	r0, r4
 2212 0022 FFF7FEFF 		bl	SDMMC_GetCmdResp2
 2213              	.LVL206:
 985:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2214              		.loc 1 985 0
 2215 0026 06B0     		add	sp, sp, #24
 2216              	.LCFI68:
 2217              		.cfi_def_cfa_offset 8
 2218              		@ sp needed
 2219 0028 10BD     		pop	{r4, pc}
 2220              		.cfi_endproc
 2221              	.LFE167:
 2223 002a 00BF     		.section	.text.SDMMC_CmdSendCSD,"ax",%progbits
 2224              		.align	2
 2225              		.global	SDMMC_CmdSendCSD
 2226              		.thumb
 2227              		.thumb_func
 2229              	SDMMC_CmdSendCSD:
 2230              	.LFB168:
 993:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 2231              		.loc 1 993 0
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 24
 2234              		@ frame_needed = 0, uses_anonymous_args = 0
 2235              	.LVL207:
 2236 0000 10B5     		push	{r4, lr}
 2237              	.LCFI69:
 2238              		.cfi_def_cfa_offset 8
 2239              		.cfi_offset 4, -8
 2240              		.cfi_offset 14, -4
 2241 0002 86B0     		sub	sp, sp, #24
 2242              	.LCFI70:
 2243              		.cfi_def_cfa_offset 32
 2244 0004 0446     		mov	r4, r0
 2245              	.LVL208:
 998:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 2246              		.loc 1 998 0
 2247 0006 0191     		str	r1, [sp, #4]
 999:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 2248              		.loc 1 999 0
 2249 0008 0923     		movs	r3, #9
 2250 000a 0293     		str	r3, [sp, #8]
1000:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 2251              		.loc 1 1000 0
 2252 000c C023     		movs	r3, #192
 2253 000e 0393     		str	r3, [sp, #12]
1001:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 2254              		.loc 1 1001 0
ARM GAS  /tmp/ccyKUF0t.s 			page 71


 2255 0010 0023     		movs	r3, #0
 2256 0012 0493     		str	r3, [sp, #16]
1002:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 2257              		.loc 1 1002 0
 2258 0014 4FF48063 		mov	r3, #1024
 2259 0018 0593     		str	r3, [sp, #20]
1003:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 2260              		.loc 1 1003 0
 2261 001a 01A9     		add	r1, sp, #4
 2262              	.LVL209:
 2263 001c FFF7FEFF 		bl	SDMMC_SendCommand
 2264              	.LVL210:
1006:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2265              		.loc 1 1006 0
 2266 0020 2046     		mov	r0, r4
 2267 0022 FFF7FEFF 		bl	SDMMC_GetCmdResp2
 2268              	.LVL211:
1009:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2269              		.loc 1 1009 0
 2270 0026 06B0     		add	sp, sp, #24
 2271              	.LCFI71:
 2272              		.cfi_def_cfa_offset 8
 2273              		@ sp needed
 2274 0028 10BD     		pop	{r4, pc}
 2275              		.cfi_endproc
 2276              	.LFE168:
 2278 002a 00BF     		.section	.text.SDMMC_CmdSetRelAdd,"ax",%progbits
 2279              		.align	2
 2280              		.global	SDMMC_CmdSetRelAdd
 2281              		.thumb
 2282              		.thumb_func
 2284              	SDMMC_CmdSetRelAdd:
 2285              	.LFB169:
1017:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 2286              		.loc 1 1017 0
 2287              		.cfi_startproc
 2288              		@ args = 0, pretend = 0, frame = 24
 2289              		@ frame_needed = 0, uses_anonymous_args = 0
 2290              	.LVL212:
 2291 0000 70B5     		push	{r4, r5, r6, lr}
 2292              	.LCFI72:
 2293              		.cfi_def_cfa_offset 16
 2294              		.cfi_offset 4, -16
 2295              		.cfi_offset 5, -12
 2296              		.cfi_offset 6, -8
 2297              		.cfi_offset 14, -4
 2298 0002 86B0     		sub	sp, sp, #24
 2299              	.LCFI73:
 2300              		.cfi_def_cfa_offset 40
 2301 0004 0546     		mov	r5, r0
 2302 0006 0E46     		mov	r6, r1
 2303              	.LVL213:
1022:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 2304              		.loc 1 1022 0
 2305 0008 0023     		movs	r3, #0
 2306 000a 0193     		str	r3, [sp, #4]
1023:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
ARM GAS  /tmp/ccyKUF0t.s 			page 72


 2307              		.loc 1 1023 0
 2308 000c 0324     		movs	r4, #3
 2309 000e 0294     		str	r4, [sp, #8]
1024:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 2310              		.loc 1 1024 0
 2311 0010 4022     		movs	r2, #64
 2312 0012 0392     		str	r2, [sp, #12]
1025:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 2313              		.loc 1 1025 0
 2314 0014 0493     		str	r3, [sp, #16]
1026:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 2315              		.loc 1 1026 0
 2316 0016 4FF48063 		mov	r3, #1024
 2317 001a 0593     		str	r3, [sp, #20]
1027:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 2318              		.loc 1 1027 0
 2319 001c 01A9     		add	r1, sp, #4
 2320              	.LVL214:
 2321 001e FFF7FEFF 		bl	SDMMC_SendCommand
 2322              	.LVL215:
1030:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2323              		.loc 1 1030 0
 2324 0022 3246     		mov	r2, r6
 2325 0024 2146     		mov	r1, r4
 2326 0026 2846     		mov	r0, r5
 2327 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp6
 2328              	.LVL216:
1033:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2329              		.loc 1 1033 0
 2330 002c 06B0     		add	sp, sp, #24
 2331              	.LCFI74:
 2332              		.cfi_def_cfa_offset 16
 2333              		@ sp needed
 2334 002e 70BD     		pop	{r4, r5, r6, pc}
 2335              		.cfi_endproc
 2336              	.LFE169:
 2338              		.section	.text.SDMMC_CmdSendStatus,"ax",%progbits
 2339              		.align	2
 2340              		.global	SDMMC_CmdSendStatus
 2341              		.thumb
 2342              		.thumb_func
 2344              	SDMMC_CmdSendStatus:
 2345              	.LFB170:
1041:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 2346              		.loc 1 1041 0
 2347              		.cfi_startproc
 2348              		@ args = 0, pretend = 0, frame = 24
 2349              		@ frame_needed = 0, uses_anonymous_args = 0
 2350              	.LVL217:
 2351 0000 30B5     		push	{r4, r5, lr}
 2352              	.LCFI75:
 2353              		.cfi_def_cfa_offset 12
 2354              		.cfi_offset 4, -12
 2355              		.cfi_offset 5, -8
 2356              		.cfi_offset 14, -4
 2357 0002 87B0     		sub	sp, sp, #28
 2358              	.LCFI76:
ARM GAS  /tmp/ccyKUF0t.s 			page 73


 2359              		.cfi_def_cfa_offset 40
 2360 0004 0546     		mov	r5, r0
 2361              	.LVL218:
1045:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 2362              		.loc 1 1045 0
 2363 0006 0191     		str	r1, [sp, #4]
1046:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 2364              		.loc 1 1046 0
 2365 0008 0D24     		movs	r4, #13
 2366 000a 0294     		str	r4, [sp, #8]
1047:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 2367              		.loc 1 1047 0
 2368 000c 4023     		movs	r3, #64
 2369 000e 0393     		str	r3, [sp, #12]
1048:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 2370              		.loc 1 1048 0
 2371 0010 0023     		movs	r3, #0
 2372 0012 0493     		str	r3, [sp, #16]
1049:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 2373              		.loc 1 1049 0
 2374 0014 4FF48063 		mov	r3, #1024
 2375 0018 0593     		str	r3, [sp, #20]
1050:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 2376              		.loc 1 1050 0
 2377 001a 01A9     		add	r1, sp, #4
 2378              	.LVL219:
 2379 001c FFF7FEFF 		bl	SDMMC_SendCommand
 2380              	.LVL220:
1053:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2381              		.loc 1 1053 0
 2382 0020 41F28832 		movw	r2, #5000
 2383 0024 2146     		mov	r1, r4
 2384 0026 2846     		mov	r0, r5
 2385 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 2386              	.LVL221:
1056:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2387              		.loc 1 1056 0
 2388 002c 07B0     		add	sp, sp, #28
 2389              	.LCFI77:
 2390              		.cfi_def_cfa_offset 12
 2391              		@ sp needed
 2392 002e 30BD     		pop	{r4, r5, pc}
 2393              		.cfi_endproc
 2394              	.LFE170:
 2396              		.section	.text.SDMMC_CmdStatusRegister,"ax",%progbits
 2397              		.align	2
 2398              		.global	SDMMC_CmdStatusRegister
 2399              		.thumb
 2400              		.thumb_func
 2402              	SDMMC_CmdStatusRegister:
 2403              	.LFB171:
1064:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 2404              		.loc 1 1064 0
 2405              		.cfi_startproc
 2406              		@ args = 0, pretend = 0, frame = 24
 2407              		@ frame_needed = 0, uses_anonymous_args = 0
 2408              	.LVL222:
ARM GAS  /tmp/ccyKUF0t.s 			page 74


 2409 0000 30B5     		push	{r4, r5, lr}
 2410              	.LCFI78:
 2411              		.cfi_def_cfa_offset 12
 2412              		.cfi_offset 4, -12
 2413              		.cfi_offset 5, -8
 2414              		.cfi_offset 14, -4
 2415 0002 87B0     		sub	sp, sp, #28
 2416              	.LCFI79:
 2417              		.cfi_def_cfa_offset 40
 2418 0004 0546     		mov	r5, r0
 2419              	.LVL223:
1068:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 2420              		.loc 1 1068 0
 2421 0006 0023     		movs	r3, #0
 2422 0008 0193     		str	r3, [sp, #4]
1069:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 2423              		.loc 1 1069 0
 2424 000a 0D24     		movs	r4, #13
 2425 000c 0294     		str	r4, [sp, #8]
1070:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 2426              		.loc 1 1070 0
 2427 000e 4022     		movs	r2, #64
 2428 0010 0392     		str	r2, [sp, #12]
1071:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 2429              		.loc 1 1071 0
 2430 0012 0493     		str	r3, [sp, #16]
1072:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 2431              		.loc 1 1072 0
 2432 0014 4FF48063 		mov	r3, #1024
 2433 0018 0593     		str	r3, [sp, #20]
1073:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 2434              		.loc 1 1073 0
 2435 001a 01A9     		add	r1, sp, #4
 2436 001c FFF7FEFF 		bl	SDMMC_SendCommand
 2437              	.LVL224:
1076:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2438              		.loc 1 1076 0
 2439 0020 41F28832 		movw	r2, #5000
 2440 0024 2146     		mov	r1, r4
 2441 0026 2846     		mov	r0, r5
 2442 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 2443              	.LVL225:
1079:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2444              		.loc 1 1079 0
 2445 002c 07B0     		add	sp, sp, #28
 2446              	.LCFI80:
 2447              		.cfi_def_cfa_offset 12
 2448              		@ sp needed
 2449 002e 30BD     		pop	{r4, r5, pc}
 2450              		.cfi_endproc
 2451              	.LFE171:
 2453              		.section	.text.SDMMC_CmdOpCondition,"ax",%progbits
 2454              		.align	2
 2455              		.global	SDMMC_CmdOpCondition
 2456              		.thumb
 2457              		.thumb_func
 2459              	SDMMC_CmdOpCondition:
ARM GAS  /tmp/ccyKUF0t.s 			page 75


 2460              	.LFB172:
1089:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 2461              		.loc 1 1089 0
 2462              		.cfi_startproc
 2463              		@ args = 0, pretend = 0, frame = 24
 2464              		@ frame_needed = 0, uses_anonymous_args = 0
 2465              	.LVL226:
 2466 0000 10B5     		push	{r4, lr}
 2467              	.LCFI81:
 2468              		.cfi_def_cfa_offset 8
 2469              		.cfi_offset 4, -8
 2470              		.cfi_offset 14, -4
 2471 0002 86B0     		sub	sp, sp, #24
 2472              	.LCFI82:
 2473              		.cfi_def_cfa_offset 32
 2474 0004 0446     		mov	r4, r0
 2475              	.LVL227:
1093:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 2476              		.loc 1 1093 0
 2477 0006 0191     		str	r1, [sp, #4]
1094:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 2478              		.loc 1 1094 0
 2479 0008 0123     		movs	r3, #1
 2480 000a 0293     		str	r3, [sp, #8]
1095:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 2481              		.loc 1 1095 0
 2482 000c 4023     		movs	r3, #64
 2483 000e 0393     		str	r3, [sp, #12]
1096:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 2484              		.loc 1 1096 0
 2485 0010 0023     		movs	r3, #0
 2486 0012 0493     		str	r3, [sp, #16]
1097:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 2487              		.loc 1 1097 0
 2488 0014 4FF48063 		mov	r3, #1024
 2489 0018 0593     		str	r3, [sp, #20]
1098:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 2490              		.loc 1 1098 0
 2491 001a 01A9     		add	r1, sp, #4
 2492              	.LVL228:
 2493 001c FFF7FEFF 		bl	SDMMC_SendCommand
 2494              	.LVL229:
1101:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2495              		.loc 1 1101 0
 2496 0020 2046     		mov	r0, r4
 2497 0022 FFF7FEFF 		bl	SDMMC_GetCmdResp3
 2498              	.LVL230:
1104:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2499              		.loc 1 1104 0
 2500 0026 06B0     		add	sp, sp, #24
 2501              	.LCFI83:
 2502              		.cfi_def_cfa_offset 8
 2503              		@ sp needed
 2504 0028 10BD     		pop	{r4, pc}
 2505              		.cfi_endproc
 2506              	.LFE172:
 2508 002a 00BF     		.section	.text.SDMMC_CmdSwitch,"ax",%progbits
ARM GAS  /tmp/ccyKUF0t.s 			page 76


 2509              		.align	2
 2510              		.global	SDMMC_CmdSwitch
 2511              		.thumb
 2512              		.thumb_func
 2514              	SDMMC_CmdSwitch:
 2515              	.LFB173:
1113:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 2516              		.loc 1 1113 0
 2517              		.cfi_startproc
 2518              		@ args = 0, pretend = 0, frame = 24
 2519              		@ frame_needed = 0, uses_anonymous_args = 0
 2520              	.LVL231:
 2521 0000 30B5     		push	{r4, r5, lr}
 2522              	.LCFI84:
 2523              		.cfi_def_cfa_offset 12
 2524              		.cfi_offset 4, -12
 2525              		.cfi_offset 5, -8
 2526              		.cfi_offset 14, -4
 2527 0002 87B0     		sub	sp, sp, #28
 2528              	.LCFI85:
 2529              		.cfi_def_cfa_offset 40
 2530 0004 0546     		mov	r5, r0
 2531              	.LVL232:
1117:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 2532              		.loc 1 1117 0
 2533 0006 0191     		str	r1, [sp, #4]
1118:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 2534              		.loc 1 1118 0
 2535 0008 0624     		movs	r4, #6
 2536 000a 0294     		str	r4, [sp, #8]
1119:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 2537              		.loc 1 1119 0
 2538 000c 4023     		movs	r3, #64
 2539 000e 0393     		str	r3, [sp, #12]
1120:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 2540              		.loc 1 1120 0
 2541 0010 0023     		movs	r3, #0
 2542 0012 0493     		str	r3, [sp, #16]
1121:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 2543              		.loc 1 1121 0
 2544 0014 4FF48063 		mov	r3, #1024
 2545 0018 0593     		str	r3, [sp, #20]
1122:HALLIB/Src/stm32f7xx_ll_sdmmc.c ****   
 2546              		.loc 1 1122 0
 2547 001a 01A9     		add	r1, sp, #4
 2548              	.LVL233:
 2549 001c FFF7FEFF 		bl	SDMMC_SendCommand
 2550              	.LVL234:
1125:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2551              		.loc 1 1125 0
 2552 0020 41F28832 		movw	r2, #5000
 2553 0024 2146     		mov	r1, r4
 2554 0026 2846     		mov	r0, r5
 2555 0028 FFF7FEFF 		bl	SDMMC_GetCmdResp1
 2556              	.LVL235:
1128:HALLIB/Src/stm32f7xx_ll_sdmmc.c **** 
 2557              		.loc 1 1128 0
ARM GAS  /tmp/ccyKUF0t.s 			page 77


 2558 002c 07B0     		add	sp, sp, #28
 2559              	.LCFI86:
 2560              		.cfi_def_cfa_offset 12
 2561              		@ sp needed
 2562 002e 30BD     		pop	{r4, r5, pc}
 2563              		.cfi_endproc
 2564              	.LFE173:
 2566              		.text
 2567              	.Letext0:
 2568              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 2569              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 2570              		.file 4 "Inc/stm32f767xx.h"
 2571              		.file 5 "Inc/stm32f7xx.h"
 2572              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 2573              		.file 7 "HALLIB/Inc/stm32f7xx_ll_sdmmc.h"
 2574              		.file 8 "CORE/core_cm7.h"
 2575              		.file 9 "Inc/system_stm32f7xx.h"
ARM GAS  /tmp/ccyKUF0t.s 			page 78


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_ll_sdmmc.c
     /tmp/ccyKUF0t.s:21     .text.SDMMC_GetCmdError:00000000 $t
     /tmp/ccyKUF0t.s:25     .text.SDMMC_GetCmdError:00000000 SDMMC_GetCmdError
     /tmp/ccyKUF0t.s:72     .text.SDMMC_GetCmdError:00000034 $d
     /tmp/ccyKUF0t.s:78     .text.SDMMC_GetCmdResp2:00000000 $t
     /tmp/ccyKUF0t.s:82     .text.SDMMC_GetCmdResp2:00000000 SDMMC_GetCmdResp2
     /tmp/ccyKUF0t.s:160    .text.SDMMC_GetCmdResp2:00000054 $d
     /tmp/ccyKUF0t.s:166    .text.SDMMC_GetCmdResp3:00000000 $t
     /tmp/ccyKUF0t.s:170    .text.SDMMC_GetCmdResp3:00000000 SDMMC_GetCmdResp3
     /tmp/ccyKUF0t.s:236    .text.SDMMC_GetCmdResp3:00000048 $d
     /tmp/ccyKUF0t.s:242    .text.SDMMC_GetCmdResp7:00000000 $t
     /tmp/ccyKUF0t.s:246    .text.SDMMC_GetCmdResp7:00000000 SDMMC_GetCmdResp7
     /tmp/ccyKUF0t.s:310    .text.SDMMC_GetCmdResp7:0000004c $d
     /tmp/ccyKUF0t.s:316    .text.SDMMC_Init:00000000 $t
     /tmp/ccyKUF0t.s:321    .text.SDMMC_Init:00000000 SDMMC_Init
     /tmp/ccyKUF0t.s:381    .text.SDMMC_Init:00000034 $d
     /tmp/ccyKUF0t.s:386    .text.SDMMC_ReadFIFO:00000000 $t
     /tmp/ccyKUF0t.s:391    .text.SDMMC_ReadFIFO:00000000 SDMMC_ReadFIFO
     /tmp/ccyKUF0t.s:408    .text.SDMMC_WriteFIFO:00000000 $t
     /tmp/ccyKUF0t.s:413    .text.SDMMC_WriteFIFO:00000000 SDMMC_WriteFIFO
     /tmp/ccyKUF0t.s:432    .text.SDMMC_PowerState_ON:00000000 $t
     /tmp/ccyKUF0t.s:437    .text.SDMMC_PowerState_ON:00000000 SDMMC_PowerState_ON
     /tmp/ccyKUF0t.s:456    .text.SDMMC_PowerState_OFF:00000000 $t
     /tmp/ccyKUF0t.s:461    .text.SDMMC_PowerState_OFF:00000000 SDMMC_PowerState_OFF
     /tmp/ccyKUF0t.s:480    .text.SDMMC_GetPowerState:00000000 $t
     /tmp/ccyKUF0t.s:485    .text.SDMMC_GetPowerState:00000000 SDMMC_GetPowerState
     /tmp/ccyKUF0t.s:503    .text.SDMMC_SendCommand:00000000 $t
     /tmp/ccyKUF0t.s:508    .text.SDMMC_SendCommand:00000000 SDMMC_SendCommand
     /tmp/ccyKUF0t.s:548    .text.SDMMC_SendCommand:00000020 $d
     /tmp/ccyKUF0t.s:553    .text.SDMMC_GetCommandResponse:00000000 $t
     /tmp/ccyKUF0t.s:558    .text.SDMMC_GetCommandResponse:00000000 SDMMC_GetCommandResponse
     /tmp/ccyKUF0t.s:576    .text.SDMMC_GetResponse:00000000 $t
     /tmp/ccyKUF0t.s:581    .text.SDMMC_GetResponse:00000000 SDMMC_GetResponse
     /tmp/ccyKUF0t.s:615    .text.SDMMC_GetCmdResp1:00000000 $t
     /tmp/ccyKUF0t.s:619    .text.SDMMC_GetCmdResp1:00000000 SDMMC_GetCmdResp1
     /tmp/ccyKUF0t.s:868    .text.SDMMC_GetCmdResp1:00000148 $d
     /tmp/ccyKUF0t.s:875    .text.SDMMC_GetCmdResp6:00000000 $t
     /tmp/ccyKUF0t.s:879    .text.SDMMC_GetCmdResp6:00000000 SDMMC_GetCmdResp6
     /tmp/ccyKUF0t.s:1006   .text.SDMMC_GetCmdResp6:00000098 $d
     /tmp/ccyKUF0t.s:1012   .text.SDMMC_ConfigData:00000000 $t
     /tmp/ccyKUF0t.s:1017   .text.SDMMC_ConfigData:00000000 SDMMC_ConfigData
     /tmp/ccyKUF0t.s:1059   .text.SDMMC_GetDataCounter:00000000 $t
     /tmp/ccyKUF0t.s:1064   .text.SDMMC_GetDataCounter:00000000 SDMMC_GetDataCounter
     /tmp/ccyKUF0t.s:1081   .text.SDMMC_GetFIFOCount:00000000 $t
     /tmp/ccyKUF0t.s:1086   .text.SDMMC_GetFIFOCount:00000000 SDMMC_GetFIFOCount
     /tmp/ccyKUF0t.s:1103   .text.SDMMC_SetSDMMCReadWaitMode:00000000 $t
     /tmp/ccyKUF0t.s:1108   .text.SDMMC_SetSDMMCReadWaitMode:00000000 SDMMC_SetSDMMCReadWaitMode
     /tmp/ccyKUF0t.s:1130   .text.SDMMC_CmdBlockLength:00000000 $t
     /tmp/ccyKUF0t.s:1135   .text.SDMMC_CmdBlockLength:00000000 SDMMC_CmdBlockLength
     /tmp/ccyKUF0t.s:1188   .text.SDMMC_CmdReadSingleBlock:00000000 $t
     /tmp/ccyKUF0t.s:1193   .text.SDMMC_CmdReadSingleBlock:00000000 SDMMC_CmdReadSingleBlock
     /tmp/ccyKUF0t.s:1246   .text.SDMMC_CmdReadMultiBlock:00000000 $t
     /tmp/ccyKUF0t.s:1251   .text.SDMMC_CmdReadMultiBlock:00000000 SDMMC_CmdReadMultiBlock
     /tmp/ccyKUF0t.s:1304   .text.SDMMC_CmdWriteSingleBlock:00000000 $t
     /tmp/ccyKUF0t.s:1309   .text.SDMMC_CmdWriteSingleBlock:00000000 SDMMC_CmdWriteSingleBlock
     /tmp/ccyKUF0t.s:1362   .text.SDMMC_CmdWriteMultiBlock:00000000 $t
ARM GAS  /tmp/ccyKUF0t.s 			page 79


     /tmp/ccyKUF0t.s:1367   .text.SDMMC_CmdWriteMultiBlock:00000000 SDMMC_CmdWriteMultiBlock
     /tmp/ccyKUF0t.s:1420   .text.SDMMC_CmdSDEraseStartAdd:00000000 $t
     /tmp/ccyKUF0t.s:1425   .text.SDMMC_CmdSDEraseStartAdd:00000000 SDMMC_CmdSDEraseStartAdd
     /tmp/ccyKUF0t.s:1478   .text.SDMMC_CmdSDEraseEndAdd:00000000 $t
     /tmp/ccyKUF0t.s:1483   .text.SDMMC_CmdSDEraseEndAdd:00000000 SDMMC_CmdSDEraseEndAdd
     /tmp/ccyKUF0t.s:1536   .text.SDMMC_CmdEraseStartAdd:00000000 $t
     /tmp/ccyKUF0t.s:1541   .text.SDMMC_CmdEraseStartAdd:00000000 SDMMC_CmdEraseStartAdd
     /tmp/ccyKUF0t.s:1594   .text.SDMMC_CmdEraseEndAdd:00000000 $t
     /tmp/ccyKUF0t.s:1599   .text.SDMMC_CmdEraseEndAdd:00000000 SDMMC_CmdEraseEndAdd
     /tmp/ccyKUF0t.s:1652   .text.SDMMC_CmdErase:00000000 $t
     /tmp/ccyKUF0t.s:1657   .text.SDMMC_CmdErase:00000000 SDMMC_CmdErase
     /tmp/ccyKUF0t.s:1709   .text.SDMMC_CmdStopTransfer:00000000 $t
     /tmp/ccyKUF0t.s:1714   .text.SDMMC_CmdStopTransfer:00000000 SDMMC_CmdStopTransfer
     /tmp/ccyKUF0t.s:1766   .text.SDMMC_CmdStopTransfer:00000030 $d
     /tmp/ccyKUF0t.s:1771   .text.SDMMC_CmdSelDesel:00000000 $t
     /tmp/ccyKUF0t.s:1776   .text.SDMMC_CmdSelDesel:00000000 SDMMC_CmdSelDesel
     /tmp/ccyKUF0t.s:1828   .text.SDMMC_CmdGoIdleState:00000000 $t
     /tmp/ccyKUF0t.s:1833   .text.SDMMC_CmdGoIdleState:00000000 SDMMC_CmdGoIdleState
     /tmp/ccyKUF0t.s:1880   .text.SDMMC_CmdOperCond:00000000 $t
     /tmp/ccyKUF0t.s:1885   .text.SDMMC_CmdOperCond:00000000 SDMMC_CmdOperCond
     /tmp/ccyKUF0t.s:1935   .text.SDMMC_CmdAppCommand:00000000 $t
     /tmp/ccyKUF0t.s:1940   .text.SDMMC_CmdAppCommand:00000000 SDMMC_CmdAppCommand
     /tmp/ccyKUF0t.s:1993   .text.SDMMC_CmdAppOperCommand:00000000 $t
     /tmp/ccyKUF0t.s:1998   .text.SDMMC_CmdAppOperCommand:00000000 SDMMC_CmdAppOperCommand
     /tmp/ccyKUF0t.s:2050   .text.SDMMC_CmdAppOperCommand:00000030 $d
     /tmp/ccyKUF0t.s:2055   .text.SDMMC_CmdBusWidth:00000000 $t
     /tmp/ccyKUF0t.s:2060   .text.SDMMC_CmdBusWidth:00000000 SDMMC_CmdBusWidth
     /tmp/ccyKUF0t.s:2113   .text.SDMMC_CmdSendSCR:00000000 $t
     /tmp/ccyKUF0t.s:2118   .text.SDMMC_CmdSendSCR:00000000 SDMMC_CmdSendSCR
     /tmp/ccyKUF0t.s:2170   .text.SDMMC_CmdSendCID:00000000 $t
     /tmp/ccyKUF0t.s:2175   .text.SDMMC_CmdSendCID:00000000 SDMMC_CmdSendCID
     /tmp/ccyKUF0t.s:2224   .text.SDMMC_CmdSendCSD:00000000 $t
     /tmp/ccyKUF0t.s:2229   .text.SDMMC_CmdSendCSD:00000000 SDMMC_CmdSendCSD
     /tmp/ccyKUF0t.s:2279   .text.SDMMC_CmdSetRelAdd:00000000 $t
     /tmp/ccyKUF0t.s:2284   .text.SDMMC_CmdSetRelAdd:00000000 SDMMC_CmdSetRelAdd
     /tmp/ccyKUF0t.s:2339   .text.SDMMC_CmdSendStatus:00000000 $t
     /tmp/ccyKUF0t.s:2344   .text.SDMMC_CmdSendStatus:00000000 SDMMC_CmdSendStatus
     /tmp/ccyKUF0t.s:2397   .text.SDMMC_CmdStatusRegister:00000000 $t
     /tmp/ccyKUF0t.s:2402   .text.SDMMC_CmdStatusRegister:00000000 SDMMC_CmdStatusRegister
     /tmp/ccyKUF0t.s:2454   .text.SDMMC_CmdOpCondition:00000000 $t
     /tmp/ccyKUF0t.s:2459   .text.SDMMC_CmdOpCondition:00000000 SDMMC_CmdOpCondition
     /tmp/ccyKUF0t.s:2509   .text.SDMMC_CmdSwitch:00000000 $t
     /tmp/ccyKUF0t.s:2514   .text.SDMMC_CmdSwitch:00000000 SDMMC_CmdSwitch
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
