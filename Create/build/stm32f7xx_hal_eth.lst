ARM GAS  /tmp/cc7Dq4FC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_eth.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.ETH_MACAddressConfig,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	ETH_MACAddressConfig:
  26              	.LFB157:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_eth.c"
   1:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_eth.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @file    stm32f7xx_hal_eth.c
   4:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief   ETH HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_eth.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f7xx_hal_eth.c ****   *          functionalities of the Ethernet (ETH) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_eth.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_eth.c ****   *           + IO operation functions
  10:HALLIB/Src/stm32f7xx_hal_eth.c ****   *           + Peripheral Control functions 
  11:HALLIB/Src/stm32f7xx_hal_eth.c ****   *           + Peripheral State and Errors functions
  12:HALLIB/Src/stm32f7xx_hal_eth.c ****   *
  13:HALLIB/Src/stm32f7xx_hal_eth.c ****   @verbatim
  14:HALLIB/Src/stm32f7xx_hal_eth.c ****   ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_eth.c ****                     ##### How to use this driver #####
  16:HALLIB/Src/stm32f7xx_hal_eth.c ****   ==============================================================================
  17:HALLIB/Src/stm32f7xx_hal_eth.c ****     [..]
  18:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#)Declare a ETH_HandleTypeDef handle structure, for example:
  19:HALLIB/Src/stm32f7xx_hal_eth.c ****          ETH_HandleTypeDef  heth;
  20:HALLIB/Src/stm32f7xx_hal_eth.c ****         
  21:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#)Fill parameters of Init structure in heth handle
  22:HALLIB/Src/stm32f7xx_hal_eth.c ****   
  23:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#)Call HAL_ETH_Init() API to initialize the Ethernet peripheral (MAC, DMA, ...) 
  24:HALLIB/Src/stm32f7xx_hal_eth.c **** 
  25:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#)Initialize the ETH low level resources through the HAL_ETH_MspInit() API:
  26:HALLIB/Src/stm32f7xx_hal_eth.c ****           (##) Enable the Ethernet interface clock using 
  27:HALLIB/Src/stm32f7xx_hal_eth.c ****                (+++) __HAL_RCC_ETHMAC_CLK_ENABLE();
  28:HALLIB/Src/stm32f7xx_hal_eth.c ****                (+++) __HAL_RCC_ETHMACTX_CLK_ENABLE();
  29:HALLIB/Src/stm32f7xx_hal_eth.c ****                (+++) __HAL_RCC_ETHMACRX_CLK_ENABLE();
  30:HALLIB/Src/stm32f7xx_hal_eth.c ****            
  31:HALLIB/Src/stm32f7xx_hal_eth.c ****           (##) Initialize the related GPIO clocks
ARM GAS  /tmp/cc7Dq4FC.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_eth.c ****           (##) Configure Ethernet pin-out
  33:HALLIB/Src/stm32f7xx_hal_eth.c ****           (##) Configure Ethernet NVIC interrupt (IT mode)   
  34:HALLIB/Src/stm32f7xx_hal_eth.c ****     
  35:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#)Initialize Ethernet DMA Descriptors in chain mode and point to allocated buffers:
  36:HALLIB/Src/stm32f7xx_hal_eth.c ****           (##) HAL_ETH_DMATxDescListInit(); for Transmission process
  37:HALLIB/Src/stm32f7xx_hal_eth.c ****           (##) HAL_ETH_DMARxDescListInit(); for Reception process
  38:HALLIB/Src/stm32f7xx_hal_eth.c **** 
  39:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#)Enable MAC and DMA transmission and reception:
  40:HALLIB/Src/stm32f7xx_hal_eth.c ****           (##) HAL_ETH_Start();
  41:HALLIB/Src/stm32f7xx_hal_eth.c **** 
  42:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#)Prepare ETH DMA TX Descriptors and give the hand to ETH DMA to transfer 
  43:HALLIB/Src/stm32f7xx_hal_eth.c ****          the frame to MAC TX FIFO:
  44:HALLIB/Src/stm32f7xx_hal_eth.c ****          (##) HAL_ETH_TransmitFrame();
  45:HALLIB/Src/stm32f7xx_hal_eth.c **** 
  46:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#)Poll for a received frame in ETH RX DMA Descriptors and get received 
  47:HALLIB/Src/stm32f7xx_hal_eth.c ****          frame parameters
  48:HALLIB/Src/stm32f7xx_hal_eth.c ****          (##) HAL_ETH_GetReceivedFrame(); (should be called into an infinite loop)
  49:HALLIB/Src/stm32f7xx_hal_eth.c **** 
  50:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#) Get a received frame when an ETH RX interrupt occurs:
  51:HALLIB/Src/stm32f7xx_hal_eth.c ****          (##) HAL_ETH_GetReceivedFrame_IT(); (called in IT mode only)
  52:HALLIB/Src/stm32f7xx_hal_eth.c **** 
  53:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#) Communicate with external PHY device:
  54:HALLIB/Src/stm32f7xx_hal_eth.c ****          (##) Read a specific register from the PHY  
  55:HALLIB/Src/stm32f7xx_hal_eth.c ****               HAL_ETH_ReadPHYRegister();
  56:HALLIB/Src/stm32f7xx_hal_eth.c ****          (##) Write data to a specific RHY register:
  57:HALLIB/Src/stm32f7xx_hal_eth.c ****               HAL_ETH_WritePHYRegister();
  58:HALLIB/Src/stm32f7xx_hal_eth.c **** 
  59:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#) Configure the Ethernet MAC after ETH peripheral initialization
  60:HALLIB/Src/stm32f7xx_hal_eth.c ****           HAL_ETH_ConfigMAC(); all MAC parameters should be filled.
  61:HALLIB/Src/stm32f7xx_hal_eth.c ****       
  62:HALLIB/Src/stm32f7xx_hal_eth.c ****       (#) Configure the Ethernet DMA after ETH peripheral initialization
  63:HALLIB/Src/stm32f7xx_hal_eth.c ****           HAL_ETH_ConfigDMA(); all DMA parameters should be filled.
  64:HALLIB/Src/stm32f7xx_hal_eth.c **** 
  65:HALLIB/Src/stm32f7xx_hal_eth.c ****   @endverbatim
  66:HALLIB/Src/stm32f7xx_hal_eth.c ****   ******************************************************************************
  67:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @attention
  68:HALLIB/Src/stm32f7xx_hal_eth.c ****   *
  69:HALLIB/Src/stm32f7xx_hal_eth.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  70:HALLIB/Src/stm32f7xx_hal_eth.c ****   *
  71:HALLIB/Src/stm32f7xx_hal_eth.c ****   * Redistribution and use in source and binary forms, with or without modification,
  72:HALLIB/Src/stm32f7xx_hal_eth.c ****   * are permitted provided that the following conditions are met:
  73:HALLIB/Src/stm32f7xx_hal_eth.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  74:HALLIB/Src/stm32f7xx_hal_eth.c ****   *      this list of conditions and the following disclaimer.
  75:HALLIB/Src/stm32f7xx_hal_eth.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  76:HALLIB/Src/stm32f7xx_hal_eth.c ****   *      this list of conditions and the following disclaimer in the documentation
  77:HALLIB/Src/stm32f7xx_hal_eth.c ****   *      and/or other materials provided with the distribution.
  78:HALLIB/Src/stm32f7xx_hal_eth.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  79:HALLIB/Src/stm32f7xx_hal_eth.c ****   *      may be used to endorse or promote products derived from this software
  80:HALLIB/Src/stm32f7xx_hal_eth.c ****   *      without specific prior written permission.
  81:HALLIB/Src/stm32f7xx_hal_eth.c ****   *
  82:HALLIB/Src/stm32f7xx_hal_eth.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  83:HALLIB/Src/stm32f7xx_hal_eth.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  84:HALLIB/Src/stm32f7xx_hal_eth.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  85:HALLIB/Src/stm32f7xx_hal_eth.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  86:HALLIB/Src/stm32f7xx_hal_eth.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  87:HALLIB/Src/stm32f7xx_hal_eth.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  88:HALLIB/Src/stm32f7xx_hal_eth.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
ARM GAS  /tmp/cc7Dq4FC.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_eth.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  90:HALLIB/Src/stm32f7xx_hal_eth.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  91:HALLIB/Src/stm32f7xx_hal_eth.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  92:HALLIB/Src/stm32f7xx_hal_eth.c ****   *
  93:HALLIB/Src/stm32f7xx_hal_eth.c ****   ******************************************************************************
  94:HALLIB/Src/stm32f7xx_hal_eth.c ****   */ 
  95:HALLIB/Src/stm32f7xx_hal_eth.c **** 
  96:HALLIB/Src/stm32f7xx_hal_eth.c **** /* Includes ------------------------------------------------------------------*/
  97:HALLIB/Src/stm32f7xx_hal_eth.c **** #include "stm32f7xx_hal.h"
  98:HALLIB/Src/stm32f7xx_hal_eth.c **** 
  99:HALLIB/Src/stm32f7xx_hal_eth.c **** /** @addtogroup STM32F7xx_HAL_Driver
 100:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @{
 101:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 102:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 103:HALLIB/Src/stm32f7xx_hal_eth.c **** /** @defgroup ETH ETH 
 104:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief ETH HAL module driver
 105:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @{
 106:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 107:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 108:HALLIB/Src/stm32f7xx_hal_eth.c **** #ifdef HAL_ETH_MODULE_ENABLED
 109:HALLIB/Src/stm32f7xx_hal_eth.c **** #if defined (ETH)
 110:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 111:HALLIB/Src/stm32f7xx_hal_eth.c **** /* Private typedef -----------------------------------------------------------*/
 112:HALLIB/Src/stm32f7xx_hal_eth.c **** /* Private define ------------------------------------------------------------*/
 113:HALLIB/Src/stm32f7xx_hal_eth.c **** /** @defgroup ETH_Private_Constants ETH Private Constants
 114:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @{
 115:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 116:HALLIB/Src/stm32f7xx_hal_eth.c **** #define ETH_TIMEOUT_SWRESET                 ((uint32_t)500)  
 117:HALLIB/Src/stm32f7xx_hal_eth.c **** #define ETH_TIMEOUT_LINKED_STATE          ((uint32_t)5000)  
 118:HALLIB/Src/stm32f7xx_hal_eth.c **** #define ETH_TIMEOUT_AUTONEGO_COMPLETED    ((uint32_t)5000) 
 119:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 120:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 121:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @}
 122:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 123:HALLIB/Src/stm32f7xx_hal_eth.c **** /* Private macro -------------------------------------------------------------*/
 124:HALLIB/Src/stm32f7xx_hal_eth.c **** /* Private variables ---------------------------------------------------------*/
 125:HALLIB/Src/stm32f7xx_hal_eth.c **** /* Private function prototypes -----------------------------------------------*/
 126:HALLIB/Src/stm32f7xx_hal_eth.c **** /** @defgroup ETH_Private_Functions ETH Private Functions
 127:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @{
 128:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 129:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err);
 130:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr);
 131:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth);
 132:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth);
 133:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth);
 134:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth);
 135:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth);
 136:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth);
 137:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth);
 138:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth);
 139:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth);
 140:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 141:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 142:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @}
 143:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 144:HALLIB/Src/stm32f7xx_hal_eth.c **** /* Private functions ---------------------------------------------------------*/
 145:HALLIB/Src/stm32f7xx_hal_eth.c **** 
ARM GAS  /tmp/cc7Dq4FC.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_eth.c **** /** @defgroup ETH_Exported_Functions ETH Exported Functions
 147:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @{
 148:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 149:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 150:HALLIB/Src/stm32f7xx_hal_eth.c **** /** @defgroup ETH_Exported_Functions_Group1 Initialization and de-initialization functions 
 151:HALLIB/Src/stm32f7xx_hal_eth.c ****   *  @brief   Initialization and Configuration functions 
 152:HALLIB/Src/stm32f7xx_hal_eth.c ****   *
 153:HALLIB/Src/stm32f7xx_hal_eth.c ****   @verbatim    
 154:HALLIB/Src/stm32f7xx_hal_eth.c ****   ===============================================================================
 155:HALLIB/Src/stm32f7xx_hal_eth.c ****             ##### Initialization and de-initialization functions #####
 156:HALLIB/Src/stm32f7xx_hal_eth.c ****   ===============================================================================
 157:HALLIB/Src/stm32f7xx_hal_eth.c ****   [..]  This section provides functions allowing to:
 158:HALLIB/Src/stm32f7xx_hal_eth.c ****       (+) Initialize and configure the Ethernet peripheral
 159:HALLIB/Src/stm32f7xx_hal_eth.c ****       (+) De-initialize the Ethernet peripheral
 160:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 161:HALLIB/Src/stm32f7xx_hal_eth.c ****   @endverbatim
 162:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @{
 163:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 164:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 165:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 166:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Initializes the Ethernet MAC and DMA according to default
 167:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         parameters.
 168:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 169:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
 170:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
 171:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 172:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
 173:HALLIB/Src/stm32f7xx_hal_eth.c **** {
 174:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tempreg = 0, phyreg = 0;
 175:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t hclk = 60000000;
 176:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tickstart = 0;
 177:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t err = ETH_SUCCESS;
 178:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 179:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check the ETH peripheral state */
 180:HALLIB/Src/stm32f7xx_hal_eth.c ****   if(heth == NULL)
 181:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 182:HALLIB/Src/stm32f7xx_hal_eth.c ****     return HAL_ERROR;
 183:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 184:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 185:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check parameters */
 186:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 187:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 188:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 189:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 190:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 191:HALLIB/Src/stm32f7xx_hal_eth.c ****   if(heth->State == HAL_ETH_STATE_RESET)
 192:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 193:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Allocate lock resource and initialize it */
 194:HALLIB/Src/stm32f7xx_hal_eth.c ****     heth->Lock = HAL_UNLOCKED;
 195:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC. */
 196:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_ETH_MspInit(heth);
 197:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 198:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 199:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Enable SYSCFG Clock */
 200:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_RCC_SYSCFG_CLK_ENABLE();
 201:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 202:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Select MII or RMII Mode*/
ARM GAS  /tmp/cc7Dq4FC.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_eth.c ****   SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 204:HALLIB/Src/stm32f7xx_hal_eth.c ****   SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 205:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 206:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Ethernet Software reset */
 207:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
 208:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* After reset all the registers holds their respective reset values */
 209:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 210:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 211:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Get tick */
 212:HALLIB/Src/stm32f7xx_hal_eth.c ****   tickstart = HAL_GetTick();
 213:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 214:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Wait for software reset */
 215:HALLIB/Src/stm32f7xx_hal_eth.c ****   while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 216:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 217:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Check for the Timeout */
 218:HALLIB/Src/stm32f7xx_hal_eth.c ****     if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 219:HALLIB/Src/stm32f7xx_hal_eth.c ****     {     
 220:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->State= HAL_ETH_STATE_TIMEOUT;
 221:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 222:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Process Unlocked */
 223:HALLIB/Src/stm32f7xx_hal_eth.c ****       __HAL_UNLOCK(heth);
 224:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 225:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
 226:HALLIB/Src/stm32f7xx_hal_eth.c ****          not available, please check your external PHY or the IO configuration */
 227:HALLIB/Src/stm32f7xx_hal_eth.c ****                
 228:HALLIB/Src/stm32f7xx_hal_eth.c ****       return HAL_TIMEOUT;
 229:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 230:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 231:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 232:HALLIB/Src/stm32f7xx_hal_eth.c ****   /*-------------------------------- MAC Initialization ----------------------*/
 233:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Get the ETHERNET MACMIIAR value */
 234:HALLIB/Src/stm32f7xx_hal_eth.c ****   tempreg = (heth->Instance)->MACMIIAR;
 235:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Clear CSR Clock Range CR[2:0] bits */
 236:HALLIB/Src/stm32f7xx_hal_eth.c ****   tempreg &= ETH_MACMIIAR_CR_MASK;
 237:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 238:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Get hclk frequency value */
 239:HALLIB/Src/stm32f7xx_hal_eth.c ****   hclk = HAL_RCC_GetHCLKFreq();
 240:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 241:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set CR bits depending on hclk value */
 242:HALLIB/Src/stm32f7xx_hal_eth.c ****   if((hclk >= 20000000)&&(hclk < 35000000))
 243:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 244:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* CSR Clock Range between 20-35 MHz */
 245:HALLIB/Src/stm32f7xx_hal_eth.c ****     tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 246:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 247:HALLIB/Src/stm32f7xx_hal_eth.c ****   else if((hclk >= 35000000)&&(hclk < 60000000))
 248:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 249:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* CSR Clock Range between 35-60 MHz */ 
 250:HALLIB/Src/stm32f7xx_hal_eth.c ****     tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 251:HALLIB/Src/stm32f7xx_hal_eth.c ****   }  
 252:HALLIB/Src/stm32f7xx_hal_eth.c ****   else if((hclk >= 60000000)&&(hclk < 100000000))
 253:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 254:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* CSR Clock Range between 60-100 MHz */ 
 255:HALLIB/Src/stm32f7xx_hal_eth.c ****     tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 256:HALLIB/Src/stm32f7xx_hal_eth.c ****   }  
 257:HALLIB/Src/stm32f7xx_hal_eth.c ****   else if((hclk >= 100000000)&&(hclk < 150000000))
 258:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 259:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* CSR Clock Range between 100-150 MHz */ 
ARM GAS  /tmp/cc7Dq4FC.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_eth.c ****     tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 261:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 262:HALLIB/Src/stm32f7xx_hal_eth.c ****   else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
 263:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 264:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* CSR Clock Range between 150-216 MHz */ 
 265:HALLIB/Src/stm32f7xx_hal_eth.c ****     tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 266:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 267:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 268:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
 269:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 270:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 271:HALLIB/Src/stm32f7xx_hal_eth.c ****   /*-------------------- PHY initialization and configuration ----------------*/
 272:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Put the PHY in reset mode */
 273:HALLIB/Src/stm32f7xx_hal_eth.c ****   if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 274:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 275:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* In case of write timeout */
 276:HALLIB/Src/stm32f7xx_hal_eth.c ****     err = ETH_ERROR;
 277:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 278:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Config MAC and DMA */
 279:HALLIB/Src/stm32f7xx_hal_eth.c ****     ETH_MACDMAConfig(heth, err);
 280:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 281:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the ETH peripheral state to READY */
 282:HALLIB/Src/stm32f7xx_hal_eth.c ****     heth->State = HAL_ETH_STATE_READY;
 283:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 284:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Return HAL_ERROR */
 285:HALLIB/Src/stm32f7xx_hal_eth.c ****     return HAL_ERROR;
 286:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 287:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 288:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Delay to assure PHY reset */
 289:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(PHY_RESET_DELAY);
 290:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 291:HALLIB/Src/stm32f7xx_hal_eth.c ****   if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 292:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 293:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Get tick */
 294:HALLIB/Src/stm32f7xx_hal_eth.c ****     tickstart = HAL_GetTick();
 295:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 296:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* We wait for linked status */
 297:HALLIB/Src/stm32f7xx_hal_eth.c ****     do
 298:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 299:HALLIB/Src/stm32f7xx_hal_eth.c ****       HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 300:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 301:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Check for the Timeout */
 302:HALLIB/Src/stm32f7xx_hal_eth.c ****       if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 303:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 304:HALLIB/Src/stm32f7xx_hal_eth.c ****         /* In case of write timeout */
 305:HALLIB/Src/stm32f7xx_hal_eth.c ****         err = ETH_ERROR;
 306:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 307:HALLIB/Src/stm32f7xx_hal_eth.c ****         /* Config MAC and DMA */
 308:HALLIB/Src/stm32f7xx_hal_eth.c ****         ETH_MACDMAConfig(heth, err);
 309:HALLIB/Src/stm32f7xx_hal_eth.c ****         
 310:HALLIB/Src/stm32f7xx_hal_eth.c ****         heth->State= HAL_ETH_STATE_READY;
 311:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 312:HALLIB/Src/stm32f7xx_hal_eth.c ****         /* Process Unlocked */
 313:HALLIB/Src/stm32f7xx_hal_eth.c ****         __HAL_UNLOCK(heth);
 314:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 315:HALLIB/Src/stm32f7xx_hal_eth.c ****         return HAL_TIMEOUT;
 316:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
ARM GAS  /tmp/cc7Dq4FC.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_eth.c ****     } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 318:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 319:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 320:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Enable Auto-Negotiation */
 321:HALLIB/Src/stm32f7xx_hal_eth.c ****     if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 322:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 323:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* In case of write timeout */
 324:HALLIB/Src/stm32f7xx_hal_eth.c ****       err = ETH_ERROR;
 325:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 326:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Config MAC and DMA */
 327:HALLIB/Src/stm32f7xx_hal_eth.c ****       ETH_MACDMAConfig(heth, err);
 328:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 329:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set the ETH peripheral state to READY */
 330:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->State = HAL_ETH_STATE_READY;
 331:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 332:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Return HAL_ERROR */
 333:HALLIB/Src/stm32f7xx_hal_eth.c ****       return HAL_ERROR;   
 334:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 335:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 336:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Get tick */
 337:HALLIB/Src/stm32f7xx_hal_eth.c ****     tickstart = HAL_GetTick();
 338:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 339:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Wait until the auto-negotiation will be completed */
 340:HALLIB/Src/stm32f7xx_hal_eth.c ****     do
 341:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 342:HALLIB/Src/stm32f7xx_hal_eth.c ****       HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 343:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 344:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Check for the Timeout */
 345:HALLIB/Src/stm32f7xx_hal_eth.c ****       if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 346:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 347:HALLIB/Src/stm32f7xx_hal_eth.c ****         /* In case of write timeout */
 348:HALLIB/Src/stm32f7xx_hal_eth.c ****         err = ETH_ERROR;
 349:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 350:HALLIB/Src/stm32f7xx_hal_eth.c ****         /* Config MAC and DMA */
 351:HALLIB/Src/stm32f7xx_hal_eth.c ****         ETH_MACDMAConfig(heth, err);
 352:HALLIB/Src/stm32f7xx_hal_eth.c ****         
 353:HALLIB/Src/stm32f7xx_hal_eth.c ****         heth->State= HAL_ETH_STATE_READY;
 354:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 355:HALLIB/Src/stm32f7xx_hal_eth.c ****         /* Process Unlocked */
 356:HALLIB/Src/stm32f7xx_hal_eth.c ****         __HAL_UNLOCK(heth);
 357:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 358:HALLIB/Src/stm32f7xx_hal_eth.c ****         return HAL_TIMEOUT;
 359:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
 360:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 361:HALLIB/Src/stm32f7xx_hal_eth.c ****     } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 362:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 363:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Read the result of the auto-negotiation */
 364:HALLIB/Src/stm32f7xx_hal_eth.c ****     if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 365:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 366:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* In case of write timeout */
 367:HALLIB/Src/stm32f7xx_hal_eth.c ****       err = ETH_ERROR;
 368:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 369:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Config MAC and DMA */
 370:HALLIB/Src/stm32f7xx_hal_eth.c ****       ETH_MACDMAConfig(heth, err);
 371:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 372:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set the ETH peripheral state to READY */
 373:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->State = HAL_ETH_STATE_READY;
ARM GAS  /tmp/cc7Dq4FC.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 375:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Return HAL_ERROR */
 376:HALLIB/Src/stm32f7xx_hal_eth.c ****       return HAL_ERROR;   
 377:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 378:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 379:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
 380:HALLIB/Src/stm32f7xx_hal_eth.c ****     if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 381:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 382:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
 383:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 384:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 385:HALLIB/Src/stm32f7xx_hal_eth.c ****     else
 386:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 387:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
 388:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 389:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 390:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Configure the MAC with the speed fixed by the auto-negotiation process */
 391:HALLIB/Src/stm32f7xx_hal_eth.c ****     if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 392:HALLIB/Src/stm32f7xx_hal_eth.c ****     {  
 393:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set Ethernet speed to 10M following the auto-negotiation */
 394:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->Init).Speed = ETH_SPEED_10M; 
 395:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 396:HALLIB/Src/stm32f7xx_hal_eth.c ****     else
 397:HALLIB/Src/stm32f7xx_hal_eth.c ****     {   
 398:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set Ethernet speed to 100M following the auto-negotiation */ 
 399:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->Init).Speed = ETH_SPEED_100M;
 400:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 401:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 402:HALLIB/Src/stm32f7xx_hal_eth.c ****   else /* AutoNegotiation Disable */
 403:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 404:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Check parameters */
 405:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_SPEED(heth->Init.Speed));
 406:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 407:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 408:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set MAC Speed and Duplex Mode */
 409:HALLIB/Src/stm32f7xx_hal_eth.c ****     if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 410:HALLIB/Src/stm32f7xx_hal_eth.c ****                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 411:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 412:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* In case of write timeout */
 413:HALLIB/Src/stm32f7xx_hal_eth.c ****       err = ETH_ERROR;
 414:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 415:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Config MAC and DMA */
 416:HALLIB/Src/stm32f7xx_hal_eth.c ****       ETH_MACDMAConfig(heth, err);
 417:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 418:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set the ETH peripheral state to READY */
 419:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->State = HAL_ETH_STATE_READY;
 420:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 421:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Return HAL_ERROR */
 422:HALLIB/Src/stm32f7xx_hal_eth.c ****       return HAL_ERROR;
 423:HALLIB/Src/stm32f7xx_hal_eth.c ****     }  
 424:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 425:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Delay to assure PHY configuration */
 426:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_Delay(PHY_CONFIG_DELAY);
 427:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 428:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 429:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Config MAC and DMA */
 430:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_MACDMAConfig(heth, err);
ARM GAS  /tmp/cc7Dq4FC.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 432:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set ETH HAL State to Ready */
 433:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State= HAL_ETH_STATE_READY;
 434:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 435:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
 436:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_OK;
 437:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 438:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 439:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 440:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  De-Initializes the ETH peripheral. 
 441:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 442:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
 443:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
 444:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 445:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_DeInit(ETH_HandleTypeDef *heth)
 446:HALLIB/Src/stm32f7xx_hal_eth.c **** {
 447:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH peripheral state to BUSY */
 448:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_BUSY;
 449:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 450:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* De-Init the low level hardware : GPIO, CLOCK, NVIC. */
 451:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_ETH_MspDeInit(heth);
 452:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 453:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set ETH HAL state to Disabled */
 454:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State= HAL_ETH_STATE_RESET;
 455:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 456:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Release Lock */
 457:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_UNLOCK(heth);
 458:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 459:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
 460:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_OK;
 461:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 462:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 463:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 464:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Initializes the DMA Tx descriptors in chain mode.
 465:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 466:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module  
 467:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  DMATxDescTab Pointer to the first Tx desc list 
 468:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  TxBuff Pointer to the first TxBuffer list
 469:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  TxBuffCount Number of the used Tx desc in the list
 470:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
 471:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 472:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescT
 473:HALLIB/Src/stm32f7xx_hal_eth.c **** {
 474:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t i = 0;
 475:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_DMADescTypeDef *dmatxdesc;
 476:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 477:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Locked */
 478:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_LOCK(heth);
 479:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 480:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH peripheral state to BUSY */
 481:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_BUSY;
 482:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 483:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
 484:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->TxDesc = DMATxDescTab;
 485:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 486:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Fill each DMATxDesc descriptor with the right values */   
 487:HALLIB/Src/stm32f7xx_hal_eth.c ****   for(i=0; i < TxBuffCount; i++)
ARM GAS  /tmp/cc7Dq4FC.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 489:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Get the pointer on the ith member of the Tx Desc list */
 490:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmatxdesc = DMATxDescTab + i;
 491:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 492:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set Second Address Chained bit */
 493:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 494:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 495:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set Buffer1 address pointer */
 496:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 497:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 498:HALLIB/Src/stm32f7xx_hal_eth.c ****     if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 499:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 500:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set the DMA Tx descriptors checksum insertion */
 501:HALLIB/Src/stm32f7xx_hal_eth.c ****       dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 502:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 503:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 504:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Initialize the next descriptor with the Next Descriptor Polling Enable */
 505:HALLIB/Src/stm32f7xx_hal_eth.c ****     if(i < (TxBuffCount-1))
 506:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 507:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set next descriptor address register with next descriptor base address */
 508:HALLIB/Src/stm32f7xx_hal_eth.c ****       dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 509:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 510:HALLIB/Src/stm32f7xx_hal_eth.c ****     else
 511:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 512:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* For last descriptor, set next descriptor address register equal to the first descriptor ba
 513:HALLIB/Src/stm32f7xx_hal_eth.c ****       dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 514:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 515:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 516:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 517:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set Transmit Descriptor List Address Register */
 518:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 519:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 520:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set ETH HAL State to Ready */
 521:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State= HAL_ETH_STATE_READY;
 522:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 523:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Unlocked */
 524:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_UNLOCK(heth);
 525:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 526:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
 527:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_OK;
 528:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 529:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 530:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 531:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Initializes the DMA Rx descriptors in chain mode.
 532:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 533:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module  
 534:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  DMARxDescTab Pointer to the first Rx desc list 
 535:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  RxBuff Pointer to the first RxBuffer list
 536:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  RxBuffCount Number of the used Rx desc in the list
 537:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
 538:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 539:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescT
 540:HALLIB/Src/stm32f7xx_hal_eth.c **** {
 541:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t i = 0;
 542:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_DMADescTypeDef *DMARxDesc;
 543:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 544:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Locked */
ARM GAS  /tmp/cc7Dq4FC.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_LOCK(heth);
 546:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 547:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH peripheral state to BUSY */
 548:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_BUSY;
 549:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 550:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
 551:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->RxDesc = DMARxDescTab; 
 552:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 553:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Fill each DMARxDesc descriptor with the right values */
 554:HALLIB/Src/stm32f7xx_hal_eth.c ****   for(i=0; i < RxBuffCount; i++)
 555:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 556:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Get the pointer on the ith member of the Rx Desc list */
 557:HALLIB/Src/stm32f7xx_hal_eth.c ****     DMARxDesc = DMARxDescTab+i;
 558:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 559:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set Own bit of the Rx descriptor Status */
 560:HALLIB/Src/stm32f7xx_hal_eth.c ****     DMARxDesc->Status = ETH_DMARXDESC_OWN;
 561:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 562:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set Buffer1 size and Second Address Chained bit */
 563:HALLIB/Src/stm32f7xx_hal_eth.c ****     DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 564:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 565:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set Buffer1 address pointer */
 566:HALLIB/Src/stm32f7xx_hal_eth.c ****     DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 567:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 568:HALLIB/Src/stm32f7xx_hal_eth.c ****     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 569:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 570:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Enable Ethernet DMA Rx Descriptor interrupt */
 571:HALLIB/Src/stm32f7xx_hal_eth.c ****       DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 572:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 573:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 574:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Initialize the next descriptor with the Next Descriptor Polling Enable */
 575:HALLIB/Src/stm32f7xx_hal_eth.c ****     if(i < (RxBuffCount-1))
 576:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 577:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set next descriptor address register with next descriptor base address */
 578:HALLIB/Src/stm32f7xx_hal_eth.c ****       DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 579:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 580:HALLIB/Src/stm32f7xx_hal_eth.c ****     else
 581:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 582:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* For last descriptor, set next descriptor address register equal to the first descriptor ba
 583:HALLIB/Src/stm32f7xx_hal_eth.c ****       DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 584:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 585:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 586:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 587:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set Receive Descriptor List Address Register */
 588:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 589:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 590:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set ETH HAL State to Ready */
 591:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State= HAL_ETH_STATE_READY;
 592:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 593:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Unlocked */
 594:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_UNLOCK(heth);
 595:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 596:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
 597:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_OK;
 598:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 599:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 600:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 601:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Initializes the ETH MSP.
ARM GAS  /tmp/cc7Dq4FC.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 603:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
 604:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
 605:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 606:HALLIB/Src/stm32f7xx_hal_eth.c **** __weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
 607:HALLIB/Src/stm32f7xx_hal_eth.c **** {
 608:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prevent unused argument(s) compilation warning */
 609:HALLIB/Src/stm32f7xx_hal_eth.c ****   UNUSED(heth);
 610:HALLIB/Src/stm32f7xx_hal_eth.c ****  
 611:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 612:HALLIB/Src/stm32f7xx_hal_eth.c ****   the HAL_ETH_MspInit could be implemented in the user file
 613:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 614:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 615:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 616:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 617:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  DeInitializes ETH MSP.
 618:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 619:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
 620:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
 621:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 622:HALLIB/Src/stm32f7xx_hal_eth.c **** __weak void HAL_ETH_MspDeInit(ETH_HandleTypeDef *heth)
 623:HALLIB/Src/stm32f7xx_hal_eth.c **** {
 624:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prevent unused argument(s) compilation warning */
 625:HALLIB/Src/stm32f7xx_hal_eth.c ****   UNUSED(heth);
 626:HALLIB/Src/stm32f7xx_hal_eth.c ****  
 627:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 628:HALLIB/Src/stm32f7xx_hal_eth.c ****   the HAL_ETH_MspDeInit could be implemented in the user file
 629:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 630:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 631:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 632:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 633:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @}
 634:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 635:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 636:HALLIB/Src/stm32f7xx_hal_eth.c **** /** @defgroup ETH_Exported_Functions_Group2 IO operation functions 
 637:HALLIB/Src/stm32f7xx_hal_eth.c ****   *  @brief   Data transfers functions 
 638:HALLIB/Src/stm32f7xx_hal_eth.c ****   *
 639:HALLIB/Src/stm32f7xx_hal_eth.c ****   @verbatim   
 640:HALLIB/Src/stm32f7xx_hal_eth.c ****   ==============================================================================
 641:HALLIB/Src/stm32f7xx_hal_eth.c ****                           ##### IO operation functions #####
 642:HALLIB/Src/stm32f7xx_hal_eth.c ****   ==============================================================================  
 643:HALLIB/Src/stm32f7xx_hal_eth.c ****   [..]  This section provides functions allowing to:
 644:HALLIB/Src/stm32f7xx_hal_eth.c ****         (+) Transmit a frame
 645:HALLIB/Src/stm32f7xx_hal_eth.c ****             HAL_ETH_TransmitFrame();
 646:HALLIB/Src/stm32f7xx_hal_eth.c ****         (+) Receive a frame
 647:HALLIB/Src/stm32f7xx_hal_eth.c ****             HAL_ETH_GetReceivedFrame();
 648:HALLIB/Src/stm32f7xx_hal_eth.c ****             HAL_ETH_GetReceivedFrame_IT();
 649:HALLIB/Src/stm32f7xx_hal_eth.c ****         (+) Read from an External PHY register
 650:HALLIB/Src/stm32f7xx_hal_eth.c ****             HAL_ETH_ReadPHYRegister();
 651:HALLIB/Src/stm32f7xx_hal_eth.c ****         (+) Write to an External PHY register
 652:HALLIB/Src/stm32f7xx_hal_eth.c ****             HAL_ETH_WritePHYRegister();
 653:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 654:HALLIB/Src/stm32f7xx_hal_eth.c ****   @endverbatim
 655:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 656:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @{
 657:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 658:HALLIB/Src/stm32f7xx_hal_eth.c **** 
ARM GAS  /tmp/cc7Dq4FC.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 660:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Sends an Ethernet frame. 
 661:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 662:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
 663:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  FrameLength Amount of data to be sent
 664:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
 665:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 666:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
 667:HALLIB/Src/stm32f7xx_hal_eth.c **** {
 668:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t bufcount = 0, size = 0, i = 0;
 669:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 670:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Locked */
 671:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_LOCK(heth);
 672:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 673:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH peripheral state to BUSY */
 674:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_BUSY;
 675:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 676:HALLIB/Src/stm32f7xx_hal_eth.c ****   if (FrameLength == 0) 
 677:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 678:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set ETH HAL state to READY */
 679:HALLIB/Src/stm32f7xx_hal_eth.c ****     heth->State = HAL_ETH_STATE_READY;
 680:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 681:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Process Unlocked */
 682:HALLIB/Src/stm32f7xx_hal_eth.c ****     __HAL_UNLOCK(heth);
 683:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 684:HALLIB/Src/stm32f7xx_hal_eth.c ****     return  HAL_ERROR;                                    
 685:HALLIB/Src/stm32f7xx_hal_eth.c ****   }  
 686:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 687:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
 688:HALLIB/Src/stm32f7xx_hal_eth.c ****   if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 689:HALLIB/Src/stm32f7xx_hal_eth.c ****   {  
 690:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* OWN bit set */
 691:HALLIB/Src/stm32f7xx_hal_eth.c ****     heth->State = HAL_ETH_STATE_BUSY_TX;
 692:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 693:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Process Unlocked */
 694:HALLIB/Src/stm32f7xx_hal_eth.c ****     __HAL_UNLOCK(heth);
 695:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 696:HALLIB/Src/stm32f7xx_hal_eth.c ****     return HAL_ERROR;
 697:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 698:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 699:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Get the number of needed Tx buffers for the current frame */
 700:HALLIB/Src/stm32f7xx_hal_eth.c ****   if (FrameLength > ETH_TX_BUF_SIZE)
 701:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 702:HALLIB/Src/stm32f7xx_hal_eth.c ****     bufcount = FrameLength/ETH_TX_BUF_SIZE;
 703:HALLIB/Src/stm32f7xx_hal_eth.c ****     if (FrameLength % ETH_TX_BUF_SIZE) 
 704:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 705:HALLIB/Src/stm32f7xx_hal_eth.c ****       bufcount++;
 706:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 707:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 708:HALLIB/Src/stm32f7xx_hal_eth.c ****   else 
 709:HALLIB/Src/stm32f7xx_hal_eth.c ****   {  
 710:HALLIB/Src/stm32f7xx_hal_eth.c ****     bufcount = 1;
 711:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 712:HALLIB/Src/stm32f7xx_hal_eth.c ****   if (bufcount == 1)
 713:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 714:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set LAST and FIRST segment */
 715:HALLIB/Src/stm32f7xx_hal_eth.c ****     heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
ARM GAS  /tmp/cc7Dq4FC.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set frame size */
 717:HALLIB/Src/stm32f7xx_hal_eth.c ****     heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 718:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
 719:HALLIB/Src/stm32f7xx_hal_eth.c ****     heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 720:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Point to next descriptor */
 721:HALLIB/Src/stm32f7xx_hal_eth.c ****     heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 722:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 723:HALLIB/Src/stm32f7xx_hal_eth.c ****   else
 724:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 725:HALLIB/Src/stm32f7xx_hal_eth.c ****     for (i=0; i< bufcount; i++)
 726:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 727:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Clear FIRST and LAST segment bits */
 728:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 729:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 730:HALLIB/Src/stm32f7xx_hal_eth.c ****       if (i == 0) 
 731:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 732:HALLIB/Src/stm32f7xx_hal_eth.c ****         /* Setting the first segment bit */
 733:HALLIB/Src/stm32f7xx_hal_eth.c ****         heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 734:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
 735:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 736:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Program size */
 737:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 738:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 739:HALLIB/Src/stm32f7xx_hal_eth.c ****       if (i == (bufcount-1))
 740:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 741:HALLIB/Src/stm32f7xx_hal_eth.c ****         /* Setting the last segment bit */
 742:HALLIB/Src/stm32f7xx_hal_eth.c ****         heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 743:HALLIB/Src/stm32f7xx_hal_eth.c ****         size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 744:HALLIB/Src/stm32f7xx_hal_eth.c ****         heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 745:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
 746:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 747:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
 748:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 749:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* point to next descriptor */
 750:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 751:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 752:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 753:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 754:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
 755:HALLIB/Src/stm32f7xx_hal_eth.c ****   if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 756:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 757:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Clear TBUS ETHERNET DMA flag */
 758:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 759:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Resume DMA transmission*/
 760:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->DMATPDR = 0;
 761:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 762:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 763:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set ETH HAL State to Ready */
 764:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_READY;
 765:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 766:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Unlocked */
 767:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_UNLOCK(heth);
 768:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 769:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
 770:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_OK;
 771:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 772:HALLIB/Src/stm32f7xx_hal_eth.c **** 
ARM GAS  /tmp/cc7Dq4FC.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 774:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Checks for received frames. 
 775:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 776:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
 777:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
 778:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 779:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
 780:HALLIB/Src/stm32f7xx_hal_eth.c **** {
 781:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t framelength = 0;
 782:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 783:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Locked */
 784:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_LOCK(heth);
 785:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 786:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check the ETH state to BUSY */
 787:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_BUSY;
 788:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 789:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check if segment is not owned by DMA */
 790:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & E
 791:HALLIB/Src/stm32f7xx_hal_eth.c ****   if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 792:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 793:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Check if last segment */
 794:HALLIB/Src/stm32f7xx_hal_eth.c ****     if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 795:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 796:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* increment segment count */
 797:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->RxFrameInfos).SegCount++;
 798:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 799:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Check if last segment is first segment: one segment contains the frame */
 800:HALLIB/Src/stm32f7xx_hal_eth.c ****       if ((heth->RxFrameInfos).SegCount == 1)
 801:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 802:HALLIB/Src/stm32f7xx_hal_eth.c ****         (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 803:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
 804:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 805:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 806:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 807:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
 808:HALLIB/Src/stm32f7xx_hal_eth.c ****       framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT)
 809:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxFrameInfos.length = framelength;
 810:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 811:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Get the address of the buffer start address */
 812:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 813:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* point to next descriptor */
 814:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 815:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 816:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set HAL State to Ready */
 817:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->State = HAL_ETH_STATE_READY;
 818:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 819:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Process Unlocked */
 820:HALLIB/Src/stm32f7xx_hal_eth.c ****       __HAL_UNLOCK(heth);
 821:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 822:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Return function status */
 823:HALLIB/Src/stm32f7xx_hal_eth.c ****       return HAL_OK;
 824:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 825:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Check if first segment */
 826:HALLIB/Src/stm32f7xx_hal_eth.c ****     else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 827:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 828:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 829:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->RxFrameInfos).LSRxDesc = NULL;
ARM GAS  /tmp/cc7Dq4FC.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->RxFrameInfos).SegCount = 1;
 831:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Point to next descriptor */
 832:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 833:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 834:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Check if intermediate segment */ 
 835:HALLIB/Src/stm32f7xx_hal_eth.c ****     else
 836:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 837:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->RxFrameInfos).SegCount++;
 838:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Point to next descriptor */
 839:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 840:HALLIB/Src/stm32f7xx_hal_eth.c ****     } 
 841:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 842:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 843:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set ETH HAL State to Ready */
 844:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_READY;
 845:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 846:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Unlocked */
 847:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_UNLOCK(heth);
 848:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 849:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
 850:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_ERROR;
 851:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 852:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 853:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 854:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Gets the Received frame in interrupt mode. 
 855:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 856:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
 857:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
 858:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
 859:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
 860:HALLIB/Src/stm32f7xx_hal_eth.c **** {
 861:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t descriptorscancounter = 0;
 862:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 863:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Locked */
 864:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_LOCK(heth);
 865:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 866:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set ETH HAL State to BUSY */
 867:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_BUSY;
 868:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 869:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Scan descriptors owned by CPU */
 870:HALLIB/Src/stm32f7xx_hal_eth.c ****   while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter 
 871:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 872:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Just for security */
 873:HALLIB/Src/stm32f7xx_hal_eth.c ****     descriptorscancounter++;
 874:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 875:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Check if first segment in frame */
 876:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & E
 877:HALLIB/Src/stm32f7xx_hal_eth.c ****     if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS
 878:HALLIB/Src/stm32f7xx_hal_eth.c ****     { 
 879:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 880:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxFrameInfos.SegCount = 1;   
 881:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Point to next descriptor */
 882:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 883:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 884:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Check if intermediate segment */
 885:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ET
 886:HALLIB/Src/stm32f7xx_hal_eth.c ****     else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
ARM GAS  /tmp/cc7Dq4FC.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 888:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Increment segment count */
 889:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->RxFrameInfos.SegCount)++;
 890:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Point to next descriptor */
 891:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 892:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 893:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Should be last segment */
 894:HALLIB/Src/stm32f7xx_hal_eth.c ****     else
 895:HALLIB/Src/stm32f7xx_hal_eth.c ****     { 
 896:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Last segment */
 897:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 898:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 899:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Increment segment count */
 900:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->RxFrameInfos.SegCount)++;
 901:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 902:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Check if last segment is first segment: one segment contains the frame */
 903:HALLIB/Src/stm32f7xx_hal_eth.c ****       if ((heth->RxFrameInfos.SegCount) == 1)
 904:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 905:HALLIB/Src/stm32f7xx_hal_eth.c ****         heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 906:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
 907:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 908:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
 909:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRA
 910:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 911:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Get the address of the buffer start address */ 
 912:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 913:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 914:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Point to next descriptor */      
 915:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 916:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 917:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Set HAL State to Ready */
 918:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->State = HAL_ETH_STATE_READY;
 919:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 920:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Process Unlocked */
 921:HALLIB/Src/stm32f7xx_hal_eth.c ****       __HAL_UNLOCK(heth);
 922:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 923:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Return function status */
 924:HALLIB/Src/stm32f7xx_hal_eth.c ****       return HAL_OK;
 925:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 926:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 927:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 928:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set HAL State to Ready */
 929:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_READY;
 930:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 931:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Unlocked */
 932:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_UNLOCK(heth);
 933:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 934:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
 935:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_ERROR;
 936:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 937:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 938:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 939:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  This function handles ETH interrupt request.
 940:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 941:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
 942:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
 943:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
ARM GAS  /tmp/cc7Dq4FC.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_eth.c **** void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
 945:HALLIB/Src/stm32f7xx_hal_eth.c **** {
 946:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Frame received */
 947:HALLIB/Src/stm32f7xx_hal_eth.c ****   if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 948:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 949:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Receive complete callback */
 950:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_ETH_RxCpltCallback(heth);
 951:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 952:HALLIB/Src/stm32f7xx_hal_eth.c ****      /* Clear the Eth DMA Rx IT pending bits */
 953:HALLIB/Src/stm32f7xx_hal_eth.c ****     __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 954:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 955:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set HAL State to Ready */
 956:HALLIB/Src/stm32f7xx_hal_eth.c ****     heth->State = HAL_ETH_STATE_READY;
 957:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 958:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Process Unlocked */
 959:HALLIB/Src/stm32f7xx_hal_eth.c ****     __HAL_UNLOCK(heth);
 960:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 961:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 962:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Frame transmitted */
 963:HALLIB/Src/stm32f7xx_hal_eth.c ****   else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 964:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 965:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Transfer complete callback */
 966:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_ETH_TxCpltCallback(heth);
 967:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 968:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Clear the Eth DMA Tx IT pending bits */
 969:HALLIB/Src/stm32f7xx_hal_eth.c ****     __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 970:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 971:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set HAL State to Ready */
 972:HALLIB/Src/stm32f7xx_hal_eth.c ****     heth->State = HAL_ETH_STATE_READY;
 973:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 974:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Process Unlocked */
 975:HALLIB/Src/stm32f7xx_hal_eth.c ****     __HAL_UNLOCK(heth);
 976:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 977:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 978:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Clear the interrupt flags */
 979:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 980:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 981:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* ETH DMA Error */
 982:HALLIB/Src/stm32f7xx_hal_eth.c ****   if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 983:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 984:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Ethernet Error callback */
 985:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_ETH_ErrorCallback(heth);
 986:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 987:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Clear the interrupt flags */
 988:HALLIB/Src/stm32f7xx_hal_eth.c ****     __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 989:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 990:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set HAL State to Ready */
 991:HALLIB/Src/stm32f7xx_hal_eth.c ****     heth->State = HAL_ETH_STATE_READY;
 992:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 993:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Process Unlocked */
 994:HALLIB/Src/stm32f7xx_hal_eth.c ****     __HAL_UNLOCK(heth);
 995:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 996:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 997:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 998:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
 999:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Tx Transfer completed callbacks.
1000:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
ARM GAS  /tmp/cc7Dq4FC.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
1002:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
1003:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1004:HALLIB/Src/stm32f7xx_hal_eth.c **** __weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
1005:HALLIB/Src/stm32f7xx_hal_eth.c **** {
1006:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prevent unused argument(s) compilation warning */
1007:HALLIB/Src/stm32f7xx_hal_eth.c ****   UNUSED(heth);
1008:HALLIB/Src/stm32f7xx_hal_eth.c ****  
1009:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1010:HALLIB/Src/stm32f7xx_hal_eth.c ****   the HAL_ETH_TxCpltCallback could be implemented in the user file
1011:HALLIB/Src/stm32f7xx_hal_eth.c ****   */ 
1012:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1013:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1014:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1015:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Rx Transfer completed callbacks.
1016:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1017:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
1018:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
1019:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1020:HALLIB/Src/stm32f7xx_hal_eth.c **** __weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
1021:HALLIB/Src/stm32f7xx_hal_eth.c **** {
1022:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prevent unused argument(s) compilation warning */
1023:HALLIB/Src/stm32f7xx_hal_eth.c ****   UNUSED(heth);
1024:HALLIB/Src/stm32f7xx_hal_eth.c ****  
1025:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1026:HALLIB/Src/stm32f7xx_hal_eth.c ****   the HAL_ETH_TxCpltCallback could be implemented in the user file
1027:HALLIB/Src/stm32f7xx_hal_eth.c ****   */ 
1028:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1029:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1030:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1031:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Ethernet transfer error callbacks
1032:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1033:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
1034:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
1035:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1036:HALLIB/Src/stm32f7xx_hal_eth.c **** __weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
1037:HALLIB/Src/stm32f7xx_hal_eth.c **** {
1038:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prevent unused argument(s) compilation warning */
1039:HALLIB/Src/stm32f7xx_hal_eth.c ****   UNUSED(heth);
1040:HALLIB/Src/stm32f7xx_hal_eth.c ****  
1041:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1042:HALLIB/Src/stm32f7xx_hal_eth.c ****   the HAL_ETH_TxCpltCallback could be implemented in the user file
1043:HALLIB/Src/stm32f7xx_hal_eth.c ****   */ 
1044:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1045:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1046:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1047:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Reads a PHY register
1048:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1049:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module                  
1050:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param PHYReg PHY register address, is the index of one of the 32 PHY register. 
1051:HALLIB/Src/stm32f7xx_hal_eth.c ****   *                This parameter can be one of the following values: 
1052:HALLIB/Src/stm32f7xx_hal_eth.c ****   *                   PHY_BCR: Transceiver Basic Control Register, 
1053:HALLIB/Src/stm32f7xx_hal_eth.c ****   *                   PHY_BSR: Transceiver Basic Status Register.   
1054:HALLIB/Src/stm32f7xx_hal_eth.c ****   *                   More PHY register could be read depending on the used PHY
1055:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param RegValue PHY register value                  
1056:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
1057:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
ARM GAS  /tmp/cc7Dq4FC.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegVa
1059:HALLIB/Src/stm32f7xx_hal_eth.c **** {
1060:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;     
1061:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tickstart = 0;
1062:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1063:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check parameters */
1064:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
1065:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1066:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check the ETH peripheral state */
1067:HALLIB/Src/stm32f7xx_hal_eth.c ****   if(heth->State == HAL_ETH_STATE_BUSY_RD)
1068:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
1069:HALLIB/Src/stm32f7xx_hal_eth.c ****     return HAL_BUSY;
1070:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
1071:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set ETH HAL State to BUSY_RD */
1072:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_BUSY_RD;
1073:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1074:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Get the ETHERNET MACMIIAR value */
1075:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = heth->Instance->MACMIIAR;
1076:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1077:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Keep only the CSR Clock Range CR[2:0] bits value */
1078:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg &= ~ETH_MACMIIAR_CR_MASK;
1079:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1080:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prepare the MII address register value */
1081:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device addre
1082:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register add
1083:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode       
1084:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit    
1085:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1086:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Write the result value into the MII Address register */
1087:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->Instance->MACMIIAR = tmpreg;
1088:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1089:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Get tick */
1090:HALLIB/Src/stm32f7xx_hal_eth.c ****   tickstart = HAL_GetTick();
1091:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1092:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check for the Busy flag */
1093:HALLIB/Src/stm32f7xx_hal_eth.c ****   while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
1094:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
1095:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Check for the Timeout */
1096:HALLIB/Src/stm32f7xx_hal_eth.c ****     if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
1097:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
1098:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->State= HAL_ETH_STATE_READY;
1099:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1100:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Process Unlocked */
1101:HALLIB/Src/stm32f7xx_hal_eth.c ****       __HAL_UNLOCK(heth);
1102:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1103:HALLIB/Src/stm32f7xx_hal_eth.c ****       return HAL_TIMEOUT;
1104:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
1105:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1106:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg = heth->Instance->MACMIIAR;
1107:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
1108:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1109:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Get MACMIIDR value */
1110:HALLIB/Src/stm32f7xx_hal_eth.c ****   *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
1111:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1112:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set ETH HAL State to READY */
1113:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_READY;
1114:HALLIB/Src/stm32f7xx_hal_eth.c ****   
ARM GAS  /tmp/cc7Dq4FC.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
1116:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_OK;
1117:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1118:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1119:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1120:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Writes to a PHY register.
1121:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1122:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module  
1123:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  PHYReg PHY register address, is the index of one of the 32 PHY register. 
1124:HALLIB/Src/stm32f7xx_hal_eth.c ****   *          This parameter can be one of the following values: 
1125:HALLIB/Src/stm32f7xx_hal_eth.c ****   *             PHY_BCR: Transceiver Control Register.  
1126:HALLIB/Src/stm32f7xx_hal_eth.c ****   *             More PHY register could be written depending on the used PHY
1127:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  RegValue the value to write
1128:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
1129:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1130:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegVa
1131:HALLIB/Src/stm32f7xx_hal_eth.c **** {
1132:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;
1133:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tickstart = 0;
1134:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1135:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check parameters */
1136:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
1137:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1138:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check the ETH peripheral state */
1139:HALLIB/Src/stm32f7xx_hal_eth.c ****   if(heth->State == HAL_ETH_STATE_BUSY_WR)
1140:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
1141:HALLIB/Src/stm32f7xx_hal_eth.c ****     return HAL_BUSY;
1142:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
1143:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set ETH HAL State to BUSY_WR */
1144:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_BUSY_WR;
1145:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1146:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Get the ETHERNET MACMIIAR value */
1147:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = heth->Instance->MACMIIAR;
1148:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1149:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Keep only the CSR Clock Range CR[2:0] bits value */
1150:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg &= ~ETH_MACMIIAR_CR_MASK;
1151:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1152:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prepare the MII register address value */
1153:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address
1154:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register addre
1155:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
1156:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
1157:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1158:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Give the value to the MII data register */
1159:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->Instance->MACMIIDR = (uint16_t)RegValue;
1160:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1161:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Write the result value into the MII Address register */
1162:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->Instance->MACMIIAR = tmpreg;
1163:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1164:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Get tick */
1165:HALLIB/Src/stm32f7xx_hal_eth.c ****   tickstart = HAL_GetTick();
1166:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1167:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check for the Busy flag */
1168:HALLIB/Src/stm32f7xx_hal_eth.c ****   while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
1169:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
1170:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Check for the Timeout */
1171:HALLIB/Src/stm32f7xx_hal_eth.c ****     if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
ARM GAS  /tmp/cc7Dq4FC.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
1173:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->State= HAL_ETH_STATE_READY;
1174:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1175:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Process Unlocked */
1176:HALLIB/Src/stm32f7xx_hal_eth.c ****       __HAL_UNLOCK(heth);
1177:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1178:HALLIB/Src/stm32f7xx_hal_eth.c ****       return HAL_TIMEOUT;
1179:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
1180:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1181:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg = heth->Instance->MACMIIAR;
1182:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
1183:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1184:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set ETH HAL State to READY */
1185:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_READY;
1186:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1187:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
1188:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_OK; 
1189:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1190:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1191:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1192:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @}
1193:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1194:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1195:HALLIB/Src/stm32f7xx_hal_eth.c **** /** @defgroup ETH_Exported_Functions_Group3 Peripheral Control functions
1196:HALLIB/Src/stm32f7xx_hal_eth.c ****  *  @brief    Peripheral Control functions 
1197:HALLIB/Src/stm32f7xx_hal_eth.c ****  *
1198:HALLIB/Src/stm32f7xx_hal_eth.c **** @verbatim   
1199:HALLIB/Src/stm32f7xx_hal_eth.c ****  ===============================================================================
1200:HALLIB/Src/stm32f7xx_hal_eth.c ****                   ##### Peripheral Control functions #####
1201:HALLIB/Src/stm32f7xx_hal_eth.c ****  ===============================================================================  
1202:HALLIB/Src/stm32f7xx_hal_eth.c ****     [..]  This section provides functions allowing to:
1203:HALLIB/Src/stm32f7xx_hal_eth.c ****       (+) Enable MAC and DMA transmission and reception.
1204:HALLIB/Src/stm32f7xx_hal_eth.c ****           HAL_ETH_Start();
1205:HALLIB/Src/stm32f7xx_hal_eth.c ****       (+) Disable MAC and DMA transmission and reception. 
1206:HALLIB/Src/stm32f7xx_hal_eth.c ****           HAL_ETH_Stop();
1207:HALLIB/Src/stm32f7xx_hal_eth.c ****       (+) Set the MAC configuration in runtime mode
1208:HALLIB/Src/stm32f7xx_hal_eth.c ****           HAL_ETH_ConfigMAC();
1209:HALLIB/Src/stm32f7xx_hal_eth.c ****       (+) Set the DMA configuration in runtime mode
1210:HALLIB/Src/stm32f7xx_hal_eth.c ****           HAL_ETH_ConfigDMA();
1211:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1212:HALLIB/Src/stm32f7xx_hal_eth.c **** @endverbatim
1213:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @{
1214:HALLIB/Src/stm32f7xx_hal_eth.c ****   */ 
1215:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1216:HALLIB/Src/stm32f7xx_hal_eth.c ****  /**
1217:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Enables Ethernet MAC and DMA reception/transmission 
1218:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1219:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
1220:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
1221:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1222:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
1223:HALLIB/Src/stm32f7xx_hal_eth.c **** {  
1224:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Locked */
1225:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_LOCK(heth);
1226:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1227:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH peripheral state to BUSY */
1228:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_BUSY;
ARM GAS  /tmp/cc7Dq4FC.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1230:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Enable transmit state machine of the MAC for transmission on the MII */
1231:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_MACTransmissionEnable(heth);
1232:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1233:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Enable receive state machine of the MAC for reception from the MII */
1234:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_MACReceptionEnable(heth);
1235:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1236:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Flush Transmit FIFO */
1237:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_FlushTransmitFIFO(heth);
1238:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1239:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Start DMA transmission */
1240:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_DMATransmissionEnable(heth);
1241:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1242:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Start DMA reception */
1243:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_DMAReceptionEnable(heth);
1244:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1245:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH state to READY*/
1246:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State= HAL_ETH_STATE_READY;
1247:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1248:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Unlocked */
1249:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_UNLOCK(heth);
1250:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1251:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
1252:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_OK;
1253:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1254:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1255:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1256:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Stop Ethernet MAC and DMA reception/transmission 
1257:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1258:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
1259:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
1260:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1261:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
1262:HALLIB/Src/stm32f7xx_hal_eth.c **** {  
1263:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Locked */
1264:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_LOCK(heth);
1265:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1266:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH peripheral state to BUSY */
1267:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_BUSY;
1268:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1269:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Stop DMA transmission */
1270:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_DMATransmissionDisable(heth);
1271:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1272:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Stop DMA reception */
1273:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_DMAReceptionDisable(heth);
1274:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1275:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Disable receive state machine of the MAC for reception from the MII */
1276:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_MACReceptionDisable(heth);
1277:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1278:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Flush Transmit FIFO */
1279:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_FlushTransmitFIFO(heth);
1280:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1281:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Disable transmit state machine of the MAC for transmission on the MII */
1282:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_MACTransmissionDisable(heth);
1283:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1284:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH state*/
1285:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State = HAL_ETH_STATE_READY;
ARM GAS  /tmp/cc7Dq4FC.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1287:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Unlocked */
1288:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_UNLOCK(heth);
1289:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1290:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
1291:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_OK;
1292:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1293:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1294:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1295:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Set ETH MAC Configuration.
1296:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1297:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
1298:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  macconf MAC Configuration structure  
1299:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
1300:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1301:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
1302:HALLIB/Src/stm32f7xx_hal_eth.c **** {
1303:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;
1304:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1305:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Locked */
1306:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_LOCK(heth);
1307:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1308:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH peripheral state to BUSY */
1309:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State= HAL_ETH_STATE_BUSY;
1310:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1311:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_SPEED(heth->Init.Speed));
1312:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
1313:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1314:HALLIB/Src/stm32f7xx_hal_eth.c ****   if (macconf != NULL)
1315:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
1316:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Check the parameters */
1317:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
1318:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_JABBER(macconf->Jabber));
1319:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
1320:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
1321:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
1322:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
1323:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
1324:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
1325:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
1326:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
1327:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
1328:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
1329:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
1330:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
1331:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
1332:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
1333:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
1334:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
1335:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
1336:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
1337:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
1338:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
1339:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
1340:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
1341:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
1342:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
ARM GAS  /tmp/cc7Dq4FC.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_eth.c ****     assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
1344:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1345:HALLIB/Src/stm32f7xx_hal_eth.c ****     /*------------------------ ETHERNET MACCR Configuration --------------------*/
1346:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Get the ETHERNET MACCR value */
1347:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg = (heth->Instance)->MACCR;
1348:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Clear WD, PCE, PS, TE and RE bits */
1349:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg &= ETH_MACCR_CLEAR_MASK;
1350:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1351:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg |= (uint32_t)(macconf->Watchdog | 
1352:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->Jabber | 
1353:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->InterFrameGap |
1354:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->CarrierSense |
1355:HALLIB/Src/stm32f7xx_hal_eth.c ****                          (heth->Init).Speed | 
1356:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->ReceiveOwn |
1357:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->LoopbackMode |
1358:HALLIB/Src/stm32f7xx_hal_eth.c ****                          (heth->Init).DuplexMode | 
1359:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->ChecksumOffload |    
1360:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->RetryTransmission | 
1361:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->AutomaticPadCRCStrip | 
1362:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->BackOffLimit | 
1363:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->DeferralCheck);
1364:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1365:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Write to ETHERNET MACCR */
1366:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->MACCR = (uint32_t)tmpreg;
1367:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1368:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Wait until the write operation will be taken into account :
1369:HALLIB/Src/stm32f7xx_hal_eth.c ****     at least four TX_CLK/RX_CLK clock cycles */
1370:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg = (heth->Instance)->MACCR;
1371:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_Delay(ETH_REG_WRITE_DELAY);
1372:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->MACCR = tmpreg; 
1373:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1374:HALLIB/Src/stm32f7xx_hal_eth.c ****     /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
1375:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Write to ETHERNET MACFFR */  
1376:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
1377:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->SourceAddrFilter |
1378:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->PassControlFrames |
1379:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->BroadcastFramesReception | 
1380:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->DestinationAddrFilter |
1381:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->PromiscuousMode |
1382:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->MulticastFramesFilter |
1383:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->UnicastFramesFilter);
1384:HALLIB/Src/stm32f7xx_hal_eth.c ****      
1385:HALLIB/Src/stm32f7xx_hal_eth.c ****      /* Wait until the write operation will be taken into account :
1386:HALLIB/Src/stm32f7xx_hal_eth.c ****      at least four TX_CLK/RX_CLK clock cycles */
1387:HALLIB/Src/stm32f7xx_hal_eth.c ****      tmpreg = (heth->Instance)->MACFFR;
1388:HALLIB/Src/stm32f7xx_hal_eth.c ****      HAL_Delay(ETH_REG_WRITE_DELAY);
1389:HALLIB/Src/stm32f7xx_hal_eth.c ****      (heth->Instance)->MACFFR = tmpreg;
1390:HALLIB/Src/stm32f7xx_hal_eth.c ****      
1391:HALLIB/Src/stm32f7xx_hal_eth.c ****      /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
1392:HALLIB/Src/stm32f7xx_hal_eth.c ****      /* Write to ETHERNET MACHTHR */
1393:HALLIB/Src/stm32f7xx_hal_eth.c ****      (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
1394:HALLIB/Src/stm32f7xx_hal_eth.c ****      
1395:HALLIB/Src/stm32f7xx_hal_eth.c ****      /* Write to ETHERNET MACHTLR */
1396:HALLIB/Src/stm32f7xx_hal_eth.c ****      (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
1397:HALLIB/Src/stm32f7xx_hal_eth.c ****      /*----------------------- ETHERNET MACFCR Configuration --------------------*/
1398:HALLIB/Src/stm32f7xx_hal_eth.c ****      
1399:HALLIB/Src/stm32f7xx_hal_eth.c ****      /* Get the ETHERNET MACFCR value */  
ARM GAS  /tmp/cc7Dq4FC.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_eth.c ****      tmpreg = (heth->Instance)->MACFCR;
1401:HALLIB/Src/stm32f7xx_hal_eth.c ****      /* Clear xx bits */
1402:HALLIB/Src/stm32f7xx_hal_eth.c ****      tmpreg &= ETH_MACFCR_CLEAR_MASK;
1403:HALLIB/Src/stm32f7xx_hal_eth.c ****      
1404:HALLIB/Src/stm32f7xx_hal_eth.c ****      tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
1405:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->ZeroQuantaPause |
1406:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->PauseLowThreshold |
1407:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->UnicastPauseFrameDetect | 
1408:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->ReceiveFlowControl |
1409:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->TransmitFlowControl); 
1410:HALLIB/Src/stm32f7xx_hal_eth.c ****      
1411:HALLIB/Src/stm32f7xx_hal_eth.c ****      /* Write to ETHERNET MACFCR */
1412:HALLIB/Src/stm32f7xx_hal_eth.c ****      (heth->Instance)->MACFCR = (uint32_t)tmpreg;
1413:HALLIB/Src/stm32f7xx_hal_eth.c ****      
1414:HALLIB/Src/stm32f7xx_hal_eth.c ****      /* Wait until the write operation will be taken into account :
1415:HALLIB/Src/stm32f7xx_hal_eth.c ****      at least four TX_CLK/RX_CLK clock cycles */
1416:HALLIB/Src/stm32f7xx_hal_eth.c ****      tmpreg = (heth->Instance)->MACFCR;
1417:HALLIB/Src/stm32f7xx_hal_eth.c ****      HAL_Delay(ETH_REG_WRITE_DELAY);
1418:HALLIB/Src/stm32f7xx_hal_eth.c ****      (heth->Instance)->MACFCR = tmpreg;
1419:HALLIB/Src/stm32f7xx_hal_eth.c ****      
1420:HALLIB/Src/stm32f7xx_hal_eth.c ****      /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
1421:HALLIB/Src/stm32f7xx_hal_eth.c ****      (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
1422:HALLIB/Src/stm32f7xx_hal_eth.c ****                                               macconf->VLANTagIdentifier);
1423:HALLIB/Src/stm32f7xx_hal_eth.c ****       
1424:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Wait until the write operation will be taken into account :
1425:HALLIB/Src/stm32f7xx_hal_eth.c ****       at least four TX_CLK/RX_CLK clock cycles */
1426:HALLIB/Src/stm32f7xx_hal_eth.c ****       tmpreg = (heth->Instance)->MACVLANTR;
1427:HALLIB/Src/stm32f7xx_hal_eth.c ****       HAL_Delay(ETH_REG_WRITE_DELAY);
1428:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->Instance)->MACVLANTR = tmpreg;
1429:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
1430:HALLIB/Src/stm32f7xx_hal_eth.c ****   else /* macconf == NULL : here we just configure Speed and Duplex mode */
1431:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
1432:HALLIB/Src/stm32f7xx_hal_eth.c ****     /*------------------------ ETHERNET MACCR Configuration --------------------*/
1433:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Get the ETHERNET MACCR value */
1434:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg = (heth->Instance)->MACCR;
1435:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1436:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Clear FES and DM bits */
1437:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg &= ~((uint32_t)0x00004800);
1438:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1439:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
1440:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1441:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Write to ETHERNET MACCR */
1442:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->MACCR = (uint32_t)tmpreg;
1443:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1444:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Wait until the write operation will be taken into account:
1445:HALLIB/Src/stm32f7xx_hal_eth.c ****     at least four TX_CLK/RX_CLK clock cycles */
1446:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg = (heth->Instance)->MACCR;
1447:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_Delay(ETH_REG_WRITE_DELAY);
1448:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->MACCR = tmpreg;
1449:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
1450:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1451:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH state to Ready */
1452:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State= HAL_ETH_STATE_READY;
1453:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1454:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Unlocked */
1455:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_UNLOCK(heth);
1456:HALLIB/Src/stm32f7xx_hal_eth.c ****   
ARM GAS  /tmp/cc7Dq4FC.s 			page 27


1457:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return function status */
1458:HALLIB/Src/stm32f7xx_hal_eth.c ****   return HAL_OK;  
1459:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1460:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1461:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1462:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Sets ETH DMA Configuration.
1463:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1464:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
1465:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  dmaconf DMA Configuration structure  
1466:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
1467:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1468:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_StatusTypeDef HAL_ETH_ConfigDMA(ETH_HandleTypeDef *heth, ETH_DMAInitTypeDef *dmaconf)
1469:HALLIB/Src/stm32f7xx_hal_eth.c **** {
1470:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;
1471:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1472:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Locked */
1473:HALLIB/Src/stm32f7xx_hal_eth.c ****   __HAL_LOCK(heth);
1474:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1475:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH peripheral state to BUSY */
1476:HALLIB/Src/stm32f7xx_hal_eth.c ****   heth->State= HAL_ETH_STATE_BUSY;
1477:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1478:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check parameters */
1479:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_DROP_TCPIP_CHECKSUM_FRAME(dmaconf->DropTCPIPChecksumErrorFrame));
1480:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_RECEIVE_STORE_FORWARD(dmaconf->ReceiveStoreForward));
1481:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_FLUSH_RECEIVE_FRAME(dmaconf->FlushReceivedFrame));
1482:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_TRANSMIT_STORE_FORWARD(dmaconf->TransmitStoreForward));
1483:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_TRANSMIT_THRESHOLD_CONTROL(dmaconf->TransmitThresholdControl));
1484:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_FORWARD_ERROR_FRAMES(dmaconf->ForwardErrorFrames));
1485:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_FORWARD_UNDERSIZED_GOOD_FRAMES(dmaconf->ForwardUndersizedGoodFrames));
1486:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_RECEIVE_THRESHOLD_CONTROL(dmaconf->ReceiveThresholdControl));
1487:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_SECOND_FRAME_OPERATE(dmaconf->SecondFrameOperate));
1488:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_ADDRESS_ALIGNED_BEATS(dmaconf->AddressAlignedBeats));
1489:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_FIXED_BURST(dmaconf->FixedBurst));
1490:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_RXDMA_BURST_LENGTH(dmaconf->RxDMABurstLength));
1491:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_TXDMA_BURST_LENGTH(dmaconf->TxDMABurstLength));
1492:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_ENHANCED_DESCRIPTOR_FORMAT(dmaconf->EnhancedDescriptorFormat));
1493:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_DMA_DESC_SKIP_LENGTH(dmaconf->DescriptorSkipLength));
1494:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_DMA_ARBITRATION_ROUNDROBIN_RXTX(dmaconf->DMAArbitration));
1495:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1496:HALLIB/Src/stm32f7xx_hal_eth.c ****   /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
1497:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Get the ETHERNET DMAOMR value */
1498:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = (heth->Instance)->DMAOMR;
1499:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Clear xx bits */
1500:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg &= ETH_DMAOMR_CLEAR_MASK;
1501:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1502:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |= (uint32_t)(dmaconf->DropTCPIPChecksumErrorFrame | 
1503:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ReceiveStoreForward |
1504:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->FlushReceivedFrame |
1505:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->TransmitStoreForward | 
1506:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->TransmitThresholdControl |
1507:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ForwardErrorFrames |
1508:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ForwardUndersizedGoodFrames |
1509:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ReceiveThresholdControl |
1510:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->SecondFrameOperate);
1511:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1512:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Write to ETHERNET DMAOMR */
1513:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
ARM GAS  /tmp/cc7Dq4FC.s 			page 28


1514:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1515:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Wait until the write operation will be taken into account:
1516:HALLIB/Src/stm32f7xx_hal_eth.c ****   at least four TX_CLK/RX_CLK clock cycles */
1517:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = (heth->Instance)->DMAOMR;
1518:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
1519:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMAOMR = tmpreg;
1520:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1521:HALLIB/Src/stm32f7xx_hal_eth.c ****   /*----------------------- ETHERNET DMABMR Configuration --------------------*/
1522:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMABMR = (uint32_t)(dmaconf->AddressAlignedBeats | 
1523:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->FixedBurst |
1524:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for
1525:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->TxDMABurstLength |
1526:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->EnhancedDescriptorFormat |
1527:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          (dmaconf->DescriptorSkipLength << 2) |
1528:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->DMAArbitration | 
1529:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and 
1530:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1531:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Wait until the write operation will be taken into account:
1532:HALLIB/Src/stm32f7xx_hal_eth.c ****       at least four TX_CLK/RX_CLK clock cycles */
1533:HALLIB/Src/stm32f7xx_hal_eth.c ****    tmpreg = (heth->Instance)->DMABMR;
1534:HALLIB/Src/stm32f7xx_hal_eth.c ****    HAL_Delay(ETH_REG_WRITE_DELAY);
1535:HALLIB/Src/stm32f7xx_hal_eth.c ****    (heth->Instance)->DMABMR = tmpreg;
1536:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1537:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Set the ETH state to Ready */
1538:HALLIB/Src/stm32f7xx_hal_eth.c ****    heth->State= HAL_ETH_STATE_READY;
1539:HALLIB/Src/stm32f7xx_hal_eth.c ****    
1540:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Process Unlocked */
1541:HALLIB/Src/stm32f7xx_hal_eth.c ****    __HAL_UNLOCK(heth);
1542:HALLIB/Src/stm32f7xx_hal_eth.c ****    
1543:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Return function status */
1544:HALLIB/Src/stm32f7xx_hal_eth.c ****    return HAL_OK; 
1545:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1546:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1547:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1548:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @}
1549:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1550:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1551:HALLIB/Src/stm32f7xx_hal_eth.c **** /** @defgroup ETH_Exported_Functions_Group4 Peripheral State functions 
1552:HALLIB/Src/stm32f7xx_hal_eth.c ****   *  @brief   Peripheral State functions 
1553:HALLIB/Src/stm32f7xx_hal_eth.c ****   *
1554:HALLIB/Src/stm32f7xx_hal_eth.c ****   @verbatim   
1555:HALLIB/Src/stm32f7xx_hal_eth.c ****   ===============================================================================
1556:HALLIB/Src/stm32f7xx_hal_eth.c ****                          ##### Peripheral State functions #####
1557:HALLIB/Src/stm32f7xx_hal_eth.c ****   ===============================================================================  
1558:HALLIB/Src/stm32f7xx_hal_eth.c ****   [..]
1559:HALLIB/Src/stm32f7xx_hal_eth.c ****   This subsection permits to get in run-time the status of the peripheral 
1560:HALLIB/Src/stm32f7xx_hal_eth.c ****   and the data flow.
1561:HALLIB/Src/stm32f7xx_hal_eth.c ****        (+) Get the ETH handle state:
1562:HALLIB/Src/stm32f7xx_hal_eth.c ****            HAL_ETH_GetState();
1563:HALLIB/Src/stm32f7xx_hal_eth.c ****            
1564:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1565:HALLIB/Src/stm32f7xx_hal_eth.c ****   @endverbatim
1566:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @{
1567:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1568:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1569:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1570:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Return the ETH HAL state
ARM GAS  /tmp/cc7Dq4FC.s 			page 29


1571:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1572:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
1573:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL state
1574:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1575:HALLIB/Src/stm32f7xx_hal_eth.c **** HAL_ETH_StateTypeDef HAL_ETH_GetState(ETH_HandleTypeDef *heth)
1576:HALLIB/Src/stm32f7xx_hal_eth.c **** {  
1577:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return ETH state */
1578:HALLIB/Src/stm32f7xx_hal_eth.c ****   return heth->State;
1579:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1580:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1581:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1582:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @}
1583:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1584:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1585:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1586:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @}
1587:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1588:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1589:HALLIB/Src/stm32f7xx_hal_eth.c **** /** @addtogroup ETH_Private_Functions
1590:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @{
1591:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1592:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1593:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1594:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Configures Ethernet MAC and DMA with default parameters.
1595:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1596:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
1597:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  err Ethernet Init error
1598:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
1599:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1600:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
1601:HALLIB/Src/stm32f7xx_hal_eth.c **** {
1602:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_MACInitTypeDef macinit;
1603:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_DMAInitTypeDef dmainit;
1604:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;
1605:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1606:HALLIB/Src/stm32f7xx_hal_eth.c ****   if (err != ETH_SUCCESS) /* Auto-negotiation failed */
1607:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
1608:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set Ethernet duplex mode to Full-duplex */
1609:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
1610:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1611:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set Ethernet speed to 100M */
1612:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Init).Speed = ETH_SPEED_100M;
1613:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
1614:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1615:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Ethernet MAC default initialization **************************************/
1616:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.Watchdog = ETH_WATCHDOG_ENABLE;
1617:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.Jabber = ETH_JABBER_ENABLE;
1618:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
1619:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
1620:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
1621:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
1622:HALLIB/Src/stm32f7xx_hal_eth.c ****   if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
1623:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
1624:HALLIB/Src/stm32f7xx_hal_eth.c ****     macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
1625:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
1626:HALLIB/Src/stm32f7xx_hal_eth.c ****   else
1627:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
ARM GAS  /tmp/cc7Dq4FC.s 			page 30


1628:HALLIB/Src/stm32f7xx_hal_eth.c ****     macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
1629:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
1630:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
1631:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
1632:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
1633:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
1634:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
1635:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
1636:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
1637:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
1638:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
1639:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
1640:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
1641:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
1642:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.HashTableHigh = 0x0;
1643:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.HashTableLow = 0x0;
1644:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.PauseTime = 0x0;
1645:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
1646:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
1647:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
1648:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
1649:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
1650:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
1651:HALLIB/Src/stm32f7xx_hal_eth.c ****   macinit.VLANTagIdentifier = 0x0;
1652:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1653:HALLIB/Src/stm32f7xx_hal_eth.c ****   /*------------------------ ETHERNET MACCR Configuration --------------------*/
1654:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Get the ETHERNET MACCR value */
1655:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = (heth->Instance)->MACCR;
1656:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Clear WD, PCE, PS, TE and RE bits */
1657:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg &= ETH_MACCR_CLEAR_MASK;
1658:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the WD bit according to ETH Watchdog value */
1659:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the JD: bit according to ETH Jabber value */
1660:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the IFG bit according to ETH InterFrameGap value */
1661:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the DCRS bit according to ETH CarrierSense value */
1662:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the FES bit according to ETH Speed value */ 
1663:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the DO bit according to ETH ReceiveOwn value */ 
1664:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the LM bit according to ETH LoopbackMode value */
1665:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the DM bit according to ETH Mode value */ 
1666:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the IPCO bit according to ETH ChecksumOffload value */
1667:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the DR bit according to ETH RetryTransmission value */
1668:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
1669:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the BL bit according to ETH BackOffLimit value */
1670:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the DC bit according to ETH DeferralCheck value */
1671:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |= (uint32_t)(macinit.Watchdog | 
1672:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.Jabber | 
1673:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.InterFrameGap |
1674:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.CarrierSense |
1675:HALLIB/Src/stm32f7xx_hal_eth.c ****                        (heth->Init).Speed | 
1676:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.ReceiveOwn |
1677:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.LoopbackMode |
1678:HALLIB/Src/stm32f7xx_hal_eth.c ****                        (heth->Init).DuplexMode | 
1679:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.ChecksumOffload |    
1680:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.RetryTransmission | 
1681:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.AutomaticPadCRCStrip | 
1682:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.BackOffLimit | 
1683:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.DeferralCheck);
1684:HALLIB/Src/stm32f7xx_hal_eth.c ****   
ARM GAS  /tmp/cc7Dq4FC.s 			page 31


1685:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Write to ETHERNET MACCR */
1686:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR = (uint32_t)tmpreg;
1687:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1688:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Wait until the write operation will be taken into account:
1689:HALLIB/Src/stm32f7xx_hal_eth.c ****      at least four TX_CLK/RX_CLK clock cycles */
1690:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = (heth->Instance)->MACCR;
1691:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
1692:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR = tmpreg; 
1693:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1694:HALLIB/Src/stm32f7xx_hal_eth.c ****   /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
1695:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the RA bit according to ETH ReceiveAll value */
1696:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the SAF and SAIF bits according to ETH SourceAddrFilter value */
1697:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the PCF bit according to ETH PassControlFrames value */
1698:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the DBF bit according to ETH BroadcastFramesReception value */
1699:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the DAIF bit according to ETH DestinationAddrFilter value */
1700:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the PR bit according to ETH PromiscuousMode value */
1701:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
1702:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
1703:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Write to ETHERNET MACFFR */  
1704:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
1705:HALLIB/Src/stm32f7xx_hal_eth.c ****                                         macinit.SourceAddrFilter |
1706:HALLIB/Src/stm32f7xx_hal_eth.c ****                                         macinit.PassControlFrames |
1707:HALLIB/Src/stm32f7xx_hal_eth.c ****                                         macinit.BroadcastFramesReception | 
1708:HALLIB/Src/stm32f7xx_hal_eth.c ****                                         macinit.DestinationAddrFilter |
1709:HALLIB/Src/stm32f7xx_hal_eth.c ****                                         macinit.PromiscuousMode |
1710:HALLIB/Src/stm32f7xx_hal_eth.c ****                                         macinit.MulticastFramesFilter |
1711:HALLIB/Src/stm32f7xx_hal_eth.c ****                                         macinit.UnicastFramesFilter);
1712:HALLIB/Src/stm32f7xx_hal_eth.c ****    
1713:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Wait until the write operation will be taken into account:
1714:HALLIB/Src/stm32f7xx_hal_eth.c ****       at least four TX_CLK/RX_CLK clock cycles */
1715:HALLIB/Src/stm32f7xx_hal_eth.c ****    tmpreg = (heth->Instance)->MACFFR;
1716:HALLIB/Src/stm32f7xx_hal_eth.c ****    HAL_Delay(ETH_REG_WRITE_DELAY);
1717:HALLIB/Src/stm32f7xx_hal_eth.c ****    (heth->Instance)->MACFFR = tmpreg;
1718:HALLIB/Src/stm32f7xx_hal_eth.c ****    
1719:HALLIB/Src/stm32f7xx_hal_eth.c ****    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
1720:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Write to ETHERNET MACHTHR */
1721:HALLIB/Src/stm32f7xx_hal_eth.c ****    (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
1722:HALLIB/Src/stm32f7xx_hal_eth.c ****    
1723:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Write to ETHERNET MACHTLR */
1724:HALLIB/Src/stm32f7xx_hal_eth.c ****    (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
1725:HALLIB/Src/stm32f7xx_hal_eth.c ****    /*----------------------- ETHERNET MACFCR Configuration -------------------*/
1726:HALLIB/Src/stm32f7xx_hal_eth.c ****    
1727:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Get the ETHERNET MACFCR value */  
1728:HALLIB/Src/stm32f7xx_hal_eth.c ****    tmpreg = (heth->Instance)->MACFCR;
1729:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Clear xx bits */
1730:HALLIB/Src/stm32f7xx_hal_eth.c ****    tmpreg &= ETH_MACFCR_CLEAR_MASK;
1731:HALLIB/Src/stm32f7xx_hal_eth.c ****    
1732:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Set the PT bit according to ETH PauseTime value */
1733:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
1734:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Set the PLT bit according to ETH PauseLowThreshold value */
1735:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
1736:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Set the RFE bit according to ETH ReceiveFlowControl value */
1737:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Set the TFE bit according to ETH TransmitFlowControl value */ 
1738:HALLIB/Src/stm32f7xx_hal_eth.c ****    tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
1739:HALLIB/Src/stm32f7xx_hal_eth.c ****                         macinit.ZeroQuantaPause |
1740:HALLIB/Src/stm32f7xx_hal_eth.c ****                         macinit.PauseLowThreshold |
1741:HALLIB/Src/stm32f7xx_hal_eth.c ****                         macinit.UnicastPauseFrameDetect | 
ARM GAS  /tmp/cc7Dq4FC.s 			page 32


1742:HALLIB/Src/stm32f7xx_hal_eth.c ****                         macinit.ReceiveFlowControl |
1743:HALLIB/Src/stm32f7xx_hal_eth.c ****                         macinit.TransmitFlowControl); 
1744:HALLIB/Src/stm32f7xx_hal_eth.c ****    
1745:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Write to ETHERNET MACFCR */
1746:HALLIB/Src/stm32f7xx_hal_eth.c ****    (heth->Instance)->MACFCR = (uint32_t)tmpreg;
1747:HALLIB/Src/stm32f7xx_hal_eth.c ****    
1748:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Wait until the write operation will be taken into account:
1749:HALLIB/Src/stm32f7xx_hal_eth.c ****    at least four TX_CLK/RX_CLK clock cycles */
1750:HALLIB/Src/stm32f7xx_hal_eth.c ****    tmpreg = (heth->Instance)->MACFCR;
1751:HALLIB/Src/stm32f7xx_hal_eth.c ****    HAL_Delay(ETH_REG_WRITE_DELAY);
1752:HALLIB/Src/stm32f7xx_hal_eth.c ****    (heth->Instance)->MACFCR = tmpreg;
1753:HALLIB/Src/stm32f7xx_hal_eth.c ****    
1754:HALLIB/Src/stm32f7xx_hal_eth.c ****    /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
1755:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Set the ETV bit according to ETH VLANTagComparison value */
1756:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Set the VL bit according to ETH VLANTagIdentifier value */  
1757:HALLIB/Src/stm32f7xx_hal_eth.c ****    (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
1758:HALLIB/Src/stm32f7xx_hal_eth.c ****                                             macinit.VLANTagIdentifier);
1759:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1760:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Wait until the write operation will be taken into account:
1761:HALLIB/Src/stm32f7xx_hal_eth.c ****        at least four TX_CLK/RX_CLK clock cycles */
1762:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg = (heth->Instance)->MACVLANTR;
1763:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_Delay(ETH_REG_WRITE_DELAY);
1764:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->MACVLANTR = tmpreg;
1765:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1766:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Ethernet DMA default initialization ************************************/
1767:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
1768:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
1769:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
1770:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
1771:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
1772:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
1773:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
1774:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
1775:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
1776:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
1777:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
1778:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
1779:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
1780:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
1781:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.DescriptorSkipLength = 0x0;
1782:HALLIB/Src/stm32f7xx_hal_eth.c ****     dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
1783:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1784:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Get the ETHERNET DMAOMR value */
1785:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg = (heth->Instance)->DMAOMR;
1786:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Clear xx bits */
1787:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg &= ETH_DMAOMR_CLEAR_MASK;
1788:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1789:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the DT bit according to ETH DropTCPIPChecksumErrorFrame value */
1790:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the RSF bit according to ETH ReceiveStoreForward value */
1791:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the DFF bit according to ETH FlushReceivedFrame value */
1792:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the TSF bit according to ETH TransmitStoreForward value */
1793:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the TTC bit according to ETH TransmitThresholdControl value */
1794:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the FEF bit according to ETH ForwardErrorFrames value */
1795:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
1796:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the RTC bit according to ETH ReceiveThresholdControl value */
1797:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the OSF bit according to ETH SecondFrameOperate value */
1798:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
ARM GAS  /tmp/cc7Dq4FC.s 			page 33


1799:HALLIB/Src/stm32f7xx_hal_eth.c ****                          dmainit.ReceiveStoreForward |
1800:HALLIB/Src/stm32f7xx_hal_eth.c ****                          dmainit.FlushReceivedFrame |
1801:HALLIB/Src/stm32f7xx_hal_eth.c ****                          dmainit.TransmitStoreForward | 
1802:HALLIB/Src/stm32f7xx_hal_eth.c ****                          dmainit.TransmitThresholdControl |
1803:HALLIB/Src/stm32f7xx_hal_eth.c ****                          dmainit.ForwardErrorFrames |
1804:HALLIB/Src/stm32f7xx_hal_eth.c ****                          dmainit.ForwardUndersizedGoodFrames |
1805:HALLIB/Src/stm32f7xx_hal_eth.c ****                          dmainit.ReceiveThresholdControl |
1806:HALLIB/Src/stm32f7xx_hal_eth.c ****                          dmainit.SecondFrameOperate);
1807:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1808:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Write to ETHERNET DMAOMR */
1809:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
1810:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1811:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Wait until the write operation will be taken into account:
1812:HALLIB/Src/stm32f7xx_hal_eth.c ****        at least four TX_CLK/RX_CLK clock cycles */
1813:HALLIB/Src/stm32f7xx_hal_eth.c ****     tmpreg = (heth->Instance)->DMAOMR;
1814:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_Delay(ETH_REG_WRITE_DELAY);
1815:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->DMAOMR = tmpreg;
1816:HALLIB/Src/stm32f7xx_hal_eth.c ****     
1817:HALLIB/Src/stm32f7xx_hal_eth.c ****     /*----------------------- ETHERNET DMABMR Configuration ------------------*/
1818:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the AAL bit according to ETH AddressAlignedBeats value */
1819:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the FB bit according to ETH FixedBurst value */
1820:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
1821:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
1822:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
1823:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the DSL bit according to ETH DesciptorSkipLength value */
1824:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set the PR and DA bits according to ETH DMAArbitration value */
1825:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
1826:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           dmainit.FixedBurst |
1827:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected 
1828:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           dmainit.TxDMABurstLength |
1829:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           dmainit.EnhancedDescriptorFormat |
1830:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           (dmainit.DescriptorSkipLength << 2) |
1831:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           dmainit.DMAArbitration |
1832:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and
1833:HALLIB/Src/stm32f7xx_hal_eth.c ****      
1834:HALLIB/Src/stm32f7xx_hal_eth.c ****      /* Wait until the write operation will be taken into account:
1835:HALLIB/Src/stm32f7xx_hal_eth.c ****         at least four TX_CLK/RX_CLK clock cycles */
1836:HALLIB/Src/stm32f7xx_hal_eth.c ****      tmpreg = (heth->Instance)->DMABMR;
1837:HALLIB/Src/stm32f7xx_hal_eth.c ****      HAL_Delay(ETH_REG_WRITE_DELAY);
1838:HALLIB/Src/stm32f7xx_hal_eth.c ****      (heth->Instance)->DMABMR = tmpreg;
1839:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1840:HALLIB/Src/stm32f7xx_hal_eth.c ****      if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
1841:HALLIB/Src/stm32f7xx_hal_eth.c ****      {
1842:HALLIB/Src/stm32f7xx_hal_eth.c ****        /* Enable the Ethernet Rx Interrupt */
1843:HALLIB/Src/stm32f7xx_hal_eth.c ****        __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
1844:HALLIB/Src/stm32f7xx_hal_eth.c ****      }
1845:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1846:HALLIB/Src/stm32f7xx_hal_eth.c ****      /* Initialize MAC address in ethernet MAC */ 
1847:HALLIB/Src/stm32f7xx_hal_eth.c ****      ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
1848:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1849:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1850:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1851:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Configures the selected MAC address.
1852:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1853:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
1854:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  MacAddr The MAC address to configure
1855:HALLIB/Src/stm32f7xx_hal_eth.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/cc7Dq4FC.s 			page 34


1856:HALLIB/Src/stm32f7xx_hal_eth.c ****   *             @arg ETH_MAC_Address0: MAC Address0 
1857:HALLIB/Src/stm32f7xx_hal_eth.c ****   *             @arg ETH_MAC_Address1: MAC Address1 
1858:HALLIB/Src/stm32f7xx_hal_eth.c ****   *             @arg ETH_MAC_Address2: MAC Address2
1859:HALLIB/Src/stm32f7xx_hal_eth.c ****   *             @arg ETH_MAC_Address3: MAC Address3
1860:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  Addr Pointer to MAC address buffer data (6 bytes)
1861:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval HAL status
1862:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1863:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
1864:HALLIB/Src/stm32f7xx_hal_eth.c **** {
  28              		.loc 1 1864 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
1865:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg;
1866:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1867:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Check the parameters */
1868:HALLIB/Src/stm32f7xx_hal_eth.c ****   assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
1869:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1870:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Calculate the selected MAC address high register */
1871:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  34              		.loc 1 1871 0
  35 0000 5079     		ldrb	r0, [r2, #5]	@ zero_extendqisi2
  36              	.LVL1:
  37 0002 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
  38 0004 43EA0023 		orr	r3, r3, r0, lsl #8
  39              	.LVL2:
1872:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Load the selected MAC address high register */
1873:HALLIB/Src/stm32f7xx_hal_eth.c ****   (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
  40              		.loc 1 1873 0
  41 0008 0748     		ldr	r0, .L2
  42 000a 0B50     		str	r3, [r1, r0]
1874:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Calculate the selected MAC address low register */
1875:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[
  43              		.loc 1 1875 0
  44 000c D078     		ldrb	r0, [r2, #3]	@ zero_extendqisi2
  45 000e 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
  46              	.LVL3:
  47 0010 1B04     		lsls	r3, r3, #16
  48 0012 43EA0063 		orr	r3, r3, r0, lsl #24
  49 0016 5078     		ldrb	r0, [r2, #1]	@ zero_extendqisi2
  50 0018 43EA0023 		orr	r3, r3, r0, lsl #8
  51 001c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  52              	.LVL4:
  53 001e 1343     		orrs	r3, r3, r2
  54              	.LVL5:
1876:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1877:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Load the selected MAC address low register */
1878:HALLIB/Src/stm32f7xx_hal_eth.c ****   (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
  55              		.loc 1 1878 0
  56 0020 024A     		ldr	r2, .L2+4
  57 0022 8B50     		str	r3, [r1, r2]
  58 0024 7047     		bx	lr
  59              	.L3:
  60 0026 00BF     		.align	2
  61              	.L2:
ARM GAS  /tmp/cc7Dq4FC.s 			page 35


  62 0028 40800240 		.word	1073905728
  63 002c 44800240 		.word	1073905732
  64              		.cfi_endproc
  65              	.LFE157:
  67              		.section	.text.ETH_DMATransmissionEnable,"ax",%progbits
  68              		.align	2
  69              		.thumb
  70              		.thumb_func
  72              	ETH_DMATransmissionEnable:
  73              	.LFB162:
1879:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1880:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1881:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1882:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Enables the MAC transmission.
1883:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1884:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module  
1885:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
1886:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1887:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
1888:HALLIB/Src/stm32f7xx_hal_eth.c **** { 
1889:HALLIB/Src/stm32f7xx_hal_eth.c ****   __IO uint32_t tmpreg = 0;
1890:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1891:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Enable the MAC transmission */
1892:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR |= ETH_MACCR_TE;
1893:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1894:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Wait until the write operation will be taken into account:
1895:HALLIB/Src/stm32f7xx_hal_eth.c ****      at least four TX_CLK/RX_CLK clock cycles */
1896:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = (heth->Instance)->MACCR;
1897:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
1898:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR = tmpreg;
1899:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1900:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1901:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1902:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Disables the MAC transmission.
1903:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1904:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module  
1905:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
1906:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1907:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
1908:HALLIB/Src/stm32f7xx_hal_eth.c **** { 
1909:HALLIB/Src/stm32f7xx_hal_eth.c ****   __IO uint32_t tmpreg = 0;
1910:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1911:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Disable the MAC transmission */
1912:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
1913:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1914:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Wait until the write operation will be taken into account:
1915:HALLIB/Src/stm32f7xx_hal_eth.c ****      at least four TX_CLK/RX_CLK clock cycles */
1916:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = (heth->Instance)->MACCR;
1917:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
1918:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR = tmpreg;
1919:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1920:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1921:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1922:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Enables the MAC reception.
1923:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1924:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module   
1925:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
ARM GAS  /tmp/cc7Dq4FC.s 			page 36


1926:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1927:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
1928:HALLIB/Src/stm32f7xx_hal_eth.c **** { 
1929:HALLIB/Src/stm32f7xx_hal_eth.c ****   __IO uint32_t tmpreg = 0;
1930:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1931:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Enable the MAC reception */
1932:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR |= ETH_MACCR_RE;
1933:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1934:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Wait until the write operation will be taken into account:
1935:HALLIB/Src/stm32f7xx_hal_eth.c ****      at least four TX_CLK/RX_CLK clock cycles */
1936:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = (heth->Instance)->MACCR;
1937:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
1938:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR = tmpreg;
1939:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1940:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1941:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1942:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Disables the MAC reception.
1943:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1944:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module   
1945:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
1946:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1947:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
1948:HALLIB/Src/stm32f7xx_hal_eth.c **** { 
1949:HALLIB/Src/stm32f7xx_hal_eth.c ****   __IO uint32_t tmpreg = 0;
1950:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1951:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Disable the MAC reception */
1952:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
1953:HALLIB/Src/stm32f7xx_hal_eth.c ****   
1954:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Wait until the write operation will be taken into account:
1955:HALLIB/Src/stm32f7xx_hal_eth.c ****      at least four TX_CLK/RX_CLK clock cycles */
1956:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = (heth->Instance)->MACCR;
1957:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
1958:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR = tmpreg;
1959:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1960:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1961:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1962:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Enables the DMA transmission.
1963:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1964:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module   
1965:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
1966:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1967:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
1968:HALLIB/Src/stm32f7xx_hal_eth.c **** {
  74              		.loc 1 1968 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79              	.LVL6:
1969:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Enable the DMA transmission */
1970:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
  80              		.loc 1 1970 0
  81 0000 0168     		ldr	r1, [r0]
  82 0002 41F21802 		movw	r2, #4120
  83 0006 8B58     		ldr	r3, [r1, r2]
  84 0008 43F40053 		orr	r3, r3, #8192
  85 000c 8B50     		str	r3, [r1, r2]
ARM GAS  /tmp/cc7Dq4FC.s 			page 37


  86 000e 7047     		bx	lr
  87              		.cfi_endproc
  88              	.LFE162:
  90              		.section	.text.ETH_DMATransmissionDisable,"ax",%progbits
  91              		.align	2
  92              		.thumb
  93              		.thumb_func
  95              	ETH_DMATransmissionDisable:
  96              	.LFB163:
1971:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1972:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1973:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1974:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Disables the DMA transmission.
1975:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1976:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module   
1977:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
1978:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1979:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
1980:HALLIB/Src/stm32f7xx_hal_eth.c **** { 
  97              		.loc 1 1980 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102              	.LVL7:
1981:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Disable the DMA transmission */
1982:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 103              		.loc 1 1982 0
 104 0000 0168     		ldr	r1, [r0]
 105 0002 41F21802 		movw	r2, #4120
 106 0006 8B58     		ldr	r3, [r1, r2]
 107 0008 23F40053 		bic	r3, r3, #8192
 108 000c 8B50     		str	r3, [r1, r2]
 109 000e 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE163:
 113              		.section	.text.ETH_DMAReceptionEnable,"ax",%progbits
 114              		.align	2
 115              		.thumb
 116              		.thumb_func
 118              	ETH_DMAReceptionEnable:
 119              	.LFB164:
1983:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1984:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1985:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1986:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Enables the DMA reception.
1987:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
1988:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module 
1989:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
1990:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
1991:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
1992:HALLIB/Src/stm32f7xx_hal_eth.c **** {  
 120              		.loc 1 1992 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
ARM GAS  /tmp/cc7Dq4FC.s 			page 38


 125              	.LVL8:
1993:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Enable the DMA reception */
1994:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 126              		.loc 1 1994 0
 127 0000 0168     		ldr	r1, [r0]
 128 0002 41F21802 		movw	r2, #4120
 129 0006 8B58     		ldr	r3, [r1, r2]
 130 0008 43F00203 		orr	r3, r3, #2
 131 000c 8B50     		str	r3, [r1, r2]
 132 000e 7047     		bx	lr
 133              		.cfi_endproc
 134              	.LFE164:
 136              		.section	.text.ETH_DMAReceptionDisable,"ax",%progbits
 137              		.align	2
 138              		.thumb
 139              		.thumb_func
 141              	ETH_DMAReceptionDisable:
 142              	.LFB165:
1995:HALLIB/Src/stm32f7xx_hal_eth.c **** }
1996:HALLIB/Src/stm32f7xx_hal_eth.c **** 
1997:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
1998:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Disables the DMA reception.
1999:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
2000:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module 
2001:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
2002:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
2003:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
2004:HALLIB/Src/stm32f7xx_hal_eth.c **** { 
 143              		.loc 1 2004 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 148              	.LVL9:
2005:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Disable the DMA reception */
2006:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 149              		.loc 1 2006 0
 150 0000 0168     		ldr	r1, [r0]
 151 0002 41F21802 		movw	r2, #4120
 152 0006 8B58     		ldr	r3, [r1, r2]
 153 0008 23F00203 		bic	r3, r3, #2
 154 000c 8B50     		str	r3, [r1, r2]
 155 000e 7047     		bx	lr
 156              		.cfi_endproc
 157              	.LFE165:
 159              		.section	.text.ETH_MACDMAConfig,"ax",%progbits
 160              		.align	2
 161              		.thumb
 162              		.thumb_func
 164              	ETH_MACDMAConfig:
 165              	.LFB156:
1601:HALLIB/Src/stm32f7xx_hal_eth.c ****   ETH_MACInitTypeDef macinit;
 166              		.loc 1 1601 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 120
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              	.LVL10:
ARM GAS  /tmp/cc7Dq4FC.s 			page 39


 171 0000 70B5     		push	{r4, r5, r6, lr}
 172              	.LCFI0:
 173              		.cfi_def_cfa_offset 16
 174              		.cfi_offset 4, -16
 175              		.cfi_offset 5, -12
 176              		.cfi_offset 6, -8
 177              		.cfi_offset 14, -4
 178 0002 9EB0     		sub	sp, sp, #120
 179              	.LCFI1:
 180              		.cfi_def_cfa_offset 136
 181 0004 0446     		mov	r4, r0
 182              	.LVL11:
1606:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 183              		.loc 1 1606 0
 184 0006 29B1     		cbz	r1, .L9
1609:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 185              		.loc 1 1609 0
 186 0008 4FF40063 		mov	r3, #2048
 187 000c C360     		str	r3, [r0, #12]
1612:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 188              		.loc 1 1612 0
 189 000e 4FF48043 		mov	r3, #16384
 190 0012 8360     		str	r3, [r0, #8]
 191              	.L9:
1622:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 192              		.loc 1 1622 0
 193 0014 E369     		ldr	r3, [r4, #28]
 194 0016 1BB9     		cbnz	r3, .L10
1624:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 195              		.loc 1 1624 0
 196 0018 4FF48063 		mov	r3, #1024
 197 001c 0793     		str	r3, [sp, #28]
 198 001e 01E0     		b	.L11
 199              	.L10:
1628:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 200              		.loc 1 1628 0
 201 0020 0023     		movs	r3, #0
 202 0022 0793     		str	r3, [sp, #28]
 203              	.L11:
1655:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Clear WD, PCE, PS, TE and RE bits */
 204              		.loc 1 1655 0
 205 0024 2068     		ldr	r0, [r4]
 206              	.LVL12:
 207 0026 0368     		ldr	r3, [r0]
 208              	.LVL13:
1657:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the WD bit according to ETH Watchdog value */
 209              		.loc 1 1657 0
 210 0028 354A     		ldr	r2, .L14
 211 002a 1A40     		ands	r2, r2, r3
 212              	.LVL14:
1675:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.ReceiveOwn |
 213              		.loc 1 1675 0
 214 002c A168     		ldr	r1, [r4, #8]
 215              	.LVL15:
1678:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.ChecksumOffload |    
 216              		.loc 1 1678 0
 217 002e E368     		ldr	r3, [r4, #12]
ARM GAS  /tmp/cc7Dq4FC.s 			page 40


1677:HALLIB/Src/stm32f7xx_hal_eth.c ****                        (heth->Init).DuplexMode | 
 218              		.loc 1 1677 0
 219 0030 1943     		orrs	r1, r1, r3
1679:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.RetryTransmission | 
 220              		.loc 1 1679 0
 221 0032 079B     		ldr	r3, [sp, #28]
1678:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.ChecksumOffload |    
 222              		.loc 1 1678 0
 223 0034 0B43     		orrs	r3, r3, r1
1679:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.RetryTransmission | 
 224              		.loc 1 1679 0
 225 0036 43F40073 		orr	r3, r3, #512
1671:HALLIB/Src/stm32f7xx_hal_eth.c ****                        macinit.Jabber | 
 226              		.loc 1 1671 0
 227 003a 1343     		orrs	r3, r3, r2
 228              	.LVL16:
1686:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 229              		.loc 1 1686 0
 230 003c 0360     		str	r3, [r0]
1690:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
 231              		.loc 1 1690 0
 232 003e 2368     		ldr	r3, [r4]
 233              	.LVL17:
 234 0040 1D68     		ldr	r5, [r3]
 235              	.LVL18:
1691:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR = tmpreg; 
 236              		.loc 1 1691 0
 237 0042 0120     		movs	r0, #1
 238 0044 FFF7FEFF 		bl	HAL_Delay
 239              	.LVL19:
1692:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 240              		.loc 1 1692 0
 241 0048 2368     		ldr	r3, [r4]
 242 004a 1D60     		str	r5, [r3]
1704:HALLIB/Src/stm32f7xx_hal_eth.c ****                                         macinit.SourceAddrFilter |
 243              		.loc 1 1704 0
 244 004c 2368     		ldr	r3, [r4]
 245 004e 4022     		movs	r2, #64
 246 0050 5A60     		str	r2, [r3, #4]
1715:HALLIB/Src/stm32f7xx_hal_eth.c ****    HAL_Delay(ETH_REG_WRITE_DELAY);
 247              		.loc 1 1715 0
 248 0052 2368     		ldr	r3, [r4]
 249 0054 5D68     		ldr	r5, [r3, #4]
 250              	.LVL20:
1716:HALLIB/Src/stm32f7xx_hal_eth.c ****    (heth->Instance)->MACFFR = tmpreg;
 251              		.loc 1 1716 0
 252 0056 0120     		movs	r0, #1
 253 0058 FFF7FEFF 		bl	HAL_Delay
 254              	.LVL21:
1717:HALLIB/Src/stm32f7xx_hal_eth.c ****    
 255              		.loc 1 1717 0
 256 005c 2368     		ldr	r3, [r4]
 257 005e 5D60     		str	r5, [r3, #4]
1721:HALLIB/Src/stm32f7xx_hal_eth.c ****    
 258              		.loc 1 1721 0
 259 0060 2368     		ldr	r3, [r4]
 260 0062 0025     		movs	r5, #0
ARM GAS  /tmp/cc7Dq4FC.s 			page 41


 261              	.LVL22:
 262 0064 9D60     		str	r5, [r3, #8]
1724:HALLIB/Src/stm32f7xx_hal_eth.c ****    /*----------------------- ETHERNET MACFCR Configuration -------------------*/
 263              		.loc 1 1724 0
 264 0066 2368     		ldr	r3, [r4]
 265 0068 DD60     		str	r5, [r3, #12]
1728:HALLIB/Src/stm32f7xx_hal_eth.c ****    /* Clear xx bits */
 266              		.loc 1 1728 0
 267 006a 2268     		ldr	r2, [r4]
 268 006c 9369     		ldr	r3, [r2, #24]
 269              	.LVL23:
1730:HALLIB/Src/stm32f7xx_hal_eth.c ****    
 270              		.loc 1 1730 0
 271 006e 23F0BE03 		bic	r3, r3, #190
 272              	.LVL24:
 273 0072 1B04     		lsls	r3, r3, #16
 274 0074 1B0C     		lsrs	r3, r3, #16
 275              	.LVL25:
1738:HALLIB/Src/stm32f7xx_hal_eth.c ****                         macinit.ZeroQuantaPause |
 276              		.loc 1 1738 0
 277 0076 43F08003 		orr	r3, r3, #128
 278              	.LVL26:
1746:HALLIB/Src/stm32f7xx_hal_eth.c ****    
 279              		.loc 1 1746 0
 280 007a 9361     		str	r3, [r2, #24]
1750:HALLIB/Src/stm32f7xx_hal_eth.c ****    HAL_Delay(ETH_REG_WRITE_DELAY);
 281              		.loc 1 1750 0
 282 007c 2368     		ldr	r3, [r4]
 283              	.LVL27:
 284 007e 9E69     		ldr	r6, [r3, #24]
 285              	.LVL28:
1751:HALLIB/Src/stm32f7xx_hal_eth.c ****    (heth->Instance)->MACFCR = tmpreg;
 286              		.loc 1 1751 0
 287 0080 0120     		movs	r0, #1
 288 0082 FFF7FEFF 		bl	HAL_Delay
 289              	.LVL29:
1752:HALLIB/Src/stm32f7xx_hal_eth.c ****    
 290              		.loc 1 1752 0
 291 0086 2368     		ldr	r3, [r4]
 292 0088 9E61     		str	r6, [r3, #24]
1757:HALLIB/Src/stm32f7xx_hal_eth.c ****                                             macinit.VLANTagIdentifier);
 293              		.loc 1 1757 0
 294 008a 2368     		ldr	r3, [r4]
 295 008c DD61     		str	r5, [r3, #28]
1762:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_Delay(ETH_REG_WRITE_DELAY);
 296              		.loc 1 1762 0
 297 008e 2368     		ldr	r3, [r4]
 298 0090 DD69     		ldr	r5, [r3, #28]
 299              	.LVL30:
1763:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->MACVLANTR = tmpreg;
 300              		.loc 1 1763 0
 301 0092 0120     		movs	r0, #1
 302 0094 FFF7FEFF 		bl	HAL_Delay
 303              	.LVL31:
1764:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 304              		.loc 1 1764 0
 305 0098 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cc7Dq4FC.s 			page 42


 306 009a DD61     		str	r5, [r3, #28]
1785:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Clear xx bits */
 307              		.loc 1 1785 0
 308 009c 2168     		ldr	r1, [r4]
 309 009e 41F21805 		movw	r5, #4120
 310              	.LVL32:
 311 00a2 4B59     		ldr	r3, [r1, r5]
 312              	.LVL33:
1787:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 313              		.loc 1 1787 0
 314 00a4 174A     		ldr	r2, .L14+4
 315 00a6 1A40     		ands	r2, r2, r3
 316              	.LVL34:
1798:HALLIB/Src/stm32f7xx_hal_eth.c ****                          dmainit.ReceiveStoreForward |
 317              		.loc 1 1798 0
 318 00a8 174B     		ldr	r3, .L14+8
 319 00aa 1343     		orrs	r3, r3, r2
 320              	.LVL35:
1809:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 321              		.loc 1 1809 0
 322 00ac 4B51     		str	r3, [r1, r5]
1813:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_Delay(ETH_REG_WRITE_DELAY);
 323              		.loc 1 1813 0
 324 00ae 2368     		ldr	r3, [r4]
 325              	.LVL36:
 326 00b0 5E59     		ldr	r6, [r3, r5]
 327              	.LVL37:
1814:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->DMAOMR = tmpreg;
 328              		.loc 1 1814 0
 329 00b2 0120     		movs	r0, #1
 330 00b4 FFF7FEFF 		bl	HAL_Delay
 331              	.LVL38:
1815:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 332              		.loc 1 1815 0
 333 00b8 2368     		ldr	r3, [r4]
 334 00ba 5E51     		str	r6, [r3, r5]
1825:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           dmainit.FixedBurst |
 335              		.loc 1 1825 0
 336 00bc 2368     		ldr	r3, [r4]
 337 00be 03F58053 		add	r3, r3, #4096
 338 00c2 124A     		ldr	r2, .L14+12
 339 00c4 1A60     		str	r2, [r3]
1836:HALLIB/Src/stm32f7xx_hal_eth.c ****      HAL_Delay(ETH_REG_WRITE_DELAY);
 340              		.loc 1 1836 0
 341 00c6 2368     		ldr	r3, [r4]
 342 00c8 03F58053 		add	r3, r3, #4096
 343 00cc 1D68     		ldr	r5, [r3]
 344              	.LVL39:
1837:HALLIB/Src/stm32f7xx_hal_eth.c ****      (heth->Instance)->DMABMR = tmpreg;
 345              		.loc 1 1837 0
 346 00ce 0120     		movs	r0, #1
 347 00d0 FFF7FEFF 		bl	HAL_Delay
 348              	.LVL40:
1838:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 349              		.loc 1 1838 0
 350 00d4 2368     		ldr	r3, [r4]
 351 00d6 03F58053 		add	r3, r3, #4096
ARM GAS  /tmp/cc7Dq4FC.s 			page 43


 352 00da 1D60     		str	r5, [r3]
1840:HALLIB/Src/stm32f7xx_hal_eth.c ****      {
 353              		.loc 1 1840 0
 354 00dc A369     		ldr	r3, [r4, #24]
 355 00de 012B     		cmp	r3, #1
 356 00e0 06D1     		bne	.L12
1843:HALLIB/Src/stm32f7xx_hal_eth.c ****      }
 357              		.loc 1 1843 0
 358 00e2 2168     		ldr	r1, [r4]
 359 00e4 41F21C02 		movw	r2, #4124
 360 00e8 8858     		ldr	r0, [r1, r2]
 361 00ea 094B     		ldr	r3, .L14+16
 362 00ec 0343     		orrs	r3, r3, r0
 363 00ee 8B50     		str	r3, [r1, r2]
 364              	.L12:
1847:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 365              		.loc 1 1847 0
 366 00f0 6269     		ldr	r2, [r4, #20]
 367 00f2 0021     		movs	r1, #0
 368 00f4 2046     		mov	r0, r4
 369 00f6 FFF7FEFF 		bl	ETH_MACAddressConfig
 370              	.LVL41:
1848:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 371              		.loc 1 1848 0
 372 00fa 1EB0     		add	sp, sp, #120
 373              	.LCFI2:
 374              		.cfi_def_cfa_offset 16
 375              		@ sp needed
 376 00fc 70BD     		pop	{r4, r5, r6, pc}
 377              	.LVL42:
 378              	.L15:
 379 00fe 00BF     		.align	2
 380              	.L14:
 381 0100 0F8120FF 		.word	-14647025
 382 0104 233FDEF8 		.word	-119652573
 383 0108 04002002 		.word	35651588
 384 010c 8020C102 		.word	46211200
 385 0110 40000100 		.word	65600
 386              		.cfi_endproc
 387              	.LFE156:
 389              		.section	.text.ETH_MACTransmissionEnable,"ax",%progbits
 390              		.align	2
 391              		.thumb
 392              		.thumb_func
 394              	ETH_MACTransmissionEnable:
 395              	.LFB158:
1888:HALLIB/Src/stm32f7xx_hal_eth.c ****   __IO uint32_t tmpreg = 0;
 396              		.loc 1 1888 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 8
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400              	.LVL43:
 401 0000 10B5     		push	{r4, lr}
 402              	.LCFI3:
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 4, -8
 405              		.cfi_offset 14, -4
ARM GAS  /tmp/cc7Dq4FC.s 			page 44


 406 0002 82B0     		sub	sp, sp, #8
 407              	.LCFI4:
 408              		.cfi_def_cfa_offset 16
 409 0004 0446     		mov	r4, r0
1889:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 410              		.loc 1 1889 0
 411 0006 0023     		movs	r3, #0
 412 0008 0193     		str	r3, [sp, #4]
1892:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 413              		.loc 1 1892 0
 414 000a 0268     		ldr	r2, [r0]
 415 000c 1368     		ldr	r3, [r2]
 416 000e 43F00803 		orr	r3, r3, #8
 417 0012 1360     		str	r3, [r2]
1896:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
 418              		.loc 1 1896 0
 419 0014 0368     		ldr	r3, [r0]
 420 0016 1B68     		ldr	r3, [r3]
 421 0018 0193     		str	r3, [sp, #4]
1897:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR = tmpreg;
 422              		.loc 1 1897 0
 423 001a 0120     		movs	r0, #1
 424              	.LVL44:
 425 001c FFF7FEFF 		bl	HAL_Delay
 426              	.LVL45:
1898:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 427              		.loc 1 1898 0
 428 0020 2368     		ldr	r3, [r4]
 429 0022 019A     		ldr	r2, [sp, #4]
 430 0024 1A60     		str	r2, [r3]
1899:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 431              		.loc 1 1899 0
 432 0026 02B0     		add	sp, sp, #8
 433              	.LCFI5:
 434              		.cfi_def_cfa_offset 8
 435              		@ sp needed
 436 0028 10BD     		pop	{r4, pc}
 437              		.cfi_endproc
 438              	.LFE158:
 440 002a 00BF     		.section	.text.ETH_MACReceptionEnable,"ax",%progbits
 441              		.align	2
 442              		.thumb
 443              		.thumb_func
 445              	ETH_MACReceptionEnable:
 446              	.LFB160:
1928:HALLIB/Src/stm32f7xx_hal_eth.c ****   __IO uint32_t tmpreg = 0;
 447              		.loc 1 1928 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451              	.LVL46:
 452 0000 10B5     		push	{r4, lr}
 453              	.LCFI6:
 454              		.cfi_def_cfa_offset 8
 455              		.cfi_offset 4, -8
 456              		.cfi_offset 14, -4
 457 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/cc7Dq4FC.s 			page 45


 458              	.LCFI7:
 459              		.cfi_def_cfa_offset 16
 460 0004 0446     		mov	r4, r0
1929:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 461              		.loc 1 1929 0
 462 0006 0023     		movs	r3, #0
 463 0008 0193     		str	r3, [sp, #4]
1932:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 464              		.loc 1 1932 0
 465 000a 0268     		ldr	r2, [r0]
 466 000c 1368     		ldr	r3, [r2]
 467 000e 43F00403 		orr	r3, r3, #4
 468 0012 1360     		str	r3, [r2]
1936:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
 469              		.loc 1 1936 0
 470 0014 0368     		ldr	r3, [r0]
 471 0016 1B68     		ldr	r3, [r3]
 472 0018 0193     		str	r3, [sp, #4]
1937:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR = tmpreg;
 473              		.loc 1 1937 0
 474 001a 0120     		movs	r0, #1
 475              	.LVL47:
 476 001c FFF7FEFF 		bl	HAL_Delay
 477              	.LVL48:
1938:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 478              		.loc 1 1938 0
 479 0020 2368     		ldr	r3, [r4]
 480 0022 019A     		ldr	r2, [sp, #4]
 481 0024 1A60     		str	r2, [r3]
1939:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 482              		.loc 1 1939 0
 483 0026 02B0     		add	sp, sp, #8
 484              	.LCFI8:
 485              		.cfi_def_cfa_offset 8
 486              		@ sp needed
 487 0028 10BD     		pop	{r4, pc}
 488              		.cfi_endproc
 489              	.LFE160:
 491 002a 00BF     		.section	.text.ETH_FlushTransmitFIFO,"ax",%progbits
 492              		.align	2
 493              		.thumb
 494              		.thumb_func
 496              	ETH_FlushTransmitFIFO:
 497              	.LFB166:
2007:HALLIB/Src/stm32f7xx_hal_eth.c **** }
2008:HALLIB/Src/stm32f7xx_hal_eth.c **** 
2009:HALLIB/Src/stm32f7xx_hal_eth.c **** /**
2010:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @brief  Clears the ETHERNET transmit FIFO.
2011:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @param  heth pointer to a ETH_HandleTypeDef structure that contains
2012:HALLIB/Src/stm32f7xx_hal_eth.c ****   *         the configuration information for ETHERNET module
2013:HALLIB/Src/stm32f7xx_hal_eth.c ****   * @retval None
2014:HALLIB/Src/stm32f7xx_hal_eth.c ****   */
2015:HALLIB/Src/stm32f7xx_hal_eth.c **** static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
2016:HALLIB/Src/stm32f7xx_hal_eth.c **** {
 498              		.loc 1 2016 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cc7Dq4FC.s 			page 46


 501              		@ frame_needed = 0, uses_anonymous_args = 0
 502              	.LVL49:
 503 0000 30B5     		push	{r4, r5, lr}
 504              	.LCFI9:
 505              		.cfi_def_cfa_offset 12
 506              		.cfi_offset 4, -12
 507              		.cfi_offset 5, -8
 508              		.cfi_offset 14, -4
 509 0002 83B0     		sub	sp, sp, #12
 510              	.LCFI10:
 511              		.cfi_def_cfa_offset 24
 512 0004 0546     		mov	r5, r0
2017:HALLIB/Src/stm32f7xx_hal_eth.c ****   __IO uint32_t tmpreg = 0;
 513              		.loc 1 2017 0
 514 0006 0023     		movs	r3, #0
 515 0008 0193     		str	r3, [sp, #4]
2018:HALLIB/Src/stm32f7xx_hal_eth.c ****   
2019:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the Flush Transmit FIFO bit */
2020:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 516              		.loc 1 2020 0
 517 000a 0268     		ldr	r2, [r0]
 518 000c 41F21804 		movw	r4, #4120
 519 0010 1359     		ldr	r3, [r2, r4]
 520 0012 43F48013 		orr	r3, r3, #1048576
 521 0016 1351     		str	r3, [r2, r4]
2021:HALLIB/Src/stm32f7xx_hal_eth.c ****   
2022:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Wait until the write operation will be taken into account:
2023:HALLIB/Src/stm32f7xx_hal_eth.c ****      at least four TX_CLK/RX_CLK clock cycles */
2024:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg = (heth->Instance)->DMAOMR;
 522              		.loc 1 2024 0
 523 0018 0368     		ldr	r3, [r0]
 524 001a 1B59     		ldr	r3, [r3, r4]
 525 001c 0193     		str	r3, [sp, #4]
2025:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
 526              		.loc 1 2025 0
 527 001e 0120     		movs	r0, #1
 528              	.LVL50:
 529 0020 FFF7FEFF 		bl	HAL_Delay
 530              	.LVL51:
2026:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMAOMR = tmpreg;
 531              		.loc 1 2026 0
 532 0024 2B68     		ldr	r3, [r5]
 533 0026 019A     		ldr	r2, [sp, #4]
 534 0028 1A51     		str	r2, [r3, r4]
2027:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 535              		.loc 1 2027 0
 536 002a 03B0     		add	sp, sp, #12
 537              	.LCFI11:
 538              		.cfi_def_cfa_offset 12
 539              		@ sp needed
 540 002c 30BD     		pop	{r4, r5, pc}
 541              		.cfi_endproc
 542              	.LFE166:
 544 002e 00BF     		.section	.text.ETH_MACReceptionDisable,"ax",%progbits
 545              		.align	2
 546              		.thumb
 547              		.thumb_func
ARM GAS  /tmp/cc7Dq4FC.s 			page 47


 549              	ETH_MACReceptionDisable:
 550              	.LFB161:
1948:HALLIB/Src/stm32f7xx_hal_eth.c ****   __IO uint32_t tmpreg = 0;
 551              		.loc 1 1948 0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 8
 554              		@ frame_needed = 0, uses_anonymous_args = 0
 555              	.LVL52:
 556 0000 10B5     		push	{r4, lr}
 557              	.LCFI12:
 558              		.cfi_def_cfa_offset 8
 559              		.cfi_offset 4, -8
 560              		.cfi_offset 14, -4
 561 0002 82B0     		sub	sp, sp, #8
 562              	.LCFI13:
 563              		.cfi_def_cfa_offset 16
 564 0004 0446     		mov	r4, r0
1949:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 565              		.loc 1 1949 0
 566 0006 0023     		movs	r3, #0
 567 0008 0193     		str	r3, [sp, #4]
1952:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 568              		.loc 1 1952 0
 569 000a 0268     		ldr	r2, [r0]
 570 000c 1368     		ldr	r3, [r2]
 571 000e 23F00403 		bic	r3, r3, #4
 572 0012 1360     		str	r3, [r2]
1956:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
 573              		.loc 1 1956 0
 574 0014 0368     		ldr	r3, [r0]
 575 0016 1B68     		ldr	r3, [r3]
 576 0018 0193     		str	r3, [sp, #4]
1957:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR = tmpreg;
 577              		.loc 1 1957 0
 578 001a 0120     		movs	r0, #1
 579              	.LVL53:
 580 001c FFF7FEFF 		bl	HAL_Delay
 581              	.LVL54:
1958:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 582              		.loc 1 1958 0
 583 0020 2368     		ldr	r3, [r4]
 584 0022 019A     		ldr	r2, [sp, #4]
 585 0024 1A60     		str	r2, [r3]
1959:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 586              		.loc 1 1959 0
 587 0026 02B0     		add	sp, sp, #8
 588              	.LCFI14:
 589              		.cfi_def_cfa_offset 8
 590              		@ sp needed
 591 0028 10BD     		pop	{r4, pc}
 592              		.cfi_endproc
 593              	.LFE161:
 595 002a 00BF     		.section	.text.ETH_MACTransmissionDisable,"ax",%progbits
 596              		.align	2
 597              		.thumb
 598              		.thumb_func
 600              	ETH_MACTransmissionDisable:
ARM GAS  /tmp/cc7Dq4FC.s 			page 48


 601              	.LFB159:
1908:HALLIB/Src/stm32f7xx_hal_eth.c ****   __IO uint32_t tmpreg = 0;
 602              		.loc 1 1908 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 8
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              	.LVL55:
 607 0000 10B5     		push	{r4, lr}
 608              	.LCFI15:
 609              		.cfi_def_cfa_offset 8
 610              		.cfi_offset 4, -8
 611              		.cfi_offset 14, -4
 612 0002 82B0     		sub	sp, sp, #8
 613              	.LCFI16:
 614              		.cfi_def_cfa_offset 16
 615 0004 0446     		mov	r4, r0
1909:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 616              		.loc 1 1909 0
 617 0006 0023     		movs	r3, #0
 618 0008 0193     		str	r3, [sp, #4]
1912:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 619              		.loc 1 1912 0
 620 000a 0268     		ldr	r2, [r0]
 621 000c 1368     		ldr	r3, [r2]
 622 000e 23F00803 		bic	r3, r3, #8
 623 0012 1360     		str	r3, [r2]
1916:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
 624              		.loc 1 1916 0
 625 0014 0368     		ldr	r3, [r0]
 626 0016 1B68     		ldr	r3, [r3]
 627 0018 0193     		str	r3, [sp, #4]
1917:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->MACCR = tmpreg;
 628              		.loc 1 1917 0
 629 001a 0120     		movs	r0, #1
 630              	.LVL56:
 631 001c FFF7FEFF 		bl	HAL_Delay
 632              	.LVL57:
1918:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 633              		.loc 1 1918 0
 634 0020 2368     		ldr	r3, [r4]
 635 0022 019A     		ldr	r2, [sp, #4]
 636 0024 1A60     		str	r2, [r3]
1919:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 637              		.loc 1 1919 0
 638 0026 02B0     		add	sp, sp, #8
 639              	.LCFI17:
 640              		.cfi_def_cfa_offset 8
 641              		@ sp needed
 642 0028 10BD     		pop	{r4, pc}
 643              		.cfi_endproc
 644              	.LFE159:
 646 002a 00BF     		.section	.text.HAL_ETH_DMATxDescListInit,"ax",%progbits
 647              		.align	2
 648              		.global	HAL_ETH_DMATxDescListInit
 649              		.thumb
 650              		.thumb_func
 652              	HAL_ETH_DMATxDescListInit:
ARM GAS  /tmp/cc7Dq4FC.s 			page 49


 653              	.LFB138:
 473:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t i = 0;
 654              		.loc 1 473 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 0
 657              		@ frame_needed = 0, uses_anonymous_args = 0
 658              		@ link register save eliminated.
 659              	.LVL58:
 660 0000 F0B4     		push	{r4, r5, r6, r7}
 661              	.LCFI18:
 662              		.cfi_def_cfa_offset 16
 663              		.cfi_offset 4, -16
 664              		.cfi_offset 5, -12
 665              		.cfi_offset 6, -8
 666              		.cfi_offset 7, -4
 667              	.LVL59:
 478:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 668              		.loc 1 478 0
 669 0002 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 670 0006 012C     		cmp	r4, #1
 671 0008 30D0     		beq	.L33
 478:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 672              		.loc 1 478 0 is_stmt 0 discriminator 2
 673 000a 0124     		movs	r4, #1
 674 000c 80F84540 		strb	r4, [r0, #69]
 481:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 675              		.loc 1 481 0 is_stmt 1 discriminator 2
 676 0010 0224     		movs	r4, #2
 677 0012 80F84440 		strb	r4, [r0, #68]
 484:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 678              		.loc 1 484 0 discriminator 2
 679 0016 C162     		str	r1, [r0, #44]
 487:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 680              		.loc 1 487 0 discriminator 2
 681 0018 0024     		movs	r4, #0
 682 001a 19E0     		b	.L28
 683              	.LVL60:
 684              	.L32:
 490:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 685              		.loc 1 490 0
 686 001c 6501     		lsls	r5, r4, #5
 687 001e 4F19     		adds	r7, r1, r5
 688              	.LVL61:
 493:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 689              		.loc 1 493 0
 690 0020 4FF48016 		mov	r6, #1048576
 691 0024 4E51     		str	r6, [r1, r5]
 496:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 692              		.loc 1 496 0
 693 0026 40F2F456 		movw	r6, #1524
 694 002a 06FB0426 		mla	r6, r6, r4, r2
 695 002e BE60     		str	r6, [r7, #8]
 498:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 696              		.loc 1 498 0
 697 0030 C669     		ldr	r6, [r0, #28]
 698 0032 1EB9     		cbnz	r6, .L29
 501:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
ARM GAS  /tmp/cc7Dq4FC.s 			page 50


 699              		.loc 1 501 0
 700 0034 4E59     		ldr	r6, [r1, r5]
 701 0036 46F44006 		orr	r6, r6, #12582912
 702 003a 4E51     		str	r6, [r1, r5]
 703              	.L29:
 505:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 704              		.loc 1 505 0
 705 003c 5D1E     		subs	r5, r3, #1
 706 003e AC42     		cmp	r4, r5
 707 0040 04D2     		bcs	.L30
 508:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 708              		.loc 1 508 0
 709 0042 651C     		adds	r5, r4, #1
 710 0044 01EB4515 		add	r5, r1, r5, lsl #5
 711 0048 FD60     		str	r5, [r7, #12]
 712 004a 00E0     		b	.L31
 713              	.L30:
 513:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 714              		.loc 1 513 0
 715 004c F960     		str	r1, [r7, #12]
 716              	.L31:
 487:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 717              		.loc 1 487 0 discriminator 2
 718 004e 0134     		adds	r4, r4, #1
 719              	.LVL62:
 720              	.L28:
 487:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 721              		.loc 1 487 0 is_stmt 0 discriminator 1
 722 0050 9C42     		cmp	r4, r3
 723 0052 E3D3     		bcc	.L32
 518:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 724              		.loc 1 518 0 is_stmt 1
 725 0054 0268     		ldr	r2, [r0]
 726              	.LVL63:
 727 0056 41F21003 		movw	r3, #4112
 728              	.LVL64:
 729 005a D150     		str	r1, [r2, r3]
 521:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 730              		.loc 1 521 0
 731 005c 0123     		movs	r3, #1
 732 005e 80F84430 		strb	r3, [r0, #68]
 524:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 733              		.loc 1 524 0
 734 0062 0023     		movs	r3, #0
 735 0064 80F84530 		strb	r3, [r0, #69]
 527:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 736              		.loc 1 527 0
 737 0068 1846     		mov	r0, r3
 738              	.LVL65:
 739 006a 00E0     		b	.L27
 740              	.LVL66:
 741              	.L33:
 478:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 742              		.loc 1 478 0
 743 006c 0220     		movs	r0, #2
 744              	.LVL67:
 745              	.L27:
ARM GAS  /tmp/cc7Dq4FC.s 			page 51


 528:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 746              		.loc 1 528 0
 747 006e F0BC     		pop	{r4, r5, r6, r7}
 748              	.LCFI19:
 749              		.cfi_restore 7
 750              		.cfi_restore 6
 751              		.cfi_restore 5
 752              		.cfi_restore 4
 753              		.cfi_def_cfa_offset 0
 754 0070 7047     		bx	lr
 755              		.cfi_endproc
 756              	.LFE138:
 758 0072 00BF     		.section	.text.HAL_ETH_DMARxDescListInit,"ax",%progbits
 759              		.align	2
 760              		.global	HAL_ETH_DMARxDescListInit
 761              		.thumb
 762              		.thumb_func
 764              	HAL_ETH_DMARxDescListInit:
 765              	.LFB139:
 540:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t i = 0;
 766              		.loc 1 540 0
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 0
 769              		@ frame_needed = 0, uses_anonymous_args = 0
 770              		@ link register save eliminated.
 771              	.LVL68:
 772 0000 F0B4     		push	{r4, r5, r6, r7}
 773              	.LCFI20:
 774              		.cfi_def_cfa_offset 16
 775              		.cfi_offset 4, -16
 776              		.cfi_offset 5, -12
 777              		.cfi_offset 6, -8
 778              		.cfi_offset 7, -4
 779              	.LVL69:
 545:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 780              		.loc 1 545 0
 781 0002 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 782 0006 012C     		cmp	r4, #1
 783 0008 2DD0     		beq	.L41
 545:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 784              		.loc 1 545 0 is_stmt 0 discriminator 2
 785 000a 0124     		movs	r4, #1
 786 000c 80F84540 		strb	r4, [r0, #69]
 548:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 787              		.loc 1 548 0 is_stmt 1 discriminator 2
 788 0010 0224     		movs	r4, #2
 789 0012 80F84440 		strb	r4, [r0, #68]
 551:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 790              		.loc 1 551 0 discriminator 2
 791 0016 8162     		str	r1, [r0, #40]
 554:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 792              		.loc 1 554 0 discriminator 2
 793 0018 0024     		movs	r4, #0
 794 001a 16E0     		b	.L37
 795              	.LVL70:
 796              	.L40:
 557:HALLIB/Src/stm32f7xx_hal_eth.c ****     
ARM GAS  /tmp/cc7Dq4FC.s 			page 52


 797              		.loc 1 557 0
 798 001c 6601     		lsls	r6, r4, #5
 799 001e 8D19     		adds	r5, r1, r6
 800              	.LVL71:
 560:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 801              		.loc 1 560 0
 802 0020 4FF00047 		mov	r7, #-2147483648
 803 0024 8F51     		str	r7, [r1, r6]
 563:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 804              		.loc 1 563 0
 805 0026 44F2F456 		movw	r6, #17908
 806 002a 6E60     		str	r6, [r5, #4]
 566:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 807              		.loc 1 566 0
 808 002c 40F2F456 		movw	r6, #1524
 809 0030 06FB0426 		mla	r6, r6, r4, r2
 810 0034 AE60     		str	r6, [r5, #8]
 575:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 811              		.loc 1 575 0
 812 0036 5E1E     		subs	r6, r3, #1
 813 0038 B442     		cmp	r4, r6
 814 003a 04D2     		bcs	.L38
 578:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 815              		.loc 1 578 0
 816 003c 661C     		adds	r6, r4, #1
 817 003e 01EB4616 		add	r6, r1, r6, lsl #5
 818 0042 EE60     		str	r6, [r5, #12]
 819 0044 00E0     		b	.L39
 820              	.L38:
 583:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 821              		.loc 1 583 0
 822 0046 E960     		str	r1, [r5, #12]
 823              	.L39:
 554:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 824              		.loc 1 554 0 discriminator 2
 825 0048 0134     		adds	r4, r4, #1
 826              	.LVL72:
 827              	.L37:
 554:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 828              		.loc 1 554 0 is_stmt 0 discriminator 1
 829 004a 9C42     		cmp	r4, r3
 830 004c E6D3     		bcc	.L40
 588:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 831              		.loc 1 588 0 is_stmt 1
 832 004e 0268     		ldr	r2, [r0]
 833              	.LVL73:
 834 0050 41F20C03 		movw	r3, #4108
 835              	.LVL74:
 836 0054 D150     		str	r1, [r2, r3]
 591:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 837              		.loc 1 591 0
 838 0056 0123     		movs	r3, #1
 839 0058 80F84430 		strb	r3, [r0, #68]
 594:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 840              		.loc 1 594 0
 841 005c 0023     		movs	r3, #0
 842 005e 80F84530 		strb	r3, [r0, #69]
ARM GAS  /tmp/cc7Dq4FC.s 			page 53


 597:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 843              		.loc 1 597 0
 844 0062 1846     		mov	r0, r3
 845              	.LVL75:
 846 0064 00E0     		b	.L36
 847              	.LVL76:
 848              	.L41:
 545:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 849              		.loc 1 545 0
 850 0066 0220     		movs	r0, #2
 851              	.LVL77:
 852              	.L36:
 598:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 853              		.loc 1 598 0
 854 0068 F0BC     		pop	{r4, r5, r6, r7}
 855              	.LCFI21:
 856              		.cfi_restore 7
 857              		.cfi_restore 6
 858              		.cfi_restore 5
 859              		.cfi_restore 4
 860              		.cfi_def_cfa_offset 0
 861 006a 7047     		bx	lr
 862              		.cfi_endproc
 863              	.LFE139:
 865              		.section	.text.HAL_ETH_MspInit,"ax",%progbits
 866              		.align	2
 867              		.weak	HAL_ETH_MspInit
 868              		.thumb
 869              		.thumb_func
 871              	HAL_ETH_MspInit:
 872              	.LFB140:
 607:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prevent unused argument(s) compilation warning */
 873              		.loc 1 607 0
 874              		.cfi_startproc
 875              		@ args = 0, pretend = 0, frame = 0
 876              		@ frame_needed = 0, uses_anonymous_args = 0
 877              		@ link register save eliminated.
 878              	.LVL78:
 879 0000 7047     		bx	lr
 880              		.cfi_endproc
 881              	.LFE140:
 883 0002 00BF     		.section	.text.HAL_ETH_MspDeInit,"ax",%progbits
 884              		.align	2
 885              		.weak	HAL_ETH_MspDeInit
 886              		.thumb
 887              		.thumb_func
 889              	HAL_ETH_MspDeInit:
 890              	.LFB141:
 623:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prevent unused argument(s) compilation warning */
 891              		.loc 1 623 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895              		@ link register save eliminated.
 896              	.LVL79:
 897 0000 7047     		bx	lr
 898              		.cfi_endproc
ARM GAS  /tmp/cc7Dq4FC.s 			page 54


 899              	.LFE141:
 901 0002 00BF     		.section	.text.HAL_ETH_DeInit,"ax",%progbits
 902              		.align	2
 903              		.global	HAL_ETH_DeInit
 904              		.thumb
 905              		.thumb_func
 907              	HAL_ETH_DeInit:
 908              	.LFB137:
 446:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH peripheral state to BUSY */
 909              		.loc 1 446 0
 910              		.cfi_startproc
 911              		@ args = 0, pretend = 0, frame = 0
 912              		@ frame_needed = 0, uses_anonymous_args = 0
 913              	.LVL80:
 446:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Set the ETH peripheral state to BUSY */
 914              		.loc 1 446 0
 915 0000 10B5     		push	{r4, lr}
 916              	.LCFI22:
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 4, -8
 919              		.cfi_offset 14, -4
 920 0002 0446     		mov	r4, r0
 448:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 921              		.loc 1 448 0
 922 0004 0223     		movs	r3, #2
 923 0006 80F84430 		strb	r3, [r0, #68]
 451:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 924              		.loc 1 451 0
 925 000a FFF7FEFF 		bl	HAL_ETH_MspDeInit
 926              	.LVL81:
 454:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 927              		.loc 1 454 0
 928 000e 0020     		movs	r0, #0
 929 0010 84F84400 		strb	r0, [r4, #68]
 457:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 930              		.loc 1 457 0
 931 0014 84F84500 		strb	r0, [r4, #69]
 461:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 932              		.loc 1 461 0
 933 0018 10BD     		pop	{r4, pc}
 934              		.cfi_endproc
 935              	.LFE137:
 937 001a 00BF     		.section	.text.HAL_ETH_TransmitFrame,"ax",%progbits
 938              		.align	2
 939              		.global	HAL_ETH_TransmitFrame
 940              		.thumb
 941              		.thumb_func
 943              	HAL_ETH_TransmitFrame:
 944              	.LFB142:
 667:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t bufcount = 0, size = 0, i = 0;
 945              		.loc 1 667 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 0
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 949              		@ link register save eliminated.
 950              	.LVL82:
 671:HALLIB/Src/stm32f7xx_hal_eth.c ****   
ARM GAS  /tmp/cc7Dq4FC.s 			page 55


 951              		.loc 1 671 0
 952 0000 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 953 0004 012B     		cmp	r3, #1
 954 0006 00F08480 		beq	.L58
 671:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 955              		.loc 1 671 0 is_stmt 0 discriminator 2
 956 000a 0123     		movs	r3, #1
 957 000c 80F84530 		strb	r3, [r0, #69]
 674:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 958              		.loc 1 674 0 is_stmt 1 discriminator 2
 959 0010 0223     		movs	r3, #2
 960 0012 80F84430 		strb	r3, [r0, #68]
 676:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 961              		.loc 1 676 0 discriminator 2
 962 0016 39B9     		cbnz	r1, .L49
 679:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 963              		.loc 1 679 0
 964 0018 0123     		movs	r3, #1
 965 001a 80F84430 		strb	r3, [r0, #68]
 682:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 966              		.loc 1 682 0
 967 001e 0022     		movs	r2, #0
 968 0020 80F84520 		strb	r2, [r0, #69]
 684:HALLIB/Src/stm32f7xx_hal_eth.c ****   }  
 969              		.loc 1 684 0
 970 0024 1846     		mov	r0, r3
 971              	.LVL83:
 972 0026 7047     		bx	lr
 973              	.LVL84:
 974              	.L49:
 688:HALLIB/Src/stm32f7xx_hal_eth.c ****   {  
 975              		.loc 1 688 0
 976 0028 C36A     		ldr	r3, [r0, #44]
 977 002a 1A68     		ldr	r2, [r3]
 978 002c 002A     		cmp	r2, #0
 979 002e 07DA     		bge	.L50
 691:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 980              		.loc 1 691 0
 981 0030 1223     		movs	r3, #18
 982 0032 80F84430 		strb	r3, [r0, #68]
 694:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 983              		.loc 1 694 0
 984 0036 0023     		movs	r3, #0
 985 0038 80F84530 		strb	r3, [r0, #69]
 696:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 986              		.loc 1 696 0
 987 003c 0120     		movs	r0, #1
 988              	.LVL85:
 989 003e 7047     		bx	lr
 990              	.LVL86:
 991              	.L50:
 667:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t bufcount = 0, size = 0, i = 0;
 992              		.loc 1 667 0
 993 0040 30B4     		push	{r4, r5}
 994              	.LCFI23:
 995              		.cfi_def_cfa_offset 8
 996              		.cfi_offset 4, -8
ARM GAS  /tmp/cc7Dq4FC.s 			page 56


 997              		.cfi_offset 5, -4
 700:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 998              		.loc 1 700 0
 999 0042 40F2F452 		movw	r2, #1524
 1000 0046 9142     		cmp	r1, r2
 1001 0048 0AD9     		bls	.L59
 702:HALLIB/Src/stm32f7xx_hal_eth.c ****     if (FrameLength % ETH_TX_BUF_SIZE) 
 1002              		.loc 1 702 0
 1003 004a 344C     		ldr	r4, .L63
 1004 004c A4FB0124 		umull	r2, r4, r4, r1
 1005 0050 A40A     		lsrs	r4, r4, #10
 1006              	.LVL87:
 703:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 1007              		.loc 1 703 0
 1008 0052 40F2F452 		movw	r2, #1524
 1009 0056 02FB1412 		mls	r2, r2, r4, r1
 1010 005a 12B1     		cbz	r2, .L51
 705:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 1011              		.loc 1 705 0
 1012 005c 0134     		adds	r4, r4, #1
 1013              	.LVL88:
 1014 005e 00E0     		b	.L51
 1015              	.LVL89:
 1016              	.L59:
 710:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1017              		.loc 1 710 0
 1018 0060 0124     		movs	r4, #1
 1019              	.LVL90:
 1020              	.L51:
 712:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1021              		.loc 1 712 0
 1022 0062 012C     		cmp	r4, #1
 1023 0064 3AD1     		bne	.L60
 715:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set frame size */
 1024              		.loc 1 715 0
 1025 0066 1A68     		ldr	r2, [r3]
 1026 0068 42F04052 		orr	r2, r2, #805306368
 1027 006c 1A60     		str	r2, [r3]
 717:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
 1028              		.loc 1 717 0
 1029 006e C36A     		ldr	r3, [r0, #44]
 1030 0070 C1F30C01 		ubfx	r1, r1, #0, #13
 1031              	.LVL91:
 1032 0074 5960     		str	r1, [r3, #4]
 719:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Point to next descriptor */
 1033              		.loc 1 719 0
 1034 0076 C26A     		ldr	r2, [r0, #44]
 1035 0078 1368     		ldr	r3, [r2]
 1036 007a 43F00043 		orr	r3, r3, #-2147483648
 1037 007e 1360     		str	r3, [r2]
 721:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1038              		.loc 1 721 0
 1039 0080 C36A     		ldr	r3, [r0, #44]
 1040 0082 DB68     		ldr	r3, [r3, #12]
 1041 0084 C362     		str	r3, [r0, #44]
 1042 0086 2CE0     		b	.L53
 1043              	.LVL92:
ARM GAS  /tmp/cc7Dq4FC.s 			page 57


 1044              	.L56:
 728:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1045              		.loc 1 728 0
 1046 0088 C56A     		ldr	r5, [r0, #44]
 1047 008a 2A68     		ldr	r2, [r5]
 1048 008c 22F04052 		bic	r2, r2, #805306368
 1049 0090 2A60     		str	r2, [r5]
 730:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 1050              		.loc 1 730 0
 1051 0092 23B9     		cbnz	r3, .L54
 733:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
 1052              		.loc 1 733 0
 1053 0094 C56A     		ldr	r5, [r0, #44]
 1054 0096 2A68     		ldr	r2, [r5]
 1055 0098 42F08052 		orr	r2, r2, #268435456
 1056 009c 2A60     		str	r2, [r5]
 1057              	.L54:
 737:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1058              		.loc 1 737 0
 1059 009e C26A     		ldr	r2, [r0, #44]
 1060 00a0 40F2F455 		movw	r5, #1524
 1061 00a4 5560     		str	r5, [r2, #4]
 739:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 1062              		.loc 1 739 0
 1063 00a6 621E     		subs	r2, r4, #1
 1064 00a8 9342     		cmp	r3, r2
 1065 00aa 0DD1     		bne	.L55
 742:HALLIB/Src/stm32f7xx_hal_eth.c ****         size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 1066              		.loc 1 742 0
 1067 00ac C56A     		ldr	r5, [r0, #44]
 1068 00ae 2A68     		ldr	r2, [r5]
 1069 00b0 42F00052 		orr	r2, r2, #536870912
 1070 00b4 2A60     		str	r2, [r5]
 743:HALLIB/Src/stm32f7xx_hal_eth.c ****         heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 1071              		.loc 1 743 0
 1072 00b6 1A4A     		ldr	r2, .L63+4
 1073 00b8 02FB0412 		mla	r2, r2, r4, r1
 1074 00bc 02F2F452 		addw	r2, r2, #1524
 1075              	.LVL93:
 744:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
 1076              		.loc 1 744 0
 1077 00c0 C56A     		ldr	r5, [r0, #44]
 1078 00c2 C2F30C02 		ubfx	r2, r2, #0, #13
 1079              	.LVL94:
 1080 00c6 6A60     		str	r2, [r5, #4]
 1081              	.LVL95:
 1082              	.L55:
 748:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* point to next descriptor */
 1083              		.loc 1 748 0 discriminator 2
 1084 00c8 C56A     		ldr	r5, [r0, #44]
 1085 00ca 2A68     		ldr	r2, [r5]
 1086 00cc 42F00042 		orr	r2, r2, #-2147483648
 1087 00d0 2A60     		str	r2, [r5]
 750:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 1088              		.loc 1 750 0 discriminator 2
 1089 00d2 C26A     		ldr	r2, [r0, #44]
 1090 00d4 D268     		ldr	r2, [r2, #12]
ARM GAS  /tmp/cc7Dq4FC.s 			page 58


 1091 00d6 C262     		str	r2, [r0, #44]
 725:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 1092              		.loc 1 725 0 discriminator 2
 1093 00d8 0133     		adds	r3, r3, #1
 1094              	.LVL96:
 1095 00da 00E0     		b	.L52
 1096              	.LVL97:
 1097              	.L60:
 1098 00dc 0023     		movs	r3, #0
 1099              	.LVL98:
 1100              	.L52:
 725:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 1101              		.loc 1 725 0 is_stmt 0 discriminator 1
 1102 00de 9C42     		cmp	r4, r3
 1103 00e0 D2D8     		bhi	.L56
 1104              	.LVL99:
 1105              	.L53:
 755:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1106              		.loc 1 755 0 is_stmt 1
 1107 00e2 0368     		ldr	r3, [r0]
 1108 00e4 41F21402 		movw	r2, #4116
 1109 00e8 9A58     		ldr	r2, [r3, r2]
 1110 00ea 12F0040F 		tst	r2, #4
 1111 00ee 08D0     		beq	.L57
 758:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Resume DMA transmission*/
 1112              		.loc 1 758 0
 1113 00f0 0421     		movs	r1, #4
 1114 00f2 41F21402 		movw	r2, #4116
 1115 00f6 9950     		str	r1, [r3, r2]
 760:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1116              		.loc 1 760 0
 1117 00f8 0268     		ldr	r2, [r0]
 1118 00fa 0021     		movs	r1, #0
 1119 00fc 41F20403 		movw	r3, #4100
 1120 0100 D150     		str	r1, [r2, r3]
 1121              	.L57:
 764:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1122              		.loc 1 764 0
 1123 0102 0123     		movs	r3, #1
 1124 0104 80F84430 		strb	r3, [r0, #68]
 767:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1125              		.loc 1 767 0
 1126 0108 0023     		movs	r3, #0
 1127 010a 80F84530 		strb	r3, [r0, #69]
 770:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 1128              		.loc 1 770 0
 1129 010e 1846     		mov	r0, r3
 1130              	.LVL100:
 1131 0110 01E0     		b	.L48
 1132              	.LVL101:
 1133              	.L58:
 1134              	.LCFI24:
 1135              		.cfi_def_cfa_offset 0
 1136              		.cfi_restore 4
 1137              		.cfi_restore 5
 671:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1138              		.loc 1 671 0
ARM GAS  /tmp/cc7Dq4FC.s 			page 59


 1139 0112 0220     		movs	r0, #2
 1140              	.LVL102:
 1141 0114 7047     		bx	lr
 1142              	.LVL103:
 1143              	.L48:
 1144              	.LCFI25:
 1145              		.cfi_def_cfa_offset 8
 1146              		.cfi_offset 4, -8
 1147              		.cfi_offset 5, -4
 771:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 1148              		.loc 1 771 0
 1149 0116 30BC     		pop	{r4, r5}
 1150              	.LCFI26:
 1151              		.cfi_restore 5
 1152              		.cfi_restore 4
 1153              		.cfi_def_cfa_offset 0
 1154              	.LVL104:
 1155 0118 7047     		bx	lr
 1156              	.L64:
 1157 011a 00BF     		.align	2
 1158              	.L63:
 1159 011c 0BB002AC 		.word	-1409110005
 1160 0120 0CFAFFFF 		.word	-1524
 1161              		.cfi_endproc
 1162              	.LFE142:
 1164              		.section	.text.HAL_ETH_GetReceivedFrame,"ax",%progbits
 1165              		.align	2
 1166              		.global	HAL_ETH_GetReceivedFrame
 1167              		.thumb
 1168              		.thumb_func
 1170              	HAL_ETH_GetReceivedFrame:
 1171              	.LFB143:
 780:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t framelength = 0;
 1172              		.loc 1 780 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 0
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
 1176              		@ link register save eliminated.
 1177              	.LVL105:
 784:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1178              		.loc 1 784 0
 1179 0000 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1180 0004 012B     		cmp	r3, #1
 1181 0006 3FD0     		beq	.L71
 784:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1182              		.loc 1 784 0 is_stmt 0 discriminator 2
 1183 0008 0123     		movs	r3, #1
 1184 000a 80F84530 		strb	r3, [r0, #69]
 787:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1185              		.loc 1 787 0 is_stmt 1 discriminator 2
 1186 000e 0223     		movs	r3, #2
 1187 0010 80F84430 		strb	r3, [r0, #68]
 791:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1188              		.loc 1 791 0 discriminator 2
 1189 0014 836A     		ldr	r3, [r0, #40]
 1190 0016 1A68     		ldr	r2, [r3]
 1191 0018 002A     		cmp	r2, #0
ARM GAS  /tmp/cc7Dq4FC.s 			page 60


 1192 001a 2DDB     		blt	.L67
 794:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 1193              		.loc 1 794 0
 1194 001c 1A68     		ldr	r2, [r3]
 1195 001e 12F4807F 		tst	r2, #256
 1196 0022 18D0     		beq	.L68
 797:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1197              		.loc 1 797 0
 1198 0024 826B     		ldr	r2, [r0, #56]
 1199 0026 0132     		adds	r2, r2, #1
 1200 0028 8263     		str	r2, [r0, #56]
 800:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 1201              		.loc 1 800 0
 1202 002a 012A     		cmp	r2, #1
 1203 002c 00D1     		bne	.L69
 802:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
 1204              		.loc 1 802 0
 1205 002e 0363     		str	r3, [r0, #48]
 1206              	.L69:
 805:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1207              		.loc 1 805 0
 1208 0030 4363     		str	r3, [r0, #52]
 808:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxFrameInfos.length = framelength;
 1209              		.loc 1 808 0
 1210 0032 1A68     		ldr	r2, [r3]
 1211 0034 C2F30D42 		ubfx	r2, r2, #16, #14
 1212 0038 043A     		subs	r2, r2, #4
 1213              	.LVL106:
 809:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1214              		.loc 1 809 0
 1215 003a C263     		str	r2, [r0, #60]
 812:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* point to next descriptor */
 1216              		.loc 1 812 0
 1217 003c 026B     		ldr	r2, [r0, #48]
 1218              	.LVL107:
 1219 003e 9268     		ldr	r2, [r2, #8]
 1220 0040 0264     		str	r2, [r0, #64]
 814:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1221              		.loc 1 814 0
 1222 0042 DB68     		ldr	r3, [r3, #12]
 1223 0044 8362     		str	r3, [r0, #40]
 817:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1224              		.loc 1 817 0
 1225 0046 0123     		movs	r3, #1
 1226 0048 80F84430 		strb	r3, [r0, #68]
 820:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1227              		.loc 1 820 0
 1228 004c 0023     		movs	r3, #0
 1229 004e 80F84530 		strb	r3, [r0, #69]
 823:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 1230              		.loc 1 823 0
 1231 0052 1846     		mov	r0, r3
 1232              	.LVL108:
 1233 0054 7047     		bx	lr
 1234              	.LVL109:
 1235              	.L68:
 826:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
ARM GAS  /tmp/cc7Dq4FC.s 			page 61


 1236              		.loc 1 826 0
 1237 0056 1A68     		ldr	r2, [r3]
 1238 0058 12F4007F 		tst	r2, #512
 1239 005c 07D0     		beq	.L70
 828:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->RxFrameInfos).LSRxDesc = NULL;
 1240              		.loc 1 828 0
 1241 005e 0363     		str	r3, [r0, #48]
 829:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->RxFrameInfos).SegCount = 1;
 1242              		.loc 1 829 0
 1243 0060 0022     		movs	r2, #0
 1244 0062 4263     		str	r2, [r0, #52]
 830:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Point to next descriptor */
 1245              		.loc 1 830 0
 1246 0064 0122     		movs	r2, #1
 1247 0066 8263     		str	r2, [r0, #56]
 832:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 1248              		.loc 1 832 0
 1249 0068 DB68     		ldr	r3, [r3, #12]
 1250 006a 8362     		str	r3, [r0, #40]
 1251 006c 04E0     		b	.L67
 1252              	.L70:
 837:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Point to next descriptor */
 1253              		.loc 1 837 0
 1254 006e 826B     		ldr	r2, [r0, #56]
 1255 0070 0132     		adds	r2, r2, #1
 1256 0072 8263     		str	r2, [r0, #56]
 839:HALLIB/Src/stm32f7xx_hal_eth.c ****     } 
 1257              		.loc 1 839 0
 1258 0074 DB68     		ldr	r3, [r3, #12]
 1259 0076 8362     		str	r3, [r0, #40]
 1260              	.L67:
 844:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1261              		.loc 1 844 0
 1262 0078 0123     		movs	r3, #1
 1263 007a 80F84430 		strb	r3, [r0, #68]
 847:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1264              		.loc 1 847 0
 1265 007e 0022     		movs	r2, #0
 1266 0080 80F84520 		strb	r2, [r0, #69]
 850:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 1267              		.loc 1 850 0
 1268 0084 1846     		mov	r0, r3
 1269              	.LVL110:
 1270 0086 7047     		bx	lr
 1271              	.LVL111:
 1272              	.L71:
 784:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1273              		.loc 1 784 0
 1274 0088 0220     		movs	r0, #2
 1275              	.LVL112:
 851:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 1276              		.loc 1 851 0
 1277 008a 7047     		bx	lr
 1278              		.cfi_endproc
 1279              	.LFE143:
 1281              		.section	.text.HAL_ETH_GetReceivedFrame_IT,"ax",%progbits
 1282              		.align	2
ARM GAS  /tmp/cc7Dq4FC.s 			page 62


 1283              		.global	HAL_ETH_GetReceivedFrame_IT
 1284              		.thumb
 1285              		.thumb_func
 1287              	HAL_ETH_GetReceivedFrame_IT:
 1288              	.LFB144:
 860:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t descriptorscancounter = 0;
 1289              		.loc 1 860 0
 1290              		.cfi_startproc
 1291              		@ args = 0, pretend = 0, frame = 0
 1292              		@ frame_needed = 0, uses_anonymous_args = 0
 1293              		@ link register save eliminated.
 1294              	.LVL113:
 864:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1295              		.loc 1 864 0
 1296 0000 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1297 0004 012B     		cmp	r3, #1
 1298 0006 45D0     		beq	.L81
 864:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1299              		.loc 1 864 0 is_stmt 0 discriminator 2
 1300 0008 0123     		movs	r3, #1
 1301 000a 80F84530 		strb	r3, [r0, #69]
 867:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1302              		.loc 1 867 0 is_stmt 1 discriminator 2
 1303 000e 0223     		movs	r3, #2
 1304 0010 80F84430 		strb	r3, [r0, #68]
 861:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1305              		.loc 1 861 0 discriminator 2
 1306 0014 0021     		movs	r1, #0
 870:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1307              		.loc 1 870 0 discriminator 2
 1308 0016 2FE0     		b	.L74
 1309              	.LVL114:
 1310              	.L80:
 873:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1311              		.loc 1 873 0
 1312 0018 0131     		adds	r1, r1, #1
 1313              	.LVL115:
 877:HALLIB/Src/stm32f7xx_hal_eth.c ****     { 
 1314              		.loc 1 877 0
 1315 001a 1A68     		ldr	r2, [r3]
 1316 001c 02F44072 		and	r2, r2, #768
 1317 0020 B2F5007F 		cmp	r2, #512
 1318 0024 05D1     		bne	.L75
 879:HALLIB/Src/stm32f7xx_hal_eth.c ****       heth->RxFrameInfos.SegCount = 1;   
 1319              		.loc 1 879 0
 1320 0026 0363     		str	r3, [r0, #48]
 880:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Point to next descriptor */
 1321              		.loc 1 880 0
 1322 0028 0122     		movs	r2, #1
 1323 002a 8263     		str	r2, [r0, #56]
 882:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 1324              		.loc 1 882 0
 1325 002c DB68     		ldr	r3, [r3, #12]
 1326 002e 8362     		str	r3, [r0, #40]
 1327 0030 22E0     		b	.L74
 1328              	.L75:
 886:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
ARM GAS  /tmp/cc7Dq4FC.s 			page 63


 1329              		.loc 1 886 0
 1330 0032 1A68     		ldr	r2, [r3]
 1331 0034 12F4407F 		tst	r2, #768
 1332 0038 05D1     		bne	.L77
 889:HALLIB/Src/stm32f7xx_hal_eth.c ****       /* Point to next descriptor */
 1333              		.loc 1 889 0
 1334 003a 826B     		ldr	r2, [r0, #56]
 1335 003c 0132     		adds	r2, r2, #1
 1336 003e 8263     		str	r2, [r0, #56]
 891:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 1337              		.loc 1 891 0
 1338 0040 DB68     		ldr	r3, [r3, #12]
 1339 0042 8362     		str	r3, [r0, #40]
 1340 0044 18E0     		b	.L74
 1341              	.L77:
 897:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1342              		.loc 1 897 0
 1343 0046 4363     		str	r3, [r0, #52]
 900:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1344              		.loc 1 900 0
 1345 0048 826B     		ldr	r2, [r0, #56]
 1346 004a 0132     		adds	r2, r2, #1
 1347 004c 8263     		str	r2, [r0, #56]
 903:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 1348              		.loc 1 903 0
 1349 004e 012A     		cmp	r2, #1
 1350 0050 00D1     		bne	.L78
 905:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
 1351              		.loc 1 905 0
 1352 0052 0363     		str	r3, [r0, #48]
 1353              	.L78:
 909:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1354              		.loc 1 909 0
 1355 0054 1A68     		ldr	r2, [r3]
 1356 0056 C2F30D42 		ubfx	r2, r2, #16, #14
 1357 005a 043A     		subs	r2, r2, #4
 1358 005c C263     		str	r2, [r0, #60]
 912:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1359              		.loc 1 912 0
 1360 005e 026B     		ldr	r2, [r0, #48]
 1361 0060 9268     		ldr	r2, [r2, #8]
 1362 0062 0264     		str	r2, [r0, #64]
 915:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1363              		.loc 1 915 0
 1364 0064 DB68     		ldr	r3, [r3, #12]
 1365 0066 8362     		str	r3, [r0, #40]
 918:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1366              		.loc 1 918 0
 1367 0068 0123     		movs	r3, #1
 1368 006a 80F84430 		strb	r3, [r0, #68]
 921:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1369              		.loc 1 921 0
 1370 006e 0023     		movs	r3, #0
 1371 0070 80F84530 		strb	r3, [r0, #69]
 924:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 1372              		.loc 1 924 0
 1373 0074 1846     		mov	r0, r3
ARM GAS  /tmp/cc7Dq4FC.s 			page 64


 1374              	.LVL116:
 1375 0076 7047     		bx	lr
 1376              	.LVL117:
 1377              	.L74:
 870:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1378              		.loc 1 870 0
 1379 0078 836A     		ldr	r3, [r0, #40]
 1380 007a 1A68     		ldr	r2, [r3]
 1381 007c 002A     		cmp	r2, #0
 1382 007e 01DB     		blt	.L79
 870:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1383              		.loc 1 870 0 is_stmt 0 discriminator 1
 1384 0080 0429     		cmp	r1, #4
 1385 0082 C9D9     		bls	.L80
 1386              	.L79:
 929:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1387              		.loc 1 929 0 is_stmt 1
 1388 0084 0123     		movs	r3, #1
 1389 0086 80F84430 		strb	r3, [r0, #68]
 932:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1390              		.loc 1 932 0
 1391 008a 0022     		movs	r2, #0
 1392 008c 80F84520 		strb	r2, [r0, #69]
 935:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 1393              		.loc 1 935 0
 1394 0090 1846     		mov	r0, r3
 1395              	.LVL118:
 1396 0092 7047     		bx	lr
 1397              	.LVL119:
 1398              	.L81:
 864:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1399              		.loc 1 864 0
 1400 0094 0220     		movs	r0, #2
 1401              	.LVL120:
 936:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 1402              		.loc 1 936 0
 1403 0096 7047     		bx	lr
 1404              		.cfi_endproc
 1405              	.LFE144:
 1407              		.section	.text.HAL_ETH_TxCpltCallback,"ax",%progbits
 1408              		.align	2
 1409              		.weak	HAL_ETH_TxCpltCallback
 1410              		.thumb
 1411              		.thumb_func
 1413              	HAL_ETH_TxCpltCallback:
 1414              	.LFB146:
1005:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prevent unused argument(s) compilation warning */
 1415              		.loc 1 1005 0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 0, uses_anonymous_args = 0
 1419              		@ link register save eliminated.
 1420              	.LVL121:
 1421 0000 7047     		bx	lr
 1422              		.cfi_endproc
 1423              	.LFE146:
 1425 0002 00BF     		.section	.text.HAL_ETH_RxCpltCallback,"ax",%progbits
ARM GAS  /tmp/cc7Dq4FC.s 			page 65


 1426              		.align	2
 1427              		.weak	HAL_ETH_RxCpltCallback
 1428              		.thumb
 1429              		.thumb_func
 1431              	HAL_ETH_RxCpltCallback:
 1432              	.LFB147:
1021:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prevent unused argument(s) compilation warning */
 1433              		.loc 1 1021 0
 1434              		.cfi_startproc
 1435              		@ args = 0, pretend = 0, frame = 0
 1436              		@ frame_needed = 0, uses_anonymous_args = 0
 1437              		@ link register save eliminated.
 1438              	.LVL122:
 1439 0000 7047     		bx	lr
 1440              		.cfi_endproc
 1441              	.LFE147:
 1443 0002 00BF     		.section	.text.HAL_ETH_ErrorCallback,"ax",%progbits
 1444              		.align	2
 1445              		.weak	HAL_ETH_ErrorCallback
 1446              		.thumb
 1447              		.thumb_func
 1449              	HAL_ETH_ErrorCallback:
 1450              	.LFB148:
1037:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Prevent unused argument(s) compilation warning */
 1451              		.loc 1 1037 0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 0
 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 1455              		@ link register save eliminated.
 1456              	.LVL123:
 1457 0000 7047     		bx	lr
 1458              		.cfi_endproc
 1459              	.LFE148:
 1461 0002 00BF     		.section	.text.HAL_ETH_IRQHandler,"ax",%progbits
 1462              		.align	2
 1463              		.global	HAL_ETH_IRQHandler
 1464              		.thumb
 1465              		.thumb_func
 1467              	HAL_ETH_IRQHandler:
 1468              	.LFB145:
 945:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Frame received */
 1469              		.loc 1 945 0
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 0
 1472              		@ frame_needed = 0, uses_anonymous_args = 0
 1473              	.LVL124:
 945:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Frame received */
 1474              		.loc 1 945 0
 1475 0000 10B5     		push	{r4, lr}
 1476              	.LCFI27:
 1477              		.cfi_def_cfa_offset 8
 1478              		.cfi_offset 4, -8
 1479              		.cfi_offset 14, -4
 1480 0002 0446     		mov	r4, r0
 947:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1481              		.loc 1 947 0
 1482 0004 0368     		ldr	r3, [r0]
ARM GAS  /tmp/cc7Dq4FC.s 			page 66


 1483 0006 41F21402 		movw	r2, #4116
 1484 000a 9A58     		ldr	r2, [r3, r2]
 1485 000c 12F0400F 		tst	r2, #64
 1486 0010 0DD0     		beq	.L86
 950:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1487              		.loc 1 950 0
 1488 0012 FFF7FEFF 		bl	HAL_ETH_RxCpltCallback
 1489              	.LVL125:
 953:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 1490              		.loc 1 953 0
 1491 0016 2268     		ldr	r2, [r4]
 1492 0018 4021     		movs	r1, #64
 1493 001a 41F21403 		movw	r3, #4116
 1494 001e D150     		str	r1, [r2, r3]
 956:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1495              		.loc 1 956 0
 1496 0020 0123     		movs	r3, #1
 1497 0022 84F84430 		strb	r3, [r4, #68]
 959:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 1498              		.loc 1 959 0
 1499 0026 0023     		movs	r3, #0
 1500 0028 84F84530 		strb	r3, [r4, #69]
 1501 002c 11E0     		b	.L87
 1502              	.LVL126:
 1503              	.L86:
 963:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1504              		.loc 1 963 0
 1505 002e 41F21402 		movw	r2, #4116
 1506 0032 9B58     		ldr	r3, [r3, r2]
 1507 0034 13F0010F 		tst	r3, #1
 1508 0038 0BD0     		beq	.L87
 966:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1509              		.loc 1 966 0
 1510 003a FFF7FEFF 		bl	HAL_ETH_TxCpltCallback
 1511              	.LVL127:
 969:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 1512              		.loc 1 969 0
 1513 003e 2168     		ldr	r1, [r4]
 1514 0040 0123     		movs	r3, #1
 1515 0042 41F21402 		movw	r2, #4116
 1516 0046 8B50     		str	r3, [r1, r2]
 972:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1517              		.loc 1 972 0
 1518 0048 84F84430 		strb	r3, [r4, #68]
 975:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1519              		.loc 1 975 0
 1520 004c 0023     		movs	r3, #0
 1521 004e 84F84530 		strb	r3, [r4, #69]
 1522              	.L87:
 979:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1523              		.loc 1 979 0
 1524 0052 2268     		ldr	r2, [r4]
 1525 0054 41F21403 		movw	r3, #4116
 1526 0058 4FF48031 		mov	r1, #65536
 1527 005c D150     		str	r1, [r2, r3]
 982:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1528              		.loc 1 982 0
ARM GAS  /tmp/cc7Dq4FC.s 			page 67


 1529 005e 2268     		ldr	r2, [r4]
 1530 0060 D358     		ldr	r3, [r2, r3]
 1531 0062 13F4004F 		tst	r3, #32768
 1532 0066 0ED0     		beq	.L85
 985:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 1533              		.loc 1 985 0
 1534 0068 2046     		mov	r0, r4
 1535 006a FFF7FEFF 		bl	HAL_ETH_ErrorCallback
 1536              	.LVL128:
 988:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1537              		.loc 1 988 0
 1538 006e 2268     		ldr	r2, [r4]
 1539 0070 4FF40041 		mov	r1, #32768
 1540 0074 41F21403 		movw	r3, #4116
 1541 0078 D150     		str	r1, [r2, r3]
 991:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1542              		.loc 1 991 0
 1543 007a 0123     		movs	r3, #1
 1544 007c 84F84430 		strb	r3, [r4, #68]
 994:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1545              		.loc 1 994 0
 1546 0080 0023     		movs	r3, #0
 1547 0082 84F84530 		strb	r3, [r4, #69]
 1548              	.L85:
 1549 0086 10BD     		pop	{r4, pc}
 1550              		.cfi_endproc
 1551              	.LFE145:
 1553              		.section	.text.HAL_ETH_ReadPHYRegister,"ax",%progbits
 1554              		.align	2
 1555              		.global	HAL_ETH_ReadPHYRegister
 1556              		.thumb
 1557              		.thumb_func
 1559              	HAL_ETH_ReadPHYRegister:
 1560              	.LFB149:
1059:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;     
 1561              		.loc 1 1059 0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 0
 1564              		@ frame_needed = 0, uses_anonymous_args = 0
 1565              	.LVL129:
 1566 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1567              	.LCFI28:
 1568              		.cfi_def_cfa_offset 24
 1569              		.cfi_offset 3, -24
 1570              		.cfi_offset 4, -20
 1571              		.cfi_offset 5, -16
 1572              		.cfi_offset 6, -12
 1573              		.cfi_offset 7, -8
 1574              		.cfi_offset 14, -4
 1575              	.LVL130:
1067:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1576              		.loc 1 1067 0
 1577 0002 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1578 0006 DBB2     		uxtb	r3, r3
 1579 0008 822B     		cmp	r3, #130
 1580 000a 33D0     		beq	.L95
 1581 000c 1646     		mov	r6, r2
ARM GAS  /tmp/cc7Dq4FC.s 			page 68


 1582 000e 0546     		mov	r5, r0
1072:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1583              		.loc 1 1072 0
 1584 0010 8223     		movs	r3, #130
 1585 0012 80F84430 		strb	r3, [r0, #68]
1075:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1586              		.loc 1 1075 0
 1587 0016 0268     		ldr	r2, [r0]
 1588              	.LVL131:
 1589 0018 1469     		ldr	r4, [r2, #16]
 1590              	.LVL132:
1078:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1591              		.loc 1 1078 0
 1592 001a 04F01C04 		and	r4, r4, #28
 1593              	.LVL133:
1081:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register add
 1594              		.loc 1 1081 0
 1595 001e 038A     		ldrh	r3, [r0, #16]
 1596 0020 DB02     		lsls	r3, r3, #11
 1597 0022 9BB2     		uxth	r3, r3
 1598 0024 1C43     		orrs	r4, r4, r3
 1599              	.LVL134:
1082:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode       
 1600              		.loc 1 1082 0
 1601 0026 8901     		lsls	r1, r1, #6
 1602              	.LVL135:
 1603 0028 01F4F861 		and	r1, r1, #1984
 1604              	.LVL136:
1083:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit    
 1605              		.loc 1 1083 0
 1606 002c 0C43     		orrs	r4, r4, r1
 1607              	.LVL137:
1084:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1608              		.loc 1 1084 0
 1609 002e 44F00104 		orr	r4, r4, #1
 1610              	.LVL138:
1087:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1611              		.loc 1 1087 0
 1612 0032 1461     		str	r4, [r2, #16]
1090:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1613              		.loc 1 1090 0
 1614 0034 FFF7FEFF 		bl	HAL_GetTick
 1615              	.LVL139:
 1616 0038 0746     		mov	r7, r0
 1617              	.LVL140:
1093:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1618              		.loc 1 1093 0
 1619 003a 0FE0     		b	.L92
 1620              	.LVL141:
 1621              	.L94:
1096:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 1622              		.loc 1 1096 0
 1623 003c FFF7FEFF 		bl	HAL_GetTick
 1624              	.LVL142:
 1625 0040 C01B     		subs	r0, r0, r7
 1626 0042 B0F5803F 		cmp	r0, #65536
 1627 0046 07D3     		bcc	.L93
ARM GAS  /tmp/cc7Dq4FC.s 			page 69


1098:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1628              		.loc 1 1098 0
 1629 0048 0123     		movs	r3, #1
 1630 004a 85F84430 		strb	r3, [r5, #68]
1101:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1631              		.loc 1 1101 0
 1632 004e 0023     		movs	r3, #0
 1633 0050 85F84530 		strb	r3, [r5, #69]
1103:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 1634              		.loc 1 1103 0
 1635 0054 0320     		movs	r0, #3
 1636 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1637              	.LVL143:
 1638              	.L93:
1106:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1639              		.loc 1 1106 0
 1640 0058 2B68     		ldr	r3, [r5]
 1641 005a 1C69     		ldr	r4, [r3, #16]
 1642              	.LVL144:
 1643              	.L92:
1093:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1644              		.loc 1 1093 0
 1645 005c 14F0010F 		tst	r4, #1
 1646 0060 ECD1     		bne	.L94
1110:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1647              		.loc 1 1110 0
 1648 0062 2B68     		ldr	r3, [r5]
 1649 0064 5B69     		ldr	r3, [r3, #20]
 1650 0066 9BB2     		uxth	r3, r3
 1651 0068 3360     		str	r3, [r6]
1113:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1652              		.loc 1 1113 0
 1653 006a 0123     		movs	r3, #1
 1654 006c 85F84430 		strb	r3, [r5, #68]
1116:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 1655              		.loc 1 1116 0
 1656 0070 0020     		movs	r0, #0
 1657 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1658              	.LVL145:
 1659              	.L95:
1069:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1660              		.loc 1 1069 0
 1661 0074 0220     		movs	r0, #2
 1662              	.LVL146:
1117:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 1663              		.loc 1 1117 0
 1664 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1665              		.cfi_endproc
 1666              	.LFE149:
 1668              		.section	.text.HAL_ETH_WritePHYRegister,"ax",%progbits
 1669              		.align	2
 1670              		.global	HAL_ETH_WritePHYRegister
 1671              		.thumb
 1672              		.thumb_func
 1674              	HAL_ETH_WritePHYRegister:
 1675              	.LFB150:
1131:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;
ARM GAS  /tmp/cc7Dq4FC.s 			page 70


 1676              		.loc 1 1131 0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 1680              	.LVL147:
1139:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1681              		.loc 1 1139 0
 1682 0000 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1683 0004 DBB2     		uxtb	r3, r3
 1684 0006 422B     		cmp	r3, #66
 1685 0008 32D0     		beq	.L102
1131:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;
 1686              		.loc 1 1131 0
 1687 000a 70B5     		push	{r4, r5, r6, lr}
 1688              	.LCFI29:
 1689              		.cfi_def_cfa_offset 16
 1690              		.cfi_offset 4, -16
 1691              		.cfi_offset 5, -12
 1692              		.cfi_offset 6, -8
 1693              		.cfi_offset 14, -4
 1694 000c 0546     		mov	r5, r0
1144:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1695              		.loc 1 1144 0
 1696 000e 4223     		movs	r3, #66
 1697 0010 80F84430 		strb	r3, [r0, #68]
1147:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1698              		.loc 1 1147 0
 1699 0014 0068     		ldr	r0, [r0]
 1700              	.LVL148:
 1701 0016 0469     		ldr	r4, [r0, #16]
 1702              	.LVL149:
1150:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1703              		.loc 1 1150 0
 1704 0018 04F01C04 		and	r4, r4, #28
 1705              	.LVL150:
1153:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register addre
 1706              		.loc 1 1153 0
 1707 001c 2B8A     		ldrh	r3, [r5, #16]
 1708 001e DB02     		lsls	r3, r3, #11
 1709 0020 9BB2     		uxth	r3, r3
 1710 0022 1C43     		orrs	r4, r4, r3
 1711              	.LVL151:
1154:HALLIB/Src/stm32f7xx_hal_eth.c ****   tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 1712              		.loc 1 1154 0
 1713 0024 8901     		lsls	r1, r1, #6
 1714              	.LVL152:
 1715 0026 01F4F861 		and	r1, r1, #1984
 1716 002a 0C43     		orrs	r4, r4, r1
 1717              	.LVL153:
1156:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1718              		.loc 1 1156 0
 1719 002c 44F00304 		orr	r4, r4, #3
 1720              	.LVL154:
 1721 0030 92B2     		uxth	r2, r2
 1722              	.LVL155:
1159:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1723              		.loc 1 1159 0
ARM GAS  /tmp/cc7Dq4FC.s 			page 71


 1724 0032 4261     		str	r2, [r0, #20]
1162:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1725              		.loc 1 1162 0
 1726 0034 2B68     		ldr	r3, [r5]
 1727 0036 1C61     		str	r4, [r3, #16]
1165:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1728              		.loc 1 1165 0
 1729 0038 FFF7FEFF 		bl	HAL_GetTick
 1730              	.LVL156:
 1731 003c 0646     		mov	r6, r0
 1732              	.LVL157:
1168:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1733              		.loc 1 1168 0
 1734 003e 0FE0     		b	.L99
 1735              	.LVL158:
 1736              	.L101:
1171:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 1737              		.loc 1 1171 0
 1738 0040 FFF7FEFF 		bl	HAL_GetTick
 1739              	.LVL159:
 1740 0044 801B     		subs	r0, r0, r6
 1741 0046 B0F5803F 		cmp	r0, #65536
 1742 004a 07D3     		bcc	.L100
1173:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1743              		.loc 1 1173 0
 1744 004c 0123     		movs	r3, #1
 1745 004e 85F84430 		strb	r3, [r5, #68]
1176:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1746              		.loc 1 1176 0
 1747 0052 0023     		movs	r3, #0
 1748 0054 85F84530 		strb	r3, [r5, #69]
1178:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 1749              		.loc 1 1178 0
 1750 0058 0320     		movs	r0, #3
 1751 005a 70BD     		pop	{r4, r5, r6, pc}
 1752              	.LVL160:
 1753              	.L100:
1181:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1754              		.loc 1 1181 0
 1755 005c 2B68     		ldr	r3, [r5]
 1756 005e 1C69     		ldr	r4, [r3, #16]
 1757              	.LVL161:
 1758              	.L99:
1168:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1759              		.loc 1 1168 0
 1760 0060 14F0010F 		tst	r4, #1
 1761 0064 ECD1     		bne	.L101
1185:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1762              		.loc 1 1185 0
 1763 0066 0123     		movs	r3, #1
 1764 0068 85F84430 		strb	r3, [r5, #68]
1188:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 1765              		.loc 1 1188 0
 1766 006c 0020     		movs	r0, #0
 1767 006e 70BD     		pop	{r4, r5, r6, pc}
 1768              	.LVL162:
 1769              	.L102:
ARM GAS  /tmp/cc7Dq4FC.s 			page 72


 1770              	.LCFI30:
 1771              		.cfi_def_cfa_offset 0
 1772              		.cfi_restore 4
 1773              		.cfi_restore 5
 1774              		.cfi_restore 6
 1775              		.cfi_restore 14
1141:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1776              		.loc 1 1141 0
 1777 0070 0220     		movs	r0, #2
 1778              	.LVL163:
 1779 0072 7047     		bx	lr
 1780              		.cfi_endproc
 1781              	.LFE150:
 1783              		.section	.text.HAL_ETH_Init,"ax",%progbits
 1784              		.align	2
 1785              		.global	HAL_ETH_Init
 1786              		.thumb
 1787              		.thumb_func
 1789              	HAL_ETH_Init:
 1790              	.LFB136:
 173:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tempreg = 0, phyreg = 0;
 1791              		.loc 1 173 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 8
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 1795              	.LVL164:
 1796 0000 70B5     		push	{r4, r5, r6, lr}
 1797              	.LCFI31:
 1798              		.cfi_def_cfa_offset 16
 1799              		.cfi_offset 4, -16
 1800              		.cfi_offset 5, -12
 1801              		.cfi_offset 6, -8
 1802              		.cfi_offset 14, -4
 1803 0002 82B0     		sub	sp, sp, #8
 1804              	.LCFI32:
 1805              		.cfi_def_cfa_offset 24
 1806              	.LVL165:
 174:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t hclk = 60000000;
 1807              		.loc 1 174 0
 1808 0004 0023     		movs	r3, #0
 1809 0006 0193     		str	r3, [sp, #4]
 1810              	.LVL166:
 180:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1811              		.loc 1 180 0
 1812 0008 0028     		cmp	r0, #0
 1813 000a 00F00981 		beq	.L127
 1814 000e 0446     		mov	r4, r0
 191:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1815              		.loc 1 191 0
 1816 0010 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1817 0014 13F0FF0F 		tst	r3, #255
 1818 0018 04D1     		bne	.L107
 194:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC. */
 1819              		.loc 1 194 0
 1820 001a 0023     		movs	r3, #0
 1821 001c 80F84530 		strb	r3, [r0, #69]
 196:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
ARM GAS  /tmp/cc7Dq4FC.s 			page 73


 1822              		.loc 1 196 0
 1823 0020 FFF7FEFF 		bl	HAL_ETH_MspInit
 1824              	.LVL167:
 1825              	.L107:
 1826              	.LBB2:
 200:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1827              		.loc 1 200 0
 1828 0024 804B     		ldr	r3, .L129
 1829 0026 5A6C     		ldr	r2, [r3, #68]
 1830 0028 42F48042 		orr	r2, r2, #16384
 1831 002c 5A64     		str	r2, [r3, #68]
 1832 002e 5B6C     		ldr	r3, [r3, #68]
 1833 0030 03F48043 		and	r3, r3, #16384
 1834 0034 0093     		str	r3, [sp]
 1835 0036 009B     		ldr	r3, [sp]
 1836              	.LBE2:
 203:HALLIB/Src/stm32f7xx_hal_eth.c ****   SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 1837              		.loc 1 203 0
 1838 0038 7C4B     		ldr	r3, .L129+4
 1839 003a 5A68     		ldr	r2, [r3, #4]
 1840 003c 22F40002 		bic	r2, r2, #8388608
 1841 0040 5A60     		str	r2, [r3, #4]
 204:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1842              		.loc 1 204 0
 1843 0042 5968     		ldr	r1, [r3, #4]
 1844 0044 226A     		ldr	r2, [r4, #32]
 1845 0046 0A43     		orrs	r2, r2, r1
 1846 0048 5A60     		str	r2, [r3, #4]
 209:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1847              		.loc 1 209 0
 1848 004a 2368     		ldr	r3, [r4]
 1849 004c 03F58053 		add	r3, r3, #4096
 1850 0050 1A68     		ldr	r2, [r3]
 1851 0052 42F00102 		orr	r2, r2, #1
 1852 0056 1A60     		str	r2, [r3]
 212:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1853              		.loc 1 212 0
 1854 0058 FFF7FEFF 		bl	HAL_GetTick
 1855              	.LVL168:
 1856 005c 0546     		mov	r5, r0
 1857              	.LVL169:
 215:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1858              		.loc 1 215 0
 1859 005e 0CE0     		b	.L108
 1860              	.LVL170:
 1861              	.L109:
 218:HALLIB/Src/stm32f7xx_hal_eth.c ****     {     
 1862              		.loc 1 218 0
 1863 0060 FFF7FEFF 		bl	HAL_GetTick
 1864              	.LVL171:
 1865 0064 401B     		subs	r0, r0, r5
 1866 0066 B0F5FA7F 		cmp	r0, #500
 1867 006a 06D9     		bls	.L108
 220:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1868              		.loc 1 220 0
 1869 006c 0325     		movs	r5, #3
 1870              	.LVL172:
ARM GAS  /tmp/cc7Dq4FC.s 			page 74


 1871 006e 84F84450 		strb	r5, [r4, #68]
 223:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1872              		.loc 1 223 0
 1873 0072 0023     		movs	r3, #0
 1874 0074 84F84530 		strb	r3, [r4, #69]
 228:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 1875              		.loc 1 228 0
 1876 0078 D3E0     		b	.L106
 1877              	.LVL173:
 1878              	.L108:
 215:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1879              		.loc 1 215 0
 1880 007a 2368     		ldr	r3, [r4]
 1881 007c 03F58052 		add	r2, r3, #4096
 1882 0080 1268     		ldr	r2, [r2]
 1883 0082 12F0010F 		tst	r2, #1
 1884 0086 EBD1     		bne	.L109
 234:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Clear CSR Clock Range CR[2:0] bits */
 1885              		.loc 1 234 0
 1886 0088 1D69     		ldr	r5, [r3, #16]
 1887              	.LVL174:
 236:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1888              		.loc 1 236 0
 1889 008a 25F01C05 		bic	r5, r5, #28
 1890              	.LVL175:
 239:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1891              		.loc 1 239 0
 1892 008e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1893              	.LVL176:
 242:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1894              		.loc 1 242 0
 1895 0092 674B     		ldr	r3, .L129+8
 1896 0094 0344     		add	r3, r3, r0
 1897 0096 674A     		ldr	r2, .L129+12
 1898 0098 9342     		cmp	r3, r2
 1899 009a 02D8     		bhi	.L110
 245:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1900              		.loc 1 245 0
 1901 009c 45F00805 		orr	r5, r5, #8
 1902              	.LVL177:
 1903 00a0 16E0     		b	.L111
 1904              	.L110:
 247:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1905              		.loc 1 247 0
 1906 00a2 654B     		ldr	r3, .L129+16
 1907 00a4 0344     		add	r3, r3, r0
 1908 00a6 654A     		ldr	r2, .L129+20
 1909 00a8 9342     		cmp	r3, r2
 1910 00aa 02D8     		bhi	.L112
 250:HALLIB/Src/stm32f7xx_hal_eth.c ****   }  
 1911              		.loc 1 250 0
 1912 00ac 45F00C05 		orr	r5, r5, #12
 1913              	.LVL178:
 1914 00b0 0EE0     		b	.L111
 1915              	.L112:
 252:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1916              		.loc 1 252 0
ARM GAS  /tmp/cc7Dq4FC.s 			page 75


 1917 00b2 634B     		ldr	r3, .L129+24
 1918 00b4 0344     		add	r3, r3, r0
 1919 00b6 634A     		ldr	r2, .L129+28
 1920 00b8 9342     		cmp	r3, r2
 1921 00ba 09D9     		bls	.L111
 257:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1922              		.loc 1 257 0
 1923 00bc 624B     		ldr	r3, .L129+32
 1924 00be 0344     		add	r3, r3, r0
 1925 00c0 624A     		ldr	r2, .L129+36
 1926 00c2 9342     		cmp	r3, r2
 1927 00c4 02D8     		bhi	.L113
 260:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1928              		.loc 1 260 0
 1929 00c6 45F00405 		orr	r5, r5, #4
 1930              	.LVL179:
 1931 00ca 01E0     		b	.L111
 1932              	.L113:
 265:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1933              		.loc 1 265 0
 1934 00cc 45F01005 		orr	r5, r5, #16
 1935              	.LVL180:
 1936              	.L111:
 269:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1937              		.loc 1 269 0
 1938 00d0 2368     		ldr	r3, [r4]
 1939 00d2 1D61     		str	r5, [r3, #16]
 273:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1940              		.loc 1 273 0
 1941 00d4 4FF40042 		mov	r2, #32768
 1942 00d8 0021     		movs	r1, #0
 1943 00da 2046     		mov	r0, r4
 1944              	.LVL181:
 1945 00dc FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
 1946              	.LVL182:
 1947 00e0 0546     		mov	r5, r0
 1948              	.LVL183:
 1949 00e2 38B1     		cbz	r0, .L114
 1950              	.LVL184:
 279:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1951              		.loc 1 279 0
 1952 00e4 0121     		movs	r1, #1
 1953 00e6 2046     		mov	r0, r4
 1954 00e8 FFF7FEFF 		bl	ETH_MACDMAConfig
 1955              	.LVL185:
 282:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1956              		.loc 1 282 0
 1957 00ec 0125     		movs	r5, #1
 1958 00ee 84F84450 		strb	r5, [r4, #68]
 285:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 1959              		.loc 1 285 0
 1960 00f2 96E0     		b	.L106
 1961              	.LVL186:
 1962              	.L114:
 289:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1963              		.loc 1 289 0
 1964 00f4 40F6FF70 		movw	r0, #4095
ARM GAS  /tmp/cc7Dq4FC.s 			page 76


 1965 00f8 FFF7FEFF 		bl	HAL_Delay
 1966              	.LVL187:
 291:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 1967              		.loc 1 291 0
 1968 00fc 6368     		ldr	r3, [r4, #4]
 1969 00fe 002B     		cmp	r3, #0
 1970 0100 6ED0     		beq	.L115
 294:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1971              		.loc 1 294 0
 1972 0102 FFF7FEFF 		bl	HAL_GetTick
 1973              	.LVL188:
 1974 0106 0646     		mov	r6, r0
 1975              	.LVL189:
 1976              	.L117:
 299:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 1977              		.loc 1 299 0
 1978 0108 01AA     		add	r2, sp, #4
 1979 010a 0121     		movs	r1, #1
 1980 010c 2046     		mov	r0, r4
 1981 010e FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 1982              	.LVL190:
 302:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 1983              		.loc 1 302 0
 1984 0112 FFF7FEFF 		bl	HAL_GetTick
 1985              	.LVL191:
 1986 0116 801B     		subs	r0, r0, r6
 1987 0118 41F28833 		movw	r3, #5000
 1988 011c 9842     		cmp	r0, r3
 1989 011e 0BD9     		bls	.L116
 1990              	.LVL192:
 308:HALLIB/Src/stm32f7xx_hal_eth.c ****         
 1991              		.loc 1 308 0
 1992 0120 0121     		movs	r1, #1
 1993 0122 2046     		mov	r0, r4
 1994 0124 FFF7FEFF 		bl	ETH_MACDMAConfig
 1995              	.LVL193:
 310:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 1996              		.loc 1 310 0
 1997 0128 0123     		movs	r3, #1
 1998 012a 84F84430 		strb	r3, [r4, #68]
 313:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 1999              		.loc 1 313 0
 2000 012e 0023     		movs	r3, #0
 2001 0130 84F84530 		strb	r3, [r4, #69]
 315:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
 2002              		.loc 1 315 0
 2003 0134 0325     		movs	r5, #3
 2004 0136 74E0     		b	.L106
 2005              	.LVL194:
 2006              	.L116:
 317:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 2007              		.loc 1 317 0
 2008 0138 019B     		ldr	r3, [sp, #4]
 2009 013a 13F0040F 		tst	r3, #4
 2010 013e E3D0     		beq	.L117
 321:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 2011              		.loc 1 321 0
ARM GAS  /tmp/cc7Dq4FC.s 			page 77


 2012 0140 4FF48052 		mov	r2, #4096
 2013 0144 0021     		movs	r1, #0
 2014 0146 2046     		mov	r0, r4
 2015 0148 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
 2016              	.LVL195:
 2017 014c 38B1     		cbz	r0, .L118
 2018              	.LVL196:
 327:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 2019              		.loc 1 327 0
 2020 014e 0121     		movs	r1, #1
 2021 0150 2046     		mov	r0, r4
 2022 0152 FFF7FEFF 		bl	ETH_MACDMAConfig
 2023              	.LVL197:
 330:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 2024              		.loc 1 330 0
 2025 0156 0125     		movs	r5, #1
 2026 0158 84F84450 		strb	r5, [r4, #68]
 333:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 2027              		.loc 1 333 0
 2028 015c 61E0     		b	.L106
 2029              	.LVL198:
 2030              	.L118:
 337:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 2031              		.loc 1 337 0
 2032 015e FFF7FEFF 		bl	HAL_GetTick
 2033              	.LVL199:
 2034 0162 0646     		mov	r6, r0
 2035              	.LVL200:
 2036              	.L120:
 342:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 2037              		.loc 1 342 0
 2038 0164 01AA     		add	r2, sp, #4
 2039 0166 0121     		movs	r1, #1
 2040 0168 2046     		mov	r0, r4
 2041 016a FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 2042              	.LVL201:
 345:HALLIB/Src/stm32f7xx_hal_eth.c ****       {
 2043              		.loc 1 345 0
 2044 016e FFF7FEFF 		bl	HAL_GetTick
 2045              	.LVL202:
 2046 0172 801B     		subs	r0, r0, r6
 2047 0174 41F28833 		movw	r3, #5000
 2048 0178 9842     		cmp	r0, r3
 2049 017a 0BD9     		bls	.L119
 2050              	.LVL203:
 351:HALLIB/Src/stm32f7xx_hal_eth.c ****         
 2051              		.loc 1 351 0
 2052 017c 0121     		movs	r1, #1
 2053 017e 2046     		mov	r0, r4
 2054 0180 FFF7FEFF 		bl	ETH_MACDMAConfig
 2055              	.LVL204:
 353:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2056              		.loc 1 353 0
 2057 0184 0123     		movs	r3, #1
 2058 0186 84F84430 		strb	r3, [r4, #68]
 356:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 2059              		.loc 1 356 0
ARM GAS  /tmp/cc7Dq4FC.s 			page 78


 2060 018a 0023     		movs	r3, #0
 2061 018c 84F84530 		strb	r3, [r4, #69]
 358:HALLIB/Src/stm32f7xx_hal_eth.c ****       }
 2062              		.loc 1 358 0
 2063 0190 0325     		movs	r5, #3
 2064 0192 46E0     		b	.L106
 2065              	.LVL205:
 2066              	.L119:
 361:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 2067              		.loc 1 361 0
 2068 0194 019B     		ldr	r3, [sp, #4]
 2069 0196 13F0200F 		tst	r3, #32
 2070 019a E3D0     		beq	.L120
 364:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 2071              		.loc 1 364 0
 2072 019c 01AA     		add	r2, sp, #4
 2073 019e 1F21     		movs	r1, #31
 2074 01a0 2046     		mov	r0, r4
 2075 01a2 FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 2076              	.LVL206:
 2077 01a6 38B1     		cbz	r0, .L121
 2078              	.LVL207:
 370:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 2079              		.loc 1 370 0
 2080 01a8 0121     		movs	r1, #1
 2081 01aa 2046     		mov	r0, r4
 2082 01ac FFF7FEFF 		bl	ETH_MACDMAConfig
 2083              	.LVL208:
 373:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 2084              		.loc 1 373 0
 2085 01b0 0125     		movs	r5, #1
 2086 01b2 84F84450 		strb	r5, [r4, #68]
 376:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 2087              		.loc 1 376 0
 2088 01b6 34E0     		b	.L106
 2089              	.LVL209:
 2090              	.L121:
 380:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 2091              		.loc 1 380 0
 2092 01b8 019B     		ldr	r3, [sp, #4]
 2093 01ba 13F0100F 		tst	r3, #16
 2094 01be 03D0     		beq	.L122
 383:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 2095              		.loc 1 383 0
 2096 01c0 4FF40062 		mov	r2, #2048
 2097 01c4 E260     		str	r2, [r4, #12]
 2098 01c6 01E0     		b	.L123
 2099              	.L122:
 388:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 2100              		.loc 1 388 0
 2101 01c8 0022     		movs	r2, #0
 2102 01ca E260     		str	r2, [r4, #12]
 2103              	.L123:
 391:HALLIB/Src/stm32f7xx_hal_eth.c ****     {  
 2104              		.loc 1 391 0
 2105 01cc 13F0040F 		tst	r3, #4
 2106 01d0 02D0     		beq	.L124
ARM GAS  /tmp/cc7Dq4FC.s 			page 79


 394:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 2107              		.loc 1 394 0
 2108 01d2 0023     		movs	r3, #0
 2109 01d4 A360     		str	r3, [r4, #8]
 2110 01d6 1BE0     		b	.L125
 2111              	.L124:
 399:HALLIB/Src/stm32f7xx_hal_eth.c ****     }
 2112              		.loc 1 399 0
 2113 01d8 4FF48043 		mov	r3, #16384
 2114 01dc A360     		str	r3, [r4, #8]
 2115 01de 17E0     		b	.L125
 2116              	.LVL210:
 2117              	.L115:
 409:HALLIB/Src/stm32f7xx_hal_eth.c ****                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 2118              		.loc 1 409 0
 2119 01e0 E368     		ldr	r3, [r4, #12]
 2120 01e2 C3F3CF02 		ubfx	r2, r3, #3, #16
 410:HALLIB/Src/stm32f7xx_hal_eth.c ****     {
 2121              		.loc 1 410 0
 2122 01e6 A368     		ldr	r3, [r4, #8]
 2123 01e8 C3F34F03 		ubfx	r3, r3, #1, #16
 409:HALLIB/Src/stm32f7xx_hal_eth.c ****                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 2124              		.loc 1 409 0
 2125 01ec 1A43     		orrs	r2, r2, r3
 2126 01ee 0021     		movs	r1, #0
 2127 01f0 2046     		mov	r0, r4
 2128 01f2 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
 2129              	.LVL211:
 2130 01f6 38B1     		cbz	r0, .L126
 2131              	.LVL212:
 416:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 2132              		.loc 1 416 0
 2133 01f8 0121     		movs	r1, #1
 2134 01fa 2046     		mov	r0, r4
 2135 01fc FFF7FEFF 		bl	ETH_MACDMAConfig
 2136              	.LVL213:
 419:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 2137              		.loc 1 419 0
 2138 0200 0125     		movs	r5, #1
 2139 0202 84F84450 		strb	r5, [r4, #68]
 422:HALLIB/Src/stm32f7xx_hal_eth.c ****     }  
 2140              		.loc 1 422 0
 2141 0206 0CE0     		b	.L106
 2142              	.LVL214:
 2143              	.L126:
 426:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 2144              		.loc 1 426 0
 2145 0208 40F6FF70 		movw	r0, #4095
 2146 020c FFF7FEFF 		bl	HAL_Delay
 2147              	.LVL215:
 2148              	.L125:
 430:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2149              		.loc 1 430 0
 2150 0210 0021     		movs	r1, #0
 2151 0212 2046     		mov	r0, r4
 2152 0214 FFF7FEFF 		bl	ETH_MACDMAConfig
 2153              	.LVL216:
ARM GAS  /tmp/cc7Dq4FC.s 			page 80


 433:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2154              		.loc 1 433 0
 2155 0218 0123     		movs	r3, #1
 2156 021a 84F84430 		strb	r3, [r4, #68]
 436:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 2157              		.loc 1 436 0
 2158 021e 00E0     		b	.L106
 2159              	.LVL217:
 2160              	.L127:
 182:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 2161              		.loc 1 182 0
 2162 0220 0125     		movs	r5, #1
 2163              	.LVL218:
 2164              	.L106:
 437:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 2165              		.loc 1 437 0
 2166 0222 2846     		mov	r0, r5
 2167 0224 02B0     		add	sp, sp, #8
 2168              	.LCFI33:
 2169              		.cfi_def_cfa_offset 16
 2170              		@ sp needed
 2171 0226 70BD     		pop	{r4, r5, r6, pc}
 2172              	.L130:
 2173              		.align	2
 2174              	.L129:
 2175 0228 00380240 		.word	1073887232
 2176 022c 00380140 		.word	1073821696
 2177 0230 00D3CEFE 		.word	-20000000
 2178 0234 BFE1E400 		.word	14999999
 2179 0238 40F1E9FD 		.word	-35000000
 2180 023c 3F787D01 		.word	24999999
 2181 0240 00796CFC 		.word	-60000000
 2182 0244 FF596202 		.word	39999999
 2183 0248 001F0AFA 		.word	-100000000
 2184 024c 7FF0FA02 		.word	49999999
 2185              		.cfi_endproc
 2186              	.LFE136:
 2188              		.section	.text.HAL_ETH_Start,"ax",%progbits
 2189              		.align	2
 2190              		.global	HAL_ETH_Start
 2191              		.thumb
 2192              		.thumb_func
 2194              	HAL_ETH_Start:
 2195              	.LFB151:
1223:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Locked */
 2196              		.loc 1 1223 0
 2197              		.cfi_startproc
 2198              		@ args = 0, pretend = 0, frame = 0
 2199              		@ frame_needed = 0, uses_anonymous_args = 0
 2200              	.LVL219:
 2201 0000 38B5     		push	{r3, r4, r5, lr}
 2202              	.LCFI34:
 2203              		.cfi_def_cfa_offset 16
 2204              		.cfi_offset 3, -16
 2205              		.cfi_offset 4, -12
 2206              		.cfi_offset 5, -8
 2207              		.cfi_offset 14, -4
ARM GAS  /tmp/cc7Dq4FC.s 			page 81


1225:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2208              		.loc 1 1225 0
 2209 0002 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 2210 0006 012B     		cmp	r3, #1
 2211 0008 1AD0     		beq	.L133
 2212 000a 0446     		mov	r4, r0
1225:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2213              		.loc 1 1225 0 is_stmt 0 discriminator 2
 2214 000c 0125     		movs	r5, #1
 2215 000e 80F84550 		strb	r5, [r0, #69]
1228:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2216              		.loc 1 1228 0 is_stmt 1 discriminator 2
 2217 0012 0223     		movs	r3, #2
 2218 0014 80F84430 		strb	r3, [r0, #68]
1231:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2219              		.loc 1 1231 0 discriminator 2
 2220 0018 FFF7FEFF 		bl	ETH_MACTransmissionEnable
 2221              	.LVL220:
1234:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2222              		.loc 1 1234 0 discriminator 2
 2223 001c 2046     		mov	r0, r4
 2224 001e FFF7FEFF 		bl	ETH_MACReceptionEnable
 2225              	.LVL221:
1237:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2226              		.loc 1 1237 0 discriminator 2
 2227 0022 2046     		mov	r0, r4
 2228 0024 FFF7FEFF 		bl	ETH_FlushTransmitFIFO
 2229              	.LVL222:
1240:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2230              		.loc 1 1240 0 discriminator 2
 2231 0028 2046     		mov	r0, r4
 2232 002a FFF7FEFF 		bl	ETH_DMATransmissionEnable
 2233              	.LVL223:
1243:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2234              		.loc 1 1243 0 discriminator 2
 2235 002e 2046     		mov	r0, r4
 2236 0030 FFF7FEFF 		bl	ETH_DMAReceptionEnable
 2237              	.LVL224:
1246:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2238              		.loc 1 1246 0 discriminator 2
 2239 0034 84F84450 		strb	r5, [r4, #68]
1249:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2240              		.loc 1 1249 0 discriminator 2
 2241 0038 0020     		movs	r0, #0
 2242 003a 84F84500 		strb	r0, [r4, #69]
1252:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 2243              		.loc 1 1252 0 discriminator 2
 2244 003e 38BD     		pop	{r3, r4, r5, pc}
 2245              	.LVL225:
 2246              	.L133:
1225:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2247              		.loc 1 1225 0
 2248 0040 0220     		movs	r0, #2
 2249              	.LVL226:
1253:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 2250              		.loc 1 1253 0
 2251 0042 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/cc7Dq4FC.s 			page 82


 2252              		.cfi_endproc
 2253              	.LFE151:
 2255              		.section	.text.HAL_ETH_Stop,"ax",%progbits
 2256              		.align	2
 2257              		.global	HAL_ETH_Stop
 2258              		.thumb
 2259              		.thumb_func
 2261              	HAL_ETH_Stop:
 2262              	.LFB152:
1262:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Process Locked */
 2263              		.loc 1 1262 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 0
 2266              		@ frame_needed = 0, uses_anonymous_args = 0
 2267              	.LVL227:
 2268 0000 38B5     		push	{r3, r4, r5, lr}
 2269              	.LCFI35:
 2270              		.cfi_def_cfa_offset 16
 2271              		.cfi_offset 3, -16
 2272              		.cfi_offset 4, -12
 2273              		.cfi_offset 5, -8
 2274              		.cfi_offset 14, -4
1264:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2275              		.loc 1 1264 0
 2276 0002 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 2277 0006 012B     		cmp	r3, #1
 2278 0008 1AD0     		beq	.L137
 2279 000a 0446     		mov	r4, r0
1264:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2280              		.loc 1 1264 0 is_stmt 0 discriminator 2
 2281 000c 0125     		movs	r5, #1
 2282 000e 80F84550 		strb	r5, [r0, #69]
1267:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2283              		.loc 1 1267 0 is_stmt 1 discriminator 2
 2284 0012 0223     		movs	r3, #2
 2285 0014 80F84430 		strb	r3, [r0, #68]
1270:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2286              		.loc 1 1270 0 discriminator 2
 2287 0018 FFF7FEFF 		bl	ETH_DMATransmissionDisable
 2288              	.LVL228:
1273:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2289              		.loc 1 1273 0 discriminator 2
 2290 001c 2046     		mov	r0, r4
 2291 001e FFF7FEFF 		bl	ETH_DMAReceptionDisable
 2292              	.LVL229:
1276:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2293              		.loc 1 1276 0 discriminator 2
 2294 0022 2046     		mov	r0, r4
 2295 0024 FFF7FEFF 		bl	ETH_MACReceptionDisable
 2296              	.LVL230:
1279:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2297              		.loc 1 1279 0 discriminator 2
 2298 0028 2046     		mov	r0, r4
 2299 002a FFF7FEFF 		bl	ETH_FlushTransmitFIFO
 2300              	.LVL231:
1282:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2301              		.loc 1 1282 0 discriminator 2
ARM GAS  /tmp/cc7Dq4FC.s 			page 83


 2302 002e 2046     		mov	r0, r4
 2303 0030 FFF7FEFF 		bl	ETH_MACTransmissionDisable
 2304              	.LVL232:
1285:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2305              		.loc 1 1285 0 discriminator 2
 2306 0034 84F84450 		strb	r5, [r4, #68]
1288:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2307              		.loc 1 1288 0 discriminator 2
 2308 0038 0020     		movs	r0, #0
 2309 003a 84F84500 		strb	r0, [r4, #69]
1291:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 2310              		.loc 1 1291 0 discriminator 2
 2311 003e 38BD     		pop	{r3, r4, r5, pc}
 2312              	.LVL233:
 2313              	.L137:
1264:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2314              		.loc 1 1264 0
 2315 0040 0220     		movs	r0, #2
 2316              	.LVL234:
1292:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 2317              		.loc 1 1292 0
 2318 0042 38BD     		pop	{r3, r4, r5, pc}
 2319              		.cfi_endproc
 2320              	.LFE152:
 2322              		.section	.text.HAL_ETH_ConfigMAC,"ax",%progbits
 2323              		.align	2
 2324              		.global	HAL_ETH_ConfigMAC
 2325              		.thumb
 2326              		.thumb_func
 2328              	HAL_ETH_ConfigMAC:
 2329              	.LFB153:
1302:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;
 2330              		.loc 1 1302 0
 2331              		.cfi_startproc
 2332              		@ args = 0, pretend = 0, frame = 0
 2333              		@ frame_needed = 0, uses_anonymous_args = 0
 2334              	.LVL235:
1306:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2335              		.loc 1 1306 0
 2336 0000 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 2337 0004 012B     		cmp	r3, #1
 2338 0006 00F08D80 		beq	.L143
1302:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;
 2339              		.loc 1 1302 0 discriminator 2
 2340 000a 70B5     		push	{r4, r5, r6, lr}
 2341              	.LCFI36:
 2342              		.cfi_def_cfa_offset 16
 2343              		.cfi_offset 4, -16
 2344              		.cfi_offset 5, -12
 2345              		.cfi_offset 6, -8
 2346              		.cfi_offset 14, -4
 2347 000c 0C46     		mov	r4, r1
 2348 000e 0546     		mov	r5, r0
1306:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2349              		.loc 1 1306 0 discriminator 2
 2350 0010 0123     		movs	r3, #1
 2351 0012 80F84530 		strb	r3, [r0, #69]
ARM GAS  /tmp/cc7Dq4FC.s 			page 84


1309:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2352              		.loc 1 1309 0 discriminator 2
 2353 0016 0223     		movs	r3, #2
 2354 0018 80F84430 		strb	r3, [r0, #68]
1314:HALLIB/Src/stm32f7xx_hal_eth.c ****   {
 2355              		.loc 1 1314 0 discriminator 2
 2356 001c 0029     		cmp	r1, #0
 2357 001e 6AD0     		beq	.L141
1347:HALLIB/Src/stm32f7xx_hal_eth.c ****     /* Clear WD, PCE, PS, TE and RE bits */
 2358              		.loc 1 1347 0
 2359 0020 0068     		ldr	r0, [r0]
 2360              	.LVL236:
 2361 0022 0368     		ldr	r3, [r0]
 2362              	.LVL237:
1349:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 2363              		.loc 1 1349 0
 2364 0024 404A     		ldr	r2, .L146
 2365 0026 1A40     		ands	r2, r2, r3
 2366              	.LVL238:
1351:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->Jabber | 
 2367              		.loc 1 1351 0
 2368 0028 0968     		ldr	r1, [r1]
 2369              	.LVL239:
1352:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->InterFrameGap |
 2370              		.loc 1 1352 0
 2371 002a 6368     		ldr	r3, [r4, #4]
1351:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->Jabber | 
 2372              		.loc 1 1351 0
 2373 002c 1943     		orrs	r1, r1, r3
1353:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->CarrierSense |
 2374              		.loc 1 1353 0
 2375 002e A368     		ldr	r3, [r4, #8]
1352:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->InterFrameGap |
 2376              		.loc 1 1352 0
 2377 0030 1943     		orrs	r1, r1, r3
1354:HALLIB/Src/stm32f7xx_hal_eth.c ****                          (heth->Init).Speed | 
 2378              		.loc 1 1354 0
 2379 0032 E368     		ldr	r3, [r4, #12]
1353:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->CarrierSense |
 2380              		.loc 1 1353 0
 2381 0034 1943     		orrs	r1, r1, r3
1355:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->ReceiveOwn |
 2382              		.loc 1 1355 0
 2383 0036 AB68     		ldr	r3, [r5, #8]
1354:HALLIB/Src/stm32f7xx_hal_eth.c ****                          (heth->Init).Speed | 
 2384              		.loc 1 1354 0
 2385 0038 1943     		orrs	r1, r1, r3
1356:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->LoopbackMode |
 2386              		.loc 1 1356 0
 2387 003a 2369     		ldr	r3, [r4, #16]
1355:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->ReceiveOwn |
 2388              		.loc 1 1355 0
 2389 003c 1943     		orrs	r1, r1, r3
1357:HALLIB/Src/stm32f7xx_hal_eth.c ****                          (heth->Init).DuplexMode | 
 2390              		.loc 1 1357 0
 2391 003e 6369     		ldr	r3, [r4, #20]
1356:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->LoopbackMode |
ARM GAS  /tmp/cc7Dq4FC.s 			page 85


 2392              		.loc 1 1356 0
 2393 0040 1943     		orrs	r1, r1, r3
1358:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->ChecksumOffload |    
 2394              		.loc 1 1358 0
 2395 0042 EB68     		ldr	r3, [r5, #12]
1357:HALLIB/Src/stm32f7xx_hal_eth.c ****                          (heth->Init).DuplexMode | 
 2396              		.loc 1 1357 0
 2397 0044 1943     		orrs	r1, r1, r3
1359:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->RetryTransmission | 
 2398              		.loc 1 1359 0
 2399 0046 A369     		ldr	r3, [r4, #24]
1358:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->ChecksumOffload |    
 2400              		.loc 1 1358 0
 2401 0048 1943     		orrs	r1, r1, r3
1360:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->AutomaticPadCRCStrip | 
 2402              		.loc 1 1360 0
 2403 004a E369     		ldr	r3, [r4, #28]
1359:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->RetryTransmission | 
 2404              		.loc 1 1359 0
 2405 004c 1943     		orrs	r1, r1, r3
1361:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->BackOffLimit | 
 2406              		.loc 1 1361 0
 2407 004e 236A     		ldr	r3, [r4, #32]
1360:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->AutomaticPadCRCStrip | 
 2408              		.loc 1 1360 0
 2409 0050 1943     		orrs	r1, r1, r3
1362:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->DeferralCheck);
 2410              		.loc 1 1362 0
 2411 0052 636A     		ldr	r3, [r4, #36]
1361:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->BackOffLimit | 
 2412              		.loc 1 1361 0
 2413 0054 1943     		orrs	r1, r1, r3
1363:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 2414              		.loc 1 1363 0
 2415 0056 A36A     		ldr	r3, [r4, #40]
1362:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->DeferralCheck);
 2416              		.loc 1 1362 0
 2417 0058 0B43     		orrs	r3, r3, r1
1351:HALLIB/Src/stm32f7xx_hal_eth.c ****                          macconf->Jabber | 
 2418              		.loc 1 1351 0
 2419 005a 1343     		orrs	r3, r3, r2
 2420              	.LVL240:
1366:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 2421              		.loc 1 1366 0
 2422 005c 0360     		str	r3, [r0]
1370:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_Delay(ETH_REG_WRITE_DELAY);
 2423              		.loc 1 1370 0
 2424 005e 2B68     		ldr	r3, [r5]
 2425              	.LVL241:
 2426 0060 1E68     		ldr	r6, [r3]
 2427              	.LVL242:
1371:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->MACCR = tmpreg; 
 2428              		.loc 1 1371 0
 2429 0062 0120     		movs	r0, #1
 2430 0064 FFF7FEFF 		bl	HAL_Delay
 2431              	.LVL243:
1372:HALLIB/Src/stm32f7xx_hal_eth.c ****     
ARM GAS  /tmp/cc7Dq4FC.s 			page 86


 2432              		.loc 1 1372 0
 2433 0068 2B68     		ldr	r3, [r5]
 2434 006a 1E60     		str	r6, [r3]
1376:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->SourceAddrFilter |
 2435              		.loc 1 1376 0
 2436 006c 2968     		ldr	r1, [r5]
 2437 006e E26A     		ldr	r2, [r4, #44]
1377:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->PassControlFrames |
 2438              		.loc 1 1377 0
 2439 0070 236B     		ldr	r3, [r4, #48]
1376:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->SourceAddrFilter |
 2440              		.loc 1 1376 0
 2441 0072 1A43     		orrs	r2, r2, r3
1378:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->BroadcastFramesReception | 
 2442              		.loc 1 1378 0
 2443 0074 636B     		ldr	r3, [r4, #52]
1377:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->PassControlFrames |
 2444              		.loc 1 1377 0
 2445 0076 1A43     		orrs	r2, r2, r3
1379:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->DestinationAddrFilter |
 2446              		.loc 1 1379 0
 2447 0078 A36B     		ldr	r3, [r4, #56]
1378:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->BroadcastFramesReception | 
 2448              		.loc 1 1378 0
 2449 007a 1A43     		orrs	r2, r2, r3
1380:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->PromiscuousMode |
 2450              		.loc 1 1380 0
 2451 007c E36B     		ldr	r3, [r4, #60]
1379:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->DestinationAddrFilter |
 2452              		.loc 1 1379 0
 2453 007e 1A43     		orrs	r2, r2, r3
1381:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->MulticastFramesFilter |
 2454              		.loc 1 1381 0
 2455 0080 236C     		ldr	r3, [r4, #64]
1380:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->PromiscuousMode |
 2456              		.loc 1 1380 0
 2457 0082 1A43     		orrs	r2, r2, r3
1382:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->UnicastFramesFilter);
 2458              		.loc 1 1382 0
 2459 0084 636C     		ldr	r3, [r4, #68]
1381:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->MulticastFramesFilter |
 2460              		.loc 1 1381 0
 2461 0086 1A43     		orrs	r2, r2, r3
1383:HALLIB/Src/stm32f7xx_hal_eth.c ****      
 2462              		.loc 1 1383 0
 2463 0088 A36C     		ldr	r3, [r4, #72]
1382:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->UnicastFramesFilter);
 2464              		.loc 1 1382 0
 2465 008a 1343     		orrs	r3, r3, r2
1376:HALLIB/Src/stm32f7xx_hal_eth.c ****                                           macconf->SourceAddrFilter |
 2466              		.loc 1 1376 0
 2467 008c 4B60     		str	r3, [r1, #4]
1387:HALLIB/Src/stm32f7xx_hal_eth.c ****      HAL_Delay(ETH_REG_WRITE_DELAY);
 2468              		.loc 1 1387 0
 2469 008e 2B68     		ldr	r3, [r5]
 2470 0090 5E68     		ldr	r6, [r3, #4]
 2471              	.LVL244:
ARM GAS  /tmp/cc7Dq4FC.s 			page 87


1388:HALLIB/Src/stm32f7xx_hal_eth.c ****      (heth->Instance)->MACFFR = tmpreg;
 2472              		.loc 1 1388 0
 2473 0092 0120     		movs	r0, #1
 2474 0094 FFF7FEFF 		bl	HAL_Delay
 2475              	.LVL245:
1389:HALLIB/Src/stm32f7xx_hal_eth.c ****      
 2476              		.loc 1 1389 0
 2477 0098 2B68     		ldr	r3, [r5]
 2478 009a 5E60     		str	r6, [r3, #4]
1393:HALLIB/Src/stm32f7xx_hal_eth.c ****      
 2479              		.loc 1 1393 0
 2480 009c 2B68     		ldr	r3, [r5]
 2481 009e E26C     		ldr	r2, [r4, #76]
 2482 00a0 9A60     		str	r2, [r3, #8]
1396:HALLIB/Src/stm32f7xx_hal_eth.c ****      /*----------------------- ETHERNET MACFCR Configuration --------------------*/
 2483              		.loc 1 1396 0
 2484 00a2 2B68     		ldr	r3, [r5]
 2485 00a4 226D     		ldr	r2, [r4, #80]
 2486 00a6 DA60     		str	r2, [r3, #12]
1400:HALLIB/Src/stm32f7xx_hal_eth.c ****      /* Clear xx bits */
 2487              		.loc 1 1400 0
 2488 00a8 2868     		ldr	r0, [r5]
 2489 00aa 8369     		ldr	r3, [r0, #24]
 2490              	.LVL246:
1402:HALLIB/Src/stm32f7xx_hal_eth.c ****      
 2491              		.loc 1 1402 0
 2492 00ac 4FF64172 		movw	r2, #65345
 2493 00b0 1A40     		ands	r2, r2, r3
 2494              	.LVL247:
1404:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->ZeroQuantaPause |
 2495              		.loc 1 1404 0
 2496 00b2 616D     		ldr	r1, [r4, #84]
1405:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->PauseLowThreshold |
 2497              		.loc 1 1405 0
 2498 00b4 A36D     		ldr	r3, [r4, #88]
1404:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->ZeroQuantaPause |
 2499              		.loc 1 1404 0
 2500 00b6 43EA0141 		orr	r1, r3, r1, lsl #16
1406:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->UnicastPauseFrameDetect | 
 2501              		.loc 1 1406 0
 2502 00ba E36D     		ldr	r3, [r4, #92]
1405:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->PauseLowThreshold |
 2503              		.loc 1 1405 0
 2504 00bc 1943     		orrs	r1, r1, r3
1407:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->ReceiveFlowControl |
 2505              		.loc 1 1407 0
 2506 00be 236E     		ldr	r3, [r4, #96]
1406:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->UnicastPauseFrameDetect | 
 2507              		.loc 1 1406 0
 2508 00c0 1943     		orrs	r1, r1, r3
1408:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->TransmitFlowControl); 
 2509              		.loc 1 1408 0
 2510 00c2 636E     		ldr	r3, [r4, #100]
1407:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->ReceiveFlowControl |
 2511              		.loc 1 1407 0
 2512 00c4 1943     		orrs	r1, r1, r3
1409:HALLIB/Src/stm32f7xx_hal_eth.c ****      
ARM GAS  /tmp/cc7Dq4FC.s 			page 88


 2513              		.loc 1 1409 0
 2514 00c6 A36E     		ldr	r3, [r4, #104]
1408:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->TransmitFlowControl); 
 2515              		.loc 1 1408 0
 2516 00c8 0B43     		orrs	r3, r3, r1
1404:HALLIB/Src/stm32f7xx_hal_eth.c ****                           macconf->ZeroQuantaPause |
 2517              		.loc 1 1404 0
 2518 00ca 1343     		orrs	r3, r3, r2
 2519              	.LVL248:
1412:HALLIB/Src/stm32f7xx_hal_eth.c ****      
 2520              		.loc 1 1412 0
 2521 00cc 8361     		str	r3, [r0, #24]
1416:HALLIB/Src/stm32f7xx_hal_eth.c ****      HAL_Delay(ETH_REG_WRITE_DELAY);
 2522              		.loc 1 1416 0
 2523 00ce 2B68     		ldr	r3, [r5]
 2524              	.LVL249:
 2525 00d0 9E69     		ldr	r6, [r3, #24]
 2526              	.LVL250:
1417:HALLIB/Src/stm32f7xx_hal_eth.c ****      (heth->Instance)->MACFCR = tmpreg;
 2527              		.loc 1 1417 0
 2528 00d2 0120     		movs	r0, #1
 2529 00d4 FFF7FEFF 		bl	HAL_Delay
 2530              	.LVL251:
1418:HALLIB/Src/stm32f7xx_hal_eth.c ****      
 2531              		.loc 1 1418 0
 2532 00d8 2B68     		ldr	r3, [r5]
 2533 00da 9E61     		str	r6, [r3, #24]
1421:HALLIB/Src/stm32f7xx_hal_eth.c ****                                               macconf->VLANTagIdentifier);
 2534              		.loc 1 1421 0
 2535 00dc 2A68     		ldr	r2, [r5]
 2536 00de E16E     		ldr	r1, [r4, #108]
1422:HALLIB/Src/stm32f7xx_hal_eth.c ****       
 2537              		.loc 1 1422 0
 2538 00e0 236F     		ldr	r3, [r4, #112]
1421:HALLIB/Src/stm32f7xx_hal_eth.c ****                                               macconf->VLANTagIdentifier);
 2539              		.loc 1 1421 0
 2540 00e2 0B43     		orrs	r3, r3, r1
 2541 00e4 D361     		str	r3, [r2, #28]
1426:HALLIB/Src/stm32f7xx_hal_eth.c ****       HAL_Delay(ETH_REG_WRITE_DELAY);
 2542              		.loc 1 1426 0
 2543 00e6 2B68     		ldr	r3, [r5]
 2544 00e8 DC69     		ldr	r4, [r3, #28]
 2545              	.LVL252:
1427:HALLIB/Src/stm32f7xx_hal_eth.c ****       (heth->Instance)->MACVLANTR = tmpreg;
 2546              		.loc 1 1427 0
 2547 00ea 0120     		movs	r0, #1
 2548 00ec FFF7FEFF 		bl	HAL_Delay
 2549              	.LVL253:
1428:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 2550              		.loc 1 1428 0
 2551 00f0 2B68     		ldr	r3, [r5]
 2552 00f2 DC61     		str	r4, [r3, #28]
 2553 00f4 0FE0     		b	.L142
 2554              	.LVL254:
 2555              	.L141:
1434:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 2556              		.loc 1 1434 0
ARM GAS  /tmp/cc7Dq4FC.s 			page 89


 2557 00f6 0168     		ldr	r1, [r0]
 2558              	.LVL255:
 2559 00f8 0B68     		ldr	r3, [r1]
 2560              	.LVL256:
1437:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 2561              		.loc 1 1437 0
 2562 00fa 23F49042 		bic	r2, r3, #18432
 2563              	.LVL257:
1439:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 2564              		.loc 1 1439 0
 2565 00fe 8068     		ldr	r0, [r0, #8]
 2566              	.LVL258:
 2567 0100 EB68     		ldr	r3, [r5, #12]
 2568 0102 0343     		orrs	r3, r3, r0
 2569 0104 1343     		orrs	r3, r3, r2
 2570              	.LVL259:
1442:HALLIB/Src/stm32f7xx_hal_eth.c ****     
 2571              		.loc 1 1442 0
 2572 0106 0B60     		str	r3, [r1]
1446:HALLIB/Src/stm32f7xx_hal_eth.c ****     HAL_Delay(ETH_REG_WRITE_DELAY);
 2573              		.loc 1 1446 0
 2574 0108 2B68     		ldr	r3, [r5]
 2575              	.LVL260:
 2576 010a 1C68     		ldr	r4, [r3]
 2577              	.LVL261:
1447:HALLIB/Src/stm32f7xx_hal_eth.c ****     (heth->Instance)->MACCR = tmpreg;
 2578              		.loc 1 1447 0
 2579 010c 0120     		movs	r0, #1
 2580 010e FFF7FEFF 		bl	HAL_Delay
 2581              	.LVL262:
1448:HALLIB/Src/stm32f7xx_hal_eth.c ****   }
 2582              		.loc 1 1448 0
 2583 0112 2B68     		ldr	r3, [r5]
 2584 0114 1C60     		str	r4, [r3]
 2585              	.L142:
1452:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2586              		.loc 1 1452 0
 2587 0116 0123     		movs	r3, #1
 2588 0118 85F84430 		strb	r3, [r5, #68]
1455:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2589              		.loc 1 1455 0
 2590 011c 0020     		movs	r0, #0
 2591 011e 85F84500 		strb	r0, [r5, #69]
1458:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 2592              		.loc 1 1458 0
 2593 0122 70BD     		pop	{r4, r5, r6, pc}
 2594              	.LVL263:
 2595              	.L143:
 2596              	.LCFI37:
 2597              		.cfi_def_cfa_offset 0
 2598              		.cfi_restore 4
 2599              		.cfi_restore 5
 2600              		.cfi_restore 6
 2601              		.cfi_restore 14
1306:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2602              		.loc 1 1306 0
 2603 0124 0220     		movs	r0, #2
ARM GAS  /tmp/cc7Dq4FC.s 			page 90


 2604              	.LVL264:
 2605 0126 7047     		bx	lr
 2606              	.L147:
 2607              		.align	2
 2608              	.L146:
 2609 0128 0F8120FF 		.word	-14647025
 2610              		.cfi_endproc
 2611              	.LFE153:
 2613              		.section	.text.HAL_ETH_ConfigDMA,"ax",%progbits
 2614              		.align	2
 2615              		.global	HAL_ETH_ConfigDMA
 2616              		.thumb
 2617              		.thumb_func
 2619              	HAL_ETH_ConfigDMA:
 2620              	.LFB154:
1469:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;
 2621              		.loc 1 1469 0
 2622              		.cfi_startproc
 2623              		@ args = 0, pretend = 0, frame = 0
 2624              		@ frame_needed = 0, uses_anonymous_args = 0
 2625              	.LVL265:
1473:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2626              		.loc 1 1473 0
 2627 0000 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 2628 0004 012B     		cmp	r3, #1
 2629 0006 51D0     		beq	.L150
1469:HALLIB/Src/stm32f7xx_hal_eth.c ****   uint32_t tmpreg = 0;
 2630              		.loc 1 1469 0 discriminator 2
 2631 0008 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2632              	.LCFI38:
 2633              		.cfi_def_cfa_offset 24
 2634              		.cfi_offset 4, -24
 2635              		.cfi_offset 5, -20
 2636              		.cfi_offset 6, -16
 2637              		.cfi_offset 7, -12
 2638              		.cfi_offset 8, -8
 2639              		.cfi_offset 14, -4
 2640 000c 0C46     		mov	r4, r1
 2641 000e 0546     		mov	r5, r0
1473:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2642              		.loc 1 1473 0 discriminator 2
 2643 0010 0126     		movs	r6, #1
 2644 0012 80F84560 		strb	r6, [r0, #69]
1476:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 2645              		.loc 1 1476 0 discriminator 2
 2646 0016 0223     		movs	r3, #2
 2647 0018 80F84430 		strb	r3, [r0, #68]
1498:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Clear xx bits */
 2648              		.loc 1 1498 0 discriminator 2
 2649 001c 0068     		ldr	r0, [r0]
 2650              	.LVL266:
 2651 001e 41F21807 		movw	r7, #4120
 2652 0022 C359     		ldr	r3, [r0, r7]
 2653              	.LVL267:
1500:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 2654              		.loc 1 1500 0 discriminator 2
 2655 0024 224A     		ldr	r2, .L153
ARM GAS  /tmp/cc7Dq4FC.s 			page 91


 2656 0026 1A40     		ands	r2, r2, r3
 2657              	.LVL268:
1502:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ReceiveStoreForward |
 2658              		.loc 1 1502 0 discriminator 2
 2659 0028 0968     		ldr	r1, [r1]
 2660              	.LVL269:
1503:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->FlushReceivedFrame |
 2661              		.loc 1 1503 0 discriminator 2
 2662 002a 6368     		ldr	r3, [r4, #4]
1502:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ReceiveStoreForward |
 2663              		.loc 1 1502 0 discriminator 2
 2664 002c 1943     		orrs	r1, r1, r3
1504:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->TransmitStoreForward | 
 2665              		.loc 1 1504 0 discriminator 2
 2666 002e A368     		ldr	r3, [r4, #8]
1503:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->FlushReceivedFrame |
 2667              		.loc 1 1503 0 discriminator 2
 2668 0030 1943     		orrs	r1, r1, r3
1505:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->TransmitThresholdControl |
 2669              		.loc 1 1505 0 discriminator 2
 2670 0032 E368     		ldr	r3, [r4, #12]
1504:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->TransmitStoreForward | 
 2671              		.loc 1 1504 0 discriminator 2
 2672 0034 1943     		orrs	r1, r1, r3
1506:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ForwardErrorFrames |
 2673              		.loc 1 1506 0 discriminator 2
 2674 0036 2369     		ldr	r3, [r4, #16]
1505:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->TransmitThresholdControl |
 2675              		.loc 1 1505 0 discriminator 2
 2676 0038 1943     		orrs	r1, r1, r3
1507:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ForwardUndersizedGoodFrames |
 2677              		.loc 1 1507 0 discriminator 2
 2678 003a 6369     		ldr	r3, [r4, #20]
1506:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ForwardErrorFrames |
 2679              		.loc 1 1506 0 discriminator 2
 2680 003c 1943     		orrs	r1, r1, r3
1508:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ReceiveThresholdControl |
 2681              		.loc 1 1508 0 discriminator 2
 2682 003e A369     		ldr	r3, [r4, #24]
1507:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ForwardUndersizedGoodFrames |
 2683              		.loc 1 1507 0 discriminator 2
 2684 0040 1943     		orrs	r1, r1, r3
1509:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->SecondFrameOperate);
 2685              		.loc 1 1509 0 discriminator 2
 2686 0042 E369     		ldr	r3, [r4, #28]
1508:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ReceiveThresholdControl |
 2687              		.loc 1 1508 0 discriminator 2
 2688 0044 1943     		orrs	r1, r1, r3
1510:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 2689              		.loc 1 1510 0 discriminator 2
 2690 0046 236A     		ldr	r3, [r4, #32]
1509:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->SecondFrameOperate);
 2691              		.loc 1 1509 0 discriminator 2
 2692 0048 0B43     		orrs	r3, r3, r1
1502:HALLIB/Src/stm32f7xx_hal_eth.c ****                        dmaconf->ReceiveStoreForward |
 2693              		.loc 1 1502 0 discriminator 2
 2694 004a 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/cc7Dq4FC.s 			page 92


 2695              	.LVL270:
1513:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 2696              		.loc 1 1513 0 discriminator 2
 2697 004c C351     		str	r3, [r0, r7]
1517:HALLIB/Src/stm32f7xx_hal_eth.c ****   HAL_Delay(ETH_REG_WRITE_DELAY);
 2698              		.loc 1 1517 0 discriminator 2
 2699 004e 2B68     		ldr	r3, [r5]
 2700              	.LVL271:
 2701 0050 53F80780 		ldr	r8, [r3, r7]
 2702              	.LVL272:
1518:HALLIB/Src/stm32f7xx_hal_eth.c ****   (heth->Instance)->DMAOMR = tmpreg;
 2703              		.loc 1 1518 0 discriminator 2
 2704 0054 3046     		mov	r0, r6
 2705 0056 FFF7FEFF 		bl	HAL_Delay
 2706              	.LVL273:
1519:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 2707              		.loc 1 1519 0 discriminator 2
 2708 005a 2B68     		ldr	r3, [r5]
 2709 005c 43F80780 		str	r8, [r3, r7]
1522:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->FixedBurst |
 2710              		.loc 1 1522 0 discriminator 2
 2711 0060 2A68     		ldr	r2, [r5]
 2712 0062 616A     		ldr	r1, [r4, #36]
1523:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for
 2713              		.loc 1 1523 0 discriminator 2
 2714 0064 A36A     		ldr	r3, [r4, #40]
1522:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->FixedBurst |
 2715              		.loc 1 1522 0 discriminator 2
 2716 0066 1943     		orrs	r1, r1, r3
1524:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->TxDMABurstLength |
 2717              		.loc 1 1524 0 discriminator 2
 2718 0068 E36A     		ldr	r3, [r4, #44]
1523:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for
 2719              		.loc 1 1523 0 discriminator 2
 2720 006a 1943     		orrs	r1, r1, r3
1525:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->EnhancedDescriptorFormat |
 2721              		.loc 1 1525 0 discriminator 2
 2722 006c 236B     		ldr	r3, [r4, #48]
1524:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->TxDMABurstLength |
 2723              		.loc 1 1524 0 discriminator 2
 2724 006e 1943     		orrs	r1, r1, r3
1526:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          (dmaconf->DescriptorSkipLength << 2) |
 2725              		.loc 1 1526 0 discriminator 2
 2726 0070 636B     		ldr	r3, [r4, #52]
1525:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->EnhancedDescriptorFormat |
 2727              		.loc 1 1525 0 discriminator 2
 2728 0072 0B43     		orrs	r3, r3, r1
1527:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->DMAArbitration | 
 2729              		.loc 1 1527 0 discriminator 2
 2730 0074 A16B     		ldr	r1, [r4, #56]
1526:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          (dmaconf->DescriptorSkipLength << 2) |
 2731              		.loc 1 1526 0 discriminator 2
 2732 0076 43EA8101 		orr	r1, r3, r1, lsl #2
1528:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and 
 2733              		.loc 1 1528 0 discriminator 2
 2734 007a E36B     		ldr	r3, [r4, #60]
1527:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->DMAArbitration | 
ARM GAS  /tmp/cc7Dq4FC.s 			page 93


 2735              		.loc 1 1527 0 discriminator 2
 2736 007c 0B43     		orrs	r3, r3, r1
1522:HALLIB/Src/stm32f7xx_hal_eth.c ****                                          dmaconf->FixedBurst |
 2737              		.loc 1 1522 0 discriminator 2
 2738 007e 43F40003 		orr	r3, r3, #8388608
 2739 0082 02F58052 		add	r2, r2, #4096
 2740 0086 1360     		str	r3, [r2]
1533:HALLIB/Src/stm32f7xx_hal_eth.c ****    HAL_Delay(ETH_REG_WRITE_DELAY);
 2741              		.loc 1 1533 0 discriminator 2
 2742 0088 2B68     		ldr	r3, [r5]
 2743 008a 03F58053 		add	r3, r3, #4096
 2744 008e 1C68     		ldr	r4, [r3]
 2745              	.LVL274:
1534:HALLIB/Src/stm32f7xx_hal_eth.c ****    (heth->Instance)->DMABMR = tmpreg;
 2746              		.loc 1 1534 0 discriminator 2
 2747 0090 3046     		mov	r0, r6
 2748 0092 FFF7FEFF 		bl	HAL_Delay
 2749              	.LVL275:
1535:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 2750              		.loc 1 1535 0 discriminator 2
 2751 0096 2B68     		ldr	r3, [r5]
 2752 0098 03F58053 		add	r3, r3, #4096
 2753 009c 1C60     		str	r4, [r3]
1538:HALLIB/Src/stm32f7xx_hal_eth.c ****    
 2754              		.loc 1 1538 0 discriminator 2
 2755 009e 85F84460 		strb	r6, [r5, #68]
1541:HALLIB/Src/stm32f7xx_hal_eth.c ****    
 2756              		.loc 1 1541 0 discriminator 2
 2757 00a2 0020     		movs	r0, #0
 2758 00a4 85F84500 		strb	r0, [r5, #69]
1544:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 2759              		.loc 1 1544 0 discriminator 2
 2760 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2761              	.LVL276:
 2762              	.L150:
 2763              	.LCFI39:
 2764              		.cfi_def_cfa_offset 0
 2765              		.cfi_restore 4
 2766              		.cfi_restore 5
 2767              		.cfi_restore 6
 2768              		.cfi_restore 7
 2769              		.cfi_restore 8
 2770              		.cfi_restore 14
1473:HALLIB/Src/stm32f7xx_hal_eth.c ****   
 2771              		.loc 1 1473 0
 2772 00ac 0220     		movs	r0, #2
 2773              	.LVL277:
 2774 00ae 7047     		bx	lr
 2775              	.L154:
 2776              		.align	2
 2777              	.L153:
 2778 00b0 233FDEF8 		.word	-119652573
 2779              		.cfi_endproc
 2780              	.LFE154:
 2782              		.section	.text.HAL_ETH_GetState,"ax",%progbits
 2783              		.align	2
 2784              		.global	HAL_ETH_GetState
ARM GAS  /tmp/cc7Dq4FC.s 			page 94


 2785              		.thumb
 2786              		.thumb_func
 2788              	HAL_ETH_GetState:
 2789              	.LFB155:
1576:HALLIB/Src/stm32f7xx_hal_eth.c ****   /* Return ETH state */
 2790              		.loc 1 1576 0
 2791              		.cfi_startproc
 2792              		@ args = 0, pretend = 0, frame = 0
 2793              		@ frame_needed = 0, uses_anonymous_args = 0
 2794              		@ link register save eliminated.
 2795              	.LVL278:
1578:HALLIB/Src/stm32f7xx_hal_eth.c **** }
 2796              		.loc 1 1578 0
 2797 0000 90F84400 		ldrb	r0, [r0, #68]	@ zero_extendqisi2
 2798              	.LVL279:
1579:HALLIB/Src/stm32f7xx_hal_eth.c **** 
 2799              		.loc 1 1579 0
 2800 0004 7047     		bx	lr
 2801              		.cfi_endproc
 2802              	.LFE155:
 2804 0006 00BF     		.text
 2805              	.Letext0:
 2806              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 2807              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 2808              		.file 4 "Inc/stm32f767xx.h"
 2809              		.file 5 "Inc/stm32f7xx.h"
 2810              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 2811              		.file 7 "HALLIB/Inc/stm32f7xx_hal_eth.h"
 2812              		.file 8 "HALLIB/Inc/stm32f7xx_hal.h"
 2813              		.file 9 "HALLIB/Inc/stm32f7xx_hal_rcc.h"
 2814              		.file 10 "CORE/core_cm7.h"
ARM GAS  /tmp/cc7Dq4FC.s 			page 95


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_eth.c
     /tmp/cc7Dq4FC.s:21     .text.ETH_MACAddressConfig:00000000 $t
     /tmp/cc7Dq4FC.s:25     .text.ETH_MACAddressConfig:00000000 ETH_MACAddressConfig
     /tmp/cc7Dq4FC.s:62     .text.ETH_MACAddressConfig:00000028 $d
     /tmp/cc7Dq4FC.s:68     .text.ETH_DMATransmissionEnable:00000000 $t
     /tmp/cc7Dq4FC.s:72     .text.ETH_DMATransmissionEnable:00000000 ETH_DMATransmissionEnable
     /tmp/cc7Dq4FC.s:91     .text.ETH_DMATransmissionDisable:00000000 $t
     /tmp/cc7Dq4FC.s:95     .text.ETH_DMATransmissionDisable:00000000 ETH_DMATransmissionDisable
     /tmp/cc7Dq4FC.s:114    .text.ETH_DMAReceptionEnable:00000000 $t
     /tmp/cc7Dq4FC.s:118    .text.ETH_DMAReceptionEnable:00000000 ETH_DMAReceptionEnable
     /tmp/cc7Dq4FC.s:137    .text.ETH_DMAReceptionDisable:00000000 $t
     /tmp/cc7Dq4FC.s:141    .text.ETH_DMAReceptionDisable:00000000 ETH_DMAReceptionDisable
     /tmp/cc7Dq4FC.s:160    .text.ETH_MACDMAConfig:00000000 $t
     /tmp/cc7Dq4FC.s:164    .text.ETH_MACDMAConfig:00000000 ETH_MACDMAConfig
     /tmp/cc7Dq4FC.s:381    .text.ETH_MACDMAConfig:00000100 $d
     /tmp/cc7Dq4FC.s:390    .text.ETH_MACTransmissionEnable:00000000 $t
     /tmp/cc7Dq4FC.s:394    .text.ETH_MACTransmissionEnable:00000000 ETH_MACTransmissionEnable
     /tmp/cc7Dq4FC.s:441    .text.ETH_MACReceptionEnable:00000000 $t
     /tmp/cc7Dq4FC.s:445    .text.ETH_MACReceptionEnable:00000000 ETH_MACReceptionEnable
     /tmp/cc7Dq4FC.s:492    .text.ETH_FlushTransmitFIFO:00000000 $t
     /tmp/cc7Dq4FC.s:496    .text.ETH_FlushTransmitFIFO:00000000 ETH_FlushTransmitFIFO
     /tmp/cc7Dq4FC.s:545    .text.ETH_MACReceptionDisable:00000000 $t
     /tmp/cc7Dq4FC.s:549    .text.ETH_MACReceptionDisable:00000000 ETH_MACReceptionDisable
     /tmp/cc7Dq4FC.s:596    .text.ETH_MACTransmissionDisable:00000000 $t
     /tmp/cc7Dq4FC.s:600    .text.ETH_MACTransmissionDisable:00000000 ETH_MACTransmissionDisable
     /tmp/cc7Dq4FC.s:647    .text.HAL_ETH_DMATxDescListInit:00000000 $t
     /tmp/cc7Dq4FC.s:652    .text.HAL_ETH_DMATxDescListInit:00000000 HAL_ETH_DMATxDescListInit
     /tmp/cc7Dq4FC.s:759    .text.HAL_ETH_DMARxDescListInit:00000000 $t
     /tmp/cc7Dq4FC.s:764    .text.HAL_ETH_DMARxDescListInit:00000000 HAL_ETH_DMARxDescListInit
     /tmp/cc7Dq4FC.s:866    .text.HAL_ETH_MspInit:00000000 $t
     /tmp/cc7Dq4FC.s:871    .text.HAL_ETH_MspInit:00000000 HAL_ETH_MspInit
     /tmp/cc7Dq4FC.s:884    .text.HAL_ETH_MspDeInit:00000000 $t
     /tmp/cc7Dq4FC.s:889    .text.HAL_ETH_MspDeInit:00000000 HAL_ETH_MspDeInit
     /tmp/cc7Dq4FC.s:902    .text.HAL_ETH_DeInit:00000000 $t
     /tmp/cc7Dq4FC.s:907    .text.HAL_ETH_DeInit:00000000 HAL_ETH_DeInit
     /tmp/cc7Dq4FC.s:938    .text.HAL_ETH_TransmitFrame:00000000 $t
     /tmp/cc7Dq4FC.s:943    .text.HAL_ETH_TransmitFrame:00000000 HAL_ETH_TransmitFrame
     /tmp/cc7Dq4FC.s:1159   .text.HAL_ETH_TransmitFrame:0000011c $d
     /tmp/cc7Dq4FC.s:1165   .text.HAL_ETH_GetReceivedFrame:00000000 $t
     /tmp/cc7Dq4FC.s:1170   .text.HAL_ETH_GetReceivedFrame:00000000 HAL_ETH_GetReceivedFrame
     /tmp/cc7Dq4FC.s:1282   .text.HAL_ETH_GetReceivedFrame_IT:00000000 $t
     /tmp/cc7Dq4FC.s:1287   .text.HAL_ETH_GetReceivedFrame_IT:00000000 HAL_ETH_GetReceivedFrame_IT
     /tmp/cc7Dq4FC.s:1408   .text.HAL_ETH_TxCpltCallback:00000000 $t
     /tmp/cc7Dq4FC.s:1413   .text.HAL_ETH_TxCpltCallback:00000000 HAL_ETH_TxCpltCallback
     /tmp/cc7Dq4FC.s:1426   .text.HAL_ETH_RxCpltCallback:00000000 $t
     /tmp/cc7Dq4FC.s:1431   .text.HAL_ETH_RxCpltCallback:00000000 HAL_ETH_RxCpltCallback
     /tmp/cc7Dq4FC.s:1444   .text.HAL_ETH_ErrorCallback:00000000 $t
     /tmp/cc7Dq4FC.s:1449   .text.HAL_ETH_ErrorCallback:00000000 HAL_ETH_ErrorCallback
     /tmp/cc7Dq4FC.s:1462   .text.HAL_ETH_IRQHandler:00000000 $t
     /tmp/cc7Dq4FC.s:1467   .text.HAL_ETH_IRQHandler:00000000 HAL_ETH_IRQHandler
     /tmp/cc7Dq4FC.s:1554   .text.HAL_ETH_ReadPHYRegister:00000000 $t
     /tmp/cc7Dq4FC.s:1559   .text.HAL_ETH_ReadPHYRegister:00000000 HAL_ETH_ReadPHYRegister
     /tmp/cc7Dq4FC.s:1669   .text.HAL_ETH_WritePHYRegister:00000000 $t
     /tmp/cc7Dq4FC.s:1674   .text.HAL_ETH_WritePHYRegister:00000000 HAL_ETH_WritePHYRegister
     /tmp/cc7Dq4FC.s:1784   .text.HAL_ETH_Init:00000000 $t
     /tmp/cc7Dq4FC.s:1789   .text.HAL_ETH_Init:00000000 HAL_ETH_Init
ARM GAS  /tmp/cc7Dq4FC.s 			page 96


     /tmp/cc7Dq4FC.s:2175   .text.HAL_ETH_Init:00000228 $d
     /tmp/cc7Dq4FC.s:2189   .text.HAL_ETH_Start:00000000 $t
     /tmp/cc7Dq4FC.s:2194   .text.HAL_ETH_Start:00000000 HAL_ETH_Start
     /tmp/cc7Dq4FC.s:2256   .text.HAL_ETH_Stop:00000000 $t
     /tmp/cc7Dq4FC.s:2261   .text.HAL_ETH_Stop:00000000 HAL_ETH_Stop
     /tmp/cc7Dq4FC.s:2323   .text.HAL_ETH_ConfigMAC:00000000 $t
     /tmp/cc7Dq4FC.s:2328   .text.HAL_ETH_ConfigMAC:00000000 HAL_ETH_ConfigMAC
     /tmp/cc7Dq4FC.s:2609   .text.HAL_ETH_ConfigMAC:00000128 $d
     /tmp/cc7Dq4FC.s:2614   .text.HAL_ETH_ConfigDMA:00000000 $t
     /tmp/cc7Dq4FC.s:2619   .text.HAL_ETH_ConfigDMA:00000000 HAL_ETH_ConfigDMA
     /tmp/cc7Dq4FC.s:2778   .text.HAL_ETH_ConfigDMA:000000b0 $d
     /tmp/cc7Dq4FC.s:2783   .text.HAL_ETH_GetState:00000000 $t
     /tmp/cc7Dq4FC.s:2788   .text.HAL_ETH_GetState:00000000 HAL_ETH_GetState
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_Delay
HAL_GetTick
HAL_RCC_GetHCLKFreq
