ARM GAS  /tmp/ccXuIaHP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"stm32f7xx_hal_spi.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.SPI_WaitFlagStateUntilTimeout,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	SPI_WaitFlagStateUntilTimeout:
  26              	.LFB187:
  27              		.file 1 "HALLIB/Src/stm32f7xx_hal_spi.c"
   1:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
   2:HALLIB/Src/stm32f7xx_hal_spi.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @file    stm32f7xx_hal_spi.c
   4:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief   SPI HAL module driver.
   6:HALLIB/Src/stm32f7xx_hal_spi.c ****   *          This file provides firmware functions to manage the following
   7:HALLIB/Src/stm32f7xx_hal_spi.c ****   *          functionalities of the Serial Peripheral Interface (SPI) peripheral:
   8:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           + IO operation functions
  10:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           + Peripheral Control functions
  11:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           + Peripheral State functions
  12:HALLIB/Src/stm32f7xx_hal_spi.c ****   *
  13:HALLIB/Src/stm32f7xx_hal_spi.c ****   @verbatim
  14:HALLIB/Src/stm32f7xx_hal_spi.c ****   ==============================================================================
  15:HALLIB/Src/stm32f7xx_hal_spi.c ****                         ##### How to use this driver #####
  16:HALLIB/Src/stm32f7xx_hal_spi.c ****   ==============================================================================
  17:HALLIB/Src/stm32f7xx_hal_spi.c ****     [..]
  18:HALLIB/Src/stm32f7xx_hal_spi.c ****       The SPI HAL driver can be used as follows:
  19:HALLIB/Src/stm32f7xx_hal_spi.c **** 
  20:HALLIB/Src/stm32f7xx_hal_spi.c ****       (#) Declare a SPI_HandleTypeDef handle structure, for example:
  21:HALLIB/Src/stm32f7xx_hal_spi.c ****           SPI_HandleTypeDef  hspi;
  22:HALLIB/Src/stm32f7xx_hal_spi.c **** 
  23:HALLIB/Src/stm32f7xx_hal_spi.c ****       (#)Initialize the SPI low level resources by implementing the HAL_SPI_MspInit() API:
  24:HALLIB/Src/stm32f7xx_hal_spi.c ****           (##) Enable the SPIx interface clock
  25:HALLIB/Src/stm32f7xx_hal_spi.c ****           (##) SPI pins configuration
  26:HALLIB/Src/stm32f7xx_hal_spi.c ****               (+++) Enable the clock for the SPI GPIOs
  27:HALLIB/Src/stm32f7xx_hal_spi.c ****               (+++) Configure these SPI pins as alternate function push-pull
  28:HALLIB/Src/stm32f7xx_hal_spi.c ****           (##) NVIC configuration if you need to use interrupt process
  29:HALLIB/Src/stm32f7xx_hal_spi.c ****               (+++) Configure the SPIx interrupt priority
  30:HALLIB/Src/stm32f7xx_hal_spi.c ****               (+++) Enable the NVIC SPI IRQ handle
  31:HALLIB/Src/stm32f7xx_hal_spi.c ****           (##) DMA Configuration if you need to use DMA process
ARM GAS  /tmp/ccXuIaHP.s 			page 2


  32:HALLIB/Src/stm32f7xx_hal_spi.c ****               (+++) Declare a DMA_HandleTypeDef handle structure for the transmit or receive Stream
  33:HALLIB/Src/stm32f7xx_hal_spi.c ****               (+++) Enable the DMAx clock
  34:HALLIB/Src/stm32f7xx_hal_spi.c ****               (+++) Configure the DMA handle parameters
  35:HALLIB/Src/stm32f7xx_hal_spi.c ****               (+++) Configure the DMA Tx or Rx Stream/Channel
  36:HALLIB/Src/stm32f7xx_hal_spi.c ****               (+++) Associate the initialized hdma_tx handle to the hspi DMA Tx or Rx handle
  37:HALLIB/Src/stm32f7xx_hal_spi.c ****               (+++) Configure the priority and enable the NVIC for the transfer complete interrupt 
  38:HALLIB/Src/stm32f7xx_hal_spi.c **** 
  39:HALLIB/Src/stm32f7xx_hal_spi.c ****       (#) Program the Mode, BidirectionalMode , Data size, Baudrate Prescaler, NSS
  40:HALLIB/Src/stm32f7xx_hal_spi.c ****           management, Clock polarity and phase, FirstBit and CRC configuration in the hspi Init str
  41:HALLIB/Src/stm32f7xx_hal_spi.c **** 
  42:HALLIB/Src/stm32f7xx_hal_spi.c ****       (#) Initialize the SPI registers by calling the HAL_SPI_Init() API:
  43:HALLIB/Src/stm32f7xx_hal_spi.c ****           (++) This API configures also the low level Hardware GPIO, CLOCK, CORTEX...etc)
  44:HALLIB/Src/stm32f7xx_hal_spi.c ****               by calling the customized HAL_SPI_MspInit() API.
  45:HALLIB/Src/stm32f7xx_hal_spi.c ****      [..]
  46:HALLIB/Src/stm32f7xx_hal_spi.c ****        Circular mode restriction:
  47:HALLIB/Src/stm32f7xx_hal_spi.c ****       (#) The DMA circular mode cannot be used when the SPI is configured in these modes:
  48:HALLIB/Src/stm32f7xx_hal_spi.c ****           (##) Master 2Lines RxOnly
  49:HALLIB/Src/stm32f7xx_hal_spi.c ****           (##) Master 1Line Rx
  50:HALLIB/Src/stm32f7xx_hal_spi.c ****       (#) The CRC feature is not managed when the DMA circular mode is enabled
  51:HALLIB/Src/stm32f7xx_hal_spi.c ****       (#) When the SPI DMA Pause/Stop features are used, we must use the following APIs
  52:HALLIB/Src/stm32f7xx_hal_spi.c ****           the HAL_SPI_DMAPause()/ HAL_SPI_DMAStop() only under the SPI callbacks
  53:HALLIB/Src/stm32f7xx_hal_spi.c **** 
  54:HALLIB/Src/stm32f7xx_hal_spi.c ****      [..]
  55:HALLIB/Src/stm32f7xx_hal_spi.c ****        (@) The max SPI frequency depend on SPI data size (4bits, 5bits,..., 8bits,...15bits, 16bits
  56:HALLIB/Src/stm32f7xx_hal_spi.c ****            SPI mode(2 Lines fullduplex, 2 lines RxOnly, 1 line TX/RX) and Process mode (Polling, IT
  57:HALLIB/Src/stm32f7xx_hal_spi.c ****        (@)
  58:HALLIB/Src/stm32f7xx_hal_spi.c ****            (+@) TX/RX processes are HAL_SPI_TransmitReceive(), HAL_SPI_TransmitReceive_IT() and HAL
  59:HALLIB/Src/stm32f7xx_hal_spi.c ****            (+@) RX processes are HAL_SPI_Receive(), HAL_SPI_Receive_IT() and HAL_SPI_Receive_DMA()
  60:HALLIB/Src/stm32f7xx_hal_spi.c ****            (+@) TX processes are HAL_SPI_Transmit(), HAL_SPI_Transmit_IT() and HAL_SPI_Transmit_DMA
  61:HALLIB/Src/stm32f7xx_hal_spi.c **** 
  62:HALLIB/Src/stm32f7xx_hal_spi.c ****   @endverbatim
  63:HALLIB/Src/stm32f7xx_hal_spi.c **** 
  64:HALLIB/Src/stm32f7xx_hal_spi.c ****        Using the HAL it is not possible to reach all supported SPI frequency with the differents SP
  65:HALLIB/Src/stm32f7xx_hal_spi.c ****        the following table resume the max SPI frequency reached with data size 8bits/16bits,
  66:HALLIB/Src/stm32f7xx_hal_spi.c ****        according to frequency used on APBx Peripheral Clock (fPCLK) used by the SPI instance :
  67:HALLIB/Src/stm32f7xx_hal_spi.c **** 
  68:HALLIB/Src/stm32f7xx_hal_spi.c ****        DataSize = SPI_DATASIZE_8BIT:
  69:HALLIB/Src/stm32f7xx_hal_spi.c ****        +-------------------------------------------------------------------------------------------
  70:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |                | 2Lines Fullduplex   |     2Lines RxOnly    |         1Line     
  71:HALLIB/Src/stm32f7xx_hal_spi.c ****        | Process | Tranfert mode  |---------------------|----------------------|-------------------
  72:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |                |  Master  |  Slave   |  Master   |  Slave   |  Master   |  Slave
  73:HALLIB/Src/stm32f7xx_hal_spi.c ****        |===========================================================================================
  74:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    T    |     Polling    | Fpclk/4  | Fpclk/8  |    NA     |    NA    |    NA     |   NA  
  75:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
  76:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    /    |     Interrupt  | Fpclk/4  | Fpclk/16 |    NA     |    NA    |    NA     |   NA  
  77:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    R    |----------------|----------|----------|-----------|----------|-----------|-------
  78:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    X    |       DMA      | Fpclk/2  | Fpclk/2  |    NA     |    NA    |    NA     |   NA  
  79:HALLIB/Src/stm32f7xx_hal_spi.c ****        |=========|================|==========|==========|===========|==========|===========|=======
  80:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |     Polling    | Fpclk/4  | Fpclk/8  | Fpclk/16  | Fpclk/8  | Fpclk/8   | Fpclk/
  81:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |----------------|----------|----------|-----------|----------|-----------|-------
  82:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    R    |     Interrupt  | Fpclk/8  | Fpclk/16 | Fpclk/8   | Fpclk/8  | Fpclk/8   | Fpclk/
  83:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
  84:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |       DMA      | Fpclk/4  | Fpclk/2  | Fpclk/2   | Fpclk/16 | Fpclk/2   | Fpclk/
  85:HALLIB/Src/stm32f7xx_hal_spi.c ****        |=========|================|==========|==========|===========|==========|===========|=======
  86:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |     Polling    | Fpclk/8  | Fpclk/2  |     NA    |    NA    | Fpclk/8   | Fpclk/
  87:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |----------------|----------|----------|-----------|----------|-----------|-------
  88:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    T    |     Interrupt  | Fpclk/2  | Fpclk/4  |     NA    |    NA    | Fpclk/16  | Fpclk/
ARM GAS  /tmp/ccXuIaHP.s 			page 3


  89:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
  90:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |       DMA      | Fpclk/2  | Fpclk/2  |     NA    |    NA    | Fpclk/8   | Fpclk/
  91:HALLIB/Src/stm32f7xx_hal_spi.c ****        +-------------------------------------------------------------------------------------------
  92:HALLIB/Src/stm32f7xx_hal_spi.c **** 
  93:HALLIB/Src/stm32f7xx_hal_spi.c ****        DataSize = SPI_DATASIZE_16BIT:
  94:HALLIB/Src/stm32f7xx_hal_spi.c ****        +-------------------------------------------------------------------------------------------
  95:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |                | 2Lines Fullduplex   |     2Lines RxOnly    |         1Line     
  96:HALLIB/Src/stm32f7xx_hal_spi.c ****        | Process | Tranfert mode  |---------------------|----------------------|-------------------
  97:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |                |  Master  |  Slave   |  Master   |  Slave   |  Master   |  Slave
  98:HALLIB/Src/stm32f7xx_hal_spi.c ****        |===========================================================================================
  99:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    T    |     Polling    | Fpclk/4  | Fpclk/8  |    NA     |    NA    |    NA     |   NA  
 100:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
 101:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    /    |     Interrupt  | Fpclk/4  | Fpclk/16 |    NA     |    NA    |    NA     |   NA  
 102:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    R    |----------------|----------|----------|-----------|----------|-----------|-------
 103:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    X    |       DMA      | Fpclk/2  | Fpclk/2  |    NA     |    NA    |    NA     |   NA  
 104:HALLIB/Src/stm32f7xx_hal_spi.c ****        |=========|================|==========|==========|===========|==========|===========|=======
 105:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |     Polling    | Fpclk/4  | Fpclk/8  | Fpclk/16  | Fpclk/8  | Fpclk/8   | Fpclk/
 106:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |----------------|----------|----------|-----------|----------|-----------|-------
 107:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    R    |     Interrupt  | Fpclk/8  | Fpclk/16 | Fpclk/8   | Fpclk/8  | Fpclk/8   | Fpclk/
 108:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
 109:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |       DMA      | Fpclk/4  | Fpclk/2  | Fpclk/2   | Fpclk/16 | Fpclk/2   | Fpclk/
 110:HALLIB/Src/stm32f7xx_hal_spi.c ****        |=========|================|==========|==========|===========|==========|===========|=======
 111:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |     Polling    | Fpclk/8  | Fpclk/2  |     NA    |    NA    | Fpclk/8   | Fpclk/
 112:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |----------------|----------|----------|-----------|----------|-----------|-------
 113:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    T    |     Interrupt  | Fpclk/2  | Fpclk/4  |     NA    |    NA    | Fpclk/16  | Fpclk/
 114:HALLIB/Src/stm32f7xx_hal_spi.c ****        |    X    |----------------|----------|----------|-----------|----------|-----------|-------
 115:HALLIB/Src/stm32f7xx_hal_spi.c ****        |         |       DMA      | Fpclk/2  | Fpclk/2  |     NA    |    NA    | Fpclk/8   | Fpclk/
 116:HALLIB/Src/stm32f7xx_hal_spi.c ****        +-------------------------------------------------------------------------------------------
 117:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 118:HALLIB/Src/stm32f7xx_hal_spi.c ****   ******************************************************************************
 119:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @attention
 120:HALLIB/Src/stm32f7xx_hal_spi.c ****   *
 121:HALLIB/Src/stm32f7xx_hal_spi.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 122:HALLIB/Src/stm32f7xx_hal_spi.c ****   *
 123:HALLIB/Src/stm32f7xx_hal_spi.c ****   * Redistribution and use in source and binary forms, with or without modification,
 124:HALLIB/Src/stm32f7xx_hal_spi.c ****   * are permitted provided that the following conditions are met:
 125:HALLIB/Src/stm32f7xx_hal_spi.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 126:HALLIB/Src/stm32f7xx_hal_spi.c ****   *      this list of conditions and the following disclaimer.
 127:HALLIB/Src/stm32f7xx_hal_spi.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 128:HALLIB/Src/stm32f7xx_hal_spi.c ****   *      this list of conditions and the following disclaimer in the documentation
 129:HALLIB/Src/stm32f7xx_hal_spi.c ****   *      and/or other materials provided with the distribution.
 130:HALLIB/Src/stm32f7xx_hal_spi.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 131:HALLIB/Src/stm32f7xx_hal_spi.c ****   *      may be used to endorse or promote products derived from this software
 132:HALLIB/Src/stm32f7xx_hal_spi.c ****   *      without specific prior written permission.
 133:HALLIB/Src/stm32f7xx_hal_spi.c ****   *
 134:HALLIB/Src/stm32f7xx_hal_spi.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 135:HALLIB/Src/stm32f7xx_hal_spi.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 136:HALLIB/Src/stm32f7xx_hal_spi.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 137:HALLIB/Src/stm32f7xx_hal_spi.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 138:HALLIB/Src/stm32f7xx_hal_spi.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 139:HALLIB/Src/stm32f7xx_hal_spi.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 140:HALLIB/Src/stm32f7xx_hal_spi.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 141:HALLIB/Src/stm32f7xx_hal_spi.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 142:HALLIB/Src/stm32f7xx_hal_spi.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 143:HALLIB/Src/stm32f7xx_hal_spi.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 144:HALLIB/Src/stm32f7xx_hal_spi.c ****   *
 145:HALLIB/Src/stm32f7xx_hal_spi.c ****   ******************************************************************************
ARM GAS  /tmp/ccXuIaHP.s 			page 4


 146:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 147:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 148:HALLIB/Src/stm32f7xx_hal_spi.c **** /* Includes ------------------------------------------------------------------*/
 149:HALLIB/Src/stm32f7xx_hal_spi.c **** #include "stm32f7xx_hal.h"
 150:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 151:HALLIB/Src/stm32f7xx_hal_spi.c **** /** @addtogroup STM32F7xx_HAL_Driver
 152:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @{
 153:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 154:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 155:HALLIB/Src/stm32f7xx_hal_spi.c **** /** @defgroup SPI SPI
 156:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief SPI HAL module driver
 157:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @{
 158:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 159:HALLIB/Src/stm32f7xx_hal_spi.c **** #ifdef HAL_SPI_MODULE_ENABLED
 160:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 161:HALLIB/Src/stm32f7xx_hal_spi.c **** /* Private typedef -----------------------------------------------------------*/
 162:HALLIB/Src/stm32f7xx_hal_spi.c **** /* Private defines -----------------------------------------------------------*/
 163:HALLIB/Src/stm32f7xx_hal_spi.c **** /** @defgroup SPI_Private_Constants SPI Private Constants
 164:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @{
 165:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 166:HALLIB/Src/stm32f7xx_hal_spi.c **** #define SPI_DEFAULT_TIMEOUT 100U
 167:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
 168:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @}
 169:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 170:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 171:HALLIB/Src/stm32f7xx_hal_spi.c **** /* Private macros ------------------------------------------------------------*/
 172:HALLIB/Src/stm32f7xx_hal_spi.c **** /* Private variables ---------------------------------------------------------*/
 173:HALLIB/Src/stm32f7xx_hal_spi.c **** /* Private function prototypes -----------------------------------------------*/
 174:HALLIB/Src/stm32f7xx_hal_spi.c **** /** @defgroup SPI_Private_Functions SPI Private Functions
 175:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @{
 176:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 177:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 178:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 179:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma);
 180:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma);
 181:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma);
 182:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma);
 183:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAError(DMA_HandleTypeDef *hdma);
 184:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 185:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 186:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 187:HALLIB/Src/stm32f7xx_hal_spi.c **** static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint
 188:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                        uint32_t Timeout, uint32_t Tickstart);
 189:HALLIB/Src/stm32f7xx_hal_spi.c **** static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint
 190:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                        uint32_t Timeout, uint32_t Tickstart);
 191:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi);
 192:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi);
 193:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi);
 194:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi);
 195:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi);
 196:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi);
 197:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi);
 198:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi);
 199:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 200:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi);
 201:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi);
 202:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi);
ARM GAS  /tmp/ccXuIaHP.s 			page 5


 203:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi);
 204:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 205:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi);
 206:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi);
 207:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi);
 208:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi);
 209:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi);
 210:HALLIB/Src/stm32f7xx_hal_spi.c **** static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t T
 211:HALLIB/Src/stm32f7xx_hal_spi.c **** static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t
 212:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
 213:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @}
 214:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 215:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 216:HALLIB/Src/stm32f7xx_hal_spi.c **** /* Exported functions --------------------------------------------------------*/
 217:HALLIB/Src/stm32f7xx_hal_spi.c **** /** @defgroup SPI_Exported_Functions SPI Exported Functions
 218:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @{
 219:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 220:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 221:HALLIB/Src/stm32f7xx_hal_spi.c **** /** @defgroup SPI_Exported_Functions_Group1 Initialization and de-initialization functions
 222:HALLIB/Src/stm32f7xx_hal_spi.c ****  *  @brief    Initialization and Configuration functions
 223:HALLIB/Src/stm32f7xx_hal_spi.c ****  *
 224:HALLIB/Src/stm32f7xx_hal_spi.c **** @verbatim
 225:HALLIB/Src/stm32f7xx_hal_spi.c ****  ===============================================================================
 226:HALLIB/Src/stm32f7xx_hal_spi.c ****               ##### Initialization and de-initialization functions #####
 227:HALLIB/Src/stm32f7xx_hal_spi.c ****  ===============================================================================
 228:HALLIB/Src/stm32f7xx_hal_spi.c ****     [..]  This subsection provides a set of functions allowing to initialize and
 229:HALLIB/Src/stm32f7xx_hal_spi.c ****           de-initialize the SPIx peripheral:
 230:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 231:HALLIB/Src/stm32f7xx_hal_spi.c ****       (+) User must implement HAL_SPI_MspInit() function in which he configures
 232:HALLIB/Src/stm32f7xx_hal_spi.c ****           all related peripherals resources (CLOCK, GPIO, DMA, IT and NVIC ).
 233:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 234:HALLIB/Src/stm32f7xx_hal_spi.c ****       (+) Call the function HAL_SPI_Init() to configure the selected device with
 235:HALLIB/Src/stm32f7xx_hal_spi.c ****           the selected configuration:
 236:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) Mode
 237:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) Direction
 238:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) Data Size
 239:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) Clock Polarity and Phase
 240:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) NSS Management
 241:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) BaudRate Prescaler
 242:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) FirstBit
 243:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) TIMode
 244:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) CRC Calculation
 245:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) CRC Polynomial if CRC enabled
 246:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) CRC Length, used only with Data8 and Data16
 247:HALLIB/Src/stm32f7xx_hal_spi.c ****         (++) FIFO reception threshold
 248:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 249:HALLIB/Src/stm32f7xx_hal_spi.c ****       (+) Call the function HAL_SPI_DeInit() to restore the default configuration
 250:HALLIB/Src/stm32f7xx_hal_spi.c ****           of the selected SPIx peripheral.
 251:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 252:HALLIB/Src/stm32f7xx_hal_spi.c **** @endverbatim
 253:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @{
 254:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 255:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 256:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
 257:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Initialize the SPI according to the specified parameters
 258:HALLIB/Src/stm32f7xx_hal_spi.c ****   *         in the SPI_InitTypeDef and initialize the associated handle.
 259:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
ARM GAS  /tmp/ccXuIaHP.s 			page 6


 260:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
 261:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
 262:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 263:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
 264:HALLIB/Src/stm32f7xx_hal_spi.c **** {
 265:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t frxth;
 266:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 267:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check the SPI handle allocation */
 268:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi == NULL)
 269:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 270:HALLIB/Src/stm32f7xx_hal_spi.c ****     return HAL_ERROR;
 271:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 272:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 273:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check the parameters */
 274:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 275:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_MODE(hspi->Init.Mode));
 276:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 277:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 278:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_NSS(hspi->Init.NSS));
 279:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 280:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 281:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 282:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 283:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 284:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 285:HALLIB/Src/stm32f7xx_hal_spi.c ****     assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 286:HALLIB/Src/stm32f7xx_hal_spi.c ****     assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 287:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 288:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 289:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 290:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 291:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 292:HALLIB/Src/stm32f7xx_hal_spi.c ****     assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 293:HALLIB/Src/stm32f7xx_hal_spi.c ****     assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
 294:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 295:HALLIB/Src/stm32f7xx_hal_spi.c **** #else
 296:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 297:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 298:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 299:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->State == HAL_SPI_STATE_RESET)
 300:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 301:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Allocate lock resource and initialize it */
 302:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->Lock = HAL_UNLOCKED;
 303:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 304:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC... */
 305:HALLIB/Src/stm32f7xx_hal_spi.c ****     HAL_SPI_MspInit(hspi);
 306:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 307:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 308:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_BUSY;
 309:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 310:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable the selected SPI peripheral */
 311:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_DISABLE(hspi);
 312:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 313:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Align by default the rs fifo threshold on the data size */
 314:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 315:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 316:HALLIB/Src/stm32f7xx_hal_spi.c ****     frxth = SPI_RXFIFO_THRESHOLD_HF;
ARM GAS  /tmp/ccXuIaHP.s 			page 7


 317:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 318:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
 319:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 320:HALLIB/Src/stm32f7xx_hal_spi.c ****     frxth = SPI_RXFIFO_THRESHOLD_QF;
 321:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 322:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 323:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* CRC calculation is valid only for 16Bit and 8 Bit */
 324:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 325:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 326:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* CRC must be disabled */
 327:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 328:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 329:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 330:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Align the CRC Length on the data size */
 331:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 332:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 333:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* CRC Length aligned on the data size : value set by default */
 334:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 335:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 336:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 337:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 338:HALLIB/Src/stm32f7xx_hal_spi.c ****     else
 339:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 340:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 341:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 342:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 343:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 344:HALLIB/Src/stm32f7xx_hal_spi.c ****   /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
 345:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
 346:HALLIB/Src/stm32f7xx_hal_spi.c ****   Communication speed, First bit, CRC calculation state */
 347:HALLIB/Src/stm32f7xx_hal_spi.c ****   WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 348:HALLIB/Src/stm32f7xx_hal_spi.c ****                                   hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & 
 349:HALLIB/Src/stm32f7xx_hal_spi.c ****                                   hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.
 350:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 351:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Configure : CRC Length */
 352:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 353:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 354:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->Instance->CR1 |= SPI_CR1_CRCL;
 355:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 356:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 357:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 358:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
 359:HALLIB/Src/stm32f7xx_hal_spi.c ****   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 360:HALLIB/Src/stm32f7xx_hal_spi.c ****                                   hspi->Init.NSSPMode | hspi->Init.DataSize) | frxth);
 361:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 362:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 363:HALLIB/Src/stm32f7xx_hal_spi.c ****   /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
 364:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Configure : CRC Polynomial */
 365:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 366:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 367:HALLIB/Src/stm32f7xx_hal_spi.c ****     WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 368:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 369:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 370:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 371:HALLIB/Src/stm32f7xx_hal_spi.c **** #if defined(SPI_I2SCFGR_I2SMOD)
 372:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
 373:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
ARM GAS  /tmp/ccXuIaHP.s 			page 8


 374:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* SPI_I2SCFGR_I2SMOD */
 375:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 376:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 377:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State     = HAL_SPI_STATE_READY;
 378:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 379:HALLIB/Src/stm32f7xx_hal_spi.c ****   return HAL_OK;
 380:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 381:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 382:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
 383:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  De-Initialize the SPI peripheral.
 384:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 385:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
 386:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
 387:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 388:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
 389:HALLIB/Src/stm32f7xx_hal_spi.c **** {
 390:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check the SPI handle allocation */
 391:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi == NULL)
 392:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 393:HALLIB/Src/stm32f7xx_hal_spi.c ****     return HAL_ERROR;
 394:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 395:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 396:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check SPI Instance parameter */
 397:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 398:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 399:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_BUSY;
 400:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 401:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable the SPI Peripheral Clock */
 402:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_DISABLE(hspi);
 403:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 404:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
 405:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_MspDeInit(hspi);
 406:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 407:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 408:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_RESET;
 409:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 410:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Release Lock */
 411:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
 412:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 413:HALLIB/Src/stm32f7xx_hal_spi.c ****   return HAL_OK;
 414:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 415:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 416:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
 417:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Initialize the SPI MSP.
 418:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 419:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
 420:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
 421:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 422:HALLIB/Src/stm32f7xx_hal_spi.c **** __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
 423:HALLIB/Src/stm32f7xx_hal_spi.c **** {
 424:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 425:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(hspi);
 426:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 427:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 428:HALLIB/Src/stm32f7xx_hal_spi.c ****             the HAL_SPI_MspInit should be implemented in the user file
 429:HALLIB/Src/stm32f7xx_hal_spi.c ****    */
 430:HALLIB/Src/stm32f7xx_hal_spi.c **** }
ARM GAS  /tmp/ccXuIaHP.s 			page 9


 431:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 432:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
 433:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  De-Initialize the SPI MSP.
 434:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 435:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
 436:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
 437:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 438:HALLIB/Src/stm32f7xx_hal_spi.c **** __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
 439:HALLIB/Src/stm32f7xx_hal_spi.c **** {
 440:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 441:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(hspi);
 442:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 443:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 444:HALLIB/Src/stm32f7xx_hal_spi.c ****             the HAL_SPI_MspDeInit should be implemented in the user file
 445:HALLIB/Src/stm32f7xx_hal_spi.c ****    */
 446:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 447:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 448:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
 449:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @}
 450:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 451:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 452:HALLIB/Src/stm32f7xx_hal_spi.c **** /** @defgroup SPI_Exported_Functions_Group2 IO operation functions
 453:HALLIB/Src/stm32f7xx_hal_spi.c ****  *  @brief   Data transfers functions
 454:HALLIB/Src/stm32f7xx_hal_spi.c ****  *
 455:HALLIB/Src/stm32f7xx_hal_spi.c **** @verbatim
 456:HALLIB/Src/stm32f7xx_hal_spi.c ****   ==============================================================================
 457:HALLIB/Src/stm32f7xx_hal_spi.c ****                       ##### IO operation functions #####
 458:HALLIB/Src/stm32f7xx_hal_spi.c ****  ===============================================================================
 459:HALLIB/Src/stm32f7xx_hal_spi.c ****  [..]
 460:HALLIB/Src/stm32f7xx_hal_spi.c ****     This subsection provides a set of functions allowing to manage the SPI
 461:HALLIB/Src/stm32f7xx_hal_spi.c ****     data transfers.
 462:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 463:HALLIB/Src/stm32f7xx_hal_spi.c ****     [..] The SPI supports master and slave mode :
 464:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 465:HALLIB/Src/stm32f7xx_hal_spi.c ****     (#) There are two modes of transfer:
 466:HALLIB/Src/stm32f7xx_hal_spi.c ****        (++) Blocking mode: The communication is performed in polling mode.
 467:HALLIB/Src/stm32f7xx_hal_spi.c ****             The HAL status of all data processing is returned by the same function
 468:HALLIB/Src/stm32f7xx_hal_spi.c ****             after finishing transfer.
 469:HALLIB/Src/stm32f7xx_hal_spi.c ****        (++) No-Blocking mode: The communication is performed using Interrupts
 470:HALLIB/Src/stm32f7xx_hal_spi.c ****             or DMA, These APIs return the HAL status.
 471:HALLIB/Src/stm32f7xx_hal_spi.c ****             The end of the data processing will be indicated through the
 472:HALLIB/Src/stm32f7xx_hal_spi.c ****             dedicated SPI IRQ when using Interrupt mode or the DMA IRQ when
 473:HALLIB/Src/stm32f7xx_hal_spi.c ****             using DMA mode.
 474:HALLIB/Src/stm32f7xx_hal_spi.c ****             The HAL_SPI_TxCpltCallback(), HAL_SPI_RxCpltCallback() and HAL_SPI_TxRxCpltCallback() u
 475:HALLIB/Src/stm32f7xx_hal_spi.c ****             will be executed respectively at the end of the transmit or Receive process
 476:HALLIB/Src/stm32f7xx_hal_spi.c ****             The HAL_SPI_ErrorCallback()user callback will be executed when a communication error is
 477:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 478:HALLIB/Src/stm32f7xx_hal_spi.c ****     (#) APIs provided for these 2 transfer modes (Blocking mode or Non blocking mode using either I
 479:HALLIB/Src/stm32f7xx_hal_spi.c ****         exist for 1Line (simplex) and 2Lines (full duplex) modes.
 480:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 481:HALLIB/Src/stm32f7xx_hal_spi.c **** @endverbatim
 482:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @{
 483:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 484:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 485:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
 486:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Transmit an amount of data in blocking mode.
 487:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
ARM GAS  /tmp/ccXuIaHP.s 			page 10


 488:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
 489:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pData pointer to data buffer
 490:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Size amount of data to be sent
 491:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Timeout Timeout duration
 492:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
 493:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 494:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t
 495:HALLIB/Src/stm32f7xx_hal_spi.c **** {
 496:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
 497:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 498:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 499:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check Direction parameter */
 500:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 501:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 502:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Locked */
 503:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_LOCK(hspi);
 504:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 505:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout management*/
 506:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
 507:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 508:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
 509:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 510:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_BUSY;
 511:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 512:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 513:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 514:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
 515:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 516:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
 517:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 518:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 519:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 520:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the transaction information */
 521:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_TX;
 522:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 523:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
 524:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 525:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
 526:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 527:HALLIB/Src/stm32f7xx_hal_spi.c ****   /*Init field not used in handle to zero */
 528:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)NULL;
 529:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
 530:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = 0U;
 531:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
 532:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxISR       = NULL;
 533:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 534:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Configure communication direction : 1Line */
 535:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 536:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 537:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_1LINE_TX(hspi);
 538:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 539:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 540:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 541:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Reset CRC Calculation */
 542:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 543:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 544:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
ARM GAS  /tmp/ccXuIaHP.s 			page 11


 545:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 546:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 547:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 548:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if the SPI is already enabled */
 549:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 550:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 551:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Enable SPI peripheral */
 552:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
 553:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 554:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 555:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Transmit data in 16 Bit mode */
 556:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 557:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 558:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Transmit data in 16 Bit mode */
 559:HALLIB/Src/stm32f7xx_hal_spi.c ****     while (hspi->TxXferCount > 0U)
 560:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 561:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Wait until TXE flag is set to send data */
 562:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 563:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 564:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->Instance->DR = *((uint16_t *)pData);
 565:HALLIB/Src/stm32f7xx_hal_spi.c ****         pData += sizeof(uint16_t);
 566:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->TxXferCount--;
 567:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 568:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
 569:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 570:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Timeout management */
 571:HALLIB/Src/stm32f7xx_hal_spi.c ****         if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Time
 572:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 573:HALLIB/Src/stm32f7xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
 574:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
 575:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 576:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 577:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 578:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 579:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Transmit data in 8 Bit mode */
 580:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
 581:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 582:HALLIB/Src/stm32f7xx_hal_spi.c ****     while (hspi->TxXferCount > 0U)
 583:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 584:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Wait until TXE flag is set to send data */
 585:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 586:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 587:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (hspi->TxXferCount > 1U)
 588:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 589:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* write on the data register in packing mode */
 590:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->Instance->DR = *((uint16_t *)pData);
 591:HALLIB/Src/stm32f7xx_hal_spi.c ****           pData += sizeof(uint16_t);
 592:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->TxXferCount -= 2U;
 593:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 594:HALLIB/Src/stm32f7xx_hal_spi.c ****         else
 595:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 596:HALLIB/Src/stm32f7xx_hal_spi.c ****           *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 597:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->TxXferCount--;
 598:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 599:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 600:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
 601:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
ARM GAS  /tmp/ccXuIaHP.s 			page 12


 602:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Timeout management */
 603:HALLIB/Src/stm32f7xx_hal_spi.c ****         if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Time
 604:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 605:HALLIB/Src/stm32f7xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
 606:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
 607:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 608:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 609:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 610:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 611:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 612:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable CRC Transmission */
 613:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 614:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 615:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 616:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 617:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 618:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 619:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check the end of the transaction */
 620:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 621:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 622:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 623:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 624:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 625:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Clear overrun flag in 2 Lines communication mode because received is not read */
 626:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 627:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 628:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_OVRFLAG(hspi);
 629:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 630:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 631:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 632:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 633:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
 634:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 635:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 636:HALLIB/Src/stm32f7xx_hal_spi.c **** error:
 637:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
 638:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Unlocked */
 639:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
 640:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
 641:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 642:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 643:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
 644:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Receive an amount of data in blocking mode.
 645:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 646:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
 647:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pData pointer to data buffer
 648:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Size amount of data to be received
 649:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Timeout Timeout duration
 650:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
 651:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 652:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t 
 653:HALLIB/Src/stm32f7xx_hal_spi.c **** {
 654:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 655:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO uint16_t tmpreg = 0U;
 656:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 657:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
 658:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
ARM GAS  /tmp/ccXuIaHP.s 			page 13


 659:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 660:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 661:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 662:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_RX;
 663:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
 664:HALLIB/Src/stm32f7xx_hal_spi.c ****     return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 665:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 666:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 667:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Locked */
 668:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_LOCK(hspi);
 669:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 670:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout management*/
 671:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
 672:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 673:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
 674:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 675:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_BUSY;
 676:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 677:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 678:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 679:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
 680:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 681:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
 682:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 683:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 684:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 685:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the transaction information */
 686:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_RX;
 687:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 688:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
 689:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 690:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
 691:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 692:HALLIB/Src/stm32f7xx_hal_spi.c ****   /*Init field not used in handle to zero */
 693:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)NULL;
 694:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
 695:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 696:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxISR       = NULL;
 697:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
 698:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 699:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 700:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Reset CRC Calculation */
 701:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 702:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 703:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
 704:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* this is done to handle the CRCNEXT before the latest data */
 705:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxXferCount--;
 706:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 707:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 708:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 709:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the Rx Fifo threshold */
 710:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 711:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 712:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 16bit */
 713:HALLIB/Src/stm32f7xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 714:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 715:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
ARM GAS  /tmp/ccXuIaHP.s 			page 14


 716:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 717:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 8bit */
 718:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 719:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 720:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 721:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Configure communication direction: 1Line */
 722:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 723:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 724:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_1LINE_RX(hspi);
 725:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 726:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 727:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if the SPI is already enabled */
 728:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 729:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 730:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Enable SPI peripheral */
 731:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
 732:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 733:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 734:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Receive data in 8 Bit mode */
 735:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 736:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 737:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Transfer loop */
 738:HALLIB/Src/stm32f7xx_hal_spi.c ****     while (hspi->RxXferCount > 0U)
 739:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 740:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Check the RXNE flag */
 741:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 742:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 743:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* read the received data */
 744:HALLIB/Src/stm32f7xx_hal_spi.c ****         (*pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 745:HALLIB/Src/stm32f7xx_hal_spi.c ****         pData += sizeof(uint8_t);
 746:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->RxXferCount--;
 747:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 748:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
 749:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 750:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Timeout management */
 751:HALLIB/Src/stm32f7xx_hal_spi.c ****         if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Time
 752:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 753:HALLIB/Src/stm32f7xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
 754:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
 755:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 756:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 757:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 758:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 759:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
 760:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 761:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Transfer loop */
 762:HALLIB/Src/stm32f7xx_hal_spi.c ****     while (hspi->RxXferCount > 0U)
 763:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 764:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Check the RXNE flag */
 765:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 766:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 767:HALLIB/Src/stm32f7xx_hal_spi.c ****         *((uint16_t *)pData) = hspi->Instance->DR;
 768:HALLIB/Src/stm32f7xx_hal_spi.c ****         pData += sizeof(uint16_t);
 769:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->RxXferCount--;
 770:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 771:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
 772:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
ARM GAS  /tmp/ccXuIaHP.s 			page 15


 773:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Timeout management */
 774:HALLIB/Src/stm32f7xx_hal_spi.c ****         if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Time
 775:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 776:HALLIB/Src/stm32f7xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
 777:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
 778:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 779:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 780:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 781:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 782:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 783:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 784:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Handle the CRC Transmission */
 785:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 786:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 787:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* freeze the CRC before the latest data */
 788:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 789:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 790:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Read the latest data */
 791:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 792:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 793:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* the latest data has not been received */
 794:HALLIB/Src/stm32f7xx_hal_spi.c ****       errorcode = HAL_TIMEOUT;
 795:HALLIB/Src/stm32f7xx_hal_spi.c ****       goto error;
 796:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 797:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 798:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Receive last data in 16 Bit mode */
 799:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 801:HALLIB/Src/stm32f7xx_hal_spi.c ****       *((uint16_t *)pData) = hspi->Instance->DR;
 802:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 803:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Receive last data in 8 Bit mode */
 804:HALLIB/Src/stm32f7xx_hal_spi.c ****     else
 805:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 806:HALLIB/Src/stm32f7xx_hal_spi.c ****       (*pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 807:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 808:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 809:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Wait the CRC data */
 810:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 811:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 812:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 813:HALLIB/Src/stm32f7xx_hal_spi.c ****       errorcode = HAL_TIMEOUT;
 814:HALLIB/Src/stm32f7xx_hal_spi.c ****       goto error;
 815:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 816:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 817:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Read CRC to Flush DR and RXNE flag */
 818:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 819:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 820:HALLIB/Src/stm32f7xx_hal_spi.c ****       tmpreg = hspi->Instance->DR;
 821:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* To avoid GCC warning */
 822:HALLIB/Src/stm32f7xx_hal_spi.c ****       UNUSED(tmpreg);
 823:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 824:HALLIB/Src/stm32f7xx_hal_spi.c ****     else
 825:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 826:HALLIB/Src/stm32f7xx_hal_spi.c ****       tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 827:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* To avoid GCC warning */
 828:HALLIB/Src/stm32f7xx_hal_spi.c ****       UNUSED(tmpreg);
 829:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 16


 830:HALLIB/Src/stm32f7xx_hal_spi.c ****       if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16B
 831:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 832:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout, tickstart) !
 833:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 834:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* Error on the CRC reception */
 835:HALLIB/Src/stm32f7xx_hal_spi.c ****           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 836:HALLIB/Src/stm32f7xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
 837:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
 838:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 839:HALLIB/Src/stm32f7xx_hal_spi.c ****         tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 840:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
 841:HALLIB/Src/stm32f7xx_hal_spi.c ****         UNUSED(tmpreg);
 842:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 843:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 844:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 845:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 846:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 847:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check the end of the transaction */
 848:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 849:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 850:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 851:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 852:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 853:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 854:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if CRC error occurred */
 855:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 856:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 857:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 858:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 859:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 860:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 861:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 862:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 863:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 864:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
 865:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 866:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 867:HALLIB/Src/stm32f7xx_hal_spi.c **** error :
 868:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
 869:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
 870:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
 871:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 872:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 873:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
 874:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Transmit and Receive an amount of data in blocking mode.
 875:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 876:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
 877:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pTxData pointer to transmission data buffer
 878:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pRxData pointer to reception data buffer
 879:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Size amount of data to be sent and received
 880:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Timeout Timeout duration
 881:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
 882:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
 883:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxDa
 884:HALLIB/Src/stm32f7xx_hal_spi.c ****                                           uint32_t Timeout)
 885:HALLIB/Src/stm32f7xx_hal_spi.c **** {
 886:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tmp = 0U, tmp1 = 0U;
ARM GAS  /tmp/ccXuIaHP.s 			page 17


 887:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 888:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO uint16_t tmpreg = 0U;
 889:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 890:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
 891:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Variable used to alternate Rx and Tx during transfer */
 892:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t txallowed = 1U;
 893:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 894:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 895:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check Direction parameter */
 896:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 897:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 898:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Locked */
 899:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_LOCK(hspi);
 900:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 901:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout management*/
 902:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
 903:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 904:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmp  = hspi->State;
 905:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmp1 = hspi->Init.Mode;
 906:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 907:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (!((tmp == HAL_SPI_STATE_READY) || \
 908:HALLIB/Src/stm32f7xx_hal_spi.c ****         ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL
 909:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 910:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_BUSY;
 911:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 912:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 913:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 914:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 915:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 916:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
 917:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 918:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 919:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 920:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
 921:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 922:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 923:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 924:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 925:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 926:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the transaction information */
 927:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 928:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 929:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
 930:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 931:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 932:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
 933:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 934:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 935:HALLIB/Src/stm32f7xx_hal_spi.c ****   /*Init field not used in handle to zero */
 936:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxISR       = NULL;
 937:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
 938:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 939:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 940:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Reset CRC Calculation */
 941:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 942:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 943:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
ARM GAS  /tmp/ccXuIaHP.s 			page 18


 944:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 945:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 946:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 947:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the Rx Fifo threshold */
 948:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 949:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 950:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 16bit */
 951:HALLIB/Src/stm32f7xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 952:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 953:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
 954:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 955:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 8bit */
 956:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 957:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 958:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 959:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if the SPI is already enabled */
 960:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 961:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 962:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Enable SPI peripheral */
 963:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
 964:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 965:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 966:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Transmit and Receive data in 16 Bit mode */
 967:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 968:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 969:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 970:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 971:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->Instance->DR = *((uint16_t *)pTxData);
 972:HALLIB/Src/stm32f7xx_hal_spi.c ****       pTxData += sizeof(uint16_t);
 973:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->TxXferCount--;
 974:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 975:HALLIB/Src/stm32f7xx_hal_spi.c ****     while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 976:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 977:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Check TXE flag */
 978:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 979:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 980:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->Instance->DR = *((uint16_t *)pTxData);
 981:HALLIB/Src/stm32f7xx_hal_spi.c ****         pTxData += sizeof(uint16_t);
 982:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->TxXferCount--;
 983:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Next Data is a reception (Rx). Tx not allowed */
 984:HALLIB/Src/stm32f7xx_hal_spi.c ****         txallowed = 0U;
 985:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 986:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 987:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Enable CRC Transmission */
 988:HALLIB/Src/stm32f7xx_hal_spi.c ****         if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 989:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 990:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
 991:HALLIB/Src/stm32f7xx_hal_spi.c ****           if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP)
 992:HALLIB/Src/stm32f7xx_hal_spi.c ****           {
 993:HALLIB/Src/stm32f7xx_hal_spi.c ****             SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 994:HALLIB/Src/stm32f7xx_hal_spi.c ****           }
 995:HALLIB/Src/stm32f7xx_hal_spi.c ****           SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 996:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 997:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 998:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 999:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1000:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Check RXNE flag */
ARM GAS  /tmp/ccXuIaHP.s 			page 19


1001:HALLIB/Src/stm32f7xx_hal_spi.c ****       if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
1002:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1003:HALLIB/Src/stm32f7xx_hal_spi.c ****         *((uint16_t *)pRxData) = hspi->Instance->DR;
1004:HALLIB/Src/stm32f7xx_hal_spi.c ****         pRxData += sizeof(uint16_t);
1005:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->RxXferCount--;
1006:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Next Data is a Transmission (Tx). Tx is allowed */
1007:HALLIB/Src/stm32f7xx_hal_spi.c ****         txallowed = 1U;
1008:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1009:HALLIB/Src/stm32f7xx_hal_spi.c ****       if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
1010:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1011:HALLIB/Src/stm32f7xx_hal_spi.c ****         errorcode = HAL_TIMEOUT;
1012:HALLIB/Src/stm32f7xx_hal_spi.c ****         goto error;
1013:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1014:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1015:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1016:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Transmit and Receive data in 8 Bit mode */
1017:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
1018:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1019:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
1020:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1021:HALLIB/Src/stm32f7xx_hal_spi.c ****       *((__IO uint8_t *)&hspi->Instance->DR) = (*pTxData);
1022:HALLIB/Src/stm32f7xx_hal_spi.c ****       pTxData += sizeof(uint8_t);
1023:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->TxXferCount--;
1024:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1025:HALLIB/Src/stm32f7xx_hal_spi.c ****     while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
1026:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1027:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* check TXE flag */
1028:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
1029:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1030:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (hspi->TxXferCount > 1U)
1031:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
1032:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->Instance->DR = *((uint16_t *)pTxData);
1033:HALLIB/Src/stm32f7xx_hal_spi.c ****           pTxData += sizeof(uint16_t);
1034:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->TxXferCount -= 2U;
1035:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
1036:HALLIB/Src/stm32f7xx_hal_spi.c ****         else
1037:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
1038:HALLIB/Src/stm32f7xx_hal_spi.c ****           *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
1039:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->TxXferCount--;
1040:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
1041:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Next Data is a reception (Rx). Tx not allowed */
1042:HALLIB/Src/stm32f7xx_hal_spi.c ****         txallowed = 0U;
1043:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1044:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1045:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Enable CRC Transmission */
1046:HALLIB/Src/stm32f7xx_hal_spi.c ****         if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
1047:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
1048:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
1049:HALLIB/Src/stm32f7xx_hal_spi.c ****           if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP)
1050:HALLIB/Src/stm32f7xx_hal_spi.c ****           {
1051:HALLIB/Src/stm32f7xx_hal_spi.c ****             SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
1052:HALLIB/Src/stm32f7xx_hal_spi.c ****           }
1053:HALLIB/Src/stm32f7xx_hal_spi.c ****           SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
1054:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
1055:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1056:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1057:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 20


1058:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Wait until RXNE flag is reset */
1059:HALLIB/Src/stm32f7xx_hal_spi.c ****       if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
1060:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1061:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (hspi->RxXferCount > 1U)
1062:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
1063:HALLIB/Src/stm32f7xx_hal_spi.c ****           *((uint16_t *)pRxData) = hspi->Instance->DR;
1064:HALLIB/Src/stm32f7xx_hal_spi.c ****           pRxData += sizeof(uint16_t);
1065:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->RxXferCount -= 2U;
1066:HALLIB/Src/stm32f7xx_hal_spi.c ****           if (hspi->RxXferCount <= 1U)
1067:HALLIB/Src/stm32f7xx_hal_spi.c ****           {
1068:HALLIB/Src/stm32f7xx_hal_spi.c ****             /* set fiforxthreshold before to switch on 8 bit data size */
1069:HALLIB/Src/stm32f7xx_hal_spi.c ****             SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
1070:HALLIB/Src/stm32f7xx_hal_spi.c ****           }
1071:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
1072:HALLIB/Src/stm32f7xx_hal_spi.c ****         else
1073:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
1074:HALLIB/Src/stm32f7xx_hal_spi.c ****           (*pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
1075:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->RxXferCount--;
1076:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
1077:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Next Data is a Transmission (Tx). Tx is allowed */
1078:HALLIB/Src/stm32f7xx_hal_spi.c ****         txallowed = 1U;
1079:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1080:HALLIB/Src/stm32f7xx_hal_spi.c ****       if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
1081:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1082:HALLIB/Src/stm32f7xx_hal_spi.c ****         errorcode = HAL_TIMEOUT;
1083:HALLIB/Src/stm32f7xx_hal_spi.c ****         goto error;
1084:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1085:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1086:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1087:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1088:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1089:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Read CRC from DR to close CRC calculation process */
1090:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1091:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1092:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Wait until TXE flag */
1093:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
1094:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1095:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Error on the CRC reception */
1096:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
1097:HALLIB/Src/stm32f7xx_hal_spi.c ****       errorcode = HAL_TIMEOUT;
1098:HALLIB/Src/stm32f7xx_hal_spi.c ****       goto error;
1099:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1100:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Read CRC */
1101:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
1102:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1103:HALLIB/Src/stm32f7xx_hal_spi.c ****       tmpreg = hspi->Instance->DR;
1104:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* To avoid GCC warning */
1105:HALLIB/Src/stm32f7xx_hal_spi.c ****       UNUSED(tmpreg);
1106:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1107:HALLIB/Src/stm32f7xx_hal_spi.c ****     else
1108:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1109:HALLIB/Src/stm32f7xx_hal_spi.c ****       tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
1110:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* To avoid GCC warning */
1111:HALLIB/Src/stm32f7xx_hal_spi.c ****       UNUSED(tmpreg);
1112:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1113:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
1114:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
ARM GAS  /tmp/ccXuIaHP.s 			page 21


1115:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
1116:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
1117:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* Error on the CRC reception */
1118:HALLIB/Src/stm32f7xx_hal_spi.c ****           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
1119:HALLIB/Src/stm32f7xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
1120:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
1121:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
1122:HALLIB/Src/stm32f7xx_hal_spi.c ****         tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
1123:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
1124:HALLIB/Src/stm32f7xx_hal_spi.c ****         UNUSED(tmpreg);
1125:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1126:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1127:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1128:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1129:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if CRC error occurred */
1130:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
1131:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1132:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
1133:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Clear CRC Flag */
1134:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
1135:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1136:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
1137:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1138:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1139:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1140:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check the end of the transaction */
1141:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
1142:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1143:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
1144:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1145:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1146:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
1147:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1148:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
1149:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1150:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1151:HALLIB/Src/stm32f7xx_hal_spi.c **** error :
1152:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
1153:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1154:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
1155:HALLIB/Src/stm32f7xx_hal_spi.c **** }
1156:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1157:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
1158:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Transmit an amount of data in non-blocking mode with Interrupt.
1159:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1160:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
1161:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pData pointer to data buffer
1162:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Size amount of data to be sent
1163:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
1164:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
1165:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
1166:HALLIB/Src/stm32f7xx_hal_spi.c **** {
1167:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
1168:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1169:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check Direction parameter */
1170:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
1171:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 22


1172:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Locked */
1173:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_LOCK(hspi);
1174:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1175:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
1176:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1177:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
1178:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1179:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1180:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1181:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
1182:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1183:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_BUSY;
1184:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1185:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1186:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1187:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the transaction information */
1188:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_TX;
1189:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1190:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
1191:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
1192:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
1193:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1194:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init field not used in handle to zero */
1195:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)NULL;
1196:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
1197:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = 0U;
1198:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxISR       = NULL;
1199:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1200:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the function for IT treatment */
1201:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
1202:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1203:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxISR = SPI_TxISR_16BIT;
1204:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1205:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
1206:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1207:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxISR = SPI_TxISR_8BIT;
1208:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1209:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1210:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Configure communication direction : 1Line */
1211:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
1212:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1213:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_1LINE_TX(hspi);
1214:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1215:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1216:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1217:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Reset CRC Calculation */
1218:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1219:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1220:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1221:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1222:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1223:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1224:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable TXE and ERR interrupt */
1225:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
1226:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1227:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1228:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if the SPI is already enabled */
ARM GAS  /tmp/ccXuIaHP.s 			page 23


1229:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1230:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1231:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Enable SPI peripheral */
1232:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1233:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1234:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1235:HALLIB/Src/stm32f7xx_hal_spi.c **** error :
1236:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1237:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
1238:HALLIB/Src/stm32f7xx_hal_spi.c **** }
1239:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1240:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
1241:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Receive an amount of data in non-blocking mode with Interrupt.
1242:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1243:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
1244:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pData pointer to data buffer
1245:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Size amount of data to be sent
1246:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
1247:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
1248:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
1249:HALLIB/Src/stm32f7xx_hal_spi.c **** {
1250:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
1251:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1252:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
1253:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1254:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_RX;
1255:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
1256:HALLIB/Src/stm32f7xx_hal_spi.c ****     return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
1257:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1258:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1259:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Locked */
1260:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_LOCK(hspi);
1261:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1262:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
1263:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1264:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_BUSY;
1265:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1266:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1267:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1268:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
1269:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1270:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
1271:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1272:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1273:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1274:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the transaction information */
1275:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_RX;
1276:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1277:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
1278:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
1279:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
1280:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1281:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init field not used in handle to zero */
1282:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)NULL;
1283:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
1284:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
1285:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
ARM GAS  /tmp/ccXuIaHP.s 			page 24


1286:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1287:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* check the data size to adapt Rx threshold and the set the function for IT treatment */
1288:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
1289:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1290:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 16 bit */
1291:HALLIB/Src/stm32f7xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
1292:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxISR = SPI_RxISR_16BIT;
1293:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1294:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
1295:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1296:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 8 bit */
1297:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
1298:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxISR = SPI_RxISR_8BIT;
1299:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1300:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1301:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Configure communication direction : 1Line */
1302:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
1303:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1304:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_1LINE_RX(hspi);
1305:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1306:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1307:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1308:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Reset CRC Calculation */
1309:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1310:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1311:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->CRCSize = 1U;
1312:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT
1313:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1314:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->CRCSize = 2U;
1315:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1316:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1317:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1318:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
1319:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1320:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->CRCSize = 0U;
1321:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1322:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1323:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1324:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable TXE and ERR interrupt */
1325:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
1326:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1327:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Note : The SPI must be enabled after unlocking current process
1328:HALLIB/Src/stm32f7xx_hal_spi.c ****             to avoid the risk of SPI interrupt handle execution before current
1329:HALLIB/Src/stm32f7xx_hal_spi.c ****             process unlock */
1330:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1331:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1332:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1333:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1334:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Enable SPI peripheral */
1335:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1336:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1337:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1338:HALLIB/Src/stm32f7xx_hal_spi.c **** error :
1339:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Unlocked */
1340:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1341:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
1342:HALLIB/Src/stm32f7xx_hal_spi.c **** }
ARM GAS  /tmp/ccXuIaHP.s 			page 25


1343:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1344:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
1345:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Transmit and Receive an amount of data in non-blocking mode with Interrupt.
1346:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1347:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
1348:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pTxData pointer to transmission data buffer
1349:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pRxData pointer to reception data buffer
1350:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Size amount of data to be sent and received
1351:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
1352:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
1353:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pR
1354:HALLIB/Src/stm32f7xx_hal_spi.c **** {
1355:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tmp = 0U, tmp1 = 0U;
1356:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
1357:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1358:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check Direction parameter */
1359:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
1360:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1361:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process locked */
1362:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_LOCK(hspi);
1363:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1364:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmp  = hspi->State;
1365:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmp1 = hspi->Init.Mode;
1366:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1367:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (!((tmp == HAL_SPI_STATE_READY) || \
1368:HALLIB/Src/stm32f7xx_hal_spi.c ****         ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL
1369:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1370:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_BUSY;
1371:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1372:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1373:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1374:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
1375:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1376:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
1377:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1378:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1379:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1380:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
1381:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_BUSY_RX)
1382:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1383:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
1384:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1385:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1386:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the transaction information */
1387:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1388:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
1389:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
1390:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
1391:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
1392:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
1393:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
1394:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1395:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the function for IT treatment */
1396:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
1397:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1398:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxISR     = SPI_2linesRxISR_16BIT;
1399:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxISR     = SPI_2linesTxISR_16BIT;
ARM GAS  /tmp/ccXuIaHP.s 			page 26


1400:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1401:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
1402:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1403:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxISR     = SPI_2linesRxISR_8BIT;
1404:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxISR     = SPI_2linesTxISR_8BIT;
1405:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1406:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1407:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1408:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Reset CRC Calculation */
1409:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1410:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1411:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->CRCSize = 1U;
1412:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT
1413:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1414:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->CRCSize = 2U;
1415:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1416:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1417:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1418:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
1419:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1420:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->CRCSize = 0U;
1421:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1422:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1423:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1424:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* check if packing mode is enabled and if there is more than 2 data to receive */
1425:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
1426:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1427:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 16 bit */
1428:HALLIB/Src/stm32f7xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
1429:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1430:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
1431:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1432:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 8 bit */
1433:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
1434:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1435:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1436:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable TXE, RXNE and ERR interrupt */
1437:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
1438:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1439:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1440:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1441:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1442:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Enable SPI peripheral */
1443:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1444:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1445:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1446:HALLIB/Src/stm32f7xx_hal_spi.c **** error :
1447:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Unlocked */
1448:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1449:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
1450:HALLIB/Src/stm32f7xx_hal_spi.c **** }
1451:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1452:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
1453:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Transmit an amount of data in non-blocking mode with DMA.
1454:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1455:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
1456:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pData pointer to data buffer
ARM GAS  /tmp/ccXuIaHP.s 			page 27


1457:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Size amount of data to be sent
1458:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
1459:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
1460:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
1461:HALLIB/Src/stm32f7xx_hal_spi.c **** {
1462:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
1463:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1464:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check Direction parameter */
1465:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
1466:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1467:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Locked */
1468:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_LOCK(hspi);
1469:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1470:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
1471:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1472:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_BUSY;
1473:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1474:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1475:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1476:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
1477:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1478:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
1479:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1480:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1481:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1482:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the transaction information */
1483:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_TX;
1484:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1485:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
1486:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
1487:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
1488:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1489:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init field not used in handle to zero */
1490:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)NULL;
1491:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
1492:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxISR       = NULL;
1493:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
1494:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = 0U;
1495:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1496:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Configure communication direction : 1Line */
1497:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
1498:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1499:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_1LINE_TX(hspi);
1500:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1501:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1502:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1503:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Reset CRC Calculation */
1504:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1505:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1506:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1507:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1508:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1509:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1510:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the SPI TxDMA Half transfer complete callback */
1511:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
1512:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1513:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the SPI TxDMA transfer complete callback */
ARM GAS  /tmp/ccXuIaHP.s 			page 28


1514:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
1515:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1516:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the DMA error callback */
1517:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferErrorCallback = SPI_DMAError;
1518:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1519:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the DMA AbortCpltCallback */
1520:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferAbortCallback = NULL;
1521:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1522:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
1523:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* packing mode is enabled only if the DMA setting is HALWORD */
1524:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDA
1525:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1526:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Check the even/odd of the data size + crc if enabled */
1527:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((hspi->TxXferCount & 0x1U) == 0U)
1528:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1529:HALLIB/Src/stm32f7xx_hal_spi.c ****       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
1530:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->TxXferCount = (hspi->TxXferCount >> 1U);
1531:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1532:HALLIB/Src/stm32f7xx_hal_spi.c ****     else
1533:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1534:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
1535:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
1536:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1537:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1538:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1539:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable the Tx DMA Stream/Channel */
1540:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->T
1541:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1542:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1543:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1544:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1545:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Enable SPI peripheral */
1546:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1547:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1548:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1549:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable the SPI Error Interrupt Bit */
1550:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
1551:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1552:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable Tx DMA Request */
1553:HALLIB/Src/stm32f7xx_hal_spi.c ****   SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
1554:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1555:HALLIB/Src/stm32f7xx_hal_spi.c **** error :
1556:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Unlocked */
1557:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1558:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
1559:HALLIB/Src/stm32f7xx_hal_spi.c **** }
1560:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1561:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
1562:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Receive an amount of data in non-blocking mode with DMA.
1563:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1564:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
1565:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pData pointer to data buffer
1566:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @note   When the CRC feature is enabled the pData Length must be Size + 1.
1567:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Size amount of data to be sent
1568:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
1569:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
1570:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
ARM GAS  /tmp/ccXuIaHP.s 			page 29


1571:HALLIB/Src/stm32f7xx_hal_spi.c **** {
1572:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
1573:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1574:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
1575:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1576:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_RX;
1577:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
1578:HALLIB/Src/stm32f7xx_hal_spi.c ****     return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
1579:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1580:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1581:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Locked */
1582:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_LOCK(hspi);
1583:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1584:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_READY)
1585:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1586:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_BUSY;
1587:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1588:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1589:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1590:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((pData == NULL) || (Size == 0U))
1591:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1592:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
1593:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1594:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1595:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1596:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the transaction information */
1597:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State       = HAL_SPI_STATE_BUSY_RX;
1598:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1599:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
1600:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
1601:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
1602:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1603:HALLIB/Src/stm32f7xx_hal_spi.c ****   /*Init field not used in handle to zero */
1604:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxISR       = NULL;
1605:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
1606:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
1607:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
1608:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1609:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Configure communication direction : 1Line */
1610:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
1611:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1612:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_1LINE_RX(hspi);
1613:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1614:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1615:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1616:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Reset CRC Calculation */
1617:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1618:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1619:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1620:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1621:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1622:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1623:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* packing mode management is enabled by the DMA settings */
1624:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDA
1625:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1626:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Restriction the DMA data received is not allowed in this mode */
1627:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
ARM GAS  /tmp/ccXuIaHP.s 			page 30


1628:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1629:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1630:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1631:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
1632:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
1633:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1634:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 16bit */
1635:HALLIB/Src/stm32f7xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
1636:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1637:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
1638:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1639:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 8bit */
1640:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
1641:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1642:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1643:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the SPI RxDMA Half transfer complete callback */
1644:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
1645:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1646:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the SPI Rx DMA transfer complete callback */
1647:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
1648:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1649:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the DMA error callback */
1650:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmarx->XferErrorCallback = SPI_DMAError;
1651:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1652:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the DMA AbortCpltCallback */
1653:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmarx->XferAbortCallback = NULL;
1654:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1655:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable the Rx DMA Stream/Channel  */
1656:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->R
1657:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1658:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1659:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1660:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1661:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Enable SPI peripheral */
1662:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1663:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1664:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1665:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable the SPI Error Interrupt Bit */
1666:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
1667:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1668:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable Rx DMA Request */
1669:HALLIB/Src/stm32f7xx_hal_spi.c ****   SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
1670:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1671:HALLIB/Src/stm32f7xx_hal_spi.c **** error:
1672:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Unlocked */
1673:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1674:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
1675:HALLIB/Src/stm32f7xx_hal_spi.c **** }
1676:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1677:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
1678:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Transmit and Receive an amount of data in non-blocking mode with DMA.
1679:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
1680:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
1681:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pTxData pointer to transmission data buffer
1682:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  pRxData pointer to reception data buffer
1683:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
1684:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Size amount of data to be sent
ARM GAS  /tmp/ccXuIaHP.s 			page 31


1685:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
1686:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
1687:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *p
1688:HALLIB/Src/stm32f7xx_hal_spi.c ****                                               uint16_t Size)
1689:HALLIB/Src/stm32f7xx_hal_spi.c **** {
1690:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tmp = 0U, tmp1 = 0U;
1691:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
1692:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1693:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check Direction parameter */
1694:HALLIB/Src/stm32f7xx_hal_spi.c ****   assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
1695:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1696:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process locked */
1697:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_LOCK(hspi);
1698:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1699:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmp  = hspi->State;
1700:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmp1 = hspi->Init.Mode;
1701:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (!((tmp == HAL_SPI_STATE_READY) ||
1702:HALLIB/Src/stm32f7xx_hal_spi.c ****         ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL
1703:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1704:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_BUSY;
1705:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1706:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1707:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1708:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
1709:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1710:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
1711:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
1712:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1713:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1714:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
1715:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->State != HAL_SPI_STATE_BUSY_RX)
1716:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1717:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
1718:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1719:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1720:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the transaction information */
1721:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1722:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
1723:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
1724:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
1725:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
1726:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
1727:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
1728:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1729:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init field not used in handle to zero */
1730:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxISR       = NULL;
1731:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
1732:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1733:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
1734:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Reset CRC Calculation */
1735:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
1736:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1737:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_RESET_CRC(hspi);
1738:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1739:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
1740:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1741:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Reset the threshold bit */
ARM GAS  /tmp/ccXuIaHP.s 			page 32


1742:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
1743:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1744:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* the packing mode management is enabled by the DMA settings according the spi data size */
1745:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
1746:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1747:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 16bit */
1748:HALLIB/Src/stm32f7xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
1749:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1750:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
1751:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1752:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* set fiforxthreshold according the reception data length: 8bit */
1753:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
1754:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1755:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
1756:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1757:HALLIB/Src/stm32f7xx_hal_spi.c ****       if ((hspi->TxXferSize & 0x1U) == 0x0U)
1758:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1759:HALLIB/Src/stm32f7xx_hal_spi.c ****         CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
1760:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->TxXferCount = hspi->TxXferCount >> 1U;
1761:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1762:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
1763:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1764:HALLIB/Src/stm32f7xx_hal_spi.c ****         SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
1765:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
1766:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1767:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1768:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1769:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
1770:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1771:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* set fiforxthreshold according the reception data length: 16bit */
1772:HALLIB/Src/stm32f7xx_hal_spi.c ****       CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
1773:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1774:HALLIB/Src/stm32f7xx_hal_spi.c ****       if ((hspi->RxXferCount & 0x1U) == 0x0U)
1775:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1776:HALLIB/Src/stm32f7xx_hal_spi.c ****         CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
1777:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->RxXferCount = hspi->RxXferCount >> 1U;
1778:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1779:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
1780:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1781:HALLIB/Src/stm32f7xx_hal_spi.c ****         SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
1782:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
1783:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1784:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1785:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1786:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1787:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback *
1788:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->State == HAL_SPI_STATE_BUSY_RX)
1789:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1790:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Set the SPI Rx DMA Half transfer complete callback */
1791:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
1792:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
1793:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1794:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
1795:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1796:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Set the SPI Tx/Rx DMA Half transfer complete callback */
1797:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
1798:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
ARM GAS  /tmp/ccXuIaHP.s 			page 33


1799:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1800:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1801:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the DMA error callback */
1802:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmarx->XferErrorCallback = SPI_DMAError;
1803:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1804:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the DMA AbortCpltCallback */
1805:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmarx->XferAbortCallback = NULL;
1806:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1807:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable the Rx DMA Stream/Channel  */
1808:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->R
1809:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1810:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable Rx DMA Request */
1811:HALLIB/Src/stm32f7xx_hal_spi.c ****   SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
1812:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1813:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
1814:HALLIB/Src/stm32f7xx_hal_spi.c ****   is performed in DMA reception complete callback  */
1815:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferHalfCpltCallback = NULL;
1816:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferCpltCallback     = NULL;
1817:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferErrorCallback    = NULL;
1818:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferAbortCallback    = NULL;
1819:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1820:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable the Tx DMA Stream/Channel  */
1821:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->T
1822:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1823:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if the SPI is already enabled */
1824:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
1825:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1826:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Enable SPI peripheral */
1827:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_ENABLE(hspi);
1828:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1829:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable the SPI Error Interrupt Bit */
1830:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
1831:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1832:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable Tx DMA Request */
1833:HALLIB/Src/stm32f7xx_hal_spi.c ****   SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
1834:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1835:HALLIB/Src/stm32f7xx_hal_spi.c **** error :
1836:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Unlocked */
1837:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
1838:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
1839:HALLIB/Src/stm32f7xx_hal_spi.c **** }
1840:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1841:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
1842:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Abort ongoing transfer (blocking mode).
1843:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi SPI handle.
1844:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @note   This procedure could be used for aborting any ongoing transfer (Tx and Rx),
1845:HALLIB/Src/stm32f7xx_hal_spi.c ****   *         started in Interrupt or DMA mode.
1846:HALLIB/Src/stm32f7xx_hal_spi.c ****   *         This procedure performs following operations :
1847:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           - Disable SPI Interrupts (depending of transfer direction)
1848:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1849:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1850:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           - Set handle State to READY
1851:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1852:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
1853:HALLIB/Src/stm32f7xx_hal_spi.c **** */
1854:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
1855:HALLIB/Src/stm32f7xx_hal_spi.c **** {
ARM GAS  /tmp/ccXuIaHP.s 			page 34


1856:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
1857:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
1858:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1859:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Initialized local variable  */
1860:HALLIB/Src/stm32f7xx_hal_spi.c ****   errorcode = HAL_OK;
1861:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1862:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout managment*/
1863:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
1864:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1865:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
1866:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
1867:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1868:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxISR = SPI_AbortTx_ISR;
1869:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1870:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1871:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
1872:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1873:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxISR = SPI_AbortRx_ISR;
1874:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1875:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1876:HALLIB/Src/stm32f7xx_hal_spi.c ****   while (hspi->State != HAL_SPI_STATE_ABORT)
1877:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1878:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((HAL_GetTick() - tickstart) >=  HAL_MAX_DELAY)
1879:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1880:HALLIB/Src/stm32f7xx_hal_spi.c ****       return HAL_TIMEOUT;
1881:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1882:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1883:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1884:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Clear ERRIE interrupts in case of DMA Mode */
1885:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
1886:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1887:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable the SPI DMA Tx or SPI DMA Rx request if enabled */
1888:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(hspi->Instance->CR2
1889:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1890:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
1891:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->hdmatx != NULL)
1892:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1893:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Set the SPI DMA Abort callback :
1894:HALLIB/Src/stm32f7xx_hal_spi.c ****       will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
1895:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->hdmatx->XferAbortCallback = NULL;
1896:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1897:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Abort DMA Tx Handle linked to SPI Peripheral */
1898:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
1899:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1900:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
1901:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1902:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1903:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Disable Tx DMA Request */
1904:HALLIB/Src/stm32f7xx_hal_spi.c ****       CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
1905:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1906:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
1907:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1908:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
1909:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1910:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1911:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Disable SPI Peripheral */
1912:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_DISABLE(hspi);
ARM GAS  /tmp/ccXuIaHP.s 			page 35


1913:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1914:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Empty the FRLVL fifo */
1915:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
1916:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1917:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
1918:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1919:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1920:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
1921:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->hdmarx != NULL)
1922:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
1923:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Set the SPI DMA Abort callback :
1924:HALLIB/Src/stm32f7xx_hal_spi.c ****       will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
1925:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->hdmarx->XferAbortCallback = NULL;
1926:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1927:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Abort DMA Rx Handle linked to SPI Peripheral */
1928:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
1929:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1930:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
1931:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1932:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1933:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Disable peripheral */
1934:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_DISABLE(hspi);
1935:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1936:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Control the BSY flag */
1937:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick
1938:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1939:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
1940:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1941:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1942:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Empty the FRLVL fifo */
1943:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
1944:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
1945:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
1946:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
1947:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1948:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Disable Rx DMA Request */
1949:HALLIB/Src/stm32f7xx_hal_spi.c ****       CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
1950:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
1951:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1952:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Reset Tx and Rx transfer counters */
1953:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = 0U;
1954:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
1955:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1956:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check error during Abort procedure */
1957:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
1958:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1959:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* return HAL_Error in case of error during Abort procedure */
1960:HALLIB/Src/stm32f7xx_hal_spi.c ****     errorcode = HAL_ERROR;
1961:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1962:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
1963:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
1964:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Reset errorCode */
1965:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_NONE;
1966:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
1967:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1968:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Clear the Error flags in the SR register */
1969:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_CLEAR_OVRFLAG(hspi);
ARM GAS  /tmp/ccXuIaHP.s 			page 36


1970:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_CLEAR_FREFLAG(hspi);
1971:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1972:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Restore hspi->state to ready */
1973:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
1974:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1975:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
1976:HALLIB/Src/stm32f7xx_hal_spi.c **** }
1977:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1978:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
1979:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Abort ongoing transfer (Interrupt mode).
1980:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi SPI handle.
1981:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @note   This procedure could be used for aborting any ongoing transfer (Tx and Rx),
1982:HALLIB/Src/stm32f7xx_hal_spi.c ****   *         started in Interrupt or DMA mode.
1983:HALLIB/Src/stm32f7xx_hal_spi.c ****   *         This procedure performs following operations :
1984:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           - Disable SPI Interrupts (depending of transfer direction)
1985:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1986:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1987:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           - Set handle State to READY
1988:HALLIB/Src/stm32f7xx_hal_spi.c ****   *           - At abort completion, call user abort complete callback
1989:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1990:HALLIB/Src/stm32f7xx_hal_spi.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1991:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
1992:HALLIB/Src/stm32f7xx_hal_spi.c **** */
1993:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
1994:HALLIB/Src/stm32f7xx_hal_spi.c **** {
1995:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
1996:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
1997:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t abortcplt ;
1998:HALLIB/Src/stm32f7xx_hal_spi.c **** 
1999:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Initialized local variable  */
2000:HALLIB/Src/stm32f7xx_hal_spi.c ****   errorcode = HAL_OK;
2001:HALLIB/Src/stm32f7xx_hal_spi.c ****   abortcplt = 1U;
2002:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2003:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout managment*/
2004:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
2005:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2006:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
2007:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
2008:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2009:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxISR = SPI_AbortTx_ISR;
2010:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2011:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2012:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
2013:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2014:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxISR = SPI_AbortRx_ISR;
2015:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2016:HALLIB/Src/stm32f7xx_hal_spi.c ****   
2017:HALLIB/Src/stm32f7xx_hal_spi.c ****   while (hspi->State != HAL_SPI_STATE_ABORT)
2018:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2019:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((HAL_GetTick() - tickstart) >=  HAL_MAX_DELAY)
2020:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2021:HALLIB/Src/stm32f7xx_hal_spi.c ****       return HAL_TIMEOUT;
2022:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2023:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2024:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2025:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Clear ERRIE interrupts in case of DMA Mode */
2026:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
ARM GAS  /tmp/ccXuIaHP.s 			page 37


2027:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2028:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks sho
2029:HALLIB/Src/stm32f7xx_hal_spi.c ****      before any call to DMA Abort functions */
2030:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* DMA Tx Handle is valid */
2031:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->hdmatx != NULL)
2032:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2033:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
2034:HALLIB/Src/stm32f7xx_hal_spi.c ****        Otherwise, set it to NULL */
2035:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
2036:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2037:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
2038:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2039:HALLIB/Src/stm32f7xx_hal_spi.c ****     else
2040:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2041:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->hdmatx->XferAbortCallback = NULL;
2042:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2043:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2044:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* DMA Rx Handle is valid */
2045:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->hdmarx != NULL)
2046:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2047:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
2048:HALLIB/Src/stm32f7xx_hal_spi.c ****        Otherwise, set it to NULL */
2049:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
2050:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2051:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
2052:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2053:HALLIB/Src/stm32f7xx_hal_spi.c ****     else
2054:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2055:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->hdmarx->XferAbortCallback = NULL;
2056:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2057:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2058:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2059:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
2060:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN)) && (HAL_IS_BIT_SET(hspi->Instance->CR2
2061:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2062:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Abort the SPI DMA Tx Stream/Channel */
2063:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->hdmatx != NULL)
2064:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2065:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Abort DMA Tx Handle linked to SPI Peripheral */
2066:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
2067:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2068:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->hdmatx->XferAbortCallback = NULL;
2069:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2070:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2071:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
2072:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2073:HALLIB/Src/stm32f7xx_hal_spi.c ****         abortcplt = 0U;
2074:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2075:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2076:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Abort the SPI DMA Rx Stream/Channel */
2077:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->hdmarx != NULL)
2078:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2079:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Abort DMA Rx Handle linked to SPI Peripheral */
2080:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
2081:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2082:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->hdmarx->XferAbortCallback = NULL;
2083:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
ARM GAS  /tmp/ccXuIaHP.s 			page 38


2084:HALLIB/Src/stm32f7xx_hal_spi.c ****         abortcplt = 1U;
2085:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2086:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
2087:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2088:HALLIB/Src/stm32f7xx_hal_spi.c ****         abortcplt = 0U;
2089:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2090:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2091:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2092:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2093:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
2094:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
2095:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2096:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Abort the SPI DMA Tx Stream/Channel */
2097:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->hdmatx != NULL)
2098:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2099:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Abort DMA Tx Handle linked to SPI Peripheral */
2100:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
2101:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2102:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->hdmatx->XferAbortCallback = NULL;
2103:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2104:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2105:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
2106:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2107:HALLIB/Src/stm32f7xx_hal_spi.c ****         abortcplt = 0U;
2108:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2109:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2110:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2111:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
2112:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
2113:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2114:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Abort the SPI DMA Rx Stream/Channel */
2115:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->hdmarx != NULL)
2116:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2117:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Abort DMA Rx Handle linked to SPI Peripheral */
2118:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
2119:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2120:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->hdmarx->XferAbortCallback = NULL;
2121:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2122:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2123:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
2124:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2125:HALLIB/Src/stm32f7xx_hal_spi.c ****         abortcplt = 0U;
2126:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2127:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2128:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2129:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2130:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (abortcplt == 1U)
2131:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2132:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Reset Tx and Rx transfer counters */
2133:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxXferCount = 0U;
2134:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxXferCount = 0U;
2135:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2136:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Check error during Abort procedure */
2137:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
2138:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2139:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* return HAL_Error in case of error during Abort procedure */
2140:HALLIB/Src/stm32f7xx_hal_spi.c ****       errorcode = HAL_ERROR;
ARM GAS  /tmp/ccXuIaHP.s 			page 39


2141:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2142:HALLIB/Src/stm32f7xx_hal_spi.c ****     else
2143:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2144:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Reset errorCode */
2145:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2146:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2147:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2148:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Clear the Error flags in the SR register */
2149:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_OVRFLAG(hspi);
2150:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_FREFLAG(hspi);
2151:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2152:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Restore hspi->State to Ready */
2153:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
2154:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2155:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2156:HALLIB/Src/stm32f7xx_hal_spi.c ****     HAL_SPI_AbortCpltCallback(hspi);
2157:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2158:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2159:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
2160:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2161:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2162:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2163:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Pause the DMA Transfer.
2164:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2165:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for the specified SPI module.
2166:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
2167:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2168:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
2169:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2170:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Locked */
2171:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_LOCK(hspi);
2172:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2173:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable the SPI DMA Tx & Rx requests */
2174:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2175:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2176:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Unlocked */
2177:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
2178:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2179:HALLIB/Src/stm32f7xx_hal_spi.c ****   return HAL_OK;
2180:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2181:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2182:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2183:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Resume the DMA Transfer.
2184:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2185:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for the specified SPI module.
2186:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
2187:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2188:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
2189:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2190:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Locked */
2191:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_LOCK(hspi);
2192:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2193:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable the SPI DMA Tx & Rx requests */
2194:HALLIB/Src/stm32f7xx_hal_spi.c ****   SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2195:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2196:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Unlocked */
2197:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
ARM GAS  /tmp/ccXuIaHP.s 			page 40


2198:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2199:HALLIB/Src/stm32f7xx_hal_spi.c ****   return HAL_OK;
2200:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2201:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2202:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2203:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief Stop the DMA Transfer.
2204:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2205:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for the specified SPI module.
2206:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
2207:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2208:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
2209:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2210:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* The Lock is not implemented on this API to allow the user application
2211:HALLIB/Src/stm32f7xx_hal_spi.c ****      to call the HAL SPI API under callbacks HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() o
2212:HALLIB/Src/stm32f7xx_hal_spi.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
2213:HALLIB/Src/stm32f7xx_hal_spi.c ****      and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() 
2214:HALLIB/Src/stm32f7xx_hal_spi.c ****      */
2215:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2216:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Abort the SPI DMA tx Stream/Channel  */
2217:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->hdmatx != NULL)
2218:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2219:HALLIB/Src/stm32f7xx_hal_spi.c ****     HAL_DMA_Abort(hspi->hdmatx);
2220:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2221:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Abort the SPI DMA rx Stream/Channel  */
2222:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->hdmarx != NULL)
2223:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2224:HALLIB/Src/stm32f7xx_hal_spi.c ****     HAL_DMA_Abort(hspi->hdmarx);
2225:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2226:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2227:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable the SPI DMA Tx & Rx requests */
2228:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2229:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
2230:HALLIB/Src/stm32f7xx_hal_spi.c ****   return HAL_OK;
2231:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2232:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2233:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2234:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Handle SPI interrupt request.
2235:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2236:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for the specified SPI module.
2237:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2238:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2239:HALLIB/Src/stm32f7xx_hal_spi.c **** void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
2240:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2241:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t itsource = hspi->Instance->CR2;
2242:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t itflag   = hspi->Instance->SR;
2243:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2244:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* SPI in mode Receiver ----------------------------------------------------*/
2245:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (((itflag & SPI_FLAG_OVR) == RESET) &&
2246:HALLIB/Src/stm32f7xx_hal_spi.c ****       ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
2247:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2248:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxISR(hspi);
2249:HALLIB/Src/stm32f7xx_hal_spi.c ****     return;
2250:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2251:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2252:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* SPI in mode Transmitter -------------------------------------------------*/
2253:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
2254:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
ARM GAS  /tmp/ccXuIaHP.s 			page 41


2255:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxISR(hspi);
2256:HALLIB/Src/stm32f7xx_hal_spi.c ****     return;
2257:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2258:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2259:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* SPI in Error Treatment --------------------------------------------------*/
2260:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ER
2261:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2262:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* SPI Overrun error interrupt occurred ----------------------------------*/
2263:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((itflag & SPI_FLAG_OVR) != RESET)
2264:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2265:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2266:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2267:HALLIB/Src/stm32f7xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2268:HALLIB/Src/stm32f7xx_hal_spi.c ****         __HAL_SPI_CLEAR_OVRFLAG(hspi);
2269:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2270:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
2271:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2272:HALLIB/Src/stm32f7xx_hal_spi.c ****         __HAL_SPI_CLEAR_OVRFLAG(hspi);
2273:HALLIB/Src/stm32f7xx_hal_spi.c ****         return;
2274:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2275:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2276:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2277:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* SPI Mode Fault error interrupt occurred -------------------------------*/
2278:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((itflag & SPI_FLAG_MODF) != RESET)
2279:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2280:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2281:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_CLEAR_MODFFLAG(hspi);
2282:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2283:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2284:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* SPI Frame error interrupt occurred ------------------------------------*/
2285:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((itflag & SPI_FLAG_FRE) != RESET)
2286:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2287:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2288:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_CLEAR_FREFLAG(hspi);
2289:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2290:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2291:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2292:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2293:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Disable all interrupts */
2294:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
2295:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2296:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->State = HAL_SPI_STATE_READY;
2297:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Disable the SPI DMA requests if enabled */
2298:HALLIB/Src/stm32f7xx_hal_spi.c ****       if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)
2299:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2300:HALLIB/Src/stm32f7xx_hal_spi.c ****         CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
2301:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2302:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Abort the SPI DMA Rx channel */
2303:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (hspi->hdmarx != NULL)
2304:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
2305:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* Set the SPI DMA Abort callback :
2306:HALLIB/Src/stm32f7xx_hal_spi.c ****           will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
2307:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2308:HALLIB/Src/stm32f7xx_hal_spi.c ****           HAL_DMA_Abort_IT(hspi->hdmarx);
2309:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
2310:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Abort the SPI DMA Tx channel */
2311:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (hspi->hdmatx != NULL)
ARM GAS  /tmp/ccXuIaHP.s 			page 42


2312:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
2313:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* Set the SPI DMA Abort callback :
2314:HALLIB/Src/stm32f7xx_hal_spi.c ****           will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
2315:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2316:HALLIB/Src/stm32f7xx_hal_spi.c ****           HAL_DMA_Abort_IT(hspi->hdmatx);
2317:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
2318:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2319:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
2320:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2321:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Call user error callback */
2322:HALLIB/Src/stm32f7xx_hal_spi.c ****         HAL_SPI_ErrorCallback(hspi);
2323:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2324:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2325:HALLIB/Src/stm32f7xx_hal_spi.c ****     return;
2326:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2327:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2328:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2329:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2330:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief Tx Transfer completed callback.
2331:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2332:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
2333:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2334:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2335:HALLIB/Src/stm32f7xx_hal_spi.c **** __weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
2336:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2337:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2338:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(hspi);
2339:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2340:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2341:HALLIB/Src/stm32f7xx_hal_spi.c ****             the HAL_SPI_TxCpltCallback should be implemented in the user file
2342:HALLIB/Src/stm32f7xx_hal_spi.c ****    */
2343:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2344:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2345:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2346:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief Rx Transfer completed callback.
2347:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2348:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
2349:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2350:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2351:HALLIB/Src/stm32f7xx_hal_spi.c **** __weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
2352:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2353:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2354:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(hspi);
2355:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2356:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2357:HALLIB/Src/stm32f7xx_hal_spi.c ****             the HAL_SPI_RxCpltCallback should be implemented in the user file
2358:HALLIB/Src/stm32f7xx_hal_spi.c ****    */
2359:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2360:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2361:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2362:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief Tx and Rx Transfer completed callback.
2363:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2364:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
2365:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2366:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2367:HALLIB/Src/stm32f7xx_hal_spi.c **** __weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
2368:HALLIB/Src/stm32f7xx_hal_spi.c **** {
ARM GAS  /tmp/ccXuIaHP.s 			page 43


2369:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2370:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(hspi);
2371:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2372:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2373:HALLIB/Src/stm32f7xx_hal_spi.c ****             the HAL_SPI_TxRxCpltCallback should be implemented in the user file
2374:HALLIB/Src/stm32f7xx_hal_spi.c ****    */
2375:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2376:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2377:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2378:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief Tx Half Transfer completed callback.
2379:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2380:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
2381:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2382:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2383:HALLIB/Src/stm32f7xx_hal_spi.c **** __weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
2384:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2385:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2386:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(hspi);
2387:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2388:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2389:HALLIB/Src/stm32f7xx_hal_spi.c ****             the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
2390:HALLIB/Src/stm32f7xx_hal_spi.c ****    */
2391:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2392:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2393:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2394:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief Rx Half Transfer completed callback.
2395:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2396:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
2397:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2398:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2399:HALLIB/Src/stm32f7xx_hal_spi.c **** __weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
2400:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2401:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2402:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(hspi);
2403:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2404:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2405:HALLIB/Src/stm32f7xx_hal_spi.c ****             the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
2406:HALLIB/Src/stm32f7xx_hal_spi.c ****    */
2407:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2408:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2409:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2410:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief Tx and Rx Half Transfer callback.
2411:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2412:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
2413:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2414:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2415:HALLIB/Src/stm32f7xx_hal_spi.c **** __weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
2416:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2417:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2418:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(hspi);
2419:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2420:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2421:HALLIB/Src/stm32f7xx_hal_spi.c ****             the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
2422:HALLIB/Src/stm32f7xx_hal_spi.c ****    */
2423:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2424:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2425:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
ARM GAS  /tmp/ccXuIaHP.s 			page 44


2426:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief SPI error callback.
2427:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2428:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
2429:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2430:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2431:HALLIB/Src/stm32f7xx_hal_spi.c **** __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
2432:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2433:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2434:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(hspi);
2435:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2436:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2437:HALLIB/Src/stm32f7xx_hal_spi.c ****             the HAL_SPI_ErrorCallback should be implemented in the user file
2438:HALLIB/Src/stm32f7xx_hal_spi.c ****    */
2439:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
2440:HALLIB/Src/stm32f7xx_hal_spi.c ****             and user can use HAL_SPI_GetError() API to check the latest error occurred
2441:HALLIB/Src/stm32f7xx_hal_spi.c ****    */
2442:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2443:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2444:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2445:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  SPI Abort Complete callback.
2446:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi SPI handle.
2447:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2448:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2449:HALLIB/Src/stm32f7xx_hal_spi.c **** __weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
2450:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2451:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
2452:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(hspi);
2453:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2454:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2455:HALLIB/Src/stm32f7xx_hal_spi.c ****             the HAL_SPI_AbortCpltCallback can be implemented in the user file.
2456:HALLIB/Src/stm32f7xx_hal_spi.c ****    */
2457:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2458:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2459:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2460:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @}
2461:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2462:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2463:HALLIB/Src/stm32f7xx_hal_spi.c **** /** @defgroup SPI_Exported_Functions_Group3 Peripheral State and Errors functions
2464:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief   SPI control functions
2465:HALLIB/Src/stm32f7xx_hal_spi.c ****   *
2466:HALLIB/Src/stm32f7xx_hal_spi.c **** @verbatim
2467:HALLIB/Src/stm32f7xx_hal_spi.c ****  ===============================================================================
2468:HALLIB/Src/stm32f7xx_hal_spi.c ****                       ##### Peripheral State and Errors functions #####
2469:HALLIB/Src/stm32f7xx_hal_spi.c ****  ===============================================================================
2470:HALLIB/Src/stm32f7xx_hal_spi.c ****     [..]
2471:HALLIB/Src/stm32f7xx_hal_spi.c ****     This subsection provides a set of functions allowing to control the SPI.
2472:HALLIB/Src/stm32f7xx_hal_spi.c ****      (+) HAL_SPI_GetState() API can be helpful to check in run-time the state of the SPI peripheral
2473:HALLIB/Src/stm32f7xx_hal_spi.c ****      (+) HAL_SPI_GetError() check in run-time Errors occurring during communication
2474:HALLIB/Src/stm32f7xx_hal_spi.c **** @endverbatim
2475:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @{
2476:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2477:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2478:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2479:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Return the SPI handle state.
2480:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2481:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
2482:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval SPI state
ARM GAS  /tmp/ccXuIaHP.s 			page 45


2483:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2484:HALLIB/Src/stm32f7xx_hal_spi.c **** HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
2485:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2486:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Return SPI handle state */
2487:HALLIB/Src/stm32f7xx_hal_spi.c ****   return hspi->State;
2488:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2489:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2490:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2491:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Return the SPI error code.
2492:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2493:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
2494:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval SPI error code in bitmap format
2495:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2496:HALLIB/Src/stm32f7xx_hal_spi.c **** uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
2497:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2498:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Return SPI ErrorCode */
2499:HALLIB/Src/stm32f7xx_hal_spi.c ****   return hspi->ErrorCode;
2500:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2501:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2502:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2503:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @}
2504:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2505:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2506:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2507:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @}
2508:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2509:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2510:HALLIB/Src/stm32f7xx_hal_spi.c **** /** @addtogroup SPI_Private_Functions
2511:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief   Private functions
2512:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @{
2513:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2514:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2515:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2516:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief DMA SPI transmit process complete callback.
2517:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2518:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2519:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2520:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2521:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2522:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2523:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2524:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
2525:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2526:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout managment*/
2527:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
2528:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2529:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* DMA Normal Mode */
2530:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
2531:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2532:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable ERR interrupt */
2533:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2534:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2535:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable Tx DMA Request */
2536:HALLIB/Src/stm32f7xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
2537:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2538:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Check the end of the transaction */
2539:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
ARM GAS  /tmp/ccXuIaHP.s 			page 46


2540:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2541:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2542:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2543:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2544:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Clear overrun flag in 2 Lines communication mode because received data is not read */
2545:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2546:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2547:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_CLEAR_OVRFLAG(hspi);
2548:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2549:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2550:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxXferCount = 0U;
2551:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
2552:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2553:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2554:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2555:HALLIB/Src/stm32f7xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
2556:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
2557:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2558:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2559:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_TxCpltCallback(hspi);
2560:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2561:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2562:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2563:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief DMA SPI receive process complete callback.
2564:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2565:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2566:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2567:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2568:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2569:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2570:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2571:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
2572:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2573:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO uint16_t tmpreg = 0U;
2574:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
2575:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2576:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout management*/
2577:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
2578:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2579:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* DMA Normal Mode */
2580:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
2581:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2582:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable ERR interrupt */
2583:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2584:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2585:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2586:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* CRC handling */
2587:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
2588:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2589:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Wait until RXNE flag */
2590:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, SPI_DEFAULT_TIMEOUT, ti
2591:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2592:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Error on the CRC reception */
2593:HALLIB/Src/stm32f7xx_hal_spi.c ****         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
2594:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2595:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Read CRC */
2596:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
ARM GAS  /tmp/ccXuIaHP.s 			page 47


2597:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2598:HALLIB/Src/stm32f7xx_hal_spi.c ****         tmpreg = hspi->Instance->DR;
2599:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
2600:HALLIB/Src/stm32f7xx_hal_spi.c ****         UNUSED(tmpreg);
2601:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2602:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
2603:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2604:HALLIB/Src/stm32f7xx_hal_spi.c ****         tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
2605:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
2606:HALLIB/Src/stm32f7xx_hal_spi.c ****         UNUSED(tmpreg);
2607:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2608:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
2609:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
2610:HALLIB/Src/stm32f7xx_hal_spi.c ****           if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, SPI_DEFAULT_TIMEOUT
2611:HALLIB/Src/stm32f7xx_hal_spi.c ****           {
2612:HALLIB/Src/stm32f7xx_hal_spi.c ****             /* Error on the CRC reception */
2613:HALLIB/Src/stm32f7xx_hal_spi.c ****             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
2614:HALLIB/Src/stm32f7xx_hal_spi.c ****           }
2615:HALLIB/Src/stm32f7xx_hal_spi.c ****           tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
2616:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* To avoid GCC warning */
2617:HALLIB/Src/stm32f7xx_hal_spi.c ****           UNUSED(tmpreg);
2618:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
2619:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2620:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2621:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
2622:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2623:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) *
2624:HALLIB/Src/stm32f7xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2625:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2626:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Check the end of the transaction */
2627:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2628:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2629:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
2630:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2631:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2632:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxXferCount = 0U;
2633:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
2634:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2635:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2636:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Check if CRC error occurred */
2637:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
2638:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2639:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
2640:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
2641:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2642:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
2643:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2644:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2645:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2646:HALLIB/Src/stm32f7xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
2647:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
2648:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2649:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2650:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_RxCpltCallback(hspi);
2651:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2652:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2653:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
ARM GAS  /tmp/ccXuIaHP.s 			page 48


2654:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  DMA SPI transmit receive process complete callback.
2655:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2656:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2657:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2658:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2659:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
2660:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2661:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2662:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
2663:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2664:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO int16_t tmpreg = 0U;
2665:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
2666:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout management*/
2667:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
2668:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2669:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* DMA Normal Mode */
2670:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
2671:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2672:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable ERR interrupt */
2673:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2674:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2675:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2676:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* CRC handling */
2677:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
2678:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2679:HALLIB/Src/stm32f7xx_hal_spi.c ****       if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_8BI
2680:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2681:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_QUARTER_FULL, SPI_DEFAULT
2682:HALLIB/Src/stm32f7xx_hal_spi.c ****                                           tickstart) != HAL_OK)
2683:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
2684:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* Error on the CRC reception */
2685:HALLIB/Src/stm32f7xx_hal_spi.c ****           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
2686:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
2687:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Read CRC to Flush DR and RXNE flag */
2688:HALLIB/Src/stm32f7xx_hal_spi.c ****         tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
2689:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
2690:HALLIB/Src/stm32f7xx_hal_spi.c ****         UNUSED(tmpreg);
2691:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2692:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
2693:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
2694:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_HALF_FULL, SPI_DEFAULT_TI
2695:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
2696:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* Error on the CRC reception */
2697:HALLIB/Src/stm32f7xx_hal_spi.c ****           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
2698:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
2699:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Read CRC to Flush DR and RXNE flag */
2700:HALLIB/Src/stm32f7xx_hal_spi.c ****         tmpreg = hspi->Instance->DR;
2701:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
2702:HALLIB/Src/stm32f7xx_hal_spi.c ****         UNUSED(tmpreg);
2703:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
2704:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2705:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
2706:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2707:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Check the end of the transaction */
2708:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2709:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2710:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
ARM GAS  /tmp/ccXuIaHP.s 			page 49


2711:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2712:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2713:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable Rx/Tx DMA Request */
2714:HALLIB/Src/stm32f7xx_hal_spi.c ****     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2715:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2716:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxXferCount = 0U;
2717:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxXferCount = 0U;
2718:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
2719:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2720:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2721:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Check if CRC error occurred */
2722:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
2723:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2724:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
2725:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
2726:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2727:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
2728:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2729:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2730:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2731:HALLIB/Src/stm32f7xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
2732:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
2733:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2734:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2735:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_TxRxCpltCallback(hspi);
2736:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2737:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2738:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2739:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  DMA SPI half transmit process complete callback.
2740:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2741:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2742:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2743:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2744:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
2745:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2746:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2747:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2748:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_TxHalfCpltCallback(hspi);
2749:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2750:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2751:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2752:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  DMA SPI half receive process complete callback
2753:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2754:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2755:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2756:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2757:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
2758:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2759:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2760:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2761:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_RxHalfCpltCallback(hspi);
2762:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2763:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2764:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2765:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  DMA SPI half transmit receive process complete callback.
2766:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2767:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
ARM GAS  /tmp/ccXuIaHP.s 			page 50


2768:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2769:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2770:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
2771:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2772:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2773:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2774:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_TxRxHalfCpltCallback(hspi);
2775:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2776:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2777:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2778:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  DMA SPI communication error callback.
2779:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2780:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for the specified DMA module.
2781:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2782:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2783:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAError(DMA_HandleTypeDef *hdma)
2784:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2785:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2786:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2787:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Stop the disable DMA transfer on SPI side */
2788:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2789:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2790:HALLIB/Src/stm32f7xx_hal_spi.c ****   SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2791:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
2792:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_ErrorCallback(hspi);
2793:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2794:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2795:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2796:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  DMA SPI communication abort callback, when initiated by HAL services on Error
2797:HALLIB/Src/stm32f7xx_hal_spi.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2798:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hdma DMA handle.
2799:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2800:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2801:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2802:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2803:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2804:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = 0U;
2805:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
2806:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2807:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_ErrorCallback(hspi);
2808:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2809:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2810:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2811:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  DMA SPI Tx communication abort callback, when initiated by user
2812:HALLIB/Src/stm32f7xx_hal_spi.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2813:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2814:HALLIB/Src/stm32f7xx_hal_spi.c ****   *         Abort still ongoing for Rx DMA Handle.
2815:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hdma DMA handle.
2816:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2817:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2818:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2819:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2820:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2821:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2822:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferAbortCallback = NULL;
2823:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2824:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable Tx DMA Request */
ARM GAS  /tmp/ccXuIaHP.s 			page 51


2825:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
2826:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2827:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
2828:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2829:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2830:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2831:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2832:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable SPI Peripheral */
2833:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_DISABLE(hspi);
2834:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2835:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Empty the FRLVL fifo */
2836:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL
2837:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2838:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2839:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2840:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2841:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if an Abort process is still ongoing */
2842:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->hdmarx != NULL)
2843:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2844:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->hdmarx->XferAbortCallback != NULL)
2845:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2846:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
2847:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2848:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2849:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2850:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete 
2851:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = 0U;
2852:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
2853:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2854:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check no error during Abort procedure */
2855:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
2856:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2857:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Reset errorCode */
2858:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2859:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2860:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2861:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Clear the Error flags in the SR register */
2862:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_CLEAR_OVRFLAG(hspi);
2863:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_CLEAR_FREFLAG(hspi);
2864:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2865:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Restore hspi->State to Ready */
2866:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State  = HAL_SPI_STATE_READY;
2867:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2868:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Call user Abort complete callback */
2869:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_AbortCpltCallback(hspi);
2870:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2871:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2872:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2873:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  DMA SPI Rx communication abort callback, when initiated by user
2874:HALLIB/Src/stm32f7xx_hal_spi.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2875:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2876:HALLIB/Src/stm32f7xx_hal_spi.c ****   *         Abort still ongoing for Tx DMA Handle.
2877:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hdma DMA handle.
2878:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2879:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2880:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
2881:HALLIB/Src/stm32f7xx_hal_spi.c **** {
ARM GAS  /tmp/ccXuIaHP.s 			page 52


2882:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2883:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2884:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable SPI Peripheral */
2885:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_DISABLE(hspi);
2886:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2887:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmarx->XferAbortCallback = NULL;
2888:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2889:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable Rx DMA Request */
2890:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
2891:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2892:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Control the BSY flag */
2893:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) 
2894:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2895:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2896:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2897:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2898:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Empty the FRLVL fifo */
2899:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL
2900:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2901:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2902:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2903:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2904:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if an Abort process is still ongoing */
2905:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->hdmatx != NULL)
2906:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2907:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->hdmatx->XferAbortCallback != NULL)
2908:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2909:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
2910:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2911:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2912:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2913:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete 
2914:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = 0U;
2915:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
2916:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2917:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check no error during Abort procedure */
2918:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
2919:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2920:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Reset errorCode */
2921:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2922:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2923:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2924:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Clear the Error flags in the SR register */
2925:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_CLEAR_OVRFLAG(hspi);
2926:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_CLEAR_FREFLAG(hspi);
2927:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2928:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Restore hspi->State to Ready */
2929:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State  = HAL_SPI_STATE_READY;
2930:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2931:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Call user Abort complete callback */
2932:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_AbortCpltCallback(hspi);
2933:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2934:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2935:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2936:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Rx 8-bit handler for Transmit and Receive in Interrupt mode.
2937:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2938:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
ARM GAS  /tmp/ccXuIaHP.s 			page 53


2939:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2940:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2941:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
2942:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2943:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Receive data in packing mode */
2944:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->RxXferCount > 1U)
2945:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2946:HALLIB/Src/stm32f7xx_hal_spi.c ****     *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
2947:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->pRxBuffPtr += sizeof(uint16_t);
2948:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxXferCount -= 2U;
2949:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->RxXferCount == 1U)
2950:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2951:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* set fiforxthreshold according the reception data length: 8bit */
2952:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
2953:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2954:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2955:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Receive data in 8 Bit mode */
2956:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
2957:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2958:HALLIB/Src/stm32f7xx_hal_spi.c ****     *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
2959:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxXferCount--;
2960:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2961:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2962:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* check end of the reception */
2963:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->RxXferCount == 0U)
2964:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
2965:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2966:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
2967:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2968:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
2969:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
2970:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
2971:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2972:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
2973:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2974:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable RXNE  and ERR interrupt */
2975:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
2976:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2977:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->TxXferCount == 0U)
2978:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
2979:HALLIB/Src/stm32f7xx_hal_spi.c ****       SPI_CloseRxTx_ISR(hspi);
2980:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
2981:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
2982:HALLIB/Src/stm32f7xx_hal_spi.c **** }
2983:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2984:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
2985:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
2986:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Rx 8-bit handler for Transmit and Receive in Interrupt mode.
2987:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
2988:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
2989:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
2990:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
2991:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
2992:HALLIB/Src/stm32f7xx_hal_spi.c **** {
2993:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO uint8_t tmpreg = 0U;
2994:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2995:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Read data register to flush CRC */
ARM GAS  /tmp/ccXuIaHP.s 			page 54


2996:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
2997:HALLIB/Src/stm32f7xx_hal_spi.c **** 
2998:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* To avoid GCC warning */
2999:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(tmpreg);
3000:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3001:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->CRCSize--;
3002:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3003:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* check end of the reception */
3004:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->CRCSize == 0U)
3005:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3006:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable RXNE and ERR interrupt */
3007:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
3008:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3009:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->TxXferCount == 0U)
3010:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3011:HALLIB/Src/stm32f7xx_hal_spi.c ****       SPI_CloseRxTx_ISR(hspi);
3012:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3013:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3014:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3015:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3016:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3017:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3018:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Tx 8-bit handler for Transmit and Receive in Interrupt mode.
3019:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3020:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3021:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3022:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3023:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
3024:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3025:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Transmit data in packing Bit mode */
3026:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->TxXferCount >= 2U)
3027:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3028:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
3029:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->pTxBuffPtr += sizeof(uint16_t);
3030:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxXferCount -= 2U;
3031:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3032:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Transmit data in 8 Bit mode */
3033:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
3034:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3035:HALLIB/Src/stm32f7xx_hal_spi.c ****     *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
3036:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxXferCount--;
3037:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3038:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3039:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* check the end of the transmission */
3040:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->TxXferCount == 0U)
3041:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3042:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3043:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3044:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3045:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Set CRC Next Bit to send CRC */
3046:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3047:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Disable TXE interrupt */
3048:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
3049:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
3050:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3051:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3052:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 55


3053:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable TXE interrupt */
3054:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
3055:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3056:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->RxXferCount == 0U)
3057:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3058:HALLIB/Src/stm32f7xx_hal_spi.c ****       SPI_CloseRxTx_ISR(hspi);
3059:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3060:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3061:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3062:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3063:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3064:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Rx 16-bit handler for Transmit and Receive in Interrupt mode.
3065:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3066:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3067:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3068:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3069:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
3070:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3071:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Receive data in 16 Bit mode */
3072:HALLIB/Src/stm32f7xx_hal_spi.c ****   *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
3073:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr += sizeof(uint16_t);
3074:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount--;
3075:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3076:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->RxXferCount == 0U)
3077:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3078:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3079:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3080:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3081:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
3082:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
3083:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3084:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3085:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3086:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable RXNE interrupt */
3087:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
3088:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3089:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->TxXferCount == 0U)
3090:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3091:HALLIB/Src/stm32f7xx_hal_spi.c ****       SPI_CloseRxTx_ISR(hspi);
3092:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3093:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3094:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3095:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3096:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3097:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3098:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Manage the CRC 16-bit receive for Transmit and Receive in Interrupt mode.
3099:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3100:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3101:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3102:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3103:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
3104:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3105:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Receive data in 16 Bit mode */
3106:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO uint16_t tmpreg = 0U;
3107:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3108:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Read data register to flush CRC */
3109:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmpreg = hspi->Instance->DR;
ARM GAS  /tmp/ccXuIaHP.s 			page 56


3110:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3111:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* To avoid GCC warning */
3112:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(tmpreg);
3113:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3114:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable RXNE interrupt */
3115:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
3116:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3117:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_CloseRxTx_ISR(hspi);
3118:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3119:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3120:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3121:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3122:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Tx 16-bit handler for Transmit and Receive in Interrupt mode.
3123:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3124:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3125:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3126:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3127:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
3128:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3129:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Transmit data in 16 Bit mode */
3130:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
3131:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr += sizeof(uint16_t);
3132:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount--;
3133:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3134:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable CRC Transmission */
3135:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->TxXferCount == 0U)
3136:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3137:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3138:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3139:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3140:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Set CRC Next Bit to send CRC */
3141:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3142:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Disable TXE interrupt */
3143:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
3144:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
3145:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3146:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3147:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3148:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable TXE interrupt */
3149:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
3150:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3151:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->RxXferCount == 0U)
3152:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3153:HALLIB/Src/stm32f7xx_hal_spi.c ****       SPI_CloseRxTx_ISR(hspi);
3154:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3155:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3156:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3157:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3158:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3159:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3160:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Manage the CRC 8-bit receive in Interrupt context.
3161:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3162:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3163:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3164:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3165:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
3166:HALLIB/Src/stm32f7xx_hal_spi.c **** {
ARM GAS  /tmp/ccXuIaHP.s 			page 57


3167:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO uint8_t tmpreg = 0U;
3168:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3169:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Read data register to flush CRC */
3170:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
3171:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3172:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* To avoid GCC warning */
3173:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(tmpreg);
3174:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3175:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->CRCSize--;
3176:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3177:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->CRCSize == 0U)
3178:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3179:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_CloseRx_ISR(hspi);
3180:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3181:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3182:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3183:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3184:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3185:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Manage the receive 8-bit in Interrupt context.
3186:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3187:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3188:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3189:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3190:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
3191:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3192:HALLIB/Src/stm32f7xx_hal_spi.c ****   *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
3193:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount--;
3194:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3195:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3196:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable CRC Transmission */
3197:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
3198:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3199:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3200:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3201:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3202:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3203:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->RxXferCount == 0U)
3204:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3205:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3206:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3207:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3208:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->RxISR =  SPI_RxISR_8BITCRC;
3209:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
3210:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3211:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3212:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_CloseRx_ISR(hspi);
3213:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3214:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3215:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3216:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3217:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3218:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Manage the CRC 16-bit receive in Interrupt context.
3219:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3220:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3221:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3222:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3223:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
ARM GAS  /tmp/ccXuIaHP.s 			page 58


3224:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3225:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO uint16_t tmpreg = 0U;
3226:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3227:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Read data register to flush CRC */
3228:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmpreg = hspi->Instance->DR;
3229:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3230:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* To avoid GCC warning */
3231:HALLIB/Src/stm32f7xx_hal_spi.c ****   UNUSED(tmpreg);
3232:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3233:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable RXNE and ERR interrupt */
3234:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
3235:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3236:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_CloseRx_ISR(hspi);
3237:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3238:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3239:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3240:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3241:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Manage the 16-bit receive in Interrupt context.
3242:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3243:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3244:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3245:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3246:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
3247:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3248:HALLIB/Src/stm32f7xx_hal_spi.c ****   *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
3249:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr += sizeof(uint16_t);
3250:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount--;
3251:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3252:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3253:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Enable CRC Transmission */
3254:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
3255:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3256:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3257:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3258:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3259:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3260:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->RxXferCount == 0U)
3261:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3262:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3263:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3264:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3265:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->RxISR = SPI_RxISR_16BITCRC;
3266:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
3267:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3268:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3269:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_CloseRx_ISR(hspi);
3270:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3271:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3272:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3273:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3274:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Handle the data 8-bit transmit in Interrupt mode.
3275:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3276:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3277:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3278:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3279:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
3280:HALLIB/Src/stm32f7xx_hal_spi.c **** {
ARM GAS  /tmp/ccXuIaHP.s 			page 59


3281:HALLIB/Src/stm32f7xx_hal_spi.c ****   *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
3282:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount--;
3283:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3284:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->TxXferCount == 0U)
3285:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3286:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3287:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3288:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3289:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Enable CRC Transmission */
3290:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3291:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3292:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3293:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_CloseTx_ISR(hspi);
3294:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3295:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3296:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3297:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3298:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Handle the data 16-bit transmit in Interrupt mode.
3299:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3300:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3301:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3302:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3303:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
3304:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3305:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Transmit data in 16 Bit mode */
3306:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
3307:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr += sizeof(uint16_t);
3308:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount--;
3309:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3310:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->TxXferCount == 0U)
3311:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3312:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3313:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3314:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3315:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Enable CRC Transmission */
3316:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
3317:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3318:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3319:HALLIB/Src/stm32f7xx_hal_spi.c ****     SPI_CloseTx_ISR(hspi);
3320:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3321:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3322:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3323:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3324:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief Handle SPI Communication Timeout.
3325:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param hspi pointer to a SPI_HandleTypeDef structure that contains
3326:HALLIB/Src/stm32f7xx_hal_spi.c ****   *              the configuration information for SPI module.
3327:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param Flag SPI flag to check
3328:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param State flag state to check
3329:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param Timeout Timeout duration
3330:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param Tickstart tick start value
3331:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
3332:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3333:HALLIB/Src/stm32f7xx_hal_spi.c **** static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint
3334:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                        uint32_t Timeout, uint32_t Tickstart)
3335:HALLIB/Src/stm32f7xx_hal_spi.c **** {
  28              		.loc 1 3335 0
  29              		.cfi_startproc
ARM GAS  /tmp/ccXuIaHP.s 			page 60


  30              		@ args = 4, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 3, -24
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 0546     		mov	r5, r0
  43 0004 0F46     		mov	r7, r1
  44 0006 1646     		mov	r6, r2
  45 0008 1C46     		mov	r4, r3
3336:HALLIB/Src/stm32f7xx_hal_spi.c ****   while ((hspi->Instance->SR & Flag) != State)
  46              		.loc 1 3336 0
  47 000a 36E0     		b	.L3
  48              	.LVL1:
  49              	.L8:
3337:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3338:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (Timeout != HAL_MAX_DELAY)
  50              		.loc 1 3338 0
  51 000c B4F1FF3F 		cmp	r4, #-1
  52 0010 33D0     		beq	.L3
3339:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3340:HALLIB/Src/stm32f7xx_hal_spi.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
  53              		.loc 1 3340 0
  54 0012 2CB1     		cbz	r4, .L4
  55              		.loc 1 3340 0 is_stmt 0 discriminator 1
  56 0014 FFF7FEFF 		bl	HAL_GetTick
  57              	.LVL2:
  58 0018 069B     		ldr	r3, [sp, #24]
  59 001a C01A     		subs	r0, r0, r3
  60 001c 8442     		cmp	r4, r0
  61 001e 2CD8     		bhi	.L3
  62              	.L4:
3341:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
3342:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Disable the SPI and reset the CRC: the CRC value should be cleared
3343:HALLIB/Src/stm32f7xx_hal_spi.c ****         on both master and slave sides in order to resynchronize the master
3344:HALLIB/Src/stm32f7xx_hal_spi.c ****         and slave for their respective CRC calculation */
3345:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3346:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
3347:HALLIB/Src/stm32f7xx_hal_spi.c ****         __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
  63              		.loc 1 3347 0 is_stmt 1
  64 0020 2A68     		ldr	r2, [r5]
  65 0022 5368     		ldr	r3, [r2, #4]
  66 0024 23F0E003 		bic	r3, r3, #224
  67 0028 5360     		str	r3, [r2, #4]
3348:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3349:HALLIB/Src/stm32f7xx_hal_spi.c ****         if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
  68              		.loc 1 3349 0
  69 002a 6B68     		ldr	r3, [r5, #4]
  70 002c B3F5827F 		cmp	r3, #260
  71 0030 0BD1     		bne	.L5
  72              		.loc 1 3349 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccXuIaHP.s 			page 61


  73 0032 AB68     		ldr	r3, [r5, #8]
  74 0034 B3F5806F 		cmp	r3, #1024
  75 0038 18BF     		it	ne
  76 003a B3F5004F 		cmpne	r3, #32768
  77 003e 04D1     		bne	.L5
3350:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                      || (hspi->Init.Direction == SPI_DIRECTION_2LIN
3351:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
3352:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* Disable SPI peripheral */
3353:HALLIB/Src/stm32f7xx_hal_spi.c ****           __HAL_SPI_DISABLE(hspi);
  78              		.loc 1 3353 0 is_stmt 1
  79 0040 2A68     		ldr	r2, [r5]
  80 0042 1368     		ldr	r3, [r2]
  81 0044 23F04003 		bic	r3, r3, #64
  82 0048 1360     		str	r3, [r2]
  83              	.L5:
3354:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
3355:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3356:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Reset CRC Calculation */
3357:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  84              		.loc 1 3357 0
  85 004a AB6A     		ldr	r3, [r5, #40]
  86 004c B3F5005F 		cmp	r3, #8192
  87 0050 0BD1     		bne	.L6
3358:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
3359:HALLIB/Src/stm32f7xx_hal_spi.c ****           SPI_RESET_CRC(hspi);
  88              		.loc 1 3359 0
  89 0052 2A68     		ldr	r2, [r5]
  90 0054 1368     		ldr	r3, [r2]
  91 0056 23F40053 		bic	r3, r3, #8192
  92 005a 1B04     		lsls	r3, r3, #16
  93 005c 1B0C     		lsrs	r3, r3, #16
  94 005e 1360     		str	r3, [r2]
  95 0060 2A68     		ldr	r2, [r5]
  96 0062 1368     		ldr	r3, [r2]
  97 0064 43F40053 		orr	r3, r3, #8192
  98 0068 1360     		str	r3, [r2]
  99              	.L6:
3360:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
3361:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3362:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->State = HAL_SPI_STATE_READY;
 100              		.loc 1 3362 0
 101 006a 0123     		movs	r3, #1
 102 006c 85F85D30 		strb	r3, [r5, #93]
3363:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3364:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Process Unlocked */
3365:HALLIB/Src/stm32f7xx_hal_spi.c ****         __HAL_UNLOCK(hspi);
 103              		.loc 1 3365 0
 104 0070 0023     		movs	r3, #0
 105 0072 85F85C30 		strb	r3, [r5, #92]
3366:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3367:HALLIB/Src/stm32f7xx_hal_spi.c ****         return HAL_TIMEOUT;
 106              		.loc 1 3367 0
 107 0076 0320     		movs	r0, #3
 108 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 109              	.LVL3:
 110              	.L3:
3336:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
ARM GAS  /tmp/ccXuIaHP.s 			page 62


 111              		.loc 1 3336 0
 112 007a 2B68     		ldr	r3, [r5]
 113 007c 9B68     		ldr	r3, [r3, #8]
 114 007e 3B40     		ands	r3, r3, r7
 115 0080 B342     		cmp	r3, r6
 116 0082 C3D1     		bne	.L8
3368:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
3369:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3370:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3371:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3372:HALLIB/Src/stm32f7xx_hal_spi.c ****   return HAL_OK;
 117              		.loc 1 3372 0
 118 0084 0020     		movs	r0, #0
3373:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 119              		.loc 1 3373 0
 120 0086 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 121              		.cfi_endproc
 122              	.LFE187:
 124              		.section	.text.SPI_WaitFifoStateUntilTimeout,"ax",%progbits
 125              		.align	2
 126              		.thumb
 127              		.thumb_func
 129              	SPI_WaitFifoStateUntilTimeout:
 130              	.LFB188:
3374:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3375:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3376:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief Handle SPI FIFO Communication Timeout.
3377:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param hspi pointer to a SPI_HandleTypeDef structure that contains
3378:HALLIB/Src/stm32f7xx_hal_spi.c ****   *              the configuration information for SPI module.
3379:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param Fifo Fifo to check
3380:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param State Fifo state to check
3381:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param Timeout Timeout duration
3382:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param Tickstart tick start value
3383:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval HAL status
3384:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3385:HALLIB/Src/stm32f7xx_hal_spi.c **** static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint
3386:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                        uint32_t Timeout, uint32_t Tickstart)
3387:HALLIB/Src/stm32f7xx_hal_spi.c **** {
 131              		.loc 1 3387 0
 132              		.cfi_startproc
 133              		@ args = 4, pretend = 0, frame = 8
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              	.LVL4:
 136 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 137              	.LCFI1:
 138              		.cfi_def_cfa_offset 20
 139              		.cfi_offset 4, -20
 140              		.cfi_offset 5, -16
 141              		.cfi_offset 6, -12
 142              		.cfi_offset 7, -8
 143              		.cfi_offset 14, -4
 144 0002 83B0     		sub	sp, sp, #12
 145              	.LCFI2:
 146              		.cfi_def_cfa_offset 32
 147 0004 0746     		mov	r7, r0
 148 0006 0D46     		mov	r5, r1
 149 0008 1446     		mov	r4, r2
ARM GAS  /tmp/ccXuIaHP.s 			page 63


 150 000a 1E46     		mov	r6, r3
3388:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO uint8_t tmpreg;
3389:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3390:HALLIB/Src/stm32f7xx_hal_spi.c ****   while ((hspi->Instance->SR & Fifo) != State)
 151              		.loc 1 3390 0
 152 000c 41E0     		b	.L13
 153              	.LVL5:
 154              	.L18:
3391:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3392:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 155              		.loc 1 3392 0
 156 000e B5F5C06F 		cmp	r5, #1536
 157 0012 08BF     		it	eq
 158 0014 002C     		cmpeq	r4, #0
 159 0016 05D1     		bne	.L12
3393:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3394:HALLIB/Src/stm32f7xx_hal_spi.c ****       tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 160              		.loc 1 3394 0
 161 0018 137B     		ldrb	r3, [r2, #12]	@ zero_extendqisi2
 162 001a DBB2     		uxtb	r3, r3
 163 001c 8DF80730 		strb	r3, [sp, #7]
3395:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* To avoid GCC warning */
3396:HALLIB/Src/stm32f7xx_hal_spi.c ****       UNUSED(tmpreg);
 164              		.loc 1 3396 0
 165 0020 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 166              	.L12:
3397:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3398:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3399:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (Timeout != HAL_MAX_DELAY)
 167              		.loc 1 3399 0
 168 0024 B6F1FF3F 		cmp	r6, #-1
 169 0028 33D0     		beq	.L13
3400:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3401:HALLIB/Src/stm32f7xx_hal_spi.c ****       if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 170              		.loc 1 3401 0
 171 002a 2EB1     		cbz	r6, .L14
 172              		.loc 1 3401 0 is_stmt 0 discriminator 1
 173 002c FFF7FEFF 		bl	HAL_GetTick
 174              	.LVL6:
 175 0030 089B     		ldr	r3, [sp, #32]
 176 0032 C01A     		subs	r0, r0, r3
 177 0034 8642     		cmp	r6, r0
 178 0036 2CD8     		bhi	.L13
 179              	.L14:
3402:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
3403:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Disable the SPI and reset the CRC: the CRC value should be cleared
3404:HALLIB/Src/stm32f7xx_hal_spi.c ****            on both master and slave sides in order to resynchronize the master
3405:HALLIB/Src/stm32f7xx_hal_spi.c ****            and slave for their respective CRC calculation */
3406:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3407:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
3408:HALLIB/Src/stm32f7xx_hal_spi.c ****         __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 180              		.loc 1 3408 0 is_stmt 1
 181 0038 3A68     		ldr	r2, [r7]
 182 003a 5368     		ldr	r3, [r2, #4]
 183 003c 23F0E003 		bic	r3, r3, #224
 184 0040 5360     		str	r3, [r2, #4]
3409:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 64


3410:HALLIB/Src/stm32f7xx_hal_spi.c ****         if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 185              		.loc 1 3410 0
 186 0042 7B68     		ldr	r3, [r7, #4]
 187 0044 B3F5827F 		cmp	r3, #260
 188 0048 0BD1     		bne	.L15
 189              		.loc 1 3410 0 is_stmt 0 discriminator 1
 190 004a BB68     		ldr	r3, [r7, #8]
 191 004c B3F5806F 		cmp	r3, #1024
 192 0050 18BF     		it	ne
 193 0052 B3F5004F 		cmpne	r3, #32768
 194 0056 04D1     		bne	.L15
3411:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                      || (hspi->Init.Direction == SPI_DIRECTION_2LIN
3412:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
3413:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* Disable SPI peripheral */
3414:HALLIB/Src/stm32f7xx_hal_spi.c ****           __HAL_SPI_DISABLE(hspi);
 195              		.loc 1 3414 0 is_stmt 1
 196 0058 3A68     		ldr	r2, [r7]
 197 005a 1368     		ldr	r3, [r2]
 198 005c 23F04003 		bic	r3, r3, #64
 199 0060 1360     		str	r3, [r2]
 200              	.L15:
3415:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
3416:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3417:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Reset CRC Calculation */
3418:HALLIB/Src/stm32f7xx_hal_spi.c ****         if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 201              		.loc 1 3418 0
 202 0062 BB6A     		ldr	r3, [r7, #40]
 203 0064 B3F5005F 		cmp	r3, #8192
 204 0068 0BD1     		bne	.L16
3419:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
3420:HALLIB/Src/stm32f7xx_hal_spi.c ****           SPI_RESET_CRC(hspi);
 205              		.loc 1 3420 0
 206 006a 3A68     		ldr	r2, [r7]
 207 006c 1368     		ldr	r3, [r2]
 208 006e 23F40053 		bic	r3, r3, #8192
 209 0072 1B04     		lsls	r3, r3, #16
 210 0074 1B0C     		lsrs	r3, r3, #16
 211 0076 1360     		str	r3, [r2]
 212 0078 3A68     		ldr	r2, [r7]
 213 007a 1368     		ldr	r3, [r2]
 214 007c 43F40053 		orr	r3, r3, #8192
 215 0080 1360     		str	r3, [r2]
 216              	.L16:
3421:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
3422:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3423:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->State = HAL_SPI_STATE_READY;
 217              		.loc 1 3423 0
 218 0082 0123     		movs	r3, #1
 219 0084 87F85D30 		strb	r3, [r7, #93]
3424:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3425:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Process Unlocked */
3426:HALLIB/Src/stm32f7xx_hal_spi.c ****         __HAL_UNLOCK(hspi);
 220              		.loc 1 3426 0
 221 0088 0023     		movs	r3, #0
 222 008a 87F85C30 		strb	r3, [r7, #92]
3427:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3428:HALLIB/Src/stm32f7xx_hal_spi.c ****         return HAL_TIMEOUT;
ARM GAS  /tmp/ccXuIaHP.s 			page 65


 223              		.loc 1 3428 0
 224 008e 0320     		movs	r0, #3
 225 0090 05E0     		b	.L17
 226              	.L13:
3390:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 227              		.loc 1 3390 0
 228 0092 3A68     		ldr	r2, [r7]
 229 0094 9368     		ldr	r3, [r2, #8]
 230 0096 2B40     		ands	r3, r3, r5
 231 0098 A342     		cmp	r3, r4
 232 009a B8D1     		bne	.L18
3429:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
3430:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3431:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3432:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3433:HALLIB/Src/stm32f7xx_hal_spi.c ****   return HAL_OK;
 233              		.loc 1 3433 0
 234 009c 0020     		movs	r0, #0
 235              	.L17:
3434:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 236              		.loc 1 3434 0
 237 009e 03B0     		add	sp, sp, #12
 238              	.LCFI3:
 239              		.cfi_def_cfa_offset 20
 240              		@ sp needed
 241 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 242              		.cfi_endproc
 243              	.LFE188:
 245 00a2 00BF     		.section	.text.SPI_EndRxTxTransaction,"ax",%progbits
 246              		.align	2
 247              		.thumb
 248              		.thumb_func
 250              	SPI_EndRxTxTransaction:
 251              	.LFB190:
3435:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3436:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3437:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Handle the check of the RX transaction complete.
3438:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3439:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3440:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Timeout Timeout duration
3441:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  Tickstart tick start value
3442:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None.
3443:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3444:HALLIB/Src/stm32f7xx_hal_spi.c **** static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t 
3445:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3446:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
3447:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXO
3448:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3449:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Disable SPI peripheral */
3450:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_DISABLE(hspi);
3451:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3452:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3453:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Control the BSY flag */
3454:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
3455:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3456:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3457:HALLIB/Src/stm32f7xx_hal_spi.c ****     return HAL_TIMEOUT;
ARM GAS  /tmp/ccXuIaHP.s 			page 66


3458:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3459:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3460:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
3461:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXO
3462:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3463:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Empty the FRLVL fifo */
3464:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) !=
3465:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3466:HALLIB/Src/stm32f7xx_hal_spi.c ****       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3467:HALLIB/Src/stm32f7xx_hal_spi.c ****       return HAL_TIMEOUT;
3468:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3469:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3470:HALLIB/Src/stm32f7xx_hal_spi.c ****   return HAL_OK;
3471:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3472:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3473:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3474:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief Handle the check of the RXTX or TX transaction complete.
3475:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param hspi SPI handle
3476:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param Timeout Timeout duration
3477:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param Tickstart tick start value
3478:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3479:HALLIB/Src/stm32f7xx_hal_spi.c **** static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t
3480:HALLIB/Src/stm32f7xx_hal_spi.c **** {
 252              		.loc 1 3480 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              	.LVL7:
 257 0000 70B5     		push	{r4, r5, r6, lr}
 258              	.LCFI4:
 259              		.cfi_def_cfa_offset 16
 260              		.cfi_offset 4, -16
 261              		.cfi_offset 5, -12
 262              		.cfi_offset 6, -8
 263              		.cfi_offset 14, -4
 264 0002 82B0     		sub	sp, sp, #8
 265              	.LCFI5:
 266              		.cfi_def_cfa_offset 24
 267 0004 0446     		mov	r4, r0
 268 0006 0D46     		mov	r5, r1
 269 0008 1646     		mov	r6, r2
3481:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Control if the TX fifo is empty */
3482:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != H
 270              		.loc 1 3482 0
 271 000a 0092     		str	r2, [sp]
 272 000c 0B46     		mov	r3, r1
 273 000e 0022     		movs	r2, #0
 274              	.LVL8:
 275 0010 4FF4C051 		mov	r1, #6144
 276              	.LVL9:
 277 0014 FFF7FEFF 		bl	SPI_WaitFifoStateUntilTimeout
 278              	.LVL10:
 279 0018 28B1     		cbz	r0, .L21
3483:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3484:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 280              		.loc 1 3484 0
 281 001a 236E     		ldr	r3, [r4, #96]
ARM GAS  /tmp/ccXuIaHP.s 			page 67


 282 001c 43F02003 		orr	r3, r3, #32
 283 0020 2366     		str	r3, [r4, #96]
3485:HALLIB/Src/stm32f7xx_hal_spi.c ****     return HAL_TIMEOUT;
 284              		.loc 1 3485 0
 285 0022 0323     		movs	r3, #3
 286 0024 1CE0     		b	.L22
 287              	.L21:
3486:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3487:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Control the BSY flag */
3488:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 288              		.loc 1 3488 0
 289 0026 0096     		str	r6, [sp]
 290 0028 2B46     		mov	r3, r5
 291 002a 0022     		movs	r2, #0
 292 002c 8021     		movs	r1, #128
 293 002e 2046     		mov	r0, r4
 294 0030 FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 295              	.LVL11:
 296 0034 28B1     		cbz	r0, .L23
3489:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3490:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 297              		.loc 1 3490 0
 298 0036 236E     		ldr	r3, [r4, #96]
 299 0038 43F02003 		orr	r3, r3, #32
 300 003c 2366     		str	r3, [r4, #96]
3491:HALLIB/Src/stm32f7xx_hal_spi.c ****     return HAL_TIMEOUT;
 301              		.loc 1 3491 0
 302 003e 0323     		movs	r3, #3
 303 0040 0EE0     		b	.L22
 304              	.L23:
3492:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3493:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Control if the RX fifo is empty */
3494:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != H
 305              		.loc 1 3494 0
 306 0042 0096     		str	r6, [sp]
 307 0044 2B46     		mov	r3, r5
 308 0046 0022     		movs	r2, #0
 309 0048 4FF4C061 		mov	r1, #1536
 310 004c 2046     		mov	r0, r4
 311 004e FFF7FEFF 		bl	SPI_WaitFifoStateUntilTimeout
 312              	.LVL12:
 313 0052 0346     		mov	r3, r0
 314 0054 20B1     		cbz	r0, .L22
3495:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3496:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 315              		.loc 1 3496 0
 316 0056 236E     		ldr	r3, [r4, #96]
 317 0058 43F02003 		orr	r3, r3, #32
 318 005c 2366     		str	r3, [r4, #96]
3497:HALLIB/Src/stm32f7xx_hal_spi.c ****     return HAL_TIMEOUT;
 319              		.loc 1 3497 0
 320 005e 0323     		movs	r3, #3
 321              	.L22:
3498:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3499:HALLIB/Src/stm32f7xx_hal_spi.c ****   return HAL_OK;
3500:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 322              		.loc 1 3500 0
ARM GAS  /tmp/ccXuIaHP.s 			page 68


 323 0060 1846     		mov	r0, r3
 324 0062 02B0     		add	sp, sp, #8
 325              	.LCFI6:
 326              		.cfi_def_cfa_offset 16
 327              		@ sp needed
 328 0064 70BD     		pop	{r4, r5, r6, pc}
 329              		.cfi_endproc
 330              	.LFE190:
 332 0066 00BF     		.section	.text.SPI_EndRxTransaction,"ax",%progbits
 333              		.align	2
 334              		.thumb
 335              		.thumb_func
 337              	SPI_EndRxTransaction:
 338              	.LFB189:
3445:HALLIB/Src/stm32f7xx_hal_spi.c ****   if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 339              		.loc 1 3445 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              	.LVL13:
 344 0000 70B5     		push	{r4, r5, r6, lr}
 345              	.LCFI7:
 346              		.cfi_def_cfa_offset 16
 347              		.cfi_offset 4, -16
 348              		.cfi_offset 5, -12
 349              		.cfi_offset 6, -8
 350              		.cfi_offset 14, -4
 351 0002 82B0     		sub	sp, sp, #8
 352              	.LCFI8:
 353              		.cfi_def_cfa_offset 24
 354 0004 0446     		mov	r4, r0
 355 0006 0D46     		mov	r5, r1
 356 0008 1646     		mov	r6, r2
3446:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXO
 357              		.loc 1 3446 0
 358 000a 4368     		ldr	r3, [r0, #4]
 359 000c B3F5827F 		cmp	r3, #260
 360 0010 0BD1     		bne	.L26
3446:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXO
 361              		.loc 1 3446 0 is_stmt 0 discriminator 1
 362 0012 8368     		ldr	r3, [r0, #8]
 363 0014 B3F5806F 		cmp	r3, #1024
 364 0018 18BF     		it	ne
 365 001a B3F5004F 		cmpne	r3, #32768
 366 001e 04D1     		bne	.L26
3450:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 367              		.loc 1 3450 0 is_stmt 1
 368 0020 0268     		ldr	r2, [r0]
 369              	.LVL14:
 370 0022 1368     		ldr	r3, [r2]
 371 0024 23F04003 		bic	r3, r3, #64
 372 0028 1360     		str	r3, [r2]
 373              	.L26:
3454:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 374              		.loc 1 3454 0
 375 002a 0096     		str	r6, [sp]
 376 002c 2B46     		mov	r3, r5
ARM GAS  /tmp/ccXuIaHP.s 			page 69


 377 002e 0022     		movs	r2, #0
 378 0030 8021     		movs	r1, #128
 379              	.LVL15:
 380 0032 2046     		mov	r0, r4
 381              	.LVL16:
 382 0034 FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 383              	.LVL17:
 384 0038 0346     		mov	r3, r0
 385 003a 28B1     		cbz	r0, .L27
3456:HALLIB/Src/stm32f7xx_hal_spi.c ****     return HAL_TIMEOUT;
 386              		.loc 1 3456 0
 387 003c 236E     		ldr	r3, [r4, #96]
 388 003e 43F02003 		orr	r3, r3, #32
 389 0042 2366     		str	r3, [r4, #96]
3457:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 390              		.loc 1 3457 0
 391 0044 0323     		movs	r3, #3
 392 0046 19E0     		b	.L28
 393              	.L27:
3460:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXO
 394              		.loc 1 3460 0
 395 0048 6268     		ldr	r2, [r4, #4]
 396 004a B2F5827F 		cmp	r2, #260
 397 004e 15D1     		bne	.L28
3460:HALLIB/Src/stm32f7xx_hal_spi.c ****                                                || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXO
 398              		.loc 1 3460 0 is_stmt 0 discriminator 1
 399 0050 A268     		ldr	r2, [r4, #8]
 400 0052 B2F5806F 		cmp	r2, #1024
 401 0056 18BF     		it	ne
 402 0058 B2F5004F 		cmpne	r2, #32768
 403 005c 0ED1     		bne	.L28
3464:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 404              		.loc 1 3464 0 is_stmt 1
 405 005e 0096     		str	r6, [sp]
 406 0060 2B46     		mov	r3, r5
 407 0062 0022     		movs	r2, #0
 408 0064 4FF4C061 		mov	r1, #1536
 409 0068 2046     		mov	r0, r4
 410 006a FFF7FEFF 		bl	SPI_WaitFifoStateUntilTimeout
 411              	.LVL18:
 412 006e 0346     		mov	r3, r0
 413 0070 20B1     		cbz	r0, .L28
3466:HALLIB/Src/stm32f7xx_hal_spi.c ****       return HAL_TIMEOUT;
 414              		.loc 1 3466 0
 415 0072 236E     		ldr	r3, [r4, #96]
 416 0074 43F02003 		orr	r3, r3, #32
 417 0078 2366     		str	r3, [r4, #96]
3467:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 418              		.loc 1 3467 0
 419 007a 0323     		movs	r3, #3
 420              	.L28:
3471:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 421              		.loc 1 3471 0
 422 007c 1846     		mov	r0, r3
 423 007e 02B0     		add	sp, sp, #8
 424              	.LCFI9:
 425              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccXuIaHP.s 			page 70


 426              		@ sp needed
 427 0080 70BD     		pop	{r4, r5, r6, pc}
 428              		.cfi_endproc
 429              	.LFE189:
 431 0082 00BF     		.section	.text.SPI_AbortRx_ISR,"ax",%progbits
 432              		.align	2
 433              		.thumb
 434              		.thumb_func
 436              	SPI_AbortRx_ISR:
 437              	.LFB194:
3501:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3502:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3503:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Handle the end of the RXTX transaction.
3504:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3505:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3506:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3507:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3508:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
3509:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3510:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
3511:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3512:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout managment*/
3513:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
3514:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3515:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable ERR interrupt */
3516:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
3517:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3518:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check the end of the transaction */
3519:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
3520:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3521:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3522:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3523:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3524:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3525:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if CRC error occurred */
3526:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
3527:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3528:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
3529:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
3530:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
3531:HALLIB/Src/stm32f7xx_hal_spi.c ****     HAL_SPI_ErrorCallback(hspi);
3532:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3533:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
3534:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3535:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3536:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
3537:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3538:HALLIB/Src/stm32f7xx_hal_spi.c ****       if (hspi->State == HAL_SPI_STATE_BUSY_RX)
3539:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
3540:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->State = HAL_SPI_STATE_READY;
3541:HALLIB/Src/stm32f7xx_hal_spi.c ****         HAL_SPI_RxCpltCallback(hspi);
3542:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
3543:HALLIB/Src/stm32f7xx_hal_spi.c ****       else
3544:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
3545:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->State = HAL_SPI_STATE_READY;
3546:HALLIB/Src/stm32f7xx_hal_spi.c ****         HAL_SPI_TxRxCpltCallback(hspi);
3547:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
ARM GAS  /tmp/ccXuIaHP.s 			page 71


3548:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3549:HALLIB/Src/stm32f7xx_hal_spi.c ****     else
3550:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3551:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->State = HAL_SPI_STATE_READY;
3552:HALLIB/Src/stm32f7xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
3553:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3554:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3555:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3556:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3557:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3558:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3559:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3560:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Handle the end of the RX transaction.
3561:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3562:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3563:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3564:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3565:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
3566:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3567:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable RXNE and ERR interrupt */
3568:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
3569:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3570:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check the end of the transaction */
3571:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
3572:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3573:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3574:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3575:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
3576:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3577:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3578:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check if CRC error occurred */
3579:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
3580:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3581:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
3582:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
3583:HALLIB/Src/stm32f7xx_hal_spi.c ****     HAL_SPI_ErrorCallback(hspi);
3584:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3585:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
3586:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3587:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3588:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
3589:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3590:HALLIB/Src/stm32f7xx_hal_spi.c ****       HAL_SPI_RxCpltCallback(hspi);
3591:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3592:HALLIB/Src/stm32f7xx_hal_spi.c ****     else
3593:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3594:HALLIB/Src/stm32f7xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
3595:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3596:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
3597:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3598:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
3599:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3600:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3601:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3602:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Handle the end of the TX transaction.
3603:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3604:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
ARM GAS  /tmp/ccXuIaHP.s 			page 72


3605:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3606:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3607:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
3608:HALLIB/Src/stm32f7xx_hal_spi.c **** {
3609:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
3610:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3611:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout management*/
3612:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
3613:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3614:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable TXE and ERR interrupt */
3615:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
3616:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3617:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check the end of the transaction */
3618:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
3619:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3620:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
3621:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3622:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3623:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Clear overrun flag in 2 Lines communication mode because received is not read */
3624:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
3625:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3626:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_OVRFLAG(hspi);
3627:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3628:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3629:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
3630:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
3631:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3632:HALLIB/Src/stm32f7xx_hal_spi.c ****     HAL_SPI_ErrorCallback(hspi);
3633:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3634:HALLIB/Src/stm32f7xx_hal_spi.c ****   else
3635:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3636:HALLIB/Src/stm32f7xx_hal_spi.c ****     HAL_SPI_TxCpltCallback(hspi);
3637:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3638:HALLIB/Src/stm32f7xx_hal_spi.c **** }
3639:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3640:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3641:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Handle abort a Rx transaction.
3642:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3643:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3644:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3645:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3646:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
3647:HALLIB/Src/stm32f7xx_hal_spi.c **** {
 438              		.loc 1 3647 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 442              	.LVL19:
 443 0000 30B5     		push	{r4, r5, lr}
 444              	.LCFI10:
 445              		.cfi_def_cfa_offset 12
 446              		.cfi_offset 4, -12
 447              		.cfi_offset 5, -8
 448              		.cfi_offset 14, -4
 449 0002 83B0     		sub	sp, sp, #12
 450              	.LCFI11:
 451              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccXuIaHP.s 			page 73


 452 0004 0446     		mov	r4, r0
 453              	.LVL20:
3648:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
3649:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3650:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout managment*/
3651:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
 454              		.loc 1 3651 0
 455 0006 FFF7FEFF 		bl	HAL_GetTick
 456              	.LVL21:
 457 000a 0546     		mov	r5, r0
 458              	.LVL22:
3652:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3653:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable SPI Peripheral */
3654:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_DISABLE(hspi);
 459              		.loc 1 3654 0
 460 000c 2268     		ldr	r2, [r4]
 461 000e 1368     		ldr	r3, [r2]
 462 0010 23F04003 		bic	r3, r3, #64
 463 0014 1360     		str	r3, [r2]
3655:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3656:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
3657:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 464              		.loc 1 3657 0
 465 0016 2268     		ldr	r2, [r4]
 466 0018 5368     		ldr	r3, [r2, #4]
 467 001a 23F0E003 		bic	r3, r3, #224
 468 001e 5360     		str	r3, [r2, #4]
3658:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3659:HALLIB/Src/stm32f7xx_hal_spi.c ****   while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 469              		.loc 1 3659 0
 470 0020 07E0     		b	.L32
 471              	.LVL23:
 472              	.L33:
3660:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3661:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((HAL_GetTick() - tickstart) >=  HAL_MAX_DELAY)
 473              		.loc 1 3661 0
 474 0022 FFF7FEFF 		bl	HAL_GetTick
 475              	.LVL24:
 476 0026 401B     		subs	r0, r0, r5
 477 0028 B0F1FF3F 		cmp	r0, #-1
 478 002c 01D1     		bne	.L32
3662:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3663:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 479              		.loc 1 3663 0
 480 002e 4023     		movs	r3, #64
 481 0030 2366     		str	r3, [r4, #96]
 482              	.L32:
3659:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 483              		.loc 1 3659 0
 484 0032 2368     		ldr	r3, [r4]
 485 0034 5B68     		ldr	r3, [r3, #4]
 486 0036 13F0400F 		tst	r3, #64
 487 003a F2D1     		bne	.L33
3664:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3665:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3666:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3667:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Control the BSY flag */
ARM GAS  /tmp/ccXuIaHP.s 			page 74


3668:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) 
 488              		.loc 1 3668 0
 489 003c FFF7FEFF 		bl	HAL_GetTick
 490              	.LVL25:
 491 0040 0090     		str	r0, [sp]
 492 0042 6423     		movs	r3, #100
 493 0044 0022     		movs	r2, #0
 494 0046 8021     		movs	r1, #128
 495 0048 2046     		mov	r0, r4
 496 004a FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 497              	.LVL26:
 498 004e 08B1     		cbz	r0, .L34
3669:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3670:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 499              		.loc 1 3670 0
 500 0050 4023     		movs	r3, #64
 501 0052 2366     		str	r3, [r4, #96]
 502              	.L34:
3671:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3672:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3673:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Empty the FRLVL fifo */
3674:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL
 503              		.loc 1 3674 0
 504 0054 FFF7FEFF 		bl	HAL_GetTick
 505              	.LVL27:
 506 0058 0090     		str	r0, [sp]
 507 005a 6423     		movs	r3, #100
 508 005c 0022     		movs	r2, #0
 509 005e 4FF4C061 		mov	r1, #1536
 510 0062 2046     		mov	r0, r4
 511 0064 FFF7FEFF 		bl	SPI_WaitFifoStateUntilTimeout
 512              	.LVL28:
 513 0068 08B1     		cbz	r0, .L35
3675:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3676:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 514              		.loc 1 3676 0
 515 006a 4023     		movs	r3, #64
 516 006c 2366     		str	r3, [r4, #96]
 517              	.L35:
3677:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3678:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3679:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_ABORT;
 518              		.loc 1 3679 0
 519 006e 0723     		movs	r3, #7
 520 0070 84F85D30 		strb	r3, [r4, #93]
3680:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 521              		.loc 1 3680 0
 522 0074 03B0     		add	sp, sp, #12
 523              	.LCFI12:
 524              		.cfi_def_cfa_offset 12
 525              		@ sp needed
 526 0076 30BD     		pop	{r4, r5, pc}
 527              		.cfi_endproc
 528              	.LFE194:
 530              		.section	.text.SPI_AbortTx_ISR,"ax",%progbits
 531              		.align	2
 532              		.thumb
ARM GAS  /tmp/ccXuIaHP.s 			page 75


 533              		.thumb_func
 535              	SPI_AbortTx_ISR:
 536              	.LFB195:
3681:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3682:HALLIB/Src/stm32f7xx_hal_spi.c **** /**
3683:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @brief  Handle abort a Tx or Rx/Tx transaction.
3684:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
3685:HALLIB/Src/stm32f7xx_hal_spi.c ****   *               the configuration information for SPI module.
3686:HALLIB/Src/stm32f7xx_hal_spi.c ****   * @retval None
3687:HALLIB/Src/stm32f7xx_hal_spi.c ****   */
3688:HALLIB/Src/stm32f7xx_hal_spi.c **** static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
3689:HALLIB/Src/stm32f7xx_hal_spi.c **** {
 537              		.loc 1 3689 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              	.LVL29:
 542 0000 30B5     		push	{r4, r5, lr}
 543              	.LCFI13:
 544              		.cfi_def_cfa_offset 12
 545              		.cfi_offset 4, -12
 546              		.cfi_offset 5, -8
 547              		.cfi_offset 14, -4
 548 0002 83B0     		sub	sp, sp, #12
 549              	.LCFI14:
 550              		.cfi_def_cfa_offset 24
 551 0004 0446     		mov	r4, r0
 552              	.LVL30:
3690:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
3691:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3692:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Init tickstart for timeout managment*/
3693:HALLIB/Src/stm32f7xx_hal_spi.c ****   tickstart = HAL_GetTick();
 553              		.loc 1 3693 0
 554 0006 FFF7FEFF 		bl	HAL_GetTick
 555              	.LVL31:
 556 000a 0546     		mov	r5, r0
 557              	.LVL32:
3694:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3695:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
3696:HALLIB/Src/stm32f7xx_hal_spi.c ****   CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 558              		.loc 1 3696 0
 559 000c 2268     		ldr	r2, [r4]
 560 000e 5368     		ldr	r3, [r2, #4]
 561 0010 23F0E003 		bic	r3, r3, #224
 562 0014 5360     		str	r3, [r2, #4]
3697:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3698:HALLIB/Src/stm32f7xx_hal_spi.c ****   while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 563              		.loc 1 3698 0
 564 0016 07E0     		b	.L39
 565              	.LVL33:
 566              	.L40:
3699:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3700:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((HAL_GetTick() - tickstart) >=  HAL_MAX_DELAY)
 567              		.loc 1 3700 0
 568 0018 FFF7FEFF 		bl	HAL_GetTick
 569              	.LVL34:
 570 001c 401B     		subs	r0, r0, r5
ARM GAS  /tmp/ccXuIaHP.s 			page 76


 571 001e B0F1FF3F 		cmp	r0, #-1
 572 0022 01D1     		bne	.L39
3701:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
3702:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 573              		.loc 1 3702 0
 574 0024 4023     		movs	r3, #64
 575 0026 2366     		str	r3, [r4, #96]
 576              	.L39:
3698:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 577              		.loc 1 3698 0
 578 0028 2368     		ldr	r3, [r4]
 579 002a 5B68     		ldr	r3, [r3, #4]
 580 002c 13F0800F 		tst	r3, #128
 581 0030 F2D1     		bne	.L40
3703:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
3704:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3705:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3706:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 582              		.loc 1 3706 0
 583 0032 FFF7FEFF 		bl	HAL_GetTick
 584              	.LVL35:
 585 0036 0246     		mov	r2, r0
 586 0038 6421     		movs	r1, #100
 587 003a 2046     		mov	r0, r4
 588 003c FFF7FEFF 		bl	SPI_EndRxTxTransaction
 589              	.LVL36:
 590 0040 08B1     		cbz	r0, .L41
3707:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
3708:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 591              		.loc 1 3708 0
 592 0042 4023     		movs	r3, #64
 593 0044 2366     		str	r3, [r4, #96]
 594              	.L41:
3709:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3710:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3711:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable SPI Peripheral */
3712:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_DISABLE(hspi);
 595              		.loc 1 3712 0
 596 0046 2268     		ldr	r2, [r4]
 597 0048 1368     		ldr	r3, [r2]
 598 004a 23F04003 		bic	r3, r3, #64
 599 004e 1360     		str	r3, [r2]
3713:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3714:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Empty the FRLVL fifo */
3715:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL
 600              		.loc 1 3715 0
 601 0050 FFF7FEFF 		bl	HAL_GetTick
 602              	.LVL37:
 603 0054 0090     		str	r0, [sp]
 604 0056 6423     		movs	r3, #100
 605 0058 0022     		movs	r2, #0
 606 005a 4FF4C061 		mov	r1, #1536
 607 005e 2046     		mov	r0, r4
 608 0060 FFF7FEFF 		bl	SPI_WaitFifoStateUntilTimeout
 609              	.LVL38:
 610 0064 08B1     		cbz	r0, .L42
3716:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
ARM GAS  /tmp/ccXuIaHP.s 			page 77


3717:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 611              		.loc 1 3717 0
 612 0066 4023     		movs	r3, #64
 613 0068 2366     		str	r3, [r4, #96]
 614              	.L42:
3718:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
3719:HALLIB/Src/stm32f7xx_hal_spi.c **** 
3720:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_ABORT;
 615              		.loc 1 3720 0
 616 006a 0723     		movs	r3, #7
 617 006c 84F85D30 		strb	r3, [r4, #93]
3721:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 618              		.loc 1 3721 0
 619 0070 03B0     		add	sp, sp, #12
 620              	.LCFI15:
 621              		.cfi_def_cfa_offset 12
 622              		@ sp needed
 623 0072 30BD     		pop	{r4, r5, pc}
 624              		.cfi_endproc
 625              	.LFE195:
 627              		.section	.text.HAL_SPI_MspInit,"ax",%progbits
 628              		.align	2
 629              		.weak	HAL_SPI_MspInit
 630              		.thumb
 631              		.thumb_func
 633              	HAL_SPI_MspInit:
 634              	.LFB138:
 423:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 635              		.loc 1 423 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              		@ link register save eliminated.
 640              	.LVL39:
 641 0000 7047     		bx	lr
 642              		.cfi_endproc
 643              	.LFE138:
 645 0002 00BF     		.section	.text.HAL_SPI_Init,"ax",%progbits
 646              		.align	2
 647              		.global	HAL_SPI_Init
 648              		.thumb
 649              		.thumb_func
 651              	HAL_SPI_Init:
 652              	.LFB136:
 264:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t frxth;
 653              		.loc 1 264 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              	.LVL40:
 268:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 658              		.loc 1 268 0
 659 0000 0028     		cmp	r0, #0
 660 0002 66D0     		beq	.L54
 264:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t frxth;
 661              		.loc 1 264 0
 662 0004 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccXuIaHP.s 			page 78


 663              	.LCFI16:
 664              		.cfi_def_cfa_offset 8
 665              		.cfi_offset 4, -8
 666              		.cfi_offset 14, -4
 667 0006 0446     		mov	r4, r0
 299:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 668              		.loc 1 299 0
 669 0008 90F85D30 		ldrb	r3, [r0, #93]	@ zero_extendqisi2
 670 000c 13F0FF0F 		tst	r3, #255
 671 0010 04D1     		bne	.L47
 302:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 672              		.loc 1 302 0
 673 0012 0023     		movs	r3, #0
 674 0014 80F85C30 		strb	r3, [r0, #92]
 305:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 675              		.loc 1 305 0
 676 0018 FFF7FEFF 		bl	HAL_SPI_MspInit
 677              	.LVL41:
 678              	.L47:
 308:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 679              		.loc 1 308 0
 680 001c 0223     		movs	r3, #2
 681 001e 84F85D30 		strb	r3, [r4, #93]
 311:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 682              		.loc 1 311 0
 683 0022 2268     		ldr	r2, [r4]
 684 0024 1368     		ldr	r3, [r2]
 685 0026 23F04003 		bic	r3, r3, #64
 686 002a 1360     		str	r3, [r2]
 314:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 687              		.loc 1 314 0
 688 002c E268     		ldr	r2, [r4, #12]
 689 002e B2F5E06F 		cmp	r2, #1792
 690 0032 01D9     		bls	.L55
 316:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 691              		.loc 1 316 0
 692 0034 0020     		movs	r0, #0
 693 0036 01E0     		b	.L48
 694              	.L55:
 320:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 695              		.loc 1 320 0
 696 0038 4FF48050 		mov	r0, #4096
 697              	.L48:
 698              	.LVL42:
 324:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 699              		.loc 1 324 0
 700 003c B2F5706F 		cmp	r2, #3840
 701 0040 18BF     		it	ne
 702 0042 B2F5E06F 		cmpne	r2, #1792
 703 0046 01D0     		beq	.L49
 327:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 704              		.loc 1 327 0
 705 0048 0023     		movs	r3, #0
 706 004a A362     		str	r3, [r4, #40]
 707              	.L49:
 331:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 708              		.loc 1 331 0
ARM GAS  /tmp/ccXuIaHP.s 			page 79


 709 004c 236B     		ldr	r3, [r4, #48]
 710 004e 3BB9     		cbnz	r3, .L50
 334:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 711              		.loc 1 334 0
 712 0050 B2F5E06F 		cmp	r2, #1792
 713 0054 02D9     		bls	.L51
 336:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 714              		.loc 1 336 0
 715 0056 0223     		movs	r3, #2
 716 0058 2363     		str	r3, [r4, #48]
 717 005a 01E0     		b	.L50
 718              	.L51:
 340:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 719              		.loc 1 340 0
 720 005c 0123     		movs	r3, #1
 721 005e 2363     		str	r3, [r4, #48]
 722              	.L50:
 347:HALLIB/Src/stm32f7xx_hal_spi.c ****                                   hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & 
 723              		.loc 1 347 0
 724 0060 2168     		ldr	r1, [r4]
 725 0062 6268     		ldr	r2, [r4, #4]
 726 0064 A368     		ldr	r3, [r4, #8]
 727 0066 1A43     		orrs	r2, r2, r3
 728 0068 2369     		ldr	r3, [r4, #16]
 729 006a 1A43     		orrs	r2, r2, r3
 730 006c 6369     		ldr	r3, [r4, #20]
 731 006e 1343     		orrs	r3, r3, r2
 732 0070 A269     		ldr	r2, [r4, #24]
 733 0072 02F40072 		and	r2, r2, #512
 734 0076 1A43     		orrs	r2, r2, r3
 735 0078 E369     		ldr	r3, [r4, #28]
 736 007a 1A43     		orrs	r2, r2, r3
 737 007c 236A     		ldr	r3, [r4, #32]
 738 007e 1A43     		orrs	r2, r2, r3
 739 0080 A36A     		ldr	r3, [r4, #40]
 740 0082 1343     		orrs	r3, r3, r2
 741 0084 0B60     		str	r3, [r1]
 352:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 742              		.loc 1 352 0
 743 0086 236B     		ldr	r3, [r4, #48]
 744 0088 022B     		cmp	r3, #2
 745 008a 04D1     		bne	.L52
 354:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 746              		.loc 1 354 0
 747 008c 2268     		ldr	r2, [r4]
 748 008e 1368     		ldr	r3, [r2]
 749 0090 43F40063 		orr	r3, r3, #2048
 750 0094 1360     		str	r3, [r2]
 751              	.L52:
 359:HALLIB/Src/stm32f7xx_hal_spi.c ****                                   hspi->Init.NSSPMode | hspi->Init.DataSize) | frxth);
 752              		.loc 1 359 0
 753 0096 2168     		ldr	r1, [r4]
 754 0098 638B     		ldrh	r3, [r4, #26]
 755 009a 03F00403 		and	r3, r3, #4
 756 009e 626A     		ldr	r2, [r4, #36]
 757 00a0 1343     		orrs	r3, r3, r2
 758 00a2 626B     		ldr	r2, [r4, #52]
ARM GAS  /tmp/ccXuIaHP.s 			page 80


 759 00a4 1A43     		orrs	r2, r2, r3
 760 00a6 E368     		ldr	r3, [r4, #12]
 761 00a8 1343     		orrs	r3, r3, r2
 762 00aa 0343     		orrs	r3, r3, r0
 763 00ac 4B60     		str	r3, [r1, #4]
 365:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 764              		.loc 1 365 0
 765 00ae A36A     		ldr	r3, [r4, #40]
 766 00b0 B3F5005F 		cmp	r3, #8192
 767 00b4 02D1     		bne	.L53
 367:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 768              		.loc 1 367 0
 769 00b6 2368     		ldr	r3, [r4]
 770 00b8 E26A     		ldr	r2, [r4, #44]
 771 00ba 1A61     		str	r2, [r3, #16]
 772              	.L53:
 373:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* SPI_I2SCFGR_I2SMOD */
 773              		.loc 1 373 0
 774 00bc 2268     		ldr	r2, [r4]
 775 00be D369     		ldr	r3, [r2, #28]
 776 00c0 23F40063 		bic	r3, r3, #2048
 777 00c4 D361     		str	r3, [r2, #28]
 376:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State     = HAL_SPI_STATE_READY;
 778              		.loc 1 376 0
 779 00c6 0020     		movs	r0, #0
 780              	.LVL43:
 781 00c8 2066     		str	r0, [r4, #96]
 377:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 782              		.loc 1 377 0
 783 00ca 0123     		movs	r3, #1
 784 00cc 84F85D30 		strb	r3, [r4, #93]
 379:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 785              		.loc 1 379 0
 786 00d0 10BD     		pop	{r4, pc}
 787              	.LVL44:
 788              	.L54:
 789              	.LCFI17:
 790              		.cfi_def_cfa_offset 0
 791              		.cfi_restore 4
 792              		.cfi_restore 14
 270:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 793              		.loc 1 270 0
 794 00d2 0120     		movs	r0, #1
 795              	.LVL45:
 796 00d4 7047     		bx	lr
 797              		.cfi_endproc
 798              	.LFE136:
 800 00d6 00BF     		.section	.text.HAL_SPI_MspDeInit,"ax",%progbits
 801              		.align	2
 802              		.weak	HAL_SPI_MspDeInit
 803              		.thumb
 804              		.thumb_func
 806              	HAL_SPI_MspDeInit:
 807              	.LFB139:
 439:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 808              		.loc 1 439 0
 809              		.cfi_startproc
ARM GAS  /tmp/ccXuIaHP.s 			page 81


 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812              		@ link register save eliminated.
 813              	.LVL46:
 814 0000 7047     		bx	lr
 815              		.cfi_endproc
 816              	.LFE139:
 818 0002 00BF     		.section	.text.HAL_SPI_DeInit,"ax",%progbits
 819              		.align	2
 820              		.global	HAL_SPI_DeInit
 821              		.thumb
 822              		.thumb_func
 824              	HAL_SPI_DeInit:
 825              	.LFB137:
 389:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check the SPI handle allocation */
 826              		.loc 1 389 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830              	.LVL47:
 391:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 831              		.loc 1 391 0
 832 0000 90B1     		cbz	r0, .L61
 389:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Check the SPI handle allocation */
 833              		.loc 1 389 0
 834 0002 10B5     		push	{r4, lr}
 835              	.LCFI18:
 836              		.cfi_def_cfa_offset 8
 837              		.cfi_offset 4, -8
 838              		.cfi_offset 14, -4
 839 0004 0446     		mov	r4, r0
 399:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 840              		.loc 1 399 0
 841 0006 0223     		movs	r3, #2
 842 0008 80F85D30 		strb	r3, [r0, #93]
 402:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 843              		.loc 1 402 0
 844 000c 0268     		ldr	r2, [r0]
 845 000e 1368     		ldr	r3, [r2]
 846 0010 23F04003 		bic	r3, r3, #64
 847 0014 1360     		str	r3, [r2]
 405:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 848              		.loc 1 405 0
 849 0016 FFF7FEFF 		bl	HAL_SPI_MspDeInit
 850              	.LVL48:
 407:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_RESET;
 851              		.loc 1 407 0
 852 001a 0020     		movs	r0, #0
 853 001c 2066     		str	r0, [r4, #96]
 408:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 854              		.loc 1 408 0
 855 001e 84F85D00 		strb	r0, [r4, #93]
 411:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 856              		.loc 1 411 0
 857 0022 84F85C00 		strb	r0, [r4, #92]
 413:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 858              		.loc 1 413 0
ARM GAS  /tmp/ccXuIaHP.s 			page 82


 859 0026 10BD     		pop	{r4, pc}
 860              	.LVL49:
 861              	.L61:
 862              	.LCFI19:
 863              		.cfi_def_cfa_offset 0
 864              		.cfi_restore 4
 865              		.cfi_restore 14
 393:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 866              		.loc 1 393 0
 867 0028 0120     		movs	r0, #1
 868              	.LVL50:
 869 002a 7047     		bx	lr
 870              		.cfi_endproc
 871              	.LFE137:
 873              		.section	.text.HAL_SPI_Transmit,"ax",%progbits
 874              		.align	2
 875              		.global	HAL_SPI_Transmit
 876              		.thumb
 877              		.thumb_func
 879              	HAL_SPI_Transmit:
 880              	.LFB140:
 495:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
 881              		.loc 1 495 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 8
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 885              	.LVL51:
 886 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 887              	.LCFI20:
 888              		.cfi_def_cfa_offset 24
 889              		.cfi_offset 4, -24
 890              		.cfi_offset 5, -20
 891              		.cfi_offset 6, -16
 892              		.cfi_offset 7, -12
 893              		.cfi_offset 8, -8
 894              		.cfi_offset 14, -4
 895 0004 82B0     		sub	sp, sp, #8
 896              	.LCFI21:
 897              		.cfi_def_cfa_offset 32
 898 0006 1D46     		mov	r5, r3
 899              	.LVL52:
 503:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 900              		.loc 1 503 0
 901 0008 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 902              	.LVL53:
 903 000c 012B     		cmp	r3, #1
 904 000e 00F0C580 		beq	.L83
 905 0012 0446     		mov	r4, r0
 906 0014 0E46     		mov	r6, r1
 907 0016 9046     		mov	r8, r2
 503:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 908              		.loc 1 503 0 is_stmt 0 discriminator 2
 909 0018 0123     		movs	r3, #1
 910 001a 80F85C30 		strb	r3, [r0, #92]
 506:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 911              		.loc 1 506 0 is_stmt 1 discriminator 2
 912 001e FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccXuIaHP.s 			page 83


 913              	.LVL54:
 914 0022 0746     		mov	r7, r0
 915              	.LVL55:
 508:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 916              		.loc 1 508 0 discriminator 2
 917 0024 94F85D30 		ldrb	r3, [r4, #93]	@ zero_extendqisi2
 918 0028 DBB2     		uxtb	r3, r3
 919 002a 012B     		cmp	r3, #1
 920 002c 40F0A280 		bne	.L84
 514:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 921              		.loc 1 514 0
 922 0030 B8F1000F 		cmp	r8, #0
 923 0034 18BF     		it	ne
 924 0036 002E     		cmpne	r6, #0
 925 0038 00F09E80 		beq	.L85
 521:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 926              		.loc 1 521 0
 927 003c 0323     		movs	r3, #3
 928 003e 84F85D30 		strb	r3, [r4, #93]
 522:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
 929              		.loc 1 522 0
 930 0042 0023     		movs	r3, #0
 931 0044 2366     		str	r3, [r4, #96]
 523:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 932              		.loc 1 523 0
 933 0046 A663     		str	r6, [r4, #56]
 524:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
 934              		.loc 1 524 0
 935 0048 A4F83C80 		strh	r8, [r4, #60]	@ movhi
 525:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 936              		.loc 1 525 0
 937 004c A4F83E80 		strh	r8, [r4, #62]	@ movhi
 528:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
 938              		.loc 1 528 0
 939 0050 2364     		str	r3, [r4, #64]
 529:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = 0U;
 940              		.loc 1 529 0
 941 0052 A4F84430 		strh	r3, [r4, #68]	@ movhi
 530:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
 942              		.loc 1 530 0
 943 0056 A4F84630 		strh	r3, [r4, #70]	@ movhi
 531:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxISR       = NULL;
 944              		.loc 1 531 0
 945 005a 2365     		str	r3, [r4, #80]
 532:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 946              		.loc 1 532 0
 947 005c E364     		str	r3, [r4, #76]
 535:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 948              		.loc 1 535 0
 949 005e A368     		ldr	r3, [r4, #8]
 950 0060 B3F5004F 		cmp	r3, #32768
 951 0064 04D1     		bne	.L67
 537:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 952              		.loc 1 537 0
 953 0066 2268     		ldr	r2, [r4]
 954 0068 1368     		ldr	r3, [r2]
 955 006a 43F48043 		orr	r3, r3, #16384
ARM GAS  /tmp/ccXuIaHP.s 			page 84


 956 006e 1360     		str	r3, [r2]
 957              	.L67:
 542:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 958              		.loc 1 542 0
 959 0070 A36A     		ldr	r3, [r4, #40]
 960 0072 B3F5005F 		cmp	r3, #8192
 961 0076 0BD1     		bne	.L68
 544:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 962              		.loc 1 544 0
 963 0078 2268     		ldr	r2, [r4]
 964 007a 1368     		ldr	r3, [r2]
 965 007c 23F40053 		bic	r3, r3, #8192
 966 0080 1B04     		lsls	r3, r3, #16
 967 0082 1B0C     		lsrs	r3, r3, #16
 968 0084 1360     		str	r3, [r2]
 969 0086 2268     		ldr	r2, [r4]
 970 0088 1368     		ldr	r3, [r2]
 971 008a 43F40053 		orr	r3, r3, #8192
 972 008e 1360     		str	r3, [r2]
 973              	.L68:
 549:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 974              		.loc 1 549 0
 975 0090 2368     		ldr	r3, [r4]
 976 0092 1A68     		ldr	r2, [r3]
 977 0094 12F0400F 		tst	r2, #64
 978 0098 03D1     		bne	.L69
 552:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 979              		.loc 1 552 0
 980 009a 1A68     		ldr	r2, [r3]
 981 009c 42F04002 		orr	r2, r2, #64
 982 00a0 1A60     		str	r2, [r3]
 983              	.L69:
 556:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 984              		.loc 1 556 0
 985 00a2 E368     		ldr	r3, [r4, #12]
 986 00a4 B3F5E06F 		cmp	r3, #1792
 987 00a8 18D8     		bhi	.L70
 988 00aa 41E0     		b	.L71
 989              	.LVL56:
 990              	.L74:
 562:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 991              		.loc 1 562 0
 992 00ac 2368     		ldr	r3, [r4]
 993 00ae 9A68     		ldr	r2, [r3, #8]
 994 00b0 12F0020F 		tst	r2, #2
 995 00b4 08D0     		beq	.L72
 564:HALLIB/Src/stm32f7xx_hal_spi.c ****         pData += sizeof(uint16_t);
 996              		.loc 1 564 0
 997 00b6 36F8022B 		ldrh	r2, [r6], #2
 998              	.LVL57:
 999 00ba DA60     		str	r2, [r3, #12]
 1000              	.LVL58:
 566:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 1001              		.loc 1 566 0
 1002 00bc E38F     		ldrh	r3, [r4, #62]
 1003 00be 9BB2     		uxth	r3, r3
 1004 00c0 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccXuIaHP.s 			page 85


 1005 00c2 9BB2     		uxth	r3, r3
 1006 00c4 E387     		strh	r3, [r4, #62]	@ movhi
 1007 00c6 09E0     		b	.L70
 1008              	.L72:
 571:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1009              		.loc 1 571 0
 1010 00c8 002D     		cmp	r5, #0
 1011 00ca 57D0     		beq	.L86
 571:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1012              		.loc 1 571 0 is_stmt 0 discriminator 1
 1013 00cc B5F1FF3F 		cmp	r5, #-1
 1014 00d0 04D0     		beq	.L70
 571:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1015              		.loc 1 571 0 discriminator 2
 1016 00d2 FFF7FEFF 		bl	HAL_GetTick
 1017              	.LVL59:
 1018 00d6 C01B     		subs	r0, r0, r7
 1019 00d8 8542     		cmp	r5, r0
 1020 00da 51D9     		bls	.L87
 1021              	.L70:
 559:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1022              		.loc 1 559 0 is_stmt 1
 1023 00dc E38F     		ldrh	r3, [r4, #62]
 1024 00de 9BB2     		uxth	r3, r3
 1025 00e0 002B     		cmp	r3, #0
 1026 00e2 E3D1     		bne	.L74
 1027 00e4 28E0     		b	.L75
 1028              	.L79:
 585:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1029              		.loc 1 585 0
 1030 00e6 2368     		ldr	r3, [r4]
 1031 00e8 9A68     		ldr	r2, [r3, #8]
 1032 00ea 12F0020F 		tst	r2, #2
 1033 00ee 15D0     		beq	.L76
 587:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1034              		.loc 1 587 0
 1035 00f0 E28F     		ldrh	r2, [r4, #62]
 1036 00f2 92B2     		uxth	r2, r2
 1037 00f4 012A     		cmp	r2, #1
 1038 00f6 08D9     		bls	.L77
 590:HALLIB/Src/stm32f7xx_hal_spi.c ****           pData += sizeof(uint16_t);
 1039              		.loc 1 590 0
 1040 00f8 36F8022B 		ldrh	r2, [r6], #2
 1041              	.LVL60:
 1042 00fc DA60     		str	r2, [r3, #12]
 1043              	.LVL61:
 592:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 1044              		.loc 1 592 0
 1045 00fe E38F     		ldrh	r3, [r4, #62]
 1046 0100 9BB2     		uxth	r3, r3
 1047 0102 023B     		subs	r3, r3, #2
 1048 0104 9BB2     		uxth	r3, r3
 1049 0106 E387     		strh	r3, [r4, #62]	@ movhi
 1050 0108 12E0     		b	.L71
 1051              	.L77:
 1052              	.LVL62:
 596:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->TxXferCount--;
ARM GAS  /tmp/ccXuIaHP.s 			page 86


 1053              		.loc 1 596 0
 1054 010a 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 1055 010c 1A73     		strb	r2, [r3, #12]
 597:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 1056              		.loc 1 597 0
 1057 010e E38F     		ldrh	r3, [r4, #62]
 1058 0110 9BB2     		uxth	r3, r3
 1059 0112 013B     		subs	r3, r3, #1
 1060 0114 9BB2     		uxth	r3, r3
 1061 0116 E387     		strh	r3, [r4, #62]	@ movhi
 596:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->TxXferCount--;
 1062              		.loc 1 596 0
 1063 0118 0136     		adds	r6, r6, #1
 1064              	.LVL63:
 1065 011a 09E0     		b	.L71
 1066              	.L76:
 603:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1067              		.loc 1 603 0
 1068 011c 002D     		cmp	r5, #0
 1069 011e 31D0     		beq	.L88
 603:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1070              		.loc 1 603 0 is_stmt 0 discriminator 1
 1071 0120 B5F1FF3F 		cmp	r5, #-1
 1072 0124 04D0     		beq	.L71
 603:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1073              		.loc 1 603 0 discriminator 2
 1074 0126 FFF7FEFF 		bl	HAL_GetTick
 1075              	.LVL64:
 1076 012a C01B     		subs	r0, r0, r7
 1077 012c 8542     		cmp	r5, r0
 1078 012e 2BD9     		bls	.L89
 1079              	.L71:
 582:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1080              		.loc 1 582 0 is_stmt 1
 1081 0130 E38F     		ldrh	r3, [r4, #62]
 1082 0132 9BB2     		uxth	r3, r3
 1083 0134 002B     		cmp	r3, #0
 1084 0136 D6D1     		bne	.L79
 1085              	.L75:
 613:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1086              		.loc 1 613 0
 1087 0138 A36A     		ldr	r3, [r4, #40]
 1088 013a B3F5005F 		cmp	r3, #8192
 1089 013e 04D1     		bne	.L80
 615:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1090              		.loc 1 615 0
 1091 0140 2268     		ldr	r2, [r4]
 1092 0142 1368     		ldr	r3, [r2]
 1093 0144 43F48053 		orr	r3, r3, #4096
 1094 0148 1360     		str	r3, [r2]
 1095              	.L80:
 620:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1096              		.loc 1 620 0
 1097 014a 3A46     		mov	r2, r7
 1098 014c 2946     		mov	r1, r5
 1099 014e 2046     		mov	r0, r4
 1100 0150 FFF7FEFF 		bl	SPI_EndRxTxTransaction
ARM GAS  /tmp/ccXuIaHP.s 			page 87


 1101              	.LVL65:
 1102 0154 08B1     		cbz	r0, .L81
 622:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1103              		.loc 1 622 0
 1104 0156 2023     		movs	r3, #32
 1105 0158 2366     		str	r3, [r4, #96]
 1106              	.L81:
 626:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1107              		.loc 1 626 0
 1108 015a A368     		ldr	r3, [r4, #8]
 1109 015c 33B9     		cbnz	r3, .L82
 1110              	.LBB2:
 628:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1111              		.loc 1 628 0
 1112 015e 0193     		str	r3, [sp, #4]
 1113 0160 2368     		ldr	r3, [r4]
 1114 0162 DA68     		ldr	r2, [r3, #12]
 1115 0164 0192     		str	r2, [sp, #4]
 1116 0166 9B68     		ldr	r3, [r3, #8]
 1117 0168 0193     		str	r3, [sp, #4]
 1118 016a 019B     		ldr	r3, [sp, #4]
 1119              	.L82:
 1120              	.LBE2:
 631:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1121              		.loc 1 631 0
 1122 016c 236E     		ldr	r3, [r4, #96]
 1123 016e 6BB9     		cbnz	r3, .L90
 497:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1124              		.loc 1 497 0
 1125 0170 0020     		movs	r0, #0
 1126 0172 0CE0     		b	.L66
 1127              	.LVL66:
 1128              	.L84:
 510:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 1129              		.loc 1 510 0
 1130 0174 0220     		movs	r0, #2
 1131              	.LVL67:
 1132 0176 0AE0     		b	.L66
 1133              	.LVL68:
 1134              	.L85:
 516:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 1135              		.loc 1 516 0
 1136 0178 0120     		movs	r0, #1
 1137              	.LVL69:
 1138 017a 08E0     		b	.L66
 1139              	.L86:
 573:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
 1140              		.loc 1 573 0
 1141 017c 0320     		movs	r0, #3
 1142 017e 06E0     		b	.L66
 1143              	.L87:
 1144 0180 0320     		movs	r0, #3
 1145 0182 04E0     		b	.L66
 1146              	.L88:
 605:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
 1147              		.loc 1 605 0
 1148 0184 0320     		movs	r0, #3
ARM GAS  /tmp/ccXuIaHP.s 			page 88


 1149 0186 02E0     		b	.L66
 1150              	.L89:
 1151 0188 0320     		movs	r0, #3
 1152 018a 00E0     		b	.L66
 1153              	.L90:
 633:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1154              		.loc 1 633 0
 1155 018c 0120     		movs	r0, #1
 1156              	.L66:
 1157              	.LVL70:
 637:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Unlocked */
 1158              		.loc 1 637 0
 1159 018e 0123     		movs	r3, #1
 1160 0190 84F85D30 		strb	r3, [r4, #93]
 639:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
 1161              		.loc 1 639 0
 1162 0194 0023     		movs	r3, #0
 1163 0196 84F85C30 		strb	r3, [r4, #92]
 640:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 1164              		.loc 1 640 0
 1165 019a 00E0     		b	.L65
 1166              	.LVL71:
 1167              	.L83:
 503:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1168              		.loc 1 503 0
 1169 019c 0220     		movs	r0, #2
 1170              	.LVL72:
 1171              	.L65:
 641:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1172              		.loc 1 641 0
 1173 019e 02B0     		add	sp, sp, #8
 1174              	.LCFI22:
 1175              		.cfi_def_cfa_offset 24
 1176              		@ sp needed
 1177 01a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1178              		.cfi_endproc
 1179              	.LFE140:
 1181              		.section	.text.HAL_SPI_TransmitReceive,"ax",%progbits
 1182              		.align	2
 1183              		.global	HAL_SPI_TransmitReceive
 1184              		.thumb
 1185              		.thumb_func
 1187              	HAL_SPI_TransmitReceive:
 1188              	.LFB142:
 885:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tmp = 0U, tmp1 = 0U;
 1189              		.loc 1 885 0
 1190              		.cfi_startproc
 1191              		@ args = 4, pretend = 0, frame = 8
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 1193              	.LVL73:
 1194 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1195              	.LCFI23:
 1196              		.cfi_def_cfa_offset 24
 1197              		.cfi_offset 4, -24
 1198              		.cfi_offset 5, -20
 1199              		.cfi_offset 6, -16
 1200              		.cfi_offset 7, -12
ARM GAS  /tmp/ccXuIaHP.s 			page 89


 1201              		.cfi_offset 8, -8
 1202              		.cfi_offset 14, -4
 1203 0004 84B0     		sub	sp, sp, #16
 1204              	.LCFI24:
 1205              		.cfi_def_cfa_offset 40
 1206 0006 1F46     		mov	r7, r3
 1207              	.LVL74:
 888:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 1208              		.loc 1 888 0
 1209 0008 0023     		movs	r3, #0
 1210              	.LVL75:
 1211 000a ADF80E30 		strh	r3, [sp, #14]	@ movhi
 1212              	.LVL76:
 899:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1213              		.loc 1 899 0
 1214 000e 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 1215 0012 012B     		cmp	r3, #1
 1216 0014 00F0D581 		beq	.L129
 1217 0018 0446     		mov	r4, r0
 1218 001a 0E46     		mov	r6, r1
 1219 001c 1546     		mov	r5, r2
 899:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1220              		.loc 1 899 0 is_stmt 0 discriminator 2
 1221 001e 0123     		movs	r3, #1
 1222 0020 80F85C30 		strb	r3, [r0, #92]
 902:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1223              		.loc 1 902 0 is_stmt 1 discriminator 2
 1224 0024 FFF7FEFF 		bl	HAL_GetTick
 1225              	.LVL77:
 1226 0028 8046     		mov	r8, r0
 1227              	.LVL78:
 904:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmp1 = hspi->Init.Mode;
 1228              		.loc 1 904 0 discriminator 2
 1229 002a 94F85D30 		ldrb	r3, [r4, #93]	@ zero_extendqisi2
 1230 002e DBB2     		uxtb	r3, r3
 1231              	.LVL79:
 905:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1232              		.loc 1 905 0 discriminator 2
 1233 0030 6268     		ldr	r2, [r4, #4]
 1234              	.LVL80:
 907:HALLIB/Src/stm32f7xx_hal_spi.c ****         ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL
 1235              		.loc 1 907 0 discriminator 2
 1236 0032 012B     		cmp	r3, #1
 1237 0034 0AD0     		beq	.L94
 907:HALLIB/Src/stm32f7xx_hal_spi.c ****         ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL
 1238              		.loc 1 907 0 is_stmt 0 discriminator 1
 1239 0036 B2F5827F 		cmp	r2, #260
 1240 003a 40F0AB81 		bne	.L130
 908:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1241              		.loc 1 908 0 is_stmt 1
 1242 003e A268     		ldr	r2, [r4, #8]
 1243              	.LVL81:
 1244 0040 002A     		cmp	r2, #0
 1245 0042 40F0A981 		bne	.L131
 908:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1246              		.loc 1 908 0 is_stmt 0 discriminator 1
 1247 0046 042B     		cmp	r3, #4
ARM GAS  /tmp/ccXuIaHP.s 			page 90


 1248 0048 40F0A881 		bne	.L132
 1249              	.L94:
 914:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1250              		.loc 1 914 0 is_stmt 1
 1251 004c 002D     		cmp	r5, #0
 1252 004e 18BF     		it	ne
 1253 0050 002E     		cmpne	r6, #0
 1254 0052 00F0A581 		beq	.L133
 914:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1255              		.loc 1 914 0 is_stmt 0 discriminator 1
 1256 0056 002F     		cmp	r7, #0
 1257 0058 00F0A481 		beq	.L134
 921:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1258              		.loc 1 921 0 is_stmt 1
 1259 005c 94F85D30 		ldrb	r3, [r4, #93]	@ zero_extendqisi2
 1260              	.LVL82:
 1261 0060 DBB2     		uxtb	r3, r3
 1262 0062 042B     		cmp	r3, #4
 1263 0064 02D0     		beq	.L96
 923:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1264              		.loc 1 923 0
 1265 0066 0523     		movs	r3, #5
 1266 0068 84F85D30 		strb	r3, [r4, #93]
 1267              	.L96:
 927:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 1268              		.loc 1 927 0
 1269 006c 0023     		movs	r3, #0
 1270 006e 2366     		str	r3, [r4, #96]
 928:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
 1271              		.loc 1 928 0
 1272 0070 2564     		str	r5, [r4, #64]
 929:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 1273              		.loc 1 929 0
 1274 0072 A4F84670 		strh	r7, [r4, #70]	@ movhi
 930:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 1275              		.loc 1 930 0
 1276 0076 A4F84470 		strh	r7, [r4, #68]	@ movhi
 931:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
 1277              		.loc 1 931 0
 1278 007a A663     		str	r6, [r4, #56]
 932:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 1279              		.loc 1 932 0
 1280 007c E787     		strh	r7, [r4, #62]	@ movhi
 933:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1281              		.loc 1 933 0
 1282 007e A787     		strh	r7, [r4, #60]	@ movhi
 936:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
 1283              		.loc 1 936 0
 1284 0080 E364     		str	r3, [r4, #76]
 937:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1285              		.loc 1 937 0
 1286 0082 2365     		str	r3, [r4, #80]
 941:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1287              		.loc 1 941 0
 1288 0084 A36A     		ldr	r3, [r4, #40]
 1289 0086 B3F5005F 		cmp	r3, #8192
 1290 008a 0BD1     		bne	.L97
ARM GAS  /tmp/ccXuIaHP.s 			page 91


 943:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1291              		.loc 1 943 0
 1292 008c 2268     		ldr	r2, [r4]
 1293 008e 1368     		ldr	r3, [r2]
 1294 0090 23F40053 		bic	r3, r3, #8192
 1295 0094 1B04     		lsls	r3, r3, #16
 1296 0096 1B0C     		lsrs	r3, r3, #16
 1297 0098 1360     		str	r3, [r2]
 1298              	.LVL83:
 1299 009a 2268     		ldr	r2, [r4]
 1300 009c 1368     		ldr	r3, [r2]
 1301 009e 43F40053 		orr	r3, r3, #8192
 1302 00a2 1360     		str	r3, [r2]
 1303              	.L97:
 948:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1304              		.loc 1 948 0
 1305 00a4 E368     		ldr	r3, [r4, #12]
 1306 00a6 B3F5E06F 		cmp	r3, #1792
 1307 00aa 04D8     		bhi	.L98
 948:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1308              		.loc 1 948 0 is_stmt 0 discriminator 1
 1309 00ac B4F84630 		ldrh	r3, [r4, #70]
 1310 00b0 9BB2     		uxth	r3, r3
 1311 00b2 012B     		cmp	r3, #1
 1312 00b4 05D9     		bls	.L99
 1313              	.L98:
 951:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1314              		.loc 1 951 0 is_stmt 1
 1315 00b6 2268     		ldr	r2, [r4]
 1316 00b8 5368     		ldr	r3, [r2, #4]
 1317 00ba 23F48053 		bic	r3, r3, #4096
 1318 00be 5360     		str	r3, [r2, #4]
 1319 00c0 04E0     		b	.L100
 1320              	.L99:
 956:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1321              		.loc 1 956 0
 1322 00c2 2268     		ldr	r2, [r4]
 1323 00c4 5368     		ldr	r3, [r2, #4]
 1324 00c6 43F48053 		orr	r3, r3, #4096
 1325 00ca 5360     		str	r3, [r2, #4]
 1326              	.L100:
 960:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1327              		.loc 1 960 0
 1328 00cc 2368     		ldr	r3, [r4]
 1329 00ce 1A68     		ldr	r2, [r3]
 1330 00d0 12F0400F 		tst	r2, #64
 1331 00d4 03D1     		bne	.L101
 963:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1332              		.loc 1 963 0
 1333 00d6 1A68     		ldr	r2, [r3]
 1334 00d8 42F04002 		orr	r2, r2, #64
 1335 00dc 1A60     		str	r2, [r3]
 1336              	.L101:
 967:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1337              		.loc 1 967 0
 1338 00de E368     		ldr	r3, [r4, #12]
 1339 00e0 B3F5E06F 		cmp	r3, #1792
ARM GAS  /tmp/ccXuIaHP.s 			page 92


 1340 00e4 6AD9     		bls	.L102
 969:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1341              		.loc 1 969 0
 1342 00e6 6368     		ldr	r3, [r4, #4]
 1343 00e8 1BB1     		cbz	r3, .L103
 969:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1344              		.loc 1 969 0 is_stmt 0 discriminator 1
 1345 00ea E38F     		ldrh	r3, [r4, #62]
 1346 00ec 9BB2     		uxth	r3, r3
 1347 00ee 012B     		cmp	r3, #1
 1348 00f0 08D1     		bne	.L104
 1349              	.L103:
 971:HALLIB/Src/stm32f7xx_hal_spi.c ****       pTxData += sizeof(uint16_t);
 1350              		.loc 1 971 0 is_stmt 1
 1351 00f2 2368     		ldr	r3, [r4]
 1352 00f4 36F8022B 		ldrh	r2, [r6], #2
 1353              	.LVL84:
 1354 00f8 DA60     		str	r2, [r3, #12]
 1355              	.LVL85:
 973:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 1356              		.loc 1 973 0
 1357 00fa E38F     		ldrh	r3, [r4, #62]
 1358 00fc 9BB2     		uxth	r3, r3
 1359 00fe 013B     		subs	r3, r3, #1
 1360 0100 9BB2     		uxth	r3, r3
 1361 0102 E387     		strh	r3, [r4, #62]	@ movhi
 1362              	.L104:
1007:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 1363              		.loc 1 1007 0
 1364 0104 0127     		movs	r7, #1
 1365 0106 4FE0     		b	.L105
 1366              	.LVL86:
 1367              	.L110:
 978:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1368              		.loc 1 978 0
 1369 0108 002F     		cmp	r7, #0
 1370 010a 2DD0     		beq	.L106
 978:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1371              		.loc 1 978 0 is_stmt 0 discriminator 1
 1372 010c E38F     		ldrh	r3, [r4, #62]
 1373 010e 9BB2     		uxth	r3, r3
 1374 0110 53B3     		cbz	r3, .L106
 978:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1375              		.loc 1 978 0 discriminator 2
 1376 0112 2368     		ldr	r3, [r4]
 1377 0114 9A68     		ldr	r2, [r3, #8]
 1378 0116 12F0020F 		tst	r2, #2
 1379 011a 25D0     		beq	.L106
 980:HALLIB/Src/stm32f7xx_hal_spi.c ****         pTxData += sizeof(uint16_t);
 1380              		.loc 1 980 0 is_stmt 1
 1381 011c 36F8022B 		ldrh	r2, [r6], #2
 1382              	.LVL87:
 1383 0120 DA60     		str	r2, [r3, #12]
 1384              	.LVL88:
 982:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Next Data is a reception (Rx). Tx not allowed */
 1385              		.loc 1 982 0
 1386 0122 E38F     		ldrh	r3, [r4, #62]
ARM GAS  /tmp/ccXuIaHP.s 			page 93


 1387 0124 9BB2     		uxth	r3, r3
 1388 0126 013B     		subs	r3, r3, #1
 1389 0128 9BB2     		uxth	r3, r3
 1390 012a E387     		strh	r3, [r4, #62]	@ movhi
 1391              	.LVL89:
 988:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1392              		.loc 1 988 0
 1393 012c E38F     		ldrh	r3, [r4, #62]
 1394 012e 9BB2     		uxth	r3, r3
 1395 0130 BBB9     		cbnz	r3, .L135
 988:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1396              		.loc 1 988 0 is_stmt 0 discriminator 1
 1397 0132 A36A     		ldr	r3, [r4, #40]
 1398 0134 B3F5005F 		cmp	r3, #8192
 1399 0138 15D1     		bne	.L136
 991:HALLIB/Src/stm32f7xx_hal_spi.c ****           {
 1400              		.loc 1 991 0 is_stmt 1
 1401 013a 2368     		ldr	r3, [r4]
 1402 013c 1A68     		ldr	r2, [r3]
 1403 013e 12F0040F 		tst	r2, #4
 1404 0142 07D1     		bne	.L107
 991:HALLIB/Src/stm32f7xx_hal_spi.c ****           {
 1405              		.loc 1 991 0 is_stmt 0 discriminator 1
 1406 0144 5A68     		ldr	r2, [r3, #4]
 1407 0146 12F0080F 		tst	r2, #8
 1408 014a 03D0     		beq	.L107
 993:HALLIB/Src/stm32f7xx_hal_spi.c ****           }
 1409              		.loc 1 993 0 is_stmt 1
 1410 014c 1A68     		ldr	r2, [r3]
 1411 014e 42F40072 		orr	r2, r2, #512
 1412 0152 1A60     		str	r2, [r3]
 1413              	.L107:
 995:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 1414              		.loc 1 995 0
 1415 0154 2268     		ldr	r2, [r4]
 1416 0156 1368     		ldr	r3, [r2]
 1417 0158 43F48053 		orr	r3, r3, #4096
 1418 015c 1360     		str	r3, [r2]
 984:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1419              		.loc 1 984 0
 1420 015e 0027     		movs	r7, #0
 1421 0160 02E0     		b	.L106
 1422              	.L135:
 1423 0162 0027     		movs	r7, #0
 1424 0164 00E0     		b	.L106
 1425              	.L136:
 1426 0166 0027     		movs	r7, #0
 1427              	.LVL90:
 1428              	.L106:
1001:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1429              		.loc 1 1001 0
 1430 0168 B4F84630 		ldrh	r3, [r4, #70]
 1431 016c 9BB2     		uxth	r3, r3
 1432 016e 7BB1     		cbz	r3, .L108
1001:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1433              		.loc 1 1001 0 is_stmt 0 discriminator 1
 1434 0170 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccXuIaHP.s 			page 94


 1435 0172 9A68     		ldr	r2, [r3, #8]
 1436 0174 12F0010F 		tst	r2, #1
 1437 0178 0AD0     		beq	.L108
1003:HALLIB/Src/stm32f7xx_hal_spi.c ****         pRxData += sizeof(uint16_t);
 1438              		.loc 1 1003 0 is_stmt 1
 1439 017a DB68     		ldr	r3, [r3, #12]
 1440 017c 25F8023B 		strh	r3, [r5], #2	@ movhi
 1441              	.LVL91:
1005:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* Next Data is a Transmission (Tx). Tx is allowed */
 1442              		.loc 1 1005 0
 1443 0180 B4F84630 		ldrh	r3, [r4, #70]
 1444 0184 9BB2     		uxth	r3, r3
 1445 0186 013B     		subs	r3, r3, #1
 1446 0188 9BB2     		uxth	r3, r3
 1447 018a A4F84630 		strh	r3, [r4, #70]	@ movhi
 1448              	.LVL92:
1007:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 1449              		.loc 1 1007 0
 1450 018e 0127     		movs	r7, #1
 1451              	.LVL93:
 1452              	.L108:
1009:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1453              		.loc 1 1009 0
 1454 0190 0A9B     		ldr	r3, [sp, #40]
 1455 0192 B3F1FF3F 		cmp	r3, #-1
 1456 0196 07D0     		beq	.L105
1009:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1457              		.loc 1 1009 0 is_stmt 0 discriminator 1
 1458 0198 FFF7FEFF 		bl	HAL_GetTick
 1459              	.LVL94:
 1460 019c C8EB0000 		rsb	r0, r8, r0
 1461 01a0 0A9B     		ldr	r3, [sp, #40]
 1462 01a2 8342     		cmp	r3, r0
 1463 01a4 40F20081 		bls	.L137
 1464              	.LVL95:
 1465              	.L105:
 975:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1466              		.loc 1 975 0 is_stmt 1
 1467 01a8 E38F     		ldrh	r3, [r4, #62]
 1468 01aa 9BB2     		uxth	r3, r3
 1469 01ac 002B     		cmp	r3, #0
 1470 01ae ABD1     		bne	.L110
 975:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1471              		.loc 1 975 0 is_stmt 0 discriminator 1
 1472 01b0 B4F84630 		ldrh	r3, [r4, #70]
 1473 01b4 9BB2     		uxth	r3, r3
 1474 01b6 002B     		cmp	r3, #0
 1475 01b8 A6D1     		bne	.L110
 1476 01ba 94E0     		b	.L111
 1477              	.LVL96:
 1478              	.L102:
1019:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1479              		.loc 1 1019 0 is_stmt 1
 1480 01bc 6368     		ldr	r3, [r4, #4]
 1481 01be 1BB1     		cbz	r3, .L112
1019:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1482              		.loc 1 1019 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccXuIaHP.s 			page 95


 1483 01c0 E38F     		ldrh	r3, [r4, #62]
 1484 01c2 9BB2     		uxth	r3, r3
 1485 01c4 012B     		cmp	r3, #1
 1486 01c6 08D1     		bne	.L113
 1487              	.L112:
1021:HALLIB/Src/stm32f7xx_hal_spi.c ****       pTxData += sizeof(uint8_t);
 1488              		.loc 1 1021 0 is_stmt 1
 1489 01c8 2368     		ldr	r3, [r4]
 1490 01ca 16F8012B 		ldrb	r2, [r6], #1	@ zero_extendqisi2
 1491              	.LVL97:
 1492 01ce 1A73     		strb	r2, [r3, #12]
 1493              	.LVL98:
1023:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 1494              		.loc 1 1023 0
 1495 01d0 E38F     		ldrh	r3, [r4, #62]
 1496 01d2 9BB2     		uxth	r3, r3
 1497 01d4 013B     		subs	r3, r3, #1
 1498 01d6 9BB2     		uxth	r3, r3
 1499 01d8 E387     		strh	r3, [r4, #62]	@ movhi
 1500              	.L113:
1078:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 1501              		.loc 1 1078 0
 1502 01da 0127     		movs	r7, #1
 1503 01dc 79E0     		b	.L114
 1504              	.LVL99:
 1505              	.L122:
1028:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1506              		.loc 1 1028 0
 1507 01de 002F     		cmp	r7, #0
 1508 01e0 3BD0     		beq	.L115
1028:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1509              		.loc 1 1028 0 is_stmt 0 discriminator 1
 1510 01e2 E38F     		ldrh	r3, [r4, #62]
 1511 01e4 9BB2     		uxth	r3, r3
 1512 01e6 002B     		cmp	r3, #0
 1513 01e8 37D0     		beq	.L115
1028:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1514              		.loc 1 1028 0 discriminator 2
 1515 01ea 2368     		ldr	r3, [r4]
 1516 01ec 9A68     		ldr	r2, [r3, #8]
 1517 01ee 12F0020F 		tst	r2, #2
 1518 01f2 32D0     		beq	.L115
1030:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1519              		.loc 1 1030 0 is_stmt 1
 1520 01f4 E28F     		ldrh	r2, [r4, #62]
 1521 01f6 92B2     		uxth	r2, r2
 1522 01f8 012A     		cmp	r2, #1
 1523 01fa 08D9     		bls	.L116
1032:HALLIB/Src/stm32f7xx_hal_spi.c ****           pTxData += sizeof(uint16_t);
 1524              		.loc 1 1032 0
 1525 01fc 36F8022B 		ldrh	r2, [r6], #2
 1526              	.LVL100:
 1527 0200 DA60     		str	r2, [r3, #12]
 1528              	.LVL101:
1034:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 1529              		.loc 1 1034 0
 1530 0202 E38F     		ldrh	r3, [r4, #62]
ARM GAS  /tmp/ccXuIaHP.s 			page 96


 1531 0204 9BB2     		uxth	r3, r3
 1532 0206 023B     		subs	r3, r3, #2
 1533 0208 9BB2     		uxth	r3, r3
 1534 020a E387     		strh	r3, [r4, #62]	@ movhi
 1535 020c 07E0     		b	.L117
 1536              	.L116:
 1537              	.LVL102:
1038:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->TxXferCount--;
 1538              		.loc 1 1038 0
 1539 020e 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 1540 0210 1A73     		strb	r2, [r3, #12]
1039:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 1541              		.loc 1 1039 0
 1542 0212 E38F     		ldrh	r3, [r4, #62]
 1543 0214 9BB2     		uxth	r3, r3
 1544 0216 013B     		subs	r3, r3, #1
 1545 0218 9BB2     		uxth	r3, r3
 1546 021a E387     		strh	r3, [r4, #62]	@ movhi
1038:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->TxXferCount--;
 1547              		.loc 1 1038 0
 1548 021c 0136     		adds	r6, r6, #1
 1549              	.LVL103:
 1550              	.L117:
1046:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1551              		.loc 1 1046 0
 1552 021e E38F     		ldrh	r3, [r4, #62]
 1553 0220 9BB2     		uxth	r3, r3
 1554 0222 BBB9     		cbnz	r3, .L138
1046:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1555              		.loc 1 1046 0 is_stmt 0 discriminator 1
 1556 0224 A36A     		ldr	r3, [r4, #40]
 1557 0226 B3F5005F 		cmp	r3, #8192
 1558 022a 15D1     		bne	.L139
1049:HALLIB/Src/stm32f7xx_hal_spi.c ****           {
 1559              		.loc 1 1049 0 is_stmt 1
 1560 022c 2368     		ldr	r3, [r4]
 1561 022e 1A68     		ldr	r2, [r3]
 1562 0230 12F0040F 		tst	r2, #4
 1563 0234 07D1     		bne	.L118
1049:HALLIB/Src/stm32f7xx_hal_spi.c ****           {
 1564              		.loc 1 1049 0 is_stmt 0 discriminator 1
 1565 0236 5A68     		ldr	r2, [r3, #4]
 1566 0238 12F0080F 		tst	r2, #8
 1567 023c 03D0     		beq	.L118
1051:HALLIB/Src/stm32f7xx_hal_spi.c ****           }
 1568              		.loc 1 1051 0 is_stmt 1
 1569 023e 1A68     		ldr	r2, [r3]
 1570 0240 42F40072 		orr	r2, r2, #512
 1571 0244 1A60     		str	r2, [r3]
 1572              	.L118:
1053:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 1573              		.loc 1 1053 0
 1574 0246 2268     		ldr	r2, [r4]
 1575 0248 1368     		ldr	r3, [r2]
 1576 024a 43F48053 		orr	r3, r3, #4096
 1577 024e 1360     		str	r3, [r2]
1042:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 97


 1578              		.loc 1 1042 0
 1579 0250 0027     		movs	r7, #0
 1580 0252 02E0     		b	.L115
 1581              	.L138:
 1582 0254 0027     		movs	r7, #0
 1583 0256 00E0     		b	.L115
 1584              	.L139:
 1585 0258 0027     		movs	r7, #0
 1586              	.LVL104:
 1587              	.L115:
1059:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1588              		.loc 1 1059 0
 1589 025a B4F84630 		ldrh	r3, [r4, #70]
 1590 025e 9BB2     		uxth	r3, r3
 1591 0260 63B3     		cbz	r3, .L119
1059:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1592              		.loc 1 1059 0 is_stmt 0 discriminator 1
 1593 0262 2368     		ldr	r3, [r4]
 1594 0264 9A68     		ldr	r2, [r3, #8]
 1595 0266 12F0010F 		tst	r2, #1
 1596 026a 27D0     		beq	.L119
1061:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 1597              		.loc 1 1061 0 is_stmt 1
 1598 026c B4F84620 		ldrh	r2, [r4, #70]
 1599 0270 92B2     		uxth	r2, r2
 1600 0272 012A     		cmp	r2, #1
 1601 0274 15D9     		bls	.L120
1063:HALLIB/Src/stm32f7xx_hal_spi.c ****           pRxData += sizeof(uint16_t);
 1602              		.loc 1 1063 0
 1603 0276 DB68     		ldr	r3, [r3, #12]
 1604 0278 25F8023B 		strh	r3, [r5], #2	@ movhi
 1605              	.LVL105:
1065:HALLIB/Src/stm32f7xx_hal_spi.c ****           if (hspi->RxXferCount <= 1U)
 1606              		.loc 1 1065 0
 1607 027c B4F84630 		ldrh	r3, [r4, #70]
 1608 0280 9BB2     		uxth	r3, r3
 1609 0282 023B     		subs	r3, r3, #2
 1610 0284 9BB2     		uxth	r3, r3
 1611 0286 A4F84630 		strh	r3, [r4, #70]	@ movhi
1066:HALLIB/Src/stm32f7xx_hal_spi.c ****           {
 1612              		.loc 1 1066 0
 1613 028a B4F84630 		ldrh	r3, [r4, #70]
 1614 028e 9BB2     		uxth	r3, r3
 1615 0290 012B     		cmp	r3, #1
 1616 0292 12D8     		bhi	.L140
1069:HALLIB/Src/stm32f7xx_hal_spi.c ****           }
 1617              		.loc 1 1069 0
 1618 0294 2268     		ldr	r2, [r4]
 1619 0296 5368     		ldr	r3, [r2, #4]
 1620 0298 43F48053 		orr	r3, r3, #4096
 1621 029c 5360     		str	r3, [r2, #4]
1078:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 1622              		.loc 1 1078 0
 1623 029e 0127     		movs	r7, #1
 1624              	.LVL106:
 1625 02a0 0CE0     		b	.L119
 1626              	.LVL107:
ARM GAS  /tmp/ccXuIaHP.s 			page 98


 1627              	.L120:
1074:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->RxXferCount--;
 1628              		.loc 1 1074 0
 1629 02a2 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1630 02a4 2B70     		strb	r3, [r5]
1075:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 1631              		.loc 1 1075 0
 1632 02a6 B4F84630 		ldrh	r3, [r4, #70]
 1633 02aa 9BB2     		uxth	r3, r3
 1634 02ac 013B     		subs	r3, r3, #1
 1635 02ae 9BB2     		uxth	r3, r3
 1636 02b0 A4F84630 		strh	r3, [r4, #70]	@ movhi
1074:HALLIB/Src/stm32f7xx_hal_spi.c ****           hspi->RxXferCount--;
 1637              		.loc 1 1074 0
 1638 02b4 0135     		adds	r5, r5, #1
 1639              	.LVL108:
1078:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 1640              		.loc 1 1078 0
 1641 02b6 0127     		movs	r7, #1
 1642              	.LVL109:
 1643 02b8 00E0     		b	.L119
 1644              	.LVL110:
 1645              	.L140:
 1646 02ba 0127     		movs	r7, #1
 1647              	.LVL111:
 1648              	.L119:
1080:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1649              		.loc 1 1080 0
 1650 02bc 0A9B     		ldr	r3, [sp, #40]
 1651 02be B3F1FF3F 		cmp	r3, #-1
 1652 02c2 06D0     		beq	.L114
1080:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1653              		.loc 1 1080 0 is_stmt 0 discriminator 1
 1654 02c4 FFF7FEFF 		bl	HAL_GetTick
 1655              	.LVL112:
 1656 02c8 C8EB0000 		rsb	r0, r8, r0
 1657 02cc 0A9B     		ldr	r3, [sp, #40]
 1658 02ce 8342     		cmp	r3, r0
 1659 02d0 6CD9     		bls	.L141
 1660              	.LVL113:
 1661              	.L114:
1025:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1662              		.loc 1 1025 0 is_stmt 1
 1663 02d2 E38F     		ldrh	r3, [r4, #62]
 1664 02d4 9BB2     		uxth	r3, r3
 1665 02d6 002B     		cmp	r3, #0
 1666 02d8 81D1     		bne	.L122
1025:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1667              		.loc 1 1025 0 is_stmt 0 discriminator 1
 1668 02da B4F84630 		ldrh	r3, [r4, #70]
 1669 02de 9BB2     		uxth	r3, r3
 1670 02e0 002B     		cmp	r3, #0
 1671 02e2 7FF47CAF 		bne	.L122
 1672              	.L111:
1090:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1673              		.loc 1 1090 0 is_stmt 1
 1674 02e6 A36A     		ldr	r3, [r4, #40]
ARM GAS  /tmp/ccXuIaHP.s 			page 99


 1675 02e8 B3F5005F 		cmp	r3, #8192
 1676 02ec 38D1     		bne	.L123
1093:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1677              		.loc 1 1093 0
 1678 02ee CDF80080 		str	r8, [sp]
 1679 02f2 0A9B     		ldr	r3, [sp, #40]
 1680 02f4 0122     		movs	r2, #1
 1681 02f6 1146     		mov	r1, r2
 1682 02f8 2046     		mov	r0, r4
 1683 02fa FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 1684              	.LVL114:
 1685 02fe 28B1     		cbz	r0, .L124
1096:HALLIB/Src/stm32f7xx_hal_spi.c ****       errorcode = HAL_TIMEOUT;
 1686              		.loc 1 1096 0
 1687 0300 236E     		ldr	r3, [r4, #96]
 1688 0302 43F00203 		orr	r3, r3, #2
 1689 0306 2366     		str	r3, [r4, #96]
 1690              	.LVL115:
1097:HALLIB/Src/stm32f7xx_hal_spi.c ****       goto error;
 1691              		.loc 1 1097 0
 1692 0308 0325     		movs	r5, #3
 1693              	.LVL116:
1098:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 1694              		.loc 1 1098 0
 1695 030a 52E0     		b	.L95
 1696              	.LVL117:
 1697              	.L124:
1101:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 1698              		.loc 1 1101 0
 1699 030c E368     		ldr	r3, [r4, #12]
 1700 030e B3F5706F 		cmp	r3, #3840
 1701 0312 07D1     		bne	.L125
1103:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* To avoid GCC warning */
 1702              		.loc 1 1103 0
 1703 0314 2368     		ldr	r3, [r4]
 1704 0316 DB68     		ldr	r3, [r3, #12]
 1705 0318 9BB2     		uxth	r3, r3
 1706 031a ADF80E30 		strh	r3, [sp, #14]	@ movhi
1105:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 1707              		.loc 1 1105 0
 1708 031e BDF80E30 		ldrh	r3, [sp, #14]
 1709 0322 1DE0     		b	.L123
 1710              	.L125:
1109:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* To avoid GCC warning */
 1711              		.loc 1 1109 0
 1712 0324 2368     		ldr	r3, [r4]
 1713 0326 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1714 0328 ADF80E30 		strh	r3, [sp, #14]	@ movhi
1111:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1715              		.loc 1 1111 0
 1716 032c BDF80E30 		ldrh	r3, [sp, #14]
1113:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 1717              		.loc 1 1113 0
 1718 0330 236B     		ldr	r3, [r4, #48]
 1719 0332 022B     		cmp	r3, #2
 1720 0334 14D1     		bne	.L123
1115:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
ARM GAS  /tmp/ccXuIaHP.s 			page 100


 1721              		.loc 1 1115 0
 1722 0336 CDF80080 		str	r8, [sp]
 1723 033a 0A9B     		ldr	r3, [sp, #40]
 1724 033c 0122     		movs	r2, #1
 1725 033e 1146     		mov	r1, r2
 1726 0340 2046     		mov	r0, r4
 1727 0342 FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 1728              	.LVL118:
 1729 0346 28B1     		cbz	r0, .L126
1118:HALLIB/Src/stm32f7xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
 1730              		.loc 1 1118 0
 1731 0348 236E     		ldr	r3, [r4, #96]
 1732 034a 43F00203 		orr	r3, r3, #2
 1733 034e 2366     		str	r3, [r4, #96]
 1734              	.LVL119:
1119:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
 1735              		.loc 1 1119 0
 1736 0350 0325     		movs	r5, #3
 1737              	.LVL120:
1120:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 1738              		.loc 1 1120 0
 1739 0352 2EE0     		b	.L95
 1740              	.LVL121:
 1741              	.L126:
1122:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
 1742              		.loc 1 1122 0
 1743 0354 2368     		ldr	r3, [r4]
 1744 0356 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1745 0358 ADF80E30 		strh	r3, [sp, #14]	@ movhi
1124:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 1746              		.loc 1 1124 0
 1747 035c BDF80E30 		ldrh	r3, [sp, #14]
 1748              	.L123:
1130:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1749              		.loc 1 1130 0
 1750 0360 2368     		ldr	r3, [r4]
 1751 0362 9A68     		ldr	r2, [r3, #8]
 1752 0364 12F0100F 		tst	r2, #16
 1753 0368 08D0     		beq	.L142
1132:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Clear CRC Flag */
 1754              		.loc 1 1132 0
 1755 036a 226E     		ldr	r2, [r4, #96]
 1756 036c 42F00202 		orr	r2, r2, #2
 1757 0370 2266     		str	r2, [r4, #96]
1134:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1758              		.loc 1 1134 0
 1759 0372 4FF6EF72 		movw	r2, #65519
 1760 0376 9A60     		str	r2, [r3, #8]
 1761              	.LVL122:
1136:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1762              		.loc 1 1136 0
 1763 0378 0125     		movs	r5, #1
 1764              	.LVL123:
 1765 037a 00E0     		b	.L127
 1766              	.LVL124:
 1767              	.L142:
 893:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 101


 1768              		.loc 1 893 0
 1769 037c 0025     		movs	r5, #0
 1770              	.LVL125:
 1771              	.L127:
1141:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1772              		.loc 1 1141 0
 1773 037e 4246     		mov	r2, r8
 1774 0380 0A99     		ldr	r1, [sp, #40]
 1775 0382 2046     		mov	r0, r4
 1776 0384 FFF7FEFF 		bl	SPI_EndRxTxTransaction
 1777              	.LVL126:
 1778 0388 08B1     		cbz	r0, .L128
1143:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1779              		.loc 1 1143 0
 1780 038a 2023     		movs	r3, #32
 1781 038c 2366     		str	r3, [r4, #96]
 1782              	.L128:
1146:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1783              		.loc 1 1146 0
 1784 038e 236E     		ldr	r3, [r4, #96]
 1785 0390 73B9     		cbnz	r3, .L143
 1786 0392 0EE0     		b	.L95
 1787              	.LVL127:
 1788              	.L130:
 910:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 1789              		.loc 1 910 0
 1790 0394 0225     		movs	r5, #2
 1791              	.LVL128:
 1792 0396 0CE0     		b	.L95
 1793              	.LVL129:
 1794              	.L131:
 1795 0398 0225     		movs	r5, #2
 1796              	.LVL130:
 1797 039a 0AE0     		b	.L95
 1798              	.LVL131:
 1799              	.L132:
 1800 039c 0225     		movs	r5, #2
 1801              	.LVL132:
 1802 039e 08E0     		b	.L95
 1803              	.LVL133:
 1804              	.L133:
 916:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 1805              		.loc 1 916 0
 1806 03a0 0125     		movs	r5, #1
 1807              	.LVL134:
 1808 03a2 06E0     		b	.L95
 1809              	.LVL135:
 1810              	.L134:
 1811 03a4 0125     		movs	r5, #1
 1812              	.LVL136:
 1813 03a6 04E0     		b	.L95
 1814              	.LVL137:
 1815              	.L137:
1011:HALLIB/Src/stm32f7xx_hal_spi.c ****         goto error;
 1816              		.loc 1 1011 0
 1817 03a8 0325     		movs	r5, #3
 1818              	.LVL138:
ARM GAS  /tmp/ccXuIaHP.s 			page 102


 1819 03aa 02E0     		b	.L95
 1820              	.LVL139:
 1821              	.L141:
1082:HALLIB/Src/stm32f7xx_hal_spi.c ****         goto error;
 1822              		.loc 1 1082 0
 1823 03ac 0325     		movs	r5, #3
 1824              	.LVL140:
 1825 03ae 00E0     		b	.L95
 1826              	.LVL141:
 1827              	.L143:
1148:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1828              		.loc 1 1148 0
 1829 03b0 0125     		movs	r5, #1
 1830              	.LVL142:
 1831              	.L95:
1152:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
 1832              		.loc 1 1152 0
 1833 03b2 0123     		movs	r3, #1
 1834 03b4 84F85D30 		strb	r3, [r4, #93]
1153:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
 1835              		.loc 1 1153 0
 1836 03b8 0023     		movs	r3, #0
 1837 03ba 84F85C30 		strb	r3, [r4, #92]
1154:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 1838              		.loc 1 1154 0
 1839 03be 2846     		mov	r0, r5
 1840 03c0 00E0     		b	.L93
 1841              	.LVL143:
 1842              	.L129:
 899:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1843              		.loc 1 899 0
 1844 03c2 0220     		movs	r0, #2
 1845              	.LVL144:
 1846              	.L93:
1155:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1847              		.loc 1 1155 0
 1848 03c4 04B0     		add	sp, sp, #16
 1849              	.LCFI25:
 1850              		.cfi_def_cfa_offset 24
 1851              		@ sp needed
 1852 03c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1853              		.cfi_endproc
 1854              	.LFE142:
 1856 03ca 00BF     		.section	.text.HAL_SPI_Receive,"ax",%progbits
 1857              		.align	2
 1858              		.global	HAL_SPI_Receive
 1859              		.thumb
 1860              		.thumb_func
 1862              	HAL_SPI_Receive:
 1863              	.LFB141:
 653:HALLIB/Src/stm32f7xx_hal_spi.c **** #if (USE_SPI_CRC != 0U)
 1864              		.loc 1 653 0
 1865              		.cfi_startproc
 1866              		@ args = 0, pretend = 0, frame = 8
 1867              		@ frame_needed = 0, uses_anonymous_args = 0
 1868              	.LVL145:
 1869 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccXuIaHP.s 			page 103


 1870              	.LCFI26:
 1871              		.cfi_def_cfa_offset 24
 1872              		.cfi_offset 4, -24
 1873              		.cfi_offset 5, -20
 1874              		.cfi_offset 6, -16
 1875              		.cfi_offset 7, -12
 1876              		.cfi_offset 8, -8
 1877              		.cfi_offset 14, -4
 1878 0004 84B0     		sub	sp, sp, #16
 1879              	.LCFI27:
 1880              		.cfi_def_cfa_offset 40
 1881 0006 0446     		mov	r4, r0
 1882 0008 0E46     		mov	r6, r1
 1883 000a 9046     		mov	r8, r2
 1884 000c 1D46     		mov	r5, r3
 655:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 1885              		.loc 1 655 0
 1886 000e 0023     		movs	r3, #0
 1887              	.LVL146:
 1888 0010 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 1889              	.LVL147:
 660:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1890              		.loc 1 660 0
 1891 0014 4368     		ldr	r3, [r0, #4]
 1892 0016 B3F5827F 		cmp	r3, #260
 1893 001a 0AD1     		bne	.L146
 660:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1894              		.loc 1 660 0 is_stmt 0 discriminator 1
 1895 001c 8368     		ldr	r3, [r0, #8]
 1896 001e 43B9     		cbnz	r3, .L146
 662:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
 1897              		.loc 1 662 0 is_stmt 1
 1898 0020 0423     		movs	r3, #4
 1899 0022 80F85D30 		strb	r3, [r0, #93]
 664:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1900              		.loc 1 664 0
 1901 0026 0095     		str	r5, [sp]
 1902 0028 1346     		mov	r3, r2
 1903 002a 0A46     		mov	r2, r1
 1904              	.LVL148:
 1905 002c FFF7FEFF 		bl	HAL_SPI_TransmitReceive
 1906              	.LVL149:
 1907 0030 2AE1     		b	.L147
 1908              	.LVL150:
 1909              	.L146:
 668:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1910              		.loc 1 668 0
 1911 0032 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
 1912 0036 012B     		cmp	r3, #1
 1913 0038 00F02581 		beq	.L171
 668:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1914              		.loc 1 668 0 is_stmt 0 discriminator 2
 1915 003c 0123     		movs	r3, #1
 1916 003e 84F85C30 		strb	r3, [r4, #92]
 671:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1917              		.loc 1 671 0 is_stmt 1 discriminator 2
 1918 0042 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccXuIaHP.s 			page 104


 1919              	.LVL151:
 1920 0046 0746     		mov	r7, r0
 1921              	.LVL152:
 673:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1922              		.loc 1 673 0 discriminator 2
 1923 0048 94F85D30 		ldrb	r3, [r4, #93]	@ zero_extendqisi2
 1924 004c DBB2     		uxtb	r3, r3
 1925 004e 012B     		cmp	r3, #1
 1926 0050 40F00381 		bne	.L172
 679:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1927              		.loc 1 679 0
 1928 0054 B8F1000F 		cmp	r8, #0
 1929 0058 18BF     		it	ne
 1930 005a 002E     		cmpne	r6, #0
 1931 005c 00F0FF80 		beq	.L173
 686:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 1932              		.loc 1 686 0
 1933 0060 0423     		movs	r3, #4
 1934 0062 84F85D30 		strb	r3, [r4, #93]
 687:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
 1935              		.loc 1 687 0
 1936 0066 0023     		movs	r3, #0
 1937 0068 2366     		str	r3, [r4, #96]
 688:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 1938              		.loc 1 688 0
 1939 006a 2664     		str	r6, [r4, #64]
 689:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
 1940              		.loc 1 689 0
 1941 006c A4F84480 		strh	r8, [r4, #68]	@ movhi
 690:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1942              		.loc 1 690 0
 1943 0070 A4F84680 		strh	r8, [r4, #70]	@ movhi
 693:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
 1944              		.loc 1 693 0
 1945 0074 A363     		str	r3, [r4, #56]
 694:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 1946              		.loc 1 694 0
 1947 0076 A387     		strh	r3, [r4, #60]	@ movhi
 695:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxISR       = NULL;
 1948              		.loc 1 695 0
 1949 0078 E387     		strh	r3, [r4, #62]	@ movhi
 696:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
 1950              		.loc 1 696 0
 1951 007a E364     		str	r3, [r4, #76]
 697:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 1952              		.loc 1 697 0
 1953 007c 2365     		str	r3, [r4, #80]
 701:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1954              		.loc 1 701 0
 1955 007e A36A     		ldr	r3, [r4, #40]
 1956 0080 B3F5005F 		cmp	r3, #8192
 1957 0084 12D1     		bne	.L149
 703:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* this is done to handle the CRCNEXT before the latest data */
 1958              		.loc 1 703 0
 1959 0086 2268     		ldr	r2, [r4]
 1960 0088 1368     		ldr	r3, [r2]
 1961 008a 23F40053 		bic	r3, r3, #8192
ARM GAS  /tmp/ccXuIaHP.s 			page 105


 1962 008e 1B04     		lsls	r3, r3, #16
 1963 0090 1B0C     		lsrs	r3, r3, #16
 1964 0092 1360     		str	r3, [r2]
 1965 0094 2268     		ldr	r2, [r4]
 1966 0096 1368     		ldr	r3, [r2]
 1967 0098 43F40053 		orr	r3, r3, #8192
 1968 009c 1360     		str	r3, [r2]
 705:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1969              		.loc 1 705 0
 1970 009e B4F84630 		ldrh	r3, [r4, #70]
 1971 00a2 9BB2     		uxth	r3, r3
 1972 00a4 013B     		subs	r3, r3, #1
 1973 00a6 9BB2     		uxth	r3, r3
 1974 00a8 A4F84630 		strh	r3, [r4, #70]	@ movhi
 1975              	.L149:
 710:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1976              		.loc 1 710 0
 1977 00ac E368     		ldr	r3, [r4, #12]
 1978 00ae B3F5E06F 		cmp	r3, #1792
 1979 00b2 05D9     		bls	.L150
 713:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1980              		.loc 1 713 0
 1981 00b4 2268     		ldr	r2, [r4]
 1982 00b6 5368     		ldr	r3, [r2, #4]
 1983 00b8 23F48053 		bic	r3, r3, #4096
 1984 00bc 5360     		str	r3, [r2, #4]
 1985 00be 04E0     		b	.L151
 1986              	.L150:
 718:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1987              		.loc 1 718 0
 1988 00c0 2268     		ldr	r2, [r4]
 1989 00c2 5368     		ldr	r3, [r2, #4]
 1990 00c4 43F48053 		orr	r3, r3, #4096
 1991 00c8 5360     		str	r3, [r2, #4]
 1992              	.L151:
 722:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 1993              		.loc 1 722 0
 1994 00ca A368     		ldr	r3, [r4, #8]
 1995 00cc B3F5004F 		cmp	r3, #32768
 1996 00d0 04D1     		bne	.L152
 724:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 1997              		.loc 1 724 0
 1998 00d2 2268     		ldr	r2, [r4]
 1999 00d4 1368     		ldr	r3, [r2]
 2000 00d6 23F48043 		bic	r3, r3, #16384
 2001 00da 1360     		str	r3, [r2]
 2002              	.L152:
 728:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2003              		.loc 1 728 0
 2004 00dc 2368     		ldr	r3, [r4]
 2005 00de 1A68     		ldr	r2, [r3]
 2006 00e0 12F0400F 		tst	r2, #64
 2007 00e4 03D1     		bne	.L153
 731:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2008              		.loc 1 731 0
 2009 00e6 1A68     		ldr	r2, [r3]
 2010 00e8 42F04002 		orr	r2, r2, #64
ARM GAS  /tmp/ccXuIaHP.s 			page 106


 2011 00ec 1A60     		str	r2, [r3]
 2012              	.L153:
 735:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2013              		.loc 1 735 0
 2014 00ee E368     		ldr	r3, [r4, #12]
 2015 00f0 B3F5E06F 		cmp	r3, #1792
 2016 00f4 1CD9     		bls	.L154
 2017 00f6 3CE0     		b	.L155
 2018              	.LVL153:
 2019              	.L158:
 741:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 2020              		.loc 1 741 0
 2021 00f8 2368     		ldr	r3, [r4]
 2022 00fa 9A68     		ldr	r2, [r3, #8]
 2023 00fc 12F0010F 		tst	r2, #1
 2024 0100 0AD0     		beq	.L156
 744:HALLIB/Src/stm32f7xx_hal_spi.c ****         pData += sizeof(uint8_t);
 2025              		.loc 1 744 0
 2026 0102 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2027 0104 06F8013B 		strb	r3, [r6], #1
 2028              	.LVL154:
 746:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 2029              		.loc 1 746 0
 2030 0108 B4F84630 		ldrh	r3, [r4, #70]
 2031 010c 9BB2     		uxth	r3, r3
 2032 010e 013B     		subs	r3, r3, #1
 2033 0110 9BB2     		uxth	r3, r3
 2034 0112 A4F84630 		strh	r3, [r4, #70]	@ movhi
 2035 0116 0BE0     		b	.L154
 2036              	.L156:
 751:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 2037              		.loc 1 751 0
 2038 0118 002D     		cmp	r5, #0
 2039 011a 00F0A280 		beq	.L174
 751:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 2040              		.loc 1 751 0 is_stmt 0 discriminator 1
 2041 011e B5F1FF3F 		cmp	r5, #-1
 2042 0122 05D0     		beq	.L154
 751:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 2043              		.loc 1 751 0 discriminator 2
 2044 0124 FFF7FEFF 		bl	HAL_GetTick
 2045              	.LVL155:
 2046 0128 C01B     		subs	r0, r0, r7
 2047 012a 8542     		cmp	r5, r0
 2048 012c 40F29B80 		bls	.L175
 2049              	.L154:
 738:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 2050              		.loc 1 738 0 is_stmt 1
 2051 0130 B4F84630 		ldrh	r3, [r4, #70]
 2052 0134 9BB2     		uxth	r3, r3
 2053 0136 002B     		cmp	r3, #0
 2054 0138 DED1     		bne	.L158
 2055 013a 1FE0     		b	.L159
 2056              	.L162:
 765:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 2057              		.loc 1 765 0
 2058 013c 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccXuIaHP.s 			page 107


 2059 013e 9A68     		ldr	r2, [r3, #8]
 2060 0140 12F0010F 		tst	r2, #1
 2061 0144 0AD0     		beq	.L160
 767:HALLIB/Src/stm32f7xx_hal_spi.c ****         pData += sizeof(uint16_t);
 2062              		.loc 1 767 0
 2063 0146 DB68     		ldr	r3, [r3, #12]
 2064 0148 26F8023B 		strh	r3, [r6], #2	@ movhi
 2065              	.LVL156:
 769:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 2066              		.loc 1 769 0
 2067 014c B4F84630 		ldrh	r3, [r4, #70]
 2068 0150 9BB2     		uxth	r3, r3
 2069 0152 013B     		subs	r3, r3, #1
 2070 0154 9BB2     		uxth	r3, r3
 2071 0156 A4F84630 		strh	r3, [r4, #70]	@ movhi
 2072 015a 0AE0     		b	.L155
 2073              	.L160:
 774:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 2074              		.loc 1 774 0
 2075 015c 002D     		cmp	r5, #0
 2076 015e 00F08480 		beq	.L176
 774:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 2077              		.loc 1 774 0 is_stmt 0 discriminator 1
 2078 0162 B5F1FF3F 		cmp	r5, #-1
 2079 0166 04D0     		beq	.L155
 774:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 2080              		.loc 1 774 0 discriminator 2
 2081 0168 FFF7FEFF 		bl	HAL_GetTick
 2082              	.LVL157:
 2083 016c C01B     		subs	r0, r0, r7
 2084 016e 8542     		cmp	r5, r0
 2085 0170 7DD9     		bls	.L177
 2086              	.L155:
 762:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 2087              		.loc 1 762 0 is_stmt 1
 2088 0172 B4F84630 		ldrh	r3, [r4, #70]
 2089 0176 9BB2     		uxth	r3, r3
 2090 0178 002B     		cmp	r3, #0
 2091 017a DFD1     		bne	.L162
 2092              	.L159:
 785:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2093              		.loc 1 785 0
 2094 017c A36A     		ldr	r3, [r4, #40]
 2095 017e B3F5005F 		cmp	r3, #8192
 2096 0182 52D1     		bne	.L163
 788:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2097              		.loc 1 788 0
 2098 0184 2268     		ldr	r2, [r4]
 2099 0186 1368     		ldr	r3, [r2]
 2100 0188 43F48053 		orr	r3, r3, #4096
 2101 018c 1360     		str	r3, [r2]
 791:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 2102              		.loc 1 791 0
 2103 018e 0097     		str	r7, [sp]
 2104 0190 2B46     		mov	r3, r5
 2105 0192 0122     		movs	r2, #1
 2106 0194 1146     		mov	r1, r2
ARM GAS  /tmp/ccXuIaHP.s 			page 108


 2107 0196 2046     		mov	r0, r4
 2108 0198 FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 2109              	.LVL158:
 2110 019c 0028     		cmp	r0, #0
 2111 019e 68D1     		bne	.L178
 799:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 2112              		.loc 1 799 0
 2113 01a0 E368     		ldr	r3, [r4, #12]
 2114 01a2 B3F5E06F 		cmp	r3, #1792
 2115 01a6 03D9     		bls	.L164
 801:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 2116              		.loc 1 801 0
 2117 01a8 2368     		ldr	r3, [r4]
 2118 01aa DB68     		ldr	r3, [r3, #12]
 2119 01ac 3380     		strh	r3, [r6]	@ movhi
 2120 01ae 02E0     		b	.L165
 2121              	.L164:
 806:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 2122              		.loc 1 806 0
 2123 01b0 2368     		ldr	r3, [r4]
 2124 01b2 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2125 01b4 3370     		strb	r3, [r6]
 2126              	.L165:
 810:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 2127              		.loc 1 810 0
 2128 01b6 0097     		str	r7, [sp]
 2129 01b8 2B46     		mov	r3, r5
 2130 01ba 0122     		movs	r2, #1
 2131 01bc 1146     		mov	r1, r2
 2132 01be 2046     		mov	r0, r4
 2133 01c0 FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 2134              	.LVL159:
 2135 01c4 28B1     		cbz	r0, .L166
 812:HALLIB/Src/stm32f7xx_hal_spi.c ****       errorcode = HAL_TIMEOUT;
 2136              		.loc 1 812 0
 2137 01c6 236E     		ldr	r3, [r4, #96]
 2138 01c8 43F00203 		orr	r3, r3, #2
 2139 01cc 2366     		str	r3, [r4, #96]
 2140              	.LVL160:
 813:HALLIB/Src/stm32f7xx_hal_spi.c ****       goto error;
 2141              		.loc 1 813 0
 2142 01ce 0320     		movs	r0, #3
 814:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 2143              		.loc 1 814 0
 2144 01d0 52E0     		b	.L148
 2145              	.LVL161:
 2146              	.L166:
 818:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 2147              		.loc 1 818 0
 2148 01d2 E268     		ldr	r2, [r4, #12]
 2149 01d4 B2F5706F 		cmp	r2, #3840
 2150 01d8 07D1     		bne	.L167
 820:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* To avoid GCC warning */
 2151              		.loc 1 820 0
 2152 01da 2368     		ldr	r3, [r4]
 2153 01dc DB68     		ldr	r3, [r3, #12]
 2154 01de 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccXuIaHP.s 			page 109


 2155 01e0 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 822:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 2156              		.loc 1 822 0
 2157 01e4 BDF80E30 		ldrh	r3, [sp, #14]
 2158 01e8 1FE0     		b	.L163
 2159              	.L167:
 826:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* To avoid GCC warning */
 2160              		.loc 1 826 0
 2161 01ea 2368     		ldr	r3, [r4]
 2162 01ec 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2163 01ee ADF80E30 		strh	r3, [sp, #14]	@ movhi
 828:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2164              		.loc 1 828 0
 2165 01f2 BDF80E30 		ldrh	r3, [sp, #14]
 830:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 2166              		.loc 1 830 0
 2167 01f6 B2F5E06F 		cmp	r2, #1792
 2168 01fa 16D1     		bne	.L163
 830:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 2169              		.loc 1 830 0 is_stmt 0 discriminator 1
 2170 01fc 236B     		ldr	r3, [r4, #48]
 2171 01fe 022B     		cmp	r3, #2
 2172 0200 13D1     		bne	.L163
 832:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 2173              		.loc 1 832 0 is_stmt 1
 2174 0202 0097     		str	r7, [sp]
 2175 0204 2B46     		mov	r3, r5
 2176 0206 0122     		movs	r2, #1
 2177 0208 1146     		mov	r1, r2
 2178 020a 2046     		mov	r0, r4
 2179 020c FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 2180              	.LVL162:
 2181 0210 28B1     		cbz	r0, .L168
 835:HALLIB/Src/stm32f7xx_hal_spi.c ****           errorcode = HAL_TIMEOUT;
 2182              		.loc 1 835 0
 2183 0212 236E     		ldr	r3, [r4, #96]
 2184 0214 43F00203 		orr	r3, r3, #2
 2185 0218 2366     		str	r3, [r4, #96]
 2186              	.LVL163:
 836:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
 2187              		.loc 1 836 0
 2188 021a 0320     		movs	r0, #3
 837:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 2189              		.loc 1 837 0
 2190 021c 2CE0     		b	.L148
 2191              	.LVL164:
 2192              	.L168:
 839:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
 2193              		.loc 1 839 0
 2194 021e 2368     		ldr	r3, [r4]
 2195 0220 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2196 0222 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 841:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 2197              		.loc 1 841 0
 2198 0226 BDF80E30 		ldrh	r3, [sp, #14]
 2199              	.L163:
 848:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
ARM GAS  /tmp/ccXuIaHP.s 			page 110


 2200              		.loc 1 848 0
 2201 022a 3A46     		mov	r2, r7
 2202 022c 2946     		mov	r1, r5
 2203 022e 2046     		mov	r0, r4
 2204 0230 FFF7FEFF 		bl	SPI_EndRxTransaction
 2205              	.LVL165:
 2206 0234 08B1     		cbz	r0, .L169
 850:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2207              		.loc 1 850 0
 2208 0236 2023     		movs	r3, #32
 2209 0238 2366     		str	r3, [r4, #96]
 2210              	.L169:
 855:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2211              		.loc 1 855 0
 2212 023a 2368     		ldr	r3, [r4]
 2213 023c 9A68     		ldr	r2, [r3, #8]
 2214 023e 12F0100F 		tst	r2, #16
 2215 0242 06D0     		beq	.L170
 857:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 2216              		.loc 1 857 0
 2217 0244 226E     		ldr	r2, [r4, #96]
 2218 0246 42F00202 		orr	r2, r2, #2
 2219 024a 2266     		str	r2, [r4, #96]
 858:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2220              		.loc 1 858 0
 2221 024c 4FF6EF72 		movw	r2, #65519
 2222 0250 9A60     		str	r2, [r3, #8]
 2223              	.L170:
 862:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2224              		.loc 1 862 0
 2225 0252 236E     		ldr	r3, [r4, #96]
 2226 0254 7BB9     		cbnz	r3, .L179
 658:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2227              		.loc 1 658 0
 2228 0256 0020     		movs	r0, #0
 2229 0258 0EE0     		b	.L148
 2230              	.LVL166:
 2231              	.L172:
 675:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 2232              		.loc 1 675 0
 2233 025a 0220     		movs	r0, #2
 2234              	.LVL167:
 2235 025c 0CE0     		b	.L148
 2236              	.LVL168:
 2237              	.L173:
 681:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 2238              		.loc 1 681 0
 2239 025e 0120     		movs	r0, #1
 2240              	.LVL169:
 2241 0260 0AE0     		b	.L148
 2242              	.L174:
 753:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
 2243              		.loc 1 753 0
 2244 0262 0320     		movs	r0, #3
 2245 0264 08E0     		b	.L148
 2246              	.L175:
 2247 0266 0320     		movs	r0, #3
ARM GAS  /tmp/ccXuIaHP.s 			page 111


 2248 0268 06E0     		b	.L148
 2249              	.L176:
 776:HALLIB/Src/stm32f7xx_hal_spi.c ****           goto error;
 2250              		.loc 1 776 0
 2251 026a 0320     		movs	r0, #3
 2252 026c 04E0     		b	.L148
 2253              	.L177:
 2254 026e 0320     		movs	r0, #3
 2255 0270 02E0     		b	.L148
 2256              	.L178:
 794:HALLIB/Src/stm32f7xx_hal_spi.c ****       goto error;
 2257              		.loc 1 794 0
 2258 0272 0320     		movs	r0, #3
 2259 0274 00E0     		b	.L148
 2260              	.L179:
 864:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2261              		.loc 1 864 0
 2262 0276 0120     		movs	r0, #1
 2263              	.LVL170:
 2264              	.L148:
 868:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_UNLOCK(hspi);
 2265              		.loc 1 868 0
 2266 0278 0123     		movs	r3, #1
 2267 027a 84F85D30 		strb	r3, [r4, #93]
 869:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
 2268              		.loc 1 869 0
 2269 027e 0023     		movs	r3, #0
 2270 0280 84F85C30 		strb	r3, [r4, #92]
 870:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 2271              		.loc 1 870 0
 2272 0284 00E0     		b	.L147
 2273              	.LVL171:
 2274              	.L171:
 668:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2275              		.loc 1 668 0
 2276 0286 0220     		movs	r0, #2
 2277              	.LVL172:
 2278              	.L147:
 871:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2279              		.loc 1 871 0
 2280 0288 04B0     		add	sp, sp, #16
 2281              	.LCFI28:
 2282              		.cfi_def_cfa_offset 24
 2283              		@ sp needed
 2284 028a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2285              		.cfi_endproc
 2286              	.LFE141:
 2288 028e 00BF     		.section	.text.HAL_SPI_Transmit_IT,"ax",%progbits
 2289              		.align	2
 2290              		.global	HAL_SPI_Transmit_IT
 2291              		.thumb
 2292              		.thumb_func
 2294              	HAL_SPI_Transmit_IT:
 2295              	.LFB143:
1166:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2296              		.loc 1 1166 0
 2297              		.cfi_startproc
ARM GAS  /tmp/ccXuIaHP.s 			page 112


 2298              		@ args = 0, pretend = 0, frame = 0
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              		@ link register save eliminated.
 2301              	.LVL173:
1173:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2302              		.loc 1 1173 0
 2303 0000 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 2304 0004 012B     		cmp	r3, #1
 2305 0006 55D0     		beq	.L188
1173:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2306              		.loc 1 1173 0 is_stmt 0 discriminator 2
 2307 0008 0123     		movs	r3, #1
 2308 000a 80F85C30 		strb	r3, [r0, #92]
1175:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2309              		.loc 1 1175 0 is_stmt 1 discriminator 2
 2310 000e 002A     		cmp	r2, #0
 2311 0010 18BF     		it	ne
 2312 0012 0029     		cmpne	r1, #0
 2313 0014 44D0     		beq	.L189
1181:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2314              		.loc 1 1181 0
 2315 0016 90F85D30 		ldrb	r3, [r0, #93]	@ zero_extendqisi2
 2316 001a DBB2     		uxtb	r3, r3
 2317 001c 012B     		cmp	r3, #1
 2318 001e 41D1     		bne	.L190
1188:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 2319              		.loc 1 1188 0
 2320 0020 0323     		movs	r3, #3
 2321 0022 80F85D30 		strb	r3, [r0, #93]
1189:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
 2322              		.loc 1 1189 0
 2323 0026 0023     		movs	r3, #0
 2324 0028 0366     		str	r3, [r0, #96]
1190:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 2325              		.loc 1 1190 0
 2326 002a 8163     		str	r1, [r0, #56]
1191:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
 2327              		.loc 1 1191 0
 2328 002c 8287     		strh	r2, [r0, #60]	@ movhi
1192:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2329              		.loc 1 1192 0
 2330 002e C287     		strh	r2, [r0, #62]	@ movhi
1195:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
 2331              		.loc 1 1195 0
 2332 0030 0364     		str	r3, [r0, #64]
1196:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = 0U;
 2333              		.loc 1 1196 0
 2334 0032 A0F84430 		strh	r3, [r0, #68]	@ movhi
1197:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxISR       = NULL;
 2335              		.loc 1 1197 0
 2336 0036 A0F84630 		strh	r3, [r0, #70]	@ movhi
1198:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2337              		.loc 1 1198 0
 2338 003a C364     		str	r3, [r0, #76]
1201:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2339              		.loc 1 1201 0
 2340 003c C368     		ldr	r3, [r0, #12]
ARM GAS  /tmp/ccXuIaHP.s 			page 113


 2341 003e B3F5E06F 		cmp	r3, #1792
 2342 0042 02D9     		bls	.L184
1203:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2343              		.loc 1 1203 0
 2344 0044 1C4B     		ldr	r3, .L192
 2345 0046 0365     		str	r3, [r0, #80]
 2346 0048 01E0     		b	.L185
 2347              	.L184:
1207:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2348              		.loc 1 1207 0
 2349 004a 1C4B     		ldr	r3, .L192+4
 2350 004c 0365     		str	r3, [r0, #80]
 2351              	.L185:
1211:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2352              		.loc 1 1211 0
 2353 004e 8368     		ldr	r3, [r0, #8]
 2354 0050 B3F5004F 		cmp	r3, #32768
 2355 0054 04D1     		bne	.L186
1213:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2356              		.loc 1 1213 0
 2357 0056 0268     		ldr	r2, [r0]
 2358              	.LVL174:
 2359 0058 1368     		ldr	r3, [r2]
 2360 005a 43F48043 		orr	r3, r3, #16384
 2361 005e 1360     		str	r3, [r2]
 2362              	.LVL175:
 2363              	.L186:
1218:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2364              		.loc 1 1218 0
 2365 0060 836A     		ldr	r3, [r0, #40]
 2366 0062 B3F5005F 		cmp	r3, #8192
 2367 0066 0BD1     		bne	.L187
1220:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2368              		.loc 1 1220 0
 2369 0068 0268     		ldr	r2, [r0]
 2370 006a 1368     		ldr	r3, [r2]
 2371 006c 23F40053 		bic	r3, r3, #8192
 2372 0070 1B04     		lsls	r3, r3, #16
 2373 0072 1B0C     		lsrs	r3, r3, #16
 2374 0074 1360     		str	r3, [r2]
 2375 0076 0268     		ldr	r2, [r0]
 2376 0078 1368     		ldr	r3, [r2]
 2377 007a 43F40053 		orr	r3, r3, #8192
 2378 007e 1360     		str	r3, [r2]
 2379              	.L187:
1225:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2380              		.loc 1 1225 0
 2381 0080 0268     		ldr	r2, [r0]
 2382 0082 5368     		ldr	r3, [r2, #4]
 2383 0084 43F0A003 		orr	r3, r3, #160
 2384 0088 5360     		str	r3, [r2, #4]
1229:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2385              		.loc 1 1229 0
 2386 008a 0368     		ldr	r3, [r0]
 2387 008c 1A68     		ldr	r2, [r3]
 2388 008e 12F0400F 		tst	r2, #64
 2389 0092 09D1     		bne	.L191
ARM GAS  /tmp/ccXuIaHP.s 			page 114


1232:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2390              		.loc 1 1232 0
 2391 0094 1A68     		ldr	r2, [r3]
 2392 0096 42F04002 		orr	r2, r2, #64
 2393 009a 1A60     		str	r2, [r3]
1167:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2394              		.loc 1 1167 0
 2395 009c 0023     		movs	r3, #0
 2396 009e 04E0     		b	.L183
 2397              	.LVL176:
 2398              	.L189:
1177:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 2399              		.loc 1 1177 0
 2400 00a0 0123     		movs	r3, #1
 2401 00a2 02E0     		b	.L183
 2402              	.L190:
1183:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 2403              		.loc 1 1183 0
 2404 00a4 0223     		movs	r3, #2
 2405 00a6 00E0     		b	.L183
 2406              	.LVL177:
 2407              	.L191:
1167:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2408              		.loc 1 1167 0
 2409 00a8 0023     		movs	r3, #0
 2410              	.L183:
 2411              	.LVL178:
1236:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
 2412              		.loc 1 1236 0
 2413 00aa 0022     		movs	r2, #0
 2414 00ac 80F85C20 		strb	r2, [r0, #92]
1237:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 2415              		.loc 1 1237 0
 2416 00b0 1846     		mov	r0, r3
 2417              	.LVL179:
 2418 00b2 7047     		bx	lr
 2419              	.LVL180:
 2420              	.L188:
1173:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2421              		.loc 1 1173 0
 2422 00b4 0220     		movs	r0, #2
 2423              	.LVL181:
1238:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2424              		.loc 1 1238 0
 2425 00b6 7047     		bx	lr
 2426              	.L193:
 2427              		.align	2
 2428              	.L192:
 2429 00b8 00000000 		.word	SPI_TxISR_16BIT
 2430 00bc 00000000 		.word	SPI_TxISR_8BIT
 2431              		.cfi_endproc
 2432              	.LFE143:
 2434              		.section	.text.HAL_SPI_TransmitReceive_IT,"ax",%progbits
 2435              		.align	2
 2436              		.global	HAL_SPI_TransmitReceive_IT
 2437              		.thumb
 2438              		.thumb_func
ARM GAS  /tmp/ccXuIaHP.s 			page 115


 2440              	HAL_SPI_TransmitReceive_IT:
 2441              	.LFB145:
1354:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tmp = 0U, tmp1 = 0U;
 2442              		.loc 1 1354 0
 2443              		.cfi_startproc
 2444              		@ args = 0, pretend = 0, frame = 0
 2445              		@ frame_needed = 0, uses_anonymous_args = 0
 2446              		@ link register save eliminated.
 2447              	.LVL182:
 2448 0000 30B4     		push	{r4, r5}
 2449              	.LCFI29:
 2450              		.cfi_def_cfa_offset 8
 2451              		.cfi_offset 4, -8
 2452              		.cfi_offset 5, -4
 2453              	.LVL183:
1362:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2454              		.loc 1 1362 0
 2455 0002 90F85C40 		ldrb	r4, [r0, #92]	@ zero_extendqisi2
 2456 0006 012C     		cmp	r4, #1
 2457 0008 00F08780 		beq	.L207
1362:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2458              		.loc 1 1362 0 is_stmt 0 discriminator 2
 2459 000c 0124     		movs	r4, #1
 2460 000e 80F85C40 		strb	r4, [r0, #92]
1364:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmp1 = hspi->Init.Mode;
 2461              		.loc 1 1364 0 is_stmt 1 discriminator 2
 2462 0012 90F85D40 		ldrb	r4, [r0, #93]	@ zero_extendqisi2
 2463 0016 E4B2     		uxtb	r4, r4
 2464              	.LVL184:
1365:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2465              		.loc 1 1365 0 discriminator 2
 2466 0018 4568     		ldr	r5, [r0, #4]
 2467              	.LVL185:
1367:HALLIB/Src/stm32f7xx_hal_spi.c ****         ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL
 2468              		.loc 1 1367 0 discriminator 2
 2469 001a 012C     		cmp	r4, #1
 2470 001c 07D0     		beq	.L196
1367:HALLIB/Src/stm32f7xx_hal_spi.c ****         ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL
 2471              		.loc 1 1367 0 is_stmt 0 discriminator 1
 2472 001e B5F5827F 		cmp	r5, #260
 2473 0022 6AD1     		bne	.L208
1368:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2474              		.loc 1 1368 0 is_stmt 1
 2475 0024 8568     		ldr	r5, [r0, #8]
 2476              	.LVL186:
 2477 0026 002D     		cmp	r5, #0
 2478 0028 69D1     		bne	.L209
1368:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2479              		.loc 1 1368 0 is_stmt 0 discriminator 1
 2480 002a 042C     		cmp	r4, #4
 2481 002c 69D1     		bne	.L210
 2482              	.L196:
1374:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2483              		.loc 1 1374 0 is_stmt 1
 2484 002e 002A     		cmp	r2, #0
 2485 0030 18BF     		it	ne
 2486 0032 0029     		cmpne	r1, #0
ARM GAS  /tmp/ccXuIaHP.s 			page 116


 2487 0034 67D0     		beq	.L211
1374:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2488              		.loc 1 1374 0 is_stmt 0 discriminator 1
 2489 0036 002B     		cmp	r3, #0
 2490 0038 67D0     		beq	.L212
1381:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2491              		.loc 1 1381 0 is_stmt 1
 2492 003a 90F85D40 		ldrb	r4, [r0, #93]	@ zero_extendqisi2
 2493              	.LVL187:
 2494 003e E4B2     		uxtb	r4, r4
 2495 0040 042C     		cmp	r4, #4
 2496 0042 02D0     		beq	.L198
1383:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2497              		.loc 1 1383 0
 2498 0044 0524     		movs	r4, #5
 2499 0046 80F85D40 		strb	r4, [r0, #93]
 2500              	.L198:
1387:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 2501              		.loc 1 1387 0
 2502 004a 0024     		movs	r4, #0
 2503 004c 0466     		str	r4, [r0, #96]
1388:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 2504              		.loc 1 1388 0
 2505 004e 8163     		str	r1, [r0, #56]
1389:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
 2506              		.loc 1 1389 0
 2507 0050 8387     		strh	r3, [r0, #60]	@ movhi
1390:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 2508              		.loc 1 1390 0
 2509 0052 C387     		strh	r3, [r0, #62]	@ movhi
1391:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 2510              		.loc 1 1391 0
 2511 0054 0264     		str	r2, [r0, #64]
1392:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
 2512              		.loc 1 1392 0
 2513 0056 A0F84430 		strh	r3, [r0, #68]	@ movhi
1393:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2514              		.loc 1 1393 0
 2515 005a A0F84630 		strh	r3, [r0, #70]	@ movhi
1396:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2516              		.loc 1 1396 0
 2517 005e C368     		ldr	r3, [r0, #12]
 2518              	.LVL188:
 2519 0060 B3F5E06F 		cmp	r3, #1792
 2520 0064 04D9     		bls	.L199
1398:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxISR     = SPI_2linesTxISR_16BIT;
 2521              		.loc 1 1398 0
 2522 0066 2E4B     		ldr	r3, .L215
 2523 0068 C364     		str	r3, [r0, #76]
1399:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2524              		.loc 1 1399 0
 2525 006a 2E4B     		ldr	r3, .L215+4
 2526 006c 0365     		str	r3, [r0, #80]
 2527 006e 03E0     		b	.L200
 2528              	.L199:
1403:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxISR     = SPI_2linesTxISR_8BIT;
 2529              		.loc 1 1403 0
ARM GAS  /tmp/ccXuIaHP.s 			page 117


 2530 0070 2D4B     		ldr	r3, .L215+8
 2531 0072 C364     		str	r3, [r0, #76]
1404:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2532              		.loc 1 1404 0
 2533 0074 2D4B     		ldr	r3, .L215+12
 2534 0076 0365     		str	r3, [r0, #80]
 2535              	.L200:
1409:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2536              		.loc 1 1409 0
 2537 0078 836A     		ldr	r3, [r0, #40]
 2538 007a B3F5005F 		cmp	r3, #8192
 2539 007e 16D1     		bne	.L201
1411:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT
 2540              		.loc 1 1411 0
 2541 0080 0123     		movs	r3, #1
 2542 0082 8364     		str	r3, [r0, #72]
1412:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 2543              		.loc 1 1412 0
 2544 0084 C368     		ldr	r3, [r0, #12]
 2545 0086 B3F5E06F 		cmp	r3, #1792
 2546 008a 03D8     		bhi	.L202
1412:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 2547              		.loc 1 1412 0 is_stmt 0 discriminator 1
 2548 008c 036B     		ldr	r3, [r0, #48]
 2549 008e 022B     		cmp	r3, #2
 2550 0090 00D1     		bne	.L202
1414:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 2551              		.loc 1 1414 0 is_stmt 1
 2552 0092 8364     		str	r3, [r0, #72]
 2553              	.L202:
1416:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2554              		.loc 1 1416 0
 2555 0094 0268     		ldr	r2, [r0]
 2556              	.LVL189:
 2557 0096 1368     		ldr	r3, [r2]
 2558 0098 23F40053 		bic	r3, r3, #8192
 2559 009c 1B04     		lsls	r3, r3, #16
 2560 009e 1B0C     		lsrs	r3, r3, #16
 2561 00a0 1360     		str	r3, [r2]
 2562              	.LVL190:
 2563 00a2 0268     		ldr	r2, [r0]
 2564 00a4 1368     		ldr	r3, [r2]
 2565 00a6 43F40053 		orr	r3, r3, #8192
 2566 00aa 1360     		str	r3, [r2]
 2567 00ac 01E0     		b	.L203
 2568              	.LVL191:
 2569              	.L201:
1420:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2570              		.loc 1 1420 0
 2571 00ae 0023     		movs	r3, #0
 2572 00b0 8364     		str	r3, [r0, #72]
 2573              	.LVL192:
 2574              	.L203:
1425:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2575              		.loc 1 1425 0
 2576 00b2 C368     		ldr	r3, [r0, #12]
 2577 00b4 B3F5E06F 		cmp	r3, #1792
ARM GAS  /tmp/ccXuIaHP.s 			page 118


 2578 00b8 04D8     		bhi	.L204
1425:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2579              		.loc 1 1425 0 is_stmt 0 discriminator 1
 2580 00ba B0F84630 		ldrh	r3, [r0, #70]
 2581 00be 9BB2     		uxth	r3, r3
 2582 00c0 012B     		cmp	r3, #1
 2583 00c2 05D9     		bls	.L205
 2584              	.L204:
1428:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2585              		.loc 1 1428 0 is_stmt 1
 2586 00c4 0268     		ldr	r2, [r0]
 2587 00c6 5368     		ldr	r3, [r2, #4]
 2588 00c8 23F48053 		bic	r3, r3, #4096
 2589 00cc 5360     		str	r3, [r2, #4]
 2590 00ce 04E0     		b	.L206
 2591              	.L205:
1433:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2592              		.loc 1 1433 0
 2593 00d0 0268     		ldr	r2, [r0]
 2594 00d2 5368     		ldr	r3, [r2, #4]
 2595 00d4 43F48053 		orr	r3, r3, #4096
 2596 00d8 5360     		str	r3, [r2, #4]
 2597              	.L206:
1437:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2598              		.loc 1 1437 0
 2599 00da 0268     		ldr	r2, [r0]
 2600 00dc 5368     		ldr	r3, [r2, #4]
 2601 00de 43F0E003 		orr	r3, r3, #224
 2602 00e2 5360     		str	r3, [r2, #4]
1440:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2603              		.loc 1 1440 0
 2604 00e4 0368     		ldr	r3, [r0]
 2605 00e6 1A68     		ldr	r2, [r3]
 2606 00e8 12F0400F 		tst	r2, #64
 2607 00ec 0FD1     		bne	.L213
1443:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2608              		.loc 1 1443 0
 2609 00ee 1A68     		ldr	r2, [r3]
 2610 00f0 42F04002 		orr	r2, r2, #64
 2611 00f4 1A60     		str	r2, [r3]
1356:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2612              		.loc 1 1356 0
 2613 00f6 0023     		movs	r3, #0
 2614 00f8 0AE0     		b	.L197
 2615              	.LVL193:
 2616              	.L208:
1370:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 2617              		.loc 1 1370 0
 2618 00fa 0223     		movs	r3, #2
 2619              	.LVL194:
 2620 00fc 08E0     		b	.L197
 2621              	.LVL195:
 2622              	.L209:
 2623 00fe 0223     		movs	r3, #2
 2624              	.LVL196:
 2625 0100 06E0     		b	.L197
 2626              	.LVL197:
ARM GAS  /tmp/ccXuIaHP.s 			page 119


 2627              	.L210:
 2628 0102 0223     		movs	r3, #2
 2629              	.LVL198:
 2630 0104 04E0     		b	.L197
 2631              	.LVL199:
 2632              	.L211:
1376:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 2633              		.loc 1 1376 0
 2634 0106 0123     		movs	r3, #1
 2635              	.LVL200:
 2636 0108 02E0     		b	.L197
 2637              	.LVL201:
 2638              	.L212:
 2639 010a 0123     		movs	r3, #1
 2640              	.LVL202:
 2641 010c 00E0     		b	.L197
 2642              	.LVL203:
 2643              	.L213:
1356:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2644              		.loc 1 1356 0
 2645 010e 0023     		movs	r3, #0
 2646              	.L197:
 2647              	.LVL204:
1448:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
 2648              		.loc 1 1448 0
 2649 0110 0022     		movs	r2, #0
 2650 0112 80F85C20 		strb	r2, [r0, #92]
1449:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 2651              		.loc 1 1449 0
 2652 0116 1846     		mov	r0, r3
 2653              	.LVL205:
 2654 0118 00E0     		b	.L195
 2655              	.LVL206:
 2656              	.L207:
1362:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2657              		.loc 1 1362 0
 2658 011a 0220     		movs	r0, #2
 2659              	.LVL207:
 2660              	.L195:
1450:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2661              		.loc 1 1450 0
 2662 011c 30BC     		pop	{r4, r5}
 2663              	.LCFI30:
 2664              		.cfi_restore 5
 2665              		.cfi_restore 4
 2666              		.cfi_def_cfa_offset 0
 2667 011e 7047     		bx	lr
 2668              	.L216:
 2669              		.align	2
 2670              	.L215:
 2671 0120 00000000 		.word	SPI_2linesRxISR_16BIT
 2672 0124 00000000 		.word	SPI_2linesTxISR_16BIT
 2673 0128 00000000 		.word	SPI_2linesRxISR_8BIT
 2674 012c 00000000 		.word	SPI_2linesTxISR_8BIT
 2675              		.cfi_endproc
 2676              	.LFE145:
 2678              		.section	.text.HAL_SPI_Receive_IT,"ax",%progbits
ARM GAS  /tmp/ccXuIaHP.s 			page 120


 2679              		.align	2
 2680              		.global	HAL_SPI_Receive_IT
 2681              		.thumb
 2682              		.thumb_func
 2684              	HAL_SPI_Receive_IT:
 2685              	.LFB144:
1249:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2686              		.loc 1 1249 0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 0
 2689              		@ frame_needed = 0, uses_anonymous_args = 0
 2690              	.LVL208:
 2691 0000 10B5     		push	{r4, lr}
 2692              	.LCFI31:
 2693              		.cfi_def_cfa_offset 8
 2694              		.cfi_offset 4, -8
 2695              		.cfi_offset 14, -4
 2696              	.LVL209:
1252:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2697              		.loc 1 1252 0
 2698 0002 8468     		ldr	r4, [r0, #8]
 2699 0004 5CB9     		cbnz	r4, .L218
1252:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2700              		.loc 1 1252 0 is_stmt 0 discriminator 1
 2701 0006 4368     		ldr	r3, [r0, #4]
 2702 0008 B3F5827F 		cmp	r3, #260
 2703 000c 07D1     		bne	.L218
 2704 000e 1346     		mov	r3, r2
1254:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
 2705              		.loc 1 1254 0 is_stmt 1
 2706 0010 0422     		movs	r2, #4
 2707              	.LVL210:
 2708 0012 80F85D20 		strb	r2, [r0, #93]
1256:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2709              		.loc 1 1256 0
 2710 0016 0A46     		mov	r2, r1
 2711 0018 FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
 2712              	.LVL211:
 2713 001c 10BD     		pop	{r4, pc}
 2714              	.LVL212:
 2715              	.L218:
1260:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2716              		.loc 1 1260 0
 2717 001e 90F85C40 		ldrb	r4, [r0, #92]	@ zero_extendqisi2
 2718 0022 012C     		cmp	r4, #1
 2719 0024 6CD0     		beq	.L227
1260:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2720              		.loc 1 1260 0 is_stmt 0 discriminator 2
 2721 0026 0123     		movs	r3, #1
 2722 0028 80F85C30 		strb	r3, [r0, #92]
1262:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2723              		.loc 1 1262 0 is_stmt 1 discriminator 2
 2724 002c 90F85D40 		ldrb	r4, [r0, #93]	@ zero_extendqisi2
 2725 0030 E4B2     		uxtb	r4, r4
 2726 0032 9C42     		cmp	r4, r3
 2727 0034 5AD1     		bne	.L228
1268:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
ARM GAS  /tmp/ccXuIaHP.s 			page 121


 2728              		.loc 1 1268 0
 2729 0036 002A     		cmp	r2, #0
 2730 0038 18BF     		it	ne
 2731 003a 0029     		cmpne	r1, #0
 2732 003c 58D0     		beq	.L229
1275:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 2733              		.loc 1 1275 0
 2734 003e 0423     		movs	r3, #4
 2735 0040 80F85D30 		strb	r3, [r0, #93]
1276:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
 2736              		.loc 1 1276 0
 2737 0044 0023     		movs	r3, #0
 2738 0046 0366     		str	r3, [r0, #96]
1277:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 2739              		.loc 1 1277 0
 2740 0048 0164     		str	r1, [r0, #64]
1278:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
 2741              		.loc 1 1278 0
 2742 004a A0F84420 		strh	r2, [r0, #68]	@ movhi
1279:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2743              		.loc 1 1279 0
 2744 004e A0F84620 		strh	r2, [r0, #70]	@ movhi
1282:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
 2745              		.loc 1 1282 0
 2746 0052 8363     		str	r3, [r0, #56]
1283:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 2747              		.loc 1 1283 0
 2748 0054 8387     		strh	r3, [r0, #60]	@ movhi
1284:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
 2749              		.loc 1 1284 0
 2750 0056 C387     		strh	r3, [r0, #62]	@ movhi
1285:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2751              		.loc 1 1285 0
 2752 0058 0365     		str	r3, [r0, #80]
1288:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2753              		.loc 1 1288 0
 2754 005a C368     		ldr	r3, [r0, #12]
 2755 005c B3F5E06F 		cmp	r3, #1792
 2756 0060 07D9     		bls	.L221
1291:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxISR = SPI_RxISR_16BIT;
 2757              		.loc 1 1291 0
 2758 0062 0268     		ldr	r2, [r0]
 2759              	.LVL213:
 2760 0064 5368     		ldr	r3, [r2, #4]
 2761 0066 23F48053 		bic	r3, r3, #4096
 2762 006a 5360     		str	r3, [r2, #4]
 2763              	.LVL214:
1292:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2764              		.loc 1 1292 0
 2765 006c 254B     		ldr	r3, .L232
 2766 006e C364     		str	r3, [r0, #76]
 2767 0070 06E0     		b	.L222
 2768              	.LVL215:
 2769              	.L221:
1297:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxISR = SPI_RxISR_8BIT;
 2770              		.loc 1 1297 0
 2771 0072 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccXuIaHP.s 			page 122


 2772              	.LVL216:
 2773 0074 5368     		ldr	r3, [r2, #4]
 2774 0076 43F48053 		orr	r3, r3, #4096
 2775 007a 5360     		str	r3, [r2, #4]
 2776              	.LVL217:
1298:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2777              		.loc 1 1298 0
 2778 007c 224B     		ldr	r3, .L232+4
 2779 007e C364     		str	r3, [r0, #76]
 2780              	.L222:
1302:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2781              		.loc 1 1302 0
 2782 0080 8368     		ldr	r3, [r0, #8]
 2783 0082 B3F5004F 		cmp	r3, #32768
 2784 0086 04D1     		bne	.L223
1304:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2785              		.loc 1 1304 0
 2786 0088 0268     		ldr	r2, [r0]
 2787 008a 1368     		ldr	r3, [r2]
 2788 008c 23F48043 		bic	r3, r3, #16384
 2789 0090 1360     		str	r3, [r2]
 2790              	.L223:
1309:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2791              		.loc 1 1309 0
 2792 0092 836A     		ldr	r3, [r0, #40]
 2793 0094 B3F5005F 		cmp	r3, #8192
 2794 0098 16D1     		bne	.L224
1311:HALLIB/Src/stm32f7xx_hal_spi.c ****     if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT
 2795              		.loc 1 1311 0
 2796 009a 0123     		movs	r3, #1
 2797 009c 8364     		str	r3, [r0, #72]
1312:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 2798              		.loc 1 1312 0
 2799 009e C368     		ldr	r3, [r0, #12]
 2800 00a0 B3F5E06F 		cmp	r3, #1792
 2801 00a4 03D8     		bhi	.L225
1312:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 2802              		.loc 1 1312 0 is_stmt 0 discriminator 1
 2803 00a6 036B     		ldr	r3, [r0, #48]
 2804 00a8 022B     		cmp	r3, #2
 2805 00aa 00D1     		bne	.L225
1314:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 2806              		.loc 1 1314 0 is_stmt 1
 2807 00ac 8364     		str	r3, [r0, #72]
 2808              	.L225:
1316:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2809              		.loc 1 1316 0
 2810 00ae 0268     		ldr	r2, [r0]
 2811 00b0 1368     		ldr	r3, [r2]
 2812 00b2 23F40053 		bic	r3, r3, #8192
 2813 00b6 1B04     		lsls	r3, r3, #16
 2814 00b8 1B0C     		lsrs	r3, r3, #16
 2815 00ba 1360     		str	r3, [r2]
 2816 00bc 0268     		ldr	r2, [r0]
 2817 00be 1368     		ldr	r3, [r2]
 2818 00c0 43F40053 		orr	r3, r3, #8192
 2819 00c4 1360     		str	r3, [r2]
ARM GAS  /tmp/ccXuIaHP.s 			page 123


 2820 00c6 01E0     		b	.L226
 2821              	.L224:
1320:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2822              		.loc 1 1320 0
 2823 00c8 0023     		movs	r3, #0
 2824 00ca 8364     		str	r3, [r0, #72]
 2825              	.L226:
1325:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2826              		.loc 1 1325 0
 2827 00cc 0268     		ldr	r2, [r0]
 2828 00ce 5368     		ldr	r3, [r2, #4]
 2829 00d0 43F06003 		orr	r3, r3, #96
 2830 00d4 5360     		str	r3, [r2, #4]
1332:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2831              		.loc 1 1332 0
 2832 00d6 0368     		ldr	r3, [r0]
 2833 00d8 1A68     		ldr	r2, [r3]
 2834 00da 12F0400F 		tst	r2, #64
 2835 00de 09D1     		bne	.L230
1335:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2836              		.loc 1 1335 0
 2837 00e0 1A68     		ldr	r2, [r3]
 2838 00e2 42F04002 		orr	r2, r2, #64
 2839 00e6 1A60     		str	r2, [r3]
1250:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2840              		.loc 1 1250 0
 2841 00e8 0023     		movs	r3, #0
 2842 00ea 04E0     		b	.L220
 2843              	.LVL218:
 2844              	.L228:
1264:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 2845              		.loc 1 1264 0
 2846 00ec 0223     		movs	r3, #2
 2847 00ee 02E0     		b	.L220
 2848              	.L229:
1270:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 2849              		.loc 1 1270 0
 2850 00f0 0123     		movs	r3, #1
 2851 00f2 00E0     		b	.L220
 2852              	.LVL219:
 2853              	.L230:
1250:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2854              		.loc 1 1250 0
 2855 00f4 0023     		movs	r3, #0
 2856              	.L220:
 2857              	.LVL220:
1340:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
 2858              		.loc 1 1340 0
 2859 00f6 0022     		movs	r2, #0
 2860 00f8 80F85C20 		strb	r2, [r0, #92]
1341:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 2861              		.loc 1 1341 0
 2862 00fc 1846     		mov	r0, r3
 2863              	.LVL221:
 2864 00fe 10BD     		pop	{r4, pc}
 2865              	.LVL222:
 2866              	.L227:
ARM GAS  /tmp/ccXuIaHP.s 			page 124


1260:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2867              		.loc 1 1260 0
 2868 0100 0220     		movs	r0, #2
 2869              	.LVL223:
1342:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2870              		.loc 1 1342 0
 2871 0102 10BD     		pop	{r4, pc}
 2872              	.L233:
 2873              		.align	2
 2874              	.L232:
 2875 0104 00000000 		.word	SPI_RxISR_16BIT
 2876 0108 00000000 		.word	SPI_RxISR_8BIT
 2877              		.cfi_endproc
 2878              	.LFE144:
 2880              		.section	.text.HAL_SPI_Transmit_DMA,"ax",%progbits
 2881              		.align	2
 2882              		.global	HAL_SPI_Transmit_DMA
 2883              		.thumb
 2884              		.thumb_func
 2886              	HAL_SPI_Transmit_DMA:
 2887              	.LFB146:
1461:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2888              		.loc 1 1461 0
 2889              		.cfi_startproc
 2890              		@ args = 0, pretend = 0, frame = 0
 2891              		@ frame_needed = 0, uses_anonymous_args = 0
 2892              	.LVL224:
1468:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2893              		.loc 1 1468 0
 2894 0000 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 2895 0004 012B     		cmp	r3, #1
 2896 0006 00F08C80 		beq	.L242
1461:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 2897              		.loc 1 1461 0 discriminator 2
 2898 000a 10B5     		push	{r4, lr}
 2899              	.LCFI32:
 2900              		.cfi_def_cfa_offset 8
 2901              		.cfi_offset 4, -8
 2902              		.cfi_offset 14, -4
 2903 000c 0446     		mov	r4, r0
1468:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2904              		.loc 1 1468 0 discriminator 2
 2905 000e 0123     		movs	r3, #1
 2906 0010 80F85C30 		strb	r3, [r0, #92]
1470:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2907              		.loc 1 1470 0 discriminator 2
 2908 0014 90F85D30 		ldrb	r3, [r0, #93]	@ zero_extendqisi2
 2909 0018 DBB2     		uxtb	r3, r3
 2910 001a 012B     		cmp	r3, #1
 2911 001c 7AD1     		bne	.L243
1476:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2912              		.loc 1 1476 0
 2913 001e 002A     		cmp	r2, #0
 2914 0020 18BF     		it	ne
 2915 0022 0029     		cmpne	r1, #0
 2916 0024 78D0     		beq	.L244
1483:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
ARM GAS  /tmp/ccXuIaHP.s 			page 125


 2917              		.loc 1 1483 0
 2918 0026 0323     		movs	r3, #3
 2919 0028 80F85D30 		strb	r3, [r0, #93]
1484:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pData;
 2920              		.loc 1 1484 0
 2921 002c 0023     		movs	r3, #0
 2922 002e 0366     		str	r3, [r0, #96]
1485:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 2923              		.loc 1 1485 0
 2924 0030 8163     		str	r1, [r0, #56]
1486:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
 2925              		.loc 1 1486 0
 2926 0032 8287     		strh	r2, [r0, #60]	@ movhi
1487:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2927              		.loc 1 1487 0
 2928 0034 C287     		strh	r2, [r0, #62]	@ movhi
1490:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
 2929              		.loc 1 1490 0
 2930 0036 0364     		str	r3, [r0, #64]
1491:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxISR       = NULL;
 2931              		.loc 1 1491 0
 2932 0038 0365     		str	r3, [r0, #80]
1492:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = 0U;
 2933              		.loc 1 1492 0
 2934 003a C364     		str	r3, [r0, #76]
1493:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = 0U;
 2935              		.loc 1 1493 0
 2936 003c A0F84430 		strh	r3, [r0, #68]	@ movhi
1494:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2937              		.loc 1 1494 0
 2938 0040 A0F84630 		strh	r3, [r0, #70]	@ movhi
1497:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2939              		.loc 1 1497 0
 2940 0044 8368     		ldr	r3, [r0, #8]
 2941 0046 B3F5004F 		cmp	r3, #32768
 2942 004a 04D1     		bne	.L237
1499:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2943              		.loc 1 1499 0
 2944 004c 0268     		ldr	r2, [r0]
 2945              	.LVL225:
 2946 004e 1368     		ldr	r3, [r2]
 2947 0050 43F48043 		orr	r3, r3, #16384
 2948 0054 1360     		str	r3, [r2]
 2949              	.LVL226:
 2950              	.L237:
1504:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2951              		.loc 1 1504 0
 2952 0056 A36A     		ldr	r3, [r4, #40]
 2953 0058 B3F5005F 		cmp	r3, #8192
 2954 005c 0BD1     		bne	.L238
1506:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 2955              		.loc 1 1506 0
 2956 005e 2268     		ldr	r2, [r4]
 2957 0060 1368     		ldr	r3, [r2]
 2958 0062 23F40053 		bic	r3, r3, #8192
 2959 0066 1B04     		lsls	r3, r3, #16
 2960 0068 1B0C     		lsrs	r3, r3, #16
ARM GAS  /tmp/ccXuIaHP.s 			page 126


 2961 006a 1360     		str	r3, [r2]
 2962 006c 2268     		ldr	r2, [r4]
 2963 006e 1368     		ldr	r3, [r2]
 2964 0070 43F40053 		orr	r3, r3, #8192
 2965 0074 1360     		str	r3, [r2]
 2966              	.L238:
1511:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2967              		.loc 1 1511 0
 2968 0076 636D     		ldr	r3, [r4, #84]
 2969 0078 2B4A     		ldr	r2, .L247
 2970 007a 1A64     		str	r2, [r3, #64]
1514:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2971              		.loc 1 1514 0
 2972 007c 636D     		ldr	r3, [r4, #84]
 2973 007e 2B4A     		ldr	r2, .L247+4
 2974 0080 DA63     		str	r2, [r3, #60]
1517:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2975              		.loc 1 1517 0
 2976 0082 636D     		ldr	r3, [r4, #84]
 2977 0084 2A4A     		ldr	r2, .L247+8
 2978 0086 DA64     		str	r2, [r3, #76]
1520:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 2979              		.loc 1 1520 0
 2980 0088 636D     		ldr	r3, [r4, #84]
 2981 008a 0022     		movs	r2, #0
 2982 008c 1A65     		str	r2, [r3, #80]
1522:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* packing mode is enabled only if the DMA setting is HALWORD */
 2983              		.loc 1 1522 0
 2984 008e 2268     		ldr	r2, [r4]
 2985 0090 5368     		ldr	r3, [r2, #4]
 2986 0092 23F48043 		bic	r3, r3, #16384
 2987 0096 5360     		str	r3, [r2, #4]
1524:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2988              		.loc 1 1524 0
 2989 0098 E368     		ldr	r3, [r4, #12]
 2990 009a B3F5E06F 		cmp	r3, #1792
 2991 009e 1CD8     		bhi	.L239
1524:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 2992              		.loc 1 1524 0 is_stmt 0 discriminator 1
 2993 00a0 636D     		ldr	r3, [r4, #84]
 2994 00a2 9B69     		ldr	r3, [r3, #24]
 2995 00a4 B3F5005F 		cmp	r3, #8192
 2996 00a8 17D1     		bne	.L239
1527:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 2997              		.loc 1 1527 0 is_stmt 1
 2998 00aa E38F     		ldrh	r3, [r4, #62]
 2999 00ac 13F0010F 		tst	r3, #1
 3000 00b0 09D1     		bne	.L240
1529:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 3001              		.loc 1 1529 0
 3002 00b2 2268     		ldr	r2, [r4]
 3003 00b4 5368     		ldr	r3, [r2, #4]
 3004 00b6 23F48043 		bic	r3, r3, #16384
 3005 00ba 5360     		str	r3, [r2, #4]
1530:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 3006              		.loc 1 1530 0
 3007 00bc E38F     		ldrh	r3, [r4, #62]
ARM GAS  /tmp/ccXuIaHP.s 			page 127


 3008 00be C3F34E03 		ubfx	r3, r3, #1, #15
 3009 00c2 E387     		strh	r3, [r4, #62]	@ movhi
 3010 00c4 09E0     		b	.L239
 3011              	.L240:
1534:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 3012              		.loc 1 1534 0
 3013 00c6 2268     		ldr	r2, [r4]
 3014 00c8 5368     		ldr	r3, [r2, #4]
 3015 00ca 43F48043 		orr	r3, r3, #16384
 3016 00ce 5360     		str	r3, [r2, #4]
1535:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 3017              		.loc 1 1535 0
 3018 00d0 E38F     		ldrh	r3, [r4, #62]
 3019 00d2 C3F34E03 		ubfx	r3, r3, #1, #15
 3020 00d6 0133     		adds	r3, r3, #1
 3021 00d8 E387     		strh	r3, [r4, #62]	@ movhi
 3022              	.L239:
1540:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3023              		.loc 1 1540 0
 3024 00da 2268     		ldr	r2, [r4]
 3025 00dc E38F     		ldrh	r3, [r4, #62]
 3026 00de 9BB2     		uxth	r3, r3
 3027 00e0 0C32     		adds	r2, r2, #12
 3028 00e2 A16B     		ldr	r1, [r4, #56]
 3029              	.LVL227:
 3030 00e4 606D     		ldr	r0, [r4, #84]
 3031              	.LVL228:
 3032 00e6 FFF7FEFF 		bl	HAL_DMA_Start_IT
 3033              	.LVL229:
1543:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3034              		.loc 1 1543 0
 3035 00ea 2368     		ldr	r3, [r4]
 3036 00ec 1A68     		ldr	r2, [r3]
 3037 00ee 12F0400F 		tst	r2, #64
 3038 00f2 03D1     		bne	.L241
1546:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3039              		.loc 1 1546 0
 3040 00f4 1A68     		ldr	r2, [r3]
 3041 00f6 42F04002 		orr	r2, r2, #64
 3042 00fa 1A60     		str	r2, [r3]
 3043              	.L241:
1550:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3044              		.loc 1 1550 0
 3045 00fc 2268     		ldr	r2, [r4]
 3046 00fe 5368     		ldr	r3, [r2, #4]
 3047 0100 43F02003 		orr	r3, r3, #32
 3048 0104 5360     		str	r3, [r2, #4]
1553:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3049              		.loc 1 1553 0
 3050 0106 2268     		ldr	r2, [r4]
 3051 0108 5368     		ldr	r3, [r2, #4]
 3052 010a 43F00203 		orr	r3, r3, #2
 3053 010e 5360     		str	r3, [r2, #4]
1462:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3054              		.loc 1 1462 0
 3055 0110 0020     		movs	r0, #0
 3056 0112 02E0     		b	.L236
ARM GAS  /tmp/ccXuIaHP.s 			page 128


 3057              	.LVL230:
 3058              	.L243:
1472:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 3059              		.loc 1 1472 0
 3060 0114 0220     		movs	r0, #2
 3061              	.LVL231:
 3062 0116 00E0     		b	.L236
 3063              	.LVL232:
 3064              	.L244:
1478:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 3065              		.loc 1 1478 0
 3066 0118 0120     		movs	r0, #1
 3067              	.LVL233:
 3068              	.L236:
1557:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
 3069              		.loc 1 1557 0
 3070 011a 0023     		movs	r3, #0
 3071 011c 84F85C30 		strb	r3, [r4, #92]
1558:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 3072              		.loc 1 1558 0
 3073 0120 10BD     		pop	{r4, pc}
 3074              	.LVL234:
 3075              	.L242:
 3076              	.LCFI33:
 3077              		.cfi_def_cfa_offset 0
 3078              		.cfi_restore 4
 3079              		.cfi_restore 14
1468:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3080              		.loc 1 1468 0
 3081 0122 0220     		movs	r0, #2
 3082              	.LVL235:
 3083 0124 7047     		bx	lr
 3084              	.L248:
 3085 0126 00BF     		.align	2
 3086              	.L247:
 3087 0128 00000000 		.word	SPI_DMAHalfTransmitCplt
 3088 012c 00000000 		.word	SPI_DMATransmitCplt
 3089 0130 00000000 		.word	SPI_DMAError
 3090              		.cfi_endproc
 3091              	.LFE146:
 3093              		.section	.text.HAL_SPI_TransmitReceive_DMA,"ax",%progbits
 3094              		.align	2
 3095              		.global	HAL_SPI_TransmitReceive_DMA
 3096              		.thumb
 3097              		.thumb_func
 3099              	HAL_SPI_TransmitReceive_DMA:
 3100              	.LFB148:
1689:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tmp = 0U, tmp1 = 0U;
 3101              		.loc 1 1689 0
 3102              		.cfi_startproc
 3103              		@ args = 0, pretend = 0, frame = 0
 3104              		@ frame_needed = 0, uses_anonymous_args = 0
 3105              	.LVL236:
 3106 0000 38B5     		push	{r3, r4, r5, lr}
 3107              	.LCFI34:
 3108              		.cfi_def_cfa_offset 16
 3109              		.cfi_offset 3, -16
ARM GAS  /tmp/ccXuIaHP.s 			page 129


 3110              		.cfi_offset 4, -12
 3111              		.cfi_offset 5, -8
 3112              		.cfi_offset 14, -4
 3113              	.LVL237:
1697:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3114              		.loc 1 1697 0
 3115 0002 90F85C40 		ldrb	r4, [r0, #92]	@ zero_extendqisi2
 3116 0006 012C     		cmp	r4, #1
 3117 0008 00F0F180 		beq	.L263
 3118 000c 0446     		mov	r4, r0
1697:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3119              		.loc 1 1697 0 is_stmt 0 discriminator 2
 3120 000e 0120     		movs	r0, #1
 3121              	.LVL238:
 3122 0010 84F85C00 		strb	r0, [r4, #92]
1699:HALLIB/Src/stm32f7xx_hal_spi.c ****   tmp1 = hspi->Init.Mode;
 3123              		.loc 1 1699 0 is_stmt 1 discriminator 2
 3124 0014 94F85D00 		ldrb	r0, [r4, #93]	@ zero_extendqisi2
 3125 0018 C0B2     		uxtb	r0, r0
 3126              	.LVL239:
1700:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (!((tmp == HAL_SPI_STATE_READY) ||
 3127              		.loc 1 1700 0 discriminator 2
 3128 001a 6568     		ldr	r5, [r4, #4]
 3129              	.LVL240:
1701:HALLIB/Src/stm32f7xx_hal_spi.c ****         ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL
 3130              		.loc 1 1701 0 discriminator 2
 3131 001c 0128     		cmp	r0, #1
 3132 001e 0AD0     		beq	.L251
1701:HALLIB/Src/stm32f7xx_hal_spi.c ****         ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL
 3133              		.loc 1 1701 0 is_stmt 0 discriminator 1
 3134 0020 B5F5827F 		cmp	r5, #260
 3135 0024 40F0D680 		bne	.L264
1702:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3136              		.loc 1 1702 0 is_stmt 1
 3137 0028 A568     		ldr	r5, [r4, #8]
 3138              	.LVL241:
 3139 002a 002D     		cmp	r5, #0
 3140 002c 40F0D480 		bne	.L265
1702:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3141              		.loc 1 1702 0 is_stmt 0 discriminator 1
 3142 0030 0428     		cmp	r0, #4
 3143 0032 40F0D380 		bne	.L266
 3144              	.L251:
1708:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3145              		.loc 1 1708 0 is_stmt 1
 3146 0036 002A     		cmp	r2, #0
 3147 0038 18BF     		it	ne
 3148 003a 0029     		cmpne	r1, #0
 3149 003c 00F0D080 		beq	.L267
1708:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3150              		.loc 1 1708 0 is_stmt 0 discriminator 1
 3151 0040 002B     		cmp	r3, #0
 3152 0042 00F0CF80 		beq	.L268
1715:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3153              		.loc 1 1715 0 is_stmt 1
 3154 0046 94F85D00 		ldrb	r0, [r4, #93]	@ zero_extendqisi2
 3155              	.LVL242:
ARM GAS  /tmp/ccXuIaHP.s 			page 130


 3156 004a C0B2     		uxtb	r0, r0
 3157 004c 0428     		cmp	r0, #4
 3158 004e 02D0     		beq	.L253
1717:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3159              		.loc 1 1717 0
 3160 0050 0520     		movs	r0, #5
 3161 0052 84F85D00 		strb	r0, [r4, #93]
 3162              	.L253:
1721:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 3163              		.loc 1 1721 0
 3164 0056 0020     		movs	r0, #0
 3165 0058 2066     		str	r0, [r4, #96]
1722:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = Size;
 3166              		.loc 1 1722 0
 3167 005a A163     		str	r1, [r4, #56]
1723:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = Size;
 3168              		.loc 1 1723 0
 3169 005c A387     		strh	r3, [r4, #60]	@ movhi
1724:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 3170              		.loc 1 1724 0
 3171 005e E387     		strh	r3, [r4, #62]	@ movhi
1725:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 3172              		.loc 1 1725 0
 3173 0060 2264     		str	r2, [r4, #64]
1726:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
 3174              		.loc 1 1726 0
 3175 0062 A4F84430 		strh	r3, [r4, #68]	@ movhi
1727:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3176              		.loc 1 1727 0
 3177 0066 A4F84630 		strh	r3, [r4, #70]	@ movhi
1730:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
 3178              		.loc 1 1730 0
 3179 006a E064     		str	r0, [r4, #76]
1731:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3180              		.loc 1 1731 0
 3181 006c 2065     		str	r0, [r4, #80]
1735:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3182              		.loc 1 1735 0
 3183 006e A36A     		ldr	r3, [r4, #40]
 3184              	.LVL243:
 3185 0070 B3F5005F 		cmp	r3, #8192
 3186 0074 0BD1     		bne	.L254
1737:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3187              		.loc 1 1737 0
 3188 0076 2268     		ldr	r2, [r4]
 3189              	.LVL244:
 3190 0078 1368     		ldr	r3, [r2]
 3191 007a 23F40053 		bic	r3, r3, #8192
 3192 007e 1B04     		lsls	r3, r3, #16
 3193 0080 1B0C     		lsrs	r3, r3, #16
 3194 0082 1360     		str	r3, [r2]
 3195              	.LVL245:
 3196 0084 2268     		ldr	r2, [r4]
 3197 0086 1368     		ldr	r3, [r2]
 3198 0088 43F40053 		orr	r3, r3, #8192
 3199 008c 1360     		str	r3, [r2]
 3200              	.L254:
ARM GAS  /tmp/ccXuIaHP.s 			page 131


1742:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3201              		.loc 1 1742 0
 3202 008e 2268     		ldr	r2, [r4]
 3203 0090 5368     		ldr	r3, [r2, #4]
 3204 0092 23F4C043 		bic	r3, r3, #24576
 3205 0096 5360     		str	r3, [r2, #4]
1745:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3206              		.loc 1 1745 0
 3207 0098 E368     		ldr	r3, [r4, #12]
 3208 009a B3F5E06F 		cmp	r3, #1792
 3209 009e 05D9     		bls	.L255
1748:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3210              		.loc 1 1748 0
 3211 00a0 2268     		ldr	r2, [r4]
 3212 00a2 5368     		ldr	r3, [r2, #4]
 3213 00a4 23F48053 		bic	r3, r3, #4096
 3214 00a8 5360     		str	r3, [r2, #4]
 3215 00aa 48E0     		b	.L256
 3216              	.L255:
1753:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3217              		.loc 1 1753 0
 3218 00ac 2268     		ldr	r2, [r4]
 3219 00ae 5368     		ldr	r3, [r2, #4]
 3220 00b0 43F48053 		orr	r3, r3, #4096
 3221 00b4 5360     		str	r3, [r2, #4]
1755:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 3222              		.loc 1 1755 0
 3223 00b6 636D     		ldr	r3, [r4, #84]
 3224 00b8 9B69     		ldr	r3, [r3, #24]
 3225 00ba B3F5005F 		cmp	r3, #8192
 3226 00be 17D1     		bne	.L257
1757:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 3227              		.loc 1 1757 0
 3228 00c0 A38F     		ldrh	r3, [r4, #60]
 3229 00c2 13F0010F 		tst	r3, #1
 3230 00c6 09D1     		bne	.L258
1759:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->TxXferCount = hspi->TxXferCount >> 1U;
 3231              		.loc 1 1759 0
 3232 00c8 2268     		ldr	r2, [r4]
 3233 00ca 5368     		ldr	r3, [r2, #4]
 3234 00cc 23F48043 		bic	r3, r3, #16384
 3235 00d0 5360     		str	r3, [r2, #4]
1760:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 3236              		.loc 1 1760 0
 3237 00d2 E38F     		ldrh	r3, [r4, #62]
 3238 00d4 C3F34E03 		ubfx	r3, r3, #1, #15
 3239 00d8 E387     		strh	r3, [r4, #62]	@ movhi
 3240 00da 09E0     		b	.L257
 3241              	.L258:
1764:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 3242              		.loc 1 1764 0
 3243 00dc 2268     		ldr	r2, [r4]
 3244 00de 5368     		ldr	r3, [r2, #4]
 3245 00e0 43F48043 		orr	r3, r3, #16384
 3246 00e4 5360     		str	r3, [r2, #4]
1765:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 3247              		.loc 1 1765 0
ARM GAS  /tmp/ccXuIaHP.s 			page 132


 3248 00e6 E38F     		ldrh	r3, [r4, #62]
 3249 00e8 C3F34E03 		ubfx	r3, r3, #1, #15
 3250 00ec 0133     		adds	r3, r3, #1
 3251 00ee E387     		strh	r3, [r4, #62]	@ movhi
 3252              	.L257:
1769:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 3253              		.loc 1 1769 0
 3254 00f0 A36D     		ldr	r3, [r4, #88]
 3255 00f2 9B69     		ldr	r3, [r3, #24]
 3256 00f4 B3F5005F 		cmp	r3, #8192
 3257 00f8 21D1     		bne	.L256
1772:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3258              		.loc 1 1772 0
 3259 00fa 2268     		ldr	r2, [r4]
 3260 00fc 5368     		ldr	r3, [r2, #4]
 3261 00fe 23F48053 		bic	r3, r3, #4096
 3262 0102 5360     		str	r3, [r2, #4]
1774:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 3263              		.loc 1 1774 0
 3264 0104 B4F84630 		ldrh	r3, [r4, #70]
 3265 0108 13F0010F 		tst	r3, #1
 3266 010c 0BD1     		bne	.L259
1776:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->RxXferCount = hspi->RxXferCount >> 1U;
 3267              		.loc 1 1776 0
 3268 010e 2268     		ldr	r2, [r4]
 3269 0110 5368     		ldr	r3, [r2, #4]
 3270 0112 23F40053 		bic	r3, r3, #8192
 3271 0116 5360     		str	r3, [r2, #4]
1777:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 3272              		.loc 1 1777 0
 3273 0118 B4F84630 		ldrh	r3, [r4, #70]
 3274 011c C3F34E03 		ubfx	r3, r3, #1, #15
 3275 0120 A4F84630 		strh	r3, [r4, #70]	@ movhi
 3276 0124 0BE0     		b	.L256
 3277              	.L259:
1781:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 3278              		.loc 1 1781 0
 3279 0126 2268     		ldr	r2, [r4]
 3280 0128 5368     		ldr	r3, [r2, #4]
 3281 012a 43F40053 		orr	r3, r3, #8192
 3282 012e 5360     		str	r3, [r2, #4]
1782:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 3283              		.loc 1 1782 0
 3284 0130 B4F84630 		ldrh	r3, [r4, #70]
 3285 0134 C3F34E03 		ubfx	r3, r3, #1, #15
 3286 0138 0133     		adds	r3, r3, #1
 3287 013a A4F84630 		strh	r3, [r4, #70]	@ movhi
 3288              	.L256:
1788:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3289              		.loc 1 1788 0
 3290 013e 94F85D30 		ldrb	r3, [r4, #93]	@ zero_extendqisi2
 3291 0142 DBB2     		uxtb	r3, r3
 3292 0144 042B     		cmp	r3, #4
 3293 0146 06D1     		bne	.L260
1791:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 3294              		.loc 1 1791 0
 3295 0148 A36D     		ldr	r3, [r4, #88]
ARM GAS  /tmp/ccXuIaHP.s 			page 133


 3296 014a 2A4A     		ldr	r2, .L270
 3297 014c 1A64     		str	r2, [r3, #64]
1792:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3298              		.loc 1 1792 0
 3299 014e A36D     		ldr	r3, [r4, #88]
 3300 0150 294A     		ldr	r2, .L270+4
 3301 0152 DA63     		str	r2, [r3, #60]
 3302 0154 05E0     		b	.L261
 3303              	.L260:
1797:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 3304              		.loc 1 1797 0
 3305 0156 A36D     		ldr	r3, [r4, #88]
 3306 0158 284A     		ldr	r2, .L270+8
 3307 015a 1A64     		str	r2, [r3, #64]
1798:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3308              		.loc 1 1798 0
 3309 015c A36D     		ldr	r3, [r4, #88]
 3310 015e 284A     		ldr	r2, .L270+12
 3311 0160 DA63     		str	r2, [r3, #60]
 3312              	.L261:
1802:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3313              		.loc 1 1802 0
 3314 0162 A36D     		ldr	r3, [r4, #88]
 3315 0164 274A     		ldr	r2, .L270+16
 3316 0166 DA64     		str	r2, [r3, #76]
1805:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3317              		.loc 1 1805 0
 3318 0168 A36D     		ldr	r3, [r4, #88]
 3319 016a 0025     		movs	r5, #0
 3320 016c 1D65     		str	r5, [r3, #80]
1808:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3321              		.loc 1 1808 0
 3322 016e 2168     		ldr	r1, [r4]
 3323              	.LVL246:
 3324 0170 B4F84630 		ldrh	r3, [r4, #70]
 3325 0174 9BB2     		uxth	r3, r3
 3326 0176 226C     		ldr	r2, [r4, #64]
 3327 0178 0C31     		adds	r1, r1, #12
 3328 017a A06D     		ldr	r0, [r4, #88]
 3329 017c FFF7FEFF 		bl	HAL_DMA_Start_IT
 3330              	.LVL247:
1811:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3331              		.loc 1 1811 0
 3332 0180 2268     		ldr	r2, [r4]
 3333 0182 5368     		ldr	r3, [r2, #4]
 3334 0184 43F00103 		orr	r3, r3, #1
 3335 0188 5360     		str	r3, [r2, #4]
1815:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferCpltCallback     = NULL;
 3336              		.loc 1 1815 0
 3337 018a 636D     		ldr	r3, [r4, #84]
 3338 018c 1D64     		str	r5, [r3, #64]
1816:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferErrorCallback    = NULL;
 3339              		.loc 1 1816 0
 3340 018e 636D     		ldr	r3, [r4, #84]
 3341 0190 DD63     		str	r5, [r3, #60]
1817:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->hdmatx->XferAbortCallback    = NULL;
 3342              		.loc 1 1817 0
ARM GAS  /tmp/ccXuIaHP.s 			page 134


 3343 0192 636D     		ldr	r3, [r4, #84]
 3344 0194 DD64     		str	r5, [r3, #76]
1818:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3345              		.loc 1 1818 0
 3346 0196 636D     		ldr	r3, [r4, #84]
 3347 0198 1D65     		str	r5, [r3, #80]
1821:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3348              		.loc 1 1821 0
 3349 019a 2268     		ldr	r2, [r4]
 3350 019c E38F     		ldrh	r3, [r4, #62]
 3351 019e 9BB2     		uxth	r3, r3
 3352 01a0 0C32     		adds	r2, r2, #12
 3353 01a2 A16B     		ldr	r1, [r4, #56]
 3354 01a4 606D     		ldr	r0, [r4, #84]
 3355 01a6 FFF7FEFF 		bl	HAL_DMA_Start_IT
 3356              	.LVL248:
1824:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3357              		.loc 1 1824 0
 3358 01aa 2368     		ldr	r3, [r4]
 3359 01ac 1A68     		ldr	r2, [r3]
 3360 01ae 12F0400F 		tst	r2, #64
 3361 01b2 03D1     		bne	.L262
1827:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3362              		.loc 1 1827 0
 3363 01b4 1A68     		ldr	r2, [r3]
 3364 01b6 42F04002 		orr	r2, r2, #64
 3365 01ba 1A60     		str	r2, [r3]
 3366              	.L262:
1830:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3367              		.loc 1 1830 0
 3368 01bc 2268     		ldr	r2, [r4]
 3369 01be 5368     		ldr	r3, [r2, #4]
 3370 01c0 43F02003 		orr	r3, r3, #32
 3371 01c4 5360     		str	r3, [r2, #4]
1833:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3372              		.loc 1 1833 0
 3373 01c6 2268     		ldr	r2, [r4]
 3374 01c8 5368     		ldr	r3, [r2, #4]
 3375 01ca 43F00203 		orr	r3, r3, #2
 3376 01ce 5360     		str	r3, [r2, #4]
1691:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3377              		.loc 1 1691 0
 3378 01d0 0020     		movs	r0, #0
 3379 01d2 08E0     		b	.L252
 3380              	.LVL249:
 3381              	.L264:
1704:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 3382              		.loc 1 1704 0
 3383 01d4 0220     		movs	r0, #2
 3384              	.LVL250:
 3385 01d6 06E0     		b	.L252
 3386              	.LVL251:
 3387              	.L265:
 3388 01d8 0220     		movs	r0, #2
 3389              	.LVL252:
 3390 01da 04E0     		b	.L252
 3391              	.LVL253:
ARM GAS  /tmp/ccXuIaHP.s 			page 135


 3392              	.L266:
 3393 01dc 0220     		movs	r0, #2
 3394              	.LVL254:
 3395 01de 02E0     		b	.L252
 3396              	.LVL255:
 3397              	.L267:
1710:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 3398              		.loc 1 1710 0
 3399 01e0 0120     		movs	r0, #1
 3400              	.LVL256:
 3401 01e2 00E0     		b	.L252
 3402              	.LVL257:
 3403              	.L268:
 3404 01e4 0120     		movs	r0, #1
 3405              	.LVL258:
 3406              	.L252:
1837:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
 3407              		.loc 1 1837 0
 3408 01e6 0023     		movs	r3, #0
 3409 01e8 84F85C30 		strb	r3, [r4, #92]
1838:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 3410              		.loc 1 1838 0
 3411 01ec 38BD     		pop	{r3, r4, r5, pc}
 3412              	.LVL259:
 3413              	.L263:
1697:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3414              		.loc 1 1697 0
 3415 01ee 0220     		movs	r0, #2
 3416              	.LVL260:
1839:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3417              		.loc 1 1839 0
 3418 01f0 38BD     		pop	{r3, r4, r5, pc}
 3419              	.LVL261:
 3420              	.L271:
 3421 01f2 00BF     		.align	2
 3422              	.L270:
 3423 01f4 00000000 		.word	SPI_DMAHalfReceiveCplt
 3424 01f8 00000000 		.word	SPI_DMAReceiveCplt
 3425 01fc 00000000 		.word	SPI_DMAHalfTransmitReceiveCplt
 3426 0200 00000000 		.word	SPI_DMATransmitReceiveCplt
 3427 0204 00000000 		.word	SPI_DMAError
 3428              		.cfi_endproc
 3429              	.LFE148:
 3431              		.section	.text.HAL_SPI_Receive_DMA,"ax",%progbits
 3432              		.align	2
 3433              		.global	HAL_SPI_Receive_DMA
 3434              		.thumb
 3435              		.thumb_func
 3437              	HAL_SPI_Receive_DMA:
 3438              	.LFB147:
1571:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode = HAL_OK;
 3439              		.loc 1 1571 0
 3440              		.cfi_startproc
 3441              		@ args = 0, pretend = 0, frame = 0
 3442              		@ frame_needed = 0, uses_anonymous_args = 0
 3443              	.LVL262:
 3444 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccXuIaHP.s 			page 136


 3445              	.LCFI35:
 3446              		.cfi_def_cfa_offset 16
 3447              		.cfi_offset 3, -16
 3448              		.cfi_offset 4, -12
 3449              		.cfi_offset 5, -8
 3450              		.cfi_offset 14, -4
 3451 0002 0446     		mov	r4, r0
 3452              	.LVL263:
1574:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3453              		.loc 1 1574 0
 3454 0004 8568     		ldr	r5, [r0, #8]
 3455 0006 5DB9     		cbnz	r5, .L273
1574:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3456              		.loc 1 1574 0 is_stmt 0 discriminator 1
 3457 0008 4368     		ldr	r3, [r0, #4]
 3458 000a B3F5827F 		cmp	r3, #260
 3459 000e 07D1     		bne	.L273
1576:HALLIB/Src/stm32f7xx_hal_spi.c ****     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line 
 3460              		.loc 1 1576 0 is_stmt 1
 3461 0010 0423     		movs	r3, #4
 3462 0012 80F85D30 		strb	r3, [r0, #93]
1578:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3463              		.loc 1 1578 0
 3464 0016 1346     		mov	r3, r2
 3465 0018 0A46     		mov	r2, r1
 3466              	.LVL264:
 3467 001a FFF7FEFF 		bl	HAL_SPI_TransmitReceive_DMA
 3468              	.LVL265:
 3469 001e 38BD     		pop	{r3, r4, r5, pc}
 3470              	.LVL266:
 3471              	.L273:
1582:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3472              		.loc 1 1582 0
 3473 0020 94F85C00 		ldrb	r0, [r4, #92]	@ zero_extendqisi2
 3474              	.LVL267:
 3475 0024 0128     		cmp	r0, #1
 3476 0026 00F08280 		beq	.L282
1582:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3477              		.loc 1 1582 0 is_stmt 0 discriminator 2
 3478 002a 0123     		movs	r3, #1
 3479 002c 84F85C30 		strb	r3, [r4, #92]
1584:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3480              		.loc 1 1584 0 is_stmt 1 discriminator 2
 3481 0030 94F85D00 		ldrb	r0, [r4, #93]	@ zero_extendqisi2
 3482 0034 C0B2     		uxtb	r0, r0
 3483 0036 9842     		cmp	r0, r3
 3484 0038 70D1     		bne	.L283
1590:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3485              		.loc 1 1590 0
 3486 003a 002A     		cmp	r2, #0
 3487 003c 18BF     		it	ne
 3488 003e 0029     		cmpne	r1, #0
 3489 0040 6ED0     		beq	.L284
1597:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 3490              		.loc 1 1597 0
 3491 0042 0423     		movs	r3, #4
 3492 0044 84F85D30 		strb	r3, [r4, #93]
ARM GAS  /tmp/ccXuIaHP.s 			page 137


1598:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr  = (uint8_t *)pData;
 3493              		.loc 1 1598 0
 3494 0048 0023     		movs	r3, #0
 3495 004a 2366     		str	r3, [r4, #96]
1599:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferSize  = Size;
 3496              		.loc 1 1599 0
 3497 004c 2164     		str	r1, [r4, #64]
1600:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = Size;
 3498              		.loc 1 1600 0
 3499 004e A4F84420 		strh	r2, [r4, #68]	@ movhi
1601:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3500              		.loc 1 1601 0
 3501 0052 A4F84620 		strh	r2, [r4, #70]	@ movhi
1604:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxISR       = NULL;
 3502              		.loc 1 1604 0
 3503 0056 E364     		str	r3, [r4, #76]
1605:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferSize  = 0U;
 3504              		.loc 1 1605 0
 3505 0058 2365     		str	r3, [r4, #80]
1606:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 3506              		.loc 1 1606 0
 3507 005a A387     		strh	r3, [r4, #60]	@ movhi
1607:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3508              		.loc 1 1607 0
 3509 005c E387     		strh	r3, [r4, #62]	@ movhi
1610:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3510              		.loc 1 1610 0
 3511 005e B5F5004F 		cmp	r5, #32768
 3512 0062 04D1     		bne	.L276
1612:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3513              		.loc 1 1612 0
 3514 0064 2268     		ldr	r2, [r4]
 3515              	.LVL268:
 3516 0066 1368     		ldr	r3, [r2]
 3517 0068 23F48043 		bic	r3, r3, #16384
 3518 006c 1360     		str	r3, [r2]
 3519              	.LVL269:
 3520              	.L276:
1617:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3521              		.loc 1 1617 0
 3522 006e A36A     		ldr	r3, [r4, #40]
 3523 0070 B3F5005F 		cmp	r3, #8192
 3524 0074 0BD1     		bne	.L277
1619:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3525              		.loc 1 1619 0
 3526 0076 2268     		ldr	r2, [r4]
 3527 0078 1368     		ldr	r3, [r2]
 3528 007a 23F40053 		bic	r3, r3, #8192
 3529 007e 1B04     		lsls	r3, r3, #16
 3530 0080 1B0C     		lsrs	r3, r3, #16
 3531 0082 1360     		str	r3, [r2]
 3532 0084 2268     		ldr	r2, [r4]
 3533 0086 1368     		ldr	r3, [r2]
 3534 0088 43F40053 		orr	r3, r3, #8192
 3535 008c 1360     		str	r3, [r2]
 3536              	.L277:
1624:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
ARM GAS  /tmp/ccXuIaHP.s 			page 138


 3537              		.loc 1 1624 0
 3538 008e E368     		ldr	r3, [r4, #12]
 3539 0090 B3F5E06F 		cmp	r3, #1792
 3540 0094 04D8     		bhi	.L278
1624:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3541              		.loc 1 1624 0 is_stmt 0 discriminator 1
 3542 0096 A36D     		ldr	r3, [r4, #88]
 3543 0098 9B69     		ldr	r3, [r3, #24]
 3544 009a B3F5005F 		cmp	r3, #8192
 3545 009e 41D0     		beq	.L285
 3546              	.L278:
1631:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 3547              		.loc 1 1631 0 is_stmt 1
 3548 00a0 2268     		ldr	r2, [r4]
 3549 00a2 5368     		ldr	r3, [r2, #4]
 3550 00a4 23F40053 		bic	r3, r3, #8192
 3551 00a8 5360     		str	r3, [r2, #4]
1632:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3552              		.loc 1 1632 0
 3553 00aa E368     		ldr	r3, [r4, #12]
 3554 00ac B3F5E06F 		cmp	r3, #1792
 3555 00b0 05D9     		bls	.L279
1635:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3556              		.loc 1 1635 0
 3557 00b2 2268     		ldr	r2, [r4]
 3558 00b4 5368     		ldr	r3, [r2, #4]
 3559 00b6 23F48053 		bic	r3, r3, #4096
 3560 00ba 5360     		str	r3, [r2, #4]
 3561 00bc 04E0     		b	.L280
 3562              	.L279:
1640:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3563              		.loc 1 1640 0
 3564 00be 2268     		ldr	r2, [r4]
 3565 00c0 5368     		ldr	r3, [r2, #4]
 3566 00c2 43F48053 		orr	r3, r3, #4096
 3567 00c6 5360     		str	r3, [r2, #4]
 3568              	.L280:
1644:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3569              		.loc 1 1644 0
 3570 00c8 A36D     		ldr	r3, [r4, #88]
 3571 00ca 1A4A     		ldr	r2, .L287
 3572 00cc 1A64     		str	r2, [r3, #64]
1647:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3573              		.loc 1 1647 0
 3574 00ce A36D     		ldr	r3, [r4, #88]
 3575 00d0 194A     		ldr	r2, .L287+4
 3576 00d2 DA63     		str	r2, [r3, #60]
1650:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3577              		.loc 1 1650 0
 3578 00d4 A36D     		ldr	r3, [r4, #88]
 3579 00d6 194A     		ldr	r2, .L287+8
 3580 00d8 DA64     		str	r2, [r3, #76]
1653:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3581              		.loc 1 1653 0
 3582 00da A36D     		ldr	r3, [r4, #88]
 3583 00dc 0022     		movs	r2, #0
 3584 00de 1A65     		str	r2, [r3, #80]
ARM GAS  /tmp/ccXuIaHP.s 			page 139


1656:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3585              		.loc 1 1656 0
 3586 00e0 2168     		ldr	r1, [r4]
 3587              	.LVL270:
 3588 00e2 B4F84630 		ldrh	r3, [r4, #70]
 3589 00e6 9BB2     		uxth	r3, r3
 3590 00e8 226C     		ldr	r2, [r4, #64]
 3591 00ea 0C31     		adds	r1, r1, #12
 3592 00ec A06D     		ldr	r0, [r4, #88]
 3593 00ee FFF7FEFF 		bl	HAL_DMA_Start_IT
 3594              	.LVL271:
1659:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3595              		.loc 1 1659 0
 3596 00f2 2368     		ldr	r3, [r4]
 3597 00f4 1A68     		ldr	r2, [r3]
 3598 00f6 12F0400F 		tst	r2, #64
 3599 00fa 03D1     		bne	.L281
1662:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3600              		.loc 1 1662 0
 3601 00fc 1A68     		ldr	r2, [r3]
 3602 00fe 42F04002 		orr	r2, r2, #64
 3603 0102 1A60     		str	r2, [r3]
 3604              	.L281:
1666:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3605              		.loc 1 1666 0
 3606 0104 2268     		ldr	r2, [r4]
 3607 0106 5368     		ldr	r3, [r2, #4]
 3608 0108 43F02003 		orr	r3, r3, #32
 3609 010c 5360     		str	r3, [r2, #4]
1669:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3610              		.loc 1 1669 0
 3611 010e 2268     		ldr	r2, [r4]
 3612 0110 5368     		ldr	r3, [r2, #4]
 3613 0112 43F00103 		orr	r3, r3, #1
 3614 0116 5360     		str	r3, [r2, #4]
1572:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3615              		.loc 1 1572 0
 3616 0118 0020     		movs	r0, #0
 3617 011a 04E0     		b	.L275
 3618              	.LVL272:
 3619              	.L283:
1586:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 3620              		.loc 1 1586 0
 3621 011c 0220     		movs	r0, #2
 3622 011e 02E0     		b	.L275
 3623              	.L284:
1592:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 3624              		.loc 1 1592 0
 3625 0120 0120     		movs	r0, #1
 3626 0122 00E0     		b	.L275
 3627              	.LVL273:
 3628              	.L285:
1627:HALLIB/Src/stm32f7xx_hal_spi.c ****     goto error;
 3629              		.loc 1 1627 0
 3630 0124 0120     		movs	r0, #1
 3631              	.LVL274:
 3632              	.L275:
ARM GAS  /tmp/ccXuIaHP.s 			page 140


1673:HALLIB/Src/stm32f7xx_hal_spi.c ****   return errorcode;
 3633              		.loc 1 1673 0
 3634 0126 0023     		movs	r3, #0
 3635 0128 84F85C30 		strb	r3, [r4, #92]
1674:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 3636              		.loc 1 1674 0
 3637 012c 38BD     		pop	{r3, r4, r5, pc}
 3638              	.LVL275:
 3639              	.L282:
1582:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3640              		.loc 1 1582 0
 3641 012e 0220     		movs	r0, #2
1675:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3642              		.loc 1 1675 0
 3643 0130 38BD     		pop	{r3, r4, r5, pc}
 3644              	.LVL276:
 3645              	.L288:
 3646 0132 00BF     		.align	2
 3647              	.L287:
 3648 0134 00000000 		.word	SPI_DMAHalfReceiveCplt
 3649 0138 00000000 		.word	SPI_DMAReceiveCplt
 3650 013c 00000000 		.word	SPI_DMAError
 3651              		.cfi_endproc
 3652              	.LFE147:
 3654              		.section	.text.HAL_SPI_Abort,"ax",%progbits
 3655              		.align	2
 3656              		.global	HAL_SPI_Abort
 3657              		.thumb
 3658              		.thumb_func
 3660              	HAL_SPI_Abort:
 3661              	.LFB149:
1855:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
 3662              		.loc 1 1855 0
 3663              		.cfi_startproc
 3664              		@ args = 0, pretend = 0, frame = 8
 3665              		@ frame_needed = 0, uses_anonymous_args = 0
 3666              	.LVL277:
 3667 0000 30B5     		push	{r4, r5, lr}
 3668              	.LCFI36:
 3669              		.cfi_def_cfa_offset 12
 3670              		.cfi_offset 4, -12
 3671              		.cfi_offset 5, -8
 3672              		.cfi_offset 14, -4
 3673 0002 85B0     		sub	sp, sp, #20
 3674              	.LCFI37:
 3675              		.cfi_def_cfa_offset 32
 3676 0004 0446     		mov	r4, r0
 3677              	.LVL278:
1863:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3678              		.loc 1 1863 0
 3679 0006 FFF7FEFF 		bl	HAL_GetTick
 3680              	.LVL279:
 3681 000a 0546     		mov	r5, r0
 3682              	.LVL280:
1866:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3683              		.loc 1 1866 0
 3684 000c 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccXuIaHP.s 			page 141


 3685 000e 5A68     		ldr	r2, [r3, #4]
 3686 0010 12F0800F 		tst	r2, #128
 3687 0014 01D0     		beq	.L290
1868:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3688              		.loc 1 1868 0
 3689 0016 4C4A     		ldr	r2, .L307
 3690 0018 2265     		str	r2, [r4, #80]
 3691              	.L290:
1871:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3692              		.loc 1 1871 0
 3693 001a 5B68     		ldr	r3, [r3, #4]
 3694 001c 13F0400F 		tst	r3, #64
 3695 0020 09D0     		beq	.L293
1873:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3696              		.loc 1 1873 0
 3697 0022 4A4B     		ldr	r3, .L307+4
 3698 0024 E364     		str	r3, [r4, #76]
 3699 0026 06E0     		b	.L293
 3700              	.LVL281:
 3701              	.L294:
1878:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 3702              		.loc 1 1878 0
 3703 0028 FFF7FEFF 		bl	HAL_GetTick
 3704              	.LVL282:
 3705 002c 401B     		subs	r0, r0, r5
 3706 002e B0F1FF3F 		cmp	r0, #-1
 3707 0032 00F08680 		beq	.L304
 3708              	.L293:
1876:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3709              		.loc 1 1876 0
 3710 0036 94F85D30 		ldrb	r3, [r4, #93]	@ zero_extendqisi2
 3711 003a DBB2     		uxtb	r3, r3
 3712 003c 072B     		cmp	r3, #7
 3713 003e F3D1     		bne	.L294
1885:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3714              		.loc 1 1885 0
 3715 0040 2268     		ldr	r2, [r4]
 3716 0042 5368     		ldr	r3, [r2, #4]
 3717 0044 23F02003 		bic	r3, r3, #32
 3718 0048 5360     		str	r3, [r2, #4]
1888:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3719              		.loc 1 1888 0
 3720 004a 2368     		ldr	r3, [r4]
 3721 004c 5A68     		ldr	r2, [r3, #4]
 3722 004e 12F0020F 		tst	r2, #2
 3723 0052 03D1     		bne	.L295
1888:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3724              		.loc 1 1888 0 is_stmt 0 discriminator 1
 3725 0054 5B68     		ldr	r3, [r3, #4]
 3726 0056 13F0010F 		tst	r3, #1
 3727 005a 57D0     		beq	.L296
 3728              	.L295:
1891:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 3729              		.loc 1 1891 0 is_stmt 1
 3730 005c 636D     		ldr	r3, [r4, #84]
 3731 005e 43B3     		cbz	r3, .L297
1895:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 142


 3732              		.loc 1 1895 0
 3733 0060 0022     		movs	r2, #0
 3734 0062 1A65     		str	r2, [r3, #80]
1898:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 3735              		.loc 1 1898 0
 3736 0064 606D     		ldr	r0, [r4, #84]
 3737 0066 FFF7FEFF 		bl	HAL_DMA_Abort
 3738              	.LVL283:
 3739 006a 08B1     		cbz	r0, .L298
1900:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 3740              		.loc 1 1900 0
 3741 006c 4023     		movs	r3, #64
 3742 006e 2366     		str	r3, [r4, #96]
 3743              	.L298:
1904:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3744              		.loc 1 1904 0
 3745 0070 2268     		ldr	r2, [r4]
 3746 0072 5368     		ldr	r3, [r2, #4]
 3747 0074 23F00203 		bic	r3, r3, #2
 3748 0078 5360     		str	r3, [r2, #4]
1906:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 3749              		.loc 1 1906 0
 3750 007a FFF7FEFF 		bl	HAL_GetTick
 3751              	.LVL284:
 3752 007e 0246     		mov	r2, r0
 3753 0080 6421     		movs	r1, #100
 3754 0082 2046     		mov	r0, r4
 3755 0084 FFF7FEFF 		bl	SPI_EndRxTxTransaction
 3756              	.LVL285:
 3757 0088 08B1     		cbz	r0, .L299
1908:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 3758              		.loc 1 1908 0
 3759 008a 4023     		movs	r3, #64
 3760 008c 2366     		str	r3, [r4, #96]
 3761              	.L299:
1912:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3762              		.loc 1 1912 0
 3763 008e 2268     		ldr	r2, [r4]
 3764 0090 1368     		ldr	r3, [r2]
 3765 0092 23F04003 		bic	r3, r3, #64
 3766 0096 1360     		str	r3, [r2]
1915:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 3767              		.loc 1 1915 0
 3768 0098 FFF7FEFF 		bl	HAL_GetTick
 3769              	.LVL286:
 3770 009c 0090     		str	r0, [sp]
 3771 009e 6423     		movs	r3, #100
 3772 00a0 0022     		movs	r2, #0
 3773 00a2 4FF4C061 		mov	r1, #1536
 3774 00a6 2046     		mov	r0, r4
 3775 00a8 FFF7FEFF 		bl	SPI_WaitFifoStateUntilTimeout
 3776              	.LVL287:
 3777 00ac 08B1     		cbz	r0, .L297
1917:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 3778              		.loc 1 1917 0
 3779 00ae 4023     		movs	r3, #64
 3780 00b0 2366     		str	r3, [r4, #96]
ARM GAS  /tmp/ccXuIaHP.s 			page 143


 3781              	.L297:
1921:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 3782              		.loc 1 1921 0
 3783 00b2 A36D     		ldr	r3, [r4, #88]
 3784 00b4 53B3     		cbz	r3, .L296
1925:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3785              		.loc 1 1925 0
 3786 00b6 0022     		movs	r2, #0
 3787 00b8 1A65     		str	r2, [r3, #80]
1928:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 3788              		.loc 1 1928 0
 3789 00ba A06D     		ldr	r0, [r4, #88]
 3790 00bc FFF7FEFF 		bl	HAL_DMA_Abort
 3791              	.LVL288:
 3792 00c0 08B1     		cbz	r0, .L300
1930:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 3793              		.loc 1 1930 0
 3794 00c2 4023     		movs	r3, #64
 3795 00c4 2366     		str	r3, [r4, #96]
 3796              	.L300:
1934:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3797              		.loc 1 1934 0
 3798 00c6 2268     		ldr	r2, [r4]
 3799 00c8 1368     		ldr	r3, [r2]
 3800 00ca 23F04003 		bic	r3, r3, #64
 3801 00ce 1360     		str	r3, [r2]
1937:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 3802              		.loc 1 1937 0
 3803 00d0 FFF7FEFF 		bl	HAL_GetTick
 3804              	.LVL289:
 3805 00d4 0090     		str	r0, [sp]
 3806 00d6 6423     		movs	r3, #100
 3807 00d8 0022     		movs	r2, #0
 3808 00da 8021     		movs	r1, #128
 3809 00dc 2046     		mov	r0, r4
 3810 00de FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 3811              	.LVL290:
 3812 00e2 08B1     		cbz	r0, .L301
1939:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 3813              		.loc 1 1939 0
 3814 00e4 4023     		movs	r3, #64
 3815 00e6 2366     		str	r3, [r4, #96]
 3816              	.L301:
1943:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 3817              		.loc 1 1943 0
 3818 00e8 FFF7FEFF 		bl	HAL_GetTick
 3819              	.LVL291:
 3820 00ec 0090     		str	r0, [sp]
 3821 00ee 6423     		movs	r3, #100
 3822 00f0 0022     		movs	r2, #0
 3823 00f2 4FF4C061 		mov	r1, #1536
 3824 00f6 2046     		mov	r0, r4
 3825 00f8 FFF7FEFF 		bl	SPI_WaitFifoStateUntilTimeout
 3826              	.LVL292:
 3827 00fc 08B1     		cbz	r0, .L302
1945:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 3828              		.loc 1 1945 0
ARM GAS  /tmp/ccXuIaHP.s 			page 144


 3829 00fe 4023     		movs	r3, #64
 3830 0100 2366     		str	r3, [r4, #96]
 3831              	.L302:
1949:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 3832              		.loc 1 1949 0
 3833 0102 2268     		ldr	r2, [r4]
 3834 0104 5368     		ldr	r3, [r2, #4]
 3835 0106 23F00103 		bic	r3, r3, #1
 3836 010a 5360     		str	r3, [r2, #4]
 3837              	.L296:
1953:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 3838              		.loc 1 1953 0
 3839 010c 0023     		movs	r3, #0
 3840 010e A4F84630 		strh	r3, [r4, #70]	@ movhi
1954:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3841              		.loc 1 1954 0
 3842 0112 E387     		strh	r3, [r4, #62]	@ movhi
1957:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 3843              		.loc 1 1957 0
 3844 0114 236E     		ldr	r3, [r4, #96]
 3845 0116 402B     		cmp	r3, #64
 3846 0118 02D0     		beq	.L305
1965:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3847              		.loc 1 1965 0
 3848 011a 0020     		movs	r0, #0
 3849 011c 2066     		str	r0, [r4, #96]
 3850 011e 00E0     		b	.L303
 3851              	.L305:
1960:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 3852              		.loc 1 1960 0
 3853 0120 0120     		movs	r0, #1
 3854              	.L303:
 3855              	.LVL293:
 3856              	.LBB3:
1969:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_CLEAR_FREFLAG(hspi);
 3857              		.loc 1 1969 0
 3858 0122 0022     		movs	r2, #0
 3859 0124 0292     		str	r2, [sp, #8]
 3860 0126 2368     		ldr	r3, [r4]
 3861 0128 D968     		ldr	r1, [r3, #12]
 3862 012a 0291     		str	r1, [sp, #8]
 3863 012c 9968     		ldr	r1, [r3, #8]
 3864 012e 0291     		str	r1, [sp, #8]
 3865 0130 0299     		ldr	r1, [sp, #8]
 3866              	.LBE3:
 3867              	.LBB4:
1970:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3868              		.loc 1 1970 0
 3869 0132 0392     		str	r2, [sp, #12]
 3870 0134 9B68     		ldr	r3, [r3, #8]
 3871 0136 0393     		str	r3, [sp, #12]
 3872 0138 039B     		ldr	r3, [sp, #12]
 3873              	.LBE4:
1973:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3874              		.loc 1 1973 0
 3875 013a 0123     		movs	r3, #1
 3876 013c 84F85D30 		strb	r3, [r4, #93]
ARM GAS  /tmp/ccXuIaHP.s 			page 145


1975:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 3877              		.loc 1 1975 0
 3878 0140 00E0     		b	.L292
 3879              	.LVL294:
 3880              	.L304:
1880:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 3881              		.loc 1 1880 0
 3882 0142 0320     		movs	r0, #3
 3883              	.LVL295:
 3884              	.L292:
1976:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3885              		.loc 1 1976 0
 3886 0144 05B0     		add	sp, sp, #20
 3887              	.LCFI38:
 3888              		.cfi_def_cfa_offset 12
 3889              		@ sp needed
 3890 0146 30BD     		pop	{r4, r5, pc}
 3891              	.LVL296:
 3892              	.L308:
 3893              		.align	2
 3894              	.L307:
 3895 0148 00000000 		.word	SPI_AbortTx_ISR
 3896 014c 00000000 		.word	SPI_AbortRx_ISR
 3897              		.cfi_endproc
 3898              	.LFE149:
 3900              		.section	.text.HAL_SPI_DMAPause,"ax",%progbits
 3901              		.align	2
 3902              		.global	HAL_SPI_DMAPause
 3903              		.thumb
 3904              		.thumb_func
 3906              	HAL_SPI_DMAPause:
 3907              	.LFB151:
2169:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Locked */
 3908              		.loc 1 2169 0
 3909              		.cfi_startproc
 3910              		@ args = 0, pretend = 0, frame = 0
 3911              		@ frame_needed = 0, uses_anonymous_args = 0
 3912              		@ link register save eliminated.
 3913              	.LVL297:
2171:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3914              		.loc 1 2171 0
 3915 0000 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 3916 0004 012B     		cmp	r3, #1
 3917 0006 0CD0     		beq	.L311
2171:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3918              		.loc 1 2171 0 is_stmt 0 discriminator 2
 3919 0008 0123     		movs	r3, #1
 3920 000a 80F85C30 		strb	r3, [r0, #92]
2174:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3921              		.loc 1 2174 0 is_stmt 1 discriminator 2
 3922 000e 0268     		ldr	r2, [r0]
 3923 0010 5368     		ldr	r3, [r2, #4]
 3924 0012 23F00303 		bic	r3, r3, #3
 3925 0016 5360     		str	r3, [r2, #4]
2177:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3926              		.loc 1 2177 0 discriminator 2
 3927 0018 0023     		movs	r3, #0
ARM GAS  /tmp/ccXuIaHP.s 			page 146


 3928 001a 80F85C30 		strb	r3, [r0, #92]
2179:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 3929              		.loc 1 2179 0 discriminator 2
 3930 001e 1846     		mov	r0, r3
 3931              	.LVL298:
 3932 0020 7047     		bx	lr
 3933              	.LVL299:
 3934              	.L311:
2171:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3935              		.loc 1 2171 0
 3936 0022 0220     		movs	r0, #2
 3937              	.LVL300:
2180:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3938              		.loc 1 2180 0
 3939 0024 7047     		bx	lr
 3940              		.cfi_endproc
 3941              	.LFE151:
 3943 0026 00BF     		.section	.text.HAL_SPI_DMAResume,"ax",%progbits
 3944              		.align	2
 3945              		.global	HAL_SPI_DMAResume
 3946              		.thumb
 3947              		.thumb_func
 3949              	HAL_SPI_DMAResume:
 3950              	.LFB152:
2189:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Process Locked */
 3951              		.loc 1 2189 0
 3952              		.cfi_startproc
 3953              		@ args = 0, pretend = 0, frame = 0
 3954              		@ frame_needed = 0, uses_anonymous_args = 0
 3955              		@ link register save eliminated.
 3956              	.LVL301:
2191:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3957              		.loc 1 2191 0
 3958 0000 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 3959 0004 012B     		cmp	r3, #1
 3960 0006 0CD0     		beq	.L314
2191:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3961              		.loc 1 2191 0 is_stmt 0 discriminator 2
 3962 0008 0123     		movs	r3, #1
 3963 000a 80F85C30 		strb	r3, [r0, #92]
2194:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3964              		.loc 1 2194 0 is_stmt 1 discriminator 2
 3965 000e 0268     		ldr	r2, [r0]
 3966 0010 5368     		ldr	r3, [r2, #4]
 3967 0012 43F00303 		orr	r3, r3, #3
 3968 0016 5360     		str	r3, [r2, #4]
2197:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3969              		.loc 1 2197 0 discriminator 2
 3970 0018 0023     		movs	r3, #0
 3971 001a 80F85C30 		strb	r3, [r0, #92]
2199:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 3972              		.loc 1 2199 0 discriminator 2
 3973 001e 1846     		mov	r0, r3
 3974              	.LVL302:
 3975 0020 7047     		bx	lr
 3976              	.LVL303:
 3977              	.L314:
ARM GAS  /tmp/ccXuIaHP.s 			page 147


2191:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3978              		.loc 1 2191 0
 3979 0022 0220     		movs	r0, #2
 3980              	.LVL304:
2200:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 3981              		.loc 1 2200 0
 3982 0024 7047     		bx	lr
 3983              		.cfi_endproc
 3984              	.LFE152:
 3986 0026 00BF     		.section	.text.HAL_SPI_DMAStop,"ax",%progbits
 3987              		.align	2
 3988              		.global	HAL_SPI_DMAStop
 3989              		.thumb
 3990              		.thumb_func
 3992              	HAL_SPI_DMAStop:
 3993              	.LFB153:
2209:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* The Lock is not implemented on this API to allow the user application
 3994              		.loc 1 2209 0
 3995              		.cfi_startproc
 3996              		@ args = 0, pretend = 0, frame = 0
 3997              		@ frame_needed = 0, uses_anonymous_args = 0
 3998              	.LVL305:
 3999 0000 10B5     		push	{r4, lr}
 4000              	.LCFI39:
 4001              		.cfi_def_cfa_offset 8
 4002              		.cfi_offset 4, -8
 4003              		.cfi_offset 14, -4
 4004 0002 0446     		mov	r4, r0
2217:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4005              		.loc 1 2217 0
 4006 0004 406D     		ldr	r0, [r0, #84]
 4007              	.LVL306:
 4008 0006 08B1     		cbz	r0, .L316
2219:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4009              		.loc 1 2219 0
 4010 0008 FFF7FEFF 		bl	HAL_DMA_Abort
 4011              	.LVL307:
 4012              	.L316:
2222:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4013              		.loc 1 2222 0
 4014 000c A06D     		ldr	r0, [r4, #88]
 4015 000e 08B1     		cbz	r0, .L317
2224:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4016              		.loc 1 2224 0
 4017 0010 FFF7FEFF 		bl	HAL_DMA_Abort
 4018              	.LVL308:
 4019              	.L317:
2228:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
 4020              		.loc 1 2228 0
 4021 0014 2268     		ldr	r2, [r4]
 4022 0016 5368     		ldr	r3, [r2, #4]
 4023 0018 23F00303 		bic	r3, r3, #3
 4024 001c 5360     		str	r3, [r2, #4]
2229:HALLIB/Src/stm32f7xx_hal_spi.c ****   return HAL_OK;
 4025              		.loc 1 2229 0
 4026 001e 0123     		movs	r3, #1
 4027 0020 84F85D30 		strb	r3, [r4, #93]
ARM GAS  /tmp/ccXuIaHP.s 			page 148


2231:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4028              		.loc 1 2231 0
 4029 0024 0020     		movs	r0, #0
 4030 0026 10BD     		pop	{r4, pc}
 4031              		.cfi_endproc
 4032              	.LFE153:
 4034              		.section	.text.HAL_SPI_TxCpltCallback,"ax",%progbits
 4035              		.align	2
 4036              		.weak	HAL_SPI_TxCpltCallback
 4037              		.thumb
 4038              		.thumb_func
 4040              	HAL_SPI_TxCpltCallback:
 4041              	.LFB155:
2336:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 4042              		.loc 1 2336 0
 4043              		.cfi_startproc
 4044              		@ args = 0, pretend = 0, frame = 0
 4045              		@ frame_needed = 0, uses_anonymous_args = 0
 4046              		@ link register save eliminated.
 4047              	.LVL309:
 4048 0000 7047     		bx	lr
 4049              		.cfi_endproc
 4050              	.LFE155:
 4052 0002 00BF     		.section	.text.HAL_SPI_RxCpltCallback,"ax",%progbits
 4053              		.align	2
 4054              		.weak	HAL_SPI_RxCpltCallback
 4055              		.thumb
 4056              		.thumb_func
 4058              	HAL_SPI_RxCpltCallback:
 4059              	.LFB156:
2352:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 4060              		.loc 1 2352 0
 4061              		.cfi_startproc
 4062              		@ args = 0, pretend = 0, frame = 0
 4063              		@ frame_needed = 0, uses_anonymous_args = 0
 4064              		@ link register save eliminated.
 4065              	.LVL310:
 4066 0000 7047     		bx	lr
 4067              		.cfi_endproc
 4068              	.LFE156:
 4070 0002 00BF     		.section	.text.HAL_SPI_TxRxCpltCallback,"ax",%progbits
 4071              		.align	2
 4072              		.weak	HAL_SPI_TxRxCpltCallback
 4073              		.thumb
 4074              		.thumb_func
 4076              	HAL_SPI_TxRxCpltCallback:
 4077              	.LFB157:
2368:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 4078              		.loc 1 2368 0
 4079              		.cfi_startproc
 4080              		@ args = 0, pretend = 0, frame = 0
 4081              		@ frame_needed = 0, uses_anonymous_args = 0
 4082              		@ link register save eliminated.
 4083              	.LVL311:
 4084 0000 7047     		bx	lr
 4085              		.cfi_endproc
 4086              	.LFE157:
ARM GAS  /tmp/ccXuIaHP.s 			page 149


 4088 0002 00BF     		.section	.text.HAL_SPI_TxHalfCpltCallback,"ax",%progbits
 4089              		.align	2
 4090              		.weak	HAL_SPI_TxHalfCpltCallback
 4091              		.thumb
 4092              		.thumb_func
 4094              	HAL_SPI_TxHalfCpltCallback:
 4095              	.LFB158:
2384:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 4096              		.loc 1 2384 0
 4097              		.cfi_startproc
 4098              		@ args = 0, pretend = 0, frame = 0
 4099              		@ frame_needed = 0, uses_anonymous_args = 0
 4100              		@ link register save eliminated.
 4101              	.LVL312:
 4102 0000 7047     		bx	lr
 4103              		.cfi_endproc
 4104              	.LFE158:
 4106 0002 00BF     		.section	.text.SPI_DMAHalfTransmitCplt,"ax",%progbits
 4107              		.align	2
 4108              		.thumb
 4109              		.thumb_func
 4111              	SPI_DMAHalfTransmitCplt:
 4112              	.LFB168:
2745:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 4113              		.loc 1 2745 0
 4114              		.cfi_startproc
 4115              		@ args = 0, pretend = 0, frame = 0
 4116              		@ frame_needed = 0, uses_anonymous_args = 0
 4117              	.LVL313:
2745:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 4118              		.loc 1 2745 0
 4119 0000 08B5     		push	{r3, lr}
 4120              	.LCFI40:
 4121              		.cfi_def_cfa_offset 8
 4122              		.cfi_offset 3, -8
 4123              		.cfi_offset 14, -4
 4124              	.LVL314:
2748:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 4125              		.loc 1 2748 0
 4126 0002 806B     		ldr	r0, [r0, #56]
 4127              	.LVL315:
 4128 0004 FFF7FEFF 		bl	HAL_SPI_TxHalfCpltCallback
 4129              	.LVL316:
 4130 0008 08BD     		pop	{r3, pc}
 4131              		.cfi_endproc
 4132              	.LFE168:
 4134 000a 00BF     		.section	.text.HAL_SPI_RxHalfCpltCallback,"ax",%progbits
 4135              		.align	2
 4136              		.weak	HAL_SPI_RxHalfCpltCallback
 4137              		.thumb
 4138              		.thumb_func
 4140              	HAL_SPI_RxHalfCpltCallback:
 4141              	.LFB159:
2400:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 4142              		.loc 1 2400 0
 4143              		.cfi_startproc
 4144              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccXuIaHP.s 			page 150


 4145              		@ frame_needed = 0, uses_anonymous_args = 0
 4146              		@ link register save eliminated.
 4147              	.LVL317:
 4148 0000 7047     		bx	lr
 4149              		.cfi_endproc
 4150              	.LFE159:
 4152 0002 00BF     		.section	.text.SPI_DMAHalfReceiveCplt,"ax",%progbits
 4153              		.align	2
 4154              		.thumb
 4155              		.thumb_func
 4157              	SPI_DMAHalfReceiveCplt:
 4158              	.LFB169:
2758:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 4159              		.loc 1 2758 0
 4160              		.cfi_startproc
 4161              		@ args = 0, pretend = 0, frame = 0
 4162              		@ frame_needed = 0, uses_anonymous_args = 0
 4163              	.LVL318:
2758:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 4164              		.loc 1 2758 0
 4165 0000 08B5     		push	{r3, lr}
 4166              	.LCFI41:
 4167              		.cfi_def_cfa_offset 8
 4168              		.cfi_offset 3, -8
 4169              		.cfi_offset 14, -4
 4170              	.LVL319:
2761:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 4171              		.loc 1 2761 0
 4172 0002 806B     		ldr	r0, [r0, #56]
 4173              	.LVL320:
 4174 0004 FFF7FEFF 		bl	HAL_SPI_RxHalfCpltCallback
 4175              	.LVL321:
 4176 0008 08BD     		pop	{r3, pc}
 4177              		.cfi_endproc
 4178              	.LFE169:
 4180 000a 00BF     		.section	.text.HAL_SPI_TxRxHalfCpltCallback,"ax",%progbits
 4181              		.align	2
 4182              		.weak	HAL_SPI_TxRxHalfCpltCallback
 4183              		.thumb
 4184              		.thumb_func
 4186              	HAL_SPI_TxRxHalfCpltCallback:
 4187              	.LFB160:
2416:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 4188              		.loc 1 2416 0
 4189              		.cfi_startproc
 4190              		@ args = 0, pretend = 0, frame = 0
 4191              		@ frame_needed = 0, uses_anonymous_args = 0
 4192              		@ link register save eliminated.
 4193              	.LVL322:
 4194 0000 7047     		bx	lr
 4195              		.cfi_endproc
 4196              	.LFE160:
 4198 0002 00BF     		.section	.text.SPI_DMAHalfTransmitReceiveCplt,"ax",%progbits
 4199              		.align	2
 4200              		.thumb
 4201              		.thumb_func
 4203              	SPI_DMAHalfTransmitReceiveCplt:
ARM GAS  /tmp/ccXuIaHP.s 			page 151


 4204              	.LFB170:
2771:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 4205              		.loc 1 2771 0
 4206              		.cfi_startproc
 4207              		@ args = 0, pretend = 0, frame = 0
 4208              		@ frame_needed = 0, uses_anonymous_args = 0
 4209              	.LVL323:
2771:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 4210              		.loc 1 2771 0
 4211 0000 08B5     		push	{r3, lr}
 4212              	.LCFI42:
 4213              		.cfi_def_cfa_offset 8
 4214              		.cfi_offset 3, -8
 4215              		.cfi_offset 14, -4
 4216              	.LVL324:
2774:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 4217              		.loc 1 2774 0
 4218 0002 806B     		ldr	r0, [r0, #56]
 4219              	.LVL325:
 4220 0004 FFF7FEFF 		bl	HAL_SPI_TxRxHalfCpltCallback
 4221              	.LVL326:
 4222 0008 08BD     		pop	{r3, pc}
 4223              		.cfi_endproc
 4224              	.LFE170:
 4226 000a 00BF     		.section	.text.HAL_SPI_ErrorCallback,"ax",%progbits
 4227              		.align	2
 4228              		.weak	HAL_SPI_ErrorCallback
 4229              		.thumb
 4230              		.thumb_func
 4232              	HAL_SPI_ErrorCallback:
 4233              	.LFB161:
2432:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 4234              		.loc 1 2432 0
 4235              		.cfi_startproc
 4236              		@ args = 0, pretend = 0, frame = 0
 4237              		@ frame_needed = 0, uses_anonymous_args = 0
 4238              		@ link register save eliminated.
 4239              	.LVL327:
 4240 0000 7047     		bx	lr
 4241              		.cfi_endproc
 4242              	.LFE161:
 4244 0002 00BF     		.section	.text.SPI_CloseTx_ISR,"ax",%progbits
 4245              		.align	2
 4246              		.thumb
 4247              		.thumb_func
 4249              	SPI_CloseTx_ISR:
 4250              	.LFB193:
3608:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
 4251              		.loc 1 3608 0
 4252              		.cfi_startproc
 4253              		@ args = 0, pretend = 0, frame = 8
 4254              		@ frame_needed = 0, uses_anonymous_args = 0
 4255              	.LVL328:
3608:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
 4256              		.loc 1 3608 0
 4257 0000 10B5     		push	{r4, lr}
 4258              	.LCFI43:
ARM GAS  /tmp/ccXuIaHP.s 			page 152


 4259              		.cfi_def_cfa_offset 8
 4260              		.cfi_offset 4, -8
 4261              		.cfi_offset 14, -4
 4262 0002 82B0     		sub	sp, sp, #8
 4263              	.LCFI44:
 4264              		.cfi_def_cfa_offset 16
 4265 0004 0446     		mov	r4, r0
 4266              	.LVL329:
3612:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4267              		.loc 1 3612 0
 4268 0006 FFF7FEFF 		bl	HAL_GetTick
 4269              	.LVL330:
3615:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4270              		.loc 1 3615 0
 4271 000a 2268     		ldr	r2, [r4]
 4272 000c 5368     		ldr	r3, [r2, #4]
 4273 000e 23F0A003 		bic	r3, r3, #160
 4274 0012 5360     		str	r3, [r2, #4]
3618:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4275              		.loc 1 3618 0
 4276 0014 0246     		mov	r2, r0
 4277 0016 6421     		movs	r1, #100
 4278 0018 2046     		mov	r0, r4
 4279              	.LVL331:
 4280 001a FFF7FEFF 		bl	SPI_EndRxTxTransaction
 4281              	.LVL332:
 4282 001e 18B1     		cbz	r0, .L333
3620:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4283              		.loc 1 3620 0
 4284 0020 236E     		ldr	r3, [r4, #96]
 4285 0022 43F02003 		orr	r3, r3, #32
 4286 0026 2366     		str	r3, [r4, #96]
 4287              	.L333:
3624:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4288              		.loc 1 3624 0
 4289 0028 A368     		ldr	r3, [r4, #8]
 4290 002a 33B9     		cbnz	r3, .L334
 4291              	.LBB5:
3626:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4292              		.loc 1 3626 0
 4293 002c 0193     		str	r3, [sp, #4]
 4294 002e 2368     		ldr	r3, [r4]
 4295 0030 DA68     		ldr	r2, [r3, #12]
 4296 0032 0192     		str	r2, [sp, #4]
 4297 0034 9B68     		ldr	r3, [r3, #8]
 4298 0036 0193     		str	r3, [sp, #4]
 4299 0038 019B     		ldr	r3, [sp, #4]
 4300              	.L334:
 4301              	.LBE5:
3629:HALLIB/Src/stm32f7xx_hal_spi.c ****   if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 4302              		.loc 1 3629 0
 4303 003a 0123     		movs	r3, #1
 4304 003c 84F85D30 		strb	r3, [r4, #93]
3630:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4305              		.loc 1 3630 0
 4306 0040 236E     		ldr	r3, [r4, #96]
 4307 0042 1BB1     		cbz	r3, .L335
ARM GAS  /tmp/ccXuIaHP.s 			page 153


3632:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4308              		.loc 1 3632 0
 4309 0044 2046     		mov	r0, r4
 4310 0046 FFF7FEFF 		bl	HAL_SPI_ErrorCallback
 4311              	.LVL333:
 4312 004a 02E0     		b	.L332
 4313              	.L335:
3636:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4314              		.loc 1 3636 0
 4315 004c 2046     		mov	r0, r4
 4316 004e FFF7FEFF 		bl	HAL_SPI_TxCpltCallback
 4317              	.LVL334:
 4318              	.L332:
3638:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4319              		.loc 1 3638 0
 4320 0052 02B0     		add	sp, sp, #8
 4321              	.LCFI45:
 4322              		.cfi_def_cfa_offset 8
 4323              		@ sp needed
 4324 0054 10BD     		pop	{r4, pc}
 4325              		.cfi_endproc
 4326              	.LFE193:
 4328 0056 00BF     		.section	.text.SPI_TxISR_8BIT,"ax",%progbits
 4329              		.align	2
 4330              		.thumb
 4331              		.thumb_func
 4333              	SPI_TxISR_8BIT:
 4334              	.LFB185:
3280:HALLIB/Src/stm32f7xx_hal_spi.c ****   *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 4335              		.loc 1 3280 0
 4336              		.cfi_startproc
 4337              		@ args = 0, pretend = 0, frame = 0
 4338              		@ frame_needed = 0, uses_anonymous_args = 0
 4339              	.LVL335:
 4340 0000 08B5     		push	{r3, lr}
 4341              	.LCFI46:
 4342              		.cfi_def_cfa_offset 8
 4343              		.cfi_offset 3, -8
 4344              		.cfi_offset 14, -4
3281:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount--;
 4345              		.loc 1 3281 0
 4346 0002 0268     		ldr	r2, [r0]
 4347 0004 836B     		ldr	r3, [r0, #56]
 4348 0006 591C     		adds	r1, r3, #1
 4349 0008 8163     		str	r1, [r0, #56]
 4350 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4351 000c 1373     		strb	r3, [r2, #12]
3282:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4352              		.loc 1 3282 0
 4353 000e C38F     		ldrh	r3, [r0, #62]
 4354 0010 9BB2     		uxth	r3, r3
 4355 0012 013B     		subs	r3, r3, #1
 4356 0014 9BB2     		uxth	r3, r3
 4357 0016 C387     		strh	r3, [r0, #62]	@ movhi
3284:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4358              		.loc 1 3284 0
 4359 0018 C38F     		ldrh	r3, [r0, #62]
ARM GAS  /tmp/ccXuIaHP.s 			page 154


 4360 001a 9BB2     		uxth	r3, r3
 4361 001c 53B9     		cbnz	r3, .L338
3287:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 4362              		.loc 1 3287 0
 4363 001e 836A     		ldr	r3, [r0, #40]
 4364 0020 B3F5005F 		cmp	r3, #8192
 4365 0024 04D1     		bne	.L340
3290:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 4366              		.loc 1 3290 0
 4367 0026 0268     		ldr	r2, [r0]
 4368 0028 1368     		ldr	r3, [r2]
 4369 002a 43F48053 		orr	r3, r3, #4096
 4370 002e 1360     		str	r3, [r2]
 4371              	.L340:
3293:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4372              		.loc 1 3293 0
 4373 0030 FFF7FEFF 		bl	SPI_CloseTx_ISR
 4374              	.LVL336:
 4375              	.L338:
 4376 0034 08BD     		pop	{r3, pc}
 4377              		.cfi_endproc
 4378              	.LFE185:
 4380 0036 00BF     		.section	.text.SPI_TxISR_16BIT,"ax",%progbits
 4381              		.align	2
 4382              		.thumb
 4383              		.thumb_func
 4385              	SPI_TxISR_16BIT:
 4386              	.LFB186:
3304:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Transmit data in 16 Bit mode */
 4387              		.loc 1 3304 0
 4388              		.cfi_startproc
 4389              		@ args = 0, pretend = 0, frame = 0
 4390              		@ frame_needed = 0, uses_anonymous_args = 0
 4391              	.LVL337:
 4392 0000 08B5     		push	{r3, lr}
 4393              	.LCFI47:
 4394              		.cfi_def_cfa_offset 8
 4395              		.cfi_offset 3, -8
 4396              		.cfi_offset 14, -4
3306:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr += sizeof(uint16_t);
 4397              		.loc 1 3306 0
 4398 0002 0368     		ldr	r3, [r0]
 4399 0004 826B     		ldr	r2, [r0, #56]
 4400 0006 1288     		ldrh	r2, [r2]
 4401 0008 DA60     		str	r2, [r3, #12]
3307:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount--;
 4402              		.loc 1 3307 0
 4403 000a 836B     		ldr	r3, [r0, #56]
 4404 000c 0233     		adds	r3, r3, #2
 4405 000e 8363     		str	r3, [r0, #56]
3308:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4406              		.loc 1 3308 0
 4407 0010 C38F     		ldrh	r3, [r0, #62]
 4408 0012 9BB2     		uxth	r3, r3
 4409 0014 013B     		subs	r3, r3, #1
 4410 0016 9BB2     		uxth	r3, r3
 4411 0018 C387     		strh	r3, [r0, #62]	@ movhi
ARM GAS  /tmp/ccXuIaHP.s 			page 155


3310:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4412              		.loc 1 3310 0
 4413 001a C38F     		ldrh	r3, [r0, #62]
 4414 001c 9BB2     		uxth	r3, r3
 4415 001e 53B9     		cbnz	r3, .L342
3313:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 4416              		.loc 1 3313 0
 4417 0020 836A     		ldr	r3, [r0, #40]
 4418 0022 B3F5005F 		cmp	r3, #8192
 4419 0026 04D1     		bne	.L344
3316:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 4420              		.loc 1 3316 0
 4421 0028 0268     		ldr	r2, [r0]
 4422 002a 1368     		ldr	r3, [r2]
 4423 002c 43F48053 		orr	r3, r3, #4096
 4424 0030 1360     		str	r3, [r2]
 4425              	.L344:
3319:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4426              		.loc 1 3319 0
 4427 0032 FFF7FEFF 		bl	SPI_CloseTx_ISR
 4428              	.LVL338:
 4429              	.L342:
 4430 0036 08BD     		pop	{r3, pc}
 4431              		.cfi_endproc
 4432              	.LFE186:
 4434              		.section	.text.SPI_CloseRx_ISR,"ax",%progbits
 4435              		.align	2
 4436              		.thumb
 4437              		.thumb_func
 4439              	SPI_CloseRx_ISR:
 4440              	.LFB192:
3566:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Disable RXNE and ERR interrupt */
 4441              		.loc 1 3566 0
 4442              		.cfi_startproc
 4443              		@ args = 0, pretend = 0, frame = 0
 4444              		@ frame_needed = 0, uses_anonymous_args = 0
 4445              	.LVL339:
 4446 0000 10B5     		push	{r4, lr}
 4447              	.LCFI48:
 4448              		.cfi_def_cfa_offset 8
 4449              		.cfi_offset 4, -8
 4450              		.cfi_offset 14, -4
 4451 0002 0446     		mov	r4, r0
3568:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4452              		.loc 1 3568 0
 4453 0004 0268     		ldr	r2, [r0]
 4454 0006 5368     		ldr	r3, [r2, #4]
 4455 0008 23F06003 		bic	r3, r3, #96
 4456 000c 5360     		str	r3, [r2, #4]
3571:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4457              		.loc 1 3571 0
 4458 000e FFF7FEFF 		bl	HAL_GetTick
 4459              	.LVL340:
 4460 0012 0246     		mov	r2, r0
 4461 0014 6421     		movs	r1, #100
 4462 0016 2046     		mov	r0, r4
 4463 0018 FFF7FEFF 		bl	SPI_EndRxTransaction
ARM GAS  /tmp/ccXuIaHP.s 			page 156


 4464              	.LVL341:
 4465 001c 18B1     		cbz	r0, .L347
3573:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4466              		.loc 1 3573 0
 4467 001e 236E     		ldr	r3, [r4, #96]
 4468 0020 43F02003 		orr	r3, r3, #32
 4469 0024 2366     		str	r3, [r4, #96]
 4470              	.L347:
3575:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4471              		.loc 1 3575 0
 4472 0026 0123     		movs	r3, #1
 4473 0028 84F85D30 		strb	r3, [r4, #93]
3579:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4474              		.loc 1 3579 0
 4475 002c 2368     		ldr	r3, [r4]
 4476 002e 9A68     		ldr	r2, [r3, #8]
 4477 0030 12F0100F 		tst	r2, #16
 4478 0034 0AD0     		beq	.L348
3581:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 4479              		.loc 1 3581 0
 4480 0036 226E     		ldr	r2, [r4, #96]
 4481 0038 42F00202 		orr	r2, r2, #2
 4482 003c 2266     		str	r2, [r4, #96]
3582:HALLIB/Src/stm32f7xx_hal_spi.c ****     HAL_SPI_ErrorCallback(hspi);
 4483              		.loc 1 3582 0
 4484 003e 4FF6EF72 		movw	r2, #65519
 4485 0042 9A60     		str	r2, [r3, #8]
3583:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4486              		.loc 1 3583 0
 4487 0044 2046     		mov	r0, r4
 4488 0046 FFF7FEFF 		bl	HAL_SPI_ErrorCallback
 4489              	.LVL342:
 4490 004a 10BD     		pop	{r4, pc}
 4491              	.LVL343:
 4492              	.L348:
3588:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 4493              		.loc 1 3588 0
 4494 004c 236E     		ldr	r3, [r4, #96]
 4495 004e 1BB9     		cbnz	r3, .L350
3590:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 4496              		.loc 1 3590 0
 4497 0050 2046     		mov	r0, r4
 4498 0052 FFF7FEFF 		bl	HAL_SPI_RxCpltCallback
 4499              	.LVL344:
 4500 0056 10BD     		pop	{r4, pc}
 4501              	.LVL345:
 4502              	.L350:
3594:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 4503              		.loc 1 3594 0
 4504 0058 2046     		mov	r0, r4
 4505 005a FFF7FEFF 		bl	HAL_SPI_ErrorCallback
 4506              	.LVL346:
 4507 005e 10BD     		pop	{r4, pc}
 4508              		.cfi_endproc
 4509              	.LFE192:
 4511              		.section	.text.SPI_RxISR_8BIT,"ax",%progbits
 4512              		.align	2
ARM GAS  /tmp/ccXuIaHP.s 			page 157


 4513              		.thumb
 4514              		.thumb_func
 4516              	SPI_RxISR_8BIT:
 4517              	.LFB182:
3191:HALLIB/Src/stm32f7xx_hal_spi.c ****   *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 4518              		.loc 1 3191 0
 4519              		.cfi_startproc
 4520              		@ args = 0, pretend = 0, frame = 0
 4521              		@ frame_needed = 0, uses_anonymous_args = 0
 4522              	.LVL347:
 4523 0000 08B5     		push	{r3, lr}
 4524              	.LCFI49:
 4525              		.cfi_def_cfa_offset 8
 4526              		.cfi_offset 3, -8
 4527              		.cfi_offset 14, -4
3192:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount--;
 4528              		.loc 1 3192 0
 4529 0002 036C     		ldr	r3, [r0, #64]
 4530 0004 5A1C     		adds	r2, r3, #1
 4531 0006 0264     		str	r2, [r0, #64]
 4532 0008 0268     		ldr	r2, [r0]
 4533 000a 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 4534 000c 1A70     		strb	r2, [r3]
3193:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4535              		.loc 1 3193 0
 4536 000e B0F84630 		ldrh	r3, [r0, #70]
 4537 0012 9BB2     		uxth	r3, r3
 4538 0014 013B     		subs	r3, r3, #1
 4539 0016 9BB2     		uxth	r3, r3
 4540 0018 A0F84630 		strh	r3, [r0, #70]	@ movhi
3197:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4541              		.loc 1 3197 0
 4542 001c B0F84630 		ldrh	r3, [r0, #70]
 4543 0020 9BB2     		uxth	r3, r3
 4544 0022 012B     		cmp	r3, #1
 4545 0024 08D1     		bne	.L353
3197:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4546              		.loc 1 3197 0 is_stmt 0 discriminator 1
 4547 0026 836A     		ldr	r3, [r0, #40]
 4548 0028 B3F5005F 		cmp	r3, #8192
 4549 002c 04D1     		bne	.L353
3199:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4550              		.loc 1 3199 0 is_stmt 1
 4551 002e 0268     		ldr	r2, [r0]
 4552 0030 1368     		ldr	r3, [r2]
 4553 0032 43F48053 		orr	r3, r3, #4096
 4554 0036 1360     		str	r3, [r2]
 4555              	.L353:
3203:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4556              		.loc 1 3203 0
 4557 0038 B0F84630 		ldrh	r3, [r0, #70]
 4558 003c 9BB2     		uxth	r3, r3
 4559 003e 43B9     		cbnz	r3, .L352
3206:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 4560              		.loc 1 3206 0
 4561 0040 836A     		ldr	r3, [r0, #40]
 4562 0042 B3F5005F 		cmp	r3, #8192
ARM GAS  /tmp/ccXuIaHP.s 			page 158


 4563 0046 02D1     		bne	.L355
3208:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
 4564              		.loc 1 3208 0
 4565 0048 024B     		ldr	r3, .L357
 4566 004a C364     		str	r3, [r0, #76]
3209:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 4567              		.loc 1 3209 0
 4568 004c 08BD     		pop	{r3, pc}
 4569              	.L355:
3212:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4570              		.loc 1 3212 0
 4571 004e FFF7FEFF 		bl	SPI_CloseRx_ISR
 4572              	.LVL348:
 4573              	.L352:
 4574 0052 08BD     		pop	{r3, pc}
 4575              	.L358:
 4576              		.align	2
 4577              	.L357:
 4578 0054 00000000 		.word	SPI_RxISR_8BITCRC
 4579              		.cfi_endproc
 4580              	.LFE182:
 4582              		.section	.text.SPI_RxISR_8BITCRC,"ax",%progbits
 4583              		.align	2
 4584              		.thumb
 4585              		.thumb_func
 4587              	SPI_RxISR_8BITCRC:
 4588              	.LFB181:
3166:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO uint8_t tmpreg = 0U;
 4589              		.loc 1 3166 0
 4590              		.cfi_startproc
 4591              		@ args = 0, pretend = 0, frame = 8
 4592              		@ frame_needed = 0, uses_anonymous_args = 0
 4593              	.LVL349:
 4594 0000 00B5     		push	{lr}
 4595              	.LCFI50:
 4596              		.cfi_def_cfa_offset 4
 4597              		.cfi_offset 14, -4
 4598 0002 83B0     		sub	sp, sp, #12
 4599              	.LCFI51:
 4600              		.cfi_def_cfa_offset 16
3167:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4601              		.loc 1 3167 0
 4602 0004 0023     		movs	r3, #0
 4603 0006 8DF80730 		strb	r3, [sp, #7]
3170:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4604              		.loc 1 3170 0
 4605 000a 0368     		ldr	r3, [r0]
 4606 000c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 4607 000e DBB2     		uxtb	r3, r3
 4608 0010 8DF80730 		strb	r3, [sp, #7]
3173:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4609              		.loc 1 3173 0
 4610 0014 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
3175:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4611              		.loc 1 3175 0
 4612 0018 836C     		ldr	r3, [r0, #72]
 4613 001a 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccXuIaHP.s 			page 159


 4614 001c 8364     		str	r3, [r0, #72]
3177:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4615              		.loc 1 3177 0
 4616 001e 0BB9     		cbnz	r3, .L359
3179:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4617              		.loc 1 3179 0
 4618 0020 FFF7FEFF 		bl	SPI_CloseRx_ISR
 4619              	.LVL350:
 4620              	.L359:
3181:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 4621              		.loc 1 3181 0
 4622 0024 03B0     		add	sp, sp, #12
 4623              	.LCFI52:
 4624              		.cfi_def_cfa_offset 4
 4625              		@ sp needed
 4626 0026 5DF804FB 		ldr	pc, [sp], #4
 4627              		.cfi_endproc
 4628              	.LFE181:
 4630 002a 00BF     		.section	.text.SPI_RxISR_16BIT,"ax",%progbits
 4631              		.align	2
 4632              		.thumb
 4633              		.thumb_func
 4635              	SPI_RxISR_16BIT:
 4636              	.LFB184:
3247:HALLIB/Src/stm32f7xx_hal_spi.c ****   *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 4637              		.loc 1 3247 0
 4638              		.cfi_startproc
 4639              		@ args = 0, pretend = 0, frame = 0
 4640              		@ frame_needed = 0, uses_anonymous_args = 0
 4641              	.LVL351:
 4642 0000 08B5     		push	{r3, lr}
 4643              	.LCFI53:
 4644              		.cfi_def_cfa_offset 8
 4645              		.cfi_offset 3, -8
 4646              		.cfi_offset 14, -4
3248:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr += sizeof(uint16_t);
 4647              		.loc 1 3248 0
 4648 0002 036C     		ldr	r3, [r0, #64]
 4649 0004 0268     		ldr	r2, [r0]
 4650 0006 D268     		ldr	r2, [r2, #12]
 4651 0008 1A80     		strh	r2, [r3]	@ movhi
3249:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount--;
 4652              		.loc 1 3249 0
 4653 000a 036C     		ldr	r3, [r0, #64]
 4654 000c 0233     		adds	r3, r3, #2
 4655 000e 0364     		str	r3, [r0, #64]
3250:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4656              		.loc 1 3250 0
 4657 0010 B0F84630 		ldrh	r3, [r0, #70]
 4658 0014 9BB2     		uxth	r3, r3
 4659 0016 013B     		subs	r3, r3, #1
 4660 0018 9BB2     		uxth	r3, r3
 4661 001a A0F84630 		strh	r3, [r0, #70]	@ movhi
3254:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4662              		.loc 1 3254 0
 4663 001e B0F84630 		ldrh	r3, [r0, #70]
 4664 0022 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccXuIaHP.s 			page 160


 4665 0024 012B     		cmp	r3, #1
 4666 0026 08D1     		bne	.L363
3254:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4667              		.loc 1 3254 0 is_stmt 0 discriminator 1
 4668 0028 836A     		ldr	r3, [r0, #40]
 4669 002a B3F5005F 		cmp	r3, #8192
 4670 002e 04D1     		bne	.L363
3256:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4671              		.loc 1 3256 0 is_stmt 1
 4672 0030 0268     		ldr	r2, [r0]
 4673 0032 1368     		ldr	r3, [r2]
 4674 0034 43F48053 		orr	r3, r3, #4096
 4675 0038 1360     		str	r3, [r2]
 4676              	.L363:
3260:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4677              		.loc 1 3260 0
 4678 003a B0F84630 		ldrh	r3, [r0, #70]
 4679 003e 9BB2     		uxth	r3, r3
 4680 0040 43B9     		cbnz	r3, .L362
3263:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 4681              		.loc 1 3263 0
 4682 0042 836A     		ldr	r3, [r0, #40]
 4683 0044 B3F5005F 		cmp	r3, #8192
 4684 0048 02D1     		bne	.L365
3265:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
 4685              		.loc 1 3265 0
 4686 004a 034B     		ldr	r3, .L367
 4687 004c C364     		str	r3, [r0, #76]
3266:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 4688              		.loc 1 3266 0
 4689 004e 08BD     		pop	{r3, pc}
 4690              	.L365:
3269:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4691              		.loc 1 3269 0
 4692 0050 FFF7FEFF 		bl	SPI_CloseRx_ISR
 4693              	.LVL352:
 4694              	.L362:
 4695 0054 08BD     		pop	{r3, pc}
 4696              	.L368:
 4697 0056 00BF     		.align	2
 4698              	.L367:
 4699 0058 00000000 		.word	SPI_RxISR_16BITCRC
 4700              		.cfi_endproc
 4701              	.LFE184:
 4703              		.section	.text.SPI_RxISR_16BITCRC,"ax",%progbits
 4704              		.align	2
 4705              		.thumb
 4706              		.thumb_func
 4708              	SPI_RxISR_16BITCRC:
 4709              	.LFB183:
3224:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO uint16_t tmpreg = 0U;
 4710              		.loc 1 3224 0
 4711              		.cfi_startproc
 4712              		@ args = 0, pretend = 0, frame = 8
 4713              		@ frame_needed = 0, uses_anonymous_args = 0
 4714              	.LVL353:
 4715 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccXuIaHP.s 			page 161


 4716              	.LCFI54:
 4717              		.cfi_def_cfa_offset 4
 4718              		.cfi_offset 14, -4
 4719 0002 83B0     		sub	sp, sp, #12
 4720              	.LCFI55:
 4721              		.cfi_def_cfa_offset 16
3225:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4722              		.loc 1 3225 0
 4723 0004 0023     		movs	r3, #0
 4724 0006 ADF80630 		strh	r3, [sp, #6]	@ movhi
3228:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4725              		.loc 1 3228 0
 4726 000a 0368     		ldr	r3, [r0]
 4727 000c DA68     		ldr	r2, [r3, #12]
 4728 000e 92B2     		uxth	r2, r2
 4729 0010 ADF80620 		strh	r2, [sp, #6]	@ movhi
3231:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4730              		.loc 1 3231 0
 4731 0014 BDF80620 		ldrh	r2, [sp, #6]
3234:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4732              		.loc 1 3234 0
 4733 0018 5A68     		ldr	r2, [r3, #4]
 4734 001a 22F06002 		bic	r2, r2, #96
 4735 001e 5A60     		str	r2, [r3, #4]
3236:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 4736              		.loc 1 3236 0
 4737 0020 FFF7FEFF 		bl	SPI_CloseRx_ISR
 4738              	.LVL354:
3237:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 4739              		.loc 1 3237 0
 4740 0024 03B0     		add	sp, sp, #12
 4741              	.LCFI56:
 4742              		.cfi_def_cfa_offset 4
 4743              		@ sp needed
 4744 0026 5DF804FB 		ldr	pc, [sp], #4
 4745              		.cfi_endproc
 4746              	.LFE183:
 4748 002a 00BF     		.section	.text.SPI_CloseRxTx_ISR,"ax",%progbits
 4749              		.align	2
 4750              		.thumb
 4751              		.thumb_func
 4753              	SPI_CloseRxTx_ISR:
 4754              	.LFB191:
3509:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
 4755              		.loc 1 3509 0
 4756              		.cfi_startproc
 4757              		@ args = 0, pretend = 0, frame = 0
 4758              		@ frame_needed = 0, uses_anonymous_args = 0
 4759              	.LVL355:
 4760 0000 10B5     		push	{r4, lr}
 4761              	.LCFI57:
 4762              		.cfi_def_cfa_offset 8
 4763              		.cfi_offset 4, -8
 4764              		.cfi_offset 14, -4
 4765 0002 0446     		mov	r4, r0
 4766              	.LVL356:
3513:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 162


 4767              		.loc 1 3513 0
 4768 0004 FFF7FEFF 		bl	HAL_GetTick
 4769              	.LVL357:
3516:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4770              		.loc 1 3516 0
 4771 0008 2268     		ldr	r2, [r4]
 4772 000a 5368     		ldr	r3, [r2, #4]
 4773 000c 23F02003 		bic	r3, r3, #32
 4774 0010 5360     		str	r3, [r2, #4]
3519:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4775              		.loc 1 3519 0
 4776 0012 0246     		mov	r2, r0
 4777 0014 6421     		movs	r1, #100
 4778 0016 2046     		mov	r0, r4
 4779              	.LVL358:
 4780 0018 FFF7FEFF 		bl	SPI_EndRxTxTransaction
 4781              	.LVL359:
 4782 001c 18B1     		cbz	r0, .L372
3521:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4783              		.loc 1 3521 0
 4784 001e 236E     		ldr	r3, [r4, #96]
 4785 0020 43F02003 		orr	r3, r3, #32
 4786 0024 2366     		str	r3, [r4, #96]
 4787              	.L372:
3526:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4788              		.loc 1 3526 0
 4789 0026 2368     		ldr	r3, [r4]
 4790 0028 9A68     		ldr	r2, [r3, #8]
 4791 002a 12F0100F 		tst	r2, #16
 4792 002e 0DD0     		beq	.L373
3528:HALLIB/Src/stm32f7xx_hal_spi.c ****     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 4793              		.loc 1 3528 0
 4794 0030 0122     		movs	r2, #1
 4795 0032 84F85D20 		strb	r2, [r4, #93]
3529:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 4796              		.loc 1 3529 0
 4797 0036 226E     		ldr	r2, [r4, #96]
 4798 0038 42F00202 		orr	r2, r2, #2
 4799 003c 2266     		str	r2, [r4, #96]
3530:HALLIB/Src/stm32f7xx_hal_spi.c ****     HAL_SPI_ErrorCallback(hspi);
 4800              		.loc 1 3530 0
 4801 003e 4FF6EF72 		movw	r2, #65519
 4802 0042 9A60     		str	r2, [r3, #8]
3531:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4803              		.loc 1 3531 0
 4804 0044 2046     		mov	r0, r4
 4805 0046 FFF7FEFF 		bl	HAL_SPI_ErrorCallback
 4806              	.LVL360:
 4807 004a 10BD     		pop	{r4, pc}
 4808              	.LVL361:
 4809              	.L373:
3536:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 4810              		.loc 1 3536 0
 4811 004c 236E     		ldr	r3, [r4, #96]
 4812 004e 93B9     		cbnz	r3, .L375
3538:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 4813              		.loc 1 3538 0
ARM GAS  /tmp/ccXuIaHP.s 			page 163


 4814 0050 94F85D30 		ldrb	r3, [r4, #93]	@ zero_extendqisi2
 4815 0054 DBB2     		uxtb	r3, r3
 4816 0056 042B     		cmp	r3, #4
 4817 0058 06D1     		bne	.L376
3540:HALLIB/Src/stm32f7xx_hal_spi.c ****         HAL_SPI_RxCpltCallback(hspi);
 4818              		.loc 1 3540 0
 4819 005a 0123     		movs	r3, #1
 4820 005c 84F85D30 		strb	r3, [r4, #93]
3541:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 4821              		.loc 1 3541 0
 4822 0060 2046     		mov	r0, r4
 4823 0062 FFF7FEFF 		bl	HAL_SPI_RxCpltCallback
 4824              	.LVL362:
 4825 0066 10BD     		pop	{r4, pc}
 4826              	.LVL363:
 4827              	.L376:
3545:HALLIB/Src/stm32f7xx_hal_spi.c ****         HAL_SPI_TxRxCpltCallback(hspi);
 4828              		.loc 1 3545 0
 4829 0068 0123     		movs	r3, #1
 4830 006a 84F85D30 		strb	r3, [r4, #93]
3546:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 4831              		.loc 1 3546 0
 4832 006e 2046     		mov	r0, r4
 4833 0070 FFF7FEFF 		bl	HAL_SPI_TxRxCpltCallback
 4834              	.LVL364:
 4835 0074 10BD     		pop	{r4, pc}
 4836              	.LVL365:
 4837              	.L375:
3551:HALLIB/Src/stm32f7xx_hal_spi.c ****       HAL_SPI_ErrorCallback(hspi);
 4838              		.loc 1 3551 0
 4839 0076 0123     		movs	r3, #1
 4840 0078 84F85D30 		strb	r3, [r4, #93]
3552:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 4841              		.loc 1 3552 0
 4842 007c 2046     		mov	r0, r4
 4843 007e FFF7FEFF 		bl	HAL_SPI_ErrorCallback
 4844              	.LVL366:
 4845 0082 10BD     		pop	{r4, pc}
 4846              		.cfi_endproc
 4847              	.LFE191:
 4849              		.section	.text.SPI_2linesTxISR_8BIT,"ax",%progbits
 4850              		.align	2
 4851              		.thumb
 4852              		.thumb_func
 4854              	SPI_2linesTxISR_8BIT:
 4855              	.LFB177:
3024:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Transmit data in packing Bit mode */
 4856              		.loc 1 3024 0
 4857              		.cfi_startproc
 4858              		@ args = 0, pretend = 0, frame = 0
 4859              		@ frame_needed = 0, uses_anonymous_args = 0
 4860              	.LVL367:
 4861 0000 08B5     		push	{r3, lr}
 4862              	.LCFI58:
 4863              		.cfi_def_cfa_offset 8
 4864              		.cfi_offset 3, -8
 4865              		.cfi_offset 14, -4
ARM GAS  /tmp/ccXuIaHP.s 			page 164


3026:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4866              		.loc 1 3026 0
 4867 0002 C38F     		ldrh	r3, [r0, #62]
 4868 0004 9BB2     		uxth	r3, r3
 4869 0006 012B     		cmp	r3, #1
 4870 0008 0CD9     		bls	.L379
3028:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->pTxBuffPtr += sizeof(uint16_t);
 4871              		.loc 1 3028 0
 4872 000a 0368     		ldr	r3, [r0]
 4873 000c 826B     		ldr	r2, [r0, #56]
 4874 000e 1288     		ldrh	r2, [r2]
 4875 0010 DA60     		str	r2, [r3, #12]
3029:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxXferCount -= 2U;
 4876              		.loc 1 3029 0
 4877 0012 836B     		ldr	r3, [r0, #56]
 4878 0014 0233     		adds	r3, r3, #2
 4879 0016 8363     		str	r3, [r0, #56]
3030:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4880              		.loc 1 3030 0
 4881 0018 C38F     		ldrh	r3, [r0, #62]
 4882 001a 9BB2     		uxth	r3, r3
 4883 001c 023B     		subs	r3, r3, #2
 4884 001e 9BB2     		uxth	r3, r3
 4885 0020 C387     		strh	r3, [r0, #62]	@ movhi
 4886 0022 0AE0     		b	.L380
 4887              	.L379:
3035:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxXferCount--;
 4888              		.loc 1 3035 0
 4889 0024 0268     		ldr	r2, [r0]
 4890 0026 836B     		ldr	r3, [r0, #56]
 4891 0028 591C     		adds	r1, r3, #1
 4892 002a 8163     		str	r1, [r0, #56]
 4893 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4894 002e 1373     		strb	r3, [r2, #12]
3036:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4895              		.loc 1 3036 0
 4896 0030 C38F     		ldrh	r3, [r0, #62]
 4897 0032 9BB2     		uxth	r3, r3
 4898 0034 013B     		subs	r3, r3, #1
 4899 0036 9BB2     		uxth	r3, r3
 4900 0038 C387     		strh	r3, [r0, #62]	@ movhi
 4901              	.L380:
3040:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4902              		.loc 1 3040 0
 4903 003a C38F     		ldrh	r3, [r0, #62]
 4904 003c 9BB2     		uxth	r3, r3
 4905 003e CBB9     		cbnz	r3, .L378
3043:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 4906              		.loc 1 3043 0
 4907 0040 836A     		ldr	r3, [r0, #40]
 4908 0042 B3F5005F 		cmp	r3, #8192
 4909 0046 0AD1     		bne	.L382
3046:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Disable TXE interrupt */
 4910              		.loc 1 3046 0
 4911 0048 0268     		ldr	r2, [r0]
 4912 004a 1368     		ldr	r3, [r2]
 4913 004c 43F48053 		orr	r3, r3, #4096
ARM GAS  /tmp/ccXuIaHP.s 			page 165


 4914 0050 1360     		str	r3, [r2]
3048:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
 4915              		.loc 1 3048 0
 4916 0052 0268     		ldr	r2, [r0]
 4917 0054 5368     		ldr	r3, [r2, #4]
 4918 0056 23F08003 		bic	r3, r3, #128
 4919 005a 5360     		str	r3, [r2, #4]
3049:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 4920              		.loc 1 3049 0
 4921 005c 08BD     		pop	{r3, pc}
 4922              	.L382:
3054:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 4923              		.loc 1 3054 0
 4924 005e 0268     		ldr	r2, [r0]
 4925 0060 5368     		ldr	r3, [r2, #4]
 4926 0062 23F08003 		bic	r3, r3, #128
 4927 0066 5360     		str	r3, [r2, #4]
3056:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 4928              		.loc 1 3056 0
 4929 0068 B0F84630 		ldrh	r3, [r0, #70]
 4930 006c 9BB2     		uxth	r3, r3
 4931 006e 0BB9     		cbnz	r3, .L378
3058:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 4932              		.loc 1 3058 0
 4933 0070 FFF7FEFF 		bl	SPI_CloseRxTx_ISR
 4934              	.LVL368:
 4935              	.L378:
 4936 0074 08BD     		pop	{r3, pc}
 4937              		.cfi_endproc
 4938              	.LFE177:
 4940 0076 00BF     		.section	.text.SPI_2linesRxISR_8BIT,"ax",%progbits
 4941              		.align	2
 4942              		.thumb
 4943              		.thumb_func
 4945              	SPI_2linesRxISR_8BIT:
 4946              	.LFB175:
2942:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Receive data in packing mode */
 4947              		.loc 1 2942 0
 4948              		.cfi_startproc
 4949              		@ args = 0, pretend = 0, frame = 0
 4950              		@ frame_needed = 0, uses_anonymous_args = 0
 4951              	.LVL369:
 4952 0000 08B5     		push	{r3, lr}
 4953              	.LCFI59:
 4954              		.cfi_def_cfa_offset 8
 4955              		.cfi_offset 3, -8
 4956              		.cfi_offset 14, -4
2944:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 4957              		.loc 1 2944 0
 4958 0002 B0F84630 		ldrh	r3, [r0, #70]
 4959 0006 9BB2     		uxth	r3, r3
 4960 0008 012B     		cmp	r3, #1
 4961 000a 18D9     		bls	.L385
2946:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->pRxBuffPtr += sizeof(uint16_t);
 4962              		.loc 1 2946 0
 4963 000c 036C     		ldr	r3, [r0, #64]
 4964 000e 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccXuIaHP.s 			page 166


 4965 0010 D268     		ldr	r2, [r2, #12]
 4966 0012 1A80     		strh	r2, [r3]	@ movhi
2947:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxXferCount -= 2U;
 4967              		.loc 1 2947 0
 4968 0014 036C     		ldr	r3, [r0, #64]
 4969 0016 0233     		adds	r3, r3, #2
 4970 0018 0364     		str	r3, [r0, #64]
2948:HALLIB/Src/stm32f7xx_hal_spi.c ****     if (hspi->RxXferCount == 1U)
 4971              		.loc 1 2948 0
 4972 001a B0F84630 		ldrh	r3, [r0, #70]
 4973 001e 9BB2     		uxth	r3, r3
 4974 0020 023B     		subs	r3, r3, #2
 4975 0022 9BB2     		uxth	r3, r3
 4976 0024 A0F84630 		strh	r3, [r0, #70]	@ movhi
2949:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 4977              		.loc 1 2949 0
 4978 0028 B0F84630 		ldrh	r3, [r0, #70]
 4979 002c 9BB2     		uxth	r3, r3
 4980 002e 012B     		cmp	r3, #1
 4981 0030 12D1     		bne	.L386
2952:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 4982              		.loc 1 2952 0
 4983 0032 0268     		ldr	r2, [r0]
 4984 0034 5368     		ldr	r3, [r2, #4]
 4985 0036 43F48053 		orr	r3, r3, #4096
 4986 003a 5360     		str	r3, [r2, #4]
 4987 003c 0CE0     		b	.L386
 4988              	.L385:
2958:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxXferCount--;
 4989              		.loc 1 2958 0
 4990 003e 036C     		ldr	r3, [r0, #64]
 4991 0040 5A1C     		adds	r2, r3, #1
 4992 0042 0264     		str	r2, [r0, #64]
 4993 0044 0268     		ldr	r2, [r0]
 4994 0046 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 4995 0048 1A70     		strb	r2, [r3]
2959:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 4996              		.loc 1 2959 0
 4997 004a B0F84630 		ldrh	r3, [r0, #70]
 4998 004e 9BB2     		uxth	r3, r3
 4999 0050 013B     		subs	r3, r3, #1
 5000 0052 9BB2     		uxth	r3, r3
 5001 0054 A0F84630 		strh	r3, [r0, #70]	@ movhi
 5002              	.L386:
2963:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5003              		.loc 1 2963 0
 5004 0058 B0F84630 		ldrh	r3, [r0, #70]
 5005 005c 9BB2     		uxth	r3, r3
 5006 005e ABB9     		cbnz	r3, .L384
2966:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5007              		.loc 1 2966 0
 5008 0060 836A     		ldr	r3, [r0, #40]
 5009 0062 B3F5005F 		cmp	r3, #8192
 5010 0066 07D1     		bne	.L388
2968:HALLIB/Src/stm32f7xx_hal_spi.c ****       hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 5011              		.loc 1 2968 0
 5012 0068 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccXuIaHP.s 			page 167


 5013 006a 5368     		ldr	r3, [r2, #4]
 5014 006c 43F48053 		orr	r3, r3, #4096
 5015 0070 5360     		str	r3, [r2, #4]
2969:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
 5016              		.loc 1 2969 0
 5017 0072 074B     		ldr	r3, .L390
 5018 0074 C364     		str	r3, [r0, #76]
2970:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5019              		.loc 1 2970 0
 5020 0076 08BD     		pop	{r3, pc}
 5021              	.L388:
2975:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5022              		.loc 1 2975 0
 5023 0078 0268     		ldr	r2, [r0]
 5024 007a 5368     		ldr	r3, [r2, #4]
 5025 007c 23F06003 		bic	r3, r3, #96
 5026 0080 5360     		str	r3, [r2, #4]
2977:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5027              		.loc 1 2977 0
 5028 0082 C38F     		ldrh	r3, [r0, #62]
 5029 0084 9BB2     		uxth	r3, r3
 5030 0086 0BB9     		cbnz	r3, .L384
2979:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5031              		.loc 1 2979 0
 5032 0088 FFF7FEFF 		bl	SPI_CloseRxTx_ISR
 5033              	.LVL370:
 5034              	.L384:
 5035 008c 08BD     		pop	{r3, pc}
 5036              	.L391:
 5037 008e 00BF     		.align	2
 5038              	.L390:
 5039 0090 00000000 		.word	SPI_2linesRxISR_8BITCRC
 5040              		.cfi_endproc
 5041              	.LFE175:
 5043              		.section	.text.SPI_2linesRxISR_8BITCRC,"ax",%progbits
 5044              		.align	2
 5045              		.thumb
 5046              		.thumb_func
 5048              	SPI_2linesRxISR_8BITCRC:
 5049              	.LFB176:
2992:HALLIB/Src/stm32f7xx_hal_spi.c ****   __IO uint8_t tmpreg = 0U;
 5050              		.loc 1 2992 0
 5051              		.cfi_startproc
 5052              		@ args = 0, pretend = 0, frame = 8
 5053              		@ frame_needed = 0, uses_anonymous_args = 0
 5054              	.LVL371:
 5055 0000 00B5     		push	{lr}
 5056              	.LCFI60:
 5057              		.cfi_def_cfa_offset 4
 5058              		.cfi_offset 14, -4
 5059 0002 83B0     		sub	sp, sp, #12
 5060              	.LCFI61:
 5061              		.cfi_def_cfa_offset 16
2993:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5062              		.loc 1 2993 0
 5063 0004 0023     		movs	r3, #0
 5064 0006 8DF80730 		strb	r3, [sp, #7]
ARM GAS  /tmp/ccXuIaHP.s 			page 168


2996:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5065              		.loc 1 2996 0
 5066 000a 0268     		ldr	r2, [r0]
 5067 000c 137B     		ldrb	r3, [r2, #12]	@ zero_extendqisi2
 5068 000e DBB2     		uxtb	r3, r3
 5069 0010 8DF80730 		strb	r3, [sp, #7]
2999:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5070              		.loc 1 2999 0
 5071 0014 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
3001:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5072              		.loc 1 3001 0
 5073 0018 836C     		ldr	r3, [r0, #72]
 5074 001a 013B     		subs	r3, r3, #1
 5075 001c 8364     		str	r3, [r0, #72]
3004:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5076              		.loc 1 3004 0
 5077 001e 43B9     		cbnz	r3, .L392
3007:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5078              		.loc 1 3007 0
 5079 0020 5368     		ldr	r3, [r2, #4]
 5080 0022 23F06003 		bic	r3, r3, #96
 5081 0026 5360     		str	r3, [r2, #4]
3009:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5082              		.loc 1 3009 0
 5083 0028 C38F     		ldrh	r3, [r0, #62]
 5084 002a 9BB2     		uxth	r3, r3
 5085 002c 0BB9     		cbnz	r3, .L392
3011:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5086              		.loc 1 3011 0
 5087 002e FFF7FEFF 		bl	SPI_CloseRxTx_ISR
 5088              	.LVL372:
 5089              	.L392:
3014:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 5090              		.loc 1 3014 0
 5091 0032 03B0     		add	sp, sp, #12
 5092              	.LCFI62:
 5093              		.cfi_def_cfa_offset 4
 5094              		@ sp needed
 5095 0034 5DF804FB 		ldr	pc, [sp], #4
 5096              		.cfi_endproc
 5097              	.LFE176:
 5099              		.section	.text.SPI_2linesTxISR_16BIT,"ax",%progbits
 5100              		.align	2
 5101              		.thumb
 5102              		.thumb_func
 5104              	SPI_2linesTxISR_16BIT:
 5105              	.LFB180:
3128:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Transmit data in 16 Bit mode */
 5106              		.loc 1 3128 0
 5107              		.cfi_startproc
 5108              		@ args = 0, pretend = 0, frame = 0
 5109              		@ frame_needed = 0, uses_anonymous_args = 0
 5110              	.LVL373:
 5111 0000 08B5     		push	{r3, lr}
 5112              	.LCFI63:
 5113              		.cfi_def_cfa_offset 8
 5114              		.cfi_offset 3, -8
ARM GAS  /tmp/ccXuIaHP.s 			page 169


 5115              		.cfi_offset 14, -4
3130:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pTxBuffPtr += sizeof(uint16_t);
 5116              		.loc 1 3130 0
 5117 0002 0368     		ldr	r3, [r0]
 5118 0004 826B     		ldr	r2, [r0, #56]
 5119 0006 1288     		ldrh	r2, [r2]
 5120 0008 DA60     		str	r2, [r3, #12]
3131:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount--;
 5121              		.loc 1 3131 0
 5122 000a 836B     		ldr	r3, [r0, #56]
 5123 000c 0233     		adds	r3, r3, #2
 5124 000e 8363     		str	r3, [r0, #56]
3132:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5125              		.loc 1 3132 0
 5126 0010 C38F     		ldrh	r3, [r0, #62]
 5127 0012 9BB2     		uxth	r3, r3
 5128 0014 013B     		subs	r3, r3, #1
 5129 0016 9BB2     		uxth	r3, r3
 5130 0018 C387     		strh	r3, [r0, #62]	@ movhi
3135:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5131              		.loc 1 3135 0
 5132 001a C38F     		ldrh	r3, [r0, #62]
 5133 001c 9BB2     		uxth	r3, r3
 5134 001e CBB9     		cbnz	r3, .L395
3138:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5135              		.loc 1 3138 0
 5136 0020 836A     		ldr	r3, [r0, #40]
 5137 0022 B3F5005F 		cmp	r3, #8192
 5138 0026 0AD1     		bne	.L397
3141:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Disable TXE interrupt */
 5139              		.loc 1 3141 0
 5140 0028 0268     		ldr	r2, [r0]
 5141 002a 1368     		ldr	r3, [r2]
 5142 002c 43F48053 		orr	r3, r3, #4096
 5143 0030 1360     		str	r3, [r2]
3143:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
 5144              		.loc 1 3143 0
 5145 0032 0268     		ldr	r2, [r0]
 5146 0034 5368     		ldr	r3, [r2, #4]
 5147 0036 23F08003 		bic	r3, r3, #128
 5148 003a 5360     		str	r3, [r2, #4]
3144:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5149              		.loc 1 3144 0
 5150 003c 08BD     		pop	{r3, pc}
 5151              	.L397:
3149:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5152              		.loc 1 3149 0
 5153 003e 0268     		ldr	r2, [r0]
 5154 0040 5368     		ldr	r3, [r2, #4]
 5155 0042 23F08003 		bic	r3, r3, #128
 5156 0046 5360     		str	r3, [r2, #4]
3151:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5157              		.loc 1 3151 0
 5158 0048 B0F84630 		ldrh	r3, [r0, #70]
 5159 004c 9BB2     		uxth	r3, r3
 5160 004e 0BB9     		cbnz	r3, .L395
3153:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
ARM GAS  /tmp/ccXuIaHP.s 			page 170


 5161              		.loc 1 3153 0
 5162 0050 FFF7FEFF 		bl	SPI_CloseRxTx_ISR
 5163              	.LVL374:
 5164              	.L395:
 5165 0054 08BD     		pop	{r3, pc}
 5166              		.cfi_endproc
 5167              	.LFE180:
 5169 0056 00BF     		.section	.text.SPI_2linesRxISR_16BIT,"ax",%progbits
 5170              		.align	2
 5171              		.thumb
 5172              		.thumb_func
 5174              	SPI_2linesRxISR_16BIT:
 5175              	.LFB178:
3070:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Receive data in 16 Bit mode */
 5176              		.loc 1 3070 0
 5177              		.cfi_startproc
 5178              		@ args = 0, pretend = 0, frame = 0
 5179              		@ frame_needed = 0, uses_anonymous_args = 0
 5180              	.LVL375:
 5181 0000 08B5     		push	{r3, lr}
 5182              	.LCFI64:
 5183              		.cfi_def_cfa_offset 8
 5184              		.cfi_offset 3, -8
 5185              		.cfi_offset 14, -4
3072:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->pRxBuffPtr += sizeof(uint16_t);
 5186              		.loc 1 3072 0
 5187 0002 036C     		ldr	r3, [r0, #64]
 5188 0004 0268     		ldr	r2, [r0]
 5189 0006 D268     		ldr	r2, [r2, #12]
 5190 0008 1A80     		strh	r2, [r3]	@ movhi
3073:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount--;
 5191              		.loc 1 3073 0
 5192 000a 036C     		ldr	r3, [r0, #64]
 5193 000c 0233     		adds	r3, r3, #2
 5194 000e 0364     		str	r3, [r0, #64]
3074:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5195              		.loc 1 3074 0
 5196 0010 B0F84630 		ldrh	r3, [r0, #70]
 5197 0014 9BB2     		uxth	r3, r3
 5198 0016 013B     		subs	r3, r3, #1
 5199 0018 9BB2     		uxth	r3, r3
 5200 001a A0F84630 		strh	r3, [r0, #70]	@ movhi
3076:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5201              		.loc 1 3076 0
 5202 001e B0F84630 		ldrh	r3, [r0, #70]
 5203 0022 9BB2     		uxth	r3, r3
 5204 0024 83B9     		cbnz	r3, .L399
3079:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5205              		.loc 1 3079 0
 5206 0026 836A     		ldr	r3, [r0, #40]
 5207 0028 B3F5005F 		cmp	r3, #8192
 5208 002c 02D1     		bne	.L401
3081:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
 5209              		.loc 1 3081 0
 5210 002e 074B     		ldr	r3, .L403
 5211 0030 C364     		str	r3, [r0, #76]
3082:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
ARM GAS  /tmp/ccXuIaHP.s 			page 171


 5212              		.loc 1 3082 0
 5213 0032 08BD     		pop	{r3, pc}
 5214              	.L401:
3087:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5215              		.loc 1 3087 0
 5216 0034 0268     		ldr	r2, [r0]
 5217 0036 5368     		ldr	r3, [r2, #4]
 5218 0038 23F04003 		bic	r3, r3, #64
 5219 003c 5360     		str	r3, [r2, #4]
3089:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5220              		.loc 1 3089 0
 5221 003e C38F     		ldrh	r3, [r0, #62]
 5222 0040 9BB2     		uxth	r3, r3
 5223 0042 0BB9     		cbnz	r3, .L399
3091:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5224              		.loc 1 3091 0
 5225 0044 FFF7FEFF 		bl	SPI_CloseRxTx_ISR
 5226              	.LVL376:
 5227              	.L399:
 5228 0048 08BD     		pop	{r3, pc}
 5229              	.L404:
 5230 004a 00BF     		.align	2
 5231              	.L403:
 5232 004c 00000000 		.word	SPI_2linesRxISR_16BITCRC
 5233              		.cfi_endproc
 5234              	.LFE178:
 5236              		.section	.text.SPI_2linesRxISR_16BITCRC,"ax",%progbits
 5237              		.align	2
 5238              		.thumb
 5239              		.thumb_func
 5241              	SPI_2linesRxISR_16BITCRC:
 5242              	.LFB179:
3104:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Receive data in 16 Bit mode */
 5243              		.loc 1 3104 0
 5244              		.cfi_startproc
 5245              		@ args = 0, pretend = 0, frame = 8
 5246              		@ frame_needed = 0, uses_anonymous_args = 0
 5247              	.LVL377:
 5248 0000 00B5     		push	{lr}
 5249              	.LCFI65:
 5250              		.cfi_def_cfa_offset 4
 5251              		.cfi_offset 14, -4
 5252 0002 83B0     		sub	sp, sp, #12
 5253              	.LCFI66:
 5254              		.cfi_def_cfa_offset 16
3106:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5255              		.loc 1 3106 0
 5256 0004 0023     		movs	r3, #0
 5257 0006 ADF80630 		strh	r3, [sp, #6]	@ movhi
3109:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5258              		.loc 1 3109 0
 5259 000a 0368     		ldr	r3, [r0]
 5260 000c DA68     		ldr	r2, [r3, #12]
 5261 000e 92B2     		uxth	r2, r2
 5262 0010 ADF80620 		strh	r2, [sp, #6]	@ movhi
3112:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5263              		.loc 1 3112 0
ARM GAS  /tmp/ccXuIaHP.s 			page 172


 5264 0014 BDF80620 		ldrh	r2, [sp, #6]
3115:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5265              		.loc 1 3115 0
 5266 0018 5A68     		ldr	r2, [r3, #4]
 5267 001a 22F04002 		bic	r2, r2, #64
 5268 001e 5A60     		str	r2, [r3, #4]
3117:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 5269              		.loc 1 3117 0
 5270 0020 FFF7FEFF 		bl	SPI_CloseRxTx_ISR
 5271              	.LVL378:
3118:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 5272              		.loc 1 3118 0
 5273 0024 03B0     		add	sp, sp, #12
 5274              	.LCFI67:
 5275              		.cfi_def_cfa_offset 4
 5276              		@ sp needed
 5277 0026 5DF804FB 		ldr	pc, [sp], #4
 5278              		.cfi_endproc
 5279              	.LFE179:
 5281 002a 00BF     		.section	.text.SPI_DMAError,"ax",%progbits
 5282              		.align	2
 5283              		.thumb
 5284              		.thumb_func
 5286              	SPI_DMAError:
 5287              	.LFB171:
2784:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5288              		.loc 1 2784 0
 5289              		.cfi_startproc
 5290              		@ args = 0, pretend = 0, frame = 0
 5291              		@ frame_needed = 0, uses_anonymous_args = 0
 5292              	.LVL379:
 5293 0000 08B5     		push	{r3, lr}
 5294              	.LCFI68:
 5295              		.cfi_def_cfa_offset 8
 5296              		.cfi_offset 3, -8
 5297              		.cfi_offset 14, -4
2785:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5298              		.loc 1 2785 0
 5299 0002 806B     		ldr	r0, [r0, #56]
 5300              	.LVL380:
2788:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5301              		.loc 1 2788 0
 5302 0004 0268     		ldr	r2, [r0]
 5303 0006 5368     		ldr	r3, [r2, #4]
 5304 0008 23F00303 		bic	r3, r3, #3
 5305 000c 5360     		str	r3, [r2, #4]
2790:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->State = HAL_SPI_STATE_READY;
 5306              		.loc 1 2790 0
 5307 000e 036E     		ldr	r3, [r0, #96]
 5308 0010 43F01003 		orr	r3, r3, #16
 5309 0014 0366     		str	r3, [r0, #96]
2791:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_SPI_ErrorCallback(hspi);
 5310              		.loc 1 2791 0
 5311 0016 0123     		movs	r3, #1
 5312 0018 80F85D30 		strb	r3, [r0, #93]
2792:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 5313              		.loc 1 2792 0
ARM GAS  /tmp/ccXuIaHP.s 			page 173


 5314 001c FFF7FEFF 		bl	HAL_SPI_ErrorCallback
 5315              	.LVL381:
 5316 0020 08BD     		pop	{r3, pc}
 5317              		.cfi_endproc
 5318              	.LFE171:
 5320 0022 00BF     		.section	.text.SPI_DMATransmitCplt,"ax",%progbits
 5321              		.align	2
 5322              		.thumb
 5323              		.thumb_func
 5325              	SPI_DMATransmitCplt:
 5326              	.LFB165:
2522:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5327              		.loc 1 2522 0
 5328              		.cfi_startproc
 5329              		@ args = 0, pretend = 0, frame = 8
 5330              		@ frame_needed = 0, uses_anonymous_args = 0
 5331              	.LVL382:
 5332 0000 30B5     		push	{r4, r5, lr}
 5333              	.LCFI69:
 5334              		.cfi_def_cfa_offset 12
 5335              		.cfi_offset 4, -12
 5336              		.cfi_offset 5, -8
 5337              		.cfi_offset 14, -4
 5338 0002 83B0     		sub	sp, sp, #12
 5339              	.LCFI70:
 5340              		.cfi_def_cfa_offset 24
 5341 0004 0546     		mov	r5, r0
2523:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
 5342              		.loc 1 2523 0
 5343 0006 846B     		ldr	r4, [r0, #56]
 5344              	.LVL383:
2527:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5345              		.loc 1 2527 0
 5346 0008 FFF7FEFF 		bl	HAL_GetTick
 5347              	.LVL384:
2530:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5348              		.loc 1 2530 0
 5349 000c 2B68     		ldr	r3, [r5]
 5350 000e 1B68     		ldr	r3, [r3]
 5351 0010 13F4807F 		tst	r3, #256
 5352 0014 27D1     		bne	.L410
2533:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5353              		.loc 1 2533 0
 5354 0016 2268     		ldr	r2, [r4]
 5355 0018 5368     		ldr	r3, [r2, #4]
 5356 001a 23F02003 		bic	r3, r3, #32
 5357 001e 5360     		str	r3, [r2, #4]
2536:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5358              		.loc 1 2536 0
 5359 0020 2268     		ldr	r2, [r4]
 5360 0022 5368     		ldr	r3, [r2, #4]
 5361 0024 23F00203 		bic	r3, r3, #2
 5362 0028 5360     		str	r3, [r2, #4]
2539:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5363              		.loc 1 2539 0
 5364 002a 0246     		mov	r2, r0
 5365 002c 6421     		movs	r1, #100
ARM GAS  /tmp/ccXuIaHP.s 			page 174


 5366 002e 2046     		mov	r0, r4
 5367              	.LVL385:
 5368 0030 FFF7FEFF 		bl	SPI_EndRxTxTransaction
 5369              	.LVL386:
 5370 0034 18B1     		cbz	r0, .L411
2541:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5371              		.loc 1 2541 0
 5372 0036 236E     		ldr	r3, [r4, #96]
 5373 0038 43F02003 		orr	r3, r3, #32
 5374 003c 2366     		str	r3, [r4, #96]
 5375              	.L411:
2545:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5376              		.loc 1 2545 0
 5377 003e A368     		ldr	r3, [r4, #8]
 5378 0040 33B9     		cbnz	r3, .L412
 5379              	.LBB6:
2547:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5380              		.loc 1 2547 0
 5381 0042 0193     		str	r3, [sp, #4]
 5382 0044 2368     		ldr	r3, [r4]
 5383 0046 DA68     		ldr	r2, [r3, #12]
 5384 0048 0192     		str	r2, [sp, #4]
 5385 004a 9B68     		ldr	r3, [r3, #8]
 5386 004c 0193     		str	r3, [sp, #4]
 5387 004e 019B     		ldr	r3, [sp, #4]
 5388              	.L412:
 5389              	.LBE6:
2550:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
 5390              		.loc 1 2550 0
 5391 0050 0023     		movs	r3, #0
 5392 0052 E387     		strh	r3, [r4, #62]	@ movhi
2551:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5393              		.loc 1 2551 0
 5394 0054 0123     		movs	r3, #1
 5395 0056 84F85D30 		strb	r3, [r4, #93]
2553:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5396              		.loc 1 2553 0
 5397 005a 236E     		ldr	r3, [r4, #96]
 5398 005c 1BB1     		cbz	r3, .L410
2555:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
 5399              		.loc 1 2555 0
 5400 005e 2046     		mov	r0, r4
 5401 0060 FFF7FEFF 		bl	HAL_SPI_ErrorCallback
 5402              	.LVL387:
2556:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5403              		.loc 1 2556 0
 5404 0064 02E0     		b	.L409
 5405              	.L410:
2559:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 5406              		.loc 1 2559 0
 5407 0066 2046     		mov	r0, r4
 5408 0068 FFF7FEFF 		bl	HAL_SPI_TxCpltCallback
 5409              	.LVL388:
 5410              	.L409:
2560:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5411              		.loc 1 2560 0
 5412 006c 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccXuIaHP.s 			page 175


 5413              	.LCFI71:
 5414              		.cfi_def_cfa_offset 12
 5415              		@ sp needed
 5416 006e 30BD     		pop	{r4, r5, pc}
 5417              		.cfi_endproc
 5418              	.LFE165:
 5420              		.section	.text.SPI_DMAReceiveCplt,"ax",%progbits
 5421              		.align	2
 5422              		.thumb
 5423              		.thumb_func
 5425              	SPI_DMAReceiveCplt:
 5426              	.LFB166:
2569:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5427              		.loc 1 2569 0
 5428              		.cfi_startproc
 5429              		@ args = 0, pretend = 0, frame = 8
 5430              		@ frame_needed = 0, uses_anonymous_args = 0
 5431              	.LVL389:
 5432 0000 70B5     		push	{r4, r5, r6, lr}
 5433              	.LCFI72:
 5434              		.cfi_def_cfa_offset 16
 5435              		.cfi_offset 4, -16
 5436              		.cfi_offset 5, -12
 5437              		.cfi_offset 6, -8
 5438              		.cfi_offset 14, -4
 5439 0002 84B0     		sub	sp, sp, #16
 5440              	.LCFI73:
 5441              		.cfi_def_cfa_offset 32
 5442 0004 0546     		mov	r5, r0
2570:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
 5443              		.loc 1 2570 0
 5444 0006 846B     		ldr	r4, [r0, #56]
 5445              	.LVL390:
2573:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 5446              		.loc 1 2573 0
 5447 0008 0023     		movs	r3, #0
 5448 000a ADF80E30 		strh	r3, [sp, #14]	@ movhi
2577:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5449              		.loc 1 2577 0
 5450 000e FFF7FEFF 		bl	HAL_GetTick
 5451              	.LVL391:
2580:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5452              		.loc 1 2580 0
 5453 0012 2B68     		ldr	r3, [r5]
 5454 0014 1B68     		ldr	r3, [r3]
 5455 0016 13F4807F 		tst	r3, #256
 5456 001a 61D1     		bne	.L416
 5457 001c 0646     		mov	r6, r0
2583:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5458              		.loc 1 2583 0
 5459 001e 2268     		ldr	r2, [r4]
 5460 0020 5368     		ldr	r3, [r2, #4]
 5461 0022 23F02003 		bic	r3, r3, #32
 5462 0026 5360     		str	r3, [r2, #4]
2587:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5463              		.loc 1 2587 0
 5464 0028 A36A     		ldr	r3, [r4, #40]
ARM GAS  /tmp/ccXuIaHP.s 			page 176


 5465 002a B3F5005F 		cmp	r3, #8192
 5466 002e 32D1     		bne	.L417
2590:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 5467              		.loc 1 2590 0
 5468 0030 0090     		str	r0, [sp]
 5469 0032 6423     		movs	r3, #100
 5470 0034 0122     		movs	r2, #1
 5471 0036 1146     		mov	r1, r2
 5472 0038 2046     		mov	r0, r4
 5473              	.LVL392:
 5474 003a FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 5475              	.LVL393:
 5476 003e 18B1     		cbz	r0, .L418
2593:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 5477              		.loc 1 2593 0
 5478 0040 236E     		ldr	r3, [r4, #96]
 5479 0042 43F00203 		orr	r3, r3, #2
 5480 0046 2366     		str	r3, [r4, #96]
 5481              	.L418:
2596:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 5482              		.loc 1 2596 0
 5483 0048 E368     		ldr	r3, [r4, #12]
 5484 004a B3F5E06F 		cmp	r3, #1792
 5485 004e 07D9     		bls	.L419
2598:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
 5486              		.loc 1 2598 0
 5487 0050 2368     		ldr	r3, [r4]
 5488 0052 DB68     		ldr	r3, [r3, #12]
 5489 0054 9BB2     		uxth	r3, r3
 5490 0056 ADF80E30 		strh	r3, [sp, #14]	@ movhi
2600:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 5491              		.loc 1 2600 0
 5492 005a BDF80E30 		ldrh	r3, [sp, #14]
 5493 005e 1AE0     		b	.L417
 5494              	.L419:
2604:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
 5495              		.loc 1 2604 0
 5496 0060 2368     		ldr	r3, [r4]
 5497 0062 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 5498 0064 ADF80E30 		strh	r3, [sp, #14]	@ movhi
2606:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5499              		.loc 1 2606 0
 5500 0068 BDF80E30 		ldrh	r3, [sp, #14]
2608:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 5501              		.loc 1 2608 0
 5502 006c 236B     		ldr	r3, [r4, #48]
 5503 006e 022B     		cmp	r3, #2
 5504 0070 11D1     		bne	.L417
2610:HALLIB/Src/stm32f7xx_hal_spi.c ****           {
 5505              		.loc 1 2610 0
 5506 0072 0096     		str	r6, [sp]
 5507 0074 6423     		movs	r3, #100
 5508 0076 0122     		movs	r2, #1
 5509 0078 1146     		mov	r1, r2
 5510 007a 2046     		mov	r0, r4
 5511 007c FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 5512              	.LVL394:
ARM GAS  /tmp/ccXuIaHP.s 			page 177


 5513 0080 18B1     		cbz	r0, .L420
2613:HALLIB/Src/stm32f7xx_hal_spi.c ****           }
 5514              		.loc 1 2613 0
 5515 0082 236E     		ldr	r3, [r4, #96]
 5516 0084 43F00203 		orr	r3, r3, #2
 5517 0088 2366     		str	r3, [r4, #96]
 5518              	.L420:
2615:HALLIB/Src/stm32f7xx_hal_spi.c ****           /* To avoid GCC warning */
 5519              		.loc 1 2615 0
 5520 008a 2368     		ldr	r3, [r4]
 5521 008c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 5522 008e ADF80E30 		strh	r3, [sp, #14]	@ movhi
2617:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 5523              		.loc 1 2617 0
 5524 0092 BDF80E30 		ldrh	r3, [sp, #14]
 5525              	.L417:
2624:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5526              		.loc 1 2624 0
 5527 0096 2268     		ldr	r2, [r4]
 5528 0098 5368     		ldr	r3, [r2, #4]
 5529 009a 23F00303 		bic	r3, r3, #3
 5530 009e 5360     		str	r3, [r2, #4]
2627:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5531              		.loc 1 2627 0
 5532 00a0 3246     		mov	r2, r6
 5533 00a2 6421     		movs	r1, #100
 5534 00a4 2046     		mov	r0, r4
 5535 00a6 FFF7FEFF 		bl	SPI_EndRxTransaction
 5536              	.LVL395:
 5537 00aa 08B1     		cbz	r0, .L421
2629:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5538              		.loc 1 2629 0
 5539 00ac 2023     		movs	r3, #32
 5540 00ae 2366     		str	r3, [r4, #96]
 5541              	.L421:
2632:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
 5542              		.loc 1 2632 0
 5543 00b0 0023     		movs	r3, #0
 5544 00b2 A4F84630 		strh	r3, [r4, #70]	@ movhi
2633:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5545              		.loc 1 2633 0
 5546 00b6 0123     		movs	r3, #1
 5547 00b8 84F85D30 		strb	r3, [r4, #93]
2637:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5548              		.loc 1 2637 0
 5549 00bc 2368     		ldr	r3, [r4]
 5550 00be 9A68     		ldr	r2, [r3, #8]
 5551 00c0 12F0100F 		tst	r2, #16
 5552 00c4 06D0     		beq	.L422
2639:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 5553              		.loc 1 2639 0
 5554 00c6 226E     		ldr	r2, [r4, #96]
 5555 00c8 42F00202 		orr	r2, r2, #2
 5556 00cc 2266     		str	r2, [r4, #96]
2640:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5557              		.loc 1 2640 0
 5558 00ce 4FF6EF72 		movw	r2, #65519
ARM GAS  /tmp/ccXuIaHP.s 			page 178


 5559 00d2 9A60     		str	r2, [r3, #8]
 5560              	.L422:
2644:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5561              		.loc 1 2644 0
 5562 00d4 236E     		ldr	r3, [r4, #96]
 5563 00d6 1BB1     		cbz	r3, .L416
2646:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
 5564              		.loc 1 2646 0
 5565 00d8 2046     		mov	r0, r4
 5566 00da FFF7FEFF 		bl	HAL_SPI_ErrorCallback
 5567              	.LVL396:
2647:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5568              		.loc 1 2647 0
 5569 00de 02E0     		b	.L415
 5570              	.LVL397:
 5571              	.L416:
2650:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 5572              		.loc 1 2650 0
 5573 00e0 2046     		mov	r0, r4
 5574 00e2 FFF7FEFF 		bl	HAL_SPI_RxCpltCallback
 5575              	.LVL398:
 5576              	.L415:
2651:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5577              		.loc 1 2651 0
 5578 00e6 04B0     		add	sp, sp, #16
 5579              	.LCFI74:
 5580              		.cfi_def_cfa_offset 16
 5581              		@ sp needed
 5582 00e8 70BD     		pop	{r4, r5, r6, pc}
 5583              		.cfi_endproc
 5584              	.LFE166:
 5586 00ea 00BF     		.section	.text.SPI_DMATransmitReceiveCplt,"ax",%progbits
 5587              		.align	2
 5588              		.thumb
 5589              		.thumb_func
 5591              	SPI_DMATransmitReceiveCplt:
 5592              	.LFB167:
2660:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5593              		.loc 1 2660 0
 5594              		.cfi_startproc
 5595              		@ args = 0, pretend = 0, frame = 8
 5596              		@ frame_needed = 0, uses_anonymous_args = 0
 5597              	.LVL399:
 5598 0000 70B5     		push	{r4, r5, r6, lr}
 5599              	.LCFI75:
 5600              		.cfi_def_cfa_offset 16
 5601              		.cfi_offset 4, -16
 5602              		.cfi_offset 5, -12
 5603              		.cfi_offset 6, -8
 5604              		.cfi_offset 14, -4
 5605 0002 84B0     		sub	sp, sp, #16
 5606              	.LCFI76:
 5607              		.cfi_def_cfa_offset 32
 5608 0004 0546     		mov	r5, r0
2661:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t tickstart = 0U;
 5609              		.loc 1 2661 0
 5610 0006 846B     		ldr	r4, [r0, #56]
ARM GAS  /tmp/ccXuIaHP.s 			page 179


 5611              	.LVL400:
2664:HALLIB/Src/stm32f7xx_hal_spi.c **** #endif /* USE_SPI_CRC */
 5612              		.loc 1 2664 0
 5613 0008 0023     		movs	r3, #0
 5614 000a ADF80E30 		strh	r3, [sp, #14]	@ movhi
2667:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5615              		.loc 1 2667 0
 5616 000e FFF7FEFF 		bl	HAL_GetTick
 5617              	.LVL401:
2670:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5618              		.loc 1 2670 0
 5619 0012 2B68     		ldr	r3, [r5]
 5620 0014 1B68     		ldr	r3, [r3]
 5621 0016 13F4807F 		tst	r3, #256
 5622 001a 62D1     		bne	.L426
 5623 001c 0646     		mov	r6, r0
2673:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5624              		.loc 1 2673 0
 5625 001e 2268     		ldr	r2, [r4]
 5626 0020 5368     		ldr	r3, [r2, #4]
 5627 0022 23F02003 		bic	r3, r3, #32
 5628 0026 5360     		str	r3, [r2, #4]
2677:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5629              		.loc 1 2677 0
 5630 0028 A36A     		ldr	r3, [r4, #40]
 5631 002a B3F5005F 		cmp	r3, #8192
 5632 002e 30D1     		bne	.L427
2679:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 5633              		.loc 1 2679 0
 5634 0030 E368     		ldr	r3, [r4, #12]
 5635 0032 B3F5E06F 		cmp	r3, #1792
 5636 0036 17D1     		bne	.L428
2679:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 5637              		.loc 1 2679 0 is_stmt 0 discriminator 1
 5638 0038 236B     		ldr	r3, [r4, #48]
 5639 003a 012B     		cmp	r3, #1
 5640 003c 14D1     		bne	.L428
2681:HALLIB/Src/stm32f7xx_hal_spi.c ****                                           tickstart) != HAL_OK)
 5641              		.loc 1 2681 0 is_stmt 1
 5642 003e 0090     		str	r0, [sp]
 5643 0040 6423     		movs	r3, #100
 5644 0042 4FF40072 		mov	r2, #512
 5645 0046 4FF4C061 		mov	r1, #1536
 5646 004a 2046     		mov	r0, r4
 5647              	.LVL402:
 5648 004c FFF7FEFF 		bl	SPI_WaitFifoStateUntilTimeout
 5649              	.LVL403:
 5650 0050 18B1     		cbz	r0, .L429
2685:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 5651              		.loc 1 2685 0
 5652 0052 236E     		ldr	r3, [r4, #96]
 5653 0054 43F00203 		orr	r3, r3, #2
 5654 0058 2366     		str	r3, [r4, #96]
 5655              	.L429:
2688:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
 5656              		.loc 1 2688 0
 5657 005a 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccXuIaHP.s 			page 180


 5658 005c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 5659 005e ADF80E30 		strh	r3, [sp, #14]	@ movhi
2690:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 5660              		.loc 1 2690 0
 5661 0062 BDF80E30 		ldrh	r3, [sp, #14]
 5662 0066 14E0     		b	.L427
 5663              	.LVL404:
 5664              	.L428:
2694:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 5665              		.loc 1 2694 0
 5666 0068 0096     		str	r6, [sp]
 5667 006a 6423     		movs	r3, #100
 5668 006c 4FF48062 		mov	r2, #1024
 5669 0070 4FF4C061 		mov	r1, #1536
 5670 0074 2046     		mov	r0, r4
 5671              	.LVL405:
 5672 0076 FFF7FEFF 		bl	SPI_WaitFifoStateUntilTimeout
 5673              	.LVL406:
 5674 007a 18B1     		cbz	r0, .L430
2697:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 5675              		.loc 1 2697 0
 5676 007c 236E     		ldr	r3, [r4, #96]
 5677 007e 43F00203 		orr	r3, r3, #2
 5678 0082 2366     		str	r3, [r4, #96]
 5679              	.L430:
2700:HALLIB/Src/stm32f7xx_hal_spi.c ****         /* To avoid GCC warning */
 5680              		.loc 1 2700 0
 5681 0084 2368     		ldr	r3, [r4]
 5682 0086 DB68     		ldr	r3, [r3, #12]
 5683 0088 1BB2     		sxth	r3, r3
 5684 008a ADF80E30 		strh	r3, [sp, #14]	@ movhi
2702:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 5685              		.loc 1 2702 0
 5686 008e BDF80E30 		ldrh	r3, [sp, #14]
 5687              	.L427:
2708:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5688              		.loc 1 2708 0
 5689 0092 3246     		mov	r2, r6
 5690 0094 6421     		movs	r1, #100
 5691 0096 2046     		mov	r0, r4
 5692 0098 FFF7FEFF 		bl	SPI_EndRxTxTransaction
 5693              	.LVL407:
 5694 009c 18B1     		cbz	r0, .L431
2710:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5695              		.loc 1 2710 0
 5696 009e 236E     		ldr	r3, [r4, #96]
 5697 00a0 43F02003 		orr	r3, r3, #32
 5698 00a4 2366     		str	r3, [r4, #96]
 5699              	.L431:
2714:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5700              		.loc 1 2714 0
 5701 00a6 2268     		ldr	r2, [r4]
 5702 00a8 5368     		ldr	r3, [r2, #4]
 5703 00aa 23F00303 		bic	r3, r3, #3
 5704 00ae 5360     		str	r3, [r2, #4]
2716:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->RxXferCount = 0U;
 5705              		.loc 1 2716 0
ARM GAS  /tmp/ccXuIaHP.s 			page 181


 5706 00b0 0023     		movs	r3, #0
 5707 00b2 E387     		strh	r3, [r4, #62]	@ movhi
2717:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->State = HAL_SPI_STATE_READY;
 5708              		.loc 1 2717 0
 5709 00b4 A4F84630 		strh	r3, [r4, #70]	@ movhi
2718:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5710              		.loc 1 2718 0
 5711 00b8 0123     		movs	r3, #1
 5712 00ba 84F85D30 		strb	r3, [r4, #93]
2722:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5713              		.loc 1 2722 0
 5714 00be 2368     		ldr	r3, [r4]
 5715 00c0 9A68     		ldr	r2, [r3, #8]
 5716 00c2 12F0100F 		tst	r2, #16
 5717 00c6 06D0     		beq	.L432
2724:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 5718              		.loc 1 2724 0
 5719 00c8 226E     		ldr	r2, [r4, #96]
 5720 00ca 42F00202 		orr	r2, r2, #2
 5721 00ce 2266     		str	r2, [r4, #96]
2725:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5722              		.loc 1 2725 0
 5723 00d0 4FF6EF72 		movw	r2, #65519
 5724 00d4 9A60     		str	r2, [r3, #8]
 5725              	.L432:
2729:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5726              		.loc 1 2729 0
 5727 00d6 236E     		ldr	r3, [r4, #96]
 5728 00d8 1BB1     		cbz	r3, .L426
2731:HALLIB/Src/stm32f7xx_hal_spi.c ****       return;
 5729              		.loc 1 2731 0
 5730 00da 2046     		mov	r0, r4
 5731 00dc FFF7FEFF 		bl	HAL_SPI_ErrorCallback
 5732              	.LVL408:
2732:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5733              		.loc 1 2732 0
 5734 00e0 02E0     		b	.L425
 5735              	.LVL409:
 5736              	.L426:
2735:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 5737              		.loc 1 2735 0
 5738 00e2 2046     		mov	r0, r4
 5739 00e4 FFF7FEFF 		bl	HAL_SPI_TxRxCpltCallback
 5740              	.LVL410:
 5741              	.L425:
2736:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5742              		.loc 1 2736 0
 5743 00e8 04B0     		add	sp, sp, #16
 5744              	.LCFI77:
 5745              		.cfi_def_cfa_offset 16
 5746              		@ sp needed
 5747 00ea 70BD     		pop	{r4, r5, r6, pc}
 5748              		.cfi_endproc
 5749              	.LFE167:
 5751              		.section	.text.HAL_SPI_IRQHandler,"ax",%progbits
 5752              		.align	2
 5753              		.global	HAL_SPI_IRQHandler
ARM GAS  /tmp/ccXuIaHP.s 			page 182


 5754              		.thumb
 5755              		.thumb_func
 5757              	HAL_SPI_IRQHandler:
 5758              	.LFB154:
2240:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t itsource = hspi->Instance->CR2;
 5759              		.loc 1 2240 0
 5760              		.cfi_startproc
 5761              		@ args = 0, pretend = 0, frame = 16
 5762              		@ frame_needed = 0, uses_anonymous_args = 0
 5763              	.LVL411:
 5764 0000 10B5     		push	{r4, lr}
 5765              	.LCFI78:
 5766              		.cfi_def_cfa_offset 8
 5767              		.cfi_offset 4, -8
 5768              		.cfi_offset 14, -4
 5769 0002 84B0     		sub	sp, sp, #16
 5770              	.LCFI79:
 5771              		.cfi_def_cfa_offset 24
 5772 0004 0446     		mov	r4, r0
2241:HALLIB/Src/stm32f7xx_hal_spi.c ****   uint32_t itflag   = hspi->Instance->SR;
 5773              		.loc 1 2241 0
 5774 0006 0268     		ldr	r2, [r0]
 5775 0008 5168     		ldr	r1, [r2, #4]
 5776              	.LVL412:
2242:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5777              		.loc 1 2242 0
 5778 000a 9368     		ldr	r3, [r2, #8]
 5779              	.LVL413:
2245:HALLIB/Src/stm32f7xx_hal_spi.c ****       ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 5780              		.loc 1 2245 0
 5781 000c 03F04100 		and	r0, r3, #65
 5782              	.LVL414:
 5783 0010 0128     		cmp	r0, #1
 5784 0012 06D1     		bne	.L436
2246:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5785              		.loc 1 2246 0
 5786 0014 11F0400F 		tst	r1, #64
 5787 0018 03D0     		beq	.L436
2248:HALLIB/Src/stm32f7xx_hal_spi.c ****     return;
 5788              		.loc 1 2248 0
 5789 001a E36C     		ldr	r3, [r4, #76]
 5790              	.LVL415:
 5791 001c 2046     		mov	r0, r4
 5792 001e 9847     		blx	r3
 5793              	.LVL416:
2249:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 5794              		.loc 1 2249 0
 5795 0020 6CE0     		b	.L435
 5796              	.LVL417:
 5797              	.L436:
2253:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5798              		.loc 1 2253 0
 5799 0022 13F0020F 		tst	r3, #2
 5800 0026 06D0     		beq	.L438
2253:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5801              		.loc 1 2253 0 is_stmt 0 discriminator 1
 5802 0028 11F0800F 		tst	r1, #128
ARM GAS  /tmp/ccXuIaHP.s 			page 183


 5803 002c 03D0     		beq	.L438
2255:HALLIB/Src/stm32f7xx_hal_spi.c ****     return;
 5804              		.loc 1 2255 0 is_stmt 1
 5805 002e 236D     		ldr	r3, [r4, #80]
 5806              	.LVL418:
 5807 0030 2046     		mov	r0, r4
 5808 0032 9847     		blx	r3
 5809              	.LVL419:
2256:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 5810              		.loc 1 2256 0
 5811 0034 62E0     		b	.L435
 5812              	.LVL420:
 5813              	.L438:
2260:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5814              		.loc 1 2260 0
 5815 0036 13F4B07F 		tst	r3, #352
 5816 003a 5FD0     		beq	.L435
2260:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 5817              		.loc 1 2260 0 is_stmt 0 discriminator 1
 5818 003c 11F0200F 		tst	r1, #32
 5819 0040 5CD0     		beq	.L435
2263:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5820              		.loc 1 2263 0 is_stmt 1
 5821 0042 13F0400F 		tst	r3, #64
 5822 0046 18D0     		beq	.L439
2265:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 5823              		.loc 1 2265 0
 5824 0048 94F85D00 		ldrb	r0, [r4, #93]	@ zero_extendqisi2
 5825 004c C0B2     		uxtb	r0, r0
 5826 004e 0328     		cmp	r0, #3
 5827 0050 0BD0     		beq	.L440
2267:HALLIB/Src/stm32f7xx_hal_spi.c ****         __HAL_SPI_CLEAR_OVRFLAG(hspi);
 5828              		.loc 1 2267 0
 5829 0052 206E     		ldr	r0, [r4, #96]
 5830 0054 40F00400 		orr	r0, r0, #4
 5831 0058 2066     		str	r0, [r4, #96]
 5832              	.LBB7:
2268:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 5833              		.loc 1 2268 0
 5834 005a 0020     		movs	r0, #0
 5835 005c 0090     		str	r0, [sp]
 5836 005e D068     		ldr	r0, [r2, #12]
 5837 0060 0090     		str	r0, [sp]
 5838 0062 9068     		ldr	r0, [r2, #8]
 5839 0064 0090     		str	r0, [sp]
 5840 0066 0098     		ldr	r0, [sp]
 5841              	.LBE7:
 5842 0068 07E0     		b	.L439
 5843              	.L440:
 5844              	.LBB8:
2272:HALLIB/Src/stm32f7xx_hal_spi.c ****         return;
 5845              		.loc 1 2272 0
 5846 006a 0023     		movs	r3, #0
 5847              	.LVL421:
 5848 006c 0193     		str	r3, [sp, #4]
 5849 006e D368     		ldr	r3, [r2, #12]
 5850 0070 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccXuIaHP.s 			page 184


 5851 0072 9368     		ldr	r3, [r2, #8]
 5852 0074 0193     		str	r3, [sp, #4]
 5853 0076 019B     		ldr	r3, [sp, #4]
 5854              	.LBE8:
2273:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 5855              		.loc 1 2273 0
 5856 0078 40E0     		b	.L435
 5857              	.LVL422:
 5858              	.L439:
2278:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5859              		.loc 1 2278 0
 5860 007a 13F0200F 		tst	r3, #32
 5861 007e 0CD0     		beq	.L441
2280:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_CLEAR_MODFFLAG(hspi);
 5862              		.loc 1 2280 0
 5863 0080 206E     		ldr	r0, [r4, #96]
 5864 0082 40F00100 		orr	r0, r0, #1
 5865 0086 2066     		str	r0, [r4, #96]
 5866              	.LBB9:
2281:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5867              		.loc 1 2281 0
 5868 0088 0020     		movs	r0, #0
 5869 008a 0290     		str	r0, [sp, #8]
 5870 008c 9068     		ldr	r0, [r2, #8]
 5871 008e 0290     		str	r0, [sp, #8]
 5872 0090 1068     		ldr	r0, [r2]
 5873 0092 20F04000 		bic	r0, r0, #64
 5874 0096 1060     		str	r0, [r2]
 5875 0098 029A     		ldr	r2, [sp, #8]
 5876              	.L441:
 5877              	.LBE9:
2285:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5878              		.loc 1 2285 0
 5879 009a 13F4807F 		tst	r3, #256
 5880 009e 09D0     		beq	.L442
2287:HALLIB/Src/stm32f7xx_hal_spi.c ****       __HAL_SPI_CLEAR_FREFLAG(hspi);
 5881              		.loc 1 2287 0
 5882 00a0 236E     		ldr	r3, [r4, #96]
 5883              	.LVL423:
 5884 00a2 43F00803 		orr	r3, r3, #8
 5885 00a6 2366     		str	r3, [r4, #96]
 5886              	.LBB10:
2288:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 5887              		.loc 1 2288 0
 5888 00a8 0023     		movs	r3, #0
 5889 00aa 0393     		str	r3, [sp, #12]
 5890 00ac 2368     		ldr	r3, [r4]
 5891 00ae 9B68     		ldr	r3, [r3, #8]
 5892 00b0 0393     		str	r3, [sp, #12]
 5893 00b2 039B     		ldr	r3, [sp, #12]
 5894              	.L442:
 5895              	.LBE10:
2291:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 5896              		.loc 1 2291 0
 5897 00b4 236E     		ldr	r3, [r4, #96]
 5898 00b6 0BB3     		cbz	r3, .L435
2294:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 185


 5899              		.loc 1 2294 0
 5900 00b8 2268     		ldr	r2, [r4]
 5901 00ba 5368     		ldr	r3, [r2, #4]
 5902 00bc 23F0E003 		bic	r3, r3, #224
 5903 00c0 5360     		str	r3, [r2, #4]
2296:HALLIB/Src/stm32f7xx_hal_spi.c ****       /* Disable the SPI DMA requests if enabled */
 5904              		.loc 1 2296 0
 5905 00c2 0123     		movs	r3, #1
 5906 00c4 84F85D30 		strb	r3, [r4, #93]
2298:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 5907              		.loc 1 2298 0
 5908 00c8 11F0030F 		tst	r1, #3
 5909 00cc 13D0     		beq	.L443
2300:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5910              		.loc 1 2300 0
 5911 00ce 2268     		ldr	r2, [r4]
 5912 00d0 5368     		ldr	r3, [r2, #4]
 5913 00d2 23F00303 		bic	r3, r3, #3
 5914 00d6 5360     		str	r3, [r2, #4]
2303:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 5915              		.loc 1 2303 0
 5916 00d8 A36D     		ldr	r3, [r4, #88]
 5917 00da 23B1     		cbz	r3, .L444
2307:HALLIB/Src/stm32f7xx_hal_spi.c ****           HAL_DMA_Abort_IT(hspi->hdmarx);
 5918              		.loc 1 2307 0
 5919 00dc 084A     		ldr	r2, .L446
 5920 00de 1A65     		str	r2, [r3, #80]
2308:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 5921              		.loc 1 2308 0
 5922 00e0 A06D     		ldr	r0, [r4, #88]
 5923 00e2 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 5924              	.LVL424:
 5925              	.L444:
2311:HALLIB/Src/stm32f7xx_hal_spi.c ****         {
 5926              		.loc 1 2311 0
 5927 00e6 636D     		ldr	r3, [r4, #84]
 5928 00e8 43B1     		cbz	r3, .L435
2315:HALLIB/Src/stm32f7xx_hal_spi.c ****           HAL_DMA_Abort_IT(hspi->hdmatx);
 5929              		.loc 1 2315 0
 5930 00ea 054A     		ldr	r2, .L446
 5931 00ec 1A65     		str	r2, [r3, #80]
2316:HALLIB/Src/stm32f7xx_hal_spi.c ****         }
 5932              		.loc 1 2316 0
 5933 00ee 606D     		ldr	r0, [r4, #84]
 5934 00f0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 5935              	.LVL425:
 5936 00f4 02E0     		b	.L435
 5937              	.LVL426:
 5938              	.L443:
2322:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 5939              		.loc 1 2322 0
 5940 00f6 2046     		mov	r0, r4
 5941 00f8 FFF7FEFF 		bl	HAL_SPI_ErrorCallback
 5942              	.LVL427:
 5943              	.L435:
2327:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5944              		.loc 1 2327 0
ARM GAS  /tmp/ccXuIaHP.s 			page 186


 5945 00fc 04B0     		add	sp, sp, #16
 5946              	.LCFI80:
 5947              		.cfi_def_cfa_offset 8
 5948              		@ sp needed
 5949 00fe 10BD     		pop	{r4, pc}
 5950              	.LVL428:
 5951              	.L447:
 5952              		.align	2
 5953              	.L446:
 5954 0100 00000000 		.word	SPI_DMAAbortOnError
 5955              		.cfi_endproc
 5956              	.LFE154:
 5958              		.section	.text.SPI_DMAAbortOnError,"ax",%progbits
 5959              		.align	2
 5960              		.thumb
 5961              		.thumb_func
 5963              	SPI_DMAAbortOnError:
 5964              	.LFB172:
2802:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5965              		.loc 1 2802 0
 5966              		.cfi_startproc
 5967              		@ args = 0, pretend = 0, frame = 0
 5968              		@ frame_needed = 0, uses_anonymous_args = 0
 5969              	.LVL429:
 5970 0000 08B5     		push	{r3, lr}
 5971              	.LCFI81:
 5972              		.cfi_def_cfa_offset 8
 5973              		.cfi_offset 3, -8
 5974              		.cfi_offset 14, -4
2803:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->RxXferCount = 0U;
 5975              		.loc 1 2803 0
 5976 0002 806B     		ldr	r0, [r0, #56]
 5977              	.LVL430:
2804:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 5978              		.loc 1 2804 0
 5979 0004 0023     		movs	r3, #0
 5980 0006 A0F84630 		strh	r3, [r0, #70]	@ movhi
2805:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 5981              		.loc 1 2805 0
 5982 000a C387     		strh	r3, [r0, #62]	@ movhi
2807:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 5983              		.loc 1 2807 0
 5984 000c FFF7FEFF 		bl	HAL_SPI_ErrorCallback
 5985              	.LVL431:
 5986 0010 08BD     		pop	{r3, pc}
 5987              		.cfi_endproc
 5988              	.LFE172:
 5990 0012 00BF     		.section	.text.HAL_SPI_AbortCpltCallback,"ax",%progbits
 5991              		.align	2
 5992              		.weak	HAL_SPI_AbortCpltCallback
 5993              		.thumb
 5994              		.thumb_func
 5996              	HAL_SPI_AbortCpltCallback:
 5997              	.LFB162:
2450:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Prevent unused argument(s) compilation warning */
 5998              		.loc 1 2450 0
 5999              		.cfi_startproc
ARM GAS  /tmp/ccXuIaHP.s 			page 187


 6000              		@ args = 0, pretend = 0, frame = 0
 6001              		@ frame_needed = 0, uses_anonymous_args = 0
 6002              		@ link register save eliminated.
 6003              	.LVL432:
 6004 0000 7047     		bx	lr
 6005              		.cfi_endproc
 6006              	.LFE162:
 6008 0002 00BF     		.section	.text.HAL_SPI_Abort_IT,"ax",%progbits
 6009              		.align	2
 6010              		.global	HAL_SPI_Abort_IT
 6011              		.thumb
 6012              		.thumb_func
 6014              	HAL_SPI_Abort_IT:
 6015              	.LFB150:
1994:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
 6016              		.loc 1 1994 0
 6017              		.cfi_startproc
 6018              		@ args = 0, pretend = 0, frame = 8
 6019              		@ frame_needed = 0, uses_anonymous_args = 0
 6020              	.LVL433:
1994:HALLIB/Src/stm32f7xx_hal_spi.c ****   HAL_StatusTypeDef errorcode;
 6021              		.loc 1 1994 0
 6022 0000 30B5     		push	{r4, r5, lr}
 6023              	.LCFI82:
 6024              		.cfi_def_cfa_offset 12
 6025              		.cfi_offset 4, -12
 6026              		.cfi_offset 5, -8
 6027              		.cfi_offset 14, -4
 6028 0002 83B0     		sub	sp, sp, #12
 6029              	.LCFI83:
 6030              		.cfi_def_cfa_offset 24
 6031 0004 0446     		mov	r4, r0
 6032              	.LVL434:
2004:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6033              		.loc 1 2004 0
 6034 0006 FFF7FEFF 		bl	HAL_GetTick
 6035              	.LVL435:
 6036 000a 0546     		mov	r5, r0
 6037              	.LVL436:
2007:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6038              		.loc 1 2007 0
 6039 000c 2368     		ldr	r3, [r4]
 6040 000e 5A68     		ldr	r2, [r3, #4]
 6041 0010 12F0800F 		tst	r2, #128
 6042 0014 01D0     		beq	.L452
2009:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 6043              		.loc 1 2009 0
 6044 0016 514A     		ldr	r2, .L477
 6045 0018 2265     		str	r2, [r4, #80]
 6046              	.L452:
2012:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6047              		.loc 1 2012 0
 6048 001a 5B68     		ldr	r3, [r3, #4]
 6049 001c 13F0400F 		tst	r3, #64
 6050 0020 09D0     		beq	.L455
2014:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 6051              		.loc 1 2014 0
ARM GAS  /tmp/ccXuIaHP.s 			page 188


 6052 0022 4F4B     		ldr	r3, .L477+4
 6053 0024 E364     		str	r3, [r4, #76]
 6054 0026 06E0     		b	.L455
 6055              	.LVL437:
 6056              	.L456:
2019:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 6057              		.loc 1 2019 0
 6058 0028 FFF7FEFF 		bl	HAL_GetTick
 6059              	.LVL438:
 6060 002c 401B     		subs	r0, r0, r5
 6061 002e B0F1FF3F 		cmp	r0, #-1
 6062 0032 00F08E80 		beq	.L466
 6063              	.L455:
2017:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6064              		.loc 1 2017 0
 6065 0036 94F85D30 		ldrb	r3, [r4, #93]	@ zero_extendqisi2
 6066 003a DBB2     		uxtb	r3, r3
 6067 003c 072B     		cmp	r3, #7
 6068 003e F3D1     		bne	.L456
2026:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6069              		.loc 1 2026 0
 6070 0040 2268     		ldr	r2, [r4]
 6071 0042 5368     		ldr	r3, [r2, #4]
 6072 0044 23F02003 		bic	r3, r3, #32
 6073 0048 5360     		str	r3, [r2, #4]
2031:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6074              		.loc 1 2031 0
 6075 004a 636D     		ldr	r3, [r4, #84]
 6076 004c 4BB1     		cbz	r3, .L457
2035:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 6077              		.loc 1 2035 0
 6078 004e 2268     		ldr	r2, [r4]
 6079 0050 5268     		ldr	r2, [r2, #4]
 6080 0052 12F0020F 		tst	r2, #2
 6081 0056 02D0     		beq	.L458
2037:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 6082              		.loc 1 2037 0
 6083 0058 424A     		ldr	r2, .L477+8
 6084 005a 1A65     		str	r2, [r3, #80]
 6085 005c 01E0     		b	.L457
 6086              	.L458:
2041:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 6087              		.loc 1 2041 0
 6088 005e 0022     		movs	r2, #0
 6089 0060 1A65     		str	r2, [r3, #80]
 6090              	.L457:
2045:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6091              		.loc 1 2045 0
 6092 0062 A36D     		ldr	r3, [r4, #88]
 6093 0064 4BB1     		cbz	r3, .L459
2049:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 6094              		.loc 1 2049 0
 6095 0066 2268     		ldr	r2, [r4]
 6096 0068 5268     		ldr	r2, [r2, #4]
 6097 006a 12F0010F 		tst	r2, #1
 6098 006e 02D0     		beq	.L460
2051:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
ARM GAS  /tmp/ccXuIaHP.s 			page 189


 6099              		.loc 1 2051 0
 6100 0070 3D4A     		ldr	r2, .L477+12
 6101 0072 1A65     		str	r2, [r3, #80]
 6102 0074 01E0     		b	.L459
 6103              	.L460:
2055:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 6104              		.loc 1 2055 0
 6105 0076 0022     		movs	r2, #0
 6106 0078 1A65     		str	r2, [r3, #80]
 6107              	.L459:
2060:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6108              		.loc 1 2060 0
 6109 007a 2368     		ldr	r3, [r4]
 6110 007c 5A68     		ldr	r2, [r3, #4]
 6111 007e 12F0020F 		tst	r2, #2
 6112 0082 1ED0     		beq	.L467
2060:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6113              		.loc 1 2060 0 is_stmt 0 discriminator 1
 6114 0084 5B68     		ldr	r3, [r3, #4]
 6115 0086 13F0010F 		tst	r3, #1
 6116 008a 1CD0     		beq	.L468
2063:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 6117              		.loc 1 2063 0 is_stmt 1
 6118 008c 606D     		ldr	r0, [r4, #84]
 6119 008e 48B1     		cbz	r0, .L469
2066:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 6120              		.loc 1 2066 0
 6121 0090 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 6122              	.LVL439:
 6123 0094 40B1     		cbz	r0, .L470
2068:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 6124              		.loc 1 2068 0
 6125 0096 636D     		ldr	r3, [r4, #84]
 6126 0098 0022     		movs	r2, #0
 6127 009a 1A65     		str	r2, [r3, #80]
2069:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 6128              		.loc 1 2069 0
 6129 009c 4023     		movs	r3, #64
 6130 009e 2366     		str	r3, [r4, #96]
2001:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6131              		.loc 1 2001 0
 6132 00a0 0125     		movs	r5, #1
 6133              	.LVL440:
 6134 00a2 02E0     		b	.L462
 6135              	.LVL441:
 6136              	.L469:
 6137 00a4 0125     		movs	r5, #1
 6138              	.LVL442:
 6139 00a6 00E0     		b	.L462
 6140              	.LVL443:
 6141              	.L470:
2073:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 6142              		.loc 1 2073 0
 6143 00a8 0025     		movs	r5, #0
 6144              	.LVL444:
 6145              	.L462:
2077:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
ARM GAS  /tmp/ccXuIaHP.s 			page 190


 6146              		.loc 1 2077 0
 6147 00aa A06D     		ldr	r0, [r4, #88]
 6148 00ac 70B1     		cbz	r0, .L461
2080:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 6149              		.loc 1 2080 0
 6150 00ae FFF7FEFF 		bl	HAL_DMA_Abort_IT
 6151              	.LVL445:
 6152 00b2 50B1     		cbz	r0, .L471
2082:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 6153              		.loc 1 2082 0
 6154 00b4 A36D     		ldr	r3, [r4, #88]
 6155 00b6 0022     		movs	r2, #0
 6156 00b8 1A65     		str	r2, [r3, #80]
2083:HALLIB/Src/stm32f7xx_hal_spi.c ****         abortcplt = 1U;
 6157              		.loc 1 2083 0
 6158 00ba 4023     		movs	r3, #64
 6159 00bc 2366     		str	r3, [r4, #96]
 6160              	.LVL446:
2084:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 6161              		.loc 1 2084 0
 6162 00be 0125     		movs	r5, #1
 6163 00c0 04E0     		b	.L461
 6164              	.LVL447:
 6165              	.L467:
2001:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6166              		.loc 1 2001 0
 6167 00c2 0125     		movs	r5, #1
 6168              	.LVL448:
 6169 00c4 02E0     		b	.L461
 6170              	.LVL449:
 6171              	.L468:
 6172 00c6 0125     		movs	r5, #1
 6173              	.LVL450:
 6174 00c8 00E0     		b	.L461
 6175              	.LVL451:
 6176              	.L471:
2088:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 6177              		.loc 1 2088 0
 6178 00ca 0025     		movs	r5, #0
 6179              	.LVL452:
 6180              	.L461:
2094:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6181              		.loc 1 2094 0
 6182 00cc 2368     		ldr	r3, [r4]
 6183 00ce 5B68     		ldr	r3, [r3, #4]
 6184 00d0 13F0020F 		tst	r3, #2
 6185 00d4 0BD0     		beq	.L463
2097:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 6186              		.loc 1 2097 0
 6187 00d6 606D     		ldr	r0, [r4, #84]
 6188 00d8 48B1     		cbz	r0, .L463
2100:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 6189              		.loc 1 2100 0
 6190 00da FFF7FEFF 		bl	HAL_DMA_Abort_IT
 6191              	.LVL453:
 6192 00de 28B1     		cbz	r0, .L472
2102:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
ARM GAS  /tmp/ccXuIaHP.s 			page 191


 6193              		.loc 1 2102 0
 6194 00e0 636D     		ldr	r3, [r4, #84]
 6195 00e2 0022     		movs	r2, #0
 6196 00e4 1A65     		str	r2, [r3, #80]
2103:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 6197              		.loc 1 2103 0
 6198 00e6 4023     		movs	r3, #64
 6199 00e8 2366     		str	r3, [r4, #96]
 6200 00ea 00E0     		b	.L463
 6201              	.L472:
2107:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 6202              		.loc 1 2107 0
 6203 00ec 0025     		movs	r5, #0
 6204              	.LVL454:
 6205              	.L463:
2112:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6206              		.loc 1 2112 0
 6207 00ee 2368     		ldr	r3, [r4]
 6208 00f0 5B68     		ldr	r3, [r3, #4]
 6209 00f2 13F0010F 		tst	r3, #1
 6210 00f6 0BD0     		beq	.L464
2115:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 6211              		.loc 1 2115 0
 6212 00f8 A06D     		ldr	r0, [r4, #88]
 6213 00fa 48B1     		cbz	r0, .L464
2118:HALLIB/Src/stm32f7xx_hal_spi.c ****       {
 6214              		.loc 1 2118 0
 6215 00fc FFF7FEFF 		bl	HAL_DMA_Abort_IT
 6216              	.LVL455:
 6217 0100 28B1     		cbz	r0, .L473
2120:HALLIB/Src/stm32f7xx_hal_spi.c ****         hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 6218              		.loc 1 2120 0
 6219 0102 A36D     		ldr	r3, [r4, #88]
 6220 0104 0022     		movs	r2, #0
 6221 0106 1A65     		str	r2, [r3, #80]
2121:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 6222              		.loc 1 2121 0
 6223 0108 4023     		movs	r3, #64
 6224 010a 2366     		str	r3, [r4, #96]
 6225 010c 00E0     		b	.L464
 6226              	.L473:
2125:HALLIB/Src/stm32f7xx_hal_spi.c ****       }
 6227              		.loc 1 2125 0
 6228 010e 0025     		movs	r5, #0
 6229              	.LVL456:
 6230              	.L464:
2130:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6231              		.loc 1 2130 0
 6232 0110 0DB3     		cbz	r5, .L474
2133:HALLIB/Src/stm32f7xx_hal_spi.c ****     hspi->TxXferCount = 0U;
 6233              		.loc 1 2133 0
 6234 0112 0023     		movs	r3, #0
 6235 0114 A4F84630 		strh	r3, [r4, #70]	@ movhi
2134:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6236              		.loc 1 2134 0
 6237 0118 E387     		strh	r3, [r4, #62]	@ movhi
2137:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
ARM GAS  /tmp/ccXuIaHP.s 			page 192


 6238              		.loc 1 2137 0
 6239 011a 236E     		ldr	r3, [r4, #96]
 6240 011c 402B     		cmp	r3, #64
 6241 011e 03D0     		beq	.L475
2145:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 6242              		.loc 1 2145 0
 6243 0120 0020     		movs	r0, #0
 6244 0122 2066     		str	r0, [r4, #96]
2000:HALLIB/Src/stm32f7xx_hal_spi.c ****   abortcplt = 1U;
 6245              		.loc 1 2000 0
 6246 0124 0546     		mov	r5, r0
 6247              	.LVL457:
 6248 0126 00E0     		b	.L465
 6249              	.LVL458:
 6250              	.L475:
2140:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 6251              		.loc 1 2140 0
 6252 0128 0125     		movs	r5, #1
 6253              	.LVL459:
 6254              	.L465:
 6255              	.LBB11:
2149:HALLIB/Src/stm32f7xx_hal_spi.c ****     __HAL_SPI_CLEAR_FREFLAG(hspi);
 6256              		.loc 1 2149 0
 6257 012a 0022     		movs	r2, #0
 6258 012c 0092     		str	r2, [sp]
 6259 012e 2368     		ldr	r3, [r4]
 6260 0130 D968     		ldr	r1, [r3, #12]
 6261 0132 0091     		str	r1, [sp]
 6262 0134 9968     		ldr	r1, [r3, #8]
 6263 0136 0091     		str	r1, [sp]
 6264 0138 0099     		ldr	r1, [sp]
 6265              	.LBE11:
 6266              	.LBB12:
2150:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6267              		.loc 1 2150 0
 6268 013a 0192     		str	r2, [sp, #4]
 6269 013c 9B68     		ldr	r3, [r3, #8]
 6270 013e 0193     		str	r3, [sp, #4]
 6271 0140 019B     		ldr	r3, [sp, #4]
 6272              	.LBE12:
2153:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6273              		.loc 1 2153 0
 6274 0142 0123     		movs	r3, #1
 6275 0144 84F85D30 		strb	r3, [r4, #93]
2156:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 6276              		.loc 1 2156 0
 6277 0148 2046     		mov	r0, r4
 6278 014a FFF7FEFF 		bl	HAL_SPI_AbortCpltCallback
 6279              	.LVL460:
 6280 014e 2846     		mov	r0, r5
 6281 0150 02E0     		b	.L454
 6282              	.LVL461:
 6283              	.L466:
2021:HALLIB/Src/stm32f7xx_hal_spi.c ****     }
 6284              		.loc 1 2021 0
 6285 0152 0320     		movs	r0, #3
 6286 0154 00E0     		b	.L454
ARM GAS  /tmp/ccXuIaHP.s 			page 193


 6287              	.LVL462:
 6288              	.L474:
2000:HALLIB/Src/stm32f7xx_hal_spi.c ****   abortcplt = 1U;
 6289              		.loc 1 2000 0
 6290 0156 0020     		movs	r0, #0
 6291              	.LVL463:
 6292              	.L454:
2160:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6293              		.loc 1 2160 0
 6294 0158 03B0     		add	sp, sp, #12
 6295              	.LCFI84:
 6296              		.cfi_def_cfa_offset 12
 6297              		@ sp needed
 6298 015a 30BD     		pop	{r4, r5, pc}
 6299              	.LVL464:
 6300              	.L478:
 6301              		.align	2
 6302              	.L477:
 6303 015c 00000000 		.word	SPI_AbortTx_ISR
 6304 0160 00000000 		.word	SPI_AbortRx_ISR
 6305 0164 00000000 		.word	SPI_DMATxAbortCallback
 6306 0168 00000000 		.word	SPI_DMARxAbortCallback
 6307              		.cfi_endproc
 6308              	.LFE150:
 6310              		.section	.text.SPI_DMARxAbortCallback,"ax",%progbits
 6311              		.align	2
 6312              		.thumb
 6313              		.thumb_func
 6315              	SPI_DMARxAbortCallback:
 6316              	.LFB174:
2881:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6317              		.loc 1 2881 0
 6318              		.cfi_startproc
 6319              		@ args = 0, pretend = 0, frame = 8
 6320              		@ frame_needed = 0, uses_anonymous_args = 0
 6321              	.LVL465:
 6322 0000 30B5     		push	{r4, r5, lr}
 6323              	.LCFI85:
 6324              		.cfi_def_cfa_offset 12
 6325              		.cfi_offset 4, -12
 6326              		.cfi_offset 5, -8
 6327              		.cfi_offset 14, -4
 6328 0002 85B0     		sub	sp, sp, #20
 6329              	.LCFI86:
 6330              		.cfi_def_cfa_offset 32
2882:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6331              		.loc 1 2882 0
 6332 0004 846B     		ldr	r4, [r0, #56]
 6333              	.LVL466:
2885:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6334              		.loc 1 2885 0
 6335 0006 2268     		ldr	r2, [r4]
 6336 0008 1368     		ldr	r3, [r2]
 6337 000a 23F04003 		bic	r3, r3, #64
 6338 000e 1360     		str	r3, [r2]
2887:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6339              		.loc 1 2887 0
ARM GAS  /tmp/ccXuIaHP.s 			page 194


 6340 0010 A36D     		ldr	r3, [r4, #88]
 6341 0012 0025     		movs	r5, #0
 6342 0014 1D65     		str	r5, [r3, #80]
2890:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6343              		.loc 1 2890 0
 6344 0016 2268     		ldr	r2, [r4]
 6345 0018 5368     		ldr	r3, [r2, #4]
 6346 001a 23F00103 		bic	r3, r3, #1
 6347 001e 5360     		str	r3, [r2, #4]
2893:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6348              		.loc 1 2893 0
 6349 0020 FFF7FEFF 		bl	HAL_GetTick
 6350              	.LVL467:
 6351 0024 0090     		str	r0, [sp]
 6352 0026 6423     		movs	r3, #100
 6353 0028 2A46     		mov	r2, r5
 6354 002a 8021     		movs	r1, #128
 6355 002c 2046     		mov	r0, r4
 6356 002e FFF7FEFF 		bl	SPI_WaitFlagStateUntilTimeout
 6357              	.LVL468:
 6358 0032 08B1     		cbz	r0, .L480
2895:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 6359              		.loc 1 2895 0
 6360 0034 4023     		movs	r3, #64
 6361 0036 2366     		str	r3, [r4, #96]
 6362              	.L480:
2899:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6363              		.loc 1 2899 0
 6364 0038 FFF7FEFF 		bl	HAL_GetTick
 6365              	.LVL469:
 6366 003c 0090     		str	r0, [sp]
 6367 003e 6423     		movs	r3, #100
 6368 0040 0022     		movs	r2, #0
 6369 0042 4FF4C061 		mov	r1, #1536
 6370 0046 2046     		mov	r0, r4
 6371 0048 FFF7FEFF 		bl	SPI_WaitFifoStateUntilTimeout
 6372              	.LVL470:
 6373 004c 08B1     		cbz	r0, .L481
2901:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 6374              		.loc 1 2901 0
 6375 004e 4023     		movs	r3, #64
 6376 0050 2366     		str	r3, [r4, #96]
 6377              	.L481:
2905:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6378              		.loc 1 2905 0
 6379 0052 636D     		ldr	r3, [r4, #84]
 6380 0054 0BB1     		cbz	r3, .L482
2907:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 6381              		.loc 1 2907 0
 6382 0056 1B6D     		ldr	r3, [r3, #80]
 6383 0058 D3B9     		cbnz	r3, .L479
 6384              	.L482:
2914:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 6385              		.loc 1 2914 0
 6386 005a 0023     		movs	r3, #0
 6387 005c A4F84630 		strh	r3, [r4, #70]	@ movhi
2915:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 195


 6388              		.loc 1 2915 0
 6389 0060 E387     		strh	r3, [r4, #62]	@ movhi
2918:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6390              		.loc 1 2918 0
 6391 0062 236E     		ldr	r3, [r4, #96]
 6392 0064 402B     		cmp	r3, #64
 6393 0066 01D0     		beq	.L484
2921:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 6394              		.loc 1 2921 0
 6395 0068 0023     		movs	r3, #0
 6396 006a 2366     		str	r3, [r4, #96]
 6397              	.L484:
 6398              	.LBB13:
2925:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_CLEAR_FREFLAG(hspi);
 6399              		.loc 1 2925 0
 6400 006c 0022     		movs	r2, #0
 6401 006e 0292     		str	r2, [sp, #8]
 6402 0070 2368     		ldr	r3, [r4]
 6403 0072 D968     		ldr	r1, [r3, #12]
 6404 0074 0291     		str	r1, [sp, #8]
 6405 0076 9968     		ldr	r1, [r3, #8]
 6406 0078 0291     		str	r1, [sp, #8]
 6407 007a 0299     		ldr	r1, [sp, #8]
 6408              	.LBE13:
 6409              	.LBB14:
2926:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6410              		.loc 1 2926 0
 6411 007c 0392     		str	r2, [sp, #12]
 6412 007e 9B68     		ldr	r3, [r3, #8]
 6413 0080 0393     		str	r3, [sp, #12]
 6414 0082 039B     		ldr	r3, [sp, #12]
 6415              	.LBE14:
2929:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6416              		.loc 1 2929 0
 6417 0084 0123     		movs	r3, #1
 6418 0086 84F85D30 		strb	r3, [r4, #93]
2932:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 6419              		.loc 1 2932 0
 6420 008a 2046     		mov	r0, r4
 6421 008c FFF7FEFF 		bl	HAL_SPI_AbortCpltCallback
 6422              	.LVL471:
 6423              	.L479:
2933:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6424              		.loc 1 2933 0
 6425 0090 05B0     		add	sp, sp, #20
 6426              	.LCFI87:
 6427              		.cfi_def_cfa_offset 12
 6428              		@ sp needed
 6429 0092 30BD     		pop	{r4, r5, pc}
 6430              		.cfi_endproc
 6431              	.LFE174:
 6433              		.section	.text.SPI_DMATxAbortCallback,"ax",%progbits
 6434              		.align	2
 6435              		.thumb
 6436              		.thumb_func
 6438              	SPI_DMATxAbortCallback:
 6439              	.LFB173:
ARM GAS  /tmp/ccXuIaHP.s 			page 196


2819:HALLIB/Src/stm32f7xx_hal_spi.c ****   SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6440              		.loc 1 2819 0
 6441              		.cfi_startproc
 6442              		@ args = 0, pretend = 0, frame = 8
 6443              		@ frame_needed = 0, uses_anonymous_args = 0
 6444              	.LVL472:
 6445 0000 10B5     		push	{r4, lr}
 6446              	.LCFI88:
 6447              		.cfi_def_cfa_offset 8
 6448              		.cfi_offset 4, -8
 6449              		.cfi_offset 14, -4
 6450 0002 84B0     		sub	sp, sp, #16
 6451              	.LCFI89:
 6452              		.cfi_def_cfa_offset 24
2820:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6453              		.loc 1 2820 0
 6454 0004 846B     		ldr	r4, [r0, #56]
 6455              	.LVL473:
2822:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6456              		.loc 1 2822 0
 6457 0006 636D     		ldr	r3, [r4, #84]
 6458 0008 0022     		movs	r2, #0
 6459 000a 1A65     		str	r2, [r3, #80]
2825:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6460              		.loc 1 2825 0
 6461 000c 2268     		ldr	r2, [r4]
 6462 000e 5368     		ldr	r3, [r2, #4]
 6463 0010 23F00203 		bic	r3, r3, #2
 6464 0014 5360     		str	r3, [r2, #4]
2827:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6465              		.loc 1 2827 0
 6466 0016 FFF7FEFF 		bl	HAL_GetTick
 6467              	.LVL474:
 6468 001a 0246     		mov	r2, r0
 6469 001c 6421     		movs	r1, #100
 6470 001e 2046     		mov	r0, r4
 6471 0020 FFF7FEFF 		bl	SPI_EndRxTxTransaction
 6472              	.LVL475:
 6473 0024 08B1     		cbz	r0, .L487
2829:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 6474              		.loc 1 2829 0
 6475 0026 4023     		movs	r3, #64
 6476 0028 2366     		str	r3, [r4, #96]
 6477              	.L487:
2833:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6478              		.loc 1 2833 0
 6479 002a 2268     		ldr	r2, [r4]
 6480 002c 1368     		ldr	r3, [r2]
 6481 002e 23F04003 		bic	r3, r3, #64
 6482 0032 1360     		str	r3, [r2]
2836:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6483              		.loc 1 2836 0
 6484 0034 FFF7FEFF 		bl	HAL_GetTick
 6485              	.LVL476:
 6486 0038 0090     		str	r0, [sp]
 6487 003a 6423     		movs	r3, #100
 6488 003c 0022     		movs	r2, #0
ARM GAS  /tmp/ccXuIaHP.s 			page 197


 6489 003e 4FF4C061 		mov	r1, #1536
 6490 0042 2046     		mov	r0, r4
 6491 0044 FFF7FEFF 		bl	SPI_WaitFifoStateUntilTimeout
 6492              	.LVL477:
 6493 0048 08B1     		cbz	r0, .L488
2838:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 6494              		.loc 1 2838 0
 6495 004a 4023     		movs	r3, #64
 6496 004c 2366     		str	r3, [r4, #96]
 6497              	.L488:
2842:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6498              		.loc 1 2842 0
 6499 004e A36D     		ldr	r3, [r4, #88]
 6500 0050 0BB1     		cbz	r3, .L489
2844:HALLIB/Src/stm32f7xx_hal_spi.c ****     {
 6501              		.loc 1 2844 0
 6502 0052 1B6D     		ldr	r3, [r3, #80]
 6503 0054 D3B9     		cbnz	r3, .L486
 6504              	.L489:
2851:HALLIB/Src/stm32f7xx_hal_spi.c ****   hspi->TxXferCount = 0U;
 6505              		.loc 1 2851 0
 6506 0056 0023     		movs	r3, #0
 6507 0058 A4F84630 		strh	r3, [r4, #70]	@ movhi
2852:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6508              		.loc 1 2852 0
 6509 005c E387     		strh	r3, [r4, #62]	@ movhi
2855:HALLIB/Src/stm32f7xx_hal_spi.c ****   {
 6510              		.loc 1 2855 0
 6511 005e 236E     		ldr	r3, [r4, #96]
 6512 0060 402B     		cmp	r3, #64
 6513 0062 01D0     		beq	.L491
2858:HALLIB/Src/stm32f7xx_hal_spi.c ****   }
 6514              		.loc 1 2858 0
 6515 0064 0023     		movs	r3, #0
 6516 0066 2366     		str	r3, [r4, #96]
 6517              	.L491:
 6518              	.LBB15:
2862:HALLIB/Src/stm32f7xx_hal_spi.c ****   __HAL_SPI_CLEAR_FREFLAG(hspi);
 6519              		.loc 1 2862 0
 6520 0068 0022     		movs	r2, #0
 6521 006a 0292     		str	r2, [sp, #8]
 6522 006c 2368     		ldr	r3, [r4]
 6523 006e D968     		ldr	r1, [r3, #12]
 6524 0070 0291     		str	r1, [sp, #8]
 6525 0072 9968     		ldr	r1, [r3, #8]
 6526 0074 0291     		str	r1, [sp, #8]
 6527 0076 0299     		ldr	r1, [sp, #8]
 6528              	.LBE15:
 6529              	.LBB16:
2863:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6530              		.loc 1 2863 0
 6531 0078 0392     		str	r2, [sp, #12]
 6532 007a 9B68     		ldr	r3, [r3, #8]
 6533 007c 0393     		str	r3, [sp, #12]
 6534 007e 039B     		ldr	r3, [sp, #12]
 6535              	.LBE16:
2866:HALLIB/Src/stm32f7xx_hal_spi.c **** 
ARM GAS  /tmp/ccXuIaHP.s 			page 198


 6536              		.loc 1 2866 0
 6537 0080 0123     		movs	r3, #1
 6538 0082 84F85D30 		strb	r3, [r4, #93]
2869:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 6539              		.loc 1 2869 0
 6540 0086 2046     		mov	r0, r4
 6541 0088 FFF7FEFF 		bl	HAL_SPI_AbortCpltCallback
 6542              	.LVL478:
 6543              	.L486:
2870:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6544              		.loc 1 2870 0
 6545 008c 04B0     		add	sp, sp, #16
 6546              	.LCFI90:
 6547              		.cfi_def_cfa_offset 8
 6548              		@ sp needed
 6549 008e 10BD     		pop	{r4, pc}
 6550              		.cfi_endproc
 6551              	.LFE173:
 6553              		.section	.text.HAL_SPI_GetState,"ax",%progbits
 6554              		.align	2
 6555              		.global	HAL_SPI_GetState
 6556              		.thumb
 6557              		.thumb_func
 6559              	HAL_SPI_GetState:
 6560              	.LFB163:
2485:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Return SPI handle state */
 6561              		.loc 1 2485 0
 6562              		.cfi_startproc
 6563              		@ args = 0, pretend = 0, frame = 0
 6564              		@ frame_needed = 0, uses_anonymous_args = 0
 6565              		@ link register save eliminated.
 6566              	.LVL479:
2487:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 6567              		.loc 1 2487 0
 6568 0000 90F85D00 		ldrb	r0, [r0, #93]	@ zero_extendqisi2
 6569              	.LVL480:
2488:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6570              		.loc 1 2488 0
 6571 0004 7047     		bx	lr
 6572              		.cfi_endproc
 6573              	.LFE163:
 6575 0006 00BF     		.section	.text.HAL_SPI_GetError,"ax",%progbits
 6576              		.align	2
 6577              		.global	HAL_SPI_GetError
 6578              		.thumb
 6579              		.thumb_func
 6581              	HAL_SPI_GetError:
 6582              	.LFB164:
2497:HALLIB/Src/stm32f7xx_hal_spi.c ****   /* Return SPI ErrorCode */
 6583              		.loc 1 2497 0
 6584              		.cfi_startproc
 6585              		@ args = 0, pretend = 0, frame = 0
 6586              		@ frame_needed = 0, uses_anonymous_args = 0
 6587              		@ link register save eliminated.
 6588              	.LVL481:
2499:HALLIB/Src/stm32f7xx_hal_spi.c **** }
 6589              		.loc 1 2499 0
ARM GAS  /tmp/ccXuIaHP.s 			page 199


 6590 0000 006E     		ldr	r0, [r0, #96]
 6591              	.LVL482:
2500:HALLIB/Src/stm32f7xx_hal_spi.c **** 
 6592              		.loc 1 2500 0
 6593 0002 7047     		bx	lr
 6594              		.cfi_endproc
 6595              	.LFE164:
 6597              		.text
 6598              	.Letext0:
 6599              		.file 2 "/opt/5.4.2016q3/arm-none-eabi/include/machine/_default_types.h"
 6600              		.file 3 "/opt/5.4.2016q3/arm-none-eabi/include/sys/_stdint.h"
 6601              		.file 4 "Inc/stm32f767xx.h"
 6602              		.file 5 "Inc/stm32f7xx.h"
 6603              		.file 6 "HALLIB/Inc/stm32f7xx_hal_def.h"
 6604              		.file 7 "HALLIB/Inc/stm32f7xx_hal_dma.h"
 6605              		.file 8 "HALLIB/Inc/stm32f7xx_hal_spi.h"
 6606              		.file 9 "HALLIB/Inc/stm32f7xx_hal.h"
 6607              		.file 10 "CORE/core_cm7.h"
ARM GAS  /tmp/ccXuIaHP.s 			page 200


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_hal_spi.c
     /tmp/ccXuIaHP.s:21     .text.SPI_WaitFlagStateUntilTimeout:00000000 $t
     /tmp/ccXuIaHP.s:25     .text.SPI_WaitFlagStateUntilTimeout:00000000 SPI_WaitFlagStateUntilTimeout
     /tmp/ccXuIaHP.s:125    .text.SPI_WaitFifoStateUntilTimeout:00000000 $t
     /tmp/ccXuIaHP.s:129    .text.SPI_WaitFifoStateUntilTimeout:00000000 SPI_WaitFifoStateUntilTimeout
     /tmp/ccXuIaHP.s:246    .text.SPI_EndRxTxTransaction:00000000 $t
     /tmp/ccXuIaHP.s:250    .text.SPI_EndRxTxTransaction:00000000 SPI_EndRxTxTransaction
     /tmp/ccXuIaHP.s:333    .text.SPI_EndRxTransaction:00000000 $t
     /tmp/ccXuIaHP.s:337    .text.SPI_EndRxTransaction:00000000 SPI_EndRxTransaction
     /tmp/ccXuIaHP.s:432    .text.SPI_AbortRx_ISR:00000000 $t
     /tmp/ccXuIaHP.s:436    .text.SPI_AbortRx_ISR:00000000 SPI_AbortRx_ISR
     /tmp/ccXuIaHP.s:531    .text.SPI_AbortTx_ISR:00000000 $t
     /tmp/ccXuIaHP.s:535    .text.SPI_AbortTx_ISR:00000000 SPI_AbortTx_ISR
     /tmp/ccXuIaHP.s:628    .text.HAL_SPI_MspInit:00000000 $t
     /tmp/ccXuIaHP.s:633    .text.HAL_SPI_MspInit:00000000 HAL_SPI_MspInit
     /tmp/ccXuIaHP.s:646    .text.HAL_SPI_Init:00000000 $t
     /tmp/ccXuIaHP.s:651    .text.HAL_SPI_Init:00000000 HAL_SPI_Init
     /tmp/ccXuIaHP.s:801    .text.HAL_SPI_MspDeInit:00000000 $t
     /tmp/ccXuIaHP.s:806    .text.HAL_SPI_MspDeInit:00000000 HAL_SPI_MspDeInit
     /tmp/ccXuIaHP.s:819    .text.HAL_SPI_DeInit:00000000 $t
     /tmp/ccXuIaHP.s:824    .text.HAL_SPI_DeInit:00000000 HAL_SPI_DeInit
     /tmp/ccXuIaHP.s:874    .text.HAL_SPI_Transmit:00000000 $t
     /tmp/ccXuIaHP.s:879    .text.HAL_SPI_Transmit:00000000 HAL_SPI_Transmit
     /tmp/ccXuIaHP.s:1182   .text.HAL_SPI_TransmitReceive:00000000 $t
     /tmp/ccXuIaHP.s:1187   .text.HAL_SPI_TransmitReceive:00000000 HAL_SPI_TransmitReceive
     /tmp/ccXuIaHP.s:1857   .text.HAL_SPI_Receive:00000000 $t
     /tmp/ccXuIaHP.s:1862   .text.HAL_SPI_Receive:00000000 HAL_SPI_Receive
     /tmp/ccXuIaHP.s:2289   .text.HAL_SPI_Transmit_IT:00000000 $t
     /tmp/ccXuIaHP.s:2294   .text.HAL_SPI_Transmit_IT:00000000 HAL_SPI_Transmit_IT
     /tmp/ccXuIaHP.s:2429   .text.HAL_SPI_Transmit_IT:000000b8 $d
     /tmp/ccXuIaHP.s:4385   .text.SPI_TxISR_16BIT:00000000 SPI_TxISR_16BIT
     /tmp/ccXuIaHP.s:4333   .text.SPI_TxISR_8BIT:00000000 SPI_TxISR_8BIT
     /tmp/ccXuIaHP.s:2435   .text.HAL_SPI_TransmitReceive_IT:00000000 $t
     /tmp/ccXuIaHP.s:2440   .text.HAL_SPI_TransmitReceive_IT:00000000 HAL_SPI_TransmitReceive_IT
     /tmp/ccXuIaHP.s:2671   .text.HAL_SPI_TransmitReceive_IT:00000120 $d
     /tmp/ccXuIaHP.s:5174   .text.SPI_2linesRxISR_16BIT:00000000 SPI_2linesRxISR_16BIT
     /tmp/ccXuIaHP.s:5104   .text.SPI_2linesTxISR_16BIT:00000000 SPI_2linesTxISR_16BIT
     /tmp/ccXuIaHP.s:4945   .text.SPI_2linesRxISR_8BIT:00000000 SPI_2linesRxISR_8BIT
     /tmp/ccXuIaHP.s:4854   .text.SPI_2linesTxISR_8BIT:00000000 SPI_2linesTxISR_8BIT
     /tmp/ccXuIaHP.s:2679   .text.HAL_SPI_Receive_IT:00000000 $t
     /tmp/ccXuIaHP.s:2684   .text.HAL_SPI_Receive_IT:00000000 HAL_SPI_Receive_IT
     /tmp/ccXuIaHP.s:2875   .text.HAL_SPI_Receive_IT:00000104 $d
     /tmp/ccXuIaHP.s:4635   .text.SPI_RxISR_16BIT:00000000 SPI_RxISR_16BIT
     /tmp/ccXuIaHP.s:4516   .text.SPI_RxISR_8BIT:00000000 SPI_RxISR_8BIT
     /tmp/ccXuIaHP.s:2881   .text.HAL_SPI_Transmit_DMA:00000000 $t
     /tmp/ccXuIaHP.s:2886   .text.HAL_SPI_Transmit_DMA:00000000 HAL_SPI_Transmit_DMA
     /tmp/ccXuIaHP.s:3087   .text.HAL_SPI_Transmit_DMA:00000128 $d
     /tmp/ccXuIaHP.s:4111   .text.SPI_DMAHalfTransmitCplt:00000000 SPI_DMAHalfTransmitCplt
     /tmp/ccXuIaHP.s:5325   .text.SPI_DMATransmitCplt:00000000 SPI_DMATransmitCplt
     /tmp/ccXuIaHP.s:5286   .text.SPI_DMAError:00000000 SPI_DMAError
     /tmp/ccXuIaHP.s:3094   .text.HAL_SPI_TransmitReceive_DMA:00000000 $t
     /tmp/ccXuIaHP.s:3099   .text.HAL_SPI_TransmitReceive_DMA:00000000 HAL_SPI_TransmitReceive_DMA
     /tmp/ccXuIaHP.s:3423   .text.HAL_SPI_TransmitReceive_DMA:000001f4 $d
     /tmp/ccXuIaHP.s:4157   .text.SPI_DMAHalfReceiveCplt:00000000 SPI_DMAHalfReceiveCplt
     /tmp/ccXuIaHP.s:5425   .text.SPI_DMAReceiveCplt:00000000 SPI_DMAReceiveCplt
     /tmp/ccXuIaHP.s:4203   .text.SPI_DMAHalfTransmitReceiveCplt:00000000 SPI_DMAHalfTransmitReceiveCplt
ARM GAS  /tmp/ccXuIaHP.s 			page 201


     /tmp/ccXuIaHP.s:5591   .text.SPI_DMATransmitReceiveCplt:00000000 SPI_DMATransmitReceiveCplt
     /tmp/ccXuIaHP.s:3432   .text.HAL_SPI_Receive_DMA:00000000 $t
     /tmp/ccXuIaHP.s:3437   .text.HAL_SPI_Receive_DMA:00000000 HAL_SPI_Receive_DMA
     /tmp/ccXuIaHP.s:3648   .text.HAL_SPI_Receive_DMA:00000134 $d
     /tmp/ccXuIaHP.s:3655   .text.HAL_SPI_Abort:00000000 $t
     /tmp/ccXuIaHP.s:3660   .text.HAL_SPI_Abort:00000000 HAL_SPI_Abort
     /tmp/ccXuIaHP.s:3895   .text.HAL_SPI_Abort:00000148 $d
     /tmp/ccXuIaHP.s:3901   .text.HAL_SPI_DMAPause:00000000 $t
     /tmp/ccXuIaHP.s:3906   .text.HAL_SPI_DMAPause:00000000 HAL_SPI_DMAPause
     /tmp/ccXuIaHP.s:3944   .text.HAL_SPI_DMAResume:00000000 $t
     /tmp/ccXuIaHP.s:3949   .text.HAL_SPI_DMAResume:00000000 HAL_SPI_DMAResume
     /tmp/ccXuIaHP.s:3987   .text.HAL_SPI_DMAStop:00000000 $t
     /tmp/ccXuIaHP.s:3992   .text.HAL_SPI_DMAStop:00000000 HAL_SPI_DMAStop
     /tmp/ccXuIaHP.s:4035   .text.HAL_SPI_TxCpltCallback:00000000 $t
     /tmp/ccXuIaHP.s:4040   .text.HAL_SPI_TxCpltCallback:00000000 HAL_SPI_TxCpltCallback
     /tmp/ccXuIaHP.s:4053   .text.HAL_SPI_RxCpltCallback:00000000 $t
     /tmp/ccXuIaHP.s:4058   .text.HAL_SPI_RxCpltCallback:00000000 HAL_SPI_RxCpltCallback
     /tmp/ccXuIaHP.s:4071   .text.HAL_SPI_TxRxCpltCallback:00000000 $t
     /tmp/ccXuIaHP.s:4076   .text.HAL_SPI_TxRxCpltCallback:00000000 HAL_SPI_TxRxCpltCallback
     /tmp/ccXuIaHP.s:4089   .text.HAL_SPI_TxHalfCpltCallback:00000000 $t
     /tmp/ccXuIaHP.s:4094   .text.HAL_SPI_TxHalfCpltCallback:00000000 HAL_SPI_TxHalfCpltCallback
     /tmp/ccXuIaHP.s:4107   .text.SPI_DMAHalfTransmitCplt:00000000 $t
     /tmp/ccXuIaHP.s:4135   .text.HAL_SPI_RxHalfCpltCallback:00000000 $t
     /tmp/ccXuIaHP.s:4140   .text.HAL_SPI_RxHalfCpltCallback:00000000 HAL_SPI_RxHalfCpltCallback
     /tmp/ccXuIaHP.s:4153   .text.SPI_DMAHalfReceiveCplt:00000000 $t
     /tmp/ccXuIaHP.s:4181   .text.HAL_SPI_TxRxHalfCpltCallback:00000000 $t
     /tmp/ccXuIaHP.s:4186   .text.HAL_SPI_TxRxHalfCpltCallback:00000000 HAL_SPI_TxRxHalfCpltCallback
     /tmp/ccXuIaHP.s:4199   .text.SPI_DMAHalfTransmitReceiveCplt:00000000 $t
     /tmp/ccXuIaHP.s:4227   .text.HAL_SPI_ErrorCallback:00000000 $t
     /tmp/ccXuIaHP.s:4232   .text.HAL_SPI_ErrorCallback:00000000 HAL_SPI_ErrorCallback
     /tmp/ccXuIaHP.s:4245   .text.SPI_CloseTx_ISR:00000000 $t
     /tmp/ccXuIaHP.s:4249   .text.SPI_CloseTx_ISR:00000000 SPI_CloseTx_ISR
     /tmp/ccXuIaHP.s:4329   .text.SPI_TxISR_8BIT:00000000 $t
     /tmp/ccXuIaHP.s:4381   .text.SPI_TxISR_16BIT:00000000 $t
     /tmp/ccXuIaHP.s:4435   .text.SPI_CloseRx_ISR:00000000 $t
     /tmp/ccXuIaHP.s:4439   .text.SPI_CloseRx_ISR:00000000 SPI_CloseRx_ISR
     /tmp/ccXuIaHP.s:4512   .text.SPI_RxISR_8BIT:00000000 $t
     /tmp/ccXuIaHP.s:4578   .text.SPI_RxISR_8BIT:00000054 $d
     /tmp/ccXuIaHP.s:4587   .text.SPI_RxISR_8BITCRC:00000000 SPI_RxISR_8BITCRC
     /tmp/ccXuIaHP.s:4583   .text.SPI_RxISR_8BITCRC:00000000 $t
     /tmp/ccXuIaHP.s:4631   .text.SPI_RxISR_16BIT:00000000 $t
     /tmp/ccXuIaHP.s:4699   .text.SPI_RxISR_16BIT:00000058 $d
     /tmp/ccXuIaHP.s:4708   .text.SPI_RxISR_16BITCRC:00000000 SPI_RxISR_16BITCRC
     /tmp/ccXuIaHP.s:4704   .text.SPI_RxISR_16BITCRC:00000000 $t
     /tmp/ccXuIaHP.s:4749   .text.SPI_CloseRxTx_ISR:00000000 $t
     /tmp/ccXuIaHP.s:4753   .text.SPI_CloseRxTx_ISR:00000000 SPI_CloseRxTx_ISR
     /tmp/ccXuIaHP.s:4850   .text.SPI_2linesTxISR_8BIT:00000000 $t
     /tmp/ccXuIaHP.s:4941   .text.SPI_2linesRxISR_8BIT:00000000 $t
     /tmp/ccXuIaHP.s:5039   .text.SPI_2linesRxISR_8BIT:00000090 $d
     /tmp/ccXuIaHP.s:5048   .text.SPI_2linesRxISR_8BITCRC:00000000 SPI_2linesRxISR_8BITCRC
     /tmp/ccXuIaHP.s:5044   .text.SPI_2linesRxISR_8BITCRC:00000000 $t
     /tmp/ccXuIaHP.s:5100   .text.SPI_2linesTxISR_16BIT:00000000 $t
     /tmp/ccXuIaHP.s:5170   .text.SPI_2linesRxISR_16BIT:00000000 $t
     /tmp/ccXuIaHP.s:5232   .text.SPI_2linesRxISR_16BIT:0000004c $d
     /tmp/ccXuIaHP.s:5241   .text.SPI_2linesRxISR_16BITCRC:00000000 SPI_2linesRxISR_16BITCRC
     /tmp/ccXuIaHP.s:5237   .text.SPI_2linesRxISR_16BITCRC:00000000 $t
     /tmp/ccXuIaHP.s:5282   .text.SPI_DMAError:00000000 $t
ARM GAS  /tmp/ccXuIaHP.s 			page 202


     /tmp/ccXuIaHP.s:5321   .text.SPI_DMATransmitCplt:00000000 $t
     /tmp/ccXuIaHP.s:5421   .text.SPI_DMAReceiveCplt:00000000 $t
     /tmp/ccXuIaHP.s:5587   .text.SPI_DMATransmitReceiveCplt:00000000 $t
     /tmp/ccXuIaHP.s:5752   .text.HAL_SPI_IRQHandler:00000000 $t
     /tmp/ccXuIaHP.s:5757   .text.HAL_SPI_IRQHandler:00000000 HAL_SPI_IRQHandler
     /tmp/ccXuIaHP.s:5954   .text.HAL_SPI_IRQHandler:00000100 $d
     /tmp/ccXuIaHP.s:5963   .text.SPI_DMAAbortOnError:00000000 SPI_DMAAbortOnError
     /tmp/ccXuIaHP.s:5959   .text.SPI_DMAAbortOnError:00000000 $t
     /tmp/ccXuIaHP.s:5991   .text.HAL_SPI_AbortCpltCallback:00000000 $t
     /tmp/ccXuIaHP.s:5996   .text.HAL_SPI_AbortCpltCallback:00000000 HAL_SPI_AbortCpltCallback
     /tmp/ccXuIaHP.s:6009   .text.HAL_SPI_Abort_IT:00000000 $t
     /tmp/ccXuIaHP.s:6014   .text.HAL_SPI_Abort_IT:00000000 HAL_SPI_Abort_IT
     /tmp/ccXuIaHP.s:6303   .text.HAL_SPI_Abort_IT:0000015c $d
     /tmp/ccXuIaHP.s:6438   .text.SPI_DMATxAbortCallback:00000000 SPI_DMATxAbortCallback
     /tmp/ccXuIaHP.s:6315   .text.SPI_DMARxAbortCallback:00000000 SPI_DMARxAbortCallback
     /tmp/ccXuIaHP.s:6311   .text.SPI_DMARxAbortCallback:00000000 $t
     /tmp/ccXuIaHP.s:6434   .text.SPI_DMATxAbortCallback:00000000 $t
     /tmp/ccXuIaHP.s:6554   .text.HAL_SPI_GetState:00000000 $t
     /tmp/ccXuIaHP.s:6559   .text.HAL_SPI_GetState:00000000 HAL_SPI_GetState
     /tmp/ccXuIaHP.s:6576   .text.HAL_SPI_GetError:00000000 $t
     /tmp/ccXuIaHP.s:6581   .text.HAL_SPI_GetError:00000000 HAL_SPI_GetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
